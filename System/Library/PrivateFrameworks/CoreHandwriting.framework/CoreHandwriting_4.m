void sub_1C4BC3F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *__p,uint64_t a26)
{
  void *v26;
  void *v27;
  void *v28;

  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4BC4DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  sub_1C496B66C(&a40);
  _Unwind_Resume(a1);
}

__n128 sub_1C4BC4FE0(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4BC5004(uint64_t a1)
{
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4BC501C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  v11 = *(void **)(a1 + 32);
  if (v11) {
    objc_msgSend_addPoint_(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  double v12 = *(double *)(a1 + 96);
  double v13 = a7 - *(double *)(a1 + 104);
  double v14 = *(double *)(a1 + 120);
  double v15 = a8 - *(double *)(a1 + 112);
  double v16 = *(double *)(a1 + 80) + v12 * v13 + v14 * v15;
  double v17 = *(double *)(a1 + 88) - v14 * v13 + v12 * v15;
  v18 = *(void **)(*(void *)(a1 + 40) + 8);
  v20 = (double *)v18[7];
  unint64_t v19 = v18[8];
  if ((unint64_t)v20 < v19)
  {
    double *v20 = v16;
    v20[1] = v17;
    uint64_t v21 = (uint64_t)(v20 + 2);
    goto LABEL_20;
  }
  v22 = (double *)v18[6];
  uint64_t v23 = ((char *)v20 - (char *)v22) >> 4;
  unint64_t v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v25 = v19 - (void)v22;
  if (v25 >> 3 > v24) {
    unint64_t v24 = v25 >> 3;
  }
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v26 = v24;
  }
  if (v26)
  {
    if (v26 >> 60) {
      sub_1C4949AA8();
    }
    v27 = (char *)operator new(16 * v26);
    v28 = (double *)&v27[16 * v23];
    v29 = &v27[16 * v26];
    double *v28 = v16;
    v28[1] = v17;
    uint64_t v21 = (uint64_t)(v28 + 2);
    if (v20 == v22) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  v28 = (double *)(16 * v23);
  v29 = 0;
  double *v28 = v16;
  v28[1] = v17;
  uint64_t v21 = 16 * v23 + 16;
  if (v20 != v22)
  {
    do
    {
LABEL_16:
      *((_OWORD *)v28 - 1) = *((_OWORD *)v20 - 1);
      v28 -= 2;
      v20 -= 2;
    }
    while (v20 != v22);
    v20 = (double *)v18[6];
  }
LABEL_18:
  v18[6] = v28;
  v18[7] = v21;
  v18[8] = v29;
  if (v20) {
    operator delete(v20);
  }
LABEL_20:
  v18[7] = v21;
  uint64_t v30 = *(void *)(*(void *)(a1 + 48) + 8);
  if (v16 < *(double *)(v30 + 24))
  {
    *(double *)(v30 + 24) = v16;
    uint64_t v31 = *(void *)(*(void *)(a1 + 56) + 8);
    if (v16 <= *(double *)(v31 + 24))
    {
LABEL_22:
      uint64_t v32 = *(void *)(*(void *)(a1 + 64) + 8);
      if (v17 >= *(double *)(v32 + 24)) {
        goto LABEL_23;
      }
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v31 = *(void *)(*(void *)(a1 + 56) + 8);
    if (v16 <= *(double *)(v31 + 24)) {
      goto LABEL_22;
    }
  }
  *(double *)(v31 + 24) = v16;
  uint64_t v32 = *(void *)(*(void *)(a1 + 64) + 8);
  if (v17 >= *(double *)(v32 + 24))
  {
LABEL_23:
    uint64_t v33 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v17 <= *(double *)(v33 + 24)) {
      return;
    }
    goto LABEL_24;
  }
LABEL_28:
  *(double *)(v32 + 24) = v17;
  uint64_t v33 = *(void *)(*(void *)(a1 + 72) + 8);
  if (v17 > *(double *)(v33 + 24)) {
LABEL_24:
  }
    *(double *)(v33 + 24) = v17;
}

void sub_1C4BC5378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC539C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC53B8(uint64_t a1, double *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  id v290 = a4;
  id v12 = a5;
  id v13 = a6;
  unint64_t v19 = v13;
  if (!a1) {
    goto LABEL_38;
  }
  v20 = objc_msgSend_writingDirectionSortedSubstrokes(v13, v14, v15, v16, v17, v18);
  uint64_t v25 = objc_msgSend_objectAtIndexedSubscript_(v20, v21, a7, v22, v23, v24);

  id v289 = v12;
  uint64_t v31 = objc_msgSend_firstObject(v12, v26, v27, v28, v29, v30);
  uint64_t v32 = objc_opt_class();
  v38 = objc_msgSend_substroke(v25, v33, v34, v35, v36, v37);
  v44 = objc_msgSend_strokeIdentifier(v38, v39, v40, v41, v42, v43);
  v50 = objc_msgSend_strokeProvider((void *)a1, v45, v46, v47, v48, v49);
  v54 = objc_msgSend_strokeForIdentifier_inStrokeProvider_(v32, v51, (uint64_t)v44, (uint64_t)v50, v52, v53);

  objc_msgSend_writingOrientation(v25, v55, v56, v57, v58, v59);
  double v61 = v60;
  double v63 = v62;
  objc_msgSend_strokeDeviation(v25, v64, v65, v66, v67, v68);
  double v70 = v69;
  double v72 = v71;
  v78 = objc_msgSend_coalescedLastSubstrokes(v19, v73, v74, v75, v76, v77);
  if ((unint64_t)objc_msgSend_count(v78, v79, v80, v81, v82, v83) >= 2)
  {
    v89 = objc_msgSend_writingDirectionSortedSubstrokes(v19, v84, v85, v86, v87, v88);
    uint64_t v95 = objc_msgSend_count(v89, v90, v91, v92, v93, v94) - 1;

    if (v95 != a7) {
      goto LABEL_9;
    }
    for (unint64_t i = 1; ; ++i)
    {
      v102 = objc_msgSend_coalescedLastSubstrokes(v19, v96, v97, v98, v99, v100);
      unint64_t v108 = objc_msgSend_count(v102, v103, v104, v105, v106, v107);

      if (i >= v108) {
        break;
      }
      v114 = objc_msgSend_coalescedLastSubstrokes(v19, v109, v110, v111, v112, v113);
      v119 = objc_msgSend_objectAtIndexedSubscript_(v114, v115, i, v116, v117, v118);
      objc_msgSend_writingOrientation(v119, v120, v121, v122, v123, v124);
      double v126 = v125;

      v132 = objc_msgSend_coalescedLastSubstrokes(v19, v127, v128, v129, v130, v131);
      v137 = objc_msgSend_objectAtIndexedSubscript_(v132, v133, i, v134, v135, v136);
      objc_msgSend_writingOrientation(v137, v138, v139, v140, v141, v142);
      double v144 = v143;

      v150 = objc_msgSend_coalescedLastSubstrokes(v19, v145, v146, v147, v148, v149);
      v155 = objc_msgSend_objectAtIndexedSubscript_(v150, v151, i, v152, v153, v154);
      objc_msgSend_strokeDeviation(v155, v156, v157, v158, v159, v160);
      double v162 = v161;

      v168 = objc_msgSend_coalescedLastSubstrokes(v19, v163, v164, v165, v166, v167);
      v173 = objc_msgSend_objectAtIndexedSubscript_(v168, v169, i, v170, v171, v172);
      objc_msgSend_strokeDeviation(v173, v174, v175, v176, v177, v178);
      double v61 = v61 + v126;
      double v63 = v63 + v144;
      double v70 = v70 + v162;
      double v72 = v72 + v179;
    }
    v180 = objc_msgSend_coalescedLastSubstrokes(v19, v109, v110, v111, v112, v113);
    uint64_t v186 = objc_msgSend_count(v180, v181, v182, v183, v184, v185);

    v192 = objc_msgSend_coalescedLastSubstrokes(v19, v187, v188, v189, v190, v191);
    uint64_t v198 = objc_msgSend_count(v192, v193, v194, v195, v196, v197);

    v204 = objc_msgSend_coalescedLastSubstrokes(v19, v199, v200, v201, v202, v203);
    uint64_t v210 = objc_msgSend_count(v204, v205, v206, v207, v208, v209);

    v78 = objc_msgSend_coalescedLastSubstrokes(v19, v211, v212, v213, v214, v215);
    double v61 = v61 / (double)(unint64_t)v186;
    double v63 = v63 / (double)(unint64_t)v198;
    double v70 = v70 / (double)(unint64_t)v210;
    double v72 = v72 / (double)(unint64_t)objc_msgSend_count(v78, v216, v217, v218, v219, v220);
  }

LABEL_9:
  objc_msgSend_averageWritingOrientation(v19, v96, v97, v98, v99, v100);
  double v222 = v221;
  objc_msgSend_averageWritingOrientation(v19, v223, v224, v225, v226, v227);
  double v233 = (v61 + v222) * 0.5;
  double v235 = (v63 + v234) * 0.5;
  double v236 = sqrt(v235 * v235 + v233 * v233);
  if (v236 != 0.0)
  {
    double v233 = v233 / v236;
    double v235 = v235 / v236;
  }
  if (*(unsigned char *)(a1 + 176))
  {
    objc_msgSend_clippedWritingOrientation_((void *)a1, v228, v229, v230, v231, v232, v233, v235);
    double v233 = v237;
    double v235 = v238;
  }
  objc_msgSend_averageStrokeDeviation(v19, v228, v229, v230, v231, v232);
  double v240 = v239;
  objc_msgSend_averageStrokeDeviation(v19, v241, v242, v243, v244, v245);
  double v251 = (v70 + v240) * 0.5;
  double v253 = (v72 + v252) * 0.5;
  if (v251 <= *(double *)(a1 + 32)) {
    double v251 = *(double *)(a1 + 32);
  }
  if (v253 <= *(double *)(a1 + 40)) {
    double v253 = *(double *)(a1 + 40);
  }
  double v254 = sqrt(v253 * v253 + v251 * v251);
  if (*(unsigned char *)(a1 + 178))
  {
    objc_msgSend_setWritingOrientation_(v31, v246, v247, v248, v249, v250, v233, v235);
    objc_msgSend_rotatedBounds(v31, v255, v256, v257, v258, v259);
    double v262 = sqrt(v260 * v260 + v261 * v261);
    if (v262 > v254)
    {
      v263 = objc_msgSend_strokeIdentifiers(v19, v246, v247, v248, v249, v250);
      unint64_t v269 = objc_msgSend_count(v263, v264, v265, v266, v267, v268);
      uint64_t v270 = *(void *)(a1 + 96);
      if (v270 >= 0) {
        uint64_t v271 = *(void *)(a1 + 96);
      }
      else {
        uint64_t v271 = v270 + 1;
      }

      if (v269 <= v271 >> 1)
      {
        double v272 = (v254 + v262) * 0.5;
        double v273 = v254 * 4.0;
      }
      else
      {
        double v272 = v262 * 0.1 + v254 * 0.9;
        double v273 = v254 + v254;
      }
      if (v272 >= v273) {
        double v254 = v273;
      }
      else {
        double v254 = v272;
      }
    }
  }
  v274 = objc_msgSend_coalescedLastSubstrokes(v19, v246, v247, v248, v249, v250);
  v280 = objc_msgSend_substroke(v31, v275, v276, v277, v278, v279);
  double v281 = sub_1C4BC5B1C((void *)a1, v274, v280, v54, v290, v233, v235);
  double v283 = v282;

  double v284 = v283 / v254;
  if (v281 / v254 >= 0.0)
  {
    double v285 = *(double *)(a1 + 104);
    v286 = a3;
    if (v284 >= 0.0)
    {
LABEL_30:
      double v287 = *(double *)(a1 + 120) * *(double *)(a1 + 112);
      if (!a2) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
  }
  else
  {
    double v285 = *(double *)(a1 + 128) * *(double *)(a1 + 104);
    v286 = a3;
    if (v284 >= 0.0) {
      goto LABEL_30;
    }
  }
  double v287 = *(double *)(a1 + 112);
  if (a2) {
LABEL_34:
  }
    *a2 = fabs(v281 / v254) * v285 + fabs(v284) * v287;
LABEL_35:
  if (v286) {
    void *v286 = v54;
  }

  id v12 = v289;
LABEL_38:
}

void sub_1C4BC5968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

double sub_1C4BC5B1C(void *a1, void *a2, void *a3, void *a4, void *a5, double a6, double a7)
{
  uint64_t v209 = *MEMORY[0x1E4F143B8];
  id v168 = a2;
  id v170 = a3;
  id v13 = a4;
  id v14 = a5;
  uint64_t v172 = a1;
  v169 = v14;
  if (a1)
  {
    if (!v14)
    {
      v20 = objc_opt_class();
      unint64_t v26 = objc_msgSend_strokeIdentifier(v170, v21, v22, v23, v24, v25);
      uint64_t v32 = objc_msgSend_strokeProvider(a1, v27, v28, v29, v30, v31);
      v169 = objc_msgSend_strokeForIdentifier_inStrokeProvider_(v20, v33, (uint64_t)v26, (uint64_t)v32, v34, v35);
    }
    objc_msgSend_bounds(v170, v15, v16, v17, v18, v19);
    double MidX = CGRectGetMidX(v210);
    objc_msgSend_bounds(v170, v37, v38, v39, v40, v41);
    double MidY = CGRectGetMidY(v211);
    uint64_t v43 = (long long *)MEMORY[0x1E4F1DAD8];
    double v45 = *MEMORY[0x1E4F1DAD8];
    double v44 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    long long v203 = 0u;
    long long v204 = 0u;
    long long v205 = 0u;
    long long v206 = 0u;
    id v46 = v168;
    uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v47, (uint64_t)&v203, (uint64_t)v208, 16, v48);
    if (v54)
    {
      uint64_t v55 = *(void *)v204;
      do
      {
        for (uint64_t i = 0; i != v54; ++i)
        {
          if (*(void *)v204 != v55) {
            objc_enumerationMutation(v46);
          }
          uint64_t v57 = *(void **)(*((void *)&v203 + 1) + 8 * i);
          uint64_t v58 = objc_msgSend_substroke(v57, v49, v50, v51, v52, v53);
          objc_msgSend_bounds(v58, v59, v60, v61, v62, v63);
          double v64 = CGRectGetMidX(v212);
          double v70 = objc_msgSend_substroke(v57, v65, v66, v67, v68, v69);
          objc_msgSend_bounds(v70, v71, v72, v73, v74, v75);
          double v76 = CGRectGetMidY(v213);

          double v45 = v45 + v64;
          double v44 = v44 + v76;
        }
        uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v49, (uint64_t)&v203, (uint64_t)v208, 16, v53);
      }
      while (v54);
    }

    if ((unint64_t)objc_msgSend_count(v46, v77, v78, v79, v80, v81) >= 2)
    {
      double v45 = v45 / (double)(unint64_t)objc_msgSend_count(v46, v82, v83, v84, v85, v86);
      double v44 = v44 / (double)(unint64_t)objc_msgSend_count(v46, v87, v88, v89, v90, v91);
    }
    uint64_t v199 = 0;
    uint64_t v200 = &v199;
    uint64_t v201 = 0x2020000000;
    uint64_t v202 = 0x7FEFFFFFFFFFFFFFLL;
    uint64_t v192 = 0;
    v193 = (double *)&v192;
    uint64_t v194 = 0x4012000000;
    uint64_t v195 = sub_1C4BC6DE8;
    uint64_t v196 = nullsub_45;
    uint64_t v197 = &unk_1C4CB5C62;
    long long v198 = *v43;
    unint64_t v92 = objc_msgSend_strokeAttributes(v169, v82, v83, v84, v85, v86);
    uint64_t v93 = objc_opt_class();
    v186[0] = MEMORY[0x1E4F143A8];
    v186[1] = 3221225472;
    v186[2] = sub_1C4BC6DF8;
    v186[3] = &unk_1E64E4DE0;
    double v190 = v45;
    double v191 = v44;
    id v187 = v170;
    uint64_t v188 = &v199;
    uint64_t v189 = &v192;
    objc_msgSend_enumeratePointsForStroke_interpolationType_resolution_usingBlock_(v93, v94, (uint64_t)v169, (v92 >> 2) & 1, 1, (uint64_t)v186);
    v200[3] = 0x7FEFFFFFFFFFFFFFLL;
    uint64_t v179 = 0;
    v180 = (double *)&v179;
    uint64_t v181 = 0x4012000000;
    uint64_t v182 = sub_1C4BC6DE8;
    uint64_t v183 = nullsub_45;
    uint64_t v184 = &unk_1C4CB5C62;
    long long v185 = *v43;
    long long v177 = 0u;
    long long v178 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    obuint64_t j = v46;
    uint64_t v102 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v95, (uint64_t)&v175, (uint64_t)v207, 16, v96);
    if (v102)
    {
      uint64_t v103 = *(void *)v176;
      do
      {
        for (uint64_t j = 0; j != v102; ++j)
        {
          if (*(void *)v176 != v103) {
            objc_enumerationMutation(obj);
          }
          uint64_t v105 = *(void **)(*((void *)&v175 + 1) + 8 * j);
          if (!v13) {
            goto LABEL_20;
          }
          uint64_t v106 = objc_msgSend_encodedStrokeIdentifier(v13, v97, v98, v99, v100, v101);
          uint64_t v112 = objc_msgSend_substroke(v105, v107, v108, v109, v110, v111);
          uint64_t v118 = objc_msgSend_strokeIdentifier(v112, v113, v114, v115, v116, v117);
          char isEqual = objc_msgSend_isEqual_(v106, v119, (uint64_t)v118, v120, v121, v122);

          if ((isEqual & 1) == 0)
          {
LABEL_20:
            uint64_t v124 = objc_msgSend_strokeProvider(v172, v97, v98, v99, v100, v101);
            uint64_t v130 = objc_msgSend_substroke(v105, v125, v126, v127, v128, v129);
            uint64_t v136 = objc_msgSend_strokeIdentifier(v130, v131, v132, v133, v134, v135);
            uint64_t v141 = objc_msgSend_strokeIdentifierFromData_(v124, v137, (uint64_t)v136, v138, v139, v140);

            uint64_t v147 = objc_msgSend_strokeProvider(v172, v142, v143, v144, v145, v146);
            uint64_t v152 = objc_msgSend_strokeForIdentifier_(v147, v148, (uint64_t)v141, v149, v150, v151);

            id v13 = (id)v152;
          }
          unint64_t v153 = objc_msgSend_strokeAttributes(v13, v97, v98, v99, v100, v101);
          uint64_t v154 = objc_opt_class();
          v174[0] = MEMORY[0x1E4F143A8];
          v174[1] = 3221225472;
          v174[2] = sub_1C4BC6E90;
          v174[3] = &unk_1E64E4DE0;
          *(double *)&v174[7] = MidX;
          *(double *)&v174[8] = MidY;
          v174[4] = v105;
          v174[5] = &v199;
          v174[6] = &v179;
          objc_msgSend_enumeratePointsForStroke_interpolationType_resolution_usingBlock_(v154, v155, (uint64_t)v13, (v153 >> 2) & 1, 1, (uint64_t)v174);
        }
        uint64_t v102 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v97, (uint64_t)&v175, (uint64_t)v207, 16, v101);
      }
      while (v102);
    }

    double v167 = a7;
    double v173 = a6;
    double v156 = v193[6];
    double v157 = v193[7];
    double v158 = v180[6];
    double v159 = v180[7];
    if ((unint64_t)objc_msgSend_count(obj, v160, v161, v162, v163, v164) <= 1) {
      double v165 = v167 * ((MidY - v44 + (v159 - v44 + MidY - v157 + (v157 - v159) * 2.0) * 0.25) * 0.5)
    }
           + (MidX - v45 + (v158 - v45 + MidX - v156 + (v156 - v158) * 2.0) * 0.25) * 0.5 * v173;
    else {
      double v165 = (v167 * ((MidY - v44 + (v159 - v44 + MidY - v157 + (v157 - v159) * 2.0) * 0.25) * 0.5)
    }
            + (MidX - v45 + (v158 - v45 + MidX - v156 + (v156 - v158) * 2.0) * 0.25) * 0.5 * v173)
           * 0.8;
    _Block_object_dispose(&v179, 8);

    _Block_object_dispose(&v192, 8);
    _Block_object_dispose(&v199, 8);
  }
  else
  {
    double v165 = 0.0;
  }

  return v165;
}

void sub_1C4BC619C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC6984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC6CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC6D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC6D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC6D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC6D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC6DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4BC6DE8(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t sub_1C4BC6DF8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  uint64_t result = objc_msgSend_startTimestamp(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  if (v20 <= a9)
  {
    double v21 = vabdd_f64(*(double *)(a1 + 56), a7) + vabdd_f64(*(double *)(a1 + 64), a8);
    uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8);
    if (v21 < *(double *)(v22 + 24))
    {
      *(double *)(v22 + 24) = v21;
      uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8);
      *(double *)(v23 + 48) = a7;
      *(double *)(v23 + 56) = a8;
    }
    uint64_t result = objc_msgSend_endTimestamp(*(void **)(a1 + 32), v15, v16, v17, v18, v19);
    *a2 = v24 <= a9;
  }
  return result;
}

void sub_1C4BC6E90(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  objc_msgSend_substroke(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  id v35 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_startTimestamp(v35, v14, v15, v16, v17, v18);
  double v20 = v19;

  if (v20 <= a9)
  {
    double v26 = vabdd_f64(*(double *)(a1 + 56), a7) + vabdd_f64(*(double *)(a1 + 64), a8);
    uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 8);
    if (v26 < *(double *)(v27 + 24))
    {
      *(double *)(v27 + 24) = v26;
      uint64_t v28 = *(void *)(*(void *)(a1 + 48) + 8);
      *(double *)(v28 + 48) = a7;
      *(double *)(v28 + 56) = a8;
    }
    objc_msgSend_substroke(*(void **)(a1 + 32), v21, v22, v23, v24, v25);
    id v36 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_endTimestamp(v36, v29, v30, v31, v32, v33);
    *a2 = v34 <= a9;
  }
}

void sub_1C4BC6F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC6F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC7400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC7484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC74A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC74B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC74D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC74E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC7648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC7658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC7668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC767C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC768C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BC769C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v12 = objc_msgSend_substroke(v5, v7, v8, v9, v10, v11);
  objc_msgSend_bounds(v12, v13, v14, v15, v16, v17);
  double MidX = CGRectGetMidX(v57);
  uint64_t v24 = objc_msgSend_substroke(v5, v19, v20, v21, v22, v23);
  objc_msgSend_bounds(v24, v25, v26, v27, v28, v29);
  double MidY = CGRectGetMidY(v58);

  id v36 = objc_msgSend_substroke(v6, v31, v32, v33, v34, v35);
  objc_msgSend_bounds(v36, v37, v38, v39, v40, v41);
  double v42 = CGRectGetMidX(v59);
  uint64_t v48 = objc_msgSend_substroke(v6, v43, v44, v45, v46, v47);
  objc_msgSend_bounds(v48, v49, v50, v51, v52, v53);
  double v54 = CGRectGetMidY(v60);

  if ((v54 - MidY) * *(double *)(a1 + 40) + (v42 - MidX) * *(double *)(a1 + 32) <= 0.0) {
    uint64_t v55 = 1;
  }
  else {
    uint64_t v55 = -1;
  }

  return v55;
}

void sub_1C4BC779C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC77B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC77C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC77E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC77FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC7DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC7DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC7E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4BC891C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v44 = a24;
    if (!a24)
    {
LABEL_3:
      uint64_t v45 = a27;
      if (!a27) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v44 = a24;
    if (!a24) {
      goto LABEL_3;
    }
  }
  operator delete(v44);
  uint64_t v45 = a27;
  if (!a27)
  {
LABEL_4:
    uint64_t v46 = a30;
    if (!a30)
    {
LABEL_10:
      if (a42) {
        operator delete(a42);
      }

      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(v46);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v45);
  uint64_t v46 = a30;
  if (!a30) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_1C4BC8F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v32 = *(void **)a11;
  if (*(void *)a11)
  {
    *(void *)(a11 + 8) = v32;
    operator delete(v32);
    uint64_t v33 = __p;
    if (!__p)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v33 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v33);

  _Unwind_Resume(a1);
}

void sub_1C4BCA164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a30)
  {
    operator delete(a30);
    uint64_t v35 = *(void **)(v33 - 176);
    if (!v35)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v35 = *(void **)(v33 - 176);
    if (!v35) {
      goto LABEL_7;
    }
  }
  *(void *)(v33 - 168) = v35;
  operator delete(v35);

  _Unwind_Resume(a1);
}

void sub_1C4BCAA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1C4BCACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t sub_1C4BCAD10(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  objc_msgSend_bounds(v4, v6, v7, v8, v9, v10);
  double v12 = v11;
  objc_msgSend_bounds(v4, v13, v14, v15, v16, v17);
  double v19 = v18;
  objc_msgSend_bounds(v5, v20, v21, v22, v23, v24);
  double v26 = v25;
  objc_msgSend_bounds(v5, v27, v28, v29, v30, v31);
  if (v12 * v19 > v26 * v32) {
    uint64_t v33 = 1;
  }
  else {
    uint64_t v33 = -1;
  }

  return v33;
}

void sub_1C4BCADA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCADB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCADCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCADE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1C4BCADF4(void *a1, void *a2, int a3)
{
  v107[2] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  double v11 = v5;
  if (a1)
  {
    objc_msgSend_averageWritingOrientation(v5, v6, v7, v8, v9, v10);
    long double v18 = v17;
    long double v20 = v19;
    unint64_t v21 = 0;
    double v22 = 0.0;
    double v23 = 0.0;
    while (1)
    {
      uint64_t v24 = objc_msgSend_writingDirectionSortedSubstrokes(v11, v12, v13, v14, v15, v16);
      unint64_t v30 = objc_msgSend_count(v24, v25, v26, v27, v28, v29);

      if (v21 >= v30) {
        break;
      }
      id v36 = objc_msgSend_writingDirectionSortedSubstrokes(v11, v31, v32, v33, v34, v35);
      uint64_t v41 = objc_msgSend_objectAtIndexedSubscript_(v36, v37, v21, v38, v39, v40);
      objc_msgSend_writingOrientation(v41, v42, v43, v44, v45, v46);
      double v48 = v47;
      double v50 = v49;

      double v22 = v22 + (v48 - v18) * (v48 - v18);
      double v23 = v23 + (v50 - v20) * (v50 - v20);
      ++v21;
    }
    uint64_t v51 = objc_msgSend_writingDirectionSortedSubstrokes(v11, v31, v32, v33, v34, v35);
    uint64_t v57 = objc_msgSend_count(v51, v52, v53, v54, v55, v56);

    uint64_t v63 = objc_msgSend_writingDirectionSortedSubstrokes(v11, v58, v59, v60, v61, v62);
    uint64_t v69 = objc_msgSend_count(v63, v64, v65, v66, v67, v68);

    if (a3)
    {
      objc_msgSend_clippedWritingOrientation_(a1, v70, v71, v72, v73, v74, (double)v18, (double)v20);
      long double v18 = v75;
      long double v20 = v76;
    }
    double v77 = atan2(v20, v18);
    uint64_t v83 = objc_msgSend_writingDirectionSortedSubstrokes(v11, v78, v79, v80, v81, v82);
    uint64_t v89 = objc_msgSend_count(v83, v84, v85, v86, v87, v88);
    uint64_t v90 = a1[12];

    uint64_t v96 = objc_msgSend_numberWithDouble_(NSNumber, v91, v92, v93, v94, v95, v77);
    v107[0] = v96;
    uint64_t v102 = objc_msgSend_numberWithDouble_(NSNumber, v97, v98, v99, v100, v101, (double)(unint64_t)v89/ (double)v90/ (sqrt(sqrt(v22 / (double)(unint64_t)v57) + sqrt(v23 / (double)(unint64_t)v69)) + 1.0));
    v107[1] = v102;
    a1 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v103, (uint64_t)v107, 2, v104, v105);
  }
  return a1;
}

void sub_1C4BCB044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCB0CC(uint64_t *a1, double a2, double a3, double a4, uint64_t a5, void *a6)
{
  id v91 = a6;
  self;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v15 = objc_msgSend_writingDirectionSortedSubstrokes(v91, v10, v11, v12, v13, v14);
  unint64_t v21 = objc_msgSend_count(v15, v16, v17, v18, v19, v20);
  unint64_t v22 = v21;
  double v23 = (unsigned char *)*a1;
  if (v21 > (a1[2] - *a1) >> 5)
  {
    if (v21 >> 59) {
      sub_1C494A220();
    }
    uint64_t v24 = (unsigned char *)a1[1];
    double v25 = (char *)operator new(32 * v21);
    uint64_t v26 = &v25[(v24 - v23) & 0xFFFFFFFFFFFFFFE0];
    uint64_t v27 = v26;
    if (v24 != v23)
    {
      uint64_t v28 = &v25[(v24 - v23) & 0xFFFFFFFFFFFFFFE0];
      do
      {
        long long v29 = *((_OWORD *)v24 - 1);
        uint64_t v27 = v28 - 32;
        *((_OWORD *)v28 - 2) = *((_OWORD *)v24 - 2);
        *((_OWORD *)v28 - 1) = v29;
        v24 -= 32;
        v28 -= 32;
      }
      while (v24 != v23);
    }
    *a1 = (uint64_t)v27;
    a1[1] = (uint64_t)v26;
    a1[2] = (uint64_t)&v25[32 * v22];
    if (v23) {
      operator delete(v23);
    }
  }

  for (unint64_t i = 0; ; ++i)
  {
    uint64_t v37 = objc_msgSend_writingDirectionSortedSubstrokes(v91, v30, v31, v32, v33, v34);
    unint64_t v43 = objc_msgSend_count(v37, v38, v39, v40, v41, v42);

    if (i >= v43) {
      break;
    }
    uint64_t v44 = objc_opt_class();
    double v50 = objc_msgSend_writingDirectionSortedSubstrokes(v91, v45, v46, v47, v48, v49);
    uint64_t v55 = objc_msgSend_objectAtIndexedSubscript_(v50, v51, i, v52, v53, v54);
    uint64_t v61 = objc_msgSend_substroke(v55, v56, v57, v58, v59, v60);
    uint64_t v67 = objc_msgSend_convexHull(v61, v62, v63, v64, v65, v66);
    objc_msgSend_boundingBoxOfPoints_rotatedAroundPoint_byAngle_(v44, v68, v67, v69, v70, v71, a2, a3, a4);
    uint64_t v73 = v72;
    uint64_t v75 = v74;
    uint64_t v77 = v76;
    uint64_t v79 = v78;

    uint64_t v81 = (void *)a1[1];
    unint64_t v80 = a1[2];
    if ((unint64_t)v81 < v80)
    {
      *uint64_t v81 = v73;
      v81[1] = v75;
      id v36 = v81 + 4;
      v81[2] = v77;
      v81[3] = v79;
      goto LABEL_10;
    }
    uint64_t v82 = (void *)*a1;
    uint64_t v83 = ((uint64_t)v81 - *a1) >> 5;
    unint64_t v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 59) {
      sub_1C494A220();
    }
    uint64_t v85 = v80 - (void)v82;
    if (v85 >> 4 > v84) {
      unint64_t v84 = v85 >> 4;
    }
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v86 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v86 = v84;
    }
    if (v86)
    {
      if (v86 >> 59) {
        sub_1C4949AA8();
      }
      uint64_t v87 = (char *)operator new(32 * v86);
      uint64_t v88 = &v87[32 * v83];
      *(void *)uint64_t v88 = v73;
      *((void *)v88 + 1) = v75;
      *((void *)v88 + 2) = v77;
      *((void *)v88 + 3) = v79;
      uint64_t v89 = (uint64_t)v88;
      if (v81 == v82)
      {
LABEL_22:
        id v36 = v88 + 32;
        *a1 = v89;
        a1[1] = (uint64_t)(v88 + 32);
        a1[2] = (uint64_t)&v87[32 * v86];
        if (v81) {
          goto LABEL_27;
        }
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v87 = 0;
      uint64_t v88 = (char *)(32 * v83);
      *(void *)uint64_t v88 = v73;
      *((void *)v88 + 1) = v75;
      *((void *)v88 + 2) = v77;
      *((void *)v88 + 3) = v79;
      uint64_t v89 = 32 * v83;
      if (v81 == v82) {
        goto LABEL_22;
      }
    }
    do
    {
      long long v90 = *((_OWORD *)v81 - 1);
      *(_OWORD *)(v89 - 32) = *((_OWORD *)v81 - 2);
      *(_OWORD *)(v89 - 16) = v90;
      v89 -= 32;
      v81 -= 4;
    }
    while (v81 != v82);
    uint64_t v81 = v82;
    id v36 = v88 + 32;
    *a1 = v89;
    a1[1] = (uint64_t)(v88 + 32);
    a1[2] = (uint64_t)&v87[32 * v86];
    if (v81) {
LABEL_27:
    }
      operator delete(v81);
LABEL_10:
    a1[1] = (uint64_t)v36;
  }
}

void sub_1C4BCB3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void sub_1C4BCBD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BCBF78(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v10 = objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  uint64_t v15 = objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v11, (uint64_t)v5, v12, v13, v14);
  uint64_t v19 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(*(void **)(a1 + 32), v16, (uint64_t)v10, (uint64_t)v15, v17, v18);

  return v19;
}

void sub_1C4BCBFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCC018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCC764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1C49A1374(a41);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BCC948(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v10 = objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  uint64_t v15 = objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v11, (uint64_t)v5, v12, v13, v14);
  uint64_t v19 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(*(void **)(a1 + 32), v16, (uint64_t)v10, (uint64_t)v15, v17, v18);

  return v19;
}

void sub_1C4BCC9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCC9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCCDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }

  _Unwind_Resume(a1);
}

void sub_1C4BCCF08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCCF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCCFA4(unint64_t a1, CGRect *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = (CGRect *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                v153.origin.CGFloat x = a2[-1].origin.x;
                v153.origin.CGFloat y = a2[-1].origin.y;
                uint64_t v49 = a2 - 1;
                v153.size.CGFloat width = v49->size.width;
                v153.size.CGFloat height = v49->size.height;
                double MaxX = CGRectGetMaxX(v153);
                if (MaxX < CGRectGetMaxX(*(CGRect *)a1))
                {
                  CGPoint v126 = *(CGPoint *)a1;
                  CGSize v131 = *(CGSize *)(a1 + 16);
                  CGSize size = v49->size;
                  *(CGPoint *)a1 = v49->origin;
                  *(CGSize *)(a1 + 16) = size;
                  v49->CGPoint origin = v126;
                  v49->CGSize size = v131;
                }
                break;
              case 3:
                sub_1C4BCDAE4((CGRect *)a1, (CGPoint *)(a1 + 32), &a2[-1].origin);
                break;
              case 4:
                sub_1C4BCDE44((CGRect *)a1, (CGPoint *)(a1 + 32), (CGPoint *)(a1 + 64), &a2[-1].origin);
                break;
              case 5:
                sub_1C4BCD9C0((CGRect *)a1, (CGPoint *)(a1 + 32), (CGPoint *)(a1 + 64), (CGPoint *)(a1 + 96), &a2[-1].origin);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 767)
          {
            uint64_t v52 = (CGRect *)(a1 + 32);
            BOOL v54 = (CGRect *)a1 == a2 || v52 == a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 0;
                uint64_t v56 = (CGRect *)a1;
                do
                {
                  p_CGFloat x = &v52->origin.x;
                  double v59 = CGRectGetMaxX(v56[1]);
                  if (v59 < CGRectGetMaxX(*v56))
                  {
                    CGFloat v60 = *p_x;
                    CGFloat y = v56[1].origin.y;
                    CGFloat width = v56[1].size.width;
                    uint64_t v63 = v55;
                    CGFloat height = v56[1].size.height;
                    do
                    {
                      uint64_t v65 = a1 + v63;
                      long long v66 = *(_OWORD *)(a1 + v63 + 16);
                      *(_OWORD *)(v65 + 32) = *(_OWORD *)(a1 + v63);
                      *(_OWORD *)(v65 + 48) = v66;
                      if (!v63)
                      {
                        uint64_t v57 = (CGFloat *)a1;
                        goto LABEL_74;
                      }
                      v154.origin.CGFloat x = v60;
                      v154.origin.CGFloat y = y;
                      v154.size.CGFloat width = width;
                      v154.size.CGFloat height = height;
                      double v67 = CGRectGetMaxX(v154);
                      v63 -= 32;
                    }
                    while (v67 < CGRectGetMaxX(*(CGRect *)(v65 - 32)));
                    uint64_t v57 = (CGFloat *)(a1 + v63 + 32);
LABEL_74:
                    *uint64_t v57 = v60;
                    v57[1] = y;
                    v57[2] = width;
                    v57[3] = height;
                  }
                  uint64_t v52 = (CGRect *)(p_x + 4);
                  v55 += 32;
                  uint64_t v56 = (CGRect *)p_x;
                }
                while (p_x + 4 != (CGFloat *)a2);
              }
            }
            else if (!v54)
            {
              do
              {
                uint64_t v109 = (void *)&v52->origin.x;
                double v110 = CGRectGetMaxX(*(CGRect *)(a1 + 32));
                if (v110 < CGRectGetMaxX(*(CGRect *)a1))
                {
                  uint64_t v111 = *v109;
                  uint64_t v112 = *(void *)(a1 + 40);
                  uint64_t v113 = *(void *)(a1 + 48);
                  uint64_t v114 = v109;
                  uint64_t v115 = *(void *)(a1 + 56);
                  do
                  {
                    long long v117 = *(v114 - 1);
                    _OWORD *v114 = *(v114 - 2);
                    v114[1] = v117;
                    uint64_t v118 = v111;
                    *(void *)&long long v117 = v112;
                    uint64_t v119 = v113;
                    uint64_t v120 = v115;
                    double v121 = CGRectGetMaxX(*(CGRect *)((char *)&v117 - 8));
                    CGRect v157 = *(CGRect *)((unsigned char *)v114 - 2);
                    uint64_t v116 = v114 - 2;
                    v114 -= 2;
                  }
                  while (v121 < CGRectGetMaxX(v157));
                  *uint64_t v116 = v111;
                  v116[1] = v112;
                  v116[2] = v113;
                  v116[3] = v115;
                }
                uint64_t v52 = (CGRect *)(v109 + 4);
                a1 = (unint64_t)v109;
              }
              while (v109 + 4 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if ((CGRect *)a1 != a2)
            {
              uint64_t v122 = a2;
              int64_t v68 = (unint64_t)(v12 - 2) >> 1;
              int64_t v69 = v68;
              do
              {
                int64_t v70 = v69;
                if (v68 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  unint64_t v72 = a1 + 32 * v71;
                  if (2 * v69 + 2 < v12)
                  {
                    double v73 = CGRectGetMaxX(*(CGRect *)v72);
                    if (v73 < CGRectGetMaxX(*(CGRect *)(v72 + 32)))
                    {
                      v72 += 32;
                      uint64_t v71 = 2 * v70 + 2;
                    }
                  }
                  uint64_t v74 = (CGRect *)(a1 + 32 * v70);
                  double v75 = CGRectGetMaxX(*(CGRect *)v72);
                  if (v75 >= CGRectGetMaxX(*v74))
                  {
                    CGFloat x = v74->origin.x;
                    CGFloat v77 = v74->origin.y;
                    CGFloat v78 = v74->size.width;
                    CGFloat v79 = v74->size.height;
                    do
                    {
                      uint64_t v81 = (_OWORD *)&v74->origin.x;
                      uint64_t v74 = (CGRect *)v72;
                      long long v82 = *(_OWORD *)(v72 + 16);
                      *uint64_t v81 = *(_OWORD *)v72;
                      v81[1] = v82;
                      if (v68 < v71) {
                        break;
                      }
                      uint64_t v83 = 2 * v71;
                      uint64_t v71 = (2 * v71) | 1;
                      unint64_t v72 = a1 + 32 * v71;
                      uint64_t v84 = v83 + 2;
                      if (v83 + 2 < v12)
                      {
                        double v85 = CGRectGetMaxX(*(CGRect *)v72);
                        if (v85 < CGRectGetMaxX(*(CGRect *)(v72 + 32)))
                        {
                          v72 += 32;
                          uint64_t v71 = v84;
                        }
                      }
                      double v80 = CGRectGetMaxX(*(CGRect *)v72);
                      v155.origin.CGFloat x = x;
                      v155.origin.CGFloat y = v77;
                      v155.size.CGFloat width = v78;
                      v155.size.CGFloat height = v79;
                    }
                    while (v80 >= CGRectGetMaxX(v155));
                    v74->origin.CGFloat x = x;
                    v74->origin.CGFloat y = v77;
                    v74->size.CGFloat width = v78;
                    v74->size.CGFloat height = v79;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v86 = (unint64_t)v11 >> 5;
              uint64_t v87 = (_OWORD *)&v122->origin.x;
              do
              {
                uint64_t v89 = v87;
                uint64_t v90 = 0;
                long long v127 = *(_OWORD *)a1;
                long long v132 = *(_OWORD *)(a1 + 16);
                unint64_t v91 = a1;
                do
                {
                  uint64_t v93 = (_OWORD *)v91;
                  v91 += 32 * v90 + 32;
                  uint64_t v94 = 2 * v90;
                  uint64_t v90 = (2 * v90) | 1;
                  uint64_t v95 = v94 + 2;
                  if (v94 + 2 < v86)
                  {
                    double v96 = CGRectGetMaxX(*(CGRect *)v91);
                    if (v96 < CGRectGetMaxX(*(CGRect *)(v91 + 32)))
                    {
                      v91 += 32;
                      uint64_t v90 = v95;
                    }
                  }
                  long long v92 = *(_OWORD *)(v91 + 16);
                  *uint64_t v93 = *(_OWORD *)v91;
                  v93[1] = v92;
                }
                while (v90 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
                v87 -= 2;
                if ((_OWORD *)v91 == v89 - 2)
                {
                  *(_OWORD *)unint64_t v91 = v127;
                  *(_OWORD *)(v91 + 16) = v132;
                }
                else
                {
                  long long v97 = *(v89 - 1);
                  *(_OWORD *)unint64_t v91 = *v87;
                  *(_OWORD *)(v91 + 16) = v97;
                  *uint64_t v87 = v127;
                  *(v89 - 1) = v132;
                  uint64_t v98 = v91 - a1 + 32;
                  if (v98 >= 33)
                  {
                    unint64_t v99 = (((unint64_t)v98 >> 5) - 2) >> 1;
                    unint64_t v100 = a1 + 32 * v99;
                    double v101 = CGRectGetMaxX(*(CGRect *)v100);
                    if (v101 < CGRectGetMaxX(*(CGRect *)v91))
                    {
                      CGFloat v102 = *(double *)v91;
                      CGFloat v103 = *(double *)(v91 + 8);
                      CGFloat v104 = *(double *)(v91 + 16);
                      CGFloat v105 = *(double *)(v91 + 24);
                      do
                      {
                        uint64_t v106 = (_OWORD *)v91;
                        unint64_t v91 = v100;
                        long long v107 = *(_OWORD *)(v100 + 16);
                        *uint64_t v106 = *(_OWORD *)v100;
                        v106[1] = v107;
                        if (!v99) {
                          break;
                        }
                        unint64_t v99 = (v99 - 1) >> 1;
                        unint64_t v100 = a1 + 32 * v99;
                        double v108 = CGRectGetMaxX(*(CGRect *)v100);
                        v156.origin.CGFloat x = v102;
                        v156.origin.CGFloat y = v103;
                        v156.size.CGFloat width = v104;
                        v156.size.CGFloat height = v105;
                      }
                      while (v108 < CGRectGetMaxX(v156));
                      *(CGFloat *)unint64_t v91 = v102;
                      *(CGFloat *)(v91 + 8) = v103;
                      *(CGFloat *)(v91 + 16) = v104;
                      *(CGFloat *)(v91 + 24) = v105;
                    }
                  }
                }
              }
              while (v86-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = a1 + 32 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 <= 0x1000) {
            break;
          }
          sub_1C4BCDAE4((CGRect *)a1, (CGPoint *)v14, &a2[-1].origin);
          uint64_t v15 = 32 * v13;
          sub_1C4BCDAE4((CGRect *)(a1 + 32), (CGPoint *)(v15 + a1 - 32), &a2[-2].origin);
          sub_1C4BCDAE4((CGRect *)(a1 + 64), (CGPoint *)(a1 + 32 + v15), &a2[-3].origin);
          sub_1C4BCDAE4((CGRect *)(v15 + a1 - 32), (CGPoint *)v14, (CGPoint *)(a1 + 32 + v15));
          long long v123 = *(_OWORD *)a1;
          long long v128 = *(_OWORD *)(a1 + 16);
          long long v16 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 16) = v16;
          *(_OWORD *)unint64_t v14 = v123;
          *(_OWORD *)(v14 + 16) = v128;
          --a3;
          if (a4) {
            goto LABEL_11;
          }
LABEL_10:
          double v17 = CGRectGetMaxX(*(CGRect *)(a1 - 32));
          if (v17 < CGRectGetMaxX(*(CGRect *)a1)) {
            goto LABEL_11;
          }
          CGFloat v34 = *(double *)a1;
          CGFloat v35 = *(double *)(a1 + 8);
          CGFloat v36 = *(double *)(a1 + 16);
          CGFloat v37 = *(double *)(a1 + 24);
          v143.origin.CGFloat x = *(CGFloat *)a1;
          v143.origin.CGFloat y = v35;
          v143.size.CGFloat width = v36;
          v143.size.CGFloat height = v37;
          double v38 = CGRectGetMaxX(v143);
          if (v38 >= CGRectGetMaxX(a2[-1]))
          {
            uint64_t v40 = (CGRect *)(a1 + 32);
            do
            {
              uint64_t v10 = v40;
              if (v40 >= a2) {
                break;
              }
              v146.origin.CGFloat x = v34;
              v146.origin.CGFloat y = v35;
              v146.size.CGFloat width = v36;
              v146.size.CGFloat height = v37;
              double v41 = CGRectGetMaxX(v146);
              CGFloat v42 = CGRectGetMaxX(*v10);
              uint64_t v40 = v10 + 1;
            }
            while (v41 >= v42);
          }
          else
          {
            uint64_t v10 = (CGRect *)a1;
            do
            {
              v144.origin.CGFloat x = v34;
              v144.origin.CGFloat y = v35;
              v144.size.CGFloat width = v36;
              v144.size.CGFloat height = v37;
              double v39 = CGRectGetMaxX(v144);
              v145.origin.CGFloat x = v10[1].origin.x;
              v145.origin.CGFloat y = v10[1].origin.y;
              ++v10;
              v145.size.CGFloat width = v10->size.width;
              v145.size.CGFloat height = v10->size.height;
            }
            while (v39 >= CGRectGetMaxX(v145));
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v43 = a2;
            do
            {
              v147.origin.CGFloat x = v34;
              v147.origin.CGFloat y = v35;
              v147.size.CGFloat width = v36;
              v147.size.CGFloat height = v37;
              double v44 = CGRectGetMaxX(v147);
              v148.origin.CGFloat x = v43[-1].origin.x;
              v148.origin.CGFloat y = v43[-1].origin.y;
              --v43;
              v148.size.CGFloat width = v43->size.width;
              v148.size.CGFloat height = v43->size.height;
            }
            while (v44 < CGRectGetMaxX(v148));
          }
          while (v10 < v43)
          {
            CGPoint origin = v10->origin;
            CGSize v130 = v10->size;
            CGSize v45 = v43->size;
            v10->CGPoint origin = v43->origin;
            v10->CGSize size = v45;
            v43->CGPoint origin = origin;
            v43->CGSize size = v130;
            do
            {
              v149.origin.CGFloat x = v34;
              v149.origin.CGFloat y = v35;
              v149.size.CGFloat width = v36;
              v149.size.CGFloat height = v37;
              double v46 = CGRectGetMaxX(v149);
              v150.origin.CGFloat x = v10[1].origin.x;
              v150.origin.CGFloat y = v10[1].origin.y;
              ++v10;
              v150.size.CGFloat width = v10->size.width;
              v150.size.CGFloat height = v10->size.height;
            }
            while (v46 >= CGRectGetMaxX(v150));
            do
            {
              v151.origin.CGFloat x = v34;
              v151.origin.CGFloat y = v35;
              v151.size.CGFloat width = v36;
              v151.size.CGFloat height = v37;
              double v47 = CGRectGetMaxX(v151);
              v152.origin.CGFloat x = v43[-1].origin.x;
              v152.origin.CGFloat y = v43[-1].origin.y;
              --v43;
              v152.size.CGFloat width = v43->size.width;
              v152.size.CGFloat height = v43->size.height;
            }
            while (v47 < CGRectGetMaxX(v152));
          }
          BOOL v4 = (unint64_t)&v10[-1] >= a1;
          BOOL v5 = &v10[-1] == (CGRect *)a1;
          if (&v10[-1] != (CGRect *)a1)
          {
            CGSize v48 = v10[-1].size;
            *(CGPoint *)a1 = v10[-1].origin;
            *(CGSize *)(a1 + 16) = v48;
          }
          a4 = 0;
          v10[-1].origin.CGFloat x = v34;
          v10[-1].origin.CGFloat y = v35;
          v10[-1].size.CGFloat width = v36;
          v10[-1].size.CGFloat height = v37;
        }
        sub_1C4BCDAE4((CGRect *)v14, (CGPoint *)a1, &a2[-1].origin);
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_10;
        }
LABEL_11:
        uint64_t v18 = 0;
        CGFloat v19 = *(double *)a1;
        CGFloat v20 = *(double *)(a1 + 8);
        CGFloat v21 = *(double *)(a1 + 16);
        CGFloat v22 = *(double *)(a1 + 24);
        do
        {
          double v23 = CGRectGetMaxX(*(CGRect *)(a1 + v18 + 32));
          v134.origin.CGFloat x = v19;
          v134.origin.CGFloat y = v20;
          v134.size.CGFloat width = v21;
          v134.size.CGFloat height = v22;
          v18 += 32;
        }
        while (v23 < CGRectGetMaxX(v134));
        unint64_t v24 = a1 + v18;
        double v25 = a2;
        if (v18 == 32)
        {
          double v25 = a2;
          do
          {
            if (v24 >= (unint64_t)v25) {
              break;
            }
            v137.origin.CGFloat x = v25[-1].origin.x;
            v137.origin.CGFloat y = v25[-1].origin.y;
            --v25;
            v137.size.CGFloat width = v25->size.width;
            v137.size.CGFloat height = v25->size.height;
            double v27 = CGRectGetMaxX(v137);
            v138.origin.CGFloat x = v19;
            v138.origin.CGFloat y = v20;
            v138.size.CGFloat width = v21;
            v138.size.CGFloat height = v22;
          }
          while (v27 >= CGRectGetMaxX(v138));
        }
        else
        {
          do
          {
            v135.origin.CGFloat x = v25[-1].origin.x;
            v135.origin.CGFloat y = v25[-1].origin.y;
            --v25;
            v135.size.CGFloat width = v25->size.width;
            v135.size.CGFloat height = v25->size.height;
            double v26 = CGRectGetMaxX(v135);
            v136.origin.CGFloat x = v19;
            v136.origin.CGFloat y = v20;
            v136.size.CGFloat width = v21;
            v136.size.CGFloat height = v22;
          }
          while (v26 >= CGRectGetMaxX(v136));
        }
        uint64_t v10 = (CGRect *)(a1 + v18);
        if (v24 < (unint64_t)v25)
        {
          p_CGPoint origin = &v25->origin;
          do
          {
            CGPoint v124 = v10->origin;
            CGSize v129 = v10->size;
            CGSize v29 = (CGSize)p_origin[1];
            v10->CGPoint origin = *p_origin;
            v10->CGSize size = v29;
            CGPoint *p_origin = v124;
            p_origin[1] = (CGPoint)v129;
            do
            {
              v139.origin.CGFloat x = v10[1].origin.x;
              v139.origin.CGFloat y = v10[1].origin.y;
              ++v10;
              v139.size.CGFloat width = v10->size.width;
              v139.size.CGFloat height = v10->size.height;
              double v30 = CGRectGetMaxX(v139);
              v140.origin.CGFloat x = v19;
              v140.origin.CGFloat y = v20;
              v140.size.CGFloat width = v21;
              v140.size.CGFloat height = v22;
            }
            while (v30 < CGRectGetMaxX(v140));
            do
            {
              v141.origin.CGFloat x = p_origin[-2].x;
              v141.origin.CGFloat y = p_origin[-2].y;
              p_origin -= 2;
              v141.size.CGFloat width = p_origin[1].x;
              v141.size.CGFloat height = p_origin[1].y;
              double v31 = CGRectGetMaxX(v141);
              v142.origin.CGFloat x = v19;
              v142.origin.CGFloat y = v20;
              v142.size.CGFloat width = v21;
              v142.size.CGFloat height = v22;
            }
            while (v31 >= CGRectGetMaxX(v142));
          }
          while (v10 < (CGRect *)p_origin);
        }
        if (&v10[-1] != (CGRect *)a1)
        {
          CGSize v32 = v10[-1].size;
          *(CGPoint *)a1 = v10[-1].origin;
          *(CGSize *)(a1 + 16) = v32;
        }
        v10[-1].origin.CGFloat x = v19;
        v10[-1].origin.CGFloat y = v20;
        v10[-1].size.CGFloat width = v21;
        v10[-1].size.CGFloat height = v22;
        if (v24 >= (unint64_t)v25) {
          break;
        }
LABEL_30:
        sub_1C4BCCFA4(a1, &v10[-1], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v33 = sub_1C4BCDC1C((long long *)a1, v10 - 1);
      if (sub_1C4BCDC1C((long long *)v10, a2)) {
        break;
      }
      if (!v33) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 1;
    if (!v33) {
      continue;
    }
    break;
  }
}

void sub_1C4BCD9C0(CGRect *a1, CGPoint *a2, CGPoint *a3, CGPoint *a4, CGPoint *a5)
{
  sub_1C4BCDE44(a1, a2, a3, a4);
  double MaxX = CGRectGetMaxX(*(CGRect *)&a5->x);
  if (MaxX < CGRectGetMaxX(*(CGRect *)&a4->x))
  {
    CGPoint v12 = *a4;
    CGPoint v11 = a4[1];
    CGPoint v13 = a5[1];
    *a4 = *a5;
    a4[1] = v13;
    *a5 = v12;
    a5[1] = v11;
    v11.CGFloat x = a4->x;
    v12.CGFloat x = a4->y;
    v13.CGFloat x = a4[1].x;
    CGFloat y = a4[1].y;
    double v15 = CGRectGetMaxX(*(CGRect *)((char *)&v12 - 8));
    if (v15 < CGRectGetMaxX(*(CGRect *)&a3->x))
    {
      CGPoint v17 = *a3;
      CGPoint v16 = a3[1];
      CGPoint v18 = a4[1];
      *a3 = *a4;
      a3[1] = v18;
      *a4 = v17;
      a4[1] = v16;
      v16.CGFloat x = a3->x;
      v17.CGFloat x = a3->y;
      v18.CGFloat x = a3[1].x;
      CGFloat v19 = a3[1].y;
      double v20 = CGRectGetMaxX(*(CGRect *)((char *)&v17 - 8));
      if (v20 < CGRectGetMaxX(*(CGRect *)&a2->x))
      {
        CGPoint v22 = *a2;
        CGPoint v21 = a2[1];
        CGPoint v23 = a3[1];
        *a2 = *a3;
        a2[1] = v23;
        *a3 = v22;
        a3[1] = v21;
        v21.CGFloat x = a2->x;
        v22.CGFloat x = a2->y;
        v23.CGFloat x = a2[1].x;
        CGFloat v24 = a2[1].y;
        double v25 = CGRectGetMaxX(*(CGRect *)((char *)&v22 - 8));
        if (v25 < CGRectGetMaxX(*a1))
        {
          CGPoint origin = a1->origin;
          CGSize size = a1->size;
          CGSize v28 = (CGSize)a2[1];
          a1->CGPoint origin = *a2;
          a1->CGSize size = v28;
          *a2 = origin;
          a2[1] = (CGPoint)size;
        }
      }
    }
  }
}

void sub_1C4BCDAE4(CGRect *a1, CGPoint *a2, CGPoint *a3)
{
  double MaxX = CGRectGetMaxX(*(CGRect *)&a2->x);
  double v7 = CGRectGetMaxX(*a1);
  double v8 = CGRectGetMaxX(*(CGRect *)&a3->x);
  double v9 = CGRectGetMaxX(*(CGRect *)&a2->x);
  if (MaxX >= v7)
  {
    if (v8 < v9)
    {
      CGPoint v14 = *a2;
      CGPoint v13 = a2[1];
      CGPoint v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      *a3 = v14;
      a3[1] = v13;
      v13.CGFloat x = a2->x;
      v14.CGFloat x = a2->y;
      v15.CGFloat x = a2[1].x;
      CGFloat y = a2[1].y;
      double v17 = CGRectGetMaxX(*(CGRect *)((char *)&v14 - 8));
      if (v17 < CGRectGetMaxX(*a1))
      {
        CGPoint origin = a1->origin;
        CGSize size = a1->size;
        CGSize v20 = (CGSize)a2[1];
        a1->CGPoint origin = *a2;
        a1->CGSize size = v20;
        *a2 = origin;
        a2[1] = (CGPoint)size;
      }
    }
  }
  else
  {
    if (v8 >= v9)
    {
      CGPoint v22 = a1->origin;
      CGSize v21 = a1->size;
      CGSize v23 = (CGSize)a2[1];
      a1->CGPoint origin = *a2;
      a1->CGSize size = v23;
      *a2 = v22;
      a2[1] = (CGPoint)v21;
      v21.CGFloat width = a3->x;
      v22.CGFloat x = a3->y;
      v23.CGFloat width = a3[1].x;
      CGFloat v24 = a3[1].y;
      double v25 = CGRectGetMaxX(*(CGRect *)((char *)&v22 - 8));
      if (v25 >= CGRectGetMaxX(*(CGRect *)&a2->x)) {
        return;
      }
      CGPoint v11 = *a2;
      CGSize v10 = (CGSize)a2[1];
      CGPoint v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
    }
    else
    {
      CGPoint v11 = a1->origin;
      CGSize v10 = a1->size;
      CGSize v12 = (CGSize)a3[1];
      a1->CGPoint origin = *a3;
      a1->CGSize size = v12;
    }
    *a3 = v11;
    a3[1] = (CGPoint)v10;
  }
}

BOOL sub_1C4BCDC1C(long long *a1, CGRect *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      id v6 = (long long *)&a2[-1];
      double MaxX = CGRectGetMaxX(a2[-1]);
      if (MaxX < CGRectGetMaxX(*(CGRect *)a1))
      {
        long long v9 = *a1;
        long long v8 = a1[1];
        long long v10 = v6[1];
        *a1 = *v6;
        a1[1] = v10;
        long long *v6 = v9;
        v6[1] = v8;
      }
      return 1;
    case 3:
      sub_1C4BCDAE4((CGRect *)a1, (CGPoint *)a1 + 2, &a2[-1].origin);
      return 1;
    case 4:
      sub_1C4BCDE44((CGRect *)a1, (CGPoint *)a1 + 2, (CGPoint *)a1 + 4, &a2[-1].origin);
      return 1;
    case 5:
      sub_1C4BCD9C0((CGRect *)a1, (CGPoint *)a1 + 2, (CGPoint *)a1 + 4, (CGPoint *)a1 + 6, &a2[-1].origin);
      return 1;
    default:
      CGPoint v11 = (CGRect *)(a1 + 4);
      sub_1C4BCDAE4((CGRect *)a1, (CGPoint *)a1 + 2, (CGPoint *)a1 + 4);
      CGSize v12 = (CGRect *)(a1 + 6);
      if (a1 + 6 == (long long *)a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = CGRectGetMaxX(*v12);
    if (v15 < CGRectGetMaxX(*v11)) {
      break;
    }
LABEL_13:
    CGPoint v11 = v12;
    v13 += 32;
    if (++v12 == a2) {
      return 1;
    }
  }
  CGFloat x = v12->origin.x;
  CGFloat y = v12->origin.y;
  uint64_t v18 = v13;
  CGFloat width = v12->size.width;
  CGFloat height = v12->size.height;
  do
  {
    uint64_t v21 = (uint64_t)a1 + v18;
    long long v22 = *(long long *)((char *)a1 + v18 + 80);
    *(_OWORD *)(v21 + 96) = *(long long *)((char *)a1 + v18 + 64);
    *(_OWORD *)(v21 + 112) = v22;
    if (v18 == -64)
    {
      *(CGFloat *)a1 = x;
      *((CGFloat *)a1 + 1) = y;
      *((CGFloat *)a1 + 2) = width;
      *((CGFloat *)a1 + 3) = height;
      if (++v14 != 8) {
        goto LABEL_13;
      }
      return &v12[1] == a2;
    }
    v26.origin.CGFloat x = x;
    v26.origin.CGFloat y = y;
    v26.size.CGFloat width = width;
    v26.size.CGFloat height = height;
    double v23 = CGRectGetMaxX(v26);
    v18 -= 32;
  }
  while (v23 < CGRectGetMaxX(*(CGRect *)(v21 + 32)));
  uint64_t v24 = (uint64_t)a1 + v18;
  *(CGFloat *)(v24 + 96) = x;
  *(CGFloat *)(v24 + 104) = y;
  uint64_t v25 = (uint64_t)a1 + v18 + 96;
  *(CGFloat *)(v25 + 16) = width;
  *(CGFloat *)(v25 + 24) = height;
  if (++v14 != 8) {
    goto LABEL_13;
  }
  return &v12[1] == a2;
}

void sub_1C4BCDE44(CGRect *a1, CGPoint *a2, CGPoint *a3, CGPoint *a4)
{
  sub_1C4BCDAE4(a1, a2, a3);
  double MaxX = CGRectGetMaxX(*(CGRect *)&a4->x);
  if (MaxX < CGRectGetMaxX(*(CGRect *)&a3->x))
  {
    CGPoint v10 = *a3;
    CGPoint v9 = a3[1];
    CGPoint v11 = a4[1];
    *a3 = *a4;
    a3[1] = v11;
    *a4 = v10;
    a4[1] = v9;
    v9.CGFloat x = a3->x;
    v10.CGFloat x = a3->y;
    v11.CGFloat x = a3[1].x;
    CGFloat y = a3[1].y;
    double v13 = CGRectGetMaxX(*(CGRect *)((char *)&v10 - 8));
    if (v13 < CGRectGetMaxX(*(CGRect *)&a2->x))
    {
      CGPoint v15 = *a2;
      CGPoint v14 = a2[1];
      CGPoint v16 = a3[1];
      *a2 = *a3;
      a2[1] = v16;
      *a3 = v15;
      a3[1] = v14;
      v14.CGFloat x = a2->x;
      v15.CGFloat x = a2->y;
      v16.CGFloat x = a2[1].x;
      CGFloat v17 = a2[1].y;
      double v18 = CGRectGetMaxX(*(CGRect *)((char *)&v15 - 8));
      if (v18 < CGRectGetMaxX(*a1))
      {
        CGPoint origin = a1->origin;
        CGSize size = a1->size;
        CGSize v21 = (CGSize)a2[1];
        a1->CGPoint origin = *a2;
        a1->CGSize size = v21;
        *a2 = origin;
        a2[1] = (CGPoint)size;
      }
    }
  }
}

char ***sub_1C4BCDF28(char ***a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  id v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    long long v8 = *v4;
    uint64_t v9 = (v6 - *v4) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 60) {
        sub_1C4949AA8();
      }
      double v13 = (char *)operator new(16 * v12);
    }
    else
    {
      double v13 = 0;
    }
    CGPoint v14 = &v13[16 * v9];
    *(_OWORD *)CGPoint v14 = *a2;
    double v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v8);
      id v6 = *v4;
    }
    void *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[16 * v12];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_OWORD *)id v6 = *a2;
    double v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

uint64_t *sub_1C4BCE03C(uint64_t *result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
  while (2)
  {
    unint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        uint64_t v11 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = a2 - v12;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              uint64_t v88 = *(a2 - 1);
              uint64_t v89 = *v12;
              if (*(double *)(**a3 + 32 * v88) >= *(double *)(**a3 + 32 * *v12)) {
                return result;
              }
              *unint64_t v12 = v88;
              goto LABEL_166;
            case 3uLL:
              uint64_t v90 = **a3;
              uint64_t v89 = *v12;
              uint64_t v91 = v12[1];
              double v92 = *(double *)(v90 + 32 * v91);
              double v93 = *(double *)(v90 + 32 * *v12);
              uint64_t v94 = *(a2 - 1);
              double v95 = *(double *)(v90 + 32 * v94);
              if (v92 >= v93)
              {
                if (v95 < v92)
                {
                  v12[1] = v94;
                  *(a2 - 1) = v91;
                  uint64_t v106 = *v12;
                  uint64_t v102 = v12[1];
                  double v104 = *(double *)(v90 + 32 * v102);
LABEL_155:
                  if (v104 < *(double *)(v90 + 32 * v106))
                  {
                    uint64_t *v11 = v102;
                    v11[1] = v106;
                  }
                }
              }
              else
              {
                if (v95 >= v92)
                {
                  *unint64_t v12 = v91;
                  v12[1] = v89;
                  uint64_t v151 = *(a2 - 1);
                  if (*(double *)(v90 + 32 * v151) >= v93) {
                    return result;
                  }
                  v12[1] = v151;
                }
                else
                {
                  *unint64_t v12 = v94;
                }
LABEL_166:
                *(a2 - 1) = v89;
              }
              break;
            case 4uLL:
              uint64_t v96 = **a3;
              return sub_1C4BCEF90(v12, v12 + 1, v12 + 2, a2 - 1, v96);
            case 5uLL:
              long long v97 = v12 + 1;
              uint64_t v98 = v12 + 2;
              unint64_t v99 = v12 + 3;
              BOOL result = sub_1C4BCEF90(v11, v11 + 1, v11 + 2, v11 + 3, **a3);
              uint64_t v100 = *(a2 - 1);
              uint64_t v101 = v11[3];
              uint64_t v90 = **a3;
              if (*(double *)(v90 + 32 * v100) >= *(double *)(v90 + 32 * v101)) {
                return result;
              }
              *unint64_t v99 = v100;
              *(a2 - 1) = v101;
              uint64_t v102 = *v99;
              uint64_t v103 = *v98;
              double v104 = *(double *)(v90 + 32 * *v99);
              if (v104 >= *(double *)(v90 + 32 * *v98)) {
                return result;
              }
              *uint64_t v98 = v102;
              *unint64_t v99 = v103;
              uint64_t v105 = *v97;
              if (v104 >= *(double *)(v90 + 32 * *v97)) {
                return result;
              }
              v11[1] = v102;
              v11[2] = v105;
              uint64_t v106 = *v11;
              goto LABEL_155;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 191)
        {
          long long v107 = *a3;
          if (a5)
          {
            if (v12 != a2)
            {
              double v108 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v109 = *v107;
                uint64_t v110 = 8;
                uint64_t v111 = v12;
                do
                {
                  uint64_t v114 = *v111;
                  uint64_t v113 = v111[1];
                  uint64_t v111 = v108;
                  double v115 = *(double *)(v109 + 32 * v113);
                  if (v115 < *(double *)(v109 + 32 * v114))
                  {
                    uint64_t v116 = v110;
                    do
                    {
                      *(uint64_t *)((char *)v12 + v116) = v114;
                      uint64_t v117 = v116 - 8;
                      if (v116 == 8)
                      {
                        uint64_t v112 = v12;
                        goto LABEL_116;
                      }
                      uint64_t v114 = *(uint64_t *)((char *)v12 + v116 - 16);
                      v116 -= 8;
                    }
                    while (v115 < *(double *)(v109 + 32 * v114));
                    uint64_t v112 = (uint64_t *)((char *)v12 + v117);
LABEL_116:
                    *uint64_t v112 = v113;
                  }
                  double v108 = v111 + 1;
                  v110 += 8;
                }
                while (v111 + 1 != a2);
              }
            }
          }
          else if (v12 != a2)
          {
            CGRect v146 = v12 + 1;
            if (v12 + 1 != a2)
            {
              uint64_t v147 = *v107;
              do
              {
                uint64_t v149 = *v11;
                uint64_t v148 = v11[1];
                uint64_t v11 = v146;
                double v150 = *(double *)(v147 + 32 * v148);
                if (v150 < *(double *)(v147 + 32 * v149))
                {
                  do
                  {
                    *CGRect v146 = v149;
                    uint64_t v149 = *(v146 - 2);
                    --v146;
                  }
                  while (v150 < *(double *)(v147 + 32 * v149));
                  *CGRect v146 = v148;
                }
                CGRect v146 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            int64_t v118 = (v14 - 2) >> 1;
            int64_t v119 = v118;
            do
            {
              if (v118 >= v119)
              {
                uint64_t v121 = (2 * v119) | 1;
                uint64_t v122 = &v12[v121];
                uint64_t v123 = **a3;
                if (2 * v119 + 2 < (uint64_t)v14 && *(double *)(v123 + 32 * *v122) < *(double *)(v123 + 32 * v122[1]))
                {
                  ++v122;
                  uint64_t v121 = 2 * v119 + 2;
                }
                BOOL result = &v12[v119];
                uint64_t v124 = *v122;
                uint64_t v125 = *result;
                double v126 = *(double *)(v123 + 32 * *result);
                if (*(double *)(v123 + 32 * *v122) >= v126)
                {
                  do
                  {
                    long long v127 = v122;
                    *BOOL result = v124;
                    if (v118 < v121) {
                      break;
                    }
                    uint64_t v128 = 2 * v121;
                    uint64_t v121 = (2 * v121) | 1;
                    uint64_t v122 = &v12[v121];
                    uint64_t v129 = v128 + 2;
                    if (v129 < (uint64_t)v14 && *(double *)(v123 + 32 * *v122) < *(double *)(v123 + 32 * v122[1]))
                    {
                      ++v122;
                      uint64_t v121 = v129;
                    }
                    uint64_t v124 = *v122;
                    BOOL result = v127;
                  }
                  while (*(double *)(v123 + 32 * *v122) >= v126);
                  uint64_t *v127 = v125;
                }
              }
              BOOL v120 = v119-- <= 0;
            }
            while (!v120);
            uint64_t v130 = (unint64_t)v13 >> 3;
            do
            {
              uint64_t v131 = 0;
              uint64_t v132 = *v12;
              uint64_t v133 = *a3;
              CGRect v134 = v12;
              do
              {
                CGRect v135 = v134;
                v134 += v131 + 1;
                uint64_t v136 = 2 * v131;
                uint64_t v131 = (2 * v131) | 1;
                uint64_t v137 = v136 + 2;
                if (v137 < v130)
                {
                  BOOL result = (uint64_t *)v134[1];
                  if (*(double *)(*v133 + 32 * *v134) < *(double *)(*v133 + 32 * (void)result))
                  {
                    ++v134;
                    uint64_t v131 = v137;
                  }
                }
                *CGRect v135 = *v134;
              }
              while (v131 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
              if (v134 == --a2)
              {
                *CGRect v134 = v132;
              }
              else
              {
                *CGRect v134 = *a2;
                *a2 = v132;
                uint64_t v138 = (char *)v134 - (char *)v12 + 8;
                if (v138 >= 9)
                {
                  unint64_t v139 = (((unint64_t)v138 >> 3) - 2) >> 1;
                  CGRect v140 = &v12[v139];
                  uint64_t v141 = *v140;
                  uint64_t v142 = *v134;
                  uint64_t v143 = **a3;
                  double v144 = *(double *)(v143 + 32 * *v134);
                  if (*(double *)(v143 + 32 * *v140) < v144)
                  {
                    do
                    {
                      CGRect v145 = v140;
                      *CGRect v134 = v141;
                      if (!v139) {
                        break;
                      }
                      unint64_t v139 = (v139 - 1) >> 1;
                      CGRect v140 = &v12[v139];
                      uint64_t v141 = *v140;
                      CGRect v134 = v145;
                    }
                    while (*(double *)(v143 + 32 * *v140) < v144);
                    uint64_t *v145 = v142;
                  }
                }
              }
              BOOL v120 = v130-- <= 2;
            }
            while (!v120);
          }
          return result;
        }
        unint64_t v15 = v14 >> 1;
        CGPoint v16 = &v12[v14 >> 1];
        uint64_t v17 = **a3;
        uint64_t v18 = *(a2 - 1);
        double v19 = *(double *)(v17 + 32 * v18);
        if ((unint64_t)v13 >= 0x401) {
          break;
        }
        uint64_t v24 = *v12;
        uint64_t v25 = *v16;
        double v26 = *(double *)(v17 + 32 * *v12);
        double v27 = *(double *)(v17 + 32 * *v16);
        if (v26 < v27)
        {
          if (v19 >= v26)
          {
            *CGPoint v16 = v24;
            *unint64_t v12 = v25;
            uint64_t v43 = *(a2 - 1);
            if (*(double *)(v17 + 32 * v43) >= v27) {
              goto LABEL_33;
            }
            *unint64_t v12 = v43;
          }
          else
          {
            *CGPoint v16 = v18;
          }
          *(a2 - 1) = v25;
LABEL_33:
          --a4;
          uint64_t v30 = *v12;
          uint64_t v31 = 32 * *v12;
          if (a5) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
        if (v19 >= v26) {
          goto LABEL_33;
        }
        *unint64_t v12 = v18;
        *(a2 - 1) = v24;
        uint64_t v29 = *v16;
        if (*(double *)(v17 + 32 * *v12) >= *(double *)(v17 + 32 * *v16)) {
          goto LABEL_33;
        }
        *CGPoint v16 = *v12;
        *unint64_t v12 = v29;
        --a4;
        uint64_t v30 = v29;
        uint64_t v31 = 32 * v29;
        if (a5) {
          goto LABEL_57;
        }
LABEL_56:
        double v63 = *(double *)(v17 + v31);
        if (*(double *)(v17 + 32 * *(v12 - 1)) < v63) {
          goto LABEL_57;
        }
        if (v63 < *(double *)(v17 + 32 * *(a2 - 1)))
        {
          do
          {
            uint64_t v79 = v12[1];
            ++v12;
          }
          while (v63 >= *(double *)(v17 + 32 * v79));
        }
        else
        {
          double v80 = v12 + 1;
          do
          {
            unint64_t v12 = v80;
            if (v80 >= a2) {
              break;
            }
            ++v80;
          }
          while (v63 >= *(double *)(v17 + 32 * *v12));
        }
        uint64_t v81 = a2;
        if (v12 < a2)
        {
          uint64_t v81 = a2;
          do
            uint64_t v82 = *--v81;
          while (v63 < *(double *)(v17 + 32 * v82));
        }
        if (v12 < v81)
        {
          uint64_t v83 = *v12;
          uint64_t v84 = *v81;
          do
          {
            *unint64_t v12 = v84;
            *uint64_t v81 = v83;
            do
            {
              uint64_t v85 = v12[1];
              ++v12;
              uint64_t v83 = v85;
            }
            while (v63 >= *(double *)(v17 + 32 * v85));
            do
            {
              uint64_t v86 = *--v81;
              uint64_t v84 = v86;
            }
            while (v63 < *(double *)(v17 + 32 * v86));
          }
          while (v12 < v81);
        }
        uint64_t v87 = v12 - 1;
        BOOL v5 = v12 - 1 >= v11;
        BOOL v6 = v12 - 1 == v11;
        if (v12 - 1 != v11) {
          uint64_t *v11 = *v87;
        }
        a5 = 0;
        *uint64_t v87 = v30;
      }
      uint64_t v20 = *v16;
      uint64_t v21 = *v12;
      double v22 = *(double *)(v17 + 32 * *v16);
      double v23 = *(double *)(v17 + 32 * *v12);
      if (v22 >= v23)
      {
        if (v19 < v22)
        {
          *CGPoint v16 = v18;
          *(a2 - 1) = v20;
          uint64_t v28 = *v12;
          if (*(double *)(v17 + 32 * *v16) < *(double *)(v17 + 32 * *v12))
          {
            *unint64_t v12 = *v16;
            *CGPoint v16 = v28;
          }
        }
      }
      else
      {
        if (v19 >= v22)
        {
          *unint64_t v12 = v20;
          *CGPoint v16 = v21;
          uint64_t v32 = *(a2 - 1);
          if (*(double *)(v17 + 32 * v32) >= v23) {
            goto LABEL_24;
          }
          *CGPoint v16 = v32;
        }
        else
        {
          *unint64_t v12 = v18;
        }
        *(a2 - 1) = v21;
      }
LABEL_24:
      BOOL v33 = &v12[v15];
      uint64_t v36 = *(v33 - 1);
      CGFloat v34 = v33 - 1;
      uint64_t v35 = v36;
      uint64_t v37 = v12[1];
      double v38 = *(double *)(v17 + 32 * v36);
      double v39 = *(double *)(v17 + 32 * v37);
      uint64_t v40 = *(a2 - 2);
      double v41 = *(double *)(v17 + 32 * v40);
      if (v38 >= v39)
      {
        if (v41 < v38)
        {
          *CGFloat v34 = v40;
          *(a2 - 2) = v35;
          uint64_t v42 = v12[1];
          if (*(double *)(v17 + 32 * *v34) < *(double *)(v17 + 32 * v42))
          {
            v12[1] = *v34;
            *CGFloat v34 = v42;
          }
        }
      }
      else
      {
        if (v41 >= v38)
        {
          v12[1] = v35;
          *CGFloat v34 = v37;
          uint64_t v44 = *(a2 - 2);
          if (*(double *)(v17 + 32 * v44) >= v39) {
            goto LABEL_38;
          }
          *CGFloat v34 = v44;
        }
        else
        {
          v12[1] = v40;
        }
        *(a2 - 2) = v37;
      }
LABEL_38:
      CGSize v45 = &v12[v15];
      uint64_t v48 = v45[1];
      double v46 = v45 + 1;
      uint64_t v47 = v48;
      uint64_t v49 = v12[2];
      double v50 = *(double *)(v17 + 32 * v48);
      double v51 = *(double *)(v17 + 32 * v49);
      uint64_t v52 = *(a2 - 3);
      double v53 = *(double *)(v17 + 32 * v52);
      if (v50 >= v51)
      {
        if (v53 < v50)
        {
          *double v46 = v52;
          *(a2 - 3) = v47;
          uint64_t v54 = v12[2];
          if (*(double *)(v17 + 32 * *v46) < *(double *)(v17 + 32 * v54))
          {
            v12[2] = *v46;
            *double v46 = v54;
          }
        }
      }
      else
      {
        if (v53 >= v50)
        {
          v12[2] = v47;
          *double v46 = v49;
          uint64_t v55 = *(a2 - 3);
          if (*(double *)(v17 + 32 * v55) >= v51) {
            goto LABEL_47;
          }
          *double v46 = v55;
        }
        else
        {
          v12[2] = v52;
        }
        *(a2 - 3) = v49;
      }
LABEL_47:
      uint64_t v56 = *v16;
      uint64_t v57 = *v34;
      double v58 = *(double *)(v17 + 32 * *v16);
      double v59 = *(double *)(v17 + 32 * *v34);
      uint64_t v60 = *v46;
      double v61 = *(double *)(v17 + 32 * *v46);
      if (v58 >= v59)
      {
        if (v61 >= v58) {
          goto LABEL_55;
        }
        *CGPoint v16 = v60;
        *double v46 = v56;
        double v46 = &v12[v14 >> 1];
        uint64_t v56 = v57;
        if (v61 >= v59)
        {
          uint64_t v56 = v60;
          goto LABEL_55;
        }
      }
      else if (v61 >= v58)
      {
        *CGFloat v34 = v56;
        *CGPoint v16 = v57;
        CGFloat v34 = &v12[v14 >> 1];
        uint64_t v56 = v60;
        if (v61 >= v59)
        {
          uint64_t v56 = v57;
          goto LABEL_55;
        }
      }
      *CGFloat v34 = v60;
      *double v46 = v57;
LABEL_55:
      uint64_t v62 = *v12;
      *unint64_t v12 = v56;
      *CGPoint v16 = v62;
      --a4;
      uint64_t v30 = *v12;
      uint64_t v31 = 32 * *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v64 = 0;
      uint64_t v65 = **a3;
      double v66 = *(double *)(v65 + v31);
      do
        uint64_t v67 = v12[++v64];
      while (*(double *)(v65 + 32 * v67) < v66);
      int64_t v68 = &v12[v64];
      int64_t v69 = a2;
      if (v64 == 1)
      {
        int64_t v69 = a2;
        do
        {
          if (v68 >= v69) {
            break;
          }
          uint64_t v71 = *--v69;
        }
        while (*(double *)(v65 + 32 * v71) >= v66);
      }
      else
      {
        do
          uint64_t v70 = *--v69;
        while (*(double *)(v65 + 32 * v70) >= v66);
      }
      if (v68 >= v69)
      {
        CGFloat v77 = v68 - 1;
        if (v68 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *unint64_t v12 = *v77;
        goto LABEL_75;
      }
      uint64_t v72 = *v69;
      double v73 = &v12[v64];
      uint64_t v74 = v69;
      do
      {
        uint64_t *v73 = v72;
        *uint64_t v74 = v67;
        do
        {
          uint64_t v75 = v73[1];
          ++v73;
          uint64_t v67 = v75;
        }
        while (*(double *)(v65 + 32 * v75) < v66);
        do
        {
          uint64_t v76 = *--v74;
          uint64_t v72 = v76;
        }
        while (*(double *)(v65 + 32 * v76) >= v66);
      }
      while (v73 < v74);
      CGFloat v77 = v73 - 1;
      if (v73 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *CGFloat v77 = v30;
      if (v68 < v69) {
        goto LABEL_78;
      }
      BOOL v78 = sub_1C4BCEBA8(v12, v77, a3);
      unint64_t v12 = v77 + 1;
      BOOL result = (uint64_t *)sub_1C4BCEBA8(v77 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v78)
      {
LABEL_78:
        BOOL result = (uint64_t *)sub_1C4BCE03C(v11, v77, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v77 + 1;
      }
    }
    a2 = v77;
    if (!v78) {
      continue;
    }
    return result;
  }
}

BOOL sub_1C4BCEBA8(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(double *)(**a3 + 32 * v8) < *(double *)(**a3 + 32 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      uint64_t v10 = **a3;
      uint64_t v11 = *a1;
      uint64_t v12 = a1[1];
      double v13 = *(double *)(v10 + 32 * v12);
      double v14 = *(double *)(v10 + 32 * *a1);
      uint64_t v15 = *(a2 - 1);
      double v16 = *(double *)(v10 + 32 * v15);
      if (v13 >= v14)
      {
        if (v16 < v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          uint64_t v39 = *a1;
          uint64_t v38 = a1[1];
          if (*(double *)(v10 + 32 * v38) < *(double *)(v10 + 32 * *a1))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 >= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        uint64_t v48 = *(a2 - 1);
        if (*(double *)(v10 + 32 * v48) < v14)
        {
          a1[1] = v48;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      sub_1C4BCEF90(a1, a1 + 1, a1 + 2, a2 - 1, **a3);
      return 1;
    case 5:
      double v27 = a1 + 1;
      uint64_t v28 = a1 + 2;
      uint64_t v29 = a1 + 3;
      sub_1C4BCEF90(a1, a1 + 1, a1 + 2, a1 + 3, **a3);
      uint64_t v30 = *(a2 - 1);
      uint64_t v31 = a1[3];
      uint64_t v32 = **a3;
      if (*(double *)(v32 + 32 * v30) >= *(double *)(v32 + 32 * v31)) {
        return 1;
      }
      uint64_t *v29 = v30;
      *(a2 - 1) = v31;
      uint64_t v33 = *v29;
      uint64_t v34 = *v28;
      double v35 = *(double *)(v32 + 32 * *v29);
      if (v35 >= *(double *)(v32 + 32 * *v28)) {
        return 1;
      }
      uint64_t *v28 = v33;
      uint64_t *v29 = v34;
      uint64_t v36 = *v27;
      if (v35 >= *(double *)(v32 + 32 * *v27)) {
        return 1;
      }
      a1[1] = v33;
      a1[2] = v36;
      uint64_t v37 = *a1;
      if (v35 >= *(double *)(v32 + 32 * *a1)) {
        return 1;
      }
      *a1 = v33;
      a1[1] = v37;
      return 1;
    default:
      uint64_t v18 = a1 + 2;
      uint64_t v17 = a1[2];
      uint64_t v19 = a1[1];
      uint64_t v20 = **a3;
      uint64_t v21 = *a1;
      double v22 = *(double *)(v20 + 32 * v19);
      double v23 = *(double *)(v20 + 32 * *a1);
      double v24 = *(double *)(v20 + 32 * v17);
      if (v22 < v23)
      {
        uint64_t v25 = a1;
        double v26 = a1 + 2;
        if (v24 >= v22)
        {
          *a1 = v19;
          a1[1] = v21;
          uint64_t v25 = a1 + 1;
          double v26 = a1 + 2;
          if (v24 >= v23) {
            goto LABEL_25;
          }
        }
LABEL_24:
        *uint64_t v25 = v17;
        *double v26 = v21;
        goto LABEL_25;
      }
      if (v24 < v22)
      {
        a1[1] = v17;
        uint64_t *v18 = v19;
        uint64_t v25 = a1;
        double v26 = a1 + 1;
        if (v24 < v23) {
          goto LABEL_24;
        }
      }
LABEL_25:
      uint64_t v40 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v41 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v43 = *v40;
        uint64_t v44 = *v18;
        double v45 = *(double *)(v20 + 32 * *v40);
        if (v45 < *(double *)(v20 + 32 * v44)) {
          break;
        }
LABEL_34:
        uint64_t v18 = v40++;
        if (v40 == a2) {
          return 1;
        }
      }
      uint64_t v46 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v46) = v44;
        uint64_t v47 = v46 - 8;
        if (v46 == 8)
        {
          *a1 = v43;
          if (++v41 != 8) {
            goto LABEL_34;
          }
          return v40 + 1 == a2;
        }
        uint64_t v44 = *(uint64_t *)((char *)a1 + v46 - 16);
        v46 -= 8;
      }
      while (v45 < *(double *)(v20 + 32 * v44));
      *(uint64_t *)((char *)a1 + v47) = v43;
      if (++v41 != 8) {
        goto LABEL_34;
      }
      return v40 + 1 == a2;
  }
}

uint64_t *sub_1C4BCEF90(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  double v7 = *(double *)(a5 + 32 * *a2);
  double v8 = *(double *)(a5 + 32 * *result);
  uint64_t v9 = *a3;
  double v10 = *(double *)(a5 + 32 * *a3);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      uint64_t v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      uint64_t v11 = *result;
      if (*(double *)(a5 + 32 * *a2) < *(double *)(a5 + 32 * *result))
      {
        *BOOL result = *a2;
        *a2 = v11;
        uint64_t v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *BOOL result = v9;
LABEL_9:
      *a3 = v6;
      uint64_t v5 = v6;
      goto LABEL_11;
    }
    *BOOL result = v5;
    *a2 = v6;
    uint64_t v5 = *a3;
    if (*(double *)(a5 + 32 * *a3) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(double *)(a5 + 32 * *a4) < *(double *)(a5 + 32 * v5))
  {
    *a3 = *a4;
    *a4 = v5;
    uint64_t v12 = *a2;
    if (*(double *)(a5 + 32 * *a3) < *(double *)(a5 + 32 * *a2))
    {
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = *result;
      if (*(double *)(a5 + 32 * *a2) < *(double *)(a5 + 32 * *result))
      {
        *BOOL result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

void sub_1C4BCF17C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCF1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCF2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCF530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCF7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCF8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCF978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BCFCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD0018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD0118(uint64_t a1, void *a2, uint64_t a3)
{
  id v14 = a2;
  if (a1)
  {
    uint64_t v9 = *(void **)(a1 + 56);
    double v10 = objc_msgSend_numberWithInteger_(NSNumber, v5, a3, v6, v7, v8);
    objc_msgSend_setObject_forKey_(v9, v11, (uint64_t)v10, (uint64_t)v14, v12, v13);
  }
}

void sub_1C4BD019C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD01B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD01C8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    uint64_t v11 = *(void **)(a1 + 80);
    id v49 = v5;
    uint64_t v12 = objc_msgSend_encodedStrokeIdentifier(v5, v6, v7, v8, v9, v10);
    uint64_t v17 = objc_msgSend_objectForKey_(v11, v13, (uint64_t)v12, v14, v15, v16);

    if (!v17)
    {
      double v22 = objc_opt_class();
      double v27 = objc_msgSend_substrokesForStroke_(v22, v23, (uint64_t)v49, v24, v25, v26);
      uint64_t v28 = *(void **)(a1 + 80);
      uint64_t v34 = objc_msgSend_encodedStrokeIdentifier(v49, v29, v30, v31, v32, v33);
      objc_msgSend_setObject_forKey_(v28, v35, (uint64_t)v27, (uint64_t)v34, v36, v37);
    }
    uint64_t v38 = *(void **)(a1 + 56);
    uint64_t v39 = objc_msgSend_numberWithInteger_(NSNumber, v18, a3, v19, v20, v21);
    double v45 = objc_msgSend_encodedStrokeIdentifier(v49, v40, v41, v42, v43, v44);
    objc_msgSend_setObject_forKey_(v38, v46, (uint64_t)v39, (uint64_t)v45, v47, v48);

    id v5 = v49;
  }
}

void sub_1C4BD02F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD0310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD0328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD033C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD0360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD0378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD038C(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  uint64_t v14 = v8;
  if (a1)
  {
    if (v8)
    {
      uint64_t v15 = (void *)a1[10];
      uint64_t v16 = objc_msgSend_encodedStrokeIdentifier(v7, v9, v10, v11, v12, v13);
      uint64_t v21 = objc_msgSend_objectForKey_(v15, v17, (uint64_t)v16, v18, v19, v20);

      if (!v21)
      {
        uint64_t v26 = objc_opt_class();
        uint64_t v31 = objc_msgSend_substrokesForStroke_(v26, v27, (uint64_t)v7, v28, v29, v30);
        uint64_t v32 = (void *)a1[10];
        uint64_t v38 = objc_msgSend_encodedStrokeIdentifier(v7, v33, v34, v35, v36, v37);
        objc_msgSend_setObject_forKey_(v32, v39, (uint64_t)v31, (uint64_t)v38, v40, v41);
      }
      uint64_t v42 = (void *)a1[8];
      uint64_t v43 = objc_msgSend_numberWithInteger_(NSNumber, v22, a3, v23, v24, v25);
      id v49 = objc_msgSend_encodedStrokeIdentifier(v7, v44, v45, v46, v47, v48);
      objc_msgSend_setObject_forKey_(v42, v50, (uint64_t)v43, (uint64_t)v49, v51, v52);

      double v53 = (void *)a1[9];
      double v59 = objc_msgSend_encodedStrokeIdentifier(v7, v54, v55, v56, v57, v58);
      objc_msgSend_setObject_forKey_(v53, v60, (uint64_t)v14, (uint64_t)v59, v61, v62);
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      double v63 = (id)qword_1EA3C9FF0;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        int64_t v69 = objc_msgSend_description(v7, v64, v65, v66, v67, v68);
        int v70 = 138412290;
        uint64_t v71 = v69;
        _os_log_impl(&dword_1C492D000, v63, OS_LOG_TYPE_ERROR, "Error: trying to set a nil object as scriptClassificationRawResult for added stroke %@", (uint8_t *)&v70, 0xCu);
      }
    }
  }
}

void sub_1C4BD05B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD061C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD0638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD0650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD0668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD0794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v10;

  _Unwind_Resume(a1);
}

void sub_1C4BD07C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD07D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD07EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD0804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD081C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD0994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD1148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD22FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{
  _Unwind_Resume(a1);
}

id sub_1C4BD26FC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v845 = *MEMORY[0x1E4F143B8];
  id v14 = a2;
  id v801 = a3;
  id v776 = a4;
  id v786 = a5;
  id v15 = a6;
  id v771 = a7;
  v785 = a8;
  v802 = v14;
  v770 = v15;
  self;
  if (!v14)
  {
    id v221 = 0;
    goto LABEL_269;
  }
  *(_OWORD *)v833 = 0u;
  *(_OWORD *)__p = 0u;
  float v835 = 1.0;
  long long v829 = 0u;
  long long v830 = 0u;
  long long v831 = 0u;
  long long v832 = 0u;
  id v16 = v15;
  uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v829, (uint64_t)v844, 16, v18);
  if (!v24) {
    goto LABEL_18;
  }
  uint64_t v25 = *(void *)v830;
  do
  {
    for (uint64_t i = 0; i != v24; ++i)
    {
      if (*(void *)v830 != v25) {
        objc_enumerationMutation(v16);
      }
      double v27 = *(void **)(*((void *)&v829 + 1) + 8 * i);
      uint64_t v28 = objc_msgSend_strokeClassificationsByStrokeIdentifier(v802, v19, v20, v21, v22, v23);
      uint64_t v34 = objc_msgSend_encodedStrokeIdentifier(v27, v29, v30, v31, v32, v33);
      uint64_t v39 = objc_msgSend_objectForKeyedSubscript_(v28, v35, (uint64_t)v34, v36, v37, v38);

      uint64_t v45 = objc_msgSend_integerValue(v39, v40, v41, v42, v43, v44);
      id v46 = v27;
      self;
      if (v45 == 8)
      {

        goto LABEL_16;
      }
      if ((v45 & 0xFFFFFFFFFFFFFFFELL) != 6
        && (v45 != 5 || (objc_msgSend_strokeAttributes(v46, v47, v48, v49, v50, v51) & 2) == 0))
      {

LABEL_15:
        objc_msgSend_bounds(v46, v53, v54, v55, v56, v57);
        double MidY = CGRectGetMidY(v847);
        sub_1C4BD7B00((uint64_t)v833, MidY, MidY);
        goto LABEL_16;
      }
      int v52 = _os_feature_enabled_impl();

      if (v52) {
        goto LABEL_15;
      }
LABEL_16:
    }
    uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v19, (uint64_t)&v829, (uint64_t)v844, 16, v23);
  }
  while (v24);
LABEL_18:

  long long v827 = 0u;
  long long v828 = 0u;
  long long v825 = 0u;
  long long v826 = 0u;
  id v59 = v771;
  uint64_t v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(v59, v60, (uint64_t)&v825, (uint64_t)v843, 16, v61);
  if (v67)
  {
    uint64_t v68 = *(void *)v826;
    int64_t v69 = (CGFloat *)MEMORY[0x1E4F1DB20];
    do
    {
      for (uint64_t j = 0; j != v67; ++j)
      {
        if (*(void *)v826 != v68) {
          objc_enumerationMutation(v59);
        }
        uint64_t v71 = *(void *)(*((void *)&v825 + 1) + 8 * j);
        uint64_t v72 = objc_msgSend_strokeClassificationsByStrokeIdentifier(v801, v62, v63, v64, v65, v66);
        CGFloat v77 = objc_msgSend_objectForKeyedSubscript_(v72, v73, v71, v74, v75, v76);

        if (v77)
        {
          uint64_t v83 = objc_msgSend_integerValue(v77, v78, v79, v80, v81, v82);
          self;
          if (v83 != 8
            && ((v83 & 0xFFFFFFFFFFFFFFFELL) != 6
             && (v83 != 5 || (objc_msgSend_strokeAttributes(0, v84, v85, v86, v87, v88) & 2) == 0)
             || _os_feature_enabled_impl()))
          {
            uint64_t v89 = objc_msgSend_substrokesByStrokeIdentifier(v801, v84, v85, v86, v87, v88);
            uint64_t v94 = objc_msgSend_objectForKeyedSubscript_(v89, v90, v71, v91, v92, v93);

            CGFloat x = *v69;
            CGFloat y = v69[1];
            CGFloat width = v69[2];
            CGFloat height = v69[3];
            long long v821 = 0u;
            long long v822 = 0u;
            long long v823 = 0u;
            long long v824 = 0u;
            id v99 = v94;
            uint64_t v107 = objc_msgSend_countByEnumeratingWithState_objects_count_(v99, v100, (uint64_t)&v821, (uint64_t)v842, 16, v101);
            if (v107)
            {
              uint64_t v108 = *(void *)v822;
              do
              {
                for (uint64_t k = 0; k != v107; ++k)
                {
                  if (*(void *)v822 != v108) {
                    objc_enumerationMutation(v99);
                  }
                  objc_msgSend_bounds(*(void **)(*((void *)&v821 + 1) + 8 * k), v102, v103, v104, v105, v106);
                  v853.origin.CGFloat x = x;
                  v853.origin.CGFloat y = y;
                  v853.size.CGFloat width = width;
                  v853.size.CGFloat height = height;
                  CGRect v849 = CGRectUnion(v848, v853);
                  CGFloat x = v849.origin.x;
                  CGFloat y = v849.origin.y;
                  CGFloat width = v849.size.width;
                  CGFloat height = v849.size.height;
                }
                uint64_t v107 = objc_msgSend_countByEnumeratingWithState_objects_count_(v99, v102, (uint64_t)&v821, (uint64_t)v842, 16, v106);
              }
              while (v107);
            }

            v850.origin.CGFloat x = x;
            v850.origin.CGFloat y = y;
            v850.size.CGFloat width = width;
            v850.size.CGFloat height = height;
            double v110 = CGRectGetMidY(v850);
            sub_1C4BD7B00((uint64_t)v833, v110, v110);
          }
        }
      }
      uint64_t v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(v59, v62, (uint64_t)&v825, (uint64_t)v843, 16, v66);
    }
    while (v67);
  }

  uint64_t v116 = objc_msgSend_orderedStrokes(v776, v111, v112, v113, v114, v115);
  v777 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v117, v118, v119, v120, v121, v116);
  long long v819 = 0u;
  long long v820 = 0u;
  long long v817 = 0u;
  long long v818 = 0u;
  obuint64_t j = v116;
  uint64_t v124 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v122, (uint64_t)&v817, (uint64_t)v841, 16, v123);
  if (v124)
  {
    uint64_t v799 = *(void *)v818;
LABEL_42:
    uint64_t v125 = 0;
    while (1)
    {
      if (*(void *)v818 != v799) {
        objc_enumerationMutation(obj);
      }
      double v126 = *(void **)(*((void *)&v817 + 1) + 8 * v125);
      if (v785[2]()) {
        goto LABEL_132;
      }
      uint64_t v132 = objc_msgSend_strokeClassificationsByStrokeIdentifier(v802, v127, v128, v129, v130, v131);
      uint64_t v138 = objc_msgSend_encodedStrokeIdentifier(v126, v133, v134, v135, v136, v137);
      uint64_t v143 = objc_msgSend_objectForKeyedSubscript_(v132, v139, (uint64_t)v138, v140, v141, v142);

      if (v143) {
        break;
      }
LABEL_130:

      if (++v125 == v124)
      {
        uint64_t v124 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v214, (uint64_t)&v817, (uint64_t)v841, 16, v215);
        if (v124) {
          goto LABEL_42;
        }
        goto LABEL_132;
      }
    }
    uint64_t v154 = objc_msgSend_integerValue(v143, v144, v145, v146, v147, v148);
    if (v154 != 8) {
      objc_msgSend_addObject_(v777, v149, (uint64_t)v126, v151, v152, v153);
    }
    CGRect v155 = objc_msgSend_strokeClassificationsByStrokeIdentifier(v801, v149, v150, v151, v152, v153);
    uint64_t v161 = objc_msgSend_encodedStrokeIdentifier(v126, v156, v157, v158, v159, v160);
    uint64_t v166 = objc_msgSend_objectForKeyedSubscript_(v155, v162, (uint64_t)v161, v163, v164, v165);

    if (v166)
    {
      uint64_t v172 = objc_msgSend_integerValue(v166, v167, v168, v169, v170, v171);
      id v173 = v126;
      self;
      if (v172 == 8)
      {
        uint64_t v179 = 0;
      }
      else if ((v172 & 0xFFFFFFFFFFFFFFFELL) == 6 {
             || v172 == 5 && (objc_msgSend_strokeAttributes(v173, v174, v175, v176, v177, v178) & 2) != 0)
      }
      {
        uint64_t v179 = _os_feature_enabled_impl();
      }
      else
      {
        uint64_t v179 = 1;
      }

      id v180 = v173;
      self;
      if (v154 == 8)
      {

        if ((v179 & 1) == 0) {
          goto LABEL_129;
        }
LABEL_66:
        objc_msgSend_bounds(v180, v186, v187, v188, v189, v190);
        double v192 = CGRectGetMidY(v851);
        double v193 = v192;
        if (v192 == 0.0) {
          unint64_t v194 = 0;
        }
        else {
          unint64_t v194 = *(void *)&v192;
        }
        unint64_t v195 = (unint64_t)v833[1];
        if (v833[1])
        {
          uint8x8_t v196 = (uint8x8_t)vcnt_s8((int8x8_t)v833[1]);
          v196.i16[0] = vaddlv_u8(v196);
          if (v196.u32[0] > 1uLL)
          {
            uint64_t v179 = v194;
            if ((void *)v194 >= v833[1]) {
              uint64_t v179 = v194 % (unint64_t)v833[1];
            }
          }
          else
          {
            uint64_t v179 = ((unint64_t)v833[1] - 1) & v194;
          }
          uint64_t v197 = (double **)*((void *)v833[0] + v179);
          if (v197)
          {
            long long v198 = *v197;
            if (v198)
            {
              if (v196.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v200 = *((void *)v198 + 1);
                  if (v200 == v194)
                  {
                    if (v198[2] == v193) {
                      goto LABEL_129;
                    }
                  }
                  else if ((v200 & ((unint64_t)v833[1] - 1)) != v179)
                  {
                    goto LABEL_89;
                  }
                  long long v198 = *(double **)v198;
                  if (!v198) {
                    goto LABEL_89;
                  }
                }
              }
              do
              {
                unint64_t v199 = *((void *)v198 + 1);
                if (v199 == v194)
                {
                  if (v198[2] == v193) {
                    goto LABEL_129;
                  }
                }
                else
                {
                  if ((void *)v199 >= v833[1]) {
                    v199 %= (unint64_t)v833[1];
                  }
                  if (v199 != v179) {
                    break;
                  }
                }
                long long v198 = *(double **)v198;
              }
              while (v198);
            }
          }
        }
LABEL_89:
        uint64_t v201 = (double *)operator new(0x18uLL);
        *uint64_t v201 = 0.0;
        *((void *)v201 + 1) = v194;
        v201[2] = v193;
        float v202 = (float)((unint64_t)__p[1] + 1);
        if (v195 && (float)(v835 * (float)v195) >= v202)
        {
          long long v203 = v833[0];
          long long v204 = (double **)*((void *)v833[0] + v179);
          if (v204) {
            goto LABEL_92;
          }
LABEL_116:
          *uint64_t v201 = *(double *)__p;
          __p[0] = v201;
          v203[v179] = __p;
          if (*(void *)v201)
          {
            unint64_t v213 = *(void *)(*(void *)v201 + 8);
            if ((v195 & (v195 - 1)) != 0)
            {
              if (v213 >= v195) {
                v213 %= v195;
              }
            }
            else
            {
              v213 &= v195 - 1;
            }
            long long v204 = (double **)((char *)v833[0] + 8 * v213);
            goto LABEL_127;
          }
        }
        else
        {
          BOOL v205 = (v195 & (v195 - 1)) != 0;
          if (v195 < 3) {
            BOOL v205 = 1;
          }
          unint64_t v206 = v205 | (2 * v195);
          unint64_t v207 = vcvtps_u32_f32(v202 / v835);
          if (v206 <= v207) {
            size_t prime = v207;
          }
          else {
            size_t prime = v206;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
            unint64_t v195 = (unint64_t)v833[1];
          }
          if (prime > v195) {
            goto LABEL_103;
          }
          if (prime < v195)
          {
            unint64_t v209 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v835);
            if (v195 < 3
              || (uint8x8_t v210 = (uint8x8_t)vcnt_s8((int8x8_t)v195), v210.i16[0] = vaddlv_u8(v210), v210.u32[0] > 1uLL))
            {
              unint64_t v209 = std::__next_prime(v209);
            }
            else
            {
              uint64_t v211 = 1 << -(char)__clz(v209 - 1);
              if (v209 >= 2) {
                unint64_t v209 = v211;
              }
            }
            if (prime <= v209) {
              size_t prime = v209;
            }
            if (prime < v195) {
LABEL_103:
            }
              sub_1C4949C24((uint64_t)v833, prime);
          }
          unint64_t v195 = (unint64_t)v833[1];
          unint64_t v212 = (unint64_t)v833[1] - 1;
          if (((unint64_t)v833[1] & ((unint64_t)v833[1] - 1)) != 0)
          {
            if ((void *)v194 >= v833[1])
            {
              uint64_t v179 = v194 % (unint64_t)v833[1];
              long long v203 = v833[0];
              long long v204 = (double **)*((void *)v833[0] + v194 % (unint64_t)v833[1]);
              if (!v204) {
                goto LABEL_116;
              }
            }
            else
            {
              uint64_t v179 = v194;
              long long v203 = v833[0];
              long long v204 = (double **)*((void *)v833[0] + v194);
              if (!v204) {
                goto LABEL_116;
              }
            }
          }
          else
          {
            uint64_t v179 = v212 & v194;
            long long v203 = v833[0];
            long long v204 = (double **)*((void *)v833[0] + (v212 & v194));
            if (!v204) {
              goto LABEL_116;
            }
          }
LABEL_92:
          *(void *)uint64_t v201 = *v204;
LABEL_127:
          void *v204 = v201;
        }
        ++__p[1];
      }
      else
      {
        if ((v154 & 0xFFFFFFFFFFFFFFFELL) == 6
          || v154 == 5 && (objc_msgSend_strokeAttributes(v180, v181, v182, v183, v184, v185) & 2) != 0)
        {
          int v191 = _os_feature_enabled_impl();

          if (v179 == v191) {
            goto LABEL_129;
          }
          goto LABEL_66;
        }

        if ((v179 & 1) == 0) {
          goto LABEL_66;
        }
      }
    }
LABEL_129:

    goto LABEL_130;
  }
LABEL_132:

  if (v785[2]())
  {
    id v221 = 0;
    goto LABEL_265;
  }
  v800 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v216, v217, v218, v219, v220);
  uint64_t v227 = __p[0];
  if (__p[0])
  {
    float64x2_t v792 = (float64x2_t)vdupq_n_s64(0x4082C00000000000uLL);
    do
    {
      uint64_t v796 = v227[2];
      self;
      self;
      int64x2_t v228 = vcvtq_s64_f64(vrndmq_f64(vdivq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(v796, 0), (float64x2_t)xmmword_1C4C44920), v792)));
      uint64_t v229 = v228.i64[0];
      if (v228.i64[0] <= v228.i64[1])
      {
        uint64_t v230 = v228.i64[1] + 1;
        do
        {
          uint64_t v231 = objc_msgSend_numberWithInteger_(NSNumber, v222, v229, v224, v225, v226);
          objc_msgSend_addObject_(v800, v232, (uint64_t)v231, v233, v234, v235);

          ++v229;
        }
        while (v230 != v229);
      }
      uint64_t v227 = (void *)*v227;
    }
    while (v227);
  }
  v769 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v222, v223, v224, v225, v226);
  v791 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v236, v237, v238, v239, v240);
  v784 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v241, v242, v243, v244, v245);
  uint64_t v251 = objc_msgSend_mutableCopy(v802, v246, v247, v248, v249, v250);
  long long v815 = 0u;
  long long v816 = 0u;
  long long v813 = 0u;
  long long v814 = 0u;
  id v774 = v777;
  v793 = (void *)v251;
  uint64_t v254 = objc_msgSend_countByEnumeratingWithState_objects_count_(v774, v252, (uint64_t)&v813, (uint64_t)v840, 16, v253);
  if (v254)
  {
    id v787 = *(id *)v814;
    float64x2_t v778 = (float64x2_t)vdupq_n_s64(0x4082C00000000000uLL);
LABEL_144:
    uint64_t v782 = v254;
    uint64_t v255 = 0;
    while (1)
    {
      if (*(id *)v814 != v787) {
        objc_enumerationMutation(v774);
      }
      uint64_t v256 = *(void **)(*((void *)&v813 + 1) + 8 * v255);
      if (v785[2]())
      {
        char v773 = 1;
        goto LABEL_180;
      }
      objc_msgSend_bounds(v256, v257, v258, v259, v260, v261);
      double v794 = CGRectGetMidY(v852);
      double v262 = NSNumber;
      self;
      v797 = objc_msgSend_numberWithInteger_(v262, v263, vcvtmd_s64_f64(v794 / 600.0), v264, v265, v266);
      double v272 = objc_msgSend_strokeClassificationsByStrokeIdentifier(v802, v267, v268, v269, v270, v271);
      uint64_t v278 = objc_msgSend_encodedStrokeIdentifier(v256, v273, v274, v275, v276, v277);
      v789 = objc_msgSend_objectForKeyedSubscript_(v272, v279, (uint64_t)v278, v280, v281, v282);

      uint64_t v288 = objc_msgSend_integerValue(v789, v283, v284, v285, v286, v287);
      id v289 = v256;
      self;
      if (v288 == 8)
      {
      }
      else
      {
        if ((v288 & 0xFFFFFFFFFFFFFFFELL) != 6
          && (v288 != 5 || (objc_msgSend_strokeAttributes(v289, v290, v291, v292, v293, v294) & 2) == 0))
        {

LABEL_162:
          if (objc_msgSend_containsObject_(v800, v295, (uint64_t)v797, v297, v298, v299))
          {
            objc_msgSend_objectForKeyedSubscript_(v769, v342, (uint64_t)v797, v344, v345, v346);
            id v301 = (id)objc_claimAutoreleasedReturnValue();
            if (!v301)
            {
              objc_msgSend_set(MEMORY[0x1E4F1CA80], v347, v348, v349, v350, v351);
              id v301 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setObject_forKeyedSubscript_(v769, v352, (uint64_t)v301, (uint64_t)v797, v353, v354);
            }
            objc_msgSend_addObject_(v301, v347, (uint64_t)v289, v349, v350, v351);
          }
          else
          {
            v355 = objc_msgSend_strokeClassificationsByStrokeIdentifier(v801, v342, v343, v344, v345, v346);
            v361 = objc_msgSend_encodedStrokeIdentifier(v289, v356, v357, v358, v359, v360);
            v366 = objc_msgSend_objectForKeyedSubscript_(v355, v362, (uint64_t)v361, v363, v364, v365);
            uint64_t v372 = objc_msgSend_integerValue(v366, v367, v368, v369, v370, v371);

            v378 = objc_msgSend_scriptClassificationsByStrokeIdentifier(v801, v373, v374, v375, v376, v377);
            v384 = objc_msgSend_encodedStrokeIdentifier(v289, v379, v380, v381, v382, v383);
            v389 = objc_msgSend_objectForKeyedSubscript_(v378, v385, (uint64_t)v384, v386, v387, v388);
            uint64_t v395 = objc_msgSend_integerValue(v389, v390, v391, v392, v393, v394);

            v401 = objc_msgSend_scriptClassificationRawResultsByStrokeIdentifier(v801, v396, v397, v398, v399, v400);
            v407 = objc_msgSend_encodedStrokeIdentifier(v289, v402, v403, v404, v405, v406);
            objc_msgSend_objectForKey_(v401, v408, (uint64_t)v407, v409, v410, v411);
            id v301 = (id)objc_claimAutoreleasedReturnValue();

            sub_1C4BD01C8((uint64_t)v793, v289, v372);
            sub_1C4BD038C(v793, v289, v395, v301);
          }
          goto LABEL_167;
        }
        int v300 = _os_feature_enabled_impl();

        if (v300) {
          goto LABEL_162;
        }
      }
      objc_msgSend_scriptCodeMap(v786, v295, v296, v297, v298, v299);
      id v301 = (id)objc_claimAutoreleasedReturnValue();
      self;
      v312 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v302, v303, v304, v305, v306);
      for (unint64_t m = 0; objc_msgSend_count(v301, v307, v308, v309, v310, v311) > m; ++m)
      {
        v318 = objc_msgSend_objectAtIndexedSubscript_(v301, v314, m, v315, v316, v317);
        uint64_t v324 = objc_msgSend_integerValue(v318, v319, v320, v321, v322, v323);

        if (v324 == 8)
        {
          v329 = objc_msgSend_numberWithInteger_(NSNumber, v325, 8, v326, v327, v328);
          objc_msgSend_setObject_forKey_(v312, v330, (uint64_t)&unk_1F203F4C0, (uint64_t)v329, v331, v332);
        }
        else
        {
          v329 = objc_msgSend_numberWithInteger_(NSNumber, v325, v324, v326, v327, v328);
          objc_msgSend_setObject_forKey_(v312, v333, (uint64_t)&unk_1F203F4D0, (uint64_t)v329, v334, v335);
        }
      }
      v336 = [CHScriptClassificationRawResult alloc];
      v341 = objc_msgSend_initWithProbabilityByScriptClassifications_(v336, v337, (uint64_t)v312, v338, v339, v340);

      sub_1C4BD038C(v793, v289, 8, v341);
LABEL_167:

      self;
      self;
      int64x2_t v416 = vcvtq_s64_f64(vrndmq_f64(vdivq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v794, 0), (float64x2_t)xmmword_1C4C44920), v778)));
      uint64_t v417 = v416.i64[0];
      if (v416.i64[0] <= v416.i64[1])
      {
        uint64_t v418 = v416.i64[1] + 1;
        do
        {
          v419 = objc_msgSend_numberWithInteger_(NSNumber, v412, v417, v413, v414, v415);
          if (objc_msgSend_containsObject_(v800, v420, (uint64_t)v419, v421, v422, v423))
          {
            v433 = objc_msgSend_objectForKeyedSubscript_(v791, v424, (uint64_t)v419, v425, v426, v427);
            if (!v433)
            {
              v433 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v428, v429, v430, v431, v432);
              objc_msgSend_setObject_forKeyedSubscript_(v791, v434, (uint64_t)v433, (uint64_t)v419, v435, v436);
            }
            objc_msgSend_addObject_(v433, v428, (uint64_t)v289, v430, v431, v432);
          }
          ++v417;
        }
        while (v418 != v417);
      }
      v442 = objc_msgSend_objectForKeyedSubscript_(v784, v412, (uint64_t)v797, v413, v414, v415);
      if (!v442)
      {
        v442 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v437, v438, v439, v440, v441);
        objc_msgSend_setObject_forKeyedSubscript_(v784, v443, (uint64_t)v442, (uint64_t)v797, v444, v445);
      }
      objc_msgSend_addObject_(v442, v437, (uint64_t)v289, v439, v440, v441);

      if (++v255 == v782)
      {
        uint64_t v254 = objc_msgSend_countByEnumeratingWithState_objects_count_(v774, v446, (uint64_t)&v813, (uint64_t)v840, 16, v447);
        if (v254) {
          goto LABEL_144;
        }
        break;
      }
    }
  }
  char v773 = 0;
LABEL_180:

  long long v811 = 0u;
  long long v812 = 0u;
  long long v809 = 0u;
  long long v810 = 0u;
  id v779 = v769;
  id v775 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v779, v448, (uint64_t)&v809, (uint64_t)v839, 16, v449);
  if (v775)
  {
    uint64_t v772 = *(void *)v810;
    while (1)
    {
      v783 = 0;
      do
      {
        if (*(void *)v810 != v772) {
          objc_enumerationMutation(v779);
        }
        v450 = *(void **)(*((void *)&v809 + 1) + 8 * (void)v783);
        if (v785[2]())
        {

LABEL_263:
          v764 = 0;
          v763 = v793;
          goto LABEL_264;
        }
        v790 = objc_msgSend_objectForKeyedSubscript_(v779, v451, (uint64_t)v450, v452, v453, v454);
        v795 = objc_msgSend_objectForKeyedSubscript_(v791, v455, (uint64_t)v450, v456, v457, v458);
        if ((unint64_t)objc_msgSend_count(v790, v459, v460, v461, v462, v463) < 2
          || (unint64_t)objc_msgSend_count(v795, v464, v465, v466, v467, v468) <= 0xA)
        {
          v469 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CA80], v464, (uint64_t)v795, v466, v467, v468);
          v470 = NSNumber;
          uint64_t v476 = objc_msgSend_integerValue(v450, v471, v472, v473, v474, v475);
          v481 = objc_msgSend_numberWithInteger_(v470, v477, v476 - 1, v478, v479, v480);
          v487 = objc_msgSend_allKeys(v784, v482, v483, v484, v485, v486);
          LODWORD(v470) = objc_msgSend_containsObject_(v487, v488, (uint64_t)v481, v489, v490, v491);

          if (v470)
          {
            v497 = objc_msgSend_objectForKeyedSubscript_(v784, v492, (uint64_t)v481, v494, v495, v496);
            objc_msgSend_unionSet_(v469, v498, (uint64_t)v497, v499, v500, v501);
          }
          v502 = NSNumber;
          uint64_t v503 = objc_msgSend_integerValue(v450, v492, v493, v494, v495, v496);
          v508 = objc_msgSend_numberWithInteger_(v502, v504, v503 + 1, v505, v506, v507);
          v514 = objc_msgSend_allKeys(v784, v509, v510, v511, v512, v513);
          LODWORD(v502) = objc_msgSend_containsObject_(v514, v515, (uint64_t)v508, v516, v517, v518);

          if (v502)
          {
            v524 = objc_msgSend_objectForKeyedSubscript_(v784, v519, (uint64_t)v508, v521, v522, v523);
            objc_msgSend_unionSet_(v469, v525, (uint64_t)v524, v526, v527, v528);
          }
          uint64_t v529 = objc_msgSend_count(v469, v519, v520, v521, v522, v523);
          if (v529 != objc_msgSend_count(v795, v530, v531, v532, v533, v534))
          {
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            v535 = (id)qword_1EA3C9FF0;
            if (os_log_type_enabled(v535, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(buf) = 0;
              _os_log_impl(&dword_1C492D000, v535, OS_LOG_TYPE_DEBUG, "Adding neighbor tiles strokes as context in case of insufficient context", (uint8_t *)&buf, 2u);
            }

            v541 = objc_msgSend_allObjects(v469, v536, v537, v538, v539, v540);
            v807[0] = MEMORY[0x1E4F143A8];
            v807[1] = 3221225472;
            v807[2] = sub_1C4BD4730;
            v807[3] = &unk_1E64E1E28;
            id v808 = v776;
            v546 = objc_msgSend_sortedArrayUsingComparator_(v541, v542, (uint64_t)v807, v543, v544, v545);

            uint64_t v552 = objc_msgSend_copy(v546, v547, v548, v549, v550, v551);
            v795 = (void *)v552;
          }
        }
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        v553 = (id)qword_1EA3C9FF0;
        if (os_log_type_enabled(v553, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v559 = objc_msgSend_count(v795, v554, v555, v556, v557, v558);
          LODWORD(buf) = 134217984;
          *(void *)((char *)&buf + 4) = v559;
          _os_log_impl(&dword_1C492D000, v553, OS_LOG_TYPE_DEBUG, "Running stroke classification over %ld strokes", (uint8_t *)&buf, 0xCu);
        }

        long long buf = 0uLL;
        uint64_t v838 = 0;
        char v562 = objc_msgSend_classifyStrokes_outStrokeClassProbabilities_cancellationBlock_(v786, v560, (uint64_t)v795, (uint64_t)&buf, (uint64_t)v785, v561);
        char v773 = ((uint64_t (*)(uint64_t (**)(void)))v785[2])(v785);
        char v780 = v562 ^ 1 | v773;
        if ((v780 & 1) == 0)
        {
          for (unint64_t n = 0; ; ++n)
          {
            if (n >= objc_msgSend_count(v795, v563, v564, v565, v566, v567)) {
              goto LABEL_204;
            }
            v579 = objc_msgSend_objectAtIndexedSubscript_(v795, v575, n, v576, v577, v578);
            if (objc_msgSend_containsObject_(v790, v580, (uint64_t)v579, v581, v582, v583)) {
              break;
            }
LABEL_252:
          }
          uint64_t v589 = buf;
          objc_msgSend_scriptCodeMap(v786, v584, v585, v586, v587, v588);
          id v590 = (id)objc_claimAutoreleasedReturnValue();
          self;
          v600 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v591, v592, v593, v594, v595);
          v601 = (void *)(v589 + 24 * n);
          if ((int)((v601[1] - *v601) >> 2) >= 1)
          {
            uint64_t v602 = 0;
            do
            {
              v603 = objc_msgSend_objectAtIndexedSubscript_(v590, v596, v602, v597, v598, v599);
              LODWORD(v604) = *(_DWORD *)(*v601 + 4 * v602);
              v610 = objc_msgSend_numberWithFloat_(NSNumber, v605, v606, v607, v608, v609, v604);
              objc_msgSend_setObject_forKey_(v600, v611, (uint64_t)v610, (uint64_t)v603, v612, v613);

              ++v602;
            }
            while (v602 < (int)((v601[1] - *v601) >> 2));
          }
          v614 = [CHScriptClassificationRawResult alloc];
          v798 = objc_msgSend_initWithProbabilityByScriptClassifications_(v614, v615, (uint64_t)v600, v616, v617, v618);

          v623 = objc_msgSend_scriptClassificationAtIndex_(v798, v619, 0, v620, v621, v622);
          uint64_t v629 = objc_msgSend_integerValue(v623, v624, v625, v626, v627, v628);

          v635 = objc_msgSend_probabilityByScriptClassifications(v798, v630, v631, v632, v633, v634);
          v640 = objc_msgSend_numberWithInteger_(NSNumber, v636, v629, v637, v638, v639);
          v645 = objc_msgSend_objectForKeyedSubscript_(v635, v641, (uint64_t)v640, v642, v643, v644);
          objc_msgSend_floatValue(v645, v646, v647, v648, v649, v650);
          float v652 = v651;

          if (((v629 == 8) & (objc_msgSend_strokeAttributes(v579, v653, v654, v655, v656, v657) >> 2)) != 0) {
            uint64_t v663 = 7;
          }
          else {
            uint64_t v663 = v629;
          }
          double v669 = v652;
          if ((objc_msgSend_strokeAttributes(v579, v658, v659, v660, v661, v662) & 8) != 0 && v663 == 4 && v669 < 0.9)
          {
            objc_msgSend_mathScriptProbability(v798, v664, v665, v666, v667, v668);
            double v727 = v726;
            v732 = objc_msgSend_scriptClassificationAtIndex_(v798, v728, 1, v729, v730, v731);
            uint64_t v738 = objc_msgSend_integerValue(v732, v733, v734, v735, v736, v737);

            char isScriptClassificationMath = objc_msgSend_isScriptClassificationMath_(CHStrokeUtilities, v739, v738, v740, v741, v742);
            if (v738 == 11) {
              char v744 = 1;
            }
            else {
              char v744 = isScriptClassificationMath;
            }
            if (((v727 > 0.1) & v744) != 0) {
              uint64_t v663 = 12;
            }
            else {
              uint64_t v663 = 4;
            }
            goto LABEL_246;
          }
          if (v663 == 8)
          {
            if ((unint64_t)objc_msgSend_count(v795, v664, v665, v666, v667, v668) < 0x1A || v669 < 0.65)
            {
              v670 = objc_msgSend_scriptClassificationAtIndex_(v798, v664, 1, v666, v667, v668);
              uint64_t v663 = objc_msgSend_integerValue(v670, v671, v672, v673, v674, v675);

              v681 = objc_msgSend_validFallbackScriptClassificationsForNontext(CHScriptClassificationRawResult, v676, v677, v678, v679, v680);
              v686 = objc_msgSend_numberWithInteger_(NSNumber, v682, v663, v683, v684, v685);
              int v691 = objc_msgSend_containsObject_(v681, v687, (uint64_t)v686, v688, v689, v690);

              if (v691)
              {
                long long v805 = 0u;
                long long v806 = 0u;
                long long v803 = 0u;
                long long v804 = 0u;
                v692 = objc_msgSend_nontextCandidates(v793, v664, v665, v666, v667, v668);
                id v788 = v692;
                uint64_t v700 = objc_msgSend_countByEnumeratingWithState_objects_count_(v692, v693, (uint64_t)&v803, (uint64_t)v836, 16, v694);
                if (!v700) {
                  goto LABEL_253;
                }
                uint64_t v701 = *(void *)v804;
                while (1)
                {
                  for (iuint64_t i = 0; ii != v700; ++ii)
                  {
                    if (*(void *)v804 != v701) {
                      objc_enumerationMutation(v788);
                    }
                    v703 = *(void **)(*((void *)&v803 + 1) + 8 * ii);
                    v704 = objc_msgSend_encodedStrokeIdentifier(v579, v695, v696, v697, v698, v699);
                    v710 = objc_msgSend_strokeIdentifier(v703, v705, v706, v707, v708, v709);
                    if (objc_msgSend_isEqual_(v704, v711, (uint64_t)v710, v712, v713, v714))
                    {
                    }
                    else
                    {
                      char hasBoundingBoxOverlappingWithStroke = objc_msgSend_hasBoundingBoxOverlappingWithStroke_(v703, v715, (uint64_t)v579, v716, v717, v718);

                      if ((hasBoundingBoxOverlappingWithStroke & 1) == 0) {
                        continue;
                      }
                    }
                    v720 = objc_msgSend_nontextCandidates(v793, v695, v696, v697, v698, v699);
                    char isSupportedByValidTextStrokesOrNonTextCandidates = objc_msgSend_isSupportedByValidTextStrokesOrNonTextCandidates_(v703, v721, (uint64_t)v720, v722, v723, v724);

                    if (isSupportedByValidTextStrokesOrNonTextCandidates)
                    {
                      uint64_t v663 = 8;
                      v692 = v788;
                      goto LABEL_253;
                    }
                  }
                  v692 = v788;
                  uint64_t v700 = objc_msgSend_countByEnumeratingWithState_objects_count_(v788, v695, (uint64_t)&v803, (uint64_t)v836, 16, v699);
                  if (!v700)
                  {
LABEL_253:

                    goto LABEL_246;
                  }
                }
              }
            }
            uint64_t v663 = 8;
          }
LABEL_246:
          if ((objc_msgSend_strokeAttributes(v579, v664, v665, v666, v667, v668) & 2) != 0
            && !objc_msgSend_isValidScriptClassificationForShapeStroke(v798, v745, v746, v747, v748, v749))
          {
            uint64_t v663 = 8;
          }
          else if (v663 == 11)
          {
            v750 = objc_msgSend_fallbackScriptClassificationForWeakLabel(v798, v745, v746, v747, v748, v749);
            uint64_t v663 = objc_msgSend_integerValue(v750, v751, v752, v753, v754, v755);
          }
          sub_1C4BD038C(v793, v579, v663, v798);

          goto LABEL_252;
        }
LABEL_204:
        uint64_t v568 = buf;
        if ((void)buf)
        {
          uint64_t v569 = *((void *)&buf + 1);
          v570 = (void *)buf;
          if (*((void *)&buf + 1) != (void)buf)
          {
            uint64_t v571 = *((void *)&buf + 1);
            do
            {
              v573 = *(void **)(v571 - 24);
              v571 -= 24;
              v572 = v573;
              if (v573)
              {
                *(void *)(v569 - 16) = v572;
                operator delete(v572);
              }
              uint64_t v569 = v571;
            }
            while (v571 != v568);
            v570 = (void *)buf;
          }
          *((void *)&buf + 1) = v568;
          operator delete(v570);
        }

        if (v780) {
          goto LABEL_260;
        }
        v783 = (char *)v783 + 1;
      }
      while (v783 != v775);
      id v775 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v779, v756, (uint64_t)&v809, (uint64_t)v839, 16, v757);
      if (!v775)
      {

        goto LABEL_261;
      }
    }
  }
LABEL_260:

  if (v773) {
    goto LABEL_263;
  }
LABEL_261:
  v763 = v793;
  v764 = objc_msgSend_copy(v793, v758, v759, v760, v761, v762);
LABEL_264:
  id v221 = v764;

LABEL_265:
  v765 = __p[0];
  if (__p[0])
  {
    do
    {
      v766 = (void *)*v765;
      operator delete(v765);
      v765 = v766;
    }
    while (v766);
  }
  v767 = v833[0];
  v833[0] = 0;
  if (v767) {
    operator delete(v767);
  }
LABEL_269:

  return v221;
}

void sub_1C4BD40FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_Unwind_Exception *exception_objecta,void *a29,void *a30,void *a31,uint64_t a32,uint64_t a33,void *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,void *a44)
{
  uint64_t v44 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    do
    {
      uint64_t v45 = (void *)*v44;
      operator delete(v44);
      uint64_t v44 = v45;
    }
    while (v45);
  }
  id v46 = (void *)STACK[0x310];
  STACK[0x310] = 0;
  if (v46) {
    operator delete(v46);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1C4BD4730(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v12 = objc_msgSend_strokeIdentifier(a2, v7, v8, v9, v10, v11);
  uint64_t v18 = objc_msgSend_strokeIdentifier(v5, v13, v14, v15, v16, v17);
  uint64_t v22 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v6, v19, (uint64_t)v12, (uint64_t)v18, v20, v21);

  return v22;
}

void sub_1C4BD47AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD47CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD6240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BD6858(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  self;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v14 = objc_msgSend_strokeIdentifiers(v7, v9, v10, v11, v12, v13, 0);
  uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v50, (uint64_t)v54, 16, v16);
  if (v22)
  {
    uint64_t v23 = *(void *)v51;
    while (2)
    {
      uint64_t v24 = 0;
      do
      {
        if (*(void *)v51 != v23) {
          objc_enumerationMutation(v14);
        }
        uint64_t v25 = *(void *)(*((void *)&v50 + 1) + 8 * v24);
        uint64_t v26 = objc_msgSend_scriptClassificationRawResultsByStrokeIdentifier(v8, v17, v18, v19, v20, v21);
        uint64_t v31 = objc_msgSend_objectForKeyedSubscript_(v26, v27, v25, v28, v29, v30);

        uint64_t v37 = objc_msgSend_orderedScriptClassification(v31, v32, v33, v34, v35, v36);
        uint64_t v43 = objc_msgSend_firstObject(v37, v38, v39, v40, v41, v42);

        LODWORD(v37) = objc_msgSend_containsObject_(v6, v44, (uint64_t)v43, v45, v46, v47);
        if (!v37)
        {
          uint64_t v48 = 0;
          goto LABEL_11;
        }
        ++v24;
      }
      while (v22 != v24);
      uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v17, (uint64_t)&v50, (uint64_t)v54, 16, v21);
      if (v22) {
        continue;
      }
      break;
    }
  }
  uint64_t v48 = 1;
LABEL_11:

  return v48;
}

void sub_1C4BD69FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BD6A6C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_opt_class();
  objc_msgSend_bounds(v5, v8, v9, v10, v11, v12);
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;
  objc_msgSend_bounds(v6, v21, v22, v23, v24, v25);
  objc_msgSend_distanceFromRectangle_toRectangle_(v7, v26, v27, v28, v29, v30, v14, v16, v18, v20, v31, v32, v33, v34);
  if (v40 <= 1.0)
  {
    uint64_t v42 = *(void **)(a1 + 32);
    if (!v42) {
      goto LABEL_5;
    }
    uint64_t v43 = objc_msgSend_substrokesByStrokeIdentifier(v42, v35, v36, v37, v38, v39);
    uint64_t v49 = objc_msgSend_encodedStrokeIdentifier(v5, v44, v45, v46, v47, v48);
    uint64_t v54 = objc_msgSend_objectForKey_(v43, v50, (uint64_t)v49, v51, v52, v53);

    if (!v54)
    {
LABEL_5:
      uint64_t v60 = objc_opt_class();
      uint64_t v54 = objc_msgSend_substrokesForStroke_(v60, v61, (uint64_t)v5, v62, v63, v64);
    }
    if ((unint64_t)objc_msgSend_count(v54, v55, v56, v57, v58, v59) >= 2)
    {
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      id v65 = v54;
      uint64_t v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v65, v66, (uint64_t)&v103, (uint64_t)v107, 16, v67);
      if (v41)
      {
        uint64_t v68 = *(void *)v104;
        while (2)
        {
          for (uint64_t i = 0; i != v41; ++i)
          {
            if (*(void *)v104 != v68) {
              objc_enumerationMutation(v65);
            }
            int v70 = *(void **)(*((void *)&v103 + 1) + 8 * i);
            uint64_t v71 = objc_opt_class();
            objc_msgSend_bounds(v70, v72, v73, v74, v75, v76, (void)v103);
            double v78 = v77;
            double v80 = v79;
            double v82 = v81;
            double v84 = v83;
            objc_msgSend_bounds(v6, v85, v86, v87, v88, v89);
            objc_msgSend_distanceFromRectangle_toRectangle_(v71, v90, v91, v92, v93, v94, v78, v80, v82, v84, v95, v96, v97, v98);
            if (v101 <= 1.0)
            {
              uint64_t v41 = 1;
              goto LABEL_18;
            }
          }
          uint64_t v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v65, v99, (uint64_t)&v103, (uint64_t)v107, 16, v100);
          if (v41) {
            continue;
          }
          break;
        }
      }
LABEL_18:
    }
    else
    {
      uint64_t v41 = 1;
    }
  }
  else
  {
    uint64_t v41 = 0;
  }

  return v41;
}

void sub_1C4BD6CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD6FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1C4BD6FFC(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4BD7020(uint64_t a1)
{
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4BD7038(uint64_t a1, double a2, double a3)
{
  id v5 = *(void **)(*(void *)(a1 + 32) + 8);
  id v7 = (double *)v5[7];
  unint64_t v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    double *v7 = a2;
    v7[1] = a3;
    uint64_t v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  uint64_t v9 = (double *)v5[6];
  uint64_t v10 = ((char *)v7 - (char *)v9) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 60) {
      sub_1C4949AA8();
    }
    double v14 = (char *)operator new(16 * v13);
    double v15 = (double *)&v14[16 * v10];
    double v16 = &v14[16 * v13];
    *double v15 = a2;
    v15[1] = a3;
    uint64_t v8 = (uint64_t)(v15 + 2);
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  double v15 = (double *)(16 * v10);
  double v16 = 0;
  *double v15 = a2;
  v15[1] = a3;
  uint64_t v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    id v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_18:
  v5[7] = v8;
}

void sub_1C4BD78F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4BD7A14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4BD7A24(uint64_t a1)
{
}

void sub_1C4BD7A2C(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v6 = a3;
  if (objc_msgSend_compare_(v6, v7, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v8, v9, v10) == 1)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
  }
}

void sub_1C4BD7ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD7B00(uint64_t a1, double a2, double a3)
{
  if (a2 == 0.0) {
    double v6 = 0.0;
  }
  else {
    double v6 = a2;
  }
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      double v3 = v6;
      if (*(void *)&v6 >= v7) {
        *(void *)&double v3 = *(void *)&v6 % v7;
      }
    }
    else
    {
      *(void *)&double v3 = (v7 - 1) & *(void *)&v6;
    }
    uint64_t v9 = *(double ***)(*(void *)a1 + 8 * *(void *)&v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = *((void *)v10 + 1);
            if (v12 == *(void *)&v6)
            {
              if (v10[2] == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != *(void *)&v3)
            {
              goto LABEL_25;
            }
            uint64_t v10 = *(double **)v10;
            if (!v10) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == *(void *)&v6)
          {
            if (v10[2] == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != *(void *)&v3) {
              break;
            }
          }
          uint64_t v10 = *(double **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_25:
  unint64_t v13 = (double *)operator new(0x18uLL);
  *unint64_t v13 = 0.0;
  v13[1] = v6;
  v13[2] = a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14) {
    goto LABEL_53;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (prime > v7) {
    goto LABEL_37;
  }
  if (prime < v7)
  {
    unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      unint64_t v20 = std::__next_prime(v20);
    }
    else
    {
      uint64_t v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2) {
        unint64_t v20 = v22;
      }
    }
    if (prime <= v20) {
      size_t prime = v20;
    }
    if (prime < v7) {
LABEL_37:
    }
      sub_1C4949C24(a1, prime);
  }
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v23 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (*(void *)&v6 >= v7)
    {
      *(void *)&double v3 = *(void *)&v6 % v7;
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(double ***)(*(void *)a1 + 8 * (*(void *)&v6 % v7));
      if (!v25) {
        goto LABEL_56;
      }
LABEL_54:
      *(void *)unint64_t v13 = *v25;
LABEL_62:
      *uint64_t v25 = v13;
      goto LABEL_63;
    }
    double v3 = v6;
LABEL_53:
    uint64_t v24 = *(void *)a1;
    uint64_t v25 = *(double ***)(*(void *)a1 + 8 * *(void *)&v3);
    if (!v25) {
      goto LABEL_56;
    }
    goto LABEL_54;
  }
  *(void *)&double v3 = v23 & *(void *)&v6;
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(double ***)(*(void *)a1 + 8 * (v23 & *(void *)&v6));
  if (v25) {
    goto LABEL_54;
  }
LABEL_56:
  *unint64_t v13 = *(double *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * *(void *)&v3) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v26 = *(void *)(*(void *)v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    uint64_t v25 = (double **)(*(void *)a1 + 8 * v26);
    goto LABEL_62;
  }
LABEL_63:
  ++*(void *)(a1 + 24);
}

void sub_1C4BD7DE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4BD7E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::createCHFastPathCharacterFromSynthesizedData(CoreHandwriting::synthesis::fast_path *this@<X0>, CHDrawing *a2@<X1>, float a3@<S0>, float a4@<S1>, int a5@<W2>, CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *a6@<X8>)
{
  int v7 = (int)a2;
  unint64_t v11 = this;
  *(_OWORD *)uint64_t v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  *(_OWORD *)uint64_t v91 = 0u;
  *(_OWORD *)uint64_t v88 = 0u;
  *(_OWORD *)__p = 0u;
  id v17 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  unint64_t v18 = 0;
  double v19 = a3;
  double v20 = a4;
  float MinY = 3.4028e38;
  float v22 = -3.4028e38;
  while (v18 < objc_msgSend_strokeCount(v11, v12, v13, v14, v15, v16))
  {
    objc_msgSend_boundsForStrokeIndex_(v11, v23, v18, v24, v25, v26);
    if (v27 >= v19)
    {
      if (v27 < v20)
      {
        float MinY = fmin(MinY, v28);
        float v22 = fmax(v22, v28 + v29);
      }
      ++v18;
    }
    else
    {
      uint64_t v30 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v12, v18, v14, v15, v16);
      objc_msgSend_addObject_(v17, v31, (uint64_t)v30, v32, v33, v34);

      ++v18;
    }
  }
  uint64_t v35 = objc_msgSend_drawingWithStrokesFromIndexArray_(v11, v23, (uint64_t)v17, v24, v25, v26);
  uint64_t v41 = v35;
  if (v22 < MinY)
  {
    objc_msgSend_bounds(v35, v36, v37, v38, v39, v40);
    double MaxY = CGRectGetMaxY(v94);
    objc_msgSend_bounds(v41, v43, v44, v45, v46, v47);
    float v22 = MaxY;
    float MinY = CGRectGetMinY(v95);
  }
  uint64_t v48 = (double *)operator new(0x20uLL);
  *uint64_t v48 = 0.0;
  v48[1] = v22;
  v48[2] = 1.0;
  v48[3] = v22;
  if (__p[1]) {
    operator delete(__p[1]);
  }
  __p[1] = v48;
  *(void *)&long long v90 = v48 + 4;
  *((void *)&v90 + 1) = v48 + 4;
  uint64_t v49 = (double *)operator new(0x20uLL);
  *uint64_t v49 = 0.0;
  v49[1] = MinY;
  v49[2] = 1.0;
  v49[3] = MinY;
  if (v91[0]) {
    operator delete(v91[0]);
  }
  v91[0] = v49;
  v91[1] = v49 + 4;
  v92[0] = v49 + 4;
  sub_1C4AAA458(v73, (uint64_t)v88);
  sub_1C4BD8348(&v80, v73, v7, v41);
  sub_1C49B7D84(v88, (char *)v80, v81, (v81 - (unsigned char *)v80) >> 4);
  sub_1C49B7D84(&__p[1], (char *)v82, v83, (v83 - (unsigned char *)v82) >> 4);
  sub_1C49B7D84(v91, (char *)v84, v85, (v85 - (unsigned char *)v84) >> 4);
  sub_1C49B7D84(&v92[1], (char *)v86, v87, (v87 - (unsigned char *)v86) >> 4);
  if (v86)
  {
    uint64_t v87 = (char *)v86;
    operator delete(v86);
  }
  if (v84)
  {
    uint64_t v85 = (char *)v84;
    operator delete(v84);
  }
  if (v82)
  {
    double v83 = (char *)v82;
    operator delete(v82);
  }
  if (v80)
  {
    double v81 = (char *)v80;
    operator delete(v80);
  }
  if (v78)
  {
    double v79 = v78;
    operator delete(v78);
  }
  if (v76)
  {
    double v77 = v76;
    operator delete(v76);
  }
  if (v74)
  {
    uint64_t v75 = v74;
    operator delete(v74);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  double v50 = *((double *)v91[0] + 1);
  double v51 = *((double *)__p[1] + 1);
  id v52 = v41;
  objc_msgSend_bounds(v52, v53, v54, v55, v56, v57);
  float v58 = v51;
  float v59 = v50;
  uint64_t v66 = objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v52, v61, v62, v63, v64, v65, (float)(0.0 / (float)(1.0 / (float)(v58 - v59))) - v60, (float)((float)(1.0 / (float)(1.0 / (float)(v58 - v59))) - v58), (float)(1.0 / (float)(v58 - v59)));

  uint64_t v72 = (CHDrawing *)objc_msgSend_copy(v66, v67, v68, v69, v70, v71);
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::CHFastPathCharacter(a6, v72, a5, v7);

  if (v92[1])
  {
    *(void **)&long long v93 = v92[1];
    operator delete(v92[1]);
  }
  if (v91[0])
  {
    v91[1] = v91[0];
    operator delete(v91[0]);
  }
  if (__p[1])
  {
    *(void **)&long long v90 = __p[1];
    operator delete(__p[1]);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
}

void sub_1C4BD8280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_1C4A2F114((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_1C4BD8328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_1C4A2F114((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_1C4BD8348(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a4;
  uint8x8_t v8 = (void **)(a2 + 6);
  uint64_t v9 = (void **)(a2 + 3);
  double v10 = *(double *)(a2[3] + 8);
  double v11 = *(double *)(a2[6] + 8);
  id v120 = v7;
  objc_msgSend_bounds(v7, v12, v13, v14, v15, v16);
  double v18 = v17;
  objc_msgSend_bounds(v120, v19, v20, v21, v22, v23);
  double v25 = v24;
  objc_msgSend_bounds(v120, v26, v27, v28, v29, v30);
  double v32 = v31;
  uint64_t v38 = unicodeToNSString(a3, v33, v34, v35, v36, v37);
  uint64_t v44 = objc_msgSend_ch_minYIsMidMaxYIsBaseCharSet(MEMORY[0x1E4F28B88], v39, v40, v41, v42, v43);
  uint64_t v48 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v38, v45, (uint64_t)v44, 1, v46, v47);
  float v49 = v18;
  float v50 = v25 + v32;

  if (v48 < 1)
  {
    uint64_t v66 = objc_msgSend_ch_maxYIsBaseCharSet(MEMORY[0x1E4F28B88], v51, v52, v53, v54, v55);
    uint64_t v70 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v38, v67, (uint64_t)v66, 1, v68, v69);
    float v71 = v10;
    float v72 = v11;

    if (v70 < 1)
    {
      double v83 = objc_msgSend_ch_minYIsMidCharSet(MEMORY[0x1E4F28B88], v73, v74, v75, v76, v77);
      uint64_t v87 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v38, v84, (uint64_t)v83, 1, v85, v86);

      if (v87 < 1) {
        goto LABEL_16;
      }
      double v78 = (double *)operator new(0x20uLL);
      float v79 = v49 - v72;
      double v88 = (float)((float)(v49 - v72) + v71);
      double v81 = (char *)(v78 + 4);
      double *v78 = 0.0;
      v78[1] = v88;
      v78[2] = 1.0;
      v78[3] = v88;
      uint64_t v89 = *v9;
      if (*v9)
      {
        a2[4] = v89;
        operator delete(v89);
        *uint64_t v9 = 0;
        a2[4] = 0;
        a2[5] = 0;
      }
    }
    else
    {
      double v78 = (double *)operator new(0x20uLL);
      float v79 = v50 - v71;
      double v80 = (float)((float)(v50 - v71) + v71);
      double v81 = (char *)(v78 + 4);
      double *v78 = 0.0;
      v78[1] = v80;
      v78[2] = 1.0;
      v78[3] = v80;
      double v82 = *v9;
      if (*v9)
      {
        a2[4] = v82;
        operator delete(v82);
        *uint64_t v9 = 0;
        a2[4] = 0;
        a2[5] = 0;
      }
    }
    a2[3] = v78;
    a2[4] = v81;
    a2[5] = v81;
    uint64_t v64 = (double *)operator new(0x20uLL);
    double v65 = (float)(v79 + v72);
  }
  else
  {
    uint64_t v56 = (double *)operator new(0x20uLL);
    uint64_t v57 = (char *)(v56 + 4);
    *uint64_t v56 = 0.0;
    v56[1] = v50;
    v56[2] = 1.0;
    v56[3] = v50;
    float v58 = *v9;
    if (*v9)
    {
      a2[4] = v58;
      operator delete(v58);
      *uint64_t v9 = 0;
      a2[4] = 0;
      a2[5] = 0;
    }
    a2[3] = v56;
    a2[4] = v57;
    a2[5] = v57;
    uint64_t v64 = (double *)operator new(0x20uLL);
    double v65 = v49;
  }
  long long v90 = (char *)(v64 + 4);
  double *v64 = 0.0;
  v64[1] = v65;
  v64[2] = 1.0;
  v64[3] = v65;
  uint64_t v91 = *v8;
  if (*v8)
  {
    a2[7] = v91;
    operator delete(v91);
    *uint8x8_t v8 = 0;
    a2[7] = 0;
    a2[8] = 0;
  }
  a2[6] = v64;
  a2[7] = v90;
  a2[8] = v90;
LABEL_16:
  uint64_t v92 = objc_msgSend_ch_minYIsTopCharSet(MEMORY[0x1E4F28B88], v59, v60, v61, v62, v63);
  uint64_t v96 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v38, v93, (uint64_t)v92, 1, v94, v95);

  if (v96)
  {
    uint64_t v102 = (double *)a2[6];
    if ((double *)a2[7] == v102) {
      sub_1C4AD0A9C();
    }
    uint64_t v103 = a2[3];
    if (a2[4] == v103) {
      sub_1C4AD0A9C();
    }
    float v104 = v102[1];
    float v105 = *(double *)(v103 + 8);
    if ((float)(v104 - v49) != (float)(v105 - v104))
    {
      long long v106 = (double *)operator new(0x20uLL);
      *long long v106 = 0.0;
      double v107 = (float)((float)(v49 * 0.7) + (float)(v105 * 0.3));
      v106[1] = v107;
      v106[2] = 1.0;
      v106[3] = v107;
      a2[7] = v102;
      operator delete(v102);
      a2[6] = v106;
      a2[7] = v106 + 4;
      a2[8] = v106 + 4;
    }
  }
  uint64_t v108 = objc_msgSend_ch_mathDigitsCharSet(MEMORY[0x1E4F28B88], v97, v98, v99, v100, v101);
  uint64_t v112 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v38, v109, (uint64_t)v108, 1, v110, v111);

  if (v112)
  {
    uint64_t v113 = (double *)operator new(0x20uLL);
    uint64_t v114 = (char *)(v113 + 4);
    *uint64_t v113 = 0.0;
    v113[1] = v50;
    v113[2] = 1.0;
    v113[3] = v50;
    uint64_t v115 = *v9;
    if (*v9)
    {
      a2[4] = v115;
      operator delete(v115);
      *uint64_t v9 = 0;
      a2[4] = 0;
      a2[5] = 0;
    }
    a2[3] = v113;
    a2[4] = v114;
    a2[5] = v114;
    uint64_t v116 = (double *)operator new(0x20uLL);
    double v117 = (float)((float)(v49 * 0.7) + (float)(v50 * 0.3));
    uint64_t v118 = (char *)(v116 + 4);
    *uint64_t v116 = 0.0;
    v116[1] = v117;
    v116[2] = 1.0;
    v116[3] = v117;
    uint64_t v119 = *v8;
    if (*v8)
    {
      a2[7] = v119;
      operator delete(v119);
      *uint8x8_t v8 = 0;
      a2[7] = 0;
      a2[8] = 0;
    }
    a2[6] = v116;
    a2[7] = v118;
    a2[8] = v118;
  }
  sub_1C4AAA458(a1, (uint64_t)a2);
}

void sub_1C4BD87CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD87E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD87FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD8900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD8914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD8928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD893C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BD8950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations::getCharactersRequestsToSynthesize(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  long long v175 = 0uLL;
  unint64_t v176 = 0;
  v2 = (CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **)*((void *)this + 2);
  if (v2)
  {
    CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder::getSupportedCharactersInfo(v2, (uint64_t *)buf);
    double v3 = *(void **)&buf[8];
    uint64_t v172 = *(uint64_t ***)buf;
    id v173 = *(uint64_t **)&buf[8];
    uint64_t v174 = v165;
    if (v165)
    {
      *(void *)(*(void *)&buf[8] + 16) = &v173;
      *(void *)long long buf = &buf[8];
      *(void *)&buf[8] = 0;
      uint64_t v165 = 0;
      double v3 = 0;
    }
    else
    {
      uint64_t v172 = &v173;
    }
    sub_1C4999C7C((uint64_t)buf, v3);
    long long v168 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    long long v171 = 0u;
    long long v160 = 0u;
    id v5 = *((id *)this + 1);
    uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v168, (uint64_t)v177, 16, v7);
    if (v13)
    {
      uint64_t v14 = *(void *)v169;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v169 != v14) {
            objc_enumerationMutation(v5);
          }
          uint64_t v16 = *(void **)(*((void *)&v168 + 1) + 8 * i);
          double v17 = objc_msgSend_ch_sentenceEndPunctuationCharacterSet(MEMORY[0x1E4F28B88], v8, v9, v10, v11, v12);
          if (objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v16, v18, (uint64_t)v17, 1, v19, v20))
          {

            continue;
          }
          uint64_t v26 = objc_msgSend_ch_smallCharacterSet(MEMORY[0x1E4F28B88], v21, v22, v23, v24, v25);
          BOOL v30 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v16, v27, (uint64_t)v26, 1, v28, v29) == 0;

          if (v30)
          {
            unsigned int CodepointInString = objc_msgSend_firstCodepointInString(v16, v8, v9, v10, v11, v12);
            double v32 = v173;
            if (!v173)
            {
LABEL_31:
              sub_1C4BD927C((uint64_t)buf, v16);
              uint64_t v39 = *((void *)&v175 + 1);
              if (*((void *)&v175 + 1) >= v176)
              {
                uint64_t v44 = sub_1C4BDBD44((void **)&v175, (long long *)buf);
                uint64_t v42 = v166;
                uint64_t v40 = *(void **)buf;
                uint64_t v41 = *(void **)&buf[8];
              }
              else
              {
                uint64_t v40 = 0;
                uint64_t v41 = 0;
                uint64_t v42 = 0;
                long long v43 = *(_OWORD *)buf;
                memset(buf, 0, sizeof(buf));
                **((_OWORD **)&v175 + 1) = v43;
                *(_DWORD *)(v39 + 16) = v165;
                *(void *)(v39 + 24) = v166;
                *(_OWORD *)(v39 + 32) = v167;
                uint64_t v44 = (char *)(v39 + 48);
              }
              *((void *)&v175 + 1) = v44;

              continue;
            }
            unsigned int v33 = CodepointInString;
            uint64_t v34 = v173;
            while (1)
            {
              unsigned int v35 = *((_DWORD *)v34 + 8);
              if (CodepointInString >= v35)
              {
                if (v35 >= CodepointInString)
                {
                  do
                  {
                    while (1)
                    {
                      uint64_t v36 = v32;
                      unsigned int v37 = *((_DWORD *)v32 + 8);
                      if (CodepointInString < v37) {
                        break;
                      }
                      if (v37 >= CodepointInString)
                      {
                        if ((unint64_t)v36[5] > 2) {
                          goto LABEL_14;
                        }
                        goto LABEL_41;
                      }
                      double v32 = (uint64_t *)v36[1];
                      if (!v32)
                      {
                        uint64_t v38 = (uint64_t **)(v36 + 1);
                        goto LABEL_36;
                      }
                    }
                    double v32 = (uint64_t *)*v36;
                  }
                  while (*v36);
                  uint64_t v38 = (uint64_t **)v36;
LABEL_36:
                  uint64_t v45 = operator new(0x30uLL);
                  v45[8] = v33;
                  *((void *)v45 + 5) = 0;
                  *(void *)uint64_t v45 = 0;
                  *((void *)v45 + 1) = 0;
                  *((void *)v45 + 2) = v36;
                  void *v38 = (uint64_t *)v45;
                  uint64_t v46 = (uint64_t *)v45;
                  if (*v172)
                  {
                    uint64_t v172 = (uint64_t **)*v172;
                    uint64_t v46 = *v38;
                  }
                  sub_1C4949FD4(v173, v46);
                  ++v174;
                  if (*((void *)v45 + 5) <= 2uLL)
                  {
LABEL_41:
                    uint64_t v47 = objc_msgSend_ch_mathDigitsCharSet(MEMORY[0x1E4F28B88], v8, v9, v10, v11, v12);
                    BOOL v51 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v16, v48, (uint64_t)v47, 1, v49, v50) == 0;

                    if (v51) {
                      break;
                    }
                    uint64_t v52 = (void *)*((void *)this + 2);
                    (*(void (**)(void *))(*v52 + 16))(v52);
                    uint64_t v55 = v52[2];
                    uint64_t v54 = v52 + 2;
                    uint64_t v53 = v55;
                    if (!v55) {
                      goto LABEL_53;
                    }
                    uint64_t v56 = v54;
                    do
                    {
                      unsigned int v57 = *(_DWORD *)(v53 + 32);
                      BOOL v58 = v57 >= v33;
                      if (v57 >= v33) {
                        float v59 = (uint64_t *)v53;
                      }
                      else {
                        float v59 = (uint64_t *)(v53 + 8);
                      }
                      if (v58) {
                        uint64_t v56 = (void *)v53;
                      }
                      uint64_t v53 = *v59;
                    }
                    while (*v59);
                    if (v56 != v54 && *((_DWORD *)v56 + 8) <= v33)
                    {
                      sub_1C4A28F48(&__p, v56 + 5);
                      uint64_t v158 = (void **)__p;
                      id v60 = v16;
                      if (qword_1EA3CA000 == -1) {
                        goto LABEL_54;
                      }
                    }
                    else
                    {
LABEL_53:
                      uint64_t v158 = 0;
                      __p = 0;
                      uint64_t v162 = 0;
                      uint64_t v163 = 0;
                      id v60 = v16;
                      if (qword_1EA3CA000 == -1)
                      {
LABEL_54:
                        uint64_t v61 = (id)qword_1EA3C9FD8;
                        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)uint64_t v178 = 138412290;
                          id v179 = v60;
                          _os_log_impl(&dword_1C492D000, v61, OS_LOG_TYPE_DEBUG, "prepareIncreasingVariabilitySynthesisRequest %@", v178, 0xCu);
                        }
                        uint64_t v159 = v60;

                        uint64_t v157 = objc_alloc_init(CHSynthesisRequestOptions);
                        uint64_t v67 = objc_msgSend_copy(*v158, v62, v63, v64, v65, v66);
                        objc_msgSend_bounds(v67, v68, v69, v70, v71, v72);
                        double v74 = v73;
                        double v80 = objc_msgSend_copy(v60, v75, v76, v77, v78, v79);
                        uint64_t v85 = objc_msgSend_stringByAppendingFormat_(v80, v81, @" %@", v82, v83, v84, v60);

                        uint64_t v91 = objc_msgSend_copy(*v158, v86, v87, v88, v89, v90);
                        double v97 = objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v91, v92, v93, v94, v95, v96, v74 + v74, 0.0, 1.0);
                        objc_msgSend_appendDrawing_(v67, v98, (uint64_t)v97, v99, v100, v101);

                        long long v106 = objc_msgSend_stringByAppendingFormat_(v85, v102, @" %@", v103, v104, v105, v60);

                        uint64_t v112 = objc_msgSend_copy(*v158, v107, v108, v109, v110, v111);
                        uint64_t v118 = objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v112, v113, v114, v115, v116, v117, v74 * 4.0, 0.0, 1.0);
                        objc_msgSend_appendDrawing_(v67, v119, (uint64_t)v118, v120, v121, v122);

                        objc_msgSend_setFastPathAsXZero_(v157, v123, 1, v124, v125, v126);
                        objc_msgSend_setFastPathUseDefaultStyle_(v157, v127, 0, v128, v129, v130);
                        if (qword_1EA3CA000 != -1) {
                          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                        }
                        uint64_t v131 = (id)qword_1EA3C9FD8;
                        if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)uint64_t v178 = 138412290;
                          id v179 = v67;
                          _os_log_impl(&dword_1C492D000, v131, OS_LOG_TYPE_DEBUG, "prepareIncreasingVariabilitySynthesisRequest seed %@", v178, 0xCu);
                        }

                        id v132 = v106;
                        *(void *)long long buf = v132;
                        uint64_t v133 = v157;
                        *(void *)&buf[8] = v133;
                        LODWORD(v165) = 1;
                        uint64_t v139 = objc_msgSend_copy(v67, v134, v135, v136, v137, v138);
                        uint64_t v166 = (void *)v139;
                        *(void *)&long long v167 = objc_msgSend_firstCodepointInString(v159, v140, v141, v142, v143, v144);
                        *((void *)&v167 + 1) = 1;

                        uint64_t v145 = *((void *)&v175 + 1);
                        if (*((void *)&v175 + 1) >= v176)
                        {
                          uint64_t v149 = sub_1C4BDBD44((void **)&v175, (long long *)buf);
                          uint64_t v148 = v166;
                          uint64_t v146 = *(void **)buf;
                          uint64_t v147 = *(void **)&buf[8];
                        }
                        else
                        {
                          uint64_t v146 = 0;
                          uint64_t v147 = 0;
                          uint64_t v148 = 0;
                          *(void *)long long buf = 0;
                          **((void **)&v175 + 1) = v132;
                          *(void *)(v145 + 8) = v133;
                          *(_DWORD *)(v145 + 16) = 1;
                          *(void *)(v145 + 24) = v139;
                          *(_OWORD *)(v145 + 32) = v167;
                          uint64_t v149 = (char *)(v145 + 48);
                        }
                        *((void *)&v175 + 1) = v149;

                        uint64_t v150 = (char *)__p;
                        if (__p)
                        {
                          uint64_t v151 = v162;
                          uint64_t v152 = __p;
                          if (v162 != __p)
                          {
                            do
                            {
                              uint64_t v153 = (void *)*((void *)v151 - 3);
                              v151 -= 24;
                            }
                            while (v151 != v150);
                            uint64_t v152 = __p;
                          }
                          uint64_t v162 = v150;
                          operator delete(v152);
                        }
                        break;
                      }
                    }
                    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                    goto LABEL_54;
                  }
                  break;
                }
                ++v34;
              }
              uint64_t v34 = (uint64_t *)*v34;
              if (!v34) {
                goto LABEL_31;
              }
            }
          }
LABEL_14:
          ;
        }
        uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v168, (uint64_t)v177, 16, v12);
      }
      while (v13);
      long long v160 = v175;
      unint64_t v154 = v176;
    }
    else
    {
      unint64_t v154 = 0;
    }

    *(_OWORD *)a2 = v160;
    *(void *)(a2 + 16) = v154;
    sub_1C4999C7C((uint64_t)&v172, v173);
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v4 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations holder is empty", buf, 2u);
    }

    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
}

void sub_1C4BD9154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,void *a39,uint64_t a40,void *a41)
{
  sub_1C4999C7C((uint64_t)&a38, a39);
  sub_1C4B4250C(&a41);
  _Unwind_Resume(a1);
}

void sub_1C4BD927C(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(CHSynthesisRequestOptions);
  uint64_t v10 = objc_msgSend_ch_basicAlphanumericCharacterSet(MEMORY[0x1E4F28B88], v5, v6, v7, v8, v9);
  uint64_t v14 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v3, v11, (uint64_t)v10, 1, v12, v13);

  if (v14)
  {
    objc_msgSend_setFastPathAsXZero_(v4, v15, 0, v16, v17, v18);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v19 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      id v36 = v3;
      uint64_t v20 = "Character %@ does NOT require seeding with the fast path";
LABEL_10:
      _os_log_impl(&dword_1C492D000, v19, OS_LOG_TYPE_DEBUG, v20, buf, 0xCu);
    }
  }
  else
  {
    objc_msgSend_setFastPathAsXZero_(v4, v15, 1, v16, v17, v18);
    objc_msgSend_setFastPathUseDefaultStyle_(v4, v21, 1, v22, v23, v24);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v19 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      id v36 = v3;
      uint64_t v20 = "Character %@ requires seeding with the fast path";
      goto LABEL_10;
    }
  }

  *(void *)a1 = objc_msgSend_stringByAppendingFormat_(v3, v25, @" %@", v26, v27, v28, @"www name wave");
  uint64_t v29 = v4;
  *(void *)(a1 + 8) = v29;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = objc_msgSend_firstCodepointInString(v3, v30, v31, v32, v33, v34);
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)(a1 + 40) = 1;
}

void sub_1C4BD94A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations::proceedRequestResult(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v294 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v15 = objc_msgSend_drawing(v4, v5, v6, v7, v8, v9);
  if (!v15
    || (id v266 = v4,
        objc_msgSend_drawing(v4, v10, v11, v12, v13, v14),
        uint64_t v16 = objc_claimAutoreleasedReturnValue(),
        uint64_t v22 = objc_msgSend_pointCount(v16, v17, v18, v19, v20, v21),
        v16,
        v15,
        !v22))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v136 = (id)qword_1EA3C9FD8;
    if (!os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_126;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v137 = "CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations result drawing is nill";
LABEL_125:
    _os_log_impl(&dword_1C492D000, v136, OS_LOG_TYPE_DEBUG, v137, buf, 2u);
    goto LABEL_126;
  }
  uint64_t v28 = objc_msgSend_segmentContents(v4, v23, v24, v25, v26, v27);

  if (!v28)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v136 = (id)qword_1EA3C9FD8;
    if (!os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_126;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v137 = "CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations segmentContents is nill";
    goto LABEL_125;
  }
  if (*(_DWORD *)(a2 + 16))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v34 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v40 = unicodeToNSString(*(_DWORD *)(a2 + 32), v35, v36, v37, v38, v39);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v40;
      _os_log_impl(&dword_1C492D000, v34, OS_LOG_TYPE_DEBUG, "CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations START add variational character %@ to holder", buf, 0xCu);
    }
    long long v278 = 0u;
    long long v279 = 0u;
    long long v276 = 0u;
    long long v277 = 0u;
    obuint64_t j = objc_msgSend_segmentStrokeIndexes(v4, v41, v42, v43, v44, v45);
    uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v46, (uint64_t)&v276, (uint64_t)v293, 16, v47);
    if (v53)
    {
      uint64_t v265 = *(void *)v277;
      v263 = &v291[1];
      uint64_t v267 = 1;
      do
      {
        for (uint64_t i = 0; i != v53; ++i)
        {
          if (*(void *)v277 != v265) {
            objc_enumerationMutation(obj);
          }
          uint64_t v55 = *(void *)(*((void *)&v276 + 1) + 8 * i);
          uint64_t v56 = objc_msgSend_drawing(v4, v48, v49, v50, v51, v52, v263);
          uint64_t v61 = objc_msgSend_drawingWithStrokesFromIndexSet_(v56, v57, v55, v58, v59, v60);

          *(_OWORD *)uint64_t v291 = 0u;
          long long v292 = 0u;
          long long v289 = 0u;
          *(_OWORD *)__dst = 0u;
          *(_OWORD *)long long buf = 0u;
          *(_OWORD *)__p = 0u;
          uint64_t v62 = operator new(0x20uLL);
          *uint64_t v62 = xmmword_1C4C44C50;
          v62[1] = unk_1C4C44C60;
          __p[1] = v62;
          *(void *)&long long v289 = v62 + 2;
          *((void *)&v289 + 1) = v62 + 2;
          uint64_t v63 = operator new(0x20uLL);
          uint64_t v64 = a1;
          *uint64_t v63 = xmmword_1C4C44C70;
          v63[1] = unk_1C4C44C80;
          __dst[0] = v63;
          __dst[1] = v63 + 2;
          v291[0] = v63 + 2;
          sub_1C4AAA458(v269, (uint64_t)buf);
          uint64_t v65 = v53;
          sub_1C4BD8348(v280, v269, *(_DWORD *)(a2 + 32), v61);
          long long v66 = *(_OWORD *)v280;
          size_t v67 = *(void *)&v280[8] - *(void *)v280;
          unint64_t v68 = (uint64_t)(*(void *)&v280[8] - *(void *)v280) >> 4;
          uint64_t v69 = (uint64_t)__p[0];
          uint64_t v70 = *(char **)buf;
          if (v68 <= ((uint64_t)__p[0] - *(void *)buf) >> 4)
          {
            unint64_t v74 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4;
            if (v74 >= v68)
            {
              if (*(void *)&v280[8] == *(void *)v280) {
                goto LABEL_34;
              }
              uint64_t v76 = *(void **)buf;
              uint64_t v75 = *(const void **)v280;
              goto LABEL_33;
            }
            if (*(void *)&buf[8] != *(void *)buf)
            {
              memmove(*(void **)buf, *(const void **)v280, *(void *)&buf[8] - *(void *)buf);
              uint64_t v70 = *(char **)&buf[8];
            }
            uint64_t v75 = (const void *)(v66 + 16 * v74);
            size_t v67 = *((void *)&v66 + 1) - (void)v75;
            if (*((const void **)&v66 + 1) != v75)
            {
              uint64_t v76 = v70;
LABEL_33:
              memmove(v76, v75, v67);
            }
          }
          else
          {
            if (*(void *)buf)
            {
              *(void *)&buf[8] = *(void *)buf;
              operator delete(*(void **)buf);
              uint64_t v69 = 0;
              memset(buf, 0, sizeof(buf));
              __p[0] = 0;
            }
            if ((v67 & 0x8000000000000000) != 0) {
              goto LABEL_138;
            }
            uint64_t v71 = v69 >> 3;
            if (v69 >> 3 <= v68) {
              uint64_t v71 = v68;
            }
            unint64_t v72 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v71;
            if (v72 >> 60) {
LABEL_138:
            }
              sub_1C494A220();
            double v73 = (char *)operator new(16 * v72);
            uint64_t v70 = v73;
            *(void *)long long buf = v73;
            *(void *)&buf[8] = v73;
            __p[0] = &v73[16 * v72];
            if (*((void *)&v66 + 1) != (void)v66) {
              memcpy(v73, (const void *)v66, v67);
            }
          }
LABEL_34:
          *(void *)&buf[8] = &v70[v67];
          uint64_t v78 = (char *)v281;
          uint64_t v77 = v282;
          size_t v79 = v282 - (unsigned char *)v281;
          unint64_t v80 = (v282 - (unsigned char *)v281) >> 4;
          uint64_t v81 = *((void *)&v289 + 1);
          uint64_t v82 = (char *)__p[1];
          if (v80 <= (uint64_t)(*((void *)&v289 + 1) - (unint64_t)__p[1]) >> 4)
          {
            unint64_t v86 = (uint64_t)(v289 - (unint64_t)__p[1]) >> 4;
            if (v86 >= v80)
            {
              if (v282 == v281) {
                goto LABEL_54;
              }
              uint64_t v88 = __p[1];
              uint64_t v87 = (char *)v281;
              goto LABEL_53;
            }
            if ((void *)v289 != __p[1])
            {
              memmove(__p[1], v281, v289 - (unint64_t)__p[1]);
              uint64_t v82 = (char *)v289;
            }
            uint64_t v87 = &v78[16 * v86];
            size_t v79 = v77 - v87;
            if (v77 != v87)
            {
              uint64_t v88 = v82;
LABEL_53:
              memmove(v88, v87, v79);
            }
          }
          else
          {
            if (__p[1])
            {
              *(void **)&long long v289 = __p[1];
              operator delete(__p[1]);
              uint64_t v81 = 0;
              __p[1] = 0;
              long long v289 = 0uLL;
            }
            if ((v79 & 0x8000000000000000) != 0) {
              goto LABEL_138;
            }
            uint64_t v83 = v81 >> 3;
            if (v81 >> 3 <= v80) {
              uint64_t v83 = v80;
            }
            unint64_t v84 = (unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v83;
            if (v84 >> 60) {
              goto LABEL_138;
            }
            uint64_t v85 = (char *)operator new(16 * v84);
            uint64_t v82 = v85;
            __p[1] = v85;
            *(void *)&long long v289 = v85;
            *((void *)&v289 + 1) = &v85[16 * v84];
            if (v77 != v78) {
              memcpy(v85, v78, v79);
            }
          }
LABEL_54:
          *(void *)&long long v289 = &v82[v79];
          uint64_t v90 = (char *)v283;
          uint64_t v89 = v284;
          size_t v91 = v284 - (unsigned char *)v283;
          unint64_t v92 = (v284 - (unsigned char *)v283) >> 4;
          uint64_t v93 = (uint64_t)v291[0];
          uint64_t v94 = (char *)__dst[0];
          if (v92 <= ((char *)v291[0] - (char *)__dst[0]) >> 4)
          {
            unint64_t v98 = ((char *)__dst[1] - (char *)__dst[0]) >> 4;
            if (v98 >= v92)
            {
              if (v284 == v283) {
                goto LABEL_74;
              }
              uint64_t v100 = __dst[0];
              uint64_t v99 = (char *)v283;
              goto LABEL_73;
            }
            if (__dst[1] != __dst[0])
            {
              memmove(__dst[0], v283, (char *)__dst[1] - (char *)__dst[0]);
              uint64_t v94 = (char *)__dst[1];
            }
            uint64_t v99 = &v90[16 * v98];
            size_t v91 = v89 - v99;
            if (v89 != v99)
            {
              uint64_t v100 = v94;
LABEL_73:
              memmove(v100, v99, v91);
            }
          }
          else
          {
            if (__dst[0])
            {
              __dst[1] = __dst[0];
              operator delete(__dst[0]);
              uint64_t v93 = 0;
              __dst[0] = 0;
              __dst[1] = 0;
              v291[0] = 0;
            }
            if ((v91 & 0x8000000000000000) != 0) {
              goto LABEL_138;
            }
            uint64_t v95 = v93 >> 3;
            if (v93 >> 3 <= v92) {
              uint64_t v95 = v92;
            }
            unint64_t v96 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v95;
            if (v96 >> 60) {
              goto LABEL_138;
            }
            double v97 = (char *)operator new(16 * v96);
            uint64_t v94 = v97;
            __dst[0] = v97;
            __dst[1] = v97;
            v291[0] = &v97[16 * v96];
            if (v89 != v90) {
              memcpy(v97, v90, v91);
            }
          }
LABEL_74:
          __dst[1] = &v94[v91];
          uint64_t v102 = (char *)v285;
          uint64_t v101 = v286;
          size_t v103 = v286 - (unsigned char *)v285;
          unint64_t v104 = (v286 - (unsigned char *)v285) >> 4;
          uint64_t v105 = *((void *)&v292 + 1);
          long long v106 = (char *)v291[1];
          if (v104 <= (uint64_t)(*((void *)&v292 + 1) - (unint64_t)v291[1]) >> 4)
          {
            unint64_t v110 = (uint64_t)(v292 - (unint64_t)v291[1]) >> 4;
            if (v110 >= v104)
            {
              if (v286 == v285) {
                goto LABEL_94;
              }
              uint64_t v112 = v291[1];
              uint64_t v111 = (char *)v285;
              goto LABEL_93;
            }
            if ((void *)v292 != v291[1])
            {
              memmove(v291[1], v285, v292 - (unint64_t)v291[1]);
              long long v106 = (char *)v292;
            }
            uint64_t v111 = &v102[16 * v110];
            size_t v103 = v101 - v111;
            if (v101 != v111)
            {
              uint64_t v112 = v106;
LABEL_93:
              memmove(v112, v111, v103);
            }
          }
          else
          {
            if (v291[1])
            {
              *(void **)&long long v292 = v291[1];
              operator delete(v291[1]);
              uint64_t v105 = 0;
              const char *v263 = 0;
              v263[1] = 0;
              v263[2] = 0;
            }
            if ((v103 & 0x8000000000000000) != 0) {
              goto LABEL_138;
            }
            uint64_t v107 = v105 >> 3;
            if (v105 >> 3 <= v104) {
              uint64_t v107 = v104;
            }
            unint64_t v108 = (unint64_t)v105 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v107;
            if (v108 >> 60) {
              goto LABEL_138;
            }
            uint64_t v109 = (char *)operator new(16 * v108);
            long long v106 = v109;
            v291[1] = v109;
            *(void *)&long long v292 = v109;
            *((void *)&v292 + 1) = &v109[16 * v108];
            if (v101 != v102) {
              memcpy(v109, v102, v103);
            }
          }
LABEL_94:
          uint64_t v53 = v65;
          *(void *)&long long v292 = &v106[v103];
          a1 = v64;
          if (v285)
          {
            uint64_t v286 = (char *)v285;
            operator delete(v285);
          }
          id v4 = v266;
          if (v283)
          {
            uint64_t v284 = (char *)v283;
            operator delete(v283);
          }
          if (v281)
          {
            uint64_t v282 = (char *)v281;
            operator delete(v281);
          }
          if (*(void *)v280)
          {
            *(void *)&v280[8] = *(void *)v280;
            operator delete(*(void **)v280);
          }
          if (v274)
          {
            uint64_t v275 = v274;
            operator delete(v274);
          }
          if (v272)
          {
            double v273 = v272;
            operator delete(v272);
          }
          if (v270)
          {
            uint64_t v271 = v270;
            operator delete(v270);
          }
          if (v269[0])
          {
            v269[1] = v269[0];
            operator delete(v269[0]);
          }
          double v113 = *((double *)__dst[0] + 1);
          double v114 = *((double *)__p[1] + 1);
          id v115 = v61;
          objc_msgSend_bounds(v115, v116, v117, v118, v119, v120);
          float v121 = v114;
          float v122 = v113;
          uint64_t v129 = objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v115, v124, v125, v126, v127, v128, (float)(0.0 / (float)(1.0 / (float)(v121 - v122))) - v123, (float)((float)(1.0 / (float)(1.0 / (float)(v121 - v122))) - v121), (float)(1.0 / (float)(v121 - v122)));

          uint64_t v135 = (CHDrawing *)objc_msgSend_copy(v129, v130, v131, v132, v133, v134);
          CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::CHFastPathCharacter((CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *)v280, v135, *(_DWORD *)(*(void *)(v64 + 16) + 36), *(_DWORD *)(a2 + 32));

          (*(void (**)(void, uint8_t *, uint64_t))(**(void **)(v64 + 16) + 24))(*(void *)(v64 + 16), v280, v267 + i);
          if (v291[1])
          {
            *(void **)&long long v292 = v291[1];
            operator delete(v291[1]);
          }
          if (__dst[0])
          {
            __dst[1] = __dst[0];
            operator delete(__dst[0]);
          }
          if (__p[1])
          {
            *(void **)&long long v289 = __p[1];
            operator delete(__p[1]);
          }
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
        }
        uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v48, (uint64_t)&v276, (uint64_t)v293, 16, v52);
        uint64_t v267 = (v267 + i);
      }
      while (v53);
    }
    uint64_t v136 = obj;
  }
  else
  {
    uint64_t v138 = objc_msgSend_drawing(v4, v29, v30, v31, v32, v33);
    uint64_t v144 = objc_msgSend_segmentStrokeIndexes(v4, v139, v140, v141, v142, v143);
    uint64_t v150 = objc_msgSend_firstObject(v144, v145, v146, v147, v148, v149);
    uint64_t v136 = objc_msgSend_drawingWithStrokesFromIndexSet_(v138, v151, (uint64_t)v150, v152, v153, v154);

    CGRect v155 = (void *)MEMORY[0x1E4F28E60];
    uint64_t v161 = objc_msgSend_drawing(v4, v156, v157, v158, v159, v160);
    uint64_t v167 = objc_msgSend_strokeCount(v161, v162, v163, v164, v165, v166);
    long long v171 = objc_msgSend_indexSetWithIndexesInRange_(v155, v168, 0, v167, v169, v170);

    uint64_t v177 = objc_msgSend_segmentStrokeIndexes(v4, v172, v173, v174, v175, v176);
    uint64_t v183 = objc_msgSend_firstObject(v177, v178, v179, v180, v181, v182);
    objc_msgSend_removeIndexes_(v171, v184, (uint64_t)v183, v185, v186, v187);

    objc_msgSend_bounds(v136, v188, v189, v190, v191, v192);
    double v194 = v193;
    objc_msgSend_bounds(v136, v195, v196, v197, v198, v199);
    double v201 = v200;
    unint64_t v207 = objc_msgSend_drawing(v4, v202, v203, v204, v205, v206);
    objc_msgSend_bounds(v207, v208, v209, v210, v211, v212);
    double MaxX = CGRectGetMaxX(v295);

    uint64_t v219 = objc_msgSend_segmentStrokeIndexes(v4, v214, v215, v216, v217, v218);
    unint64_t v225 = objc_msgSend_count(v219, v220, v221, v222, v223, v224);

    if (v225 >= 2)
    {
      uint64_t v231 = objc_msgSend_drawing(v4, v226, v227, v228, v229, v230);
      uint64_t v237 = objc_msgSend_segmentStrokeIndexes(v4, v232, v233, v234, v235, v236);
      uint64_t v242 = objc_msgSend_objectAtIndexedSubscript_(v237, v238, 1, v239, v240, v241);
      uint64_t v247 = objc_msgSend_drawingWithStrokesFromIndexSet_(v231, v243, (uint64_t)v242, v244, v245, v246);

      objc_msgSend_bounds(v247, v248, v249, v250, v251, v252);
      double MaxX = CGRectGetMaxX(v296);
    }
    objc_msgSend_drawing(v4, v226, v227, v228, v229, v230);
    uint64_t v253 = (CoreHandwriting::synthesis::fast_path *)objc_claimAutoreleasedReturnValue();
    float v254 = v194 + v201 + 0.001;
    float v255 = MaxX;
    CoreHandwriting::synthesis::fast_path::createCHFastPathCharacterFromSynthesizedData(v253, (CHDrawing *)*(unsigned int *)(a2 + 32), v254, v255, *(_DWORD *)(*(void *)(a1 + 16) + 36), (CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *)buf);

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v256 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG))
    {
      double v262 = unicodeToNSString(*(_DWORD *)(a2 + 32), v257, v258, v259, v260, v261);
      *(_DWORD *)uint64_t v280 = 138412290;
      *(void *)&v280[4] = v262;
      _os_log_impl(&dword_1C492D000, v256, OS_LOG_TYPE_DEBUG, "CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations add initial character %@ to holder", v280, 0xCu);
    }
    (*(void (**)(void, uint8_t *, void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), buf, 0);
  }
LABEL_126:
}

void sub_1C4BDA0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations::getCharactersRequestsToSynthesize(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations *this@<X0>, char a2@<W1>, void **a3@<X8>)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  id v5 = (CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **)*((void *)this + 2);
  if (v5)
  {
    uint64_t v151 = 0;
    uint64_t v152 = 0;
    unint64_t v153 = 0;
    __p = 0;
    uint64_t v149 = 0;
    unint64_t v150 = 0;
    uint64_t v146 = 0;
    uint64_t v147 = 0;
    uint64_t v145 = &v146;
    if ((a2 & 1) == 0)
    {
      CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder::getSupportedCharactersInfo(v5, (uint64_t *)buf);
      sub_1C4999C7C((uint64_t)&v145, v146);
      uint64_t v6 = *(void **)&buf[8];
      uint64_t v145 = *(void **)buf;
      uint64_t v146 = *(void **)&buf[8];
      uint64_t v147 = v138;
      if (v138)
      {
        *(void *)(*(void *)&buf[8] + 16) = &v146;
        *(void *)long long buf = &buf[8];
        *(void *)&buf[8] = 0;
        uint64_t v138 = 0;
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v145 = &v146;
      }
      sub_1C4999C7C((uint64_t)buf, v6);
    }
    long long v143 = 0u;
    long long v144 = 0u;
    long long v141 = 0u;
    long long v142 = 0u;
    obuint64_t j = *((id *)this + 1);
    uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v141, (uint64_t)v154, 16, v9);
    uint64_t v135 = a3;
    if (v15)
    {
      uint64_t v16 = *(void *)v142;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v142 != v16) {
            objc_enumerationMutation(obj);
          }
          uint64_t v18 = *(void **)(*((void *)&v141 + 1) + 8 * i);
          uint64_t v19 = objc_msgSend_ch_basicAlphanumericCharacterSet(MEMORY[0x1E4F28B88], v10, v11, v12, v13, v14);
          BOOL v23 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v18, v20, (uint64_t)v19, 1, v21, v22) == 0;

          if (!v23)
          {
            unsigned int CodepointInString = objc_msgSend_firstCodepointInString(v18, v10, v11, v12, v13, v14);
            uint64_t v30 = objc_msgSend_ch_mathDigitsCharSet(MEMORY[0x1E4F28B88], v25, v26, v27, v28, v29);
            BOOL v34 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v18, v31, (uint64_t)v30, 1, v32, v33) == 0;

            if (v34)
            {
              uint64_t v56 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v35, @"ij", v36, v37, v38);
              char IsMember = objc_msgSend_characterIsMember_(v56, v57, (unsigned __int16)CodepointInString, v58, v59, v60);

              if ((IsMember & 1) == 0)
              {
                for (uint64_t j = v146; j; uint64_t j = (void *)*j)
                {
                  unsigned int v69 = *((_DWORD *)j + 8);
                  if (CodepointInString >= v69)
                  {
                    if (v69 >= CodepointInString) {
                      goto LABEL_15;
                    }
                    ++j;
                  }
                }
                sub_1C4BD927C((uint64_t)buf, v18);
                uint64_t v63 = v149;
                if ((unint64_t)v149 >= v150)
                {
                  unint64_t v68 = sub_1C4BDBD44(&__p, (long long *)buf);
                  long long v66 = v139;
                  uint64_t v64 = *(void **)buf;
                  uint64_t v65 = *(void **)&buf[8];
                }
                else
                {
                  uint64_t v64 = 0;
                  uint64_t v65 = 0;
                  long long v66 = 0;
                  long long v67 = *(_OWORD *)buf;
                  memset(buf, 0, sizeof(buf));
                  *(_OWORD *)uint64_t v149 = v67;
                  *((_DWORD *)v63 + 4) = v138;
                  *((void *)v63 + 3) = v139;
                  *((_OWORD *)v63 + 2) = v140;
                  unint64_t v68 = v63 + 48;
                }
                uint64_t v149 = v68;
              }
            }
            else
            {
              uint64_t v39 = v146;
              uint64_t v40 = &v146;
              uint64_t v41 = &v146;
              if (v146)
              {
                while (1)
                {
                  while (1)
                  {
                    uint64_t v41 = (void **)v39;
                    unsigned int v42 = *((_DWORD *)v39 + 8);
                    if (CodepointInString >= v42) {
                      break;
                    }
                    uint64_t v39 = *v41;
                    uint64_t v40 = v41;
                    if (!*v41) {
                      goto LABEL_27;
                    }
                  }
                  if (v42 >= CodepointInString) {
                    break;
                  }
                  uint64_t v39 = v41[1];
                  if (!v39)
                  {
                    uint64_t v40 = v41 + 1;
                    goto LABEL_27;
                  }
                }
                uint64_t v70 = v41[5];
              }
              else
              {
LABEL_27:
                uint64_t v43 = operator new(0x30uLL);
                *((_DWORD *)v43 + 8) = CodepointInString;
                v43[5] = 0;
                *uint64_t v43 = 0;
                v43[1] = 0;
                v43[2] = v41;
                void *v40 = v43;
                if (*v145)
                {
                  uint64_t v145 = (void *)*v145;
                  uint64_t v43 = (void *)*v40;
                }
                uint64_t v44 = v146;
                BOOL v45 = v43 == v146;
                *((unsigned char *)v43 + 24) = v43 == v146;
                if (!v45)
                {
                  do
                  {
                    uint64_t v46 = v43[2];
                    if (*(unsigned char *)(v46 + 24)) {
                      break;
                    }
                    uint64_t v47 = *(void **)(v46 + 16);
                    uint64_t v48 = *v47;
                    if (*v47 == v46)
                    {
                      uint64_t v51 = v47[1];
                      if (!v51 || (v52 = *(unsigned __int8 *)(v51 + 24), uint64_t v49 = (unsigned char *)(v51 + 24), v52))
                      {
                        if (*(void **)v46 == v43)
                        {
                          *(unsigned char *)(v46 + 24) = 1;
                          *((unsigned char *)v47 + 24) = 0;
                          uint64_t v55 = *(void *)(v46 + 8);
                          *uint64_t v47 = v55;
                          if (v55) {
                            goto LABEL_44;
                          }
                        }
                        else
                        {
                          uint64_t v53 = *(uint64_t **)(v46 + 8);
                          uint64_t v54 = *v53;
                          *(void *)(v46 + 8) = *v53;
                          if (v54)
                          {
                            *(void *)(v54 + 16) = v46;
                            uint64_t v47 = *(void **)(v46 + 16);
                          }
                          v53[2] = (uint64_t)v47;
                          *(void *)(*(void *)(v46 + 16) + 8 * (**(void **)(v46 + 16) != v46)) = v53;
                          *uint64_t v53 = v46;
                          *(void *)(v46 + 16) = v53;
                          uint64_t v47 = (void *)v53[2];
                          uint64_t v46 = *v47;
                          *((unsigned char *)v53 + 24) = 1;
                          *((unsigned char *)v47 + 24) = 0;
                          uint64_t v55 = *(void *)(v46 + 8);
                          *uint64_t v47 = v55;
                          if (v55) {
LABEL_44:
                          }
                            *(void *)(v55 + 16) = v47;
                        }
                        *(void *)(v46 + 16) = v47[2];
                        *(void *)(v47[2] + 8 * (*(void *)v47[2] != (void)v47)) = v46;
                        *(void *)(v46 + 8) = v47;
LABEL_60:
                        v47[2] = v46;
                        break;
                      }
                    }
                    else if (!v48 || (v50 = *(unsigned __int8 *)(v48 + 24), uint64_t v49 = (unsigned char *)(v48 + 24), v50))
                    {
                      if (*(void **)v46 == v43)
                      {
                        uint64_t v85 = v43[1];
                        *(void *)uint64_t v46 = v85;
                        if (v85)
                        {
                          *(void *)(v85 + 16) = v46;
                          uint64_t v47 = *(void **)(v46 + 16);
                        }
                        v43[2] = v47;
                        *(void *)(*(void *)(v46 + 16) + 8 * (**(void **)(v46 + 16) != v46)) = v43;
                        v43[1] = v46;
                        *(void *)(v46 + 16) = v43;
                        uint64_t v47 = (void *)v43[2];
                        *((unsigned char *)v43 + 24) = 1;
                        *((unsigned char *)v47 + 24) = 0;
                        uint64_t v46 = v47[1];
                        uint64_t v71 = *(void **)v46;
                        v47[1] = *(void *)v46;
                        if (v71) {
LABEL_58:
                        }
                          v71[2] = v47;
                      }
                      else
                      {
                        *(unsigned char *)(v46 + 24) = 1;
                        *((unsigned char *)v47 + 24) = 0;
                        uint64_t v46 = v47[1];
                        uint64_t v71 = *(void **)v46;
                        v47[1] = *(void *)v46;
                        if (v71) {
                          goto LABEL_58;
                        }
                      }
                      *(void *)(v46 + 16) = v47[2];
                      *(void *)(v47[2] + 8 * (*(void *)v47[2] != (void)v47)) = v46;
                      *(void *)uint64_t v46 = v47;
                      goto LABEL_60;
                    }
                    *(unsigned char *)(v46 + 24) = 1;
                    uint64_t v43 = v47;
                    *((unsigned char *)v47 + 24) = v47 == v44;
                    *uint64_t v49 = 1;
                  }
                  while (v47 != v44);
                }
                uint64_t v70 = 0;
                ++v147;
              }
              unint64_t v72 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v35, @"47", v36, v37, v38);
              int v77 = objc_msgSend_characterIsMember_(v72, v73, (unsigned __int16)CodepointInString, v74, v75, v76);

              if (v77) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = 3;
              }
              if ((unint64_t)v70 < v78)
              {
                sub_1C4BD927C((uint64_t)buf, v18);
                size_t v79 = v152;
                if ((unint64_t)v152 >= v153)
                {
                  unint64_t v84 = sub_1C4BDBD44(&v151, (long long *)buf);
                  uint64_t v82 = v139;
                  unint64_t v80 = *(void **)buf;
                  uint64_t v81 = *(void **)&buf[8];
                }
                else
                {
                  unint64_t v80 = 0;
                  uint64_t v81 = 0;
                  uint64_t v82 = 0;
                  long long v83 = *(_OWORD *)buf;
                  memset(buf, 0, sizeof(buf));
                  *(_OWORD *)uint64_t v152 = v83;
                  *((_DWORD *)v79 + 4) = v138;
                  *((void *)v79 + 3) = v139;
                  *((_OWORD *)v79 + 2) = v140;
                  unint64_t v84 = v79 + 48;
                }
                uint64_t v152 = v84;

                *((_DWORD *)v84 - 8) = 2;
                *((void *)v84 - 1) = v78;
              }
            }
          }
LABEL_15:
          ;
        }
        uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v141, (uint64_t)v154, 16, v14);
      }
      while (v15);
      unint64_t v86 = (char *)v151;
      uint64_t v87 = v152;
      uint64_t v15 = v153;
      uint64_t v88 = (id *)__p;
      uint64_t v89 = v149;
    }
    else
    {
      uint64_t v89 = 0;
      uint64_t v88 = 0;
      uint64_t v87 = 0;
      unint64_t v86 = 0;
    }

    *uint64_t v135 = v86;
    v135[1] = v87;
    uint64_t v151 = 0;
    uint64_t v152 = 0;
    v135[2] = (void *)v15;
    unint64_t v153 = 0;
    if (v89 - (char *)v88 < 1) {
      goto LABEL_123;
    }
    int64_t v90 = 0xAAAAAAAAAAAAAAABLL * ((v89 - (char *)v88) >> 4);
    uint64_t v91 = (v87 - v86) / 48;
    unint64_t v92 = &v86[48 * v91];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v87) >> 4)) >= v90)
    {
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v87 - v92) >> 4)) >= v90)
      {
        unint64_t v96 = &v88[2 * ((v89 - (char *)v88) >> 4)];
        double v97 = v87;
      }
      else
      {
        unint64_t v96 = &v88[2 * ((v87 - v92) >> 4)];
        double v97 = v87;
        if (v96 != (id *)v89)
        {
          unint64_t v98 = &v88[2 * ((v87 - v92) >> 4)];
          uint64_t v99 = v87;
          do
          {
            *(void *)uint64_t v99 = *v98;
            *((void *)v99 + 1) = v98[1];
            *((_DWORD *)v99 + 4) = *((_DWORD *)v98 + 4);
            *((void *)v99 + 3) = v98[3];
            *((_OWORD *)v99 + 2) = *((_OWORD *)v98 + 2);
            v97 += 48;
            v98 += 6;
            v99 += 48;
          }
          while (v98 != (id *)v89);
        }
        v135[1] = v97;
        if (v87 - v92 < 1) {
          goto LABEL_123;
        }
      }
      uint64_t v100 = &v92[16 * ((v89 - (char *)v88) >> 4)];
      unint64_t v101 = (unint64_t)&v97[-16 * ((v89 - (char *)v88) >> 4)];
      uint64_t v102 = v97;
      if (v101 < (unint64_t)v87)
      {
        uint64_t v102 = v97;
        do
        {
          long long v103 = *(_OWORD *)v101;
          *(void *)unint64_t v101 = 0;
          *(void *)(v101 + 8) = 0;
          *(_OWORD *)uint64_t v102 = v103;
          *((_DWORD *)v102 + 4) = *(_DWORD *)(v101 + 16);
          uint64_t v104 = *(void *)(v101 + 24);
          *(void *)(v101 + 24) = 0;
          *((void *)v102 + 3) = v104;
          *((_OWORD *)v102 + 2) = *(_OWORD *)(v101 + 32);
          v102 += 48;
          v101 += 48;
        }
        while (v101 < (unint64_t)v87);
      }
      v135[1] = v102;
      if (v97 != v100)
      {
        uint64_t v105 = 16 * ((v97 - v100) >> 4);
        long long v106 = v97 - 24;
        do
        {
          uint64_t v107 = *(void *)&v92[v105 - 48];
          *(void *)&v92[v105 - 48] = 0;
          unint64_t v108 = (void *)*((void *)v106 - 3);
          *((void *)v106 - 3) = v107;

          uint64_t v109 = *(void *)&v92[v105 - 40];
          *(void *)&v92[v105 - 40] = 0;
          unint64_t v110 = (void *)*((void *)v106 - 2);
          *((void *)v106 - 2) = v109;

          *((_DWORD *)v106 - 2) = *(_DWORD *)&v92[v105 - 32];
          uint64_t v111 = *(void *)&v92[v105 - 24];
          *(void *)&v92[v105 - 24] = 0;
          uint64_t v112 = *(void **)v106;
          *(void *)long long v106 = v111;

          *(_OWORD *)(v106 + 8) = *(_OWORD *)&v92[v105 - 16];
          v106 -= 48;
          v105 -= 48;
        }
        while (v105);
      }
      for (; v88 != v96; v92 += 48)
      {
        objc_storeStrong((id *)v92, *v88);
        objc_storeStrong((id *)v92 + 1, v88[1]);
        *((_DWORD *)v92 + 4) = *((_DWORD *)v88 + 4);
        objc_storeStrong((id *)v92 + 3, v88[3]);
        *((_OWORD *)v92 + 2) = *((_OWORD *)v88 + 2);
        v88 += 6;
      }
    }
    else
    {
      unint64_t v93 = v90 + v91;
      if ((unint64_t)(v90 + v91) > 0x555555555555555) {
        sub_1C494A220();
      }
      if (0x5555555555555556 * ((v15 - (uint64_t)v86) >> 4) > v93) {
        unint64_t v93 = 0x5555555555555556 * ((v15 - (uint64_t)v86) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v86) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v94 = 0x555555555555555;
      }
      else {
        unint64_t v94 = v93;
      }
      if (v94)
      {
        if (v94 > 0x555555555555555) {
          sub_1C4949AA8();
        }
        uint64_t v95 = (char *)operator new(48 * v94);
      }
      else
      {
        uint64_t v95 = 0;
      }
      double v113 = &v95[48 * v91];
      double v114 = &v113[48 * v90];
      id v115 = v113;
      do
      {
        *(void *)id v115 = *v88;
        *((void *)v115 + 1) = v88[1];
        *((_DWORD *)v115 + 4) = *((_DWORD *)v88 + 4);
        *((void *)v115 + 3) = v88[3];
        *((_OWORD *)v115 + 2) = *((_OWORD *)v88 + 2);
        v115 += 48;
        v88 += 6;
      }
      while (v115 != v114);
      uint64_t v116 = (char *)*v135;
      if (*v135 != v92)
      {
        uint64_t v117 = 48 * v91;
        uint64_t v118 = v95;
        do
        {
          uint64_t v119 = &v118[v117];
          uint64_t v120 = &v86[v117];
          long long v121 = *(_OWORD *)&v86[v117 - 48];
          *((void *)v120 - 6) = 0;
          *((void *)v120 - 5) = 0;
          *((_OWORD *)v119 - 3) = v121;
          *((_DWORD *)v119 - 8) = *(_DWORD *)&v86[v117 - 32];
          uint64_t v122 = *(void *)&v86[v117 - 24];
          *((void *)v120 - 3) = 0;
          *((void *)v119 - 3) = v122;
          *((_OWORD *)v119 - 1) = *(_OWORD *)&v86[v117 - 16];
          v86 -= 48;
          v118 -= 48;
        }
        while (&v86[v117] != v116);
        double v113 = &v118[48 * v91];
      }
      double v123 = &v95[48 * v94];
      uint64_t v124 = (char *)v135[1];
      if (v124 != v92)
      {
        do
        {
          long long v125 = *(_OWORD *)v92;
          *(void *)unint64_t v92 = 0;
          *((void *)v92 + 1) = 0;
          *(_OWORD *)double v114 = v125;
          *((_DWORD *)v114 + 4) = *((_DWORD *)v92 + 4);
          uint64_t v126 = *((void *)v92 + 3);
          *((void *)v92 + 3) = 0;
          *((void *)v114 + 3) = v126;
          *((_OWORD *)v114 + 2) = *((_OWORD *)v92 + 2);
          v114 += 48;
          v92 += 48;
        }
        while (v92 != v124);
        unint64_t v92 = (char *)v135[1];
      }
      uint64_t v127 = (char *)*v135;
      *uint64_t v135 = v113;
      v135[1] = v114;
      v135[2] = v123;
      while (v92 != v127)
      {

        uint64_t v128 = (void *)*((void *)v92 - 6);
        v92 -= 48;
      }
      if (v127) {
        operator delete(v127);
      }
    }
LABEL_123:
    sub_1C4999C7C((uint64_t)&v145, v146);
    uint64_t v129 = (char *)__p;
    if (__p)
    {
      for (uint64_t k = v149; k != v129; k -= 48)
      {

        uint64_t v131 = (void *)*((void *)k - 6);
      }
      operator delete(v129);
    }
    uint64_t v132 = (char *)v151;
    if (v151)
    {
      for (unint64_t m = v152; m != v132; m -= 48)
      {

        uint64_t v134 = (void *)*((void *)m - 6);
      }
      operator delete(v132);
    }
    return;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v7 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C492D000, v7, OS_LOG_TYPE_ERROR, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: holder is empty", buf, 2u);
  }

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_1C4BDADE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33)
{
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations::proceedRequestResult(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v261 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v16 = objc_msgSend_drawing(v5, v6, v7, v8, v9, v10);
  if (!v16
    || (objc_msgSend_drawing(v5, v11, v12, v13, v14, v15),
        uint64_t v17 = objc_claimAutoreleasedReturnValue(),
        uint64_t v23 = objc_msgSend_pointCount(v17, v18, v19, v20, v21, v22),
        v17,
        v16,
        !v23))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v76 = (id)qword_1EA3C9FD8;
    if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    *(_WORD *)long long buf = 0;
    long long v83 = "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: result drawing is nill";
LABEL_15:
    _os_log_impl(&dword_1C492D000, v76, OS_LOG_TYPE_ERROR, v83, buf, 2u);
    goto LABEL_16;
  }
  uint64_t v29 = objc_msgSend_segmentContents(v5, v24, v25, v26, v27, v28);

  if (!v29)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v76 = (id)qword_1EA3C9FD8;
    if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    *(_WORD *)long long buf = 0;
    long long v83 = "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: segmentContents is nill";
    goto LABEL_15;
  }
  int v35 = a2[4];
  if (v35 == 2)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    unint64_t v84 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v84, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: start process result from refined style sample.", buf, 2u);
    }

    for (unint64_t i = 0; ; ++i)
    {
      uint64_t v91 = objc_msgSend_segmentContents(v5, v85, v86, v87, v88, v89);
      BOOL v97 = i < objc_msgSend_count(v91, v92, v93, v94, v95, v96);

      if (!v97) {
        goto LABEL_42;
      }
      long long v103 = objc_msgSend_segmentContents(v5, v98, v99, v100, v101, v102);
      unint64_t v108 = objc_msgSend_objectAtIndexedSubscript_(v103, v104, i, v105, v106, v107);
      double v114 = unicodeToNSString(a2[8], v109, v110, v111, v112, v113);
      if (objc_msgSend_isEqualToString_(v108, v115, (uint64_t)v114, v116, v117, v118))
      {
        uint64_t v124 = objc_msgSend_contractViolations(v5, v119, v120, v121, v122, v123);
        char v125 = sub_1C4BDB894(i, v124);

        if ((v125 & 1) == 0)
        {
          uint64_t v132 = objc_msgSend_drawing(v5, v85, v86, v87, v88, v89);
          uint64_t v138 = objc_msgSend_segmentStrokeIndexes(v5, v133, v134, v135, v136, v137);
          long long v143 = objc_msgSend_objectAtIndexedSubscript_(v138, v139, i, v140, v141, v142);
          uint64_t v76 = objc_msgSend_drawingWithStrokesFromIndexSet_(v132, v144, (uint64_t)v143, v145, v146, v147);

          if (!v76)
          {
LABEL_42:
            if (qword_1EA3CA000 == -1)
            {
              uint64_t v76 = (id)qword_1EA3C9FD8;
              if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
                goto LABEL_16;
              }
            }
            else
            {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
              uint64_t v76 = (id)qword_1EA3C9FD8;
              if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
                goto LABEL_16;
              }
            }
            uint64_t v166 = unicodeToNSString(a2[8], v161, v162, v163, v164, v165);
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v166;
            _os_log_impl(&dword_1C492D000, v76, OS_LOG_TYPE_ERROR, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: error add initial character %@ to holder", buf, 0xCu);

            goto LABEL_16;
          }
          objc_msgSend_bounds(v76, v148, v149, v150, v151, v152);
          float v153 = CGRectGetMaxX(v262) + 1.0;
          CoreHandwriting::synthesis::fast_path::createCHFastPathCharacterFromSynthesizedData((CoreHandwriting::synthesis::fast_path *)v76, (CHDrawing *)a2[8], v153, -1.0, *(_DWORD *)(*(void *)(a1 + 16) + 36), (CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *)buf);
          uint64_t v154 = CHOSLogForCategory(9);
          if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v160 = unicodeToNSString(a2[8], v155, v156, v157, v158, v159);
            int v258 = 138412290;
            uint64_t v259 = v160;
            _os_log_impl(&dword_1C492D000, v154, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: add initial character %@ to holder", (uint8_t *)&v258, 0xCu);
          }
LABEL_41:

          (*(void (**)(void, unsigned char *, void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), buf, a2[9]);
LABEL_16:

          goto LABEL_17;
        }
      }
      else
      {
      }
    }
  }
  if (!v35)
  {
    uint64_t v36 = objc_msgSend_segmentContents(v5, v30, v31, v32, v33, v34);
    if (objc_msgSend_count(v36, v37, v38, v39, v40, v41))
    {
      uint64_t v47 = objc_msgSend_segmentContents(v5, v42, v43, v44, v45, v46);
      int v52 = objc_msgSend_objectAtIndexedSubscript_(v47, v48, 0, v49, v50, v51);
      uint64_t v58 = unicodeToNSString(a2[8], v53, v54, v55, v56, v57);
      char isEqualToString = objc_msgSend_isEqualToString_(v52, v59, (uint64_t)v58, v60, v61, v62);

      if (isEqualToString)
      {
        unsigned int v69 = objc_msgSend_contractViolations(v5, v64, v65, v66, v67, v68);
        int v70 = sub_1C4BDB894(0, v69);

        if (!v70)
        {
          uint64_t v167 = objc_msgSend_drawing(v5, v71, v72, v73, v74, v75);
          uint64_t v173 = objc_msgSend_segmentStrokeIndexes(v5, v168, v169, v170, v171, v172);
          uint64_t v179 = objc_msgSend_firstObject(v173, v174, v175, v176, v177, v178);
          uint64_t v76 = objc_msgSend_drawingWithStrokesFromIndexSet_(v167, v180, (uint64_t)v179, v181, v182, v183);

          uint64_t v189 = objc_msgSend_drawing(v5, v184, v185, v186, v187, v188);
          objc_msgSend_bounds(v189, v190, v191, v192, v193, v194);
          double MaxX = CGRectGetMaxX(v263);

          double v201 = objc_msgSend_segmentStrokeIndexes(v5, v196, v197, v198, v199, v200);
          unint64_t v207 = objc_msgSend_count(v201, v202, v203, v204, v205, v206);

          if (v207 >= 2)
          {
            unint64_t v213 = objc_msgSend_drawing(v5, v208, v209, v210, v211, v212);
            uint64_t v219 = objc_msgSend_segmentStrokeIndexes(v5, v214, v215, v216, v217, v218);
            uint64_t v224 = objc_msgSend_objectAtIndexedSubscript_(v219, v220, 1, v221, v222, v223);
            uint64_t v229 = objc_msgSend_drawingWithStrokesFromIndexSet_(v213, v225, (uint64_t)v224, v226, v227, v228);

            objc_msgSend_bounds(v229, v230, v231, v232, v233, v234);
            double MaxX = CGRectGetMaxX(v264);
          }
          objc_msgSend_bounds(v76, v208, v209, v210, v211, v212);
          double v236 = v235;
          objc_msgSend_bounds(v76, v237, v238, v239, v240, v241);
          double v243 = v242;
          objc_msgSend_drawing(v5, v244, v245, v246, v247, v248);
          uint64_t v249 = (CoreHandwriting::synthesis::fast_path *)objc_claimAutoreleasedReturnValue();
          float v250 = v236 + v243 + 0.001;
          float v251 = MaxX;
          CoreHandwriting::synthesis::fast_path::createCHFastPathCharacterFromSynthesizedData(v249, (CHDrawing *)a2[8], v250, v251, *(_DWORD *)(*(void *)(a1 + 16) + 36), (CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *)buf);

          uint64_t v154 = CHOSLogForCategory(9);
          if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v257 = unicodeToNSString(a2[8], v252, v253, v254, v255, v256);
            int v258 = 138412290;
            uint64_t v259 = v257;
            _os_log_impl(&dword_1C492D000, v154, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: add initial character %@ to holder", (uint8_t *)&v258, 0xCu);
          }
          goto LABEL_41;
        }
        uint64_t v76 = CHOSLogForCategory(9);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          uint64_t v82 = unicodeToNSString(a2[8], v77, v78, v79, v80, v81);
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v82;
          _os_log_impl(&dword_1C492D000, v76, OS_LOG_TYPE_ERROR, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: error add initial character %@ to holder", buf, 0xCu);
        }
        goto LABEL_16;
      }
    }
    else
    {
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v76 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      uint64_t v131 = unicodeToNSString(a2[8], v126, v127, v128, v129, v130);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v131;
      _os_log_impl(&dword_1C492D000, v76, OS_LOG_TYPE_ERROR, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: error add initial character %@ to holder. Segment content not matched.", buf, 0xCu);
    }
    goto LABEL_16;
  }
LABEL_17:
}

void sub_1C4BDB6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BDB894(unint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v3 = a2;
  char v6 = 0;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v22, (uint64_t)v28, 16, v5);
  if (v12)
  {
    uint64_t v14 = *(void *)v23;
    *(void *)&long long v13 = 67109120;
    long long v21 = v13;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v23 != v14) {
          objc_enumerationMutation(v3);
        }
        uint64_t v16 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        unint64_t v17 = objc_msgSend_locationRange(v16, v7, v8, v9, v10, v11, v21, (void)v22);
        BOOL v18 = a1 < v17 || a1 - v17 >= (unint64_t)v7;
        if (!v18 && (unint64_t)(objc_msgSend_kind(v16, v7, v8, v9, v10, v11) - 1) < 2)
        {
          if (qword_1EA3CA000 == -1)
          {
            uint64_t v19 = (id)qword_1EA3C9FD8;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_14;
            }
          }
          else
          {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            uint64_t v19 = (id)qword_1EA3C9FD8;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
LABEL_14:
              *(_DWORD *)long long buf = v21;
              int v27 = a1;
              _os_log_impl(&dword_1C492D000, v19, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: segment %d not suitable for proceeding.", buf, 8u);
            }
          }

          char v6 = 1;
          continue;
        }
      }
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v7, (uint64_t)&v22, (uint64_t)v28, 16, v11);
    }
    while (v12);
  }

  return v6 & 1;
}

void sub_1C4BDBA70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BDBA94(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010E90;
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);

    return a1;
  }
  else
  {

    return a1;
  }
}

void sub_1C4BDBB3C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010E90;
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C4BDBBEC(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010E90;
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);

    return a1;
  }
  else
  {

    return a1;
  }
}

void sub_1C4BDBC94(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010E90;
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x1C8786460);
}

char *sub_1C4BDBD44(void **a1, long long *a2)
{
  id v3 = (char *)*a1;
  v2 = (char *)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_1C494A220();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - v3) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_1C4949AA8();
    }
    uint64_t v9 = (char *)operator new(48 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  long long v10 = *a2;
  uint64_t v11 = &v9[48 * v4];
  uint64_t v12 = &v9[48 * v8];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *(_OWORD *)uint64_t v11 = v10;
  *((_DWORD *)v11 + 4) = *((_DWORD *)a2 + 4);
  uint64_t v13 = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  *((void *)v11 + 3) = v13;
  *((_OWORD *)v11 + 2) = a2[2];
  uint64_t v14 = v11 + 48;
  if (v2 == v3)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v2) {
      return v14;
    }
    goto LABEL_17;
  }
  uint64_t v15 = 0;
  do
  {
    uint64_t v16 = &v11[v15];
    unint64_t v17 = &v2[v15];
    long long v18 = *(_OWORD *)&v2[v15 - 48];
    *((void *)v17 - 6) = 0;
    *((void *)v17 - 5) = 0;
    *((_OWORD *)v16 - 3) = v18;
    *((_DWORD *)v16 - 8) = *(_DWORD *)&v2[v15 - 32];
    uint64_t v19 = *(void *)&v2[v15 - 24];
    *((void *)v17 - 3) = 0;
    *((void *)v16 - 3) = v19;
    *((_OWORD *)v16 - 1) = *(_OWORD *)&v2[v15 - 16];
    v15 -= 48;
  }
  while (&v2[v15] != v3);
  v2 = (char *)*a1;
  uint64_t v20 = (id *)a1[1];
  *a1 = &v11[v15];
  a1[1] = v14;
  a1[2] = v12;
  while (v20 != (id *)v2)
  {

    long long v21 = *(v20 - 6);
    v20 -= 6;
  }
  if (v2) {
LABEL_17:
  }
    operator delete(v2);
  return v14;
}

void sub_1C4BDC1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDC230(uint64_t a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(void **)(a1 + 32) != a3)
  {
    if (qword_1EA3CA000 == -1)
    {
      char v6 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
LABEL_5:

        goto LABEL_6;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      char v6 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
        goto LABEL_5;
      }
    }
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 134218240;
    id v14 = a3;
    __int16 v15 = 2048;
    uint64_t v16 = v7;
    _os_log_impl(&dword_1C492D000, v6, OS_LOG_TYPE_FAULT, "Multi array size (%ld) does not match IOSurface bytes per row (%zu)", buf, 0x16u);
    goto LABEL_5;
  }
LABEL_6:
  BaseAddress = IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(a1 + 40));
  vImagePixelCount v9 = *(void *)(a1 + 48);
  id v12 = 0;
  CHConvertFloat32BufferToFloat16Buffer(a2, BaseAddress, v9, &v12);
  id v10 = v12;
  if (v10)
  {
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v11 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
LABEL_10:

        goto LABEL_11;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v11 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        goto LABEL_10;
      }
    }
    *(_DWORD *)long long buf = 138412290;
    id v14 = v10;
    _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_ERROR, "Could not convert float32 buffer to float16 buffer: %@", buf, 0xCu);
    goto LABEL_10;
  }
LABEL_11:
}

void sub_1C4BDC5D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDC9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDCCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1C4BDCD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDCD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BDCD68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4BDCD78(uint64_t a1)
{
}

uint64_t sub_1C4BDCD80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v14 = objc_msgSend_bytes(v3, v4, v5, v6, v7, v8);
  if (*(void *)(a1 + 56) == 65552)
  {
    uint64_t v15 = objc_msgSend_length(v3, v9, v10, v11, v12, v13);
    uint64_t v16 = malloc_type_calloc(2 * v15, 1uLL, 0x8C80D3E4uLL);
    unint64_t v22 = objc_msgSend_length(v3, v17, v18, v19, v20, v21);
    CHConvertFloat16BufferToFloat32Buffer(v14, v16, v22 >> 1, 0);
  }
  else
  {
    size_t v28 = objc_msgSend_length(v3, v9, v10, v11, v12, v13);
    uint64_t v16 = malloc_type_calloc(v28, 1uLL, 0xD0A9B700uLL);
    size_t v34 = objc_msgSend_length(v3, v29, v30, v31, v32, v33);
    memcpy(v14, v16, v34);
  }
  int v35 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v36 = objc_msgSend_rank(*(void **)(a1 + 32), v23, v24, v25, v26, v27);
  uint64_t v46 = objc_msgSend_arrayWithCapacity_(v35, v37, v36, v38, v39, v40);
  for (unint64_t i = 0; i < objc_msgSend_rank(*(void **)(a1 + 32), v41, v42, v43, v44, v45); ++i)
  {
    uint64_t v53 = NSNumber;
    id v54 = *(id *)(a1 + 32);
    uint64_t v60 = objc_msgSend_sizes(v54, v55, v56, v57, v58, v59);
    uint64_t v65 = objc_msgSend_numberWithUnsignedLong_(v53, v61, *(void *)(v60 + 8 * i), v62, v63, v64);
    objc_msgSend_addObject_(v46, v66, (uint64_t)v65, v67, v68, v69);
  }
  uint64_t v120 = v3;
  int v70 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v71 = objc_msgSend_rank(*(void **)(a1 + 40), v48, v49, v50, v51, v52);
  uint64_t v81 = objc_msgSend_arrayWithCapacity_(v70, v72, v71, v73, v74, v75);
  for (unint64_t j = 0; j < objc_msgSend_rank(*(void **)(a1 + 40), v76, v77, v78, v79, v80); ++j)
  {
    uint64_t v83 = *(void *)(a1 + 56);
    unint64_t v84 = NSNumber;
    id v85 = *(id *)(a1 + 40);
    unint64_t v95 = *(void *)(objc_msgSend_byteOffsets(v85, v86, v87, v88, v89, v90) + 8 * j);
    if (v83 == 65552) {
      char v96 = 1;
    }
    else {
      char v96 = 2;
    }
    BOOL v97 = objc_msgSend_numberWithUnsignedLong_(v84, v91, v95 >> v96, v92, v93, v94);
    objc_msgSend_addObject_(v81, v98, (uint64_t)v97, v99, v100, v101);
  }
  id v102 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  unint64_t v108 = objc_msgSend_copy(v46, v103, v104, v105, v106, v107);
  double v114 = objc_msgSend_copy(v81, v109, v110, v111, v112, v113);
  uint64_t v116 = objc_msgSend_initWithDataPointer_shape_dataType_strides_deallocator_error_(v102, v115, (uint64_t)v16, (uint64_t)v108, 65568, (uint64_t)v114, &unk_1F2013050, 0);
  uint64_t v117 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v118 = *(void **)(v117 + 40);
  *(void *)(v117 + 40) = v116;

  return 1;
}

void sub_1C4BDCFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDD070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDD088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDD0A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDD0BC(int a1, void *a2)
{
}

void sub_1C4BDD350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDD500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::inplaceLinearCombination(CoreHandwriting::synthesis *this, double a2, MLMultiArray *a3, float a4, MLMultiArray *a5)
{
  uint64_t v6 = this;
  uint64_t v7 = a3;
  uint64_t v50 = v6;
  unint64_t v13 = objc_msgSend_dataPointer(v50, v8, v9, v10, v11, v12);
  id v14 = v7;
  unint64_t v20 = objc_msgSend_dataPointer(v14, v15, v16, v17, v18, v19);
  uint64_t v26 = objc_msgSend_count(v50, v21, v22, v23, v24, v25);
  uint64_t v32 = objc_msgSend_count(v14, v27, v28, v29, v30, v31);
  if (v26 && v32)
  {
    unint64_t v33 = (v32 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v34 = (v26 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v33 >= v34) {
      unint64_t v35 = (v26 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = (v32 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v35 < 0xB)
    {
      unint64_t v36 = v20;
      unint64_t v37 = v13;
LABEL_15:
      unint64_t v47 = v36 + 4;
      unint64_t v48 = v37 + 4;
      do
      {
        *(float *)(v48 - 4) = (float)(*(float *)(v47 - 4) * a4) + (float)(*(float *)&a2 * *(float *)(v48 - 4));
        if (v48 == v13 + 4 * v26) {
          break;
        }
        v48 += 4;
        BOOL v49 = v47 == v20 + 4 * v32;
        v47 += 4;
      }
      while (!v49);
      goto LABEL_19;
    }
    if (v33 >= v34) {
      unint64_t v33 = (v26 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    }
    uint64_t v38 = 4 * v33 + 4;
    if (v13 < v20 + v38)
    {
      unint64_t v39 = v13 + v38;
      unint64_t v36 = v20;
      unint64_t v37 = v13;
      if (v20 < v39) {
        goto LABEL_15;
      }
    }
    unint64_t v40 = v35 + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v36 = v20 + v41;
    unint64_t v37 = v13 + v41;
    float32x4_t v42 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    uint64_t v43 = (float32x4_t *)(v13 + 16);
    uint64_t v44 = (float32x4_t *)(v20 + 16);
    uint64_t v45 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v46 = vmlaq_f32(vmulq_n_f32(*v44, a4), *v43, v42);
      v43[-1] = vmlaq_f32(vmulq_n_f32(v44[-1], a4), v43[-1], v42);
      *uint64_t v43 = v46;
      v43 += 2;
      v44 += 2;
      v45 -= 8;
    }
    while (v45);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_15;
    }
  }
LABEL_19:
}

void sub_1C4BDD6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDD6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDD714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDD72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::generateMLMultiArrayWithGaussianNoiseWithPadding(void *a1, unint64_t a2, int a3)
{
  id v5 = a1;
  id v6 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  uint64_t v9 = objc_msgSend_initWithShape_dataType_error_(v6, v7, (uint64_t)v5, 65568, 0, v8);
  uint64_t v10 = 1;
  unint64_t v11 = 5489;
  do
  {
    unint64_t v11 = v10 + 0x5851F42D4C957F2DLL * (v11 ^ (v11 >> 62));
    v101[v10++] = v11;
  }
  while (v10 != 312);
  unint64_t v12 = a3;
  v101[0] = a3;
  for (uint64_t i = 1; i != 312; ++i)
  {
    unint64_t v12 = i + 0x5851F42D4C957F2DLL * (v12 ^ (v12 >> 62));
    v101[i] = v12;
  }
  id v14 = v9;
  uint64_t v20 = objc_msgSend_dataPointer(v14, v15, v16, v17, v18, v19);
  uint64_t v26 = objc_msgSend_count(v14, v21, v22, v23, v24, v25);
  if (v26)
  {
    unint64_t v32 = 0;
    int v33 = 0;
    unint64_t v34 = (float *)v20;
    unint64_t v35 = (float *)(v20 + 4 * v26);
    uint64_t v99 = v35;
    do
    {
      while (v33)
      {
        int v33 = 0;
        *v34++ = v31 + 0.0;
        if (v34 == v35) {
          goto LABEL_21;
        }
      }
      uint64_t v100 = v34;
      uint64_t v36 = v101[v32];
      do
      {
        unint64_t v37 = (v32 + 1) % 0x138;
        unint64_t v38 = v37;
        unint64_t v39 = v101[(v32 + 156) % 0x138] ^ ((v101[v37] & 0x7FFFFFFELL | v36 & 0xFFFFFFFF80000000) >> 1) ^ ((uint64_t)(v101[v37] << 63) >> 63) & 0xB5026F5AA96619E9;
        v101[v32] = v39;
        uint64_t v40 = (v39 >> 29) & 0x555555555 ^ v39;
        if (v37 < 0x137) {
          unint64_t v32 = v37 + 1;
        }
        else {
          unint64_t v32 = v37 - 311;
        }
        uint64_t v36 = v101[v32];
        unint64_t v41 = (((v40 << 17) & 0x71D67FFFEDA60000 ^ v40) << 37) & 0xFFF7EEE000000000 ^ (v40 << 17) & 0x71D67FFFEDA60000 ^ v40;
        if (v37 < 0x9C) {
          uint64_t v42 = 156;
        }
        else {
          uint64_t v42 = -156;
        }
        unint64_t v43 = v101[v42 + v37] ^ ((v101[v32] & 0x7FFFFFFELL | v101[v37] & 0xFFFFFFFF80000000) >> 1) ^ ((uint64_t)(v101[v32] << 63) >> 63) & 0xB5026F5AA96619E9;
        float v44 = (float)(v41 ^ (v41 >> 43));
        uint64_t v45 = (((v43 >> 29) & 0x555555555 ^ v43) << 17) & 0x71D67FFFEDA60000 ^ (v43 >> 29) & 0x555555555 ^ v43;
        float v46 = (float)((float)(v44 * 5.421e-20) * 2.0) + -1.0;
        float v47 = (float)((float)((float)((v45 << 37) & 0xFFF7EEE000000000 ^ v45 ^ (((v45 << 37) & 0xFFF7EEE000000000 ^ v45) >> 43))
                            * 5.421e-20)
                    * 2.0)
            + -1.0;
        float v48 = (float)(v47 * v47) + (float)(v46 * v46);
        v101[v38] = v43;
      }
      while (v48 > 1.0 || v48 == 0.0);
      float v49 = sqrtf((float)(logf((float)(v47 * v47) + (float)(v46 * v46)) * -2.0) / v48);
      float v31 = v47 * v49;
      int v33 = 1;
      unint64_t v35 = v99;
      *uint64_t v100 = (float)(v46 * v49) + 0.0;
      unint64_t v34 = v100 + 1;
    }
    while (v100 + 1 != v99);
  }
LABEL_21:
  while (1)
  {
    uint64_t v50 = objc_msgSend_objectAtIndexedSubscript_(v5, v27, 1, v28, v29, v30, v99);
    unint64_t v56 = objc_msgSend_unsignedLongValue(v50, v51, v52, v53, v54, v55);

    if (a2 >= v56) {
      break;
    }
    for (unint64_t j = 0; ; ++j)
    {
      uint64_t v62 = objc_msgSend_objectAtIndexedSubscript_(v5, v57, 2, v58, v59, v60);
      unint64_t v68 = objc_msgSend_unsignedLongValue(v62, v63, v64, v65, v66, v67);

      if (j >= v68) {
        break;
      }
      int v70 = objc_msgSend_strides(v14, v27, v69, v28, v29, v30);
      uint64_t v75 = objc_msgSend_objectAtIndexedSubscript_(v70, v71, 1, v72, v73, v74);
      uint64_t v81 = objc_msgSend_unsignedLongValue(v75, v76, v77, v78, v79, v80);
      uint64_t v87 = objc_msgSend_strides(v14, v82, v83, v84, v85, v86);
      uint64_t v92 = objc_msgSend_objectAtIndexedSubscript_(v87, v88, 2, v89, v90, v91);
      *(_DWORD *)(v20 + 4 * v81 * a2 + 4 * objc_msgSend_unsignedLongValue(v92, v93, v94, v95, v96, v97) * j) = 0;
    }
    ++a2;
  }

  return v14;
}

void sub_1C4BDDB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDDB3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDDB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDDB60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BDDBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::CHDiffusionSampler::setForwardRatio(uint64_t this, float a2)
{
  float v2 = 1.0;
  if (a2 <= 1.0) {
    float v2 = a2;
  }
  BOOL v3 = a2 < 0.0;
  float v4 = 0.0;
  if (!v3) {
    float v4 = v2;
  }
  *(float *)(this + 8) = v4;
  return this;
}

uint64_t CoreHandwriting::synthesis::CHDiffusionSampler::setBackwardRatio(uint64_t this, float a2)
{
  float v2 = 1.0;
  if (a2 <= 1.0) {
    float v2 = a2;
  }
  BOOL v3 = a2 < 0.0;
  float v4 = 0.0;
  if (!v3) {
    float v4 = v2;
  }
  *(float *)(this + 12) = v4;
  return this;
}

id CoreHandwriting::synthesis::CHDiffusionSampler::sample(uint64_t a1, void *a2, uint64_t a3, CoreHandwriting::synthesis::CHDiffusionSynthesisModel *a4, void *a5)
{
  v407[3] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v399 = a5;
  v402 = v7;
  unint64_t v12 = objc_msgSend_objectForKey_(v7, v8, @"input_length", v9, v10, v11);
  uint64_t v17 = objc_msgSend_objectAtIndexedSubscript_(v12, v13, 0, v14, v15, v16);
  uint64_t v392 = (MLMultiArray *)objc_msgSend_integerValue(v17, v18, v19, v20, v21, v22);

  uint64_t v27 = objc_msgSend_objectForKeyedSubscript_(v7, v23, @"input_labels", v24, v25, v26);
  int v33 = objc_msgSend_shape(v27, v28, v29, v30, v31, v32);
  unint64_t v38 = objc_msgSend_objectAtIndexedSubscript_(v33, v34, 1, v35, v36, v37);
  unint64_t v44 = objc_msgSend_integerValue(v38, v39, v40, v41, v42, v43);

  float v49 = objc_msgSend_objectForKeyedSubscript_(v402, v45, @"input_style_labels", v46, v47, v48);
  uint64_t v55 = objc_msgSend_shape(v49, v50, v51, v52, v53, v54);
  uint64_t v60 = objc_msgSend_objectAtIndexedSubscript_(v55, v56, 1, v57, v58, v59);
  unint64_t v66 = objc_msgSend_integerValue(v60, v61, v62, v63, v64, v65);

  if (v44 <= v66) {
    unint64_t v67 = v66;
  }
  else {
    unint64_t v67 = v44;
  }
  if (v67 >= 9) {
    uint64_t v68 = 1152;
  }
  else {
    uint64_t v68 = 192;
  }
  if (*(float *)(a1 + 8) >= 1.0)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v110 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v110, OS_LOG_TYPE_DEBUG, "DiffusionSampler: starting from noise", buf, 2u);
    }

    v407[0] = &unk_1F203F168;
    uint64_t v83 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v111, v68, v112, v113, v114);
    v407[1] = v83;
    v407[2] = &unk_1F203F180;
    uint64_t v109 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v115, (uint64_t)v407, 3, v116, v117);
    CoreHandwriting::synthesis::generateMLMultiArrayWithGaussianNoiseWithPadding(v109, (unint64_t)v392, *(_DWORD *)(a1 + 4));
    id v396 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v69 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 56))(a3);
    float v70 = (*(float (**)(uint64_t, uint64_t))(*(void *)a3 + 64))(a3, v69);
    float v72 = v71;
    uint64_t v77 = objc_msgSend_objectForKeyedSubscript_(v402, v73, @"input_diffusion_x_timestep", v74, v75, v76);
    uint64_t v83 = objc_msgSend_shape(v77, v78, v79, v80, v81, v82);

    CoreHandwriting::synthesis::generateMLMultiArrayWithGaussianNoiseWithPadding(v83, (unint64_t)v392, *(_DWORD *)(a1 + 4));
    uint64_t v84 = (CoreHandwriting::synthesis *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v402, v85, @"input_diffusion_x_timestep", v86, v87, v88);
    uint64_t v89 = (MLMultiArray *)objc_claimAutoreleasedReturnValue();
    *(float *)&double v90 = v72;
    id v396 = v84;
    CoreHandwriting::synthesis::inplaceLinearCombination(v84, v90, v89, v70, v91);

    uint64_t v96 = objc_msgSend_objectAtIndexedSubscript_(v83, v92, 1, v93, v94, v95);
    uint64_t v102 = objc_msgSend_unsignedLongValue(v96, v97, v98, v99, v100, v101) & 0xF;

    if (v102)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      long long v103 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v103, OS_LOG_TYPE_FAULT))
      {
        unint64_t v108 = objc_msgSend_objectAtIndexedSubscript_(v83, v104, 1, v105, v106, v107);
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v108;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 16;
        _os_log_impl(&dword_1C492D000, v103, OS_LOG_TYPE_FAULT, "Unexpected length=%@ is not divisible by %i", buf, 0x12u);
      }
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v109 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v69;
      *(_WORD *)&buf[8] = 2048;
      *(double *)&buf[10] = v70;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v72;
      _os_log_impl(&dword_1C492D000, v109, OS_LOG_TYPE_DEBUG, "DiffusionSampler: starting timestep %i with x0 * %1.3f + noise * %1.3f", buf, 0x1Cu);
    }
  }

  v123.n128_u32[0] = *(_DWORD *)a1;
  if (*(float *)a1 <= 0.0)
  {
    uint64_t v397 = 0;
  }
  else
  {
    uint64_t v397 = objc_msgSend_mutableCopy(v402, v118, v119, v120, v121, v122, v123.n128_f64[0]);
    memset(buf, 0, 24);
    uint64_t v128 = objc_msgSend_objectForKey_(v402, v124, @"input_labels_length", v125, v126, v127);
    uint64_t v133 = objc_msgSend_objectAtIndexedSubscript_(v128, v129, 0, v130, v131, v132);
    unint64_t v139 = objc_msgSend_integerValue(v133, v134, v135, v136, v137, v138);
    *(void *)uint64_t v405 = *((void *)a4 + 15);
    unint64_t v140 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
    if (v139 <= v140)
    {
      if (v139 < v140) {
        *(void *)&buf[8] = *(void *)buf + 8 * v139;
      }
    }
    else
    {
      sub_1C49AB988((uint64_t)buf, v139 - v140, (uint64_t *)v405);
    }

    uint64_t v145 = objc_msgSend_objectForKeyedSubscript_(v402, v141, @"input_labels", v142, v143, v144);
    uint64_t v151 = objc_msgSend_shape(v145, v146, v147, v148, v149, v150);
    uint64_t v156 = objc_msgSend_objectAtIndexedSubscript_(v151, v152, 1, v153, v154, v155);
    unint64_t v162 = objc_msgSend_integerValue(v156, v157, v158, v159, v160, v161);
    *(void *)uint64_t v405 = *((void *)a4 + 15);
    unint64_t v163 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
    if (v162 <= v163)
    {
      if (v162 < v163) {
        *(void *)&buf[8] = *(void *)buf + 8 * v162;
      }
    }
    else
    {
      sub_1C49AB988((uint64_t)buf, v162 - v163, (uint64_t *)v405);
    }

    long long v168 = objc_msgSend_objectForKeyedSubscript_(v402, v164, @"input_labels", v165, v166, v167);
    uint64_t v174 = objc_msgSend_shape(v168, v169, v170, v171, v172, v173);
    uint64_t v175 = sub_1C4A700F4(buf, v174);
    objc_msgSend_setObject_forKeyedSubscript_(v397, v176, (uint64_t)v175, @"input_labels", v177, v178);

    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  memset(buf, 0, 24);
  int v179 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a3 + 72))(a3, v123);
  uint64_t v180 = v179;
  uint64_t v181 = *(char **)buf;
  if (v179 <= (unint64_t)((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 3)) {
    goto LABEL_43;
  }
  if (v179 < 0) {
    sub_1C494A220();
  }
  uint64_t v182 = *(char **)&buf[8];
  uint64_t v183 = (char *)operator new(8 * v179);
  uint64_t v184 = v182 - v181;
  unint64_t v185 = (unint64_t)&v183[(v182 - v181) & 0xFFFFFFFFFFFFFFF8];
  if (v182 == v181)
  {
    *(void *)long long buf = &v183[(v182 - v181) & 0xFFFFFFFFFFFFFFF8];
    *(void *)&buf[8] = *(void *)buf;
    *(void *)&uint8_t buf[16] = &v183[8 * v180];
    goto LABEL_41;
  }
  unint64_t v186 = v184 - 8;
  if ((unint64_t)(v184 - 8) >= 0x78)
  {
    if ((unint64_t)&v182[-(v186 & 0xFFFFFFFFFFFFFFF8) - 8] >= v185
      || (uint64_t v187 = &v183[(v182 - v181) & 0xFFFFFFFFFFFFFFF8],
          &v183[(v184 & 0xFFFFFFFFFFFFFFF8) - (v186 & 0xFFFFFFFFFFFFFFF8) - 8] >= v182))
    {
      uint64_t v374 = v184 >> 3;
      uint64_t v375 = (v186 >> 3) + 1;
      uint64_t v376 = 8 * (v375 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v187 = (char *)(v185 - v376);
      uint64_t v377 = &v182[-v376];
      v378 = v182 - 16;
      v379 = &v183[8 * v374 - 16];
      uint64_t v380 = v375 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v382 = *((_OWORD *)v378 - 1);
        long long v381 = *(_OWORD *)v378;
        *((_OWORD *)v378 - 1) = 0uLL;
        *(_OWORD *)v378 = 0uLL;
        *((_OWORD *)v379 - 1) = v382;
        *(_OWORD *)v379 = v381;
        v378 -= 32;
        v379 -= 32;
        v380 -= 4;
      }
      while (v380);
      uint64_t v182 = v377;
      if (v375 == (v375 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_121;
      }
    }
  }
  else
  {
    uint64_t v187 = &v183[(v182 - v181) & 0xFFFFFFFFFFFFFFF8];
  }
  do
  {
    uint64_t v383 = *((void *)v182 - 1);
    v182 -= 8;
    *(void *)uint64_t v182 = 0;
    *((void *)v187 - 1) = v383;
    v187 -= 8;
  }
  while (v182 != v181);
LABEL_121:
  uint64_t v181 = *(char **)buf;
  v384 = *(char **)&buf[8];
  *(void *)long long buf = v187;
  *(void *)&buf[8] = v185;
  *(void *)&uint8_t buf[16] = &v183[8 * v180];
  while (v384 != v181)
  {
    v385 = (void *)*((void *)v384 - 1);
    v384 -= 8;
  }
LABEL_41:
  if (v181) {
    operator delete(v181);
  }
LABEL_43:
  uint64_t v398 = (unsigned int *)(*(uint64_t (**)(uint64_t, float))(*(void *)a3 + 24))(a3, *(float *)(a1 + 12));
  uint64_t v394 = 0;
  uint64_t v400 = 0;
  while (v398 != (unsigned int *)(*(uint64_t (**)(uint64_t, float))(*(void *)a3 + 32))(a3, *(float *)(a1 + 12)))
  {
    uint64_t v188 = *v398;
    float v189 = (*(float (**)(uint64_t, uint64_t))(*(void *)a3 + 64))(a3, v188);
    if (v399 && v399[2]())
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v386 = (id)qword_1EA3C9FD8;
      if (!os_log_type_enabled(v386, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_106;
      }
      *(_WORD *)uint64_t v405 = 0;
      uint64_t v387 = "DiffusionSampler: received shouldCancel. Aborting sampling process.";
      uint64_t v388 = v386;
      os_log_type_t v389 = OS_LOG_TYPE_DEFAULT;
LABEL_137:
      uint32_t v367 = 2;
LABEL_105:
      _os_log_impl(&dword_1C492D000, v388, v389, v387, v405, v367);
      goto LABEL_106;
    }
    id v190 = v396;
    if (!objc_msgSend_dataPointer(v190, v191, v192, v193, v194, v195))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v386 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v386, OS_LOG_TYPE_FAULT)) {
        goto LABEL_106;
      }
      *(_DWORD *)uint64_t v405 = 67109120;
      *(_DWORD *)&v405[4] = v188;
      uint64_t v387 = "DiffusionSampler: got nullptr array in timestep %i. Aborting.";
      uint64_t v388 = v386;
      os_log_type_t v389 = OS_LOG_TYPE_FAULT;
      uint32_t v367 = 8;
      goto LABEL_105;
    }
    id v196 = v190;
    uint64_t v202 = objc_msgSend_dataPointer(v196, v197, v198, v199, v200, v201);
    uint64_t v208 = objc_msgSend_count(v196, v203, v204, v205, v206, v207);
    if (v208)
    {
      uint64_t v212 = 4 * v208;
      do
      {
        v202 += 4;
        v212 -= 4;
      }
      while (v212);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v402, v209, (uint64_t)v196, @"input_diffusion_x_timestep", v210, v211);
    id v213 = objc_alloc(MEMORY[0x1E4F1E9A8]);
    uint64_t v216 = objc_msgSend_initWithShape_dataType_error_(v213, v214, (uint64_t)&unk_1F203DDA0, 65568, 0, v215);
    objc_msgSend_setObject_forKeyedSubscript_(v402, v217, (uint64_t)v216, @"input_diffusion_timestep", v218, v219);

    *(float *)&double v220 = v189;
    uint64_t v226 = objc_msgSend_numberWithFloat_(NSNumber, v221, v222, v223, v224, v225, v220);
    uint64_t v231 = objc_msgSend_objectForKeyedSubscript_(v402, v227, @"input_diffusion_timestep", v228, v229, v230);
    objc_msgSend_setObject_atIndexedSubscript_(v231, v232, (uint64_t)v226, 0, v233, v234);

    if (v400) {
      objc_msgSend_setObject_forKeyedSubscript_(v402, v235, (uint64_t)v400, @"input_diffusion_style_encoding", v236, v237);
    }
    id v238 = objc_alloc(MEMORY[0x1E4F1E930]);
    id v404 = 0;
    double v242 = objc_msgSend_initWithDictionary_error_(v238, v239, (uint64_t)v402, (uint64_t)&v404, v240, v241);
    id v243 = v404;
    uint64_t v244 = CoreHandwriting::synthesis::CHDiffusionSynthesisModel::predict(a4, v242);

    if (!v244)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v386 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v386, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v405 = 0;
        uint64_t v387 = "DiffusionSampler: model prediction returned nil. Aborting.";
        uint64_t v388 = v386;
        os_log_type_t v389 = OS_LOG_TYPE_ERROR;
        goto LABEL_137;
      }
LABEL_106:

      uint64_t v368 = 0;
      goto LABEL_107;
    }
    uint64_t v249 = objc_msgSend_featureValueForName_(v244, v245, @"pred_noise", v246, v247, v248);
    objc_msgSend_multiArrayValue(v249, v250, v251, v252, v253, v254);
    obunint64_t j = (CoreHandwriting::synthesis *)objc_claimAutoreleasedReturnValue();

    uint64_t v259 = objc_msgSend_featureValueForName_(v244, v255, @"pred_penup", v256, v257, v258);
    uint64_t v265 = objc_msgSend_multiArrayValue(v259, v260, v261, v262, v263, v264);

    uint64_t v394 = (MLMultiArray *)v265;
    if (!v400)
    {
      uint64_t v271 = objc_msgSend_featureValueForName_(v244, v266, @"diffusion_style_encoding", v267, v268, v269);
      uint64_t v400 = objc_msgSend_multiArrayValue(v271, v272, v273, v274, v275, v276);
    }
    v270.n128_u32[0] = *(_DWORD *)a1;
    if (*(float *)a1 != 0.0)
    {
      objc_msgSend_setObject_forKeyedSubscript_(v397, v266, (uint64_t)v196, @"input_diffusion_x_timestep", v268, v269, v270.n128_f64[0]);
      id v277 = objc_alloc(MEMORY[0x1E4F1E9A8]);
      uint64_t v280 = objc_msgSend_initWithShape_dataType_error_(v277, v278, (uint64_t)&unk_1F203DDB8, 65568, 0, v279);
      objc_msgSend_setObject_forKeyedSubscript_(v397, v281, (uint64_t)v280, @"input_diffusion_timestep", v282, v283);

      *(float *)&double v284 = v189;
      id v290 = objc_msgSend_numberWithFloat_(NSNumber, v285, v286, v287, v288, v289, v284);
      CGRect v295 = objc_msgSend_objectForKeyedSubscript_(v397, v291, @"input_diffusion_timestep", v292, v293, v294);
      objc_msgSend_setObject_atIndexedSubscript_(v295, v296, (uint64_t)v290, 0, v297, v298);

      id v299 = objc_alloc(MEMORY[0x1E4F1E930]);
      id v403 = 0;
      uint64_t v303 = objc_msgSend_initWithDictionary_error_(v299, v300, (uint64_t)v397, (uint64_t)&v403, v301, v302);
      id v304 = v403;
      uint64_t v305 = CoreHandwriting::synthesis::CHDiffusionSynthesisModel::predict(a4, v303);

      if (!v305)
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        v390 = (id)qword_1EA3C9FD8;
        if (os_log_type_enabled(v390, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v405 = 0;
          _os_log_impl(&dword_1C492D000, v390, OS_LOG_TYPE_ERROR, "DiffusionSampler: model prediction returned nil. Aborting.", v405, 2u);
        }

        uint64_t v386 = obj;
        goto LABEL_106;
      }
      uint64_t v310 = objc_msgSend_featureValueForName_(v305, v306, @"pred_noise", v307, v308, v309);
      objc_msgSend_multiArrayValue(v310, v311, v312, v313, v314, v315);
      uint64_t v316 = (MLMultiArray *)objc_claimAutoreleasedReturnValue();

      LODWORD(v317) = *(_DWORD *)a1;
      CoreHandwriting::synthesis::inplaceLinearCombination(obj, v317, v316, 1.0 - *(float *)a1, v318);

      uint64_t v244 = v305;
    }
    uint64_t v320 = *(void *)buf;
    uint64_t v319 = *(void *)&buf[8];
    if ((*(int (**)(uint64_t, __n128))(*(void *)a3 + 72))(a3, v270) != (v319 - v320) >> 3)
    {
      v333 = *(void **)&buf[8];
      if (*(void *)&buf[8] < *(void *)&buf[16])
      {
        void *v333 = obj;
        uint64_t v334 = v333 + 1;
LABEL_94:
        *(void *)&buf[8] = v334;
        goto LABEL_95;
      }
      uint64_t v344 = *(void *)&buf[8] - *(void *)buf;
      uint64_t v345 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
      if ((unint64_t)(v345 + 1) >> 61) {
        sub_1C494A220();
      }
      unint64_t v346 = (uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2;
      if (v346 <= v345 + 1) {
        unint64_t v346 = v345 + 1;
      }
      if (*(void *)&buf[16] - *(void *)buf >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v347 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v347 = v346;
      }
      unsigned int v391 = v188;
      if (v347)
      {
        if (v347 >> 61) {
          sub_1C4949AA8();
        }
        uint64_t v348 = (char *)operator new(8 * v347);
      }
      else
      {
        uint64_t v348 = 0;
      }
      uint64_t v349 = &v348[8 * v345];
      uint64_t v350 = &v348[8 * v347];
      *(void *)uint64_t v349 = obj;
      uint64_t v334 = v349 + 8;
      uint64_t v351 = *(void **)buf;
      v352 = *(void **)&buf[8];
      if (*(void *)&buf[8] == *(void *)buf)
      {
        *(void *)long long buf = &v348[8 * v345];
        *(void *)&buf[8] = v349 + 8;
        *(void *)&uint8_t buf[16] = v350;
        uint64_t v188 = v391;
      }
      else
      {
        unint64_t v353 = *(void *)&buf[8] - *(void *)buf - 8;
        if (v353 < 0x78)
        {
          uint64_t v354 = v350;
          uint64_t v188 = v391;
          goto LABEL_101;
        }
        unint64_t v355 = (*(void *)&buf[8] - 8 - *(void *)buf) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v354 = v350;
        uint64_t v188 = v391;
        if (*(void *)&buf[8] - 8 - v355 < (unint64_t)v349
          && (unint64_t)&v348[v344 - v355 - 8] < *(void *)&buf[8])
        {
          goto LABEL_148;
        }
        uint64_t v356 = (v353 >> 3) + 1;
        uint64_t v357 = 8 * (v356 & 0x3FFFFFFFFFFFFFFCLL);
        v349 -= v357;
        uint64_t v358 = (void *)(*(void *)&buf[8] - v357);
        uint64_t v359 = (long long *)(*(void *)&buf[8] - 16);
        uint64_t v360 = &v348[8 * v345 - 16];
        uint64_t v361 = v356 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v363 = *(v359 - 1);
          long long v362 = *v359;
          *(v359 - 1) = 0uLL;
          *uint64_t v359 = 0uLL;
          *((_OWORD *)v360 - 1) = v363;
          *(_OWORD *)uint64_t v360 = v362;
          v359 -= 2;
          v360 -= 32;
          v361 -= 4;
        }
        while (v361);
        v352 = v358;
        if (v356 != (v356 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_148:
          do
          {
LABEL_101:
            uint64_t v364 = *--v352;
            void *v352 = 0;
            *((void *)v349 - 1) = v364;
            v349 -= 8;
          }
          while (v352 != v351);
        }
        v352 = *(void **)buf;
        uint64_t v365 = *(void **)&buf[8];
        *(void *)long long buf = v349;
        *(void *)&buf[8] = v334;
        *(void *)&uint8_t buf[16] = v354;
        while (v365 != v352)
        {
          v366 = (void *)*--v365;
        }
      }
      if (v352) {
        operator delete(v352);
      }
      goto LABEL_94;
    }
    objc_storeStrong(*(id **)buf, obj);
    uint64_t v322 = *(void **)buf;
    uint64_t v321 = *(void ***)&buf[8];
    if (*(void *)&buf[8] - *(void *)buf >= 9uLL)
    {
      uint64_t v323 = (void **)(*(void *)buf + 8);
      if (*(void *)buf + 8 != *(void *)&buf[8])
      {
        uint64_t v324 = **(void **)buf;
        uint64_t v325 = *(void *)(*(void *)buf + 8);
        *(void *)(*(void *)buf + 8) = 0;
        *uint64_t v322 = v325;
        uint64_t v326 = (void *)v322[1];
        v322[1] = v324;

        uint64_t v327 = (void **)(v322 + 2);
        if (v327 != v321)
        {
          do
          {
            uint64_t v328 = *(v327 - 1);
            v329 = *v327;
            if (v327 - 1 == v323) {
              uint64_t v323 = v327;
            }
            *uint64_t v327 = 0;
            *(v327 - 1) = v329;
            v330 = *v327;
            *uint64_t v327 = v328;

            ++v327;
          }
          while (v327 != v321);
          uint64_t v331 = v327 - 1;
          if (v327 - 1 != v323)
          {
            uint64_t v332 = v323;
            while (1)
            {
              uint64_t v335 = *v331;
              *uint64_t v331 = 0;
              v336 = *v332;
              *uint64_t v332 = 0;
              v337 = *v331;
              *uint64_t v331 = v336;

              uint64_t v338 = *v332;
              *uint64_t v332 = v335;

              ++v331;
              ++v332;
              BOOL v339 = v331 == v323;
              if (v332 == v321)
              {
                if (v331 == v323) {
                  break;
                }
                uint64_t v332 = v323 + 1;
                while (1)
                {
                  uint64_t v340 = *v331;
                  *uint64_t v331 = 0;
                  v341 = *v323;
                  *uint64_t v323 = 0;
                  v342 = *v331;
                  *uint64_t v331 = v341;

                  uint64_t v343 = *v323;
                  *uint64_t v323 = v340;

                  BOOL v339 = ++v331 == v323;
                  if (v332 != v321) {
                    break;
                  }
                  if (v331 == v323) {
                    goto LABEL_95;
                  }
                }
              }
              if (v339) {
                uint64_t v323 = v332;
              }
            }
          }
        }
      }
    }
LABEL_95:
    (*(void (**)(uint64_t, uint8_t *, uint64_t, id))(*(void *)a3 + 48))(a3, buf, v188, v196);
    id v396 = (id)objc_claimAutoreleasedReturnValue();

    ++v398;
  }
  uint64_t v368 = CoreHandwriting::synthesis::createDrawingFromDeltaFeatures((CoreHandwriting::synthesis *)v396, v394, v392);
LABEL_107:

  uint64_t v369 = *(void *)buf;
  if (*(void *)buf)
  {
    uint64_t v370 = *(void *)&buf[8];
    uint64_t v371 = *(void **)buf;
    if (*(void *)&buf[8] != *(void *)buf)
    {
      do
      {
        uint64_t v372 = *(void **)(v370 - 8);
        v370 -= 8;
      }
      while (v370 != v369);
      uint64_t v371 = *(void **)buf;
    }
    *(void *)&buf[8] = v369;
    operator delete(v371);
  }

  return v368;
}

void sub_1C4BDEE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  sub_1C4A16BB8(&__p);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::FeatureArray::totalDataSize(int32x4_t **this)
{
  float v2 = *this;
  v1 = this[1];
  if (*this == v1) {
    return 1;
  }
  unint64_t v3 = (char *)v1 - (char *)v2 - 8;
  if (v3 >= 0x38)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    id v5 = (int32x4_t *)((char *)v2 + 8 * (v7 & 0x3FFFFFFFFFFFFFF8));
    uint64_t v8 = v2 + 2;
    v9.i64[0] = 0x100000001;
    v9.i64[1] = 0x100000001;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFF8;
    v11.i64[0] = 0x100000001;
    v11.i64[1] = 0x100000001;
    do
    {
      int32x4_t v13 = v8[-2];
      int32x4_t v12 = v8[-1];
      int32x4_t v15 = *v8;
      int32x4_t v14 = v8[1];
      v8 += 4;
      int32x4_t v9 = vmulq_s32(v9, vuzp1q_s32(v13, v12));
      int32x4_t v11 = vmulq_s32(v11, vuzp1q_s32(v15, v14));
      v10 -= 8;
    }
    while (v10);
    int8x16_t v16 = (int8x16_t)vmulq_s32(v11, v9);
    *(int32x2_t *)v16.i8 = vmul_s32(*(int32x2_t *)v16.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
    int v4 = v16.i32[0] * v16.i32[1];
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFF8)) {
      return v4;
    }
  }
  else
  {
    int v4 = 1;
    id v5 = *this;
  }
  do
  {
    int v17 = v5->i32[0];
    id v5 = (int32x4_t *)((char *)v5 + 8);
    v4 *= v17;
  }
  while (v5 != v1);
  return v4;
}

void CoreHandwriting::FeatureArray::concat(char **this, char **a2)
{
  int v4 = *this;
  id v5 = this[1];
  if (v4 == v5 || !*(void *)v4)
  {
    if (this != a2)
    {
      sub_1C494ACB0(this, *a2, a2[1], (a2[1] - *a2) >> 3);
      sub_1C494ACB0(this + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 3);
      int v33 = a2[6];
      unint64_t v34 = a2[7];
      sub_1C499DEE4(this + 6, v33, v34, (v34 - v33) >> 2);
    }
  }
  else
  {
    id v6 = v5 - 8;
    if (!memcmp(v4, *a2, v5 - 8 - v4))
    {
      *(void *)v6 += *((void *)a2[1] - 1);
      sub_1C4BDF4EC(this, this);
      uint64_t v7 = a2[6];
      uint64_t v8 = a2[7];
      if (v7 != v8)
      {
        int32x4_t v9 = (void **)(this + 6);
        uint64_t v10 = this[7];
        while (1)
        {
          int v12 = *(_DWORD *)v7;
          unint64_t v13 = (unint64_t)this[8];
          if ((unint64_t)v10 >= v13) {
            break;
          }
          *(_DWORD *)uint64_t v10 = v12;
          uint64_t v11 = (uint64_t)(v10 + 4);
LABEL_7:
          this[7] = (char *)v11;
          v7 += 4;
          uint64_t v10 = (char *)v11;
          if (v7 == v8) {
            return;
          }
        }
        int32x4_t v14 = (char *)*v9;
        uint64_t v15 = v10 - (unsigned char *)*v9;
        uint64_t v16 = v15 >> 2;
        unint64_t v17 = (v15 >> 2) + 1;
        if (v17 >> 62) {
          sub_1C494A220();
        }
        uint64_t v18 = v13 - (void)v14;
        if (v18 >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          if (v19 >> 62) {
            sub_1C4949AA8();
          }
          uint64_t v20 = operator new(4 * v19);
          uint64_t v21 = &v20[4 * v16];
          *(_DWORD *)uint64_t v21 = v12;
          uint64_t v11 = (uint64_t)(v21 + 4);
          int64_t v22 = v10 - v14;
          if (v10 == v14) {
            goto LABEL_32;
          }
        }
        else
        {
          uint64_t v20 = 0;
          uint64_t v21 = (char *)(4 * v16);
          *(_DWORD *)(4 * v16) = v12;
          uint64_t v11 = 4 * v16 + 4;
          int64_t v22 = v10 - v14;
          if (v10 == v14) {
            goto LABEL_32;
          }
        }
        unint64_t v23 = v22 - 4;
        if (v23 >= 0xBC)
        {
          unint64_t v25 = (v10 - 4 - v14) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v20[v15 - 4 - v25] > &v20[v15 - 4])
          {
            uint64_t v24 = v10;
          }
          else if (&v10[-v25 - 4] > v10 - 4)
          {
            uint64_t v24 = v10;
          }
          else if ((unint64_t)(v10 - v20 - v15) >= 0x20)
          {
            uint64_t v26 = (v23 >> 2) + 1;
            uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v24 = &v10[-v27];
            v21 -= v27;
            uint64_t v28 = &v20[4 * v16 - 16];
            uint64_t v29 = v10 - 16;
            uint64_t v30 = v26 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v31 = *(_OWORD *)v29;
              *(v28 - 1) = *((_OWORD *)v29 - 1);
              _OWORD *v28 = v31;
              v28 -= 2;
              v29 -= 32;
              v30 -= 8;
            }
            while (v30);
            if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t v24 = v10;
          }
        }
        else
        {
          uint64_t v24 = v10;
        }
        do
        {
          int v32 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v21 - 1) = v32;
          v21 -= 4;
        }
        while (v24 != v14);
LABEL_32:
        this[6] = v21;
        this[7] = (char *)v11;
        this[8] = &v20[4 * v19];
        if (v14) {
          operator delete(v14);
        }
        goto LABEL_7;
      }
    }
  }
}

void sub_1C4BDF4EC(char **a1, char **a2)
{
  if (a1 != a2) {
    sub_1C494ACB0(a1, *a2, a2[1], (a2[1] - *a2) >> 3);
  }
  int v4 = a1[3];
  id v5 = a1[5];
  if (v5 == v4)
  {
    if (v5)
    {
      a1[4] = v5;
      operator delete(v5);
      a1[3] = 0;
      a1[4] = 0;
      a1[5] = 0;
    }
    int v4 = (char *)operator new(8uLL);
    a1[3] = v4;
    a1[5] = v4 + 8;
  }
  *(void *)int v4 = 1;
  id v6 = v4 + 8;
  a1[4] = v4 + 8;
  int64_t v7 = a2[1] - *a2;
  uint64_t v8 = v7 >> 3;
  int32x4_t v9 = a1[3];
  if (v7 >> 3 > (unint64_t)((a1[5] - v9) >> 3))
  {
    if (v7 < 0) {
      sub_1C494A220();
    }
    uint64_t v10 = operator new(v7);
    uint64_t v11 = v6 - v9;
    int v12 = &v10[(v6 - v9) & 0xFFFFFFFFFFFFFFF8];
    unint64_t v13 = v12;
    if (v6 == v9) {
      goto LABEL_17;
    }
    if ((unint64_t)(v4 - v9) >= 0x48)
    {
      unint64_t v13 = &v10[(v6 - v9) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v4 - &v10[v11 & 0xFFFFFFFFFFFFFFF8] + 8) >= 0x20)
      {
        uint64_t v14 = v11 >> 3;
        uint64_t v15 = ((unint64_t)(v4 - v9) >> 3) + 1;
        uint64_t v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
        v6 -= v16;
        unint64_t v13 = &v12[-v16];
        unint64_t v17 = &v10[8 * v14 - 16];
        uint64_t v18 = v4 - 8;
        uint64_t v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v20 = *(_OWORD *)v18;
          *(v17 - 1) = *((_OWORD *)v18 - 1);
          *unint64_t v17 = v20;
          v17 -= 2;
          v18 -= 32;
          v19 -= 4;
        }
        while (v19);
        if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          a1[3] = v13;
          a1[4] = v12;
          a1[5] = &v10[8 * v8];
          if (v9) {
            operator delete(v9);
          }
          goto LABEL_19;
        }
      }
    }
    else
    {
      unint64_t v13 = &v10[(v6 - v9) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v21 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v13 - 1) = v21;
      v13 -= 8;
    }
    while (v6 != v9);
    goto LABEL_17;
  }
LABEL_19:
  unint64_t v23 = (int32x4_t *)*a1;
  int64_t v22 = a1[1];
  uint64_t v24 = v22 - 8;
  uint64_t v61 = a1 + 3;
  if (v23 != (int32x4_t *)(v22 - 8))
  {
    uint64_t v26 = v23->i64[0];
    unint64_t v25 = &v23->i64[1];
    uint64_t v60 = v26;
    sub_1C499954C((uint64_t *)&v61, &v60);
    while (v25 != (uint64_t *)v24)
    {
      uint64_t v27 = *v25++;
      v60 *= v27;
      sub_1C499954C((uint64_t *)&v61, &v60);
    }
    unint64_t v23 = (int32x4_t *)*a1;
    int64_t v22 = a1[1];
  }
  if (v23 == (int32x4_t *)v22)
  {
    long long v31 = a1[8];
    int v32 = a1[6];
    if (v31 != v32) {
      return;
    }
    uint64_t v44 = 1;
    goto LABEL_36;
  }
  unint64_t v28 = v22 - (char *)v23 - 8;
  if (v28 >= 0x38)
  {
    uint64_t v33 = (v28 >> 3) + 1;
    uint64_t v30 = &v23->i8[8 * (v33 & 0x3FFFFFFFFFFFFFF8)];
    unint64_t v34 = v23 + 2;
    v35.i64[0] = 0x100000001;
    v35.i64[1] = 0x100000001;
    uint64_t v36 = v33 & 0x3FFFFFFFFFFFFFF8;
    v37.i64[0] = 0x100000001;
    v37.i64[1] = 0x100000001;
    do
    {
      int32x4_t v39 = v34[-2];
      int32x4_t v38 = v34[-1];
      int32x4_t v41 = *v34;
      int32x4_t v40 = v34[1];
      v34 += 4;
      int32x4_t v35 = vmulq_s32(v35, vuzp1q_s32(v39, v38));
      int32x4_t v37 = vmulq_s32(v37, vuzp1q_s32(v41, v40));
      v36 -= 8;
    }
    while (v36);
    int8x16_t v42 = (int8x16_t)vmulq_s32(v37, v35);
    *(int32x2_t *)v42.i8 = vmul_s32(*(int32x2_t *)v42.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
    int v29 = v42.i32[0] * v42.i32[1];
    if (v33 == (v33 & 0x3FFFFFFFFFFFFFF8)) {
      goto LABEL_32;
    }
  }
  else
  {
    int v29 = 1;
    uint64_t v30 = (char *)v23;
  }
  do
  {
    int v43 = *(_DWORD *)v30;
    v30 += 8;
    v29 *= v43;
  }
  while (v30 != v22);
LABEL_32:
  uint64_t v44 = v29;
  long long v31 = a1[6];
  if (v29 <= (unint64_t)((a1[8] - v31) >> 2)) {
    return;
  }
  int v32 = a1[6];
  if (v29 < 0) {
    sub_1C494A220();
  }
LABEL_36:
  uint64_t v45 = a1[7];
  uint64_t v46 = v45 - v32;
  uint64_t v47 = 4 * v44;
  uint64_t v48 = (char *)operator new(4 * v44);
  float v49 = &v48[v46 & 0xFFFFFFFFFFFFFFFCLL];
  uint64_t v50 = v49;
  if (v45 != v31)
  {
    unint64_t v51 = v45 - v31 - 4;
    if (v51 >= 0x2C)
    {
      uint64_t v50 = &v48[v46 & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v45[-(v46 & 0xFFFFFFFFFFFFFFFCLL)] - v48) >= 0x20)
      {
        uint64_t v52 = (v51 >> 2) + 1;
        uint64_t v53 = 4 * (v52 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v54 = &v45[-v53];
        uint64_t v50 = &v49[-v53];
        uint64_t v55 = &v48[4 * (v46 >> 2) - 16];
        unint64_t v56 = v45 - 16;
        uint64_t v57 = v52 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v58 = *(_OWORD *)v56;
          *((_OWORD *)v55 - 1) = *((_OWORD *)v56 - 1);
          *(_OWORD *)uint64_t v55 = v58;
          v55 -= 32;
          v56 -= 32;
          v57 -= 8;
        }
        while (v57);
        uint64_t v45 = v54;
        if (v52 == (v52 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_44;
        }
      }
    }
    else
    {
      uint64_t v50 = &v48[v46 & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      int v59 = *((_DWORD *)v45 - 1);
      v45 -= 4;
      *((_DWORD *)v50 - 1) = v59;
      v50 -= 4;
    }
    while (v45 != v31);
  }
LABEL_44:
  a1[6] = v50;
  a1[7] = v49;
  a1[8] = &v48[v47];
  if (v31) {
    operator delete(v31);
  }
}

uint64_t CoreHandwriting::FeatureArray::getData(CoreHandwriting::FeatureArray *this)
{
  return (uint64_t)this + 48;
}

{
  return (uint64_t)this + 48;
}

void CoreHandwriting::DistanceFeatureExtractionStep::process(const CoreHandwriting::Ink *a1@<X1>, uint64_t a2@<X8>)
{
  __p = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  int v4 = *(char **)a1;
  id v5 = (char *)*((void *)a1 + 1);
  if (*(char **)a1 == v5) {
    goto LABEL_81;
  }
  unint64_t v7 = v5 - v4 - 24;
  if (v7 >= 0x60)
  {
    unint64_t v10 = v7 / 0x18 + 1;
    uint64_t v11 = v10 & 3;
    if ((v10 & 3) == 0) {
      uint64_t v11 = 4;
    }
    unint64_t v12 = v10 - v11;
    int32x4_t v9 = &v4[24 * v12];
    int64x2_t v13 = 0uLL;
    uint64_t v14 = *(const double **)a1;
    int64x2_t v15 = 0uLL;
    do
    {
      uint64_t v16 = v14 + 12;
      float64x2x3_t v71 = vld3q_f64(v14);
      unint64_t v17 = v14 + 6;
      int64x2_t v13 = vsraq_n_s64(v13, vsubq_s64((int64x2_t)v71.val[1], (int64x2_t)v71.val[0]), 5uLL);
      float64x2x3_t v72 = vld3q_f64(v17);
      int64x2_t v15 = vsraq_n_s64(v15, vsubq_s64((int64x2_t)v72.val[1], (int64x2_t)v72.val[0]), 5uLL);
      uint64_t v14 = v16;
      v12 -= 4;
    }
    while (v12);
    unint64_t v8 = vaddvq_s64(vaddq_s64(v15, v13));
  }
  else
  {
    unint64_t v8 = 0;
    int32x4_t v9 = *(char **)a1;
  }
  do
  {
    uint64_t v18 = *(void *)v9;
    uint64_t v19 = *((void *)v9 + 1);
    v9 += 24;
    v8 += (v19 - v18) >> 5;
  }
  while (v9 != v5);
  if (!v8)
  {
    long long v20 = 0;
    if (v4 == v5) {
      goto LABEL_81;
    }
    goto LABEL_15;
  }
  if (v8 >> 62) {
    sub_1C494A220();
  }
  long long v20 = operator new(4 * v8);
  unint64_t v8 = (unint64_t)v20 + 4 * v8;
  __p = v20;
  uint64_t v68 = v20;
  unint64_t v69 = v8;
  if (v4 != v5)
  {
LABEL_15:
    uint64_t v64 = a2;
    uint64_t v65 = v5;
    double v22 = *((double *)a1 + 6);
    double v21 = *((double *)a1 + 7);
    unint64_t v23 = (float *)v20;
    uint64_t v24 = (float *)v20;
    while (1)
    {
      uint64_t v25 = *(void *)v4;
      uint64_t v26 = *((void *)v4 + 1);
      unint64_t v66 = v4;
      while (v25 != v26)
      {
        if (!*(unsigned char *)(v25 + 24))
        {
          double v33 = sqrt((v21 - *(double *)(v25 + 8)) * (v21 - *(double *)(v25 + 8))+ (v22 - *(double *)v25) * (v22 - *(double *)v25));
          if ((unint64_t)v23 < v8)
          {
            float v34 = v33;
            *unint64_t v23 = v34;
            long long v20 = v23 + 1;
LABEL_63:
            double v22 = *(double *)v25;
            double v21 = *(double *)(v25 + 8);
            goto LABEL_19;
          }
          uint64_t v35 = v23 - v24;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
          {
            uint64_t v68 = v20;
            unint64_t v69 = v8;
            __p = v24;
            sub_1C494A220();
          }
          if ((uint64_t)(v8 - (void)v24) >> 1 > v36) {
            unint64_t v36 = (uint64_t)(v8 - (void)v24) >> 1;
          }
          if (v8 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v36;
          }
          if (v37)
          {
            if (v37 >> 62)
            {
              uint64_t v68 = v20;
              unint64_t v69 = v8;
              __p = v24;
              sub_1C4949AA8();
            }
            int32x4_t v38 = operator new(4 * v37);
            int32x4_t v39 = (float *)&v38[4 * v35];
            float v40 = v33;
            float *v39 = v40;
            long long v20 = v39 + 1;
            int64_t v41 = (char *)v23 - (char *)v24;
            if (v23 == v24) {
              goto LABEL_60;
            }
LABEL_57:
            unint64_t v47 = v41 - 4;
            if (v47 < 0xBC)
            {
              uint64_t v48 = v23;
              goto LABEL_59;
            }
            unint64_t v50 = ((char *)(v23 - 1) - (char *)v24) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v38[(char *)v23 - (char *)v24 - 4 - v50] > &v38[(char *)v23 - (char *)v24 - 4])
            {
              uint64_t v48 = v23;
              goto LABEL_59;
            }
            if ((float *)((char *)v23 - v50 - 4) > v23 - 1)
            {
              uint64_t v48 = v23;
              goto LABEL_59;
            }
            if ((unint64_t)((char *)v24 - v38) < 0x20)
            {
              uint64_t v48 = v23;
              goto LABEL_59;
            }
            uint64_t v57 = (v47 >> 2) + 1;
            uint64_t v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v48 = &v23[v58 / 0xFFFFFFFFFFFFFFFCLL];
            int32x4_t v39 = (float *)((char *)v39 - v58);
            int v59 = &v38[4 * v35 - 16];
            uint64_t v60 = v23 - 4;
            uint64_t v61 = v57 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v62 = *(_OWORD *)v60;
              *(v59 - 1) = *((_OWORD *)v60 - 1);
              *int v59 = v62;
              v59 -= 2;
              v60 -= 8;
              v61 -= 8;
            }
            while (v61);
            if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_59:
                int v49 = *((_DWORD *)v48-- - 1);
                *((_DWORD *)v39-- - 1) = v49;
              }
              while (v48 != v24);
            }
          }
          else
          {
            int32x4_t v38 = 0;
            int32x4_t v39 = (float *)(4 * v35);
            float v46 = v33;
            *(float *)(4 * v35) = v46;
            long long v20 = (void *)(4 * v35 + 4);
            int64_t v41 = (char *)v23 - (char *)v24;
            if (v23 != v24) {
              goto LABEL_57;
            }
          }
LABEL_60:
          unint64_t v8 = (unint64_t)&v38[4 * v37];
          if (v24) {
            operator delete(v24);
          }
          uint64_t v24 = v39;
          goto LABEL_63;
        }
        if ((unint64_t)v23 < v8)
        {
          *unint64_t v23 = 0.0;
          long long v20 = v23 + 1;
          goto LABEL_19;
        }
        uint64_t v27 = v23 - v24;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62)
        {
          uint64_t v68 = v20;
          unint64_t v69 = v8;
          __p = v24;
          sub_1C494A220();
        }
        if ((uint64_t)(v8 - (void)v24) >> 1 > v28) {
          unint64_t v28 = (uint64_t)(v8 - (void)v24) >> 1;
        }
        if (v8 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29)
        {
          if (v29 >> 62)
          {
            uint64_t v68 = v20;
            unint64_t v69 = v8;
            __p = v24;
            sub_1C4949AA8();
          }
          uint64_t v30 = operator new(4 * v29);
          long long v31 = (float *)&v30[4 * v27];
          *long long v31 = 0.0;
          long long v20 = v31 + 1;
          int64_t v32 = (char *)v23 - (char *)v24;
          if (v23 == v24) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v30 = 0;
          long long v31 = (float *)(4 * v27);
          *(_DWORD *)(4 * v27) = 0;
          long long v20 = (void *)(4 * v27 + 4);
          int64_t v32 = (char *)v23 - (char *)v24;
          if (v23 == v24) {
            goto LABEL_49;
          }
        }
        unint64_t v42 = v32 - 4;
        if (v42 >= 0xBC)
        {
          unint64_t v45 = ((char *)(v23 - 1) - (char *)v24) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v30[(char *)v23 - (char *)v24 - 4 - v45] > &v30[(char *)v23 - (char *)v24 - 4])
          {
            int v43 = v23;
          }
          else if ((float *)((char *)v23 - v45 - 4) > v23 - 1)
          {
            int v43 = v23;
          }
          else if ((unint64_t)((char *)v24 - v30) >= 0x20)
          {
            uint64_t v51 = (v42 >> 2) + 1;
            uint64_t v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
            int v43 = &v23[v52 / 0xFFFFFFFFFFFFFFFCLL];
            long long v31 = (float *)((char *)v31 - v52);
            uint64_t v53 = &v30[4 * v27 - 16];
            uint64_t v54 = v23 - 4;
            uint64_t v55 = v51 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              *uint64_t v53 = v56;
              v53 -= 2;
              v54 -= 8;
              v55 -= 8;
            }
            while (v55);
            if (v51 == (v51 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_49;
            }
          }
          else
          {
            int v43 = v23;
          }
        }
        else
        {
          int v43 = v23;
        }
        do
        {
          int v44 = *((_DWORD *)v43-- - 1);
          *((_DWORD *)v31-- - 1) = v44;
        }
        while (v43 != v24);
LABEL_49:
        unint64_t v8 = (unint64_t)&v30[4 * v29];
        if (v24) {
          operator delete(v24);
        }
        uint64_t v24 = v31;
LABEL_19:
        v25 += 32;
        unint64_t v23 = (float *)v20;
      }
      unint64_t v69 = v8;
      __p = v24;
      v4 += 24;
      if (v66 + 24 == v65)
      {
        uint64_t v68 = v20;
        a2 = v64;
        break;
      }
    }
  }
LABEL_81:
  sub_1C4BE3034(a2, (uint64_t)&__p);
  uint64_t v63 = __p;
  if (__p)
  {
    operator delete(v63);
  }
}

void sub_1C4BDFDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::TrigonometricFeatureExtractor::process(CoreHandwriting::TrigonometricFeatureExtractor *this@<X0>, const CoreHandwriting::Ink *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 == v5)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = v5 - v6 - 24;
    if (v7 >= 0x60)
    {
      unint64_t v9 = v7 / 0x18 + 1;
      uint64_t v10 = v9 & 3;
      if ((v9 & 3) == 0) {
        uint64_t v10 = 4;
      }
      unint64_t v11 = v9 - v10;
      uint64_t v12 = v6 + 24 * v11;
      int64x2_t v13 = 0uLL;
      int64x2_t v14 = 0uLL;
      do
      {
        uint64_t v15 = v6 + 96;
        float64x2x3_t v180 = vld3q_f64((const double *)v6);
        uint64_t v16 = (const double *)(v6 + 48);
        int64x2_t v13 = vsraq_n_s64(v13, vsubq_s64((int64x2_t)v180.val[1], (int64x2_t)v180.val[0]), 5uLL);
        float64x2x3_t v181 = vld3q_f64(v16);
        int64x2_t v14 = vsraq_n_s64(v14, vsubq_s64((int64x2_t)v181.val[1], (int64x2_t)v181.val[0]), 5uLL);
        uint64_t v6 = v15;
        v11 -= 4;
      }
      while (v11);
      uint64_t v8 = vaddvq_s64(vaddq_s64(v14, v13));
      uint64_t v6 = v12;
    }
    else
    {
      uint64_t v8 = 0;
    }
    do
    {
      double v17 = *(double *)v6;
      uint64_t v18 = *(void *)(v6 + 8);
      v6 += 24;
      v8 += (v18 - *(void *)&v17) >> 5;
    }
    while (v6 != v5);
  }
  uint64_t v19 = (*(uint64_t (**)(CoreHandwriting::TrigonometricFeatureExtractor *))(*(void *)this + 24))(this);
  long long v20 = operator new(0x10uLL);
  uint64_t v178 = v20 + 2;
  int v179 = v20 + 2;
  void *v20 = v8;
  v20[1] = v19;
  __p = v20;
  sub_1C4BE31A8((uint64_t)a3, (char **)&__p);
  if (__p)
  {
    uint64_t v178 = __p;
    operator delete(__p);
  }
  double v21 = *(uint64_t **)a2;
  double v22 = (uint64_t *)*((void *)a2 + 1);
  if (*(uint64_t **)a2 != v22)
  {
    uint64_t v23 = 0;
    double v24 = *((double *)a2 + 6);
    double v25 = *((double *)a2 + 7);
    do
    {
      uint64_t v26 = *v21;
      uint64_t v27 = v21[1];
      while (v26 != v27)
      {
        if (*(unsigned char *)(v26 + 24))
        {
          uint64_t v30 = (int *)operator new(0x10uLL);
          *(void *)uint64_t v30 = v23;
          *((void *)v30 + 1) = 0;
          int64_t v32 = (char *)a3[3];
          long long v31 = (char *)a3[4];
          if ((unint64_t)(v31 - v32) > 0x10) {
            long long v31 = v32 + 16;
          }
          if (v32 == v31)
          {
            uint64_t v46 = 0;
          }
          else
          {
            unint64_t v33 = v31 - v32 - 8;
            if (v33 < 8)
            {
              int v34 = 0;
              uint64_t v35 = v30;
              unint64_t v36 = (char *)a3[3];
              goto LABEL_37;
            }
            int v47 = 0;
            int v48 = 0;
            uint64_t v49 = (v33 >> 3) + 1;
            uint64_t v50 = 2 * (v49 & 0x3FFFFFFFFFFFFFFELL);
            uint64_t v35 = &v30[v50];
            unint64_t v36 = &v32[v50 * 4];
            uint64_t v51 = (int *)(v32 + 8);
            uint64_t v52 = v30 + 2;
            uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              int v54 = *(v51 - 2);
              int v56 = *v51;
              v51 += 4;
              int v55 = v56;
              int v57 = *(v52 - 2);
              int v58 = *v52;
              v52 += 4;
              v47 += v57 * v54;
              v48 += v58 * v55;
              v53 -= 2;
            }
            while (v53);
            int v34 = v48 + v47;
            if (v49 != (v49 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_37:
                int v60 = *(_DWORD *)v36;
                v36 += 8;
                int v59 = v60;
                int v61 = *v35;
                v35 += 2;
                v34 += v61 * v59;
              }
              while (v36 != v31);
            }
            uint64_t v46 = v34;
          }
          uint64_t v62 = a3[6];
          operator delete(v30);
          *(_DWORD *)(v62 + 4 * v46) = 0;
          uint64_t v63 = (int *)operator new(0x10uLL);
          *(void *)uint64_t v63 = v23;
          *((void *)v63 + 1) = 1;
          uint64_t v65 = (char *)a3[3];
          uint64_t v64 = (char *)a3[4];
          if ((unint64_t)(v64 - v65) > 0x10) {
            uint64_t v64 = v65 + 16;
          }
          if (v65 == v64)
          {
            uint64_t v28 = 0;
          }
          else
          {
            unint64_t v66 = v64 - v65 - 8;
            if (v66 < 8)
            {
              int v67 = 0;
              uint64_t v68 = v63;
              unint64_t v69 = (char *)a3[3];
              goto LABEL_47;
            }
            int v70 = 0;
            int v71 = 0;
            uint64_t v72 = (v66 >> 3) + 1;
            uint64_t v73 = 2 * (v72 & 0x3FFFFFFFFFFFFFFELL);
            uint64_t v68 = &v63[v73];
            unint64_t v69 = &v65[v73 * 4];
            uint64_t v74 = (int *)(v65 + 8);
            uint64_t v75 = v63 + 2;
            uint64_t v76 = v72 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              int v77 = *(v74 - 2);
              int v79 = *v74;
              v74 += 4;
              int v78 = v79;
              int v80 = *(v75 - 2);
              int v81 = *v75;
              v75 += 4;
              v70 += v80 * v77;
              v71 += v81 * v78;
              v76 -= 2;
            }
            while (v76);
            int v67 = v71 + v70;
            if (v72 != (v72 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_47:
                int v83 = *(_DWORD *)v69;
                v69 += 8;
                int v82 = v83;
                int v84 = *v68;
                v68 += 2;
                v67 += v84 * v82;
              }
              while (v69 != v64);
            }
            uint64_t v28 = v67;
          }
          uint64_t v29 = a3[6];
          operator delete(v63);
          *(_DWORD *)(v29 + 4 * v28) = 0;
          goto LABEL_19;
        }
        double v37 = *(double *)(v26 + 8);
        double v38 = sqrt((v25 - v37) * (v25 - v37) + (v24 - *(double *)v26) * (v24 - *(double *)v26));
        if (v38 != 0.0)
        {
          uint64_t v85 = (int *)operator new(0x10uLL);
          *(void *)uint64_t v85 = v23;
          *((void *)v85 + 1) = 0;
          uint64_t v87 = (char *)a3[3];
          uint64_t v86 = (char *)a3[4];
          if ((unint64_t)(v86 - v87) > 0x10) {
            uint64_t v86 = v87 + 16;
          }
          if (v87 == v86)
          {
            uint64_t v133 = 0;
          }
          else
          {
            unint64_t v88 = v86 - v87 - 8;
            if (v88 < 8)
            {
              int v89 = 0;
              double v90 = v85;
              uint64_t v91 = (char *)a3[3];
              goto LABEL_76;
            }
            int v134 = 0;
            int v135 = 0;
            uint64_t v136 = (v88 >> 3) + 1;
            uint64_t v137 = 2 * (v136 & 0x3FFFFFFFFFFFFFFELL);
            double v90 = &v85[v137];
            uint64_t v91 = &v87[v137 * 4];
            uint64_t v138 = (int *)(v87 + 8);
            unint64_t v139 = v85 + 2;
            uint64_t v140 = v136 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              int v141 = *(v138 - 2);
              int v143 = *v138;
              v138 += 4;
              int v142 = v143;
              int v144 = *(v139 - 2);
              int v145 = *v139;
              v139 += 4;
              v134 += v144 * v141;
              v135 += v145 * v142;
              v140 -= 2;
            }
            while (v140);
            int v89 = v135 + v134;
            if (v136 != (v136 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_76:
                int v147 = *(_DWORD *)v91;
                v91 += 8;
                int v146 = v147;
                int v148 = *v90;
                v90 += 2;
                v89 += v148 * v146;
              }
              while (v91 != v86);
            }
            uint64_t v133 = v89;
          }
          uint64_t v149 = a3[6];
          operator delete(v85);
          float v150 = (v37 - v25) / v38;
          *(float *)(v149 + 4 * v133) = v150;
          double v151 = *(double *)v26;
          uint64_t v152 = (int *)operator new(0x10uLL);
          *(void *)uint64_t v152 = v23;
          *((void *)v152 + 1) = 1;
          uint64_t v154 = (char *)a3[3];
          uint64_t v153 = (char *)a3[4];
          if ((unint64_t)(v153 - v154) > 0x10) {
            uint64_t v153 = v154 + 16;
          }
          if (v154 == v153)
          {
            uint64_t v159 = 0;
          }
          else
          {
            unint64_t v155 = v153 - v154 - 8;
            if (v155 < 8)
            {
              int v156 = 0;
              uint64_t v157 = v152;
              uint64_t v158 = (char *)a3[3];
              goto LABEL_87;
            }
            int v160 = 0;
            int v161 = 0;
            uint64_t v162 = (v155 >> 3) + 1;
            uint64_t v163 = 2 * (v162 & 0x3FFFFFFFFFFFFFFELL);
            uint64_t v157 = &v152[v163];
            uint64_t v158 = &v154[v163 * 4];
            uint64_t v164 = (int *)(v154 + 8);
            uint64_t v165 = v152 + 2;
            uint64_t v166 = v162 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              int v167 = *(v164 - 2);
              int v169 = *v164;
              v164 += 4;
              int v168 = v169;
              int v170 = *(v165 - 2);
              int v171 = *v165;
              v165 += 4;
              v160 += v170 * v167;
              v161 += v171 * v168;
              v166 -= 2;
            }
            while (v166);
            int v156 = v161 + v160;
            if (v162 != (v162 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_87:
                int v173 = *(_DWORD *)v158;
                v158 += 8;
                int v172 = v173;
                int v174 = *v157;
                v157 += 2;
                v156 += v174 * v172;
              }
              while (v158 != v153);
            }
            uint64_t v159 = v156;
          }
          uint64_t v175 = a3[6];
          operator delete(v152);
          float v176 = (v151 - v24) / v38;
          *(float *)(v175 + 4 * v159) = v176;
          goto LABEL_90;
        }
        int32x4_t v39 = (int *)operator new(0x10uLL);
        *(void *)int32x4_t v39 = v23;
        *((void *)v39 + 1) = 0;
        int64_t v41 = (char *)a3[3];
        float v40 = (char *)a3[4];
        if ((unint64_t)(v40 - v41) > 0x10) {
          float v40 = v41 + 16;
        }
        if (v41 == v40)
        {
          uint64_t v92 = 0;
          goto LABEL_60;
        }
        unint64_t v42 = v40 - v41 - 8;
        if (v42 >= 8)
        {
          int v93 = 0;
          int v94 = 0;
          uint64_t v95 = (v42 >> 3) + 1;
          uint64_t v96 = 2 * (v95 & 0x3FFFFFFFFFFFFFFELL);
          int v44 = &v39[v96];
          unint64_t v45 = &v41[v96 * 4];
          uint64_t v97 = (int *)(v41 + 8);
          uint64_t v98 = v39 + 2;
          uint64_t v99 = v95 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            int v100 = *(v97 - 2);
            int v102 = *v97;
            v97 += 4;
            int v101 = v102;
            int v103 = *(v98 - 2);
            int v104 = *v98;
            v98 += 4;
            v93 += v103 * v100;
            v94 += v104 * v101;
            v99 -= 2;
          }
          while (v99);
          int v43 = v94 + v93;
          if (v95 == (v95 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_59;
          }
        }
        else
        {
          int v43 = 0;
          int v44 = v39;
          unint64_t v45 = (char *)a3[3];
        }
        do
        {
          int v106 = *(_DWORD *)v45;
          v45 += 8;
          int v105 = v106;
          int v107 = *v44;
          v44 += 2;
          v43 += v107 * v105;
        }
        while (v45 != v40);
LABEL_59:
        uint64_t v92 = v43;
LABEL_60:
        uint64_t v108 = a3[6];
        operator delete(v39);
        *(_DWORD *)(v108 + 4 * v92) = 0;
        uint64_t v109 = (int *)operator new(0x10uLL);
        *(void *)uint64_t v109 = v23;
        *((void *)v109 + 1) = 1;
        uint64_t v111 = (char *)a3[3];
        uint64_t v110 = (char *)a3[4];
        if ((unint64_t)(v110 - v111) > 0x10) {
          uint64_t v110 = v111 + 16;
        }
        if (v111 != v110)
        {
          unint64_t v112 = v110 - v111 - 8;
          if (v112 < 8)
          {
            int v113 = 0;
            uint64_t v114 = v109;
            id v115 = (char *)a3[3];
            goto LABEL_69;
          }
          int v117 = 0;
          int v118 = 0;
          uint64_t v119 = (v112 >> 3) + 1;
          uint64_t v120 = 2 * (v119 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v114 = &v109[v120];
          id v115 = &v111[v120 * 4];
          uint64_t v121 = (int *)(v111 + 8);
          uint64_t v122 = v109 + 2;
          uint64_t v123 = v119 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            int v124 = *(v121 - 2);
            int v126 = *v121;
            v121 += 4;
            int v125 = v126;
            int v127 = *(v122 - 2);
            int v128 = *v122;
            v122 += 4;
            v117 += v127 * v124;
            v118 += v128 * v125;
            v123 -= 2;
          }
          while (v123);
          int v113 = v118 + v117;
          if (v119 != (v119 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_69:
              int v130 = *(_DWORD *)v115;
              v115 += 8;
              int v129 = v130;
              int v131 = *v114;
              v114 += 2;
              v113 += v131 * v129;
            }
            while (v115 != v110);
          }
          uint64_t v116 = v113;
          goto LABEL_71;
        }
        uint64_t v116 = 0;
LABEL_71:
        uint64_t v132 = a3[6];
        operator delete(v109);
        *(_DWORD *)(v132 + 4 * v116) = 1065353216;
LABEL_90:
        double v24 = *(double *)v26;
        double v25 = *(double *)(v26 + 8);
LABEL_19:
        ++v23;
        v26 += 32;
      }
      v21 += 3;
    }
    while (v21 != v22);
  }
}

void sub_1C4BE04B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4BE04D4(_Unwind_Exception *a1)
{
  sub_1C4A6EE00(v1);
  _Unwind_Resume(a1);
}

void sub_1C4BE04E8(_Unwind_Exception *a1)
{
  sub_1C4A6EE00(v1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::PenUpFeatureExtractor::process(char **a1@<X1>, uint64_t a2@<X8>)
{
  __p = 0;
  unint64_t v45 = 0;
  unint64_t v46 = 0;
  uint64_t v5 = *a1;
  int v4 = a1[1];
  if (*a1 == v4) {
    goto LABEL_56;
  }
  unint64_t v6 = v4 - v5 - 24;
  if (v6 >= 0x60)
  {
    unint64_t v9 = v6 / 0x18 + 1;
    uint64_t v10 = v9 & 3;
    if ((v9 & 3) == 0) {
      uint64_t v10 = 4;
    }
    unint64_t v11 = v9 - v10;
    uint64_t v8 = &v5[24 * v11];
    int64x2_t v12 = 0uLL;
    int64x2_t v13 = (const double *)*a1;
    int64x2_t v14 = 0uLL;
    do
    {
      uint64_t v15 = v13 + 12;
      float64x2x3_t v48 = vld3q_f64(v13);
      uint64_t v16 = v13 + 6;
      int64x2_t v12 = vsraq_n_s64(v12, vsubq_s64((int64x2_t)v48.val[1], (int64x2_t)v48.val[0]), 5uLL);
      float64x2x3_t v49 = vld3q_f64(v16);
      int64x2_t v14 = vsraq_n_s64(v14, vsubq_s64((int64x2_t)v49.val[1], (int64x2_t)v49.val[0]), 5uLL);
      int64x2_t v13 = v15;
      v11 -= 4;
    }
    while (v11);
    unint64_t v7 = vaddvq_s64(vaddq_s64(v14, v12));
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = *a1;
  }
  do
  {
    uint64_t v17 = *(void *)v8;
    uint64_t v18 = *((void *)v8 + 1);
    v8 += 24;
    v7 += (v18 - v17) >> 5;
  }
  while (v8 != v4);
  if (!v7)
  {
    uint64_t v19 = 0;
    if (v5 == v4) {
      goto LABEL_56;
    }
LABEL_15:
    uint64_t v42 = a2;
    int v43 = v4;
    long long v20 = v19;
    double v21 = v19;
    while (1)
    {
      uint64_t v22 = *(void *)v5;
      if (*((void *)v5 + 1) != *(void *)v5) {
        break;
      }
LABEL_16:
      v5 += 24;
      if (v5 == v43)
      {
        unint64_t v45 = v19;
        a2 = v42;
        goto LABEL_56;
      }
    }
    unint64_t v23 = 0;
    while (1)
    {
      while ((unint64_t)v20 < v7)
      {
        if (v23) {
          float v24 = 0.0;
        }
        else {
          float v24 = 1.0;
        }
        *v20++ = v24;
        uint64_t v19 = v20;
        if (++v23 >= (*((void *)v5 + 1) - v22) >> 5) {
          goto LABEL_16;
        }
      }
      uint64_t v25 = v20 - v21;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62)
      {
        unint64_t v45 = v19;
        sub_1C494A220();
      }
      if ((uint64_t)(v7 - (void)v21) >> 1 > v26) {
        unint64_t v26 = (uint64_t)(v7 - (void)v21) >> 1;
      }
      if (v7 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27)
      {
        if (v27 >> 62)
        {
          unint64_t v45 = v19;
          sub_1C4949AA8();
        }
        uint64_t v28 = operator new(4 * v27);
      }
      else
      {
        uint64_t v28 = 0;
      }
      uint64_t v29 = (float *)&v28[4 * v25];
      if (v23) {
        float v30 = 0.0;
      }
      else {
        float v30 = 1.0;
      }
      float *v29 = v30;
      uint64_t v19 = v29 + 1;
      if (v20 == v21) {
        goto LABEL_41;
      }
      unint64_t v31 = (char *)v20 - (char *)v21 - 4;
      if (v31 >= 0xBC)
      {
        unint64_t v34 = ((char *)(v20 - 1) - (char *)v21) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v28[(char *)v20 - (char *)v21 - 4 - v34] > &v28[(char *)v20 - (char *)v21 - 4])
        {
          int64_t v32 = v20;
        }
        else if ((float *)((char *)v20 - v34 - 4) > v20 - 1)
        {
          int64_t v32 = v20;
        }
        else if ((unint64_t)((char *)v21 - v28) >= 0x20)
        {
          uint64_t v35 = (v31 >> 2) + 1;
          uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
          int64_t v32 = &v20[v36 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v29 = (float *)((char *)v29 - v36);
          double v37 = &v28[4 * v25 - 16];
          double v38 = v20 - 4;
          uint64_t v39 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            *double v37 = v40;
            v37 -= 2;
            v38 -= 8;
            v39 -= 8;
          }
          while (v39);
          if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_41;
          }
        }
        else
        {
          int64_t v32 = v20;
        }
      }
      else
      {
        int64_t v32 = v20;
      }
      do
      {
        int v33 = *((_DWORD *)v32-- - 1);
        *((_DWORD *)v29-- - 1) = v33;
      }
      while (v32 != v21);
LABEL_41:
      unint64_t v7 = (unint64_t)&v28[4 * v27];
      __p = v29;
      unint64_t v46 = v7;
      if (v21)
      {
        operator delete(v21);
        uint64_t v22 = *(void *)v5;
      }
      double v21 = v29;
      ++v23;
      long long v20 = v19;
      if (v23 >= (*((void *)v5 + 1) - v22) >> 5) {
        goto LABEL_16;
      }
    }
  }
  if (v7 >> 62) {
    sub_1C494A220();
  }
  uint64_t v19 = (float *)operator new(4 * v7);
  unint64_t v7 = (unint64_t)&v19[v7];
  __p = v19;
  unint64_t v45 = v19;
  unint64_t v46 = v7;
  if (v5 != v4) {
    goto LABEL_15;
  }
LABEL_56:
  sub_1C4BE3034(a2, (uint64_t)&__p);
  int64_t v41 = __p;
  if (__p)
  {
    operator delete(v41);
  }
}

void sub_1C4BE0880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::EndOfStrokeFeatureExtractor::process(char **a1@<X1>, uint64_t a2@<X8>)
{
  __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  int v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5) {
    goto LABEL_60;
  }
  unint64_t v6 = v5 - v4 - 24;
  if (v6 >= 0x60)
  {
    unint64_t v9 = v6 / 0x18 + 1;
    uint64_t v10 = v9 & 3;
    if ((v9 & 3) == 0) {
      uint64_t v10 = 4;
    }
    unint64_t v11 = v9 - v10;
    uint64_t v8 = &v4[24 * v11];
    int64x2_t v12 = 0uLL;
    int64x2_t v13 = (const double *)*a1;
    int64x2_t v14 = 0uLL;
    do
    {
      uint64_t v15 = v13 + 12;
      float64x2x3_t v53 = vld3q_f64(v13);
      uint64_t v16 = v13 + 6;
      int64x2_t v12 = vsraq_n_s64(v12, vsubq_s64((int64x2_t)v53.val[1], (int64x2_t)v53.val[0]), 5uLL);
      float64x2x3_t v54 = vld3q_f64(v16);
      int64x2_t v14 = vsraq_n_s64(v14, vsubq_s64((int64x2_t)v54.val[1], (int64x2_t)v54.val[0]), 5uLL);
      int64x2_t v13 = v15;
      v11 -= 4;
    }
    while (v11);
    unint64_t v7 = vaddvq_s64(vaddq_s64(v14, v12));
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = *a1;
  }
  do
  {
    uint64_t v17 = *(void *)v8;
    uint64_t v18 = *((void *)v8 + 1);
    v8 += 24;
    v7 += (v18 - v17) >> 5;
  }
  while (v8 != v5);
  if (!v7)
  {
    uint64_t v19 = 0;
    long long v20 = 0;
    if (v4 == v5) {
      goto LABEL_60;
    }
    goto LABEL_15;
  }
  if (v7 >> 62) {
    sub_1C494A220();
  }
  uint64_t v19 = (char *)operator new(4 * v7);
  long long v20 = &v19[4 * v7];
  __p = v19;
  uint64_t v50 = v19;
  uint64_t v51 = v20;
  if (v4 != v5)
  {
LABEL_15:
    uint64_t v47 = a2;
    float64x2x3_t v48 = v5;
    double v21 = v19;
    uint64_t v22 = v19;
    unint64_t v23 = v19;
    while (1)
    {
      while (1)
      {
        uint64_t v24 = *(void *)v4;
        if (*((void *)v4 + 1) != *(void *)v4) {
          break;
        }
LABEL_17:
        v4 += 24;
        if (v4 == v48) {
          goto LABEL_59;
        }
      }
      unint64_t v25 = 0;
      do
      {
        if (v23 < v20)
        {
          *(_DWORD *)unint64_t v23 = 0;
          uint64_t v19 = v23 + 4;
          goto LABEL_21;
        }
        uint64_t v28 = (v23 - v22) >> 2;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
        {
          uint64_t v50 = v19;
          sub_1C494A220();
        }
        if ((v20 - v22) >> 1 > v29) {
          unint64_t v29 = (v20 - v22) >> 1;
        }
        if ((unint64_t)(v20 - v22) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          if (v30 >> 62)
          {
            uint64_t v50 = v19;
            sub_1C4949AA8();
          }
          unint64_t v31 = operator new(4 * v30);
          double v21 = &v31[4 * v28];
          *(_DWORD *)double v21 = 0;
          uint64_t v19 = v21 + 4;
          int64_t v32 = v23 - v22;
          if (v23 == v22) {
            goto LABEL_37;
          }
        }
        else
        {
          unint64_t v31 = 0;
          double v21 = (char *)(4 * v28);
          *(_DWORD *)(4 * v28) = 0;
          uint64_t v19 = (char *)(4 * v28 + 4);
          int64_t v32 = v23 - v22;
          if (v23 == v22) {
            goto LABEL_37;
          }
        }
        unint64_t v33 = v32 - 4;
        if (v33 >= 0xBC)
        {
          unint64_t v36 = (v23 - 4 - v22) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v31[v23 - v22 - 4 - v36] > &v31[v23 - v22 - 4])
          {
            unint64_t v34 = v23;
          }
          else if (&v23[-v36 - 4] > v23 - 4)
          {
            unint64_t v34 = v23;
          }
          else if ((unint64_t)(v22 - v31) >= 0x20)
          {
            uint64_t v37 = (v33 >> 2) + 1;
            uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v34 = &v23[-v38];
            v21 -= v38;
            uint64_t v39 = &v31[4 * v28 - 16];
            long long v40 = v23 - 16;
            uint64_t v41 = v37 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v42 = *(_OWORD *)v40;
              *(v39 - 1) = *((_OWORD *)v40 - 1);
              _OWORD *v39 = v42;
              v39 -= 2;
              v40 -= 32;
              v41 -= 8;
            }
            while (v41);
            if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_37;
            }
          }
          else
          {
            unint64_t v34 = v23;
          }
        }
        else
        {
          unint64_t v34 = v23;
        }
        do
        {
          int v35 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *((_DWORD *)v21 - 1) = v35;
          v21 -= 4;
        }
        while (v34 != v22);
LABEL_37:
        long long v20 = &v31[4 * v30];
        __p = v21;
        uint64_t v51 = v20;
        if (v22)
        {
          operator delete(v22);
          uint64_t v24 = *(void *)v4;
        }
        uint64_t v22 = v21;
LABEL_21:
        ++v25;
        uint64_t v26 = *((void *)v4 + 1);
        unint64_t v27 = (v26 - v24) >> 5;
        unint64_t v23 = v19;
      }
      while (v25 < v27);
      if (v24 == v26)
      {
        unint64_t v23 = v19;
        goto LABEL_17;
      }
      if (*(unsigned char *)(v26 - 8))
      {
        uint64_t v43 = 0;
        while (v26 + v43 != v24)
        {
          int v44 = *(unsigned __int8 *)(v26 + v43 - 8);
          v43 -= 32;
          if (!v44)
          {
            unint64_t v27 = (-32 - v43) >> 5;
            break;
          }
        }
        unint64_t v45 = &v21[4 * (((unint64_t)(v19 - v21) >> 2) - v27)];
        uint64_t v22 = v21;
      }
      else
      {
        unint64_t v45 = v19 - 4;
      }
      *(_DWORD *)unint64_t v45 = 1065353216;
      unint64_t v23 = v19;
      v4 += 24;
      if (v4 == v48)
      {
LABEL_59:
        uint64_t v50 = v19;
        a2 = v47;
        break;
      }
    }
  }
LABEL_60:
  sub_1C4BE3034(a2, (uint64_t)&__p);
  unint64_t v46 = __p;
  if (__p)
  {
    operator delete(v46);
  }
}

void sub_1C4BE0C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::StrokeDirectionFeatureExtractor::process(char **a1@<X1>, uint64_t a2@<X8>)
{
  __p = 0;
  float64x2x3_t v48 = 0;
  float64x2x3_t v49 = 0;
  uint64_t v5 = *a1;
  int v4 = a1[1];
  if (*a1 == v4) {
    goto LABEL_52;
  }
  unint64_t v6 = v4 - v5 - 24;
  if (v6 >= 0x60)
  {
    unint64_t v9 = v6 / 0x18 + 1;
    uint64_t v10 = v9 & 3;
    if ((v9 & 3) == 0) {
      uint64_t v10 = 4;
    }
    unint64_t v11 = v9 - v10;
    uint64_t v8 = &v5[24 * v11];
    int64x2_t v12 = 0uLL;
    int64x2_t v13 = (const double *)*a1;
    int64x2_t v14 = 0uLL;
    do
    {
      uint64_t v15 = v13 + 12;
      float64x2x3_t v51 = vld3q_f64(v13);
      uint64_t v16 = v13 + 6;
      int64x2_t v12 = vsraq_n_s64(v12, vsubq_s64((int64x2_t)v51.val[1], (int64x2_t)v51.val[0]), 5uLL);
      float64x2x3_t v52 = vld3q_f64(v16);
      int64x2_t v14 = vsraq_n_s64(v14, vsubq_s64((int64x2_t)v52.val[1], (int64x2_t)v52.val[0]), 5uLL);
      int64x2_t v13 = v15;
      v11 -= 4;
    }
    while (v11);
    unint64_t v7 = vaddvq_s64(vaddq_s64(v14, v12));
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = *a1;
  }
  do
  {
    uint64_t v17 = *(void *)v8;
    uint64_t v18 = *((void *)v8 + 1);
    v8 += 24;
    v7 += (v18 - v17) >> 5;
  }
  while (v8 != v4);
  if (!v7)
  {
    long long v20 = 0;
    uint64_t v19 = 0;
    if (v5 == v4) {
      goto LABEL_52;
    }
LABEL_15:
    uint64_t v43 = a2;
    unint64_t v45 = v4;
    unint64_t v46 = 0;
    double v21 = v19;
    uint64_t v22 = v19;
    while (1)
    {
      uint64_t v23 = *(void *)v5;
      if (*((void *)v5 + 1) != *(void *)v5) {
        break;
      }
LABEL_16:
      ++v46;
      v5 += 24;
      if (v5 == v45)
      {
        float64x2x3_t v48 = v19;
        a2 = v43;
        goto LABEL_52;
      }
    }
    unint64_t v24 = 0;
    if ((*(void *)&a1[3][(v46 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v46)) {
      float v25 = 1.0;
    }
    else {
      float v25 = 0.0;
    }
    while (1)
    {
      while (v21 < v20)
      {
        *v21++ = v25;
        uint64_t v19 = v21;
        if (++v24 >= (*((void *)v5 + 1) - v23) >> 5) {
          goto LABEL_16;
        }
      }
      uint64_t v26 = v21 - v22;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62)
      {
        float64x2x3_t v48 = v19;
        sub_1C494A220();
      }
      if (((char *)v20 - (char *)v22) >> 1 > v27) {
        unint64_t v27 = ((char *)v20 - (char *)v22) >> 1;
      }
      if ((unint64_t)((char *)v20 - (char *)v22) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28)
      {
        if (v28 >> 62)
        {
          float64x2x3_t v48 = v19;
          sub_1C4949AA8();
        }
        unint64_t v29 = operator new(4 * v28);
        unint64_t v30 = (float *)&v29[4 * v26];
        *unint64_t v30 = v25;
        uint64_t v19 = v30 + 1;
        int64_t v31 = (char *)v21 - (char *)v22;
        if (v21 == v22) {
          goto LABEL_37;
        }
      }
      else
      {
        unint64_t v29 = 0;
        unint64_t v30 = (float *)(4 * v26);
        *(float *)(4 * v26) = v25;
        uint64_t v19 = (float *)(4 * v26 + 4);
        int64_t v31 = (char *)v21 - (char *)v22;
        if (v21 == v22) {
          goto LABEL_37;
        }
      }
      unint64_t v32 = v31 - 4;
      if (v32 >= 0xBC)
      {
        unint64_t v35 = ((char *)(v21 - 1) - (char *)v22) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v29[(char *)v21 - (char *)v22 - 4 - v35] > &v29[(char *)v21 - (char *)v22 - 4])
        {
          unint64_t v33 = v21;
        }
        else if ((float *)((char *)v21 - v35 - 4) > v21 - 1)
        {
          unint64_t v33 = v21;
        }
        else if ((unint64_t)((char *)v22 - v29) >= 0x20)
        {
          uint64_t v36 = (v32 >> 2) + 1;
          uint64_t v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v33 = &v21[v37 / 0xFFFFFFFFFFFFFFFCLL];
          unint64_t v30 = (float *)((char *)v30 - v37);
          uint64_t v38 = &v29[4 * v26 - 16];
          uint64_t v39 = v21 - 4;
          uint64_t v40 = v36 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v41 = *(_OWORD *)v39;
            *(v38 - 1) = *((_OWORD *)v39 - 1);
            _OWORD *v38 = v41;
            v38 -= 2;
            v39 -= 8;
            v40 -= 8;
          }
          while (v40);
          if (v36 == (v36 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_37;
          }
        }
        else
        {
          unint64_t v33 = v21;
        }
      }
      else
      {
        unint64_t v33 = v21;
      }
      do
      {
        int v34 = *((_DWORD *)v33-- - 1);
        *((_DWORD *)v30-- - 1) = v34;
      }
      while (v33 != v22);
LABEL_37:
      long long v20 = (float *)&v29[4 * v28];
      __p = v30;
      float64x2x3_t v49 = v20;
      if (v22)
      {
        operator delete(v22);
        uint64_t v23 = *(void *)v5;
      }
      uint64_t v22 = v30;
      ++v24;
      double v21 = v19;
      if (v24 >= (*((void *)v5 + 1) - v23) >> 5) {
        goto LABEL_16;
      }
    }
  }
  if (v7 >> 62) {
    sub_1C494A220();
  }
  uint64_t v19 = (float *)operator new(4 * v7);
  long long v20 = &v19[v7];
  __p = v19;
  float64x2x3_t v48 = v19;
  float64x2x3_t v49 = v20;
  if (v5 != v4) {
    goto LABEL_15;
  }
LABEL_52:
  sub_1C4BE3034(a2, (uint64_t)&__p);
  long long v42 = __p;
  if (__p)
  {
    operator delete(v42);
  }
}

void sub_1C4BE1074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::DeltaFeatureExtractor::process(CoreHandwriting::DeltaFeatureExtractor *this@<X0>, const CoreHandwriting::Ink *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 == v5)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = v5 - v6 - 24;
    if (v7 >= 0x60)
    {
      unint64_t v9 = v7 / 0x18 + 1;
      uint64_t v10 = v9 & 3;
      if ((v9 & 3) == 0) {
        uint64_t v10 = 4;
      }
      unint64_t v11 = v9 - v10;
      uint64_t v12 = v6 + 24 * v11;
      int64x2_t v13 = 0uLL;
      int64x2_t v14 = 0uLL;
      do
      {
        uint64_t v15 = v6 + 96;
        float64x2x3_t v131 = vld3q_f64((const double *)v6);
        uint64_t v16 = (const double *)(v6 + 48);
        int64x2_t v13 = vsraq_n_s64(v13, vsubq_s64((int64x2_t)v131.val[1], (int64x2_t)v131.val[0]), 5uLL);
        float64x2x3_t v132 = vld3q_f64(v16);
        int64x2_t v14 = vsraq_n_s64(v14, vsubq_s64((int64x2_t)v132.val[1], (int64x2_t)v132.val[0]), 5uLL);
        uint64_t v6 = v15;
        v11 -= 4;
      }
      while (v11);
      uint64_t v8 = vaddvq_s64(vaddq_s64(v14, v13));
      uint64_t v6 = v12;
    }
    else
    {
      uint64_t v8 = 0;
    }
    do
    {
      double v17 = *(double *)v6;
      uint64_t v18 = *(void *)(v6 + 8);
      v6 += 24;
      v8 += (v18 - *(void *)&v17) >> 5;
    }
    while (v6 != v5);
  }
  uint64_t v19 = (*(uint64_t (**)(CoreHandwriting::DeltaFeatureExtractor *))(*(void *)this + 24))(this);
  long long v20 = operator new(0x10uLL);
  int v129 = v20 + 2;
  int v130 = v20 + 2;
  void *v20 = v8;
  v20[1] = v19;
  __p = v20;
  sub_1C4BE31A8((uint64_t)a3, (char **)&__p);
  if (__p)
  {
    int v129 = __p;
    operator delete(__p);
  }
  double v21 = *(uint64_t **)a2;
  uint64_t v22 = (uint64_t *)*((void *)a2 + 1);
  if (*(uint64_t **)a2 != v22)
  {
    uint64_t v23 = 0;
    double v25 = *((double *)a2 + 6);
    double v24 = *((double *)a2 + 7);
    do
    {
      uint64_t v26 = *v21;
      uint64_t v27 = v21[1];
      while (v26 != v27)
      {
        if (*(unsigned char *)(v26 + 24))
        {
          unint64_t v30 = (int *)operator new(0x10uLL);
          *(void *)unint64_t v30 = v23;
          *((void *)v30 + 1) = 0;
          unint64_t v32 = (char *)a3[3];
          int64_t v31 = (char *)a3[4];
          if ((unint64_t)(v31 - v32) > 0x10) {
            int64_t v31 = v32 + 16;
          }
          if (v32 == v31)
          {
            uint64_t v45 = 0;
          }
          else
          {
            unint64_t v33 = v31 - v32 - 8;
            if (v33 < 8)
            {
              int v34 = 0;
              unint64_t v35 = v30;
              uint64_t v36 = (char *)a3[3];
              goto LABEL_36;
            }
            int v46 = 0;
            int v47 = 0;
            uint64_t v48 = (v33 >> 3) + 1;
            uint64_t v49 = 2 * (v48 & 0x3FFFFFFFFFFFFFFELL);
            unint64_t v35 = &v30[v49];
            uint64_t v36 = &v32[v49 * 4];
            uint64_t v50 = (int *)(v32 + 8);
            float64x2x3_t v51 = v30 + 2;
            uint64_t v52 = v48 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              int v53 = *(v50 - 2);
              int v55 = *v50;
              v50 += 4;
              int v54 = v55;
              int v56 = *(v51 - 2);
              int v57 = *v51;
              v51 += 4;
              v46 += v56 * v53;
              v47 += v57 * v54;
              v52 -= 2;
            }
            while (v52);
            int v34 = v47 + v46;
            if (v48 != (v48 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_36:
                int v59 = *(_DWORD *)v36;
                v36 += 8;
                int v58 = v59;
                int v60 = *v35;
                v35 += 2;
                v34 += v60 * v58;
              }
              while (v36 != v31);
            }
            uint64_t v45 = v34;
          }
          uint64_t v61 = a3[6];
          operator delete(v30);
          *(_DWORD *)(v61 + 4 * v45) = 0;
          uint64_t v62 = (int *)operator new(0x10uLL);
          *(void *)uint64_t v62 = v23;
          *((void *)v62 + 1) = 1;
          uint64_t v64 = (char *)a3[3];
          uint64_t v63 = (char *)a3[4];
          if ((unint64_t)(v63 - v64) > 0x10) {
            uint64_t v63 = v64 + 16;
          }
          if (v64 == v63)
          {
            uint64_t v28 = 0;
          }
          else
          {
            unint64_t v65 = v63 - v64 - 8;
            if (v65 < 8)
            {
              int v66 = 0;
              int v67 = v62;
              uint64_t v68 = (char *)a3[3];
              goto LABEL_46;
            }
            int v69 = 0;
            int v70 = 0;
            uint64_t v71 = (v65 >> 3) + 1;
            uint64_t v72 = 2 * (v71 & 0x3FFFFFFFFFFFFFFELL);
            int v67 = &v62[v72];
            uint64_t v68 = &v64[v72 * 4];
            uint64_t v73 = (int *)(v64 + 8);
            uint64_t v74 = v62 + 2;
            uint64_t v75 = v71 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              int v76 = *(v73 - 2);
              int v78 = *v73;
              v73 += 4;
              int v77 = v78;
              int v79 = *(v74 - 2);
              int v80 = *v74;
              v74 += 4;
              v69 += v79 * v76;
              v70 += v80 * v77;
              v75 -= 2;
            }
            while (v75);
            int v66 = v70 + v69;
            if (v71 != (v71 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_46:
                int v82 = *(_DWORD *)v68;
                v68 += 8;
                int v81 = v82;
                int v83 = *v67;
                v67 += 2;
                v66 += v83 * v81;
              }
              while (v68 != v63);
            }
            uint64_t v28 = v66;
          }
          uint64_t v29 = a3[6];
          operator delete(v62);
          *(_DWORD *)(v29 + 4 * v28) = 0;
          goto LABEL_19;
        }
        double v37 = *(double *)v26;
        uint64_t v38 = (int *)operator new(0x10uLL);
        *(void *)uint64_t v38 = v23;
        *((void *)v38 + 1) = 0;
        uint64_t v40 = (char *)a3[3];
        uint64_t v39 = (char *)a3[4];
        if ((unint64_t)(v39 - v40) > 0x10) {
          uint64_t v39 = v40 + 16;
        }
        if (v40 == v39)
        {
          uint64_t v84 = 0;
          goto LABEL_54;
        }
        unint64_t v41 = v39 - v40 - 8;
        if (v41 >= 8)
        {
          int v85 = 0;
          int v86 = 0;
          uint64_t v87 = (v41 >> 3) + 1;
          uint64_t v88 = 2 * (v87 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v43 = &v38[v88];
          int v44 = &v40[v88 * 4];
          int v89 = (int *)(v40 + 8);
          double v90 = v38 + 2;
          uint64_t v91 = v87 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            int v92 = *(v89 - 2);
            int v94 = *v89;
            v89 += 4;
            int v93 = v94;
            int v95 = *(v90 - 2);
            int v96 = *v90;
            v90 += 4;
            v85 += v95 * v92;
            v86 += v96 * v93;
            v91 -= 2;
          }
          while (v91);
          int v42 = v86 + v85;
          if (v87 == (v87 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_53;
          }
        }
        else
        {
          int v42 = 0;
          uint64_t v43 = v38;
          int v44 = (char *)a3[3];
        }
        do
        {
          int v98 = *(_DWORD *)v44;
          v44 += 8;
          int v97 = v98;
          int v99 = *v43;
          v43 += 2;
          v42 += v99 * v97;
        }
        while (v44 != v39);
LABEL_53:
        uint64_t v84 = v42;
LABEL_54:
        uint64_t v100 = a3[6];
        operator delete(v38);
        float v101 = v37 - v25;
        *(float *)(v100 + 4 * v84) = v101;
        double v102 = *(double *)(v26 + 8);
        int v103 = (int *)operator new(0x10uLL);
        *(void *)int v103 = v23;
        *((void *)v103 + 1) = 1;
        int v105 = (char *)a3[3];
        int v104 = (char *)a3[4];
        if ((unint64_t)(v104 - v105) > 0x10) {
          int v104 = v105 + 16;
        }
        if (v105 != v104)
        {
          unint64_t v106 = v104 - v105 - 8;
          if (v106 < 8)
          {
            int v107 = 0;
            uint64_t v108 = v103;
            uint64_t v109 = (char *)a3[3];
            goto LABEL_63;
          }
          int v111 = 0;
          int v112 = 0;
          uint64_t v113 = (v106 >> 3) + 1;
          uint64_t v114 = 2 * (v113 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v108 = &v103[v114];
          uint64_t v109 = &v105[v114 * 4];
          id v115 = (int *)(v105 + 8);
          uint64_t v116 = v103 + 2;
          uint64_t v117 = v113 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            int v118 = *(v115 - 2);
            int v120 = *v115;
            v115 += 4;
            int v119 = v120;
            int v121 = *(v116 - 2);
            int v122 = *v116;
            v116 += 4;
            v111 += v121 * v118;
            v112 += v122 * v119;
            v117 -= 2;
          }
          while (v117);
          int v107 = v112 + v111;
          if (v113 != (v113 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_63:
              int v124 = *(_DWORD *)v109;
              v109 += 8;
              int v123 = v124;
              int v125 = *v108;
              v108 += 2;
              v107 += v125 * v123;
            }
            while (v109 != v104);
          }
          uint64_t v110 = v107;
          goto LABEL_65;
        }
        uint64_t v110 = 0;
LABEL_65:
        uint64_t v126 = a3[6];
        operator delete(v103);
        float v127 = v102 - v24;
        *(float *)(v126 + 4 * v110) = v127;
        double v25 = *(double *)v26;
        double v24 = *(double *)(v26 + 8);
LABEL_19:
        ++v23;
        v26 += 32;
      }
      v21 += 3;
    }
    while (v21 != v22);
  }
}

void sub_1C4BE1598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4BE15B4(_Unwind_Exception *a1)
{
  sub_1C4A6EE00(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::InkToImageBaseFeatureExtractionStep::setPadToMultipleOf(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

uint64_t CoreHandwriting::InkToImageBaseFeatureExtractionStep::setEnlargeSingleDot(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

void CoreHandwriting::InkToImageBaseFeatureExtractionStep::process(CoreHandwriting::InkToImageBaseFeatureExtractionStep *this@<X0>, double ***a2@<X1>, void *a3@<X8>)
{
  int v4 = this;
  uint64_t v186 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (*(uint64_t (**)(CoreHandwriting::InkToImageBaseFeatureExtractionStep *))(*(void *)this + 40))(this);
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = *a2;
  unint64_t v11 = a2[1];
  int v171 = (const CoreHandwriting::Ink *)a2;
  if (*a2 == v11)
  {
    double v14 = -1.79769313e308;
    double v13 = -1.79769313e308;
    double v175 = 1.79769313e308;
    double v176 = 1.79769313e308;
  }
  else
  {
    double v12 = -1.79769313e308;
    double v13 = -1.79769313e308;
    double v175 = 1.79769313e308;
    double v176 = 1.79769313e308;
    do
    {
      uint64_t v15 = *v10;
      uint64_t v16 = v10[1];
      if (*v10 == v16) {
        goto LABEL_3;
      }
      double v17 = 1.79769313e308;
      double v14 = -1.79769313e308;
      double v18 = -1.79769313e308;
      double v19 = 1.79769313e308;
      do
      {
        double v20 = *v15;
        double v21 = v15[1];
        v15 += 4;
        if (v19 > v20) {
          double v19 = v20;
        }
        if (v18 < v20) {
          double v18 = v20;
        }
        if (v17 > v21) {
          double v17 = v21;
        }
        if (v14 < v21) {
          double v14 = v21;
        }
      }
      while (v15 != v16);
      double v22 = v175;
      if (v175 > v19) {
        double v22 = v19;
      }
      if (v13 < v18) {
        double v13 = v18;
      }
      double v23 = v176;
      if (v176 > v17) {
        double v23 = v17;
      }
      double v175 = v22;
      double v176 = v23;
      if (v12 >= v14) {
LABEL_3:
      }
        double v14 = v12;
      v10 += 3;
      double v12 = v14;
    }
    while (v10 != v11);
  }
  double v24 = v13 - v175;
  if (v24 <= 0.0) {
    double v25 = 1.0;
  }
  else {
    double v25 = v24;
  }
  if (v14 - v176 <= 0.0) {
    double v26 = 1.0;
  }
  else {
    double v26 = v14 - v176;
  }
  uint64_t v27 = *(void *)((char *)v4 + 20);
  v28.i64[0] = (int)v27;
  v28.i64[1] = SHIDWORD(v27);
  int8x16_t v29 = (int8x16_t)vcgtzq_s64(v28);
  v30.i64[0] = v6;
  v30.i64[1] = v7;
  v28.i64[0] = v27;
  v28.i64[1] = HIDWORD(v27);
  int8x16_t v31 = vbslq_s8((int8x16_t)vcgtq_u64(v30, (uint64x2_t)v28), (int8x16_t)v30, (int8x16_t)v28);
  uint64x2_t v32 = (uint64x2_t)vbslq_s8(v29, v31, (int8x16_t)v30);
  int v33 = *((_DWORD *)v4 + 3);
  if (v33 < 1)
  {
    uint64x2_t v177 = v32;
  }
  else
  {
    *(float *)v31.i32 = (float)v33;
    uint64x2_t v177 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(vrndp_f32(vdiv_f32(vcvt_f32_f64(vcvtq_f64_u64(v32)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 0))), (float)v33)));
  }
  int v34 = operator new(0x10uLL);
  *(void *)__p = v34;
  *int v34 = v177;
  *(void *)&__p[8] = v34 + 1;
  *(void *)&__p[16] = v34 + 1;
  sub_1C4BE31A8((uint64_t)a3, (char **)__p);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  unint64_t v35 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v36 = 0;
    float v37 = v25;
    float v38 = v26;
    double v39 = (float)((float)(unint64_t)(v9 - 1) / v37);
    unint64_t v40 = v177.i64[1] - 1;
    uint64x2_t v173 = v177;
    --v177.i64[0];
    double v41 = (float)((float)(unint64_t)(v8 - 1) / v38);
    int v170 = (int *)v4;
    do
    {
      int v42 = &v35[3 * v36];
      uint64_t v43 = *v42;
      int v174 = v42[1];
      if (*v42 == v174)
      {
        ++v36;
        goto LABEL_39;
      }
      double v44 = (double)(int)((*v43 - v175) * v39);
      double v45 = (double)(int)((v43[1] - v176) * v41);
      unint64_t v46 = v36 + 1;
      unint64_t v172 = v46;
      if (*((unsigned char *)v4 + 8)) {
        float v47 = (float)(int)v46;
      }
      else {
        float v47 = 1.0;
      }
      char v48 = 1;
      do
      {
        double v52 = v45;
        double v53 = v44;
        double v44 = fmin((double)(int)((*v43 - v175) * v39), (double)(unint64_t)(v177.i64[1] - 1));
        double v45 = fmin((double)(int)((v43[1] - v176) * v41), (double)v177.u64[0]);
        int v54 = (int)(v44 - v53);
        int v55 = (int)(v45 - v52);
        if (v54 >= 0) {
          unsigned int v56 = (int)(v44 - v53);
        }
        else {
          unsigned int v56 = -v54;
        }
        if (v55 >= 0) {
          unsigned int v57 = (int)(v45 - v52);
        }
        else {
          unsigned int v57 = -v55;
        }
        if (v56 >= v57)
        {
          if (v54 < 1) {
            int v85 = -1;
          }
          else {
            int v85 = 1;
          }
          if (!v54) {
            goto LABEL_94;
          }
          int v86 = 0;
          while (2)
          {
            int v89 = (int *)operator new(0x10uLL);
            *(void *)int v89 = (unint64_t)(v52 + (float)((float)(v86 * v55) / (float)v54));
            *((void *)v89 + 1) = (unint64_t)(v53 + (double)v86);
            uint64_t v91 = (char *)a3[3];
            double v90 = (char *)a3[4];
            if ((unint64_t)(v90 - v91) > 0x10) {
              double v90 = v91 + 16;
            }
            if (v91 == v90)
            {
              uint64_t v87 = 0;
            }
            else
            {
              unint64_t v92 = v90 - v91 - 8;
              if (v92 < 8)
              {
                int v93 = 0;
                int v94 = v89;
                int v95 = (char *)a3[3];
                goto LABEL_92;
              }
              int v96 = 0;
              int v97 = 0;
              uint64_t v98 = (v92 >> 3) + 1;
              uint64_t v99 = 2 * (v98 & 0x3FFFFFFFFFFFFFFELL);
              int v94 = &v89[v99];
              int v95 = &v91[v99 * 4];
              uint64_t v100 = (int *)(v91 + 8);
              float v101 = v89 + 2;
              uint64_t v102 = v98 & 0x3FFFFFFFFFFFFFFELL;
              do
              {
                int v103 = *(v100 - 2);
                int v105 = *v100;
                v100 += 4;
                int v104 = v105;
                int v106 = *(v101 - 2);
                int v107 = *v101;
                v101 += 4;
                v96 += v106 * v103;
                v97 += v107 * v104;
                v102 -= 2;
              }
              while (v102);
              int v93 = v97 + v96;
              if (v98 != (v98 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_92:
                  int v109 = *(_DWORD *)v95;
                  v95 += 8;
                  int v108 = v109;
                  int v110 = *v94;
                  v94 += 2;
                  v93 += v110 * v108;
                }
                while (v95 != v90);
              }
              uint64_t v87 = v93;
            }
            uint64_t v88 = a3[6];
            operator delete(v89);
            *(float *)(v88 + 4 * v87) = v47;
            v86 += v85;
            if (v86 == v54) {
              goto LABEL_94;
            }
            continue;
          }
        }
        if (v55 < 1) {
          int v58 = -1;
        }
        else {
          int v58 = 1;
        }
        if (v55)
        {
          for (int i = 0; i != v55; i += v58)
          {
            while (1)
            {
              uint64_t v61 = (int *)operator new(0x10uLL);
              *(void *)uint64_t v61 = (unint64_t)(v52 + (double)i);
              *((void *)v61 + 1) = (unint64_t)(v53 + (float)((float)(i * v54) / (float)v55));
              uint64_t v63 = (char *)a3[3];
              uint64_t v62 = (char *)a3[4];
              if ((unint64_t)(v62 - v63) > 0x10) {
                uint64_t v62 = v63 + 16;
              }
              if (v63 != v62) {
                break;
              }
              int v60 = (float *)a3[6];
              operator delete(v61);
              *int v60 = v47;
              i += v58;
              if (i == v55) {
                goto LABEL_94;
              }
            }
            unint64_t v64 = v62 - v63 - 8;
            if (v64 >= 8)
            {
              int v68 = 0;
              int v69 = 0;
              uint64_t v70 = (v64 >> 3) + 1;
              uint64_t v71 = 2 * (v70 & 0x3FFFFFFFFFFFFFFELL);
              int v66 = &v61[v71];
              int v67 = &v63[v71 * 4];
              uint64_t v72 = (int *)(v63 + 8);
              uint64_t v73 = v61 + 2;
              uint64_t v74 = v70 & 0x3FFFFFFFFFFFFFFELL;
              do
              {
                int v75 = *(v72 - 2);
                int v77 = *v72;
                v72 += 4;
                int v76 = v77;
                int v78 = *(v73 - 2);
                int v79 = *v73;
                v73 += 4;
                v68 += v78 * v75;
                v69 += v79 * v76;
                v74 -= 2;
              }
              while (v74);
              int v65 = v69 + v68;
              if (v70 == (v70 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_75;
              }
            }
            else
            {
              int v65 = 0;
              int v66 = v61;
              int v67 = (char *)a3[3];
            }
            do
            {
              int v81 = *(_DWORD *)v67;
              v67 += 8;
              int v80 = v81;
              int v82 = *v66;
              v66 += 2;
              v65 += v82 * v80;
            }
            while (v67 != v62);
LABEL_75:
            uint64_t v83 = v65;
            uint64_t v84 = a3[6];
            operator delete(v61);
            *(float *)(v84 + 4 * v83) = v47;
          }
        }
LABEL_94:
        unint64_t v111 = (unint64_t)v45;
        if (v40 >= (unint64_t)v44 && v177.i64[0] >= v111)
        {
          uint64_t v114 = (int *)operator new(0x10uLL);
          *(void *)uint64_t v114 = v111;
          *((void *)v114 + 1) = (unint64_t)v44;
          uint64_t v116 = (char *)a3[3];
          id v115 = (char *)a3[4];
          if ((unint64_t)(v115 - v116) > 0x10) {
            id v115 = v116 + 16;
          }
          if (v116 == v115)
          {
            uint64_t v49 = 0;
LABEL_46:
            uint64_t v50 = a3[6];
            operator delete(v114);
            *(float *)(v50 + 4 * v49) = v47;
            goto LABEL_47;
          }
          unint64_t v117 = v115 - v116 - 8;
          if (v117 >= 8)
          {
            int v121 = 0;
            int v122 = 0;
            uint64_t v123 = (v117 >> 3) + 1;
            uint64_t v124 = 2 * (v123 & 0x3FFFFFFFFFFFFFFELL);
            int v119 = &v114[v124];
            int v120 = &v116[v124 * 4];
            int v125 = (int *)(v116 + 8);
            uint64_t v126 = v114 + 2;
            uint64_t v127 = v123 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              int v128 = *(v125 - 2);
              int v130 = *v125;
              v125 += 4;
              int v129 = v130;
              int v131 = *(v126 - 2);
              int v132 = *v126;
              v126 += 4;
              v121 += v131 * v128;
              v122 += v132 * v129;
              v127 -= 2;
            }
            while (v127);
            int v118 = v122 + v121;
            if (v123 == (v123 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_111;
            }
          }
          else
          {
            int v118 = 0;
            int v119 = v114;
            int v120 = (char *)a3[3];
          }
          do
          {
            int v134 = *(_DWORD *)v120;
            v120 += 8;
            int v133 = v134;
            int v135 = *v119;
            v119 += 2;
            v118 += v135 * v133;
          }
          while (v120 != v115);
LABEL_111:
          uint64_t v49 = v118;
          goto LABEL_46;
        }
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v113 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v113, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)__p = 134219264;
          *(double *)&__p[4] = v44;
          *(_WORD *)&__p[12] = 2048;
          *(double *)&__p[14] = v45;
          *(_WORD *)&__p[22] = 2048;
          unint64_t v179 = (unint64_t)v44;
          __int16 v180 = 2048;
          unint64_t v181 = (unint64_t)v45;
          __int16 v182 = 2048;
          uint64_t v183 = v173.i64[1];
          __int16 v184 = 2048;
          uint64_t v185 = v173.i64[0];
          _os_log_impl(&dword_1C492D000, v113, OS_LOG_TYPE_FAULT, "Unexpected coordinate (%f, %f) size_t (%zu, %zu) for tensor with shape (%zu, %zu)", __p, 0x3Eu);
        }
LABEL_47:
        BOOL v51 = v44 == v53;
        if (v45 != v52) {
          BOOL v51 = 0;
        }
        char v48 = (v48 & 1) != 0 && v51;
        v43 += 4;
      }
      while (v43 != v174);
      int v4 = (CoreHandwriting::InkToImageBaseFeatureExtractionStep *)v170;
      int v136 = v170[4];
      if (v136 > 0) {
        char v137 = v48;
      }
      else {
        char v137 = 0;
      }
      if ((v137 & 1) == 0)
      {
        unint64_t v36 = v172;
        goto LABEL_39;
      }
      double v138 = (double)v136;
      unint64_t v139 = (int)(v45 - (double)v136) & ~((int)(v45 - (double)v136) >> 31);
      unint64_t v140 = (unint64_t)(v45 + (double)v136);
      if (v177.i64[0] < v140) {
        unint64_t v140 = v177.i64[0];
      }
      unint64_t v36 = v172;
      if (v140 >= v139)
      {
        while (1)
        {
          unint64_t v143 = (int)(v44 - v138) & ~((int)(v44 - v138) >> 31);
          double v138 = (double)v136;
          unint64_t v144 = (unint64_t)(v44 + (double)v136);
          if (v40 < v144) {
            unint64_t v144 = v177.i64[1] - 1;
          }
          if (v144 >= v143) {
            break;
          }
LABEL_120:
          unint64_t v141 = (unint64_t)(v45 + v138);
          if (v177.i64[0] < v141) {
            unint64_t v141 = v177.i64[0];
          }
          BOOL v142 = v141 > v139++;
          if (!v142) {
            goto LABEL_39;
          }
        }
        while (2)
        {
          int v148 = (int *)operator new(0x10uLL);
          *(void *)int v148 = v139;
          *((void *)v148 + 1) = v143;
          float v150 = (char *)a3[3];
          uint64_t v149 = (char *)a3[4];
          if ((unint64_t)(v149 - v150) > 0x10) {
            uint64_t v149 = v150 + 16;
          }
          if (v150 == v149)
          {
            uint64_t v145 = 0;
          }
          else
          {
            unint64_t v151 = v149 - v150 - 8;
            if (v151 < 8)
            {
              int v152 = 0;
              uint64_t v153 = v148;
              uint64_t v154 = (char *)a3[3];
              goto LABEL_141;
            }
            int v155 = 0;
            int v156 = 0;
            uint64_t v157 = (v151 >> 3) + 1;
            uint64_t v158 = 2 * (v157 & 0x3FFFFFFFFFFFFFFELL);
            uint64_t v153 = &v148[v158];
            uint64_t v154 = &v150[v158 * 4];
            uint64_t v159 = (int *)(v150 + 8);
            int v160 = v148 + 2;
            uint64_t v161 = v157 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              int v162 = *(v159 - 2);
              int v164 = *v159;
              v159 += 4;
              int v163 = v164;
              int v165 = *(v160 - 2);
              int v166 = *v160;
              v160 += 4;
              v155 += v165 * v162;
              v156 += v166 * v163;
              v161 -= 2;
            }
            while (v161);
            int v152 = v156 + v155;
            if (v157 != (v157 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_141:
                int v168 = *(_DWORD *)v154;
                v154 += 8;
                int v167 = v168;
                int v169 = *v153;
                v153 += 2;
                v152 += v169 * v167;
              }
              while (v154 != v149);
            }
            uint64_t v145 = v152;
          }
          uint64_t v146 = a3[6];
          operator delete(v148);
          *(float *)(v146 + 4 * v145) = v47;
          int v136 = v170[4];
          double v138 = (double)v136;
          unint64_t v147 = (unint64_t)(v44 + (double)v136);
          if (v40 < v147) {
            unint64_t v147 = v177.i64[1] - 1;
          }
          BOOL v142 = v147 > v143++;
          if (!v142) {
            goto LABEL_120;
          }
          continue;
        }
      }
LABEL_39:
      unint64_t v35 = *(double ***)v171;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v171 + 1) - *(void *)v171) >> 3) > v36);
  }
}

void sub_1C4BE1F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreHandwriting::InkToImageByHeightFeatureExtractionStep::getDimensionsToRender(CoreHandwriting::InkToImageByHeightFeatureExtractionStep *this, double ***a2)
{
  float v2 = *a2;
  unint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    double v4 = 1.79769313e308;
    double v5 = -1.79769313e308;
    double v6 = -1.79769313e308;
    double v7 = 1.79769313e308;
    do
    {
      uint64_t v8 = *v2;
      uint64_t v9 = v2[1];
      if (*v2 != v9)
      {
        double v10 = 1.79769313e308;
        double v11 = -1.79769313e308;
        double v12 = -1.79769313e308;
        double v13 = 1.79769313e308;
        do
        {
          double v14 = *v8;
          double v15 = v8[1];
          v8 += 4;
          if (v13 > v14) {
            double v13 = v14;
          }
          if (v12 < v14) {
            double v12 = v14;
          }
          if (v10 > v15) {
            double v10 = v15;
          }
          if (v11 < v15) {
            double v11 = v15;
          }
        }
        while (v8 != v9);
        if (v7 > v13) {
          double v7 = v13;
        }
        if (v6 < v12) {
          double v6 = v12;
        }
        if (v4 > v10) {
          double v4 = v10;
        }
        if (v5 < v11) {
          double v5 = v11;
        }
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
  return *((int *)this + 9);
}

uint64_t CoreHandwriting::InkToImageByHeightFeatureExtractionStep::numDimensions(CoreHandwriting::InkToImageByHeightFeatureExtractionStep *this)
{
  return *((int *)this + 9);
}

float CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep::estimateInkSymbolSize(CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep *this, const CoreHandwriting::Ink *a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = *((void *)a2 + 1) - *(void *)a2;
  if (v3)
  {
    unint64_t v4 = v3 / 24;
    memset(v82, 0, 24);
    if ((unint64_t)(v3 / 24) >> 62) {
      sub_1C494A220();
    }
    uint64_t v5 = 4 * v4;
    double v6 = (char *)operator new(4 * v4);
    bzero(v6, 4 * v4);
    uint64_t v7 = 0;
    if (v4 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v4;
    }
    int64x2_t v9 = vdupq_n_s64(0xFFF0000000000000);
    int64x2_t v10 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v11 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      double v19 = (float64x2_t **)(v2 + 24 * v7);
      double v20 = *v19;
      double v21 = v19[1];
      *(void *)&_Q3.f64[1] = v9.i64[1];
      if (v20 != v21)
      {
        float64x2_t v23 = (float64x2_t)v11;
        float64x2_t v24 = (float64x2_t)v10;
        do
        {
          float64x2_t v25 = *v20;
          v20 += 2;
          float64x2_t v24 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v24, v25), (int8x16_t)v25, (int8x16_t)v24);
          float64x2_t v23 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v25, v23), (int8x16_t)v25, (int8x16_t)v23);
        }
        while (v20 != v21);
        _Q3 = vsubq_f64(v23, v24);
      }
      _D5 = _Q3.f64[1];
      __asm { FMLA            D4, D5, V3.D[1] }
      float v18 = sqrt(_D4);
      *(float *)&v6[4 * v7++] = v18;
    }
    while (v7 != v8);
    unint64_t v26 = (2 * v4) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v27 = (float *)&v6[v26];
    if (v26 != v5)
    {
      int64x2_t v28 = (float *)&v6[v5];
      int8x16_t v29 = (float *)v6;
      do
      {
        unint64_t v30 = v28 - v29;
        if (v30 < 2) {
          break;
        }
        if (v30 == 3)
        {
          float v65 = *v29;
          float v66 = v29[1];
          float v67 = *(v28 - 1);
          if (v66 >= *v29)
          {
            if (v67 < v66)
            {
              v29[1] = v67;
              *(v28 - 1) = v66;
              float v79 = *v29;
              float v78 = v29[1];
              if (v78 < *v29)
              {
                float *v29 = v78;
                v29[1] = v79;
              }
            }
          }
          else
          {
            if (v67 >= v66)
            {
              float *v29 = v66;
              v29[1] = v65;
              float v80 = *(v28 - 1);
              if (v80 >= v65) {
                break;
              }
              v29[1] = v80;
            }
            else
            {
              float *v29 = v67;
            }
            *(v28 - 1) = v65;
          }
          break;
        }
        if (v30 == 2)
        {
          float v68 = *(v28 - 1);
          float v69 = *v29;
          if (v68 < *v29)
          {
            float *v29 = v68;
            *(v28 - 1) = v69;
          }
          break;
        }
        if ((char *)v28 - (char *)v29 <= 31)
        {
          while (v29 != v28 - 1)
          {
            uint64_t v70 = v29++;
            if (v70 != v28 && v29 != v28)
            {
              float v71 = *v70;
              float v72 = *v70;
              uint64_t v73 = v29;
              uint64_t v74 = v70;
              int v75 = v29;
              do
              {
                float v76 = *v75++;
                float v77 = v76;
                if (v76 < v72)
                {
                  float v72 = v77;
                  uint64_t v74 = v73;
                }
                uint64_t v73 = v75;
              }
              while (v75 != v28);
              if (v74 != v70)
              {
                *uint64_t v70 = *v74;
                *uint64_t v74 = v71;
              }
            }
          }
          break;
        }
        int8x16_t v31 = &v29[v30 >> 1];
        uint64x2_t v32 = v28 - 1;
        float v33 = *(v28 - 1);
        float v34 = *v31;
        float v35 = *v29;
        if (*v31 >= *v29)
        {
          if (v33 >= v34)
          {
            int v36 = 0;
            float v37 = *v29;
            float v38 = *v31;
            if (*v29 >= *v31) {
              goto LABEL_39;
            }
            goto LABEL_21;
          }
          *int8x16_t v31 = v33;
          *uint64x2_t v32 = v34;
          float v48 = *v29;
          if (*v31 < *v29)
          {
            float *v29 = *v31;
            *int8x16_t v31 = v48;
            int v36 = 2;
            float v37 = *v29;
            float v38 = *v31;
            if (*v29 >= *v31) {
              goto LABEL_39;
            }
            goto LABEL_21;
          }
        }
        else
        {
          if (v33 < v34)
          {
            float *v29 = v33;
            *uint64x2_t v32 = v35;
            int v36 = 1;
            float v37 = *v29;
            float v38 = *v31;
            if (*v29 >= *v31) {
              goto LABEL_39;
            }
            goto LABEL_21;
          }
          float *v29 = v34;
          *int8x16_t v31 = v35;
          if (*v32 < v35)
          {
            *int8x16_t v31 = *v32;
            *uint64x2_t v32 = v35;
            int v36 = 2;
            float v37 = *v29;
            float v38 = *v31;
            if (*v29 >= *v31) {
              goto LABEL_39;
            }
            goto LABEL_21;
          }
        }
        int v36 = 1;
        float v37 = *v29;
        float v38 = *v31;
        if (*v29 >= *v31)
        {
LABEL_39:
          double v39 = v28 - 1;
          while (--v39 != v29)
          {
            if (*v39 < v38)
            {
              float *v29 = *v39;
              float *v39 = v37;
              ++v36;
              unint64_t v40 = v29 + 1;
              if (v29 + 1 < v39) {
                goto LABEL_22;
              }
              goto LABEL_43;
            }
          }
          double v52 = v29 + 1;
          if (v37 >= *v32)
          {
            if (v52 == v32) {
              break;
            }
            while (1)
            {
              float v53 = *v52;
              if (v37 < *v52) {
                break;
              }
              if (++v52 == v32) {
                goto LABEL_104;
              }
            }
            *v52++ = *v32;
            *uint64x2_t v32 = v53;
          }
          if (v52 == v32) {
            break;
          }
          while (1)
          {
            float v57 = *v29;
            do
            {
              float v58 = *v52++;
              float v59 = v58;
            }
            while (v57 >= v58);
            int v60 = v52 - 1;
            do
            {
              float v61 = *--v32;
              float v62 = v61;
            }
            while (v57 < v61);
            if (v60 >= v32) {
              break;
            }
            *int v60 = v62;
            *uint64x2_t v32 = v59;
          }
          int8x16_t v29 = v52 - 1;
          if (v60 > v27) {
            break;
          }
          continue;
        }
LABEL_21:
        double v39 = v28 - 1;
        unint64_t v40 = v29 + 1;
        if (v29 + 1 >= v28 - 1)
        {
LABEL_43:
          double v45 = v40;
        }
        else
        {
LABEL_22:
          double v41 = v40;
          while (1)
          {
            float v42 = *v31;
            do
            {
              float v43 = *v41++;
              float v44 = v43;
            }
            while (v43 < v42);
            double v45 = v41 - 1;
            do
            {
              float v46 = *--v39;
              float v47 = v46;
            }
            while (v46 >= v42);
            if (v45 >= v39) {
              break;
            }
            float *v45 = v47;
            float *v39 = v44;
            ++v36;
            if (v45 == v31) {
              int8x16_t v31 = v39;
            }
          }
        }
        if (v45 != v31)
        {
          float v49 = *v45;
          if (*v31 < *v45)
          {
            float *v45 = *v31;
            *int8x16_t v31 = v49;
            ++v36;
          }
        }
        if (v45 == v27) {
          break;
        }
        if (!v36)
        {
          if (v45 <= v27)
          {
            int v54 = v45 + 1;
            while (v54 != v28)
            {
              float v56 = *(v54 - 1);
              float v55 = *v54++;
              if (v55 < v56) {
                goto LABEL_49;
              }
            }
          }
          else
          {
            while (v40 != v45)
            {
              float v51 = *(v40 - 1);
              float v50 = *v40++;
              if (v50 < v51) {
                goto LABEL_49;
              }
            }
          }
          break;
        }
LABEL_49:
        if (v45 <= v27) {
          int8x16_t v29 = v45 + 1;
        }
        else {
          int64x2_t v28 = v45;
        }
      }
      while (v28 != v27);
    }
LABEL_104:
    float v64 = *v27;
    operator delete(v6);
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v63 = (id)qword_1EA3C9F98;
    float v64 = 0.0;
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v82[0]) = 0;
      _os_log_impl(&dword_1C492D000, v63, OS_LOG_TYPE_ERROR, "Encounted unexpected empty inks", (uint8_t *)v82, 2u);
    }
  }
  return v64;
}

void sub_1C4BE2618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep::getDimensionsToRender(CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep *this, double ***a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    double v5 = 1.79769313e308;
    double v9 = -1.79769313e308;
    double v7 = -1.79769313e308;
    double v8 = 1.79769313e308;
  }
  else
  {
    double v5 = 1.79769313e308;
    double v6 = -1.79769313e308;
    double v7 = -1.79769313e308;
    double v8 = 1.79769313e308;
    do
    {
      int64x2_t v10 = *v3;
      int64x2_t v11 = v3[1];
      if (*v3 == v11) {
        goto LABEL_3;
      }
      double v12 = 1.79769313e308;
      double v9 = -1.79769313e308;
      double v13 = -1.79769313e308;
      double v14 = 1.79769313e308;
      do
      {
        double v15 = *v10;
        double v16 = v10[1];
        v10 += 4;
        if (v14 > v15) {
          double v14 = v15;
        }
        if (v13 < v15) {
          double v13 = v15;
        }
        if (v12 > v16) {
          double v12 = v16;
        }
        if (v9 < v16) {
          double v9 = v16;
        }
      }
      while (v10 != v11);
      if (v8 > v14) {
        double v8 = v14;
      }
      if (v7 < v13) {
        double v7 = v13;
      }
      if (v5 > v12) {
        double v5 = v12;
      }
      if (v6 >= v9) {
LABEL_3:
      }
        double v9 = v6;
      v3 += 3;
      double v6 = v9;
    }
    while (v3 != v4);
  }
  float v17 = CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep::estimateInkSymbolSize(this, (const CoreHandwriting::Ink *)a2);
  if (v17 <= 0.0) {
    return 1;
  }
  double v18 = (float)((float)*((unint64_t *)this + 5) / v17);
  unint64_t v19 = (unint64_t)fmin((v9 - v5) * v18, (double)*((int *)this + 7));
  unint64_t v20 = (unint64_t)fmin((v7 - v8) * v18, (double)*((int *)this + 8));
  unint64_t v21 = *((int *)this + 5);
  if (v19 < v21)
  {
    unint64_t v22 = *((int *)this + 6);
    float v23 = (v7 - v8) / fmax(v9 - v5, 1.0);
    if (v19 <= v20) {
      unint64_t v21 = (unint64_t)(float)((float)v22 / v23);
    }
    if (v20 < v22) {
      unint64_t v19 = v21;
    }
  }
  return (unint64_t)fmax((double)v19, 1.0);
}

uint64_t CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep::numDimensions(CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep *this)
{
  return *((void *)this + 5);
}

char *CoreHandwriting::FeatureExtractionProcessor::addStep(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = *(void **)(a1 + 8);
  if ((unint64_t)v3 >= *(void *)(a1 + 16))
  {
    __n128 result = sub_1C4BE3350((char **)a1, &v5);
  }
  else
  {
    void *v3 = a2;
    __n128 result = (char *)(v3 + 1);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t CoreHandwriting::FeatureExtractionProcessor::pyAddStep(void *a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 32))(&v7, a2);
  uint64_t v3 = (uint64_t *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t v5 = sub_1C4BE3504(a1, &v7);
  }
  else
  {
    uint64_t v4 = v7;
    uint64_t v7 = 0;
    uint64_t *v3 = v4;
    uint64_t v5 = v3 + 1;
  }
  a1[1] = v5;
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1C4BE2920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::FeatureExtractionProcessor::process(CoreHandwriting::FeatureExtractionProcessor *this@<X0>, char **a2@<X8>)
{
  sub_1C4B19D48((uint64_t)a2);
  uint64_t v6 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  while (v6 != v5)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v6 + 16))(v7);
    CoreHandwriting::FeatureArray::concat(a2, (char **)v7);
    if (__p)
    {
      int64x2_t v11 = __p;
      operator delete(__p);
    }
    if (v8)
    {
      double v9 = v8;
      operator delete(v8);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
    v6 += 8;
  }
}

void sub_1C4BE2A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4A6EE00((uint64_t)va);
  sub_1C4A6EE00(v2);
  _Unwind_Resume(a1);
}

void sub_1C4BE2A3C(_Unwind_Exception *a1)
{
  sub_1C4A6EE00(v1);
  _Unwind_Resume(a1);
}

CoreHandwriting::FeatureExtractionProcessor *CoreHandwriting::FeatureExtractionProcessor::FeatureExtractionProcessor(CoreHandwriting::FeatureExtractionProcessor *this, const CoreHandwriting::FeatureExtractionProcessor *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  while (v3 != v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v3 + 32))(&v10);
    uint64_t v5 = (uint64_t *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2))
    {
      uint64_t v7 = sub_1C4BE3504(this, &v10);
    }
    else
    {
      uint64_t v6 = v10;
      uint64_t v10 = 0;
      uint64_t *v5 = v6;
      uint64_t v7 = v5 + 1;
    }
    *((void *)this + 1) = v7;
    uint64_t v8 = v10;
    uint64_t v10 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    v3 += 8;
  }
  return this;
}

void sub_1C4BE2B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
    sub_1C4A6E49C(v10);
    _Unwind_Resume(a1);
  }
  sub_1C4A6E49C(v10);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::FeatureExtractionProcessor::operator=(uint64_t a1, const CoreHandwriting::FeatureExtractionProcessor *a2)
{
  CoreHandwriting::FeatureExtractionProcessor::FeatureExtractionProcessor((CoreHandwriting::FeatureExtractionProcessor *)__p, a2);
  long long v4 = *(_OWORD *)__p;
  uint64_t v5 = *(void *)&__p[16];
  *(void *)__p = *(void *)a1;
  uint64_t v3 = *(void **)__p;
  long long v6 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)&__p[8] = v6;
  if (v3)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = v3;
    if ((void *)v6 != v3)
    {
      do
      {
        uint64_t v10 = *--v7;
        uint64_t v9 = v10;
        void *v7 = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
      while (v7 != v3);
      uint64_t v8 = *(void **)__p;
    }
    *(void *)&__p[8] = v3;
    operator delete(v8);
  }
  return a1;
}

void sub_1C4BE2C48()
{
}

uint64_t sub_1C4BE2C5C()
{
  return 1;
}

void sub_1C4BE2C64()
{
}

void sub_1C4BE2CC0()
{
}

uint64_t sub_1C4BE2CD4()
{
  return 2;
}

void sub_1C4BE2CDC()
{
}

void sub_1C4BE2D38()
{
}

uint64_t sub_1C4BE2D4C()
{
  return 1;
}

void sub_1C4BE2D54()
{
}

void sub_1C4BE2DB0()
{
}

uint64_t sub_1C4BE2DC4()
{
  return 1;
}

void sub_1C4BE2DCC()
{
}

void sub_1C4BE2E28()
{
}

uint64_t sub_1C4BE2E3C()
{
  return 1;
}

void sub_1C4BE2E44()
{
}

void sub_1C4BE2EA0()
{
}

uint64_t sub_1C4BE2EB4()
{
  return 2;
}

void sub_1C4BE2EBC()
{
}

void sub_1C4BE2F20()
{
}

void sub_1C4BE2F34()
{
}

void sub_1C4BE2FAC()
{
}

void sub_1C4BE2FC0()
{
}

uint64_t sub_1C4BE3034(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  long long v4 = *(unsigned char **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 == *(void *)a2)
  {
    uint64_t v9 = *(unsigned char **)a2;
  }
  else
  {
    if (v5 < 0) {
      sub_1C494A220();
    }
    uint64_t v7 = (char *)operator new(v3 - *(void *)a2);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v7;
    uint64_t v8 = &v7[4 * (v5 >> 2)];
    *(void *)(a1 + 64) = v8;
    memcpy(v7, v4, v5);
    *(void *)(a1 + 56) = v8;
    long long v4 = *(unsigned char **)a2;
    uint64_t v9 = *(unsigned char **)(a2 + 8);
  }
  uint64_t v10 = operator new(0x10uLL);
  double v13 = v10 + 2;
  double v14 = v10 + 2;
  *uint64_t v10 = (v9 - v4) >> 2;
  v10[1] = 1;
  __p = v10;
  sub_1C4BDF4EC((char **)a1, (char **)&__p);
  if (__p)
  {
    double v13 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1C4BE311C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    double v14 = *v12;
    if (!*v12)
    {
LABEL_3:
      double v15 = *(void **)(v11 + 24);
      if (!v15) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    double v14 = *v12;
    if (!*v12) {
      goto LABEL_3;
    }
  }
  *(void *)(v11 + 56) = v14;
  operator delete(v14);
  double v15 = *(void **)(v11 + 24);
  if (!v15)
  {
LABEL_4:
    double v16 = *(void **)v11;
    if (!*(void *)v11) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v11 + 32) = v15;
  operator delete(v15);
  double v16 = *(void **)v11;
  if (!*(void *)v11) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  *(void *)(v11 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C4BE31A8(uint64_t a1, char **a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v3 = a1 + 48;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_1C4BDF4EC((char **)a1, a2);
  int64_t v5 = *(char **)a1;
  long long v4 = *(char **)(a1 + 8);
  if (*(char **)a1 != v4)
  {
    unint64_t v6 = v4 - v5 - 8;
    if (v6 >= 0x38)
    {
      uint64_t v15 = (v6 >> 3) + 1;
      uint64_t v8 = &v5[8 * (v15 & 0x3FFFFFFFFFFFFFF8)];
      double v16 = (int32x4_t *)(v5 + 32);
      v17.i64[0] = 0x100000001;
      v17.i64[1] = 0x100000001;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFF8;
      v19.i64[0] = 0x100000001;
      v19.i64[1] = 0x100000001;
      do
      {
        int32x4_t v21 = v16[-2];
        int32x4_t v20 = v16[-1];
        int32x4_t v23 = *v16;
        int32x4_t v22 = v16[1];
        v16 += 4;
        int32x4_t v17 = vmulq_s32(v17, vuzp1q_s32(v21, v20));
        int32x4_t v19 = vmulq_s32(v19, vuzp1q_s32(v23, v22));
        v18 -= 8;
      }
      while (v18);
      int8x16_t v24 = (int8x16_t)vmulq_s32(v19, v17);
      *(int32x2_t *)v24.i8 = vmul_s32(*(int32x2_t *)v24.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
      int v7 = v24.i32[0] * v24.i32[1];
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFF8))
      {
LABEL_11:
        uint64_t v9 = v7;
        int v27 = 0;
        uint64_t v10 = *(void *)(a1 + 48);
        unint64_t v26 = (*(void *)(a1 + 56) - v10) >> 2;
        BOOL v12 = v7 >= v26;
        unint64_t v13 = v7 - v26;
        if (v7 > v26) {
          goto LABEL_12;
        }
        goto LABEL_5;
      }
    }
    else
    {
      int v7 = 1;
      uint64_t v8 = *(char **)a1;
    }
    do
    {
      int v25 = *(_DWORD *)v8;
      v8 += 8;
      v7 *= v25;
    }
    while (v8 != v4);
    goto LABEL_11;
  }
  uint64_t v9 = 1;
  int v27 = 0;
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = (*(void *)(a1 + 56) - v10) >> 2;
  BOOL v12 = v11 <= 1;
  unint64_t v13 = 1 - v11;
  if (!v11)
  {
LABEL_12:
    sub_1C49AB714(v3, v13, (const float *)&v27);
    return a1;
  }
LABEL_5:
  if (!v12)
  {
    *(void *)(a1 + 56) = v10 + 4 * v9;
    return a1;
  }
  return a1;
}

void sub_1C4BE32F8(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
    int64_t v5 = *(void **)(v1 + 24);
    if (!v5)
    {
LABEL_3:
      unint64_t v6 = *(void **)v1;
      if (!*(void *)v1) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v5 = *(void **)(v1 + 24);
    if (!v5) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 32) = v5;
  operator delete(v5);
  unint64_t v6 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  *(void *)(v1 + 8) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

char *sub_1C4BE3350(char **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = v2 - *a1;
  uint64_t v5 = v4 >> 3;
  unint64_t v6 = (v4 >> 3) + 1;
  if (v6 >> 61) {
    sub_1C494A220();
  }
  uint64_t v9 = a1[2] - v3;
  if (v9 >> 2 > v6) {
    unint64_t v6 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 >> 61) {
      sub_1C4949AA8();
    }
    unint64_t v11 = (char *)operator new(8 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  BOOL v12 = &v11[8 * v5];
  unint64_t v13 = &v11[8 * v10];
  *(void *)BOOL v12 = *a2;
  double v14 = v12 + 8;
  if (v2 == v3)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    unint64_t v15 = v2 - v3 - 8;
    if (v15 < 0x78 || &v2[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v2) {
      goto LABEL_31;
    }
    uint64_t v16 = (v15 >> 3) + 1;
    uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v12 -= v17;
    uint64_t v18 = &v2[-v17];
    int32x4_t v19 = v2 - 16;
    int32x4_t v20 = &v11[8 * v5 - 16];
    uint64_t v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *((_OWORD *)v19 - 1);
      long long v22 = *(_OWORD *)v19;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)int32x4_t v19 = 0uLL;
      *((_OWORD *)v20 - 1) = v23;
      *(_OWORD *)int32x4_t v20 = v22;
      v19 -= 32;
      v20 -= 32;
      v21 -= 4;
    }
    while (v21);
    uint64_t v2 = v18;
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v24 = *((void *)v2 - 1);
        v2 -= 8;
        *(void *)uint64_t v2 = 0;
        *((void *)v12 - 1) = v24;
        v12 -= 8;
      }
      while (v2 != v3);
    }
    uint64_t v2 = *a1;
    int v25 = a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    while (v25 != v2)
    {
      uint64_t v27 = *((void *)v25 - 1);
      v25 -= 8;
      uint64_t v26 = v27;
      *(void *)int v25 = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v14;
}

void *sub_1C4BE3504(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    sub_1C494A220();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      sub_1C4949AA8();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = &v9[8 * v3];
  unint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)unint64_t v10 = v12;
  unint64_t v13 = v10 + 8;
  double v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v18;
    int32x4_t v19 = &v15[-v18];
    int32x4_t v20 = v15 - 16;
    uint64_t v21 = &v9[8 * v3 - 16];
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v20 - 1);
      long long v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)int32x4_t v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)uint64_t v21 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    unint64_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)unint64_t v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    unint64_t v15 = (char *)*a1;
    uint64_t v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v26 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

id sub_1C4BE3718(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (a1)
  {
    unint64_t v8 = objc_msgSend_synthesisOptionsWithDictionary_(CHSynthesisRequestOptions, v3, (uint64_t)v7, v4, v5, v6);
    unsigned int v14 = objc_msgSend_skipStyleInventoryLookup(v8, v9, v10, v11, v12, v13);
    objc_msgSend_setSkipStyleInventoryLookup_(v8, v15, *(unsigned __int8 *)(a1 + 8) | v14, v16, v17, v18);
    unsigned int v24 = objc_msgSend_saveStyleSample(v8, v19, v20, v21, v22, v23);
    objc_msgSend_setSaveStyleSample_(v8, v25, *(unsigned __int8 *)(a1 + 9) | v24, v26, v27, v28);
  }
  else
  {
    unint64_t v8 = 0;
  }

  return v8;
}

void sub_1C4BE37B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE37C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE3964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE3988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE39A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4BE39BC(void *a1, void *a2, void *a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (a1)
  {
    sub_1C4BE4418(a1);
    uint64_t v6 = a1;
    objc_sync_enter(v6);
    id v7 = v6[3];
    objc_sync_exit(v6);

    if (!v7)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      unint64_t v8 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v8, OS_LOG_TYPE_FAULT, "XPC connection must be non-nil", buf, 2u);
      }
    }
    *(void *)long long buf = 0;
    float v65 = buf;
    uint64_t v66 = 0x3032000000;
    float v67 = sub_1C4BE4884;
    float v68 = sub_1C4BE4894;
    id v69 = 0;
    uint64_t v9 = v6;
    objc_sync_enter(v9);
    id v10 = v6[3];
    objc_sync_exit(v9);

    v63[0] = MEMORY[0x1E4F143A8];
    v63[1] = 3221225472;
    v63[2] = sub_1C4BE489C;
    v63[3] = &unk_1E64E10C8;
    v63[4] = buf;
    unint64_t v15 = objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v10, v11, (uint64_t)v63, v12, v13, v14);

    uint64_t v57 = 0;
    float v58 = &v57;
    uint64_t v59 = 0x3032000000;
    int v60 = sub_1C4BE4884;
    float v61 = sub_1C4BE4894;
    id v62 = 0;
    uint64_t v51 = 0;
    double v52 = (uint8_t *)&v51;
    uint64_t v53 = 0x3032000000;
    int v54 = sub_1C4BE4884;
    float v55 = sub_1C4BE4894;
    id v56 = 0;
    uint64_t v47 = 0;
    float v48 = &v47;
    uint64_t v49 = 0x2020000000;
    char v50 = 0;
    uint64_t v38 = MEMORY[0x1E4F143A8];
    uint64_t v39 = 3221225472;
    unint64_t v40 = sub_1C4BE49BC;
    double v41 = &unk_1E64E4F18;
    float v44 = &v57;
    double v45 = &v51;
    float v42 = v9;
    id v16 = v5;
    id v43 = v16;
    float v46 = &v47;
    objc_msgSend_handleRequest_withReply_(v15, v17, (uint64_t)v16, (uint64_t)&v38, v18, v19);
    if (!*((unsigned char *)v48 + 24))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v20 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v70 = 0;
        _os_log_impl(&dword_1C492D000, v20, OS_LOG_TYPE_ERROR, "Remote Synthesis request did not execute reply block", v70, 2u);
      }

      sub_1C4BE4BB8((uint64_t)v9, v16, 0, *((void **)v65 + 5));
    }
    if (!a3) {
      goto LABEL_28;
    }
    if (*((void *)v65 + 5))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v21 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = objc_msgSend_localizedDescription(*((void **)v65 + 5), v22, v23, v24, v25, v26, v38, v39, v40, v41, v42);
        *(_DWORD *)uint64_t v70 = 138412290;
        float v71 = v27;
        _os_log_impl(&dword_1C492D000, v21, OS_LOG_TYPE_ERROR, "Connection Error in Remote Synthesis request: %@", v70, 0xCu);
      }
      uint64_t v28 = v65;
    }
    else
    {
      if (!*((void *)v52 + 5))
      {
LABEL_28:
        id v36 = (id)v58[5];

        _Block_object_dispose(&v47, 8);
        _Block_object_dispose(&v51, 8);

        _Block_object_dispose(&v57, 8);
        _Block_object_dispose(buf, 8);

        goto LABEL_29;
      }
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      int8x16_t v29 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        float v35 = objc_msgSend_localizedDescription(*((void **)v52 + 5), v30, v31, v32, v33, v34, v38, v39, v40, v41, v42);
        *(_DWORD *)uint64_t v70 = 138412290;
        float v71 = v35;
        _os_log_impl(&dword_1C492D000, v29, OS_LOG_TYPE_ERROR, "Error in Remote Synthesis request: %@", v70, 0xCu);
      }
      uint64_t v28 = v52;
    }
    *a3 = *((id *)v28 + 5);
    goto LABEL_28;
  }
  id v36 = 0;
LABEL_29:

  return v36;
}

void sub_1C4BE3F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v36 - 160), 8);

  _Unwind_Resume(a1);
}

void sub_1C4BE4144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE435C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE4408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE4418(void *a1)
{
  uint64_t v1 = a1;
  objc_sync_enter(v1);
  if (!v1[3])
  {
    id v2 = objc_alloc(MEMORY[0x1E4F29268]);
    uint64_t v6 = objc_msgSend_initWithMachServiceName_options_(v2, v3, @"com.apple.handwritingd.remoterecognition", 0, v4, v5);
    id v7 = v1[3];
    v1[3] = (void *)v6;

    uint64_t v12 = objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E4F29280], v8, (uint64_t)&unk_1F2063C40, v9, v10, v11);
    uint64_t v13 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v14 = objc_opt_class();
    uint64_t v15 = objc_opt_class();
    uint64_t v20 = objc_msgSend_setWithObjects_(v13, v16, v14, v17, v18, v19, v15, 0);
    objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v12, v21, (uint64_t)v20, (uint64_t)sel_handleRequest_withReply_, 0, 1);
    objc_msgSend_setRemoteObjectInterface_(v1[3], v22, (uint64_t)v12, v23, v24, v25);
    objc_initWeak(&location, v1);
    uint64_t v26 = v1[3];
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3221225472;
    v40[2] = sub_1C4BE4628;
    v40[3] = &unk_1E64E1E78;
    objc_copyWeak(&v41, &location);
    objc_msgSend_setInterruptionHandler_(v26, v27, (uint64_t)v40, v28, v29, v30);
    objc_msgSend_setInvalidationHandler_(v1[3], v31, (uint64_t)&unk_1F2013070, v32, v33, v34);
    objc_msgSend_resume(v1[3], v35, v36, v37, v38, v39);
    objc_destroyWeak(&v41);
    objc_destroyWeak(&location);
  }
  objc_sync_exit(v1);
}

void sub_1C4BE45B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);

  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_1C4BE460C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4BE4628(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_1C4BE46E0(WeakRetained);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v2 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C492D000, v2, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was interrupted", v3, 2u);
  }
}

void sub_1C4BE46D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE46E0(void *a1)
{
  if (a1)
  {
    obunint64_t j = a1;
    objc_sync_enter(obj);
    objc_msgSend_invalidate(obj[3], v1, v2, v3, v4, v5);
    uint64_t v6 = obj[3];
    obj[3] = 0;

    objc_sync_exit(obj);
  }
}

void sub_1C4BE475C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE4778()
{
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  v0 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_1C492D000, v0, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was invalidated", v1, 2u);
  }
}

void sub_1C4BE4854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHRemoteTextSynthesizer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BE4884(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4BE4894(uint64_t a1)
{
}

void sub_1C4BE489C(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    int v13 = 138412290;
    uint64_t v14 = v10;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v3;
}

void sub_1C4BE49A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE49BC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v9 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_DEFAULT, "Result retrieved for remote synthesis", (uint8_t *)&v16, 2u);
    }
LABEL_11:

    goto LABEL_12;
  }
  if (v7)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v9 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = objc_msgSend_localizedDescription(v8, v10, v11, v12, v13, v14);
      int v16 = 138412290;
      uint64_t v17 = v15;
      _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_ERROR, "Error during remote synthesis: %@", (uint8_t *)&v16, 0xCu);
    }
    goto LABEL_11;
  }
LABEL_12:
  sub_1C4BE4BB8(*(void *)(a1 + 32), *(void **)(a1 + 40), v6, v8);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
}

void sub_1C4BE4B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE4BB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v239 = *MEMORY[0x1E4F143B8];
  uint64_t v218 = a2;
  id v217 = a3;
  id v216 = a4;
  if (a1 && (os_variant_has_internal_diagnostics() & 1) != 0)
  {
    uint64_t v12 = objc_msgSend_standardUserDefaults(MEMORY[0x1E4F1CB18], v7, v8, v9, v10, v11);
    uint64_t v17 = objc_msgSend_dictionaryForKey_(v12, v13, @"com.apple.corehandwriting", v14, v15, v16);

    uint64_t v214 = v17;
    uint64_t v22 = objc_msgSend_objectForKey_(v17, v18, @"CHLogAllSynthesisRequests", v19, v20, v21);
    char v28 = objc_msgSend_BOOLValue(v22, v23, v24, v25, v26, v27);

    if ((v28 & 1) == 0)
    {
LABEL_41:

      goto LABEL_42;
    }
    if (qword_1EA3C9520 != -1) {
      dispatch_once(&qword_1EA3C9520, &unk_1F2013C48);
    }
    id v213 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    objc_msgSend_setDateFormat_(v213, v29, @"dd-MM-yyyy-HH-mm-ss-SSS", v30, v31, v32);
    uint64_t v38 = objc_msgSend_UUID(MEMORY[0x1E4F29128], v33, v34, v35, v36, v37);
    float v44 = objc_msgSend_UUIDString(v38, v39, v40, v41, v42, v43);
    uint64_t v215 = objc_msgSend_substringToIndex_(v44, v45, 4, v46, v47, v48);

    int v54 = objc_msgSend_now(MEMORY[0x1E4F1C9C8], v49, v50, v51, v52, v53);
    uint64_t v59 = objc_msgSend_stringFromDate_(v213, v55, (uint64_t)v54, v56, v57, v58);

    objc_msgSend_stringWithFormat_(NSString, v60, @"request_%@_%@.hsr", v61, v62, v63, v59, v215);
    uint64_t v211 = (NSURL *)objc_claimAutoreleasedReturnValue();
    id v65 = CoreHandwriting::writeObjectToFileInFolder(v218, (objc_object *)qword_1EA3C9518, v211, v64);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v66 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_options(v218, v67, v68, v69, v70, v71);
      uint64_t v72 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138412290;
      uint64_t v234 = v72;
      _os_log_impl(&dword_1C492D000, v66, OS_LOG_TYPE_DEFAULT, "CHLogAllSynthesisRequests synth request with options = %@", buf, 0xCu);
    }
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v73 = (id)qword_1EA3C9FD8;
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_13;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v73 = (id)qword_1EA3C9FD8;
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
LABEL_13:

        float v79 = objc_msgSend_drawing(v218, v74, v75, v76, v77, v78);
        BOOL v80 = v79 == 0;

        if (v80) {
          goto LABEL_18;
        }
        objc_msgSend_stringWithFormat_(NSString, v81, @"input_drawing_%@_%@.json", v83, v84, v85, v59, v215);
        int v86 = (NSURL *)objc_claimAutoreleasedReturnValue();
        unint64_t v92 = objc_msgSend_drawing(v218, v87, v88, v89, v90, v91);
        uint64_t v231 = @"string";
        uint64_t v98 = objc_msgSend_string(v218, v93, v94, v95, v96, v97);
        uint64_t v232 = v98;
        float v101 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v99, (uint64_t)&v232, (uint64_t)&v231, 1, v100);
        objc_msgSend_writeToFileWithContext_folder_basename_(v92, v102, (uint64_t)v101, qword_1EA3C9518, (uint64_t)v86, v103);

        if (qword_1EA3CA000 == -1)
        {
          int v104 = (id)qword_1EA3C9FD8;
          if (!os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
          {
LABEL_17:

LABEL_18:
            int v105 = objc_msgSend_options(v218, v81, v82, v83, v84, v85);
            unint64_t v111 = objc_msgSend_styleDrawing(v105, v106, v107, v108, v109, v110);
            BOOL v112 = v111 == 0;

            if (v112)
            {
LABEL_23:
              if (!v217
                || (objc_msgSend_drawing(v217, v113, v114, v115, v116, v117),
                    int v148 = objc_claimAutoreleasedReturnValue(),
                    BOOL v149 = v148 == 0,
                    v148,
                    v149))
              {
                if (qword_1EA3CA000 != -1) {
                  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                }
                uint64_t v210 = (id)qword_1EA3C9FD8;
                uint64_t v212 = (NSURL *)v210;
                if (os_log_type_enabled(v210, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 138412546;
                  uint64_t v234 = @"CHLogAllSynthesisRequests";
                  __int16 v235 = 2112;
                  uint64_t v236 = (uint64_t)v216;
                  _os_log_impl(&dword_1C492D000, v210, OS_LOG_TYPE_ERROR, "%@ skipping serialization of nil result. Error = %@", buf, 0x16u);
                }
                goto LABEL_40;
              }
              objc_msgSend_stringWithFormat_(NSString, v150, @"result_%@_%@.json", v151, v152, v153, v59, v215);
              uint64_t v212 = (NSURL *)objc_claimAutoreleasedReturnValue();
              if (qword_1EA3CA000 == -1)
              {
                uint64_t v154 = (id)qword_1EA3C9FD8;
                if (!os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
                {
LABEL_28:

                  uint64_t v219 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v155, v156, v157, v158, v159);
                  long long v224 = 0u;
                  long long v225 = 0u;
                  long long v222 = 0u;
                  long long v223 = 0u;
                  int v165 = objc_msgSend_segmentStrokeIndexes(v217, v160, v161, v162, v163, v164);
                  uint64_t v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v165, v166, (uint64_t)&v222, (uint64_t)v228, 16, v167);
                  if (v173)
                  {
                    uint64_t v174 = *(void *)v223;
                    do
                    {
                      for (uint64_t i = 0; i != v173; ++i)
                      {
                        if (*(void *)v223 != v174) {
                          objc_enumerationMutation(v165);
                        }
                        double v176 = *(void **)(*((void *)&v222 + 1) + 8 * i);
                        uint64x2_t v177 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v168, v169, v170, v171, v172);
                        v220[0] = MEMORY[0x1E4F143A8];
                        v220[1] = 3221225472;
                        v220[2] = sub_1C4BE5880;
                        v220[3] = &unk_1E64E19F0;
                        id v178 = v177;
                        id v221 = v178;
                        objc_msgSend_enumerateIndexesUsingBlock_(v176, v179, (uint64_t)v220, v180, v181, v182);
                        objc_msgSend_addObject_(v219, v183, (uint64_t)v178, v184, v185, v186);
                      }
                      uint64_t v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v165, v168, (uint64_t)&v222, (uint64_t)v228, 16, v172);
                    }
                    while (v173);
                  }

                  uint64_t v192 = objc_msgSend_drawing(v217, v187, v188, v189, v190, v191);
                  v226[0] = @"string";
                  uint64_t v198 = objc_msgSend_content(v217, v193, v194, v195, v196, v197);
                  v227[0] = v198;
                  v226[1] = @"segmentContents";
                  uint64_t v204 = objc_msgSend_segmentContents(v217, v199, v200, v201, v202, v203);
                  v226[2] = @"segmentStrokeIndexes";
                  v227[1] = v204;
                  v227[2] = v219;
                  uint64_t v207 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v205, (uint64_t)v227, (uint64_t)v226, 3, v206);
                  objc_msgSend_writeToFileWithContext_folder_basename_(v192, v208, (uint64_t)v207, qword_1EA3C9518, (uint64_t)v212, v209);

LABEL_40:
                  goto LABEL_41;
                }
              }
              else
              {
                dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                uint64_t v154 = (id)qword_1EA3C9FD8;
                if (!os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_28;
                }
              }
              *(_DWORD *)long long buf = 138412802;
              uint64_t v234 = @"CHLogAllSynthesisRequests";
              __int16 v235 = 2112;
              uint64_t v236 = qword_1EA3C9518;
              __int16 v237 = 2112;
              id v238 = v212;
              _os_log_impl(&dword_1C492D000, v154, OS_LOG_TYPE_DEFAULT, "%@ serialize synthesis result to %@/%@, ", buf, 0x20u);
              goto LABEL_28;
            }
            int v118 = objc_msgSend_options(v218, v113, v114, v115, v116, v117);
            uint64_t v124 = objc_msgSend_styleDrawing(v118, v119, v120, v121, v122, v123);

            objc_msgSend_stringWithFormat_(NSString, v125, @"style_drawing_%@_%@.json", v126, v127, v128, v59, v215);
            int v129 = (NSURL *)objc_claimAutoreleasedReturnValue();
            uint64_t v229 = @"string";
            int v135 = objc_msgSend_options(v218, v130, v131, v132, v133, v134);
            unint64_t v141 = objc_msgSend_styleContent(v135, v136, v137, v138, v139, v140);
            uint64_t v230 = v141;
            unint64_t v144 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v142, (uint64_t)&v230, (uint64_t)&v229, 1, v143);
            objc_msgSend_writeToFileWithContext_folder_basename_(v124, v145, (uint64_t)v144, qword_1EA3C9518, (uint64_t)v129, v146);

            if (qword_1EA3CA000 == -1)
            {
              unint64_t v147 = (id)qword_1EA3C9FD8;
              if (!os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
              {
LABEL_22:

                goto LABEL_23;
              }
            }
            else
            {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
              unint64_t v147 = (id)qword_1EA3C9FD8;
              if (!os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_22;
              }
            }
            *(_DWORD *)long long buf = 138412802;
            uint64_t v234 = @"CHLogAllSynthesisRequests";
            __int16 v235 = 2112;
            uint64_t v236 = qword_1EA3C9518;
            __int16 v237 = 2112;
            id v238 = v129;
            _os_log_impl(&dword_1C492D000, v147, OS_LOG_TYPE_DEFAULT, "%@ serialize style drawing to %@/%@, ", buf, 0x20u);
            goto LABEL_22;
          }
        }
        else
        {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          int v104 = (id)qword_1EA3C9FD8;
          if (!os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_17;
          }
        }
        *(_DWORD *)long long buf = 138412802;
        uint64_t v234 = @"CHLogAllSynthesisRequests";
        __int16 v235 = 2112;
        uint64_t v236 = qword_1EA3C9518;
        __int16 v237 = 2112;
        id v238 = v86;
        _os_log_impl(&dword_1C492D000, v104, OS_LOG_TYPE_DEFAULT, "%@ serialize input drawing to %@/%@, ", buf, 0x20u);
        goto LABEL_17;
      }
    }
    *(_DWORD *)long long buf = 138412802;
    uint64_t v234 = @"CHLogAllSynthesisRequests";
    __int16 v235 = 2112;
    uint64_t v236 = qword_1EA3C9518;
    __int16 v237 = 2112;
    id v238 = v211;
    _os_log_impl(&dword_1C492D000, v73, OS_LOG_TYPE_DEFAULT, "%@ serialize request to %@/%@, ", buf, 0x20u);
    goto LABEL_13;
  }
LABEL_42:
}

void sub_1C4BE558C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE5784(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6 = objc_msgSend_UUID(MEMORY[0x1E4F29128], a2, a3, a4, a5, a6);
  objc_msgSend_UUIDString(v6, v7, v8, v9, v10, v11);
  id v25 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v12 = (void *)MEMORY[0x1E4F1CB10];
  uint64_t v13 = NSTemporaryDirectory();
  uint64_t v18 = objc_msgSend_fileURLWithPath_(v12, v14, (uint64_t)v13, v15, v16, v17);
  uint64_t v23 = objc_msgSend_URLByAppendingPathComponent_(v18, v19, (uint64_t)v25, v20, v21, v22);
  uint64_t v24 = (void *)qword_1EA3C9518;
  qword_1EA3C9518 = v23;
}

void sub_1C4BE582C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1C4BE5854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE5868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE5880(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6 = *(void **)(a1 + 32);
  objc_msgSend_numberWithUnsignedInteger_(NSNumber, a2, (uint64_t)a2, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4BE58E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE59C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE59E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4BE59F8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    sub_1C4BE4418(a1);
    id v6 = a1;
    objc_sync_enter(v6);
    id v7 = v6[3];
    objc_sync_exit(v6);

    if (!v7)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v8 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v8, OS_LOG_TYPE_FAULT, "XPC connection must be non-nil", buf, 2u);
      }
    }
    *(void *)long long buf = 0;
    uint64_t v31 = buf;
    uint64_t v32 = 0x3032000000;
    uint64_t v33 = sub_1C4BE4884;
    uint64_t v34 = sub_1C4BE4894;
    id v35 = 0;
    uint64_t v9 = v6;
    objc_sync_enter(v9);
    id v10 = v6[3];
    objc_sync_exit(v9);

    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = sub_1C4BE5E6C;
    v29[3] = &unk_1E64E10C8;
    v29[4] = buf;
    uint64_t v15 = objc_msgSend_remoteObjectProxyWithErrorHandler_(v10, v11, (uint64_t)v29, v12, v13, v14);

    uint64_t v23 = 0;
    uint64_t v24 = &v23;
    uint64_t v25 = 0x3032000000;
    uint64_t v26 = sub_1C4BE4884;
    uint64_t v27 = sub_1C4BE4894;
    id v28 = 0;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = sub_1C4BE5F8C;
    v22[3] = &unk_1E64E4F40;
    v22[4] = v9;
    v22[5] = &v23;
    objc_msgSend_handleInventoryRequest_withReply_(v15, v16, (uint64_t)v5, (uint64_t)v22, v17, v18);
    if (a3)
    {
      uint64_t v19 = (void *)*((void *)v31 + 5);
      if (!v19) {
        uint64_t v19 = (void *)v24[5];
      }
      *a3 = v19;
    }
    if (*((void *)v31 + 5)) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v24[5] == 0;
    }
    _Block_object_dispose(&v23, 8);

    _Block_object_dispose(buf, 8);
  }
  else
  {
    BOOL v20 = 0;
  }

  return v20;
}

void sub_1C4BE5CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4BE5D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE5DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE5DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE5E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE5E6C(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    id v10 = objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    int v13 = 138412290;
    uint64_t v14 = v10;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v3;
}

void sub_1C4BE5F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE5F8C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (!v6)
  {
    if (v7)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v9 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v21 = objc_msgSend_localizedDescription(v8, v16, v17, v18, v19, v20);
        int v22 = 138412290;
        uint64_t v23 = v21;
        _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_DEBUG, "Error during inventory request: %@", (uint8_t *)&v22, 0xCu);
      }
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v9 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v22) = 0;
        _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_ERROR, "Inventory request unexpected results. No inventory or error were returned", (uint8_t *)&v22, 2u);
      }
    }
    goto LABEL_16;
  }
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), a2);
  if (os_variant_has_internal_diagnostics())
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v9 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = objc_msgSend_description(v6, v10, v11, v12, v13, v14);
      int v22 = 138412290;
      uint64_t v23 = v15;
      _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_DEFAULT, "Status retrieved for inventory request. %@", (uint8_t *)&v22, 0xCu);
    }
LABEL_16:
  }
}

void sub_1C4BE61DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE61F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4BE62C8(void *a1, int a2)
{
  if (a1)
  {
    sub_1C4BE4418(a1);
    uint64_t v4 = a1;
    objc_sync_enter(v4);
    id v5 = v4[3];
    objc_sync_exit(v4);

    if (!v5)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      id v6 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v6, OS_LOG_TYPE_FAULT, "XPC connection must be non-nil", buf, 2u);
      }
    }
    *(void *)long long buf = 0;
    uint64_t v33 = buf;
    uint64_t v34 = 0x3032000000;
    id v35 = sub_1C4BE4884;
    uint64_t v36 = sub_1C4BE4894;
    id v37 = 0;
    id v7 = v4;
    objc_sync_enter(v7);
    id v8 = v4[3];
    objc_sync_exit(v7);

    if (a2)
    {
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 3221225472;
      v31[2] = sub_1C4BE6760;
      v31[3] = &unk_1E64E10C8;
      v31[4] = buf;
      uint64_t v13 = objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v8, v9, (uint64_t)v31, v10, v11, v12);
    }
    else
    {
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 3221225472;
      v30[2] = sub_1C4BE6880;
      v30[3] = &unk_1E64E10C8;
      v30[4] = buf;
      uint64_t v13 = objc_msgSend_remoteObjectProxyWithErrorHandler_(v8, v9, (uint64_t)v30, v10, v11, v12);
    }
    uint64_t v14 = (void *)v13;

    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x3032000000;
    v28[3] = sub_1C4BE4884;
    v28[4] = sub_1C4BE4894;
    id v29 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = &v24;
    uint64_t v26 = 0x2020000000;
    char v27 = 0;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = sub_1C4BE69A0;
    v23[3] = &unk_1E64E4F68;
    v23[4] = v7;
    v23[5] = v28;
    v23[6] = &v24;
    objc_msgSend_handleInventoryStatusRequestWithReply_(v14, v15, (uint64_t)v23, v16, v17, v18);
    if (a2 && !*((unsigned char *)v25 + 24))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v19 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v22 = 0;
        _os_log_impl(&dword_1C492D000, v19, OS_LOG_TYPE_ERROR, "Inventory status request did not execute reply block", v22, 2u);
      }
    }
    id v20 = v7[2];
    _Block_object_dispose(&v24, 8);
    _Block_object_dispose(v28, 8);

    _Block_object_dispose(buf, 8);
  }
  else
  {
    id v20 = 0;
  }
  return v20;
}

void sub_1C4BE6654(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4BE6760(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    int v13 = 138412290;
    uint64_t v14 = v10;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v3;
}

void sub_1C4BE6868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE6880(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    int v13 = 138412290;
    uint64_t v14 = v10;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v3;
}

void sub_1C4BE6988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE69A0(void *a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(a1[4] + 16), a2);
    if (os_variant_has_internal_diagnostics())
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v9 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = objc_msgSend_description(v6, v10, v11, v12, v13, v14);
        int v22 = 138412290;
        uint64_t v23 = v15;
        _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_DEFAULT, "Status retrieved for inventory status request. %@", (uint8_t *)&v22, 0xCu);
      }
LABEL_12:
    }
  }
  else if (v7)
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a3);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v9 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = objc_msgSend_localizedDescription(v8, v16, v17, v18, v19, v20);
      int v22 = 138412290;
      uint64_t v23 = v21;
      _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_DEBUG, "Error during inventory status request: %@", (uint8_t *)&v22, 0xCu);
    }
    goto LABEL_12;
  }
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
}

void sub_1C4BE6B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE6BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE6CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE6CD8(uint64_t **a1, uint64_t a2, uint64_t *a3, unsigned int a4, int a5, void *a6, float a7)
{
  uint64_t v13 = a6;
  uint64_t v14 = v13;
  if (!a2)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    goto LABEL_153;
  }
  if (!a5)
  {
    uint64_t v122 = a1;
    uint64_t v120 = v13;
    uint64_t v23 = *a3;
    uint64_t v24 = a3[1];
    if (v24 != *a3)
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      char v27 = 0;
      id v28 = 0;
      uint64_t v29 = 0;
      while (1)
      {
        unint64_t v30 = 0x8E38E38E38E38E39 * ((v24 - v23) >> 3);
        unint64_t v31 = v29 + 1;
        unint64_t v123 = v29 + 1;
        if (v29 + 1 < v30) {
          break;
        }
LABEL_26:
        ++v29;
        if (v123 >= v30) {
          goto LABEL_53;
        }
      }
      while (1)
      {
        float DistanceToCluster = CHFastGroupingCluster::getDistanceToCluster((void *)(v23 + 72 * v29), (void *)(v23 + 72 * v31), a4, 0);
        float v33 = DistanceToCluster;
        if (v26 >= (unint64_t)v27) {
          break;
        }
        *(void *)unint64_t v26 = v29;
        *(void *)(v26 + 8) = v31;
        *(float *)(v26 + 16) = DistanceToCluster;
        v26 += 24;
LABEL_30:
        ++v31;
        uint64_t v23 = *a3;
        uint64_t v24 = a3[1];
        unint64_t v30 = 0x8E38E38E38E38E39 * ((v24 - *a3) >> 3);
        if (v31 >= v30)
        {
          id v28 = (long long *)v26;
          goto LABEL_26;
        }
      }
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (void)v25) >> 3) + 1;
      if (v34 > 0xAAAAAAAAAAAAAAALL) {
        sub_1C494A220();
      }
      if (0x5555555555555556 * ((v27 - (char *)v25) >> 3) > v34) {
        unint64_t v34 = 0x5555555555555556 * ((v27 - (char *)v25) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v27 - (char *)v25) >> 3) >= 0x555555555555555) {
        unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35)
      {
        if (v35 > 0xAAAAAAAAAAAAAAALL) {
          sub_1C4949AA8();
        }
        uint64_t v36 = (char *)operator new(24 * v35);
        uint64_t v37 = (uint64_t)&v36[8 * ((uint64_t)(v26 - (void)v25) >> 3)];
        *(void *)uint64_t v37 = v29;
        *(void *)(v37 + 8) = v31;
        *(float *)(v37 + 16) = v33;
        if ((long long *)v26 != v25)
        {
LABEL_41:
          uint64_t v38 = v37;
          do
          {
            uint64_t v39 = (long long *)(v38 - 24);
            long long v40 = *(_OWORD *)(v26 - 24);
            *(void *)(v38 - 8) = *(void *)(v26 - 8);
            *(_OWORD *)(v38 - 24) = v40;
            v26 -= 24;
            v38 -= 24;
          }
          while ((long long *)v26 != v25);
          char v27 = &v36[24 * v35];
          unint64_t v26 = v37 + 24;
          if (!v25) {
            goto LABEL_45;
          }
LABEL_44:
          operator delete(v25);
LABEL_45:
          uint64_t v25 = v39;
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v36 = 0;
        uint64_t v37 = 8 * ((uint64_t)(v26 - (void)v25) >> 3);
        *(void *)uint64_t v37 = v29;
        *(void *)(v37 + 8) = v31;
        *(float *)(v37 + 16) = DistanceToCluster;
        if ((long long *)v26 != v25) {
          goto LABEL_41;
        }
      }
      uint64_t v39 = (long long *)v37;
      char v27 = &v36[24 * v35];
      unint64_t v26 = v37 + 24;
      if (!v25) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    id v28 = 0;
LABEL_53:
    unint64_t v41 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v25) >> 3));
    if (v28 == v25) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = v41;
    }
    sub_1C4BEB030((uint64_t)v25, v28, v42, 1);
    *(void *)long long buf = 0;
    uint64_t v138 = 0;
    unint64_t v139 = 0;
    uint64_t v44 = *a3;
    uint64_t v43 = a3[1];
    int64_t v45 = v43 - *a3;
    if (v43 != *a3)
    {
      unint64_t v46 = 0x8E38E38E38E38E39 * (v45 >> 3);
      if (v46 > 0x38E38E38E38E38ELL) {
        sub_1C494A220();
      }
      *(void *)long long buf = operator new(v45);
      uint64_t v138 = *(void **)buf;
      unint64_t v139 = *(void *)buf + 72 * v46;
      if (v43 != v44)
      {
        uint64_t v121 = v43;
        while (1)
        {
          int v125 = 0;
          unint64_t v126 = 0;
          int v129 = 0;
          int v130 = 0;
          uint64_t v124 = (uint64_t *)&v125;
          uint64_t v128 = &v129;
          sub_1C49A82E4((uint64_t *)&v124, (void *)(v44 + 40));
          uint64_t v131 = 0;
          uint64_t v48 = v138;
          if ((unint64_t)v138 < v139)
          {
            void *v138 = v124;
            uint64_t v49 = v125;
            v48[1] = v125;
            uint64_t v50 = (char *)(v48 + 1);
            unint64_t v51 = v126;
            v48[2] = v126;
            if (v51)
            {
              v49[2] = (uint64_t)v50;
              uint64_t v124 = (uint64_t *)&v125;
              int v125 = 0;
              unint64_t v126 = 0;
            }
            else
            {
              *uint64_t v48 = v50;
            }
            *(_OWORD *)(v48 + 3) = v127;
            v48[5] = v128;
            uint64_t v56 = v129;
            v48[6] = v129;
            uint64_t v57 = (char *)(v48 + 6);
            uint64_t v58 = v130;
            v48[7] = v130;
            if (v58)
            {
              v56[2] = v57;
              uint64_t v128 = &v129;
              int v129 = 0;
              int v130 = 0;
            }
            else
            {
              v48[5] = v57;
            }
            v48[8] = v131;
            uint64_t v47 = v48 + 9;
            goto LABEL_62;
          }
          uint64_t v52 = *(void **)buf;
          unint64_t v53 = 0x8E38E38E38E38E39 * (((uint64_t)v138 - *(void *)buf) >> 3) + 1;
          if (v53 > 0x38E38E38E38E38ELL) {
            sub_1C494A220();
          }
          if (0x1C71C71C71C71C72 * ((uint64_t)(v139 - *(void *)buf) >> 3) > v53) {
            unint64_t v53 = 0x1C71C71C71C71C72 * ((uint64_t)(v139 - *(void *)buf) >> 3);
          }
          unint64_t v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v139 - *(void *)buf) >> 3) >= 0x1C71C71C71C71C7
              ? 0x38E38E38E38E38ELL
              : v53;
          if (v54)
          {
            if (v54 > 0x38E38E38E38E38ELL) {
              sub_1C4949AA8();
            }
            float v55 = operator new(72 * v54);
          }
          else
          {
            float v55 = 0;
          }
          uint64_t v59 = &v55[v48 - v52];
          int v60 = v125;
          *uint64_t v59 = v124;
          v59[1] = v60;
          uint64_t v61 = v59 + 1;
          unint64_t v62 = v126;
          v59[2] = v126;
          if (v62)
          {
            v60[2] = (uint64_t)v61;
            uint64_t v124 = (uint64_t *)&v125;
            int v125 = 0;
            unint64_t v126 = 0;
          }
          else
          {
            *uint64_t v59 = v61;
          }
          uint64_t v63 = (char *)&v55[v48 - v52];
          long long v64 = v127;
          id v65 = v129;
          *((void *)v63 + 5) = v128;
          uint64_t v66 = v63 + 40;
          *((_OWORD *)v66 - 1) = v64;
          v66[1] = v65;
          float v67 = v66 + 1;
          uint64_t v68 = v130;
          v66[2] = v130;
          if (v68)
          {
            v65[2] = v67;
            uint64_t v128 = &v129;
            int v129 = 0;
            int v130 = 0;
          }
          else
          {
            *uint64_t v66 = v67;
          }
          v55[v48 - v52 + 8] = 0;
          uint64_t v47 = v59 + 9;
          if (v48 != v52) {
            break;
          }
          *(void *)long long buf = &v55[v48 - v52];
          uint64_t v138 = v59 + 9;
          unint64_t v139 = (unint64_t)&v55[9 * v54];
          uint64_t v43 = v121;
          if (v48) {
            goto LABEL_100;
          }
LABEL_62:
          uint64_t v138 = v47;
          sub_1C4999C7C((uint64_t)&v128, v129);
          sub_1C494AC4C((uint64_t)&v124, v125);
          v44 += 72;
          if (v44 == v43) {
            goto LABEL_101;
          }
        }
        uint64_t v69 = 0;
        do
        {
          uint64_t v70 = &v59[v69];
          *(v70 - 9) = v48[v69 - 9];
          uint64_t v71 = &v48[v69 - 8];
          uint64_t v72 = *v71;
          v59[v69 - 8] = *v71;
          uint64_t v73 = (uint64_t)&v59[v69 - 8];
          uint64_t v74 = v48[v69 - 7];
          *(v70 - 7) = v74;
          if (v74)
          {
            *(void *)(v72 + 16) = v73;
            v48[v69 - 9] = v71;
            *uint64_t v71 = 0;
            v48[v69 - 7] = 0;
          }
          else
          {
            *(v70 - 9) = v73;
          }
          uint64_t v75 = &v59[v69];
          *((_OWORD *)v75 - 3) = *(_OWORD *)&v48[v69 - 6];
          *(v75 - 4) = v48[v69 - 4];
          uint64_t v76 = &v48[v69 - 3];
          uint64_t v77 = *v76;
          v59[v69 - 3] = *v76;
          uint64_t v78 = (uint64_t)&v59[v69 - 3];
          uint64_t v79 = v48[v69 - 2];
          *(v75 - 2) = v79;
          if (v79)
          {
            *(void *)(v77 + 16) = v78;
            v48[v69 - 4] = v76;
            *uint64_t v76 = 0;
            v48[v69 - 2] = 0;
          }
          else
          {
            *(v75 - 4) = v78;
          }
          v59[v69 - 1] = v48[v69 - 1];
          v69 -= 9;
        }
        while (&v48[v69] != v52);
        uint64_t v48 = *(void **)buf;
        BOOL v80 = v138;
        *(void *)long long buf = &v59[v69];
        uint64_t v138 = v59 + 9;
        unint64_t v139 = (unint64_t)&v55[9 * v54];
        uint64_t v43 = v121;
        if (v80 != v48)
        {
          uint64_t v81 = (uint64_t)(v80 - 4);
          do
          {
            uint64_t v82 = (void *)(v81 - 40);
            sub_1C4999C7C(v81, *(void **)(v81 + 8));
            sub_1C494AC4C(v81 - 40, *(void **)(v81 - 32));
            v81 -= 72;
          }
          while (v82 != v48);
        }
        if (!v48) {
          goto LABEL_62;
        }
LABEL_100:
        operator delete(v48);
        goto LABEL_62;
      }
    }
LABEL_101:
    if (v25 != (long long *)v26)
    {
      uint64_t v83 = v25;
      do
      {
        if (*((float *)v83 + 4) > a7) {
          break;
        }
        uint64_t v84 = *(void *)buf + 72 * *(void *)v83;
        do
        {
          uint64_t v85 = (uint64_t *)v84;
          uint64_t v84 = *(void *)(v84 + 64);
        }
        while (v84);
        uint64_t v86 = *(void *)buf + 72 * *((void *)v83 + 1);
        do
        {
          uint64_t v87 = (uint64_t *)v86;
          uint64_t v86 = *(void *)(v86 + 64);
        }
        while (v86);
        if (v85 != v87)
        {
          v87[8] = (uint64_t)v85;
          sub_1C49A82E4(v85, v87 + 5);
        }
        uint64_t v83 = (long long *)((char *)v83 + 24);
      }
      while (v83 != (long long *)v26);
    }
    *uint64_t v122 = 0;
    v122[1] = 0;
    v122[2] = 0;
    uint64_t v89 = *(void ***)buf;
    uint64_t v88 = (void **)v138;
    if (*(void **)buf == v138)
    {
LABEL_145:
      if (v89)
      {
        uint64_t v116 = v89;
        if (v138 != v89)
        {
          uint64_t v117 = (uint64_t)(v138 - 4);
          do
          {
            int v118 = (void **)(v117 - 40);
            sub_1C4999C7C(v117, *(void **)(v117 + 8));
            sub_1C494AC4C(v117 - 40, *(void **)(v117 - 32));
            v117 -= 72;
          }
          while (v118 != v89);
          uint64_t v116 = *(void **)buf;
        }
        uint64_t v138 = v89;
        operator delete(v116);
      }
      uint64_t v14 = v120;
      if (v25) {
        operator delete(v25);
      }
      goto LABEL_153;
    }
    unint64_t v90 = 0;
    uint64_t v91 = (unint64_t *)(v122 + 2);
    while (1)
    {
      if (v89[8]) {
        goto LABEL_114;
      }
      if (v90 < *v91)
      {
        *(void *)(v90 + 16) = 0;
        *(void *)(v90 + 8) = 0;
        *(void *)unint64_t v90 = v90 + 8;
        sub_1C49AB0DC((void *)v90, *v89, v89 + 1);
        long long v92 = *(_OWORD *)(v89 + 3);
        *(void *)(v90 + 48) = 0;
        *(void *)(v90 + 40) = v90 + 48;
        *(_OWORD *)(v90 + 24) = v92;
        *(void *)(v90 + 56) = 0;
        sub_1C499A568((void *)(v90 + 40), v89[5], v89 + 6);
        *(void *)(v90 + 64) = v89[8];
        v90 += 72;
        v122[1] = (uint64_t *)v90;
        v122[1] = (uint64_t *)v90;
        goto LABEL_114;
      }
      unint64_t v93 = 0x8E38E38E38E38E39 * ((uint64_t)(v90 - (void)*v122) >> 3);
      unint64_t v94 = v93 + 1;
      if (v93 + 1 > 0x38E38E38E38E38ELL) {
        sub_1C494A220();
      }
      if (0x1C71C71C71C71C72 * ((uint64_t)(*v91 - (void)*v122) >> 3) > v94) {
        unint64_t v94 = 0x1C71C71C71C71C72 * ((uint64_t)(*v91 - (void)*v122) >> 3);
      }
      unint64_t v95 = 0x8E38E38E38E38E39 * ((uint64_t)(*v91 - (void)*v122) >> 3) >= 0x1C71C71C71C71C7
          ? 0x38E38E38E38E38ELL
          : v94;
      *((void *)&v127 + 1) = v122 + 2;
      if (v95)
      {
        if (v95 > 0x38E38E38E38E38ELL) {
          sub_1C4949AA8();
        }
        uint64_t v96 = (uint64_t *)operator new(72 * v95);
      }
      else
      {
        uint64_t v96 = 0;
      }
      uint64_t v97 = &v96[9 * v93];
      uint64_t v124 = v96;
      int v125 = v97;
      unint64_t v126 = (unint64_t)v97;
      *(void *)&long long v127 = &v96[9 * v95];
      v97[2] = 0;
      v97[1] = 0;
      *uint64_t v97 = (uint64_t)(v97 + 1);
      sub_1C49AB0DC(v97, *v89, v89 + 1);
      long long v98 = *(_OWORD *)(v89 + 3);
      v97[6] = 0;
      v97[5] = (uint64_t)(v97 + 6);
      *(_OWORD *)(v97 + 3) = v98;
      v97[7] = 0;
      sub_1C499A568(v97 + 5, v89[5], v89 + 6);
      v97[8] = (uint64_t)v89[8];
      uint64_t v99 = v125;
      unint64_t v90 = v126 + 72;
      uint64_t v100 = (char *)*v122;
      float v101 = (char *)v122[1];
      if (v101 != (char *)*v122) {
        break;
      }
      *uint64_t v122 = v125;
      v122[1] = (uint64_t *)v90;
      v122[2] = (uint64_t *)v127;
      if (v101) {
        goto LABEL_143;
      }
LABEL_113:
      v122[1] = (uint64_t *)v90;
LABEL_114:
      v89 += 9;
      if (v89 == v88)
      {
        uint64_t v89 = *(void ***)buf;
        goto LABEL_145;
      }
    }
    unint64_t v102 = 0;
    do
    {
      uint64_t v103 = &v99[v102 / 8];
      *(v103 - 9) = *(void *)&v101[v102 - 72];
      int v104 = &v101[v102 - 64];
      uint64_t v105 = *(void *)v104;
      v99[v102 / 8 - 8] = *(void *)v104;
      uint64_t v106 = (uint64_t)&v99[v102 / 8 - 8];
      uint64_t v107 = *(void *)&v101[v102 - 56];
      *(v103 - 7) = v107;
      if (v107)
      {
        *(void *)(v105 + 16) = v106;
        *(void *)&v101[v102 - 72] = v104;
        *(void *)int v104 = 0;
        *(void *)&v101[v102 - 56] = 0;
      }
      else
      {
        *(v103 - 9) = v106;
      }
      uint64_t v108 = &v99[v102 / 8];
      *((_OWORD *)v108 - 3) = *(_OWORD *)&v101[v102 - 48];
      *(v108 - 4) = *(void *)&v101[v102 - 32];
      uint64_t v109 = &v101[v102 - 24];
      uint64_t v110 = *(void *)v109;
      v99[v102 / 8 - 3] = *(void *)v109;
      uint64_t v111 = (uint64_t)&v99[v102 / 8 - 3];
      uint64_t v112 = *(void *)&v101[v102 - 16];
      *(v108 - 2) = v112;
      if (v112)
      {
        *(void *)(v110 + 16) = v111;
        *(void *)&v101[v102 - 32] = v109;
        *(void *)uint64_t v109 = 0;
        *(void *)&v101[v102 - 16] = 0;
      }
      else
      {
        *(v108 - 4) = v111;
      }
      v99[v102 / 8 - 1] = *(void *)&v101[v102 - 8];
      v102 -= 72;
    }
    while (&v101[v102] != v100);
    float v101 = (char *)*v122;
    uint64_t v113 = (char *)v122[1];
    *uint64_t v122 = &v99[v102 / 8];
    v122[1] = (uint64_t *)v90;
    v122[2] = (uint64_t *)v127;
    if (v113 != v101)
    {
      uint64_t v114 = (uint64_t)(v113 - 32);
      do
      {
        uint64_t v115 = (char *)(v114 - 40);
        sub_1C4999C7C(v114, *(void **)(v114 + 8));
        sub_1C494AC4C(v114 - 40, *(void **)(v114 - 32));
        v114 -= 72;
      }
      while (v115 != v101);
    }
    if (!v101) {
      goto LABEL_113;
    }
LABEL_143:
    operator delete(v101);
    goto LABEL_113;
  }
  sub_1C49A95BC(&v124, a3, a4, a5);
  if (v14)
  {
    while (v126 >= 2)
    {
      if (v14[2](v14))
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        int v119 = (id)qword_1EA3C9FA8;
        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C492D000, v119, OS_LOG_TYPE_DEBUG, "Canceling agglomerative clustering results computation", buf, 2u);
        }

        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        uint64_t v16 = __p;
        if (__p) {
          goto LABEL_14;
        }
        goto LABEL_15;
      }
      if (v136 > a7) {
        break;
      }
      CHFastGroupingClusters::mergeClusters(&v124, v134, v135);
    }
  }
  else
  {
    while (v126 >= 2 && v136 <= a7)
      CHFastGroupingClusters::mergeClusters(&v124, v134, v135);
  }
  CHFastGroupingClusters::getClusters((CHFastGroupingClusters **)&v124, (uint64_t)a1);
  uint64_t v16 = __p;
  if (__p)
  {
LABEL_14:
    uint64_t v133 = v16;
    operator delete(v16);
  }
LABEL_15:
  if (v130)
  {
    uint64_t v131 = v130;
    operator delete(v130);
  }
  uint64_t v17 = v127;
  if ((void)v127)
  {
    uint64_t v18 = *((void *)&v127 + 1);
    uint64_t v19 = (void *)v127;
    if (*((void *)&v127 + 1) != (void)v127)
    {
      uint64_t v20 = *((void *)&v127 + 1);
      do
      {
        int v22 = *(void **)(v20 - 24);
        v20 -= 24;
        uint64_t v21 = v22;
        if (v22)
        {
          *(void *)(v18 - 16) = v21;
          operator delete(v21);
        }
        uint64_t v18 = v20;
      }
      while (v20 != v17);
      uint64_t v19 = (void *)v127;
    }
    *((void *)&v127 + 1) = v17;
    operator delete(v19);
  }
  sub_1C49AB640((uint64_t)&v124, v125);
LABEL_153:
}

void sub_1C4BE78D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  sub_1C49A9510((void **)(v11 - 128));
  if (v10) {
    operator delete(v10);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1C4BE7A28(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 24);
    if (v5 != v4)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      do
      {
        uint64_t v9 = *(void **)(v7 - 24);
        v7 -= 24;
        uint64_t v8 = v9;
        if (v9)
        {
          *(void *)(v5 - 16) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      id v6 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v4;
    operator delete(v6);
  }
  sub_1C49AB640(a1, *(void **)(a1 + 8));
  return a1;
}

void sub_1C4BE7BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE7BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BE8964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35)
{
  sub_1C49A9510((void **)(v37 - 144));
  sub_1C49A9510(&a30);

  _Unwind_Resume(a1);
}

void sub_1C4BE92EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  sub_1C4999C7C(v43, *v45);
  sub_1C494AC4C(v44, *(void **)(v44 + 8));
  *(void *)(a16 + 8) = v44;
  sub_1C49A94D4(v46 - 232);
  sub_1C494AC4C(v46 - 160, *(void **)(v46 - 152));
  sub_1C49A9510((void **)a16);

  _Unwind_Resume(a1);
}

__n128 sub_1C4BE9570(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4BE9594(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4BE95AC(uint64_t a1, double a2, double a3)
{
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = (double *)v5[7];
  unint64_t v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    double *v7 = a2;
    v7[1] = a3;
    uint64_t v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  uint64_t v9 = (double *)v5[6];
  uint64_t v10 = ((char *)v7 - (char *)v9) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 60) {
      sub_1C4949AA8();
    }
    uint64_t v14 = (char *)operator new(16 * v13);
    uint64_t v15 = (double *)&v14[16 * v10];
    uint64_t v16 = &v14[16 * v13];
    *uint64_t v15 = a2;
    v15[1] = a3;
    uint64_t v8 = (uint64_t)(v15 + 2);
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v15 = (double *)(16 * v10);
  uint64_t v16 = 0;
  *uint64_t v15 = a2;
  v15[1] = a3;
  uint64_t v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    uint64_t v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_18:
  v5[7] = v8;
}

void sub_1C4BE96D4(uint64_t a1, double a2, double a3)
{
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = (double *)v5[7];
  unint64_t v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    double *v7 = a2;
    v7[1] = a3;
    uint64_t v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  uint64_t v9 = (double *)v5[6];
  uint64_t v10 = ((char *)v7 - (char *)v9) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 60) {
      sub_1C4949AA8();
    }
    uint64_t v14 = (char *)operator new(16 * v13);
    uint64_t v15 = (double *)&v14[16 * v10];
    uint64_t v16 = &v14[16 * v13];
    *uint64_t v15 = a2;
    v15[1] = a3;
    uint64_t v8 = (uint64_t)(v15 + 2);
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v15 = (double *)(16 * v10);
  uint64_t v16 = 0;
  *uint64_t v15 = a2;
  v15[1] = a3;
  uint64_t v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    uint64_t v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_18:
  v5[7] = v8;
}

void sub_1C4BEAD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  sub_1C49A9510(&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BEB030(uint64_t result, long long *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = v9;
  while (1)
  {
    unint64_t v9 = v10;
    uint64_t v11 = (uint64_t)a2 - v10;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 3);
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v49 = *((float *)a2 - 2);
          float v50 = *(float *)(v10 + 16);
          if (v49 < v50)
          {
            uint64_t v51 = *(void *)v10;
            *(void *)unint64_t v10 = *((void *)a2 - 3);
            *((void *)a2 - 3) = v51;
            uint64_t v52 = *(void *)(v10 + 8);
            *(void *)(v10 + 8) = *((void *)a2 - 2);
            *((void *)a2 - 2) = v52;
            *(float *)(v10 + 16) = v49;
            *((float *)a2 - 2) = v50;
          }
          break;
        case 3uLL:
          __n128 result = (uint64_t)sub_1C4BEBA84((float *)v10, (float *)(v10 + 24), (float *)a2 - 6);
          break;
        case 4uLL:
          __n128 result = (uint64_t)sub_1C4BEBA84((float *)v10, (float *)(v10 + 24), (float *)(v10 + 48));
          float v53 = *((float *)a2 - 2);
          float v54 = *(float *)(v10 + 64);
          if (v53 < v54)
          {
            uint64_t v55 = *(void *)(v10 + 48);
            *(void *)(v10 + 48) = *((void *)a2 - 3);
            *((void *)a2 - 3) = v55;
            uint64_t v56 = *(void *)(v10 + 56);
            *(void *)(v10 + 56) = *((void *)a2 - 2);
            *((void *)a2 - 2) = v56;
            *(float *)(v10 + 64) = v53;
            *((float *)a2 - 2) = v54;
            float v57 = *(float *)(v10 + 64);
            float v58 = *(float *)(v10 + 40);
            if (v57 < v58)
            {
              uint64_t v59 = *(void *)(v10 + 48);
              uint64_t v60 = *(void *)(v10 + 56);
              long long v61 = *(_OWORD *)(v10 + 24);
              *(void *)(v10 + 24) = v59;
              *(void *)(v10 + 32) = v60;
              *(_OWORD *)(v10 + 48) = v61;
              *(float *)(v10 + 40) = v57;
              *(float *)(v10 + 64) = v58;
              float v62 = *(float *)(v10 + 16);
              if (v57 < v62)
              {
                long long v63 = *(_OWORD *)v10;
                *(void *)unint64_t v10 = v59;
                *(void *)(v10 + 8) = v60;
                *(_OWORD *)(v10 + 24) = v63;
                *(float *)(v10 + 16) = v57;
                *(float *)(v10 + 40) = v62;
              }
            }
          }
          break;
        case 5uLL:
          __n128 result = (uint64_t)sub_1C4BEB8B8((float *)v10, (float *)(v10 + 24), (float *)(v10 + 48), (float *)(v10 + 72), (float *)a2 - 6);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 575) {
      break;
    }
    if (!a3)
    {
      if ((long long *)v10 == a2) {
        return result;
      }
      int64_t v76 = (v12 - 2) >> 1;
      int64_t v77 = v76;
      do
      {
        if (v76 >= v77)
        {
          uint64_t v79 = (2 * v77) | 1;
          unint64_t v80 = v10 + 24 * v79;
          if (2 * v77 + 2 < (uint64_t)v12 && *(float *)(v80 + 16) < *(float *)(v80 + 40))
          {
            v80 += 24;
            uint64_t v79 = 2 * v77 + 2;
          }
          unint64_t v81 = v10 + 24 * v77;
          float v82 = *(float *)(v80 + 16);
          float v83 = *(float *)(v81 + 16);
          if (v82 >= v83)
          {
            long long v84 = *(_OWORD *)v81;
            do
            {
              unint64_t v85 = v81;
              unint64_t v81 = v80;
              *(void *)unint64_t v85 = *(void *)v80;
              *(void *)(v85 + 8) = *(void *)(v80 + 8);
              *(float *)(v85 + 16) = v82;
              if (v76 < v79) {
                break;
              }
              uint64_t v86 = 2 * v79;
              uint64_t v79 = (2 * v79) | 1;
              unint64_t v80 = v10 + 24 * v79;
              uint64_t v87 = v86 + 2;
              if (v87 < (uint64_t)v12 && *(float *)(v80 + 16) < *(float *)(v80 + 40))
              {
                v80 += 24;
                uint64_t v79 = v87;
              }
              float v82 = *(float *)(v80 + 16);
            }
            while (v82 >= v83);
            *(_OWORD *)unint64_t v81 = v84;
            *(float *)(v81 + 16) = v83;
          }
        }
        BOOL v78 = v77-- <= 0;
      }
      while (!v78);
      int64_t v88 = v11 / 0x18uLL;
      while (2)
      {
        int64_t v89 = 0;
        uint64_t v90 = *(void *)v10;
        uint64_t v91 = *(void *)(v10 + 8);
        float v92 = *(float *)(v10 + 16);
        unint64_t v93 = v10;
        do
        {
          unint64_t v94 = v93;
          v93 += 24 * v89 + 24;
          uint64_t v95 = 2 * v89;
          __n128 result = (2 * v89) | 1;
          int64_t v89 = result;
          uint64_t v96 = v95 + 2;
          if (v96 < v88 && *(float *)(v93 + 16) < *(float *)(v93 + 40))
          {
            v93 += 24;
            int64_t v89 = v96;
          }
          *(void *)unint64_t v94 = *(void *)v93;
          *(void *)(v94 + 8) = *(void *)(v93 + 8);
          *(_DWORD *)(v94 + 16) = *(_DWORD *)(v93 + 16);
        }
        while (v89 <= (uint64_t)((unint64_t)(v88 - 2) >> 1));
        if ((long long *)v93 != (long long *)((char *)a2 - 24))
        {
          *(void *)unint64_t v93 = *((void *)a2 - 3);
          *(void *)(v93 + 8) = *((void *)a2 - 2);
          *(_DWORD *)(v93 + 16) = *((_DWORD *)a2 - 2);
          *((void *)a2 - 3) = v90;
          *((void *)a2 - 2) = v91;
          *((float *)a2 - 2) = v92;
          uint64_t v97 = v93 - v10 + 24;
          if (v97 >= 25)
          {
            unint64_t v98 = (v97 / 0x18uLL - 2) >> 1;
            unint64_t v99 = v10 + 24 * v98;
            float v100 = *(float *)(v99 + 16);
            float v92 = *(float *)(v93 + 16);
            if (v100 < v92)
            {
              long long v101 = *(_OWORD *)v93;
              do
              {
                unint64_t v102 = v93;
                unint64_t v93 = v99;
                *(void *)unint64_t v102 = *(void *)v99;
                *(void *)(v102 + 8) = *(void *)(v99 + 8);
                *(float *)(v102 + 16) = v100;
                if (!v98) {
                  break;
                }
                unint64_t v98 = (v98 - 1) >> 1;
                unint64_t v99 = v10 + 24 * v98;
                float v100 = *(float *)(v99 + 16);
              }
              while (v100 < v92);
              *(_OWORD *)unint64_t v93 = v101;
LABEL_102:
              *(float *)(v93 + 16) = v92;
            }
          }
          a2 = (long long *)((char *)a2 - 24);
          BOOL v78 = v88-- <= 2;
          if (v78) {
            return result;
          }
          continue;
        }
        break;
      }
      *(void *)unint64_t v93 = v90;
      *(void *)(v93 + 8) = v91;
      goto LABEL_102;
    }
    unint64_t v13 = v12 >> 1;
    unint64_t v14 = v10 + 24 * (v12 >> 1);
    if ((unint64_t)v11 >= 0xC01)
    {
      sub_1C4BEBA84((float *)v9, (float *)(v9 + 24 * (v12 >> 1)), (float *)a2 - 6);
      uint64_t v15 = 24 * v13;
      uint64_t v16 = (float *)(24 * v13 + v9 - 24);
      sub_1C4BEBA84((float *)(v9 + 24), v16, (float *)a2 - 12);
      uint64_t v17 = (float *)(v9 + 24 + v15);
      sub_1C4BEBA84((float *)(v9 + 48), v17, (float *)a2 - 18);
      __n128 result = (uint64_t)sub_1C4BEBA84(v16, (float *)v14, v17);
      long long v18 = *(_OWORD *)v9;
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v14;
      *(_OWORD *)unint64_t v14 = v18;
      LODWORD(v18) = *(_DWORD *)(v9 + 16);
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v14 + 16);
      *(_DWORD *)(v14 + 16) = v18;
      --a3;
      if (a4) {
        goto LABEL_16;
      }
    }
    else
    {
      __n128 result = (uint64_t)sub_1C4BEBA84((float *)(v9 + 24 * (v12 >> 1)), (float *)v9, (float *)a2 - 6);
      --a3;
      if (a4)
      {
LABEL_16:
        float v19 = *(float *)(v9 + 16);
        goto LABEL_17;
      }
    }
    float v19 = *(float *)(v9 + 16);
    if (*(float *)(v9 - 8) < v19)
    {
LABEL_17:
      uint64_t v22 = 0;
      long long v23 = *(_OWORD *)v9;
      do
      {
        float v24 = *(float *)(v9 + v22 + 40);
        v22 += 24;
      }
      while (v24 < v19);
      unint64_t v25 = v9 + v22;
      unint64_t v26 = a2;
      if (v22 == 24)
      {
        uint64_t v29 = a2;
        while (v25 < (unint64_t)v29)
        {
          char v27 = (long long *)((char *)v29 - 24);
          float v30 = *((float *)v29 - 2);
          uint64_t v29 = (long long *)((char *)v29 - 24);
          if (v30 < v19) {
            goto LABEL_25;
          }
        }
        char v27 = v29;
        unint64_t v10 = v25;
      }
      else
      {
        do
        {
          char v27 = (long long *)((char *)v26 - 24);
          float v28 = *((float *)v26 - 2);
          unint64_t v26 = (long long *)((char *)v26 - 24);
        }
        while (v28 >= v19);
LABEL_25:
        unint64_t v10 = v25;
        if (v25 < (unint64_t)v27)
        {
          unint64_t v31 = (unint64_t)v27;
          do
          {
            uint64_t v32 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v31;
            *(void *)unint64_t v31 = v32;
            uint64_t v33 = *(void *)(v10 + 8);
            *(void *)(v10 + 8) = *(void *)(v31 + 8);
            *(void *)(v31 + 8) = v33;
            int v34 = *(_DWORD *)(v10 + 16);
            *(_DWORD *)(v10 + 16) = *(_DWORD *)(v31 + 16);
            *(_DWORD *)(v31 + 16) = v34;
            do
            {
              float v35 = *(float *)(v10 + 40);
              v10 += 24;
            }
            while (v35 < v19);
            do
            {
              float v36 = *(float *)(v31 - 8);
              v31 -= 24;
            }
            while (v36 >= v19);
          }
          while (v10 < v31);
        }
      }
      if (v10 - 24 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(v10 - 24);
        *(void *)(v9 + 8) = *(void *)(v10 - 16);
        *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 - 8);
      }
      *(_OWORD *)(v10 - 24) = v23;
      *(float *)(v10 - 8) = v19;
      if (v25 < (unint64_t)v27) {
        goto LABEL_36;
      }
      BOOL v37 = sub_1C4BEBB90((float *)v9, (long long *)(v10 - 24));
      __n128 result = sub_1C4BEBB90((float *)v10, a2);
      if (result)
      {
        a2 = (long long *)(v10 - 24);
        if (v37) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v37)
      {
LABEL_36:
        __n128 result = sub_1C4BEB030(v9, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v19 >= *((float *)a2 - 2))
      {
        unint64_t v38 = v9 + 24;
        do
        {
          unint64_t v10 = v38;
          if (v38 >= (unint64_t)a2) {
            break;
          }
          float v39 = *(float *)(v38 + 16);
          v38 += 24;
        }
        while (v19 >= v39);
      }
      else
      {
        unint64_t v20 = v9;
        do
        {
          unint64_t v10 = v20 + 24;
          float v21 = *(float *)(v20 + 40);
          v20 += 24;
        }
        while (v19 >= v21);
      }
      long long v40 = a2;
      if (v10 < (unint64_t)a2)
      {
        unint64_t v41 = a2;
        do
        {
          long long v40 = (long long *)((char *)v41 - 24);
          float v42 = *((float *)v41 - 2);
          unint64_t v41 = (long long *)((char *)v41 - 24);
        }
        while (v19 < v42);
      }
      long long v43 = *(_OWORD *)v9;
      while (v10 < (unint64_t)v40)
      {
        uint64_t v44 = *(void *)v10;
        *(void *)unint64_t v10 = *(void *)v40;
        *(void *)long long v40 = v44;
        uint64_t v45 = *(void *)(v10 + 8);
        *(void *)(v10 + 8) = *((void *)v40 + 1);
        *((void *)v40 + 1) = v45;
        int v46 = *(_DWORD *)(v10 + 16);
        *(_DWORD *)(v10 + 16) = *((_DWORD *)v40 + 4);
        *((_DWORD *)v40 + 4) = v46;
        do
        {
          float v47 = *(float *)(v10 + 40);
          v10 += 24;
        }
        while (v19 >= v47);
        do
        {
          float v48 = *((float *)v40 - 2);
          long long v40 = (long long *)((char *)v40 - 24);
        }
        while (v19 < v48);
      }
      BOOL v4 = v10 - 24 >= v9;
      BOOL v5 = v10 - 24 == v9;
      if (v10 - 24 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(v10 - 24);
        *(void *)(v9 + 8) = *(void *)(v10 - 16);
        *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 - 8);
      }
      a4 = 0;
      *(_OWORD *)(v10 - 24) = v43;
      *(float *)(v10 - 8) = v19;
    }
  }
  long long v64 = (long long *)(v10 + 24);
  BOOL v66 = (long long *)v10 == a2 || v64 == a2;
  if (a4)
  {
    if (!v66)
    {
      uint64_t v67 = 0;
      uint64_t v68 = (long long *)v10;
      do
      {
        float v70 = *((float *)v68 + 10);
        float v71 = *((float *)v68 + 4);
        uint64_t v68 = v64;
        if (v70 < v71)
        {
          long long v72 = *v64;
          uint64_t v73 = v67;
          do
          {
            uint64_t v74 = v10 + v73;
            uint64_t v75 = *(void *)(v10 + v73 + 8);
            *(void *)(v74 + 24) = *(void *)(v10 + v73);
            *(void *)(v74 + 32) = v75;
            *(_DWORD *)(v74 + 40) = *(_DWORD *)(v10 + v73 + 16);
            if (!v73)
            {
              uint64_t v69 = v10;
              goto LABEL_78;
            }
            v73 -= 24;
          }
          while (v70 < *(float *)(v74 - 8));
          uint64_t v69 = v10 + v73 + 24;
LABEL_78:
          *(_OWORD *)uint64_t v69 = v72;
          *(float *)(v69 + 16) = v70;
        }
        long long v64 = (long long *)((char *)v68 + 24);
        v67 += 24;
      }
      while ((long long *)((char *)v68 + 24) != a2);
    }
  }
  else if (!v66)
  {
    uint64_t v103 = (float *)(v10 + 40);
    do
    {
      float v104 = *(float *)(v9 + 40);
      float v105 = *(float *)(v9 + 16);
      unint64_t v9 = (unint64_t)v64;
      if (v104 < v105)
      {
        long long v106 = *v64;
        uint64_t v107 = v103;
        do
        {
          uint64_t v108 = v107;
          uint64_t v109 = *((void *)v107 - 4);
          *((void *)v107 - 2) = *((void *)v107 - 5);
          *((void *)v107 - 1) = v109;
          int v110 = *((_DWORD *)v107 - 6);
          v107 -= 6;
          *(_DWORD *)uint64_t v108 = v110;
        }
        while (v104 < *(v108 - 12));
        *((_OWORD *)v107 - 1) = v106;
        *uint64_t v107 = v104;
      }
      long long v64 = (long long *)(v9 + 24);
      v103 += 6;
    }
    while ((long long *)(v9 + 24) != a2);
  }
  return result;
}

float *sub_1C4BEB8B8(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  __n128 result = sub_1C4BEBA84(a1, a2, a3);
  float v11 = a4[4];
  float v12 = a3[4];
  if (v11 < v12)
  {
    uint64_t v13 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v13;
    uint64_t v14 = *((void *)a3 + 1);
    *((void *)a3 + 1) = *((void *)a4 + 1);
    *((void *)a4 + 1) = v14;
    a3[4] = v11;
    a4[4] = v12;
    float v15 = a3[4];
    float v16 = a2[4];
    if (v15 < v16)
    {
      uint64_t v17 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v17;
      uint64_t v18 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v18;
      a2[4] = v15;
      a3[4] = v16;
      float v19 = a2[4];
      float v20 = a1[4];
      if (v19 < v20)
      {
        uint64_t v21 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v21;
        uint64_t v22 = *((void *)a1 + 1);
        *((void *)a1 + 1) = *((void *)a2 + 1);
        *((void *)a2 + 1) = v22;
        a1[4] = v19;
        a2[4] = v20;
      }
    }
  }
  float v23 = a5[4];
  float v24 = a4[4];
  if (v23 < v24)
  {
    uint64_t v25 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v25;
    uint64_t v26 = *((void *)a4 + 1);
    *((void *)a4 + 1) = *((void *)a5 + 1);
    *((void *)a5 + 1) = v26;
    a4[4] = v23;
    a5[4] = v24;
    float v27 = a4[4];
    float v28 = a3[4];
    if (v27 < v28)
    {
      uint64_t v29 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v29;
      uint64_t v30 = *((void *)a3 + 1);
      *((void *)a3 + 1) = *((void *)a4 + 1);
      *((void *)a4 + 1) = v30;
      a3[4] = v27;
      a4[4] = v28;
      float v31 = a3[4];
      float v32 = a2[4];
      if (v31 < v32)
      {
        uint64_t v33 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v33;
        uint64_t v34 = *((void *)a2 + 1);
        *((void *)a2 + 1) = *((void *)a3 + 1);
        *((void *)a3 + 1) = v34;
        a2[4] = v31;
        a3[4] = v32;
        float v35 = a2[4];
        float v36 = a1[4];
        if (v35 < v36)
        {
          uint64_t v37 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v37;
          uint64_t v38 = *((void *)a1 + 1);
          *((void *)a1 + 1) = *((void *)a2 + 1);
          *((void *)a2 + 1) = v38;
          a1[4] = v35;
          a2[4] = v36;
        }
      }
    }
  }
  return result;
}

float *sub_1C4BEBA84(float *result, float *a2, float *a3)
{
  float v3 = a2[4];
  float v4 = result[4];
  float v5 = a3[4];
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      uint64_t v8 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v8;
      uint64_t v9 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v9;
      a2[4] = v5;
      a3[4] = v3;
      float v10 = a2[4];
      float v11 = result[4];
      if (v10 < v11)
      {
        uint64_t v12 = *(void *)result;
        *(void *)__n128 result = *(void *)a2;
        *(void *)a2 = v12;
        uint64_t v13 = *((void *)result + 1);
        *((void *)result + 1) = *((void *)a2 + 1);
        *((void *)a2 + 1) = v13;
        result[4] = v10;
        a2[4] = v11;
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)result;
    if (v5 >= v3)
    {
      *(void *)__n128 result = *(void *)a2;
      *(void *)a2 = v6;
      uint64_t v14 = *((void *)result + 1);
      *((void *)result + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v14;
      result[4] = v3;
      a2[4] = v4;
      float v15 = a3[4];
      if (v15 >= v4) {
        return result;
      }
      uint64_t v16 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v16;
      uint64_t v17 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v17;
      a2[4] = v15;
    }
    else
    {
      *(void *)__n128 result = *(void *)a3;
      *(void *)a3 = v6;
      uint64_t v7 = *((void *)result + 1);
      *((void *)result + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v7;
      result[4] = v5;
    }
    a3[4] = v4;
  }
  return result;
}

BOOL sub_1C4BEBB90(float *a1, long long *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v16 = *((float *)a2 - 2);
      float v17 = a1[4];
      if (v16 < v17)
      {
        uint64_t v18 = *(void *)a1;
        *(void *)a1 = *((void *)a2 - 3);
        *((void *)a2 - 3) = v18;
        uint64_t v19 = *((void *)a1 + 1);
        *((void *)a1 + 1) = *((void *)a2 - 2);
        *((void *)a2 - 2) = v19;
        a1[4] = v16;
        *((float *)a2 - 2) = v17;
      }
      break;
    case 3uLL:
      sub_1C4BEBA84(a1, a1 + 6, (float *)a2 - 6);
      BOOL result = 1;
      break;
    case 4uLL:
      sub_1C4BEBA84(a1, a1 + 6, a1 + 12);
      float v20 = *((float *)a2 - 2);
      float v21 = a1[16];
      if (v20 >= v21) {
        goto LABEL_13;
      }
      uint64_t v22 = *((void *)a1 + 6);
      *((void *)a1 + 6) = *((void *)a2 - 3);
      *((void *)a2 - 3) = v22;
      uint64_t v23 = *((void *)a1 + 7);
      *((void *)a1 + 7) = *((void *)a2 - 2);
      *((void *)a2 - 2) = v23;
      a1[16] = v20;
      *((float *)a2 - 2) = v21;
      float v24 = a1[16];
      float v25 = a1[10];
      if (v24 >= v25) {
        goto LABEL_13;
      }
      uint64_t v26 = *((void *)a1 + 6);
      uint64_t v27 = *((void *)a1 + 7);
      long long v28 = *(_OWORD *)(a1 + 6);
      *((void *)a1 + 3) = v26;
      *((void *)a1 + 4) = v27;
      *((_OWORD *)a1 + 3) = v28;
      a1[10] = v24;
      a1[16] = v25;
      float v29 = a1[4];
      if (v24 >= v29) {
        goto LABEL_13;
      }
      long long v30 = *(_OWORD *)a1;
      *(void *)a1 = v26;
      *((void *)a1 + 1) = v27;
      *(_OWORD *)(a1 + 6) = v30;
      a1[4] = v24;
      a1[10] = v29;
      BOOL result = 1;
      break;
    case 5uLL:
      sub_1C4BEB8B8(a1, a1 + 6, a1 + 12, a1 + 18, (float *)a2 - 6);
      BOOL result = 1;
      break;
    default:
      uint64_t v6 = a1 + 12;
      sub_1C4BEBA84(a1, a1 + 6, a1 + 12);
      uint64_t v7 = (long long *)(a1 + 18);
      if (a1 + 18 == (float *)a2)
      {
LABEL_13:
        BOOL result = 1;
      }
      else
      {
        uint64_t v8 = 0;
        int v9 = 0;
        while (1)
        {
          float v10 = *((float *)v7 + 4);
          if (v10 < v6[4]) {
            break;
          }
LABEL_12:
          uint64_t v6 = (float *)v7;
          v8 += 24;
          uint64_t v7 = (long long *)((char *)v7 + 24);
          if (v7 == a2) {
            goto LABEL_13;
          }
        }
        long long v11 = *v7;
        uint64_t v12 = v8;
        do
        {
          uint64_t v13 = (uint64_t)a1 + v12;
          uint64_t v14 = *(void *)((char *)a1 + v12 + 56);
          *(void *)(v13 + 72) = *(void *)((char *)a1 + v12 + 48);
          *(void *)(v13 + 80) = v14;
          *(float *)(v13 + 88) = *(float *)((char *)a1 + v12 + 64);
          if (v12 == -48)
          {
            *(_OWORD *)a1 = v11;
            a1[4] = v10;
            if (++v9 != 8) {
              goto LABEL_12;
            }
            goto LABEL_22;
          }
          v12 -= 24;
        }
        while (v10 < *(float *)(v13 + 40));
        uint64_t v15 = (uint64_t)a1 + v12;
        *(_OWORD *)(v15 + 72) = v11;
        *(float *)(v15 + 88) = v10;
        if (++v9 != 8) {
          goto LABEL_12;
        }
LABEL_22:
        BOOL result = (long long *)((char *)v7 + 24) == a2;
      }
      break;
  }
  return result;
}

void sub_1C4BEBE3C(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (!a1[2]) {
    goto LABEL_50;
  }
  uint64_t v6 = *a1;
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  *a1 = (uint64_t *)(a1 + 1);
  v7[2] = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v9 = v6[1] ? (uint64_t *)v6[1] : v6;
  float v31 = a1;
  uint64_t v33 = v9;
  if (!v9) {
    goto LABEL_50;
  }
  float v10 = (uint64_t *)v9[2];
  if (v10)
  {
    long long v11 = (uint64_t *)*v10;
    if ((uint64_t *)*v10 == v9)
    {
      *float v10 = 0;
      while (1)
      {
        long long v30 = (uint64_t *)v10[1];
        if (!v30) {
          break;
        }
        do
        {
          float v10 = v30;
          long long v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
    }
    else
    {
      for (v10[1] = 0; v11; long long v11 = (uint64_t *)v10[1])
      {
        do
        {
          float v10 = v11;
          long long v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  float v32 = v10;
  if (a2 == a3)
  {
    float v21 = a1;
    sub_1C494AC4C((uint64_t)a1, v9);
    if (!v10) {
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  uint64_t v12 = a2;
  do
  {
    v9[4] = v12[4];
    if (v9 != v12)
    {
      sub_1C49B7D84(v9 + 5, (char *)v12[5], (char *)v12[6], (v12[6] - v12[5]) >> 4);
      int v9 = v33;
    }
    uint64_t v13 = *v8;
    uint64_t v14 = a1 + 1;
    uint64_t v15 = a1 + 1;
    if (!*v8)
    {
LABEL_20:
      *int v9 = 0;
      v9[1] = 0;
      v9[2] = (uint64_t)v14;
      *uint64_t v15 = v9;
      float v16 = (uint64_t *)**a1;
      if (!v16) {
        goto LABEL_22;
      }
LABEL_21:
      *a1 = v16;
      int v9 = *v15;
      goto LABEL_22;
    }
    do
    {
      while (1)
      {
        uint64_t v14 = (uint64_t **)v13;
        if (v9[4] >= (unint64_t)v13[4]) {
          break;
        }
        uint64_t v13 = (uint64_t *)*v13;
        uint64_t v15 = v14;
        if (!*v14) {
          goto LABEL_20;
        }
      }
      uint64_t v13 = (uint64_t *)v13[1];
    }
    while (v13);
    uint64_t v15 = v14 + 1;
    *int v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v14;
    v14[1] = v9;
    float v16 = (uint64_t *)**a1;
    if (v16) {
      goto LABEL_21;
    }
LABEL_22:
    sub_1C4949FD4(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    int v9 = v32;
    uint64_t v33 = v32;
    if (v32)
    {
      float v10 = (uint64_t *)v32[2];
      if (v10)
      {
        float v17 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v32)
        {
          *float v10 = 0;
          while (1)
          {
            float v20 = (uint64_t *)v10[1];
            if (!v20) {
              break;
            }
            do
            {
              float v10 = v20;
              float v20 = (uint64_t *)*v20;
            }
            while (v20);
          }
        }
        else
        {
          for (v10[1] = 0; v17; float v17 = (uint64_t *)v10[1])
          {
            do
            {
              float v10 = v17;
              float v17 = (uint64_t *)*v17;
            }
            while (v17);
          }
        }
      }
      float v32 = v10;
      uint64_t v18 = (uint64_t *)v12[1];
      if (!v18)
      {
        do
        {
LABEL_33:
          a2 = (uint64_t *)v12[2];
          BOOL v19 = *a2 == (void)v12;
          uint64_t v12 = a2;
        }
        while (!v19);
        goto LABEL_35;
      }
    }
    else
    {
      float v10 = 0;
      uint64_t v18 = (uint64_t *)v12[1];
      if (!v18) {
        goto LABEL_33;
      }
    }
    do
    {
      a2 = v18;
      uint64_t v18 = (uint64_t *)*v18;
    }
    while (v18);
LABEL_35:
    if (!v9) {
      break;
    }
    uint64_t v12 = a2;
  }
  while (a2 != a3);
  float v21 = v31;
  sub_1C494AC4C((uint64_t)v31, v9);
  if (!v10) {
    goto LABEL_50;
  }
LABEL_47:
  for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
    float v10 = i;
  sub_1C494AC4C((uint64_t)v21, v10);
LABEL_50:
  if (a2 != a3)
  {
    while (2)
    {
      sub_1C49AB1EC((uint64_t)a1, a2 + 4, (uint64_t)&v31);
      uint64_t v23 = (uint64_t *)v31;
      float v24 = a1[1];
      float v25 = a1 + 1;
      uint64_t v26 = a1 + 1;
      if (v24)
      {
        do
        {
          while (1)
          {
            float v25 = (uint64_t **)v24;
            if ((unint64_t)v31[4] >= v24[4]) {
              break;
            }
            float v24 = (uint64_t *)*v24;
            uint64_t v26 = v25;
            if (!*v25) {
              goto LABEL_58;
            }
          }
          float v24 = (uint64_t *)v24[1];
        }
        while (v24);
        uint64_t v26 = v25 + 1;
        *float v31 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v25;
        v25[1] = v23;
        uint64_t v27 = (uint64_t *)**a1;
        if (!v27)
        {
LABEL_60:
          sub_1C4949FD4(a1[1], v23);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          long long v28 = (uint64_t *)a2[1];
          if (v28)
          {
            do
            {
              float v29 = v28;
              long long v28 = (uint64_t *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              float v29 = (uint64_t *)a2[2];
              BOOL v19 = *v29 == (void)a2;
              a2 = v29;
            }
            while (!v19);
          }
          a2 = v29;
          if (v29 == a3) {
            return;
          }
          continue;
        }
      }
      else
      {
LABEL_58:
        *float v31 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v25;
        *uint64_t v26 = v23;
        uint64_t v27 = (uint64_t *)**a1;
        if (!v27) {
          goto LABEL_60;
        }
      }
      break;
    }
    *a1 = v27;
    uint64_t v23 = *v26;
    goto LABEL_60;
  }
}

void sub_1C4BEC1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4ACDC1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BEC1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = (void *)(a2 + 48);
    do
    {
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)uint64_t v4 = v4 + 8;
      sub_1C49AB0DC((void *)v4, *(void **)v6, v7 - 5);
      long long v8 = *(_OWORD *)(v6 + 24);
      *(void *)(v4 + 48) = 0;
      *(void *)(v4 + 40) = v4 + 48;
      *(_OWORD *)(v4 + 24) = v8;
      *(void *)(v4 + 56) = 0;
      sub_1C499A568((void *)(v4 + 40), *(void **)(v6 + 40), v7);
      *(void *)(v4 + 64) = *(void *)(v6 + 64);
      uint64_t v4 = v10 + 72;
      v10 += 72;
      v7 += 9;
      v6 += 72;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_1C4BEC298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1C4999C7C(v10, *v11);
  sub_1C494AC4C(v9, *(void **)(v9 + 8));
  sub_1C4BEC2CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BEC2CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = v2 - 32;
      do
      {
        uint64_t v5 = v4 - 40;
        sub_1C4999C7C(v4, *(void **)(v4 + 8));
        sub_1C494AC4C(v4 - 40, *(void **)(v4 - 32));
        v4 -= 72;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

void sub_1C4BEC340(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x8E38E38E38E38E39 * ((v8 - *a1) >> 3) < __sz)
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      uint64_t v12 = (void *)*a1;
      if (v11 != v10)
      {
        uint64_t v13 = v11 - 32;
        do
        {
          uint64_t v14 = v13 - 40;
          sub_1C4999C7C(v13, *(void **)(v13 + 8));
          sub_1C494AC4C(v13 - 40, *(void **)(v13 - 32));
          v13 -= 72;
        }
        while (v14 != v10);
        uint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x38E38E38E38E38ELL) {
      goto LABEL_35;
    }
    unint64_t v15 = 0x8E38E38E38E38E39 * (v8 >> 3);
    uint64_t v16 = 2 * v15;
    if (2 * v15 <= __sz) {
      uint64_t v16 = __sz;
    }
    unint64_t v17 = v15 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v16;
    if (v17 > 0x38E38E38E38E38ELL) {
LABEL_35:
    }
      sub_1C494A220();
    uint64_t v18 = 72 * v17;
    BOOL v19 = operator new(72 * v17);
    *a1 = (uint64_t)v19;
    a1[1] = (uint64_t)v19;
    a1[2] = (uint64_t)v19 + v18;
    uint64_t v20 = sub_1C4BEC1C0(v9, a2, a3, (uint64_t)v19);
LABEL_29:
    a1[1] = v20;
    return;
  }
  uint64_t v21 = a1[1];
  if (0x8E38E38E38E38E39 * ((v21 - v10) >> 3) < __sz)
  {
    uint64_t v22 = a2 + 8 * ((v21 - v10) >> 3);
    if (v21 != v10)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 8 * ((v21 - v10) >> 3);
      do
      {
        uint64_t v25 = v10 + v23;
        if (a2 != v10)
        {
          sub_1C4BEBE3C((uint64_t **)(v10 + v23), *(uint64_t **)(a2 + v23), (uint64_t *)(a2 + v23 + 8));
          *(_OWORD *)(v25 + 24) = *(_OWORD *)(a2 + v23 + 24);
          sub_1C499AD9C(v25 + 40, *(void **)(a2 + v23 + 40), (void *)(a2 + v23 + 48));
        }
        *(void *)(v25 + 64) = *(void *)(a2 + v23 + 64);
        v23 += 72;
      }
      while (v24 != v23);
      uint64_t v10 = a1[1];
    }
    uint64_t v20 = sub_1C4BEC1C0(v9, v22, a3, v10);
    goto LABEL_29;
  }
  if (a2 != a3)
  {
    uint64_t v26 = 0;
    do
    {
      uint64_t v27 = v10 + v26;
      if (a2 != v10)
      {
        sub_1C4BEBE3C((uint64_t **)(v10 + v26), *(uint64_t **)(a2 + v26), (uint64_t *)(a2 + v26 + 8));
        *(_OWORD *)(v27 + 24) = *(_OWORD *)(a2 + v26 + 24);
        sub_1C499AD9C(v27 + 40, *(void **)(a2 + v26 + 40), (void *)(a2 + v26 + 48));
      }
      *(void *)(v27 + 64) = *(void *)(a2 + v26 + 64);
      v26 += 72;
    }
    while (a2 + v26 != a3);
    uint64_t v21 = a1[1];
    v10 += v26;
  }
  if (v21 != v10)
  {
    uint64_t v28 = v21 - 32;
    do
    {
      uint64_t v29 = v28 - 40;
      sub_1C4999C7C(v28, *(void **)(v28 + 8));
      sub_1C494AC4C(v28 - 40, *(void **)(v28 - 32));
      v28 -= 72;
    }
    while (v29 != v10);
  }
  a1[1] = v10;
}

void sub_1C4BEC604(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C4BEC60C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C4BEC614(uint64_t a1, double *a2, uint64_t a3, char a4)
{
BOOL sub_1C4BEDF38(double *a1, double *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 5) < a1[4])
      {
        uint64_t v6 = (uint64_t)(a2 - 9);
        uint64_t v7 = (uint64_t)a1;
        goto LABEL_54;
      }
      return result;
    case 3uLL:
      uint64_t v8 = (uint64_t)(a1 + 9);
      uint64_t v9 = (uint64_t)(a2 - 9);
      double v10 = a1[13];
      double v11 = *(a2 - 5);
      if (v10 < a1[4])
      {
        if (v11 >= v10)
        {
          sub_1C4BEE410((uint64_t)a1, (uint64_t)(a1 + 9));
          if (*(a2 - 5) >= a1[13]) {
            return 1;
          }
          uint64_t v7 = (uint64_t)(a1 + 9);
        }
        else
        {
          uint64_t v7 = (uint64_t)a1;
        }
        uint64_t v6 = (uint64_t)(a2 - 9);
        goto LABEL_54;
      }
      if (v11 < v10) {
        goto LABEL_18;
      }
      return result;
    case 4uLL:
      sub_1C4BEE614((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)(a1 + 18), (uint64_t)(a2 - 9));
      return 1;
    case 5uLL:
      uint64_t v8 = (uint64_t)(a1 + 9);
      uint64_t v9 = (uint64_t)(a1 + 18);
      sub_1C4BEE614((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)(a1 + 18), (uint64_t)(a1 + 27));
      if (*(a2 - 5) < a1[31])
      {
        sub_1C4BEE410((uint64_t)(a1 + 27), (uint64_t)(a2 - 9));
        if (a1[31] < a1[22])
        {
          sub_1C4BEE410((uint64_t)(a1 + 18), (uint64_t)(a1 + 27));
          if (a1[22] < a1[13])
          {
LABEL_18:
            sub_1C4BEE410(v8, v9);
            if (a1[13] < a1[4])
            {
              uint64_t v7 = (uint64_t)a1;
              uint64_t v6 = v8;
LABEL_54:
              sub_1C4BEE410(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v12 = a1 + 18;
      double v13 = a1[13];
      double v14 = a1[22];
      if (v13 < a1[4])
      {
        uint64_t v15 = (uint64_t)a1;
        if (v14 >= v13)
        {
          sub_1C4BEE410((uint64_t)a1, (uint64_t)(a1 + 9));
          if (a1[22] >= a1[13]) {
            goto LABEL_24;
          }
          uint64_t v15 = (uint64_t)(a1 + 9);
        }
        uint64_t v16 = (uint64_t)(a1 + 18);
        goto LABEL_23;
      }
      if (v14 < v13)
      {
        sub_1C4BEE410((uint64_t)(a1 + 9), (uint64_t)(a1 + 18));
        if (a1[13] < a1[4])
        {
          uint64_t v15 = (uint64_t)a1;
          uint64_t v16 = (uint64_t)(a1 + 9);
LABEL_23:
          sub_1C4BEE410(v15, v16);
        }
      }
LABEL_24:
      uint64_t v17 = a1 + 27;
      if (a1 + 27 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      while (1)
      {
        if (v17[4] < v12[4])
        {
          uint64_t v21 = v17 + 1;
          uint64_t v22 = (void *)*((void *)v17 + 1);
          uint64_t v45 = *(void ***)v17;
          int v46 = v22;
          uint64_t v47 = *((void *)v17 + 2);
          if (v47)
          {
            v22[2] = &v46;
            *(void *)uint64_t v17 = v21;
            *uint64_t v21 = 0;
            v17[2] = 0.0;
          }
          else
          {
            uint64_t v45 = &v46;
          }
          double v23 = v17 + 6;
          double v24 = (void *)*((void *)v17 + 6);
          long long v48 = *(_OWORD *)(v17 + 3);
          float v49 = (void *)*((void *)v17 + 5);
          double v50 = v24;
          uint64_t v51 = *((void *)v17 + 7);
          if (v51)
          {
            v24[2] = &v50;
            *((void *)v17 + 5) = v23;
            *double v23 = 0;
            v17[7] = 0.0;
          }
          else
          {
            float v49 = &v50;
          }
          uint64_t v52 = *((void *)v17 + 8);
          uint64_t v25 = v18;
          do
          {
            uint64_t v27 = (void *)((char *)a1 + v25);
            uint64_t v28 = (void **)((char *)a1 + v25 + 224);
            sub_1C494AC4C((uint64_t)a1 + v25 + 216, *v28);
            v27[27] = v27[18];
            double v29 = (void *)((char *)a1 + v25 + 152);
            double v30 = (void *)*v29;
            uint64_t *v28 = (void *)*v29;
            uint64_t v31 = *(void *)((char *)a1 + v25 + 160);
            v27[29] = v31;
            if (v31)
            {
              v30[2] = v28;
              v27[18] = v29;
              void *v29 = 0;
              v27[20] = 0;
            }
            else
            {
              v27[27] = v28;
            }
            uint64_t v32 = (void *)((char *)a1 + v25);
            *(_OWORD *)((char *)a1 + v25 + 240) = *(_OWORD *)((char *)a1 + v25 + 168);
            double v33 = (void **)((char *)a1 + v25 + 264);
            sub_1C4999C7C((uint64_t)a1 + v25 + 256, *v33);
            double v34 = (uint64_t *)((char *)a1 + v25 + 192);
            uint64_t v35 = *v34;
            v32[32] = v32[23];
            v32[33] = v35;
            uint64_t v36 = *(void *)((char *)a1 + v25 + 200);
            v32[34] = v36;
            if (v36)
            {
              *(void *)(v35 + 16) = v33;
              v32[23] = v34;
              *double v34 = 0;
              v32[25] = 0;
              uint64_t v26 = (double *)((char *)a1 + v25);
              *(double *)((char *)a1 + v25 + 280) = *(double *)((char *)a1 + v25 + 208);
              if (v25 == -144)
              {
LABEL_44:
                uint64_t v37 = a1;
                goto LABEL_46;
              }
            }
            else
            {
              *(void *)((char *)a1 + v25 + 256) = v33;
              uint64_t v26 = (double *)((char *)a1 + v25);
              *(double *)((char *)a1 + v25 + 280) = *(double *)((char *)a1 + v25 + 208);
              if (v25 == -144) {
                goto LABEL_44;
              }
            }
            v25 -= 72;
          }
          while (*((double *)&v48 + 1) < v26[13]);
          uint64_t v37 = (double *)((char *)a1 + v25 + 216);
LABEL_46:
          float v39 = (void *)*((void *)v26 + 19);
          uint64_t v38 = (char *)(v26 + 19);
          sub_1C494AC4C((uint64_t)v37, v39);
          long long v40 = v46;
          *(void *)uint64_t v37 = v45;
          *(void *)uint64_t v38 = v40;
          uint64_t v41 = v47;
          *((void *)v37 + 2) = v47;
          if (v41)
          {
            v40[2] = v38;
            uint64_t v45 = &v46;
            int v46 = 0;
            uint64_t v47 = 0;
          }
          else
          {
            *(void *)uint64_t v37 = v38;
          }
          float v42 = v38 + 40;
          *((_OWORD *)v38 + 1) = v48;
          sub_1C4999C7C((uint64_t)(v38 + 32), *((void **)v38 + 5));
          uint64_t v43 = v50;
          *((void *)v38 + 4) = v49;
          *((void *)v38 + 5) = v43;
          uint64_t v44 = v51;
          *((void *)v37 + 7) = v51;
          if (v44)
          {
            uint64_t v20 = 0;
            v43[2] = v42;
            float v49 = &v50;
            double v50 = 0;
            uint64_t v51 = 0;
          }
          else
          {
            *((void *)v38 + 4) = v42;
            uint64_t v20 = v50;
          }
          *((void *)v37 + 8) = v52;
          ++v19;
          sub_1C4999C7C((uint64_t)&v49, v20);
          sub_1C494AC4C((uint64_t)&v45, v46);
          if (v19 == 8) {
            return v17 + 9 == a2;
          }
        }
        unint64_t v12 = v17;
        v18 += 72;
        v17 += 9;
        if (v17 == a2) {
          return 1;
        }
      }
  }
}

void sub_1C4BEE410(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v21 = *(void ***)a1;
  uint64_t v22 = v4;
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23)
  {
    v4[2] = &v22;
    uint64_t v4 = 0;
    *(void *)a1 = v5;
    void *v5 = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    uint64_t v21 = &v22;
  }
  uint64_t v7 = (void *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 40);
  long long v24 = *(_OWORD *)(a1 + 24);
  uint64_t v9 = (void *)(a1 + 48);
  uint64_t v8 = *(void **)(a1 + 48);
  uint64_t v25 = v6;
  uint64_t v26 = v8;
  uint64_t v27 = *(void *)(a1 + 56);
  if (v27)
  {
    v8[2] = &v26;
    void *v7 = v9;
    *uint64_t v9 = 0;
    *(void *)(a1 + 56) = 0;
  }
  else
  {
    uint64_t v25 = &v26;
  }
  uint64_t v28 = *(void *)(a1 + 64);
  sub_1C494AC4C(a1, v4);
  *(void *)a1 = *(void *)a2;
  double v11 = (void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v10;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v5;
    *(void *)a2 = v11;
    void *v11 = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = v5;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_1C4999C7C(a1 + 40, *(void **)(a1 + 48));
  double v13 = (void *)(a2 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v15 = (void *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v14;
  uint64_t v16 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v16;
  if (v16)
  {
    *(void *)(v14 + 16) = v9;
    *double v13 = v15;
    *uint64_t v15 = 0;
    *(void *)(a2 + 56) = 0;
  }
  else
  {
    void *v7 = v9;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  sub_1C494AC4C(a2, *(void **)(a2 + 8));
  uint64_t v17 = v22;
  *(void *)a2 = v21;
  *(void *)(a2 + 8) = v17;
  uint64_t v18 = v23;
  *(void *)(a2 + 16) = v23;
  if (v18)
  {
    v17[2] = v11;
    uint64_t v21 = &v22;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    *(void *)a2 = v11;
  }
  *(_OWORD *)(a2 + 24) = v24;
  sub_1C4999C7C(a2 + 40, *(void **)(a2 + 48));
  int v19 = v26;
  *(void *)(a2 + 40) = v25;
  *(void *)(a2 + 48) = v19;
  uint64_t v20 = v27;
  *(void *)(a2 + 56) = v27;
  if (v20)
  {
    v19[2] = v15;
    int v19 = 0;
    uint64_t v25 = &v26;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    *double v13 = v15;
  }
  *(void *)(a2 + 64) = v28;
  sub_1C4999C7C((uint64_t)&v25, v19);
  sub_1C494AC4C((uint64_t)&v21, v22);
}

void sub_1C4BEE614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  double v8 = *(double *)(a2 + 32);
  double v9 = *(double *)(a3 + 32);
  if (v8 >= *(double *)(a1 + 32))
  {
    if (v9 < v8)
    {
      sub_1C4BEE410(a2, a3);
      if (*(double *)(a2 + 32) < *(double *)(v7 + 32))
      {
        a1 = v7;
        uint64_t v10 = a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v9 < v8)
    {
LABEL_5:
      uint64_t v10 = a3;
LABEL_9:
      sub_1C4BEE410(a1, v10);
      goto LABEL_10;
    }
    sub_1C4BEE410(a1, a2);
    if (*(double *)(a3 + 32) < *(double *)(a2 + 32))
    {
      a1 = a2;
      goto LABEL_5;
    }
  }
LABEL_10:
  if (*(double *)(a4 + 32) < *(double *)(a3 + 32))
  {
    sub_1C4BEE410(a3, a4);
    if (*(double *)(a3 + 32) < *(double *)(a2 + 32))
    {
      sub_1C4BEE410(a2, a3);
      if (*(double *)(a2 + 32) < *(double *)(v7 + 32))
      {
        sub_1C4BEE410(v7, a2);
      }
    }
  }
}

void ManhattanLineRegressor::ManhattanLineRegressor(ManhattanLineRegressor *this, CHDrawing *a2, HTMLog *a3, int a4)
{
  double v8 = a2;
  *((void *)this + 5) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *(void *)this = a3;
  objc_storeStrong((id *)this + 5, a2);
  *((float *)this + 22) = sub_1C49550B0(v8, (double **)this + 12, 80.0);
  objc_msgSend_bounds(v8, v9, v10, v11, v12, v13);
  *((void *)this + 15) = v19;
  *((void *)this + 16) = v20;
  *((void *)this + 17) = v21;
  *((void *)this + 18) = v22;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 3) <= 5)
  {
    objc_msgSend_bounds(*((void **)this + 5), v14, v15, v16, v17, v18);
    operator new();
  }
  ManhattanLineRegressor::detectMiddlePointIndex((double *)this);
  double v29 = (unsigned char *)*((void *)this + 12);
  uint64_t v28 = (unsigned char *)*((void *)this + 13);
  size_t v30 = v28 - v29;
  unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((v28 - v29) >> 3);
  *((_DWORD *)this + 38) = v31 - 1;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  if (!a4) {
    ManhattanLineRegressor::manhattanLineRegression(this, v23, v24, v25, v26, v27);
  }
  __p = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  if (v28 != v29)
  {
    if (v31 >= 0x666666666666667) {
      sub_1C494A220();
    }
    uint64_t v32 = (char *)operator new(v30);
    double v33 = &v32[40 * v31];
    __p = v32;
    uint64_t v57 = v33;
    memcpy(v32, v29, v30 - 3);
    uint64_t v56 = v33;
  }
  if (*((int *)this + 39) <= 2)
  {
    if ((v31 & 0x80000000) == 0) {
      int v34 = v31;
    }
    else {
      int v34 = v31 + 1;
    }
    *((_DWORD *)this + 39) = v34 >> 1;
  }
  ManhattanLineRegressor::manhattanLineArrowheadDetector(this, 1);
  ManhattanLineRegressor::manhattanLineArrowheadDetector(this, 0);
  uint64_t v36 = *((void *)this + 12);
  uint64_t v35 = *((void *)this + 13);
  unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL * ((v35 - v36) >> 3);
  if (v37 >= 6)
  {
    if (*((_DWORD *)this + 38) - *((_DWORD *)this + 40) > 1) {
      goto LABEL_20;
    }
  }
  else
  {
    if ((void **)((char *)this + 96) != &__p)
    {
      sub_1C4BF20DC((void *)this + 12, (char *)__p, v56, 0xCCCCCCCCCCCCCCCDLL * ((v56 - (unsigned char *)__p) >> 3));
      uint64_t v36 = *((void *)this + 12);
      uint64_t v35 = *((void *)this + 13);
      unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL * ((v35 - v36) >> 3);
    }
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 6) = 0;
    int v38 = v37 - 1;
    *((_DWORD *)this + 38) = v38;
    *((_DWORD *)this + 40) = 0;
    if (v38 > 1)
    {
LABEL_20:
      float v39 = objc_alloc_init(CHDrawing);
      long long v40 = (void *)*((void *)this + 10);
      *((void *)this + 10) = v39;

      unint64_t v46 = *((int *)this + 40);
      if ((int)v46 <= *((_DWORD *)this + 38))
      {
        uint64_t v47 = 40 * v46;
        do
        {
          uint64_t v48 = *((void *)this + 12);
          if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 13) - v48) >> 3) <= v46) {
            sub_1C4AD0A9C();
          }
          objc_msgSend_addPoint_(*((void **)this + 10), v41, v42, v43, v44, v45, *(double *)(v48 + v47), *(double *)(v48 + v47 + 8));
          v47 += 40;
        }
        while ((uint64_t)v46++ < *((int *)this + 38));
      }
      objc_storeStrong((id *)this + 5, *((id *)this + 10));
      ManhattanLineRegressor::manhattanLineRegression(this, v50, v51, v52, v53, v54);
    }
  }
  *((_DWORD *)this + 38) = -858993459 * ((unint64_t)(v35 - v36) >> 3) - 1;
  goto LABEL_20;
}

void sub_1C4BEEAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v16 = *v14;
    if (!*v14)
    {
LABEL_3:
      uint64_t v17 = *v13;
      if (!*v13) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v16 = *v14;
    if (!*v14) {
      goto LABEL_3;
    }
  }
  *(void *)(v12 + 176) = v16;
  operator delete(v16);
  uint64_t v17 = *v13;
  if (!*v13)
  {
LABEL_5:

    _Unwind_Resume(a1);
  }
LABEL_4:
  *(void *)(v12 + 104) = v17;
  operator delete(v17);
  goto LABEL_5;
}

void ManhattanLineRegressor::provideAnAnswer(void **this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

double *ManhattanLineRegressor::detectMiddlePointIndex(double *this)
{
  double v2 = this[17];
  double v1 = this[18];
  double v3 = this[15];
  double v4 = this[16] + v1 * 0.5;
  unint64_t v46 = (double **)&v46;
  uint64_t v47 = (double *)&v46;
  uint64_t v48 = 0;
  uint64_t v43 = &v43;
  __p = &v43;
  uint64_t v45 = 0;
  float v5 = v4;
  float v6 = v3 + v2 * 0.5;
  uint64_t v7 = *((void *)this + 12);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 13) - v7) >> 3);
  if (v8 > 1)
  {
    uint64_t v42 = this;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    double v11 = v6;
    double v12 = v5;
    uint64_t v13 = (double *)(v7 + 48);
    uint64_t v14 = 1;
    uint64_t v15 = &v43;
    uint64_t v16 = &v46;
    do
    {
      int v18 = v14 - 1;
      double v19 = *(v13 - 6);
      if (v19 < v11 && (double v20 = *(v13 - 1), v20 >= v11) || v19 > v11 && (double v20 = *(v13 - 1), v20 <= v11))
      {
        if (vabdd_f64(v19, v11) >= vabdd_f64(v20, v11))
        {
          uint64_t v21 = operator new(0x18uLL);
          int v22 = v14;
        }
        else
        {
          uint64_t v21 = operator new(0x18uLL);
          int v22 = v14 - 1;
        }
        v21[4] = v22;
        *(void *)uint64_t v21 = v15;
        *((void *)v21 + 1) = &v43;
        v15[1] = v21;
        ++v9;
        uint64_t v15 = (void **)v21;
        uint64_t v43 = v21;
        uint64_t v45 = v9;
      }
      double v23 = *(v13 - 5);
      if (v23 < v12 && (double v24 = *v13, *v13 >= v12) || v23 > v12 && (double v24 = *v13, *v13 <= v12))
      {
        if (vabdd_f64(v23, v12) < vabdd_f64(v24, v12))
        {
          uint64_t v17 = operator new(0x18uLL);
        }
        else
        {
          uint64_t v17 = operator new(0x18uLL);
          int v18 = v14;
        }
        v17[4] = v18;
        *(void *)uint64_t v17 = v16;
        *((void *)v17 + 1) = &v46;
        v16[1] = (double **)v17;
        ++v10;
        uint64_t v16 = (double ***)v17;
        unint64_t v46 = (double **)v17;
        uint64_t v48 = v10;
      }
      ++v14;
      v13 += 5;
    }
    while (v8 != v14);
    if (v10 == 1)
    {
      uint64_t v27 = (double ***)v47;
      this = v42;
      if (v9 == 1)
      {
LABEL_28:
        float v25 = v2 * v2 + v1 * v1;
        for (i = -1; v27 != &v46; uint64_t v27 = (double ***)v27[1])
        {
          uint64_t v28 = (double *)(v7 + 40 * *((int *)v27 + 4));
          float v29 = *v28 - v11;
          float v30 = v28[1] - v12;
          float v31 = (float)(v30 * v30) + (float)(v29 * v29);
          if (v31 < v25)
          {
            int i = *((_DWORD *)v27 + 4);
            float v25 = v31;
          }
        }
        goto LABEL_32;
      }
    }
    else
    {
      this = v42;
      if (v9 != 1)
      {
        uint64_t v27 = (double ***)v47;
        goto LABEL_28;
      }
      uint64_t v27 = (double ***)__p;
    }
    int i = *((_DWORD *)v27 + 4);
    goto LABEL_36;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  float v25 = v2 * v2 + v1 * v1;
  int i = -1;
  uint64_t v15 = &v43;
LABEL_32:
  uint64_t v32 = (void **)__p;
  if (__p != &v43)
  {
    do
    {
      double v33 = (double *)(v7 + 40 * *((int *)v32 + 4));
      float v34 = *v33 - v6;
      float v35 = v33[1] - v5;
      float v36 = (float)(v35 * v35) + (float)(v34 * v34);
      if (v36 < v25)
      {
        int i = *((_DWORD *)v32 + 4);
        float v25 = v36;
      }
      uint64_t v32 = (void **)v32[1];
    }
    while (v32 != &v43);
  }
LABEL_36:
  if (i < 1)
  {
    *((_DWORD *)this + 39) = 1;
    if (!v9) {
      goto LABEL_45;
    }
    goto LABEL_42;
  }
  if (v8 - 2 < i) {
    int i = v8 - 2;
  }
  *((_DWORD *)this + 39) = i;
  if (v9)
  {
LABEL_42:
    this = (double *)__p;
    uint64_t v37 = *(void *)__p;
    *(void *)(v37 + 8) = v15[1];
    *(void *)v15[1] = v37;
    uint64_t v45 = 0;
    if (this != (double *)&v43)
    {
      do
      {
        int v38 = (void **)*((void *)this + 1);
        operator delete(this);
        this = (double *)v38;
      }
      while (v38 != &v43);
      uint64_t v10 = v48;
    }
  }
LABEL_45:
  if (v10)
  {
    float v39 = v46;
    this = v47;
    double v40 = *v47;
    *(void *)(*(void *)&v40 + 8) = v46[1];
    *v39[1] = v40;
    uint64_t v48 = 0;
    if (this != (double *)&v46)
    {
      do
      {
        uint64_t v41 = (double *)*((void *)this + 1);
        operator delete(this);
        this = v41;
      }
      while (v41 != (double *)&v46);
    }
  }
  return this;
}

void sub_1C4BEEF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1C4AAE650((uint64_t *)va);
  sub_1C4AAE650((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_1C4BEEF9C(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v5 >> 3) >= 0x666666666666667) {
      sub_1C494A220();
    }
    uint64_t v6 = (char *)operator new(v5);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5 - 3);
    a1[1] = v7;
  }
  return a1;
}

void sub_1C4BEF034(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ManhattanLineRegressor::manhattanLineArrowheadDetector(ManhattanLineRegressor *this, int a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 3);
  if (v2 < 6) {
    return;
  }
  uint64_t v3 = this;
  unint64_t v4 = *((unsigned int *)this + 39);
  if ((int)v4 < 3 || v2 - 3 < v4) {
    return;
  }
  v337 = (void **)((char *)this + 96);
  uint64_t v338 = 0;
  uint64_t v342 = 0;
  uint64_t v343 = 0;
  uint64_t v351 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  v341 = 0;
  uint64_t v344 = 0;
  size_t __sz = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  double v11 = 0;
  int v12 = v2 - v4;
  if (v12 <= (int)v4) {
    int v12 = *((_DWORD *)this + 39);
  }
  int v340 = v12;
  uint64_t v377 = 0;
  uint64_t v378 = 0;
  size_t v379 = 0;
  uint64_t v374 = 0;
  uint64_t v375 = 0;
  uint64_t v376 = 0;
  uint64_t v371 = 0;
  uint64_t v372 = 0;
  v373 = 0;
  float v13 = 0.0;
  do
  {
    int v15 = *((_DWORD *)v3 + 39);
    BOOL v16 = v8 >= v15 - 3;
    if (a2)
    {
      unsigned int v17 = v15 + v8;
      BOOL v16 = -3 - 0x3333333333333333 * ((uint64_t)(*((void *)v3 + 13) - *((void *)v3 + 12)) >> 3) <= (unint64_t)(v15 + v8);
      if (v15 + v8 < 0) {
        goto LABEL_10;
      }
    }
    else
    {
      unsigned int v17 = v8;
      if (v8 < 0) {
        goto LABEL_10;
      }
    }
    if (v16)
    {
LABEL_10:
      float v14 = v13;
      goto LABEL_11;
    }
    uint64_t v18 = *((void *)v3 + 12);
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v3 + 13) - v18) >> 3);
    unint64_t v20 = v17 + 3;
    BOOL v21 = v19 > v17 && v19 > v20;
    if (!v21)
    {
      uint64_t v376 = v344;
      uint64_t v377 = v9;
      uint64_t v378 = v343;
      size_t v379 = __sz;
      uint64_t v374 = v10;
      uint64_t v375 = v342;
      uint64_t v372 = v338;
      v373 = v341;
      uint64_t v371 = v11;
      sub_1C4AD0A9C();
    }
    int v22 = (double *)(v18 + 40 * v17);
    double v23 = (double *)(v18 + 40 * v20);
    float v24 = *v23 - *v22;
    float v25 = v23[1] - v22[1];
    float v26 = (float)(v25 * v25) + (float)(v24 * v24);
    uint64_t v356 = v11;
    if (v26 > 0.0)
    {
      float v24 = v24 / v26;
      float v25 = v25 / v26;
    }
    float v27 = atan2f(v25, v24) * 57.296;
    float v28 = 360.0 - fabsf(v27);
    if (v27 < 0.0) {
      float v27 = v28;
    }
    if (v27 >= -25.0 && v27 <= 25.0) {
      float v29 = 0.0;
    }
    else {
      float v29 = v27;
    }
    if (v27 >= 65.0 && v27 <= 115.0) {
      float v29 = 90.0;
    }
    if (v27 >= 155.0 && v27 <= 205.0) {
      float v29 = 180.0;
    }
    if (v27 >= 245.0 && v27 <= 295.0) {
      float v29 = 270.0;
    }
    if (v27 >= 335.0 && v27 <= 385.0) {
      float v14 = 360.0;
    }
    else {
      float v14 = v29;
    }
    if (v27 >= 335.0 && v27 <= 385.0
      || v27 >= 245.0 && v27 <= 295.0
      || v27 >= 155.0 && v27 <= 205.0
      || v27 >= 65.0 && v27 <= 115.0
      || v27 >= -25.0 && v27 <= 25.0)
    {
      unsigned int v30 = 0;
    }
    else
    {
      unsigned int v30 = v17 + 1;
    }
    if (v8 == v15) {
      float v31 = v14;
    }
    else {
      float v31 = v13;
    }
    float v32 = v14 - v31;
    if ((unint64_t)v7 < __sz)
    {
      float *v7 = v32;
      uint64_t v343 = (uint64_t)(v7 + 1);
      double v11 = v356;
      if (v6 < v344) {
        goto LABEL_46;
      }
      goto LABEL_63;
    }
    float v34 = v10;
    uint64_t v35 = v7 - v9;
    unint64_t v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 62) {
      goto LABEL_449;
    }
    if ((uint64_t)(__sz - (void)v9) >> 1 > v36) {
      unint64_t v36 = (uint64_t)(__sz - (void)v9) >> 1;
    }
    if (__sz - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v36;
    }
    if (v37)
    {
      if (v37 >> 62) {
        goto LABEL_446;
      }
      int v38 = operator new(4 * v37);
      float v39 = (float *)&v38[4 * v35];
      float *v39 = v32;
      uint64_t v343 = (uint64_t)(v39 + 1);
      int64_t v40 = (char *)v7 - (char *)v9;
      if (v7 != v9)
      {
LABEL_57:
        unint64_t v41 = v40 - 4;
        if (v41 < 0xBC
          || (unint64_t v65 = ((char *)(v7 - 1) - (char *)v9) & 0xFFFFFFFFFFFFFFFCLL,
              &v38[(char *)v7 - (char *)v9 - 4 - v65] > &v38[(char *)v7 - (char *)v9 - 4])
          || (float *)((char *)v7 - v65 - 4) > v7 - 1
          || (unint64_t)((char *)v9 - v38) < 0x20)
        {
          uint64_t v42 = v7;
          uint64_t v3 = this;
        }
        else
        {
          uint64_t v66 = (v41 >> 2) + 1;
          uint64_t v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v42 = &v7[v67 / 0xFFFFFFFFFFFFFFFCLL];
          float v39 = (float *)((char *)v39 - v67);
          uint64_t v68 = &v38[4 * v35 - 16];
          uint64_t v69 = v7 - 4;
          uint64_t v70 = v66 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v71 = *(_OWORD *)v69;
            *(v68 - 1) = *((_OWORD *)v69 - 1);
            *uint64_t v68 = v71;
            v68 -= 2;
            v69 -= 8;
            v70 -= 8;
          }
          while (v70);
          uint64_t v3 = this;
          if (v66 == (v66 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_60:
            size_t __sz = (size_t)&v38[4 * v37];
            if (!v9) {
              goto LABEL_62;
            }
LABEL_61:
            operator delete(v9);
            goto LABEL_62;
          }
        }
        do
        {
          int v43 = *((_DWORD *)v42-- - 1);
          *((_DWORD *)v39-- - 1) = v43;
        }
        while (v42 != v9);
        goto LABEL_60;
      }
    }
    else
    {
      int v38 = 0;
      float v39 = (float *)(4 * v35);
      *(float *)(4 * v35) = v32;
      uint64_t v343 = 4 * v35 + 4;
      int64_t v40 = (char *)v7 - (char *)v9;
      if (v7 != v9) {
        goto LABEL_57;
      }
    }
    uint64_t v3 = this;
    size_t __sz = (size_t)&v38[4 * v37];
    if (v9) {
      goto LABEL_61;
    }
LABEL_62:
    uint64_t v9 = v39;
    double v11 = v356;
    if (v6 < v344)
    {
LABEL_46:
      *(_DWORD *)uint64_t v6 = v30;
      uint64_t v342 = (uint64_t)(v6 + 4);
      double v33 = v351;
      if (v351 < v341) {
        goto LABEL_47;
      }
      goto LABEL_78;
    }
LABEL_63:
    uint64_t v44 = (v6 - v10) >> 2;
    unint64_t v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 62)
    {
      uint64_t v376 = v344;
      uint64_t v377 = v9;
      uint64_t v378 = v343;
      size_t v379 = __sz;
      uint64_t v374 = v10;
      uint64_t v375 = v342;
      uint64_t v372 = v338;
      v373 = v341;
      uint64_t v371 = v11;
      sub_1C494A220();
    }
    if ((v344 - v10) >> 1 > v45) {
      unint64_t v45 = (v344 - v10) >> 1;
    }
    if ((unint64_t)(v344 - v10) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v45;
    }
    if (v46)
    {
      float v34 = v10;
      if (v46 >> 62) {
        goto LABEL_446;
      }
      uint64_t v47 = operator new(4 * v46);
      uint64_t v48 = &v47[4 * v44];
      *(_DWORD *)uint64_t v48 = v30;
      uint64_t v342 = (uint64_t)(v48 + 4);
      int64_t v49 = v6 - v10;
      if (v6 != v10)
      {
LABEL_72:
        unint64_t v50 = v49 - 4;
        if (v50 < 0xBC
          || (unint64_t v72 = (v6 - 4 - v10) & 0xFFFFFFFFFFFFFFFCLL, &v47[v6 - v10 - 4 - v72] > &v47[v6 - v10 - 4])
          || &v6[-v72 - 4] > v6 - 4
          || (unint64_t)(v10 - v47) < 0x20)
        {
          uint64_t v51 = v6;
          uint64_t v3 = this;
        }
        else
        {
          uint64_t v73 = (v50 >> 2) + 1;
          uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v51 = &v6[-v74];
          v48 -= v74;
          uint64_t v75 = &v47[4 * v44 - 16];
          int64_t v76 = v6 - 16;
          uint64_t v77 = v73 & 0x7FFFFFFFFFFFFFF8;
          uint64_t v3 = this;
          do
          {
            long long v78 = *(_OWORD *)v76;
            *(v75 - 1) = *((_OWORD *)v76 - 1);
            *uint64_t v75 = v78;
            v75 -= 2;
            v76 -= 32;
            v77 -= 8;
          }
          while (v77);
          if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_75:
            uint64_t v344 = &v47[4 * v46];
            if (!v10) {
              goto LABEL_77;
            }
LABEL_76:
            operator delete(v10);
            goto LABEL_77;
          }
        }
        do
        {
          int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
          *((_DWORD *)v48 - 1) = v52;
          v48 -= 4;
        }
        while (v51 != v10);
        goto LABEL_75;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v48 = (char *)(4 * v44);
      *(_DWORD *)(4 * v44) = v30;
      uint64_t v342 = 4 * v44 + 4;
      int64_t v49 = v6 - v10;
      if (v6 != v10) {
        goto LABEL_72;
      }
    }
    uint64_t v3 = this;
    uint64_t v344 = &v47[4 * v46];
    if (v10) {
      goto LABEL_76;
    }
LABEL_77:
    uint64_t v10 = v48;
    double v33 = v351;
    double v11 = v356;
    if (v351 < v341)
    {
LABEL_47:
      *double v33 = v14;
      uint64_t v351 = v33 + 1;
      uint64_t v338 = v33 + 1;
      uint64_t v6 = (char *)v342;
      uint64_t v7 = (float *)v343;
      goto LABEL_11;
    }
LABEL_78:
    int64_t v53 = (char *)v33 - (char *)v11;
    uint64_t v54 = v33 - v11;
    unint64_t v55 = v54 + 1;
    float v34 = v10;
    if ((unint64_t)(v54 + 1) >> 62)
    {
LABEL_449:
      uint64_t v376 = v344;
      uint64_t v377 = v9;
      uint64_t v378 = v343;
      size_t v379 = __sz;
      uint64_t v374 = v34;
      uint64_t v375 = v342;
      uint64_t v372 = v338;
      v373 = v341;
      uint64_t v371 = v356;
      sub_1C494A220();
    }
    if (((char *)v341 - (char *)v11) >> 1 > v55) {
      unint64_t v55 = ((char *)v341 - (char *)v11) >> 1;
    }
    if ((unint64_t)((char *)v341 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v56 = v55;
    }
    if (v56)
    {
      if (v56 >> 62)
      {
LABEL_446:
        uint64_t v376 = v344;
        uint64_t v377 = v9;
        v373 = v341;
        uint64_t v378 = v343;
        size_t v379 = __sz;
        uint64_t v374 = v34;
        uint64_t v375 = v342;
        uint64_t v371 = v356;
        uint64_t v372 = v338;
        sub_1C4949AA8();
      }
      uint64_t v57 = (char *)operator new(4 * v56);
      uint64_t v3 = this;
      float v58 = v351;
      double v11 = v356;
      uint64_t v59 = (float *)&v57[4 * v54];
      *uint64_t v59 = v14;
      uint64_t v60 = (uint64_t)(v59 + 1);
      int64_t v61 = (char *)v351 - (char *)v356;
      if (v351 == v356)
      {
LABEL_100:
        v341 = (float *)&v57[4 * v56];
        uint64_t v338 = (float *)v60;
        if (!v11) {
          goto LABEL_92;
        }
LABEL_91:
        operator delete(v11);
        goto LABEL_92;
      }
    }
    else
    {
      uint64_t v57 = 0;
      float v58 = v351;
      uint64_t v59 = (float *)(4 * v54);
      *(float *)(4 * v54) = v14;
      uint64_t v60 = 4 * v54 + 4;
      int64_t v61 = (char *)v351 - (char *)v11;
      if (v351 == v11) {
        goto LABEL_100;
      }
    }
    unint64_t v62 = v61 - 4;
    if (v62 < 0xBC)
    {
      long long v63 = v58;
      goto LABEL_89;
    }
    double v79 = v58 - 1;
    unint64_t v80 = ((char *)v79 - (char *)v11) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v57[v53 - 4 - v80] > &v57[v53 - 4])
    {
      long long v63 = v351;
      do
      {
LABEL_89:
        int v64 = *((_DWORD *)v63-- - 1);
        *((_DWORD *)v59-- - 1) = v64;
      }
      while (v63 != v11);
      goto LABEL_90;
    }
    if ((float *)((char *)v79 - v80) > v79)
    {
      long long v63 = v351;
      goto LABEL_89;
    }
    if ((unint64_t)((char *)v351 - v57 - v53) < 0x20)
    {
      long long v63 = v351;
      goto LABEL_89;
    }
    uint64_t v81 = (v62 >> 2) + 1;
    uint64_t v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
    long long v63 = &v351[v82 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v59 = (float *)((char *)v59 - v82);
    float v83 = &v57[4 * v54 - 16];
    double v84 = v351 - 4;
    uint64_t v85 = v81 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v86 = *(_OWORD *)v84;
      *((_OWORD *)v83 - 1) = *((_OWORD *)v84 - 1);
      *(_OWORD *)float v83 = v86;
      v83 -= 32;
      v84 -= 8;
      v85 -= 8;
    }
    while (v85);
    if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_89;
    }
LABEL_90:
    v341 = (float *)&v57[4 * v56];
    uint64_t v338 = (float *)v60;
    if (v11) {
      goto LABEL_91;
    }
LABEL_92:
    uint64_t v351 = (float *)v60;
    uint64_t v6 = (char *)v342;
    uint64_t v7 = (float *)v343;
    double v11 = v59;
LABEL_11:
    ++v8;
    float v13 = v14;
  }
  while (v8 != v340);
  uint64_t v376 = v344;
  uint64_t v377 = v9;
  uint64_t v378 = v343;
  size_t v379 = __sz;
  uint64_t v374 = v10;
  uint64_t v375 = v342;
  uint64_t v87 = v6 - v10;
  uint64_t v372 = v338;
  v373 = v341;
  uint64_t v371 = v11;
  if ((unint64_t)(v6 - v10) < 0x18)
  {
    if (a2)
    {
      *((_DWORD *)v3 + 38) = -858993459 * ((*((void *)v3 + 13) - *((void *)v3 + 12)) >> 3) - 1;
      *((_DWORD *)v3 + 16) = 0;
    }
    else
    {
      *((_DWORD *)v3 + 40) = 0;
      *((_DWORD *)v3 + 6) = 0;
    }
    goto LABEL_438;
  }
  uint64_t v368 = 0;
  uint64_t v369 = 0;
  uint64_t v370 = 0;
  unint64_t v88 = v87 >> 2;
  uint64_t v89 = (v87 >> 2) - 3;
  if (v87 >> 2 == 3)
  {
    uint64_t v91 = 0;
    char v140 = 0;
    if ((a2 & 1) == 0) {
      goto LABEL_290;
    }
    char v140 = 0;
    if (!a2) {
      goto LABEL_290;
    }
    goto LABEL_239;
  }
  size_t __sza = v6 - v10;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  unint64_t v93 = 0;
  unint64_t v94 = 0;
  uint64_t v95 = 0;
  uint64_t v352 = (v87 >> 2) - 3;
  uint64_t v357 = v87 >> 2;
  while (2)
  {
    if (v88 <= v93) {
      unint64_t v96 = v93;
    }
    else {
      unint64_t v96 = v88;
    }
    unint64_t v97 = v96 + v92;
    if (v97) {
      BOOL v98 = v97 >= 3;
    }
    else {
      BOOL v98 = 0;
    }
    if (!v98)
    {
      uint64_t v369 = v90;
      uint64_t v370 = v94;
      uint64_t v368 = v95;
      sub_1C4AD0A9C();
    }
    unint64_t v99 = v93++;
    float v100 = &v10[4 * v99];
    if (*((_DWORD *)v100 + 2)) {
      BOOL v101 = *(_DWORD *)&v10[4 * v93] == 0;
    }
    else {
      BOOL v101 = 1;
    }
    if (!v101 && *(_DWORD *)v100 != 0)
    {
      if (v91 < v94)
      {
        *(_DWORD *)uint64_t v91 = v99;
        v91 += 4;
        uint64_t v90 = (uint64_t)v91;
      }
      else
      {
        int64_t v103 = v91 - v95;
        uint64_t v104 = (v91 - v95) >> 2;
        unint64_t v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 62)
        {
          uint64_t v369 = v90;
          uint64_t v370 = v94;
          uint64_t v368 = v95;
          sub_1C494A220();
        }
        double v106 = v91;
        if ((v94 - v95) >> 1 > v105) {
          unint64_t v105 = (v94 - v95) >> 1;
        }
        if ((unint64_t)(v94 - v95) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v107 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v107 = v105;
        }
        if (v107)
        {
          if (v107 >> 62)
          {
            uint64_t v369 = v90;
            uint64_t v370 = v94;
            uint64_t v368 = v95;
            sub_1C4949AA8();
          }
          unint64_t v108 = v107;
          uint64_t v109 = (char *)operator new(4 * v107);
          unint64_t v107 = v108;
          uint64_t v110 = &v109[4 * v104];
          *(_DWORD *)uint64_t v110 = v99;
          uint64_t v90 = (uint64_t)(v110 + 4);
          int64_t v111 = v106 - v95;
          if (v106 == v95) {
            goto LABEL_163;
          }
        }
        else
        {
          uint64_t v109 = 0;
          uint64_t v110 = (char *)(4 * v104);
          *(_DWORD *)(4 * v104) = v99;
          uint64_t v90 = 4 * v104 + 4;
          int64_t v111 = v91 - v95;
          if (v91 == v95) {
            goto LABEL_163;
          }
        }
        unint64_t v112 = v111 - 4;
        if (v112 >= 0xBC)
        {
          unint64_t v116 = (v106 - 4 - v95) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v109[v103 - 4 - v116] > &v109[v103 - 4])
          {
            uint64_t v113 = v106;
          }
          else if (&v106[-v116 - 4] > v106 - 4)
          {
            uint64_t v113 = v106;
          }
          else if ((unint64_t)(v106 - v109 - v103) >= 0x20)
          {
            uint64_t v117 = (v112 >> 2) + 1;
            uint64_t v118 = 4 * (v117 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v113 = &v106[-v118];
            v110 -= v118;
            int v119 = &v109[4 * v104 - 16];
            uint64_t v120 = v106 - 16;
            uint64_t v121 = v117 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v122 = *(_OWORD *)v120;
              *((_OWORD *)v119 - 1) = *((_OWORD *)v120 - 1);
              *(_OWORD *)int v119 = v122;
              v119 -= 32;
              v120 -= 32;
              v121 -= 8;
            }
            while (v121);
            if (v117 == (v117 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_163;
            }
          }
          else
          {
            uint64_t v113 = v106;
          }
        }
        else
        {
          uint64_t v113 = v106;
        }
        do
        {
          int v114 = *((_DWORD *)v113 - 1);
          v113 -= 4;
          *((_DWORD *)v110 - 1) = v114;
          v110 -= 4;
        }
        while (v113 != v95);
LABEL_163:
        unint64_t v94 = &v109[4 * v107];
        if (v95)
        {
          uint64_t v115 = (char *)v90;
          operator delete(v95);
          uint64_t v90 = (uint64_t)v115;
          uint64_t v91 = v115;
        }
        else
        {
          uint64_t v91 = (char *)v90;
        }
        uint64_t v95 = v110;
        uint64_t v3 = this;
        uint64_t v89 = v352;
        unint64_t v88 = v357;
      }
    }
    --v92;
    if (v93 != v89) {
      continue;
    }
    break;
  }
  uint64_t v369 = v90;
  uint64_t v370 = v94;
  uint64_t v368 = v95;
  if (a2)
  {
    if (v91 == v95)
    {
      char v140 = 0;
      if (!a2) {
        goto LABEL_290;
      }
      goto LABEL_239;
    }
    unint64_t v123 = 0;
    char v124 = 0;
    unint64_t v125 = (v91 - v95) >> 2;
    unint64_t v126 = v377;
    unint64_t v127 = (v378 - (uint64_t)v377) >> 2;
    if (v125 <= 1) {
      unint64_t v125 = 1;
    }
    while (1)
    {
      unint64_t v128 = *(int *)&v95[4 * v123];
      unint64_t v129 = v88 - v128;
      if (v88 <= v128)
      {
        int v130 = 0;
        goto LABEL_196;
      }
      if (v129 >= 8)
      {
        uint64_t v131 = (v129 & 0xFFFFFFFFFFFFFFF8) + v128;
        uint64_t v132 = (int32x4_t *)&v10[4 * v128 + 16];
        int32x4_t v133 = 0uLL;
        unint64_t v134 = v129 & 0xFFFFFFFFFFFFFFF8;
        int32x4_t v135 = 0uLL;
        do
        {
          int32x4_t v133 = vsubq_s32(v133, vtstq_s32(v132[-1], v132[-1]));
          int32x4_t v135 = vsubq_s32(v135, vtstq_s32(*v132, *v132));
          v132 += 2;
          v134 -= 8;
        }
        while (v134);
        int v130 = vaddvq_s32(vaddq_s32(v135, v133));
        if (v129 == (v129 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_196;
        }
      }
      else
      {
        int v130 = 0;
        uint64_t v131 = *(int *)&v95[4 * v123];
      }
      uint64_t v136 = v88 - v131;
      uint64_t v137 = &v10[4 * v131];
      do
      {
        int v138 = *(_DWORD *)v137;
        v137 += 4;
        if (v138) {
          ++v130;
        }
        --v136;
      }
      while (v136);
LABEL_196:
      if ((double)(int)((__sza >> 2) - v128) * 0.5 >= (double)v130)
      {
        if (v127 <= v123) {
          sub_1C4AD0A9C();
        }
        if (v126[v123] <= 50.0 || (v124 & 1) != 0) {
          goto LABEL_184;
        }
LABEL_182:
        if (v88 <= v128) {
          sub_1C4AD0A9C();
        }
        *((_DWORD *)v3 + 38) = *(_DWORD *)&v10[4 * v128];
        char v124 = 1;
        *((_DWORD *)v3 + 16) = 1;
        goto LABEL_184;
      }
      if ((v124 & 1) == 0) {
        goto LABEL_182;
      }
LABEL_184:
      if (++v123 == v125)
      {
        uint64_t v91 = v95;
        char v140 = v124 & 1;
        if (!a2) {
          goto LABEL_290;
        }
LABEL_239:
        uint64_t v358 = v91;
        int v152 = *((_DWORD *)v3 + 38);
        unint64_t v153 = v152 - 2;
        uint64_t v154 = *((void *)v3 + 12);
        unint64_t v155 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v3 + 13) - v154) >> 3);
        if (v155 <= v153 || v155 <= v152) {
          sub_1C4AD0A9C();
        }
        uint64_t v157 = (double *)(v154 + 40 * v153);
        double v159 = *v157;
        double v158 = v157[1];
        int v160 = (double *)(v154 + 40 * v152);
        float v161 = *v160 - v159;
        float v162 = v160[1] - v158;
        float v163 = (float)(v162 * v162) + (float)(v161 * v161);
        if (v163 > 0.0)
        {
          float v161 = v161 / v163;
          float v162 = v162 / v163;
        }
        char v353 = v140;
        uint64_t v350 = *((void *)v3 + 12);
        unint64_t v164 = v152 - 3;
        if (v155 - 4 <= v164)
        {
          unsigned int v167 = 0;
        }
        else
        {
          float v165 = atan2f(v162, v161);
          int v166 = 0;
          unsigned int v167 = 0;
          int v168 = 0;
          unint64_t v169 = v155 - v164;
          if (v155 >= v164) {
            unint64_t v170 = v155 - v164;
          }
          else {
            unint64_t v170 = 0;
          }
          unint64_t v171 = v152 - 1;
          if (v155 > v171) {
            unint64_t v171 = v155;
          }
          unint64_t v172 = v171 - v164 - 2;
          unint64_t v173 = v169 - 5;
          if (v172 < v169 - 5) {
            unint64_t v173 = v172;
          }
          if (v173 >= v170) {
            unint64_t v174 = v170;
          }
          else {
            unint64_t v174 = v173;
          }
          float v175 = v165 * 57.296;
          BOOL v177 = v170 <= v173 || v172 == v174;
          int64_t v178 = (double *)(v154 + 40 * v164 + 88);
          unint64_t v179 = v169 - 4;
          do
          {
            if (v177) {
              sub_1C4AD0A9C();
            }
            float v182 = *(v178 - 1) - *(v178 - 11);
            float v183 = *v178 - *(v178 - 10);
            float v184 = (float)(v183 * v183) + (float)(v182 * v182);
            if (v184 > 0.0)
            {
              float v182 = v182 / v184;
              float v183 = v183 / v184;
            }
            float v180 = atan2f(v183, v182) * 57.296;
            if (v180 < 0.0) {
              float v180 = v180 + 360.0;
            }
            float v181 = vabds_f32(v180, v175);
            int v168 = (v168 | v166 ^ 1 | (v181 <= 30.0)) ^ 1;
            v167 += v168 & 1;
            v166 |= v181 > 100.0;
            v178 += 5;
            float v175 = v180;
            --v179;
          }
          while (v179);
        }
        if ((v353 & (v167 < 3)) == 1)
        {
          uint64_t v185 = this;
          uint64_t v186 = *((int *)this + 39);
          uint64_t v187 = v152 - 1;
          if (v152 - 1 <= (int)v186)
          {
            uint64_t v192 = v337;
            uint64_t v188 = v350;
          }
          else
          {
            uint64_t v188 = v350;
            uint64_t v189 = v350 + 40 * v187 + 8;
            float v190 = 3.4028e38;
            int v191 = v152;
            uint64_t v192 = v337;
            do
            {
              unint64_t v195 = v191 - 2;
              if (v155 <= v195) {
                sub_1C4AD0A9C();
              }
              if (v155 <= v187) {
                sub_1C4AD0A9C();
              }
              int v196 = 0;
              int v197 = 0;
              uint64_t v198 = (double *)(v350 + 40 * (int)v195);
              double v199 = *v198;
              double v200 = v198[1];
              uint64_t v201 = (double *)(v350 + 40 * v187);
              double v202 = *v201 - v199;
              double v203 = -(v201[1] - v200);
              uint64_t v204 = (double *)v189;
              unint64_t v205 = v187;
              do
              {
                float v206 = (*(v204 - 1) - v199) * v203 + v202 * (*v204 - v200);
                if (v206 > 0.0)
                {
                  ++v196;
                }
                else if (v206 < 0.0)
                {
                  ++v197;
                }
                ++v205;
                v204 += 5;
              }
              while (v155 > v205);
              int v193 = v196 - v197;
              if (v193 < 0) {
                int v193 = -v193;
              }
              BOOL v194 = v190 <= (float)v193;
              if (v190 > (float)v193) {
                float v190 = (float)v193;
              }
              int v191 = v187;
              if (!v194) {
                int v152 = v187;
              }
              --v187;
              v189 -= 40;
            }
            while (v187 > v186);
          }
          int v278 = v155 - 1;
          if (v152 == v186) {
            int v152 = v155 - 1;
          }
          *((_DWORD *)this + 38) = v152;
          if (v152 - 3 >= (int)v186)
          {
            unint64_t v279 = v152;
            unint64_t v280 = v152 - 2;
            if (v155 <= v280 || v155 <= v152) {
              sub_1C4AD0A9C();
            }
            long long v281 = (double *)(v188 + 40 * v280);
            double v282 = *v281;
            double v283 = v281[1];
            uint64_t v284 = (double *)(v188 + 40 * v152);
            float v285 = *v284 - v282;
            float v286 = v284[1] - v283;
            float v287 = (float)(v286 * v286) + (float)(v285 * v285);
            if (v287 > 0.0)
            {
              float v285 = v285 / v287;
              float v286 = v286 / v287;
            }
            if (v278 > v152 + 1)
            {
              double v288 = v286;
              double v289 = v285;
              unint64_t v290 = v278;
              uint64_t v291 = v188;
              uint64_t v292 = (double *)(v188 + 40 * v278 + 8);
              float v293 = 0.0;
              float v294 = 1000.0;
              int v295 = v155;
              int v296 = v152;
              do
              {
                if (v155 <= v290 || (unint64_t v303 = v290, v304 = v295 - 3, v155 <= v304)) {
                  sub_1C4AD0A9C();
                }
                uint64_t v305 = (double *)(v291 + 40 * (int)v304);
                double v307 = *(v292 - 1);
                double v306 = *v292;
                float v308 = v307 - *v305;
                float v309 = *v292 - v305[1];
                float v310 = (float)(v309 * v309) + (float)(v308 * v308);
                if (v310 > 0.0)
                {
                  float v308 = v308 / v310;
                  float v309 = v309 / v310;
                }
                float v297 = atan2f(v309, v308) * 57.296;
                float v298 = (v307 - v282) * v288 - (v306 - v283) * v289;
                float v299 = vabds_f32(v297, v293);
                BOOL v300 = v294 > v298;
                if (v299 <= 30.0) {
                  BOOL v300 = 0;
                }
                if (v299 >= 100.0) {
                  BOOL v300 = 0;
                }
                BOOL v301 = v296 == v152;
                BOOL v302 = !v300 || !v301;
                if (v300 && v301) {
                  int v296 = v303;
                }
                unint64_t v290 = v303 - 1;
                if (!v302) {
                  float v294 = (v307 - v282) * v288 - (v306 - v283) * v289;
                }
                v292 -= 5;
                int v295 = v303;
                float v293 = v297;
              }
              while ((uint64_t)v290 > v152 + 1);
              unint64_t v279 = v296;
              uint64_t v185 = this;
              uint64_t v192 = v337;
              uint64_t v188 = v291;
              int v278 = v155 - 1;
            }
            if (v155 <= v279) {
              sub_1C4AD0A9C();
            }
            v330 = (uint64_t *)(v188 + 40 * (int)v279);
            uint64_t v331 = *v330;
            uint64_t v332 = v330[1];
            if (v278 > v152) {
              int v333 = ~v152;
            }
            else {
              int v333 = 1 - v155;
            }
            sub_1C4BEEF9C(&__p, (uint64_t)v192);
            uint64_t v334 = *((void *)v185 + 13);
            if (v333 + (int)v155 >= 1)
            {
              uint64_t v334 = v334 - 40 * (v333 + v155 - 1) - 40;
              *((void *)v185 + 13) = v334;
            }
            unint64_t v335 = v334 - (void)*v192;
            if ((void *)v334 == *v192)
            {
              uint64_t v336 = v334;
              if (v192 != &__p)
              {
                sub_1C4BF20DC(v192, (char *)__p, v366, 0xCCCCCCCCCCCCCCCDLL * ((v366 - (unsigned char *)__p) >> 3));
                uint64_t v334 = *((void *)v185 + 12);
                uint64_t v336 = *((void *)v185 + 13);
              }
              *((_DWORD *)v185 + 38) = -858993459 * ((unint64_t)(v336 - v334) >> 3) - 1;
              *((_DWORD *)v185 + 40) = 0;
              *((_DWORD *)v185 + 6) = 0;
              *((_DWORD *)v185 + 16) = 0;
            }
            else
            {
              *(void *)&long long v361 = v331;
              *((void *)&v361 + 1) = v332;
              *(_DWORD *)long long v362 = -858993459 * (v335 >> 3) - 1;
              *(void *)&v362[4] = 0x100000000;
              char v363 = 0;
              int v364 = 0;
              sub_1C4BF1F78(v192, &v361);
              *((_DWORD *)v185 + 38) = -1 - 858993459 * ((*((void *)v185 + 13) - *((void *)v185 + 12)) >> 3);
            }
            if (__p)
            {
              v366 = (char *)__p;
              operator delete(__p);
            }
          }
        }
        goto LABEL_435;
      }
    }
  }
  if (v91 == v95)
  {
    char v140 = 0;
    goto LABEL_290;
  }
  uint64_t v141 = 0;
  char v140 = 0;
  unint64_t v142 = (v91 - v95) >> 2;
  int v143 = *((_DWORD *)v3 + 39);
  if (v142 <= 1) {
    unint64_t v142 = 1;
  }
  do
  {
    uint64_t v144 = *(int *)&v95[4 * v141];
    unint64_t v145 = v144 + 6;
    if ((int)v144 + 6 < v143 && (v140 & 1) == 0)
    {
      if (v88 <= v144 + 9) {
        goto LABEL_213;
      }
      unint64_t v146 = v144 + 7;
      BOOL v147 = v88 > v145 && v88 > v146;
      unint64_t v148 = v144 + 8;
      if (!v147 || v88 <= v148) {
        sub_1C4AD0A9C();
      }
      int v150 = *(_DWORD *)&v10[4 * v146] ? *(_DWORD *)&v10[4 * v145] == 0 : (*(_DWORD *)&v10[4 * v145] == 0) + 1;
      int v151 = *(_DWORD *)&v10[4 * v148] ? v150 : v150 + 1;
      if (v151 == 3)
      {
        *((_DWORD *)v3 + 40) = v145;
        char v140 = 1;
        *((_DWORD *)v3 + 6) = 1;
      }
      else
      {
LABEL_213:
        char v140 = 0;
      }
    }
    ++v141;
  }
  while (v142 != v141);
  uint64_t v91 = v95;
  if (a2) {
    goto LABEL_239;
  }
LABEL_290:
  uint64_t v358 = v91;
  int v207 = *((_DWORD *)v3 + 40);
  uint64_t v208 = (double *)*((void *)v3 + 12);
  uint64_t __szb = *((void *)v3 + 13) - (void)v208;
  unint64_t v209 = 0xCCCCCCCCCCCCCCCDLL * (__szb >> 3);
  unint64_t v210 = v207 + 2;
  if (v209 <= v207 || v209 <= v210) {
    sub_1C4AD0A9C();
  }
  uint64_t v212 = &v208[5 * v207];
  uint64_t v213 = &v208[5 * v210];
  float v214 = *v213 - *v212;
  float v215 = v213[1] - v212[1];
  float v216 = (float)(v215 * v215) + (float)(v214 * v214);
  char v354 = v140;
  if (v216 > 0.0)
  {
    float v214 = v214 / v216;
    float v215 = v215 / v216;
  }
  uint64_t v345 = (double *)*((void *)v3 + 13);
  if (v207 < 4)
  {
    unsigned int v218 = 0;
  }
  else
  {
    int v217 = 0;
    unsigned int v218 = 0;
    int v219 = 0;
    float v220 = atan2f(v215, v214) * 57.296;
    unsigned int v221 = v207;
    do
    {
      int v224 = v221;
      BOOL v21 = v209 > v221;
      unint64_t v225 = v221 + 3;
      if (!v21 || v209 <= v225) {
        sub_1C4AD0A9C();
      }
      uint64_t v227 = &v208[5 * v224];
      uint64_t v228 = &v208[5 * v225];
      float v229 = *v228 - *v227;
      float v230 = v228[1] - v227[1];
      float v231 = (float)(v230 * v230) + (float)(v229 * v229);
      if (v231 > 0.0)
      {
        float v229 = v229 / v231;
        float v230 = v230 / v231;
      }
      float v222 = atan2f(v230, v229) * 57.296;
      if (v222 < 0.0) {
        float v222 = v222 + 360.0;
      }
      float v223 = vabds_f32(v222, v220);
      int v217 = (v217 | v219 ^ 1 | (v223 <= 30.0)) ^ 1;
      v218 += v217 & 1;
      v219 |= v223 > 100.0;
      unsigned int v221 = v224 - 1;
      float v220 = v222;
    }
    while (v224 > 4);
  }
  if ((v354 & (v218 < 4)) == 1)
  {
    uint64_t v232 = this;
    int v233 = *((_DWORD *)this + 39);
    uint64_t v234 = v207 + 1;
    if (v207 + 1 < v233)
    {
      if (v209 <= v234) {
        uint64_t v235 = v207 + 1;
      }
      else {
        uint64_t v235 = 0xCCCCCCCCCCCCCCCDLL * (__szb >> 3);
      }
      int v236 = v207 + 2;
      float v237 = 3.4028e38;
      int v238 = v207;
      do
      {
        int v240 = v238;
        if (v209 <= v238) {
          sub_1C4AD0A9C();
        }
        if (v234 == v235) {
          sub_1C4AD0A9C();
        }
        if (v234 <= 0)
        {
          int v239 = 0;
        }
        else
        {
          int v241 = 0;
          int v242 = 0;
          id v243 = &v208[5 * v240];
          double v244 = *v243;
          double v245 = v243[1];
          unint64_t v248 = (unint64_t)&v208[5 * v234];
          double v246 = *(double *)v248 - v244;
          double v247 = -(*(double *)(v248 + 8) - v245);
          LODWORD(v248) = v236;
          do
          {
            unint64_t v248 = (v248 - 1);
            if (v209 <= v248) {
              sub_1C4AD0A9C();
            }
            float v249 = (v208[5 * v248] - v244) * v247 + v246 * (v208[5 * v248 + 1] - v245);
            if (v249 > 0.0)
            {
              ++v242;
            }
            else if (v249 < 0.0)
            {
              ++v241;
            }
          }
          while ((int)v248 > 1);
          int v239 = v242 - v241;
        }
        int v238 = v234;
        if (v239 < 0) {
          int v239 = -v239;
        }
        if (v237 > (float)v239)
        {
          int v207 = v234;
          float v237 = (float)v239;
        }
        ++v234;
        ++v236;
      }
      while (v233 != v234);
    }
    int v250 = v207 == v233 ? 0 : v207;
    *((_DWORD *)this + 40) = v250;
    unint64_t v251 = v250;
    unint64_t v252 = v250 + 4;
    if ((int)v252 <= v233)
    {
      if (v209 <= v251 || v209 <= v252) {
        sub_1C4AD0A9C();
      }
      uint64_t v253 = &v208[5 * (int)v251];
      double v254 = *v253;
      double v255 = v253[1];
      uint64_t v256 = &v208[5 * v252];
      float v257 = *v256 - v254;
      float v258 = v256[1] - v255;
      float v259 = (float)(v258 * v258) + (float)(v257 * v257);
      if (v259 > 0.0)
      {
        float v257 = v257 / v259;
        float v258 = v258 / v259;
      }
      if ((int)v251 < 5)
      {
        float v263 = 1000.0;
        unint64_t v311 = v251;
      }
      else
      {
        float v355 = v259;
        float v359 = v258;
        double v260 = v258;
        double v261 = v257;
        float v262 = 0.0;
        float v263 = 1000.0;
        int v264 = v207;
        do
        {
          unint64_t v269 = (v207 - 4);
          if (v209 <= v269 || v209 <= v207) {
            sub_1C4AD0A9C();
          }
          uint64_t v271 = &v208[5 * v269];
          uint64_t v272 = &v208[5 * v207];
          double v273 = *v272;
          double v274 = v272[1];
          float v275 = *v272 - *v271;
          float v276 = v274 - v271[1];
          float v277 = (float)(v276 * v276) + (float)(v275 * v275);
          if (v277 > 0.0)
          {
            float v275 = v275 / v277;
            float v276 = v276 / v277;
          }
          float v265 = atan2f(v276, v275) * 57.296;
          float v266 = (v273 - v254) * v260 - (v274 - v255) * v261;
          float v267 = vabds_f32(v265, v262);
          BOOL v268 = v263 > v266;
          if (v267 <= 30.0) {
            BOOL v268 = 0;
          }
          if (v267 >= 100.0) {
            BOOL v268 = 0;
          }
          if (v268 && v264 == v251)
          {
            float v263 = (v273 - v254) * v260 - (v274 - v255) * v261;
            int v264 = v207;
          }
          float v262 = v265;
          BOOL v21 = v207-- <= 5;
        }
        while (!v21);
        unint64_t v311 = v264;
        float v258 = v359;
        float v259 = v355;
      }
      if (v209 <= v311) {
        sub_1C4AD0A9C();
      }
      double v312 = v208[5 * (int)v311 + 1];
      long long v361 = 0uLL;
      *(void *)long long v362 = 0;
      if (v345 != v208)
      {
        if (v209 > 0x666666666666666) {
          sub_1C494A220();
        }
        *(void *)&long long v361 = operator new(__szb);
        *(void *)long long v362 = v361 + 8 * (__szb >> 3);
        memcpy((void *)v361, v208, __szb - 3);
        *((void *)&v361 + 1) = *(void *)v362;
      }
      uint64_t v313 = (char *)operator new(0x28uLL);
      uint64_t v314 = v313 + 40;
      *(double *)uint64_t v313 = v254 + (float)(v259 * (float)(v258 * v263));
      *((double *)v313 + 1) = v312;
      *((void *)v313 + 2) = 0;
      int v315 = 1;
      *((_DWORD *)v313 + 6) = 1;
      v313[28] = 0;
      *((_DWORD *)v313 + 8) = 0;
      v366 = v313 + 40;
      uint32_t v367 = v313 + 40;
      __p = v313;
      while (1)
      {
        float64x2_t v317 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)&v208[5 * v251]));
        if (v314 >= v367) {
          break;
        }
        *(float64x2_t *)uint64_t v314 = v317;
        *((_DWORD *)v314 + 4) = v315;
        *(void *)(v314 + 20) = 0x100000000;
        v314[28] = 0;
        *((_DWORD *)v314 + 8) = 0;
        v314 += 40;
LABEL_388:
        v366 = v314;
        ++v315;
        ++v251;
        uint64_t v208 = (double *)*((void *)v232 + 12);
        uint64_t v316 = *((void *)v232 + 13);
        if (0xCCCCCCCCCCCCCCCDLL * ((v316 - (uint64_t)v208) >> 3) <= v251)
        {
          if (v337 != &__p)
          {
            sub_1C4BF20DC(v337, (char *)__p, v314, 0xCCCCCCCCCCCCCCCDLL * ((v314 - (unsigned char *)__p) >> 3));
            uint64_t v208 = (double *)*((void *)v232 + 12);
            uint64_t v316 = *((void *)v232 + 13);
          }
          uint64_t v326 = v316 - (void)v208;
          if (v326)
          {
            unint64_t v327 = 0xCCCCCCCCCCCCCCCDLL * (v326 >> 3);
            unint64_t v328 = *((int *)v232 + 38) - (uint64_t)*((int *)v232 + 40);
            *((_DWORD *)v232 + 38) = v328;
            *((_DWORD *)v232 + 40) = 0;
            if (v327 < v328) {
              *((_DWORD *)v232 + 38) = v327 - 1;
            }
          }
          else
          {
            if (v337 == (void **)&v361)
            {
              v329 = v208;
            }
            else
            {
              sub_1C4BF20DC(v337, (char *)v361, *((char **)&v361 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v361 + 1) - v361) >> 3));
              uint64_t v208 = (double *)*((void *)v232 + 12);
              v329 = (double *)*((void *)v232 + 13);
            }
            *((_DWORD *)v232 + 38) = -858993459 * ((unint64_t)((char *)v329 - (char *)v208) >> 3) - 1;
            *((_DWORD *)v232 + 40) = 0;
            *((_DWORD *)v232 + 6) = 0;
            *((_DWORD *)v232 + 16) = 0;
          }
          if (__p)
          {
            v366 = (char *)__p;
            operator delete(__p);
          }
          if ((void)v361)
          {
            *((void *)&v361 + 1) = v361;
            operator delete((void *)v361);
          }
          uint64_t v358 = v368;
          goto LABEL_435;
        }
      }
      v318 = (char *)__p;
      unint64_t v319 = 0xCCCCCCCCCCCCCCCDLL * ((v314 - (unsigned char *)__p) >> 3) + 1;
      if (v319 > 0x666666666666666) {
        sub_1C494A220();
      }
      if (0x999999999999999ALL * ((v367 - (unsigned char *)__p) >> 3) > v319) {
        unint64_t v319 = 0x999999999999999ALL * ((v367 - (unsigned char *)__p) >> 3);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v367 - (unsigned char *)__p) >> 3) >= 0x333333333333333) {
        unint64_t v320 = 0x666666666666666;
      }
      else {
        unint64_t v320 = v319;
      }
      if (v320)
      {
        *(float64x2_t *)uint64_t v360 = v317;
        if (v320 > 0x666666666666666) {
          sub_1C4949AA8();
        }
        uint64_t v321 = (char *)operator new(40 * v320);
        float64x2_t v317 = *(float64x2_t *)v360;
      }
      else
      {
        uint64_t v321 = 0;
      }
      uint64_t v322 = &v321[8 * ((v314 - (unsigned char *)__p) >> 3)];
      *(float64x2_t *)uint64_t v322 = v317;
      *((_DWORD *)v322 + 4) = v315;
      *(void *)(v322 + 20) = 0x100000000;
      v322[28] = 0;
      *((_DWORD *)v322 + 8) = 0;
      uint64_t v323 = v322 + 40;
      if (v314 == v318)
      {
        __p = v322;
        uint32_t v367 = &v321[40 * v320];
        v318 = v314;
      }
      else
      {
        do
        {
          long long v324 = *(_OWORD *)(v314 - 40);
          long long v325 = *(_OWORD *)(v314 - 24);
          *(void *)(v322 - 11) = *(void *)(v314 - 11);
          *(_OWORD *)(v322 - 24) = v325;
          *(_OWORD *)(v322 - 40) = v324;
          v322 -= 40;
          v314 -= 40;
        }
        while (v314 != v318);
        __p = v322;
        uint32_t v367 = &v321[40 * v320];
        if (!v318) {
          goto LABEL_406;
        }
      }
      operator delete(v318);
LABEL_406:
      uint64_t v314 = v323;
      uint64_t v232 = this;
      goto LABEL_388;
    }
  }
LABEL_435:
  if (v358)
  {
    uint64_t v369 = (uint64_t)v358;
    operator delete(v358);
  }
  double v11 = v371;
LABEL_438:
  if (v11)
  {
    uint64_t v372 = v11;
    operator delete(v11);
  }
  if (v374) {
    operator delete(v374);
  }
  if (v377) {
    operator delete(v377);
  }
}

void sub_1C4BF0BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a32) {
    operator delete(a32);
  }
  if (a35)
  {
    operator delete(a35);
    float v39 = *(void **)(v37 - 200);
    if (!v39)
    {
LABEL_7:
      int64_t v40 = *(void **)(v37 - 176);
      if (!v40) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  else
  {
    float v39 = *(void **)(v37 - 200);
    if (!v39) {
      goto LABEL_7;
    }
  }
  *(void *)(v37 - 192) = v39;
  operator delete(v39);
  int64_t v40 = *(void **)(v37 - 176);
  if (!v40) {
LABEL_8:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  *(void *)(v37 - 168) = v40;
  operator delete(v40);
  _Unwind_Resume(exception_object);
}

void ManhattanLineRegressor::manhattanLineRegression(ManhattanLineRegressor *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v201[2] = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 50) = -1082130432;
  if (!objc_msgSend_strokeCount(*((void **)this + 5), a2, a3, a4, a5, a6)
    || !objc_msgSend_pointCountForStrokeIndex_(*((void **)this + 5), v7, 0, v8, v9, v10))
  {
    operator new();
  }
  uint64_t v15 = objc_msgSend_pointCountForStrokeIndex_(*((void **)this + 5), v11, 0, v12, v13, v14);
  if ((int)v15 <= 9)
  {
    objc_msgSend_bounds(*((void **)this + 5), v16, v17, v18, v19, v20);
    operator new();
  }
  uint64_t v187 = (uint64_t)&v187;
  uint64_t v194 = v15;
  uint64_t v21 = (v15 - 1);
  int v189 = v15 - 1;
  uint64_t v22 = v21;
  uint64_t v23 = MEMORY[0x1F4188790](v15);
  float v25 = (float *)((char *)&v187 - v24);
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  float v28 = (char *)&v187 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v192 = (char *)&v187 - ((v21 + 15) & 0x1FFFFFFF0);
  objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 5), v29, 0, 0, v30, v31);
  float v33 = v32;
  float v35 = v34;
  int v193 = this;
  uint64_t v36 = 1;
  objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 5), v37, 0, 1, v38, v39);
  float v44 = v43;
  float v46 = v45;
  *float v25 = v44 - v33;
  v25[v21] = -(float)(v44 - v33);
  uint64_t v47 = 2 * v21;
  uint64_t v48 = 2 * v21;
  v25[v48] = v46 - v35;
  uint64_t v49 = v47 + v21;
  v25[v49] = -(float)(v46 - v35);
  uint64_t v190 = v47 + v21;
  double v191 = *(double *)&v25;
  unint64_t v50 = v25 + 1;
  uint64_t v51 = &v28[v47 + v21];
  uint64_t v188 = v47;
  int v52 = &v28[v47];
  uint64_t v195 = v21;
  int v196 = v28;
  int64_t v53 = &v28[v21];
  while (1)
  {
    float v54 = v46;
    float v55 = v44;
    objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)v193 + 5), v40, 0, v36, v41, v42);
    float v44 = v56;
    float v46 = v57;
    float *v50 = v44 - v55;
    v50[v22] = -(float)(v44 - v55);
    v50[v48] = v46 - v54;
    v50[v49] = -(float)(v46 - v54);
    v196[v36] = 127;
    float v58 = *(v50 - 1);
    float v59 = -INFINITY;
    if ((float)(v58 + 1.0) <= -INFINITY)
    {
      uint64_t v60 = &v50[v48];
      float v61 = v50[v48 - 1] + 0.0;
      if (v61 > -INFINITY)
      {
LABEL_38:
        v196[v36] = 2;
        float v59 = v61;
        unint64_t v62 = &v50[v49];
        float v63 = v50[v49 - 1] + 0.0;
        if (v63 <= v61) {
          goto LABEL_12;
        }
LABEL_11:
        v196[v36] = 3;
        float v59 = v63;
        goto LABEL_12;
      }
    }
    else
    {
      v196[v36] = 0;
      float v59 = v58 + 1.0;
      uint64_t v60 = &v50[v48];
      float v61 = v50[v48 - 1] + 0.0;
      if (v61 > (float)(v58 + 1.0)) {
        goto LABEL_38;
      }
    }
    unint64_t v62 = &v50[v49];
    float v63 = v50[v49 - 1] + 0.0;
    if (v63 > v59) {
      goto LABEL_11;
    }
LABEL_12:
    float *v50 = v59 + *v50;
    float v64 = v50[v22 - 1];
    if ((float)(v64 + 1.0) <= -INFINITY) {
      float v65 = -INFINITY;
    }
    else {
      float v65 = v64 + 1.0;
    }
    if (v61 <= v65) {
      float v66 = v65;
    }
    else {
      float v66 = v61;
    }
    v53[v36] = 127;
    BOOL v67 = (float)(v64 + 1.0) <= -INFINITY && v61 <= v65;
    if (!v67)
    {
      if (v61 <= v65) {
        char v68 = 1;
      }
      else {
        char v68 = 2;
      }
      v53[v36] = v68;
    }
    float v69 = *(v62 - 1) + 0.0;
    if (v69 > v66)
    {
      v53[v36] = 3;
      float v66 = v69;
    }
    v50[v22] = v66 + v50[v22];
    float v70 = v58 + 0.0;
    if (v70 <= -INFINITY) {
      char v71 = 127;
    }
    else {
      char v71 = 0;
    }
    float v72 = fmaxf(v70, -INFINITY);
    if ((float)(v64 + 0.0) > v72)
    {
      char v71 = 1;
      float v72 = v64 + 0.0;
    }
    v52[v36] = v71;
    float v73 = *(v60 - 1) + 1.0;
    float v74 = v72;
    if (v73 > v72)
    {
      v52[v36] = 2;
      float v74 = v73;
    }
    v50[v48] = v74 + v50[v48];
    v51[v36] = v71;
    float v75 = *(v62 - 1) + 1.0;
    if (v75 > v72)
    {
      v51[v36] = 3;
      float v72 = v75;
    }
    v50[v49] = v72 + v50[v49];
    ++v36;
    ++v50;
    if (v195 == v36)
    {
      uint64_t v76 = v195;
      uint64_t v77 = (v194 - 2);
      long long v78 = (float *)(*(void *)&v191 + 4 * v77);
      float v79 = v78[v195];
      unsigned int v80 = v79 > *v78;
      if (v79 <= *v78) {
        uint64_t v81 = 0;
      }
      else {
        uint64_t v81 = v195;
      }
      if (v78[v188] > v78[v81]) {
        unsigned int v80 = 2;
      }
      if (v78[v190] <= v78[v195 * (unint64_t)v80]) {
        unsigned int v82 = v80;
      }
      else {
        unsigned int v82 = 3;
      }
      float v83 = v193;
      v192[v77] = v82;
      v201[0] = 0;
      v201[1] = 0;
      objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)v83 + 5), v40, 0, v76, v41, v42);
      double v89 = v88;
      uint64_t v90 = 0;
      uint64_t v91 = 0;
      uint64_t v92 = 0;
      if (v82 >= 2) {
        double v88 = v87;
      }
      float v93 = v88;
      double v191 = v87;
      if (v82 >= 2) {
        double v87 = v89;
      }
      float v94 = v87;
      LODWORD(v190) = 0;
      int v95 = v77;
      *(float *)&uint64_t v194 = v88;
      float v96 = v94;
      float v97 = v88;
      int v98 = v189;
      while (1)
      {
        while (1)
        {
          int v101 = v196[v192[v77] * v195 + v77];
          v192[--v95] = v101;
          unint64_t v102 = (void *)*((void *)v83 + 5);
          if (v101 != v82) {
            break;
          }
          objc_msgSend_pointForStrokeIndex_pointIndex_(v102, v84, 0, v77, v85, v86);
          if ((char)v82 >= 2) {
            double v107 = v105;
          }
          else {
            double v107 = v106;
          }
          float v97 = v107 + v97;
          if ((char)v82 >= 2) {
            double v105 = v106;
          }
          float v108 = v105;
          float v96 = fminf(v96, v108);
          float v94 = fmaxf(v94, v108);
          float v109 = v107;
          LODWORD(v194) = fminf(*(float *)&v194, v109);
          float v93 = fmaxf(v93, v109);
          BOOL v67 = v77-- <= 1;
          if (v67)
          {
LABEL_96:
            float v128 = v94 - v96;
            float v129 = v97 / (float)v98;
            if (v91 < v92)
            {
              *uint64_t v91 = v82;
              *((_DWORD *)v91 + 1) = v190;
              *((float *)v91 + 2) = v129;
              *((float *)v91 + 3) = v96;
              *((float *)v91 + 4) = v94;
              *((_DWORD *)v91 + 5) = v194;
              *((float *)v91 + 6) = v93;
              *((float *)v91 + 7) = v128;
              int v130 = (float *)(v91 + 40);
              *((_DWORD *)v91 + 8) = 0;
              *((_DWORD *)v91 + 9) = v98;
              goto LABEL_112;
            }
            unint64_t v131 = 0xCCCCCCCCCCCCCCCDLL * ((v91 - (char *)v90) >> 3) + 1;
            if (v131 > 0x666666666666666) {
              sub_1C494A220();
            }
            if (0x999999999999999ALL * ((v92 - (char *)v90) >> 3) > v131) {
              unint64_t v131 = 0x999999999999999ALL * ((v92 - (char *)v90) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v92 - (char *)v90) >> 3) >= 0x333333333333333) {
              unint64_t v131 = 0x666666666666666;
            }
            if (v131)
            {
              if (v131 > 0x666666666666666) {
                sub_1C4949AA8();
              }
              uint64_t v132 = (char *)operator new(40 * v131);
            }
            else
            {
              uint64_t v132 = 0;
            }
            int32x4_t v133 = &v132[8 * ((v91 - (char *)v90) >> 3)];
            char *v133 = v82;
            *((_DWORD *)v133 + 1) = v190;
            *((float *)v133 + 2) = v129;
            *((float *)v133 + 3) = v96;
            *((float *)v133 + 4) = v94;
            *((_DWORD *)v133 + 5) = v194;
            *((float *)v133 + 6) = v93;
            *((float *)v133 + 7) = v128;
            *((_DWORD *)v133 + 8) = 0;
            *((_DWORD *)v133 + 9) = v98;
            int v130 = (float *)(v133 + 40);
            if (v91 == (char *)v90)
            {
              uint64_t v136 = &v132[8 * ((v91 - (char *)v90) >> 3)];
              if (v90) {
                goto LABEL_110;
              }
            }
            else
            {
              do
              {
                long long v134 = *(_OWORD *)(v91 - 40);
                long long v135 = *(_OWORD *)(v91 - 24);
                uint64_t v136 = v133 - 40;
                *((void *)v133 - 1) = *((void *)v91 - 1);
                *(_OWORD *)(v133 - 24) = v135;
                *(_OWORD *)(v133 - 40) = v134;
                v91 -= 40;
                v133 -= 40;
              }
              while (v91 != (char *)v90);
              if (v90) {
LABEL_110:
              }
                operator delete(v90);
            }
            uint64_t v90 = (float *)v136;
LABEL_112:
            objc_msgSend_bounds(*((void **)v83 + 5), v84, v103, v104, v85, v86);
            uint64_t v198 = 0;
            double v199 = 0;
            double v200 = 0;
            unint64_t v146 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v130 - (char *)v90) >> 3);
            if (v146 <= 1)
            {
              *((_DWORD *)v83 + 50) = -1082130432;
              objc_msgSend_bounds(*((void **)v83 + 5), v137, v138, v139, v140, v141);
              operator new();
            }
            if ((char *)v130 - (char *)v90 == 80)
            {
              if (v90[1] > 0.0)
              {
                if (v90[11] > 0.0)
                {
                  *((_DWORD *)v83 + 50) = 0;
                  float v147 = 0.0;
                  if (v90 != v130)
                  {
                    unint64_t v148 = v90;
                    do
                    {
                      float v147 = v147
                           + fmaxf(fminf((float)((float)(v148[1] / (float)((float)(v148[6] - v148[5]) + 1.0)) + -3.0) / 5.0, 1.0), -1.0);
                      *((float *)v83 + 50) = v147;
                      v148 += 10;
                    }
                    while (v148 != v130);
                  }
                  *((float *)v83 + 50) = v147 / (float)v146;
                  int v149 = *((unsigned __int8 *)v90 + 40);
                  if ((char)v149 < 2)
                  {
                    if (!*((unsigned char *)v90 + 40)) {
                      double v144 = 0.0;
                    }
                    double v150 = v90[2];
                    *((double *)v83 + 6) = v150;
                    *((double *)v83 + 1) = v142 + v144;
                    double v151 = v90[12];
                    *((double *)v83 + 2) = v151;
                    if (*(unsigned char *)v90 == 3) {
                      double v152 = 0.0;
                    }
                    else {
                      double v152 = v145;
                    }
                    *((double *)v83 + 7) = v143 + v152;
                    *(double *)&long long v197 = v150;
                    *((double *)&v197 + 1) = v151;
                    sub_1C4943D88(&v198, &v197);
                    operator new();
                  }
                  double v184 = v90[12];
                  if (*(unsigned char *)v90 == 1) {
                    double v144 = 0.0;
                  }
                  *((double *)v83 + 6) = v142 + v144;
                  if (v149 == 2) {
                    double v185 = 0.0;
                  }
                  else {
                    double v185 = v145;
                  }
                  *((double *)v83 + 1) = v184;
                  *((double *)v83 + 2) = v143 + v185;
                  double v186 = v90[2];
                  *((double *)v83 + 7) = v186;
                  *(double *)&long long v197 = v184;
                  *((double *)&v197 + 1) = v186;
                  sub_1C4943D88(&v198, &v197);
                  operator new();
                }
                *((_DWORD *)v83 + 50) = -1082130432;
                ManhattanLineRegressor::provideAnAnswer((void **)v83, v137, v138, v139, v140, v141);
              }
              *((_DWORD *)v83 + 50) = -1082130432;
              objc_msgSend_bounds(*((void **)v83 + 5), v137, v138, v139, v140, v141);
              operator new();
            }
            *((_DWORD *)v83 + 50) = 0;
            float v153 = 0.0;
            if (v90 != v130)
            {
              uint64_t v154 = v90;
              do
              {
                float v153 = v153
                     + fmaxf(fminf((float)((float)(v154[1] / (float)((float)(v154[6] - v154[5]) + 1.0)) + -3.0) / 5.0, 1.0), -1.0);
                *((float *)v83 + 50) = v153;
                v154 += 10;
              }
              while (v154 != v130);
            }
            *((float *)v83 + 50) = v153 / (float)v146;
            int v155 = *((unsigned __int8 *)v130 - 40);
            if ((char)v155 >= 2)
            {
              BOOL v156 = v155 == 2;
              uint64_t v161 = 0x3FFFFFFFFFFFFFFALL;
              if (v156) {
                uint64_t v161 = 0x3FFFFFFFFFFFFFF9;
              }
              float v158 = *(v130 - 8);
              double v162 = v130[v161];
              *((double *)v83 + 1) = v158;
              *((double *)v83 + 2) = v162;
              double v159 = (char *)v83 + 8;
              if ((int)v146 < 2) {
                goto LABEL_134;
              }
            }
            else
            {
              BOOL v156 = v155 == 0;
              uint64_t v157 = 0x3FFFFFFFFFFFFFFALL;
              if (v156) {
                uint64_t v157 = 0x3FFFFFFFFFFFFFF9;
              }
              float v158 = *(v130 - 8);
              *((double *)v83 + 1) = v130[v157];
              *((double *)v83 + 2) = v158;
              double v159 = (char *)v83 + 8;
              if ((int)v146 < 2)
              {
LABEL_134:
                int v160 = 0;
                goto LABEL_169;
              }
            }
            int v196 = v159;
            float v163 = 0;
            unint64_t v164 = 0;
            int v160 = 0;
            uint64_t v165 = (v146 - 2);
            while (1)
            {
LABEL_143:
              float v166 = v158;
              unsigned int v167 = &v90[10 * v165];
              int v168 = *(char *)v167;
              float v158 = v167[2];
              if (v168 >= 2) {
                float v169 = v166;
              }
              else {
                float v169 = v167[2];
              }
              if (v168 >= 2) {
                float v166 = v167[2];
              }
              double v170 = v166;
              double v171 = v169;
              if (v163 >= v164) {
                break;
              }
              double *v163 = v170;
              v163[1] = v171;
              v163 += 2;
              BOOL v67 = v165-- <= 0;
              if (v67) {
                goto LABEL_168;
              }
            }
            uint64_t v172 = ((char *)v163 - v160) >> 4;
            unint64_t v173 = v172 + 1;
            if ((unint64_t)(v172 + 1) >> 60)
            {
              double v199 = v163;
              double v200 = v164;
              uint64_t v198 = v160;
              sub_1C494A220();
            }
            if (((char *)v164 - v160) >> 3 > v173) {
              unint64_t v173 = ((char *)v164 - v160) >> 3;
            }
            if ((unint64_t)((char *)v164 - v160) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v174 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v174 = v173;
            }
            if (v174)
            {
              if (v174 >> 60)
              {
                double v199 = v163;
                double v200 = v164;
                uint64_t v198 = v160;
                sub_1C4949AA8();
              }
              float v175 = (char *)operator new(16 * v174);
              double v176 = (double *)&v175[16 * v172];
              *double v176 = v170;
              v176[1] = v171;
              if (v163 != (double *)v160)
              {
LABEL_158:
                BOOL v177 = v176;
                do
                {
                  int64_t v178 = v177 - 2;
                  *((_OWORD *)v177 - 1) = *((_OWORD *)v163 - 1);
                  v163 -= 2;
                  v177 -= 2;
                }
                while (v163 != (double *)v160);
                unint64_t v164 = (double *)&v175[16 * v174];
                float v163 = v176 + 2;
                if (v160) {
LABEL_161:
                }
                  operator delete(v160);
LABEL_162:
                int v160 = (char *)v178;
                float v83 = v193;
                BOOL v67 = v165-- <= 0;
                if (v67)
                {
LABEL_168:
                  double v199 = v163;
                  double v200 = v164;
LABEL_169:
                  uint64_t v198 = v160;
                  if (*(unsigned char *)v90) {
                    uint64_t v179 = 12;
                  }
                  else {
                    uint64_t v179 = 16;
                  }
                  if (*(unsigned char *)v90 == 2) {
                    uint64_t v180 = 16;
                  }
                  else {
                    uint64_t v180 = 12;
                  }
                  uint64_t v181 = 8;
                  if (*(char *)v90 >= 2) {
                    uint64_t v182 = 8;
                  }
                  else {
                    uint64_t v182 = v179;
                  }
                  if (*(char *)v90 >= 2) {
                    uint64_t v181 = v180;
                  }
                  double v183 = *(float *)((char *)v90 + v181);
                  *((double *)v83 + 6) = *(float *)((char *)v90 + v182);
                  *((double *)v83 + 7) = v183;
                  operator new();
                }
                goto LABEL_143;
              }
            }
            else
            {
              float v175 = 0;
              double v176 = (double *)(16 * v172);
              *double v176 = v170;
              v176[1] = v171;
              if (v163 != (double *)v160) {
                goto LABEL_158;
              }
            }
            int64_t v178 = v176;
            unint64_t v164 = (double *)&v175[16 * v174];
            float v163 = v176 + 2;
            if (v160) {
              goto LABEL_161;
            }
            goto LABEL_162;
          }
        }
        objc_msgSend_pointForStrokeIndex_pointIndex_(v102, v84, 0, v77, v85, v86);
        double v111 = v110;
        double v113 = v112;
        double v114 = v191 - v110;
        double v115 = v89 - v112;
        if ((char)v82 >= 2) {
          double v114 = v115;
        }
        if (v82) {
          double v114 = -v114;
        }
        float v116 = v114;
        float v117 = v94 - v96;
        float v118 = v97 / (float)(v98 - v77);
        if (v91 < v92)
        {
          *uint64_t v91 = v82;
          *((float *)v91 + 1) = v116;
          *((float *)v91 + 2) = v118;
          *((float *)v91 + 3) = v96;
          *((float *)v91 + 4) = v94;
          *((_DWORD *)v91 + 5) = v194;
          *((float *)v91 + 6) = v93;
          *((float *)v91 + 7) = v117;
          *((_DWORD *)v91 + 8) = v77;
          *((_DWORD *)v91 + 9) = v98;
          v91 += 40;
          uint64_t v119 = (char)v82;
          if (*((float *)v201 + (char)v82) >= v116) {
            goto LABEL_54;
          }
          goto LABEL_53;
        }
        unint64_t v120 = 0xCCCCCCCCCCCCCCCDLL * ((v91 - (char *)v90) >> 3) + 1;
        if (v120 > 0x666666666666666) {
          sub_1C494A220();
        }
        if (0x999999999999999ALL * ((v92 - (char *)v90) >> 3) > v120) {
          unint64_t v120 = 0x999999999999999ALL * ((v92 - (char *)v90) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v92 - (char *)v90) >> 3) >= 0x333333333333333) {
          unint64_t v121 = 0x666666666666666;
        }
        else {
          unint64_t v121 = v120;
        }
        if (v121)
        {
          if (v121 > 0x666666666666666) {
            sub_1C4949AA8();
          }
          long long v122 = (char *)operator new(40 * v121);
        }
        else
        {
          long long v122 = 0;
        }
        unint64_t v123 = (float *)&v122[8 * ((v91 - (char *)v90) >> 3)];
        *(unsigned char *)unint64_t v123 = v82;
        v123[1] = v116;
        v123[2] = v118;
        v123[3] = v96;
        v123[4] = v94;
        *((_DWORD *)v123 + 5) = v194;
        v123[6] = v93;
        v123[7] = v117;
        *((_DWORD *)v123 + 8) = v77;
        *((_DWORD *)v123 + 9) = v98;
        if (v91 == (char *)v90)
        {
          unint64_t v127 = &v122[8 * ((v91 - (char *)v90) >> 3)];
          uint64_t v92 = &v122[40 * v121];
          uint64_t v91 = (char *)(v123 + 10);
          if (v90) {
            goto LABEL_91;
          }
        }
        else
        {
          char v124 = &v122[8 * ((v91 - (char *)v90) >> 3)];
          do
          {
            long long v125 = *(_OWORD *)(v91 - 40);
            long long v126 = *(_OWORD *)(v91 - 24);
            unint64_t v127 = v124 - 40;
            *((void *)v124 - 1) = *((void *)v91 - 1);
            *(_OWORD *)(v124 - 24) = v126;
            *(_OWORD *)(v124 - 40) = v125;
            v91 -= 40;
            v124 -= 40;
          }
          while (v91 != (char *)v90);
          uint64_t v92 = &v122[40 * v121];
          uint64_t v91 = (char *)(v123 + 10);
          if (v90) {
LABEL_91:
          }
            operator delete(v90);
        }
        uint64_t v90 = (float *)v127;
        float v83 = v193;
        uint64_t v119 = (char)v82;
        if (*((float *)v201 + (char)v82) >= v116) {
          goto LABEL_54;
        }
LABEL_53:
        *((float *)v201 + v119) = v116;
LABEL_54:
        *(float *)&uint64_t v190 = v116;
        LOBYTE(v82) = v101;
        if ((char)v101 >= 2) {
          double v99 = v111;
        }
        else {
          double v99 = v113;
        }
        float v97 = v99;
        if ((char)v101 >= 2) {
          double v100 = v113;
        }
        else {
          double v100 = v111;
        }
        double v191 = v111;
        double v89 = v113;
        float v96 = v100;
        int v98 = v77;
        float v94 = v96;
        *(float *)&uint64_t v194 = v97;
        float v93 = v97;
        BOOL v67 = v77-- <= 1;
        if (v67) {
          goto LABEL_96;
        }
      }
    }
  }
}

void sub_1C4BF1D00(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void **)(v1 + 104);
  if (v6)
  {
    *(void *)(v1 + 112) = v6;
    operator delete(v6);
  }
  MEMORY[0x1C8786460](v3, 0x10A1C4053507AA1);
  uint64_t v7 = *(void **)(v4 - 200);
  if (v7)
  {
    *(void *)(v4 - 192) = v7;
    operator delete(v7);
    if (!v2) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else if (!v2)
  {
    goto LABEL_5;
  }
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BF1E30(uint64_t a1, long long *a2, long long *a3, char **a4)
{
  *(void *)(a1 + 64) = 0;
  *(void *)a1 = &unk_1F2011C18;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  long long v5 = *a2;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v5;
  long long v6 = *a3;
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 40) = v6;
  if ((char **)(a1 + 64) != a4) {
    sub_1C49B7D84((void *)(a1 + 64), *a4, a4[1], (a4[1] - *a4) >> 4);
  }
  *(_DWORD *)(a1 + 8) = 1109917696;
  return a1;
}

void sub_1C4BF1EC8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1C4BF1EE4(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (v5 < 0) {
      sub_1C494A220();
    }
    long long v6 = (char *)operator new(v3 - *(void *)a2);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = &v6[16 * (v5 >> 4)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1C4BF1F5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4BF1F78(void **a1, long long *a2)
{
  int64_t v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    *((void *)v5 + 4) = *((void *)a2 + 4);
    *(_OWORD *)int64_t v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    uint64_t v8 = v5 + 40;
LABEL_3:
    a1[1] = v8;
    return;
  }
  uint64_t v9 = (char *)*a1;
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x666666666666666) {
    sub_1C494A220();
  }
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (void)v9) >> 3);
  if (2 * v12 > v11) {
    unint64_t v11 = 2 * v12;
  }
  if (v12 >= 0x333333333333333) {
    unint64_t v13 = 0x666666666666666;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 > 0x666666666666666) {
      sub_1C4949AA8();
    }
    uint64_t v14 = (char *)operator new(40 * v13);
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v15 = &v14[40 * v10];
  long long v16 = a2[1];
  *(_OWORD *)uint64_t v15 = *a2;
  *((_OWORD *)v15 + 1) = v16;
  *((void *)v15 + 4) = *((void *)a2 + 4);
  uint64_t v8 = v15 + 40;
  if (v5 != v9)
  {
    do
    {
      long long v17 = *(_OWORD *)(v5 - 40);
      long long v18 = *(_OWORD *)(v5 - 24);
      *(void *)(v15 - 11) = *(void *)(v5 - 11);
      *(_OWORD *)(v15 - 24) = v18;
      *(_OWORD *)(v15 - 40) = v17;
      v15 -= 40;
      v5 -= 40;
    }
    while (v5 != v9);
    int64_t v5 = (char *)*a1;
  }
  *a1 = v15;
  a1[1] = v8;
  a1[2] = &v14[40 * v13];
  if (!v5) {
    goto LABEL_3;
  }
  operator delete(v5);
  a1[1] = v8;
}

float ManhattanLineRegressor::confidenceScoreVersusFreeform(ManhattanLineRegressor *this)
{
  return *((float *)this + 50);
}

void *sub_1C4BF20DC(void *result, char *__src, char *a3, size_t __sz)
{
  long long v6 = __src;
  long long v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666) {
LABEL_23:
    }
      sub_1C494A220();
    uint64_t v13 = 5 * v12;
    BOOL result = operator new(40 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      BOOL result = memcpy(result, v6, v14 - 3);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v15 = (void **)(result + 1);
  long long v16 = (unsigned char *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 3;
    uint64_t v19 = (void *)*result;
LABEL_21:
    BOOL result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  long long v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    BOOL result = memmove((void *)*result, __src, v16 - v9 - 3);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 3;
    uint64_t v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v15 = &v9[v14];
  return result;
}

void sub_1C4BF3AE8(_Unwind_Exception *a1)
{
}

void sub_1C4BF3B18(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x390], 8);
  _Block_object_dispose(&STACK[0x3B0], 8);
  _Block_object_dispose(&STACK[0x3E0], 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BF3B58(double a1)
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  unint64_t v2 = (uint64_t (*)(__CFString *, void, double))off_1EA3C9528;
  uint64_t v9 = off_1EA3C9528;
  if (!off_1EA3C9528)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = sub_1C4BF3DB4;
    v5[3] = &unk_1E64E1EC8;
    v5[4] = &v6;
    sub_1C4BF3DB4((uint64_t)v5);
    unint64_t v2 = (uint64_t (*)(__CFString *, void, double))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    unint64_t v4 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v4);
  }
  return v2(@"Helvetica-Bold", 0, a1);
}

void sub_1C4BF3C58(uint64_t a1, double a2, double a3)
{
  float64x2_t v4 = vaddq_f64(*(float64x2_t *)(a1 + 96), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 80), a3), *(float64x2_t *)(a1 + 64), a2));
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    float64x2_t v26 = v4;
    double MaxX = CGRectGetMaxX(*(CGRect *)(v5 + 32));
    double MaxY = CGRectGetMaxY(*(CGRect *)(*(void *)(*(void *)(a1 + 40) + 8) + 32));
    float64x2_t v4 = v26;
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    double v9 = *(double *)(v8 + 32);
    if (v9 >= v26.f64[0]) {
      double v9 = v26.f64[0];
    }
    *(double *)(v8 + 32) = v9;
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    double v11 = *(double *)(v10 + 40);
    if (v11 >= v26.f64[1]) {
      double v11 = v26.f64[1];
    }
    *(double *)(v10 + 40) = v11;
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
    double v13 = *(double *)(v12 + 32);
    double v14 = MaxX - v13;
    double v15 = v26.f64[0] - v13;
    if (v14 > v15) {
      double v15 = v14;
    }
    *(double *)(v12 + 4_Block_object_dispose(&STACK[0x320], 8) = v15;
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
    double v17 = *(double *)(v16 + 40);
    double v18 = MaxY - v17;
    double v19 = v26.f64[1] - v17;
    if (v18 <= v19) {
      double v18 = v19;
    }
    *(double *)(v16 + 56) = v18;
    *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(double *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                            + 24)
                                                                + sqrt((v26.f64[1]- *(double *)(*(void *)(*(void *)(a1 + 48) + 8)+ 40))* (v26.f64[1]- *(double *)(*(void *)(*(void *)(a1 + 48) + 8)+ 40))+ (v26.f64[0]- *(double *)(*(void *)(*(void *)(a1 + 48) + 8)+ 32))* (v26.f64[0]- *(double *)(*(void *)(*(void *)(a1 + 48) + 8)+ 32)));
  }
  else
  {
    __asm
    {
      FMOV            V0.2D, #-0.5
      FMOV            V1.2D, #1.0
    }
    *(float64x2_t *)(v5 + 32) = vaddq_f64(v4, _Q0);
    *(_OWORD *)(v5 + 4_Block_object_dispose(&STACK[0x320], 8) = _Q1;
  }
  *(float64x2_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 32) = v4;
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

void *sub_1C4BF3DB4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9530)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4BF3EF4;
    v5[4] = &unk_1E64E1AA8;
    void v5[5] = v5;
    long long v6 = xmmword_1E64E4FB0;
    uint64_t v7 = 0;
    qword_1EA3C9530 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    unint64_t v2 = (void *)qword_1EA3C9530;
    if (qword_1EA3C9530)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  unint64_t v2 = (void *)qword_1EA3C9530;
LABEL_5:
  BOOL result = dlsym(v2, "CTFontCreateWithName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EA3C9528 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1C4BF3EF4()
{
  uint64_t result = _sl_dlopen();
  qword_1EA3C9530 = result;
  return result;
}

void *sub_1C4BF3F68(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9530)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4BF3EF4;
    v5[4] = &unk_1E64E1AA8;
    void v5[5] = v5;
    long long v6 = xmmword_1E64E4FB0;
    uint64_t v7 = 0;
    qword_1EA3C9530 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    unint64_t v2 = (void *)qword_1EA3C9530;
    if (qword_1EA3C9530)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  unint64_t v2 = (void *)qword_1EA3C9530;
LABEL_5:
  uint64_t result = dlsym(v2, "CTParagraphStyleCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EA3C9538 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4BF40A8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9530)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4BF3EF4;
    v5[4] = &unk_1E64E1AA8;
    void v5[5] = v5;
    long long v6 = xmmword_1E64E4FB0;
    uint64_t v7 = 0;
    qword_1EA3C9530 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    unint64_t v2 = (void *)qword_1EA3C9530;
    if (qword_1EA3C9530)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  unint64_t v2 = (void *)qword_1EA3C9530;
LABEL_5:
  uint64_t result = dlsym(v2, "kCTFontAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EA3C9540 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4BF41E8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9530)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4BF3EF4;
    v5[4] = &unk_1E64E1AA8;
    void v5[5] = v5;
    long long v6 = xmmword_1E64E4FB0;
    uint64_t v7 = 0;
    qword_1EA3C9530 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    unint64_t v2 = (void *)qword_1EA3C9530;
    if (qword_1EA3C9530)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  unint64_t v2 = (void *)qword_1EA3C9530;
LABEL_5:
  uint64_t result = dlsym(v2, "kCTForegroundColorAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EA3C9548 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4BF4328(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9530)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4BF3EF4;
    v5[4] = &unk_1E64E1AA8;
    void v5[5] = v5;
    long long v6 = xmmword_1E64E4FB0;
    uint64_t v7 = 0;
    qword_1EA3C9530 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    unint64_t v2 = (void *)qword_1EA3C9530;
    if (qword_1EA3C9530)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  unint64_t v2 = (void *)qword_1EA3C9530;
LABEL_5:
  uint64_t result = dlsym(v2, "kCTParagraphStyleAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EA3C9550 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4BF4468(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9530)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4BF3EF4;
    v5[4] = &unk_1E64E1AA8;
    void v5[5] = v5;
    long long v6 = xmmword_1E64E4FB0;
    uint64_t v7 = 0;
    qword_1EA3C9530 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    unint64_t v2 = (void *)qword_1EA3C9530;
    if (qword_1EA3C9530)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  unint64_t v2 = (void *)qword_1EA3C9530;
LABEL_5:
  uint64_t result = dlsym(v2, "CTFramesetterCreateWithAttributedString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EA3C9558 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4BF45A8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9530)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4BF3EF4;
    v5[4] = &unk_1E64E1AA8;
    void v5[5] = v5;
    long long v6 = xmmword_1E64E4FB0;
    uint64_t v7 = 0;
    qword_1EA3C9530 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    unint64_t v2 = (void *)qword_1EA3C9530;
    if (qword_1EA3C9530)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  unint64_t v2 = (void *)qword_1EA3C9530;
LABEL_5:
  uint64_t result = dlsym(v2, "CTFramesetterCreateFrame");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EA3C9560 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4BF46E8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9530)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4BF3EF4;
    v5[4] = &unk_1E64E1AA8;
    void v5[5] = v5;
    long long v6 = xmmword_1E64E4FB0;
    uint64_t v7 = 0;
    qword_1EA3C9530 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    unint64_t v2 = (void *)qword_1EA3C9530;
    if (qword_1EA3C9530)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  unint64_t v2 = (void *)qword_1EA3C9530;
LABEL_5:
  uint64_t result = dlsym(v2, "CTFrameDraw");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EA3C9568 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void BezierLineRegressor::BezierLineRegressor(BezierLineRegressor *this)
{
  *((void *)this + 1) = 0;
  *(_OWORD *)((char *)this + 252) = xmmword_1C4C44FE0;
}

{
  *((void *)this + 1) = 0;
  *(_OWORD *)((char *)this + 252) = xmmword_1C4C44FE0;
}

void BezierLineRegressor::init(BezierLineRegressor *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *((void *)this + 2) = objc_msgSend_pointCountForStrokeIndex_(*((void **)this + 1), a2, 0, a4, a5, a6);
  operator new[]();
}

void BezierLineRegressor::~BezierLineRegressor(BezierLineRegressor *this)
{
  uint64_t v2 = **((void **)this + 11);
  if (v2) {
    MEMORY[0x1C8786430](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = **((void **)this + 13);
  if (v3) {
    MEMORY[0x1C8786430](v3, 0x1000C8077774924);
  }
  uint64_t v4 = **((void **)this + 12);
  if (v4) {
    MEMORY[0x1C8786430](v4, 0x1000C8000313F17);
  }
  uint64_t v5 = *(void *)(*((void *)this + 11) + 8);
  if (v5) {
    MEMORY[0x1C8786430](v5, 0x1000C8000313F17);
  }
  uint64_t v6 = *(void *)(*((void *)this + 13) + 8);
  if (v6) {
    MEMORY[0x1C8786430](v6, 0x1000C8077774924);
  }
  uint64_t v7 = *(void *)(*((void *)this + 12) + 8);
  if (v7) {
    MEMORY[0x1C8786430](v7, 0x1000C8000313F17);
  }
  uint64_t v8 = *(void *)(*((void *)this + 11) + 16);
  if (v8) {
    MEMORY[0x1C8786430](v8, 0x1000C8000313F17);
  }
  uint64_t v9 = *(void *)(*((void *)this + 13) + 16);
  if (v9) {
    MEMORY[0x1C8786430](v9, 0x1000C8077774924);
  }
  uint64_t v10 = *(void *)(*((void *)this + 12) + 16);
  if (v10) {
    MEMORY[0x1C8786430](v10, 0x1000C8000313F17);
  }
  uint64_t v11 = *(void *)(*((void *)this + 11) + 24);
  if (v11) {
    MEMORY[0x1C8786430](v11, 0x1000C8000313F17);
  }
  uint64_t v12 = *(void *)(*((void *)this + 13) + 24);
  if (v12) {
    MEMORY[0x1C8786430](v12, 0x1000C8077774924);
  }
  uint64_t v13 = *(void *)(*((void *)this + 12) + 24);
  if (v13) {
    MEMORY[0x1C8786430](v13, 0x1000C8000313F17);
  }
  uint64_t v14 = *((void *)this + 11);
  if (v14) {
    MEMORY[0x1C8786430](v14, 0x80C80B8603338);
  }
  uint64_t v15 = *((void *)this + 13);
  if (v15) {
    MEMORY[0x1C8786430](v15, 0x10C80436913F5);
  }
  uint64_t v16 = *((void *)this + 12);
  if (v16) {
    MEMORY[0x1C8786430](v16, 0x80C80B8603338);
  }
  uint64_t v17 = *((void *)this + 3);
  if (v17) {
    MEMORY[0x1C8786430](v17, 0x1000C8000313F17);
  }
  uint64_t v18 = *((void *)this + 75);
  if (v18) {
    MEMORY[0x1C8786430](v18, 0x1000C8000313F17);
  }
  uint64_t v19 = *((void *)this + 6);
  if (v19) {
    MEMORY[0x1C8786430](v19, 0x1000C8000313F17);
  }
  uint64_t v20 = *((void *)this + 4);
  if (v20) {
    MEMORY[0x1C8786430](v20, 0x1000C8000313F17);
  }
  uint64_t v21 = *((void *)this + 28);
  if (v21) {
    MEMORY[0x1C8786430](v21, 0x1000C8000313F17);
  }
  uint64_t v22 = *((void *)this + 5);
  if (v22) {
    MEMORY[0x1C8786430](v22, 0x1000C8000313F17);
  }
}

void BezierLineRegressor::BezierLineRegressor(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  a3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = 0;
  *(_OWORD *)(a1 + 252) = xmmword_1C4C44FE0;
  *(void *)a1 = a5;
  objc_storeStrong((id *)(a1 + 8), a3);
  BezierLineRegressor::init((BezierLineRegressor *)a1, v8, v9, v10, v11, v12);
}

void sub_1C4BF5778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *a13, uint64_t a14, uint64_t a15)
{
  operator delete(v16);

  _Unwind_Resume(a1);
}

float64_t BezierLineRegressor::timeEstimation(BezierLineRegressor *this, int a2, float64x2_t _Q0)
{
  switch(a2)
  {
    case 0:
      memcpy((void *)(*((void *)this + 8) + 8), (const void *)(*((void *)this + 3) + 8), 8 * *((void *)this + 2) - 16);
      goto LABEL_38;
    case 1:
      memcpy((void *)(*((void *)this + 8) + 8), (const void *)(*((void *)this + 3) + 8), 8 * *((void *)this + 2) - 16);
      uint64_t v4 = *((void *)this + 2);
      if ((unint64_t)(v4 - 1) < 2) {
        goto LABEL_38;
      }
      uint64_t v5 = *((void *)this + 8);
      uint64_t v6 = v4 - 2;
      if ((unint64_t)(v4 - 2) < 4)
      {
        unint64_t v7 = 1;
LABEL_18:
        uint64_t v23 = ~v7 + v4;
        uint64_t v24 = (double *)(v5 + 8 * v7);
        do
        {
          _Q0.f64[0] = sqrt(*v24);
          *v24++ = _Q0.f64[0];
          --v23;
        }
        while (v23);
        goto LABEL_38;
      }
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFCLL | 1;
      uint64_t v20 = (float64x2_t *)(v5 + 24);
      unint64_t v21 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        _Q0 = vsqrtq_f64(v20[-1]);
        float64x2_t v22 = vsqrtq_f64(*v20);
        v20[-1] = _Q0;
        float64x2_t *v20 = v22;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v6 != (v6 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
      goto LABEL_38;
    case 2:
      memcpy((void *)(*((void *)this + 8) + 8), (const void *)(*((void *)this + 3) + 8), 8 * *((void *)this + 2) - 16);
      uint64_t v8 = *((void *)this + 2);
      if ((unint64_t)(v8 - 1) < 2) {
        goto LABEL_38;
      }
      uint64_t v9 = *((void *)this + 8);
      uint64_t v10 = v8 - 2;
      if ((unint64_t)(v8 - 2) < 4)
      {
        unint64_t v11 = 1;
LABEL_24:
        uint64_t v31 = ~v11 + v8;
        double v32 = (double *)(v9 + 8 * v11);
        _Q0.f64[0] = 0.5;
        do
        {
          *double v32 = sqrt(*v32) * 0.5 + *v32 * 0.5;
          ++v32;
          --v31;
        }
        while (v31);
        goto LABEL_38;
      }
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL | 1;
      float v25 = (float64x2_t *)(v9 + 24);
      __asm { FMOV            V0.2D, #0.5 }
      unint64_t v29 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        float64x2_t v30 = vmlaq_f64(vmulq_f64(vsqrtq_f64(*v25), _Q0), _Q0, *v25);
        v25[-1] = vmlaq_f64(vmulq_f64(vsqrtq_f64(v25[-1]), _Q0), _Q0, v25[-1]);
        *float v25 = v30;
        v25 += 2;
        v29 -= 4;
      }
      while (v29);
      if (v10 != (v10 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_24;
      }
      goto LABEL_38;
    case 3:
      memcpy((void *)(*((void *)this + 8) + 8), (const void *)(*((void *)this + 3) + 8), 8 * *((void *)this + 2) - 16);
      uint64_t v12 = *((void *)this + 2);
      if ((unint64_t)(v12 - 1) < 2) {
        goto LABEL_38;
      }
      uint64_t v13 = *((void *)this + 8);
      uint64_t v14 = v12 - 2;
      if ((unint64_t)(v12 - 2) < 4)
      {
        unint64_t v15 = 1;
LABEL_30:
        uint64_t v36 = ~v15 + v12;
        uint64_t v37 = (double *)(v13 + 8 * v15);
        do
        {
          _Q0.f64[0] = *v37 * *v37;
          *v37++ = _Q0.f64[0];
          --v36;
        }
        while (v36);
        goto LABEL_38;
      }
      unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFFCLL | 1;
      float v33 = (float64x2_t *)(v13 + 24);
      unint64_t v34 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        _Q0 = vmulq_f64(v33[-1], v33[-1]);
        float64x2_t v35 = vmulq_f64(*v33, *v33);
        v33[-1] = _Q0;
        *float v33 = v35;
        v33 += 2;
        v34 -= 4;
      }
      while (v34);
      if (v14 != (v14 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_30;
      }
      goto LABEL_38;
    case 4:
      memcpy((void *)(*((void *)this + 8) + 8), (const void *)(*((void *)this + 3) + 8), 8 * *((void *)this + 2) - 16);
      uint64_t v16 = *((void *)this + 2);
      if ((unint64_t)(v16 - 1) < 2) {
        goto LABEL_38;
      }
      uint64_t v17 = *((void *)this + 8);
      uint64_t v18 = v16 - 2;
      if ((unint64_t)(v16 - 2) < 4)
      {
        unint64_t v19 = 1;
LABEL_36:
        uint64_t v41 = ~v19 + v16;
        uint64_t v42 = (double *)(v17 + 8 * v19);
        _Q0.f64[0] = 0.5;
        do
        {
          *uint64_t v42 = *v42 * (*v42 * 0.5) + *v42 * 0.5;
          ++v42;
          --v41;
        }
        while (v41);
        goto LABEL_38;
      }
      unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFFCLL | 1;
      uint64_t v38 = (float64x2_t *)(v17 + 24);
      __asm { FMOV            V0.2D, #0.5 }
      unint64_t v39 = v18 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        float64x2_t v40 = vmlaq_f64(vmulq_f64(*v38, vmulq_f64(*v38, _Q0)), _Q0, *v38);
        v38[-1] = vmlaq_f64(vmulq_f64(v38[-1], vmulq_f64(v38[-1], _Q0)), _Q0, v38[-1]);
        float64x2_t *v38 = v40;
        v38 += 2;
        v39 -= 4;
      }
      while (v39);
      if (v18 != (v18 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_36;
      }
LABEL_38:
      unint64_t v43 = *((void *)this + 2);
      if (v43 < 2) {
        return _Q0.f64[0];
      }
      uint64_t v44 = *((void *)this + 8);
      uint64_t v45 = *((void *)this + 9);
      uint64_t v46 = *((void *)this + 10);
      if (v43 < 0xB)
      {
        uint64_t v47 = 1;
LABEL_63:
        unint64_t v67 = v43 - v47;
        uint64_t v68 = 8 * v47;
        float v69 = (void *)(v46 + v68);
        float v70 = (double *)(v45 + v68);
        char v71 = (double *)(v44 + v68);
        do
        {
          double v72 = *v71 * *v71;
          *v70++ = v72;
          double v73 = *v71++;
          _Q0.f64[0] = v72 * v73;
          *v69++ = *(void *)&_Q0.f64[0];
          --v67;
        }
        while (v67);
        return _Q0.f64[0];
      }
      unint64_t v48 = v45 + 8 * v43;
      unint64_t v49 = v46 + 8;
      unint64_t v50 = v46 + 8 * v43;
      unint64_t v51 = v44 + 8;
      unint64_t v52 = v44 + 8 * v43;
      BOOL v54 = v45 + 8 < v52 && v51 < v48;
      BOOL v56 = v49 < v52 && v51 < v50;
      BOOL v57 = v49 >= v48 || v45 + 8 >= v50;
      uint64_t v47 = 1;
      if (!v57) {
        goto LABEL_63;
      }
      if (v54) {
        goto LABEL_63;
      }
      if (v56) {
        goto LABEL_63;
      }
      unint64_t v58 = (v43 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v47 = v58 | 1;
      float v59 = (float64x2_t *)(v44 + 24);
      uint64_t v60 = (float64x2_t *)(v45 + 24);
      float v61 = (float64x2_t *)(v46 + 24);
      unint64_t v62 = v58;
      do
      {
        float64x2_t v63 = v59[-1];
        float64x2_t v64 = *v59;
        float64x2_t v65 = vmulq_f64(v63, v63);
        float64x2_t v66 = vmulq_f64(v64, v64);
        v60[-1] = v65;
        *uint64_t v60 = v66;
        _Q0 = vmulq_f64(v65, v63);
        v61[-1] = _Q0;
        *float v61 = vmulq_f64(v66, v64);
        v59 += 2;
        v60 += 2;
        v61 += 2;
        v62 -= 4;
      }
      while (v62);
      if (v43 - 1 != v58) {
        goto LABEL_63;
      }
      return _Q0.f64[0];
    default:
      goto LABEL_38;
  }
}

double BezierLineRegressor::controlPointEstimation(BezierLineRegressor *this)
{
  cblas_dgemm_NEWLAPACK();
  *((_OWORD *)this + 25) = *((_OWORD *)this + 32);
  *((void *)this + 52) = *((void *)this + 66);
  *(_OWORD *)((char *)this + 424) = *((_OWORD *)this + 34);
  *((void *)this + 55) = *((void *)this + 70);
  long long v2 = *((_OWORD *)this + 36);
  *((void *)this + 5_Block_object_dispose(&STACK[0x320], 8) = *((void *)this + 74);
  *((_OWORD *)this + 2_Block_object_dispose(&STACK[0x320], 8) = v2;
  dgetrf_NEWLAPACK();
  dgetri_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  dgetrf_NEWLAPACK();
  dgetri_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  return *((double *)this + 16);
}

double BezierLineRegressor::getError(BezierLineRegressor *this, CGPoint a2)
{
  long long v2 = (void *)*((void *)this + 5);
  *((void *)this + 14) = *v2;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 15) = v2[1];
  *((CGPoint *)this + _Block_object_dispose(&STACK[0x320], 8) = a2;
  uint64_t v4 = &v2[2 * v3];
  *((void *)this + 1_Block_object_dispose(&STACK[0x320], 8) = *(v4 - 2);
  *((void *)this + 19) = *(v4 - 1);
  cblas_dgemm_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  cblas_daxpy_NEWLAPACK();
  cblas_ddot_NEWLAPACK();
  double v6 = v5;
  cblas_ddot_NEWLAPACK();
  return (v6 + v7) / (double)(int)v3;
}

void BezierLineRegressor::timeEstimation(BezierLineRegressor *this, CGPoint a2)
{
  uint64_t v4 = (void *)*((void *)this + 11);
  uint64_t v3 = *((void *)this + 12);
  double v5 = (void *)*v4;
  double v6 = (void *)v4[1];
  *(void *)void *v4 = 0;
  double v7 = *(void **)(v3 + 8);
  **(void **)uint64_t v3 = 0;
  void *v6 = 0;
  void *v7 = 0;
  uint64_t v8 = (void *)v4[2];
  uint64_t v9 = (void *)v4[3];
  *uint64_t v8 = 0;
  unint64_t v11 = *(void **)(v3 + 16);
  uint64_t v10 = *(void **)(v3 + 24);
  void *v11 = 0;
  *uint64_t v9 = 0;
  *uint64_t v10 = 0;
  unint64_t v12 = *((void *)this + 2);
  if (v12 < 2) {
    goto LABEL_55;
  }
  uint64_t v13 = 0;
  uint64_t v14 = (double *)*((void *)this + 5);
  double v15 = v14[1];
  CGFloat v16 = a2.x + a2.x + *v14 * -2.0;
  double v17 = a2.y + a2.y + v15 * -2.0;
  uint64_t v18 = &v14[2 * v12];
  double v19 = v15 + a2.y * -2.0 + *(v18 - 1);
  double v20 = *v14 + a2.x * -2.0 + *(v18 - 2);
  double v145 = v19 * -4.0;
  double v146 = v20 * -4.0;
  double v147 = v16;
  double v21 = v20 + v20;
  double v144 = -v16;
  double v22 = v19 + v19;
  unint64_t v23 = 1;
  uint64_t v24 = 8;
  do
  {
    float v25 = (double *)*((void *)this + 5);
    float v26 = fmax(v146 * (*v25 - v25[v13 + 2]) + v147 * v147, 0.0);
    double v27 = sqrtf(v26);
    float v28 = fmax(v145 * (v25[1] - v25[v13 + 3]) + v17 * v17, 0.0);
    double v29 = sqrtf(v28);
    float64x2_t v30 = (void *)*((void *)this + 12);
    uint64_t v31 = v30[1];
    double v32 = (double *)(*v30 + v24);
    *double v32 = (v144 - v27) / v21;
    *(double *)(v31 + v24) = (v27 - v147) / v21;
    uint64_t v34 = v30[2];
    uint64_t v33 = v30[3];
    *(double *)(v34 + v24) = (-v17 - v29) / v22;
    *(double *)(v33 + v24) = (v29 - v17) / v22;
    double v35 = *(v32 - 1);
    double v36 = *v32;
    double v37 = 1.0e20;
    if (*v32 > v35 + -0.1)
    {
      double v38 = *(double *)(*v4 + v24 - 8);
      double v37 = v38 - cbrt(v36 - v35);
    }
    double v39 = *(double *)(v31 + v24 - 8);
    if (v36 <= v39 + -0.1 || (double v40 = *(double *)(v4[1] + v24 - 8), v41 = v40 - cbrt(v36 - v39), v41 >= v37))
    {
      char v42 = 0;
      double v43 = *(double *)(v34 + v24 - 8);
      if (v36 <= v43 + -0.1) {
        goto LABEL_13;
      }
    }
    else
    {
      char v42 = 1;
      double v37 = v41;
      double v43 = *(double *)(v34 + v24 - 8);
      if (v36 <= v43 + -0.1) {
        goto LABEL_13;
      }
    }
    double v44 = *(double *)(v4[2] + v24 - 8);
    double v45 = v44 - cbrt(v36 - v43);
    if (v45 < v37)
    {
      char v42 = 2;
      double v37 = v45;
    }
LABEL_13:
    double v46 = *(double *)(v33 + v24 - 8);
    if (v36 > v46 + -0.1)
    {
      double v47 = *(double *)&v9[(unint64_t)v24 / 8 - 1];
      double v48 = v47 - cbrt(v36 - v46);
      if (v48 < v37)
      {
        char v42 = 3;
        double v37 = v48;
      }
    }
    *(unsigned char *)(**((void **)this + 13) + v23) = v42;
    unint64_t v49 = (uint64_t *)*((void *)this + 11);
    unint64_t v50 = (void *)*((void *)this + 12);
    uint64_t v51 = *v49;
    *(double *)(*v49 + v24) = v37;
    uint64_t v52 = v50[1];
    double v53 = *(double *)(v52 + v24);
    double v54 = *(double *)(*v50 + v24 - 8);
    double v55 = 1.0e20;
    if (v53 > v54 + -0.1)
    {
      double v56 = *(double *)(v51 + v24 - 8);
      double v55 = v56 - cbrt(v53 - v54);
    }
    double v57 = *(double *)(v52 + v24 - 8);
    if (v53 <= v57 + -0.1 || (double v58 = *(double *)(v49[1] + v24 - 8), v59 = v58 - cbrt(v53 - v57), v59 >= v55))
    {
      char v60 = 0;
      double v61 = *(double *)(v50[2] + v24 - 8);
      if (v53 <= v61 + -0.1) {
        goto LABEL_25;
      }
    }
    else
    {
      char v60 = 1;
      double v55 = v59;
      double v61 = *(double *)(v50[2] + v24 - 8);
      if (v53 <= v61 + -0.1) {
        goto LABEL_25;
      }
    }
    double v62 = *(double *)(v49[2] + v24 - 8);
    double v63 = v62 - cbrt(v53 - v61);
    if (v63 < v55)
    {
      char v60 = 2;
      double v55 = v63;
    }
LABEL_25:
    double v64 = *(double *)(v50[3] + v24 - 8);
    if (v53 > v64 + -0.1)
    {
      double v65 = *(double *)(v49[3] + v24 - 8);
      double v66 = v65 - cbrt(v53 - v64);
      if (v66 < v55)
      {
        char v60 = 3;
        double v55 = v66;
      }
    }
    *(unsigned char *)(*(void *)(*((void *)this + 13) + 8) + v23) = v60;
    unint64_t v67 = (void *)*((void *)this + 11);
    uint64_t v68 = (void *)*((void *)this + 12);
    uint64_t v69 = v67[1];
    *(double *)(v69 + v24) = v55;
    uint64_t v70 = v68[2];
    double v71 = *(double *)(v70 + v24);
    double v72 = *(double *)(*v68 + v24 - 8);
    if (v71 <= v72 + -0.1)
    {
      double v74 = 1.0e20;
      double v75 = *(double *)(v68[1] + v24 - 8);
      if (v71 <= v75 + -0.1) {
        goto LABEL_35;
      }
    }
    else
    {
      double v73 = *(double *)(*v67 + v24 - 8);
      double v74 = v73 - cbrt(v71 - v72);
      double v75 = *(double *)(v68[1] + v24 - 8);
      if (v71 <= v75 + -0.1) {
        goto LABEL_35;
      }
    }
    double v76 = *(double *)(v69 + v24 - 8);
    double v77 = v76 - cbrt(v71 - v75);
    if (v77 < v74)
    {
      char v78 = 1;
      double v74 = v77;
      double v79 = *(double *)(v70 + v24 - 8);
      if (v71 <= v79 + -0.1) {
        goto LABEL_38;
      }
      goto LABEL_36;
    }
LABEL_35:
    char v78 = 0;
    double v79 = *(double *)(v70 + v24 - 8);
    if (v71 <= v79 + -0.1) {
      goto LABEL_38;
    }
LABEL_36:
    double v80 = *(double *)(v67[2] + v24 - 8);
    double v81 = v80 - cbrt(v71 - v79);
    if (v81 < v74)
    {
      char v78 = 2;
      double v74 = v81;
    }
LABEL_38:
    double v82 = *(double *)(v68[3] + v24 - 8);
    if (v71 > v82 + -0.1)
    {
      double v83 = *(double *)(v67[3] + v24 - 8);
      double v84 = v83 - cbrt(v71 - v82);
      if (v84 < v74)
      {
        char v78 = 3;
        double v74 = v84;
      }
    }
    *(unsigned char *)(*(void *)(*((void *)this + 13) + 16) + v23) = v78;
    uint64_t v85 = (void *)*((void *)this + 11);
    uint64_t v86 = (void *)*((void *)this + 12);
    uint64_t v87 = v85[2];
    *(double *)(v87 + v24) = v74;
    uint64_t v88 = v86[3];
    double v89 = *(double *)(v88 + v24);
    double v90 = *(double *)(*v86 + v24 - 8);
    if (v89 <= v90 + -0.1)
    {
      double v92 = 1.0e20;
      double v93 = *(double *)(v86[1] + v24 - 8);
      if (v89 <= v93 + -0.1) {
        goto LABEL_48;
      }
    }
    else
    {
      double v91 = *(double *)(*v85 + v24 - 8);
      double v92 = v91 - cbrt(v89 - v90);
      double v93 = *(double *)(v86[1] + v24 - 8);
      if (v89 <= v93 + -0.1) {
        goto LABEL_48;
      }
    }
    double v94 = *(double *)(v85[1] + v24 - 8);
    double v95 = v94 - cbrt(v89 - v93);
    if (v95 < v92)
    {
      char v96 = 1;
      double v92 = v95;
      double v97 = *(double *)(v86[2] + v24 - 8);
      if (v89 <= v97 + -0.1) {
        goto LABEL_51;
      }
      goto LABEL_49;
    }
LABEL_48:
    char v96 = 0;
    double v97 = *(double *)(v86[2] + v24 - 8);
    if (v89 <= v97 + -0.1) {
      goto LABEL_51;
    }
LABEL_49:
    double v98 = *(double *)(v87 + v24 - 8);
    double v99 = v98 - cbrt(v89 - v97);
    if (v99 < v92)
    {
      char v96 = 2;
      double v92 = v99;
    }
LABEL_51:
    double v100 = *(double *)(v88 + v24 - 8);
    if (v89 > v100 + -0.1)
    {
      double v101 = *(double *)(v85[3] + v24 - 8);
      double v102 = v101 - cbrt(v89 - v100);
      if (v102 < v92)
      {
        char v96 = 3;
        double v92 = v102;
      }
    }
    *(unsigned char *)(*(void *)(*((void *)this + 13) + 24) + v23) = v96;
    uint64_t v4 = (void *)*((void *)this + 11);
    uint64_t v9 = (void *)v4[3];
    *(double *)&v9[(unint64_t)v24 / 8] = v92;
    ++v23;
    unint64_t v12 = *((void *)this + 2);
    v24 += 8;
    v13 += 2;
  }
  while (v23 < v12);
  double v5 = (void *)*v4;
  double v6 = (void *)v4[1];
  uint64_t v8 = (void *)v4[2];
LABEL_55:
  unint64_t v103 = v12 - 1;
  uint64_t v104 = v12 - 1;
  BOOL v105 = *(double *)&v6[v104] < *(double *)&v5[v104];
  if (*(double *)&v8[v104] >= *(double *)(v4[v105] + v104 * 8)) {
    unsigned int v106 = v105;
  }
  else {
    unsigned int v106 = 2;
  }
  double v107 = *(double *)&v9[v104];
  double v108 = *(double *)(v4[v106] + v104 * 8);
  float v109 = (void *)*((void *)this + 8);
  void *v109 = 0;
  v109[v104] = 0x3FF0000000000000;
  if (v103 > 1)
  {
    if (v107 >= v108) {
      char v110 = v106;
    }
    else {
      char v110 = 3;
    }
    uint64_t v111 = *((void *)this + 12);
    uint64_t v112 = *((void *)this + 13);
    unint64_t v113 = v12 - 2;
    do
    {
      uint64_t v114 = 8 * v110;
      *(double *)&v109[v113] = fmin(fmax(*(double *)(*(void *)(v111 + v114) + 8 * v113), 0.0), 1.0);
      char v110 = *(unsigned char *)(*(void *)(v112 + v114) + v113);
    }
    while (v113-- > 1);
  }
  if (v12 >= 2)
  {
    uint64_t v116 = *((void *)this + 9);
    uint64_t v117 = *((void *)this + 10);
    if (v12 < 0xB)
    {
      unint64_t v118 = 1;
      goto LABEL_89;
    }
    unint64_t v119 = v116 + 8 * v12;
    unint64_t v120 = v117 + 8;
    unint64_t v121 = v117 + 8 * v12;
    long long v122 = v109 + 1;
    unint64_t v123 = (unint64_t)&v109[v12];
    BOOL v125 = v116 + 8 < v123 && (unint64_t)v122 < v119;
    BOOL v127 = v120 < v123 && (unint64_t)v122 < v121;
    BOOL v128 = v120 >= v119 || v116 + 8 >= v121;
    unint64_t v118 = 1;
    if (!v128) {
      goto LABEL_89;
    }
    if (v125) {
      goto LABEL_89;
    }
    if (v127) {
      goto LABEL_89;
    }
    unint64_t v118 = v103 & 0xFFFFFFFFFFFFFFFCLL | 1;
    float v129 = (float64x2_t *)(v109 + 3);
    int v130 = (float64x2_t *)(v116 + 24);
    unint64_t v131 = (float64x2_t *)(v117 + 24);
    unint64_t v132 = v103 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v133 = v129[-1];
      float64x2_t v134 = *v129;
      float64x2_t v135 = vmulq_f64(v133, v133);
      float64x2_t v136 = vmulq_f64(v134, v134);
      v130[-1] = v135;
      *int v130 = v136;
      v131[-1] = vmulq_f64(v135, v133);
      *unint64_t v131 = vmulq_f64(v136, v134);
      v129 += 2;
      v130 += 2;
      v131 += 2;
      v132 -= 4;
    }
    while (v132);
    if (v103 != (v103 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_89:
      unint64_t v137 = v12 - v118;
      uint64_t v138 = 8 * v118;
      uint64_t v139 = (double *)(v117 + v138);
      uint64_t v140 = (double *)(v116 + v138);
      uint64_t v141 = (double *)&v109[(unint64_t)v138 / 8];
      do
      {
        double v142 = *v141 * *v141;
        *v140++ = v142;
        double v143 = *v141++;
        *v139++ = v142 * v143;
        --v137;
      }
      while (v137);
    }
  }
}

void sub_1C4BF730C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BF7324(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4BF7334(uint64_t a1)
{
}

void sub_1C4BF733C(uint64_t a1)
{
}

void sub_1C4BF777C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1C4BF7890(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  self;
  uint64_t v13 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CA80], v9, (uint64_t)v6, v10, v11, v12);
  double v19 = objc_msgSend_firstObject(v6, v14, v15, v16, v17, v18);
  float v25 = objc_msgSend_lastObject(v6, v20, v21, v22, v23, v24);
  double v101 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  double v102 = *MEMORY[0x1E4F1DAD8];
  double x = *MEMORY[0x1E4F1DB20];
  double y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  if (objc_msgSend_count(v6, v30, v31, v32, v33, v34))
  {
    double v39 = objc_msgSend_objectAtIndexedSubscript_(v6, v35, 0, v36, v37, v38);
    double v44 = objc_msgSend_strokeIdentifierFromData_(v7, v40, (uint64_t)v39, v41, v42, v43);
    unint64_t v49 = objc_msgSend_strokeForIdentifier_(v7, v45, (uint64_t)v44, v46, v47, v48);
    objc_msgSend_bounds(v49, v50, v51, v52, v53, v54);
    CGFloat v56 = v55;
    CGFloat v58 = v57;
    CGFloat v60 = v59;
    CGFloat v62 = v61;

    v104.origin.double x = x;
    v104.origin.double y = y;
    v104.size.double width = width;
    v104.size.double height = height;
    double v101 = v58;
    double v102 = v56;
    v108.origin.double x = v56;
    v108.origin.double y = v58;
    v108.size.double width = v60;
    v108.size.double height = v62;
    CGRect v105 = CGRectUnion(v104, v108);
    double x = v105.origin.x;
    double y = v105.origin.y;
    double width = v105.size.width;
    double height = v105.size.height;

    for (unint64_t i = 1; i < objc_msgSend_count(v6, v63, v64, v65, v66, v67, *(void *)&v101, *(void *)&v102); ++i)
    {
      double v73 = objc_msgSend_objectAtIndexedSubscript_(v6, v69, i, v70, v71, v72);
      char v78 = objc_msgSend_strokeIdentifierFromData_(v7, v74, (uint64_t)v73, v75, v76, v77);
      double v83 = objc_msgSend_strokeForIdentifier_(v7, v79, (uint64_t)v78, v80, v81, v82);
      objc_msgSend_bounds(v83, v84, v85, v86, v87, v88);
      CGFloat v90 = v89;
      CGFloat v92 = v91;
      CGFloat v94 = v93;
      CGFloat v96 = v95;

      v106.origin.double x = x;
      v106.origin.double y = y;
      v106.size.double width = width;
      v106.size.double height = height;
      v109.origin.double x = v90;
      v109.origin.double y = v92;
      v109.size.double width = v94;
      v109.size.double height = v96;
      CGRect v107 = CGRectUnion(v106, v109);
      double x = v107.origin.x;
      double y = v107.origin.y;
      double width = v107.size.width;
      double height = v107.size.height;
    }
  }
  double v97 = [CHStrokeGroup alloc];
  StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigiunint64_t n = objc_msgSend_initWithStrokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_(v97, v98, (uint64_t)v13, (uint64_t)v19, (uint64_t)v25, 0, v8, x, y, width, height, 0.0, v102, v101);

  return StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin;
}

void sub_1C4BF7B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF7CAC(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  uint64_t v4 = *v1;
  if (*v1)
  {
    double v5 = v1[1];
    id v6 = *v1;
    if (v5 != v4)
    {
      uint64_t v7 = (uint64_t)v5 - 32;
      do
      {
        uint64_t v8 = v7 - 40;
        sub_1C4999C7C(v7, *(void **)(v7 + 8));
        sub_1C494AC4C(v7 - 40, *(void **)(v7 - 32));
        v7 -= 72;
      }
      while ((void *)v8 != v4);
      id v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4BF7E08(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6)
    {
      *(void *)uint64_t v7 = a2;
      uint64_t v8 = (uint64_t)(v7 + 8);
LABEL_23:
      a1[2] = v8;
      a1[4] |= a3;
      return;
    }
    uint64_t v9 = (char *)a1[1];
    uint64_t v10 = (v7 - v9) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_1C494A220();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v14 = operator new(8 * v13);
      uint64_t v15 = &v14[8 * v10];
      uint64_t v16 = &v14[8 * v13];
      *uint64_t v15 = a2;
      uint64_t v8 = (uint64_t)(v15 + 1);
      int64_t v17 = v7 - v9;
      if (v7 == v9) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = (void *)(8 * v10);
      uint64_t v16 = 0;
      *(void *)(8 * v10) = a2;
      uint64_t v8 = 8 * v10 + 8;
      int64_t v17 = v7 - v9;
      if (v7 == v9)
      {
LABEL_21:
        a1[1] = v15;
        a1[2] = v8;
        a1[3] = v16;
        if (v9) {
          operator delete(v9);
        }
        goto LABEL_23;
      }
    }
    unint64_t v18 = v17 - 8;
    if (v18 < 0x58) {
      goto LABEL_29;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_29;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v21 = &v7[-v20];
    uint64_t v15 = (void *)((char *)v15 - v20);
    uint64_t v22 = &v14[8 * v10 - 16];
    uint64_t v23 = v7 - 16;
    uint64_t v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      _OWORD *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    uint64_t v7 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        uint64_t v26 = *((void *)v7 - 1);
        v7 -= 8;
        *--uint64_t v15 = v26;
      }
      while (v7 != v9);
    }
    goto LABEL_21;
  }
}

void sub_1C4BF8100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF8260(_Unwind_Exception *a1)
{
  double v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C4BF8288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF8298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF83D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF8408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF8424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF843C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF8454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NetworkCursor *sub_1C4BF846C(uint64_t a1, void *a2, uint64_t a3)
{
  double v5 = a2;
  unint64_t v6 = objc_alloc_init(NetworkCursor);
  uint64_t v8 = v5[1];
  uint64_t v7 = v5[2];
  if (v7 != v8)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v11 = *(void *)(v8 + 8 * v9);
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v13 = *(void *)(v12 + 32);
      uint64_t v14 = *(void *)(v13 + 40 * v11);
      if (v14)
      {
        uint64_t v15 = (void *)(*(void *)(v12 + 80) + 72 * *(void *)(v13 + 40 * v11 + 16) + 16);
        uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
        while (*v15 != a3)
        {
          --v16;
          v15 += 9;
          if (!--v14) {
            goto LABEL_7;
          }
        }
        if (v16)
        {
          uint64_t v17 = *(v15 - 1);
          if (*(unsigned char *)(v13 + 40 * v17 + 32))
          {
            if (*(void *)(v13 + 40 * v17)) {
              uint64_t v10 = 4;
            }
            else {
              uint64_t v10 = 2;
            }
          }
          else
          {
            uint64_t v10 = 1;
          }
          sub_1C4BF7E08(v6, v17, v10);
          uint64_t v8 = v5[1];
          uint64_t v7 = v5[2];
        }
      }
LABEL_7:
      ++v9;
    }
    while (v9 < (v7 - v8) >> 3);
  }

  return v6;
}

void sub_1C4BF858C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF859C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF863C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF90A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,void *a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,void *a48,uint64_t a49,void *a50)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF930C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4BF932C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF9600(_Unwind_Exception *a1)
{
  double v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C4BF9620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BF96F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)CHEncoderDecoderNetwork;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4BF99BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4BF9DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v23 = v22;

  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4BFA9FC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1C4946848(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C4BFAC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BFAC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BFB294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1C4BFC370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,void *a59)
{
}

void sub_1C4BFCFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_1C4A6EE00((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void *sub_1C4BFD088(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_1C4BFD25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1C4A375C0(&a9);

  _Unwind_Resume(a1);
}

void sub_1C4BFD274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BFD284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BFDEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = a16;
  sub_1C4BFFAC8(&a25);
  _Unwind_Resume(a1);
}

void sub_1C4BFDF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,void *a32)
{
  *(void *)(v32 + _Block_object_dispose(&STACK[0x320], 8) = v34;
  uint64_t v36 = __p;
  if (__p)
  {
    uint64_t v37 = a32;
    uint64_t v38 = __p;
    if (a32 != __p)
    {
      do
      {
        double v39 = (void *)*(v37 - 3);
        if (v39)
        {
          do
          {
            double v40 = (void *)*v39;
            operator delete(v39);
            double v39 = v40;
          }
          while (v40);
        }
        uint64_t v42 = (void *)*(v37 - 5);
        v37 -= 5;
        uint64_t v41 = v42;
        *uint64_t v37 = 0;
        if (v42) {
          operator delete(v41);
        }
      }
      while (v37 != v36);
      uint64_t v38 = __p;
    }
    a32 = v36;
    operator delete(v38);
  }
  operator delete(v33);
  a25 = a16;
  sub_1C4BFFAC8((void ***)&a25);
  _Unwind_Resume(a1);
}

void sub_1C4BFE574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BFE588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

id sub_1C4BFE5D8(uint64_t a1, void *a2, uint64_t a3, void *a4, double a5)
{
  id v13 = a4;
  uint64_t v14 = **(void **)(a1 + 40) + 24 * *(int *)(a2[9] + 4 * a3);
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v14 = *(void *)v14;
  }
  uint64_t v15 = objc_msgSend_stringWithUTF8String_(NSString, v9, v14, v10, v11, v12);
  uint64_t v26 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v16, v17, v18, v19, v20);
  uint64_t v27 = a2[6] + 24 * a3;
  float v28 = *(int **)v27;
  double v29 = *(int **)(v27 + 8);
  if (*(int **)v27 != v29)
  {
    do
      objc_msgSend_addIndex_(v26, v21, *v28++, v23, v24, v25);
    while (v28 != v29);
  }
  double v30 = *MEMORY[0x1E4F1DB20];
  double v31 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double v32 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double v33 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  if (objc_msgSend_count(v26, v21, v22, v23, v24, v25))
  {
    objc_msgSend_boundsForStrokeIndexes_(*(void **)(a1 + 32), v34, (uint64_t)v26, v35, v36, v37);
    double v30 = v38;
    double v31 = v39;
    double v32 = v40;
    double v33 = v41;
  }
  float v42 = *(float *)(a2[12] + 4 * a3);
  uint64_t v43 = *(void *)(a2[15] + 8 * a3);
  double v44 = [CHTokenizedMathResultToken alloc];
  uint64_t v46 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v44, v45, (uint64_t)v15, (uint64_t)v26, v43, (uint64_t)v13, v42, v30, v31, v32, v33, a5);

  return v46;
}

void sub_1C4BFE75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BFE774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BFE78C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BFE7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BFE7B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BFE7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BFE924(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 720);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 728);
    uint64_t v4 = *(void **)(a1 + 720);
    if (v3 != v2)
    {
      do
      {
        double v5 = (void *)*(v3 - 3);
        if (v5)
        {
          do
          {
            unint64_t v6 = (void *)*v5;
            operator delete(v5);
            double v5 = v6;
          }
          while (v6);
        }
        uint64_t v8 = (void *)*(v3 - 5);
        v3 -= 5;
        uint64_t v7 = v8;
        void *v3 = 0;
        if (v8) {
          operator delete(v7);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 720);
    }
    *(void *)(a1 + 72_Block_object_dispose(&STACK[0x320], 8) = v2;
    operator delete(v4);
  }
  unint64_t v9 = *(void **)(a1 + 696);
  if (v9)
  {
    do
    {
      uint64_t v10 = (void *)*v9;
      operator delete(v9);
      unint64_t v9 = v10;
    }
    while (v10);
  }
  uint64_t v11 = *(void **)(a1 + 680);
  *(void *)(a1 + 680) = 0;
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 656);
  if (v12)
  {
    do
    {
      uint64_t v22 = (void *)*v12;
      uint64_t v23 = (void *)v12[3];
      if (v23)
      {
        v12[4] = v23;
        operator delete(v23);
      }
      operator delete(v12);
      uint64_t v12 = v22;
    }
    while (v22);
  }
  id v13 = *(void **)(a1 + 640);
  *(void *)(a1 + 640) = 0;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 616);
  if (v14)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = *(void **)(a1 + 600);
  *(void *)(a1 + 600) = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(a1 + 576);
  if (v17)
  {
    do
    {
      uint64_t v24 = (void *)*v17;
      uint64_t v25 = (void *)v17[3];
      if (v25)
      {
        v17[4] = v25;
        operator delete(v25);
      }
      operator delete(v17);
      uint64_t v17 = v24;
    }
    while (v24);
  }
  uint64_t v18 = *(void **)(a1 + 560);
  *(void *)(a1 + 560) = 0;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(a1 + 536);
  if (v19)
  {
    uint64_t v20 = *(void **)(a1 + 544);
    uint64_t v21 = *(void **)(a1 + 536);
    if (v20 != v19)
    {
      do
      {
        uint64_t v27 = *--v20;
        uint64_t v26 = v27;
        void *v20 = 0;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
        }
      }
      while (v20 != v19);
      uint64_t v21 = *(void **)(a1 + 536);
    }
    *(void *)(a1 + 544) = v19;
    operator delete(v21);
  }
  sub_1C4947180(a1 + 56);
  sub_1C4949DD4(a1 + 32, *(char **)(a1 + 40));
  float v28 = *(void ***)a1;
  if (*(void *)a1)
  {
    double v29 = *(void ***)(a1 + 8);
    double v30 = *(void ***)a1;
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      double v30 = *(void ***)a1;
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = v28;
    operator delete(v30);
  }
  return a1;
}

void sub_1C4BFEB3C(void *a1, const char *a2)
{
  uint64_t v4 = operator new(0x28uLL);
  double v5 = v4 + 2;
  void *v4 = 0;
  v4[1] = 0;
  size_t v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    double v5 = operator new(v8 + 1);
    v4[3] = v7;
    v4[4] = v9 | 0x8000000000000000;
    v4[2] = v5;
    goto LABEL_8;
  }
  *((unsigned char *)v4 + 39) = v6;
  if (v6) {
LABEL_8:
  }
    memcpy(v5, a2, v7);
  *((unsigned char *)v5 + v7) = 0;
  int v10 = *((char *)v4 + 39);
  if (v10 >= 0) {
    uint64_t v11 = v4 + 2;
  }
  else {
    uint64_t v11 = (uint64_t *)v4[2];
  }
  if (v10 >= 0) {
    unint64_t v12 = *((unsigned __int8 *)v4 + 39);
  }
  else {
    unint64_t v12 = v4[3];
  }
  v4[1] = sub_1C4946C8C((uint64_t)&v14, v11, v12);
  sub_1C4ACB004(a1, (uint64_t)v4);
  if ((v13 & 1) == 0 && v4)
  {
    if (*((char *)v4 + 39) < 0) {
      operator delete((void *)v4[2]);
    }
    operator delete(v4);
  }
}

void sub_1C4BFEC7C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    operator delete((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4BFECA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1C4BFECBC(uint64_t *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            int v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  char v13 = a1 + 2;
  int v10 = operator new(0x30uLL);
  *int v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = a1[1];
    }
    if (prime > v7)
    {
LABEL_36:
      if (prime >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v22 = operator new(8 * prime);
      uint64_t v23 = (void *)*a1;
      *a1 = (uint64_t)v22;
      if (v23) {
        operator delete(v23);
      }
      uint64_t v24 = 0;
      a1[1] = prime;
      do
        *(void *)(*a1 + 8 * v24++) = 0;
      while (prime != v24);
      uint64_t v25 = (void *)*v13;
      if (!*v13) {
        goto LABEL_68;
      }
      size_t v26 = v25[1];
      size_t v27 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v28 = v26 & v27;
        *(void *)(*a1 + 8 * v2_Block_object_dispose(&STACK[0x320], 8) = v13;
        for (unint64_t i = (void *)*v25; *v25; unint64_t i = (void *)*v25)
        {
          size_t v30 = i[1] & v27;
          if (v30 == v28)
          {
            uint64_t v25 = i;
          }
          else if (*(void *)(*a1 + 8 * v30))
          {
            *uint64_t v25 = *i;
            uint64_t v31 = 8 * v30;
            *unint64_t i = **(void **)(*a1 + v31);
            **(void **)(*a1 + v31) = i;
          }
          else
          {
            *(void *)(*a1 + 8 * v30) = v25;
            uint64_t v25 = i;
            size_t v28 = v30;
          }
        }
        goto LABEL_68;
      }
      if (v26 >= prime) {
        v26 %= prime;
      }
      *(void *)(*a1 + 8 * v26) = v13;
      uint64_t v35 = (void *)*v25;
      if (!*v25)
      {
LABEL_68:
        unint64_t v7 = prime;
        uint64_t v38 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_69;
        }
        goto LABEL_84;
      }
      while (1)
      {
        size_t v37 = v35[1];
        if (v37 >= prime) {
          v37 %= prime;
        }
        if (v37 == v26) {
          goto LABEL_62;
        }
        if (*(void *)(*a1 + 8 * v37))
        {
          *uint64_t v25 = *v35;
          uint64_t v36 = 8 * v37;
          *uint64_t v35 = **(void **)(*a1 + v36);
          **(void **)(*a1 + v36) = v35;
          uint64_t v35 = v25;
LABEL_62:
          uint64_t v25 = v35;
          uint64_t v35 = (void *)*v35;
          if (!v35) {
            goto LABEL_68;
          }
        }
        else
        {
          *(void *)(*a1 + 8 * v37) = v25;
          uint64_t v25 = v35;
          uint64_t v35 = (void *)*v35;
          size_t v26 = v37;
          if (!v35) {
            goto LABEL_68;
          }
        }
      }
    }
    if (prime < v7)
    {
      unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime < v7)
      {
        if (!prime)
        {
          double v39 = (void *)*a1;
          *a1 = 0;
          if (v39) {
            operator delete(v39);
          }
          unint64_t v7 = 0;
          a1[1] = 0;
          uint64_t v38 = -1;
          goto LABEL_84;
        }
        goto LABEL_36;
      }
      unint64_t v7 = a1[1];
    }
    uint64_t v38 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
LABEL_69:
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v16 = *a1;
        uint64_t v17 = *(void **)(*a1 + 8 * (v6 % v7));
        if (v17) {
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v16 = *a1;
        uint64_t v17 = *(void **)(*a1 + 8 * v6);
        if (v17) {
          goto LABEL_25;
        }
      }
      goto LABEL_85;
    }
LABEL_84:
    unint64_t v3 = v38 & v6;
    uint64_t v16 = *a1;
    uint64_t v17 = *(void **)(*a1 + 8 * (v38 & v6));
    if (v17) {
      goto LABEL_25;
    }
    goto LABEL_85;
  }
  uint64_t v16 = *a1;
  uint64_t v17 = *(void **)(*a1 + 8 * v3);
  if (v17)
  {
LABEL_25:
    *int v10 = *v17;
LABEL_91:
    *uint64_t v17 = v10;
    goto LABEL_92;
  }
LABEL_85:
  *int v10 = *v13;
  *char v13 = v10;
  *(void *)(v16 + 8 * v3) = v13;
  if (*v10)
  {
    unint64_t v40 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7) {
        v40 %= v7;
      }
    }
    else
    {
      v40 &= v7 - 1;
    }
    uint64_t v17 = (void *)(*a1 + 8 * v40);
    goto LABEL_91;
  }
LABEL_92:
  ++a1[3];
  return v10;
}

void sub_1C4BFF170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AA17B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4BFF184(uint64_t a1, int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            int v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  char v13 = operator new(0x18uLL);
  *char v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14) {
    goto LABEL_50;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (prime > v7) {
    goto LABEL_34;
  }
  if (prime < v7)
  {
    unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      unint64_t v20 = std::__next_prime(v20);
    }
    else
    {
      uint64_t v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2) {
        unint64_t v20 = v22;
      }
    }
    if (prime <= v20) {
      size_t prime = v20;
    }
    if (prime < v7) {
LABEL_34:
    }
      sub_1C4949C24(a1, prime);
  }
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v23 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      unint64_t v3 = v6 % v7;
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
      if (!v25) {
        goto LABEL_53;
      }
LABEL_51:
      *char v13 = *v25;
LABEL_59:
      *uint64_t v25 = v13;
      goto LABEL_60;
    }
    unint64_t v3 = v6;
LABEL_50:
    uint64_t v24 = *(void *)a1;
    uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
    if (!v25) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  unint64_t v3 = v23 & v6;
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v23 & v6));
  if (v25) {
    goto LABEL_51;
  }
LABEL_53:
  *char v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    unint64_t v26 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
}

void sub_1C4BFF458(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1C4BFF46C(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            int v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  char v13 = (void *)(a1 + 16);
  int v10 = operator new(0x30uLL);
  *int v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14) {
    goto LABEL_50;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (prime > v7) {
    goto LABEL_34;
  }
  if (prime < v7)
  {
    unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      unint64_t v20 = std::__next_prime(v20);
    }
    else
    {
      uint64_t v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2) {
        unint64_t v20 = v22;
      }
    }
    if (prime <= v20) {
      size_t prime = v20;
    }
    if (prime < v7) {
LABEL_34:
    }
      sub_1C4949C24(a1, prime);
  }
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v23 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      unint64_t v3 = v6 % v7;
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
      if (!v25) {
        goto LABEL_53;
      }
LABEL_51:
      *int v10 = *v25;
LABEL_59:
      *uint64_t v25 = v10;
      goto LABEL_60;
    }
    unint64_t v3 = v6;
LABEL_50:
    uint64_t v24 = *(void *)a1;
    uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
    if (!v25) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  unint64_t v3 = v23 & v6;
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v23 & v6));
  if (v25) {
    goto LABEL_51;
  }
LABEL_53:
  *int v10 = *v13;
  *char v13 = v10;
  *(void *)(v24 + 8 * v3) = v13;
  if (*v10)
  {
    unint64_t v26 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1C4BFF76C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AA17B4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1C4BFF780(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(_DWORD **)a1;
  uint64_t result = v9;
  if (__sz <= (v8 - (uint64_t)v9) >> 3)
  {
    unint64_t v18 = *(_DWORD **)(a1 + 8);
    unint64_t v17 = (void *)(a1 + 8);
    float v14 = v18;
    int64_t v19 = (char *)v18 - (char *)v9;
    unint64_t v20 = ((char *)v18 - (char *)v9) >> 3;
    if (v20 < __sz)
    {
      uint8x8_t v21 = &a2[8 * v20];
      if (v14 == v9) {
        goto LABEL_55;
      }
      if ((unint64_t)(v19 - 8) >= 0x78)
      {
        unint64_t v42 = (v19 & 0xFFFFFFFFFFFFFFF8) - 4;
        uint64_t v43 = (char *)v9 + v42;
        double v44 = &a2[v42];
        double v45 = a2 + 4;
        BOOL v47 = v9 + 1 < (_DWORD *)&a2[v19 & 0xFFFFFFFFFFFFFFF8] && v45 < (char *)v9 + (v19 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v22 = a2;
        if ((v43 <= a2 || v9 >= (_DWORD *)v44) && !v47)
        {
          unint64_t v49 = ((unint64_t)(v19 - 8) >> 3) + 1;
          uint64_t v50 = 2 * (v49 & 0x3FFFFFFFFFFFFFF8);
          uint64_t result = &v9[v50];
          uint64_t v22 = &a2[v50 * 4];
          uint64_t v51 = (long long *)(a2 + 32);
          uint64_t v52 = v9 + 8;
          uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            long long v55 = *(v51 - 2);
            long long v54 = *(v51 - 1);
            long long v57 = *v51;
            long long v56 = v51[1];
            v51 += 4;
            *(v52 - 2) = v55;
            *(v52 - 1) = v54;
            *uint64_t v52 = v57;
            v52[1] = v56;
            v52 += 4;
            v53 -= 8;
          }
          while (v53);
          if (v49 == (v49 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_55:
            if (v21 == a3)
            {
              int64_t v16 = 0;
              goto LABEL_65;
            }
            CGFloat v58 = &a2[v19];
            unint64_t v59 = a3 - &a2[v19] - 8;
            if (v59 >= 0x38)
            {
              unint64_t v61 = (char *)v14 - v58;
              CGFloat v60 = (char *)v14;
              if (v61 >= 0x20)
              {
                uint64_t v62 = (v59 >> 3) + 1;
                uint64_t v63 = 2 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
                v21 += v63 * 4;
                CGFloat v60 = (char *)&v14[v63];
                uint64_t v64 = v14 + 4;
                uint64_t v65 = &a2[8 * v20 + 16];
                uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v67 = *(_OWORD *)v65;
                  *(v64 - 1) = *((_OWORD *)v65 - 1);
                  _OWORD *v64 = v67;
                  v64 += 2;
                  v65 += 32;
                  v66 -= 4;
                }
                while (v66);
                if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_64;
                }
              }
            }
            else
            {
              CGFloat v60 = (char *)v14;
            }
            do
            {
              uint64_t v68 = *(void *)v21;
              v21 += 8;
              *(void *)CGFloat v60 = v68;
              v60 += 8;
            }
            while (v21 != a3);
LABEL_64:
            int64_t v16 = v60 - (char *)v14;
            goto LABEL_65;
          }
        }
      }
      else
      {
        uint64_t v22 = a2;
      }
      do
      {
        *uint64_t result = *(_DWORD *)v22;
        result[1] = *((_DWORD *)v22 + 1);
        v22 += 8;
        result += 2;
      }
      while (v22 != v21);
      goto LABEL_55;
    }
    if (a2 == a3)
    {
      uint8x8_t v33 = (char *)v9;
    }
    else
    {
      unint64_t v23 = a3 - a2 - 8;
      if (v23 < 0x78
        || ((unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF8 | 4,
             uint64_t v25 = (char *)v9 + v24,
             unint64_t v26 = &a2[v24],
             unint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8,
             v9 + 1 < (_DWORD *)&a2[v27])
          ? (BOOL v28 = a2 + 4 >= (char *)v9 + v27)
          : (BOOL v28 = 1),
            v28 ? (char v29 = 0) : (char v29 = 1),
            v25 > a2 ? (BOOL v30 = v9 >= (_DWORD *)v26) : (BOOL v30 = 1),
            !v30 || (v29 & 1) != 0))
      {
        uint8x8_t v33 = (char *)v9;
        uint64_t v34 = a2;
      }
      else
      {
        uint64_t v31 = (v23 >> 3) + 1;
        uint64_t v32 = 2 * (v31 & 0x3FFFFFFFFFFFFFF8);
        uint8x8_t v33 = (char *)&v9[v32];
        uint64_t v34 = &a2[v32 * 4];
        uint64_t v35 = (long long *)(a2 + 32);
        uint64_t v36 = v9 + 8;
        uint64_t v37 = v31 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          long long v39 = *(v35 - 2);
          long long v38 = *(v35 - 1);
          long long v41 = *v35;
          long long v40 = v35[1];
          v35 += 4;
          *(v36 - 2) = v39;
          *(v36 - 1) = v38;
          *uint64_t v36 = v41;
          v36[1] = v40;
          v36 += 4;
          v37 -= 8;
        }
        while (v37);
        if (v31 == (v31 & 0x3FFFFFFFFFFFFFF8)) {
          goto LABEL_38;
        }
      }
      do
      {
        *(_DWORD *)uint8x8_t v33 = *(_DWORD *)v34;
        *((_DWORD *)v33 + 1) = *((_DWORD *)v34 + 1);
        v33 += 8;
        v34 += 8;
      }
      while (v34 != a3);
    }
LABEL_38:
    int64_t v16 = v33 - (char *)v9;
    float v14 = v9;
    goto LABEL_65;
  }
  if (v9)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = v9;
    operator delete(v9);
    uint64_t v8 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v11 = v8 >> 2;
  if (v8 >> 2 <= __sz) {
    uint64_t v11 = __sz;
  }
  BOOL v28 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v28) {
    unint64_t v12 = v11;
  }
  if (v12 >> 61) {
    sub_1C494A220();
  }
  uint64_t v13 = 2 * v12;
  uint64_t result = operator new(8 * v12);
  float v14 = result;
  *(void *)a1 = result;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = result;
  *(void *)(a1 + 16) = &result[v13];
  float v15 = (char *)result;
  if (a2 != a3)
  {
    uint64_t result = memcpy(result, a2, (a3 - a2) & 0xFFFFFFFFFFFFFFF8);
    float v15 = (char *)v14 + ((a3 - a2) & 0xFFFFFFFFFFFFFFF8);
  }
  int64_t v16 = v15 - (char *)v14;
  unint64_t v17 = (void *)(a1 + 8);
LABEL_65:
  *unint64_t v17 = (char *)v14 + v16;
  return result;
}

void sub_1C4BFFAC8(void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = (void **)v1[1];
      do
      {
        uint64_t v9 = *(v6 - 3);
        v6 -= 3;
        uint64_t v8 = v9;
        if (v9)
        {
          int v10 = *(v4 - 2);
          unint64_t v7 = v8;
          if (v10 != v8)
          {
            do
            {
              uint64_t v11 = (void *)*(v10 - 3);
              if (v11)
              {
                do
                {
                  unint64_t v12 = (void *)*v11;
                  operator delete(v11);
                  uint64_t v11 = v12;
                }
                while (v12);
              }
              float v14 = (void *)*(v10 - 5);
              v10 -= 5;
              uint64_t v13 = v14;
              *int v10 = 0;
              if (v14) {
                operator delete(v13);
              }
            }
            while (v10 != v8);
            unint64_t v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C4BFFBC0(uint64_t a1)
{
  return a1;
}

void sub_1C4BFFBEC(uint64_t a1)
{
  JUMPOUT(0x1C8786460);
}

void *sub_1C4BFFC38(uint64_t a1)
{
  long long v2 = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &unk_1F2010FD0;
  v2[1] = MEMORY[0x1C8786E90](v3);
  return v2;
}

uint64_t sub_1C4BFFC90(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *a2 = &unk_1F2010FD0;
  uint64_t result = MEMORY[0x1C8786E90](v3);
  a2[1] = result;
  return result;
}

void sub_1C4BFFCD8(uint64_t a1)
{
}

void sub_1C4BFFCE0(id *a1)
{
  operator delete(a1);
}

uint64_t sub_1C4BFFD1C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1C4BFFD34(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z66-[CHEncoderDecoderNetwork recognizeDrawing:beamSize:shouldCancel:]E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z66-[CHEncoderDecoderNetwork recognizeDrawing:beamSize:shouldCancel:]E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z66-[CHEncoderDecoderNetwork recognizeDrawing:beamSize:shouldCancel:]E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z66-[CHEncoderDecoderNetwork recognizeDrawing:beamSize:shouldCancel:]E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1C4BFFDA4()
{
  return &unk_1F2010D68;
}

uint64_t sub_1C4BFFDB0(uint64_t a1)
{
  long long v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    uint64_t v4 = *(void ***)(a1 + 16);
    do
    {
      unint64_t v7 = *(v4 - 3);
      v4 -= 3;
      unint64_t v6 = v7;
      *(void *)(a1 + 16) = v4;
      if (v7)
      {
        uint64_t v8 = *(v3 - 2);
        double v5 = v6;
        if (v8 != v6)
        {
          do
          {
            uint64_t v9 = (void *)*(v8 - 3);
            if (v9)
            {
              do
              {
                int v10 = (void *)*v9;
                operator delete(v9);
                uint64_t v9 = v10;
              }
              while (v10);
            }
            unint64_t v12 = (void *)*(v8 - 5);
            v8 -= 5;
            uint64_t v11 = v12;
            *uint64_t v8 = 0;
            if (v12) {
              operator delete(v11);
            }
          }
          while (v8 != v6);
          double v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      unint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1C4BFFE7C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 40);
    *(void *)(a1 + 16) = i - 40;
    double v5 = *(void **)(i - 24);
    if (v5)
    {
      do
      {
        unint64_t v6 = (void *)*v5;
        operator delete(v5);
        double v5 = v6;
      }
      while (v6);
    }
    unint64_t v7 = *v4;
    void *v4 = 0;
    if (v7) {
      operator delete(v7);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1C4BFFEFC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_1C4949C24(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    sub_1C4C00040(a1, *((_DWORD *)i + 4), i[2]);
  return a1;
}

void sub_1C4C00018(_Unwind_Exception *a1)
{
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

void sub_1C4C0002C(_Unwind_Exception *a1)
{
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

void sub_1C4C00040(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            int v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = operator new(0x18uLL);
  *uint64_t v13 = 0;
  v13[1] = v6;
  v13[2] = a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14) {
    goto LABEL_50;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (prime > v7) {
    goto LABEL_34;
  }
  if (prime < v7)
  {
    unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      unint64_t v20 = std::__next_prime(v20);
    }
    else
    {
      uint64_t v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2) {
        unint64_t v20 = v22;
      }
    }
    if (prime <= v20) {
      size_t prime = v20;
    }
    if (prime < v7) {
LABEL_34:
    }
      sub_1C4949C24(a1, prime);
  }
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v23 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      unint64_t v3 = v6 % v7;
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
      if (!v25) {
        goto LABEL_53;
      }
LABEL_51:
      *uint64_t v13 = *v25;
LABEL_59:
      *uint64_t v25 = v13;
      goto LABEL_60;
    }
    unint64_t v3 = v6;
LABEL_50:
    uint64_t v24 = *(void *)a1;
    uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
    if (!v25) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  unint64_t v3 = v23 & v6;
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v23 & v6));
  if (v25) {
    goto LABEL_51;
  }
LABEL_53:
  *uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    unint64_t v26 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
}

void sub_1C4C00314(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C00328(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x666666666666667) {
      sub_1C494A220();
    }
    unint64_t v7 = (void *)result;
    uint64_t result = (uint64_t)operator new(40 * a4);
    uint64_t v8 = result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = result + 40 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_1C4BFFEFC(v8 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v7[1] = v8;
  }
  return result;
}

void sub_1C4C003E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1C4C003FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v12)
  {
    do
    {
      float v14 = (void *)*(v11 - 3);
      if (v14)
      {
        do
        {
          float v15 = (void *)*v14;
          operator delete(v14);
          float v14 = v15;
        }
        while (v15);
      }
      unint64_t v17 = (void *)*(v11 - 5);
      v11 -= 5;
      BOOL v16 = v17;
      void *v11 = 0;
      if (v17) {
        operator delete(v16);
      }
    }
    while (v11 != v10);
  }
  *(void *)(v9 + _Block_object_dispose(&STACK[0x320], 8) = v10;
  sub_1C49EBC4C(&a9);
  _Unwind_Resume(a1);
}

void sub_1C4C00938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0099C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHMecabraWrapper;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4C00A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C00ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C00B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C00C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C00D48()
{
  v0 = objc_opt_class();
  unint64_t v6 = objc_msgSend_defaultURLOfModelInThisBundle(v0, v1, v2, v3, v4, v5);
  unint64_t v11 = objc_msgSend_URLByAppendingPathComponent_(v6, v7, @"model_hash.dat", v8, v9, v10);

  if (objc_msgSend_checkResourceIsReachableAndReturnError_(v11, v12, 0, v13, v14, v15))
  {
    uint64_t v18 = objc_msgSend_stringWithContentsOfURL_encoding_error_(NSString, v16, (uint64_t)v11, 4, 0, v17);
    int64_t v19 = (void *)qword_1EA3C9570;
    qword_1EA3C9570 = v18;
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    unint64_t v20 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1C492D000, v20, OS_LOG_TYPE_ERROR, "Failed to locate E5ML model hash.", v22, 2u);
    }

    uint8x8_t v21 = (void *)qword_1EA3C9570;
    qword_1EA3C9570 = 0;
  }
}

void PentagonRegressor::PentagonRegressor(PentagonRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  unint64_t v6 = a2;
  *(void *)this = 0;
  *((_OWORD *)this + 2) = 0u;
  unint64_t v7 = (void **)((char *)this + 56);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 2) = a3;
  objc_storeStrong((id *)this, a2);
  *((float *)this + 6) = sub_1C495E698(v6, (uint64_t)this + 32, (uint64_t)v86, 1, 20.0);
  uint64_t v9 = (unsigned char *)*((void *)this + 4);
  uint64_t v8 = (unsigned char *)*((void *)this + 5);
  size_t v10 = v8 - v9;
  unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3);
  if (v11 <= 6)
  {
    uint64_t v12 = v6;
    objc_msgSend_bounds(v12, v13, v14, v15, v16, v17);
    operator new();
  }
  uint64_t v82 = 0;
  double v83 = 0;
  __p = 0;
  if (v8 != v9)
  {
    if (v11 > 0x666666666666666) {
      sub_1C494A220();
    }
    __p = operator new(v10);
    double v83 = (char *)__p + 40 * v11;
    memcpy(__p, v9, v10 - 3);
    uint64_t v82 = v83;
  }
  sub_1C49558A8((unint64_t *)&__p, (uint64_t)&v84);
  uint64_t v18 = *v7;
  if (*v7)
  {
    *((void *)this + _Block_object_dispose(&STACK[0x320], 8) = v18;
    operator delete(v18);
    const char *v7 = 0;
    *((void *)this + _Block_object_dispose(&STACK[0x320], 8) = 0;
    *((void *)this + 9) = 0;
  }
  int64_t v19 = (unsigned int (*)(uint64_t, char *))v84;
  *((void *)this + 7) = v84;
  unint64_t v20 = (long long *)v85;
  *((_OWORD *)this + 4) = v85;
  long long v85 = 0uLL;
  double v84 = 0;
  if (__p)
  {
    uint64_t v82 = __p;
    operator delete(__p);
    int64_t v19 = (unsigned int (*)(uint64_t, char *))*((void *)this + 7);
    uint8x8_t v21 = (long long *)*((void *)this + 8);
  }
  else
  {
    uint8x8_t v21 = v20;
  }
  unint64_t v22 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v21 - (char *)v19) >> 3));
  double v84 = sub_1C4AAE638;
  if (v21 == (long long *)v19) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  sub_1C49562BC((unint64_t)v19, v21, (unsigned int (**)(uint64_t, char *))&v84, v23, 1);
  char v29 = (double *)*((void *)this + 7);
  BOOL v30 = (double *)*((void *)this + 8);
  int64_t v31 = (char *)v30 - (char *)v29;
  if (0xCCCCCCCCCCCCCCCDLL * (v30 - v29) < 6)
  {
    uint64_t v32 = v6;
    objc_msgSend_bounds(v32, v33, v34, v35, v36, v37);
    operator new();
  }
  for (; v31 != 200; int64_t v31 = (char *)v77 + v78 - (char *)v29)
  {
    double v48 = *(v30 - 5);
    double v47 = *(v30 - 4);
    float v49 = v29[5] - v48;
    float v50 = v29[6] - v47;
    float v51 = (float)(v50 * v50) + (float)(v49 * v49);
    if (v51 > 0.0)
    {
      float v49 = v49 / v51;
      float v50 = v50 / v51;
    }
    uint64_t v52 = v31 / 40;
    float v53 = sqrtf(v51);
    double v54 = v29[1];
    float v55 = ((*v29 - v48) * v50 - (v54 - v47) * v49) * v53;
    float v56 = fabsf(v55);
    if ((unint64_t)(v52 - 1) < 2)
    {
      int v57 = 0;
    }
    else
    {
      int v57 = 0;
      CGFloat v58 = v29 + 6;
      uint64_t v59 = 2;
      double v60 = v29[1];
      double v61 = *v29;
      do
      {
        float v66 = v58[4] - v61;
        float v67 = v58[5] - v60;
        float v68 = (float)(v67 * v67) + (float)(v66 * v66);
        if (v68 > 0.0)
        {
          float v66 = v66 / v68;
          float v67 = v67 / v68;
        }
        double v62 = *(v58 - 1);
        double v63 = *v58;
        float v64 = ((v62 - v61) * v67 - (*v58 - v60) * v66) * sqrtf(v68);
        float v65 = fabsf(v64);
        if (v65 < v56) {
          int v57 = v59 - 1;
        }
        ++v59;
        if (v65 < v56) {
          float v56 = v65;
        }
        v58 += 5;
        double v60 = v63;
        double v61 = v62;
      }
      while (v52 != v59);
    }
    uint64_t v69 = &v29[5 * v52];
    double v71 = *(v69 - 10);
    double v70 = *(v69 - 9);
    float v72 = *v29 - v71;
    float v73 = v54 - v70;
    float v74 = (float)(v73 * v73) + (float)(v72 * v72);
    if (v74 > 0.0)
    {
      float v72 = v72 / v74;
      float v73 = v73 / v74;
    }
    float v75 = ((v48 - v71) * v73 - (v47 - v70) * v72) * sqrtf(v74);
    int v76 = v52 - 1;
    if (fabsf(v75) >= v56) {
      int v76 = v57;
    }
    uint64_t v77 = &v29[5 * v76];
    uint64_t v24 = v77 + 5;
    int64_t v78 = (char *)v30 - (char *)(v77 + 5);
    if (v30 != v77 + 5)
    {
      memmove(&v29[5 * v76], v24, v78 - 3);
      char v29 = (double *)*v7;
    }
    BOOL v30 = (double *)((char *)v77 + v78);
    *((void *)this + _Block_object_dispose(&STACK[0x320], 8) = (char *)v77 + v78;
  }
  objc_msgSend_bounds(v6, (const char *)v24, v25, v26, v27, v28);
  CGFloat x = v88.origin.x;
  CGFloat y = v88.origin.y;
  CGFloat width = v88.size.width;
  CGFloat height = v88.size.height;
  CGRectGetMidX(v88);
  v89.origin.CGFloat x = x;
  v89.origin.CGFloat y = y;
  v89.size.CGFloat width = width;
  v89.size.CGFloat height = height;
  CGRectGetMidY(v89);
  double v84 = 0;
  long long v85 = 0uLL;
  uint64_t v43 = (unsigned char *)*((void *)this + 7);
  unint64_t v42 = (unsigned char *)*((void *)this + 8);
  int64_t v44 = v42 - v43;
  if (v42 == v43)
  {
    uint64_t v46 = 0;
    double v45 = 0;
  }
  else
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v44 >> 3) > 0x666666666666666) {
      sub_1C494A220();
    }
    double v45 = (long long *)operator new(v44);
    uint64_t v46 = (long long *)((char *)v45 + 8 * (v44 >> 3));
    memcpy(v45, v43, v44 - 3);
  }
  unint64_t v79 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v46 - (char *)v45) >> 3));
  uint64_t v87 = (unsigned int (*)(uint64_t, char *))sub_1C4C01E38;
  if (v46 == v45) {
    uint64_t v80 = 0;
  }
  else {
    uint64_t v80 = v79;
  }
  sub_1C49562BC((unint64_t)v45, v46, &v87, v80, 1);
  uint64_t v87 = (unsigned int (*)(uint64_t, char *))sub_1C4C01E4C;
  sub_1C49562BC((unint64_t)v45, v46, &v87, v80, 1);
  operator new();
}

void sub_1C4C01CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  operator delete(v21);
  uint64_t v24 = *v22;
  if (*v22)
  {
    *(void *)(v19 + 64) = v24;
    operator delete(v24);
    uint64_t v25 = *v20;
    if (!*v20)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v25 = *v20;
    if (!*v20) {
      goto LABEL_3;
    }
  }
  *(void *)(v19 + 40) = v25;
  operator delete(v25);

  _Unwind_Resume(a1);
}

void PentagonRegressor::provideAnAnswer(PentagonRegressor *this, CHDrawing *a2)
{
  uint64_t v2 = a2;
  objc_msgSend_bounds(v2, v3, v4, v5, v6, v7);
  operator new();
}

void sub_1C4C01E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4C01E38(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) < *(double *)(a2 + 8);
}

BOOL sub_1C4C01E4C(double *a1, double *a2)
{
  return *a1 < *a2;
}

float PentagonRegressor::confidenceLevelVersusEllipse(PentagonRegressor *this)
{
  uint64_t v396 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (double *)*((void *)this + 7);
  float v2 = -1.0;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 8) - (void)v1) >> 3) < 5) {
    return v2;
  }
  uint64_t v377 = 0;
  uint64_t v378 = 0;
  unint64_t v379 = 0;
  uint64_t v374 = 0;
  uint64_t v375 = 0;
  uint64_t v376 = 0;
  uint64_t v371 = 0;
  uint64_t v372 = 0;
  v373 = 0;
  __p[0] = &v371;
  LOBYTE(__p[1]) = 0;
  uint64_t v4 = operator new(0x78uLL);
  uint64_t v372 = (char *)v4 + 120;
  v373 = (char *)v4 + 120;
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  *((void *)v4 + 14) = 0;
  uint64_t v371 = v4;
  uint64_t v5 = operator new(0x14uLL);
  void *v5 = 0;
  v5[1] = 0;
  *((_DWORD *)v5 + 4) = 0;
  double v7 = v1[20];
  double v6 = v1[21];
  double v9 = v1[5];
  double v8 = v1[6];
  float v10 = v9 - v7;
  float v11 = v8 - v6;
  float v12 = (float)(v11 * v11) + (float)(v10 * v10);
  if (v12 > 0.0)
  {
    float v10 = v10 / v12;
    float v11 = v11 / v12;
  }
  double v14 = *v1;
  double v13 = v1[1];
  float v15 = (*v1 - v7) * v11 - (v13 - v6) * v10;
  *(float *)uint64_t v5 = fabsf(v15);
  double v17 = v1[10];
  double v16 = v1[11];
  float v18 = v17 - v14;
  float v19 = v16 - v13;
  float v20 = (float)(v19 * v19) + (float)(v18 * v18);
  if (v20 > 0.0)
  {
    float v18 = v18 / v20;
    float v19 = v19 / v20;
  }
  float v21 = (v9 - v14) * v19 - (v8 - v13) * v18;
  *((float *)v5 + 1) = fabsf(v21);
  double v23 = v1[15];
  double v22 = v1[16];
  float v24 = v23 - v9;
  float v25 = v22 - v8;
  float v26 = (float)(v25 * v25) + (float)(v24 * v24);
  if (v26 > 0.0)
  {
    float v24 = v24 / v26;
    float v25 = v25 / v26;
  }
  float v27 = (v17 - v9) * v25 - (v16 - v8) * v24;
  *((float *)v5 + 2) = fabsf(v27);
  float v28 = v7 - v17;
  float v29 = v6 - v16;
  float v30 = (float)(v29 * v29) + (float)(v28 * v28);
  if (v30 > 0.0)
  {
    float v28 = v28 / v30;
    float v29 = v29 / v30;
  }
  float v31 = (v23 - v17) * v29 - (v22 - v16) * v28;
  *((float *)v5 + 3) = fabsf(v31);
  float v32 = v14 - v23;
  float v33 = v13 - v22;
  float v34 = (float)(v33 * v33) + (float)(v32 * v32);
  if (v34 > 0.0)
  {
    float v32 = v32 / v34;
    float v33 = v33 / v34;
  }
  float v35 = (v7 - v23) * v33 - (v6 - v22) * v32;
  *((float *)v5 + 4) = fabsf(v35);
  uint64_t v36 = v5;
  char v354 = v5;
  std::__sort<std::__less<float,float> &,float *>();
  int v391 = *((_DWORD *)v36 + 4);
  long long v390 = *(_OWORD *)v36;
  if (*((void *)this + 8) != *((void *)this + 7))
  {
    unint64_t v37 = 0;
    uint64_t v38 = *((void *)this + 1);
    double v352 = *(double *)(v38 + 24);
    double v353 = *(double *)(v38 + 16);
    float v39 = 0.0;
    float v40 = 0.0;
    while (1)
    {
      long long v41 = (char *)v371 + 24 * v37;
      int v42 = -1431655765 * ((unint64_t)(v378 - (unsigned char *)v377) >> 3);
      uint64_t v43 = (uint64_t *)(v41 + 8);
      int64_t v44 = (char *)*((void *)v41 + 1);
      uint64_t v46 = v41 + 16;
      unint64_t v45 = *((void *)v41 + 2);
      if ((unint64_t)v44 < v45)
      {
        *(_DWORD *)int64_t v44 = v42;
        *uint64_t v43 = (uint64_t)(v44 + 4);
        __p[0] = 0;
        __p[1] = 0;
        *(void *)v384 = 0;
        double v47 = v378;
        if ((unint64_t)v378 < v379) {
          goto LABEL_17;
        }
        goto LABEL_38;
      }
      unint64_t v355 = v37;
      double v48 = *(char **)v41;
      uint64_t v49 = (uint64_t)&v44[-*(void *)v41];
      uint64_t v50 = v49 >> 2;
      unint64_t v51 = (v49 >> 2) + 1;
      if (v51 >> 62) {
        sub_1C494A220();
      }
      uint64_t v52 = v45 - (void)v48;
      if (v52 >> 1 > v51) {
        unint64_t v51 = v52 >> 1;
      }
      unint64_t v53 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v51;
      if (!v53) {
        break;
      }
      uint64_t v350 = &v44[-*(void *)v41];
      if (v53 >> 62) {
        sub_1C4949AA8();
      }
      double v54 = v41;
      float v55 = v41 + 16;
      unint64_t v56 = v53;
      int v57 = operator new(4 * v53);
      uint64_t v46 = v55;
      unint64_t v53 = v56;
      long long v41 = v54;
      uint64_t v49 = (uint64_t)v350;
      CGFloat v58 = &v57[4 * v50];
      *CGFloat v58 = v42;
      uint64_t v59 = (uint64_t)(v58 + 1);
      int64_t v60 = v44 - v48;
      if (v44 != v48) {
        goto LABEL_29;
      }
LABEL_35:
      *(void *)long long v41 = v58;
      *uint64_t v43 = v59;
      *(void *)uint64_t v46 = &v57[4 * v53];
      if (v48) {
        operator delete(v48);
      }
      unint64_t v37 = v355;
      *uint64_t v43 = v59;
      __p[0] = 0;
      __p[1] = 0;
      *(void *)v384 = 0;
      double v47 = v378;
      if ((unint64_t)v378 < v379)
      {
LABEL_17:
        *(void *)double v47 = 0;
        *((void *)v47 + 1) = 0;
        *((void *)v47 + 2) = 0;
        uint64_t v378 = v47 + 24;
        goto LABEL_40;
      }
LABEL_38:
      uint64_t v378 = sub_1C4AAA9E8((char **)&v377, (uint64_t)__p);
      if (__p[0]) {
        operator delete(__p[0]);
      }
LABEL_40:
      uint64_t v70 = *((void *)this + 7);
      unint64_t v71 = *(int *)(v70 + 40 * v37 + 16);
      unint64_t v72 = v37 + 1;
      unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 8) - v70) >> 3);
      unint64_t v74 = (v37 + 1) % v73;
      int v75 = *(_DWORD *)(v70 + 40 * v74 + 16);
      if ((int)v71 >= v75)
      {
        uint64_t v108 = *((void *)this + 4);
        unint64_t v109 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 5) - v108) >> 3);
        if (v109 > v71 && v109 - 2 > v71)
        {
          unint64_t v356 = v37;
          do
          {
            uint64_t v111 = v378;
            uint64_t v112 = (_OWORD *)(v108 + 40 * v71);
            uint64_t v114 = (_OWORD *)*((void *)v378 - 2);
            unint64_t v113 = *((void *)v378 - 1);
            if ((unint64_t)v114 < v113)
            {
              _OWORD *v114 = *v112;
              char v110 = v114 + 1;
            }
            else
            {
              double v115 = v378 - 24;
              uint64_t v116 = (_OWORD *)*((void *)v378 - 3);
              uint64_t v117 = v114 - v116;
              unint64_t v118 = v117 + 1;
              if ((unint64_t)(v117 + 1) >> 60) {
LABEL_275:
              }
                sub_1C494A220();
              uint64_t v119 = v113 - (void)v116;
              if (v119 >> 3 > v118) {
                unint64_t v118 = v119 >> 3;
              }
              if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v120 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v118;
              }
              if (v120)
              {
                if (v120 >> 60) {
LABEL_276:
                }
                  sub_1C4949AA8();
                unint64_t v121 = (char *)operator new(16 * v120);
              }
              else
              {
                unint64_t v121 = 0;
              }
              long long v122 = &v121[16 * v117];
              *(_OWORD *)long long v122 = *v112;
              unint64_t v123 = v122;
              if (v114 != v116)
              {
                do
                {
                  *((_OWORD *)v123 - 1) = *(v114 - 1);
                  v123 -= 16;
                  --v114;
                }
                while (v114 != v116);
                uint64_t v114 = *(_OWORD **)v115;
              }
              char v110 = v122 + 16;
              *((void *)v111 - 3) = v123;
              *((void *)v111 - 2) = v122 + 16;
              *((void *)v111 - 1) = &v121[16 * v120];
              if (v114) {
                operator delete(v114);
              }
            }
            *((void *)v111 - 2) = v110;
            ++v71;
            uint64_t v108 = *((void *)this + 4);
          }
          while (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 5) - v108) >> 3) > v71);
          uint64_t v124 = *((void *)this + 7);
          unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 8) - v124) >> 3);
          int v75 = *(_DWORD *)(v124 + 40 * (v72 % v73) + 16);
          unint64_t v37 = v356;
        }
        if (v75 >= 3)
        {
          if (*((void *)v378 - 2) == *((void *)v378 - 3)) {
            goto LABEL_120;
          }
          BOOL v125 = (char *)v371 + 24 * v37;
          int v126 = -1431655765 * ((unint64_t)(v378 - (unsigned char *)v377) >> 3);
          BOOL v127 = (uint64_t *)(v125 + 8);
          BOOL v128 = (char *)*((void *)v125 + 1);
          int v130 = v125 + 16;
          unint64_t v129 = *((void *)v125 + 2);
          if ((unint64_t)v128 < v129)
          {
            *(_DWORD *)BOOL v128 = v126;
            uint64_t v131 = (uint64_t)(v128 + 4);
            goto LABEL_115;
          }
          unint64_t v132 = *(char **)v125;
          uint64_t v133 = (uint64_t)&v128[-*(void *)v125];
          uint64_t v134 = v133 >> 2;
          unint64_t v135 = (v133 >> 2) + 1;
          if (v135 >> 62) {
            sub_1C494A220();
          }
          uint64_t v136 = v129 - (void)v132;
          if (v136 >> 1 > v135) {
            unint64_t v135 = v136 >> 1;
          }
          if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v137 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v137 = v135;
          }
          if (v137)
          {
            uint64_t v351 = &v128[-*(void *)v125];
            int v357 = -1431655765 * ((unint64_t)(v378 - (unsigned char *)v377) >> 3);
            if (v137 >> 62) {
              sub_1C4949AA8();
            }
            uint64_t v138 = v125 + 16;
            uint64_t v139 = v125;
            unint64_t v140 = v137;
            uint64_t v141 = operator new(4 * v137);
            BOOL v125 = v139;
            int v130 = v138;
            unint64_t v137 = v140;
            uint64_t v133 = (uint64_t)v351;
            double v142 = &v141[4 * v134];
            *double v142 = v357;
            uint64_t v131 = (uint64_t)(v142 + 1);
            int64_t v143 = v128 - v132;
            if (v128 == v132) {
              goto LABEL_113;
            }
LABEL_107:
            unint64_t v144 = v143 - 4;
            if (v144 < 0x2C) {
              goto LABEL_290;
            }
            if ((unint64_t)(v128 - v141 - v133) < 0x20) {
              goto LABEL_290;
            }
            uint64_t v145 = (v144 >> 2) + 1;
            uint64_t v146 = 4 * (v145 & 0x7FFFFFFFFFFFFFF8);
            double v147 = &v128[-v146];
            double v142 = (_DWORD *)((char *)v142 - v146);
            unint64_t v148 = &v141[4 * v134 - 16];
            int v149 = v128 - 16;
            uint64_t v150 = v145 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v151 = *(_OWORD *)v149;
              *(v148 - 1) = *((_OWORD *)v149 - 1);
              *unint64_t v148 = v151;
              v148 -= 2;
              v149 -= 32;
              v150 -= 8;
            }
            while (v150);
            BOOL v128 = v147;
            if (v145 != (v145 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_290:
              do
              {
                int v152 = *((_DWORD *)v128 - 1);
                v128 -= 4;
                *--double v142 = v152;
              }
              while (v128 != v132);
            }
          }
          else
          {
            uint64_t v141 = 0;
            double v142 = (_DWORD *)(4 * v134);
            *(_DWORD *)(4 * v134) = v126;
            uint64_t v131 = 4 * v134 + 4;
            int64_t v143 = v128 - v132;
            if (v128 != v132) {
              goto LABEL_107;
            }
          }
LABEL_113:
          *(void *)BOOL v125 = v142;
          uint64_t *v127 = v131;
          *(void *)int v130 = &v141[4 * v137];
          if (v132) {
            operator delete(v132);
          }
LABEL_115:
          uint64_t *v127 = v131;
          __p[0] = 0;
          __p[1] = 0;
          *(void *)v384 = 0;
          float v153 = v378;
          if ((unint64_t)v378 >= v379)
          {
            uint64_t v378 = sub_1C4AAA9E8((char **)&v377, (uint64_t)__p);
            if (__p[0]) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(void *)uint64_t v378 = 0;
            *((void *)v153 + 1) = 0;
            *((void *)v153 + 2) = 0;
            uint64_t v378 = v153 + 24;
          }
          uint64_t v154 = *((void *)this + 7);
          unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 8) - v154) >> 3);
          if ((*(_DWORD *)(v154 + 40 * (v72 % v73) + 16) & 0x80000000) == 0)
          {
LABEL_120:
            uint64_t v155 = 0;
            do
            {
              float v158 = v378;
              double v159 = (_OWORD *)(*((void *)this + 4) + 40 * v155);
              uint64_t v161 = (_OWORD *)*((void *)v378 - 2);
              unint64_t v160 = *((void *)v378 - 1);
              if ((unint64_t)v161 < v160)
              {
                *uint64_t v161 = *v159;
                BOOL v156 = v161 + 1;
              }
              else
              {
                double v162 = v378 - 24;
                float v163 = (_OWORD *)*((void *)v378 - 3);
                uint64_t v164 = v161 - v163;
                unint64_t v165 = v164 + 1;
                if ((unint64_t)(v164 + 1) >> 60) {
                  goto LABEL_275;
                }
                uint64_t v166 = v160 - (void)v163;
                if (v166 >> 3 > v165) {
                  unint64_t v165 = v166 >> 3;
                }
                if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v167 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v167 = v165;
                }
                if (v167)
                {
                  if (v167 >> 60) {
                    goto LABEL_276;
                  }
                  int v168 = (char *)operator new(16 * v167);
                }
                else
                {
                  int v168 = 0;
                }
                float v169 = &v168[16 * v164];
                *(_OWORD *)float v169 = *v159;
                double v170 = v169;
                if (v161 != v163)
                {
                  do
                  {
                    *((_OWORD *)v170 - 1) = *(v161 - 1);
                    v170 -= 16;
                    --v161;
                  }
                  while (v161 != v163);
                  uint64_t v161 = *(_OWORD **)v162;
                }
                BOOL v156 = v169 + 16;
                *((void *)v158 - 3) = v170;
                *((void *)v158 - 2) = v169 + 16;
                *((void *)v158 - 1) = &v168[16 * v167];
                if (v161) {
                  operator delete(v161);
                }
              }
              *((void *)v158 - 2) = v156;
              uint64_t v157 = *((void *)this + 7);
              unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 8) - v157) >> 3);
              BOOL v105 = v155++ < *(int *)(v157 + 40 * (v72 % v73) + 16);
            }
            while (v105);
          }
        }
      }
      else
      {
        int v76 = (double *)(v70 + 40 * v74);
        uint64_t v77 = (double *)(v70 + 40 * v37);
        double v78 = *v77;
        double v79 = v77[1];
        float v80 = *v76 - *v77;
        float v81 = v76[1] - v79;
        float v82 = (float)(v81 * v81) + (float)(v80 * v80);
        if (v82 > 0.0)
        {
          float v80 = v80 / v82;
          float v81 = v81 / v82;
        }
        double v83 = v81;
        double v84 = v80;
        float v85 = (v353 - v78) * v81 - (v352 - v79) * v80;
        uint64_t v86 = *((void *)this + 4);
        do
        {
          uint64_t v87 = v378;
          CGRect v88 = (_OWORD *)(v86 + 40 * v71);
          CGFloat v90 = (_OWORD *)*((void *)v378 - 2);
          unint64_t v89 = *((void *)v378 - 1);
          if ((unint64_t)v90 >= v89)
          {
            CGFloat v92 = v378 - 24;
            double v93 = (_OWORD *)*((void *)v378 - 3);
            uint64_t v94 = v90 - v93;
            unint64_t v95 = v94 + 1;
            if ((unint64_t)(v94 + 1) >> 60) {
              goto LABEL_275;
            }
            uint64_t v96 = v89 - (void)v93;
            if (v96 >> 3 > v95) {
              unint64_t v95 = v96 >> 3;
            }
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v97 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v97 = v95;
            }
            if (v97)
            {
              if (v97 >> 60) {
                goto LABEL_276;
              }
              double v98 = (char *)operator new(16 * v97);
            }
            else
            {
              double v98 = 0;
            }
            double v99 = &v98[16 * v94];
            *(_OWORD *)double v99 = *v88;
            double v100 = v99;
            if (v90 != v93)
            {
              do
              {
                *((_OWORD *)v100 - 1) = *(v90 - 1);
                v100 -= 16;
                --v90;
              }
              while (v90 != v93);
              CGFloat v90 = *(_OWORD **)v92;
            }
            double v91 = v99 + 16;
            *((void *)v87 - 3) = v100;
            *((void *)v87 - 2) = v99 + 16;
            *((void *)v87 - 1) = &v98[16 * v97];
            if (v90) {
              operator delete(v90);
            }
          }
          else
          {
            _OWORD *v90 = *v88;
            double v91 = v90 + 1;
          }
          *((void *)v87 - 2) = v91;
          uint64_t v86 = *((void *)this + 4);
          double v101 = (double *)(v86 + 40 * v71);
          double v102 = *v101 - v78;
          double v103 = v101[1] - v79;
          float v104 = v103 * v83 + v102 * v84;
          BOOL v105 = v104 >= -0.5 && v104 <= 1.5;
          if (!v105)
          {
LABEL_209:
            float v2 = -42.0;
            goto LABEL_256;
          }
          float v106 = v102 * v83 - v103 * v84;
          if (v85 <= 0.0) {
            float v106 = -v106;
          }
          float v39 = v39 + (float)(v106 * (float)((float)((float)(v104 * -4.0) * (float)(v104 + -1.0)) + 1.0));
          float v40 = v40 + 1.0;
          uint64_t v107 = *((void *)this + 7);
          unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 8) - v107) >> 3);
          BOOL v105 = (uint64_t)v71++ < *(int *)(v107 + 40 * (v72 % v73) + 16);
        }
        while (v105);
      }
      unint64_t v37 = v72;
      if (v73 <= v72)
      {
        float v392 = v39 / v40;
        double v171 = (char *)v377;
        int64_t v172 = v378 - (unsigned char *)v377;
        if (v378 == v377) {
          goto LABEL_214;
        }
        goto LABEL_142;
      }
    }
    int v57 = 0;
    CGFloat v58 = (_DWORD *)(4 * v50);
    *(_DWORD *)(4 * v50) = v42;
    uint64_t v59 = 4 * v50 + 4;
    int64_t v60 = v44 - v48;
    if (v44 == v48) {
      goto LABEL_35;
    }
LABEL_29:
    unint64_t v61 = v60 - 4;
    if (v61 < 0x2C) {
      goto LABEL_291;
    }
    if ((unint64_t)(v44 - v57 - v49) < 0x20) {
      goto LABEL_291;
    }
    uint64_t v62 = (v61 >> 2) + 1;
    uint64_t v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
    float v64 = &v44[-v63];
    CGFloat v58 = (_DWORD *)((char *)v58 - v63);
    float v65 = &v57[4 * v50 - 16];
    float v66 = v44 - 16;
    uint64_t v67 = v62 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v68 = *(_OWORD *)v66;
      *(v65 - 1) = *((_OWORD *)v66 - 1);
      *float v65 = v68;
      v65 -= 2;
      v66 -= 32;
      v67 -= 8;
    }
    while (v67);
    int64_t v44 = v64;
    if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_291:
      do
      {
        int v69 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        *--CGFloat v58 = v69;
      }
      while (v44 != v48);
    }
    goto LABEL_35;
  }
  float v392 = NAN;
  double v171 = (char *)v377;
  int64_t v172 = v378 - (unsigned char *)v377;
  if (v378 == v377)
  {
LABEL_214:
    float v370 = 0.0;
    uint32_t v367 = 0;
    uint64_t v368 = 0;
    double v234 = 0.0;
    float v179 = 0.0;
    uint64_t v369 = 0;
    goto LABEL_220;
  }
LABEL_142:
  unint64_t v173 = v172 / 24;
  if (v173 <= 1) {
    unint64_t v173 = 1;
  }
  unint64_t v174 = v171 + 8;
  do
  {
    if (*v174 - *(v174 - 1) < 0x20uLL) {
      goto LABEL_209;
    }
    v174 += 3;
    --v173;
  }
  while (v173);
  float v175 = 0;
  double v176 = 0;
  BOOL v177 = 0;
  unint64_t v178 = 0;
  float v370 = 0.0;
  uint32_t v367 = 0;
  uint64_t v368 = 0;
  uint64_t v369 = 0;
  float v179 = 0.0;
  do
  {
    uint64_t v180 = &v171[24 * v178];
    uint64_t v365 = 0;
    v366 = 0;
    int v364 = 0;
    uint64_t v182 = *(unsigned char **)v180;
    uint64_t v181 = (unsigned char *)*((void *)v180 + 1);
    int64_t v183 = v181 - v182;
    if (v181 == v182)
    {
      double v184 = 0;
    }
    else
    {
      if (v183 < 0) {
        sub_1C494A220();
      }
      double v184 = (char *)operator new(v181 - v182);
      int v364 = v184;
      v366 = &v184[16 * (v183 >> 4)];
      memcpy(v184, v182, v183);
      uint64_t v365 = &v184[16 * (v183 >> 4)];
    }
    sub_1C4C26A94((uint64_t)__p, (uint64_t)&v364, &v370);
    double v185 = v375;
    if (v375 >= (double *)v376)
    {
      int v189 = (double *)v374;
      unint64_t v190 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v375 - (unsigned char *)v374) >> 3);
      unint64_t v191 = v190 + 1;
      if (v190 + 1 > 0x666666666666666) {
        sub_1C494A220();
      }
      if (0x999999999999999ALL * ((v376 - (unsigned char *)v374) >> 3) > v191) {
        unint64_t v191 = 0x999999999999999ALL * ((v376 - (unsigned char *)v374) >> 3);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v376 - (unsigned char *)v374) >> 3) >= 0x333333333333333) {
        unint64_t v192 = 0x666666666666666;
      }
      else {
        unint64_t v192 = v191;
      }
      if (v192)
      {
        if (v192 > 0x666666666666666) {
          sub_1C4949AA8();
        }
        int v193 = (char *)operator new(40 * v192);
      }
      else
      {
        int v193 = 0;
      }
      uint64_t v194 = &v193[40 * v190];
      long long v195 = *(_OWORD *)v384;
      *(_OWORD *)uint64_t v194 = *(_OWORD *)__p;
      *((_OWORD *)v194 + 1) = v195;
      *((void *)v194 + 4) = *(void *)&v384[16];
      int v196 = v194;
      if (v185 != v189)
      {
        do
        {
          long long v197 = *(_OWORD *)(v185 - 5);
          long long v198 = *(_OWORD *)(v185 - 3);
          *((_DWORD *)v196 - 2) = *((_DWORD *)v185 - 2);
          *(_OWORD *)(v196 - 24) = v198;
          *(_OWORD *)(v196 - 40) = v197;
          v196 -= 40;
          v185 -= 5;
        }
        while (v185 != v189);
        double v185 = v189;
      }
      uint64_t v188 = (double *)(v194 + 40);
      uint64_t v374 = v196;
      uint64_t v376 = &v193[40 * v192];
      if (v185) {
        operator delete(v185);
      }
    }
    else
    {
      long long v186 = *(_OWORD *)__p;
      long long v187 = *(_OWORD *)v384;
      v375[4] = *(double *)&v384[16];
      *(_OWORD *)double v185 = v186;
      *((_OWORD *)v185 + 1) = v187;
      uint64_t v188 = v185 + 5;
    }
    uint64_t v375 = v188;
    if (v184)
    {
      uint64_t v365 = v184;
      operator delete(v184);
    }
    double v199 = (char *)v377 + 24 * v178;
    long long v362 = 0;
    char v363 = 0;
    long long v361 = 0;
    uint64_t v201 = *(unsigned char **)v199;
    double v200 = (unsigned char *)*((void *)v199 + 1);
    int64_t v202 = v200 - v201;
    if (v200 == v201)
    {
      double v203 = 0;
      float v205 = 0.0;
LABEL_177:
      if (v177 < v176) {
        goto LABEL_148;
      }
      goto LABEL_183;
    }
    if (v202 < 0) {
      sub_1C494A220();
    }
    double v203 = (double *)operator new(v200 - v201);
    uint64_t v204 = &v203[2 * (v202 >> 4)];
    long long v361 = v203;
    char v363 = v204;
    memcpy(v203, v201, v202);
    long long v362 = v204;
    float v205 = 0.0;
    if ((unint64_t)(16 * (v202 >> 4)) < 0x20) {
      goto LABEL_177;
    }
    double v206 = *(v188 - 5);
    double v207 = *(v188 - 4);
    double v208 = *((float *)v188 - 5);
    double v209 = *((float *)v188 - 4);
    double v210 = *((float *)v188 - 2);
    float v211 = ((v203[1] - v207) * v209 + (*v203 - v206) * v208) * v210;
    float v212 = v211;
    for (uint64_t i = v203; i != v204; v211 = fmaxf(*(float *)&v214, v211))
    {
      double v214 = *i;
      double v215 = i[1];
      i += 2;
      *(float *)&double v214 = ((v215 - v207) * v209 + (v214 - v206) * v208) * v210;
      float v212 = fminf(*(float *)&v214, v212);
    }
    float v205 = v211 - v212;
    if (v177 < v176)
    {
LABEL_148:
      *v177++ = v205;
      uint64_t v368 = (uint64_t)v177;
      if (!v203) {
        goto LABEL_150;
      }
LABEL_149:
      long long v362 = v203;
      operator delete(v203);
      goto LABEL_150;
    }
LABEL_183:
    uint64_t v216 = v177 - v175;
    unint64_t v217 = v216 + 1;
    if ((unint64_t)(v216 + 1) >> 62) {
      sub_1C494A220();
    }
    if (((char *)v176 - (char *)v175) >> 1 > v217) {
      unint64_t v217 = ((char *)v176 - (char *)v175) >> 1;
    }
    if ((unint64_t)((char *)v176 - (char *)v175) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v218 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v218 = v217;
    }
    if (v218)
    {
      if (v218 >> 62) {
        sub_1C4949AA8();
      }
      int v219 = operator new(4 * v218);
      float v220 = (float *)&v219[4 * v216];
      *float v220 = v205;
      uint64_t v221 = (uint64_t)(v220 + 1);
      int64_t v222 = (char *)v177 - (char *)v175;
      if (v177 != v175)
      {
LABEL_192:
        unint64_t v223 = v222 - 4;
        if (v223 < 0xBC
          || (unint64_t v226 = ((char *)(v177 - 1) - (char *)v175) & 0xFFFFFFFFFFFFFFFCLL,
              &v219[(char *)v177 - (char *)v175 - 4 - v226] > &v219[(char *)v177 - (char *)v175 - 4])
          || (float *)((char *)v177 - v226 - 4) > v177 - 1
          || (unint64_t)((char *)v175 - v219) < 0x20)
        {
          int v224 = v177;
        }
        else
        {
          uint64_t v227 = (v223 >> 2) + 1;
          uint64_t v228 = 4 * (v227 & 0x7FFFFFFFFFFFFFF8);
          int v224 = &v177[v228 / 0xFFFFFFFFFFFFFFFCLL];
          float v220 = (float *)((char *)v220 - v228);
          float v229 = &v219[4 * v216 - 16];
          float v230 = v177 - 4;
          uint64_t v231 = v227 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v232 = *(_OWORD *)v230;
            *(v229 - 1) = *((_OWORD *)v230 - 1);
            *float v229 = v232;
            v229 -= 2;
            v230 -= 8;
            v231 -= 8;
          }
          while (v231);
          if (v227 == (v227 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_195:
            double v176 = (float *)&v219[4 * v218];
            uint32_t v367 = v220;
            uint64_t v369 = v176;
            if (!v175) {
              goto LABEL_197;
            }
LABEL_196:
            operator delete(v175);
            double v203 = v361;
            goto LABEL_197;
          }
        }
        do
        {
          int v225 = *((_DWORD *)v224-- - 1);
          *((_DWORD *)v220-- - 1) = v225;
        }
        while (v224 != v175);
        goto LABEL_195;
      }
    }
    else
    {
      int v219 = 0;
      float v220 = (float *)(4 * v216);
      *(float *)(4 * v216) = v205;
      uint64_t v221 = 4 * v216 + 4;
      int64_t v222 = (char *)v177 - (char *)v175;
      if (v177 != v175) {
        goto LABEL_192;
      }
    }
    double v176 = (float *)&v219[4 * v218];
    uint32_t v367 = v220;
    uint64_t v369 = v176;
    if (v175) {
      goto LABEL_196;
    }
LABEL_197:
    float v175 = v220;
    BOOL v177 = (float *)v221;
    uint64_t v368 = v221;
    if (v203) {
      goto LABEL_149;
    }
LABEL_150:
    float v179 = v179 + (float)((float)(*(v177 - 1) * v370) * v370);
    ++v178;
    double v171 = (char *)v377;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((v378 - (unsigned char *)v377) >> 3) > v178);
  if (v367 == v177)
  {
    double v234 = 0.0;
  }
  else
  {
    unint64_t v233 = (char *)v177 - (unsigned char *)v367 - 4;
    if (v233 < 0x1C)
    {
      double v234 = 0.0;
      uint64_t v235 = (float *)v367;
      goto LABEL_219;
    }
    uint64_t v236 = (v233 >> 2) + 1;
    uint64_t v235 = (float *)((char *)v367 + 4 * (v236 & 0x7FFFFFFFFFFFFFF8));
    float v237 = (float32x4_t *)((char *)v367 + 16);
    double v234 = 0.0;
    uint64_t v238 = v236 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v239 = v237[-1];
      float64x2_t v240 = vcvt_hight_f64_f32(v239);
      float64x2_t v241 = vcvtq_f64_f32(*(float32x2_t *)v239.f32);
      float64x2_t v242 = vcvt_hight_f64_f32(*v237);
      float64x2_t v243 = vcvtq_f64_f32(*(float32x2_t *)v237->f32);
      double v234 = v234
           + v241.f64[0]
           + v241.f64[1]
           + v240.f64[0]
           + v240.f64[1]
           + v243.f64[0]
           + v243.f64[1]
           + v242.f64[0]
           + v242.f64[1];
      v237 += 2;
      v238 -= 8;
    }
    while (v238);
    if (v236 != (v236 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_219:
        float v244 = *v235++;
        double v234 = v234 + v244;
      }
      while (v235 != v177);
    }
  }
LABEL_220:
  float v245 = v179 / v234;
  float v393 = (float)(v245 * 2.0) + -1.0;
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&v384[12] = 0;
  *(void *)&v384[4] = 0;
  double v246 = (char *)operator new(0xC8uLL);
  long long v248 = *(_OWORD *)__p;
  long long v249 = *(_OWORD *)v384;
  *(_OWORD *)double v246 = *(_OWORD *)__p;
  *((_OWORD *)v246 + 1) = v249;
  uint64_t v250 = *(void *)&v384[16];
  *((void *)v246 + 4) = *(void *)&v384[16];
  *(_OWORD *)(v246 + 40) = v248;
  *(_OWORD *)(v246 + 56) = v249;
  *((void *)v246 + 9) = v250;
  *((_OWORD *)v246 + 5) = v248;
  *((_OWORD *)v246 + 6) = v249;
  *((void *)v246 + 14) = v250;
  *((void *)v246 + 19) = v250;
  *(_OWORD *)(v246 + 120) = v248;
  *(_OWORD *)(v246 + 136) = v249;
  *((void *)v246 + 24) = v250;
  float v359 = v246 + 200;
  uint64_t v360 = v246;
  unint64_t v251 = (char *)v374;
  int64_t v252 = (char *)v375 - (unsigned char *)v374;
  *((_OWORD *)v246 + 10) = v248;
  *((_OWORD *)v246 + 11) = v249;
  if (v252 == 200)
  {
    uint64_t v253 = (char **)&v375;
    double v254 = &v374;
    double v246 = v251;
  }
  else
  {
    uint64_t v255 = 0;
    uint64_t v256 = (char *)v371;
    do
    {
      while (1)
      {
        double v261 = (int **)&v256[24 * v255];
        float v262 = *v261;
        float v263 = v261[1];
        uint64_t v264 = (char *)v263 - (char *)*v261;
        if (v264 != 4) {
          break;
        }
        float v257 = &v251[40 * *v262];
        long long v258 = *(_OWORD *)v257;
        long long v259 = *((_OWORD *)v257 + 1);
        double v260 = &v246[40 * v255];
        *((_DWORD *)v260 + _Block_object_dispose(&STACK[0x320], 8) = *((_DWORD *)v257 + 8);
        *(_OWORD *)double v260 = v258;
        *((_OWORD *)v260 + 1) = v259;
        if (++v255 == 5) {
          goto LABEL_233;
        }
      }
      float v265 = (float64x2_t *)&v246[40 * v255];
      if (v262 == v263)
      {
        float64x2_t v270 = *v265;
        float32x2_t v269 = *(float32x2_t *)&v246[40 * v255 + 20];
      }
      else
      {
        float v266 = &v246[40 * v255];
        float32x2_t v268 = *(float32x2_t *)(v266 + 20);
        float v267 = (float32x2_t *)(v266 + 20);
        float32x2_t v269 = v268;
        float64x2_t v270 = *v265;
        do
        {
          int v271 = *v262++;
          uint64_t v272 = &v251[40 * v271];
          float64x2_t v247 = *(float64x2_t *)v272;
          float64x2_t v270 = vaddq_f64(v270, *(float64x2_t *)v272);
          *float v265 = v270;
          float32x2_t v269 = vmla_n_f32(v269, *(float32x2_t *)(v272 + 20), *((float *)v272 + 8));
          *float v267 = v269;
        }
        while (v262 != v263);
        v246[40 * v255 + 16] = 0;
      }
      *(float *)v247.f64 = (float)(unint64_t)(v264 >> 2);
      *float v265 = vdivq_f64(v270, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)v247.f64), 0));
      double v273 = &v246[40 * v255];
      float32x2_t v274 = vdiv_f32(v269, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v247.f64[0], 0));
      *(float32x2_t *)(v273 + 20) = v274;
      float v275 = (float32x2_t *)(v273 + 20);
      v275[-1].i8[4] = 0;
      int32x2_t v276 = (int32x2_t)vmul_f32(v274, v274);
      *(float *)v276.i32 = vmlas_n_f32(*(float *)&v276.i32[1], v274.f32[0], v274.f32[0]);
      v275[1].i32[0] = v276.i32[0];
      v275[1].f32[1] = sqrtf(*(float *)v276.i32);
      if (*(float *)v276.i32 > 0.0) {
        float32x2_t *v275 = vdiv_f32(v274, (float32x2_t)vdup_lane_s32(v276, 0));
      }
      v275[-1].i8[4] = 1;
      ++v255;
    }
    while (v255 != 5);
LABEL_233:
    uint64_t v253 = &v359;
    double v254 = &v360;
  }
  double v277 = *((float *)v246 + 5);
  double v278 = *((float *)v246 + 6);
  double v279 = *((float *)v246 + 15);
  double v280 = *((float *)v246 + 16);
  float v281 = v277 * v280 - v279 * v278;
  if (v281 == 0.0) {
    goto LABEL_248;
  }
  double v282 = *((double *)v246 + 1);
  float v283 = (v279 * (v282 - *((double *)v246 + 6)) - (*(double *)v246 - *((double *)v246 + 5)) * v280) / v281;
  double v284 = v283;
  *(double *)__p = *(double *)v246 + v284 * v277;
  *(double *)&__p[1] = v282 + v284 * v278;
  uint64_t v285 = (uint64_t)*v254;
  uint64_t v286 = *v253 - (unsigned char *)*v254;
  if (v286 == 80) {
    goto LABEL_285;
  }
  unint64_t v287 = 0xCCCCCCCCCCCCCCCDLL * (v286 >> 3);
  if (v287 < 2) {
    goto LABEL_285;
  }
  double v288 = *(float *)(v285 + 60);
  double v289 = *(float *)(v285 + 64);
  double v290 = *(float *)(v285 + 100);
  double v291 = *(float *)(v285 + 104);
  float v292 = v288 * v291 - v290 * v289;
  if (v292 == 0.0)
  {
LABEL_248:
    int v333 = 0;
    goto LABEL_249;
  }
  double v294 = *(double *)(v285 + 40);
  double v293 = *(double *)(v285 + 48);
  double v296 = *(double *)(v285 + 80);
  double v295 = *(double *)(v285 + 88);
  float v297 = (v290 * (v293 - v295) - (v294 - v296) * v291) / v292;
  double v298 = v297;
  *(double *)v384 = v294 + v298 * v288;
  *(double *)&v384[8] = v293 + v298 * v289;
  if (v286 == 120 || v287 < 3) {
LABEL_285:
  }
    sub_1C4AD0A9C();
  double v299 = *(float *)(v285 + 140);
  double v300 = *(float *)(v285 + 144);
  float v301 = v290 * v300 - v299 * v291;
  if (v301 == 0.0) {
    goto LABEL_248;
  }
  float v302 = (v299 * (v295 - *(double *)(v285 + 128)) - (v296 - *(double *)(v285 + 120)) * v300) / v301;
  double v303 = v302;
  *(double *)&v384[16] = v296 + v303 * v290;
  double v385 = v295 + v303 * v291;
  if (v286 == 160 || v287 < 4) {
    goto LABEL_285;
  }
  if (!Projector::intersectionWith(v285 + 120, v285 + 160, &v386)) {
    goto LABEL_248;
  }
  if (v287 < 5) {
    goto LABEL_285;
  }
  if (!Projector::intersectionWith(v285 + 160, v285, &v388)) {
    goto LABEL_248;
  }
  unint64_t v304 = __p[0];
  uint64_t v305 = __p[1];
  long long v306 = *(_OWORD *)v384;
  double v307 = (float *)operator new(4uLL);
  float v308 = *(double *)&v304 - *(double *)&v306;
  float v309 = *(double *)&v305 - *((double *)&v306 + 1);
  float *v307 = sqrtf((float)(v309 * v309) + (float)(v308 * v308));
  double v311 = *(double *)&v384[16];
  double v310 = v385;
  double v312 = (float *)operator new(8uLL);
  float v313 = *(double *)&v306 - v311;
  float v314 = *((double *)&v306 + 1) - v310;
  float *v312 = *v307;
  v312[1] = sqrtf((float)(v314 * v314) + (float)(v313 * v313));
  operator delete(v307);
  double v316 = *(double *)&v384[16];
  double v315 = v385;
  double v318 = v386;
  double v317 = v387;
  unint64_t v319 = (float *)operator new(0x10uLL);
  float v320 = v316 - v318;
  float v321 = v315 - v317;
  v319[2] = sqrtf((float)(v321 * v321) + (float)(v320 * v320));
  *(void *)unint64_t v319 = *(void *)v312;
  operator delete(v312);
  double v322 = v388;
  double v323 = v389;
  float v324 = v386 - v388;
  float v325 = v387 - v389;
  v319[3] = sqrtf((float)(v325 * v325) + (float)(v324 * v324));
  unint64_t v327 = __p[0];
  uint64_t v326 = __p[1];
  unint64_t v328 = (float *)operator new(0x20uLL);
  float v329 = v322 - *(double *)&v327;
  float v330 = v323 - *(double *)&v326;
  float v331 = sqrtf((float)(v330 * v330) + (float)(v329 * v329));
  int v332 = *((_DWORD *)v319 + 2);
  v328[3] = v319[3];
  v328[4] = v331;
  *((_DWORD *)v328 + 2) = v332;
  *(void *)unint64_t v328 = *(void *)v319;
  uint64_t v358 = v328;
  operator delete(v319);
  std::__sort<std::__less<float,float> &,float *>();
  int v333 = v358;
  float v334 = v358[1];
  if (v334 >= 0.01)
  {
    float v335 = (float)((float)(v358[4] / *v358) + (float)(v358[3] / v334)) * 0.5;
    goto LABEL_250;
  }
LABEL_249:
  float v335 = 1000.0;
LABEL_250:
  float v394 = 2.0 - v335;
  int v395 = 1065353216;
  long long v380 = xmmword_1C4C452B4;
  long long v381 = unk_1C4C452C4;
  int v382 = -1065301688;
  cblas_sdot_NEWLAPACK();
  float v2 = v336;
  if (v333) {
    operator delete(v333);
  }
  if (v360) {
    operator delete(v360);
  }
  if (v367)
  {
    uint64_t v368 = (uint64_t)v367;
    operator delete(v367);
  }
LABEL_256:
  operator delete(v354);
  v337 = (char *)v371;
  if (v371)
  {
    uint64_t v338 = v372;
    BOOL v339 = v371;
    if (v372 != v371)
    {
      int v340 = v372;
      do
      {
        uint64_t v342 = (void *)*((void *)v340 - 3);
        v340 -= 24;
        v341 = v342;
        if (v342)
        {
          *((void *)v338 - 2) = v341;
          operator delete(v341);
        }
        uint64_t v338 = v340;
      }
      while (v340 != v337);
      BOOL v339 = v371;
    }
    uint64_t v372 = v337;
    operator delete(v339);
  }
  if (v374) {
    operator delete(v374);
  }
  uint64_t v343 = (char *)v377;
  if (v377)
  {
    uint64_t v344 = v378;
    uint64_t v345 = v377;
    if (v378 != v377)
    {
      unint64_t v346 = v378;
      do
      {
        uint64_t v348 = (void *)*((void *)v346 - 3);
        v346 -= 24;
        unint64_t v347 = v348;
        if (v348)
        {
          *((void *)v344 - 2) = v347;
          operator delete(v347);
        }
        uint64_t v344 = v346;
      }
      while (v346 != v343);
      uint64_t v345 = v377;
    }
    uint64_t v378 = v343;
    operator delete(v345);
  }
  return v2;
}

void sub_1C4C03660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a26) {
    operator delete(a26);
  }
  operator delete(a13);
  sub_1C496B66C(&a30);
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  sub_1C496B66C(&a36);
  _Unwind_Resume(a1);
}

void sub_1C4C037AC(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "CHPentagon");
}

void sub_1C4C03860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C03874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C03C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C03F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C040A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C040D0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_1C4C04190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C04210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C04228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C042B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0450C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C045E8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v248 = *MEMORY[0x1E4F143B8];
  id v241 = a2;
  id v242 = a3;
  id v237 = a4;
  id v238 = a5;
  self;
  uint64_t v13 = objc_msgSend_count(v241, v8, v9, v10, v11, v12);
  if (v13 != objc_msgSend_count(v242, v14, v15, v16, v17, v18))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    float v24 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      uint64_t v245 = objc_msgSend_count(v241, v25, v26, v27, v28, v29);
      __int16 v246 = 2048;
      uint64_t v247 = objc_msgSend_count(v242, v30, v31, v32, v33, v34);
      _os_log_impl(&dword_1C492D000, v24, OS_LOG_TYPE_FAULT, "Number of corrected and raw tokens must match: %lu != %lu.", buf, 0x16u);
    }
  }
  unint64_t v35 = 0;
  char v239 = 1;
  int v36 = 1;
  int v37 = 1;
  while (v35 < objc_msgSend_count(v242, v19, v20, v21, v22, v23))
  {
    uint64_t v43 = objc_msgSend_objectAtIndexedSubscript_(v242, v38, v35, v40, v41, v42);
    double v48 = objc_msgSend_objectAtIndexedSubscript_(v241, v44, v35, v45, v46, v47);
    int isTopOriginal = objc_msgSend_isTopOriginal(v43, v49, v50, v51, v52, v53);
    if (objc_msgSend_isOriginal(v43, v55, v56, v57, v58, v59))
    {
      objc_msgSend_modelScore(v43, v60, v61, v62, v63, v64);
      BOOL v66 = v65 >= 0.8;
    }
    else
    {
      BOOL v66 = 0;
    }
    uint64_t v67 = objc_msgSend_string(v43, v60, v61, v62, v63, v64);
    unint64_t v73 = objc_msgSend_string(v48, v68, v69, v70, v71, v72);
    char isEqual = objc_msgSend_isEqual_(v67, v74, (uint64_t)v73, v75, v76, v77);

    v37 &= isTopOriginal;
    v36 &= v66;
    v239 &= isEqual;
    ++v35;
  }
  if ((v37 | v36))
  {
    if (v239)
    {
      for (unint64_t i = 0; i < objc_msgSend_count(v242, v38, v39, v40, v41, v42); ++i)
      {
        double v83 = objc_msgSend_objectAtIndexedSubscript_(v242, v79, i, v80, v81, v82);
        CGRect v88 = objc_msgSend_objectAtIndexedSubscript_(v241, v84, i, v85, v86, v87);
        uint64_t v94 = objc_msgSend_string(v88, v89, v90, v91, v92, v93);
        double v100 = objc_msgSend_strokeIndexes(v88, v95, v96, v97, v98, v99);
        uint64_t v106 = objc_msgSend_wordID(v88, v101, v102, v103, v104, v105);
        objc_msgSend_modelScore(v88, v107, v108, v109, v110, v111);
        double v236 = v112;
        objc_msgSend_recognitionScore(v88, v113, v114, v115, v116, v117);
        double v235 = v118;
        objc_msgSend_combinedScore(v88, v119, v120, v121, v122, v123);
        double v234 = v124;
        objc_msgSend_alignmentScore(v88, v125, v126, v127, v128, v129);
        double v233 = v130;
        uint64_t v136 = objc_msgSend_properties(v88, v131, v132, v133, v134, v135);
        double v142 = objc_msgSend_recognizerSourceLocale(v88, v137, v138, v139, v140, v141);
        uint64_t v148 = objc_msgSend_inputSources(v83, v143, v144, v145, v146, v147);
        uint64_t v154 = objc_msgSend_substrokeCount(v88, v149, v150, v151, v152, v153);
        objc_msgSend_bounds(v88, v155, v156, v157, v158, v159);
        double v161 = v160;
        double v163 = v162;
        double v165 = v164;
        double v167 = v166;
        objc_msgSend_originalBounds(v88, v168, v169, v170, v171, v172);
        uint64_t v179 = v178;
        uint64_t v181 = v180;
        uint64_t v183 = v182;
        uint64_t v185 = v184;
        if (v88) {
          objc_msgSend_principalLines(v88, v173, v174, v175, v176, v177);
        }
        else {
          memset(v243, 0, sizeof(v243));
        }
        objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v173, (uint64_t)v94, (uint64_t)v100, v106, v136, v142, v148, v236, v235, v234, v233, v161, v163, v165, v167, v154, v179, v181,
          v183,
          v185,
        long long v186 = v243);

        objc_msgSend_addObject_(v237, v187, (uint64_t)v186, v188, v189, v190);
        objc_msgSend_addObject_(v238, v191, (uint64_t)v186, v192, v193, v194);
      }
    }
    else
    {
      for (unint64_t j = 0; j < objc_msgSend_count(v242, v38, v39, v40, v41, v42); ++j)
      {
        int v219 = objc_msgSend_objectAtIndexedSubscript_(v242, v215, j, v216, v217, v218);
        int v224 = objc_msgSend_objectAtIndexedSubscript_(v241, v220, j, v221, v222, v223);
        objc_msgSend_addObject_(v237, v225, (uint64_t)v224, v226, v227, v228);
        objc_msgSend_addObject_(v238, v229, (uint64_t)v219, v230, v231, v232);
      }
    }
  }
  else
  {
    for (unint64_t k = 0; k < objc_msgSend_count(v242, v38, v39, v40, v41, v42); ++k)
    {
      double v200 = objc_msgSend_objectAtIndexedSubscript_(v242, v196, k, v197, v198, v199);
      float v205 = objc_msgSend_objectAtIndexedSubscript_(v241, v201, k, v202, v203, v204);
      objc_msgSend_addObject_(v237, v206, (uint64_t)v205, v207, v208, v209);
      objc_msgSend_addObject_(v238, v210, (uint64_t)v205, v211, v212, v213);
    }
  }
}

void sub_1C4C04B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1C4C04CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C04CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C04E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

id sub_1C4C04EBC(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v12 = a4;
  if (a1)
  {
    if (v8)
    {
      uint64_t v13 = objc_msgSend_process_options_(v8, v9, (uint64_t)v7, (uint64_t)v12, v10, v11);

      id v7 = (id)v13;
    }
    id v7 = v7;
    a1 = v7;
  }

  return a1;
}

void sub_1C4C04F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C05184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C05198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C051AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C051C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C051D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C051E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C051FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C05210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C05228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C058C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1C4C05B8C(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (*(void *)(a1 + 40))
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v3, (uint64_t)v7, v4, v5, v6);
  }
  else
  {
    id v8 = [CHTokenizedTextResultToken alloc];
    double v14 = objc_msgSend_string(v7, v9, v10, v11, v12, v13);
    uint64_t v20 = objc_msgSend_strokeIndexes(v7, v15, v16, v17, v18, v19);
    uint64_t v26 = objc_msgSend_wordID(v7, v21, v22, v23, v24, v25);
    objc_msgSend_modelScore(v7, v27, v28, v29, v30, v31);
    double v114 = v32;
    objc_msgSend_recognitionScore(v7, v33, v34, v35, v36, v37);
    double v113 = v38;
    objc_msgSend_combinedScore(v7, v39, v40, v41, v42, v43);
    double v112 = v44;
    objc_msgSend_alignmentScore(v7, v45, v46, v47, v48, v49);
    double v111 = v50;
    uint64_t v56 = objc_msgSend_properties(v7, v51, v52, v53, v54, v55);
    uint64_t v62 = objc_msgSend_recognizerSourceLocale(v7, v57, v58, v59, v60, v61);
    uint64_t v68 = objc_msgSend_inputSources(v7, v63, v64, v65, v66, v67);
    uint64_t v74 = objc_msgSend_substrokeCount(v7, v69, v70, v71, v72, v73);
    objc_msgSend_bounds(v7, v75, v76, v77, v78, v79);
    double v81 = v80;
    double v83 = v82;
    double v85 = v84;
    double v87 = v86;
    objc_msgSend_originalBounds(v7, v88, v89, v90, v91, v92);
    uint64_t v99 = v98;
    uint64_t v101 = v100;
    uint64_t v103 = v102;
    uint64_t v105 = v104;
    if (v7) {
      objc_msgSend_principalLines(v7, v93, v94, v95, v96, v97);
    }
    else {
      memset(v115, 0, 128);
    }
    uint64_t v106 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v8, v93, (uint64_t)v14, (uint64_t)v20, v26, v56, v62, v68 | 4, v114, v113, v112, v111, v81, v83, v85, v87, v74, v99, v101,
                     v103,
                     v105,
                     v115);

    objc_msgSend_addObject_(*(void **)(a1 + 32), v107, (uint64_t)v106, v108, v109, v110);
  }
}

void sub_1C4C05D7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C05D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C05DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C05DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C05DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C05DEC(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v5 = a2;
  uint64_t v6 = [CHTokenizedTextResultToken alloc];
  uint64_t v12 = objc_msgSend_string(v5, v7, v8, v9, v10, v11);
  uint64_t v18 = objc_msgSend_strokeIndexes(v5, v13, v14, v15, v16, v17);
  uint64_t v24 = objc_msgSend_wordID(v5, v19, v20, v21, v22, v23);
  objc_msgSend_modelScore(v5, v25, v26, v27, v28, v29);
  double v149 = v30;
  objc_msgSend_recognitionScore(v5, v31, v32, v33, v34, v35);
  double v148 = v36;
  objc_msgSend_combinedScore(v5, v37, v38, v39, v40, v41);
  double v147 = v42;
  objc_msgSend_alignmentScore(v5, v43, v44, v45, v46, v47);
  double v146 = v48;
  uint64_t v54 = objc_msgSend_properties(v5, v49, v50, v51, v52, v53);
  uint64_t v60 = objc_msgSend_recognizerSourceLocale(v5, v55, v56, v57, v58, v59);
  uint64_t v66 = objc_msgSend_inputSources(v5, v61, v62, v63, v64, v65);
  uint64_t v72 = objc_msgSend_substrokeCount(v5, v67, v68, v69, v70, v71);
  objc_msgSend_bounds(v5, v73, v74, v75, v76, v77);
  double v79 = v78;
  double v81 = v80;
  double v83 = v82;
  double v85 = v84;
  objc_msgSend_originalBounds(v5, v86, v87, v88, v89, v90);
  uint64_t v97 = v96;
  uint64_t v99 = v98;
  uint64_t v101 = v100;
  uint64_t v103 = v102;
  if (v5) {
    objc_msgSend_principalLines(v5, v91, v92, v93, v94, v95);
  }
  else {
    memset(v151, 0, 128);
  }
  uint64_t v104 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v6, v91, (uint64_t)v12, (uint64_t)v18, v24, v54, v60, v66 | 4, v149, v148, v147, v146, v79, v81, v83, v85, v72, v97, v99,
                   v101,
                   v103,
                   v151);

  uint64_t v109 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v105, *a4, v106, v107, v108);
  uint64_t v115 = objc_msgSend_textTokenRows(v109, v110, v111, v112, v113, v114);
  uint64_t v120 = objc_msgSend_objectAtIndexedSubscript_(v115, v116, a4[1], v117, v118, v119);

  uint64_t v131 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v121, v122, v123, v124, v125);
  for (unint64_t i = 0; i < objc_msgSend_count(v120, v126, v127, v128, v129, v130); ++i)
  {
    if (i == a4[2])
    {
      objc_msgSend_addObject_(v131, v133, (uint64_t)v104, v134, v135, v136);
    }
    else
    {
      unint64_t v137 = objc_msgSend_objectAtIndex_(v120, v133, i, v134, v135, v136);
      objc_msgSend_addObject_(v131, v138, (uint64_t)v137, v139, v140, v141);
    }
  }
  double v142 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v133, *a4, v134, v135, v136);
  objc_msgSend_setTokenRowWithTokens_atIndex_(v142, v143, (uint64_t)v131, a4[1], v144, v145);
}

void sub_1C4C06098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C060B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0672C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4C068C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"0123456789°", a4, a5, a6);
  id v7 = (void *)qword_1EA3C8F68;
  qword_1EA3C8F68 = v6;
}

uint64_t sub_1C4C06908(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

uint64_t sub_1C4C06914(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4C06B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4C06C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHLexiconCorrectionStep;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

id sub_1C4C06C58(uint64_t a1, void *a2, char a3, char a4, uint64_t *a5, void *a6, void *a7, void *a8, char a9)
{
  uint64_t v442 = *MEMORY[0x1E4F143B8];
  id v16 = a2;
  id v17 = a7;
  id v421 = a8;
  int v21 = *(_DWORD *)(a1 + 12);
  __int16 v434 = 0;
  uint64_t v432 = 0;
  uint64_t v433 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v430 = 0;
  uint64_t v431 = 0x7FFFFFFFFFFFFFFFLL;
  char v429 = 0;
  uint64_t v22 = *(void *)(a1 + 24);
  uint64_t v423 = v16;
  uint64_t v417 = v17;
  char v419 = a4;
  int v413 = v21;
  if (!v22)
  {
    uint64_t v418 = 0;
    unsigned __int8 v428 = 0;
    char v427 = 0;
LABEL_8:
    uint64_t v422 = 0;
    goto LABEL_9;
  }
  BYTE2(v400) = v21 == 0;
  BYTE1(v400) = a4;
  LOBYTE(v400) = a3;
  objc_msgSend_lexiconCorrectionsForToken_locale_lexicon_lmVocabulary_ovsStringChecker_textReplacements_consumableStrokesSet_minimumTokenScore_activeHistoryRange_outBestTokenScore_shouldCapitalizeWord_shouldSkipEntryCorrection_allowFullCapsCorrections_minimalLengthForLowConfidenceCorrections_lowConfidenceThreshold_minimalLengthForCustomCapitalizationCorrections_outBestTokenIndex_outFoundTokenInLexicon_outFoundCaseMatchingTokenInLexicon_outCorrectionFromOutOfContextEntry_(CHLanguageUtilities, v18, (uint64_t)v16, *(void *)(a1 + 16), v22, *(void *)(a1 + 48), *(void *)(a1 + 56), v17, 0.0, -4.0, *(void *)(a1 + 80), 0x7FFFFFFFFFFFFFFFLL, 0, &v430, v400, 4, 3, &v431, (char *)&v434 + 1,
    &v434,
  uint64_t v23 = &v429);
  unsigned __int8 v428 = 0;
  char v427 = 0;
  if (v23)
  {
    uint64_t v418 = v23;
    if (objc_msgSend_count(v23, v18, v24, v19, v25, v20) && (_BYTE)v434)
    {
      uint64_t v422 = 0;
      if (!v429) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v418 = 0;
  uint64_t v422 = 0;
LABEL_9:
  uint64_t v26 = *(void *)(a1 + 104);
  if (v26)
  {
    BYTE2(v400) = v413 == 0;
    BYTE1(v400) = a4;
    LOBYTE(v400) = a3;
    objc_msgSend_lexiconCorrectionsForToken_locale_lexicon_lmVocabulary_ovsStringChecker_textReplacements_consumableStrokesSet_minimumTokenScore_activeHistoryRange_outBestTokenScore_shouldCapitalizeWord_shouldSkipEntryCorrection_allowFullCapsCorrections_minimalLengthForLowConfidenceCorrections_lowConfidenceThreshold_minimalLengthForCustomCapitalizationCorrections_outBestTokenIndex_outFoundTokenInLexicon_outFoundCaseMatchingTokenInLexicon_outCorrectionFromOutOfContextEntry_(CHLanguageUtilities, v18, (uint64_t)v16, *(void *)(a1 + 16), v26, *(void *)(a1 + 48), *(void *)(a1 + 56), 0, 0.0, -4.0, *(void *)(a1 + 80), 0x7FFFFFFFFFFFFFFFLL, 0, &v432, v400, 4, 3, &v433, &v428,
      &v427,
    uint64_t v422 = 0);
  }
LABEL_11:
  uint64_t v27 = *(void *)(a1 + 40);
  uint64_t v415 = a6;
  int64x2_t v416 = a5;
  if (v27
    && (objc_msgSend_findPartialMatchInPhraseLexicon_token_contextBeforeToken_(CHLanguageUtilities, v18, v27, (uint64_t)v16, (uint64_t)v421, v20) & 1) != 0)
  {
    PartialMatchInPhraseLexicon_token_contextBeforeTokeunint64_t n = 1;
    BOOL v30 = 0;
    uint64_t v425 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v426 = 0;
    __int16 v424 = 0;
    if (!a9) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v28 = *(void *)(a1 + 32);
    if (v28)
    {
      PartialMatchInPhraseLexicon_token_contextBeforeTokeunint64_t n = objc_msgSend_findPartialMatchInPhraseLexicon_token_contextBeforeToken_(CHLanguageUtilities, v18, v28, (uint64_t)v16, (uint64_t)v421, v20);
      BOOL v30 = 0;
      uint64_t v425 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v426 = 0;
      __int16 v424 = 0;
      if (!a9) {
        goto LABEL_23;
      }
    }
    else
    {
      PartialMatchInPhraseLexicon_token_contextBeforeTokeunint64_t n = 0;
      BOOL v30 = 0;
      uint64_t v425 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v426 = 0;
      __int16 v424 = 0;
      if (!a9) {
        goto LABEL_23;
      }
    }
  }
  if (*(unsigned char *)(a1 + 9))
  {
    uint64_t v31 = objc_msgSend_string(v16, v18, v28, v19, v26, v20);
    uint64_t v37 = objc_msgSend_punctuationCharacterSet(MEMORY[0x1E4F28E58], v32, v33, v34, v35, v36);
    objc_msgSend_stringByTrimmingCharactersInSet_(v31, v38, (uint64_t)v37, v39, v40, v41);
    double v42 = (NSString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_alphanumericCharacterSet(MEMORY[0x1E4F28B88], v43, v44, v45, v46, v47);
    double v48 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
    BOOL v30 = isStringEntirelyFromSet(v42, v48);

    id v16 = v423;
  }
  else
  {
    BOOL v30 = 0;
  }
LABEL_23:
  char v49 = a3;
  int v50 = HIBYTE(v434);
  int v51 = !v30;
  if (HIBYTE(v434)) {
    int v51 = 1;
  }
  int v52 = v428;
  if (v428) {
    int v51 = 1;
  }
  if ((v51 | PartialMatchInPhraseLexicon_token_contextBeforeToken))
  {
    v420 = 0;
  }
  else
  {
    id v53 = v16;
    id v411 = v421;
    uint64_t v59 = objc_msgSend_string(v53, v54, v55, v56, v57, v58);
    uint64_t v65 = objc_msgSend_punctuationCharacterSet(MEMORY[0x1E4F28B88], v60, v61, v62, v63, v64);
    char v66 = v49;
    uint64_t v71 = objc_msgSend_stringByTrimmingCharactersInSet_(v59, v67, (uint64_t)v65, v68, v69, v70);

    if ((unint64_t)objc_msgSend_length(v71, v72, v73, v74, v75, v76) >= 3)
    {
      double v81 = objc_msgSend_spellCheckingLocaleForRecognitionLocale_string_(CHRecognizerConfiguration, v77, *(void *)(a1 + 16), (uint64_t)v59, v78, v79);
      uint64_t v409 = v81;
      char v87 = objc_msgSend_properties(v53, v82, v83, v84, v85, v86);
      uint64_t v88 = @" ";
      if ((v87 & 0x20) == 0) {
        uint64_t v88 = &stru_1F20141C8;
      }
      uint64_t v89 = v88;
      uint64_t v90 = *(void **)(a1 + 64);
      uint64_t v410 = v89;
      uint64_t v96 = objc_msgSend_languageCode(v81, v91, v92, v93, v94, v95);
      uint64_t v98 = objc_msgSend_topCorrectionForString_contextBeforeToken_contextSeparator_shouldUseErrorModel_forLanguage_(v90, v97, (uint64_t)v59, (uint64_t)v411, (uint64_t)v89, 1, v96);

      uint64_t v104 = objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E4F28B88], v99, v100, v101, v102, v103);
      uint64_t v109 = objc_msgSend_rangeOfCharacterFromSet_(v98, v105, (uint64_t)v104, v106, v107, v108);

      double v80 = 0;
      if (v109 == 0x7FFFFFFFFFFFFFFFLL && v98)
      {
        if ((objc_msgSend_isEqualToString_(v98, v110, (uint64_t)v59, v111, v112, v113) & 1) != 0
          || (int64_t v114 = editDistance((NSString *)v59, (NSString *)v98),
              unint64_t v120 = objc_msgSend_length(v59, v115, v116, v117, v118, v119),
              v114 >= 3)
          && v114 > v120 / 3)
        {
          double v80 = 0;
        }
        else
        {
          uint64_t v126 = objc_msgSend_strokeIndexes(v53, v121, v122, v123, v124, v125);
          unsigned int v407 = objc_msgSend_wordID(v53, v127, v128, v129, v130, v131);
          objc_msgSend_modelScore(v53, v132, v133, v134, v135, v136);
          double v406 = v137;
          objc_msgSend_recognitionScore(v53, v138, v139, v140, v141, v142);
          double v405 = v143;
          objc_msgSend_combinedScore(v53, v144, v145, v146, v147, v148);
          double v404 = v149;
          objc_msgSend_alignmentScore(v53, v150, v151, v152, v153, v154);
          double v403 = v155;
          uint64_t v402 = objc_msgSend_properties(v53, v156, v157, v158, v159, v160);
          v408 = objc_msgSend_recognizerSourceLocale(v53, v161, v162, v163, v164, v165);
          uint64_t v171 = objc_msgSend_inputSources(v53, v166, v167, v168, v169, v170);
          uint64_t v401 = objc_msgSend_substrokeCount(v53, v172, v173, v174, v175, v176);
          objc_msgSend_bounds(v53, v177, v178, v179, v180, v181);
          double v183 = v182;
          double v185 = v184;
          double v187 = v186;
          double v189 = v188;
          objc_msgSend_originalBounds(v53, v190, v191, v192, v193, v194);
          uint64_t v201 = v200;
          uint64_t v203 = v202;
          uint64_t v205 = v204;
          uint64_t v207 = v206;
          if (v53)
          {
            objc_msgSend_principalLines(v53, v195, v196, v197, v198, v199);
          }
          else
          {
            long long v440 = 0u;
            long long v441 = 0u;
            long long v438 = 0u;
            long long v439 = 0u;
            long long v436 = 0u;
            long long v437 = 0u;
            memset(buf, 0, sizeof(buf));
          }
          objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v195, (uint64_t)v98, (uint64_t)v126, v407, v402, v408, v171 | 0x20, v406, v405, v404, v403, v183, v185, v187, v189, v401, v201, v203,
            v205,
            v207,
          double v80 = buf);
        }
      }
    }
    else
    {
      double v80 = 0;
    }

    if (v80)
    {
      BYTE2(v400) = v413 == 0;
      BYTE1(v400) = v419;
      LOBYTE(v400) = v66;
      objc_msgSend_lexiconCorrectionsForToken_locale_lexicon_lmVocabulary_ovsStringChecker_textReplacements_consumableStrokesSet_minimumTokenScore_activeHistoryRange_outBestTokenScore_shouldCapitalizeWord_shouldSkipEntryCorrection_allowFullCapsCorrections_minimalLengthForLowConfidenceCorrections_lowConfidenceThreshold_minimalLengthForCustomCapitalizationCorrections_outBestTokenIndex_outFoundTokenInLexicon_outFoundCaseMatchingTokenInLexicon_outCorrectionFromOutOfContextEntry_(CHLanguageUtilities, v208, (uint64_t)v80, *(void *)(a1 + 16), *(void *)(a1 + 104), *(void *)(a1 + 48), *(void *)(a1 + 56), v417, 0.0, -4.0, *(void *)(a1 + 80), 0x7FFFFFFFFFFFFFFFLL, 0, &v426, v400, 4, 3, &v425, (char *)&v424 + 1,
        &v424,
      uint64_t v209 = 0);
      v420 = 0;
      if (objc_msgSend_count(v209, v210, v211, v212, v213, v214) && HIBYTE(v424))
      {
        if (objc_msgSend_count(v422, v215, v216, v217, v218, v219))
        {
          objc_msgSend_objectAtIndexedSubscript_(v422, v220, v433, v221, v222, v223);
          id v224 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          id v224 = v53;
        }
        float v229 = v224;
        uint64_t v230 = (void *)MEMORY[0x1E4F1C978];
        uint64_t v231 = objc_msgSend_objectAtIndexedSubscript_(v209, v225, v425, v226, v227, v228);
        v420 = objc_msgSend_arrayWithObjects_(v230, v232, (uint64_t)v231, v233, v234, v235, v229, 0);

        uint64_t v425 = 0;
      }
    }
    else
    {
      v420 = 0;
    }

    int v50 = HIBYTE(v434);
    int v52 = v428;
  }
  if (v50) {
    BOOL v236 = v52 == 0;
  }
  else {
    BOOL v236 = 1;
  }
  int v237 = !v236;
  int v414 = v237;
  if (objc_msgSend_count(v418, v18, v28, v19, v26, v20))
  {
    float64x2_t v243 = objc_msgSend_objectAtIndexedSubscript_(v418, v238, v431, v240, v241, v242);
    long long v249 = objc_msgSend_string(v243, v244, v245, v246, v247, v248);

    objc_msgSend_length(v249, v250, v251, v252, v253, v254);
    double v260 = objc_msgSend_string(v423, v255, v256, v257, v258, v259);
    objc_msgSend_length(v260, v261, v262, v263, v264, v265);
    uint64_t v271 = objc_msgSend_length(v249, v266, v267, v268, v269, v270);
    double v277 = objc_msgSend_string(v423, v272, v273, v274, v275, v276);
    uint64_t v283 = objc_msgSend_length(v277, v278, v279, v280, v281, v282);

    double v289 = objc_msgSend_string(v423, v284, v285, v286, v287, v288);
    int isEqualToString = objc_msgSend_isEqualToString_(v249, v290, (uint64_t)v289, v291, v292, v293);

    double v300 = objc_msgSend_string(v423, v295, v296, v297, v298, v299);
    BOOL v412 = objc_msgSend_caseInsensitiveCompare_(v249, v301, (uint64_t)v300, v302, v303, v304) == 0;

    uint64_t v305 = v271 - v283;
  }
  else
  {
    int isEqualToString = 0;
    BOOL v412 = 0;
    uint64_t v305 = 0;
  }
  if (objc_msgSend_count(v422, v238, v239, v240, v241, v242))
  {
    double v310 = objc_msgSend_objectAtIndexedSubscript_(v422, v306, v433, v307, v308, v309);
    double v316 = objc_msgSend_string(v310, v311, v312, v313, v314, v315);

    objc_msgSend_length(v316, v317, v318, v319, v320, v321);
    unint64_t v327 = objc_msgSend_string(v423, v322, v323, v324, v325, v326);
    objc_msgSend_length(v327, v328, v329, v330, v331, v332);
    uint64_t v338 = objc_msgSend_length(v316, v333, v334, v335, v336, v337);
    uint64_t v344 = objc_msgSend_string(v423, v339, v340, v341, v342, v343);
    uint64_t v350 = objc_msgSend_length(v344, v345, v346, v347, v348, v349);

    unint64_t v356 = objc_msgSend_string(v423, v351, v352, v353, v354, v355);
    int v361 = objc_msgSend_isEqualToString_(v316, v357, (uint64_t)v356, v358, v359, v360);

    uint32_t v367 = objc_msgSend_string(v423, v362, v363, v364, v365, v366);
    BOOL v372 = objc_msgSend_caseInsensitiveCompare_(v316, v368, (uint64_t)v367, v369, v370, v371) == 0;

    uint64_t v373 = v338 - v350;
  }
  else
  {
    uint64_t v373 = 0;
    int v361 = 0;
    BOOL v372 = 0;
  }
  int v374 = 0;
  int v375 = v414;
  if (v427) {
    int v375 = 0;
  }
  if (v375 == 1 && v305 <= v373 && v361 ^ 1 | isEqualToString) {
    int v374 = v412 || !v372;
  }
  if (v420)
  {
    id v381 = v420;
    if (v416) {
      *int64x2_t v416 = v425;
    }
    if (v415) {
      *uint64_t v415 = v426;
    }
    if (!v416) {
      goto LABEL_106;
    }
LABEL_99:
    if (objc_msgSend_count(v381, v376, v377, v378, v379, v380))
    {
      unint64_t v390 = *v416;
      if (v390 >= objc_msgSend_count(v381, v385, v386, v387, v388, v389))
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        int v391 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v391, OS_LOG_TYPE_FAULT))
        {
          unint64_t v397 = *v416;
          uint64_t v398 = objc_msgSend_count(v381, v392, v393, v394, v395, v396);
          *(_DWORD *)long long buf = 134218496;
          *(void *)&uint8_t buf[4] = v397;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 0;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v398;
          _os_log_impl(&dword_1C492D000, v391, OS_LOG_TYPE_FAULT, "The best token index %ld is not contained in the returned tokens range %d, %ld", buf, 0x1Cu);
        }
      }
    }
    goto LABEL_106;
  }
  if (v429 && v428) {
    goto LABEL_94;
  }
  if (v50) {
    BOOL v382 = v52 == 0;
  }
  else {
    BOOL v382 = 0;
  }
  if (v382 || v434 != 0) {
    int v374 = 1;
  }
  if (v374 != 1)
  {
LABEL_94:
    id v381 = v422;
    if (v415) {
      *uint64_t v415 = v432;
    }
    if (v416)
    {
      v384 = &v433;
      goto LABEL_98;
    }
  }
  else
  {
    id v381 = v418;
    if (v415) {
      *uint64_t v415 = v430;
    }
    if (v416)
    {
      v384 = &v431;
LABEL_98:
      *int64x2_t v416 = *v384;
      goto LABEL_99;
    }
  }
LABEL_106:

  return v381;
}

void sub_1C4C0782C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,uint64_t a36,void *a37,void *a38,void *a39)
{
  _Unwind_Resume(a1);
}

id sub_1C4C07A60(uint64_t a1, void *a2, int a3, void *a4, BOOL a5, void *a6, int a7, char a8)
{
  id v13 = a2;
  id v14 = a4;
  id v518 = a6;
  id v15 = v13;
  int v21 = v15;
  int v509 = a7;
  if (a7) {
    LODWORD(v22) = 1;
  }
  else {
    unint64_t v22 = ((unint64_t)objc_msgSend_properties(v15, v16, v17, v18, v19, v20) >> 6) & 1;
  }
  int v514 = v22;
  uint64_t v529 = 0;
  v530 = &v529;
  uint64_t v531 = 0x3032000000;
  uint64_t v532 = sub_1C4C089AC;
  uint64_t v533 = sub_1C4C089BC;
  id v534 = 0;
  uint64_t v23 = objc_msgSend_length(v14, v16, v17, v18, v19, v20);
  v528[0] = MEMORY[0x1E4F143A8];
  v528[1] = 3221225472;
  v528[2] = sub_1C4C089C4;
  v528[3] = &unk_1E64E2B28;
  v528[4] = &v529;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v14, v24, 0, v23, 259, (uint64_t)v528);
  if (v14)
  {
    objc_msgSend_lastComposedCharacter(v14, v25, v26, v27, v28, v29);
    uint64_t v520 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v520 = &stru_1F20141C8;
  }
  BOOL v30 = objc_msgSend_string(v21, v25, v26, v27, v28, v29);
  objc_msgSend_firstComposedCharacter(v30, v31, v32, v33, v34, v35);
  v519 = (NSString *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_letterCharacterSet(MEMORY[0x1E4F28B88], v36, v37, v38, v39, v40);
  uint64_t v41 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
  if (isStringEntirelyFromSet(v519, v41))
  {
    BOOL v42 = isCharacterLatinOrCommonScript(v519);

    if (!a3) {
      goto LABEL_17;
    }
  }
  else
  {
    BOOL v42 = 0;

    if (!a3) {
      goto LABEL_17;
    }
  }
  if (!objc_msgSend_length((void *)v530[5], v43, v44, v45, v46, v47)
    || (objc_msgSend_properties(v21, v43, v44, v45, v46, v47) & 0x20) != 0)
  {
LABEL_17:
    char HasMatchingString = 0;
    uint64_t v51 = a1;
    if (*(_DWORD *)(a1 + 12)) {
      goto LABEL_18;
    }
LABEL_51:
    if (qword_1EA3C8F80 != -1) {
      dispatch_once(&qword_1EA3C8F80, &unk_1F2013C68);
    }
    uint64_t v340 = objc_msgSend_lastComposedCharacter(v14, v43, v44, v45, v46, v47);
    objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v341, v342, v343, v344, v345);
    uint64_t v346 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
    if (isStringEntirelyFromSet((NSString *)v340, v346))
    {
    }
    else
    {
      uint64_t v357 = objc_msgSend_length(v14, v347, v348, v349, v350, v351);

      if (v357)
      {
        unint64_t v358 = ((unint64_t)objc_msgSend_properties(v21, v352, v353, v354, v355, v356) >> 5) & 1;
        goto LABEL_58;
      }
    }
    LODWORD(v35_Block_object_dispose(&STACK[0x320], 8) = 1;
LABEL_58:
    uint64_t v359 = objc_msgSend_string(v21, v352, v353, v354, v355, v356);
    uint64_t v364 = objc_msgSend_stringByTrimmingCharactersInSet_(v359, v360, qword_1EA3C8F78, v361, v362, v363);

    uint64_t v370 = objc_msgSend_firstComposedCharacter(v364, v365, v366, v367, v368, v369);
    uint64_t v376 = v370;
    if (v358)
    {
      uint64_t v377 = objc_msgSend_uppercaseString(v370, v371, v372, v373, v374, v375);
      int isEqualToString = objc_msgSend_isEqualToString_(v376, v378, (uint64_t)v377, v379, v380, v381);

      uint64_t v526 = 0;
      uint64_t v527 = 0;
      if ((v514 & 1) == 0) {
        goto LABEL_36;
      }
    }
    else
    {
      int isEqualToString = 0;

      uint64_t v526 = 0;
      uint64_t v527 = 0;
      if ((v514 & 1) == 0) {
        goto LABEL_36;
      }
    }
    goto LABEL_31;
  }
  objc_msgSend_letterCharacterSet(MEMORY[0x1E4F28B88], v43, v44, v45, v46, v47);
  double v48 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
  if (isStringEntirelyFromSet(&v520->isa, v48))
  {
    BOOL v49 = isCharacterLatinOrCommonScript(&v520->isa);

    if (v42 && v49)
    {
      char HasMatchingString = 1;
      uint64_t v51 = a1;
      if (*(_DWORD *)(a1 + 12)) {
        goto LABEL_18;
      }
      goto LABEL_51;
    }
  }
  else
  {
  }
  unint64_t v328 = NSString;
  uint64_t v329 = v530[5];
  uint64_t v330 = objc_msgSend_string(v21, v43, v44, v45, v46, v47);
  uint64_t v335 = objc_msgSend_stringWithFormat_(v328, v331, @"%@%@", v332, v333, v334, v329, v330);

  if (objc_msgSend_lexiconHasEntryForString_withLexicon_outHasMatchingString_(CHLanguageUtilities, v336, (uint64_t)v335, *(void *)(a1 + 24), 0, v337))
  {
    char HasMatchingString = 1;

    uint64_t v51 = a1;
    if (!*(_DWORD *)(a1 + 12)) {
      goto LABEL_51;
    }
  }
  else
  {
    char HasMatchingString = objc_msgSend_lexiconHasEntryForString_withLexicon_outHasMatchingString_(CHLanguageUtilities, v338, (uint64_t)v335, *(void *)(a1 + 104), 0, v339);

    uint64_t v51 = a1;
    if (!*(_DWORD *)(a1 + 12)) {
      goto LABEL_51;
    }
  }
LABEL_18:
  char v507 = HasMatchingString;
  BOOL v52 = isStringEntirelyFromSet(&v520->isa, *(NSCharacterSet **)(v51 + 88));
  BOOL v53 = a5;
  if (a5) {
    a5 = isStringEntirelyFromSet(&v520->isa, *(NSCharacterSet **)(a1 + 96));
  }
  int v54 = isCharacterLatinOrCommonScript(&v520->isa);
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v55, v56, v57, v58, v59);
  uint64_t v60 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
  BOOL v61 = isStringEntirelyFromSet(&v520->isa, v60);

  if (v61) {
    LODWORD(v67) = 1;
  }
  else {
    unint64_t v67 = ((unint64_t)objc_msgSend_properties(v21, v62, v63, v64, v65, v66) >> 5) & 1;
  }
  if (*(_DWORD *)(a1 + 12) == 2) {
    int v68 = v67 | (v52 | ~v54) & v42;
  }
  else {
    int v68 = 0;
  }
  if (a3)
  {
    if (v14 && objc_msgSend_length(v14, v62, v63, v64, v65, v66))
    {
      objc_msgSend_newlineCharacterSet(MEMORY[0x1E4F28B88], v62, v63, v64, v65, v66);
      uint64_t v69 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
      BOOL v70 = isStringEntirelyFromSet(&v520->isa, v69);
    }
    else
    {
      BOOL v70 = 1;
    }
    int isEqualToString = v70 | v53 & v67 | v52 | a5 | v68;
    char HasMatchingString = v507;
    uint64_t v526 = 0;
    uint64_t v527 = 0;
    if ((v514 & 1) == 0)
    {
LABEL_36:
      char v71 = *(unsigned char *)(a1 + 9) == 0;
      if ((HasMatchingString & 1) == 0) {
        goto LABEL_37;
      }
LABEL_32:
      uint64_t v72 = objc_msgSend_length(v14, v62, v63, v64, v65, v66);
      uint64_t v78 = objc_msgSend_length((void *)v530[5], v73, v74, v75, v76, v77);
      v508 = objc_msgSend_substringToIndex_(v14, v79, v72 - v78, v80, v81, v82);

      uint64_t v83 = NSString;
      uint64_t v84 = v530[5];
      uint64_t v505 = objc_msgSend_string(v21, v85, v86, v87, v88, v89);
      uint64_t v94 = objc_msgSend_stringWithFormat_(v83, v90, @"%@%@", v91, v92, v93, v84, v505);
      uint64_t v100 = objc_msgSend_strokeIndexes(v21, v95, v96, v97, v98, v99);
      uint64_t v106 = objc_msgSend_wordID(v21, v101, v102, v103, v104, v105);
      objc_msgSend_modelScore(v21, v107, v108, v109, v110, v111);
      double v503 = v112;
      objc_msgSend_recognitionScore(v21, v113, v114, v115, v116, v117);
      double v501 = v118;
      objc_msgSend_combinedScore(v21, v119, v120, v121, v122, v123);
      double v499 = v124;
      objc_msgSend_alignmentScore(v21, v125, v126, v127, v128, v129);
      double v497 = v130;
      uint64_t v136 = objc_msgSend_properties(v21, v131, v132, v133, v134, v135);
      uint64_t v142 = objc_msgSend_recognizerSourceLocale(v21, v137, v138, v139, v140, v141);
      uint64_t v148 = objc_msgSend_inputSources(v21, v143, v144, v145, v146, v147);
      uint64_t v154 = objc_msgSend_substrokeCount(v21, v149, v150, v151, v152, v153);
      objc_msgSend_bounds(v21, v155, v156, v157, v158, v159);
      double v161 = v160;
      double v163 = v162;
      double v165 = v164;
      double v167 = v166;
      objc_msgSend_originalBounds(v21, v168, v169, v170, v171, v172);
      uint64_t v179 = v178;
      uint64_t v181 = v180;
      uint64_t v183 = v182;
      uint64_t v185 = v184;
      if (v21) {
        objc_msgSend_principalLines(v21, v173, v174, v175, v176, v177);
      }
      else {
        memset(v525, 0, sizeof(v525));
      }
      objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v173, (uint64_t)v94, (uint64_t)v100, v106, v136, v142, v148, v503, v501, v499, v497, v161, v163, v165, v167, v154, v179, v181,
        v183,
        v185,
      double v187 = v525);

      char v200 = v71;
      id v199 = v508;
      uint64_t v198 = sub_1C4C06C58(a1, v187, isEqualToString, v200, &v526, &v527, v518, v508, a8);
      if (objc_msgSend_count(v198, v201, v202, v203, v204, v205))
      {
        double v210 = objc_msgSend_objectAtIndex_(v198, v206, v526, v207, v208, v209);
        uint64_t v216 = objc_msgSend_string(v210, v211, v212, v213, v214, v215);
        hasPrefiCGFloat x = objc_msgSend_hasPrefix_(v216, v217, v530[5], v218, v219, v220);

        uint64_t v197 = v21;
        if (hasPrefix)
        {
          uint64_t v227 = objc_msgSend_string(v210, v222, v223, v224, v225, v226);
          uint64_t v233 = objc_msgSend_length((void *)v530[5], v228, v229, v230, v231, v232);
          uint64_t v512 = objc_msgSend_substringFromIndex_(v227, v234, v233, v235, v236, v237);

          float64x2_t v243 = objc_msgSend_strokeIndexes(v210, v238, v239, v240, v241, v242);
          unsigned int v506 = objc_msgSend_wordID(v210, v244, v245, v246, v247, v248);
          objc_msgSend_modelScore(v210, v249, v250, v251, v252, v253);
          double v504 = v254;
          objc_msgSend_recognitionScore(v210, v255, v256, v257, v258, v259);
          double v502 = v260;
          objc_msgSend_combinedScore(v210, v261, v262, v263, v264, v265);
          double v500 = v266;
          objc_msgSend_alignmentScore(v210, v267, v268, v269, v270, v271);
          double v498 = v272;
          uint64_t v278 = objc_msgSend_properties(v210, v273, v274, v275, v276, v277);
          double v284 = objc_msgSend_recognizerSourceLocale(v210, v279, v280, v281, v282, v283);
          uint64_t v290 = objc_msgSend_inputSources(v210, v285, v286, v287, v288, v289);
          uint64_t v296 = objc_msgSend_substrokeCount(v210, v291, v292, v293, v294, v295);
          objc_msgSend_bounds(v210, v297, v298, v299, v300, v301);
          double v303 = v302;
          double v305 = v304;
          double v307 = v306;
          double v309 = v308;
          objc_msgSend_originalBounds(v210, v310, v311, v312, v313, v314);
          uint64_t v321 = v320;
          uint64_t v323 = v322;
          uint64_t v325 = v324;
          uint64_t v327 = v326;
          if (v210) {
            objc_msgSend_principalLines(v210, v315, v316, v317, v318, v319);
          }
          else {
            memset(v524, 0, sizeof(v524));
          }
          objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v315, (uint64_t)v512, (uint64_t)v243, v506, v278, v284, v290, v504, v502, v500, v498, v303, v305, v307, v309, v296, v321, v323,
            v325,
            v327,
          uint64_t v197 = v524);

          id v199 = v508;
        }
      }
      else
      {
        uint64_t v197 = v21;
      }
      goto LABEL_66;
    }
  }
  else
  {
    char HasMatchingString = 0;
    int isEqualToString = objc_msgSend_endsWithSentenceEndPunctuation(v14, v62, v63, v64, v65, v66) | a5 | v68;
    uint64_t v526 = 0;
    uint64_t v527 = 0;
    if ((v514 & 1) == 0) {
      goto LABEL_36;
    }
  }
LABEL_31:
  char v71 = 1;
  if (HasMatchingString) {
    goto LABEL_32;
  }
LABEL_37:
  uint64_t v186 = a1;
  double v187 = sub_1C4C06C58(a1, v21, isEqualToString, v71, &v526, &v527, v518, v14, a8);
  if (!objc_msgSend_count(v187, v188, v189, v190, v191, v192))
  {
    uint64_t v197 = v21;
    goto LABEL_67;
  }
  uint64_t v197 = objc_msgSend_objectAtIndex_(v187, v193, v526, v194, v195, v196);
  uint64_t v198 = v21;
  id v199 = v14;
LABEL_66:

  id v14 = v199;
  uint64_t v186 = a1;
LABEL_67:

  uint64_t v387 = objc_msgSend_string(v197, v382, v383, v384, v385, v386);
  uint64_t v393 = v387;
  int v394 = *(_DWORD *)(v186 + 12);
  if ((v394 - 1) >= 3)
  {
    if (v394 == 4)
    {
      uint64_t v398 = objc_msgSend_uppercaseStringWithLocale_(v387, v388, *(void *)(v186 + 16), v390, v391, v392);
    }
    else
    {
      if (v394 != 5) {
        goto LABEL_80;
      }
      uint64_t v398 = objc_msgSend_lowercaseStringWithLocale_(v387, v388, *(void *)(v186 + 16), v390, v391, v392);
    }
    uint64_t v397 = v398;
    goto LABEL_78;
  }
  int v395 = v514 ^ 1;
  if (*(unsigned char *)(v186 + 9)) {
    int v395 = 0;
  }
  if ((v395 | v509 & isEqualToString) == 1)
  {
    objc_msgSend_lowercaseStringWithLocale_(v387, v388, *(void *)(v186 + 16), v390, v391, v392);
    uint64_t v396 = (NSString *)objc_claimAutoreleasedReturnValue();

    if (isEqualToString)
    {
      uint64_t v397 = uppercaseFirstLetter(v396);
      uint64_t v393 = v396;
LABEL_78:

      uint64_t v393 = (void *)v397;
      goto LABEL_80;
    }
    uint64_t v393 = v396;
  }
LABEL_80:
  uint64_t v399 = objc_msgSend_string(v197, v388, v389, v390, v391, v392);
  char v404 = objc_msgSend_isEqualToString_(v393, v400, (uint64_t)v399, v401, v402, v403);

  if ((v404 & 1) == 0)
  {
    uint64_t v410 = objc_msgSend_strokeIndexes(v197, v405, v406, v407, v408, v409);
    unsigned int v522 = objc_msgSend_wordID(v197, v411, v412, v413, v414, v415);
    objc_msgSend_modelScore(v197, v416, v417, v418, v419, v420);
    double v517 = v421;
    objc_msgSend_recognitionScore(v197, v422, v423, v424, v425, v426);
    double v515 = v427;
    objc_msgSend_combinedScore(v197, v428, v429, v430, v431, v432);
    double v513 = v433;
    objc_msgSend_alignmentScore(v197, v434, v435, v436, v437, v438);
    double v510 = v439;
    uint64_t v445 = objc_msgSend_properties(v197, v440, v441, v442, v443, v444);
    v451 = objc_msgSend_recognizerSourceLocale(v197, v446, v447, v448, v449, v450);
    uint64_t v457 = objc_msgSend_inputSources(v197, v452, v453, v454, v455, v456);
    uint64_t v463 = objc_msgSend_substrokeCount(v197, v458, v459, v460, v461, v462);
    objc_msgSend_bounds(v197, v464, v465, v466, v467, v468);
    double v470 = v469;
    double v472 = v471;
    double v474 = v473;
    double v476 = v475;
    objc_msgSend_originalBounds(v197, v477, v478, v479, v480, v481);
    uint64_t v488 = v487;
    uint64_t v490 = v489;
    uint64_t v492 = v491;
    uint64_t v494 = v493;
    if (v197) {
      objc_msgSend_principalLines(v197, v482, v483, v484, v485, v486);
    }
    else {
      memset(v523, 0, sizeof(v523));
    }
    objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v482, (uint64_t)v393, (uint64_t)v410, v522, v445, v451, v457 | 0x100, v517, v515, v513, v510, v470, v472, v474, v476, v463, v488, v490,
      v492,
      v494,
    uint64_t v495 = v523);

    uint64_t v197 = (void *)v495;
  }

  _Block_object_dispose(&v529, 8);
  return v197;
}

void sub_1C4C08718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29)
{
  _Block_object_dispose((const void *)(v31 - 200), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C089AC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4C089BC(uint64_t a1)
{
}

void sub_1C4C089C4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  *a7 = 1;
}

void sub_1C4C089FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_punctuationCharacterSet(MEMORY[0x1E4F28E58], a2, a3, a4, a5, a6);
  id v7 = (void *)qword_1EA3C8F78;
  qword_1EA3C8F78 = v6;

  uint64_t v8 = (void *)qword_1EA3C8F78;
  objc_msgSend_symbolCharacterSet(MEMORY[0x1E4F28B88], v9, v10, v11, v12, v13);
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v8, v14, (uint64_t)v18, v15, v16, v17);
}

void sub_1C4C08A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C08A8C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  int v4 = isCharacterLatinOrCommonScript(v3);
  char v10 = v4;
  if (*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) != v4
    && objc_msgSend_length(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v5, v6, v7, v8, v9))
  {
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    uint64_t v13 = objc_msgSend_strokeIndexes(*(void **)(a1 + 32), v5, v11, v7, v8, v9);
    unsigned int v107 = objc_msgSend_wordID(*(void **)(a1 + 32), v14, v15, v16, v17, v18);
    objc_msgSend_modelScore(*(void **)(a1 + 32), v19, v20, v21, v22, v23);
    double v106 = v24;
    objc_msgSend_recognitionScore(*(void **)(a1 + 32), v25, v26, v27, v28, v29);
    double v105 = v30;
    objc_msgSend_combinedScore(*(void **)(a1 + 32), v31, v32, v33, v34, v35);
    double v104 = v36;
    objc_msgSend_alignmentScore(*(void **)(a1 + 32), v37, v38, v39, v40, v41);
    double v103 = v42;
    uint64_t v43 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    BOOL v49 = objc_msgSend_recognizerSourceLocale(*(void **)(a1 + 32), v44, v45, v46, v47, v48);
    uint64_t v55 = objc_msgSend_inputSources(*(void **)(a1 + 32), v50, v51, v52, v53, v54);
    uint64_t v61 = objc_msgSend_substrokeCount(*(void **)(a1 + 32), v56, v57, v58, v59, v60);
    objc_msgSend_bounds(*(void **)(a1 + 32), v62, v63, v64, v65, v66);
    double v68 = v67;
    double v70 = v69;
    double v72 = v71;
    double v74 = v73;
    objc_msgSend_originalBounds(*(void **)(a1 + 32), v75, v76, v77, v78, v79);
    uint64_t v86 = v85;
    uint64_t v88 = v87;
    uint64_t v90 = v89;
    uint64_t v92 = v91;
    uint64_t v93 = *(void **)(a1 + 32);
    if (v93) {
      objc_msgSend_principalLines(v93, v80, v81, v82, v83, v84);
    }
    else {
      memset(v108, 0, 128);
    }
    objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v80, v12, (uint64_t)v13, v107, v43, v49, v55, v106, v105, v104, v103, v68, v70, v72, v74, v61, v86, v88,
      v90,
      v92,
    uint64_t v94 = v108);

    objc_msgSend_addObject_(*(void **)(a1 + 40), v95, (uint64_t)v94, v96, v97, v98);
    objc_msgSend_setString_(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v99, (uint64_t)&stru_1F20141C8, v100, v101, v102);
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) &= ~0x20uLL;
  }
  objc_msgSend_appendString_(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v5, (uint64_t)v3, v7, v8, v9);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v10;
}

void sub_1C4C08CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C08D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C08D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0A448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  _Block_object_dispose(&STACK[0x600], 8);
  _Unwind_Resume(a1);
}

void sub_1C4C0AAD0(uint64_t a1, void *a2, uint64_t a3)
{
  id v62 = a2;
  unint64_t v10 = objc_msgSend_properties(v62, v5, v6, v7, v8, v9);
  uint64_t v16 = objc_msgSend_string(v62, v11, v12, v13, v14, v15);
  objc_msgSend_firstComposedCharacter(v16, v17, v18, v19, v20, v21);
  uint64_t v22 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v23 = isCharacterLatinOrCommonScript(v22);

  int v24 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (objc_msgSend_length(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v25, v26, v27, v28, v29))
  {
    objc_msgSend_lastComposedCharacter(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v30, v31, v32, v33, v34);
    uint64_t v35 = (NSString *)objc_claimAutoreleasedReturnValue();
    int v36 = isCharacterCJKSymbolsPunctuations(v35);

    uint64_t v37 = (v10 >> 5) & 1;
    if (v24 != v23) {
      LODWORD(v37) = 1;
    }
    if (a3)
    {
LABEL_5:
      unsigned int v38 = v37 | v36;
      uint64_t v39 = *(void **)(a1 + 32);
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
        objc_msgSend_numberWithBool_(NSNumber, v30, v38, v32, v33, v34);
      }
      else {
      uint64_t v40 = objc_msgSend_numberWithBool_(NSNumber, v30, 0, v32, v33, v34);
      }
      objc_msgSend_addObject_(v39, v41, (uint64_t)v40, v42, v43, v44);

      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v38;
      goto LABEL_16;
    }
  }
  else
  {
    int v36 = 0;
    uint64_t v37 = (v10 >> 5) & 1;
    if (v24 != v23) {
      LODWORD(v37) = 1;
    }
    if (a3) {
      goto LABEL_5;
    }
  }
  if ((v37 & 1) != 0 || *(unsigned char *)(a1 + 64))
  {
    char v45 = 1;
  }
  else if (*(unsigned char *)(a1 + 65))
  {
    char v45 = 1;
  }
  else
  {
    char v45 = v36;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v45;
LABEL_16:
  uint64_t v46 = objc_msgSend_string(v62, v30, v31, v32, v33, v34);
  objc_msgSend_lastComposedCharacter(v46, v47, v48, v49, v50, v51);
  uint64_t v52 = (NSString *)objc_claimAutoreleasedReturnValue();

  if (isCharacterLatinOrCommonScript(v52)) {
    int v58 = isCharacterCJKSymbolsPunctuations(v52) ^ 1;
  }
  else {
    LOBYTE(v5_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v58;
  uint64_t v59 = objc_msgSend_string(v62, v53, v54, v55, v56, v57);
  uint64_t v60 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v61 = *(void **)(v60 + 40);
  *(void *)(v60 + 40) = v59;
}

void sub_1C4C0ACB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0ACCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0ACE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0ACF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0AD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0AD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0AD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0AD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0AD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0AD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0AD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0ADAC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  if (++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 3)
  {
    uint64_t v9 = objc_msgSend_substringFromIndex_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    *a7 = 1;
  }
}

void sub_1C4C0B818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C0BAD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4C0BBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0C7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C0CA60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4C0CBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0CBF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0CC08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0D1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0D3A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v14 = v3;
  id v15 = v3;
  if ((objc_msgSend_properties(v3, v4, v5, v6, v7, v8) & 0x40) == 0)
  {
    if ((objc_msgSend_properties(v3, v9, v10, v11, v12, v13) & 0x20) != 0)
    {
      uint64_t v21 = *(void *)(*(void *)(a1 + 80) + 8);
      uint64_t v22 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = &stru_1F20141C8;
    }
    objc_msgSend_string(v3, v16, v17, v18, v19, v20);
    int v23 = (NSString *)objc_claimAutoreleasedReturnValue();
    halfWidthFullWidthTransform(v23, *(NSCharacterSet **)(*(void *)(a1 + 32) + 16), *(NSString **)(a1 + 40), 0, 0);
    int v24 = (NSString *)objc_claimAutoreleasedReturnValue();

    halfWidthFullWidthTransform(v24, *(NSCharacterSet **)(*(void *)(a1 + 32) + 32), *(NSString **)(*(void *)(*(void *)(a1 + 80) + 8) + 40), 0, 1);
    uint64_t v25 = (NSString *)objc_claimAutoreleasedReturnValue();

    if ((unint64_t)objc_msgSend_length(v25, v26, v27, v28, v29, v30) < 2)
    {
      uint64_t v37 = v25;
    }
    else
    {
      uint64_t v36 = halfWidthFullWidthTransform(v25, *(NSCharacterSet **)(*(void *)(a1 + 32) + 24), 0, 1, 1);

      uint64_t v37 = (void *)v36;
    }
    unsigned int v38 = objc_msgSend_string(v3, v31, v32, v33, v34, v35);
    char isEqualToString = objc_msgSend_isEqualToString_(v37, v39, (uint64_t)v38, v40, v41, v42);

    uint64_t v49 = v3;
    if ((isEqualToString & 1) == 0)
    {
      uint64_t v50 = objc_msgSend_strokeIndexes(v3, v44, v45, v46, v47, v48);
      uint64_t v56 = objc_msgSend_wordID(v3, v51, v52, v53, v54, v55);
      objc_msgSend_modelScore(v3, v57, v58, v59, v60, v61);
      double v283 = v62;
      objc_msgSend_recognitionScore(v3, v63, v64, v65, v66, v67);
      double v281 = v68;
      objc_msgSend_combinedScore(v3, v69, v70, v71, v72, v73);
      double v279 = v74;
      objc_msgSend_alignmentScore(v3, v75, v76, v77, v78, v79);
      double v277 = v80;
      uint64_t v86 = objc_msgSend_properties(v3, v81, v82, v83, v84, v85);
      uint64_t v92 = objc_msgSend_recognizerSourceLocale(v3, v87, v88, v89, v90, v91);
      uint64_t v98 = objc_msgSend_inputSources(v3, v93, v94, v95, v96, v97);
      uint64_t v104 = objc_msgSend_substrokeCount(v3, v99, v100, v101, v102, v103);
      objc_msgSend_bounds(v3, v105, v106, v107, v108, v109);
      double v111 = v110;
      double v113 = v112;
      double v115 = v114;
      double v117 = v116;
      objc_msgSend_originalBounds(v3, v118, v119, v120, v121, v122);
      uint64_t v129 = v128;
      uint64_t v131 = v130;
      uint64_t v133 = v132;
      uint64_t v135 = v134;
      if (v3) {
        objc_msgSend_principalLines(v3, v123, v124, v125, v126, v127);
      }
      else {
        memset(v286, 0, 128);
      }
      objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v123, (uint64_t)v37, (uint64_t)v50, v56, v86, v92, v98 | 0x800, v283, v281, v279, v277, v111, v113, v115, v117, v104, v129, v131,
        v133,
        v135,
      uint64_t v49 = v286);
    }
    id v15 = v49;

    uint64_t v140 = objc_msgSend_rangeOfCharacterFromSet_(v37, v136, *(void *)(*(void *)(a1 + 32) + 40), v137, v138, v139);
    uint64_t v141 = *(void *)(a1 + 32);
    uint64_t v14 = v15;
    if (*(unsigned char *)(v141 + 8))
    {
      uint64_t v14 = v15;
      if (v140 != 0x7FFFFFFFFFFFFFFFLL)
      {
        halfWidthFullWidthTransform((NSString *)v37, *(NSCharacterSet **)(v141 + 40), *(NSString **)(a1 + 48), 0, 0);
        uint64_t v142 = (NSString *)objc_claimAutoreleasedReturnValue();
        double v143 = halfWidthFullWidthTransform(v142, *(NSCharacterSet **)(*(void *)(a1 + 32) + 32), *(NSString **)(*(void *)(*(void *)(a1 + 80) + 8) + 40), 0, 1);

        if ((unint64_t)objc_msgSend_length(v143, v144, v145, v146, v147, v148) < 2)
        {
          uint64_t v154 = v143;
          char v159 = objc_msgSend_isEqualToString_(v143, v149, (uint64_t)v37, v150, v151, v152);
        }
        else
        {
          uint64_t v153 = halfWidthFullWidthTransform((NSString *)v143, *(NSCharacterSet **)(*(void *)(a1 + 32) + 24), 0, 1, 1);

          uint64_t v154 = v153;
          char v159 = objc_msgSend_isEqualToString_(v153, v155, (uint64_t)v37, v156, v157, v158);
        }
        uint64_t v14 = v15;
        if ((v159 & 1) == 0)
        {
          double v165 = objc_msgSend_strokeIndexes(v3, v160, v161, v162, v163, v164);
          unsigned int v284 = objc_msgSend_wordID(v3, v166, v167, v168, v169, v170);
          objc_msgSend_modelScore(v3, v171, v172, v173, v174, v175);
          double v282 = v176;
          objc_msgSend_recognitionScore(v3, v177, v178, v179, v180, v181);
          double v280 = v182;
          objc_msgSend_combinedScore(v3, v183, v184, v185, v186, v187);
          double v278 = v188;
          objc_msgSend_alignmentScore(v3, v189, v190, v191, v192, v193);
          double v276 = v194;
          uint64_t v200 = objc_msgSend_properties(v3, v195, v196, v197, v198, v199);
          uint64_t v206 = objc_msgSend_recognizerSourceLocale(v3, v201, v202, v203, v204, v205);
          uint64_t v212 = objc_msgSend_inputSources(v3, v207, v208, v209, v210, v211);
          uint64_t v218 = objc_msgSend_substrokeCount(v3, v213, v214, v215, v216, v217);
          objc_msgSend_bounds(v3, v219, v220, v221, v222, v223);
          double v225 = v224;
          double v227 = v226;
          double v229 = v228;
          double v231 = v230;
          objc_msgSend_originalBounds(v3, v232, v233, v234, v235, v236);
          uint64_t v243 = v242;
          uint64_t v245 = v244;
          uint64_t v247 = v246;
          uint64_t v249 = v248;
          if (v3) {
            objc_msgSend_principalLines(v3, v237, v238, v239, v240, v241);
          }
          else {
            memset(v285, 0, sizeof(v285));
          }
          objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v237, (uint64_t)v154, (uint64_t)v165, v284, v200, v206, v212 | 0x800, v282, v280, v278, v276, v225, v227, v229, v231, v218, v243, v245,
            v247,
            v249,
          uint64_t v14 = v285);
        }
      }
    }
  }
  if (objc_msgSend_isTopOriginal(v3, v9, v10, v11, v12, v13)) {
    objc_msgSend_addObject_(*(void **)(a1 + 56), v250, (uint64_t)v3, v251, v252, v253);
  }
  else {
    objc_msgSend_addObject_(*(void **)(a1 + 56), v250, (uint64_t)v15, v251, v252, v253);
  }
  objc_msgSend_addObject_(*(void **)(a1 + 64), v254, (uint64_t)v15, v255, v256, v257);
  objc_msgSend_addObject_(*(void **)(a1 + 72), v258, (uint64_t)v14, v259, v260, v261);
  uint64_t v267 = objc_msgSend_string(v15, v262, v263, v264, v265, v266);
  uint64_t v273 = objc_msgSend_lastComposedCharacter(v267, v268, v269, v270, v271, v272);
  uint64_t v274 = *(void *)(*(void *)(a1 + 80) + 8);
  uint64_t v275 = *(void **)(v274 + 40);
  *(void *)(v274 + 40) = v273;
}

void sub_1C4C0D95C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0DA30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0DBF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0E0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0E290(uint64_t a1, void *a2)
{
  id v20 = a2;
  uint64_t v11 = objc_msgSend_rangeOfCharacterFromSet_(v20, v3, *(void *)(*(void *)(a1 + 32) + 8), v4, v5, v6);
  if (v11 == 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend_rangeOfCharacterFromSet_(v20, v7, *(void *)(*(void *)(a1 + 32) + 16), v8, v9, v10) != 0x7FFFFFFFFFFFFFFFLL)
  {
    int v12 = 1;
  }
  else
  {
    int v12 = 0;
    if (objc_msgSend_rangeOfCharacterFromSet_(v20, v7, *(void *)(*(void *)(a1 + 32) + 24), v8, v9, v10) != 0x7FFFFFFFFFFFFFFFLL)
    {
      char v13 = 1;
      goto LABEL_7;
    }
  }
  char v13 = 0;
  if (objc_msgSend_rangeOfCharacterFromSet_(v20, v7, *(void *)(*(void *)(a1 + 32) + 40), v8, v9, v10) == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_7:
    uint64_t v15 = objc_msgSend_rangeOfCharacterFromSet_(v20, v7, *(void *)(*(void *)(a1 + 32) + 32), v8, v9, v10);
    int v16 = 0;
    BOOL v17 = v15 != 0x7FFFFFFFFFFFFFFFLL;
    if (v11 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t v19 = (void **)(a1 + 40);
LABEL_14:
    objc_msgSend_addObject_(*v19, v7, (uint64_t)v20, v8, v9, v10);
    goto LABEL_21;
  }
  int v16 = 1;
  BOOL v17 = 0;
  if (v11 != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_11;
  }
LABEL_8:
  if (!v12)
  {
    if (v13)
    {
LABEL_13:
      uint64_t v19 = (void **)(a1 + 48);
      goto LABEL_14;
    }
    if (v16)
    {
      if (!objc_msgSend_count(*(void **)(a1 + 48), v7, v14, v8, v9, v10)) {
        goto LABEL_13;
      }
    }
    else if (!v17)
    {
      goto LABEL_21;
    }
    uint64_t v18 = (void **)(a1 + 48);
    goto LABEL_20;
  }
  uint64_t v18 = (void **)(a1 + 40);
LABEL_20:
  objc_msgSend_removeLastObject(*v18, v7, v14, v8, v9, v10);
LABEL_21:
}

void sub_1C4C0E418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0E42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0E440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0E454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0E468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0E47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0E490(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v14 = v3;
  if ((objc_msgSend_properties(v3, v4, v5, v6, v7, v8) & 0x40) == 0)
  {
    double v149 = objc_msgSend_string(MEMORY[0x1E4F28E78], v9, v10, v11, v12, v13);
    uint64_t v20 = objc_msgSend_string(v3, v15, v16, v17, v18, v19);
    uint64_t v26 = objc_msgSend_string(v3, v21, v22, v23, v24, v25);
    uint64_t v32 = objc_msgSend_length(v26, v27, v28, v29, v30, v31);
    v151[0] = MEMORY[0x1E4F143A8];
    v151[1] = 3221225472;
    v151[2] = sub_1C4C0E864;
    v151[3] = &unk_1E64E50C0;
    uint64_t v33 = *(void **)(a1 + 40);
    v151[4] = *(void *)(a1 + 32);
    id v152 = v33;
    id v153 = *(id *)(a1 + 48);
    id v34 = v149;
    id v154 = v34;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_((void *)v20, v35, 0, v32, 2, (uint64_t)v151);

    uint64_t v41 = objc_msgSend_string(v3, v36, v37, v38, v39, v40);
    LOBYTE(v20) = objc_msgSend_isEqualToString_(v34, v42, (uint64_t)v41, v43, v44, v45);

    uint64_t v14 = v3;
    if ((v20 & 1) == 0)
    {
      uint64_t v51 = objc_msgSend_strokeIndexes(v3, v46, v47, v48, v49, v50);
      uint64_t v57 = objc_msgSend_wordID(v3, v52, v53, v54, v55, v56);
      objc_msgSend_modelScore(v3, v58, v59, v60, v61, v62);
      double v148 = v63;
      objc_msgSend_recognitionScore(v3, v64, v65, v66, v67, v68);
      double v147 = v69;
      objc_msgSend_combinedScore(v3, v70, v71, v72, v73, v74);
      double v146 = v75;
      objc_msgSend_alignmentScore(v3, v76, v77, v78, v79, v80);
      double v145 = v81;
      uint64_t v87 = objc_msgSend_properties(v3, v82, v83, v84, v85, v86);
      uint64_t v93 = objc_msgSend_recognizerSourceLocale(v3, v88, v89, v90, v91, v92);
      uint64_t v99 = objc_msgSend_inputSources(v3, v94, v95, v96, v97, v98);
      uint64_t v105 = objc_msgSend_substrokeCount(v3, v100, v101, v102, v103, v104);
      objc_msgSend_bounds(v3, v106, v107, v108, v109, v110);
      double v112 = v111;
      double v114 = v113;
      double v116 = v115;
      double v118 = v117;
      objc_msgSend_originalBounds(v3, v119, v120, v121, v122, v123);
      uint64_t v130 = v129;
      uint64_t v132 = v131;
      uint64_t v134 = v133;
      uint64_t v136 = v135;
      if (v3) {
        objc_msgSend_principalLines(v3, v124, v125, v126, v127, v128);
      }
      else {
        memset(v150, 0, sizeof(v150));
      }
      objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v124, (uint64_t)v34, (uint64_t)v51, v57, v87, v93, v99 | 0x800, v148, v147, v146, v145, v112, v114, v116, v118, v105, v130, v132,
        v134,
        v136,
      uint64_t v14 = v150);
    }
  }
  if (objc_msgSend_isTopOriginal(v3, v9, v10, v11, v12, v13)) {
    objc_msgSend_addObject_(*(void **)(a1 + 56), v137, (uint64_t)v3, v138, v139, v140);
  }
  else {
    objc_msgSend_addObject_(*(void **)(a1 + 56), v137, (uint64_t)v14, v138, v139, v140);
  }
  objc_msgSend_addObject_(*(void **)(a1 + 64), v141, (uint64_t)v14, v142, v143, v144);
}

void sub_1C4C0E798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0E850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0E864(uint64_t a1, void *a2)
{
  id v39 = a2;
  uint64_t v11 = objc_msgSend_rangeOfCharacterFromSet_(v39, v3, *(void *)(*(void *)(a1 + 32) + 8), v4, v5, v6);
  if (v11 == 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend_rangeOfCharacterFromSet_(v39, v7, *(void *)(*(void *)(a1 + 32) + 16), v8, v9, v10) != 0x7FFFFFFFFFFFFFFFLL)
  {
    int v12 = 1;
  }
  else
  {
    int v12 = 0;
    if (objc_msgSend_rangeOfCharacterFromSet_(v39, v7, *(void *)(*(void *)(a1 + 32) + 24), v8, v9, v10) != 0x7FFFFFFFFFFFFFFFLL)
    {
      char v13 = 1;
      goto LABEL_7;
    }
  }
  char v13 = 0;
  if (objc_msgSend_rangeOfCharacterFromSet_(v39, v7, *(void *)(*(void *)(a1 + 32) + 40), v8, v9, v10) == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_7:
    uint64_t v15 = objc_msgSend_rangeOfCharacterFromSet_(v39, v7, *(void *)(*(void *)(a1 + 32) + 32), v8, v9, v10);
    int v16 = 0;
    BOOL v17 = v15 != 0x7FFFFFFFFFFFFFFFLL;
    if (v11 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_8;
    }
LABEL_14:
    uint64_t v29 = (void **)(a1 + 40);
LABEL_17:
    uint64_t v19 = v39;
    objc_msgSend_addObject_(*v29, v7, (uint64_t)v39, v8, v9, v10);
    goto LABEL_27;
  }
  int v16 = 1;
  BOOL v17 = 0;
  if (v11 != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_14;
  }
LABEL_8:
  if (v12)
  {
    uint64_t v19 = v39;
    if (!objc_msgSend_count(*(void **)(a1 + 40), v7, v14, v8, v9, v10)) {
      goto LABEL_27;
    }
    objc_msgSend_lastObject(*(void **)(a1 + 40), v7, v18, v8, v9, v10);
    uint64_t v20 = (NSString *)objc_claimAutoreleasedReturnValue();
    unsigned int v21 = isCharacterFullWidth(v20);
    int v27 = isCharacterFullWidth((NSString *)v39) ^ 1;
    uint64_t v19 = v39;
    if (v21 == v27)
    {
      uint64_t v28 = objc_msgSend_stringByApplyingTransform_reverse_(v39, v22, *MEMORY[0x1E4F1C4C8], v27 | v21, v25, v26);

      uint64_t v19 = (void *)v28;
    }
    objc_msgSend_removeLastObject(*(void **)(a1 + 40), v22, v23, v24, v25, v26);
    goto LABEL_26;
  }
  if (v13) {
    goto LABEL_16;
  }
  if (v16)
  {
    if (!objc_msgSend_count(*(void **)(a1 + 48), v7, v14, v8, v9, v10))
    {
LABEL_16:
      uint64_t v29 = (void **)(a1 + 48);
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v19 = v39;
    if (!v17) {
      goto LABEL_27;
    }
  }
  uint64_t v19 = v39;
  if (!objc_msgSend_count(*(void **)(a1 + 48), v7, v14, v8, v9, v10)) {
    goto LABEL_27;
  }
  objc_msgSend_lastObject(*(void **)(a1 + 48), v7, v30, v8, v9, v10);
  uint64_t v20 = (NSString *)objc_claimAutoreleasedReturnValue();
  unsigned int v31 = isCharacterFullWidth(v20);
  int v37 = isCharacterFullWidth((NSString *)v39) ^ 1;
  uint64_t v19 = v39;
  if (v31 == v37)
  {
    uint64_t v38 = objc_msgSend_stringByApplyingTransform_reverse_(v39, v32, *MEMORY[0x1E4F1C4C8], v37 | v31, v35, v36);

    uint64_t v19 = (void *)v38;
  }
  objc_msgSend_removeLastObject(*(void **)(a1 + 48), v32, v33, v34, v35, v36);
LABEL_26:

LABEL_27:
  objc_msgSend_appendString_(*(void **)(a1 + 56), v7, (uint64_t)v19, v8, v9, v10);
}

void sub_1C4C0EB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0EB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0EB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0ECB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0ECCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (a1)
  {
    uint64_t v28 = v3;
    char v9 = objc_msgSend_properties(v3, (const char *)v3, v4, v5, v6, v7);
    uint64_t v8 = v28;
    if ((v9 & 0x10) == 0)
    {
      uint64_t v14 = *(void **)(a1 + 16);
      uint64_t v15 = objc_msgSend_string(v28, (const char *)v28, v10, v11, v12, v13);
      LODWORD(v14) = objc_msgSend_isInappropriateString_(v14, v16, (uint64_t)v15, v17, v18, v19);

      uint64_t v8 = v28;
      if (v14)
      {
        uint64_t v24 = objc_msgSend_properties(v28, (const char *)v28, v20, v21, v22, v23);
        objc_msgSend_setProperties_(v28, (const char *)v28, v24 | 0x10, v25, v26, v27);
        uint64_t v8 = v28;
      }
    }
  }
}

void sub_1C4C0ED78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0ED90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0EDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0F59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4C0F804(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1C4C0F814(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v6 = a2;
  uint64_t v7 = *a4;
  uint64_t v8 = a4[2];
  if ((objc_msgSend_properties(v6, v9, v10, v11, v12, v13) & 0x20) != 0 && v7 != -v8) {
    ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) >= *(void *)(*(void *)(*(void *)(a1 + 72) + 8)
                                                                                + 56)
                                                                    + *(void *)(*(void *)(*(void *)(a1 + 72) + 8)
                                                                                + 48))
  {
    unint64_t v19 = ++*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
    if (v19 < objc_msgSend_count(*(void **)(a1 + 32), v14, v15, v16, v17, v18))
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40))
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v20 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t v70 = 0;
          _os_log_impl(&dword_1C492D000, v20, OS_LOG_TYPE_FAULT, "growingToken should not be nil", v70, 2u);
        }
      }
      uint64_t v21 = objc_msgSend_objectAtIndex_(*(void **)(a1 + 32), v14, *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), v16, v17, v18);
      uint64_t v27 = objc_msgSend_rangeValue(v21, v22, v23, v24, v25, v26);
      uint64_t v28 = *(void *)(*(void *)(a1 + 72) + 8);
      *(void *)(v28 + 4_Block_object_dispose(&STACK[0x320], 8) = v27;
      *(void *)(v28 + 56) = v29;

      uint64_t v34 = objc_msgSend_objectAtIndex_(*(void **)(a1 + 40), v30, *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), v31, v32, v33);
      uint64_t v35 = *(void *)(*(void *)(a1 + 96) + 8);
      uint64_t v36 = *(void **)(v35 + 40);
      *(void *)(v35 + 40) = v34;

      sub_1C4C0ECCC(*(void *)(a1 + 48), *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40));
      objc_msgSend_addObject_(*(void **)(a1 + 56), v37, *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v38, v39, v40);
      uint64_t v41 = *(void *)(*(void *)(a1 + 88) + 8);
      uint64_t v42 = *(void **)(v41 + 40);
      *(void *)(v41 + 40) = 0;
    }
  }
  uint64_t v43 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
  if (v43)
  {
    sub_1C4964D50(v43, v6);
    uint64_t v49 = *(void *)(*(void *)(a1 + 104) + 8);
    uint64_t v50 = *a4 - *(void *)(v49 + 48) + 1;
  }
  else
  {
    uint64_t v51 = objc_msgSend_mutableCopy(v6, v14, v15, v16, v17, v18);
    uint64_t v52 = *(void *)(*(void *)(a1 + 88) + 8);
    uint64_t v53 = *(void **)(v52 + 40);
    *(void *)(v52 + 40) = v51;

    uint64_t v59 = objc_msgSend_intValue(*(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40), v54, v55, v56, v57, v58);
    objc_msgSend_setWordID_(*(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v60, v59, v61, v62, v63);
    *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 4_Block_object_dispose(&STACK[0x320], 8) = *a4;
    uint64_t v49 = *(void *)(*(void *)(a1 + 104) + 8);
    uint64_t v50 = 1;
  }
  *(void *)(v49 + 56) = v50;
  uint64_t v64 = objc_msgSend_string(v6, v44, v45, v46, v47, v48);
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) += objc_msgSend_length(v64, v65, v66, v67, v68, v69);
}

void sub_1C4C0FAB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0FAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0FAD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0FAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0FAFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v10 = objc_msgSend_string(v3, v5, v6, v7, v8, v9);
  uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v4, v11, (uint64_t)v10, v12, v13, v14);

  if (v15) {
    uint64_t v21 = objc_msgSend_unsignedIntValue(v15, v16, v17, v18, v19, v20);
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = [CHTokenizedTextResultToken alloc];
  uint64_t v28 = objc_msgSend_string(v3, v23, v24, v25, v26, v27);
  uint64_t v34 = objc_msgSend_strokeIndexes(v3, v29, v30, v31, v32, v33);
  uint64_t v122 = a1;
  objc_msgSend_recognitionScore(v3, v35, v36, v37, v38, v39);
  double v123 = v40;
  objc_msgSend_recognitionScore(v3, v41, v42, v43, v44, v45);
  double v121 = v46;
  objc_msgSend_combinedScore(v3, v47, v48, v49, v50, v51);
  double v120 = v52;
  objc_msgSend_alignmentScore(v3, v53, v54, v55, v56, v57);
  double v119 = v58;
  uint64_t v64 = objc_msgSend_properties(v3, v59, v60, v61, v62, v63);
  uint64_t v70 = objc_msgSend_recognizerSourceLocale(v3, v65, v66, v67, v68, v69);
  uint64_t v76 = objc_msgSend_inputSources(v3, v71, v72, v73, v74, v75);
  uint64_t v82 = objc_msgSend_substrokeCount(v3, v77, v78, v79, v80, v81);
  objc_msgSend_bounds(v3, v83, v84, v85, v86, v87);
  double v89 = v88;
  double v91 = v90;
  double v93 = v92;
  double v95 = v94;
  objc_msgSend_originalBounds(v3, v96, v97, v98, v99, v100);
  uint64_t v107 = v106;
  uint64_t v109 = v108;
  uint64_t v111 = v110;
  uint64_t v113 = v112;
  if (v3) {
    objc_msgSend_principalLines(v3, v101, v102, v103, v104, v105);
  }
  else {
    memset(v124, 0, 128);
  }
  double v114 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v22, v101, (uint64_t)v28, (uint64_t)v34, v21, v64, v70, v76, v123, v121, v120, v119, v89, v91, v93, v95, v82, v107, v109,
                   v111,
                   v113,
                   v124);

  objc_msgSend_addObject_(*(void **)(v122 + 40), v115, (uint64_t)v114, v116, v117, v118);
}

void sub_1C4C0FD18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0FD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0FD44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0FD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0FD70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0FD80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0FD94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0FDB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C0FE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHSemanticTokenizerStep;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4C10208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C10340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C10354(uint64_t a1, void *a2)
{
  id v23 = a2;
  uint64_t v8 = objc_msgSend_ch_neutralQuotationMarkSet(MEMORY[0x1E4F28B88], v3, v4, v5, v6, v7);
  uint64_t v13 = objc_msgSend_characterAtIndex_(v23, v9, 0, v10, v11, v12);
  int IsMember = objc_msgSend_characterIsMember_(v8, v14, v13, v15, v16, v17);

  if (IsMember) {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v19, (uint64_t)v23, v20, v21, v22);
  }
}

void sub_1C4C103E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C103F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C10410(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  if (objc_msgSend_shouldInsertSpaceBetweenPreviousChar_andNextChar_inLocale_inString_atRange_withQuoteCount_(CHRecognizerConfiguration, v8, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), (uint64_t)v7, *(void *)(*(void *)(a1 + 32) + 8), *(void *)(a1 + 40), a3, a4, *(void *)(a1 + 48)))
  {
    if (!a3)
    {
      *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) |= 0x20uLL;
      if (!*(unsigned char *)(a1 + 80)) {
        goto LABEL_7;
      }
      goto LABEL_5;
    }
    objc_msgSend_appendString_(*(void **)(a1 + 56), v9, @" ", v11, v12, v13);
  }
  if (!*(unsigned char *)(a1 + 80)) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v14 = objc_msgSend_ch_neutralQuotationMarkSet(MEMORY[0x1E4F28B88], v9, v10, v11, v12, v13);
  uint64_t v19 = objc_msgSend_characterAtIndex_(v7, v15, 0, v16, v17, v18);
  int IsMember = objc_msgSend_characterIsMember_(v14, v20, v19, v21, v22, v23);

  if (IsMember) {
    objc_msgSend_addObject_(*(void **)(a1 + 48), v9, (uint64_t)v7, v11, v12, v13);
  }
LABEL_7:
  objc_msgSend_appendString_(*(void **)(a1 + 56), v9, (uint64_t)v7, v11, v12, v13);
  uint64_t v25 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v26 = *(void **)(v25 + 40);
  *(void *)(v25 + 40) = v7;
}

void sub_1C4C1053C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C10550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C10B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1C4C10D10(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
  uint64_t v12 = objc_msgSend_result(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  uint64_t v17 = objc_msgSend_precedingSeparatorForToken_(v12, v13, (uint64_t)v5, v14, v15, v16);

  double v225 = v17;
  if (a3 >= 1) {
    v6 += objc_msgSend_length(v17, v18, v19, v20, v21, v22);
  }
  uint64_t v23 = objc_msgSend_substringFromIndex_(*(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40), v18, v6, v20, v21, v22);
  uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8);
  uint64_t v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 40) = v23;

  uint64_t v26 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
  uint64_t v27 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
  uint64_t v29 = *(void *)(a1 + 40);
  uint64_t v28 = *(void **)(a1 + 48);
  id v228 = v5;
  id v30 = v26;
  id v227 = v27;
  id v226 = v28;
  double v224 = v30;
  if (v29)
  {
    uint64_t v241 = 0;
    uint64_t v242 = &v241;
    uint64_t v243 = 0x3032000000;
    uint64_t v244 = sub_1C4C089AC;
    uint64_t v245 = sub_1C4C089BC;
    objc_msgSend_lastComposedCharacter(v30, v31, v32, v33, v34, v35);
    id v246 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v237 = 0;
    uint64_t v238 = &v237;
    uint64_t v239 = 0x2020000000;
    uint64_t v240 = 0;
    uint64_t v240 = objc_msgSend_properties(v228, v36, v37, v38, v39, v40);
    uint64_t v41 = v242[5];
    uint64_t v47 = objc_msgSend_string(v228, v42, v43, v44, v45, v46);
    uint64_t v53 = objc_msgSend_firstComposedCharacter(v47, v48, v49, v50, v51, v52);
    int v56 = objc_msgSend_shouldRemoveSpaceBetweenPreviousChar_andNextChar_inLocale_(CHRecognizerConfiguration, v54, v41, (uint64_t)v53, *(void *)(v29 + 8), v55);

    if (v56) {
      v238[3] &= ~0x20uLL;
    }
    char shouldAddSpaceToNeutralQuotationMarks = objc_msgSend_shouldAddSpaceToNeutralQuotationMarks_(CHRecognizerConfiguration, v57, *(void *)(v29 + 8), v58, v59, v60);
    uint64_t v219 = objc_msgSend_string(MEMORY[0x1E4F28E78], v62, v63, v64, v65, v66);
    uint64_t v72 = objc_msgSend_string(v228, v67, v68, v69, v70, v71);
    uint64_t v78 = objc_msgSend_string(v228, v73, v74, v75, v76, v77);
    uint64_t v84 = objc_msgSend_length(v78, v79, v80, v81, v82, v83);
    v230[0] = MEMORY[0x1E4F143A8];
    v230[1] = 3221225472;
    v230[2] = sub_1C4C10410;
    v230[3] = &unk_1E64E5110;
    uint64_t v234 = &v241;
    v230[4] = v29;
    id v231 = v227;
    id v232 = v226;
    uint64_t v235 = &v237;
    id v85 = v219;
    id v233 = v85;
    char v236 = shouldAddSpaceToNeutralQuotationMarks;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v72, v86, 0, v84, 2, (uint64_t)v230);

    id v87 = v228;
    double v93 = objc_msgSend_string(v87, v88, v89, v90, v91, v92);
    if (objc_msgSend_isEqualToString_(v85, v94, (uint64_t)v93, v95, v96, v97))
    {
      uint64_t v103 = v238[3];
      uint64_t v104 = objc_msgSend_properties(v87, v98, v99, v100, v101, v102);

      if (v103 == v104)
      {
LABEL_14:

        _Block_object_dispose(&v237, 8);
        _Block_object_dispose(&v241, 8);

        goto LABEL_15;
      }
    }
    else
    {
    }
    uint64_t v110 = objc_msgSend_strokeIndexes(v87, v105, v106, v107, v108, v109);
    uint64_t v116 = objc_msgSend_wordID(v87, v111, v112, v113, v114, v115);
    objc_msgSend_modelScore(v87, v117, v118, v119, v120, v121);
    double v223 = v122;
    objc_msgSend_recognitionScore(v87, v123, v124, v125, v126, v127);
    double v222 = v128;
    objc_msgSend_combinedScore(v87, v129, v130, v131, v132, v133);
    double v221 = v134;
    objc_msgSend_alignmentScore(v87, v135, v136, v137, v138, v139);
    double v220 = v140;
    uint64_t v141 = v238[3];
    double v147 = objc_msgSend_recognizerSourceLocale(v87, v142, v143, v144, v145, v146);
    uint64_t v153 = objc_msgSend_inputSources(v87, v148, v149, v150, v151, v152);
    uint64_t v159 = objc_msgSend_substrokeCount(v87, v154, v155, v156, v157, v158);
    objc_msgSend_bounds(v87, v160, v161, v162, v163, v164);
    double v166 = v165;
    double v168 = v167;
    double v170 = v169;
    double v172 = v171;
    objc_msgSend_originalBounds(v87, v173, v174, v175, v176, v177);
    uint64_t v184 = v183;
    uint64_t v186 = v185;
    uint64_t v188 = v187;
    uint64_t v190 = v189;
    if (v87) {
      objc_msgSend_principalLines(v87, v178, v179, v180, v181, v182);
    }
    else {
      memset(v229, 0, sizeof(v229));
    }
    objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v178, (uint64_t)v85, (uint64_t)v110, v116, v141, v147, v153 | 0x200, v223, v222, v221, v220, v166, v168, v170, v172, v159, v184, v186,
      v188,
      v190,
    uint64_t v191 = v229);

    id v87 = (id)v191;
    goto LABEL_14;
  }
  id v87 = 0;
LABEL_15:

  objc_msgSend_addObject_(*(void **)(a1 + 56), v192, (uint64_t)v87, v193, v194, v195);
  objc_msgSend_addObject_(*(void **)(a1 + 64), v196, (uint64_t)v87, v197, v198, v199);
  uint64_t v205 = objc_msgSend_string(v87, v200, v201, v202, v203, v204);
  uint64_t v206 = *(void *)(*(void *)(a1 + 88) + 8);
  uint64_t v207 = *(void **)(v206 + 40);
  *(void *)(v206 + 40) = v205;

  uint64_t v213 = objc_msgSend_string(v228, v208, v209, v210, v211, v212);
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = objc_msgSend_length(v213, v214, v215, v216, v217, v218);
}

void sub_1C4C11278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,id a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  _Unwind_Resume(a1);
}

void sub_1C4C11388()
{
  JUMPOUT(0x1C4C1139CLL);
}

void sub_1C4C11840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C1191C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4C119A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C12918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C12CF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4C12DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C136F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  _Unwind_Resume(a1);
}

void sub_1C4C14044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4C141F8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 4_Block_object_dispose(&STACK[0x320], 8) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1C4C14208(uint64_t a1, void *a2)
{
  id v238 = a2;
  objc_msgSend_addObject_(*(void **)(a1 + 32), v3, (uint64_t)v238, v4, v5, v6);
  if (*(void *)(a1 + 80)) {
    goto LABEL_10;
  }
  uint64_t v12 = objc_msgSend_string(v238, v7, v8, v9, v10, v11);
  if (objc_msgSend_hasPrefix_(v12, v13, @"#", v14, v15, v16))
  {

LABEL_5:
    uint64_t v33 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    if (v33)
    {
      id v39 = v33;
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
      {
        uint64_t v40 = objc_msgSend_string(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v34, v35, v36, v37, v38);
        uint64_t v44 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v40, v41, @" ", (uint64_t)&stru_1F20141C8, v42, v43);

        uint64_t v45 = [CHTokenizedTextResultToken alloc];
        uint64_t v51 = objc_msgSend_strokeIndexes(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v46, v47, v48, v49, v50);
        objc_msgSend_modelScore(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v52, v53, v54, v55, v56);
        double v58 = v57;
        objc_msgSend_recognitionScore(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v59, v60, v61, v62, v63);
        double v65 = v64;
        objc_msgSend_combinedScore(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v66, v67, v68, v69, v70);
        double v72 = v71;
        objc_msgSend_alignmentScore(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v73, v74, v75, v76, v77);
        double v79 = v78;
        uint64_t v85 = objc_msgSend_properties(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v80, v81, v82, v83, v84);
        uint64_t v91 = objc_msgSend_recognizerSourceLocale(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v86, v87, v88, v89, v90);
        uint64_t v97 = objc_msgSend_inputSources(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v92, v93, v94, v95, v96);
        uint64_t v103 = objc_msgSend_substrokeCount(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v98, v99, v100, v101, v102);
        objc_msgSend_bounds(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v104, v105, v106, v107, v108);
        uint64_t v114 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_(v45, v109, (uint64_t)v44, (uint64_t)v51, 0, v85, v91, v97 | 0x200, v58, v65, v72, v79, v110, v111, v112, v113, v103);

        id v39 = (id)v114;
      }
      objc_msgSend_addObject_(*(void **)(a1 + 40), v34, (uint64_t)v39, v36, v37, v38);
    }
    uint64_t v115 = objc_msgSend_mutableCopy(v238, v22, v23, v24, v25, v26);
    uint64_t v116 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v117 = *(void **)(v116 + 40);
    *(void *)(v116 + 40) = v115;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    objc_msgSend_alignmentScore(v238, v118, v119, v120, v121, v122);
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v123;
    objc_msgSend_bounds(v238, v124, v125, v126, v127, v128);
    uint64_t v129 = *(void **)(*(void *)(a1 + 72) + 8);
    v129[6] = v130;
    v129[7] = v131;
    v129[8] = v132;
    v129[9] = v133;
    goto LABEL_10;
  }
  uint64_t v27 = objc_msgSend_string(v238, v17, v18, v19, v20, v21);
  hasPrefiCGFloat x = objc_msgSend_hasPrefix_(v27, v28, @"@", v29, v30, v31);

  if (hasPrefix) {
    goto LABEL_5;
  }
  double v134 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v134)
  {
    if (*(double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) >= 0.98) {
      goto LABEL_19;
    }
    objc_msgSend_bounds(v238, v22, (uint64_t)v238, v24, v25, v26);
    CGFloat x = v240.origin.x;
    CGFloat y = v240.origin.y;
    CGFloat width = v240.size.width;
    double height = v240.size.height;
    double MinX = CGRectGetMinX(v240);
    double v140 = MinX - CGRectGetMaxX(*(CGRect *)(*(void *)(*(void *)(a1 + 72) + 8) + 48));
    uint64_t v141 = *(CGFloat **)(*(void *)(a1 + 72) + 8);
    double v142 = v141[9];
    if (v142 <= height) {
      double v142 = height;
    }
    v141[6] = x;
    v141[7] = y;
    v141[8] = width;
    v141[9] = height;
    double v134 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    if (v140 / (v142 + 0.000001) >= 0.4)
    {
LABEL_19:
      id v154 = v134;
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
      {
        uint64_t v155 = objc_msgSend_string(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v149, v150, v151, v152, v153);
        uint64_t v159 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v155, v156, @" ", (uint64_t)&stru_1F20141C8, v157, v158);

        double v160 = [CHTokenizedTextResultToken alloc];
        double v166 = objc_msgSend_strokeIndexes(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v161, v162, v163, v164, v165);
        objc_msgSend_modelScore(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v167, v168, v169, v170, v171);
        double v173 = v172;
        objc_msgSend_recognitionScore(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v174, v175, v176, v177, v178);
        double v180 = v179;
        objc_msgSend_combinedScore(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v181, v182, v183, v184, v185);
        double v187 = v186;
        objc_msgSend_alignmentScore(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v188, v189, v190, v191, v192);
        double v194 = v193;
        uint64_t v200 = objc_msgSend_properties(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v195, v196, v197, v198, v199);
        uint64_t v206 = objc_msgSend_recognizerSourceLocale(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v201, v202, v203, v204, v205);
        uint64_t v212 = objc_msgSend_inputSources(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v207, v208, v209, v210, v211);
        uint64_t v218 = objc_msgSend_substrokeCount(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v213, v214, v215, v216, v217);
        objc_msgSend_bounds(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v219, v220, v221, v222, v223);
        uint64_t v229 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_(v160, v224, (uint64_t)v159, (uint64_t)v166, 0, v200, v206, v212 | 0x200, v173, v180, v187, v194, v225, v226, v227, v228, v218);

        id v154 = (id)v229;
      }
      objc_msgSend_addObject_(*(void **)(a1 + 40), v149, (uint64_t)v154, v151, v152, v153);
      uint64_t v230 = *(void *)(*(void *)(a1 + 48) + 8);
      id v231 = *(void **)(v230 + 40);
      *(void *)(v230 + 40) = 0;

      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0x43E0000000000000;
      uint64_t v232 = *(void *)(*(void *)(a1 + 72) + 8);
      long long v233 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(v232 + 4_Block_object_dispose(&STACK[0x320], 8) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(v232 + 64) = v233;
      objc_msgSend_addObject_(*(void **)(a1 + 40), v234, (uint64_t)v238, v235, v236, v237);
    }
    else
    {
      sub_1C4964D50((uint64_t)v134, v238);
      objc_msgSend_alignmentScore(v238, v143, v144, v145, v146, v147);
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v148;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    }
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v22, (uint64_t)v238, v24, v25, v26);
  }
LABEL_10:
}

void sub_1C4C147CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C14868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C14884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1489C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C148BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C148D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C148DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C14914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C149A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C14E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1C4C14F84(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_addObject_(*(void **)(a1 + 32), v4, (uint64_t)v3, v5, v6, v7);
  if (*(void *)(a1 + 72)) {
    goto LABEL_22;
  }
  uint64_t v174 = 0;
  uint64_t v175 = &v174;
  uint64_t v176 = 0x2020000000;
  char v177 = 1;
  uint64_t v13 = objc_msgSend_string(v3, v8, v9, v10, v11, v12);
  uint64_t v19 = objc_msgSend_string(v3, v14, v15, v16, v17, v18);
  uint64_t v25 = objc_msgSend_length(v19, v20, v21, v22, v23, v24);
  v173[0] = MEMORY[0x1E4F143A8];
  v173[1] = 3221225472;
  v173[2] = sub_1C4C154DC;
  v173[3] = &unk_1E64E2B28;
  v173[4] = &v174;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v13, v26, 0, v25, 2, (uint64_t)v173);

  uint64_t v32 = objc_msgSend_string(v3, v27, v28, v29, v30, v31);
  if (objc_msgSend_length(v32, v33, v34, v35, v36, v37) == 1)
  {
    uint64_t v43 = *(void **)(*(void *)(a1 + 40) + 8);
    uint64_t v44 = objc_msgSend_string(v3, v38, v39, v40, v41, v42);
    uint64_t v49 = objc_msgSend_characterAtIndex_(v44, v45, 0, v46, v47, v48);
    int IsMember = objc_msgSend_characterIsMember_(v43, v50, v49, v51, v52, v53);

    uint64_t v59 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    if (!v59) {
      goto LABEL_8;
    }
LABEL_6:
    if ((IsMember & 1) == 0)
    {
      objc_msgSend_addObject_(*(void **)(a1 + 48), v55, v59, v56, v57, v58);
      uint64_t v60 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v61 = *(void **)(v60 + 40);
      *(void *)(v60 + 40) = 0;

      uint64_t v62 = *(void *)(*(void *)(a1 + 64) + 8);
      long long v63 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(v62 + 4_Block_object_dispose(&STACK[0x320], 8) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(v62 + 64) = v63;
    }
    goto LABEL_8;
  }
  int IsMember = 0;

  uint64_t v59 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v59) {
    goto LABEL_6;
  }
LABEL_8:
  if (*((unsigned char *)v175 + 24))
  {
    uint64_t v64 = objc_msgSend_mutableCopy(v3, v55, v59, v56, v57, v58);
    uint64_t v65 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v66 = *(void **)(v65 + 40);
    *(void *)(v65 + 40) = v64;

    objc_msgSend_bounds(v3, v67, v68, v69, v70, v71);
    double v72 = *(void **)(*(void *)(a1 + 64) + 8);
    v72[6] = v73;
    v72[7] = v74;
    v72[8] = v75;
    v72[9] = v76;
  }
  else
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) {
      int v77 = IsMember;
    }
    else {
      int v77 = 0;
    }
    if (v77 == 1)
    {
      objc_msgSend_bounds(v3, v55, v59, v56, v57, v58);
      CGFloat x = v178.origin.x;
      CGFloat y = v178.origin.y;
      CGFloat width = v178.size.width;
      double height = v178.size.height;
      double MinX = CGRectGetMinX(v178);
      double MaxX = CGRectGetMaxX(*(CGRect *)(*(void *)(*(void *)(a1 + 64) + 8) + 48));
      uint64_t v84 = *(CGFloat **)(*(void *)(a1 + 64) + 8);
      double v85 = v84[9];
      v84[6] = x;
      v84[7] = y;
      v84[8] = width;
      v84[9] = height;
      sub_1C4964D50(*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v3);
      if (v85 <= height) {
        double v86 = height;
      }
      else {
        double v86 = v85;
      }
      double v87 = (MinX - MaxX) / (v86 + 0.000001);
      id v93 = *(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      if (v87 < 0.4)
      {
        uint64_t v94 = objc_msgSend_string(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v88, v89, v90, v91, v92);
        uint64_t v98 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v94, v95, @" ", (uint64_t)&stru_1F20141C8, v96, v97);

        uint64_t v99 = [CHTokenizedTextResultToken alloc];
        uint64_t v105 = objc_msgSend_strokeIndexes(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v100, v101, v102, v103, v104);
        objc_msgSend_modelScore(v3, v106, v107, v108, v109, v110);
        double v112 = v111;
        objc_msgSend_recognitionScore(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v113, v114, v115, v116, v117);
        double v119 = v118;
        objc_msgSend_combinedScore(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v120, v121, v122, v123, v124);
        double v126 = v125;
        objc_msgSend_alignmentScore(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v127, v128, v129, v130, v131);
        double v133 = v132;
        uint64_t v139 = objc_msgSend_properties(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v134, v135, v136, v137, v138);
        uint64_t v145 = objc_msgSend_recognizerSourceLocale(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v140, v141, v142, v143, v144);
        uint64_t v151 = objc_msgSend_inputSources(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v146, v147, v148, v149, v150);
        uint64_t v157 = objc_msgSend_substrokeCount(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v152, v153, v154, v155, v156);
        objc_msgSend_bounds(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v158, v159, v160, v161, v162);
        uint64_t v168 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_(v99, v163, (uint64_t)v98, (uint64_t)v105, 0, v139, v145, v151 | 0x200, v112, v119, v126, v133, v164, v165, v166, v167, v157);

        id v93 = (id)v168;
      }
      objc_msgSend_addObject_(*(void **)(a1 + 48), v88, (uint64_t)v93, v90, v91, v92);
      uint64_t v169 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v170 = *(void **)(v169 + 40);
      *(void *)(v169 + 40) = 0;

      uint64_t v171 = *(void *)(*(void *)(a1 + 64) + 8);
      long long v172 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(v171 + 4_Block_object_dispose(&STACK[0x320], 8) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(v171 + 64) = v172;
    }
    else
    {
      objc_msgSend_addObject_(*(void **)(a1 + 48), v55, (uint64_t)v3, v56, v57, v58);
    }
  }
  _Block_object_dispose(&v174, 8);
LABEL_22:
}

void sub_1C4C15438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4C154CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4C154DC(uint64_t a1, NSString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  BOOL result = isCharacterLatinOrCommonScript(a2);
  if (!result)
  {
    *a7 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return result;
}

void sub_1C4C15604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C15A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4C15BB8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v11 = a2;
  if (!*(void *)(a4 + 16) && objc_msgSend_count(*(void **)(a1 + 32), v6, v7, v8, v9, v10))
  {
    sub_1C4C045E8((uint64_t)CHPostprocessingStep, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
    objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
    objc_msgSend_removeAllObjects(*(void **)(a1 + 40), v17, v18, v19, v20, v21);
  }
  uint64_t v22 = *(void *)(a1 + 64);
  objc_msgSend_string(v11, v6, v7, v8, v9, v10);
  id v23 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v24 = v23;
  if (v22)
  {
    id v25 = v23;
    uint64_t v29 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v25, v26, @"．．．", @"…", v27, v28);

    uint64_t v33 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v29, v30, @"、、", @"〟", v31, v32);

    uint64_t v37 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v33, v34, @"<<", @"《", v35, v36);

    uint64_t v41 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v37, v38, @">>", @"》", v39, v40);

    uint64_t v45 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v41, v42, @"＜＜", @"《", v43, v44);

    uint64_t v49 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v45, v46, @"＞＞", @"》", v47, v48);
  }
  else
  {
    uint64_t v49 = 0;
  }

  if (*(unsigned char *)(*(void *)(a1 + 64) + 8))
  {
    uint64_t v50 = objc_opt_class();
    uint64_t v54 = objc_msgSend_transliterateStringUsingICUTransliterator__icuTransliterator_(v50, v51, (uint64_t)v49, *(void *)(*(void *)(a1 + 64) + 16), v52, v53);

    uint64_t v49 = (void *)v54;
  }
  id v55 = v11;
  int isTopOriginal = objc_msgSend_isTopOriginal(v55, v56, v57, v58, v59, v60);
  uint64_t v67 = objc_msgSend_string(v55, v62, v63, v64, v65, v66);
  char isEqualToString = objc_msgSend_isEqualToString_(v49, v68, (uint64_t)v67, v69, v70, v71);

  int v77 = v55;
  if ((isEqualToString & 1) == 0)
  {
    double v78 = [CHTokenizedTextResultToken alloc];
    uint64_t v84 = objc_msgSend_strokeIndexes(v55, v79, v80, v81, v82, v83);
    double v85 = v78;
    unsigned int v179 = objc_msgSend_wordID(v55, v86, v87, v88, v89, v90);
    objc_msgSend_modelScore(v55, v91, v92, v93, v94, v95);
    double v178 = v96;
    objc_msgSend_recognitionScore(v55, v97, v98, v99, v100, v101);
    double v177 = v102;
    objc_msgSend_combinedScore(v55, v103, v104, v105, v106, v107);
    double v176 = v108;
    objc_msgSend_alignmentScore(v55, v109, v110, v111, v112, v113);
    double v175 = v114;
    uint64_t v120 = objc_msgSend_properties(v55, v115, v116, v117, v118, v119);
    double v126 = objc_msgSend_recognizerSourceLocale(v55, v121, v122, v123, v124, v125);
    uint64_t v132 = objc_msgSend_inputSources(v55, v127, v128, v129, v130, v131);
    uint64_t v138 = objc_msgSend_substrokeCount(v55, v133, v134, v135, v136, v137);
    objc_msgSend_bounds(v55, v139, v140, v141, v142, v143);
    double v145 = v144;
    double v147 = v146;
    double v149 = v148;
    double v151 = v150;
    objc_msgSend_originalBounds(v55, v152, v153, v154, v155, v156);
    uint64_t v163 = v162;
    uint64_t v165 = v164;
    uint64_t v167 = v166;
    uint64_t v169 = v168;
    if (v55) {
      objc_msgSend_principalLines(v55, v157, v158, v159, v160, v161);
    }
    else {
      memset(v180, 0, 128);
    }
    int v77 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v85, v157, (uint64_t)v49, (uint64_t)v84, v179, v120, v126, v132 | 8, v178, v177, v176, v175, v145, v147, v149, v151, v138, v163, v165,
                    v167,
                    v169,
                    v180);
  }
  objc_msgSend_addObject_(*(void **)(a1 + 32), v73, (uint64_t)v77, v74, v75, v76);
  uint64_t v174 = *(void **)(a1 + 40);
  if (isTopOriginal) {
    objc_msgSend_addObject_(v174, v170, (uint64_t)v55, v171, v172, v173);
  }
  else {
    objc_msgSend_addObject_(v174, v170, (uint64_t)v77, v171, v172, v173);
  }
}

void sub_1C4C15F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4C16004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4C16080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHTransliterateChineseJapaneseStep;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4C16148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C16158(void *a1, void *a2)
{
  id v29 = a2;
  uint64_t v8 = objc_msgSend_string(v29, v3, v4, v5, v6, v7);
  unsigned int isNaturallyRTL = objc_msgSend__isNaturallyRTL(v8, v9, v10, v11, v12, v13);

  uint64_t v20 = objc_msgSend_strokeIndexes(v29, v15, v16, v17, v18, v19);
  IndeCGFloat x = objc_msgSend_firstIndex(v20, v21, v22, v23, v24, v25);

  *(void *)(*(void *)(a1[5] + 8) + 24) = isNaturallyRTL;
  uint64_t v27 = *(void *)(*(void *)(a1[6] + 8) + 24);
  if (isNaturallyRTL)
  {
    if (v27) {
      goto LABEL_7;
    }
  }
  else if (v27 != 1)
  {
    goto LABEL_7;
  }
  uint64_t v28 = a1[4];
  if (v28) {
    *(void *)(v28 + 16) = Index >= *(void *)(*(void *)(a1[7] + 8) + 24);
  }
LABEL_7:
  *(void *)(*(void *)(a1[7] + 8) + 24) = Index;
  *(void *)(*(void *)(a1[6] + 8) + 24) = isNaturallyRTL;
}

void sub_1C4C16250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C16268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1627C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C16294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C162A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"0123456789%", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C8F88;
  qword_1EA3C8F88 = v6;
}

void sub_1C4C1780C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,void *a28,uint64_t a29,void *a30,uint64_t a31,void *a32,uint64_t a33,void *a34,void *a35,uint64_t a36,void *a37,void *a38,void *a39,void *a40,uint64_t a41,uint64_t a42,void *a43,void *a44,void *a45,void *a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&STACK[0x250], 8);
  _Unwind_Resume(a1);
}

void sub_1C4C17DB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = objc_msgSend_string(v3, v4, v5, v6, v7, v8);
  int v14 = objc_msgSend_containsString_(v9, v10, @"%", v11, v12, v13);

  if (v14)
  {
    uint64_t v242 = [CHTokenizedTextResultToken alloc];
    uint64_t v19 = *(void **)(a1 + 32);
    uint64_t v25 = objc_msgSend_string(v3, v20, v21, v22, v23, v24);
    uint64_t v26 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    id v32 = v25;
    if (v19)
    {
      uint64_t v19 = objc_msgSend_string(MEMORY[0x1E4F28E78], v27, v28, v29, v30, v31);
      if (qword_1EA3C8F90 != -1) {
        dispatch_once(&qword_1EA3C8F90, &unk_1F2013C88);
      }
      if (objc_msgSend_length(v32, v33, v34, v35, v36, v37))
      {
        unsigned int v42 = objc_msgSend_characterAtIndex_(v32, v38, 0, v39, v40, v41);
        if (v42 == 37)
        {
          if (objc_msgSend_length(v32, v43, v44, v45, v46, v47) == 1) {
            uint64_t v52 = 32;
          }
          else {
            uint64_t v52 = objc_msgSend_characterAtIndex_(v32, v48, 1, v49, v50, v51);
          }
          if ((objc_msgSend_characterIsMember_((void *)qword_1EA3C8F88, v48, v26, v49, v50, v51) & 1) != 0
            || (objc_msgSend_characterIsMember_((void *)qword_1EA3C8F88, v91, v52, v92, v93, v94) & 1) != 0)
          {
            objc_msgSend_appendFormat_(v19, v91, @"%C", v92, v93, v94, 37);
          }
          else
          {
            objc_msgSend_appendFormat_(v19, v91, @"%C", v92, v93, v94, 1642);
          }
        }
        else
        {
          objc_msgSend_appendFormat_(v19, v43, @"%C", v45, v46, v47, v42);
        }
        for (unint64_t i = 1; objc_msgSend_length(v32, v86, v87, v88, v89, v90) > i; ++i)
        {
          unsigned int v100 = objc_msgSend_characterAtIndex_(v32, v96, i, v97, v98, v99);
          if (v100 == 37)
          {
            uint64_t v105 = objc_msgSend_characterAtIndex_(v32, v101, i - 1, v102, v103, v104);
            if (i == objc_msgSend_length(v32, v106, v107, v108, v109, v110) - 1) {
              uint64_t v115 = 32;
            }
            else {
              uint64_t v115 = objc_msgSend_characterAtIndex_(v32, v111, (i + 1), v112, v113, v114);
            }
            if ((objc_msgSend_characterIsMember_((void *)qword_1EA3C8F88, v111, v105, v112, v113, v114) & 1) != 0
              || objc_msgSend_characterIsMember_((void *)qword_1EA3C8F88, v116, v115, v117, v118, v119))
            {
              objc_msgSend_appendFormat_(v19, v116, @"%C", v117, v118, v119, 37);
            }
            else
            {
              objc_msgSend_appendFormat_(v19, v116, @"%C", v117, v118, v119, 1642);
            }
          }
          else
          {
            objc_msgSend_appendFormat_(v19, v101, @"%C", v102, v103, v104, v100);
          }
        }
      }
    }

    uint64_t v125 = objc_msgSend_strokeIndexes(v3, v120, v121, v122, v123, v124);
    uint64_t v131 = objc_msgSend_wordID(v3, v126, v127, v128, v129, v130);
    objc_msgSend_modelScore(v3, v132, v133, v134, v135, v136);
    double v241 = v137;
    objc_msgSend_recognitionScore(v3, v138, v139, v140, v141, v142);
    double v240 = v143;
    objc_msgSend_combinedScore(v3, v144, v145, v146, v147, v148);
    double v239 = v149;
    objc_msgSend_alignmentScore(v3, v150, v151, v152, v153, v154);
    double v238 = v155;
    uint64_t v161 = objc_msgSend_properties(v3, v156, v157, v158, v159, v160);
    uint64_t v167 = objc_msgSend_recognizerSourceLocale(v3, v162, v163, v164, v165, v166);
    uint64_t v173 = objc_msgSend_inputSources(v3, v168, v169, v170, v171, v172);
    uint64_t v179 = objc_msgSend_substrokeCount(v3, v174, v175, v176, v177, v178);
    objc_msgSend_bounds(v3, v180, v181, v182, v183, v184);
    double v186 = v185;
    double v188 = v187;
    double v190 = v189;
    double v192 = v191;
    objc_msgSend_originalBounds(v3, v193, v194, v195, v196, v197);
    uint64_t v204 = v203;
    uint64_t v206 = v205;
    uint64_t v208 = v207;
    uint64_t v210 = v209;
    if (v3) {
      objc_msgSend_principalLines(v3, v198, v199, v200, v201, v202);
    }
    else {
      memset(v243, 0, 128);
    }
    uint64_t v211 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v242, v198, (uint64_t)v19, (uint64_t)v125, v131, v161, v167, v173, v241, v240, v239, v238, v186, v188, v190, v192, v179, v204, v206,
                     v208,
                     v210,
                     v243);

    objc_msgSend_addObject_(*(void **)(a1 + 40), v212, (uint64_t)v211, v213, v214, v215);
    uint64_t v221 = objc_msgSend_string(v211, v216, v217, v218, v219, v220);
    double v227 = objc_msgSend_string(v211, v222, v223, v224, v225, v226);
    uint64_t v233 = objc_msgSend_length(v227, v228, v229, v230, v231, v232);
    *(_WORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend_characterAtIndex_(v221, v234, v233 - 1, v235, v236, v237);
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v15, (uint64_t)v3, v16, v17, v18);
    uint64_t v58 = objc_msgSend_string(v3, v53, v54, v55, v56, v57);
    if (objc_msgSend_length(v58, v59, v60, v61, v62, v63))
    {
      uint64_t v69 = objc_msgSend_string(v3, v64, v65, v66, v67, v68);
      uint64_t v75 = objc_msgSend_string(v3, v70, v71, v72, v73, v74);
      uint64_t v81 = objc_msgSend_length(v75, v76, v77, v78, v79, v80);
      *(_WORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend_characterAtIndex_(v69, v82, v81 - 1, v83, v84, v85);
    }
    else
    {
      *(_WORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 32;
    }
  }
}

void sub_1C4C18244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1825C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C183A8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v14 = v5;
  if (a3)
  {
    sub_1C4964D50(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v5);
    uint64_t v10 = v14;
  }
  else
  {
    uint64_t v11 = objc_msgSend_mutableCopy(v5, (const char *)v5, v6, v7, v8, v9);
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    uint64_t v10 = v14;
  }
}

void sub_1C4C18448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C18558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C18A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4C18BE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v11 = a2;
  id v216 = v11;
  if (!*(void *)(a4 + 16) && objc_msgSend_count(*(void **)(a1 + 32), v6, v7, v8, v9, v10))
  {
    sub_1C4C045E8((uint64_t)CHPostprocessingStep, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
    objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
    objc_msgSend_removeAllObjects(*(void **)(a1 + 40), v17, v18, v19, v20, v21);
  }
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v23 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  id v24 = v11;
  id v30 = v23;
  if (v22)
  {
    uint64_t v31 = objc_msgSend_string(MEMORY[0x1E4F28E78], v25, v26, v27, v28, v29);
    uint64_t v233 = 0;
    uint64_t v234 = &v233;
    uint64_t v235 = 0x3032000000;
    uint64_t v236 = sub_1C4C089AC;
    uint64_t v237 = sub_1C4C089BC;
    objc_msgSend_lastComposedCharacter(v30, v32, v33, v34, v35, v36);
    id v238 = (id)objc_claimAutoreleasedReturnValue();
    if (!v234[5]) {
      v234[5] = (uint64_t)&stru_1F20141C8;
    }
    unsigned int v42 = objc_msgSend_string(v24, v37, v38, v39, v40, v41);
    uint64_t v48 = objc_msgSend_length(v42, v43, v44, v45, v46, v47);
    unint64_t v54 = objc_msgSend_length((void *)v234[5], v49, v50, v51, v52, v53) + v48;

    if (v54 > 1)
    {
      uint64_t v229 = 0;
      uint64_t v230 = &v229;
      uint64_t v231 = 0x2020000000;
      char v232 = 0;
      uint64_t v61 = objc_msgSend_string(v24, v55, v56, v57, v58, v59);
      uint64_t v67 = objc_msgSend_string(v24, v62, v63, v64, v65, v66);
      uint64_t v73 = objc_msgSend_length(v67, v68, v69, v70, v71, v72);
      v223[0] = MEMORY[0x1E4F143A8];
      v223[1] = 3221225472;
      v223[2] = sub_1C4C192A0;
      v223[3] = &unk_1E64E5228;
      id v224 = v24;
      uint64_t v225 = v22;
      double v227 = &v233;
      id v74 = v31;
      id v226 = v74;
      double v228 = &v229;
      objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v61, v75, 0, v73, 2, (uint64_t)v223);

      int v221 = *((unsigned __int8 *)v230 + 24);
      id v60 = v74;

      _Block_object_dispose(&v229, 8);
    }
    else
    {
      objc_msgSend_string(v24, v55, v56, v57, v58, v59);
      id v60 = (id)objc_claimAutoreleasedReturnValue();
      int v221 = 0;
    }
    _Block_object_dispose(&v233, 8);
  }
  else
  {
    int v221 = 0;
    id v60 = 0;
  }

  uint64_t v81 = objc_msgSend_properties(v24, v76, v77, v78, v79, v80);
  uint64_t v87 = objc_msgSend_inputSources(v24, v82, v83, v84, v85, v86);
  uint64_t v93 = objc_msgSend_wordID(v24, v88, v89, v90, v91, v92);
  uint64_t v99 = objc_msgSend_string(v24, v94, v95, v96, v97, v98);
  char isEqualToString = objc_msgSend_isEqualToString_(v60, v100, (uint64_t)v99, v101, v102, v103);

  if ((isEqualToString & 1) == 0)
  {
    uint64_t v105 = *(void *)(a1 + 64);
    id v106 = v60;
    uint64_t v110 = v106;
    if (v105)
    {
      uint64_t v93 = objc_msgSend_tokenIDForString_withLexicon_(CHLanguageUtilities, v107, (uint64_t)v106, *(void *)(v105 + 24), v108, v109);
      if (!v93) {
        uint64_t v93 = objc_msgSend_tokenIDForString_withLexicon_(CHLanguageUtilities, v111, (uint64_t)v110, *(void *)(v105 + 16), v112, v113);
      }

      LOBYTE(v223[0]) = 0;
      uint64_t v114 = *(void *)(a1 + 64);
      id v117 = v110;
      if (v114) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v93 = 0;

      LOBYTE(v223[0]) = 0;
      uint64_t v114 = *(void *)(a1 + 64);
      id v117 = v110;
      if (v114)
      {
LABEL_16:
        if (objc_msgSend_lexiconHasEntryForString_withLexicon_outHasMatchingString_(CHLanguageUtilities, v115, (uint64_t)v117, *(void *)(v114 + 16), (uint64_t)v223, v116))
        {

LABEL_19:
          uint64_t v121 = 260;
          if (!LOBYTE(v223[0])) {
            uint64_t v121 = 4;
          }
          v81 |= v121;
          goto LABEL_26;
        }
        int HasMatchingString = objc_msgSend_lexiconHasEntryForString_withLexicon_outHasMatchingString_(CHLanguageUtilities, v118, (uint64_t)v117, *(void *)(v114 + 24), (uint64_t)v223, v119);

        if (HasMatchingString) {
          goto LABEL_19;
        }
LABEL_25:
        v81 &= 0xFFFFFFFFFFFFFEFBLL;
LABEL_26:
        uint64_t v122 = 128;
        if (!v221) {
          uint64_t v122 = 2048;
        }
        v87 |= v122;
        goto LABEL_29;
      }
    }

    goto LABEL_25;
  }
LABEL_29:
  uint64_t v123 = [CHTokenizedTextResultToken alloc];
  uint64_t v129 = objc_msgSend_strokeIndexes(v24, v124, v125, v126, v127, v128);
  objc_msgSend_modelScore(v24, v130, v131, v132, v133, v134);
  double v220 = v135;
  objc_msgSend_recognitionScore(v24, v136, v137, v138, v139, v140);
  double v219 = v141;
  objc_msgSend_combinedScore(v24, v142, v143, v144, v145, v146);
  double v218 = v147;
  objc_msgSend_alignmentScore(v24, v148, v149, v150, v151, v152);
  double v217 = v153;
  uint64_t v159 = objc_msgSend_recognizerSourceLocale(v24, v154, v155, v156, v157, v158);
  uint64_t v165 = objc_msgSend_substrokeCount(v24, v160, v161, v162, v163, v164);
  objc_msgSend_bounds(v24, v166, v167, v168, v169, v170);
  double v172 = v171;
  double v174 = v173;
  double v176 = v175;
  double v178 = v177;
  objc_msgSend_originalBounds(v24, v179, v180, v181, v182, v183);
  uint64_t v190 = v189;
  uint64_t v192 = v191;
  uint64_t v194 = v193;
  uint64_t v196 = v195;
  if (v24) {
    objc_msgSend_principalLines(v24, v184, v185, v186, v187, v188);
  }
  else {
    memset(v222, 0, sizeof(v222));
  }
  uint64_t v197 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v123, v184, (uint64_t)v60, (uint64_t)v129, v93, v81, v159, v87, v220, v219, v218, v217, v172, v174, v176, v178, v165, v190, v192,
                   v194,
                   v196,
                   v222,
                   v216);

  objc_msgSend_addObject_(*(void **)(a1 + 32), v198, (uint64_t)v197, v199, v200, v201);
  if (*(void *)(a1 + 80)) {
    BOOL v206 = 1;
  }
  else {
    BOOL v206 = v221 == 0;
  }
  uint64_t v207 = *(void **)(a1 + 40);
  if (v206) {
    objc_msgSend_addObject_(v207, v202, (uint64_t)v197, v203, v204, v205);
  }
  else {
    objc_msgSend_addObject_(v207, v202, (uint64_t)v24, v203, v204, v205);
  }
  uint64_t v213 = objc_msgSend_string(v197, v208, v209, v210, v211, v212);
  uint64_t v214 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v215 = *(void **)(v214 + 40);
  *(void *)(v214 + 40) = v213;
}

void sub_1C4C19170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,void *a43)
{
  _Block_object_dispose((const void *)(v48 - 232), 8);
  _Block_object_dispose((const void *)(v48 - 200), 8);

  _Unwind_Resume(a1);
}

void sub_1C4C19264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4C19284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4C192A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  id v113 = a2;
  uint64_t v16 = objc_msgSend_string(*(void **)(a1 + 32), v11, v12, v13, v14, v15);
  unint64_t v22 = objc_msgSend_length(v16, v17, v18, v19, v20, v21);
  unint64_t v23 = a5 + a6;

  if (v23 >= v22)
  {
    uint64_t v115 = &stru_1F20141C8;
  }
  else
  {
    uint64_t v29 = objc_msgSend_string(*(void **)(a1 + 32), v24, v25, v26, v27, v28);
    uint64_t v34 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v29, v30, v23, v31, v32, v33);
    uint64_t v36 = v35;

    unsigned int v42 = objc_msgSend_string(*(void **)(a1 + 32), v37, v38, v39, v40, v41);
    objc_msgSend_substringWithRange_(v42, v43, v34, v36, v44, v45);
    uint64_t v115 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  id v46 = v113;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  obunint64_t j = *(id *)(*(void *)(a1 + 40) + 8);
  uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v47, (uint64_t)&v119, (uint64_t)v133, 16, v48);
  uint64_t v118 = v46;
  uint64_t v116 = v46;
  if (v54)
  {
    uint64_t v55 = *(void *)v120;
    uint64_t v114 = a3 + a4;
    uint64_t v116 = v46;
    do
    {
      for (uint64_t i = 0; i != v54; ++i)
      {
        if (*(void *)v120 != v55) {
          objc_enumerationMutation(obj);
        }
        uint64_t v57 = *(void **)(*((void *)&v119 + 1) + 8 * i);
        uint64_t v58 = objc_msgSend_confusion(v57, v49, v50, v51, v52, v53);
        if (objc_msgSend_isEqualToString_(v118, v59, (uint64_t)v58, v60, v61, v62))
        {
          int isValidForLocale = objc_msgSend_isValidForLocale_(v57, v63, *(void *)(*(void *)(a1 + 40) + 32), v64, v65, v66);

          if (isValidForLocale)
          {
            int v68 = objc_msgSend_meetsContextRequirementWithLeftContext_rightContext_(v57, v49, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), (uint64_t)v115, v52, v53);
            if (objc_msgSend_requiresLexiconMatch(v57, v69, v70, v71, v72, v73))
            {
              id v74 = objc_msgSend_string(*(void **)(a1 + 32), v49, v50, v51, v52, v53);
              uint64_t v79 = objc_msgSend_substringFromIndex_(v74, v75, v114, v76, v77, v78);

              uint64_t v80 = NSString;
              uint64_t v81 = *(void *)(a1 + 48);
              uint64_t v87 = objc_msgSend_correction(v57, v82, v83, v84, v85, v86);
              uint64_t v92 = objc_msgSend_stringWithFormat_(v80, v88, @"%@%@%@", v89, v90, v91, v81, v87, v79);

              id v93 = v92;
              uint64_t v129 = 0;
              uint64_t v130 = &v129;
              uint64_t v131 = 0x2020000000;
              char v132 = 0;
              uint64_t v123 = MEMORY[0x1E4F143A8];
              uint64_t v124 = 3221225472;
              uint64_t v125 = sub_1C4C19864;
              uint64_t v126 = &unk_1E64E5250;
              uint64_t v128 = &v129;
              id v94 = v93;
              id v127 = v94;
              LXLexiconEnumerateEntriesForString();
              LODWORD(v87) = *((unsigned char *)v130 + 24) == 0;

              _Block_object_dispose(&v129, 8);
              if (v87)
              {
                id v96 = v94;
                uint64_t v129 = 0;
                uint64_t v130 = &v129;
                uint64_t v131 = 0x2020000000;
                char v132 = 0;
                uint64_t v123 = MEMORY[0x1E4F143A8];
                uint64_t v124 = 3221225472;
                uint64_t v125 = sub_1C4C19864;
                uint64_t v126 = &unk_1E64E5250;
                uint64_t v128 = &v129;
                id v97 = v96;
                id v127 = v97;
                LXLexiconEnumerateEntriesForString();
                BOOL v95 = *((unsigned char *)v130 + 24) != 0;

                _Block_object_dispose(&v129, 8);
              }
              else
              {
                BOOL v95 = 1;
              }
            }
            else
            {
              BOOL v95 = 1;
            }
            if ((v68 & v95) == 1)
            {
              uint64_t v98 = objc_msgSend_correction(v57, v49, v50, v51, v52, v53);

              uint64_t v99 = *(void *)(*(void *)(a1 + 64) + 8);
              if (*(unsigned char *)(v99 + 24))
              {
                char shouldPreserveOriginal = 1;
              }
              else
              {
                char shouldPreserveOriginal = objc_msgSend_shouldPreserveOriginal(v57, v49, v50, v51, v52, v53);
                uint64_t v99 = *(void *)(*(void *)(a1 + 64) + 8);
              }
              *(unsigned char *)(v99 + 24) = shouldPreserveOriginal;
              uint64_t v116 = (void *)v98;
            }
          }
        }
        else
        {
        }
      }
      uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v49, (uint64_t)&v119, (uint64_t)v133, 16, v53);
    }
    while (v54);
  }

  objc_msgSend_appendString_(*(void **)(a1 + 48), v101, (uint64_t)v116, v102, v103, v104);
  uint64_t v110 = objc_msgSend_copy(v116, v105, v106, v107, v108, v109);
  uint64_t v111 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v112 = *(void **)(v111 + 40);
  *(void *)(v111 + 40) = v110;
}

void sub_1C4C19774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4C19864(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  cf = LXEntryCopyString();
  LXEntryGetPartialProbability();
  double v6 = v5;
  uint64_t v10 = objc_msgSend_rangeOfString_options_(*(void **)(a1 + 32), v7, (uint64_t)cf, 1, v8, v9);
  BOOL v12 = v6 > -1.7 && v10 != 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v12;
  CFRelease(cf);
  *a3 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1C4C19924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C19938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1994C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v235[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_array(MEMORY[0x1E4F1CA48], a2, a3, a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C8F98;
  qword_1EA3C8F98 = v6;

  uint64_t v8 = [CHContextualCharacterTransliteration alloc];
  uint64_t v13 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v9, @"es", v10, v11, v12);
  v235[0] = v13;
  uint64_t v17 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v14, (uint64_t)v235, 1, v15, v16);
  unint64_t v23 = objc_msgSend_ch_emptyCharacterSet(MEMORY[0x1E4F28B88], v18, v19, v20, v21, v22);
  char v214 = 1;
  char shouldPreserveOriginal = objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v8, v24, @"i", @"¡", (uint64_t)v17, (uint64_t)v23, 0, 1, v214);

  objc_msgSend_addObject_((void *)qword_1EA3C8F98, v25, (uint64_t)shouldPreserveOriginal, v26, v27, v28);
  id v29 = objc_alloc_init(MEMORY[0x1E4F28E58]);
  uint64_t v35 = objc_msgSend_ch_katakanaCharacterSet(MEMORY[0x1E4F28B88], v30, v31, v32, v33, v34);
  objc_msgSend_formUnionWithCharacterSet_(v29, v36, (uint64_t)v35, v37, v38, v39);

  uint64_t v45 = objc_msgSend_ch_hiraganaCharacterSet(MEMORY[0x1E4F28B88], v40, v41, v42, v43, v44);
  objc_msgSend_formUnionWithCharacterSet_(v29, v46, (uint64_t)v45, v47, v48, v49);

  uint64_t v55 = objc_msgSend_ch_kanjiCharacterSet(MEMORY[0x1E4F28B88], v50, v51, v52, v53, v54);
  objc_msgSend_formUnionWithCharacterSet_(v29, v56, (uint64_t)v55, v57, v58, v59);

  uint64_t v60 = [CHContextualCharacterTransliteration alloc];
  uint64_t v65 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v61, @"ja", v62, v63, v64);
  uint64_t v234 = v65;
  uint64_t v69 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v66, (uint64_t)&v234, 1, v67, v68);
  LOBYTE(v215) = 0;
  uint64_t v225 = objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v60, v70, @"-", @"ー", (uint64_t)v69, (uint64_t)v29, 0, 0, v215);

  uint64_t v71 = [CHContextualCharacterTransliteration alloc];
  uint64_t v76 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v72, @"ja", v73, v74, v75);
  uint64_t v233 = v76;
  uint64_t v80 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v77, (uint64_t)&v233, 1, v78, v79);
  LOBYTE(v216) = 0;
  id v224 = objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v71, v81, @"-", @"ー", (uint64_t)v80, 0, v29, 0, v216);

  objc_msgSend_addObject_((void *)qword_1EA3C8F98, v82, (uint64_t)v225, v83, v84, v85);
  objc_msgSend_addObject_((void *)qword_1EA3C8F98, v86, (uint64_t)v224, v87, v88, v89);
  uint64_t v90 = [CHContextualCharacterTransliteration alloc];
  BOOL v95 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v91, @"ja", v92, v93, v94);
  char v232 = v95;
  uint64_t v99 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v96, (uint64_t)&v232, 1, v97, v98);
  uint64_t v104 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v100, @"加", v101, v102, v103);
  LOBYTE(v217) = 1;
  uint64_t v223 = objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v90, v105, @"I", @"工", (uint64_t)v99, (uint64_t)v104, 0, 0, v217);

  objc_msgSend_addObject_((void *)qword_1EA3C8F98, v106, (uint64_t)v223, v107, v108, v109);
  uint64_t v110 = [CHContextualCharacterTransliteration alloc];
  uint64_t v115 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v111, @"zh", v112, v113, v114);
  uint64_t v231 = v115;
  long long v119 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v116, (uint64_t)&v231, 1, v117, v118);
  uint64_t v125 = objc_msgSend_ch_kanjiCharacterSet(MEMORY[0x1E4F28B88], v120, v121, v122, v123, v124);
  LOBYTE(v21_Block_object_dispose(&STACK[0x320], 8) = 0;
  id v127 = objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v110, v126, @"-", @"一", (uint64_t)v119, (uint64_t)v125, 0, 0, v218);

  uint64_t v128 = [CHContextualCharacterTransliteration alloc];
  uint64_t v133 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v129, @"zh", v130, v131, v132);
  uint64_t v230 = v133;
  uint64_t v137 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v134, (uint64_t)&v230, 1, v135, v136);
  uint64_t v143 = objc_msgSend_ch_kanjiCharacterSet(MEMORY[0x1E4F28B88], v138, v139, v140, v141, v142);
  LOBYTE(v219) = 0;
  uint64_t v145 = objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v128, v144, @"-", @"一", (uint64_t)v137, 0, v143, 0, v219);

  objc_msgSend_addObject_((void *)qword_1EA3C8F98, v146, (uint64_t)v127, v147, v148, v149);
  objc_msgSend_addObject_((void *)qword_1EA3C8F98, v150, (uint64_t)v145, v151, v152, v153);
  uint64_t v154 = [CHContextualCharacterTransliteration alloc];
  uint64_t v159 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v155, @"uk", v156, v157, v158);
  uint64_t v229 = v159;
  uint64_t v163 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v160, (uint64_t)&v229, 1, v161, v162);
  LOBYTE(v220) = 1;
  uint64_t v165 = objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v154, v164, @"Г", @"Ґ", (uint64_t)v163, 0, 0, 1, v220);

  uint64_t v166 = [CHContextualCharacterTransliteration alloc];
  double v171 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v167, @"uk", v168, v169, v170);
  double v228 = v171;
  double v175 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v172, (uint64_t)&v228, 1, v173, v174);
  LOBYTE(v221) = 1;
  double v177 = objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v166, v176, @"г", @"ґ", (uint64_t)v175, 0, 0, 1, v221);

  objc_msgSend_addObject_((void *)qword_1EA3C8F98, v178, (uint64_t)v165, v179, v180, v181);
  objc_msgSend_addObject_((void *)qword_1EA3C8F98, v182, (uint64_t)v177, v183, v184, v185);
  uint64_t v186 = [CHContextualCharacterTransliteration alloc];
  uint64_t v191 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v187, @"uk", v188, v189, v190);
  double v227 = v191;
  uint64_t v195 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v192, (uint64_t)&v227, 1, v193, v194);
  uint64_t v201 = objc_msgSend_ch_basicCyrillicCharacterSet(MEMORY[0x1E4F28B88], v196, v197, v198, v199, v200);
  uint64_t v207 = objc_msgSend_ch_basicCyrillicCharacterSet(MEMORY[0x1E4F28B88], v202, v203, v204, v205, v206);
  LOBYTE(v222) = 0;
  uint64_t v209 = objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v186, v208, @"'", @"ʼ", (uint64_t)v195, (uint64_t)v201, v207, 0, v222);

  objc_msgSend_addObject_((void *)qword_1EA3C8F98, v210, (uint64_t)v209, v211, v212, v213);
}

void sub_1C4C1A01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1A420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4C1A808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1A980(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v205 = (char *)v3;
  if (*(void *)(a1 + 64))
  {
    objc_msgSend_addObject_(*(void **)(a1 + 56), v3, (uint64_t)v3, v4, v5, v6);
    goto LABEL_74;
  }
  objc_msgSend_addObject_(*(void **)(a1 + 32), v3, (uint64_t)v3, v4, v5, v6);
  uint64_t v17 = objc_msgSend_leftContext(*(void **)(a1 + 40), v7, v8, v9, v10, v11);
  if (v17)
  {
    uint64_t v18 = objc_msgSend_leftContext(*(void **)(a1 + 40), v12, v13, v14, v15, v16);
    if (objc_msgSend_length(v18, v19, v20, v21, v22, v23))
    {
      char v29 = objc_msgSend_properties(v205, v24, v25, v26, v27, v28);

      if ((v29 & 0x20) == 0) {
        goto LABEL_72;
      }
    }
    else
    {
    }
  }
  uint64_t v34 = *(void *)(a1 + 48);
  uint64_t v35 = v205;
  uint64_t v41 = v35;
  if (!v34
    || (objc_msgSend_string(v35, v36, v37, v38, v39, v40),
        uint64_t v42 = objc_claimAutoreleasedReturnValue(),
        uint64_t v48 = objc_msgSend_length(v42, v43, v44, v45, v46, v47),
        v42,
        v48 != 1))
  {

LABEL_72:
    uint64_t v198 = 0;
    objc_msgSend_addObject_(*(void **)(a1 + 56), v30, (uint64_t)v205, v31, v32, v33);
    goto LABEL_73;
  }
  uint64_t v204 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v49, @"es_ES", v50, v51, v52);
  uint64_t v58 = objc_msgSend_string(v41, v53, v54, v55, v56, v57);
  uint64_t v63 = objc_msgSend_lowercaseStringWithLocale_(v58, v59, (uint64_t)v204, v60, v61, v62);

  id v203 = v63;
  uint64_t v69 = (const char *)objc_msgSend_UTF8String(v203, v64, v65, v66, v67, v68);
  size_t v70 = strlen(v69);
  if (v70 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v76 = v70;
  if (v70 >= 0x17)
  {
    uint64_t v81 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17) {
      uint64_t v81 = v70 | 7;
    }
    uint64_t v82 = v81 + 1;
    p_dst = (void **)operator new(v81 + 1);
    size_t v208 = v76;
    unint64_t v209 = v82 | 0x8000000000000000;
    __dst = p_dst;
LABEL_19:
    memmove(p_dst, v69, v76);
    *((unsigned char *)p_dst + v76) = 0;
    uint64_t v79 = v34 + 16;
    uint64_t v78 = *(void *)(v34 + 16);
    size_t v80 = HIBYTE(v209);
    if (!v78) {
      goto LABEL_58;
    }
    goto LABEL_20;
  }
  HIBYTE(v209) = v70;
  p_dst = (void **)&__dst;
  if (v70) {
    goto LABEL_19;
  }
  LOBYTE(__dst) = 0;
  uint64_t v79 = v34 + 16;
  uint64_t v78 = *(void *)(v34 + 16);
  size_t v80 = HIBYTE(v209);
  if (!v78) {
    goto LABEL_58;
  }
LABEL_20:
  if ((v80 & 0x80u) == 0) {
    size_t v83 = v80;
  }
  else {
    size_t v83 = v208;
  }
  if ((v80 & 0x80u) == 0) {
    uint64_t v84 = (void **)&__dst;
  }
  else {
    uint64_t v84 = __dst;
  }
  uint64_t v85 = v79;
  do
  {
    int v86 = *(char *)(v78 + 55);
    if (v86 >= 0) {
      size_t v87 = *(unsigned __int8 *)(v78 + 55);
    }
    else {
      size_t v87 = *(void *)(v78 + 40);
    }
    if (v86 >= 0) {
      uint64_t v88 = (const void *)(v78 + 32);
    }
    else {
      uint64_t v88 = *(const void **)(v78 + 32);
    }
    if (v83 >= v87) {
      size_t v89 = v87;
    }
    else {
      size_t v89 = v83;
    }
    int v90 = memcmp(v88, v84, v89);
    BOOL v91 = v87 < v83;
    if (v90) {
      BOOL v91 = v90 < 0;
    }
    BOOL v92 = !v91;
    if (v91) {
      uint64_t v93 = (uint64_t *)(v78 + 8);
    }
    else {
      uint64_t v93 = (uint64_t *)v78;
    }
    if (v92) {
      uint64_t v85 = v78;
    }
    uint64_t v78 = *v93;
  }
  while (*v93);
  if (v85 == v79) {
    goto LABEL_58;
  }
  int v94 = *(char *)(v85 + 55);
  if (v94 >= 0) {
    size_t v95 = *(unsigned __int8 *)(v85 + 55);
  }
  else {
    size_t v95 = *(void *)(v85 + 40);
  }
  if (v94 >= 0) {
    id v96 = (const void *)(v85 + 32);
  }
  else {
    id v96 = *(const void **)(v85 + 32);
  }
  if (v95 >= v83) {
    size_t v97 = v83;
  }
  else {
    size_t v97 = v95;
  }
  int v98 = memcmp(v84, v96, v97);
  BOOL v99 = v83 < v95;
  if (v98) {
    BOOL v99 = v98 < 0;
  }
  if (v99)
  {
LABEL_58:
    uint64_t v85 = v79;
    if ((v80 & 0x80) != 0) {
      goto LABEL_59;
    }
    goto LABEL_62;
  }
  if ((v80 & 0x80) != 0)
  {
LABEL_59:
    operator delete(__dst);
    if (v85 == v34 + 16) {
      goto LABEL_68;
    }
    goto LABEL_63;
  }
LABEL_62:
  if (v85 == v34 + 16)
  {
LABEL_68:

    goto LABEL_72;
  }
LABEL_63:
  objc_msgSend_recognitionScore(v41, v71, v72, v73, v74, v75);
  if (v105 >= *(double *)(v85 + 80)) {
    goto LABEL_68;
  }
  uint64_t v106 = objc_msgSend_properties(v41, v100, v101, v102, v103, v104);
  uint64_t v110 = [CHTokenizedTextResultToken alloc];
  uint64_t v111 = (void *)(v85 + 56);
  if (*(char *)(v85 + 79) < 0) {
    uint64_t v111 = (void *)*v111;
  }
  uint64_t v112 = objc_msgSend_stringWithCString_encoding_(NSString, v107, (uint64_t)v111, 4, v108, v109);
  uint64_t v118 = objc_msgSend_strokeIndexes(v41, v113, v114, v115, v116, v117);
  uint64_t v124 = objc_msgSend_wordID(v41, v119, v120, v121, v122, v123);
  objc_msgSend_modelScore(v41, v125, v126, v127, v128, v129);
  double v202 = v130;
  objc_msgSend_recognitionScore(v41, v131, v132, v133, v134, v135);
  double v201 = v136;
  objc_msgSend_combinedScore(v41, v137, v138, v139, v140, v141);
  double v200 = v142;
  objc_msgSend_alignmentScore(v41, v143, v144, v145, v146, v147);
  double v199 = v148;
  uint64_t v154 = objc_msgSend_recognizerSourceLocale(v41, v149, v150, v151, v152, v153);
  uint64_t v160 = objc_msgSend_inputSources(v41, v155, v156, v157, v158, v159);
  uint64_t v166 = objc_msgSend_substrokeCount(v41, v161, v162, v163, v164, v165);
  objc_msgSend_bounds(v41, v167, v168, v169, v170, v171);
  double v173 = v172;
  double v175 = v174;
  double v177 = v176;
  double v179 = v178;
  objc_msgSend_originalBounds(v41, v180, v181, v182, v183, v184);
  uint64_t v191 = v190;
  uint64_t v193 = v192;
  uint64_t v195 = v194;
  uint64_t v197 = v196;
  if (v41) {
    objc_msgSend_principalLines(v41, v185, v186, v187, v188, v189);
  }
  else {
    memset(v206, 0, sizeof(v206));
  }
  uint64_t v198 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v110, v185, (uint64_t)v112, (uint64_t)v118, v124, v106 & 0xFFFFFFFFFFFFFEFBLL, v154, v160 | 0x80, v202, v201, v200, v199, v173, v175, v177, v179, v166, v191, v193,
                   v195,
                   v197,
                   v206);

  if (!v198) {
    goto LABEL_72;
  }
  objc_msgSend_addObject_(*(void **)(a1 + 56), v30, (uint64_t)v198, v31, v32, v33);
LABEL_73:

LABEL_74:
}

void sub_1C4C1AEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1AF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1AF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1AF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1B384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4C1B824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1B9F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"0179OoqVv", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C8FA8;
  qword_1EA3C8FA8 = v6;

  uint64_t v12 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v8, @"٠١٢٣٤٥٦٧٨٩.", v9, v10, v11);
  uint64_t v13 = (void *)qword_1EA3C8FB0;
  qword_1EA3C8FB0 = v12;
}

void sub_1C4C1BA68(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (!*(void *)(a1 + 72))
  {
    uint64_t v9 = objc_msgSend_result(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
    uint64_t v15 = objc_msgSend_tokenColumnCount(v9, v10, v11, v12, v13, v14);

    if (v15 == 1)
    {
      uint64_t v16 = sub_1C4C1C25C(*(void *)(a1 + 40), v8, *(void *)(a1 + 40) + 8);
      uint64_t v22 = sub_1C4C1C25C(*(void *)(a1 + 40), v8, *(void *)(a1 + 40) + 32);
      if (v16 | v22)
      {
        if ((objc_msgSend_properties(v8, v17, v18, v19, v20, v21) & 0x20) != 0)
        {
          uint64_t v33 = objc_msgSend_objectForKey_(*(void **)(a1 + 48), v23, (uint64_t)CHRecognitionOptionIsPreviousResultCharacterLevel, v25, v26, v27);
          int v28 = objc_msgSend_isEqual_(v33, v34, MEMORY[0x1E4F1CC38], v35, v36, v37) ^ 1;
        }
        else
        {
          int v28 = 0;
        }
        uint64_t v43 = objc_msgSend_leftContext(*(void **)(a1 + 32), v23, v24, v25, v26, v27);
        if (v43)
        {
          uint64_t v44 = objc_msgSend_leftContext(*(void **)(a1 + 32), v38, v39, v40, v41, v42);
          uint64_t v50 = objc_msgSend_length(v44, v45, v46, v47, v48, v49);

          if (v50)
          {
            uint64_t v52 = objc_msgSend_leftContext(*(void **)(a1 + 32), v38, v51, v40, v41, v42);
            objc_msgSend_lastComposedCharacter(v52, v53, v54, v55, v56, v57);
            uint64_t v58 = (NSString *)objc_claimAutoreleasedReturnValue();
            LODWORD(v50) = isCharacterArabicScript(v58);

            if (v50)
            {
              uint64_t v60 = objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E4F28B88], v38, v59, v40, v41, v42);
              uint64_t v66 = objc_msgSend_leftContext(*(void **)(a1 + 32), v61, v62, v63, v64, v65);
              uint64_t v72 = objc_msgSend_leftContext(*(void **)(a1 + 32), v67, v68, v69, v70, v71);
              uint64_t v78 = objc_msgSend_length(v72, v73, v74, v75, v76, v77);
              uint64_t v83 = objc_msgSend_characterAtIndex_(v66, v79, v78 - 1, v80, v81, v82);
              LODWORD(v50) = objc_msgSend_characterIsMember_(v60, v84, v83, v85, v86, v87);

              int v88 = 0;
              int v89 = 0;
              if (!v16) {
                goto LABEL_32;
              }
            }
            else
            {
              int v88 = 0;
              int v89 = 1;
              if (!v16) {
                goto LABEL_32;
              }
            }
LABEL_25:
            if ((v50 & 1) == 0)
            {
              int v120 = v88 | (v28 | v89) ^ 1;
              uint64_t v121 = *(void **)(a1 + 56);
              if (v120) {
                objc_msgSend_addObject_(v121, v38, v16, v40, v41, v42);
              }
              else {
                objc_msgSend_addObject_(v121, v38, (uint64_t)v8, v40, v41, v42);
              }
              uint64_t v126 = *(void **)(a1 + 64);
              if (!v120)
              {
                objc_msgSend_addObject_(v126, v122, v16, v123, v124, v125);
                goto LABEL_47;
              }
              goto LABEL_30;
            }
LABEL_32:
            if (!v22) {
              goto LABEL_47;
            }
            int v127 = v88 | v50 & ~v28;
            uint64_t v128 = *(void **)(a1 + 56);
            if (v127) {
              objc_msgSend_addObject_(v128, v38, v22, v40, v41, v42);
            }
            else {
              objc_msgSend_addObject_(v128, v38, (uint64_t)v8, v40, v41, v42);
            }
            uint64_t v126 = *(void **)(a1 + 64);
            if (!v127)
            {
              objc_msgSend_addObject_(v126, v122, v22, v123, v124, v125);
              goto LABEL_47;
            }
LABEL_30:
            objc_msgSend_addObject_(v126, v122, (uint64_t)v8, v123, v124, v125);
            goto LABEL_47;
          }
        }
        else
        {
          LODWORD(v50) = 0;
        }
        int v88 = 1;
        int v89 = 1;
        if (!v16) {
          goto LABEL_32;
        }
        goto LABEL_25;
      }
      if (*(void *)(a1 + 72))
      {
LABEL_9:
        objc_msgSend_addObject_(*(void **)(a1 + 56), v17, (uint64_t)v8, v19, v20, v21);
        objc_msgSend_addObject_(*(void **)(a1 + 64), v29, (uint64_t)v8, v30, v31, v32);
LABEL_47:

        goto LABEL_7;
      }
      objc_msgSend_string(v8, v17, v18, v19, v20, v21);
      int v90 = (NSString *)objc_claimAutoreleasedReturnValue();
      BOOL v91 = isStringEntirelyFromSet(v90, (NSCharacterSet *)qword_1EA3C8FA8);

      if (v91)
      {
        uint64_t v93 = sub_1C4C1C6F8(*(void *)(a1 + 40), v8, *(void *)(a1 + 40) + 32);
        uint64_t v104 = objc_msgSend_leftContext(*(void **)(a1 + 32), v94, v95, v96, v97, v98);
        if (!v104) {
          goto LABEL_42;
        }
        double v105 = objc_msgSend_leftContext(*(void **)(a1 + 32), v99, v100, v101, v102, v103);
        uint64_t v111 = objc_msgSend_ch_arabicDigitSet(MEMORY[0x1E4F28B88], v106, v107, v108, v109, v110);
        uint64_t v115 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v105, v112, (uint64_t)v111, 1, v113, v114);

        LODWORD(v104) = v115 > 0;
        if (v115 > 0) {
          objc_msgSend_addObject_(*(void **)(a1 + 56), v99, (uint64_t)v93, v101, v102, v103);
        }
        else {
LABEL_42:
        }
          objc_msgSend_addObject_(*(void **)(a1 + 56), v99, (uint64_t)v8, v101, v102, v103);
        uint64_t v231 = *(void **)(a1 + 64);
        if (v104) {
          objc_msgSend_addObject_(v231, v116, (uint64_t)v8, v117, v118, v119);
        }
        else {
          objc_msgSend_addObject_(v231, v116, (uint64_t)v93, v117, v118, v119);
        }
      }
      else
      {
        if (*(void *)(a1 + 72)) {
          goto LABEL_9;
        }
        objc_msgSend_string(v8, v17, v92, v19, v20, v21);
        uint64_t v129 = (NSString *)objc_claimAutoreleasedReturnValue();
        BOOL v130 = isStringEntirelyFromSet(v129, (NSCharacterSet *)qword_1EA3C8FB0);

        if (!v130) {
          goto LABEL_9;
        }
        uint64_t v131 = [CHTokenizedTextResultToken alloc];
        id v246 = objc_msgSend_string(v8, v132, v133, v134, v135, v136);
        uint64_t v140 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v246, v137, @".", @"٠", v138, v139);
        uint64_t v146 = objc_msgSend_strokeIndexes(v8, v141, v142, v143, v144, v145);
        uint64_t v245 = v131;
        unsigned int v244 = objc_msgSend_wordID(v8, v147, v148, v149, v150, v151);
        objc_msgSend_modelScore(v8, v152, v153, v154, v155, v156);
        double v243 = v157;
        objc_msgSend_recognitionScore(v8, v158, v159, v160, v161, v162);
        double v242 = v163;
        objc_msgSend_combinedScore(v8, v164, v165, v166, v167, v168);
        double v241 = v169;
        objc_msgSend_alignmentScore(v8, v170, v171, v172, v173, v174);
        double v240 = v175;
        uint64_t v181 = objc_msgSend_properties(v8, v176, v177, v178, v179, v180);
        uint64_t v187 = objc_msgSend_recognizerSourceLocale(v8, v182, v183, v184, v185, v186);
        uint64_t v193 = objc_msgSend_inputSources(v8, v188, v189, v190, v191, v192);
        uint64_t v199 = objc_msgSend_substrokeCount(v8, v194, v195, v196, v197, v198);
        objc_msgSend_bounds(v8, v200, v201, v202, v203, v204);
        double v206 = v205;
        double v208 = v207;
        double v210 = v209;
        double v212 = v211;
        objc_msgSend_originalBounds(v8, v213, v214, v215, v216, v217);
        uint64_t v224 = v223;
        uint64_t v226 = v225;
        uint64_t v228 = v227;
        uint64_t v230 = v229;
        if (v8) {
          objc_msgSend_principalLines(v8, v218, v219, v220, v221, v222);
        }
        else {
          memset(v247, 0, 128);
        }
        uint64_t v93 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v245, v218, (uint64_t)v140, (uint64_t)v146, v244, v181, v187, v193 | 0x80, v243, v242, v241, v240, v206, v208, v210, v212, v199, v224, v226,
                        v228,
                        v230,
                        v247);

        objc_msgSend_addObject_(*(void **)(a1 + 56), v232, (uint64_t)v8, v233, v234, v235);
        objc_msgSend_addObject_(*(void **)(a1 + 64), v236, (uint64_t)v93, v237, v238, v239);
      }

      goto LABEL_47;
    }
  }
  objc_msgSend_addObject_(*(void **)(a1 + 56), v3, (uint64_t)v8, v5, v6, v7);
LABEL_7:
}

void sub_1C4C1BFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C0EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C124()
{
  JUMPOUT(0x1C4C1C12CLL);
}

void sub_1C4C1C148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4C1C25C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v11 = v5;
  if (!a1) {
    goto LABEL_60;
  }
  uint64_t v12 = objc_msgSend_string(v5, v6, v7, v8, v9, v10);
  uint64_t v18 = objc_msgSend_length(v12, v13, v14, v15, v16, v17);

  if (v18 != 1) {
    goto LABEL_60;
  }
  objc_msgSend_string(v11, v19, v20, v21, v22, v23);
  id v24 = objc_claimAutoreleasedReturnValue();
  uint64_t v30 = (const char *)objc_msgSend_UTF8String(v24, v25, v26, v27, v28, v29);
  size_t v31 = strlen(v30);
  if (v31 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v32 = v31;
  if (v31 >= 0x17)
  {
    uint64_t v38 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17) {
      uint64_t v38 = v31 | 7;
    }
    uint64_t v39 = v38 + 1;
    p_dst = (void **)operator new(v38 + 1);
    size_t v169 = v32;
    unint64_t v170 = v39 | 0x8000000000000000;
    __dst = p_dst;
LABEL_11:
    memmove(p_dst, v30, v32);
    *((unsigned char *)p_dst + v32) = 0;
    uint64_t v40 = *(void *)(a3 + 8);
    uint64_t v34 = a3 + 8;
    uint64_t v35 = v40;
    size_t v37 = HIBYTE(v170);
    if (!v40) {
      goto LABEL_50;
    }
    goto LABEL_12;
  }
  HIBYTE(v170) = v31;
  p_dst = (void **)&__dst;
  if (v31) {
    goto LABEL_11;
  }
  LOBYTE(__dst) = 0;
  uint64_t v36 = *(void *)(a3 + 8);
  uint64_t v34 = a3 + 8;
  uint64_t v35 = v36;
  size_t v37 = HIBYTE(v170);
  if (!v36) {
    goto LABEL_50;
  }
LABEL_12:
  if ((v37 & 0x80u) == 0) {
    size_t v41 = v37;
  }
  else {
    size_t v41 = v169;
  }
  if ((v37 & 0x80u) == 0) {
    uint64_t v42 = (void **)&__dst;
  }
  else {
    uint64_t v42 = __dst;
  }
  uint64_t v43 = v34;
  do
  {
    int v44 = *(char *)(v35 + 55);
    if (v44 >= 0) {
      size_t v45 = *(unsigned __int8 *)(v35 + 55);
    }
    else {
      size_t v45 = *(void *)(v35 + 40);
    }
    if (v44 >= 0) {
      uint64_t v46 = (const void *)(v35 + 32);
    }
    else {
      uint64_t v46 = *(const void **)(v35 + 32);
    }
    if (v41 >= v45) {
      size_t v47 = v45;
    }
    else {
      size_t v47 = v41;
    }
    int v48 = memcmp(v46, v42, v47);
    BOOL v49 = v45 < v41;
    if (v48) {
      BOOL v49 = v48 < 0;
    }
    BOOL v50 = !v49;
    if (v49) {
      uint64_t v51 = (uint64_t *)(v35 + 8);
    }
    else {
      uint64_t v51 = (uint64_t *)v35;
    }
    if (v50) {
      uint64_t v43 = v35;
    }
    uint64_t v35 = *v51;
  }
  while (*v51);
  if (v43 == v34) {
    goto LABEL_50;
  }
  int v52 = *(char *)(v43 + 55);
  if (v52 >= 0) {
    size_t v53 = *(unsigned __int8 *)(v43 + 55);
  }
  else {
    size_t v53 = *(void *)(v43 + 40);
  }
  if (v52 >= 0) {
    uint64_t v54 = (const void *)(v43 + 32);
  }
  else {
    uint64_t v54 = *(const void **)(v43 + 32);
  }
  if (v53 >= v41) {
    size_t v55 = v41;
  }
  else {
    size_t v55 = v53;
  }
  int v56 = memcmp(v42, v54, v55);
  BOOL v57 = v41 < v53;
  if (v56) {
    BOOL v57 = v56 < 0;
  }
  if (v57)
  {
LABEL_50:
    uint64_t v43 = v34;
    if ((v37 & 0x80) != 0) {
      goto LABEL_51;
    }
    goto LABEL_54;
  }
  if ((v37 & 0x80) != 0)
  {
LABEL_51:
    operator delete(__dst);

    if (v43 == v34) {
      goto LABEL_60;
    }
    goto LABEL_55;
  }
LABEL_54:

  if (v43 == v34)
  {
LABEL_60:
    uint64_t v161 = 0;
    goto LABEL_61;
  }
LABEL_55:
  objc_msgSend_recognitionScore(v11, v58, v59, v60, v61, v62);
  if (v68 >= *(double *)(v43 + 80)) {
    goto LABEL_60;
  }
  uint64_t v69 = objc_msgSend_properties(v11, v63, v64, v65, v66, v67);
  uint64_t v73 = [CHTokenizedTextResultToken alloc];
  uint64_t v74 = (void *)(v43 + 56);
  if (*(char *)(v43 + 79) < 0) {
    uint64_t v74 = (void *)*v74;
  }
  uint64_t v75 = objc_msgSend_stringWithCString_encoding_(NSString, v70, (uint64_t)v74, 4, v71, v72);
  uint64_t v81 = objc_msgSend_strokeIndexes(v11, v76, v77, v78, v79, v80);
  uint64_t v87 = objc_msgSend_wordID(v11, v82, v83, v84, v85, v86);
  objc_msgSend_modelScore(v11, v88, v89, v90, v91, v92);
  double v166 = v93;
  objc_msgSend_recognitionScore(v11, v94, v95, v96, v97, v98);
  double v165 = v99;
  objc_msgSend_combinedScore(v11, v100, v101, v102, v103, v104);
  double v164 = v105;
  objc_msgSend_alignmentScore(v11, v106, v107, v108, v109, v110);
  double v163 = v111;
  uint64_t v117 = objc_msgSend_recognizerSourceLocale(v11, v112, v113, v114, v115, v116);
  uint64_t v123 = objc_msgSend_inputSources(v11, v118, v119, v120, v121, v122);
  uint64_t v129 = objc_msgSend_substrokeCount(v11, v124, v125, v126, v127, v128);
  objc_msgSend_bounds(v11, v130, v131, v132, v133, v134);
  double v136 = v135;
  double v138 = v137;
  double v140 = v139;
  double v142 = v141;
  objc_msgSend_originalBounds(v11, v143, v144, v145, v146, v147);
  uint64_t v154 = v153;
  uint64_t v156 = v155;
  uint64_t v158 = v157;
  uint64_t v160 = v159;
  if (v11) {
    objc_msgSend_principalLines(v11, v148, v149, v150, v151, v152);
  }
  else {
    memset(v167, 0, sizeof(v167));
  }
  uint64_t v161 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v73, v148, (uint64_t)v75, (uint64_t)v81, v87, v69 & 0xFFFFFFFFFFFFFFFBLL, v117, v123 | 0x80, v166, v165, v164, v163, v136, v138, v140, v142, v129, v154, v156,
                   v158,
                   v160,
                   v167);

LABEL_61:
  return v161;
}

void sub_1C4C1C648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C65C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C66C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C67C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C68C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C6A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C6D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1C6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4C1C6F8(uint64_t a1, void *a2, uint64_t a3)
{
  id v10 = a2;
  if (a1)
  {
    uint64_t v11 = objc_msgSend_string(MEMORY[0x1E4F28E78], v5, v6, v7, v8, v9);
    uint64_t v17 = objc_msgSend_string(v10, v12, v13, v14, v15, v16);
    uint64_t v23 = objc_msgSend_string(v10, v18, v19, v20, v21, v22);
    uint64_t v29 = objc_msgSend_length(v23, v24, v25, v26, v27, v28);
    v131[0] = MEMORY[0x1E4F143A8];
    v131[1] = 3221225472;
    v131[2] = sub_1C4C1CA54;
    v131[3] = &unk_1E64E52C8;
    uint64_t v133 = a3;
    id v30 = v11;
    id v132 = v30;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v17, v31, 0, v29, 2, (uint64_t)v131);

    uint64_t v37 = objc_msgSend_properties(v10, v32, v33, v34, v35, v36);
    uint64_t v38 = [CHTokenizedTextResultToken alloc];
    int v44 = objc_msgSend_strokeIndexes(v10, v39, v40, v41, v42, v43);
    uint64_t v50 = objc_msgSend_wordID(v10, v45, v46, v47, v48, v49);
    objc_msgSend_modelScore(v10, v51, v52, v53, v54, v55);
    double v129 = v56;
    objc_msgSend_recognitionScore(v10, v57, v58, v59, v60, v61);
    double v128 = v62;
    objc_msgSend_combinedScore(v10, v63, v64, v65, v66, v67);
    double v127 = v68;
    objc_msgSend_alignmentScore(v10, v69, v70, v71, v72, v73);
    double v126 = v74;
    uint64_t v80 = objc_msgSend_recognizerSourceLocale(v10, v75, v76, v77, v78, v79);
    uint64_t v86 = objc_msgSend_inputSources(v10, v81, v82, v83, v84, v85);
    uint64_t v92 = objc_msgSend_substrokeCount(v10, v87, v88, v89, v90, v91);
    objc_msgSend_bounds(v10, v93, v94, v95, v96, v97);
    double v99 = v98;
    double v101 = v100;
    double v103 = v102;
    double v105 = v104;
    objc_msgSend_originalBounds(v10, v106, v107, v108, v109, v110);
    uint64_t v117 = v116;
    uint64_t v119 = v118;
    uint64_t v121 = v120;
    uint64_t v123 = v122;
    if (v10) {
      objc_msgSend_principalLines(v10, v111, v112, v113, v114, v115);
    }
    else {
      memset(v130, 0, sizeof(v130));
    }
    uint64_t v124 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v38, v111, (uint64_t)v30, (uint64_t)v44, v50, v37 & 0xFFFFFFFFFFFFFFFBLL, v80, v86 | 0x80, v129, v128, v127, v126, v99, v101, v103, v105, v92, v117, v119,
                     v121,
                     v123,
                     v130);
  }
  else
  {
    uint64_t v124 = 0;
  }

  return v124;
}

void sub_1C4C1C98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1CA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1CA54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = NSString;
  uint64_t v5 = *(uint64_t ***)(a1 + 40);
  id v45 = v3;
  uint64_t v11 = (const char *)objc_msgSend_UTF8String(v45, v6, v7, v8, v9, v10);
  size_t v12 = strlen(v11);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v34 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v34 = v12 | 7;
    }
    uint64_t v35 = v34 + 1;
    p_dst = (long long *)operator new(v34 + 1);
    *((void *)&__dst + 1) = v13;
    int64_t v47 = v35 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_32:
    memmove(p_dst, v11, v13);
    *((unsigned char *)p_dst + v13) = 0;
    uint64_t v16 = v5 + 1;
    uint64_t v15 = v5[1];
    if (v15) {
      goto LABEL_5;
    }
LABEL_33:
    uint64_t v19 = v16;
LABEL_34:
    uint64_t v36 = (char *)operator new(0x58uLL);
    *((_OWORD *)v36 + 2) = __dst;
    *((void *)v36 + 6) = v47;
    int64_t v47 = 0;
    long long __dst = 0uLL;
    *(_OWORD *)(v36 + 56) = 0u;
    *(_OWORD *)(v36 + 72) = 0u;
    *(void *)uint64_t v36 = 0;
    *((void *)v36 + 1) = 0;
    *((void *)v36 + 2) = v19;
    *uint64_t v16 = (uint64_t *)v36;
    uint64_t v37 = (uint64_t *)**v5;
    uint64_t v38 = (uint64_t *)v36;
    if (v37)
    {
      const char *v5 = v37;
      uint64_t v38 = *v16;
    }
    sub_1C4949FD4(v5[1], v38);
    v5[2] = (uint64_t *)((char *)v5[2] + 1);
    uint64_t v39 = v36 + 56;
    if (v36[79] < 0) {
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  HIBYTE(v47) = v12;
  p_dst = &__dst;
  if (v12) {
    goto LABEL_32;
  }
  LOBYTE(__dst) = 0;
  uint64_t v16 = v5 + 1;
  uint64_t v15 = v5[1];
  if (!v15) {
    goto LABEL_33;
  }
LABEL_5:
  if (v47 >= 0) {
    size_t v17 = HIBYTE(v47);
  }
  else {
    size_t v17 = *((void *)&__dst + 1);
  }
  if (v47 >= 0) {
    uint64_t v18 = &__dst;
  }
  else {
    uint64_t v18 = (long long *)__dst;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v19 = (uint64_t **)v15;
      uint64_t v22 = (uint64_t *)v15[4];
      uint64_t v20 = v15 + 4;
      uint64_t v21 = v22;
      int v23 = *((char *)v20 + 23);
      if (v23 >= 0) {
        size_t v24 = *((unsigned __int8 *)v20 + 23);
      }
      else {
        size_t v24 = v20[1];
      }
      if (v23 >= 0) {
        uint64_t v25 = v20;
      }
      else {
        uint64_t v25 = v21;
      }
      if (v24 >= v17) {
        size_t v26 = v17;
      }
      else {
        size_t v26 = v24;
      }
      int v27 = memcmp(v18, v25, v26);
      BOOL v28 = v17 < v24;
      if (v27) {
        BOOL v28 = v27 < 0;
      }
      if (!v28) {
        break;
      }
      uint64_t v15 = *v19;
      uint64_t v16 = v19;
      if (!*v19) {
        goto LABEL_34;
      }
    }
    int v29 = memcmp(v25, v18, v26);
    BOOL v33 = v24 < v17;
    if (v29) {
      BOOL v33 = v29 < 0;
    }
    if (!v33) {
      break;
    }
    uint64_t v15 = v19[1];
    if (!v15)
    {
      uint64_t v16 = v19 + 1;
      goto LABEL_34;
    }
  }
  uint64_t v39 = v19 + 7;
  if (*((char *)v19 + 79) < 0) {
LABEL_37:
  }
    uint64_t v39 = (void *)*v39;
LABEL_38:
  int v44 = objc_msgSend_stringWithCString_encoding_(v4, v30, (uint64_t)v39, 4, v31, v32);
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)__dst);
  }
  objc_msgSend_appendString_(*(void **)(a1 + 32), v40, (uint64_t)v44, v41, v42, v43);
}

void sub_1C4C1CCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1CCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1C4C1CE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1D7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,_Unwind_Exception *exception_object,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,void *a62)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1DB04(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_addObject_(*(void **)(a1 + 32), v4, (uint64_t)v3, v5, v6, v7);
  uint64_t v8 = objc_opt_class();
  uint64_t v14 = objc_msgSend_string(v3, v9, v10, v11, v12, v13);
  uint64_t v18 = objc_msgSend_transliterateStringUsingICUTransliterator__icuTransliterator_(v8, v15, (uint64_t)v14, *(void *)(*(void *)(a1 + 40) + 8), v16, v17);

  uint64_t v19 = [CHTokenizedTextResultToken alloc];
  uint64_t v25 = objc_msgSend_strokeIndexes(v3, v20, v21, v22, v23, v24);
  uint64_t v31 = objc_msgSend_wordID(v3, v26, v27, v28, v29, v30);
  objc_msgSend_modelScore(v3, v32, v33, v34, v35, v36);
  double v119 = v37;
  objc_msgSend_recognitionScore(v3, v38, v39, v40, v41, v42);
  double v118 = v43;
  objc_msgSend_combinedScore(v3, v44, v45, v46, v47, v48);
  double v117 = v49;
  objc_msgSend_alignmentScore(v3, v50, v51, v52, v53, v54);
  double v116 = v55;
  uint64_t v61 = objc_msgSend_properties(v3, v56, v57, v58, v59, v60);
  uint64_t v67 = objc_msgSend_recognizerSourceLocale(v3, v62, v63, v64, v65, v66);
  uint64_t v73 = objc_msgSend_inputSources(v3, v68, v69, v70, v71, v72);
  uint64_t v79 = objc_msgSend_substrokeCount(v3, v74, v75, v76, v77, v78);
  objc_msgSend_bounds(v3, v80, v81, v82, v83, v84);
  double v86 = v85;
  double v88 = v87;
  double v90 = v89;
  double v92 = v91;
  objc_msgSend_originalBounds(v3, v93, v94, v95, v96, v97);
  uint64_t v104 = v103;
  uint64_t v106 = v105;
  uint64_t v108 = v107;
  uint64_t v110 = v109;
  if (v3) {
    objc_msgSend_principalLines(v3, v98, v99, v100, v101, v102);
  }
  else {
    memset(v120, 0, 128);
  }
  double v111 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v19, v98, (uint64_t)v18, (uint64_t)v25, v31, v61, v67, v73 | 8, v119, v118, v117, v116, v86, v88, v90, v92, v79, v104, v106,
                   v108,
                   v110,
                   v120);

  objc_msgSend_addObject_(*(void **)(a1 + 48), v112, (uint64_t)v111, v113, v114, v115);
}

void sub_1C4C1DD20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1DD38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1DD4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1DD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1DD70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1DD80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1DD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C1DDB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

uint64_t sub_1C4C1DDC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4C1DE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHReorderSCTCConfusionStep;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4C1E140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1E258(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = objc_msgSend_string(v3, v4, v5, v6, v7, v8);
  uint64_t v15 = objc_msgSend__crStringByRemovingInvalidArabicDiacritics(v9, v10, v11, v12, v13, v14);

  uint64_t v21 = objc_msgSend_string(v3, v16, v17, v18, v19, v20);
  char isEqualToString = objc_msgSend_isEqualToString_(v15, v22, (uint64_t)v21, v23, v24, v25);

  if (isEqualToString)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v27, (uint64_t)v3, v28, v29, v30);
  }
  else
  {
    uint64_t v31 = [CHTokenizedTextResultToken alloc];
    double v37 = objc_msgSend_strokeIndexes(v3, v32, v33, v34, v35, v36);
    uint64_t v43 = objc_msgSend_wordID(v3, v38, v39, v40, v41, v42);
    objc_msgSend_modelScore(v3, v44, v45, v46, v47, v48);
    double v131 = v49;
    objc_msgSend_recognitionScore(v3, v50, v51, v52, v53, v54);
    double v130 = v55;
    objc_msgSend_combinedScore(v3, v56, v57, v58, v59, v60);
    double v129 = v61;
    objc_msgSend_alignmentScore(v3, v62, v63, v64, v65, v66);
    double v128 = v67;
    uint64_t v73 = objc_msgSend_properties(v3, v68, v69, v70, v71, v72);
    uint64_t v79 = objc_msgSend_recognizerSourceLocale(v3, v74, v75, v76, v77, v78);
    uint64_t v85 = objc_msgSend_inputSources(v3, v80, v81, v82, v83, v84);
    uint64_t v91 = objc_msgSend_substrokeCount(v3, v86, v87, v88, v89, v90);
    objc_msgSend_bounds(v3, v92, v93, v94, v95, v96);
    double v98 = v97;
    double v100 = v99;
    double v102 = v101;
    double v104 = v103;
    objc_msgSend_originalBounds(v3, v105, v106, v107, v108, v109);
    uint64_t v116 = v115;
    uint64_t v118 = v117;
    uint64_t v120 = v119;
    uint64_t v122 = v121;
    if (v3) {
      objc_msgSend_principalLines(v3, v110, v111, v112, v113, v114);
    }
    else {
      memset(v132, 0, 128);
    }
    uint64_t v123 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v31, v110, (uint64_t)v15, (uint64_t)v37, v43, v73, v79, v85 | 0x400, v131, v130, v129, v128, v98, v100, v102, v104, v91, v116, v118,
                     v120,
                     v122,
                     v132);

    objc_msgSend_addObject_(*(void **)(a1 + 32), v124, (uint64_t)v123, v125, v126, v127);
  }
}

void sub_1C4C1E474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1E48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1E4E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1E4FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1E590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1F288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C1F5BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4C1F6CC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4C1F6EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1F6FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1F7E0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4C1F7FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C1F810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4C1F820(uint64_t a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  self;
  uint64_t v8 = objc_msgSend_string(MEMORY[0x1E4F28E78], v3, v4, v5, v6, v7);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v9 = v2;
  uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v26, (uint64_t)v30, 16, v11);
  if (v17)
  {
    uint64_t v18 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)v27 != v18) {
          objc_enumerationMutation(v9);
        }
        uint64_t v20 = objc_msgSend_string(*(void **)(*((void *)&v26 + 1) + 8 * i), v12, v13, v14, v15, v16, (void)v26);
        objc_msgSend_appendString_(v8, v21, (uint64_t)v20, v22, v23, v24);
      }
      uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v26, (uint64_t)v30, 16, v16);
    }
    while (v17);
  }

  return v8;
}

void sub_1C4C1F968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C1F9AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v17 = 0;
  uint64_t v9 = objc_msgSend_length(v3, v4, v5, v6, v7, v8);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4C1FA9C;
  v13[3] = &unk_1E64E2B00;
  v13[4] = a1;
  v13[5] = &v14;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v3, v10, 0, v9, 2, (uint64_t)v13);
  uint64_t v11 = v15[3];
  _Block_object_dispose(&v14, 8);

  return v11;
}

void sub_1C4C1FA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1C4C1FA9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_stringByTrimmingCharactersInSet_(a2, (const char *)a2, *(void *)(*(void *)(a1 + 32) + 8), a4, a5, a6);
  uint64_t v13 = objc_msgSend_length(v7, v8, v9, v10, v11, v12);

  if (v13) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

void sub_1C4C1FB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4C201B8()
{
  JUMPOUT(0x1C4C20248);
}

void sub_1C4C201CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4C201D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4C201E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4C201E8()
{
}

void sub_1C4C201F0()
{
  JUMPOUT(0x1C4C20238);
}

void sub_1C4C201FC()
{
  JUMPOUT(0x1C4C20238);
}

void sub_1C4C2020C()
{
  JUMPOUT(0x1C4C20238);
}

void sub_1C4C20218()
{
  JUMPOUT(0x1C4C20238);
}

void sub_1C4C20228()
{
  JUMPOUT(0x1C4C20238);
}

void sub_1C4C20234()
{
  JUMPOUT(0x1C4C20240);
}

id sub_1C4C20288(uint64_t a1, void *a2)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v9 = objc_msgSend_string(v3, v4, v5, v6, v7, v8);
  long long v138 = 0u;
  long long v139 = 0u;
  long long v136 = 0u;
  long long v137 = 0u;
  id v10 = *(id *)(*(void *)(a1 + 32) + 16);
  uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v136, (uint64_t)v140, 16, v12);
  if (v17)
  {
    uint64_t v18 = *(void *)v137;
    do
    {
      uint64_t v19 = 0;
      uint64_t v20 = v9;
      do
      {
        if (*(void *)v137 != v18) {
          objc_enumerationMutation(v10);
        }
        uint64_t v21 = *(void *)(*((void *)&v136 + 1) + 8 * v19);
        uint64_t v22 = objc_msgSend_objectForKey_(*(void **)(*(void *)(a1 + 32) + 16), v13, v21, v14, v15, v16);
        uint64_t v9 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v20, v23, v21, (uint64_t)v22, v24, v25);

        ++v19;
        uint64_t v20 = v9;
      }
      while (v17 != v19);
      uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v136, (uint64_t)v140, 16, v16);
    }
    while (v17);
  }

  uint64_t v31 = objc_msgSend_string(v3, v26, v27, v28, v29, v30);
  char isEqualToString = objc_msgSend_isEqualToString_(v9, v32, (uint64_t)v31, v33, v34, v35);

  if ((isEqualToString & 1) == 0)
  {
    double v37 = [CHTokenizedTextResultToken alloc];
    uint64_t v43 = objc_msgSend_strokeIndexes(v3, v38, v39, v40, v41, v42);
    uint64_t v49 = objc_msgSend_wordID(v3, v44, v45, v46, v47, v48);
    objc_msgSend_modelScore(v3, v50, v51, v52, v53, v54);
    double v134 = v55;
    objc_msgSend_recognitionScore(v3, v56, v57, v58, v59, v60);
    double v133 = v61;
    objc_msgSend_combinedScore(v3, v62, v63, v64, v65, v66);
    double v132 = v67;
    objc_msgSend_alignmentScore(v3, v68, v69, v70, v71, v72);
    double v131 = v73;
    uint64_t v79 = objc_msgSend_properties(v3, v74, v75, v76, v77, v78);
    uint64_t v85 = objc_msgSend_recognizerSourceLocale(v3, v80, v81, v82, v83, v84);
    uint64_t v91 = objc_msgSend_inputSources(v3, v86, v87, v88, v89, v90);
    uint64_t v97 = objc_msgSend_substrokeCount(v3, v92, v93, v94, v95, v96);
    objc_msgSend_bounds(v3, v98, v99, v100, v101, v102);
    double v104 = v103;
    double v106 = v105;
    double v108 = v107;
    double v110 = v109;
    objc_msgSend_originalBounds(v3, v111, v112, v113, v114, v115);
    uint64_t v122 = v121;
    uint64_t v124 = v123;
    uint64_t v126 = v125;
    uint64_t v128 = v127;
    if (v3) {
      objc_msgSend_principalLines(v3, v116, v117, v118, v119, v120);
    }
    else {
      memset(v135, 0, sizeof(v135));
    }
    uint64_t v129 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v37, v116, (uint64_t)v9, (uint64_t)v43, v49, v79, v85, v91 | 0x80, v134, v133, v132, v131, v104, v106, v108, v110, v97, v122, v124,
             v126,
             v128,
             v135);

    id v3 = (id)v129;
  }

  return v3;
}

void sub_1C4C2058C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C20600(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_1C4C1F820((uint64_t)CHNumberFieldResultReorderingStep, a2);
  uint64_t v7 = sub_1C4C1F820((uint64_t)CHNumberFieldResultReorderingStep, v5);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = v6;
  id v10 = v7;
  if (v8)
  {
    uint64_t v11 = sub_1C4C1F9AC(v8, v9);
    uint64_t v12 = sub_1C4C1F9AC(v8, v10);
    if (v11 < v12) {
      uint64_t v13 = -1;
    }
    else {
      uint64_t v13 = v11 > v12;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

void sub_1C4C206C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C206F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C208D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C208E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C208F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4C20A84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v12 = v6;
  if (a1)
  {
    if (v6)
    {
      id v13 = v6;
    }
    else
    {
      objc_msgSend_string(v5, v7, v8, v9, v10, v11);
      id v13 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v19 = v13;
    if (*(void *)(a1 + 32))
    {
      uint64_t TokenIDForString = LMLanguageModelGetTokenIDForString();
      uint64_t v21 = objc_opt_class();
      uint64_t v23 = objc_msgSend_normalizeLMTokenIDForWord_tokenID_isFromPattern_score_wordLanguageModel_(v21, v22, (uint64_t)v19, TokenIDForString, 0, 0, *(void *)(a1 + 32));
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v24 = objc_msgSend_properties(v5, v14, v15, v16, v17, v18);
    uint64_t v30 = objc_msgSend_inputSources(v5, v25, v26, v27, v28, v29);
    int isInappropriateString = objc_msgSend_isInappropriateString_(*(void **)(a1 + 40), v31, (uint64_t)v19, v32, v33, v34);
    if (v12
      && (objc_msgSend_string(v5, v35, v36, v37, v38, v39),
          uint64_t v41 = objc_claimAutoreleasedReturnValue(),
          char isEqualToString = objc_msgSend_isEqualToString_(v12, v42, (uint64_t)v41, v43, v44, v45),
          v41,
          (isEqualToString & 1) == 0))
    {
      uint64_t v47 = 16;
      if (!isInappropriateString) {
        uint64_t v47 = 0;
      }
      uint64_t v24 = v47 | v24 & 0xFFFFFFFFFFFFFFEFLL;
      v30 |= 8uLL;
    }
    else if (isInappropriateString)
    {
      v24 |= 0x10uLL;
    }
    uint64_t v48 = [CHTokenizedTextResultToken alloc];
    uint64_t v54 = objc_msgSend_strokeIndexes(v5, v49, v50, v51, v52, v53);
    objc_msgSend_modelScore(v5, v55, v56, v57, v58, v59);
    double v127 = v60;
    objc_msgSend_recognitionScore(v5, v61, v62, v63, v64, v65);
    double v126 = v66;
    objc_msgSend_combinedScore(v5, v67, v68, v69, v70, v71);
    double v125 = v72;
    objc_msgSend_alignmentScore(v5, v73, v74, v75, v76, v77);
    double v124 = v78;
    uint64_t v84 = objc_msgSend_recognizerSourceLocale(v5, v79, v80, v81, v82, v83);
    uint64_t v90 = objc_msgSend_substrokeCount(v5, v85, v86, v87, v88, v89);
    objc_msgSend_bounds(v5, v91, v92, v93, v94, v95);
    double v97 = v96;
    double v99 = v98;
    double v101 = v100;
    double v103 = v102;
    objc_msgSend_originalBounds(v5, v104, v105, v106, v107, v108);
    uint64_t v115 = v114;
    uint64_t v117 = v116;
    uint64_t v119 = v118;
    uint64_t v121 = v120;
    if (v5) {
      objc_msgSend_principalLines(v5, v109, v110, v111, v112, v113);
    }
    else {
      memset(v128, 0, 128);
    }
    uint64_t v122 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v48, v109, (uint64_t)v19, (uint64_t)v54, v23, v24, v84, v30, v127, v126, v125, v124, v97, v99, v101, v103, v90, v115, v117,
                     v119,
                     v121,
                     v128);
  }
  else
  {
    uint64_t v122 = 0;
  }

  return v122;
}

void sub_1C4C20D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20D68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C20E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4C20E1C(void *a1, void *a2, void *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v11 = a3;
  if (a1)
  {
    a1 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v6, v7, v8, v9, v10);
    for (unint64_t i = 0; i < objc_msgSend_count(v11, v12, v13, v14, v15, v16); ++i)
    {
      uint64_t v22 = objc_msgSend_objectAtIndexedSubscript_(v11, v18, i, v19, v20, v21);
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      id v23 = v5;
      uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v39, (uint64_t)v43, 16, v25);
      if (v30)
      {
        uint64_t v31 = *(void *)v40;
        do
        {
          for (uint64_t j = 0; j != v30; ++j)
          {
            if (*(void *)v40 != v31) {
              objc_enumerationMutation(v23);
            }
            uint64_t v33 = objc_msgSend_stringByAppendingString_(*(void **)(*((void *)&v39 + 1) + 8 * j), v26, (uint64_t)v22, v27, v28, v29);
            objc_msgSend_addObject_(a1, v34, (uint64_t)v33, v35, v36, v37);
          }
          uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v26, (uint64_t)&v39, (uint64_t)v43, 16, v29);
        }
        while (v30);
      }
    }
  }

  return a1;
}

void sub_1C4C20FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C21DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

void sub_1C4C22214(uint64_t a1, void *a2)
{
  id v22 = a2;
  if ((objc_msgSend_properties(v22, v3, v4, v5, v6, v7) & 0x20) != 0) {
    objc_msgSend_appendString_(*(void **)(a1 + 32), v8, @" ", v10, v11, v12);
  }
  uint64_t v13 = objc_msgSend_string(v22, v8, v9, v10, v11, v12);
  uint64_t v17 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v13, v14, @" ", @"␠", v15, v16);

  objc_msgSend_appendString_(*(void **)(a1 + 32), v18, (uint64_t)v17, v19, v20, v21);
}

void sub_1C4C222B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C222D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C222E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C222FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C22310(uint64_t result)
{
  return result;
}

void sub_1C4C22328(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  id v289 = v6;
  if (*(void *)(a1 + 136))
  {
    objc_msgSend_addObject_(*(void **)(a1 + 56), v7, (uint64_t)v6, v9, v10, v11);
    goto LABEL_60;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)
    && !*(void *)(a4 + 16)
    && objc_msgSend_count(*(void **)(a1 + 32), v7, v8, v9, v10, v11))
  {
    for (unint64_t i = 0; i < objc_msgSend_count(*(void **)(a1 + 40), v7, v8, v9, v10, v11); ++i)
    {
      while (objc_msgSend_count(*(void **)(a1 + 48), v13, v14, v15, v16, v17) <= i)
      {
        id v23 = *(void **)(a1 + 48);
        uint64_t v24 = objc_msgSend_mutableCopy(*(void **)(a1 + 56), v18, v19, v20, v21, v22);
        objc_msgSend_addObject_(v23, v25, (uint64_t)v24, v26, v27, v28);
      }
      uint64_t v29 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v18, i, v20, v21, v22);
      uint64_t v35 = objc_msgSend_count(v29, v30, v31, v32, v33, v34);

      if (v35)
      {
        uint64_t v36 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v7, i, v9, v10, v11);
        uint64_t v37 = *(void **)(a1 + 64);
        long long v42 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v38, i, v39, v40, v41);
        sub_1C4C045E8((uint64_t)CHPostprocessingStep, v36, v37, v42, 0);

        uint64_t v47 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v43, i, v44, v45, v46);
        objc_msgSend_removeAllObjects(v47, v48, v49, v50, v51, v52);
      }
    }
    sub_1C4C045E8((uint64_t)CHPostprocessingStep, *(void **)(a1 + 32), *(void **)(a1 + 64), *(void **)(a1 + 56), *(void **)(a1 + 72));
    objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v53, v54, v55, v56, v57);
    objc_msgSend_removeAllObjects(*(void **)(a1 + 64), v58, v59, v60, v61, v62);
  }
  uint64_t v63 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24);
  uint64_t v64 = objc_msgSend_string(v289, v7, v8, v9, v10, v11);
  uint64_t v70 = objc_msgSend_length(v64, v65, v66, v67, v68, v69);

  uint64_t v76 = objc_msgSend_string(v289, v71, v72, v73, v74, v75);
  uint64_t v82 = v70 + v63;
  *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) += objc_msgSend_length(v76, v77, v78, v79, v80, v81);

  uint64_t v88 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24);
  if (v70 + v63 > v88)
  {
    do
    {
      while (1)
      {
        uint64_t v89 = *(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40);
        uint64_t v90 = *(void **)(a1 + 80);
        uint64_t v91 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 88), v83, *(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24), v85, v86, v87);
        uint64_t v92 = sub_1C4C20E1C(v90, v89, v91);
        uint64_t v93 = *(void *)(*(void *)(a1 + 120) + 8);
        uint64_t v94 = *(void **)(v93 + 40);
        *(void *)(v93 + 40) = v92;

        unint64_t v95 = ++*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24);
        if (v95 < objc_msgSend_count(*(void **)(a1 + 88), v96, v97, v98, v99, v100)) {
          break;
        }
        *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v88 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24);
        if (v82 <= v88) {
          goto LABEL_19;
        }
      }
      double v101 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 88), v83, *(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24), v85, v86, v87);
      uint64_t v107 = objc_msgSend_firstObject(v101, v102, v103, v104, v105, v106);
      *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) += objc_msgSend_length(v107, v108, v109, v110, v111, v112);

      uint64_t v88 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24);
    }
    while (v82 > v88);
  }
LABEL_19:
  if (v82 == v88)
  {
    uint64_t v113 = *(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40);
    uint64_t v114 = *(void **)(a1 + 80);
    uint64_t v115 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 88), v83, *(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24), v85, v86, v87);
    uint64_t v116 = sub_1C4C20E1C(v114, v113, v115);
    uint64_t v117 = *(void *)(*(void *)(a1 + 120) + 8);
    uint64_t v118 = *(void **)(v117 + 40);
    *(void *)(v117 + 40) = v116;

    if ((unint64_t)(objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40), v119, v120, v121, v122, v123)- 4) >= 0xFFFFFFFFFFFFFFFDLL)unint64_t v129 = objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40), v124, v125, v126, v127, v128)- 1; {
    else
    }
      unint64_t v129 = 2;
    if (v129 <= objc_msgSend_count(*(void **)(a1 + 40), v124, v125, v126, v127, v128))
    {
      uint64_t v142 = objc_msgSend_count(*(void **)(a1 + 40), v131, v132, v133, v134, v135);
      uint64_t v141 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
      if (v141) {
        goto LABEL_30;
      }
    }
    else
    {
      if ((unint64_t)(objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40), v131, v132, v133, v134, v135)- 4) < 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v141 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
        uint64_t v142 = 2;
        if (!v141) {
          goto LABEL_43;
        }
LABEL_30:
        sub_1C4964D50(v141, v289);
        if (v142 >= 1)
        {
          unint64_t v148 = 0;
          do
          {
            unint64_t v154 = objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40), v143, v144, v145, v146, v147);
            unint64_t v155 = v148 + 1;
            uint64_t v156 = *(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40);
            if (v148 + 1 >= v154) {
              objc_msgSend_firstObject(v156, v149, v150, v151, v152, v153);
            }
            else {
            uint64_t v157 = objc_msgSend_objectAtIndexedSubscript_(v156, v149, v148 + 1, v151, v152, v153);
            }
            double v163 = sub_1C4C20A84(*(void *)(a1 + 80), *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40), v157);
            while (1)
            {
              unint64_t v164 = objc_msgSend_count(*(void **)(a1 + 40), v158, v159, v160, v161, v162);
              size_t v169 = *(void **)(a1 + 40);
              if (v164 > v148) {
                break;
              }
              unint64_t v170 = objc_msgSend_arrayWithArray_(MEMORY[0x1E4F1CA48], v165, *(void *)(a1 + 32), v166, v167, v168);
              objc_msgSend_addObject_(v169, v171, (uint64_t)v170, v172, v173, v174);
            }
            double v175 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v165, v148, v166, v167, v168);
            objc_msgSend_addObject_(v175, v176, (uint64_t)v163, v177, v178, v179);

            unint64_t v148 = v155;
          }
          while (v155 != v142);
        }
        uint64_t v180 = sub_1C4C20A84(*(void *)(a1 + 80), *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40), 0);
        objc_msgSend_addObject_(*(void **)(a1 + 64), v181, (uint64_t)v180, v182, v183, v184);
        uint64_t v185 = *(void *)(a1 + 80);
        uint64_t v186 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
        uint64_t v192 = objc_msgSend_firstObject(*(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40), v187, v188, v189, v190, v191);
        uint64_t v193 = sub_1C4C20A84(v185, v186, v192);

        objc_msgSend_addObject_(*(void **)(a1 + 32), v194, (uint64_t)v193, v195, v196, v197);
        uint64_t v198 = *(void *)(*(void *)(a1 + 96) + 8);
        uint64_t v199 = *(void **)(v198 + 40);
        *(void *)(v198 + 40) = 0;

        goto LABEL_54;
      }
      uint64_t v142 = objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40), v136, v137, v138, v139, v140)- 1;
      uint64_t v141 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
      if (v141) {
        goto LABEL_30;
      }
    }
    if (v142 < 1)
    {
LABEL_51:
      uint64_t v234 = objc_msgSend_string(v289, v136, v137, v138, v139, v140);
      double v240 = objc_msgSend_firstObject(*(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40), v235, v236, v237, v238, v239);
      int isEqualToString = objc_msgSend_isEqualToString_(v234, v241, (uint64_t)v240, v242, v243, v244);

      if (isEqualToString)
      {
        objc_msgSend_addObject_(*(void **)(a1 + 32), v246, (uint64_t)v289, v248, v249, v250);
        objc_msgSend_addObject_(*(void **)(a1 + 64), v251, (uint64_t)v289, v252, v253, v254);
LABEL_55:
        unint64_t v270 = ++*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24);
        if (v270 >= objc_msgSend_count(*(void **)(a1 + 88), v255, v256, v257, v258, v259))
        {
          *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v275 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 88), v271, *(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24), v272, v273, v274);
          double v281 = objc_msgSend_firstObject(v275, v276, v277, v278, v279, v280);
          *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) += objc_msgSend_length(v281, v282, v283, v284, v285, v286);
        }
        uint64_t v200 = objc_msgSend_arrayWithObject_(MEMORY[0x1E4F1C978], v271, (uint64_t)&stru_1F20141C8, v272, v273, v274);
        uint64_t v201 = *(void *)(a1 + 120);
        goto LABEL_59;
      }
      uint64_t v260 = *(void *)(a1 + 80);
      uint64_t v261 = objc_msgSend_firstObject(*(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40), v246, v247, v248, v249, v250);
      uint64_t v180 = sub_1C4C20A84(v260, v289, v261);

      objc_msgSend_addObject_(*(void **)(a1 + 32), v262, (uint64_t)v180, v263, v264, v265);
      objc_msgSend_addObject_(*(void **)(a1 + 64), v266, (uint64_t)v289, v267, v268, v269);
LABEL_54:

      goto LABEL_55;
    }
LABEL_43:
    unint64_t v202 = 0;
    do
    {
      unint64_t v208 = objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40), v136, v137, v138, v139, v140);
      unint64_t v209 = v202 + 1;
      double v210 = *(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40);
      if (v202 + 1 >= v208) {
        objc_msgSend_firstObject(v210, v203, v204, v205, v206, v207);
      }
      else {
      double v211 = objc_msgSend_objectAtIndexedSubscript_(v210, v203, v202 + 1, v205, v206, v207);
      }
      uint64_t v217 = sub_1C4C20A84(*(void *)(a1 + 80), v289, v211);
      while (1)
      {
        unint64_t v218 = objc_msgSend_count(*(void **)(a1 + 40), v212, v213, v214, v215, v216);
        uint64_t v223 = *(void **)(a1 + 40);
        if (v218 > v202) {
          break;
        }
        uint64_t v224 = objc_msgSend_arrayWithArray_(MEMORY[0x1E4F1CA48], v219, *(void *)(a1 + 32), v220, v221, v222);
        objc_msgSend_addObject_(v223, v225, (uint64_t)v224, v226, v227, v228);
      }
      uint64_t v229 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v219, v202, v220, v221, v222);
      objc_msgSend_addObject_(v229, v230, (uint64_t)v217, v231, v232, v233);

      unint64_t v202 = v209;
    }
    while (v209 != v142);
    goto LABEL_51;
  }
  uint64_t v130 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
  if (v130)
  {
    sub_1C4964D50(v130, v289);
    goto LABEL_60;
  }
  uint64_t v200 = objc_msgSend_mutableCopy(v289, v83, v84, v85, v86, v87);
  uint64_t v201 = *(void *)(a1 + 96);
LABEL_59:
  uint64_t v287 = *(void *)(v201 + 8);
  uint64_t v288 = *(void **)(v287 + 40);
  *(void *)(v287 + 40) = v200;

LABEL_60:
}

void sub_1C4C22B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C22F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHJapaneseTokenizationAndConversionStep;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4C23E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C24154(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4C24160(uint64_t a1, void *a2, unsigned char *a3, unsigned char *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v8 = v7;
  if (a1)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    obuint64_t j = v7;
    uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v32, (uint64_t)v45, 16, v10);
    char v17 = 0;
    char v18 = 0;
    if (v16)
    {
      uint64_t v31 = *(void *)v33;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v33 != v31) {
            objc_enumerationMutation(obj);
          }
          objc_msgSend_string(*(void **)(*((void *)&v32 + 1) + 8 * i), v11, v12, v13, v14, v15);
          id v20 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v41 = 0;
          long long v42 = &v41;
          uint64_t v43 = 0x2020000000;
          char v44 = 0;
          uint64_t v37 = 0;
          uint64_t v38 = &v37;
          uint64_t v39 = 0x2020000000;
          char v40 = 0;
          uint64_t v26 = objc_msgSend_length(v20, v21, v22, v23, v24, v25);
          v36[0] = MEMORY[0x1E4F143A8];
          v36[1] = 3221225472;
          v36[2] = sub_1C4C24534;
          v36[3] = &unk_1E64E5390;
          v36[4] = &v41;
          v36[5] = &v37;
          objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v20, v27, 0, v26, 2, (uint64_t)v36);
          int v28 = *((unsigned __int8 *)v42 + 24);
          int v29 = *((unsigned __int8 *)v38 + 24);
          _Block_object_dispose(&v37, 8);
          _Block_object_dispose(&v41, 8);

          v17 |= v28 != 0;
          v18 |= v29 != 0;
        }
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v32, (uint64_t)v45, 16, v15);
      }
      while (v16);
    }

    if (a3) {
      *a3 = v17 & 1;
    }
    if (a4) {
      *a4 = v18 & 1;
    }
  }
}

void sub_1C4C2439C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4C243F4(uint64_t a1, void *a2, unsigned char *a3, unsigned char *a4)
{
  id v7 = a2;
  uint64_t v13 = v7;
  if (a1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = &v21;
    uint64_t v23 = 0x2020000000;
    char v24 = 0;
    uint64_t v17 = 0;
    char v18 = &v17;
    uint64_t v19 = 0x2020000000;
    char v20 = 0;
    uint64_t v14 = objc_msgSend_length(v7, v8, v9, v10, v11, v12);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = sub_1C4C24534;
    v16[3] = &unk_1E64E5390;
    v16[4] = &v21;
    v16[5] = &v17;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v13, v15, 0, v14, 2, (uint64_t)v16);
    if (a3) {
      *a3 = *((unsigned char *)v22 + 24);
    }
    if (a4) {
      *a4 = *((unsigned char *)v18 + 24);
    }
    _Block_object_dispose(&v17, 8);
    _Block_object_dispose(&v21, 8);
  }
}

void sub_1C4C2450C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1C4C24534(uint64_t a1, void *a2)
{
  uint64_t v9 = a2;
  BOOL v3 = isCharacterLatinScript(v9);
  BOOL v4 = isCharacterCyrillicScript(v9);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v5 + 24)) {
    char v6 = 1;
  }
  else {
    char v6 = v3;
  }
  *(unsigned char *)(v5 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v7 + 24)) {
    char v8 = 1;
  }
  else {
    char v8 = v4;
  }
  *(unsigned char *)(v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
}

void sub_1C4C245B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C245CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C252CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);

  _Unwind_Resume(a1);
}

void sub_1C4C25720(uint64_t *a1, void *a2)
{
  __int16 v3 = 0;
  sub_1C4C243F4(a1[4], a2, (unsigned char *)&v3 + 1, &v3);
  if ((_BYTE)v3) {
    ++*(void *)(*(void *)(a1[5] + 8) + 24);
  }
  if (HIBYTE(v3)) {
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
  }
}

uint64_t sub_1C4C25794(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4C25BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C25D84(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_isTopOriginal(a2, (const char *)a2, a3, a4, a5, a6);
  if ((result & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  return result;
}

void sub_1C4C25DBC(uint64_t **a1, const char *a2, uint64_t a3)
{
  char v6 = a1 + 1;
  uint64_t v7 = (char *)operator new(0x58uLL);
  uint64_t v31 = v7;
  char v8 = v7 + 32;
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v11 = v9 | 7;
    }
    uint64_t v12 = v11 + 1;
    char v8 = operator new(v11 + 1);
    *((void *)v7 + 5) = v10;
    *((void *)v7 + 6) = v12 | 0x8000000000000000;
    *((void *)v7 + 4) = v8;
    goto LABEL_8;
  }
  v7[55] = v9;
  if (v9) {
LABEL_8:
  }
    memcpy(v8, a2, v10);
  *((unsigned char *)v8 + v10) = 0;
  *(_OWORD *)(v7 + 56) = *(_OWORD *)a3;
  *((void *)v7 + 9) = *(void *)(a3 + 16);
  *(void *)(a3 + _Block_object_dispose(&STACK[0x320], 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *((void *)v7 + 10) = *(void *)(a3 + 24);
  uint64_t v13 = (uint64_t *)v7;
  uint64_t v14 = (void *)*v6;
  uint64_t v15 = v6;
  if (*v6)
  {
    int v16 = v7[55];
    if (v16 >= 0) {
      size_t v17 = v7[55];
    }
    else {
      size_t v17 = *((void *)v7 + 5);
    }
    if (v16 >= 0) {
      char v18 = v7 + 32;
    }
    else {
      char v18 = (const void *)*((void *)v7 + 4);
    }
    while (1)
    {
      while (1)
      {
        uint64_t v15 = v14;
        uint64_t v21 = (const void *)v14[4];
        uint64_t v19 = v14 + 4;
        char v20 = v21;
        int v22 = *((char *)v19 + 23);
        if (v22 >= 0) {
          size_t v23 = *((unsigned __int8 *)v19 + 23);
        }
        else {
          size_t v23 = v19[1];
        }
        if (v22 >= 0) {
          char v24 = v19;
        }
        else {
          char v24 = v20;
        }
        if (v23 >= v17) {
          size_t v25 = v17;
        }
        else {
          size_t v25 = v23;
        }
        int v26 = memcmp(v18, v24, v25);
        BOOL v27 = v17 < v23;
        if (v26) {
          BOOL v27 = v26 < 0;
        }
        if (!v27) {
          break;
        }
        uint64_t v14 = (void *)*v15;
        char v6 = v15;
        if (!*v15) {
          goto LABEL_34;
        }
      }
      int v28 = memcmp(v24, v18, v25);
      BOOL v29 = v23 < v17;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (!v29) {
        break;
      }
      uint64_t v14 = (void *)v15[1];
      if (!v14)
      {
        char v6 = v15 + 1;
        goto LABEL_34;
      }
    }
    if (v31)
    {
      if (*((char *)v31 + 79) < 0)
      {
        operator delete((void *)v31[7]);
        LOBYTE(v16) = *((unsigned char *)v31 + 55);
      }
      if ((v16 & 0x80) != 0) {
        operator delete((void *)v31[4]);
      }
      operator delete(v31);
    }
  }
  else
  {
LABEL_34:
    *uint64_t v31 = 0;
    v31[1] = 0;
    v31[2] = v15;
    void *v6 = v31;
    uint64_t v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      uint64_t v13 = (uint64_t *)*v6;
    }
    sub_1C4949FD4(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
}

void sub_1C4C26020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4C26034((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C4C26034(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(char *)(v2 + 79) < 0)
      {
        operator delete(*(void **)(v2 + 56));
        if ((*(char *)(v2 + 55) & 0x80000000) == 0) {
          goto LABEL_5;
        }
      }
      else if ((*(char *)(v2 + 55) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 32));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1C4C260A0(uint64_t a1)
{
  if (a1)
  {
    sub_1C4C260A0(*(void *)a1);
    sub_1C4C260A0(*(void *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_4:
        uint64_t v2 = (void *)a1;
LABEL_6:
        operator delete(v2);
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 32));
    uint64_t v2 = (void *)a1;
    goto LABEL_6;
  }
}

void sub_1C4C26134(void *a1, const char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (CGImage *)objc_msgSend_cgImage(a1, a2, (uint64_t)a3, a4, a5, a6);
  DataProvider = CGImageGetDataProvider(v7);
  CFDataRef v9 = CGDataProviderCopyData(DataProvider);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v9);
  ColorSpace = CGImageGetColorSpace(v7);
  size_t Width = CGImageGetWidth(v7);
  size_t Height = CGImageGetHeight(v7);
  size_t BitsPerComponent = CGImageGetBitsPerComponent(v7);
  size_t BytesPerRow = CGImageGetBytesPerRow(v7);
  uint32_t BitmapInfo = CGImageGetBitmapInfo(v7);
  size_t v17 = CGBitmapContextCreateWithData(BytePtr, Width, Height, BitsPerComponent, BytesPerRow, ColorSpace, BitmapInfo, 0, 0);
  GenericRGB = CGColorCreateGenericRGB(1.0, 0.0, 0.0, 1.0);
  CGContextSetStrokeColorWithColor(v17, GenericRGB);
  uint64_t v19 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v20 = 0;
    do
    {
      CGContextAddPath(v17, *(CGPathRef *)(v19 + 8 * v20++));
      uint64_t v19 = *a3;
    }
    while (v20 < (a3[1] - *a3) >> 3);
  }
  CGContextDrawPath(v17, kCGPathStroke);
  Image = CGBitmapContextCreateImage(v17);
  BOOL v27 = objc_msgSend_UUID(MEMORY[0x1E4F29128], v22, v23, v24, v25, v26);
  long long v33 = objc_msgSend_UUIDString(v27, v28, v29, v30, v31, v32);

  long long v34 = (void *)MEMORY[0x1E4F1CB10];
  long long v35 = NSTemporaryDirectory();
  char v40 = objc_msgSend_fileURLWithPath_(v34, v36, (uint64_t)v35, v37, v38, v39);

  uint64_t v45 = objc_msgSend_stringWithFormat_(NSString, v41, @"image_%@.png", v42, v43, v44, v33);
  objc_msgSend_URLByAppendingPathComponent_(v40, v46, (uint64_t)v45, v47, v48, v49);
  CFURLRef v50 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_identifier((void *)*MEMORY[0x1E4F44460], v51, v52, v53, v54, v55);
  uint64_t v56 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v57 = CGImageDestinationCreateWithURL(v50, v56, 1uLL, 0);

  CGImageDestinationAddImage(v57, Image, 0);
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v58 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v64 = objc_msgSend_absoluteString(v50, v59, v60, v61, v62, v63);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v66 = v64;
    _os_log_impl(&dword_1C492D000, v58, OS_LOG_TYPE_DEFAULT, "VDECT Text detection results saved at URL %@", buf, 0xCu);
  }
  CGImageDestinationFinalize(v57);
  CFRelease(v57);
  CGColorRelease(GenericRGB);
  CGImageRelease(Image);
  CFRelease(v9);
  CGContextRelease(v17);
}

void sub_1C4C26438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C26550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C26638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4C267A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C268D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C268E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C268F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C2690C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C269E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C269FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C26A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4C26A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C26A94(uint64_t a1, uint64_t a2, float *a3)
{
  size_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  char v6 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int64_t v7 = v5 - *(void *)a2;
  if (v5 == *(void *)a2)
  {
    sub_1C4C26B6C(a1, &v10, a3);
  }
  else
  {
    if (v7 < 0) {
      sub_1C494A220();
    }
    char v8 = (double *)operator new(v5 - *(void *)a2);
    size_t v10 = v8;
    uint64_t v12 = &v8[2 * (v7 >> 4)];
    memcpy(v8, v6, v7);
    uint64_t v11 = v12;
    sub_1C4C26B6C(a1, &v10, a3);
    operator delete(v8);
  }
  return a1;
}

void sub_1C4C26B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_1C4C26B6C(uint64_t a1, double **a2, float *a3)
{
  BOOL v4 = *a2;
  __int16 v3 = a2[1];
  uint64_t v5 = (char *)v3 - (char *)*a2;
  *(void *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_1C4C452F0;
  if ((unint64_t)v5 < 0x20)
  {
    float result = 0.0;
    if (!a3) {
      return result;
    }
LABEL_30:
    *a3 = result;
    return result;
  }
  *(double *)&uint64_t v7 = (float)(unint64_t)(v5 >> 4);
  if (v4 == v3)
  {
    double v14 = 0.0;
    *(double *)a1 = 0.0 / *(double *)&v7;
    *(double *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = 0.0 / *(double *)&v7;
    float64x2_t v11 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(0.0 / *(double *)&v7), 0);
    float64x2_t v13 = 0uLL;
    goto LABEL_14;
  }
  float64x2_t v8 = 0uLL;
  CFDataRef v9 = (float64x2_t *)v4;
  do
  {
    float64x2_t v10 = *v9++;
    float64x2_t v8 = vaddq_f64(v8, v10);
    *(float64x2_t *)a1 = v8;
  }
  while (v9 != (float64x2_t *)v3);
  float64x2_t v11 = vdivq_f64(v8, (float64x2_t)vdupq_lane_s64(v7, 0));
  *(float64x2_t *)a1 = v11;
  unint64_t v12 = v5 - 16;
  if (v12 < 0x10)
  {
    float64x2_t v13 = 0uLL;
    double v14 = 0.0;
    uint64_t v15 = (float64x2_t *)v4;
    do
    {
LABEL_13:
      float64x2_t v21 = *v15++;
      float64x2_t v22 = vsubq_f64(v21, v11);
      double v14 = vmlad_n_f64(v14, v22.f64[0], v22.f64[0]);
      float64x2_t v13 = vmlaq_laneq_f64(v13, v22, v22, 1);
    }
    while (v15 != (float64x2_t *)v3);
    goto LABEL_14;
  }
  uint64_t v16 = (v12 >> 4) + 1;
  uint64_t v15 = (float64x2_t *)&v4[2 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
  size_t v17 = (float64x2_t *)(v4 + 2);
  float64x2_t v13 = 0uLL;
  double v14 = 0.0;
  uint64_t v18 = v16 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    float64x2_t v19 = vsubq_f64(v17[-1], v11);
    float64x2_t v20 = vsubq_f64(*v17, v11);
    double v14 = v14 + vmulq_f64(v19, v19).f64[0] + vmulq_f64(v20, v20).f64[0];
    float64x2_t v13 = vaddq_f64(vaddq_f64(v13, vmulq_laneq_f64(v19, v19, 1)), vmulq_laneq_f64(v20, v20, 1));
    v17 += 2;
    v18 -= 2;
  }
  while (v18);
  if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_13;
  }
LABEL_14:
  double v23 = *(double *)&v7 + -1.0;
  double v24 = v14 / (*(double *)&v7 + -1.0);
  if (v24 >= 0.01)
  {
    double v29 = v13.f64[1] / v23;
    if (v13.f64[1] / v23 >= 0.01)
    {
      *(float64_t *)a1 = v11.f64[0];
      double v37 = v13.f64[0] / v23;
      if (v24 >= v29)
      {
        double v38 = v11.f64[0] + 1.0;
        double v39 = v37 / v24;
      }
      else
      {
        double v38 = v11.f64[0] + v37 / v29;
        double v39 = 1.0;
      }
      float v43 = v38 - v11.f64[0];
      float v44 = v11.f64[1] + v39 - v11.f64[1];
      *(float *)(a1 + 20) = v43;
      *(float *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v44;
      float v45 = (float)(v44 * v44) + (float)(v43 * v43);
      *(float *)(a1 + 2_Block_object_dispose(&STACK[0x320], 8) = v45;
      *(float *)(a1 + 32) = sqrtf(v45);
      if (v45 > 0.0)
      {
        float v43 = v43 / v45;
        float v44 = v44 / v45;
        *(float *)(a1 + 20) = v43;
        *(float *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v44;
      }
      *(unsigned char *)(a1 + 16) = 1;
      float result = (*(v3 - 1) - v11.f64[1]) * v44 + (*(v3 - 2) - v11.f64[0]) * v43;
      if (result < 0.0)
      {
        float result = -v43;
        *(float *)(a1 + 20) = -v43;
        *(float *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -v44;
      }
      if (a3)
      {
        double v46 = v29 / v24;
        if (v24 / v29 <= 50.0)
        {
          if (v46 <= 50.0) {
            float result = v37 / (sqrt(v29) * sqrt(v24));
          }
          else {
            float result = 1.0 - v24 / v29;
          }
          *a3 = result;
        }
        else
        {
          float result = 1.0 - v46;
          *a3 = result;
        }
      }
      return result;
    }
    double v30 = *(v3 - 2);
    double v31 = *v4;
    *(float64_t *)a1 = v11.f64[0];
    float v32 = COERCE_DOUBLE(*(void *)&vsubq_f64(v11, v11).f64[1]);
    if (v30 <= v31) {
      double v33 = -1.0;
    }
    else {
      double v33 = 1.0;
    }
    float v40 = v11.f64[0] + v33 - v11.f64[0];
    *(float *)(a1 + 20) = v40;
    *(float *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v32;
    float v41 = (float)(v32 * v32) + (float)(v40 * v40);
    *(float *)(a1 + 2_Block_object_dispose(&STACK[0x320], 8) = v41;
    *(float *)(a1 + 32) = sqrtf(v41);
    if (v41 > 0.0)
    {
      float v42 = v40 / v41;
      float v36 = v32 / v41;
      *(float *)(a1 + 20) = v42;
      goto LABEL_28;
    }
  }
  else
  {
    double v25 = *(v3 - 1);
    double v26 = v4[1];
    *(float64_t *)a1 = v11.f64[0];
    float v27 = vsubq_f64(v11, v11).f64[0];
    *(float *)(a1 + 20) = v27;
    if (v25 <= v26) {
      double v28 = -1.0;
    }
    else {
      double v28 = 1.0;
    }
    float v34 = v11.f64[1] + v28 - v11.f64[1];
    float v35 = (float)(v34 * v34) + (float)(v27 * v27);
    *(float *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v34;
    *(float *)(a1 + 2_Block_object_dispose(&STACK[0x320], 8) = v35;
    *(float *)(a1 + 32) = sqrtf(v35);
    if (v35 > 0.0)
    {
      *(float *)(a1 + 20) = v27 / v35;
      float v36 = v34 / v35;
LABEL_28:
      *(float *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v36;
    }
  }
  *(unsigned char *)(a1 + 16) = 1;
  float result = 1.0;
  if (a3) {
    goto LABEL_30;
  }
  return result;
}

BOOL Projector::intersectionWith(uint64_t a1, uint64_t a2, double *a3)
{
  double v3 = *(float *)(a1 + 20);
  double v4 = *(float *)(a1 + 24);
  double v5 = *(float *)(a2 + 20);
  double v6 = *(float *)(a2 + 24);
  float v7 = v3 * v6 - v5 * v4;
  if (v7 != 0.0)
  {
    double v8 = *(double *)(a1 + 8);
    float v9 = (v5 * (v8 - *(double *)(a2 + 8)) - (*(double *)a1 - *(double *)a2) * v6) / v7;
    double v10 = v9;
    *a3 = *(double *)a1 + v10 * v3;
    a3[1] = v8 + v10 * v4;
  }
  return v7 != 0.0;
}

float sub_1C4C26F10(uint64_t a1, double **a2)
{
  double v3 = *a2;
  uint64_t v2 = a2[1];
  float result = 0.0;
  if ((unint64_t)((char *)v2 - (char *)*a2) >= 0x20)
  {
    double v5 = *(double *)(a1 + 8);
    double v6 = *(float *)(a1 + 20);
    double v7 = *(float *)(a1 + 24);
    double v8 = *(float *)(a1 + 32);
    float v9 = ((v3[1] - v5) * v7 + (*v3 - *(double *)a1) * v6) * v8;
    for (float i = v9; v3 != v2; float i = fmaxf(*(float *)&v11, i))
    {
      double v11 = *v3;
      double v12 = v3[1];
      v3 += 2;
      *(float *)&double v11 = ((v12 - v5) * v7 + (v11 - *(double *)a1) * v6) * v8;
      float v9 = fminf(*(float *)&v11, v9);
    }
    return i - v9;
  }
  return result;
}

float Projector::unitDotProd(float *a1, float *a2)
{
  return a2[8] * (float)(a1[8] * (float)((float)(a1[6] * a2[6]) + (float)(a1[5] * a2[5])));
}

float Projector::dotProd(uint64_t a1, uint64_t a2)
{
  return (float)(*(float *)(a1 + 24) * *(float *)(a2 + 24)) + (float)(*(float *)(a1 + 20) * *(float *)(a2 + 20));
}

id sub_1C4C26FD0()
{
  if (qword_1EA3C9580 == -1)
  {
    v0 = (void *)qword_1EA3C9588;
  }
  else
  {
    dispatch_once(&qword_1EA3C9580, &unk_1F20130B0);
    v0 = (void *)qword_1EA3C9588;
  }
  return v0;
}

void sub_1C4C27040()
{
  int v0 = _os_feature_enabled_impl();
  uint64_t v1 = @"!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~£¥§«°»€•←↑→↓✓①②③④⑤⑥⑦⑧⑨¢äÄëËïÏöÖüÜáÁéÉíÍóÓúÚýÝàÀèÈìÌòÒùÙâÂêÊîÎôÔûÛãÃõÕñÑçÇæÆœŒß¡¿ºª";
  uint64_t v2 = (void *)qword_1EA3C9588;
  if (v0) {
    uint64_t v1 = @"!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~¡¢£¥§ª«°º»¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïñòóôõöøùúûüý\xFFĂăĄąĆćČčĎďĘęĚěĞğİıŁłŃńŇňŒœŘřŚśŞşŠšŤťŮůŸŹźŻżŽžȘșȚț•€₺←↑→↓①②③④⑤⑥⑦⑧⑨✓";
  }
  qword_1EA3C9588 = (uint64_t)v1;
}

uint64_t sub_1C4C2709C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  uint64_t v12 = objc_msgSend_length(a1, v7, v8, v9, v10, v11);
  uint64_t v14 = v12;
  if (a4 < 1)
  {
    if (v12)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      while (1)
      {
        uint64_t v15 = v28;
        uint64_t v29 = objc_msgSend_rangeOfCharacterFromSet_options_range_(a1, v13, (uint64_t)v6, 0, v27, v14);
        if (v29 == 0x7FFFFFFFFFFFFFFFLL) {
          break;
        }
        uint64_t v27 = (uint64_t)&v30[v29];
        if ((unint64_t)&v30[v29] <= objc_msgSend_length(a1, v30, v31, v32, v33, v34))
        {
          uint64_t v40 = objc_msgSend_length(a1, v35, v36, v37, v38, v39);
          uint64_t v28 = v15 + 1;
          uint64_t v14 = v40 - v27;
          if (v40 != v27) {
            continue;
          }
        }
        ++v15;
        break;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    while (v14)
    {
      uint64_t v17 = objc_msgSend_rangeOfCharacterFromSet_options_range_(a1, v13, (uint64_t)v6, 0, v16, v14);
      if (v17 == 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      uint64_t v16 = (uint64_t)&v18[v17];
      if ((unint64_t)&v18[v17] <= objc_msgSend_length(a1, v18, v19, v20, v21, v22))
      {
        uint64_t v14 = objc_msgSend_length(a1, v13, v23, v24, v25, v26) - v16;
        if (a4 == ++v15) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v14 = 0;
        if (a4 == ++v15)
        {
LABEL_8:
          uint64_t v15 = a4;
          break;
        }
      }
    }
  }

  return v15;
}

id sub_1C4C271CC(void *a1, uint64_t a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v10 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v5, v6, v7, v8, v9);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v11 = v4;
  uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v33, (uint64_t)v37, 16, v13);
  if (v14)
  {
    uint64_t v18 = v14;
    uint64_t v19 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v34 != v19) {
          objc_enumerationMutation(v11);
        }
        uint64_t v21 = NSNumber;
        uint64_t v22 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(a1, v15, *(void *)(*((void *)&v33 + 1) + 8 * i), -1, v16, v17, (void)v33);
        uint64_t v27 = objc_msgSend_numberWithInteger_(v21, v23, v22, v24, v25, v26);
        objc_msgSend_addObject_(v10, v28, (uint64_t)v27, v29, v30, v31);
      }
      uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v15, (uint64_t)&v33, (uint64_t)v37, 16, v17);
    }
    while (v18);
  }

  return v10;
}

id sub_1C4C2733C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v15 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v5, v6, v7, v8, v9);
  if (v4)
  {
    uint64_t v16 = objc_msgSend_length(a1, v10, v11, v12, v13, v14);
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = sub_1C4C27428;
    v20[3] = &unk_1E64E53E0;
    id v21 = v4;
    id v22 = v15;
    objc_msgSend_enumerateCodepointsInRange_usingBlock_(a1, v17, 0, v16, (uint64_t)v20, v18);
  }
  return v15;
}

uint64_t sub_1C4C27428(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if (result)
  {
    uint64_t v13 = *(void **)(a1 + 40);
    return objc_msgSend_addIndexesInRange_(v13, v10, a3, a4, v11, v12);
  }
  return result;
}

id sub_1C4C27494(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v13 = v7;
  if (v6 && v7)
  {
    uint64_t v14 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v8, v9, v10, v11, v12);
    v38[0] = 0;
    v38[1] = v38;
    v38[2] = 0x2020000000;
    char v39 = 0;
    v36[0] = 0;
    v36[1] = v36;
    v36[2] = 0x2020000000;
    char v37 = 0;
    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x3010000000;
    v34[3] = &unk_1C4CB5C62;
    long long v35 = xmmword_1C4C3B320;
    uint64_t v20 = objc_msgSend_length(a1, v15, v16, v17, v18, v19);
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = sub_1C4C27694;
    v27[3] = &unk_1E64E5408;
    id v28 = v6;
    id v21 = v14;
    id v29 = v21;
    uint64_t v31 = v36;
    uint64_t v32 = v34;
    long long v33 = v38;
    id v30 = v13;
    objc_msgSend_enumerateCodepointsInRange_usingBlock_(a1, v22, 0, v20, (uint64_t)v27, v23);
    uint64_t v24 = v30;
    id v25 = v21;

    _Block_object_dispose(v34, 8);
    _Block_object_dispose(v36, 8);
    _Block_object_dispose(v38, 8);
  }
  else
  {
    objc_msgSend_indexesOfCharacters_(a1, v8, (uint64_t)v6, v10, v11, v12);
    id v25 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v25;
}

void sub_1C4C27664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

double sub_1C4C27694(uint64_t a1, const char *a2, NSUInteger location, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSUInteger length = a4;
  if (objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6))
  {
    objc_msgSend_addIndexesInRange_(*(void **)(a1 + 40), v10, location, length, v12, v13);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      objc_msgSend_addIndexesInRange_(*(void **)(a1 + 40), v14, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 32), *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v15, v16);
      double result = NAN;
      *(_OWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 32) = xmmword_1C4C3B320;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  else
  {
    int IsMember = objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 48), v10, (uint64_t)a2, v11, v12, v13);
    uint64_t v19 = *(void *)(*(void *)(a1 + 72) + 8);
    if (IsMember)
    {
      uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8);
      if (*(unsigned char *)(v19 + 24) || *(unsigned char *)(v20 + 24))
      {
        *(unsigned char *)(v20 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
        uint64_t v21 = *(void *)(*(void *)(a1 + 64) + 8);
        v22.locatiounint64_t n = *(void *)(v21 + 32);
        if (v22.location != 0x7FFFFFFFFFFFFFFFLL)
        {
          v22.NSUInteger length = *(void *)(v21 + 40);
          v24.locatiounint64_t n = location;
          v24.NSUInteger length = length;
          NSRange v23 = NSUnionRange(v24, v22);
          locatiounint64_t n = v23.location;
          NSUInteger length = v23.length;
          uint64_t v21 = *(void *)(*(void *)(a1 + 64) + 8);
        }
        *(void *)(v21 + 32) = location;
        *(void *)(v21 + 40) = length;
        uint64_t v19 = *(void *)(*(void *)(a1 + 72) + 8);
      }
      *(unsigned char *)(v19 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
    else
    {
      *(unsigned char *)(v19 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      double result = NAN;
      *(_OWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 32) = xmmword_1C4C3B320;
    }
  }
  return result;
}

uint64_t sub_1C4C27800(void *a1, uint64_t a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v4 = a3;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v17, (uint64_t)v21, 16, v6);
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = *(void *)v18;
    while (2)
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v18 != v13) {
          objc_enumerationMutation(v4);
        }
        if (objc_msgSend_containsString_(a1, v8, *(void *)(*((void *)&v17 + 1) + 8 * v14), v9, v10, v11, (void)v17))
        {
          uint64_t v15 = 1;
          goto LABEL_11;
        }
        ++v14;
      }
      while (v12 != v14);
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v17, (uint64_t)v21, 16, v11);
      if (v12) {
        continue;
      }
      break;
    }
  }
  uint64_t v15 = 0;
LABEL_11:

  return v15;
}

uint64_t sub_1C4C2790C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  uint64_t v8 = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_1C4C279EC;
  v12[3] = &unk_1E64E5430;
  v12[4] = &v13;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(a1, v9, 0, v8, a3, (uint64_t)v12);
  uint64_t v10 = v14[3];
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_1C4C279D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C279EC(uint64_t result)
{
  return result;
}

uint64_t sub_1C4C27A04(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  uint64_t v7 = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1C4C27AD8;
  v11[3] = &unk_1E64E5430;
  v11[4] = &v12;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(a1, v8, 0, v7, 514, (uint64_t)v11);
  uint64_t v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_1C4C27AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C27AD8(uint64_t result)
{
  return result;
}

uint64_t sub_1C4C27AF0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  uint64_t v7 = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_1C4C27BC0;
  v12[3] = &unk_1E64E1B20;
  v12[4] = &v13;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(a1, v8, 0, v7, (uint64_t)v12, v9);
  uint64_t v10 = v14[3];
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_1C4C27BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C27BC0(uint64_t result)
{
  return result;
}

uint64_t sub_1C4C27BD8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[0] = 0;
  v7[1] = 0;
  objc_msgSend_codepointAtIndex_outRange_(a1, a2, a3, (uint64_t)v7, a5, a6);
  return v7[0];
}

uint64_t sub_1C4C27C04(void *a1, const char *a2, uint64_t a3, int64x2_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a3;
  uint64_t v14 = objc_msgSend_characterAtIndex_(a1, a2, a3, (uint64_t)a4, a5, a6);
  int64x2_t v15 = vdupq_n_s64(1uLL);
  v15.i64[0] = v7;
  if ((v14 & 0xFC00) == 0xD800)
  {
    int64x2_t v24 = v15;
    if (v7 + 1 >= (unint64_t)objc_msgSend_length(a1, v9, v10, v11, v12, v13)) {
      goto LABEL_10;
    }
    int v20 = objc_msgSend_characterAtIndex_(a1, v16, v7 + 1, v17, v18, v19);
    if ((v20 & 0xFC00) != 0xDC00) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v7 && (v14 & 0xFC00) == 0xDC00)
  {
    int64x2_t v24 = v15;
    int v21 = objc_msgSend_characterAtIndex_(a1, v9, --v7, v11, v12, v13);
    if ((v21 & 0xFC00) != 0xD800)
    {
LABEL_10:
      int64x2_t v15 = v24;
      goto LABEL_11;
    }
    int v22 = v21;
    int v20 = v14;
    LODWORD(v14) = v22;
LABEL_9:
    uint64_t v14 = (v20 + (v14 << 10) - 56613888);
    int64x2_t v15 = vdupq_n_s64(2uLL);
    v15.i64[0] = v7;
  }
LABEL_11:
  if (a4) {
    *a4 = v15;
  }
  return v14;
}

uint64_t sub_1C4C27D10(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  if (result)
  {
    return objc_msgSend_codepointAtIndex_outRange_(a1, v8, 0, 0, v9, v10);
  }
  return result;
}

uint64_t sub_1C4C27D60(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_enumerateCodepointsInRange_reverse_usingBlock_(a1, a2, a3, a4, 0, a5);
}

void sub_1C4C27D6C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  char v6 = a5;
  uint64_t v8 = a4 - 1;
  if (a5) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = a4;
  }
  if (!a5) {
    uint64_t v8 = 0;
  }
  uint64_t v10 = v8 + a3;
  uint64_t v11 = v9 + a3;
  BOOL v12 = v8 + a3 < v9 + a3;
  int v13 = !v12;
  if (a5) {
    int v14 = v13;
  }
  else {
    int v14 = v12;
  }
  uint64_t v18 = a6;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  char v21 = 0;
  if (v14 == 1)
  {
    if (v6)
    {
      do
      {
        uint64_t v19 = objc_msgSend_codepointAtIndex_outRange_(a1, v15, v10, (uint64_t)&v22, v16, v17);
        char v21 = 0;
        v18[2](v18, v19, v22, v23, &v21);
        if (v21) {
          break;
        }
        uint64_t v10 = v22 - 1;
      }
      while (v22 - 1 >= v11);
    }
    else
    {
      do
      {
        uint64_t v20 = objc_msgSend_codepointAtIndex_outRange_(a1, v15, v10, (uint64_t)&v22, v16, v17);
        char v21 = 0;
        v18[2](v18, v20, v22, v23, &v21);
        if (v21) {
          break;
        }
        uint64_t v10 = v23 + v22;
      }
      while (v23 + v22 < v11);
    }
  }
}

id sub_1C4C27E84(void *a1, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (objc_msgSend_length(a1, a2, a3, a4, a5, a6) <= a3)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v12 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(a1, v8, a3, v9, v10, v11);
    uint64_t v16 = objc_msgSend_substringWithRange_(a1, v13, v12, (uint64_t)v13, v14, v15);
  }
  return v16;
}

uint64_t sub_1C4C27F04(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = objc_msgSend_length(a1, a2, a3, a4, a5, a6) - 1;
  return objc_msgSend_composedCharacterAtIndex_(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1C4C27F40(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_composedCharacterAtIndex_(a1, a2, 0, a4, a5, a6);
}

id sub_1C4C27F48(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2020000000;
  v20[3] = 0;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x3032000000;
  uint64_t v17 = sub_1C4C280B4;
  uint64_t v18 = sub_1C4C280C4;
  uint64_t v19 = &stru_1F20141C8;
  uint64_t v9 = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4C280CC;
  v13[3] = &unk_1E64E5458;
  void v13[6] = a3;
  v13[7] = a4;
  v13[4] = v20;
  v13[5] = &v14;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(a1, v10, 0, v9, 2, (uint64_t)v13);
  id v11 = (id)v15[5];
  _Block_object_dispose(&v14, 8);

  _Block_object_dispose(v20, 8);
  return v11;
}

void sub_1C4C28090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C280B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4C280C4(uint64_t a1)
{
}

void sub_1C4C280CC(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v9 = a2;
  uint64_t v13 = *(void *)(a1[4] + 8);
  unint64_t v14 = *(void *)(v13 + 24);
  unint64_t v15 = a1[6];
  BOOL v17 = v14 >= v15;
  unint64_t v16 = v14 - v15;
  BOOL v17 = !v17 || v16 >= a1[7];
  char v21 = (char *)v9;
  if (!v17)
  {
    uint64_t v18 = objc_msgSend_stringByAppendingString_(*(void **)(*(void *)(a1[5] + 8) + 40), v9, (uint64_t)v9, v10, v11, v12);
    uint64_t v19 = *(void *)(a1[5] + 8);
    uint64_t v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;

    uint64_t v13 = *(void *)(a1[4] + 8);
    unint64_t v14 = *(void *)(v13 + 24);
  }
  *(void *)(v13 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14 + 1;
  if (*(void *)(*(void *)(a1[4] + 8) + 24) > a1[7] + a1[6]) {
    *a7 = 1;
  }
}

unint64_t sub_1C4C28198(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  if (result)
  {
    uint64_t v13 = objc_msgSend_length(a1, v8, v9, v10, v11, v12);
    uint64_t v17 = objc_msgSend_codepointAtIndex_outRange_(a1, v14, v13 - 1, 0, v15, v16);
    return ((unint64_t)objc_msgSend_characterType_(CHCharacterSetRules, v18, v17, v19, v20, v21) >> 6) & 1;
  }
  return result;
}

uint64_t sub_1C4C281EC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 1;
  uint64_t v13 = 0;
  unint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  uint64_t v7 = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_1C4C28308;
  v12[3] = &unk_1E64E5480;
  v12[4] = &v17;
  void v12[5] = &v13;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(a1, v8, 0, v7, 2, (uint64_t)v12);
  int v9 = *((unsigned __int8 *)v18 + 24);
  uint64_t v10 = v9 & (*((unsigned __int8 *)v14 + 24) ^ 1u);
  *((unsigned char *)v18 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9 & (*((unsigned char *)v14 + 24) ^ 1);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v10;
}

void sub_1C4C282E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C28308(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t result = objc_msgSend_isEqualToString_(a2, (const char *)a2, @".", a4, a5, a6);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v12 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == result
     && *(unsigned char *)(v10 + 24) != 0;
  *(unsigned char *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v12;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) ^= 1u;
  *a7 = *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^ 1;
  return result;
}

uint64_t sub_1C4C28388(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v6 = a4;
  uint64_t v11 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(a1, v7, a3, v8, v9, v10);
  uint64_t v13 = (uint64_t)v12;
  UChar32 v17 = objc_msgSend_characterAtIndex_(a1, v12, a3, v14, v15, v16);
  int32_t IntPropertyValue = u_getIntPropertyValue(v17, UCHAR_GRAPHEME_CLUSTER_BREAK);
  if (a3 && IntPropertyValue == 10)
  {
    uint64_t v24 = a3 - 1;
    do
    {
      uint64_t v11 = objc_msgSend_rangeOfComposedCharacterSequencesForRange_(a1, v19, v24, v13, v22, v23);
      uint64_t v13 = (uint64_t)v25;
      UChar32 v29 = objc_msgSend_characterAtIndex_(a1, v25, v24, v26, v27, v28);
      int32_t v30 = u_getIntPropertyValue(v29, UCHAR_GRAPHEME_CLUSTER_BREAK);
      BOOL v31 = v24-- != 0;
    }
    while (v31 && v30 == 10);
  }
  uint64_t v32 = v11 + v13;
  if (v11 + v13 < (unint64_t)objc_msgSend_length(a1, v19, v20, v21, v22, v23))
  {
    do
    {
      UChar32 v37 = objc_msgSend_characterAtIndex_(a1, v33, v32, v34, v35, v36);
      if (u_getIntPropertyValue(v37, UCHAR_GRAPHEME_CLUSTER_BREAK) != 10) {
        break;
      }
      uint64_t v11 = objc_msgSend_rangeOfComposedCharacterSequencesForRange_(a1, v38, v11, v13 + 1, v39, v40);
      uint64_t v13 = (uint64_t)v41;
      uint64_t v32 = (uint64_t)&v41[v11];
    }
    while ((unint64_t)&v41[v11] < objc_msgSend_length(a1, v41, v42, v43, v44, v45));
  }
  if (v6[2](v6, v11, v13)) {
    uint64_t v46 = v32;
  }
  else {
    uint64_t v46 = v11;
  }

  return v46;
}

uint64_t sub_1C4C284BC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_1EA3C9598 == -1)
  {
    uint64_t result = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
    if (!result) {
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3C9598, &unk_1F20111B0);
    uint64_t result = objc_msgSend_length(a1, v12, v13, v14, v15, v16);
    if (!result) {
      return result;
    }
  }
  return objc_msgSend_rangeOfCharacterFromSet_(a1, v8, qword_1EA3C9590, v9, v10, v11) == 0x7FFFFFFFFFFFFFFFLL;
}

void sub_1C4C28538(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_uppercaseLetterCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = objc_msgSend_invertedSet(v13, v6, v7, v8, v9, v10);
  BOOL v12 = (void *)qword_1EA3C9590;
  qword_1EA3C9590 = v11;
}

id sub_1C4C28594()
{
  if (qword_1EA3C95A0 == -1)
  {
    int v0 = (void *)qword_1EA3C95A8;
  }
  else
  {
    dispatch_once(&qword_1EA3C95A0, &unk_1F2013CE8);
    int v0 = (void *)qword_1EA3C95A8;
  }
  return v0;
}

void sub_1C4C28604()
{
  int v0 = (void *)qword_1EA3C95A8;
  qword_1EA3C95A8 = (uint64_t)&unk_1F203D238;
}

BOOL sub_1C4C2861C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_1EA3C95B8 != -1) {
    dispatch_once(&qword_1EA3C95B8, &unk_1F2013D08);
  }
  return objc_msgSend_rangeOfCharacterFromSet_(a1, a2, qword_1EA3C95B0, a4, a5, a6) != 0x7FFFFFFFFFFFFFFFLL;
}

void sub_1C4C28680(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6 = objc_msgSend_alternativeCharacterForms(NSString, a2, a3, a4, a5, a6);
  BOOL v12 = objc_msgSend_allKeys(v6, v7, v8, v9, v10, v11);
  objc_msgSend_componentsJoinedByString_(v12, v13, (uint64_t)&stru_1F20141C8, v14, v15, v16);
  id v23 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v21 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v17, (uint64_t)v23, v18, v19, v20);
  uint64_t v22 = (void *)qword_1EA3C95B0;
  qword_1EA3C95B0 = v21;
}

uint64_t sub_1C4C28718(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v51 = 0;
  uint64_t v52 = &v51;
  uint64_t v53 = 0x2020000000;
  BOOL v54 = 0;
  uint64_t v7 = objc_msgSend_ch_descenderCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  BOOL v12 = objc_msgSend_rangeOfCharacterFromSet_(a1, v8, (uint64_t)v7, v9, v10, v11) != 0x7FFFFFFFFFFFFFFFLL;

  BOOL v54 = v12;
  uint64_t v18 = objc_msgSend_alternativeCharacterForms(NSString, v13, v14, v15, v16, v17);
  uint64_t v24 = objc_msgSend_allValues(v18, v19, v20, v21, v22, v23);
  UChar32 v29 = objc_msgSend_componentsJoinedByString_(v24, v25, (uint64_t)&stru_1F20141C8, v26, v27, v28);

  uint64_t v35 = objc_msgSend_length(v29, v30, v31, v32, v33, v34);
  v50[0] = MEMORY[0x1E4F143A8];
  v50[1] = 3221225472;
  v50[2] = sub_1C4C28900;
  v50[3] = &unk_1E64E54D0;
  v50[4] = a1;
  v50[5] = &v51;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v29, v36, 0, v35, 2, (uint64_t)v50);
  uint64_t v42 = objc_msgSend_length(a1, v37, v38, v39, v40, v41);
  v47[0] = MEMORY[0x1E4F143A8];
  v47[1] = 3221225472;
  v47[2] = sub_1C4C28970;
  v47[3] = &unk_1E64E54A8;
  id v48 = &unk_1F203DE90;
  uint64_t v49 = &v51;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(a1, v43, 0, v42, (uint64_t)v47, v44);
  uint64_t v45 = *((unsigned __int8 *)v52 + 24);

  _Block_object_dispose(&v51, 8);
  return v45;
}

void sub_1C4C288D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C4C288E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4C28900(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(*(void *)(result + 40) + 8);
  if (*(unsigned char *)(v9 + 24))
  {
    BOOL v10 = 1;
  }
  else
  {
    uint64_t result = objc_msgSend_rangeOfString_(*(void **)(result + 32), a2, (uint64_t)a2, a4, a5, a6);
    BOOL v10 = result != 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v9 = *(void *)(*(void *)(v8 + 40) + 8);
  }
  *(unsigned char *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
  *a7 = *(unsigned char *)(*(void *)(*(void *)(v8 + 40) + 8) + 24);
  return result;
}

void sub_1C4C28970(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v8 + 24))
  {
    *(unsigned char *)(v8 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v9 = *(void **)(a1 + 32);
    BOOL v10 = objc_msgSend_numberWithUnsignedInt_(NSNumber, a2, (uint64_t)a2, a4, (uint64_t)a5, a6);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = objc_msgSend_containsObject_(v9, v11, (uint64_t)v10, v12, v13, v14);
  }
  *a5 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

uint64_t sub_1C4C28A00(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v17 = 0;
  uint64_t v7 = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1C4C28AE4;
  v11[3] = &unk_1E64E54D0;
  id v12 = &unk_1F203DEA8;
  uint64_t v13 = &v14;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(a1, v8, 0, v7, 2, (uint64_t)v11);
  uint64_t v9 = v15[3];

  _Block_object_dispose(&v14, 8);
  return v9;
}

void sub_1C4C28ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4C28AE4(uint64_t a1, void *a2)
{
  id v45 = a2;
  uint64_t v8 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v3, v4, v5, v6, v7);
  uint64_t v13 = objc_msgSend_stringByTrimmingCharactersInSet_(v45, v9, (uint64_t)v8, v10, v11, v12);

  if (objc_msgSend_length(v13, v14, v15, v16, v17, v18))
  {
    if (objc_msgSend_containsObject_(*(void **)(a1 + 32), v19, (uint64_t)v45, v20, v21, v22))
    {
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
    else
    {
      uint64_t v28 = objc_msgSend_ch_nonAscenderCharacterSet(MEMORY[0x1E4F28B88], v23, v24, v25, v26, v27);
      uint64_t v33 = objc_msgSend_indexesOfCharacters_(v45, v29, (uint64_t)v28, v30, v31, v32);

      uint64_t v39 = objc_msgSend_count(v33, v34, v35, v36, v37, v38);
      if (v39 != objc_msgSend_length(v45, v40, v41, v42, v43, v44)) {
        ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      }
    }
  }
}

BOOL sub_1C4C28BF0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_ascendersCount(a1, a2, a3, a4, a5, a6) != 0;
}

uint64_t sub_1C4C28C10(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int hasAscender = objc_msgSend_hasAscender(a1, a2, a3, a4, a5, a6);
  uint64_t v13 = objc_msgSend_ch_aboveXHeightCharacterSet(MEMORY[0x1E4F28B88], v8, v9, v10, v11, v12);
  uint64_t v18 = objc_msgSend_rangeOfCharacterFromSet_(a1, v14, (uint64_t)v13, v15, v16, v17);

  uint64_t v24 = objc_msgSend_ch_xHeightCharacterSet(MEMORY[0x1E4F28B88], v19, v20, v21, v22, v23);
  uint64_t v29 = objc_msgSend_rangeOfCharacterFromSet_(a1, v25, (uint64_t)v24, v26, v27, v28);

  if (v29 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  else {
    return (v18 == 0x7FFFFFFFFFFFFFFFLL) & ~hasAscender;
  }
}

id sub_1C4C28CC4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v11 = objc_msgSend_count(a1, v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_arrayWithCapacity_(v5, v12, v11, v13, v14, v15);
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = sub_1C4C28DAC;
  v26[3] = &unk_1E64E54F8;
  id v28 = v4;
  id v17 = v16;
  id v27 = v17;
  id v18 = v4;
  objc_msgSend_enumerateObjectsUsingBlock_(a1, v19, (uint64_t)v26, v20, v21, v22);
  uint64_t v23 = v27;
  id v24 = v17;

  return v24;
}

void sub_1C4C28DAC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(*(void **)(a1 + 32), v2, (uint64_t)v6, v3, v4, v5);
}

id sub_1C4C28E0C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_1C4C28EE8;
  v20[3] = &unk_1E64E5520;
  id v21 = v6;
  id v7 = v6;
  id v8 = a3;
  uint64_t v13 = objc_msgSend_ch_mappedArrayWithBlock_(a1, v9, (uint64_t)v20, v10, v11, v12);
  id v18 = objc_msgSend_componentsJoinedByString_(v13, v14, (uint64_t)v8, v15, v16, v17);

  return v18;
}

uint64_t sub_1C4C28EE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

BOOL sub_1C4C28EF8(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v10 = objc_msgSend_mutableCopy(a1, v5, v6, v7, v8, v9);
  objc_msgSend_addIndexes_(v10, v11, (uint64_t)v4, v12, v13, v14);
  uint64_t v20 = objc_msgSend_count(v10, v15, v16, v17, v18, v19);
  uint64_t v26 = objc_msgSend_count(a1, v21, v22, v23, v24, v25);
  uint64_t v32 = objc_msgSend_count(v4, v27, v28, v29, v30, v31);

  return v20 != v32 + v26;
}

id sub_1C4C28F80()
{
  if (qword_1EA3C9708 == -1)
  {
    int v0 = (void *)qword_1EA3C95C0;
  }
  else
  {
    dispatch_once(&qword_1EA3C9708, &unk_1F2013D28);
    int v0 = (void *)qword_1EA3C95C0;
  }
  return v0;
}

void sub_1C4C28FF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, (uint64_t)&stru_1F20141C8, a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C95C0;
  qword_1EA3C95C0 = v6;
}

id sub_1C4C29038()
{
  if (qword_1EA3C9710 == -1)
  {
    int v0 = (void *)qword_1EA3C95C8;
  }
  else
  {
    dispatch_once(&qword_1EA3C9710, &unk_1F2013D48);
    int v0 = (void *)qword_1EA3C95C8;
  }
  return v0;
}

void sub_1C4C290A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @".,!?;:，。，！？：",
    a4,
    a5,
  uint64_t v6 = a6);
  uint64_t v7 = (void *)qword_1EA3C95C8;
  qword_1EA3C95C8 = v6;
}

id sub_1C4C290F0()
{
  if (qword_1EA3C9718 == -1)
  {
    int v0 = (void *)qword_1EA3C95D0;
  }
  else
  {
    dispatch_once(&qword_1EA3C9718, &unk_1F2013D68);
    int v0 = (void *)qword_1EA3C95D0;
  }
  return v0;
}

void sub_1C4C29160(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"¡¿", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C95D0;
  qword_1EA3C95D0 = v6;
}

id sub_1C4C291A8()
{
  if (qword_1EA3C9720 == -1)
  {
    int v0 = (void *)qword_1EA3C95E8;
  }
  else
  {
    dispatch_once(&qword_1EA3C9720, &unk_1F20109C0);
    int v0 = (void *)qword_1EA3C95E8;
  }
  return v0;
}

void sub_1C4C29218(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C95E8;
  qword_1EA3C95E8 = v6;
}

id sub_1C4C29260()
{
  if (qword_1EA3C9728 == -1)
  {
    int v0 = (void *)qword_1EA3C95F0;
  }
  else
  {
    dispatch_once(&qword_1EA3C9728, &unk_1F20109E0);
    int v0 = (void *)qword_1EA3C95F0;
  }
  return v0;
}

void sub_1C4C292D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C95F0;
  qword_1EA3C95F0 = v6;
}

id sub_1C4C29318()
{
  if (qword_1EA3C9730 == -1)
  {
    int v0 = (void *)qword_1EA3C95D8;
  }
  else
  {
    dispatch_once(&qword_1EA3C9730, &unk_1F2013D88);
    int v0 = (void *)qword_1EA3C95D8;
  }
  return v0;
}

void sub_1C4C29388(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~£¥§«°»€•←↑→↓✓①②③④⑤⑥⑦⑧⑨¢",
    a4,
    a5,
  uint64_t v6 = a6);
  uint64_t v7 = (void *)qword_1EA3C95D8;
  qword_1EA3C95D8 = v6;
}

id sub_1C4C293D0()
{
  if (qword_1EA3C9738 == -1)
  {
    int v0 = (void *)qword_1EA3C95E0;
  }
  else
  {
    dispatch_once(&qword_1EA3C9738, &unk_1F2013DA8);
    int v0 = (void *)qword_1EA3C95E0;
  }
  return v0;
}

void sub_1C4C29440(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = (void *)MEMORY[0x1E4F28B88];
  objc_msgSend_ch_latinCharacterString(NSString, a2, a3, a4, a5, a6);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = objc_msgSend_characterSetWithCharactersInString_(v6, v7, (uint64_t)v13, v8, v9, v10);
  uint64_t v12 = (void *)qword_1EA3C95E0;
  qword_1EA3C95E0 = v11;
}

id sub_1C4C294B4()
{
  if (qword_1EA3C9740 == -1)
  {
    int v0 = (void *)qword_1EA3C95F8;
  }
  else
  {
    dispatch_once(&qword_1EA3C9740, &unk_1F2013DC8);
    int v0 = (void *)qword_1EA3C95F8;
  }
  return v0;
}

void sub_1C4C29524(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"АаБбВвГгҐґДдЕеЄєЁёЖжЗзІіЇїИиЙйКкЛлМмНнОоПпРрСсТтУуФфХхЦцЧчШшЩщЪъЫыЬьЭэЮюЯя", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C95F8;
  qword_1EA3C95F8 = v6;
}

id sub_1C4C2956C()
{
  if (qword_1EA3C9748 == -1)
  {
    int v0 = (void *)qword_1EA3C9600;
  }
  else
  {
    dispatch_once(&qword_1EA3C9748, &unk_1F2013DE8);
    int v0 = (void *)qword_1EA3C9600;
  }
  return v0;
}

void sub_1C4C295DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_arrayWithObjects_(MEMORY[0x1E4F1C978], a2, @"ء", a4, a5, a6, @"آ", @"أ", @"ؤ", @"ئ", @"ا", @"ب", @"ة", @"ت", @"ث", @"ج", @"ح", @"خ", @"د",
    @"ذ",
    @"ر",
    @"ز",
    @"س",
    @"ش",
    @"ص",
    @"ض",
    @"ط",
    @"ظ",
    @"ع",
    @"غ",
    @"ف",
    @"ق",
    @"ك",
    @"ل",
    @"م",
    @"ن",
    @"ه",
    @"و",
    @"ى",
    @"ي",
  uint64_t v18 = 0);
  uint64_t v6 = (void *)MEMORY[0x1E4F28B88];
  uint64_t v11 = objc_msgSend_componentsJoinedByString_(v18, v7, (uint64_t)&stru_1F20141C8, v8, v9, v10);
  uint64_t v16 = objc_msgSend_characterSetWithCharactersInString_(v6, v12, (uint64_t)v11, v13, v14, v15);
  uint64_t v17 = (void *)qword_1EA3C9600;
  qword_1EA3C9600 = v16;
}

id sub_1C4C297D0()
{
  if (qword_1EA3C9750 == -1)
  {
    int v0 = (void *)qword_1EA3C9608;
  }
  else
  {
    dispatch_once(&qword_1EA3C9750, &unk_1F2011250);
    int v0 = (void *)qword_1EA3C9608;
  }
  return v0;
}

void sub_1C4C29840(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"٠١٢٣٤٥٦٧٨٩", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9608;
  qword_1EA3C9608 = v6;
}

id sub_1C4C29888()
{
  if (qword_1EA3C9758 == -1)
  {
    int v0 = (void *)qword_1EA3C9610;
  }
  else
  {
    dispatch_once(&qword_1EA3C9758, &unk_1F2011270);
    int v0 = (void *)qword_1EA3C9610;
  }
  return v0;
}

void sub_1C4C298F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = objc_msgSend_arrayWithObjects_(MEMORY[0x1E4F1C978], a2, @"ً", a4, a5, a6, @"ٌ", @"ٍ", @"َ", @"ُ", @"ِ", @"ّ", @"ْ", 0);
  uint64_t v6 = (void *)MEMORY[0x1E4F28B88];
  uint64_t v11 = objc_msgSend_componentsJoinedByString_(v18, v7, (uint64_t)&stru_1F20141C8, v8, v9, v10);
  uint64_t v16 = objc_msgSend_characterSetWithCharactersInString_(v6, v12, (uint64_t)v11, v13, v14, v15);
  uint64_t v17 = (void *)qword_1EA3C9610;
  qword_1EA3C9610 = v16;
}

id sub_1C4C299D4()
{
  if (qword_1EA3C9760 == -1)
  {
    int v0 = (void *)qword_1EA3C9620;
  }
  else
  {
    dispatch_once(&qword_1EA3C9760, &unk_1F2013E08);
    int v0 = (void *)qword_1EA3C9620;
  }
  return v0;
}

void sub_1C4C29A44(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_arrayWithObjects_(MEMORY[0x1E4F1C978], a2, @"ً", a4, a5, a6, @"ٌ", @"ٍ", 0);
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = (void *)MEMORY[0x1E4F28B88];
  uint64_t v11 = objc_msgSend_componentsJoinedByString_(v18, v7, (uint64_t)&stru_1F20141C8, v8, v9, v10);
  uint64_t v16 = objc_msgSend_characterSetWithCharactersInString_(v6, v12, (uint64_t)v11, v13, v14, v15);
  uint64_t v17 = (void *)qword_1EA3C9620;
  qword_1EA3C9620 = v16;
}

id sub_1C4C29AF0()
{
  if (qword_1EA3C9768 == -1)
  {
    int v0 = (void *)qword_1EA3C9618;
  }
  else
  {
    dispatch_once(&qword_1EA3C9768, &unk_1F20112D0);
    int v0 = (void *)qword_1EA3C9618;
  }
  return v0;
}

void sub_1C4C29B60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v18 = objc_msgSend_arrayWithObjects_(MEMORY[0x1E4F1C978], a2, @"ً", a4, a5, a6, @"ٌ", @"ٍ", @"َ", @"ُ", @"ِ", @"ّ", @"ْ", 0);
  uint64_t v6 = (void *)MEMORY[0x1E4F28B88];
  uint64_t v11 = objc_msgSend_componentsJoinedByString_(v18, v7, (uint64_t)&stru_1F20141C8, v8, v9, v10);
  uint64_t v16 = objc_msgSend_characterSetWithCharactersInString_(v6, v12, (uint64_t)v11, v13, v14, v15);
  uint64_t v17 = (void *)qword_1EA3C9618;
  qword_1EA3C9618 = v16;
}

id sub_1C4C29C3C()
{
  if (qword_1EA3C9770 == -1)
  {
    int v0 = (void *)qword_1EA3C9628;
  }
  else
  {
    dispatch_once(&qword_1EA3C9770, &unk_1F20112F0);
    int v0 = (void *)qword_1EA3C9628;
  }
  return v0;
}

void sub_1C4C29CAC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"ЁёЪъЭэЫы", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9628;
  qword_1EA3C9628 = v6;
}

id sub_1C4C29CF4()
{
  if (qword_1EA3C9778 == -1)
  {
    int v0 = (void *)qword_1EA3C9630;
  }
  else
  {
    dispatch_once(&qword_1EA3C9778, &unk_1F2013E28);
    int v0 = (void *)qword_1EA3C9630;
  }
  return v0;
}

void sub_1C4C29D64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithRange_(MEMORY[0x1E4F28B88], a2, 19968, 20928, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9630;
  qword_1EA3C9630 = v6;
}

id sub_1C4C29DAC()
{
  if (qword_1EA3C9780 == -1)
  {
    int v0 = (void *)qword_1EA3C9638;
  }
  else
  {
    dispatch_once(&qword_1EA3C9780, &unk_1F2010AC0);
    int v0 = (void *)qword_1EA3C9638;
  }
  return v0;
}

void sub_1C4C29E1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithRange_(MEMORY[0x1E4F28B88], a2, 13056, 256, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9638;
  qword_1EA3C9638 = v6;
}

id sub_1C4C29E64()
{
  if (qword_1EA3C9788 == -1)
  {
    int v0 = (void *)qword_1EA3C9640;
  }
  else
  {
    dispatch_once(&qword_1EA3C9788, &unk_1F2011310);
    int v0 = (void *)qword_1EA3C9640;
  }
  return v0;
}

void sub_1C4C29ED4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithRange_(MEMORY[0x1E4F28B88], a2, 12352, 96, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9640;
  qword_1EA3C9640 = v6;
}

id sub_1C4C29F1C()
{
  if (qword_1EA3C9790 == -1)
  {
    int v0 = (void *)qword_1EA3C9648;
  }
  else
  {
    dispatch_once(&qword_1EA3C9790, &unk_1F2013E48);
    int v0 = (void *)qword_1EA3C9648;
  }
  return v0;
}

void sub_1C4C29F8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithRange_(MEMORY[0x1E4F28B88], a2, 12448, 96, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9648;
  qword_1EA3C9648 = v6;
}

id sub_1C4C29FD4()
{
  if (qword_1EA3C9798 == -1)
  {
    int v0 = (void *)qword_1EA3C9650;
  }
  else
  {
    dispatch_once(&qword_1EA3C9798, &unk_1F2013130);
    int v0 = (void *)qword_1EA3C9650;
  }
  return v0;
}

void sub_1C4C2A044(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"([{"), a4, a5, a6;
  uint64_t v7 = (void *)qword_1EA3C9650;
  qword_1EA3C9650 = v6;
}

id sub_1C4C2A08C()
{
  if (qword_1EA3C97A0 == -1)
  {
    int v0 = (void *)qword_1EA3C9658;
  }
  else
  {
    dispatch_once(&qword_1EA3C97A0, &unk_1F2011330);
    int v0 = (void *)qword_1EA3C9658;
  }
  return v0;
}

void sub_1C4C2A0FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"]}"), a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9658;
  qword_1EA3C9658 = v6;
}

id sub_1C4C2A144()
{
  if (qword_1EA3C97A8 == -1)
  {
    int v0 = (void *)qword_1EA3C9660;
  }
  else
  {
    dispatch_once(&qword_1EA3C97A8, &unk_1F2011350);
    int v0 = (void *)qword_1EA3C9660;
  }
  return v0;
}

void sub_1C4C2A1B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"+=<>", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9660;
  qword_1EA3C9660 = v6;
}

id sub_1C4C2A1FC()
{
  if (qword_1EA3C97B0 == -1)
  {
    int v0 = (void *)qword_1EA3C9668;
  }
  else
  {
    dispatch_once(&qword_1EA3C97B0, &unk_1F2011370);
    int v0 = (void *)qword_1EA3C9668;
  }
  return v0;
}

void sub_1C4C2A26C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"ๆ*%", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9668;
  qword_1EA3C9668 = v6;
}

id sub_1C4C2A2B4()
{
  if (qword_1EA3C97B8 == -1)
  {
    int v0 = (void *)qword_1EA3C9670;
  }
  else
  {
    dispatch_once(&qword_1EA3C97B8, &unk_1F20131D0);
    int v0 = (void *)qword_1EA3C9670;
  }
  return v0;
}

void sub_1C4C2A324(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"'\"", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9670;
  qword_1EA3C9670 = v6;
}

id sub_1C4C2A36C()
{
  if (qword_1EA3C97C0 == -1)
  {
    int v0 = (void *)qword_1EA3C9678;
  }
  else
  {
    dispatch_once(&qword_1EA3C97C0, &unk_1F2013230);
    int v0 = (void *)qword_1EA3C9678;
  }
  return v0;
}

void sub_1C4C2A3DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"§gjpqyдурцщфзЦЩÇçĄąĘęŞşạặẶụẹựọộợậệ\xFFỹỳýȘșȚțฎๆฐญĵ𝒴𝑓𝔷,", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9678;
  qword_1EA3C9678 = v6;
}

id sub_1C4C2A424()
{
  if (qword_1EA3C97C8 == -1)
  {
    int v0 = (void *)qword_1EA3C9680;
  }
  else
  {
    dispatch_once(&qword_1EA3C97C8, &unk_1F2013E68);
    int v0 = (void *)qword_1EA3C9680;
  }
  return v0;
}

void sub_1C4C2A494(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_ch_xHeightCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  uint64_t v12 = objc_msgSend_mutableCopy(v6, v7, v8, v9, v10, v11);

  uint64_t v17 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v13, @"ij:*+<>-~.,:", v14, v15, v16);
  objc_msgSend_formUnionWithCharacterSet_(v12, v18, (uint64_t)v17, v19, v20, v21);

  uint64_t v22 = (void *)qword_1EA3C9680;
  qword_1EA3C9680 = (uint64_t)v12;
}

id sub_1C4C2A51C()
{
  if (qword_1EA3C97D0 == -1)
  {
    int v0 = (void *)qword_1EA3C9688;
  }
  else
  {
    dispatch_once(&qword_1EA3C97D0, &unk_1F2013E88);
    int v0 = (void *)qword_1EA3C9688;
  }
  return v0;
}

void sub_1C4C2A58C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"acegmnopqrsuvwxyzагдежзєиклмнопрстуфхцчшщъыьэюяạụẹç𝔷กขคฆงจฉชซฌญฎฏฐฑฒณดตถทธนบผพภมยแรลวาเศษสหฬอฮะยุสูจฺ", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9688;
  qword_1EA3C9688 = v6;
}

id sub_1C4C2A5D4()
{
  if (qword_1EA3C97D8 == -1)
  {
    int v0 = (void *)qword_1EA3C9690;
  }
  else
  {
    dispatch_once(&qword_1EA3C97D8, &unk_1F2013EA8);
    int v0 = (void *)qword_1EA3C9690;
  }
  return v0;
}

void sub_1C4C2A644(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"ij'\"°", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9690;
  qword_1EA3C9690 = v6;
}

id sub_1C4C2A68C()
{
  if (qword_1EA3C97E0 == -1)
  {
    int v0 = (void *)qword_1EA3C9698;
  }
  else
  {
    dispatch_once(&qword_1EA3C97E0, &unk_1F2013310);
    int v0 = (void *)qword_1EA3C9698;
  }
  return v0;
}

void sub_1C4C2A6FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"=°•*+<>-ー－~.,、'\"。，…→_", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9698;
  qword_1EA3C9698 = v6;
}

id sub_1C4C2A744()
{
  if (qword_1EA3C97E8 == -1)
  {
    int v0 = (void *)qword_1EA3C96A0;
  }
  else
  {
    dispatch_once(&qword_1EA3C97E8, &unk_1F2013EC8);
    int v0 = (void *)qword_1EA3C96A0;
  }
  return v0;
}

void sub_1C4C2A7B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"!\"#$%&'()*+,-./:;<=>?[\\]^_{|}~£¥§«°»€•¡¿",
    a4,
    a5,
  uint64_t v6 = a6);
  uint64_t v7 = (void *)qword_1EA3C96A0;
  qword_1EA3C96A0 = v6;
}

id sub_1C4C2A7FC()
{
  if (qword_1EA3C97F0 == -1)
  {
    int v0 = (void *)qword_1EA3C96A8;
  }
  else
  {
    dispatch_once(&qword_1EA3C97F0, &unk_1F2013EE8);
    int v0 = (void *)qword_1EA3C96A8;
  }
  return v0;
}

void sub_1C4C2A86C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"×÷·§", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C96A8;
  qword_1EA3C96A8 = v6;
}

id sub_1C4C2A8B4()
{
  if (qword_1EA3C97F8 == -1)
  {
    int v0 = (void *)qword_1EA3C96B0;
  }
  else
  {
    dispatch_once(&qword_1EA3C97F8, &unk_1F2013F08);
    int v0 = (void *)qword_1EA3C96B0;
  }
  return v0;
}

void sub_1C4C2A924(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_ch_synthesisHallucinationProneCharSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  uint64_t v12 = objc_msgSend_mutableCopy(v6, v7, v8, v9, v10, v11);

  id v18 = objc_msgSend_ch_synthesisFastPathOnlyCharSet(MEMORY[0x1E4F28B88], v13, v14, v15, v16, v17);
  objc_msgSend_formUnionWithCharacterSet_(v12, v19, (uint64_t)v18, v20, v21, v22);

  uint64_t v23 = (void *)qword_1EA3C96B0;
  qword_1EA3C96B0 = (uint64_t)v12;
}

id sub_1C4C2A9A4()
{
  if (qword_1EA3C9800 == -1)
  {
    int v0 = (void *)qword_1EA3C9670;
  }
  else
  {
    dispatch_once(&qword_1EA3C9800, &unk_1F2013F28);
    int v0 = (void *)qword_1EA3C9670;
  }
  return v0;
}

void sub_1C4C2AA14(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"gjpqyzÇçý\xFFĄąĘęŞşȘșȚțЦЩдзруфцщญฎฐๆỳỹ", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9F88;
  qword_1EA3C9F88 = v6;
}

id sub_1C4C2AA5C()
{
  if (qword_1EA3C9808 == -1)
  {
    int v0 = (void *)qword_1EA3C96B8;
  }
  else
  {
    dispatch_once(&qword_1EA3C9808, &unk_1F2013F48);
    int v0 = (void *)qword_1EA3C96B8;
  }
  return v0;
}

void sub_1C4C2AACC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"weruosaxcvnm✓", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C96B8;
  qword_1EA3C96B8 = v6;
}

id sub_1C4C2AB14()
{
  if (qword_1EA3C9810 == -1)
  {
    int v0 = (void *)qword_1EA3C96C0;
  }
  else
  {
    dispatch_once(&qword_1EA3C9810, &unk_1F2013F68);
    int v0 = (void *)qword_1EA3C96C0;
  }
  return v0;
}

void sub_1C4C2AB84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"zqypgąęşș¡¿", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C96C0;
  qword_1EA3C96C0 = v6;
}

id sub_1C4C2ABCC()
{
  if (qword_1EA3C9818 == -1)
  {
    int v0 = (void *)qword_1EA3C96C8;
  }
  else
  {
    dispatch_once(&qword_1EA3C9818, &unk_1F2013F88);
    int v0 = (void *)qword_1EA3C96C8;
  }
  return v0;
}

void sub_1C4C2AC3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"ik0123456789QWERTYUIOPLKJHGFDSAZXCVBNMtlhdb%?!@ÀÁÂÃÄÅÆÈÉÊËÌÍÎÏÑÒÓÔÕÖØÙÚÛÜÝàáâãäåæèéêëìíîïñòóôõöøùúûüĂăĆćČčĎďĚěĞİıŁłŃńŇňŒœŘřŚśŠšŤťŮůŸŹźŻżŽž€₺↑↓①②③④⑤⑥⑦⑧⑨", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C96C8;
  qword_1EA3C96C8 = v6;
}

id sub_1C4C2AC84()
{
  if (qword_1EA3C9820 == -1)
  {
    int v0 = (void *)qword_1EA3C96D0;
  }
  else
  {
    dispatch_once(&qword_1EA3C9820, &unk_1F2013FA8);
    int v0 = (void *)qword_1EA3C96D0;
  }
  return v0;
}

void sub_1C4C2ACF4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"0123456789QWERTYUIOPLKJHGFDSAZXCVBNMtlhdb%?!|}¢£¥§ª°ºÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØÙÚÛÜÝĂĄĆČĎĘĚĞİŁłŃŇŒŘŚŞŠŤŮŸŹŻŽȘȚ€₺↑↓①②③④⑤⑥⑦⑧⑨", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C96D0;
  qword_1EA3C96D0 = v6;
}

id sub_1C4C2AD3C()
{
  if (qword_1EA3C9828 == -1)
  {
    int v0 = (void *)qword_1EA3C96D8;
  }
  else
  {
    dispatch_once(&qword_1EA3C9828, &unk_1F2013FC8);
    int v0 = (void *)qword_1EA3C96D8;
  }
  return v0;
}

void sub_1C4C2ADAC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"0123456789.,+-=", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C96D8;
  qword_1EA3C96D8 = v6;
}

id sub_1C4C2ADF4()
{
  if (qword_1EA3C9830 == -1)
  {
    int v0 = (void *)qword_1EA3C96E0;
  }
  else
  {
    dispatch_once(&qword_1EA3C9830, &unk_1F2013FE8);
    int v0 = (void *)qword_1EA3C96E0;
  }
  return v0;
}

void sub_1C4C2AE64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"0123456789", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C96E0;
  qword_1EA3C96E0 = v6;
}

id sub_1C4C2AEAC()
{
  if (qword_1EA3C9838 == -1)
  {
    int v0 = (void *)qword_1EA3C96E8;
  }
  else
  {
    dispatch_once(&qword_1EA3C9838, &unk_1F2014008);
    int v0 = (void *)qword_1EA3C96E8;
  }
  return v0;
}

void sub_1C4C2AF1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @".,' ", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C96E8;
  qword_1EA3C96E8 = v6;
}

id sub_1C4C2AF64()
{
  if (qword_1EA3C9840 == -1)
  {
    int v0 = (void *)qword_1EA3C96F0;
  }
  else
  {
    dispatch_once(&qword_1EA3C9840, &unk_1F2014028);
    int v0 = (void *)qword_1EA3C96F0;
  }
  return v0;
}

void sub_1C4C2AFD4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"+-*÷/:×⋅", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C96F0;
  qword_1EA3C96F0 = v6;
}

id sub_1C4C2B01C()
{
  if (qword_1EA3C9848 == -1)
  {
    int v0 = (void *)qword_1EA3C9700;
  }
  else
  {
    dispatch_once(&qword_1EA3C9848, &unk_1F2014048);
    int v0 = (void *)qword_1EA3C9700;
  }
  return v0;
}

void sub_1C4C2B08C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"⌊⌋√⌈⌉₀₁₂₃₄₅₆₇₈₉⁰¹²³⁴⁵⁶⁷⁸⁹π", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9700;
  qword_1EA3C9700 = v6;
}

id sub_1C4C2B0D4()
{
  if (qword_1EA3C9850[0] == -1)
  {
    int v0 = (void *)qword_1EA3C96F8;
  }
  else
  {
    dispatch_once(qword_1EA3C9850, &unk_1F2014068);
    int v0 = (void *)qword_1EA3C96F8;
  }
  return v0;
}

void sub_1C4C2B144(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"$€£¥¢₺₴₽₩", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C96F8;
  qword_1EA3C96F8 = v6;
}

BOOL sub_1C4C2B18C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSUInteger sizep = 0;
  id v6 = a1;
  uint64_t v12 = (const char *)objc_msgSend_objCType(v6, v7, v8, v9, v10, v11);
  NSGetSizeAndAlignment(v12, &sizep, 0);
  NSUInteger v17 = sizep;
  if (a3 && sizep == a4) {
    objc_msgSend_getValue_(v6, v13, a3, v14, v15, v16);
  }
  return v17 == a4;
}

double sub_1C4C2B200(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v7 = *MEMORY[0x1E4F1DAD8];
  objc_msgSend_ch_getValue_ofSize_(a1, a2, (uint64_t)&v7, 16, a5, a6);
  return *(double *)&v7;
}

id sub_1C4C2B23C(double a1, double a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(double *)uint64_t v10 = a1;
  *(double *)&v10[1] = a2;
  uint64_t v8 = objc_msgSend_valueWithBytes_objCType_(MEMORY[0x1E4F29238], a4, (uint64_t)v10, (uint64_t)"{CGPoint=dd}", a7, a8);
  return v8;
}

double sub_1C4C2B288(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  v8[0] = *MEMORY[0x1E4F1DB28];
  v8[1] = v6;
  objc_msgSend_ch_getValue_ofSize_(a1, a2, (uint64_t)v8, 32, a5, a6);
  return *(double *)v8;
}

id sub_1C4C2B2C8(double a1, double a2, double a3, double a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(double *)uint64_t v12 = a1;
  *(double *)&v12[1] = a2;
  *(double *)&v12[2] = a3;
  *(double *)&v12[3] = a4;
  uint64_t v10 = objc_msgSend_valueWithBytes_objCType_(MEMORY[0x1E4F29238], a6, (uint64_t)v12, (uint64_t)"{CGRect={CGPoint=dd}{CGSize=dd}}", a9, a10);
  return v10;
}

uint64_t sub_1C4C2B318()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_1C4C2B328()
{
  return MEMORY[0x1F40E4898]();
}

uint64_t sub_1C4C2B338()
{
  return MEMORY[0x1F40E49A0]();
}

uint64_t sub_1C4C2B348()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t sub_1C4C2B358()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t sub_1C4C2B368()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t sub_1C4C2B378()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t sub_1C4C2B388()
{
  return MEMORY[0x1F4130150]();
}

uint64_t sub_1C4C2B398()
{
  return MEMORY[0x1F4130170]();
}

uint64_t sub_1C4C2B3A8()
{
  return MEMORY[0x1F4130180]();
}

uint64_t sub_1C4C2B3B8()
{
  return MEMORY[0x1F4130198]();
}

uint64_t sub_1C4C2B3C8()
{
  return MEMORY[0x1F41301C0]();
}

uint64_t sub_1C4C2B3D8()
{
  return MEMORY[0x1F41301C8]();
}

uint64_t sub_1C4C2B3E8()
{
  return MEMORY[0x1F41301D8]();
}

uint64_t sub_1C4C2B3F8()
{
  return MEMORY[0x1F41301E8]();
}

uint64_t sub_1C4C2B408()
{
  return MEMORY[0x1F41301F8]();
}

uint64_t sub_1C4C2B418()
{
  return MEMORY[0x1F4130208]();
}

uint64_t sub_1C4C2B428()
{
  return MEMORY[0x1F4130220]();
}

uint64_t sub_1C4C2B438()
{
  return MEMORY[0x1F4130228]();
}

uint64_t sub_1C4C2B448()
{
  return MEMORY[0x1F4130248]();
}

uint64_t sub_1C4C2B458()
{
  return MEMORY[0x1F4130290]();
}

uint64_t sub_1C4C2B468()
{
  return MEMORY[0x1F4130298]();
}

uint64_t sub_1C4C2B478()
{
  return MEMORY[0x1F4188670]();
}

uint64_t sub_1C4C2B488()
{
  return MEMORY[0x1F4188680]();
}

uint64_t sub_1C4C2B498()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t sub_1C4C2B4A8()
{
  return MEMORY[0x1F410DD30]();
}

uint64_t sub_1C4C2B4B8()
{
  return MEMORY[0x1F410DD38]();
}

uint64_t sub_1C4C2B4C8()
{
  return MEMORY[0x1F410DD98]();
}

uint64_t sub_1C4C2B4D8()
{
  return MEMORY[0x1F410DDB8]();
}

uint64_t sub_1C4C2B4E8()
{
  return MEMORY[0x1F410DDC8]();
}

uint64_t sub_1C4C2B4F8()
{
  return MEMORY[0x1F410DDD0]();
}

uint64_t sub_1C4C2B508()
{
  return MEMORY[0x1F410DDD8]();
}

uint64_t sub_1C4C2B518()
{
  return MEMORY[0x1F410DE10]();
}

uint64_t sub_1C4C2B528()
{
  return MEMORY[0x1F410DE18]();
}

uint64_t sub_1C4C2B538()
{
  return MEMORY[0x1F410DE90]();
}

uint64_t sub_1C4C2B548()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1C4C2B558()
{
  return MEMORY[0x1F40E61B8]();
}

uint64_t sub_1C4C2B568()
{
  return MEMORY[0x1F40E61C8]();
}

uint64_t sub_1C4C2B578()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1C4C2B588()
{
  return MEMORY[0x1F4183880]();
}

uint64_t sub_1C4C2B598()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1C4C2B5A8()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1C4C2B5B8()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_1C4C2B5C8()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t sub_1C4C2B5D8()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_1C4C2B5E8()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_1C4C2B5F8()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_1C4C2B608()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_1C4C2B618()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_1C4C2B628()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1C4C2B638()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_1C4C2B648()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1C4C2B658()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1C4C2B668()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_1C4C2B688()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1C4C2B698()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1C4C2B6A8()
{
  return MEMORY[0x1F4185D40]();
}

uint64_t sub_1C4C2B6B8()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1C4C2B6C8()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_1C4C2B6D8()
{
  return MEMORY[0x1F4185EF8]();
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74D0](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1F40D7538](bundleID);
}

uint64_t CFBurstTrieContains()
{
  return MEMORY[0x1F40D7620]();
}

uint64_t CFBurstTrieCreateFromFile()
{
  return MEMORY[0x1F40D7638]();
}

uint64_t CFBurstTrieRelease()
{
  return MEMORY[0x1F40D7658]();
}

uint64_t CFBurstTrieRetain()
{
  return MEMORY[0x1F40D7660]();
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1F40D8460](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1F40D8680](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1F40D8698](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x1F40D86A8](tokenizer);
  result.NSUInteger length = v2;
  result.locatiounint64_t n = v1;
  return result;
}

CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer, CFIndex index)
{
  return MEMORY[0x1F40D86B0](tokenizer, index);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1F40D8770](url);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1F40D9790](retstr, t1, t2);
}

CGAffineTransformComponents *__cdecl CGAffineTransformDecompose(CGAffineTransformComponents *__return_ptr retstr, CGAffineTransform *transform)
{
  return (CGAffineTransformComponents *)MEMORY[0x1F40D9798](retstr, transform);
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return MEMORY[0x1F40D97A0](t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97A8](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97C8](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D8](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformMakeWithComponents(CGAffineTransform *__return_ptr retstr, CGAffineTransformComponents *components)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97E0](retstr, components);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97E8](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F0](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

CGContextRef CGBitmapContextCreateWithData(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo, CGBitmapContextReleaseDataCallback releaseCallback, void *releaseInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9830](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo, releaseCallback);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1F40D9970](space, components);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1F40D99A8](red, green, blue, alpha);
}

void CGColorRelease(CGColorRef color)
{
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF8]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
{
}

void CGContextSetLineDash(CGContextRef c, CGFloat phase, const CGFloat *lengths, size_t count)
{
}

void CGContextSetLineJoin(CGContextRef c, CGLineJoin join)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1F40DA2E8](provider);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1F40E9758](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1F40E9760](idst);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA8D8](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1F40DA8E0](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1F40DA8F0](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1F40DA908](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA920](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

void CGImageRelease(CGImageRef image)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathAddLines(CGMutablePathRef path, const CGAffineTransform *m, const CGPoint *points, size_t count)
{
}

void CGPathAddPath(CGMutablePathRef path1, const CGAffineTransform *m, CGPathRef path2)
{
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
}

void CGPathApplyWithBlock(CGPathRef path, CGPathApplyBlock block)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x1F40DB008](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

CGPathRef CGPathCreateCopy(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1F40DB010](path);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1F40DB068]();
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1F40DB0A8](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGPathEqualToPath(CGPathRef path1, CGPathRef path2)
{
  return MEMORY[0x1F40DB0C8](path1, path2);
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  MEMORY[0x1F40DB0D0](path);
  result.size.double height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

CGPoint CGPathGetCurrentPoint(CGPathRef path)
{
  MEMORY[0x1F40DB0D8](path);
  result.CGFloat y = v2;
  result.CGFloat x = v1;
  return result;
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x1F40DB120](path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1F40DB178](path);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x1F40DB220](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.double height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1F40DB228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB230]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x1F40DB250]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2B8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.double height = v6;
  result.size.CGFloat width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB2C8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.double height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB2D0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB310]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.double height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

uint64_t CVNLPCodepointToScriptCode()
{
  return MEMORY[0x1F410DBF8]();
}

uint64_t CVNLPIsDigitCharLMCodepoint()
{
  return MEMORY[0x1F410DC00]();
}

uint64_t CVNLPIsWhitespaceCharLMCodepoint()
{
  return MEMORY[0x1F410DC10]();
}

uint64_t CVNLPIsWordSeparatorForLexicon()
{
  return MEMORY[0x1F410DC18]();
}

uint64_t CVNLPLanguageModelCreate()
{
  return MEMORY[0x1F410DC20]();
}

uint64_t CVNLPLanguageModelLogJointProbability()
{
  return MEMORY[0x1F410DC30]();
}

uint64_t CVNLPLanguageModelWithStateConditionalProbability()
{
  return MEMORY[0x1F410DC38]();
}

uint64_t CVNLPLanguageModelWithStateCreate()
{
  return MEMORY[0x1F410DC40]();
}

uint64_t CVNLPLanguageModelWithStateCreateCopy()
{
  return MEMORY[0x1F410DC48]();
}

uint64_t CVNLPLanguageModelWithStateUpdateWithContext()
{
  return MEMORY[0x1F410DC50]();
}

uint64_t CVNLPLogGeneralFault()
{
  return MEMORY[0x1F410DC58]();
}

uint64_t CVNLPNormalizeCodepointForCharLM()
{
  return MEMORY[0x1F410DC60]();
}

uint64_t CVNLPShouldUseLexiconContextLogProb()
{
  return MEMORY[0x1F410DC70]();
}

uint64_t CVNLPWordTokenIDsForString()
{
  return MEMORY[0x1F410DC78]();
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1F40E9308](properties);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1F40E9358](buffer);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E93A8](buffer);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9440](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E94F8](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9540](buffer, *(void *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9630](buffer, *(void *)&options, seed);
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x1F412A878]();
}

uint64_t LMLanguageModelAddTransientVocabulary()
{
  return MEMORY[0x1F412A138]();
}

uint64_t LMLanguageModelConditionalProbability()
{
  return MEMORY[0x1F412A148]();
}

uint64_t LMLanguageModelConditionalProbabilityVector()
{
  return MEMORY[0x1F412A150]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x1F412A158]();
}

uint64_t LMLanguageModelGetTokenIDForString()
{
  return MEMORY[0x1F412A1A0]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x1F412A1E0]();
}

uint64_t LMLanguageModelRetain()
{
  return MEMORY[0x1F412A200]();
}

uint64_t LMLexiconCreate()
{
  return MEMORY[0x1F412A228]();
}

uint64_t LMLexiconCursorFirstTokenID()
{
  return MEMORY[0x1F412A230]();
}

uint64_t LMLexiconCursorGetTraversedCharacters()
{
  return MEMORY[0x1F412A238]();
}

uint64_t LMLexiconCursorHasChildren()
{
  return MEMORY[0x1F412A240]();
}

uint64_t LMLexiconCursorHasEntries()
{
  return MEMORY[0x1F412A248]();
}

uint64_t LMLexiconCursorHash()
{
  return MEMORY[0x1F412A250]();
}

uint64_t LMLexiconCursorTraversedLength()
{
  return MEMORY[0x1F412A258]();
}

uint64_t LMLexiconGetCursorByAdvancingWithCharacters()
{
  return MEMORY[0x1F412A260]();
}

uint64_t LMLexiconGetFirstTokenIDForString()
{
  return MEMORY[0x1F412A268]();
}

uint64_t LMLexiconGetRootCursor()
{
  return MEMORY[0x1F412A270]();
}

uint64_t LMLexiconRelease()
{
  return MEMORY[0x1F412A2A0]();
}

uint64_t LMLexiconResetCursors()
{
  return MEMORY[0x1F412A2A8]();
}

uint64_t LMStreamTokenizerCreate()
{
  return MEMORY[0x1F412A2D0]();
}

uint64_t LMStreamTokenizerPushBytes()
{
  return MEMORY[0x1F412A2E0]();
}

uint64_t LMStreamTokenizerRelease()
{
  return MEMORY[0x1F412A2E8]();
}

uint64_t LMVocabularyAddLemma()
{
  return MEMORY[0x1F412A2F8]();
}

uint64_t LMVocabularyCreate()
{
  return MEMORY[0x1F412A300]();
}

uint64_t LMVocabularyEnumerateInflectionsOfLemma()
{
  return MEMORY[0x1F412A308]();
}

uint64_t LMVocabularyGetTokenIDForLemma()
{
  return MEMORY[0x1F412A320]();
}

uint64_t LMVocabularyReset()
{
  return MEMORY[0x1F412A328]();
}

uint64_t LMVocabularySetLanguages()
{
  return MEMORY[0x1F412A330]();
}

uint64_t LXCursorConditionalProbability()
{
  return MEMORY[0x1F412A608]();
}

uint64_t LXCursorCreateByAdvancing()
{
  return MEMORY[0x1F412A618]();
}

uint64_t LXCursorEnumerateEntries()
{
  return MEMORY[0x1F412A630]();
}

uint64_t LXCursorEnumerateEntriesRecursively()
{
  return MEMORY[0x1F412A638]();
}

uint64_t LXCursorHasChildren()
{
  return MEMORY[0x1F412A648]();
}

uint64_t LXCursorHasEntries()
{
  return MEMORY[0x1F412A650]();
}

uint64_t LXCursorIsRoot()
{
  return MEMORY[0x1F412A660]();
}

uint64_t LXCursorTerminationProbability()
{
  return MEMORY[0x1F412A680]();
}

uint64_t LXEntryCopyString()
{
  return MEMORY[0x1F412A6A8]();
}

uint64_t LXEntryCreateMutableCopy()
{
  return MEMORY[0x1F412A6B8]();
}

uint64_t LXEntryGetMetaFlags()
{
  return MEMORY[0x1F412A6D8]();
}

uint64_t LXEntryGetPartialProbability()
{
  return MEMORY[0x1F412A6E0]();
}

uint64_t LXEntryGetProbability()
{
  return MEMORY[0x1F412A6F0]();
}

uint64_t LXEntryGetTimestamp()
{
  return MEMORY[0x1F412A6F8]();
}

uint64_t LXEntryGetTokenID()
{
  return MEMORY[0x1F412A700]();
}

uint64_t LXEntryGetUserBitfield()
{
  return MEMORY[0x1F412A710]();
}

uint64_t LXLexiconAdd()
{
  return MEMORY[0x1F412A728]();
}

uint64_t LXLexiconAddEntryWithTokenID()
{
  return MEMORY[0x1F412A730]();
}

uint64_t LXLexiconClear()
{
  return MEMORY[0x1F412A740]();
}

uint64_t LXLexiconCopyEntryForTokenID()
{
  return MEMORY[0x1F412A750]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x1F412A768]();
}

uint64_t LXLexiconCreateMutable()
{
  return MEMORY[0x1F412A770]();
}

uint64_t LXLexiconCreateRootCursor()
{
  return MEMORY[0x1F412A778]();
}

uint64_t LXLexiconCreateTransient()
{
  return MEMORY[0x1F412A780]();
}

uint64_t LXLexiconEnumerateEntriesForString()
{
  return MEMORY[0x1F412A788]();
}

uint64_t LXLexiconIncrementUsageCount()
{
  return MEMORY[0x1F412A7B8]();
}

uint64_t LXLexiconSetUserBitfield()
{
  return MEMORY[0x1F412A7E8]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MecabraAcceptCandidate()
{
  return MEMORY[0x1F4180A90]();
}

uint64_t MecabraAnalyzeStringWithContext()
{
  return MEMORY[0x1F4180AB0]();
}

uint64_t MecabraCandidateGetNextPhraseBoundary()
{
  return MEMORY[0x1F4180B00]();
}

uint64_t MecabraCandidateGetSurface()
{
  return MEMORY[0x1F4180B18]();
}

uint64_t MecabraCandidateGetWordCount()
{
  return MEMORY[0x1F4180B28]();
}

uint64_t MecabraCandidateGetWordReadingLengthAtIndex()
{
  return MEMORY[0x1F4180B40]();
}

uint64_t MecabraCandidateHasAlternativeSurfaceFormForWordAtIndex()
{
  return MEMORY[0x1F4180B50]();
}

uint64_t MecabraCandidateIsPredictionCandidate()
{
  return MEMORY[0x1F4180B90]();
}

uint64_t MecabraCandidateRelease()
{
  return MEMORY[0x1F4180BB8]();
}

uint64_t MecabraCandidateRetain()
{
  return MEMORY[0x1F4180BC0]();
}

uint64_t MecabraContextAddCandidate()
{
  return MEMORY[0x1F4180BD8]();
}

uint64_t MecabraContextCreateMutable()
{
  return MEMORY[0x1F4180BE8]();
}

uint64_t MecabraContextGetCandidateCount()
{
  return MEMORY[0x1F4180BF8]();
}

uint64_t MecabraContextRelease()
{
  return MEMORY[0x1F4180C10]();
}

uint64_t MecabraContextRemoveCandidatesInRange()
{
  return MEMORY[0x1F4180C18]();
}

uint64_t MecabraCreateCandidateFromContextString()
{
  return MEMORY[0x1F4180C68]();
}

uint64_t MecabraCreateHandwritingCandidate()
{
  return MEMORY[0x1F4180C78]();
}

uint64_t MecabraCreateWithOptions()
{
  return MEMORY[0x1F4180CA0]();
}

uint64_t MecabraGetLengthForContextString()
{
  return MEMORY[0x1F4180CD8]();
}

uint64_t MecabraGetNextCandidate()
{
  return MEMORY[0x1F4180CE0]();
}

uint64_t MecabraPredictionAcceptCandidate()
{
  return MEMORY[0x1F4180CF8]();
}

uint64_t MecabraPredictionAnalyze()
{
  return MEMORY[0x1F4180D08]();
}

uint64_t MecabraPredictionGetNextCandidate()
{
  return MEMORY[0x1F4180D18]();
}

uint64_t MecabraRelease()
{
  return MEMORY[0x1F4180D28]();
}

uint64_t MecabraSetAddressBookNamePhoneticPairs()
{
  return MEMORY[0x1F4180D40]();
}

uint64_t MecabraSetAssetDataItemsForType()
{
  return MEMORY[0x1F4180D48]();
}

uint64_t MecabraSetUserWordKeyPairs()
{
  return MEMORY[0x1F4180D70]();
}

uint64_t MecabraWorkingSetContainsString()
{
  return MEMORY[0x1F4180D80]();
}

const char *__cdecl NSGetSizeAndAlignment(const char *typePtr, NSUInteger *sizep, NSUInteger *alignp)
{
  return (const char *)MEMORY[0x1F40D8B10](typePtr, sizep, alignp);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E7140](range1.location, range1.length, range2.location, range2.length);
  result.NSUInteger length = v3;
  result.locatiounint64_t n = v2;
  return result;
}

NSRange NSRangeFromString(NSString *aString)
{
  NSUInteger v1 = MEMORY[0x1F40E71F8](aString);
  result.NSUInteger length = v2;
  result.locatiounint64_t n = v1;
  return result;
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1F40E72A0](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E72E0](range1.location, range1.length, range2.location, range2.length);
  result.NSUInteger length = v3;
  result.locatiounint64_t n = v2;
  return result;
}

uint64_t PPSCreateTelemetryIdentifier()
{
  return MEMORY[0x1F4145DC0]();
}

uint64_t PPSSendTelemetry()
{
  return MEMORY[0x1F4145DD0]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E380](this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E438](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E440](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4C0](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E678](this, __c);
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1F417E7D0]();
}

{
  return MEMORY[0x1F417E7F0]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E868]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1F417E908](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1F417E918](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E998]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x1F417EC38]();
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x1F417EC40]();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x1F417EC50]();
}

uint64_t std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>()
{
  return MEMORY[0x1F417EC68]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x1F40C9C88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

long double acos(long double __x)
{
  MEMORY[0x1F40CA330](__x);
  return result;
}

float acosf(float a1)
{
  MEMORY[0x1F40CA340](a1);
  return result;
}

long double asin(long double __x)
{
  MEMORY[0x1F40CA3D0](__x);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x1F40CA468](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x1F40CA470](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cblas_daxpy_NEWLAPACK()
{
  return MEMORY[0x1F40D1548]();
}

uint64_t cblas_ddot_NEWLAPACK()
{
  return MEMORY[0x1F40D1568]();
}

uint64_t cblas_dgemm_NEWLAPACK()
{
  return MEMORY[0x1F40D1578]();
}

uint64_t cblas_sdot_NEWLAPACK()
{
  return MEMORY[0x1F40D1600]();
}

long double cbrt(long double __x)
{
  MEMORY[0x1F40CA688](__x);
  return result;
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0A0](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

uint64_t convertToCVNLPTextDecodingResult()
{
  return MEMORY[0x1F410DC80]();
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x1F40CB8B0](a1);
  return result;
}

long double cosh(long double __x)
{
  MEMORY[0x1F40CB8B8](__x);
  return result;
}

uint64_t dgeev_NEWLAPACK()
{
  return MEMORY[0x1F40D16C8]();
}

uint64_t dgetrf_NEWLAPACK()
{
  return MEMORY[0x1F40D1738]();
}

uint64_t dgetri_NEWLAPACK()
{
  return MEMORY[0x1F40D1748]();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CB9F8](block, timeout);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1F40CBBD8](queue);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD50](label);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

uint64_t espresso_blob_is_dynamic()
{
  return MEMORY[0x1F4118610]();
}

uint64_t espresso_buffer_pack_tensor_shape()
{
  return MEMORY[0x1F4118628]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1F4118648]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1F4118668]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1F4118678]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1F41186E0]();
}

uint64_t espresso_network_select_configuration()
{
  return MEMORY[0x1F41187A0]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1F41187D8]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1F41187F0]();
}

uint64_t espresso_plan_build_clean()
{
  return MEMORY[0x1F41187F8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1F4118818]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x1F4118828]();
}

uint64_t espresso_plan_get_phase()
{
  return MEMORY[0x1F4118848]();
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1F40CC098](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1F40CC100](a1, *(void *)&a2, a3);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x1F40CC1A8](a1, a2);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

float log10f(float a1)
{
  MEMORY[0x1F40CC888](a1);
  return result;
}

long double log1p(long double __x)
{
  MEMORY[0x1F40CC890](__x);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCB08](a1, a2, *(void *)&a3);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)((uint64_t (*)(id, SEL))MEMORY[0x1F4181798])(a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

int rand(void)
{
  return MEMORY[0x1F40CDC08]();
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x1F40CE060](a1);
  return result;
}

long double sinh(long double __x)
{
  MEMORY[0x1F40CE068](__x);
  return result;
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

char *__cdecl strtok(char *__str, const char *__sep)
{
  return (char *)MEMORY[0x1F40CE290](__str, __sep);
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x1F40CE298](__str, __sep, __lasts);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

int system(const char *a1)
{
  return MEMORY[0x1F40CE408](a1);
}

long double tan(long double __x)
{
  MEMORY[0x1F40CE420](__x);
  return result;
}

long double tanh(long double __x)
{
  MEMORY[0x1F40CE430](__x);
  return result;
}

long double tgamma(long double __x)
{
  MEMORY[0x1F40CE508](__x);
  return result;
}

int32_t u_getIntPropertyValue(UChar32 c, UProperty which)
{
  return MEMORY[0x1F417F760](*(void *)&c, *(void *)&which);
}

UBool u_hasBinaryProperty(UChar32 c, UProperty which)
{
  return MEMORY[0x1F417F780](*(void *)&c, *(void *)&which);
}

uint64_t ubidi_getLevels()
{
  return MEMORY[0x1F417F990]();
}

uint64_t ubidi_getVisualMap()
{
  return MEMORY[0x1F417F9C8]();
}

uint64_t ubidi_open()
{
  return MEMORY[0x1F417F9D0]();
}

uint64_t ubidi_setPara()
{
  return MEMORY[0x1F417F9F8]();
}

UBlockCode ublock_getCode(UChar32 c)
{
  return MEMORY[0x1F417FA20](*(void *)&c);
}

uint64_t uscript_getScript()
{
  return MEMORY[0x1F41805E0]();
}

uint64_t uscript_getShortName()
{
  return MEMORY[0x1F41805F0]();
}

uint64_t uscript_isRightToLeft()
{
  return MEMORY[0x1F4180608]();
}

uint64_t utrans_close()
{
  return MEMORY[0x1F41807F0]();
}

uint64_t utrans_openU()
{
  return MEMORY[0x1F41807F8]();
}

uint64_t utrans_transUChars()
{
  return MEMORY[0x1F4180808]();
}

void vDSP_distancesq(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
}

void vDSP_maxmgvi(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length *__I, vDSP_Length __N)
{
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_mmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
}

void vDSP_nzcros(const float *__A, vDSP_Stride __IA, vDSP_Length __B, vDSP_Length *__C, vDSP_Length *__D, vDSP_Length __N)
{
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vneg(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D25B0](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D2648](src, dest, *(void *)&flags);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE690](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}