id sub_1C492FA68()
{
  void *v0;
  id v1;
  void v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EA3C9138;
  v7 = qword_1EA3C9138;
  if (!qword_1EA3C9138)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1C49ED19C;
    v3[3] = &unk_1E64E1EC8;
    v3[4] = &v4;
    sub_1C49ED19C((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1C492FB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C492FBB0(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  id v6 = a2;
  self;
  id v7 = v6;
  self;
  v13 = objc_msgSend_scriptCode(v7, v8, v9, v10, v11, v12);
  v18 = v13;
  if (v13)
  {
    if (objc_msgSend_caseInsensitiveCompare_(v13, v14, @"Latn", v15, v16, v17))
    {
      if (objc_msgSend_caseInsensitiveCompare_(v18, v19, @"Hans", v20, v21, v22))
      {
        if (objc_msgSend_caseInsensitiveCompare_(v18, v23, @"Hant", v24, v25, v26))
        {
          if (objc_msgSend_caseInsensitiveCompare_(v18, v27, @"Hrkt", v28, v29, v30)
            && objc_msgSend_caseInsensitiveCompare_(v18, v31, @"Hira", v32, v33, v34)
            && objc_msgSend_caseInsensitiveCompare_(v18, v35, @"Kata", v36, v37, v38)
            && objc_msgSend_caseInsensitiveCompare_(v18, v39, @"Jpan", v40, v41, v42)
            && objc_msgSend_caseInsensitiveCompare_(v18, v43, @"Hani", v44, v45, v46))
          {
            if (objc_msgSend_caseInsensitiveCompare_(v18, v47, @"Kore", v48, v49, v50))
            {
              if (objc_msgSend_caseInsensitiveCompare_(v18, v51, @"Thai", v52, v53, v54))
              {
                if (objc_msgSend_caseInsensitiveCompare_(v18, v55, @"Cyrl", v56, v57, v58)) {
                  uint64_t v63 = 8
                }
                      * (objc_msgSend_caseInsensitiveCompare_(v18, v59, @"Arab", v60, v61, v62) == 0);
                else {
                  uint64_t v63 = 7;
                }
              }
              else
              {
                uint64_t v63 = 6;
              }
            }
            else
            {
              uint64_t v63 = 5;
            }
          }
          else
          {
            uint64_t v63 = 4;
          }
        }
        else
        {
          uint64_t v63 = 3;
        }
      }
      else
      {
        uint64_t v63 = 2;
      }
    }
    else
    {
      uint64_t v63 = 1;
    }
  }
  else
  {
    uint64_t v63 = 0;
  }

  id v186 = v7;
  self;
  v69 = objc_msgSend_languageCode(v186, v64, v65, v66, v67, v68);
  v74 = v69;
  if (v69)
  {
    if (objc_msgSend_caseInsensitiveCompare_(v69, v70, @"de", v71, v72, v73))
    {
      if (objc_msgSend_caseInsensitiveCompare_(v74, v75, @"en", v76, v77, v78))
      {
        if (objc_msgSend_caseInsensitiveCompare_(v74, v79, @"es", v80, v81, v82))
        {
          if (objc_msgSend_caseInsensitiveCompare_(v74, v83, @"fr", v84, v85, v86))
          {
            if (objc_msgSend_caseInsensitiveCompare_(v74, v87, @"it", v88, v89, v90))
            {
              if (objc_msgSend_caseInsensitiveCompare_(v74, v91, @"pt", v92, v93, v94))
              {
                if (objc_msgSend_caseInsensitiveCompare_(v74, v95, @"id", v96, v97, v98))
                {
                  if (objc_msgSend_caseInsensitiveCompare_(v74, v99, @"ms", v100, v101, v102))
                  {
                    if (objc_msgSend_caseInsensitiveCompare_(v74, v103, @"tr", v104, v105, v106))
                    {
                      if (objc_msgSend_caseInsensitiveCompare_(v74, v107, @"cs", v108, v109, v110))
                      {
                        if (objc_msgSend_caseInsensitiveCompare_(v74, v111, @"da", v112, v113, v114))
                        {
                          if (objc_msgSend_caseInsensitiveCompare_(v74, v115, @"nl", v116, v117, v118))
                          {
                            if (objc_msgSend_caseInsensitiveCompare_(v74, v119, @"nb", v120, v121, v122))
                            {
                              if (objc_msgSend_caseInsensitiveCompare_(v74, v123, @"nn", v124, v125, v126))
                              {
                                if (objc_msgSend_caseInsensitiveCompare_(v74, v127, @"pl", v128, v129, v130))
                                {
                                  if (objc_msgSend_caseInsensitiveCompare_(v74, v131, @"ro", v132, v133, v134))
                                  {
                                    if (objc_msgSend_caseInsensitiveCompare_(v74, v135, @"sv", v136, v137, v138))
                                    {
                                      if (objc_msgSend_caseInsensitiveCompare_(v74, v139, @"fi", v140, v141, v142))
                                      {
                                        if (objc_msgSend_caseInsensitiveCompare_(v74, v143, @"zh", v144, v145, v146))
                                        {
                                          if (objc_msgSend_caseInsensitiveCompare_(v74, v147, @"yue", v148, v149, v150))
                                          {
                                            if (objc_msgSend_caseInsensitiveCompare_(v74, v151, @"ja", v152, v153, v154))
                                            {
                                              if (objc_msgSend_caseInsensitiveCompare_(v74, v155, @"ko", v156, v157, v158))
                                              {
                                                if (objc_msgSend_caseInsensitiveCompare_(v74, v159, @"th", v160, v161, v162))
                                                {
                                                  if (objc_msgSend_caseInsensitiveCompare_(v74, v163, @"ru", v164, v165, v166))
                                                  {
                                                    if (objc_msgSend_caseInsensitiveCompare_(v74, v167, @"uk", v168, v169, v170))
                                                    {
                                                      if (objc_msgSend_caseInsensitiveCompare_(v74, v171, @"ar", v172, v173, v174)&& objc_msgSend_caseInsensitiveCompare_(v74, v175, @"ars", v176, v177, v178))
                                                      {
                                                        if (objc_msgSend_caseInsensitiveCompare_(v74, v179, @"vi", v180, v181, v182))
                                                        {
                                                          uint64_t v183 = 0;
                                                        }
                                                        else
                                                        {
                                                          uint64_t v183 = 27;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        uint64_t v183 = 26;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      uint64_t v183 = 25;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    uint64_t v183 = 24;
                                                  }
                                                }
                                                else
                                                {
                                                  uint64_t v183 = 23;
                                                }
                                              }
                                              else
                                              {
                                                uint64_t v183 = 22;
                                              }
                                            }
                                            else
                                            {
                                              uint64_t v183 = 21;
                                            }
                                          }
                                          else
                                          {
                                            uint64_t v183 = 20;
                                          }
                                        }
                                        else
                                        {
                                          uint64_t v183 = 19;
                                        }
                                      }
                                      else
                                      {
                                        uint64_t v183 = 18;
                                      }
                                    }
                                    else
                                    {
                                      uint64_t v183 = 17;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v183 = 16;
                                  }
                                }
                                else
                                {
                                  uint64_t v183 = 15;
                                }
                              }
                              else
                              {
                                uint64_t v183 = 14;
                              }
                            }
                            else
                            {
                              uint64_t v183 = 13;
                            }
                          }
                          else
                          {
                            uint64_t v183 = 12;
                          }
                        }
                        else
                        {
                          uint64_t v183 = 11;
                        }
                      }
                      else
                      {
                        uint64_t v183 = 10;
                      }
                    }
                    else
                    {
                      uint64_t v183 = 9;
                    }
                  }
                  else
                  {
                    uint64_t v183 = 8;
                  }
                }
                else
                {
                  uint64_t v183 = 7;
                }
              }
              else
              {
                uint64_t v183 = 6;
              }
            }
            else
            {
              uint64_t v183 = 4;
            }
          }
          else
          {
            uint64_t v183 = 2;
          }
        }
        else
        {
          uint64_t v183 = 3;
        }
      }
      else
      {
        uint64_t v183 = 1;
      }
    }
    else
    {
      uint64_t v183 = 5;
    }
  }
  else
  {
    uint64_t v183 = 0;
  }

  switch(v63)
  {
    case 0:
      uint64_t v63 = qword_1C4C44700[v183];
      v185 = v186;
      if (a3) {
        goto LABEL_103;
      }
      goto LABEL_104;
    case 1:
      if ((unint64_t)(v183 - 19) >= 8 && v183)
      {
        uint64_t v63 = 1;
        v185 = v186;
        if (a3) {
          goto LABEL_103;
        }
      }
      else
      {
        uint64_t v63 = 0;
        uint64_t v183 = 0;
        v185 = v186;
        if (a3) {
          goto LABEL_103;
        }
      }
      goto LABEL_104;
    case 2:
    case 3:
      BOOL v184 = ((0xFE7FFFFu >> v183) & 1) == 0;
      if ((0xFE7FFFFu >> v183)) {
        uint64_t v63 = 0;
      }
      goto LABEL_100;
    case 4:
      BOOL v184 = ((0xFDFFFFFu >> v183) & 1) == 0;
      uint64_t v63 = (4 * ((0xFDFFFFFu >> v183) & 1)) ^ 4;
      goto LABEL_100;
    case 5:
      BOOL v184 = ((0xFBFFFFFu >> v183) & 1) == 0;
      if ((0xFBFFFFFu >> v183)) {
        uint64_t v63 = 0;
      }
      else {
        uint64_t v63 = 5;
      }
      goto LABEL_100;
    case 6:
      BOOL v184 = ((0xF7FFFFFu >> v183) & 1) == 0;
      if ((0xF7FFFFFu >> v183)) {
        uint64_t v63 = 0;
      }
      else {
        uint64_t v63 = 6;
      }
      goto LABEL_100;
    case 7:
      BOOL v184 = ((0xCFFFFFFu >> v183) & 1) == 0;
      if ((0xCFFFFFFu >> v183)) {
        uint64_t v63 = 0;
      }
      else {
        uint64_t v63 = 7;
      }
      goto LABEL_100;
    case 8:
      BOOL v184 = ((0xBFFFFFFu >> v183) & 1) == 0;
      uint64_t v63 = (8 * ((0xBFFFFFFu >> v183) & 1)) ^ 8;
LABEL_100:
      if (!v184) {
        uint64_t v183 = 0;
      }
      break;
    default:
      break;
  }
  v185 = v186;
  if (a3) {
LABEL_103:
  }
    *a3 = v183;
LABEL_104:
  if (a4) {
    *a4 = v63;
  }
}

void sub_1C49301EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4930208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C493021C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4930230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4930240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493025C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1C4930278(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1C49313D8(&qword_1EA3C8198);
  uint64_t v2 = sub_1C4C2B658();
  v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1C493145C(v6, (uint64_t)&v13);
    uint64_t v7 = v13;
    unint64_t result = sub_1C49309AC(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1C49314C4(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id CHCalculateWrapper.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id CHCalculateWrapper.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CHCalculateWrapper();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CHCalculateWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CHCalculateWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C493059C(uint64_t a1, uint64_t a2)
{
  return sub_1C4930708(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1C49305B4(uint64_t a1, id *a2)
{
  uint64_t result = sub_1C4C2B558();
  *a2 = 0;
  return result;
}

uint64_t sub_1C493062C(uint64_t a1, id *a2)
{
  char v3 = sub_1C4C2B568();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1C49306AC@<X0>(uint64_t *a1@<X8>)
{
  sub_1C4C2B578();
  uint64_t v2 = sub_1C4C2B548();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1C49306F0(uint64_t a1, uint64_t a2)
{
  return sub_1C4930708(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t sub_1C4930708(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1C4C2B578();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1C493074C()
{
  sub_1C4C2B578();
  sub_1C4C2B598();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C49307A0()
{
  sub_1C4C2B578();
  sub_1C4C2B6B8();
  sub_1C4C2B598();
  uint64_t v0 = sub_1C4C2B6D8();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1C4930814()
{
  uint64_t v0 = sub_1C4C2B578();
  uint64_t v2 = v1;
  if (v0 == sub_1C4C2B578() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1C4C2B698();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1C49308A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1C4C2B548();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1C49308E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C4C2B578();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C4930914(uint64_t a1)
{
  uint64_t v2 = sub_1C49315C8(&qword_1EA3C81D0);
  uint64_t v3 = sub_1C49315C8(&qword_1EA3C81D8);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

unint64_t sub_1C49309AC(uint64_t a1)
{
  sub_1C4C2B578();
  sub_1C4C2B6B8();
  sub_1C4C2B598();
  uint64_t v2 = sub_1C4C2B6D8();
  swift_bridgeObjectRelease();
  return sub_1C4930A40(a1, v2);
}

unint64_t sub_1C4930A40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_1C4C2B578();
    uint64_t v8 = v7;
    if (v6 == sub_1C4C2B578() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_1C4C2B698();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_1C4C2B578();
          uint64_t v15 = v14;
          if (v13 == sub_1C4C2B578() && v15 == v16) {
            break;
          }
          char v18 = sub_1C4C2B698();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_1C4930BB8()
{
  sub_1C4C2B368();
  MEMORY[0x1F4188790]();
  uint64_t v0 = sub_1C4C2B4C8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C49313D8(&qword_1EA3C8188);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C4C397F0;
  unint64_t v5 = (void *)*MEMORY[0x1E4F568D8];
  *(void *)(inited + 32) = *MEMORY[0x1E4F568D8];
  id v6 = objc_allocWithZone(NSNumber);
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = objc_msgSend(v6, sel_initWithUnsignedInteger_, 1);
  *(void *)(inited + 64) = sub_1C493141C();
  *(void *)(inited + 40) = v8;
  sub_1C4930278(inited);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4F56838], v0);
  sub_1C4C2B358();
  sub_1C4C2B518();
  swift_allocObject();
  sub_1C4C2B528();
  sub_1C4C2B508();
  uint64_t v9 = sub_1C4C2B4B8();
  swift_release();
  return v9;
}

BOOL sub_1C4930DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C49313D8(&qword_1EA3C8188);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C4C39800;
  unint64_t v5 = (void *)*MEMORY[0x1E4F568D8];
  *(void *)(inited + 32) = *MEMORY[0x1E4F568D8];
  id v6 = objc_allocWithZone(NSNumber);
  id v7 = v5;
  id v8 = objc_msgSend(v6, sel_initWithUnsignedInteger_, 0);
  unint64_t v9 = sub_1C493141C();
  *(void *)(inited + 40) = v8;
  uint64_t v10 = (void *)*MEMORY[0x1E4F568E8];
  *(void *)(inited + 64) = v9;
  *(void *)(inited + 72) = v10;
  uint64_t v11 = sub_1C49313D8(&qword_1EA3C81A8);
  *(void *)(inited + 80) = a3;
  uint64_t v12 = (void *)*MEMORY[0x1E4F568B0];
  *(void *)(inited + 104) = v11;
  *(void *)(inited + 112) = v12;
  id v13 = objc_allocWithZone(NSNumber);
  id v14 = v10;
  swift_bridgeObjectRetain();
  id v15 = v12;
  *(void *)(inited + 120) = objc_msgSend(v13, sel_initWithBool_, 1);
  uint64_t v16 = (void *)*MEMORY[0x1E4F568D0];
  *(void *)(inited + 144) = v9;
  *(void *)(inited + 152) = v16;
  id v17 = objc_allocWithZone(NSNumber);
  id v18 = v16;
  id v19 = objc_msgSend(v17, sel_initWithBool_, 1);
  *(void *)(inited + 184) = v9;
  *(void *)(inited + 160) = v19;
  sub_1C4930278(inited);
  uint64_t v20 = (void *)sub_1C4C2B538();
  swift_bridgeObjectRelease();
  id v21 = objc_msgSend(v20, sel_inputValueAndUnit);

  if (v21) {
  return v21 != 0;
  }
}

uint64_t sub_1C4930F80()
{
  sub_1C4C2B368();
  MEMORY[0x1F4188790]();
  uint64_t v0 = sub_1C4C2B4C8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v3 = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C49313D8(&qword_1EA3C8188);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C4C397F0;
  unint64_t v5 = (void *)*MEMORY[0x1E4F568D8];
  *(void *)(inited + 32) = *MEMORY[0x1E4F568D8];
  id v6 = objc_allocWithZone(NSNumber);
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = objc_msgSend(v6, sel_initWithUnsignedInteger_, 1);
  *(void *)(inited + 64) = sub_1C493141C();
  *(void *)(inited + 40) = v8;
  sub_1C4930278(inited);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4F56838], v0);
  sub_1C4C2B358();
  sub_1C4C2B518();
  swift_allocObject();
  uint64_t v9 = sub_1C4C2B528();
  uint64_t v10 = (void *)sub_1C4C2B4E8();

  if (v10)
  {
    uint64_t result = sub_1C4C2B4E8();
    if (!result)
    {
LABEL_27:
      __break(1u);
      return result;
    }
    uint64_t v12 = (void *)result;
    id v13 = (void *)sub_1C4C2B318();

    uint64_t v14 = (uint64_t)objc_msgSend(v13, sel_code);
    if (v14 > -2000)
    {
LABEL_20:
      swift_release();
      return 0;
    }
  }
  sub_1C4C2B4F8();
  unint64_t v15 = sub_1C4C2B4A8();
  uint64_t result = swift_release();
  if (v15 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_1C4C2B648();
    uint64_t result = swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_6:
      unint64_t v17 = 0;
      uint64_t v27 = v16;
      unint64_t v28 = v15 & 0xC000000000000001;
      uint64_t v26 = v15 & 0xFFFFFFFFFFFFFF8;
      v25[0] = v9;
      v25[1] = v15 + 32;
      while (1)
      {
        if (v28)
        {
          MEMORY[0x1C8785220](v17, v15);
          BOOL v18 = __OFADD__(v17++, 1);
          if (v18) {
            goto LABEL_22;
          }
        }
        else
        {
          if (v17 >= *(void *)(v26 + 16))
          {
            __break(1u);
            goto LABEL_27;
          }
          swift_retain();
          BOOL v18 = __OFADD__(v17++, 1);
          if (v18)
          {
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
        }
        uint64_t v19 = sub_1C4C2B4D8();
        uint64_t v20 = *(void *)(v19 + 16);
        if (v20) {
          break;
        }
LABEL_7:
        swift_release();
        uint64_t result = swift_bridgeObjectRelease();
        if (v17 == v27) {
          goto LABEL_24;
        }
      }
      uint64_t v9 = 0;
      while (1)
      {
        id v21 = *(void **)(v19 + 8 * v9 + 32);
        id v22 = v21;
        v23 = (void *)sub_1C4C2B318();
        id v24 = objc_msgSend(v23, sel_code, v25[0]);

        if (v24 != (id)-1003) {
          break;
        }
        if (v20 == ++v9) {
          goto LABEL_7;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16) {
      goto LABEL_6;
    }
  }
LABEL_24:
  swift_release();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t type metadata accessor for CHCalculateWrapper()
{
  return self;
}

uint64_t method lookup function for CHCalculateWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CHCalculateWrapper);
}

uint64_t dispatch thunk of static CHCalculateWrapper.textTranscriptionForLatex(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static CHCalculateWrapper.isTextTranscriptionUnitConversion(_:locales:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static CHCalculateWrapper.isLatexTranscriptionValidExpression(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_1C49313D8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1C493141C()
{
  unint64_t result = qword_1EA3C8190;
  if (!qword_1EA3C8190)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA3C8190);
  }
  return result;
}

uint64_t sub_1C493145C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C49313D8(&qword_1EA3C81A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1C49314C4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void type metadata accessor for CalculateKey()
{
  if (!qword_1EA3C81B0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EA3C81B0);
    }
  }
}

uint64_t sub_1C493152C()
{
  return sub_1C49315C8(&qword_1EA3C81B8);
}

uint64_t sub_1C4931560()
{
  return sub_1C49315C8(&qword_1EA3C81C0);
}

uint64_t sub_1C4931594()
{
  return sub_1C49315C8(&qword_1EA3C81C8);
}

uint64_t sub_1C49315C8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CalculateKey();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t CHModelCatalogModelType.init(rawValue:)()
{
  return 0;
}

BOOL sub_1C4931620(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1C4931634()
{
  return sub_1C4C2B6D8();
}

uint64_t sub_1C493167C()
{
  return sub_1C4C2B6C8();
}

uint64_t sub_1C49316A8()
{
  return sub_1C4C2B6D8();
}

void *sub_1C49316EC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

void sub_1C4931704(void *a1@<X8>)
{
  *a1 = *v1;
}

id CHModelCatalog.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id CHModelCatalog.init()()
{
  sub_1C4C2B488();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CHModelCatalog();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for CHModelCatalog()
{
  uint64_t result = qword_1EA3C8168;
  if (!qword_1EA3C8168) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id sub_1C4931894()
{
  id v0 = objc_msgSend(self, sel_sharedManager);
  id v1 = objc_msgSend(v0, sel_assetDeliveryReady);

  objc_super v2 = sub_1C4C2B478();
  os_log_type_t v3 = sub_1C4C2B5C8();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    sub_1C4C2B5E8();
    _os_log_impl(&dword_1C492D000, v2, v3, "Asset delivery ready: %{BOOL}d", v4, 8u);
    MEMORY[0x1C8787330](v4, -1, -1);
  }

  return v1;
}

uint64_t sub_1C49319D8@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v63 = a3;
  uint64_t v55 = sub_1C4C2B468();
  uint64_t v54 = *(void *)(v55 - 8);
  ((void (*)(void))MEMORY[0x1F4188790])();
  uint64_t v53 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_1C4C2B348();
  uint64_t v62 = *(void *)(v65 - 8);
  uint64_t v5 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v57 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v52 = (char *)&v51 - v7;
  uint64_t v8 = sub_1C4C2B418();
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = sub_1C4C2B448();
  uint64_t v60 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v56 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v58 = (char *)&v51 - v13;
  MEMORY[0x1F4188790](v12);
  v59 = (char *)&v51 - v14;
  uint64_t v15 = sub_1C49313D8(&qword_1EA3C8158);
  MEMORY[0x1F4188790](v15 - 8);
  unint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1C49313D8(&qword_1EA3C8150);
  uint64_t v66 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  id v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  v64 = (char *)&v51 - v22;
  if (a1)
  {
    v72[0] = a1;
    uint64_t result = sub_1C4C2B6A8();
    __break(1u);
  }
  else
  {
    sub_1C4C2B388();
    sub_1C49333E0(&v69, (uint64_t)v72);
    sub_1C49333F8(v72, v72[3]);
    sub_1C4C2B428();
    uint64_t v23 = v66;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v17, 0, 1, v18);
    id v24 = v64;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v64, v17, v18);
    sub_1C493349C((uint64_t)v72, (uint64_t)&v69);
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
    v25(v21, v24, v18);
    uint64_t v26 = sub_1C4C2B478();
    os_log_type_t v27 = sub_1C4C2B5C8();
    int v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v29 = swift_slowAlloc();
      v51 = v21;
      uint64_t v30 = v29;
      uint64_t v60 = swift_slowAlloc();
      v67[0] = v60;
      *(_DWORD *)uint64_t v30 = 136315394;
      LODWORD(v59) = v28;
      sub_1C49333F8(&v69, v70);
      uint64_t v31 = sub_1C4C2B3C8();
      uint64_t v68 = sub_1C4933500(v31, v32, v67);
      uint64_t v61 = v25;
      sub_1C4C2B5E8();
      swift_bridgeObjectRelease();
      sub_1C493388C((uint64_t)&v69);
      *(_WORD *)(v30 + 12) = 2080;
      uint64_t v58 = (char *)(v30 + 14);
      uint64_t v33 = v53;
      uint64_t v34 = sub_1C4C2B3B8();
      v35 = v52;
      MEMORY[0x1C8785060](v34);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v33, v55);
      sub_1C4933678();
      uint64_t v36 = v65;
      uint64_t v37 = sub_1C4C2B688();
      unint64_t v39 = v38;
      uint64_t v40 = v62;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v35, v36);
      uint64_t v68 = sub_1C4933500(v37, v39, v67);
      uint64_t v25 = v61;
      sub_1C4C2B5E8();
      swift_bridgeObjectRelease();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v66 + 8);
      v41(v51, v18);
      _os_log_impl(&dword_1C492D000, v26, (os_log_type_t)v59, "Found asset %s at %s", (uint8_t *)v30, 0x16u);
      uint64_t v42 = v60;
      swift_arrayDestroy();
      MEMORY[0x1C8787330](v42, -1, -1);
      MEMORY[0x1C8787330](v30, -1, -1);
    }
    else
    {

      sub_1C493388C((uint64_t)&v69);
      uint64_t v41 = *(void (**)(char *, uint64_t))(v23 + 8);
      v41(v21, v18);
      uint64_t v40 = v62;
    }
    uint64_t v70 = v18;
    unint64_t v71 = sub_1C49335D4();
    v43 = sub_1C4933D04((uint64_t *)&v69);
    v25((char *)v43, v64, v18);
    sub_1C49333F8(&v69, v70);
    v67[3] = swift_getAssociatedTypeWitness();
    v67[4] = swift_getAssociatedConformanceWitness();
    sub_1C4933D04(v67);
    sub_1C4C2B3A8();
    uint64_t v44 = v57;
    sub_1C4C2B3F8();
    sub_1C493388C((uint64_t)v67);
    if (sub_1C4C2B328())
    {
      uint64_t v45 = v63;
      uint64_t v46 = v44;
      uint64_t v47 = v65;
      (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v63, v46, v65);
      uint64_t v48 = 0;
    }
    else
    {
      uint64_t v49 = v44;
      uint64_t v47 = v65;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v49, v65);
      uint64_t v48 = 1;
      uint64_t v45 = v63;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v45, v48, 1, v47);
    v41(v64, v18);
    sub_1C493388C((uint64_t)&v69);
    return sub_1C493388C((uint64_t)v72);
  }
  return result;
}

uint64_t sub_1C4932564(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = a2;
  uint64_t v3 = sub_1C4C2B3E8();
  uint64_t v53 = *(void *)(v3 - 8);
  uint64_t v54 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v52 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_1C4C2B468();
  uint64_t v48 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v46 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_1C4C2B348();
  uint64_t v47 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1C4C2B418();
  MEMORY[0x1F4188790](v7);
  uint64_t v56 = sub_1C4C2B448();
  uint64_t v59 = *(void *)(v56 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v56);
  v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v57 = (char *)&v43 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v58 = (char *)&v43 - v12;
  uint64_t v13 = sub_1C49313D8(&qword_1EA3C8158);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1C49313D8(&qword_1EA3C8150);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v55 = (char *)&v43 - v21;
  if (a1)
  {
    v65[0] = a1;
    uint64_t result = sub_1C4C2B6A8();
    __break(1u);
  }
  else
  {
    sub_1C4C2B388();
    sub_1C49333E0(&v63, (uint64_t)v65);
    sub_1C49333F8(v65, v65[3]);
    sub_1C4C2B428();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
    uint64_t v22 = v55;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v55, v15, v16);
    sub_1C493349C((uint64_t)v65, (uint64_t)&v63);
    uint64_t v23 = v20;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v16);
    id v24 = sub_1C4C2B478();
    os_log_type_t v25 = sub_1C4C2B5C8();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      v62[0] = v60;
      *(_DWORD *)uint64_t v26 = 136315394;
      uint64_t v44 = v23;
      sub_1C49333F8(&v63, v64);
      uint64_t v27 = sub_1C4C2B3C8();
      uint64_t v61 = sub_1C4933500(v27, v28, v62);
      sub_1C4C2B5E8();
      swift_bridgeObjectRelease();
      sub_1C493388C((uint64_t)&v63);
      *(_WORD *)(v26 + 12) = 2080;
      uint64_t v59 = v26 + 14;
      uint64_t v29 = v46;
      uint64_t v30 = sub_1C4C2B3B8();
      uint64_t v31 = v45;
      MEMORY[0x1C8785060](v30);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v50);
      sub_1C4933678();
      uint64_t v32 = v49;
      uint64_t v33 = sub_1C4C2B688();
      unint64_t v35 = v34;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v32);
      uint64_t v61 = sub_1C4933500(v33, v35, v62);
      sub_1C4C2B5E8();
      swift_bridgeObjectRelease();
      uint64_t v36 = *(void (**)(char *, uint64_t))(v17 + 8);
      v36(v44, v16);
      _os_log_impl(&dword_1C492D000, v24, v25, "Found asset %s at %s", (uint8_t *)v26, 0x16u);
      uint64_t v37 = v60;
      swift_arrayDestroy();
      uint64_t v22 = v55;
      MEMORY[0x1C8787330](v37, -1, -1);
      MEMORY[0x1C8787330](v26, -1, -1);
    }
    else
    {

      sub_1C493388C((uint64_t)&v63);
      uint64_t v36 = *(void (**)(char *, uint64_t))(v17 + 8);
      v36(v20, v16);
    }
    uint64_t v39 = v53;
    uint64_t v38 = v54;
    uint64_t v40 = v52;
    sub_1C49335D4();
    sub_1C4C2B398();
    uint64_t v41 = sub_1C4C2B3D8();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
    v36(v22, v16);
    sub_1C493388C((uint64_t)v65);
    return v41;
  }
  return result;
}

uint64_t sub_1C4932FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C49319D8(a1, v2, a2);
}

uint64_t sub_1C4933100(uint64_t a1)
{
  return sub_1C4932564(a1, v1);
}

id CHModelCatalog.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CHModelCatalog();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_1C4933230()
{
  unint64_t result = qword_1EA3C81E0;
  if (!qword_1EA3C81E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3C81E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for CHModelCatalogModelType()
{
  return &type metadata for CHModelCatalogModelType;
}

uint64_t sub_1C4933294()
{
  return type metadata accessor for CHModelCatalog();
}

uint64_t sub_1C493329C()
{
  uint64_t result = sub_1C4C2B498();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for CHModelCatalog(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CHModelCatalog);
}

uint64_t dispatch thunk of CHModelCatalog.assetDeliveryReady()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of CHModelCatalog.getModelURL(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CHModelCatalog.getModelVersion(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t sub_1C49333E0(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *sub_1C49333F8(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1C493343C(uint64_t a1)
{
  uint64_t v2 = sub_1C49313D8(&qword_1EA3C8158);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C493349C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1C4933500(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1C49336D0(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1C49338DC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1C49338DC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1C493388C((uint64_t)v12);
  return v7;
}

unint64_t sub_1C49335D4()
{
  unint64_t result = qword_1EA3C8148;
  if (!qword_1EA3C8148)
  {
    sub_1C4933630(&qword_1EA3C8150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3C8148);
  }
  return result;
}

uint64_t sub_1C4933630(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1C4933678()
{
  unint64_t result = qword_1EA3C81E8;
  if (!qword_1EA3C81E8)
  {
    sub_1C4C2B348();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3C81E8);
  }
  return result;
}

uint64_t sub_1C49336D0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1C4C2B5F8();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1C4933938(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1C4C2B628();
  if (!v8)
  {
    sub_1C4C2B638();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1C4C2B668();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1C493388C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1C49338DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1C4933938(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1C49339D0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1C4933BB0(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1C4933BB0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1C49339D0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1C4933B48(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1C4C2B608();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1C4C2B638();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1C4C2B5A8();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1C4C2B668();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1C4C2B638();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1C4933B48(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  sub_1C49313D8(&qword_1EA3C81F0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1C4933BB0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C49313D8(&qword_1EA3C81F0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1C4C2B668();
  __break(1u);
  return result;
}

uint64_t *sub_1C4933D04(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_1C4933E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4933EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4933F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4933F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4934010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49340F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C493413C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4934938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4934B44(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1C4934B54(uint64_t a1, void *a2)
{
  id v276 = a2;
  objc_msgSend_string(v276, v3, v4, v5, v6, v7);
  int64_t v8 = (NSString *)objc_claimAutoreleasedReturnValue();
  int64_t v9 = symbolTextTransliteration(v8);

  objc_msgSend_score(v276, v10, v11, v12, v13, v14);
  *(long double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = log(v15)
                                                                   + *(double *)(*(void *)(*(void *)(a1 + 64) + 8)
                                                                               + 24);
  ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
  ++*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
  uint64_t v21 = objc_msgSend_string(v276, v16, v17, v18, v19, v20);
  if (objc_msgSend_isEqualToString_(v21, v22, @"{", v23, v24, v25))
  {
    uint64_t v31 = 1;
LABEL_3:

LABEL_6:
    *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) += v31;
    goto LABEL_7;
  }
  uint64_t v36 = objc_msgSend_string(v276, v26, v27, v28, v29, v30);
  char isEqualToString = objc_msgSend_isEqualToString_(v36, v37, @"[", v38, v39, v40);

  if (isEqualToString)
  {
    uint64_t v31 = 1;
    goto LABEL_6;
  }
  uint64_t v21 = objc_msgSend_string(v276, v32, v42, v33, v34, v35);
  if (objc_msgSend_isEqualToString_(v21, v261, @"}", v262, v263, v264))
  {
    uint64_t v31 = -1;
    goto LABEL_3;
  }
  v270 = objc_msgSend_string(v276, v265, v266, v267, v268, v269);
  char v275 = objc_msgSend_isEqualToString_(v270, v271, @"]", v272, v273, v274);

  if (v275)
  {
    uint64_t v31 = -1;
    goto LABEL_6;
  }
LABEL_7:
  if (objc_msgSend_isEqualToString_(v9, v32, @" ", v33, v34, v35))
  {
    uint64_t v48 = *(void **)(a1 + 32);
    uint64_t v49 = objc_msgSend_strokeIndexes(v276, v43, v44, v45, v46, v47);
    objc_msgSend_addIndexes_(v48, v50, (uint64_t)v49, v51, v52, v53);

    uint64_t v54 = *(void **)(a1 + 40);
    uint64_t v60 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v55, v56, v57, v58, v59);
    uint64_t v65 = objc_msgSend_stringByTrimmingCharactersInSet_(v54, v61, (uint64_t)v60, v62, v63, v64);
    uint64_t v70 = objc_msgSend_textTranscriptionForLatex_(CHTokenizedMathResult, v66, (uint64_t)v65, v67, v68, v69);

    uint64_t v71 = *(void *)(*(void *)(a1 + 96) + 8);
    *(long double *)(v71 + 24) = exp(*(double *)(v71 + 24)/ (double)*(uint64_t *)(*(void *)(*(void *)(a1 + 80) + 8) + 24));
    uint64_t v72 = [CHTokenizedTextResultToken alloc];
    uint64_t v78 = objc_msgSend_copy(*(void **)(a1 + 32), v73, v74, v75, v76, v77);
    double v79 = *(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 24);
    objc_msgSend_score(v276, v80, v81, v82, v83, v84);
    double v86 = v85;
    uint64_t v87 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24);
    uint64_t v88 = *(void *)(a1 + 48);
    uint64_t v89 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24);
    uint64_t v95 = objc_msgSend_count(*(void **)(a1 + 32), v90, v91, v92, v93, v94);
    uint64_t v97 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_(v72, v96, (uint64_t)v70, (uint64_t)v78, 0, v87, v88, v89, v79, v79, v79, v86, *(double *)(*(void *)(*(void *)(a1 + 120) + 8) + 48), *(double *)(*(void *)(*(void *)(a1 + 120) + 8) + 56), *(double *)(*(void *)(*(void *)(a1 + 120) + 8) + 64), *(double *)(*(void *)(*(void *)(a1 + 120) + 8) + 72), v95);

    objc_msgSend_addObject_(*(void **)(a1 + 56), v98, (uint64_t)v97, v99, v100, v101);
    objc_msgSend_setString_(*(void **)(a1 + 40), v102, (uint64_t)&stru_1F20141C8, v103, v104, v105);
    objc_msgSend_removeAllIndexes(*(void **)(a1 + 32), v106, v107, v108, v109, v110);
    uint64_t v111 = *(void *)(*(void *)(a1 + 120) + 8);
    long long v112 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
    *(_OWORD *)(v111 + 48) = *MEMORY[0x1E4F1DB20];
    *(_OWORD *)(v111 + 64) = v112;
    *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = 0;
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
    *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 40;
  }
  else
  {
    uint64_t v118 = v276;
    if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)
      || (*(unsigned char *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) & 1) != 0
      || (v119 = objc_msgSend_properties(v276, (const char *)v276, v44, v45, v46, v47), uint64_t v118 = v276, (v119 & 1) != 0)
      || (uint64_t v120 = *(void **)(a1 + 136),
          uint64_t v121 = *(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24),
          uint64_t v122 = objc_msgSend_properties(v276, (const char *)v276, v44, v45, v46, v47),
          hasTransitionProperties_currentProperty_properties = objc_msgSend_hasTransitionProperties_currentProperty_properties_(v120, v123, v121, v122, *(void *)(a1 + 144), v124), uint64_t v118 = v276, !hasTransitionProperties_currentProperty_properties))
    {
      v220 = *(void **)(a1 + 40);
      v221 = objc_msgSend_string(v118, (const char *)v118, v44, v45, v46, v47);
      objc_msgSend_appendString_(v220, v222, (uint64_t)v221, v223, v224, v225);

      objc_msgSend_appendString_(*(void **)(a1 + 40), v226, @" ", v227, v228, v229);
      v230 = *(void **)(a1 + 32);
      v236 = objc_msgSend_strokeIndexes(v276, v231, v232, v233, v234, v235);
      objc_msgSend_addIndexes_(v230, v237, (uint64_t)v236, v238, v239, v240);

      v241 = *(double **)(*(void *)(a1 + 120) + 8);
      CGFloat v242 = v241[6];
      CGFloat v243 = v241[7];
      CGFloat v244 = v241[8];
      CGFloat v245 = v241[9];
      objc_msgSend_bounds(v276, v246, v247, v248, v249, v250);
      v279.origin.x = v251;
      v279.origin.y = v252;
      v279.size.width = v253;
      v279.size.height = v254;
      v278.origin.x = v242;
      v278.origin.y = v243;
      v278.size.width = v244;
      v278.size.height = v245;
      *(CGRect *)(*(void *)(*(void *)(a1 + 120) + 8) + 48) = CGRectUnion(v278, v279);
      objc_msgSend_score(v276, v255, v256, v257, v258, v259);
      *(long double *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = log(v260)
                                                                       + *(double *)(*(void *)(*(void *)(a1 + 96)
                                                                                               + 8)
                                                                                   + 24);
    }
    else
    {
      uint64_t v126 = *(void **)(a1 + 40);
      v127 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], (const char *)v276, v44, v45, v46, v47);
      uint64_t v132 = objc_msgSend_stringByTrimmingCharactersInSet_(v126, v128, (uint64_t)v127, v129, v130, v131);
      uint64_t v137 = objc_msgSend_textTranscriptionForLatex_(CHTokenizedMathResult, v133, (uint64_t)v132, v134, v135, v136);

      if ((objc_msgSend_isEqualToString_(v137, v138, (uint64_t)&stru_1F20141C8, v139, v140, v141) & 1) == 0)
      {
        uint64_t v147 = *(void *)(*(void *)(a1 + 96) + 8);
        *(long double *)(v147 + 24) = exp(*(double *)(v147 + 24)/ (double)*(uint64_t *)(*(void *)(*(void *)(a1 + 80) + 8) + 24));
        uint64_t v148 = [CHTokenizedTextResultToken alloc];
        uint64_t v154 = objc_msgSend_copy(*(void **)(a1 + 32), v149, v150, v151, v152, v153);
        double v155 = *(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 24);
        objc_msgSend_score(v276, v156, v157, v158, v159, v160);
        double v162 = v161;
        uint64_t v163 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24);
        uint64_t v164 = *(void *)(a1 + 48);
        uint64_t v165 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24);
        uint64_t v171 = objc_msgSend_count(*(void **)(a1 + 32), v166, v167, v168, v169, v170);
        uint64_t v173 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_(v148, v172, (uint64_t)v137, (uint64_t)v154, 0, v163, v164, v165, v155, v155, v155, v162, *(double *)(*(void *)(*(void *)(a1 + 120) + 8) + 48), *(double *)(*(void *)(*(void *)(a1 + 120) + 8) + 56), *(double *)(*(void *)(*(void *)(a1 + 120) + 8) + 64), *(double *)(*(void *)(*(void *)(a1 + 120) + 8) + 72), v171);

        objc_msgSend_addObject_(*(void **)(a1 + 56), v174, (uint64_t)v173, v175, v176, v177);
      }
      uint64_t v178 = *(void **)(a1 + 40);
      v179 = objc_msgSend_string(v276, v142, v143, v144, v145, v146);
      objc_msgSend_setString_(v178, v180, (uint64_t)v179, v181, v182, v183);

      objc_msgSend_appendString_(*(void **)(a1 + 40), v184, @" ", v185, v186, v187);
      objc_msgSend_removeAllIndexes(*(void **)(a1 + 32), v188, v189, v190, v191, v192);
      v193 = *(void **)(a1 + 32);
      v199 = objc_msgSend_strokeIndexes(v276, v194, v195, v196, v197, v198);
      objc_msgSend_addIndexes_(v193, v200, (uint64_t)v199, v201, v202, v203);

      objc_msgSend_bounds(v276, v204, v205, v206, v207, v208);
      v209 = *(void **)(*(void *)(a1 + 120) + 8);
      v209[6] = v210;
      v209[7] = v211;
      v209[8] = v212;
      v209[9] = v213;
      objc_msgSend_score(v276, v214, v215, v216, v217, v218);
      *(long double *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = log(v219);
      *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
      *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 8;
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) = objc_msgSend_properties(v276, v113, v114, v115, v116, v117);
}

void sub_1C49351E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4935330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49354B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4935C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,char *a36)
{
  MEMORY[0x1C8786460](v36, 0x10A0C409F3568C5);
  sub_1C4935DF0(&__p);
  sub_1C4949DD4((uint64_t)&a35, a36);

  _Unwind_Resume(a1);
}

void *sub_1C4935D3C(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void **sub_1C4935DF0(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    long long v3 = (void **)a1[1];
    size_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      size_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C4935FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4936034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4936048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4936060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4936074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4936084(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4936164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4936174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49361B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4936354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4936780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C49368B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49368C8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = v4;
  id v7 = v5;
  unint64_t v13 = objc_msgSend_length(v6, v8, v9, v10, v11, v12);
  if (v13 <= objc_msgSend_length(v7, v14, v15, v16, v17, v18))
  {
    unint64_t v25 = objc_msgSend_length(v6, v19, v20, v21, v22, v23);
    uint64_t v24 = v25 < objc_msgSend_length(v7, v26, v27, v28, v29, v30);
  }
  else
  {
    uint64_t v24 = -1;
  }

  return v24;
}

void sub_1C4936964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4936B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4937468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4937858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4937870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4937884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49380C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

double sub_1C4938234(void *a1, void *a2)
{
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  double result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t sub_1C4938274(uint64_t a1)
{
  return sub_1C4946780(a1 + 48);
}

void sub_1C493827C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v294 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v291 = a3;
  uint64_t v11 = objc_msgSend_string(v5, v6, v7, v8, v9, v10);
  int isEqualToString = objc_msgSend_isEqualToString_(v11, v12, @"("), v13, v14, v15;

  if (isEqualToString)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v17, (uint64_t)v5, v19, v20, v21);
    uint64_t v22 = *(void **)(*(void *)(a1 + 48) + 8);
    uint64_t v23 = v22[8];
    uint64_t v24 = v22[7];
    uint64_t v25 = ((v23 - v24) << 6) - 1;
    if (v23 == v24) {
      uint64_t v25 = 0;
    }
    unint64_t v26 = v22[11] + v22[10];
    if (v25 != v26) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v27 = objc_msgSend_string(v5, v17, v18, v19, v20, v21);
  if (!objc_msgSend_isEqualToString_(v27, v28, @""), v29, v30, v31))
  {

LABEL_10:
    uint64_t v60 = objc_msgSend_string(v5, v33, v34, v35, v36, v37);
    int v65 = objc_msgSend_isEqualToString_(v60, v61, @"\\lfloor", v62, v63, v64);

    if (v65)
    {
      objc_msgSend_addObject_(*(void **)(a1 + 32), v66, (uint64_t)v5, v68, v69, v70);
      uint64_t v22 = *(void **)(*(void *)(a1 + 56) + 8);
      uint64_t v71 = v22[8];
      uint64_t v24 = v22[7];
      uint64_t v72 = ((v71 - v24) << 6) - 1;
      if (v71 == v24) {
        uint64_t v72 = 0;
      }
      unint64_t v26 = v22[11] + v22[10];
      if (v72 != v26) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v73 = objc_msgSend_string(v5, v66, v67, v68, v69, v70);
      if (objc_msgSend_isEqualToString_(v73, v74, @"\\rfloor", v75, v76, v77))
      {
        uint64_t v78 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 88);

        if (v78)
        {
          uint64_t v84 = *(void **)(*(void *)(a1 + 56) + 8);
          unint64_t v85 = v84[11] + v84[10] - 1;
          uint64_t v40 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v79, *(void *)(*(void *)(v84[7] + ((v85 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v85 & 0x1FF)), v81, v82, v83);
          uint64_t v89 = objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v86, (uint64_t)v40, @"\\left\\lfloor", v87, v88);
          uint64_t v90 = *(void **)(*(void *)(a1 + 56) + 8);
          unint64_t v91 = v90[11] + v90[10] - 1;
          objc_msgSend_setObject_atIndexedSubscript_(*(void **)(a1 + 32), v92, (uint64_t)v89, *(void *)(*(void *)(v90[7] + ((v91 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v91 & 0x1FF)), v93, v94);

          uint64_t v95 = *(void **)(a1 + 32);
          uint64_t v99 = objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v96, (uint64_t)v5, @"\\right\\rfloor", v97, v98);
          objc_msgSend_addObject_(v95, v100, (uint64_t)v99, v101, v102, v103);

          uint64_t v59 = *(void *)(a1 + 56);
          goto LABEL_18;
        }
      }
      else
      {
      }
      uint64_t v111 = objc_msgSend_string(v5, v79, v80, v81, v82, v83);
      int v116 = objc_msgSend_isEqualToString_(v111, v112, @"\\lceil", v113, v114, v115);

      if (!v116)
      {
        uint64_t v124 = objc_msgSend_string(v5, v117, v118, v119, v120, v121);
        if (objc_msgSend_isEqualToString_(v124, v125, @"\\rceil", v126, v127, v128))
        {
          uint64_t v129 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 88);

          if (v129)
          {
            uint64_t v135 = *(void **)(*(void *)(a1 + 64) + 8);
            unint64_t v136 = v135[11] + v135[10] - 1;
            uint64_t v137 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v130, *(void *)(*(void *)(v135[7] + ((v136 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v136 & 0x1FF)), v132, v133, v134);
            uint64_t v141 = objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v138, (uint64_t)v137, @"\\left\\lceil", v139, v140);
            uint64_t v142 = *(void **)(*(void *)(a1 + 64) + 8);
            unint64_t v143 = v142[11] + v142[10] - 1;
            objc_msgSend_setObject_atIndexedSubscript_(*(void **)(a1 + 32), v144, (uint64_t)v141, *(void *)(*(void *)(v142[7] + ((v143 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v143 & 0x1FF)), v145, v146);

            uint64_t v147 = *(void **)(a1 + 32);
            uint64_t v151 = objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v148, (uint64_t)v5, @"\\right\\rceil", v149, v150);
            objc_msgSend_addObject_(v147, v152, (uint64_t)v151, v153, v154, v155);

            sub_1C4938EDC((void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48));
            goto LABEL_30;
          }
        }
        else
        {
        }
        uint64_t v156 = objc_msgSend_string(v5, v130, v131, v132, v133, v134);
        int v161 = objc_msgSend_isEqualToString_(v156, v157, @"|", v158, v159, v160);

        if (!v161)
        {
          objc_msgSend_addObject_(*(void **)(a1 + 32), v162, (uint64_t)v5, v163, v164, v165);
          goto LABEL_30;
        }
        uint64_t v166 = *(void **)(*(void *)(a1 + 72) + 8);
        uint64_t v167 = v166[11];
        if (v167
          && *(void *)(*(void *)(v166[7] + (((unint64_t)(v167 + v166[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v167 + v166[10] - 1) & 0x1FF)) < a3 - 1)
        {
          uint64_t v172 = objc_msgSend_arrayWithObject_(MEMORY[0x1E4F1CA48], v162, @"\\left|", v163, v164, v165);
          uint64_t v173 = *(void **)(*(void *)(a1 + 72) + 8);
          unint64_t v174 = v173[11] + v173[10] - 1;
          uint64_t v175 = *(void *)(*(void *)(v173[7] + ((v174 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v174 & 0x1FF)) + 1;
          if (v175 < a3)
          {
            do
            {
              uint64_t v176 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v168, v175, v169, v170, v171);
              uint64_t v182 = objc_msgSend_string(v176, v177, v178, v179, v180, v181);
              objc_msgSend_addObject_(v172, v183, (uint64_t)v182, v184, v185, v186);

              ++v175;
            }
            while (a3 != v175);
          }
          objc_msgSend_addObject_(v172, v168, @"\\right|", v169, v170, v171);
          uint64_t v191 = objc_msgSend_componentsJoinedByString_(v172, v187, @" ", v188, v189, v190);
          uint64_t v192 = *(CoreHandwriting::LaTeXSyntaxHelper **)(*(void *)(a1 + 40) + 8);
          id v193 = v191;
          v199 = (char *)objc_msgSend_UTF8String(v193, v194, v195, v196, v197, v198);
          sub_1C4935D3C(__p, v199);
          sub_1C4B17C20(v192, (uint64_t *)__p, &v289);
          if (v293 < 0) {
            operator delete(*(void **)__p);
          }
          v200 = v290[0];
          if (v290[0])
          {
            uint64_t v201 = v290;
            uint64_t v202 = (int *)v290;
            uint64_t v203 = (int *)v290[0];
            do
            {
              v204 = v203;
              uint64_t v205 = v202;
              int v206 = v203[8];
              if (v206 >= 2) {
                uint64_t v202 = v203;
              }
              else {
                v203 += 2;
              }
              uint64_t v203 = *(int **)v203;
            }
            while (v203);
            if (v202 == (int *)v290)
            {
              v222 = v290[0];
            }
            else
            {
              if (v206 < 2) {
                v204 = v205;
              }
              if (v204[8] > 2)
              {
                v222 = v290[0];
              }
              else
              {
                uint64_t v207 = (int *)v290;
                uint64_t v208 = (int *)v290[0];
                do
                {
                  v209 = v208;
                  uint64_t v210 = v207;
                  int v211 = v208[8];
                  if (v211 >= 5) {
                    uint64_t v207 = v208;
                  }
                  else {
                    v208 += 2;
                  }
                  uint64_t v208 = *(int **)v208;
                }
                while (v208);
                if (v207 == (int *)v290) {
                  goto LABEL_61;
                }
                if (v211 < 5) {
                  v209 = v210;
                }
                if (v209[8] >= 6)
                {
LABEL_61:
                  uint64_t v212 = (int *)v290;
                  uint64_t v213 = (int *)v290[0];
                  do
                  {
                    v214 = v213;
                    uint64_t v215 = v212;
                    int v216 = v213[8];
                    if (v216 >= 6) {
                      uint64_t v212 = v213;
                    }
                    else {
                      v213 += 2;
                    }
                    uint64_t v213 = *(int **)v213;
                  }
                  while (v213);
                  if (v212 == (int *)v290) {
                    goto LABEL_70;
                  }
                  if (v216 < 6) {
                    v214 = v215;
                  }
                  if (v214[8] >= 7)
                  {
LABEL_70:
                    uint64_t v217 = (int *)v290;
                    uint64_t v218 = (int *)v290[0];
                    do
                    {
                      long double v219 = v218;
                      v220 = v217;
                      int v221 = v218[8];
                      if (v221 >= 7) {
                        uint64_t v217 = v218;
                      }
                      else {
                        v218 += 2;
                      }
                      uint64_t v218 = *(int **)v218;
                    }
                    while (v218);
                    if (v217 == (int *)v290) {
                      goto LABEL_79;
                    }
                    if (v221 < 7) {
                      long double v219 = v220;
                    }
                    v222 = v290[0];
                    if (v219[8] > 7)
                    {
LABEL_79:
                      sub_1C494AC4C((uint64_t)&v289, v290[0]);

                      uint64_t v223 = *(void **)(*(void *)(a1 + 72) + 8);
                      unint64_t v224 = v223[11] + v223[10] - 1;
                      uint64_t v229 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v225, *(void *)(*(void *)(v223[7] + ((v224 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v224 & 0x1FF)), v226, v227, v228);
                      uint64_t v233 = objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v230, (uint64_t)v229, @"\\left|", v231, v232);
                      uint64_t v234 = *(void **)(*(void *)(a1 + 72) + 8);
                      unint64_t v235 = v234[11] + v234[10] - 1;
                      objc_msgSend_setObject_atIndexedSubscript_(*(void **)(a1 + 32), v236, (uint64_t)v233, *(void *)(*(void *)(v234[7] + ((v235 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v235 & 0x1FF)), v237, v238);

                      uint64_t v239 = [CHTokenizedMathResultToken alloc];
                      CGFloat v245 = objc_msgSend_strokeIndexes(v5, v240, v241, v242, v243, v244);
                      objc_msgSend_score(v5, v246, v247, v248, v249, v250);
                      double v252 = v251;
                      objc_msgSend_bounds(v5, v253, v254, v255, v256, v257);
                      double v259 = v258;
                      double v261 = v260;
                      double v263 = v262;
                      double v265 = v264;
                      v271 = objc_msgSend_maskedAlternative(v5, v266, v267, v268, v269, v270);
                      objc_msgSend_maskedAlternativeScore(v5, v272, v273, v274, v275, v276);
                      CGRect v279 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v239, v277, @"\\right|", (uint64_t)v245, 4096, (uint64_t)v271, v252, v259, v261, v263, v265, v278);

                      objc_msgSend_addObject_(*(void **)(a1 + 32), v280, (uint64_t)v279, v281, v282, v283);
                      sub_1C4938EDC((void *)(*(void *)(*(void *)(a1 + 72) + 8) + 48));

                      goto LABEL_30;
                    }
                  }
                  else
                  {
                    v222 = v290[0];
                  }
                }
                else
                {
                  v222 = v290[0];
                }
              }
            }
            do
            {
              v284 = v222;
              v285 = v201;
              int v286 = *((_DWORD *)v222 + 8);
              if (v286 >= 0) {
                uint64_t v201 = (void **)v222;
              }
              else {
                ++v222;
              }
              v222 = (void *)*v222;
            }
            while (v222);
            if (v201 != v290)
            {
              v287 = (int *)(v286 >= 0 ? v284 : v285);
              if (v287[8] <= 0)
              {
                v288 = CHOSLogForCategory(1);
                if (os_log_type_enabled(v288, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)__p = 138412290;
                  *(void *)&__p[4] = v193;
                  _os_log_impl(&dword_1C492D000, v288, OS_LOG_TYPE_FAULT, "CHBracketsMatchingStep symbol out of codemap in latexHelper for %@", __p, 0xCu);
                }

                v200 = v290[0];
              }
            }
          }
          sub_1C494AC4C((uint64_t)&v289, v200);
        }
        objc_msgSend_addObject_(*(void **)(a1 + 32), v162, (uint64_t)v5, v163, v164, v165);
        sub_1C4938E50((void *)(*(void *)(*(void *)(a1 + 72) + 8) + 48), &v291);
        goto LABEL_30;
      }
      objc_msgSend_addObject_(*(void **)(a1 + 32), v117, (uint64_t)v5, v119, v120, v121);
      uint64_t v22 = *(void **)(*(void *)(a1 + 64) + 8);
      uint64_t v122 = v22[8];
      uint64_t v24 = v22[7];
      uint64_t v123 = ((v122 - v24) << 6) - 1;
      if (v122 == v24) {
        uint64_t v123 = 0;
      }
      unint64_t v26 = v22[11] + v22[10];
      if (v123 != v26) {
        goto LABEL_29;
      }
    }
LABEL_28:
    sub_1C494A570(v22 + 6);
    uint64_t v24 = v22[7];
    unint64_t v26 = v22[11] + v22[10];
LABEL_29:
    *(void *)(*(void *)(v24 + ((v26 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v26 & 0x1FF)) = a3;
    ++v22[11];
    goto LABEL_30;
  }
  uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 88);

  if (!v32) {
    goto LABEL_10;
  }
  uint64_t v38 = *(void **)(*(void *)(a1 + 48) + 8);
  unint64_t v39 = v38[11] + v38[10] - 1;
  uint64_t v40 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v33, *(void *)(*(void *)(v38[7] + ((v39 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v39 & 0x1FF)), v35, v36, v37);
  uint64_t v44 = objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v41, (uint64_t)v40, @"\\left("), v42, v43;
  uint64_t v45 = *(void **)(*(void *)(a1 + 48) + 8);
  unint64_t v46 = v45[11] + v45[10] - 1;
  objc_msgSend_setObject_atIndexedSubscript_(*(void **)(a1 + 32), v47, (uint64_t)v44, *(void *)(*(void *)(v45[7] + ((v46 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v46 & 0x1FF)), v48, v49);

  uint64_t v50 = *(void **)(a1 + 32);
  uint64_t v54 = objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v51, (uint64_t)v5, @"\\right"), v52, v53);
  objc_msgSend_addObject_(v50, v55, (uint64_t)v54, v56, v57, v58);

  uint64_t v59 = *(void *)(a1 + 48);
LABEL_18:
  uint64_t v104 = *(void **)(v59 + 8);
  uint64_t v106 = v104[7];
  uint64_t v105 = v104[8];
  uint64_t v107 = ((v105 - v106) << 6) - 1;
  BOOL v108 = v105 == v106;
  uint64_t v110 = v104[10];
  uint64_t v109 = v104[11];
  if (v108) {
    uint64_t v107 = 0;
  }
  v104[11] = v109 - 1;
  if ((unint64_t)(v107 - (v109 + v110) + 1) >= 0x400)
  {
    operator delete(*(void **)(v105 - 8));
    v104[8] -= 8;
  }

LABEL_30:
}

void sub_1C4938D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4938E50(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1C494A570(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_1C4938EDC(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  uint64_t v3 = ((v1 - v2) << 6) - 1;
  BOOL v4 = v1 == v2;
  uint64_t v6 = a1[4];
  uint64_t v5 = a1[5];
  if (v4) {
    uint64_t v3 = 0;
  }
  a1[5] = v5 - 1;
  if ((unint64_t)(v3 - (v5 + v6) + 1) >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void sub_1C4939594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C493970C(uint64_t a1, void *a2, unint64_t a3)
{
  id v49 = a2;
  if ((objc_msgSend_properties(v49, v5, v6, v7, v8, v9) & 0x2000) != 0)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v10, (uint64_t)v49, v12, v13, v14);
  }
  else
  {
    if (!a3) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (objc_msgSend_properties(v49, v10, v11, v12, v13, v14) & 0x80) != 0;
    }
    if (!objc_msgSend_properties(v49, v10, v11, v12, v13, v14)
      || (objc_msgSend_properties(v49, v15, v16, v17, v18, v19) & 0x10) != 0
      || (objc_msgSend_properties(v49, v15, v16, v17, v18, v19) & 4) != 0
      && (objc_msgSend_string(v49, v15, v16, v17, v18, v19),
          uint64_t v20 = objc_claimAutoreleasedReturnValue(),
          char isEqualToString = objc_msgSend_isEqualToString_(v20, v21, @"'", v22, v23, v24),
          v20,
          (isEqualToString & 1) != 0)
      || (objc_msgSend_properties(v49, v15, v16, v17, v18, v19) & 0x20) != 0
      || *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)
      && (objc_msgSend_properties(v49, v15, v16, v17, v18, v19) & 0x40) != 0)
    {
      uint64_t v31 = objc_msgSend_mutableCopy(v49, v15, v16, v17, v18, v19);
      uint64_t v36 = v31;
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
        && !*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)
        || (unint64_t v37 = *(void *)(a1 + 56), v37 == 0x7FFFFFFFFFFFFFFFLL)
        || v37 > a3
        || *(void *)(a1 + 64) + v37 <= a3)
      {
        objc_msgSend_setProperties_(v31, v32, 64, v33, v34, v35);
      }
      else
      {
        objc_msgSend_setProperties_(v31, v32, 0x80000, v33, v34, v35);
      }
      uint64_t v43 = *(void **)(a1 + 32);
      uint64_t v44 = objc_msgSend_copy(v36, v38, v39, v40, v41, v42);
      objc_msgSend_addObject_(v43, v45, (uint64_t)v44, v46, v47, v48);
    }
    else
    {
      objc_msgSend_addObject_(*(void **)(a1 + 32), v15, (uint64_t)v49, v17, v18, v19);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (objc_msgSend_properties(v49, v26, v27, v28, v29, v30) & 2) != 0;
  }
}

void sub_1C49398B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49398D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49398EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4939900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4939918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493992C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49399FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_objectForKey_(*(void **)(a1 + 32), a2, (uint64_t)CHMathPostProcessingOptionLocales, a4, a5, a6);
  id v20 = (id)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    id v6 = objc_alloc(MEMORY[0x1E4F56920]);
    id v11 = (id)objc_msgSend_initWithLocales_(v6, v7, (uint64_t)v20, v8, v9, v10);
  }
  else
  {
    id v11 = objc_alloc_init(MEMORY[0x1E4F56920]);
  }
  uint64_t v12 = (void *)qword_1EA3C8FE0;
  qword_1EA3C8FE0 = (uint64_t)v11;

  uint64_t v18 = objc_msgSend_conversionVerbs((void *)qword_1EA3C8FE0, v13, v14, v15, v16, v17);
  uint64_t v19 = (void *)qword_1EA3C8FD0;
  qword_1EA3C8FD0 = v18;
}

void sub_1C4939A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4939D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C4939E48(uint64_t a1, void *a2)
{
  id v47 = a2;
  uint64_t v8 = objc_msgSend_string(v47, v3, v4, v5, v6, v7);
  char isEqualToString = objc_msgSend_isEqualToString_(v8, v9, @"=", v10, v11, v12);

  uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8);
  char v20 = isEqualToString ^ 1;
  if (!*(unsigned char *)(v19 + 24)) {
    char v20 = 0;
  }
  *(unsigned char *)(v19 + 24) = v20;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    uint64_t v21 = objc_msgSend_mutableCopy(v47, v14, v15, v16, v17, v18);
    uint64_t v27 = objc_msgSend_properties(v21, v22, v23, v24, v25, v26);
    objc_msgSend_setProperties_(v21, v28, v27 | 0x10, v29, v30, v31);
    objc_msgSend_addObject_(*(void **)(a1 + 32), v32, (uint64_t)v21, v33, v34, v35);
    uint64_t v36 = *(void **)(a1 + 40);
    uint64_t v42 = objc_msgSend_copy(v21, v37, v38, v39, v40, v41);
    objc_msgSend_addObject_(v36, v43, (uint64_t)v42, v44, v45, v46);
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v14, (uint64_t)v47, v16, v17, v18);
  }
}

void sub_1C4939F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v10;

  _Unwind_Resume(a1);
}

void sub_1C4939F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4939F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493A2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C493A3FC()
{
}

void sub_1C493A404(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = (void *)MEMORY[0x1E4F1CAD0];
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = objc_msgSend_componentsSeparatedByCharactersInSet_(@"0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z ! } \\right \\right\\rfloor \\right\\rceil \\right| \\$ € £ ¥ ¢ ₺ ₴ ₽ ₩"), v7, (uint64_t)v18, v8, v9, v10);
  uint64_t v16 = objc_msgSend_setWithArray_(v6, v12, (uint64_t)v11, v13, v14, v15);
  uint64_t v17 = (void *)qword_1EA3C9CE8;
  qword_1EA3C9CE8 = v16;
}

void sub_1C493A494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493A4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493A4C0(uint64_t a1, void *a2)
{
  id v83 = a2;
  char v8 = objc_msgSend_properties(v83, v3, v4, v5, v6, v7);
  char v14 = objc_msgSend_properties(v83, v9, v10, v11, v12, v13);
  unint64_t v20 = objc_msgSend_properties(v83, v15, v16, v17, v18, v19);
  __int16 v26 = objc_msgSend_properties(v83, v21, v22, v23, v24, v25);
  char v37 = objc_msgSend_properties(v83, v27, v28, v29, v30, v31);
  uint64_t v38 = (v20 >> 19) & 1;
  unint64_t v39 = v8 & 0x40;
  if (((v8 & 0x40) != 0 && !*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)
     || v14 < 0 && !*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    && !*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    uint64_t v59 = [CHTokenizedMathResultToken alloc];
    int v65 = objc_msgSend_indexSet(MEMORY[0x1E4F28D60], v60, v61, v62, v63, v64);
    id v49 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v59, v66, @"\\,", (uint64_t)v65, 0x2000, v67, 1.0, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));

    objc_msgSend_addObject_(*(void **)(a1 + 32), v68, (uint64_t)v49, v69, v70, v71);
    goto LABEL_15;
  }
  if ((v26 & 0x2000) != 0)
  {
    id v49 = objc_msgSend_string(v83, v32, v33, v34, v35, v36);
    if (objc_msgSend_isEqualToString_(v49, v54, @"\\"", v55, v56, v57))
    {
      int v58 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);

      if (!v58) {
        goto LABEL_16;
      }
      objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v32, (uint64_t)v83, @"\\,", v35, v36);
      id v49 = v83;
      id v83 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_15;
  }
  if (v38 != *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    uint64_t v40 = [CHTokenizedMathResultToken alloc];
    uint64_t v46 = objc_msgSend_indexSet(MEMORY[0x1E4F28D60], v41, v42, v43, v44, v45);
    id v49 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v40, v47, @"\\"", (uint64_t)v46, 0x2000, v48, 1.0, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));

    objc_msgSend_addObject_(*(void **)(a1 + 32), v50, (uint64_t)v49, v51, v52, v53);
LABEL_15:
  }
LABEL_16:
  objc_msgSend_addObject_(*(void **)(a1 + 32), v32, (uint64_t)v83, v34, v35, v36);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v39 >> 6;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v14 < 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = (v37 & 2) != 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v38;
  uint64_t v72 = (void *)qword_1EA3C9CE8;
  uint64_t v78 = objc_msgSend_string(v83, v73, v74, v75, v76, v77);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = objc_msgSend_containsObject_(v72, v79, (uint64_t)v78, v80, v81, v82);
}

void sub_1C493A774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493A7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493A7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493A804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493A818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493A82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493A840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493A8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C493A904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C493AB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493AC1C()
{
}

void sub_1C493AC24()
{
  JUMPOUT(0x1C493AC00);
}

void sub_1C493AC34()
{
  JUMPOUT(0x1C493AC00);
}

void sub_1C493AC40()
{
}

void sub_1C493AC48()
{
  JUMPOUT(0x1C493ABFCLL);
}

void sub_1C493AC54()
{
}

void sub_1C493AC5C()
{
}

void sub_1C493AC64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  id v35 = v3;
  uint64_t v10 = objc_msgSend_string(v3, v5, v6, v7, v8, v9);
  LODWORD(v4) = objc_msgSend_containsObject_(v4, v11, (uint64_t)v10, v12, v13, v14);

  if (v4)
  {
    unint64_t v20 = NSString;
    uint64_t v21 = objc_msgSend_string(v35, v15, v16, v17, v18, v19);
    __int16 v26 = objc_msgSend_stringWithFormat_(v20, v22, @"\\text{%@}", v23, v24, v25, v21);

    uint64_t v30 = objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v27, (uint64_t)v35, (uint64_t)v26, v28, v29);
    objc_msgSend_addObject_(*(void **)(a1 + 40), v31, (uint64_t)v30, v32, v33, v34);
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v15, (uint64_t)v35, v17, v18, v19);
  }
}

void sub_1C493AD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493AD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493AD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493ADA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493ADBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493ADD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493B1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C493B828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  _Block_object_dispose(&a21, 8);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }

  id v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }

  _Unwind_Resume(a1);
}

void sub_1C493B9C8()
{
  if (!*(void *)(v1 - 128)) {
    JUMPOUT(0x1C493B9ACLL);
  }
  JUMPOUT(0x1C493B9A4);
}

void sub_1C493B9E0()
{
  if (!*(void *)(v1 - 128)) {
    JUMPOUT(0x1C493B9ACLL);
  }
  JUMPOUT(0x1C493B9A4);
}

void sub_1C493B9F4()
{
  if (!*(void *)(v0 - 128)) {
    JUMPOUT(0x1C493B9ACLL);
  }
  JUMPOUT(0x1C493B9A4);
}

void sub_1C493BA04()
{
  if (!*(void *)(v2 - 128)) {
    JUMPOUT(0x1C493B9ACLL);
  }
  JUMPOUT(0x1C493B9A4);
}

void sub_1C493BA1C()
{
  if (!*(void *)(v1 - 128)) {
    JUMPOUT(0x1C493B9ACLL);
  }
  JUMPOUT(0x1C493B9A4);
}

void sub_1C493BA30()
{
  if (*(void *)(v0 - 128)) {
    JUMPOUT(0x1C493B9A4);
  }
  JUMPOUT(0x1C493B9ACLL);
}

__n128 sub_1C493BA40(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C493BA64(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C493BA7C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v37 = a2;
  __int16 v11 = objc_msgSend_properties(v37, v6, v7, v8, v9, v10);
  uint64_t v16 = (uint64_t)v37;
  if ((v11 & 0x2000) != 0)
  {
    uint64_t v17 = *(void **)(*(void *)(a1 + 40) + 8);
    uint64_t v19 = (char *)v17[7];
    unint64_t v18 = v17[8];
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v21 = (char *)v17[6];
      uint64_t v22 = (v19 - v21) >> 3;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        sub_1C494A220();
      }
      uint64_t v24 = v18 - (void)v21;
      if (v24 >> 2 > v23) {
        unint64_t v23 = v24 >> 2;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 >> 61) {
          sub_1C4949AA8();
        }
        __int16 v26 = operator new(8 * v25);
      }
      else
      {
        __int16 v26 = 0;
      }
      uint64_t v27 = &v26[8 * v22];
      void *v27 = *a4;
      unint64_t v20 = v27 + 1;
      if (v19 != v21)
      {
        unint64_t v28 = v19 - v21 - 8;
        if (v28 < 0x58) {
          goto LABEL_32;
        }
        if ((unint64_t)(v21 - v26) < 0x20) {
          goto LABEL_32;
        }
        uint64_t v29 = (v28 >> 3) + 1;
        uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v31 = &v19[-v30];
        uint64_t v27 = (void *)((char *)v27 - v30);
        uint64_t v32 = &v26[8 * v22 - 16];
        uint64_t v33 = v19 - 16;
        uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          *uint64_t v32 = v35;
          v32 -= 2;
          v33 -= 32;
          v34 -= 4;
        }
        while (v34);
        uint64_t v19 = v31;
        if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_32:
          do
          {
            uint64_t v36 = *((void *)v19 - 1);
            v19 -= 8;
            *--uint64_t v27 = v36;
          }
          while (v19 != v21);
        }
      }
      v17[6] = v27;
      v17[7] = v20;
      v17[8] = &v26[8 * v25];
      if (v21) {
        operator delete(v21);
      }
      uint64_t v16 = (uint64_t)v37;
    }
    else
    {
      *(void *)uint64_t v19 = *a4;
      unint64_t v20 = v19 + 8;
    }
    v17[7] = v20;
  }
  objc_msgSend_addObject_(*(void **)(a1 + 32), v12, v16, v13, v14, v15);
}

void sub_1C493BC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493C378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

double sub_1C493C4A4(void *a1, void *a2)
{
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  double result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t sub_1C493C4E4(uint64_t a1)
{
  return sub_1C494685C(a1 + 48);
}

double sub_1C493C4EC(void *a1, void *a2)
{
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  double result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t sub_1C493C52C(uint64_t a1)
{
  return sub_1C494685C(a1 + 48);
}

double sub_1C493C534(void *a1, void *a2)
{
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  double result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t sub_1C493C574(uint64_t a1)
{
  return sub_1C494685C(a1 + 48);
}

void sub_1C493C57C(uint64_t a1, void *a2)
{
  uint64_t v435 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  v426 = v3;
  uint64_t v9 = objc_msgSend_string(v3, v4, v5, v6, v7, v8);
  int isEqualToString = objc_msgSend_isEqualToString_(v9, v10, @"^", v11, v12, v13);

  if (isEqualToString)
  {
    unint64_t v20 = objc_msgSend_arrayWithObject_(MEMORY[0x1E4F1CA48], v15, (uint64_t)v3, v17, v18, v19);
    uint64_t v21 = *(void **)(*(void *)(a1 + 48) + 8);
    uint64_t v22 = v21[7];
    uint64_t v23 = v21[8];
    uint64_t v24 = ((v23 - v22) << 6) - 1;
    if (v23 == v22) {
      uint64_t v24 = 0;
    }
    if (v24 == v21[11] + v21[10])
    {
      sub_1C494ADF8(v21 + 6);
      uint64_t v22 = v21[7];
      uint64_t v23 = v21[8];
    }
    if (v23 == v22)
    {
      __int16 v26 = 0;
    }
    else
    {
      unint64_t v25 = v21[11] + v21[10];
      __int16 v26 = (void *)(*(void *)(v22 + ((v25 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v25 & 0x1FF));
    }
    id v424 = v20;
    *__int16 v26 = v424;
    ++v21[11];
    uint64_t v107 = objc_msgSend_strokeIndexes(v426, v102, v103, v104, v105, v106);
    uint64_t v113 = objc_msgSend_mutableCopy(v107, v108, v109, v110, v111, v112);

    uint64_t v114 = *(void **)(*(void *)(a1 + 56) + 8);
    int v116 = (char *)v114[7];
    uint64_t v115 = (char *)v114[8];
    uint64_t v117 = v115 - v116;
    if (v115 == v116) {
      uint64_t v118 = 0;
    }
    else {
      uint64_t v118 = ((v115 - v116) << 6) - 1;
    }
    unint64_t v119 = v114[10];
    if (v118 != v114[11] + v119) {
      goto LABEL_161;
    }
    BOOL v120 = v119 >= 0x200;
    unint64_t v121 = v119 - 512;
    if (!v120)
    {
      v423 = v113;
      uint64_t v268 = v117 >> 3;
      uint64_t v269 = (char *)v114[9];
      uint64_t v270 = (char *)v114[6];
      if (v117 >> 3 >= (unint64_t)((v269 - v270) >> 3))
      {
        if (v269 == v270) {
          unint64_t v273 = 1;
        }
        else {
          unint64_t v273 = (v269 - v270) >> 2;
        }
        if (!(v273 >> 61))
        {
          uint64_t v274 = (char *)operator new(8 * v273);
          uint64_t v275 = operator new(0x1000uLL);
          uint64_t v276 = &v274[8 * v268];
          v277 = &v274[8 * v273];
          if (v268 == v273)
          {
            v422 = v275;
            if (v117 < 1)
            {
              if (v115 == v116) {
                unint64_t v287 = 1;
              }
              else {
                unint64_t v287 = v117 >> 2;
              }
              if (v287 >> 61) {
                sub_1C4949AA8();
              }
              uint64_t v276 = (char *)operator new(8 * v287);
              v277 = &v276[8 * v287];
              operator delete(v274);
              int v116 = (char *)v114[7];
              uint64_t v115 = (char *)v114[8];
              uint64_t v274 = v276;
            }
            else
            {
              unint64_t v278 = v268 + 2;
              if (v268 >= -1) {
                unint64_t v278 = v268 + 1;
              }
              v276 -= 8 * (v278 >> 1);
            }
            uint64_t v275 = v422;
          }
          *(void *)uint64_t v276 = v275;
          v288 = v276 + 8;
          if (v115 == v116)
          {
            v289 = v276;
            v290 = v276 + 8;
          }
          else
          {
            do
            {
              if (v276 == v274)
              {
                if (v288 >= v277)
                {
                  if (v277 == v276) {
                    unint64_t v296 = 1;
                  }
                  else {
                    unint64_t v296 = (v277 - v276) >> 2;
                  }
                  if (v296 >> 61) {
                    sub_1C4949AA8();
                  }
                  v297 = (char *)operator new(8 * v296);
                  uint64_t v274 = v297;
                  unint64_t v298 = (v296 + 3) >> 2;
                  v292 = &v297[8 * v298];
                  v290 = v292;
                  int64_t v299 = v288 - v276;
                  if (v288 != v276)
                  {
                    v290 = &v292[v299 & 0xFFFFFFFFFFFFFFF8];
                    unint64_t v300 = v299 - 8;
                    v301 = &v297[8 * v298];
                    v302 = v276;
                    if (v300 < 0x38) {
                      goto LABEL_205;
                    }
                    uint64_t v303 = 8 * v298;
                    v301 = &v297[8 * v298];
                    v302 = v276;
                    if ((unint64_t)(v301 - v276) < 0x20) {
                      goto LABEL_205;
                    }
                    uint64_t v304 = (v300 >> 3) + 1;
                    uint64_t v305 = 8 * (v304 & 0x3FFFFFFFFFFFFFFCLL);
                    v301 = &v292[v305];
                    v302 = &v276[v305];
                    v306 = (long long *)(v276 + 16);
                    v307 = &v297[v303 + 16];
                    uint64_t v308 = v304 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v309 = *v306;
                      *((_OWORD *)v307 - 1) = *(v306 - 1);
                      *(_OWORD *)v307 = v309;
                      v306 += 2;
                      v307 += 32;
                      v308 -= 4;
                    }
                    while (v308);
                    if (v304 != (v304 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_205:
                      do
                      {
                        uint64_t v310 = *(void *)v302;
                        v302 += 8;
                        *(void *)v301 = v310;
                        v301 += 8;
                      }
                      while (v301 != v290);
                    }
                  }
                  v277 = &v297[8 * v296];
                  operator delete(v276);
                }
                else
                {
                  uint64_t v294 = (v277 - v288) >> 3;
                  if (v294 >= -1) {
                    unint64_t v295 = v294 + 1;
                  }
                  else {
                    unint64_t v295 = v294 + 2;
                  }
                  v290 = &v288[8 * (v295 >> 1)];
                  v292 = &v276[8 * (v295 >> 1)];
                  if (v288 == v276)
                  {
                    uint64_t v274 = v288;
                  }
                  else
                  {
                    memmove(&v276[8 * (v295 >> 1)], v276, v288 - v276);
                    uint64_t v274 = v276;
                  }
                }
              }
              else
              {
                v292 = v276;
                v290 = v288;
              }
              uint64_t v293 = *((void *)v115 - 1);
              v115 -= 8;
              *((void *)v292 - 1) = v293;
              v289 = v292 - 8;
              v288 = v290;
              uint64_t v276 = v289;
            }
            while (v115 != (char *)v114[7]);
          }
          uint64_t v291 = (void *)v114[6];
          v114[6] = v274;
          v114[7] = v289;
          uint64_t v115 = v290;
          v114[8] = v290;
          v114[9] = v277;
          uint64_t v113 = v423;
          if (v291)
          {
            operator delete(v291);
            uint64_t v115 = (char *)v114[8];
          }
          goto LABEL_160;
        }
      }
      else
      {
        v271 = operator new(0x1000uLL);
        uint64_t v272 = v271;
        if (v269 != v115)
        {
          *(void *)uint64_t v115 = v271;
          uint64_t v115 = (char *)(v114[8] + 8);
          v114[8] = v115;
          uint64_t v113 = v423;
LABEL_160:
          int v116 = (char *)v114[7];
LABEL_161:
          if (v115 == v116)
          {
            v344 = 0;
          }
          else
          {
            unint64_t v343 = v114[11] + v114[10];
            v344 = (void *)(*(void *)&v116[(v343 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v343 & 0x1FF));
          }
          id v345 = v113;
          void *v344 = v345;
          ++v114[11];
          v351 = objc_msgSend_string(v426, v346, v347, v348, v349, v350);
          v357 = objc_msgSend_mutableCopy(v351, v352, v353, v354, v355, v356);

          v358 = *(void **)(*(void *)(a1 + 64) + 8);
          uint64_t v359 = v358[7];
          uint64_t v360 = v358[8];
          uint64_t v361 = ((v360 - v359) << 6) - 1;
          if (v360 == v359) {
            uint64_t v361 = 0;
          }
          if (v361 == v358[11] + v358[10])
          {
            sub_1C494B4D4(v358 + 6);
            uint64_t v359 = v358[7];
            uint64_t v360 = v358[8];
          }
          if (v360 == v359)
          {
            v363 = 0;
          }
          else
          {
            unint64_t v362 = v358[11] + v358[10];
            v363 = (void *)(*(void *)(v359 + ((v362 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v362 & 0x1FF));
          }
          id v364 = v357;
          void *v363 = v364;
          ++v358[11];
          v365 = *(void **)(*(void *)(a1 + 72) + 8);
          uint64_t v366 = v365[8];
          uint64_t v367 = v365[7];
          uint64_t v368 = ((v366 - v367) << 6) - 1;
          if (v366 == v367) {
            uint64_t v368 = 0;
          }
          unint64_t v369 = v365[11] + v365[10];
          id v3 = v426;
          if (v368 == v369)
          {
            sub_1C494A570(v365 + 6);
            uint64_t v367 = v365[7];
            unint64_t v369 = v365[11] + v365[10];
          }
          *(void *)(*(void *)(v367 + ((v369 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v369 & 0x1FF)) = 0;
          ++v365[11];

          goto LABEL_176;
        }
        if (v116 == v270)
        {
          if (v115 == v116) {
            unint64_t v311 = 1;
          }
          else {
            unint64_t v311 = (v269 - v116) >> 2;
          }
          if (v311 >> 61) {
            goto LABEL_201;
          }
          v312 = (char *)operator new(8 * v311);
          unint64_t v313 = (v311 + 3) >> 2;
          int v286 = &v312[8 * v313];
          v314 = v286;
          if (v115 != v116)
          {
            v314 = &v286[8 * v268];
            v315 = &v312[8 * v313];
            v316 = v116;
            if ((unint64_t)(v117 - 8) < 0x38) {
              goto LABEL_206;
            }
            v317 = &v312[8 * v313];
            v315 = v317;
            v316 = v116;
            if ((unint64_t)(v317 - v116) < 0x20) {
              goto LABEL_206;
            }
            unint64_t v318 = ((unint64_t)(v117 - 8) >> 3) + 1;
            uint64_t v319 = 8 * (v318 & 0x3FFFFFFFFFFFFFFCLL);
            v315 = &v286[v319];
            v316 = &v116[v319];
            v320 = (long long *)(v116 + 16);
            v321 = v317 + 16;
            uint64_t v322 = v318 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v323 = *v320;
              *(v321 - 1) = *(v320 - 1);
              _OWORD *v321 = v323;
              v320 += 2;
              v321 += 2;
              v322 -= 4;
            }
            while (v322);
            if (v318 != (v318 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_206:
              do
              {
                uint64_t v324 = *(void *)v316;
                v316 += 8;
                *(void *)v315 = v324;
                v315 += 8;
              }
              while (v315 != v314);
            }
          }
          v114[6] = v312;
          v114[7] = v286;
          v114[8] = v314;
          v114[9] = &v312[8 * v311];
          if (v116)
          {
            operator delete(v116);
            int v286 = (char *)v114[7];
          }
        }
        else
        {
          int v286 = v116;
        }
        *((void *)v286 - 1) = v272;
        v326 = (char *)v114[7];
        v325 = (char *)v114[8];
        v114[7] = v326 - 8;
        uint64_t v327 = *((void *)v326 - 1);
        v114[7] = v326;
        uint64_t v113 = v423;
        if (v325 != (char *)v114[9])
        {
LABEL_199:
          *(void *)v325 = v327;
          uint64_t v115 = (char *)(v114[8] + 8);
          v114[8] = v115;
          goto LABEL_160;
        }
        v328 = (char *)v114[6];
        if (v326 > v328)
        {
          uint64_t v329 = (v326 - v328) >> 3;
          if (v329 >= -1) {
            uint64_t v330 = v329 + 1;
          }
          else {
            uint64_t v330 = v329 + 2;
          }
          uint64_t v331 = v330 >> 1;
          uint64_t v332 = -v331;
          v333 = &v326[-8 * v331];
          int64_t v334 = v325 - v326;
          if (v325 != v326)
          {
            memmove(&v326[-8 * v331], v326, v325 - v326);
            v326 = (char *)v114[7];
          }
          v325 = &v333[v334];
          v114[7] = &v326[8 * v332];
          v114[8] = &v333[v334];
          goto LABEL_199;
        }
        if (v325 == v328) {
          unint64_t v407 = 1;
        }
        else {
          unint64_t v407 = (v325 - v328) >> 2;
        }
        if (!(v407 >> 61))
        {
          v408 = (char *)operator new(8 * v407);
          v409 = &v408[8 * (v407 >> 2)];
          int64_t v410 = v325 - v326;
          BOOL v51 = v325 == v326;
          v325 = v409;
          uint64_t v113 = v423;
          if (v51) {
            goto LABEL_197;
          }
          v325 = &v409[v410 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v411 = v410 - 8;
          if (v411 >= 0x38)
          {
            v413 = &v408[8 * (v407 >> 2)];
            v412 = v413;
            if ((unint64_t)(v413 - v326) >= 0x20)
            {
              uint64_t v414 = (v411 >> 3) + 1;
              uint64_t v415 = 8 * (v414 & 0x3FFFFFFFFFFFFFFCLL);
              v412 = &v409[v415];
              v416 = &v326[v415];
              v417 = (long long *)(v326 + 16);
              v418 = v413 + 16;
              uint64_t v419 = v414 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v420 = *v417;
                *(v418 - 1) = *(v417 - 1);
                _OWORD *v418 = v420;
                v417 += 2;
                v418 += 2;
                v419 -= 4;
              }
              while (v419);
              v326 = v416;
              if (v414 == (v414 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_197:
                v114[6] = v408;
                v114[7] = v409;
                v114[8] = v325;
                v114[9] = &v408[8 * v407];
                if (v328)
                {
                  operator delete(v328);
                  v325 = (char *)v114[8];
                }
                goto LABEL_199;
              }
            }
          }
          else
          {
            v412 = &v408[8 * (v407 >> 2)];
          }
          do
          {
            uint64_t v421 = *(void *)v326;
            v326 += 8;
            *(void *)v412 = v421;
            v412 += 8;
          }
          while (v412 != v325);
          goto LABEL_197;
        }
      }
LABEL_201:
      sub_1C4949AA8();
    }
    v114[10] = v121;
    uint64_t v122 = v116 + 8;
    uint64_t v123 = *(void *)v116;
    v114[7] = v116 + 8;
    if (v115 != (char *)v114[9])
    {
LABEL_159:
      *(void *)uint64_t v115 = v123;
      uint64_t v115 = (char *)(v114[8] + 8);
      v114[8] = v115;
      goto LABEL_160;
    }
    uint64_t v124 = (char *)v114[6];
    if (v122 > v124)
    {
      uint64_t v125 = (v122 - v124) >> 3;
      if (v125 >= -1) {
        uint64_t v126 = v125 + 1;
      }
      else {
        uint64_t v126 = v125 + 2;
      }
      uint64_t v127 = v126 >> 1;
      uint64_t v128 = -v127;
      uint64_t v129 = &v122[-8 * v127];
      int64_t v130 = v115 - v122;
      if (v115 != v122)
      {
        memmove(&v122[-8 * v127], v122, v115 - v122);
        uint64_t v115 = (char *)v114[7];
      }
      uint64_t v131 = &v115[8 * v128];
      uint64_t v115 = &v129[v130];
      v114[7] = v131;
      v114[8] = &v129[v130];
      goto LABEL_159;
    }
    if (v115 == v124) {
      unint64_t v280 = 1;
    }
    else {
      unint64_t v280 = (v115 - v124) >> 2;
    }
    if (v280 >> 61) {
      goto LABEL_201;
    }
    uint64_t v281 = (char *)operator new(8 * v280);
    uint64_t v282 = &v281[8 * (v280 >> 2)];
    int64_t v283 = v115 - v122;
    BOOL v51 = v115 == v122;
    uint64_t v115 = v282;
    if (!v51)
    {
      uint64_t v115 = &v282[v283 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v284 = v283 - 8;
      if (v284 < 0x38)
      {
        v285 = &v281[8 * (v280 >> 2)];
        do
        {
LABEL_156:
          uint64_t v342 = *(void *)v122;
          v122 += 8;
          *(void *)v285 = v342;
          v285 += 8;
        }
        while (v285 != v115);
        goto LABEL_157;
      }
      v335 = &v281[8 * (v280 >> 2)];
      v285 = v335;
      if ((unint64_t)(v335 - v122) < 0x20) {
        goto LABEL_156;
      }
      uint64_t v336 = (v284 >> 3) + 1;
      uint64_t v337 = 8 * (v336 & 0x3FFFFFFFFFFFFFFCLL);
      v285 = &v282[v337];
      v122 += v337;
      v338 = (long long *)(v116 + 24);
      v339 = v335 + 16;
      uint64_t v340 = v336 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v341 = *v338;
        *(v339 - 1) = *(v338 - 1);
        _OWORD *v339 = v341;
        v338 += 2;
        v339 += 2;
        v340 -= 4;
      }
      while (v340);
      if (v336 != (v336 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_156;
      }
    }
LABEL_157:
    v114[6] = v281;
    v114[7] = v282;
    v114[8] = v115;
    v114[9] = &v281[8 * v280];
    if (v124)
    {
      operator delete(v124);
      uint64_t v115 = (char *)v114[8];
    }
    goto LABEL_159;
  }
  uint64_t v27 = *(void *)(a1 + 48);
  unint64_t v28 = *(void **)(v27 + 8);
  uint64_t v29 = v28[11];
  if (v29)
  {
    if (objc_msgSend_count(*(void **)(*(void *)(v28[7] + (((unint64_t)(v29 + v28[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v29 + v28[10] - 1) & 0x1FF)), v15, v16, v17, v18, v19) == 1)
    {
      uint64_t v31 = objc_msgSend_string(v3, v15, v30, v17, v18, v19);
      char v36 = objc_msgSend_isEqualToString_(v31, v32, @"{", v33, v34, v35);

      uint64_t v27 = *(void *)(a1 + 48);
      if ((v36 & 1) == 0)
      {
        id v37 = *(void **)(v27 + 8);
        unint64_t v38 = v37[11] + v37[10] - 1;
        id v39 = *(id *)(*(void *)(v37[7] + ((v38 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v38 & 0x1FF));
        uint64_t v40 = *(void **)(*(void *)(a1 + 56) + 8);
        unint64_t v41 = v40[11] + v40[10] - 1;
        id v42 = *(id *)(*(void *)(v40[7] + ((v41 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v41 & 0x1FF));
        uint64_t v43 = *(void **)(*(void *)(a1 + 64) + 8);
        unint64_t v44 = v43[11] + v43[10] - 1;
        id v45 = *(id *)(*(void *)(v43[7] + ((v44 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v44 & 0x1FF));
        uint64_t v46 = *(void **)(*(void *)(a1 + 48) + 8);
        unint64_t v47 = v46[11] + v46[10] - 1;

        uint64_t v49 = v46[7];
        uint64_t v48 = v46[8];
        uint64_t v50 = v48 - v49;
        BOOL v51 = v48 == v49;
        uint64_t v53 = v46[10];
        uint64_t v52 = v46[11];
        v46[11] = v52 - 1;
        uint64_t v54 = (v50 << 6) - 1;
        if (v51) {
          uint64_t v54 = 0;
        }
        if ((unint64_t)(v54 - (v52 + v53) + 1) >= 0x400)
        {
          operator delete(*(void **)(v48 - 8));
          v46[8] -= 8;
        }
        uint64_t v55 = *(void **)(*(void *)(a1 + 56) + 8);
        unint64_t v56 = v55[11] + v55[10] - 1;

        uint64_t v58 = v55[7];
        uint64_t v57 = v55[8];
        uint64_t v59 = v57 - v58;
        BOOL v51 = v57 == v58;
        uint64_t v61 = v55[10];
        uint64_t v60 = v55[11];
        v55[11] = v60 - 1;
        uint64_t v62 = (v59 << 6) - 1;
        if (v51) {
          uint64_t v62 = 0;
        }
        if ((unint64_t)(v62 - (v60 + v61) + 1) >= 0x400)
        {
          operator delete(*(void **)(v57 - 8));
          v55[8] -= 8;
        }
        uint64_t v63 = *(void **)(*(void *)(a1 + 64) + 8);
        unint64_t v64 = v63[11] + v63[10] - 1;

        uint64_t v70 = v63[7];
        uint64_t v69 = v63[8];
        uint64_t v71 = v69 - v70;
        BOOL v51 = v69 == v70;
        uint64_t v73 = v63[10];
        uint64_t v72 = v63[11];
        v63[11] = v72 - 1;
        uint64_t v74 = (v71 << 6) - 1;
        if (v51) {
          uint64_t v74 = 0;
        }
        if ((unint64_t)(v74 - (v72 + v73) + 1) >= 0x400)
        {
          operator delete(*(void **)(v69 - 8));
          v63[8] -= 8;
        }
        uint64_t v75 = *(void **)(*(void *)(a1 + 72) + 8);
        uint64_t v77 = v75[7];
        uint64_t v76 = v75[8];
        uint64_t v78 = ((v76 - v77) << 6) - 1;
        BOOL v51 = v76 == v77;
        uint64_t v80 = v75[10];
        uint64_t v79 = v75[11];
        if (v51) {
          uint64_t v78 = 0;
        }
        v75[11] = v79 - 1;
        if ((unint64_t)(v78 - (v79 + v80) + 1) >= 0x400)
        {
          operator delete(*(void **)(v76 - 8));
          v75[8] -= 8;
        }
        uint64_t v81 = *(void **)(*(void *)(a1 + 48) + 8);
        uint64_t v82 = v81[11];
        if (v82)
        {
          id v3 = v426;
          objc_msgSend_addObjectsFromArray_(*(void **)(*(void *)(v81[7] + (((unint64_t)(v82 + v81[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v82 + v81[10] - 1) & 0x1FF)), v65, (uint64_t)v39, v66, v67, v68);
          id v83 = *(void **)(*(void *)(a1 + 56) + 8);
          unint64_t v84 = v83[11] + v83[10] - 1;
          objc_msgSend_addIndexes_(*(void **)(*(void *)(v83[7] + ((v84 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v84 & 0x1FF)), v85, (uint64_t)v42, v86, v87, v88);
          uint64_t v89 = *(void **)(*(void *)(a1 + 64) + 8);
          unint64_t v90 = v89[11] + v89[10] - 1;
          objc_msgSend_appendFormat_(*(void **)(*(void *)(v89[7] + ((v90 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v90 & 0x1FF)), v91, @" %@", v92, v93, v94, v45);
          uint64_t v99 = *(void **)(*(void *)(a1 + 48) + 8);
          unint64_t v100 = v99[11] + v99[10] - 1;
          uint64_t v101 = (void **)(*(void *)(v99[7] + ((v100 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v100 & 0x1FF));
        }
        else
        {
          CGRect v279 = *(void **)(a1 + 32);
          uint64_t v101 = (void **)(a1 + 32);
          id v3 = v426;
          objc_msgSend_addObjectsFromArray_(v279, v65, (uint64_t)v39, v66, v67, v68);
        }
        objc_msgSend_addObject_(*v101, v95, (uint64_t)v3, v96, v97, v98);

        goto LABEL_176;
      }
    }
    else
    {
      uint64_t v27 = *(void *)(a1 + 48);
    }
  }
  uint64_t v132 = *(void **)(v27 + 8);
  uint64_t v133 = v132[11];
  if (v133)
  {
    objc_msgSend_addObject_(*(void **)(*(void *)(v132[7] + (((unint64_t)(v133 + v132[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v133 + v132[10] - 1) & 0x1FF)), v15, (uint64_t)v3, v17, v18, v19);
    uint64_t v134 = *(void **)(*(void *)(a1 + 56) + 8);
    unint64_t v135 = v134[11] + v134[10] - 1;
    unint64_t v136 = *(void **)(*(void *)(v134[7] + ((v135 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v135 & 0x1FF));
    uint64_t v142 = objc_msgSend_strokeIndexes(v3, v137, v138, v139, v140, v141);
    objc_msgSend_addIndexes_(v136, v143, (uint64_t)v142, v144, v145, v146);

    uint64_t v147 = *(void **)(*(void *)(a1 + 64) + 8);
    unint64_t v148 = v147[11] + v147[10] - 1;
    uint64_t v149 = *(void **)(*(void *)(v147[7] + ((v148 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v148 & 0x1FF));
    uint64_t v155 = objc_msgSend_string(v3, v150, v151, v152, v153, v154);
    objc_msgSend_appendFormat_(v149, v156, @" %@", v157, v158, v159, v155);

    uint64_t v165 = objc_msgSend_string(v3, v160, v161, v162, v163, v164);
    LODWORD(v149) = objc_msgSend_isEqualToString_(v165, v166, @"{", v167, v168, v169);

    if (v149)
    {
      uint64_t v175 = *(void **)(*(void *)(a1 + 72) + 8);
      unint64_t v176 = v175[11] + v175[10] - 1;
      uint64_t v177 = *(void *)(v175[7] + ((v176 >> 6) & 0x3FFFFFFFFFFFFF8));
      ++*(void *)(v177 + 8 * (v176 & 0x1FF));
    }
    else
    {
      uint64_t v178 = objc_msgSend_string(v3, v170, v171, v172, v173, v174);
      int v183 = objc_msgSend_isEqualToString_(v178, v179, @"}", v180, v181, v182);

      if (v183)
      {
        uint64_t v184 = *(void **)(*(void *)(a1 + 72) + 8);
        unint64_t v185 = v184[11] + v184[10] - 1;
        uint64_t v186 = *(void *)(v184[7] + ((v185 >> 6) & 0x3FFFFFFFFFFFFF8));
        --*(void *)(v186 + 8 * (v185 & 0x1FF));
        uint64_t v187 = *(void **)(*(void *)(a1 + 72) + 8);
        unint64_t v188 = v187[11] + v187[10] - 1;
        if (!*(void *)(*(void *)(v187[7] + ((v188 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v188 & 0x1FF)))
        {
          uint64_t v189 = *(void **)(*(void *)(a1 + 48) + 8);
          unint64_t v190 = v189[11] + v189[10] - 1;
          id v191 = *(id *)(*(void *)(v189[7] + ((v190 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v190 & 0x1FF));
          uint64_t v192 = *(void **)(*(void *)(a1 + 56) + 8);
          unint64_t v193 = v192[11] + v192[10] - 1;
          id v425 = *(id *)(*(void *)(v192[7] + ((v193 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v193 & 0x1FF));
          v194 = *(void **)(*(void *)(a1 + 64) + 8);
          unint64_t v195 = v194[11] + v194[10] - 1;
          id v196 = *(id *)(*(void *)(v194[7] + ((v195 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v195 & 0x1FF));
          uint64_t v197 = *(void **)(*(void *)(a1 + 48) + 8);
          unint64_t v198 = v197[11] + v197[10] - 1;

          uint64_t v200 = v197[7];
          uint64_t v199 = v197[8];
          uint64_t v201 = v199 - v200;
          BOOL v51 = v199 == v200;
          uint64_t v203 = v197[10];
          uint64_t v202 = v197[11];
          v197[11] = v202 - 1;
          uint64_t v204 = (v201 << 6) - 1;
          if (v51) {
            uint64_t v204 = 0;
          }
          if ((unint64_t)(v204 - (v202 + v203) + 1) >= 0x400)
          {
            operator delete(*(void **)(v199 - 8));
            v197[8] -= 8;
          }
          uint64_t v205 = *(void **)(*(void *)(a1 + 56) + 8);
          unint64_t v206 = v205[11] + v205[10] - 1;

          uint64_t v208 = v205[7];
          uint64_t v207 = v205[8];
          uint64_t v209 = v207 - v208;
          BOOL v51 = v207 == v208;
          uint64_t v211 = v205[10];
          uint64_t v210 = v205[11];
          v205[11] = v210 - 1;
          uint64_t v212 = (v209 << 6) - 1;
          if (v51) {
            uint64_t v212 = 0;
          }
          if ((unint64_t)(v212 - (v210 + v211) + 1) >= 0x400)
          {
            operator delete(*(void **)(v207 - 8));
            v205[8] -= 8;
          }
          uint64_t v213 = *(void **)(*(void *)(a1 + 64) + 8);
          unint64_t v214 = v213[11] + v213[10] - 1;

          uint64_t v216 = v213[7];
          uint64_t v215 = v213[8];
          uint64_t v217 = v215 - v216;
          BOOL v51 = v215 == v216;
          uint64_t v219 = v213[10];
          uint64_t v218 = v213[11];
          v213[11] = v218 - 1;
          uint64_t v220 = (v217 << 6) - 1;
          if (v51) {
            uint64_t v220 = 0;
          }
          if ((unint64_t)(v220 - (v218 + v219) + 1) >= 0x400)
          {
            operator delete(*(void **)(v215 - 8));
            v213[8] -= 8;
          }
          int v221 = *(void **)(*(void *)(a1 + 72) + 8);
          uint64_t v223 = v221[7];
          uint64_t v222 = v221[8];
          uint64_t v224 = ((v222 - v223) << 6) - 1;
          BOOL v51 = v222 == v223;
          uint64_t v226 = v221[10];
          uint64_t v225 = v221[11];
          if (v51) {
            uint64_t v224 = 0;
          }
          v221[11] = v225 - 1;
          if ((unint64_t)(v224 - (v225 + v226) + 1) >= 0x400)
          {
            operator delete(*(void **)(v222 - 8));
            v221[8] -= 8;
          }
          id v227 = v191;
          id v228 = v196;
          id v3 = v426;
          uint64_t v237 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 40) + 8), v229, (uint64_t)v228, v230, v231, v232);
          id v238 = v228;
          uint64_t v239 = v227;
          if (v237)
          {
            double x = *MEMORY[0x1E4F1DB20];
            double y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
            double width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
            double height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
            long long v429 = 0u;
            long long v430 = 0u;
            long long v431 = 0u;
            long long v432 = 0u;
            id v244 = v227;
            uint64_t v252 = objc_msgSend_countByEnumeratingWithState_objects_count_(v244, v245, (uint64_t)&v429, (uint64_t)v434, 16, v246);
            if (v252)
            {
              uint64_t v253 = *(void *)v430;
              double v254 = 1.0;
              do
              {
                for (uint64_t i = 0; i != v252; ++i)
                {
                  if (*(void *)v430 != v253) {
                    objc_enumerationMutation(v244);
                  }
                  uint64_t v256 = *(void **)(*((void *)&v429 + 1) + 8 * i);
                  objc_msgSend_score(v256, v247, v248, v249, v250, v251);
                  double v258 = v257;
                  objc_msgSend_bounds(v256, v259, v260, v261, v262, v263);
                  v438.origin.double x = v264;
                  v438.origin.double y = v265;
                  v438.size.double width = v266;
                  v438.size.double height = v267;
                  v436.origin.double x = x;
                  v436.origin.double y = y;
                  v436.size.double width = width;
                  v436.size.double height = height;
                  CGRect v437 = CGRectUnion(v436, v438);
                  double x = v437.origin.x;
                  double y = v437.origin.y;
                  double width = v437.size.width;
                  double height = v437.size.height;
                  double v254 = v254 * v258;
                }
                uint64_t v252 = objc_msgSend_countByEnumeratingWithState_objects_count_(v244, v247, (uint64_t)&v429, (uint64_t)v434, 16, v251);
              }
              while (v252);
            }
            else
            {
              double v254 = 1.0;
            }

            uint64_t v370 = *(void *)(a1 + 40);
            id v371 = v237;
            v377 = (char *)objc_msgSend_UTF8String(v371, v372, v373, v374, v375, v376);
            sub_1C4935D3C(__p, v377);
            int v378 = sub_1C493DB2C((void *)(v370 + 16), __p);
            if (v428 < 0) {
              operator delete(__p[0]);
            }
            v379 = [CHTokenizedMathResultToken alloc];
            v385 = objc_msgSend_copy(v425, v380, v381, v382, v383, v384);
            v388 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v379, v386, (uint64_t)v371, (uint64_t)v385, v378, v387, v254, x, y, width, height);

            v433 = v388;
            uint64_t v392 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v389, (uint64_t)&v433, 1, v390, v391);

            id v238 = v371;
            uint64_t v239 = (void *)v392;
          }
          v393 = *(void **)(*(void *)(a1 + 48) + 8);
          uint64_t v394 = v393[11];
          if (v394)
          {
            objc_msgSend_addObjectsFromArray_(*(void **)(*(void *)(v393[7] + (((unint64_t)(v394 + v393[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v394 + v393[10] - 1) & 0x1FF)), v233, (uint64_t)v239, v234, v235, v236);
            v395 = *(void **)(*(void *)(a1 + 56) + 8);
            unint64_t v396 = v395[11] + v395[10] - 1;
            objc_msgSend_addIndexes_(*(void **)(*(void *)(v395[7] + ((v396 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v396 & 0x1FF)), v397, (uint64_t)v425, v398, v399, v400);
            v401 = *(void **)(*(void *)(a1 + 64) + 8);
            unint64_t v402 = v401[11] + v401[10] - 1;
            objc_msgSend_appendFormat_(*(void **)(*(void *)(v401[7] + ((v402 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v402 & 0x1FF)), v403, @" %@", v404, v405, v406, v238);
          }
          else
          {
            objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 32), v233, (uint64_t)v239, v234, v235, v236);
          }
        }
      }
    }
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v15, (uint64_t)v3, v17, v18, v19);
  }
LABEL_176:
}

void sub_1C493D9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C493DB2C(void *a1, void *a2)
{
  if (sub_1C4946A5C(a1, (uint64_t)a2)) {
    return 1;
  }
  if (sub_1C4946A5C(a1 + 5, (uint64_t)a2)) {
    return 2;
  }
  if (sub_1C4946A5C(a1 + 10, (uint64_t)a2)) {
    return 4;
  }
  if (sub_1C4946A5C(a1 + 15, (uint64_t)a2)) {
    return 8;
  }
  if (sub_1C4946A5C(a1 + 20, (uint64_t)a2)) {
    return 128;
  }
  if (sub_1C4946A5C(a1 + 25, (uint64_t)a2)) {
    return 0x200000;
  }
  if (sub_1C4946A5C(a1 + 30, (uint64_t)a2)) {
    return 32;
  }
  if (sub_1C4946A5C(a1 + 35, (uint64_t)a2)) {
    return 2048;
  }
  if (sub_1C4946A5C(a1 + 40, (uint64_t)a2)) {
    return 4096;
  }
  if (sub_1C4946A5C(a1 + 50, (uint64_t)a2)) {
    return 0x2000;
  }
  if (sub_1C4946A5C(a1 + 55, (uint64_t)a2)) {
    return 0x4000;
  }
  if (sub_1C4946A5C(a1 + 45, (uint64_t)a2)) {
    return 256;
  }
  if (sub_1C49469C8(a2, "\\%")) {
    return 512;
  }
  if (sub_1C49469C8(a2, "!")) {
    return 1024;
  }
  if (sub_1C49469C8(a2, "\\frac")) {
    return 0x8000;
  }
  if (sub_1C49469C8(a2, "\\sqrt")) {
    return 0x10000;
  }
  if (sub_1C49469C8(a2, "\\hline")) {
    return 0x20000;
  }
  if (sub_1C49469C8(a2, "=")) {
    return 0x40000;
  }
  return 0;
}

void sub_1C493E51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (v32) {
    operator delete(v32);
  }
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1C493E73C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C493EBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C493ED90(uint64_t a1, void *a2)
{
  id v22 = a2;
  objc_msgSend_string(v22, v3, v4, v5, v6, v7);
  uint64_t v8 = (NSString *)objc_claimAutoreleasedReturnValue();
  char v9 = isSymbolStructural(v8);

  uint64_t v14 = (const char *)v22;
  if ((v9 & 1) == 0)
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
    if (*(unsigned char *)(v15 + 24))
    {
      *(unsigned char *)(v15 + 24) = 1;
    }
    else
    {
      uint64_t v16 = objc_msgSend_strokeIndexes(v22, (const char *)v22, v10, v11, v12, v13);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend_count(v16, v17, v18, v19, v20, v21) == 0;

      uint64_t v14 = (const char *)v22;
    }
  }
  objc_msgSend_addObject_(*(void **)(a1 + 32), v14, (uint64_t)v14, v11, v12, v13);
}

void sub_1C493EE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493EE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C493F2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C493F48C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C493F9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C493FADC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C493FC7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C493FC8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C493FCE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C493FD68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C493FD7C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C493FD94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49404F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4940700(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

uint64_t sub_1C494070C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C494071C(uint64_t a1)
{
}

void sub_1C4940724(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v417 = *MEMORY[0x1E4F143B8];
  id v404 = a2;
  char v9 = objc_msgSend_string(v404, v4, v5, v6, v7, v8);
  if (!objc_msgSend_isEqualToString_(v9, v10, @"_", v11, v12, v13))
  {

LABEL_10:
    uint64_t v27 = *(void **)(*(void *)(a1 + 80) + 8);
    uint64_t v28 = v27[11];
    if (v28)
    {
      uint64_t v29 = v404;
      objc_msgSend_addObject_(*(void **)(*(void *)(v27[7] + (((unint64_t)(v28 + v27[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v28 + v27[10] - 1) & 0x1FF)), v15, (uint64_t)v404, v16, v17, v18);
      uint64_t v30 = *(void **)(*(void *)(a1 + 104) + 8);
      unint64_t v31 = v30[11] + v30[10] - 1;
      uint64_t v32 = *(void **)(*(void *)(v30[7] + ((v31 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v31 & 0x1FF));
      unint64_t v38 = objc_msgSend_string(v404, v33, v34, v35, v36, v37);
      objc_msgSend_appendFormat_(v32, v39, @"%@", v40, v41, v42, v38);

      uint64_t v48 = objc_msgSend_string(v404, v43, v44, v45, v46, v47);
      LODWORD(v38) = objc_msgSend_isEqualToString_(v48, v49, @"{", v50, v51, v52);

      if (v38)
      {
        uint64_t v58 = *(void **)(*(void *)(a1 + 112) + 8);
        unint64_t v59 = v58[11] + v58[10] - 1;
        uint64_t v60 = *(void *)(v58[7] + ((v59 >> 6) & 0x3FFFFFFFFFFFFF8));
        ++*(void *)(v60 + 8 * (v59 & 0x1FF));
      }
      else
      {
        uint64_t v61 = objc_msgSend_string(v404, v53, v54, v55, v56, v57);
        int isEqualToString = objc_msgSend_isEqualToString_(v61, v62, @"}", v63, v64, v65);

        if (isEqualToString)
        {
          uint64_t v72 = *(void **)(*(void *)(a1 + 112) + 8);
          unint64_t v73 = v72[11] + v72[10] - 1;
          uint64_t v74 = *(void *)(v72[7] + ((v73 >> 6) & 0x3FFFFFFFFFFFFF8));
          --*(void *)(v74 + 8 * (v73 & 0x1FF));
          uint64_t v75 = *(void **)(*(void *)(a1 + 112) + 8);
          unint64_t v76 = v75[11] + v75[10] - 1;
          if (!*(void *)(*(void *)(v75[7] + ((v76 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v76 & 0x1FF)))
          {
            uint64_t v77 = *(void **)(*(void *)(a1 + 88) + 8);
            unint64_t v78 = v77[11] + v77[10] - 1;
            uint64_t v79 = objc_msgSend_reverseObjectEnumerator(*(void **)(*(void *)(v77[7] + ((v78 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v78 & 0x1FF)), v67, v68, v69, v70, v71);
            unint64_t v85 = objc_msgSend_allObjects(v79, v80, v81, v82, v83, v84);

            uint64_t v86 = *(void **)(*(void *)(a1 + 80) + 8);
            unint64_t v87 = v86[11] + v86[10] - 1;
            id v398 = *(id *)(*(void *)(v86[7] + ((v87 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v87 & 0x1FF));
            uint64_t v88 = *(void **)(*(void *)(a1 + 96) + 8);
            unint64_t v89 = v88[11] + v88[10] - 1;
            id v399 = *(id *)(*(void *)(v88[7] + ((v89 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v89 & 0x1FF));
            unint64_t v90 = *(void **)(*(void *)(a1 + 104) + 8);
            unint64_t v91 = v90[11] + v90[10] - 1;
            id v400 = *(id *)(*(void *)(v90[7] + ((v91 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v91 & 0x1FF));
            uint64_t v92 = *(void **)(*(void *)(a1 + 88) + 8);
            unint64_t v93 = v92[11] + v92[10] - 1;

            uint64_t v95 = v92[7];
            uint64_t v94 = v92[8];
            uint64_t v96 = v94 - v95;
            BOOL v97 = v94 == v95;
            uint64_t v99 = v92[10];
            uint64_t v98 = v92[11];
            v92[11] = v98 - 1;
            uint64_t v100 = (v96 << 6) - 1;
            if (v97) {
              uint64_t v100 = 0;
            }
            if ((unint64_t)(v100 - (v98 + v99) + 1) >= 0x400)
            {
              operator delete(*(void **)(v94 - 8));
              v92[8] -= 8;
            }
            uint64_t v101 = *(void **)(*(void *)(a1 + 80) + 8);
            unint64_t v102 = v101[11] + v101[10] - 1;

            uint64_t v104 = v101[7];
            uint64_t v103 = v101[8];
            uint64_t v105 = v103 - v104;
            BOOL v97 = v103 == v104;
            uint64_t v107 = v101[10];
            uint64_t v106 = v101[11];
            v101[11] = v106 - 1;
            uint64_t v108 = (v105 << 6) - 1;
            if (v97) {
              uint64_t v108 = 0;
            }
            if ((unint64_t)(v108 - (v106 + v107) + 1) >= 0x400)
            {
              operator delete(*(void **)(v103 - 8));
              v101[8] -= 8;
            }
            uint64_t v109 = *(void **)(*(void *)(a1 + 96) + 8);
            unint64_t v110 = v109[11] + v109[10] - 1;

            uint64_t v112 = v109[7];
            uint64_t v111 = v109[8];
            uint64_t v113 = v111 - v112;
            BOOL v97 = v111 == v112;
            uint64_t v115 = v109[10];
            uint64_t v114 = v109[11];
            v109[11] = v114 - 1;
            uint64_t v116 = (v113 << 6) - 1;
            if (v97) {
              uint64_t v116 = 0;
            }
            if ((unint64_t)(v116 - (v114 + v115) + 1) >= 0x400)
            {
              operator delete(*(void **)(v111 - 8));
              v109[8] -= 8;
            }
            uint64_t v117 = *(void **)(*(void *)(a1 + 104) + 8);
            unint64_t v118 = v117[11] + v117[10] - 1;

            uint64_t v124 = v117[7];
            uint64_t v123 = v117[8];
            uint64_t v125 = v123 - v124;
            BOOL v97 = v123 == v124;
            uint64_t v127 = v117[10];
            uint64_t v126 = v117[11];
            v117[11] = v126 - 1;
            uint64_t v128 = (v125 << 6) - 1;
            if (v97) {
              uint64_t v128 = 0;
            }
            if ((unint64_t)(v128 - (v126 + v127) + 1) >= 0x400)
            {
              operator delete(*(void **)(v123 - 8));
              v117[8] -= 8;
            }
            uint64_t v129 = *(void **)(*(void *)(a1 + 112) + 8);
            uint64_t v131 = v129[7];
            uint64_t v130 = v129[8];
            uint64_t v132 = ((v130 - v131) << 6) - 1;
            BOOL v97 = v130 == v131;
            uint64_t v134 = v129[10];
            uint64_t v133 = v129[11];
            if (v97) {
              uint64_t v132 = 0;
            }
            v129[11] = v133 - 1;
            if ((unint64_t)(v132 - (v133 + v134) + 1) >= 0x400)
            {
              operator delete(*(void **)(v130 - 8));
              v129[8] -= 8;
            }
            v397 = objc_msgSend_stringWithFormat_(NSString, v119, @"%@%@", v120, v121, v122, v399, v400);
            uint64_t v29 = v404;
            v395 = objc_msgSend_componentsSeparatedByCharactersInSet_(v397, v135, *(void *)(a1 + 48), v136, v137, v138);
            unint64_t v396 = objc_msgSend_componentsJoinedByString_(v395, v139, (uint64_t)&stru_1F20141C8, v140, v141, v142);
            id v143 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            if (objc_msgSend_count(v85, v144, v145, v146, v147, v148)
              && (objc_msgSend_lastObject(v85, v149, v150, v151, v152, v153),
                  uint64_t v154 = objc_claimAutoreleasedReturnValue(),
                  objc_msgSend_string(v154, v155, v156, v157, v158, v159),
                  uint64_t v160 = objc_claimAutoreleasedReturnValue(),
                  char v165 = objc_msgSend_isEqualToString_(v160, v161, @"\\log", v162, v163, v164),
                  v160,
                  v154,
                  (v165 & 1) == 0))
            {
              uint64_t v394 = objc_msgSend__trimSubscriptTokens_(*(void **)(a1 + 40), v149, (uint64_t)v398, v151, v152, v153);
              uint64_t v294 = objc_msgSend_declaredVariables(*(void **)(a1 + 56), v289, v290, v291, v292, v293);
              int v299 = objc_msgSend_containsObject_(v294, v295, (uint64_t)v396, v296, v297, v298);

              if (v299)
              {
                long long v411 = 0u;
                long long v412 = 0u;
                long long v409 = 0u;
                long long v410 = 0u;
                id v304 = v85;
                uint64_t v312 = objc_msgSend_countByEnumeratingWithState_objects_count_(v304, v305, (uint64_t)&v409, (uint64_t)v416, 16, v306);
                if (v312)
                {
                  uint64_t v313 = *(void *)v410;
                  do
                  {
                    for (uint64_t i = 0; i != v312; ++i)
                    {
                      if (*(void *)v410 != v313) {
                        objc_enumerationMutation(v304);
                      }
                      v315 = objc_msgSend_mutableCopy(*(void **)(*((void *)&v409 + 1) + 8 * i), v307, v308, v309, v310, v311);
                      objc_msgSend_setProperties_(v315, v316, 16, v317, v318, v319);
                      v325 = objc_msgSend_copy(v315, v320, v321, v322, v323, v324);
                      objc_msgSend_addObject_(v143, v326, (uint64_t)v325, v327, v328, v329);
                    }
                    uint64_t v312 = objc_msgSend_countByEnumeratingWithState_objects_count_(v304, v307, (uint64_t)&v409, (uint64_t)v416, 16, v311);
                  }
                  while (v312);
                }

                long long v407 = 0u;
                long long v408 = 0u;
                long long v405 = 0u;
                long long v406 = 0u;
                id v330 = v394;
                uint64_t v338 = objc_msgSend_countByEnumeratingWithState_objects_count_(v330, v331, (uint64_t)&v405, (uint64_t)v415, 16, v332);
                if (v338)
                {
                  uint64_t v339 = *(void *)v406;
                  do
                  {
                    for (uint64_t j = 0; j != v338; ++j)
                    {
                      if (*(void *)v406 != v339) {
                        objc_enumerationMutation(v330);
                      }
                      long long v341 = objc_msgSend_mutableCopy(*(void **)(*((void *)&v405 + 1) + 8 * j), v333, v334, v335, v336, v337);
                      objc_msgSend_setProperties_(v341, v342, 16, v343, v344, v345);
                      v351 = objc_msgSend_copy(v341, v346, v347, v348, v349, v350);
                      objc_msgSend_addObject_(v143, v352, (uint64_t)v351, v353, v354, v355);
                    }
                    uint64_t v338 = objc_msgSend_countByEnumeratingWithState_objects_count_(v330, v333, (uint64_t)&v405, (uint64_t)v415, 16, v337);
                  }
                  while (v338);
                }
              }
              else
              {
                objc_msgSend_addObjectsFromArray_(v143, v300, (uint64_t)v85, v301, v302, v303);
                objc_msgSend_addObjectsFromArray_(v143, v356, (uint64_t)v394, v357, v358, v359);
              }
            }
            else
            {
              objc_msgSend_addObjectsFromArray_(v143, v149, (uint64_t)v85, v151, v152, v153);
              objc_msgSend_addObjectsFromArray_(v143, v166, (uint64_t)v398, v167, v168, v169);
            }
            uint64_t v360 = *(void **)(*(void *)(a1 + 80) + 8);
            uint64_t v361 = v360[11];
            if (v361)
            {
              objc_msgSend_removeLastObject(*(void **)(*(void *)(v360[7] + (((unint64_t)(v361 + v360[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v361 + v360[10] - 1) & 0x1FF)), v170, v171, v172, v173, v174);
              unint64_t v362 = *(void **)(*(void *)(a1 + 80) + 8);
              unint64_t v363 = v362[11] + v362[10] - 1;
              objc_msgSend_addObjectsFromArray_(*(void **)(*(void *)(v362[7] + ((v363 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v363 & 0x1FF)), v364, (uint64_t)v143, v365, v366, v367);
              uint64_t v368 = *(void **)(*(void *)(a1 + 104) + 8);
              unint64_t v369 = v368[11] + v368[10] - 1;
              objc_msgSend_appendFormat_(*(void **)(*(void *)(v368[7] + ((v369 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v369 & 0x1FF)), v370, @"%@", v371, v372, v373, v397);
            }
            else
            {
              uint64_t v374 = objc_msgSend_count(*(void **)(a1 + 64), v170, v171, v172, v173, v174);
              uint64_t v380 = objc_msgSend_count(v85, v375, v376, v377, v378, v379);
              uint64_t v386 = objc_msgSend_count(v85, v381, v382, v383, v384, v385);
              objc_msgSend_removeObjectsInRange_(*(void **)(a1 + 64), v387, v374 - v380, v386, v388, v389);
              objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 64), v390, (uint64_t)v143, v391, v392, v393);
            }
          }
        }
      }
    }
    else
    {
      uint64_t v29 = v404;
      objc_msgSend_addObject_(*(void **)(a1 + 64), v15, (uint64_t)v404, v16, v17, v18);
    }
    goto LABEL_76;
  }
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);

  if (!v14) {
    goto LABEL_10;
  }
  uint64_t v19 = objc_msgSend_arrayWithObject_(MEMORY[0x1E4F1CA48], v15, (uint64_t)v404, v16, v17, v18);
  id v20 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v21 = *(void **)(*(void *)(a1 + 80) + 8);
  uint64_t v22 = v21[7];
  uint64_t v23 = v21[8];
  uint64_t v24 = ((v23 - v22) << 6) - 1;
  if (v23 == v22) {
    uint64_t v24 = 0;
  }
  if (v24 == v21[11] + v21[10])
  {
    sub_1C494ADF8(v21 + 6);
    uint64_t v22 = v21[7];
    uint64_t v23 = v21[8];
  }
  if (v23 == v22)
  {
    __int16 v26 = 0;
  }
  else
  {
    unint64_t v25 = v21[11] + v21[10];
    __int16 v26 = (void *)(*(void *)(v22 + ((v25 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v25 & 0x1FF));
  }
  id v401 = v19;
  *__int16 v26 = v401;
  ++v21[11];
  id v179 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  if (a3 >= 1)
  {
    uint64_t v180 = a3 + 1;
    while (1)
    {
      uint64_t v181 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v175, v180 - 2, v176, v177, v178);
      uint64_t v182 = *(void **)(a1 + 40);
      unint64_t v188 = objc_msgSend_string(v181, v183, v184, v185, v186, v187);
      if (objc_msgSend_isAlphabetic_(v182, v189, (uint64_t)v188, v190, v191, v192))
      {
        unint64_t v198 = objc_msgSend_string(v181, v193, v194, v195, v196, v197);
        BOOL v204 = objc_msgSend_length(v198, v199, v200, v201, v202, v203) == 1;
      }
      else
      {
        BOOL v204 = 0;
      }

      if ((objc_msgSend_properties(v181, v205, v206, v207, v208, v209) & 0x100) == 0)
      {
        uint64_t v215 = objc_msgSend_string(v181, v210, v211, v212, v213, v214);
        hasPrefidouble x = objc_msgSend_hasPrefix_(v215, v216, @"\\"", v217, v218, v219);

        if (((v204 | hasPrefix) & 1) == 0) {
          break;
        }
      }
      objc_msgSend_addObject_(v20, v210, (uint64_t)v181, v212, v213, v214);
      uint64_t v226 = objc_msgSend_string(v181, v221, v222, v223, v224, v225);
      objc_msgSend_appendFormat_(v179, v227, @"%@", v228, v229, v230, v226);

      if ((unint64_t)--v180 <= 1) {
        goto LABEL_50;
      }
    }
  }
LABEL_50:
  uint64_t v231 = *(void **)(*(void *)(a1 + 88) + 8);
  uint64_t v232 = v231[7];
  uint64_t v233 = v231[8];
  uint64_t v234 = ((v233 - v232) << 6) - 1;
  if (v233 == v232) {
    uint64_t v234 = 0;
  }
  if (v234 == v231[11] + v231[10])
  {
    sub_1C494ADF8(v231 + 6);
    uint64_t v232 = v231[7];
    uint64_t v233 = v231[8];
  }
  if (v233 == v232)
  {
    uint64_t v236 = 0;
  }
  else
  {
    unint64_t v235 = v231[11] + v231[10];
    uint64_t v236 = (void *)(*(void *)(v232 + ((v235 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v235 & 0x1FF));
  }
  id v237 = v20;
  void *v236 = v237;
  ++v231[11];
  id v238 = (void *)MEMORY[0x1E4F28E78];
  uint64_t v244 = objc_msgSend_length(v179, v239, v240, v241, v242, v243);
  uint64_t v249 = objc_msgSend_stringWithCapacity_(v238, v245, v244, v246, v247, v248);
  uint64_t v255 = objc_msgSend_length(v179, v250, v251, v252, v253, v254);
  v413[0] = MEMORY[0x1E4F143A8];
  v413[1] = 3221225472;
  v413[2] = sub_1C4941710;
  v413[3] = &unk_1E64E0E38;
  id v256 = v249;
  id v414 = v256;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v179, v257, 0, v255, 258, (uint64_t)v413);
  double v258 = *(void **)(*(void *)(a1 + 96) + 8);
  uint64_t v259 = v258[7];
  uint64_t v260 = v258[8];
  uint64_t v261 = ((v260 - v259) << 6) - 1;
  if (v260 == v259) {
    uint64_t v261 = 0;
  }
  if (v261 == v258[11] + v258[10])
  {
    sub_1C494B4D4(v258 + 6);
    uint64_t v259 = v258[7];
    uint64_t v260 = v258[8];
  }
  if (v260 == v259)
  {
    uint64_t v263 = 0;
  }
  else
  {
    unint64_t v262 = v258[11] + v258[10];
    uint64_t v263 = (void *)(*(void *)(v259 + ((v262 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v262 & 0x1FF));
  }
  id v264 = v256;
  *uint64_t v263 = v264;
  ++v258[11];
  uint64_t v270 = objc_msgSend_string(v404, v265, v266, v267, v268, v269);
  uint64_t v276 = objc_msgSend_mutableCopy(v270, v271, v272, v273, v274, v275);

  v277 = *(void **)(*(void *)(a1 + 104) + 8);
  uint64_t v278 = v277[7];
  uint64_t v279 = v277[8];
  uint64_t v280 = ((v279 - v278) << 6) - 1;
  if (v279 == v278) {
    uint64_t v280 = 0;
  }
  if (v280 == v277[11] + v277[10])
  {
    sub_1C494B4D4(v277 + 6);
    uint64_t v278 = v277[7];
    uint64_t v279 = v277[8];
  }
  if (v279 == v278)
  {
    uint64_t v282 = 0;
  }
  else
  {
    unint64_t v281 = v277[11] + v277[10];
    uint64_t v282 = (void *)(*(void *)(v278 + ((v281 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v281 & 0x1FF));
  }
  id v283 = v276;
  *uint64_t v282 = v283;
  ++v277[11];
  unint64_t v284 = *(void **)(*(void *)(a1 + 112) + 8);
  uint64_t v285 = v284[8];
  uint64_t v286 = v284[7];
  uint64_t v287 = ((v285 - v286) << 6) - 1;
  if (v285 == v286) {
    uint64_t v287 = 0;
  }
  unint64_t v288 = v284[11] + v284[10];
  if (v287 == v288)
  {
    sub_1C494A570(v284 + 6);
    uint64_t v286 = v284[7];
    unint64_t v288 = v284[11] + v284[10];
  }
  *(void *)(*(void *)(v286 + ((v288 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v288 & 0x1FF)) = 0;
  ++v284[11];

  uint64_t v29 = v404;
LABEL_76:
  if ((a3 & 0x8000000000000000) == 0) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a2);
  }
}

void sub_1C49414E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4941710(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_appendString_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4941C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4941D64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4941E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4941E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49422EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C494245C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4942650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
  sub_1C494AC4C((uint64_t)&a12, a13);

  _Unwind_Resume(a1);
}

void sub_1C4942674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1C494346C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62)
{
  _Block_object_dispose(&a55, 8);
  if (__p)
  {
    a62 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4943778(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = (void *)MEMORY[0x1E4F1CAD0];
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = objc_msgSend_componentsSeparatedByCharactersInSet_(@"^ _ \\frac \\sqrt", v7, (uint64_t)v18, v8, v9, v10);
  uint64_t v16 = objc_msgSend_setWithArray_(v6, v12, (uint64_t)v11, v13, v14, v15);
  uint64_t v17 = (void *)qword_1EA3C9CF8;
  qword_1EA3C9CF8 = v16;
}

void sub_1C4943808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4943820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4943834(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4943858(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4943870(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  uint64_t v5 = (void *)qword_1EA3C9CF8;
  uint64_t v11 = objc_msgSend_string(v4, v6, v7, v8, v9, v10);
  if ((objc_msgSend_containsObject_(v5, v12, (uint64_t)v11, v13, v14, v15) & 1) == 0)
  {

LABEL_21:
    if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_34;
    }
    uint64_t v115 = objc_msgSend_string(v4, v45, v46, v47, v48, v49);
    int isEqualToString = objc_msgSend_isEqualToString_(v115, v116, @"{", v117, v118, v119);

    if (isEqualToString)
    {
      uint64_t v126 = *(void *)(*(void *)(a1 + 72) + 8);
      uint64_t v127 = *(void *)(v126 + 24) + 1;
LABEL_33:
      *(void *)(v126 + 24) = v127;
      goto LABEL_34;
    }
    uint64_t v128 = objc_msgSend_string(v4, v121, v122, v123, v124, v125);
    int v133 = objc_msgSend_isEqualToString_(v128, v129, @"}", v130, v131, v132);

    if (v133)
    {
      if (--*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)) {
        goto LABEL_34;
      }
      if (++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) != *(void *)(*(void *)(*(void *)(a1 + 64)
                                                                                                  + 8)
                                                                                      + 24))
        goto LABEL_34;
      uint64_t v126 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v134 = *(void *)(v126 + 24);
      uint64_t v135 = *a4 - v134;
      if (*a4 == v134) {
        goto LABEL_32;
      }
      uint64_t v136 = (char **)(*(void *)(*(void *)(a1 + 80) + 8) + 48);
      *(void *)&long long v141 = *(void *)(v126 + 24);
      *((void *)&v141 + 1) = v135 + 1;
      sub_1C4943D88(v136, &v141);
      uint64_t v137 = *(void *)(a1 + 40);
    }
    else
    {
      if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + 1 != a3) {
        goto LABEL_34;
      }
      uint64_t v137 = *(void *)(a1 + 40);
    }
    uint64_t v126 = *(void *)(v137 + 8);
LABEL_32:
    uint64_t v127 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_33;
  }
  uint64_t v21 = objc_msgSend_result(*(void **)(a1 + 32), v16, v17, v18, v19, v20);
  uint64_t v27 = objc_msgSend_tokenColumns(v21, v22, v23, v24, v25, v26);
  uint64_t v32 = objc_msgSend_objectAtIndexedSubscript_(v27, v28, *a4, v29, v30, v31);
  unint64_t v38 = objc_msgSend_tokenRows(v32, v33, v34, v35, v36, v37);
  unint64_t v44 = objc_msgSend_count(v38, v39, v40, v41, v42, v43);

  if (v44 < 2) {
    goto LABEL_21;
  }
  uint64_t v50 = objc_msgSend_result(*(void **)(a1 + 32), v45, v46, v47, v48, v49);
  uint64_t v56 = objc_msgSend_tokenColumns(v50, v51, v52, v53, v54, v55);
  uint64_t v61 = objc_msgSend_objectAtIndexedSubscript_(v56, v57, *a4, v58, v59, v60);

  for (unint64_t i = 0; ; ++i)
  {
    uint64_t v68 = objc_msgSend_tokenRows(v61, v62, v63, v64, v65, v66);
    BOOL v74 = i < objc_msgSend_count(v68, v69, v70, v71, v72, v73);

    if (!v74) {
      break;
    }
    if (i != a4[1])
    {
      long long v144 = 0u;
      long long v145 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      uint64_t v75 = objc_msgSend_tokenRows(v61, v62, v63, v64, v65, v66);
      uint64_t v80 = objc_msgSend_objectAtIndexedSubscript_(v75, v76, i, v77, v78, v79);

      uint64_t v88 = objc_msgSend_countByEnumeratingWithState_objects_count_(v80, v81, (uint64_t)&v142, (uint64_t)v146, 16, v82);
      if (v88)
      {
        uint64_t v89 = *(void *)v143;
        do
        {
          for (uint64_t j = 0; j != v88; ++j)
          {
            if (*(void *)v143 != v89) {
              objc_enumerationMutation(v80);
            }
            unint64_t v91 = objc_msgSend_string(*(void **)(*((void *)&v142 + 1) + 8 * j), v83, v84, v85, v86, v87);
            BOOL v97 = objc_msgSend_string(v4, v92, v93, v94, v95, v96);
            char v102 = objc_msgSend_isEqualToString_(v91, v98, (uint64_t)v97, v99, v100, v101);

            if (v102)
            {

              goto LABEL_5;
            }
          }
          uint64_t v88 = objc_msgSend_countByEnumeratingWithState_objects_count_(v80, v83, (uint64_t)&v142, (uint64_t)v146, 16, v87);
        }
        while (v88);
      }

      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *a4;
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a3;
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
      uint64_t v108 = objc_msgSend_string(v4, v103, v104, v105, v106, v107);
      int v113 = objc_msgSend_isEqualToString_(v108, v109, @"\\frac", v110, v111, v112);
      uint64_t v114 = 1;
      if (v113) {
        uint64_t v114 = 2;
      }
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v114;

      break;
    }
LABEL_5:
    ;
  }

LABEL_34:
}

void sub_1C4943C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4943D88(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_OWORD *)uint64_t v5 = *a2;
    uint64_t v6 = v5 + 16;
LABEL_3:
    a1[1] = v6;
    return;
  }
  uint64_t v7 = *a1;
  uint64_t v8 = (v5 - *a1) >> 4;
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v10 = v4 - (void)v7;
  if (v10 >> 3 > v9) {
    unint64_t v9 = v10 >> 3;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11)
  {
    if (v11 >> 60) {
      sub_1C4949AA8();
    }
    uint64_t v12 = (char *)operator new(16 * v11);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = &v12[16 * v8];
  *(_OWORD *)uint64_t v13 = *a2;
  uint64_t v6 = v13 + 16;
  if (v5 != v7)
  {
    do
    {
      *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
      v13 -= 16;
      v5 -= 16;
    }
    while (v5 != v7);
    uint64_t v5 = *a1;
  }
  *a1 = v13;
  a1[1] = v6;
  a1[2] = &v12[16 * v11];
  if (!v5) {
    goto LABEL_3;
  }
  operator delete(v5);
  a1[1] = v6;
}

void sub_1C4944104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4944628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C49447A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  JUMPOUT(0x1C4944808);
}

uint64_t sub_1C4944824(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4944938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C494494C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4944B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18)
{
  sub_1C494AC4C((uint64_t)&a17, a18);

  _Unwind_Resume(a1);
}

void sub_1C494565C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,void *a60)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1C494AC4C((uint64_t)&a59, a60);

  _Unwind_Resume(a1);
}

void sub_1C4945B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4946060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C49465AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1C49466C4(uint64_t a1, void *a2)
{
  id v18 = a2;
  objc_msgSend_addObject_(*(void **)(a1 + 32), v3, (uint64_t)v18, v4, v5, v6);
  uint64_t v12 = objc_msgSend_string(v18, v7, v8, v9, v10, v11);
  int isEqualToString = objc_msgSend_isEqualToString_(v12, v13, @"\\prime", v14, v15, v16);

  if (isEqualToString) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_1C4946754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C494676C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4946780(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  id v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      id v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C4946848(void *a1)
{
}

uint64_t sub_1C494685C(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  id v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    id v3 = *(void ***)(a1 + 8);
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    unint64_t v5 = &v2[v4 >> 9];
    uint64_t v6 = (void **)((char *)*v5 + 8 * (v4 & 0x1FF));
    uint64_t v7 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(void *)(a1 + 40) + v4) & 0x1FF);
    if (v6 != (void **)v7)
    {
      do
      {
        uint64_t v8 = *v6++;

        if ((char *)v6 - (unsigned char *)*v5 == 4096)
        {
          uint64_t v9 = (void **)v5[1];
          ++v5;
          uint64_t v6 = v9;
        }
      }
      while (v6 != (void **)v7);
      uint64_t v2 = *(void ***)(a1 + 8);
      id v3 = *(void ***)(a1 + 16);
    }
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        id v3 = *(void ***)(a1 + 16);
        uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = v2;
        unint64_t v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 256;
    goto LABEL_15;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 512;
LABEL_15:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_1C49469C8(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23)) {
      return 0;
    }
    return memcmp(a1, __s, v4) == 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1) {
      sub_1C49470D8();
    }
    a1 = (void *)*a1;
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t *sub_1C4946A5C(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_1C4946C8C((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

unint64_t sub_1C4946C8C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v23 + v26 + v27 + a3;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v25 + v28 + v36;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      uint64_t v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v49 + v47 + v58 + v48;
        uint64_t v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void sub_1C49470D8()
{
}

void sub_1C49470F0(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1C494714C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E64E0AD0, MEMORY[0x1E4FBA1D0]);
}

void sub_1C4947138(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1C494714C(std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

uint64_t sub_1C4947180(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 456);
  if (v2)
  {
    do
    {
      uint64_t v27 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v27;
    }
    while (v27);
  }
  uint64_t v3 = *(void **)(a1 + 440);
  *(void *)(a1 + 440) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void ***)(a1 + 416);
  if (v4)
  {
    do
    {
      uint64_t v28 = (void **)*v4;
      if (*((char *)v4 + 39) < 0) {
        operator delete(v4[2]);
      }
      operator delete(v4);
      uint64_t v4 = v28;
    }
    while (v28);
  }
  unint64_t v5 = *(void **)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(void ***)(a1 + 376);
  if (v6)
  {
    do
    {
      uint64_t v29 = (void **)*v6;
      if (*((char *)v6 + 39) < 0) {
        operator delete(v6[2]);
      }
      operator delete(v6);
      uint64_t v6 = v29;
    }
    while (v29);
  }
  uint64_t v7 = *(void **)(a1 + 360);
  *(void *)(a1 + 360) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void ***)(a1 + 336);
  if (v8)
  {
    do
    {
      unint64_t v30 = (void **)*v8;
      if (*((char *)v8 + 39) < 0) {
        operator delete(v8[2]);
      }
      operator delete(v8);
      uint64_t v8 = v30;
    }
    while (v30);
  }
  uint64_t v9 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = *(void ***)(a1 + 296);
  if (v10)
  {
    do
    {
      unint64_t v31 = (void **)*v10;
      if (*((char *)v10 + 39) < 0) {
        operator delete(v10[2]);
      }
      operator delete(v10);
      uint64_t v10 = v31;
    }
    while (v31);
  }
  uint64_t v11 = *(void **)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = *(void ***)(a1 + 256);
  if (v12)
  {
    do
    {
      unint64_t v32 = (void **)*v12;
      if (*((char *)v12 + 39) < 0) {
        operator delete(v12[2]);
      }
      operator delete(v12);
      uint64_t v12 = v32;
    }
    while (v32);
  }
  uint64_t v13 = *(void **)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *(void ***)(a1 + 216);
  if (v14)
  {
    do
    {
      unint64_t v33 = (void **)*v14;
      if (*((char *)v14 + 39) < 0) {
        operator delete(v14[2]);
      }
      operator delete(v14);
      uint64_t v14 = v33;
    }
    while (v33);
  }
  uint64_t v15 = *(void **)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v15) {
    operator delete(v15);
  }
  uint64_t v16 = *(void ***)(a1 + 176);
  if (v16)
  {
    do
    {
      uint64_t v34 = (void **)*v16;
      if (*((char *)v16 + 39) < 0) {
        operator delete(v16[2]);
      }
      operator delete(v16);
      uint64_t v16 = v34;
    }
    while (v34);
  }
  unint64_t v17 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v17) {
    operator delete(v17);
  }
  uint64_t v18 = *(void ***)(a1 + 136);
  if (v18)
  {
    do
    {
      unint64_t v35 = (void **)*v18;
      if (*((char *)v18 + 39) < 0) {
        operator delete(v18[2]);
      }
      operator delete(v18);
      uint64_t v18 = v35;
    }
    while (v35);
  }
  unint64_t v19 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = *(void ***)(a1 + 96);
  if (v20)
  {
    do
    {
      uint64_t v36 = (void **)*v20;
      if (*((char *)v20 + 39) < 0) {
        operator delete(v20[2]);
      }
      operator delete(v20);
      uint64_t v20 = v36;
    }
    while (v36);
  }
  unint64_t v21 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v21) {
    operator delete(v21);
  }
  unint64_t v22 = *(void ***)(a1 + 56);
  if (v22)
  {
    do
    {
      uint64_t v37 = (void **)*v22;
      if (*((char *)v22 + 39) < 0) {
        operator delete(v22[2]);
      }
      operator delete(v22);
      unint64_t v22 = v37;
    }
    while (v37);
  }
  uint64_t v23 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = *(void ***)(a1 + 16);
  if (v24)
  {
    do
    {
      uint64_t v38 = (void **)*v24;
      if (*((char *)v24 + 39) < 0) {
        operator delete(v24[2]);
      }
      operator delete(v24);
      uint64_t v24 = v38;
    }
    while (v38);
  }
  uint64_t v25 = *(void **)a1;
  *(void *)a1 = 0;
  if (v25) {
    operator delete(v25);
  }
  return a1;
}

uint64_t sub_1C49474AC(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1C4947518(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  v4[0] = 32001;
  LOWORD(__p[0]) = 123;
  char v5 = 1;
  LOBYTE(v4[1]) = 0;
  char v7 = 1;
  LOWORD(v6[0]) = 91;
  char v9 = 1;
  LOWORD(v8[0]) = 93;
  char v11 = 1;
  strcpy((char *)v10, "_");
  char v13 = 1;
  strcpy((char *)v12, "^");
  char v15 = 1;
  strcpy((char *)v14, "&");
  char v17 = 14;
  strcpy((char *)v16, "\\begin{matrix}");
  char v19 = 12;
  strcpy((char *)v18, "\\end{matrix}");
  char v21 = 15;
  strcpy((char *)v20, "\\begin{aligned}");
  char v23 = 13;
  strcpy((char *)v22, "\\end{aligned}");
  HIBYTE(v24[2]) = 16;
  strcpy((char *)v24, "\\begin{array}{l}");
  HIBYTE(v25[2]) = 17;
  strcpy((char *)v25, "\\begin{array}{lr}");
  char v27 = 11;
  strcpy((char *)v26, "\\end{array}");
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_1C49495F0(a1, (uint64_t)__p, (uint64_t)__p);
  sub_1C49495F0(a1, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1C49495F0(a1, (uint64_t)v6, (uint64_t)v6);
  sub_1C49495F0(a1, (uint64_t)v8, (uint64_t)v8);
  sub_1C49495F0(a1, (uint64_t)v10, (uint64_t)v10);
  sub_1C49495F0(a1, (uint64_t)v12, (uint64_t)v12);
  sub_1C49495F0(a1, (uint64_t)v14, (uint64_t)v14);
  sub_1C49495F0(a1, (uint64_t)v16, (uint64_t)v16);
  sub_1C49495F0(a1, (uint64_t)v18, (uint64_t)v18);
  sub_1C49495F0(a1, (uint64_t)v20, (uint64_t)v20);
  sub_1C49495F0(a1, (uint64_t)v22, (uint64_t)v22);
  sub_1C49495F0(a1, (uint64_t)v24, (uint64_t)v24);
  sub_1C49495F0(a1, (uint64_t)v25, (uint64_t)v25);
  sub_1C49495F0(a1, (uint64_t)v26, (uint64_t)v26);
  if (v27 < 0)
  {
    operator delete(v26[0]);
    if ((SHIBYTE(v25[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v24[2]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_88;
    }
  }
  else if ((SHIBYTE(v25[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v25[0]);
  if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(v24[0]);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_90;
  }
LABEL_89:
  operator delete(v22[0]);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_91;
  }
LABEL_90:
  operator delete(v20[0]);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete(v18[0]);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_93;
  }
LABEL_92:
  operator delete(v16[0]);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_94;
  }
LABEL_93:
  operator delete(v14[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_95;
  }
LABEL_94:
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_96;
  }
LABEL_95:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_97;
  }
LABEL_96:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_98:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_99;
  }
LABEL_97:
  operator delete(v6[0]);
  if (v5 < 0) {
    goto LABEL_98;
  }
LABEL_14:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_99:
  operator delete(__p[0]);
LABEL_15:
  v4[0] = 12545;
  LOWORD(__p[0]) = 48;
  char v5 = 1;
  LOBYTE(v4[1]) = 0;
  char v7 = 1;
  LOWORD(v6[0]) = 50;
  char v9 = 1;
  LOWORD(v8[0]) = 51;
  char v11 = 1;
  strcpy((char *)v10, "4");
  char v13 = 1;
  strcpy((char *)v12, "5");
  char v15 = 1;
  strcpy((char *)v14, "6");
  char v17 = 1;
  strcpy((char *)v16, "7");
  char v19 = 1;
  strcpy((char *)v18, "8");
  char v21 = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  strcpy((char *)v20, "9");
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  sub_1C49495F0(a1 + 40, (uint64_t)__p, (uint64_t)__p);
  sub_1C49495F0(a1 + 40, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1C49495F0(a1 + 40, (uint64_t)v6, (uint64_t)v6);
  sub_1C49495F0(a1 + 40, (uint64_t)v8, (uint64_t)v8);
  sub_1C49495F0(a1 + 40, (uint64_t)v10, (uint64_t)v10);
  sub_1C49495F0(a1 + 40, (uint64_t)v12, (uint64_t)v12);
  sub_1C49495F0(a1 + 40, (uint64_t)v14, (uint64_t)v14);
  sub_1C49495F0(a1 + 40, (uint64_t)v16, (uint64_t)v16);
  sub_1C49495F0(a1 + 40, (uint64_t)v18, (uint64_t)v18);
  sub_1C49495F0(a1 + 40, (uint64_t)v20, (uint64_t)v20);
  if (v21 < 0)
  {
    operator delete(v20[0]);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_17:
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_102;
    }
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(v18[0]);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_18:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_103;
  }
LABEL_102:
  operator delete(v16[0]);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_104;
  }
LABEL_103:
  operator delete(v14[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_105;
  }
LABEL_104:
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_106;
  }
LABEL_105:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_107;
  }
LABEL_106:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_108:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_109;
  }
LABEL_107:
  operator delete(v6[0]);
  if (v5 < 0) {
    goto LABEL_108;
  }
LABEL_24:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
    goto LABEL_25;
  }
LABEL_109:
  operator delete(__p[0]);
LABEL_25:
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v4[0] = 11265;
  LOWORD(__p[0]) = 46;
  char v5 = 1;
  LOBYTE(v4[1]) = 0;
  char v7 = 1;
  LOWORD(v6[0]) = 39;
  *(_DWORD *)(a1 + 112) = 1065353216;
  sub_1C49495F0(a1 + 80, (uint64_t)__p, (uint64_t)__p);
  sub_1C49495F0(a1 + 80, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1C49495F0(a1 + 80, (uint64_t)v6, (uint64_t)v6);
  if ((v7 & 0x80000000) == 0)
  {
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_111:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_112;
  }
  operator delete(v6[0]);
  if (v5 < 0) {
    goto LABEL_111;
  }
LABEL_27:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
    goto LABEL_28;
  }
LABEL_112:
  operator delete(__p[0]);
LABEL_28:
  v4[0] = 11521;
  LOWORD(__p[0]) = 43;
  char v5 = 1;
  LOBYTE(v4[1]) = 0;
  char v7 = 6;
  strcpy((char *)v6, "\\times");
  char v9 = 4;
  strcpy((char *)v8, "\\ast");
  char v11 = 5;
  strcpy((char *)v10, "\\cdot");
  char v13 = 4;
  strcpy((char *)v12, "\\div");
  char v15 = 1;
  *(_OWORD *)(a1 + 120) = 0u;
  strcpy((char *)v14, "/");
  char v17 = 1;
  strcpy((char *)v16, ":");
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  sub_1C49495F0(a1 + 120, (uint64_t)__p, (uint64_t)__p);
  sub_1C49495F0(a1 + 120, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1C49495F0(a1 + 120, (uint64_t)v6, (uint64_t)v6);
  sub_1C49495F0(a1 + 120, (uint64_t)v8, (uint64_t)v8);
  sub_1C49495F0(a1 + 120, (uint64_t)v10, (uint64_t)v10);
  sub_1C49495F0(a1 + 120, (uint64_t)v12, (uint64_t)v12);
  sub_1C49495F0(a1 + 120, (uint64_t)v14, (uint64_t)v14);
  sub_1C49495F0(a1 + 120, (uint64_t)v16, (uint64_t)v16);
  if (v17 < 0)
  {
    operator delete(v16[0]);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_30:
      if ((v13 & 0x80000000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_115;
    }
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete(v14[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_31:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_116;
  }
LABEL_115:
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_117;
  }
LABEL_116:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_118;
  }
LABEL_117:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_119:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_120;
  }
LABEL_118:
  operator delete(v6[0]);
  if (v5 < 0) {
    goto LABEL_119;
  }
LABEL_35:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
    goto LABEL_36;
  }
LABEL_120:
  operator delete(__p[0]);
LABEL_36:
  LOBYTE(v4[0]) = 2;
  strcpy((char *)__p, "\\$");
  char v5 = 3;
  *(_DWORD *)((char *)v4 + 1) = 11305698;
  char v7 = 2;
  LOWORD(v6[0]) = -23614;
  BYTE2(v6[0]) = 0;
  char v9 = 2;
  LOWORD(v8[0]) = -23102;
  BYTE2(v8[0]) = 0;
  char v11 = 2;
  LOWORD(v10[0]) = -23870;
  BYTE2(v10[0]) = 0;
  char v13 = 3;
  strcpy((char *)v12, "₺");
  char v15 = 3;
  LOWORD(v14[0]) = -32030;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  WORD1(v14[0]) = 180;
  char v17 = 3;
  strcpy((char *)v16, "₽");
  char v19 = 3;
  strcpy((char *)v18, "₩");
  *(_DWORD *)(a1 + 192) = 1065353216;
  sub_1C49495F0(a1 + 160, (uint64_t)__p, (uint64_t)__p);
  sub_1C49495F0(a1 + 160, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1C49495F0(a1 + 160, (uint64_t)v6, (uint64_t)v6);
  sub_1C49495F0(a1 + 160, (uint64_t)v8, (uint64_t)v8);
  sub_1C49495F0(a1 + 160, (uint64_t)v10, (uint64_t)v10);
  sub_1C49495F0(a1 + 160, (uint64_t)v12, (uint64_t)v12);
  sub_1C49495F0(a1 + 160, (uint64_t)v14, (uint64_t)v14);
  sub_1C49495F0(a1 + 160, (uint64_t)v16, (uint64_t)v16);
  sub_1C49495F0(a1 + 160, (uint64_t)v18, (uint64_t)v18);
  if (v19 < 0)
  {
    operator delete(v18[0]);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_38:
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_123;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(v16[0]);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_124;
  }
LABEL_123:
  operator delete(v14[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_125;
  }
LABEL_124:
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_126;
  }
LABEL_125:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_127;
  }
LABEL_126:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_44;
    }
LABEL_128:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_129;
  }
LABEL_127:
  operator delete(v6[0]);
  if (v5 < 0) {
    goto LABEL_128;
  }
LABEL_44:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
    goto LABEL_45;
  }
LABEL_129:
  operator delete(__p[0]);
LABEL_45:
  *(_OWORD *)(a1 + 200) = 0u;
  LOBYTE(v4[0]) = 2;
  strcpy((char *)__p, "°");
  char v5 = 2;
  strcpy((char *)v4 + 1, "''");
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  sub_1C49495F0(a1 + 200, (uint64_t)__p, (uint64_t)__p);
  sub_1C49495F0(a1 + 200, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  if (v5 < 0)
  {
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
  }
  else if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(__p[0]);
LABEL_47:
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  v4[0] = 25859;
  LODWORD(__p[0]) = 6910044;
  char v5 = 1;
  LOBYTE(v4[1]) = 0;
  *(_DWORD *)(a1 + 272) = 1065353216;
  sub_1C49495F0(a1 + 240, (uint64_t)__p, (uint64_t)__p);
  sub_1C49495F0(a1 + 240, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  if (v5 < 0)
  {
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
  }
  else if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(__p[0]);
LABEL_49:
  LOBYTE(v4[0]) = 1;
  LOWORD(__p[0]) = 40;
  char v5 = 6;
  strcpy((char *)v4 + 1, "\\left(");
  char v7 = 1;
  LOWORD(v6[0]) = 124;
  char v9 = 6;
  strcpy((char *)v8, "\\left|");
  char v11 = 6;
  strcpy((char *)v10, "\\lceil");
  char v13 = 11;
  strcpy((char *)v12, "\\left\\lceil");
  char v15 = 7;
  strcpy((char *)v14, "\\lfloor");
  char v17 = 12;
  strcpy((char *)v16, "\\left\\lfloor");
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  sub_1C49495F0(a1 + 280, (uint64_t)__p, (uint64_t)__p);
  sub_1C49495F0(a1 + 280, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1C49495F0(a1 + 280, (uint64_t)v6, (uint64_t)v6);
  sub_1C49495F0(a1 + 280, (uint64_t)v8, (uint64_t)v8);
  sub_1C49495F0(a1 + 280, (uint64_t)v10, (uint64_t)v10);
  sub_1C49495F0(a1 + 280, (uint64_t)v12, (uint64_t)v12);
  sub_1C49495F0(a1 + 280, (uint64_t)v14, (uint64_t)v14);
  sub_1C49495F0(a1 + 280, (uint64_t)v16, (uint64_t)v16);
  if (v17 < 0)
  {
    operator delete(v16[0]);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_51:
      if ((v13 & 0x80000000) == 0) {
        goto LABEL_52;
      }
      goto LABEL_136;
    }
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(v14[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_137;
  }
LABEL_136:
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_53:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_138;
  }
LABEL_137:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_139;
  }
LABEL_138:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_56;
    }
LABEL_140:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_141;
  }
LABEL_139:
  operator delete(v6[0]);
  if (v5 < 0) {
    goto LABEL_140;
  }
LABEL_56:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
    goto LABEL_57;
  }
LABEL_141:
  operator delete(__p[0]);
LABEL_57:
  LOBYTE(v4[0]) = 1;
  LOWORD(__p[0]) = 41;
  char v5 = 7;
  strcpy((char *)v4 + 1, "\\right)");
  char v7 = 7;
  strcpy((char *)v6, "\\right|");
  char v9 = 6;
  strcpy((char *)v8, "\\rceil");
  char v11 = 12;
  strcpy((char *)v10, "\\right\\rceil");
  char v13 = 7;
  strcpy((char *)v12, "\\rfloor");
  char v15 = 13;
  strcpy((char *)v14, "\\right\\rfloor");
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  sub_1C49495F0(a1 + 320, (uint64_t)__p, (uint64_t)__p);
  sub_1C49495F0(a1 + 320, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1C49495F0(a1 + 320, (uint64_t)v6, (uint64_t)v6);
  sub_1C49495F0(a1 + 320, (uint64_t)v8, (uint64_t)v8);
  sub_1C49495F0(a1 + 320, (uint64_t)v10, (uint64_t)v10);
  sub_1C49495F0(a1 + 320, (uint64_t)v12, (uint64_t)v12);
  sub_1C49495F0(a1 + 320, (uint64_t)v14, (uint64_t)v14);
  if (v15 < 0)
  {
    operator delete(v14[0]);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_59:
      if ((v11 & 0x80000000) == 0) {
        goto LABEL_60;
      }
      goto LABEL_144;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_59;
  }
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_60:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_145;
  }
LABEL_144:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_61:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_146;
  }
LABEL_145:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_63;
    }
LABEL_147:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_148;
  }
LABEL_146:
  operator delete(v6[0]);
  if (v5 < 0) {
    goto LABEL_147;
  }
LABEL_63:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
    goto LABEL_64;
  }
LABEL_148:
  operator delete(__p[0]);
LABEL_64:
  LOBYTE(v4[0]) = 4;
  strcpy((char *)__p, "\\sin");
  char v5 = 4;
  strcpy((char *)v4 + 1, "\\cos");
  char v7 = 4;
  strcpy((char *)v6, "\\tan");
  char v9 = 4;
  strcpy((char *)v8, "\\csc");
  char v11 = 4;
  strcpy((char *)v10, "\\sec");
  char v13 = 4;
  strcpy((char *)v12, "\\cot");
  char v15 = 7;
  strcpy((char *)v14, "\\arcsin");
  char v17 = 7;
  strcpy((char *)v16, "\\arccos");
  char v19 = 7;
  strcpy((char *)v18, "\\arctan");
  char v21 = 4;
  strcpy((char *)v20, "\\log");
  char v23 = 3;
  strcpy((char *)v22, "\\ln");
  HIBYTE(v24[2]) = 3;
  strcpy((char *)v24, "\\lg");
  HIBYTE(v25[2]) = 5;
  strcpy((char *)v25, "\\sinh");
  char v27 = 5;
  strcpy((char *)v26, "\\cosh");
  char v29 = 5;
  strcpy((char *)v28, "\\tanh");
  char v31 = 5;
  strcpy((char *)v30, "\\coth");
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  sub_1C49495F0(a1 + 360, (uint64_t)__p, (uint64_t)__p);
  sub_1C49495F0(a1 + 360, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1C49495F0(a1 + 360, (uint64_t)v6, (uint64_t)v6);
  sub_1C49495F0(a1 + 360, (uint64_t)v8, (uint64_t)v8);
  sub_1C49495F0(a1 + 360, (uint64_t)v10, (uint64_t)v10);
  sub_1C49495F0(a1 + 360, (uint64_t)v12, (uint64_t)v12);
  sub_1C49495F0(a1 + 360, (uint64_t)v14, (uint64_t)v14);
  sub_1C49495F0(a1 + 360, (uint64_t)v16, (uint64_t)v16);
  sub_1C49495F0(a1 + 360, (uint64_t)v18, (uint64_t)v18);
  sub_1C49495F0(a1 + 360, (uint64_t)v20, (uint64_t)v20);
  sub_1C49495F0(a1 + 360, (uint64_t)v22, (uint64_t)v22);
  sub_1C49495F0(a1 + 360, (uint64_t)v24, (uint64_t)v24);
  sub_1C49495F0(a1 + 360, (uint64_t)v25, (uint64_t)v25);
  sub_1C49495F0(a1 + 360, (uint64_t)v26, (uint64_t)v26);
  sub_1C49495F0(a1 + 360, (uint64_t)v28, (uint64_t)v28);
  sub_1C49495F0(a1 + 360, (uint64_t)v30, (uint64_t)v30);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_66:
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_67;
      }
      goto LABEL_151;
    }
  }
  else if ((v29 & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v28[0]);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v25[2]) & 0x80000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_152;
  }
LABEL_151:
  operator delete(v26[0]);
  if ((SHIBYTE(v25[2]) & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v24[2]) & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_153;
  }
LABEL_152:
  operator delete(v25[0]);
  if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
  {
LABEL_69:
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_154;
  }
LABEL_153:
  operator delete(v24[0]);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_70:
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_155;
  }
LABEL_154:
  operator delete(v22[0]);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_71:
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_156;
  }
LABEL_155:
  operator delete(v20[0]);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_72:
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_157;
  }
LABEL_156:
  operator delete(v18[0]);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_73:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_158;
  }
LABEL_157:
  operator delete(v16[0]);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_74:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_159;
  }
LABEL_158:
  operator delete(v14[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_75:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_160;
  }
LABEL_159:
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_76:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_161;
  }
LABEL_160:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_77:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_162;
  }
LABEL_161:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_78:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_79;
    }
LABEL_163:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_164;
  }
LABEL_162:
  operator delete(v6[0]);
  if (v5 < 0) {
    goto LABEL_163;
  }
LABEL_79:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
    goto LABEL_80;
  }
LABEL_164:
  operator delete(__p[0]);
LABEL_80:
  LOBYTE(v4[0]) = 1;
  LOWORD(__p[0]) = 92;
  char v5 = 2;
  strcpy((char *)v4 + 1, "\\,");
  char v7 = 2;
  strcpy((char *)v6, "\\;");
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  sub_1C49495F0(a1 + 400, (uint64_t)__p, (uint64_t)__p);
  sub_1C49495F0(a1 + 400, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1C49495F0(a1 + 400, (uint64_t)v6, (uint64_t)v6);
  if ((v7 & 0x80000000) == 0)
  {
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_82;
    }
LABEL_166:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_167;
  }
  operator delete(v6[0]);
  if (v5 < 0) {
    goto LABEL_166;
  }
LABEL_82:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0) {
    goto LABEL_83;
  }
LABEL_167:
  operator delete(__p[0]);
LABEL_83:
  LOBYTE(v4[0]) = 2;
  strcpy((char *)__p, "\\\\"");
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  sub_1C49495F0(a1 + 440, (uint64_t)__p, (uint64_t)__p);
  if (SLOBYTE(v4[0]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1C4948A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_objecta, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v32 = v21;
  char v29 = *(void ***)(v20 + 456);
  if (v29)
  {
    do
    {
      char v31 = (void **)*v29;
      if (*((char *)v29 + 39) < 0) {
        operator delete(v29[2]);
      }
      operator delete(v29);
      char v29 = v31;
    }
    while (v31);
  }
  unint64_t v30 = *v25;
  *uint64_t v25 = 0;
  if (v30) {
    operator delete(v30);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_1C49474AC(v22);
  sub_1C49474AC(v27);
  sub_1C49474AC(v28);
  sub_1C49474AC(v26);
  sub_1C49474AC(a12);
  sub_1C49474AC(a13);
  sub_1C49474AC(v24);
  sub_1C49474AC(v23);
  sub_1C49474AC(a14);
  sub_1C49474AC(v32);
  sub_1C49474AC(v20);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C49495F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_1C4946C8C((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    char v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          char v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = operator new(0x28uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *uint64_t v25 = 0;
  v25[1] = v10;
  uint64_t v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C4949ADC(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    v26[2] = *(void *)(a3 + 16);
  }
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_1C4949C24(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        char v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        unint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        char v29 = *(void **)(*(void *)a1 + 8 * v10);
        unint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      char v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      unint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *unint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  char v29 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *unint64_t v30 = *v29;
  *char v29 = v42[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1C4949A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4949A58((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C4949A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4949A58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C4949A58(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1C4949AA8()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void *sub_1C4949ADC(unsigned char *__dst, void *__src, unint64_t a3)
{
  char v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1C4949B7C();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *char v5 = v8;
    char v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_1C4949B7C()
{
}

void sub_1C4949B94(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1C4949BF0(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E64E0AC8, MEMORY[0x1E4FBA1C8]);
}

void sub_1C4949BDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1C4949BF0(std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void sub_1C4949C24(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    char v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    sub_1C4949AA8();
  }
  uint64_t v4 = operator new(8 * a2);
  char v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  uint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint8x8_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          uint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          *uint64_t v7 = *v12;
          uint64_t v14 = 8 * v13;
          *uint8x8_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    uint64_t v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          *uint64_t v7 = *v16;
          uint64_t v17 = 8 * v18;
          *uint64_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          uint64_t v16 = v7;
LABEL_25:
          uint64_t v7 = v16;
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          uint64_t v7 = v16;
          uint64_t v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

void sub_1C4949DD4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1C4949DD4(a1, *(void *)a2);
    sub_1C4949DD4(a1, *((void *)a2 + 1));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

uint64_t **sub_1C4949E58(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      unint64_t v10 = a2;
    }
    else {
      unint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        uint64_t v14 = (const void *)v6[4];
        uint8x8_t v12 = v6 + 4;
        uint64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        break;
      }
      uint64_t v6 = v11[1];
      if (!v6)
      {
        uint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    uint64_t v23 = (uint64_t *)v11;
    uint64_t v11 = (uint64_t **)operator new(0x40uLL);
    uint64_t v24 = *a4;
    uint64_t v25 = (uint64_t *)*((void *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    *uint64_t v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    *((_DWORD *)v11 + 14) = 0;
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = v23;
    *uint64_t v7 = (uint64_t *)v11;
    uint64_t v26 = (uint64_t *)**a1;
    float v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      float v27 = *v7;
    }
    sub_1C4949FD4(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t *sub_1C4949FD4(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    unint64_t v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), char v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        size_t v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          unint64_t v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        *size_t v9 = v2;
        *(void *)(v2 + 16) = v9;
        unint64_t v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    *char v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    char v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      unint64_t v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    unint64_t v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  uint64_t v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  uint64_t *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void ***sub_1C494A188(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      char v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        char v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_1C494A220()
{
}

uint64_t **sub_1C494A238(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        uint64_t v14 = (const void *)v6[4];
        uint64_t v12 = v6 + 4;
        uint64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        int v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      int v6 = v11[1];
      if (!v6)
      {
        uint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    uint64_t v23 = (char *)operator new(0x40uLL);
    uint64_t v24 = v23 + 32;
    uint64_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_1C4949ADC(v24, *(void **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      *((void *)v23 + 6) = *((void *)v25 + 2);
      *(_OWORD *)uint64_t v24 = v26;
    }
    *((_DWORD *)v23 + 14) = 0;
    *(void *)uint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v11;
    *uint64_t v7 = (uint64_t *)v23;
    float v27 = (uint64_t *)**a1;
    float v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      float v28 = *v7;
    }
    sub_1C4949FD4(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1C494A3C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C494A3D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 392);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 376);
  *(void *)(a1 + 376) = 0;
  if (v4) {
    operator delete(v4);
  }
  char v5 = *(void **)(a1 + 352);
  if (v5)
  {
    do
    {
      int v6 = (void *)*v5;
      operator delete(v5);
      char v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = *(void **)(a1 + 336);
  *(void *)(a1 + 336) = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 312);
  if (v8)
  {
    do
    {
      size_t v9 = (void *)*v8;
      operator delete(v8);
      int v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 272);
  if (v11)
  {
    do
    {
      uint64_t v12 = (void *)*v11;
      operator delete(v11);
      uint64_t v11 = v12;
    }
    while (v12);
  }
  uint64_t v13 = *(void **)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 232);
  if (v14)
  {
    do
    {
      int v15 = (void *)*v14;
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  size_t v16 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(a1 + 192);
  if (v17)
  {
    do
    {
      size_t v18 = (void *)*v17;
      operator delete(v17);
      uint64_t v17 = v18;
    }
    while (v18);
  }
  int v19 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v19) {
    operator delete(v19);
  }
  BOOL v20 = *(void **)(a1 + 152);
  if (v20)
  {
    do
    {
      int v21 = (void *)*v20;
      operator delete(v20);
      BOOL v20 = v21;
    }
    while (v21);
  }
  BOOL v22 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v22) {
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(a1 + 112);
  if (v23)
  {
    do
    {
      uint64_t v24 = (void *)*v23;
      operator delete(v23);
      uint64_t v23 = v24;
    }
    while (v24);
  }
  uint64_t v25 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v25) {
    operator delete(v25);
  }
  long long v26 = *(void **)(a1 + 72);
  if (v26)
  {
    do
    {
      float v27 = (void *)*v26;
      operator delete(v26);
      long long v26 = v27;
    }
    while (v27);
  }
  float v28 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v28) {
    operator delete(v28);
  }
  sub_1C4949DD4(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_1C494A570(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    int v6 = (void *)a1[1];
    char v5 = (char *)a1[2];
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_94:
      *(void *)char v5 = v8;
      goto LABEL_95;
    }
    size_t v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      uint64_t v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10 + 2;
      }
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = -v12;
      uint64_t v14 = &v7[-8 * v12];
      int64_t v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        uint64_t v7 = (char *)a1[1];
      }
      char v5 = &v14[v15];
      size_t v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    unint64_t v38 = (v5 - v9) >> 2;
    if (v5 == v9) {
      unint64_t v38 = 1;
    }
    if (v38 >> 61) {
      goto LABEL_111;
    }
    unint64_t v39 = v38 >> 2;
    uint64_t v40 = 8 * v38;
    uint64_t v41 = (char *)operator new(8 * v38);
    uint64_t v42 = &v41[8 * v39];
    int64_t v44 = v5 - v7;
    BOOL v43 = v5 == v7;
    char v5 = v42;
    if (!v43)
    {
      char v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        uint64_t v92 = &v41[8 * v39];
        uint64_t v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          uint64_t v93 = (v45 >> 3) + 1;
          uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v46 = &v42[v94];
          v7 += v94;
          uint64_t v95 = (long long *)(v6 + 3);
          uint64_t v96 = v92 + 16;
          uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *uint64_t v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        uint64_t v46 = &v41[8 * v39];
      }
      do
      {
        uint64_t v99 = *(void *)v7;
        v7 += 8;
        *(void *)uint64_t v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_91:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9) {
      goto LABEL_94;
    }
    uint64_t v100 = v9;
LABEL_93:
    operator delete(v100);
    char v5 = (char *)a1[2];
    goto LABEL_94;
  }
  size_t v18 = (char *)a1[2];
  uint64_t v17 = (char *)a1[3];
  BOOL v20 = (char *)*a1;
  int v19 = (char *)a1[1];
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    uint64_t v24 = operator new(0x1000uLL);
    uint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)size_t v18 = v24;
LABEL_95:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      unint64_t v69 = (v17 - v19) >> 2;
      if (v18 == v19) {
        unint64_t v69 = 1;
      }
      if (v69 >> 61) {
        goto LABEL_111;
      }
      unint64_t v70 = (v69 + 3) >> 2;
      uint64_t v71 = 8 * v69;
      uint64_t v72 = (char *)operator new(8 * v69);
      uint64_t v47 = &v72[8 * v70];
      uint64_t v73 = v47;
      if (v18 != v19)
      {
        uint64_t v73 = &v47[8 * v22];
        BOOL v74 = &v72[8 * v70];
        uint64_t v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38) {
          goto LABEL_115;
        }
        unint64_t v76 = &v72[8 * v70];
        BOOL v74 = v76;
        uint64_t v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20) {
          goto LABEL_115;
        }
        unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        BOOL v74 = &v47[v78];
        uint64_t v75 = &v19[v78];
        uint64_t v79 = (long long *)(v19 + 16);
        uint64_t v80 = v76 + 16;
        uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *uint64_t v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_115:
          do
          {
            uint64_t v83 = *(void *)v75;
            v75 += 8;
            *(void *)BOOL v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        uint64_t v47 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v47 = v19;
    }
    *((void *)v47 - 1) = v25;
    uint64_t v84 = (char *)a1[1];
    char v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    uint64_t v8 = *((void *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3]) {
      goto LABEL_94;
    }
    uint64_t v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      uint64_t v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1) {
        uint64_t v87 = v86 + 1;
      }
      else {
        uint64_t v87 = v86 + 2;
      }
      uint64_t v88 = v87 >> 1;
      uint64_t v89 = -v88;
      unint64_t v90 = &v84[-8 * v88];
      int64_t v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        uint64_t v84 = (char *)a1[1];
      }
      char v5 = &v90[v91];
      size_t v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_94;
    }
    unint64_t v101 = (v5 - v85) >> 2;
    if (v5 == v85) {
      unint64_t v101 = 1;
    }
    if (!(v101 >> 61))
    {
      unint64_t v102 = v101 >> 2;
      uint64_t v103 = 8 * v101;
      uint64_t v104 = (char *)operator new(8 * v101);
      uint64_t v105 = &v104[8 * v102];
      int64_t v106 = v5 - v84;
      BOOL v43 = v5 == v84;
      char v5 = v105;
      if (!v43)
      {
        char v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          uint64_t v109 = &v104[8 * v102];
          uint64_t v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            uint64_t v110 = (v107 >> 3) + 1;
            uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v108 = &v105[v111];
            uint64_t v112 = &v84[v111];
            int v113 = (long long *)(v84 + 16);
            uint64_t v114 = v109 + 16;
            uint64_t v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *uint64_t v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            uint64_t v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          uint64_t v108 = &v104[8 * v102];
        }
        do
        {
          uint64_t v117 = *(void *)v84;
          v84 += 8;
          *(void *)uint64_t v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_108:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85) {
        goto LABEL_94;
      }
      uint64_t v100 = v85;
      goto LABEL_93;
    }
LABEL_111:
    sub_1C4949AA8();
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_111;
  }
  float v28 = (char *)operator new(8 * v27);
  char v29 = operator new(0x1000uLL);
  unint64_t v30 = v29;
  BOOL v31 = &v28[8 * v22];
  unint64_t v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v21 >> 2;
      }
      if (v48 >> 61) {
        sub_1C4949AA8();
      }
      BOOL v31 = (char *)operator new(8 * v48);
      unint64_t v32 = &v31[8 * v48];
      operator delete(v28);
      uint64_t v49 = (char *)a1[1];
      size_t v18 = (char *)a1[2];
      float v28 = v31;
      *(void *)BOOL v31 = v30;
      uint64_t v34 = v31 + 8;
      if (v18 == v49) {
        goto LABEL_25;
      }
      do
      {
LABEL_46:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31) {
              unint64_t v54 = 1;
            }
            else {
              unint64_t v54 = (v32 - v31) >> 2;
            }
            if (v54 >> 61) {
              sub_1C4949AA8();
            }
            uint64_t v55 = (char *)operator new(8 * v54);
            float v28 = v55;
            unint64_t v56 = (v54 + 3) >> 2;
            uint64_t v50 = &v55[8 * v56];
            unint64_t v36 = v50;
            int64_t v57 = v34 - v31;
            if (v34 != v31)
            {
              unint64_t v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v58 = v57 - 8;
              unint64_t v59 = &v55[8 * v56];
              unint64_t v60 = v31;
              if (v58 < 0x38) {
                goto LABEL_116;
              }
              uint64_t v61 = 8 * v56;
              unint64_t v59 = &v55[8 * v56];
              unint64_t v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20) {
                goto LABEL_116;
              }
              uint64_t v62 = (v58 >> 3) + 1;
              uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v59 = &v50[v63];
              unint64_t v60 = &v31[v63];
              uint64_t v64 = (long long *)(v31 + 16);
              uint64_t v65 = &v55[v61 + 16];
              uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)uint64_t v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_116:
                do
                {
                  uint64_t v68 = *(void *)v60;
                  v60 += 8;
                  *(void *)unint64_t v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            unint64_t v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            uint64_t v52 = (v32 - v34) >> 3;
            if (v52 >= -1) {
              unint64_t v53 = v52 + 1;
            }
            else {
              unint64_t v53 = v52 + 2;
            }
            unint64_t v36 = &v34[8 * (v53 >> 1)];
            uint64_t v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              float v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              float v28 = v31;
            }
          }
        }
        else
        {
          uint64_t v50 = v31;
          unint64_t v36 = v34;
        }
        uint64_t v51 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v50 - 1) = v51;
        int8x8_t v35 = v50 - 8;
        uint64_t v34 = v36;
        BOOL v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    unint64_t v33 = v22 + 2;
    if (v22 >= -1) {
      unint64_t v33 = v22 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
  *(void *)BOOL v31 = v29;
  uint64_t v34 = v31 + 8;
  if (v18 != v19) {
    goto LABEL_46;
  }
LABEL_25:
  int8x8_t v35 = v31;
  unint64_t v36 = v34;
LABEL_26:
  uint8x8_t v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
  {
    operator delete(v37);
  }
}

void sub_1C494ABEC(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C494AC08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C494AC1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C494AC34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C494AC4C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1C494AC4C(a1, *a2);
    sub_1C494AC4C(a1, a2[1]);
    unint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void *sub_1C494ACB0(void *result, char *__src, char *a3, size_t __sz)
{
  int v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  size_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      sub_1C494A220();
    uint64_t v13 = v12;
    unint64_t result = operator new(8 * v12);
    size_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      unint64_t result = memcpy(result, v6, v14);
    }
    int64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  int64_t v15 = (void **)(result + 1);
  size_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    int v19 = (void *)*result;
LABEL_20:
    unint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  size_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    unint64_t result = memmove((void *)*result, __src, v16 - v9);
    size_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    int v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *int64_t v15 = &v9[v14];
  return result;
}

void sub_1C494ADF8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    int v6 = (void *)a1[1];
    char v5 = (char *)a1[2];
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_94:
      *(void *)char v5 = v8;
      goto LABEL_95;
    }
    size_t v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      uint64_t v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10 + 2;
      }
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = -v12;
      size_t v14 = &v7[-8 * v12];
      int64_t v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        uint64_t v7 = (char *)a1[1];
      }
      char v5 = &v14[v15];
      size_t v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    unint64_t v38 = (v5 - v9) >> 2;
    if (v5 == v9) {
      unint64_t v38 = 1;
    }
    if (v38 >> 61) {
      goto LABEL_111;
    }
    unint64_t v39 = v38 >> 2;
    uint64_t v40 = 8 * v38;
    uint64_t v41 = (char *)operator new(8 * v38);
    uint64_t v42 = &v41[8 * v39];
    int64_t v44 = v5 - v7;
    BOOL v43 = v5 == v7;
    char v5 = v42;
    if (!v43)
    {
      char v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        uint64_t v92 = &v41[8 * v39];
        uint64_t v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          uint64_t v93 = (v45 >> 3) + 1;
          uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v46 = &v42[v94];
          v7 += v94;
          uint64_t v95 = (long long *)(v6 + 3);
          uint64_t v96 = v92 + 16;
          uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *uint64_t v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        uint64_t v46 = &v41[8 * v39];
      }
      do
      {
        uint64_t v99 = *(void *)v7;
        v7 += 8;
        *(void *)uint64_t v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_91:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9) {
      goto LABEL_94;
    }
    uint64_t v100 = v9;
LABEL_93:
    operator delete(v100);
    char v5 = (char *)a1[2];
    goto LABEL_94;
  }
  size_t v18 = (char *)a1[2];
  unint64_t v17 = (char *)a1[3];
  BOOL v20 = (char *)*a1;
  int v19 = (char *)a1[1];
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    uint64_t v24 = operator new(0x1000uLL);
    uint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)size_t v18 = v24;
LABEL_95:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      unint64_t v69 = (v17 - v19) >> 2;
      if (v18 == v19) {
        unint64_t v69 = 1;
      }
      if (v69 >> 61) {
        goto LABEL_111;
      }
      unint64_t v70 = (v69 + 3) >> 2;
      uint64_t v71 = 8 * v69;
      uint64_t v72 = (char *)operator new(8 * v69);
      uint64_t v47 = &v72[8 * v70];
      uint64_t v73 = v47;
      if (v18 != v19)
      {
        uint64_t v73 = &v47[8 * v22];
        BOOL v74 = &v72[8 * v70];
        uint64_t v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38) {
          goto LABEL_115;
        }
        unint64_t v76 = &v72[8 * v70];
        BOOL v74 = v76;
        uint64_t v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20) {
          goto LABEL_115;
        }
        unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        BOOL v74 = &v47[v78];
        uint64_t v75 = &v19[v78];
        uint64_t v79 = (long long *)(v19 + 16);
        uint64_t v80 = v76 + 16;
        uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *uint64_t v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_115:
          do
          {
            uint64_t v83 = *(void *)v75;
            v75 += 8;
            *(void *)BOOL v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        uint64_t v47 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v47 = v19;
    }
    *((void *)v47 - 1) = v25;
    uint64_t v84 = (char *)a1[1];
    char v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    uint64_t v8 = *((void *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3]) {
      goto LABEL_94;
    }
    uint64_t v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      uint64_t v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1) {
        uint64_t v87 = v86 + 1;
      }
      else {
        uint64_t v87 = v86 + 2;
      }
      uint64_t v88 = v87 >> 1;
      uint64_t v89 = -v88;
      unint64_t v90 = &v84[-8 * v88];
      int64_t v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        uint64_t v84 = (char *)a1[1];
      }
      char v5 = &v90[v91];
      size_t v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_94;
    }
    unint64_t v101 = (v5 - v85) >> 2;
    if (v5 == v85) {
      unint64_t v101 = 1;
    }
    if (!(v101 >> 61))
    {
      unint64_t v102 = v101 >> 2;
      uint64_t v103 = 8 * v101;
      uint64_t v104 = (char *)operator new(8 * v101);
      uint64_t v105 = &v104[8 * v102];
      int64_t v106 = v5 - v84;
      BOOL v43 = v5 == v84;
      char v5 = v105;
      if (!v43)
      {
        char v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          uint64_t v109 = &v104[8 * v102];
          uint64_t v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            uint64_t v110 = (v107 >> 3) + 1;
            uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v108 = &v105[v111];
            uint64_t v112 = &v84[v111];
            int v113 = (long long *)(v84 + 16);
            uint64_t v114 = v109 + 16;
            uint64_t v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *uint64_t v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            uint64_t v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          uint64_t v108 = &v104[8 * v102];
        }
        do
        {
          uint64_t v117 = *(void *)v84;
          v84 += 8;
          *(void *)uint64_t v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_108:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85) {
        goto LABEL_94;
      }
      uint64_t v100 = v85;
      goto LABEL_93;
    }
LABEL_111:
    sub_1C4949AA8();
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_111;
  }
  float v28 = (char *)operator new(8 * v27);
  char v29 = operator new(0x1000uLL);
  unint64_t v30 = v29;
  BOOL v31 = &v28[8 * v22];
  unint64_t v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v21 >> 2;
      }
      if (v48 >> 61) {
        sub_1C4949AA8();
      }
      BOOL v31 = (char *)operator new(8 * v48);
      unint64_t v32 = &v31[8 * v48];
      operator delete(v28);
      uint64_t v49 = (char *)a1[1];
      size_t v18 = (char *)a1[2];
      float v28 = v31;
      *(void *)BOOL v31 = v30;
      uint64_t v34 = v31 + 8;
      if (v18 == v49) {
        goto LABEL_25;
      }
      do
      {
LABEL_46:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31) {
              unint64_t v54 = 1;
            }
            else {
              unint64_t v54 = (v32 - v31) >> 2;
            }
            if (v54 >> 61) {
              sub_1C4949AA8();
            }
            uint64_t v55 = (char *)operator new(8 * v54);
            float v28 = v55;
            unint64_t v56 = (v54 + 3) >> 2;
            uint64_t v50 = &v55[8 * v56];
            unint64_t v36 = v50;
            int64_t v57 = v34 - v31;
            if (v34 != v31)
            {
              unint64_t v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v58 = v57 - 8;
              unint64_t v59 = &v55[8 * v56];
              unint64_t v60 = v31;
              if (v58 < 0x38) {
                goto LABEL_116;
              }
              uint64_t v61 = 8 * v56;
              unint64_t v59 = &v55[8 * v56];
              unint64_t v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20) {
                goto LABEL_116;
              }
              uint64_t v62 = (v58 >> 3) + 1;
              uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v59 = &v50[v63];
              unint64_t v60 = &v31[v63];
              uint64_t v64 = (long long *)(v31 + 16);
              uint64_t v65 = &v55[v61 + 16];
              uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)uint64_t v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_116:
                do
                {
                  uint64_t v68 = *(void *)v60;
                  v60 += 8;
                  *(void *)unint64_t v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            unint64_t v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            uint64_t v52 = (v32 - v34) >> 3;
            if (v52 >= -1) {
              unint64_t v53 = v52 + 1;
            }
            else {
              unint64_t v53 = v52 + 2;
            }
            unint64_t v36 = &v34[8 * (v53 >> 1)];
            uint64_t v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              float v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              float v28 = v31;
            }
          }
        }
        else
        {
          uint64_t v50 = v31;
          unint64_t v36 = v34;
        }
        uint64_t v51 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v50 - 1) = v51;
        int8x8_t v35 = v50 - 8;
        uint64_t v34 = v36;
        BOOL v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    unint64_t v33 = v22 + 2;
    if (v22 >= -1) {
      unint64_t v33 = v22 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
  *(void *)BOOL v31 = v29;
  uint64_t v34 = v31 + 8;
  if (v18 != v19) {
    goto LABEL_46;
  }
LABEL_25:
  int8x8_t v35 = v31;
  unint64_t v36 = v34;
LABEL_26:
  uint8x8_t v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
  {
    operator delete(v37);
  }
}

void sub_1C494B474(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C494B490(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C494B4A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C494B4BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C494B4D4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    int v6 = (void *)a1[1];
    char v5 = (char *)a1[2];
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_94:
      *(void *)char v5 = v8;
      goto LABEL_95;
    }
    size_t v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      uint64_t v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10 + 2;
      }
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = -v12;
      size_t v14 = &v7[-8 * v12];
      int64_t v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        uint64_t v7 = (char *)a1[1];
      }
      char v5 = &v14[v15];
      size_t v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    unint64_t v38 = (v5 - v9) >> 2;
    if (v5 == v9) {
      unint64_t v38 = 1;
    }
    if (v38 >> 61) {
      goto LABEL_111;
    }
    unint64_t v39 = v38 >> 2;
    uint64_t v40 = 8 * v38;
    uint64_t v41 = (char *)operator new(8 * v38);
    uint64_t v42 = &v41[8 * v39];
    int64_t v44 = v5 - v7;
    BOOL v43 = v5 == v7;
    char v5 = v42;
    if (!v43)
    {
      char v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        uint64_t v92 = &v41[8 * v39];
        uint64_t v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          uint64_t v93 = (v45 >> 3) + 1;
          uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v46 = &v42[v94];
          v7 += v94;
          uint64_t v95 = (long long *)(v6 + 3);
          uint64_t v96 = v92 + 16;
          uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *uint64_t v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        uint64_t v46 = &v41[8 * v39];
      }
      do
      {
        uint64_t v99 = *(void *)v7;
        v7 += 8;
        *(void *)uint64_t v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_91:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9) {
      goto LABEL_94;
    }
    uint64_t v100 = v9;
LABEL_93:
    operator delete(v100);
    char v5 = (char *)a1[2];
    goto LABEL_94;
  }
  size_t v18 = (char *)a1[2];
  unint64_t v17 = (char *)a1[3];
  BOOL v20 = (char *)*a1;
  int v19 = (char *)a1[1];
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    uint64_t v24 = operator new(0x1000uLL);
    uint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)size_t v18 = v24;
LABEL_95:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      unint64_t v69 = (v17 - v19) >> 2;
      if (v18 == v19) {
        unint64_t v69 = 1;
      }
      if (v69 >> 61) {
        goto LABEL_111;
      }
      unint64_t v70 = (v69 + 3) >> 2;
      uint64_t v71 = 8 * v69;
      uint64_t v72 = (char *)operator new(8 * v69);
      uint64_t v47 = &v72[8 * v70];
      uint64_t v73 = v47;
      if (v18 != v19)
      {
        uint64_t v73 = &v47[8 * v22];
        BOOL v74 = &v72[8 * v70];
        uint64_t v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38) {
          goto LABEL_115;
        }
        unint64_t v76 = &v72[8 * v70];
        BOOL v74 = v76;
        uint64_t v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20) {
          goto LABEL_115;
        }
        unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        BOOL v74 = &v47[v78];
        uint64_t v75 = &v19[v78];
        uint64_t v79 = (long long *)(v19 + 16);
        uint64_t v80 = v76 + 16;
        uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *uint64_t v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_115:
          do
          {
            uint64_t v83 = *(void *)v75;
            v75 += 8;
            *(void *)BOOL v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        uint64_t v47 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v47 = v19;
    }
    *((void *)v47 - 1) = v25;
    uint64_t v84 = (char *)a1[1];
    char v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    uint64_t v8 = *((void *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3]) {
      goto LABEL_94;
    }
    uint64_t v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      uint64_t v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1) {
        uint64_t v87 = v86 + 1;
      }
      else {
        uint64_t v87 = v86 + 2;
      }
      uint64_t v88 = v87 >> 1;
      uint64_t v89 = -v88;
      unint64_t v90 = &v84[-8 * v88];
      int64_t v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        uint64_t v84 = (char *)a1[1];
      }
      char v5 = &v90[v91];
      size_t v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_94;
    }
    unint64_t v101 = (v5 - v85) >> 2;
    if (v5 == v85) {
      unint64_t v101 = 1;
    }
    if (!(v101 >> 61))
    {
      unint64_t v102 = v101 >> 2;
      uint64_t v103 = 8 * v101;
      uint64_t v104 = (char *)operator new(8 * v101);
      uint64_t v105 = &v104[8 * v102];
      int64_t v106 = v5 - v84;
      BOOL v43 = v5 == v84;
      char v5 = v105;
      if (!v43)
      {
        char v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          uint64_t v109 = &v104[8 * v102];
          uint64_t v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            uint64_t v110 = (v107 >> 3) + 1;
            uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v108 = &v105[v111];
            uint64_t v112 = &v84[v111];
            int v113 = (long long *)(v84 + 16);
            uint64_t v114 = v109 + 16;
            uint64_t v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *uint64_t v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            uint64_t v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          uint64_t v108 = &v104[8 * v102];
        }
        do
        {
          uint64_t v117 = *(void *)v84;
          v84 += 8;
          *(void *)uint64_t v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_108:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85) {
        goto LABEL_94;
      }
      uint64_t v100 = v85;
      goto LABEL_93;
    }
LABEL_111:
    sub_1C4949AA8();
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_111;
  }
  float v28 = (char *)operator new(8 * v27);
  char v29 = operator new(0x1000uLL);
  unint64_t v30 = v29;
  BOOL v31 = &v28[8 * v22];
  unint64_t v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v21 >> 2;
      }
      if (v48 >> 61) {
        sub_1C4949AA8();
      }
      BOOL v31 = (char *)operator new(8 * v48);
      unint64_t v32 = &v31[8 * v48];
      operator delete(v28);
      uint64_t v49 = (char *)a1[1];
      size_t v18 = (char *)a1[2];
      float v28 = v31;
      *(void *)BOOL v31 = v30;
      uint64_t v34 = v31 + 8;
      if (v18 == v49) {
        goto LABEL_25;
      }
      do
      {
LABEL_46:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31) {
              unint64_t v54 = 1;
            }
            else {
              unint64_t v54 = (v32 - v31) >> 2;
            }
            if (v54 >> 61) {
              sub_1C4949AA8();
            }
            uint64_t v55 = (char *)operator new(8 * v54);
            float v28 = v55;
            unint64_t v56 = (v54 + 3) >> 2;
            uint64_t v50 = &v55[8 * v56];
            unint64_t v36 = v50;
            int64_t v57 = v34 - v31;
            if (v34 != v31)
            {
              unint64_t v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v58 = v57 - 8;
              unint64_t v59 = &v55[8 * v56];
              unint64_t v60 = v31;
              if (v58 < 0x38) {
                goto LABEL_116;
              }
              uint64_t v61 = 8 * v56;
              unint64_t v59 = &v55[8 * v56];
              unint64_t v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20) {
                goto LABEL_116;
              }
              uint64_t v62 = (v58 >> 3) + 1;
              uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v59 = &v50[v63];
              unint64_t v60 = &v31[v63];
              uint64_t v64 = (long long *)(v31 + 16);
              uint64_t v65 = &v55[v61 + 16];
              uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)uint64_t v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_116:
                do
                {
                  uint64_t v68 = *(void *)v60;
                  v60 += 8;
                  *(void *)unint64_t v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            unint64_t v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            uint64_t v52 = (v32 - v34) >> 3;
            if (v52 >= -1) {
              unint64_t v53 = v52 + 1;
            }
            else {
              unint64_t v53 = v52 + 2;
            }
            unint64_t v36 = &v34[8 * (v53 >> 1)];
            uint64_t v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              float v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              float v28 = v31;
            }
          }
        }
        else
        {
          uint64_t v50 = v31;
          unint64_t v36 = v34;
        }
        uint64_t v51 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v50 - 1) = v51;
        int8x8_t v35 = v50 - 8;
        uint64_t v34 = v36;
        BOOL v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    unint64_t v33 = v22 + 2;
    if (v22 >= -1) {
      unint64_t v33 = v22 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
  *(void *)BOOL v31 = v29;
  uint64_t v34 = v31 + 8;
  if (v18 != v19) {
    goto LABEL_46;
  }
LABEL_25:
  int8x8_t v35 = v31;
  unint64_t v36 = v34;
LABEL_26:
  uint8x8_t v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
  {
    operator delete(v37);
  }
}

void sub_1C494BB50(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C494BB6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C494BB80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C494BB98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C494BBB0(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
LABEL_2:
  uint64_t v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    uint64_t v14 = a2 - v12;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v86 = *(a2 - 1);
          uint64_t v87 = *v12;
          if (*(void *)(**a3 + 8 * v86) >= *(void *)(**a3 + 8 * *v12)) {
            return result;
          }
          *uint64_t v12 = v86;
          goto LABEL_180;
        case 3:
          uint64_t v88 = **a3;
          uint64_t v87 = *v12;
          uint64_t v89 = v12[1];
          uint64_t v90 = *(void *)(v88 + 8 * v89);
          uint64_t v91 = *(a2 - 1);
          uint64_t v92 = *(void *)(v88 + 8 * v91);
          if (v90 >= *(void *)(v88 + 8 * *v12))
          {
            if (v92 < v90)
            {
              v12[1] = v91;
              *(a2 - 1) = v89;
              uint64_t v145 = *v12;
              uint64_t v144 = v12[1];
              if (*(void *)(v88 + 8 * v144) < *(void *)(v88 + 8 * *v12))
              {
                *uint64_t v12 = v144;
                v12[1] = v145;
              }
            }
          }
          else
          {
            if (v92 >= v90)
            {
              *uint64_t v12 = v89;
              v12[1] = v87;
              uint64_t v154 = *(a2 - 1);
              if (*(void *)(v88 + 8 * v154) >= *(void *)(v88 + 8 * v87)) {
                return result;
              }
              v12[1] = v154;
            }
            else
            {
              *uint64_t v12 = v91;
            }
LABEL_180:
            *(a2 - 1) = v87;
          }
          return result;
        case 4:
          uint64_t v94 = v12 + 1;
          uint64_t v95 = v12[1];
          uint64_t v96 = v12 + 2;
          uint64_t v97 = v12[2];
          uint64_t v98 = **a3;
          uint64_t v99 = *(void *)(v98 + 8 * v95);
          uint64_t v100 = *v12;
          uint64_t v101 = *(void *)(v98 + 8 * v97);
          if (v99 >= *(void *)(v98 + 8 * *v12))
          {
            if (v101 >= v99)
            {
LABEL_174:
              uint64_t v95 = v97;
              uint64_t v146 = *(a2 - 1);
              if (*(void *)(v98 + 8 * v146) >= *(void *)(v98 + 8 * v95)) {
                return result;
              }
LABEL_175:
              *uint64_t v96 = v146;
              *(a2 - 1) = v95;
              uint64_t v151 = *v96;
              uint64_t v152 = *v94;
              if (*(void *)(v98 + 8 * v151) < *(void *)(v98 + 8 * v152))
              {
                v12[1] = v151;
                v12[2] = v152;
                uint64_t v153 = *v12;
                if (*(void *)(v98 + 8 * v151) < *(void *)(v98 + 8 * *v12))
                {
                  *uint64_t v12 = v151;
                  v12[1] = v153;
                }
              }
              return result;
            }
            *uint64_t v94 = v97;
            *uint64_t v96 = v95;
            unint64_t v102 = v12;
            uint64_t v103 = v12 + 1;
            unint64_t result = v95;
            if (*(void *)(v98 + 8 * v97) >= *(void *)(v98 + 8 * v100))
            {
LABEL_165:
              uint64_t v146 = *(a2 - 1);
              if (*(void *)(v98 + 8 * v146) >= *(void *)(v98 + 8 * v95)) {
                return result;
              }
              goto LABEL_175;
            }
          }
          else
          {
            unint64_t v102 = v12;
            uint64_t v103 = v12 + 2;
            unint64_t result = *v12;
            if (v101 >= v99)
            {
              *uint64_t v12 = v95;
              v12[1] = v100;
              unint64_t v102 = v12 + 1;
              uint64_t v103 = v12 + 2;
              unint64_t result = v100;
              if (*(void *)(v98 + 8 * v97) >= *(void *)(v98 + 8 * v100)) {
                goto LABEL_174;
              }
            }
          }
          *unint64_t v102 = v97;
          uint64_t *v103 = v100;
          uint64_t v95 = result;
          goto LABEL_165;
        case 5:
          uint64_t v93 = **a3;
          return (uint64_t)sub_1C494C718(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, v93);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 == a2) {
        return result;
      }
      int64_t v114 = (unint64_t)(v14 - 2) >> 1;
      uint64_t v115 = *a3;
      int64_t v116 = v114;
      while (1)
      {
        if (v114 >= v116)
        {
          uint64_t v118 = (2 * v116) | 1;
          uint64_t v119 = &v12[v118];
          uint64_t v120 = *v119;
          if (2 * v116 + 2 < v14)
          {
            uint64_t v121 = *v115;
            if (*(void *)(*v115 + 8 * v120) < *(void *)(*v115 + 8 * v119[1]))
            {
              uint64_t v120 = v119[1];
              ++v119;
              uint64_t v118 = 2 * v116 + 2;
            }
            uint64_t v122 = &v12[v116];
            uint64_t v123 = *v122;
            unint64_t result = *(void *)(v121 + 8 * v120);
            if (result < *(void *)(v121 + 8 * *v122)) {
              goto LABEL_129;
            }
            do
            {
LABEL_140:
              uint64_t v124 = v119;
              *uint64_t v122 = v120;
              if (v114 < v118) {
                break;
              }
              unint64_t result = (2 * v118) | 1;
              uint64_t v119 = &v12[result];
              uint64_t v125 = 2 * v118 + 2;
              uint64_t v120 = *v119;
              if (v125 < v14 && *(void *)(v121 + 8 * v120) < *(void *)(v121 + 8 * v119[1]))
              {
                uint64_t v120 = v119[1];
                ++v119;
                unint64_t result = v125;
              }
              uint64_t v122 = v124;
              uint64_t v118 = result;
            }
            while (*(void *)(v121 + 8 * v120) >= *(void *)(v121 + 8 * v123));
            *uint64_t v124 = v123;
            uint64_t v115 = *a3;
            goto LABEL_129;
          }
          uint64_t v121 = *v115;
          uint64_t v122 = &v12[v116];
          uint64_t v123 = *v122;
          unint64_t result = *(void *)(*v115 + 8 * v120);
          if (result >= *(void *)(*v115 + 8 * *v122)) {
            goto LABEL_140;
          }
        }
LABEL_129:
        BOOL v117 = v116-- <= 0;
        if (v117)
        {
          uint64_t v126 = (unint64_t)v13 >> 3;
          do
          {
            uint64_t v127 = 0;
            uint64_t v128 = *v12;
            uint64_t v129 = *a3;
            uint64_t v130 = v12;
            do
            {
              uint64_t v131 = &v130[v127];
              uint64_t v134 = v131[1];
              uint64_t v132 = v131 + 1;
              uint64_t v133 = v134;
              uint64_t v135 = (2 * v127) | 1;
              uint64_t v136 = 2 * v127 + 2;
              if (v136 < v126)
              {
                unint64_t result = v132[1];
                if (*(void *)(*v129 + 8 * v133) < *(void *)(*v129 + 8 * result))
                {
                  uint64_t v133 = v132[1];
                  ++v132;
                  uint64_t v135 = v136;
                }
              }
              *uint64_t v130 = v133;
              uint64_t v130 = v132;
              uint64_t v127 = v135;
            }
            while (v135 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
            if (v132 == --a2)
            {
              *uint64_t v132 = v128;
            }
            else
            {
              *uint64_t v132 = *a2;
              *a2 = v128;
              uint64_t v137 = (char *)v132 - (char *)v12 + 8;
              if (v137 >= 9)
              {
                unint64_t v138 = (((unint64_t)v137 >> 3) - 2) >> 1;
                uint64_t v139 = &v12[v138];
                uint64_t v140 = *v139;
                uint64_t v141 = *v132;
                uint64_t v142 = **a3;
                if (*(void *)(v142 + 8 * *v139) < *(void *)(v142 + 8 * *v132))
                {
                  do
                  {
                    long long v143 = v139;
                    *uint64_t v132 = v140;
                    if (!v138) {
                      break;
                    }
                    unint64_t v138 = (v138 - 1) >> 1;
                    uint64_t v139 = &v12[v138];
                    uint64_t v140 = *v139;
                    uint64_t v132 = v143;
                  }
                  while (*(void *)(v142 + 8 * *v139) < *(void *)(v142 + 8 * v141));
                  uint64_t *v143 = v141;
                }
              }
            }
            BOOL v117 = v126-- <= 2;
          }
          while (!v117);
          return result;
        }
      }
    }
    unint64_t v15 = (unint64_t)v14 >> 1;
    size_t v16 = &v12[(unint64_t)v14 >> 1];
    uint64_t v17 = **a3;
    uint64_t v18 = *(a2 - 1);
    uint64_t v19 = *(void *)(v17 + 8 * v18);
    if ((unint64_t)v13 < 0x401)
    {
      uint64_t v23 = *v12;
      uint64_t v24 = *v16;
      uint64_t v25 = *(void *)(v17 + 8 * *v12);
      if (v25 < *(void *)(v17 + 8 * *v16))
      {
        if (v19 >= v25)
        {
          *size_t v16 = v23;
          *uint64_t v12 = v24;
          uint64_t v39 = *(a2 - 1);
          if (*(void *)(v17 + 8 * v39) >= *(void *)(v17 + 8 * v24)) {
            goto LABEL_33;
          }
          *uint64_t v12 = v39;
        }
        else
        {
          *size_t v16 = v18;
        }
        *(a2 - 1) = v24;
LABEL_33:
        --a4;
        uint64_t v28 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v19 >= v25) {
        goto LABEL_33;
      }
      *uint64_t v12 = v18;
      *(a2 - 1) = v23;
      uint64_t v27 = *v16;
      if (*(void *)(v17 + 8 * *v12) >= *(void *)(v17 + 8 * *v16)) {
        goto LABEL_33;
      }
      *size_t v16 = *v12;
      *uint64_t v12 = v27;
      --a4;
      uint64_t v28 = v27;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      uint64_t v58 = *(void *)(v17 + 8 * v28);
      if (*(void *)(v17 + 8 * *(v12 - 1)) < v58) {
        goto LABEL_57;
      }
      if (v58 < *(void *)(v17 + 8 * *(a2 - 1)))
      {
        do
        {
          uint64_t v76 = v12[1];
          ++v12;
        }
        while (v58 >= *(void *)(v17 + 8 * v76));
      }
      else
      {
        unint64_t v77 = v12 + 1;
        do
        {
          uint64_t v12 = v77;
          if (v77 >= a2) {
            break;
          }
          ++v77;
        }
        while (v58 >= *(void *)(v17 + 8 * *v12));
      }
      uint64_t v78 = a2;
      if (v12 < a2)
      {
        uint64_t v78 = a2;
        do
          uint64_t v79 = *--v78;
        while (v58 < *(void *)(v17 + 8 * v79));
      }
      if (v12 < v78)
      {
        uint64_t v80 = *v12;
        uint64_t v81 = *v78;
        do
        {
          *uint64_t v12 = v81;
          *uint64_t v78 = v80;
          uint64_t v82 = *(void *)(v17 + 8 * v28);
          do
          {
            uint64_t v83 = v12[1];
            ++v12;
            uint64_t v80 = v83;
          }
          while (v82 >= *(void *)(v17 + 8 * v83));
          do
          {
            uint64_t v84 = *--v78;
            uint64_t v81 = v84;
          }
          while (v82 < *(void *)(v17 + 8 * v84));
        }
        while (v12 < v78);
      }
      uint64_t v85 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *uint64_t v11 = *v85;
      }
      a5 = 0;
      *uint64_t v85 = v28;
    }
    else
    {
      uint64_t v20 = *v16;
      uint64_t v21 = *v12;
      uint64_t v22 = *(void *)(v17 + 8 * *v16);
      if (v22 >= *(void *)(v17 + 8 * *v12))
      {
        if (v19 < v22)
        {
          *size_t v16 = v18;
          *(a2 - 1) = v20;
          uint64_t v26 = *v12;
          if (*(void *)(v17 + 8 * *v16) < *(void *)(v17 + 8 * *v12))
          {
            *uint64_t v12 = *v16;
            *size_t v16 = v26;
          }
        }
      }
      else
      {
        if (v19 >= v22)
        {
          *uint64_t v12 = v20;
          *size_t v16 = v21;
          uint64_t v29 = *(a2 - 1);
          if (*(void *)(v17 + 8 * v29) >= *(void *)(v17 + 8 * v21)) {
            goto LABEL_24;
          }
          *size_t v16 = v29;
        }
        else
        {
          *uint64_t v12 = v18;
        }
        *(a2 - 1) = v21;
      }
LABEL_24:
      unint64_t v30 = &v12[v15];
      uint64_t v33 = *(v30 - 1);
      BOOL v31 = v30 - 1;
      uint64_t v32 = v33;
      uint64_t v34 = v12[1];
      uint64_t v35 = *(void *)(v17 + 8 * v33);
      uint64_t v36 = *(a2 - 2);
      uint64_t v37 = *(void *)(v17 + 8 * v36);
      if (v35 >= *(void *)(v17 + 8 * v34))
      {
        if (v37 < v35)
        {
          uint64_t *v31 = v36;
          *(a2 - 2) = v32;
          uint64_t v38 = v12[1];
          if (*(void *)(v17 + 8 * *v31) < *(void *)(v17 + 8 * v38))
          {
            v12[1] = *v31;
            uint64_t *v31 = v38;
          }
        }
      }
      else
      {
        if (v37 >= v35)
        {
          v12[1] = v32;
          uint64_t *v31 = v34;
          uint64_t v40 = *(a2 - 2);
          if (*(void *)(v17 + 8 * v40) >= *(void *)(v17 + 8 * v34)) {
            goto LABEL_38;
          }
          uint64_t *v31 = v40;
        }
        else
        {
          v12[1] = v36;
        }
        *(a2 - 2) = v34;
      }
LABEL_38:
      uint64_t v41 = &v12[v15];
      uint64_t v44 = v41[1];
      uint64_t v42 = v41 + 1;
      uint64_t v43 = v44;
      uint64_t v45 = v12[2];
      uint64_t v46 = *(void *)(v17 + 8 * v44);
      uint64_t v47 = *(a2 - 3);
      uint64_t v48 = *(void *)(v17 + 8 * v47);
      if (v46 >= *(void *)(v17 + 8 * v45))
      {
        if (v48 < v46)
        {
          *uint64_t v42 = v47;
          *(a2 - 3) = v43;
          uint64_t v49 = v12[2];
          if (*(void *)(v17 + 8 * *v42) < *(void *)(v17 + 8 * v49))
          {
            v12[2] = *v42;
            *uint64_t v42 = v49;
          }
        }
      }
      else
      {
        if (v48 >= v46)
        {
          v12[2] = v43;
          *uint64_t v42 = v45;
          uint64_t v50 = *(a2 - 3);
          if (*(void *)(v17 + 8 * v50) >= *(void *)(v17 + 8 * v45)) {
            goto LABEL_47;
          }
          *uint64_t v42 = v50;
        }
        else
        {
          v12[2] = v47;
        }
        *(a2 - 3) = v45;
      }
LABEL_47:
      uint64_t v51 = *v16;
      uint64_t v52 = *v31;
      uint64_t v53 = *(void *)(v17 + 8 * *v16);
      uint64_t v54 = *v42;
      uint64_t v55 = *(void *)(v17 + 8 * *v42);
      if (v53 >= *(void *)(v17 + 8 * *v31))
      {
        if (v55 >= v53) {
          goto LABEL_55;
        }
        *size_t v16 = v54;
        *uint64_t v42 = v51;
        uint64_t v42 = v16;
        uint64_t v51 = v52;
        if (*(void *)(v17 + 8 * v54) < *(void *)(v17 + 8 * v52))
        {
LABEL_54:
          uint64_t *v31 = v54;
          *uint64_t v42 = v52;
LABEL_55:
          uint64_t v57 = *v12;
          *uint64_t v12 = v51;
          *size_t v16 = v57;
          --a4;
          uint64_t v28 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        uint64_t v75 = *v12;
        *uint64_t v12 = v54;
        *size_t v16 = v75;
        --a4;
        uint64_t v28 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v55 < v53) {
        goto LABEL_54;
      }
      uint64_t *v31 = v51;
      *size_t v16 = v52;
      BOOL v31 = v16;
      uint64_t v51 = v54;
      if (*(void *)(v17 + 8 * v54) < *(void *)(v17 + 8 * v52)) {
        goto LABEL_54;
      }
      uint64_t v56 = *v12;
      *uint64_t v12 = v52;
      *size_t v16 = v56;
      --a4;
      uint64_t v28 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v59 = 0;
      uint64_t v60 = **a3;
      uint64_t v61 = *(void *)(v60 + 8 * v28);
      do
        uint64_t v62 = v12[++v59];
      while (*(void *)(v60 + 8 * v62) < v61);
      uint64_t v63 = &v12[v59];
      uint64_t v64 = a2;
      if (v59 == 1)
      {
        uint64_t v64 = a2;
        do
        {
          if (v63 >= v64) {
            break;
          }
          uint64_t v66 = *--v64;
        }
        while (*(void *)(v60 + 8 * v66) >= v61);
      }
      else
      {
        do
          uint64_t v65 = *--v64;
        while (*(void *)(v60 + 8 * v65) >= v61);
      }
      if (v63 >= v64)
      {
        uint64_t v73 = v63 - 1;
        if (v63 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *uint64_t v12 = *v73;
        goto LABEL_75;
      }
      uint64_t v67 = *v64;
      uint64_t v68 = &v12[v59];
      unint64_t v69 = v64;
      do
      {
        *uint64_t v68 = v67;
        uint64_t *v69 = v62;
        uint64_t v70 = *(void *)(v60 + 8 * v28);
        do
        {
          uint64_t v71 = v68[1];
          ++v68;
          uint64_t v62 = v71;
        }
        while (*(void *)(v60 + 8 * v71) < v70);
        do
        {
          uint64_t v72 = *--v69;
          uint64_t v67 = v72;
        }
        while (*(void *)(v60 + 8 * v72) >= v70);
      }
      while (v68 < v69);
      uint64_t v73 = v68 - 1;
      if (v68 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *uint64_t v73 = v28;
      if (v63 < v64) {
        goto LABEL_78;
      }
      BOOL v74 = sub_1C494C8B8(v12, v73, *a3);
      uint64_t v12 = v73 + 1;
      unint64_t result = sub_1C494C8B8(v73 + 1, a2, *a3);
      if (result)
      {
        a2 = v73;
        if (v74) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v74)
      {
LABEL_78:
        unint64_t result = sub_1C494BBB0(v11, v73, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v73 + 1;
      }
    }
  }
  uint64_t v104 = *a3;
  if (a5)
  {
    if (v12 == a2) {
      return result;
    }
    uint64_t v105 = v12 + 1;
    if (v12 + 1 == a2) {
      return result;
    }
    uint64_t v106 = *v104;
    uint64_t v107 = 8;
    uint64_t v108 = v12;
    while (1)
    {
      uint64_t v111 = *v108;
      uint64_t v110 = v108[1];
      uint64_t v108 = v105;
      if (*(void *)(v106 + 8 * v110) < *(void *)(v106 + 8 * v111))
      {
        uint64_t v112 = v107;
        do
        {
          *(uint64_t *)((char *)v12 + v112) = v111;
          uint64_t v113 = v112 - 8;
          if (v112 == 8)
          {
            uint64_t v109 = v12;
            goto LABEL_118;
          }
          uint64_t v111 = *(uint64_t *)((char *)v12 + v112 - 16);
          v112 -= 8;
        }
        while (*(void *)(v106 + 8 * v110) < *(void *)(v106 + 8 * v111));
        uint64_t v109 = (uint64_t *)((char *)v12 + v113);
LABEL_118:
        *uint64_t v109 = v110;
      }
      uint64_t v105 = v108 + 1;
      v107 += 8;
      if (v108 + 1 == a2) {
        return result;
      }
    }
  }
  if (v12 != a2)
  {
    uint64_t v147 = v12 + 1;
    if (v12 + 1 != a2)
    {
      uint64_t v148 = *v104;
      do
      {
        uint64_t v150 = *v11;
        uint64_t v149 = v11[1];
        uint64_t v11 = v147;
        if (*(void *)(v148 + 8 * v149) < *(void *)(v148 + 8 * v150))
        {
          do
          {
            uint64_t *v147 = v150;
            uint64_t v150 = *(v147 - 2);
            --v147;
          }
          while (*(void *)(v148 + 8 * v149) < *(void *)(v148 + 8 * v150));
          uint64_t *v147 = v149;
        }
        uint64_t v147 = v11 + 1;
      }
      while (v11 + 1 != a2);
    }
  }
  return result;
}

uint64_t *sub_1C494C718(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *result;
  uint64_t v8 = *(void *)(a6 + 8 * *a2);
  uint64_t v9 = *a3;
  uint64_t v10 = *(void *)(a6 + 8 * *a3);
  if (v8 >= *(void *)(a6 + 8 * *result))
  {
    if (v10 >= v8)
    {
      uint64_t v6 = *a3;
      uint64_t v12 = *a4;
      if (*(void *)(a6 + 8 * *a4) >= *(void *)(a6 + 8 * *a3)) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v6;
    uint64_t v11 = *result;
    if (*(void *)(a6 + 8 * *a2) < *(void *)(a6 + 8 * *result))
    {
      *unint64_t result = *a2;
      *a2 = v11;
      uint64_t v6 = *a3;
      uint64_t v12 = *a4;
      if (*(void *)(a6 + 8 * *a4) >= *(void *)(a6 + 8 * *a3)) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v10 >= v8)
    {
      *unint64_t result = v6;
      *a2 = v7;
      uint64_t v6 = *a3;
      if (*(void *)(a6 + 8 * *a3) >= *(void *)(a6 + 8 * v7)) {
        goto LABEL_11;
      }
      *a2 = v6;
    }
    else
    {
      *unint64_t result = v9;
    }
    *a3 = v7;
    uint64_t v6 = v7;
  }
LABEL_11:
  uint64_t v12 = *a4;
  if (*(void *)(a6 + 8 * *a4) >= *(void *)(a6 + 8 * v6)) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v12;
  *a4 = v6;
  uint64_t v13 = *a2;
  if (*(void *)(a6 + 8 * *a3) < *(void *)(a6 + 8 * *a2))
  {
    *a2 = *a3;
    *a3 = v13;
    uint64_t v14 = *result;
    if (*(void *)(a6 + 8 * *a2) < *(void *)(a6 + 8 * *result))
    {
      *unint64_t result = *a2;
      *a2 = v14;
    }
  }
LABEL_17:
  uint64_t v15 = *a4;
  if (*(void *)(a6 + 8 * *a5) < *(void *)(a6 + 8 * *a4))
  {
    *a4 = *a5;
    *a5 = v15;
    uint64_t v16 = *a3;
    if (*(void *)(a6 + 8 * *a4) < *(void *)(a6 + 8 * *a3))
    {
      *a3 = *a4;
      *a4 = v16;
      uint64_t v17 = *a2;
      if (*(void *)(a6 + 8 * *a3) < *(void *)(a6 + 8 * *a2))
      {
        *a2 = *a3;
        *a3 = v17;
        uint64_t v18 = *result;
        if (*(void *)(a6 + 8 * *a2) < *(void *)(a6 + 8 * *result))
        {
          *unint64_t result = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C494C8B8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      uint64_t v15 = *(a2 - 1);
      uint64_t v16 = *a1;
      if (*(void *)(*a3 + 8 * v15) >= *(void *)(*a3 + 8 * *a1)) {
        return 1;
      }
      *a1 = v15;
      *(a2 - 1) = v16;
      return 1;
    case 3:
      uint64_t v17 = *a3;
      uint64_t v18 = *a1;
      uint64_t v19 = a1[1];
      uint64_t v20 = *(void *)(*a3 + 8 * v19);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = *(void *)(*a3 + 8 * v21);
      if (v20 >= *(void *)(*a3 + 8 * *a1))
      {
        if (v22 >= v20) {
          return 1;
        }
        a1[1] = v21;
        *(a2 - 1) = v19;
        uint64_t v42 = *a1;
        uint64_t v41 = a1[1];
        if (*(void *)(v17 + 8 * v41) >= *(void *)(v17 + 8 * *a1)) {
          return 1;
        }
        *a1 = v41;
        a1[1] = v42;
        return 1;
      }
      else if (v22 >= v20)
      {
        *a1 = v19;
        a1[1] = v18;
        uint64_t v47 = *(a2 - 1);
        if (*(void *)(v17 + 8 * v47) >= *(void *)(v17 + 8 * v18)) {
          return 1;
        }
        a1[1] = v47;
        *(a2 - 1) = v18;
        return 1;
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v18;
        return 1;
      }
    case 4:
      uint64_t v23 = a1 + 1;
      uint64_t v24 = a1[1];
      uint64_t v25 = a1 + 2;
      uint64_t v26 = a1[2];
      uint64_t v27 = *a3;
      uint64_t v28 = *(void *)(*a3 + 8 * v24);
      uint64_t v29 = *a1;
      uint64_t v30 = *(void *)(*a3 + 8 * v26);
      if (v28 < *(void *)(*a3 + 8 * *a1))
      {
        BOOL v31 = a1;
        uint64_t v32 = a1 + 2;
        uint64_t v33 = *a1;
        if (v30 >= v28)
        {
          *a1 = v24;
          a1[1] = v29;
          BOOL v31 = a1 + 1;
          uint64_t v32 = a1 + 2;
          uint64_t v33 = v29;
          if (*(void *)(v27 + 8 * v26) >= *(void *)(v27 + 8 * v29)) {
            goto LABEL_38;
          }
        }
LABEL_35:
        uint64_t *v31 = v26;
        *uint64_t v32 = v29;
        uint64_t v24 = v33;
LABEL_36:
        uint64_t v43 = *(a2 - 1);
        if (*(void *)(v27 + 8 * v43) >= *(void *)(v27 + 8 * v24)) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v30 < v28)
      {
        uint64_t *v23 = v26;
        *uint64_t v25 = v24;
        BOOL v31 = a1;
        uint64_t v32 = a1 + 1;
        uint64_t v33 = v24;
        if (*(void *)(v27 + 8 * v26) >= *(void *)(v27 + 8 * v29)) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      uint64_t v24 = v26;
      uint64_t v43 = *(a2 - 1);
      if (*(void *)(v27 + 8 * v43) >= *(void *)(v27 + 8 * v24)) {
        return 1;
      }
LABEL_39:
      *uint64_t v25 = v43;
      *(a2 - 1) = v24;
      uint64_t v44 = *v25;
      uint64_t v45 = *v23;
      if (*(void *)(v27 + 8 * v44) >= *(void *)(v27 + 8 * v45)) {
        return 1;
      }
      a1[1] = v44;
      a1[2] = v45;
      uint64_t v46 = *a1;
      if (*(void *)(v27 + 8 * v44) >= *(void *)(v27 + 8 * *a1)) {
        return 1;
      }
      *a1 = v44;
      a1[1] = v46;
      return 1;
    case 5:
      sub_1C494C718(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      BOOL v5 = a1 + 2;
      uint64_t v4 = a1[2];
      uint64_t v6 = a1[1];
      uint64_t v7 = *a3;
      uint64_t v8 = *(void *)(*a3 + 8 * v6);
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)(*a3 + 8 * v4);
      if (v8 >= *(void *)(*a3 + 8 * *a1))
      {
        if (v10 >= v8) {
          goto LABEL_20;
        }
        a1[1] = v4;
        *BOOL v5 = v6;
        uint64_t v13 = *(void *)(v7 + 8 * v4);
        uint64_t v14 = *(void *)(v7 + 8 * v9);
        uint64_t v11 = a1;
        uint64_t v12 = a1 + 1;
      }
      else
      {
        uint64_t v11 = a1;
        uint64_t v12 = a1 + 2;
        if (v10 < v8) {
          goto LABEL_19;
        }
        *a1 = v6;
        a1[1] = v9;
        uint64_t v13 = *(void *)(v7 + 8 * v4);
        uint64_t v14 = *(void *)(v7 + 8 * v9);
        uint64_t v11 = a1 + 1;
        uint64_t v12 = a1 + 2;
      }
      if (v13 >= v14) {
        goto LABEL_20;
      }
LABEL_19:
      *uint64_t v11 = v4;
      *uint64_t v12 = v9;
LABEL_20:
      uint64_t v34 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v35 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v37 = *v34;
        uint64_t v38 = *v5;
        if (*(void *)(v7 + 8 * *v34) < *(void *)(v7 + 8 * v38)) {
          break;
        }
LABEL_23:
        BOOL v5 = v34++;
        if (v34 == a2) {
          return 1;
        }
      }
      uint64_t v39 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v39) = v38;
        uint64_t v40 = v39 - 8;
        if (v39 == 8)
        {
          *a1 = v37;
          if (++v35 != 8) {
            goto LABEL_23;
          }
          return v34 + 1 == a2;
        }
        uint64_t v38 = *(uint64_t *)((char *)a1 + v39 - 16);
        v39 -= 8;
      }
      while (*(void *)(v7 + 8 * v37) < *(void *)(v7 + 8 * v38));
      *(uint64_t *)((char *)a1 + v40) = v37;
      if (++v35 != 8) {
        goto LABEL_23;
      }
      return v34 + 1 == a2;
  }
}

__n128 sub_1C494CC84(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
LABEL_1:
  uint64_t v11 = a2 - 1;
  uint64_t v12 = a2 - 2;
  uint64_t v13 = a2 - 3;
  uint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = (char *)a2 - (char *)v14;
    uint64_t v16 = a2 - v14;
    if (v6 || !v5)
    {
      switch(v16)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unint64_t v65 = a2[-1].n128_u64[0];
          uint64_t v64 = a2 - 1;
          if (v65 >= v14->n128_u64[0]) {
            return result;
          }
          goto LABEL_102;
        case 3:
          uint64_t v66 = v14 + 1;
          unint64_t v67 = v14[1].n128_u64[0];
          unint64_t v69 = a2[-1].n128_u64[0];
          uint64_t v64 = a2 - 1;
          unint64_t v68 = v69;
          if (v67 < v14->n128_u64[0])
          {
            if (v68 >= v67)
            {
              __n128 v141 = *v14;
              __n128 *v14 = *v66;
              unint64_t result = v141;
              *uint64_t v66 = v141;
              if (v64->n128_u64[0] >= v14[1].n128_u64[0]) {
                return result;
              }
              unint64_t result = *v66;
              *uint64_t v66 = *v64;
            }
            else
            {
LABEL_102:
              __n128 v137 = *v14;
              __n128 *v14 = *v64;
              unint64_t result = v137;
            }
            __n128 *v64 = result;
            return result;
          }
          if (v68 < v67)
          {
            unint64_t result = *v66;
            *uint64_t v66 = *v64;
            __n128 *v64 = result;
            if (v14[1].n128_u64[0] < v14->n128_u64[0])
            {
              __n128 v140 = *v14;
              __n128 *v14 = *v66;
              unint64_t result = v140;
              *uint64_t v66 = v140;
            }
          }
          break;
        case 4:
          result.n128_u64[0] = sub_1C494DB50(v14, v14 + 1, v14[2].n128_u64, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
          return result;
        case 5:
          uint64_t v70 = v14 + 1;
          uint64_t v71 = v14 + 2;
          uint64_t v72 = v14 + 3;
          result.n128_u64[0] = sub_1C494DB50(v14, v14 + 1, v14[2].n128_u64, (__n128 *)v14[3].n128_u64, result).n128_u64[0];
          unint64_t v74 = a2[-1].n128_u64[0];
          uint64_t v73 = a2 - 1;
          if (v74 < v14[3].n128_u64[0])
          {
            unint64_t result = *v72;
            *uint64_t v72 = *v73;
            *uint64_t v73 = result;
            if (v72->n128_u64[0] < v71->n128_u64[0])
            {
              unint64_t result = *v71;
              *uint64_t v71 = *v72;
              *uint64_t v72 = result;
              if (v71->n128_u64[0] < v70->n128_u64[0])
              {
                unint64_t result = *v70;
                __n128 *v70 = *v71;
                *uint64_t v71 = result;
                if (v14[1].n128_u64[0] < v14->n128_u64[0])
                {
                  __n128 v138 = *v14;
                  __n128 *v14 = *v70;
                  unint64_t result = v138;
                  __n128 *v70 = v138;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v14 == a2) {
        return result;
      }
      int64_t v86 = (unint64_t)(v16 - 2) >> 1;
      int64_t v87 = v86;
      while (1)
      {
        if (v86 >= v87)
        {
          uint64_t v89 = (2 * v87) | 1;
          uint64_t v90 = &v14[v89];
          if (2 * v87 + 2 >= v16)
          {
            uint64_t v93 = &v14[v87];
            unint64_t v94 = v93->n128_u64[0];
            if (v90->n128_u64[0] >= v93->n128_u64[0]) {
              goto LABEL_143;
            }
          }
          else
          {
            unint64_t v91 = v90[1].n128_u64[0];
            BOOL v92 = v90->n128_u64[0] >= v91;
            if (v90->n128_u64[0] > v91) {
              unint64_t v91 = v90->n128_u64[0];
            }
            if (!v92)
            {
              ++v90;
              uint64_t v89 = 2 * v87 + 2;
            }
            uint64_t v93 = &v14[v87];
            unint64_t v94 = v93->n128_u64[0];
            if (v91 >= v93->n128_u64[0])
            {
LABEL_143:
              uint64_t v95 = v93->n128_i64[1];
              while (1)
              {
                uint64_t v99 = v93;
                uint64_t v93 = v90;
                __n128 *v99 = *v90;
                if (v86 < v89) {
                  break;
                }
                uint64_t v100 = (2 * v89) | 1;
                uint64_t v90 = &v14[v100];
                uint64_t v89 = 2 * v89 + 2;
                if (v89 < v16)
                {
                  unint64_t v96 = v90->n128_u64[0];
                  unint64_t v97 = v90[1].n128_u64[0];
                  BOOL v98 = v90->n128_u64[0] >= v97;
                  if (v90->n128_u64[0] <= v97) {
                    unint64_t v96 = v90[1].n128_u64[0];
                  }
                  if (v90->n128_u64[0] < v97) {
                    ++v90;
                  }
                  if (v98) {
                    uint64_t v89 = v100;
                  }
                  if (v96 < v94) {
                    break;
                  }
                }
                else
                {
                  uint64_t v89 = v100;
                  if (v90->n128_u64[0] < v94) {
                    break;
                  }
                }
              }
              v93->n128_u64[0] = v94;
              v93->n128_u64[1] = v95;
            }
          }
        }
        BOOL v88 = v87-- <= 0;
        if (v88)
        {
          uint64_t v101 = (unint64_t)v15 >> 4;
          do
          {
            uint64_t v102 = 0;
            __n128 v139 = *v14;
            uint64_t v103 = v14;
            do
            {
              uint64_t v104 = &v103[v102 + 1];
              uint64_t v105 = (2 * v102) | 1;
              uint64_t v106 = 2 * v102 + 2;
              if (v106 < v101 && v104->n128_u64[0] < v104[1].n128_u64[0])
              {
                ++v104;
                uint64_t v105 = v106;
              }
              __n128 *v103 = *v104;
              uint64_t v103 = v104;
              uint64_t v102 = v105;
            }
            while (v105 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
            if (v104 == --a2)
            {
              unint64_t result = v139;
              *uint64_t v104 = v139;
            }
            else
            {
              *uint64_t v104 = *a2;
              unint64_t result = v139;
              *a2 = v139;
              uint64_t v107 = (char *)v104 - (char *)v14 + 16;
              if (v107 >= 17)
              {
                unint64_t v108 = (((unint64_t)v107 >> 4) - 2) >> 1;
                uint64_t v109 = &v14[v108];
                unint64_t v110 = v104->n128_u64[0];
                if (v109->n128_u64[0] < v104->n128_u64[0])
                {
                  unint64_t v111 = v104->n128_u64[1];
                  do
                  {
                    uint64_t v112 = v104;
                    uint64_t v104 = v109;
                    unint64_t result = *v109;
                    *uint64_t v112 = *v109;
                    if (!v108) {
                      break;
                    }
                    unint64_t v108 = (v108 - 1) >> 1;
                    uint64_t v109 = &v14[v108];
                  }
                  while (v109->n128_u64[0] < v110);
                  v104->n128_u64[0] = v110;
                  v104->n128_u64[1] = v111;
                }
              }
            }
            BOOL v88 = v101-- <= 2;
          }
          while (!v88);
          return result;
        }
      }
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    uint64_t v18 = &v14[(unint64_t)v16 >> 1];
    unint64_t v19 = v11->n128_u64[0];
    if ((unint64_t)v15 < 0x801)
    {
      unint64_t v21 = v14->n128_u64[0];
      if (v14->n128_u64[0] < v18->n128_u64[0])
      {
        if (v19 >= v21)
        {
          __n128 v126 = *v18;
          __n128 *v18 = *v14;
          unint64_t result = v126;
          __n128 *v14 = v126;
          if (v11->n128_u64[0] >= v14->n128_u64[0]) {
            goto LABEL_32;
          }
          __n128 v119 = *v14;
          __n128 *v14 = *v11;
        }
        else
        {
          __n128 v119 = *v18;
          __n128 *v18 = *v11;
        }
        unint64_t result = v119;
        *uint64_t v11 = v119;
LABEL_32:
        --a3;
        unint64_t v22 = v14->n128_u64[0];
        if (a4) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v19 >= v21) {
        goto LABEL_32;
      }
      __n128 v122 = *v14;
      __n128 *v14 = *v11;
      unint64_t result = v122;
      *uint64_t v11 = v122;
      if (v14->n128_u64[0] >= v18->n128_u64[0]) {
        goto LABEL_32;
      }
      __n128 v123 = *v18;
      __n128 *v18 = *v14;
      unint64_t result = v123;
      __n128 *v14 = v123;
      --a3;
      unint64_t v22 = v14->n128_u64[0];
      if (a4) {
        goto LABEL_57;
      }
LABEL_56:
      if (v14[-1].n128_u64[0] < v22) {
        goto LABEL_57;
      }
      if (v22 < v11->n128_u64[0])
      {
        do
        {
          unint64_t v56 = v14[1].n128_u64[0];
          ++v14;
        }
        while (v22 >= v56);
      }
      else
      {
        unint64_t n128_u64 = (unint64_t)v14[1].n128_u64;
        do
        {
          uint64_t v14 = (__n128 *)n128_u64;
          if (n128_u64 >= (unint64_t)a2) {
            break;
          }
          n128_u64 += 16;
        }
        while (v22 >= v14->n128_u64[0]);
      }
      uint64_t v58 = a2;
      if (v14 < a2)
      {
        uint64_t v58 = a2;
        do
        {
          unint64_t v59 = v58[-1].n128_u64[0];
          --v58;
        }
        while (v22 < v59);
      }
      unint64_t v60 = a1->n128_u64[1];
      while (v14 < v58)
      {
        __n128 v136 = *v14;
        __n128 *v14 = *v58;
        unint64_t result = v136;
        *uint64_t v58 = v136;
        do
        {
          unint64_t v61 = v14[1].n128_u64[0];
          ++v14;
        }
        while (v22 >= v61);
        do
        {
          unint64_t v62 = v58[-1].n128_u64[0];
          --v58;
        }
        while (v22 < v62);
      }
      uint64_t v63 = v14 - 1;
      BOOL v5 = &v14[-1] >= a1;
      BOOL v6 = &v14[-1] == a1;
      if (&v14[-1] != a1)
      {
        unint64_t result = *v63;
        *a1 = *v63;
      }
      a4 = 0;
      v14[-1].n128_u64[0] = v22;
      v14[-1].n128_u64[1] = v60;
    }
    else
    {
      unint64_t v20 = v18->n128_u64[0];
      if (v18->n128_u64[0] >= v14->n128_u64[0])
      {
        if (v19 < v20)
        {
          __n128 v120 = *v18;
          __n128 *v18 = *v11;
          *uint64_t v11 = v120;
          if (v18->n128_u64[0] < v14->n128_u64[0])
          {
            __n128 v121 = *v14;
            __n128 *v14 = *v18;
            __n128 *v18 = v121;
          }
        }
      }
      else
      {
        if (v19 >= v20)
        {
          __n128 v124 = *v14;
          __n128 *v14 = *v18;
          __n128 *v18 = v124;
          if (v11->n128_u64[0] >= v18->n128_u64[0]) {
            goto LABEL_23;
          }
          __n128 v118 = *v18;
          __n128 *v18 = *v11;
        }
        else
        {
          __n128 v118 = *v14;
          __n128 *v14 = *v11;
        }
        *uint64_t v11 = v118;
      }
LABEL_23:
      uint64_t v23 = v14 + 1;
      uint64_t v24 = &v14[v17];
      unint64_t v27 = v24[-1].n128_u64[0];
      uint64_t v25 = v24 - 1;
      unint64_t v26 = v27;
      unint64_t v28 = v12->n128_u64[0];
      if (v27 >= v14[1].n128_u64[0])
      {
        if (v28 < v26)
        {
          __n128 v125 = *v25;
          *uint64_t v25 = *v12;
          *uint64_t v12 = v125;
          if (v25->n128_u64[0] < v23->n128_u64[0])
          {
            __n128 v30 = *v23;
            __n128 *v23 = *v25;
            *uint64_t v25 = v30;
          }
        }
      }
      else
      {
        if (v28 >= v26)
        {
          __n128 v31 = *v23;
          __n128 *v23 = *v25;
          *uint64_t v25 = v31;
          if (v12->n128_u64[0] >= v25->n128_u64[0]) {
            goto LABEL_37;
          }
          __n128 v127 = *v25;
          *uint64_t v25 = *v12;
          __n128 v29 = v127;
        }
        else
        {
          __n128 v29 = *v23;
          __n128 *v23 = *v12;
        }
        *uint64_t v12 = v29;
      }
LABEL_37:
      uint64_t v32 = v14 + 2;
      uint64_t v33 = &v14[v17];
      unint64_t v36 = v33[1].n128_u64[0];
      uint64_t v34 = v33 + 1;
      unint64_t v35 = v36;
      unint64_t v37 = v13->n128_u64[0];
      if (v36 >= v14[2].n128_u64[0])
      {
        if (v37 < v35)
        {
          __n128 v128 = *v34;
          *uint64_t v34 = *v13;
          __n128 *v13 = v128;
          if (v34->n128_u64[0] < v32->n128_u64[0])
          {
            __n128 v39 = *v32;
            *uint64_t v32 = *v34;
            *uint64_t v34 = v39;
          }
        }
      }
      else
      {
        if (v37 >= v35)
        {
          __n128 v40 = *v32;
          *uint64_t v32 = *v34;
          *uint64_t v34 = v40;
          if (v13->n128_u64[0] >= v34->n128_u64[0]) {
            goto LABEL_46;
          }
          __n128 v129 = *v34;
          *uint64_t v34 = *v13;
          __n128 v38 = v129;
        }
        else
        {
          __n128 v38 = *v32;
          *uint64_t v32 = *v13;
        }
        __n128 *v13 = v38;
      }
LABEL_46:
      unint64_t v41 = v18->n128_u64[0];
      unint64_t v42 = v34->n128_u64[0];
      if (v18->n128_u64[0] >= v25->n128_u64[0])
      {
        if (v42 < v41)
        {
          __n128 v131 = *v18;
          __n128 *v18 = *v34;
          *uint64_t v34 = v131;
          if (v18->n128_u64[0] < v25->n128_u64[0])
          {
            __n128 v132 = *v25;
            *uint64_t v25 = *v18;
            __n128 *v18 = v132;
          }
        }
      }
      else
      {
        if (v42 >= v41)
        {
          __n128 v133 = *v25;
          *uint64_t v25 = *v18;
          __n128 *v18 = v133;
          if (v34->n128_u64[0] >= v18->n128_u64[0]) {
            goto LABEL_55;
          }
          __n128 v130 = *v18;
          __n128 *v18 = *v34;
        }
        else
        {
          __n128 v130 = *v25;
          *uint64_t v25 = *v34;
        }
        *uint64_t v34 = v130;
      }
LABEL_55:
      __n128 v134 = *v14;
      __n128 *v14 = *v18;
      unint64_t result = v134;
      __n128 *v18 = v134;
      --a3;
      unint64_t v22 = v14->n128_u64[0];
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v43 = 0;
      unint64_t v44 = v14->n128_u64[1];
      do
        unint64_t v45 = v14[++v43].n128_u64[0];
      while (v45 < v22);
      uint64_t v46 = &v14[v43];
      uint64_t v47 = a2;
      if (v43 == 1)
      {
        uint64_t v47 = a2;
        do
        {
          if (v46 >= v47) {
            break;
          }
          unint64_t v49 = v47[-1].n128_u64[0];
          --v47;
        }
        while (v49 >= v22);
      }
      else
      {
        do
        {
          unint64_t v48 = v47[-1].n128_u64[0];
          --v47;
        }
        while (v48 >= v22);
      }
      uint64_t v14 = (__n128 *)((char *)v14 + v43 * 16);
      if (v46 < v47)
      {
        uint64_t v50 = v47;
        do
        {
          __n128 v135 = *v14;
          __n128 *v14 = *v50;
          unint64_t result = v135;
          *uint64_t v50 = v135;
          do
          {
            unint64_t v51 = v14[1].n128_u64[0];
            ++v14;
          }
          while (v51 < v22);
          do
          {
            unint64_t v52 = v50[-1].n128_u64[0];
            --v50;
          }
          while (v52 >= v22);
        }
        while (v14 < v50);
      }
      uint64_t v53 = v14 - 1;
      if (&v14[-1] != a1)
      {
        unint64_t result = *v53;
        *a1 = *v53;
      }
      v14[-1].n128_u64[0] = v22;
      v14[-1].n128_u64[1] = v44;
      if (v46 < v47)
      {
LABEL_76:
        sub_1C494CC84(a1, &v14[-1], a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v54 = sub_1C494D7C4(a1, v14 - 1, result);
        if (sub_1C494D7C4(v14, a2, v55))
        {
          a2 = v14 - 1;
          if (v54) {
            return result;
          }
          goto LABEL_1;
        }
        if (!v54) {
          goto LABEL_76;
        }
      }
    }
  }
  uint64_t v75 = v14 + 1;
  BOOL v77 = v14 == a2 || v75 == a2;
  if (a4)
  {
    if (v77) {
      return result;
    }
    uint64_t v78 = 0;
    uint64_t v79 = v14;
    while (1)
    {
      uint64_t v81 = v75;
      unint64_t v82 = v79[1].n128_u64[0];
      if (v82 < v79->n128_u64[0])
      {
        uint64_t v83 = v79[1].n128_i64[1];
        uint64_t v84 = v78;
        do
        {
          unint64_t result = *(__n128 *)((char *)v14 + v84);
          *(__n128 *)((char *)v14 + v84 + 16) = result;
          if (!v84)
          {
            uint64_t v80 = v14;
            goto LABEL_122;
          }
          unint64_t v85 = *(unint64_t *)((char *)v14[-1].n128_u64 + v84);
          v84 -= 16;
        }
        while (v82 < v85);
        uint64_t v80 = (__n128 *)((char *)v14 + v84 + 16);
LABEL_122:
        v80->n128_u64[0] = v82;
        v80->n128_u64[1] = v83;
      }
      uint64_t v75 = v81 + 1;
      v78 += 16;
      uint64_t v79 = v81;
      if (&v81[1] == a2) {
        return result;
      }
    }
  }
  if (!v77)
  {
    do
    {
      uint64_t v113 = v75;
      unint64_t v114 = a1[1].n128_u64[0];
      if (v114 < a1->n128_u64[0])
      {
        unint64_t v115 = a1[1].n128_u64[1];
        int64_t v116 = v113;
        do
        {
          unint64_t result = v116[-1];
          *int64_t v116 = result;
          unint64_t v117 = v116[-2].n128_u64[0];
          --v116;
        }
        while (v114 < v117);
        v116->n128_u64[0] = v114;
        v116->n128_u64[1] = v115;
      }
      uint64_t v75 = v113 + 1;
      a1 = v113;
    }
    while (&v113[1] != a2);
  }
  return result;
}

  uint64_t v11 = (char *)a2 - 40;
  double v257 = (long long *)((char *)a2 - 120);
  double v258 = a2 - 5;
  uint64_t v12 = a1;
  while (1)
  {
    a1 = v12;
    uint64_t v13 = (uint64_t)a2 - v12;
    uint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v13 <= 959)
    {
      uint64_t v220 = (long long *)(v12 + 40);
      uint64_t v222 = (long long *)v12 == a2 || v220 == a2;
      if (a5)
      {
        if (!v222)
        {
          uint64_t v223 = 0;
          uint64_t v224 = v12;
          do
          {
            uint64_t v228 = (char *)v224;
            uint64_t v224 = (unint64_t)v220;
            if ((*a3)((uint64_t)v220, v228))
            {
              uint64_t v229 = *(_OWORD *)v224;
              uint64_t v230 = *(_OWORD *)(v224 + 16);
              *(void *)&v263[16] = *(void *)(v224 + 32);
              unint64_t v262 = v229;
              *(_OWORD *)uint64_t v263 = v230;
              uint64_t v231 = v223;
              do
              {
                uint64_t v232 = v12 + v231;
                uint64_t v233 = *(_OWORD *)(v12 + v231 + 16);
                *(_OWORD *)(v232 + 40) = *(_OWORD *)(v12 + v231);
                *(_OWORD *)(v232 + 56) = v233;
                *(void *)(v232 + 69) = *(void *)(v12 + v231 + 29);
                if (!v231)
                {
                  uint64_t v225 = v12;
                  goto LABEL_122;
                }
                v231 -= 40;
              }
              while ((((uint64_t (*)(long long *, unint64_t))*a3)(&v262, v231 + v12) & 1) != 0);
              uint64_t v225 = v12 + v231 + 40;
LABEL_122:
              uint64_t v226 = v262;
              id v227 = *(_OWORD *)v263;
              *(void *)(v225 + 29) = *(void *)&v263[13];
              *(_OWORD *)uint64_t v225 = v226;
              *(_OWORD *)(v225 + 16) = v227;
            }
            uint64_t v220 = (long long *)(v224 + 40);
            v223 += 40;
          }
          while ((long long *)(v224 + 40) != a2);
        }
      }
      else if (!v222)
      {
        uint64_t v242 = v12 - 40;
        do
        {
          uint64_t v243 = (char *)a1;
          a1 = (unint64_t)v220;
          if ((*a3)((uint64_t)v220, v243))
          {
            uint64_t v244 = *(_OWORD *)a1;
            CGFloat v245 = *(_OWORD *)(a1 + 16);
            *(void *)&v263[16] = *(void *)(a1 + 32);
            unint64_t v262 = v244;
            *(_OWORD *)uint64_t v263 = v245;
            uint64_t v246 = v242;
            do
            {
              uint64_t v247 = *(_OWORD *)(v246 + 56);
              *(_OWORD *)(v246 + 80) = *(_OWORD *)(v246 + 40);
              *(_OWORD *)(v246 + 96) = v247;
              *(void *)(v246 + 109) = *(void *)(v246 + 69);
              uint64_t v248 = (*a3)((uint64_t)&v262, (char *)v246);
              v246 -= 40;
            }
            while ((v248 & 1) != 0);
            uint64_t v249 = v262;
            uint64_t v250 = *(_OWORD *)v263;
            *(void *)(v246 + 109) = *(void *)&v263[13];
            *(_OWORD *)(v246 + 80) = v249;
            *(_OWORD *)(v246 + 96) = v250;
          }
          uint64_t v220 = (long long *)(a1 + 40);
          v242 += 40;
        }
        while ((long long *)(a1 + 40) != a2);
      }
      return;
    }
    if (!a4)
    {
      if ((long long *)v12 != a2) {
        sub_1C4957878(v12, a2, a2, a3);
      }
      return;
    }
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = v12 + 40 * (v14 >> 1);
    unint64_t v17 = *a3;
    if ((unint64_t)v13 >= 0x1401)
    {
      uint64_t v18 = v17(v12 + 40 * (v14 >> 1), (char *)v12);
      unint64_t v19 = (*a3)((uint64_t)a2 - 40, (char *)v16);
      if (v18)
      {
        if (v19)
        {
          unint64_t v20 = *(_OWORD *)v12;
          unint64_t v21 = *(_OWORD *)(v12 + 16);
          *(void *)&v263[16] = *(void *)(v12 + 32);
          unint64_t v262 = v20;
          *(_OWORD *)uint64_t v263 = v21;
          unint64_t v22 = *(_OWORD *)v11;
          uint64_t v23 = *(long long *)((char *)a2 - 24);
          *(void *)(v12 + 29) = *(void *)((char *)a2 - 11);
          *(_OWORD *)uint64_t v12 = v22;
          *(_OWORD *)(v12 + 16) = v23;
        }
        else
        {
          BOOL v54 = *(_OWORD *)v12;
          __n128 v55 = *(_OWORD *)(v12 + 16);
          *(void *)&v263[16] = *(void *)(v12 + 32);
          unint64_t v262 = v54;
          *(_OWORD *)uint64_t v263 = v55;
          unint64_t v56 = *(_OWORD *)v16;
          uint64_t v57 = *(_OWORD *)(v16 + 16);
          *(void *)(v12 + 29) = *(void *)(v16 + 29);
          *(_OWORD *)uint64_t v12 = v56;
          *(_OWORD *)(v12 + 16) = v57;
          uint64_t v58 = v262;
          unint64_t v59 = *(_OWORD *)v263;
          *(void *)(v16 + 29) = *(void *)&v263[13];
          *(_OWORD *)uint64_t v16 = v58;
          *(_OWORD *)(v16 + 16) = v59;
          if (!(*a3)((uint64_t)a2 - 40, (char *)v16)) {
            goto LABEL_24;
          }
          unint64_t v60 = *(_OWORD *)v16;
          unint64_t v61 = *(_OWORD *)(v16 + 16);
          *(void *)&v263[16] = *(void *)(v16 + 32);
          unint64_t v262 = v60;
          *(_OWORD *)uint64_t v263 = v61;
          unint64_t v62 = *(_OWORD *)v11;
          uint64_t v63 = *(long long *)((char *)a2 - 24);
          *(void *)(v16 + 29) = *(void *)((char *)a2 - 11);
          *(_OWORD *)uint64_t v16 = v62;
          *(_OWORD *)(v16 + 16) = v63;
        }
        uint64_t v64 = v262;
        unint64_t v65 = *(_OWORD *)v263;
        *(void *)((char *)a2 - 11) = *(void *)&v263[13];
        *(_OWORD *)uint64_t v11 = v64;
        *(long long *)((char *)a2 - 24) = v65;
      }
      else if (v19)
      {
        __n128 v30 = *(_OWORD *)v16;
        __n128 v31 = *(_OWORD *)(v16 + 16);
        *(void *)&v263[16] = *(void *)(v16 + 32);
        unint64_t v262 = v30;
        *(_OWORD *)uint64_t v263 = v31;
        uint64_t v32 = *(_OWORD *)v11;
        uint64_t v33 = *(long long *)((char *)a2 - 24);
        *(void *)(v16 + 29) = *(void *)((char *)a2 - 11);
        *(_OWORD *)uint64_t v16 = v32;
        *(_OWORD *)(v16 + 16) = v33;
        uint64_t v34 = v262;
        unint64_t v35 = *(_OWORD *)v263;
        *(void *)((char *)a2 - 11) = *(void *)&v263[13];
        *(_OWORD *)uint64_t v11 = v34;
        *(long long *)((char *)a2 - 24) = v35;
        if ((*a3)(v16, (char *)v12))
        {
          unint64_t v36 = *(_OWORD *)v12;
          unint64_t v37 = *(_OWORD *)(v12 + 16);
          *(void *)&v263[16] = *(void *)(v12 + 32);
          unint64_t v262 = v36;
          *(_OWORD *)uint64_t v263 = v37;
          __n128 v38 = *(_OWORD *)v16;
          __n128 v39 = *(_OWORD *)(v16 + 16);
          *(void *)(v12 + 29) = *(void *)(v16 + 29);
          *(_OWORD *)uint64_t v12 = v38;
          *(_OWORD *)(v12 + 16) = v39;
          __n128 v40 = v262;
          unint64_t v41 = *(_OWORD *)v263;
          *(void *)(v16 + 29) = *(void *)&v263[13];
          *(_OWORD *)uint64_t v16 = v40;
          *(_OWORD *)(v16 + 16) = v41;
        }
      }
LABEL_24:
      uint64_t v66 = (long long *)(v12 + 40);
      unint64_t v67 = a1 + 40 * v15 - 40;
      unint64_t v68 = (*a3)(v67, (char *)(a1 + 40));
      unint64_t v69 = (*a3)((uint64_t)v258, (char *)v67);
      if (v68)
      {
        if (v69)
        {
          *(void *)&v263[16] = *(void *)(a1 + 72);
          uint64_t v70 = *v66;
          uint64_t v71 = *(_OWORD *)(a1 + 56);
          unint64_t v262 = *v66;
          *(_OWORD *)uint64_t v263 = v71;
          uint64_t v72 = a2 - 5;
          unint64_t v74 = *v258;
          uint64_t v73 = *(a2 - 4);
          *(void *)(a1 + 69) = *(void *)((char *)a2 - 51);
          *uint64_t v66 = v74;
          *(_OWORD *)(a1 + 56) = v73;
        }
        else
        {
          *(void *)&v263[16] = *(void *)(a1 + 72);
          BOOL v98 = *(_OWORD *)(a1 + 56);
          unint64_t v262 = *v66;
          unint64_t v97 = v262;
          *(_OWORD *)uint64_t v263 = v98;
          uint64_t v100 = *(_OWORD *)v67;
          uint64_t v99 = *(_OWORD *)(a1 + 40 * v15 - 24);
          *(void *)(a1 + 69) = *(void *)(a1 + 40 * v15 - 11);
          *uint64_t v66 = v100;
          *(_OWORD *)(a1 + 56) = v99;
          *(void *)(a1 + 40 * v15 - 11) = *(void *)&v263[13];
          *(_OWORD *)unint64_t v67 = v97;
          *(_OWORD *)(a1 + 40 * v15 - 24) = v98;
          if (!(*a3)((uint64_t)v258, (char *)(a1 + 40 * v15 - 40))) {
            goto LABEL_38;
          }
          uint64_t v101 = *(_OWORD *)v67;
          uint64_t v102 = *(_OWORD *)(a1 + 40 * v15 - 24);
          *(void *)&v263[16] = *(void *)(a1 + 40 * v15 - 8);
          unint64_t v262 = v101;
          *(_OWORD *)uint64_t v263 = v102;
          uint64_t v72 = a2 - 5;
          uint64_t v103 = *v258;
          uint64_t v104 = *(a2 - 4);
          *(void *)(a1 + 40 * v15 - 11) = *(void *)((char *)a2 - 51);
          *(_OWORD *)unint64_t v67 = v103;
          *(_OWORD *)(a1 + 40 * v15 - 24) = v104;
          uint64_t v70 = v262;
          uint64_t v71 = *(_OWORD *)v263;
        }
        *(void *)((char *)v72 + 29) = *(void *)&v263[13];
        *uint64_t v72 = v70;
        v72[1] = v71;
      }
      else if (v69)
      {
        uint64_t v75 = *(_OWORD *)v67;
        uint64_t v76 = *(_OWORD *)(a1 + 40 * v15 - 24);
        *(void *)&v263[16] = *(void *)(a1 + 40 * v15 - 8);
        unint64_t v262 = v75;
        *(_OWORD *)uint64_t v263 = v76;
        BOOL v77 = *v258;
        uint64_t v78 = *(a2 - 4);
        *(void *)(a1 + 40 * v15 - 11) = *(void *)((char *)a2 - 51);
        *(_OWORD *)unint64_t v67 = v77;
        *(_OWORD *)(a1 + 40 * v15 - 24) = v78;
        uint64_t v79 = v262;
        uint64_t v80 = *(_OWORD *)v263;
        *(void *)((char *)a2 - 51) = *(void *)&v263[13];
        *double v258 = v79;
        *(a2 - 4) = v80;
        if ((*a3)(a1 + 40 * v15 - 40, (char *)(a1 + 40)))
        {
          *(void *)&v263[16] = *(void *)(a1 + 72);
          unint64_t v82 = *(_OWORD *)(a1 + 56);
          unint64_t v262 = *v66;
          uint64_t v81 = v262;
          *(_OWORD *)uint64_t v263 = v82;
          uint64_t v84 = *(_OWORD *)v67;
          uint64_t v83 = *(_OWORD *)(a1 + 40 * v15 - 24);
          *(void *)(a1 + 69) = *(void *)(a1 + 40 * v15 - 11);
          *uint64_t v66 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(void *)(a1 + 40 * v15 - 11) = *(void *)&v263[13];
          *(_OWORD *)unint64_t v67 = v81;
          *(_OWORD *)(a1 + 40 * v15 - 24) = v82;
        }
      }
LABEL_38:
      uint64_t v105 = (long long *)(a1 + 80);
      uint64_t v106 = a1 + 40 * v15 + 40;
      uint64_t v107 = (*a3)(v106, (char *)(a1 + 80));
      unint64_t v108 = (*a3)((uint64_t)v257, (char *)v106);
      if (v107)
      {
        if (v108)
        {
          *(void *)&v263[16] = *(void *)(a1 + 112);
          uint64_t v109 = *v105;
          unint64_t v110 = *(_OWORD *)(a1 + 96);
          unint64_t v262 = *v105;
          *(_OWORD *)uint64_t v263 = v110;
          unint64_t v111 = (char *)a2 - 120;
          uint64_t v113 = *v257;
          uint64_t v112 = *(long long *)((char *)a2 - 104);
          *(void *)(a1 + 109) = *(void *)((char *)a2 - 91);
          *uint64_t v105 = v113;
          *(_OWORD *)(a1 + 96) = v112;
        }
        else
        {
          *(void *)&v263[16] = *(void *)(a1 + 112);
          __n128 v125 = *(_OWORD *)(a1 + 96);
          unint64_t v262 = *v105;
          __n128 v124 = v262;
          *(_OWORD *)uint64_t v263 = v125;
          __n128 v127 = *(_OWORD *)v106;
          __n128 v126 = *(_OWORD *)(v106 + 16);
          *(void *)(a1 + 109) = *(void *)(v106 + 29);
          *uint64_t v105 = v127;
          *(_OWORD *)(a1 + 96) = v126;
          *(void *)(v106 + 29) = *(void *)&v263[13];
          *(_OWORD *)uint64_t v106 = v124;
          *(_OWORD *)(v106 + 16) = v125;
          if (!(*a3)((uint64_t)v257, (char *)v106)) {
            goto LABEL_47;
          }
          __n128 v128 = *(_OWORD *)v106;
          __n128 v129 = *(_OWORD *)(v106 + 16);
          *(void *)&v263[16] = *(void *)(v106 + 32);
          unint64_t v262 = v128;
          *(_OWORD *)uint64_t v263 = v129;
          unint64_t v111 = (char *)a2 - 120;
          __n128 v130 = *v257;
          __n128 v131 = *(long long *)((char *)a2 - 104);
          *(void *)(v106 + 29) = *(void *)((char *)a2 - 91);
          *(_OWORD *)uint64_t v106 = v130;
          *(_OWORD *)(v106 + 16) = v131;
          uint64_t v109 = v262;
          unint64_t v110 = *(_OWORD *)v263;
        }
        *(void *)(v111 + 29) = *(void *)&v263[13];
        *(_OWORD *)unint64_t v111 = v109;
        *((_OWORD *)v111 + 1) = v110;
      }
      else if (v108)
      {
        unint64_t v114 = *(_OWORD *)v106;
        unint64_t v115 = *(_OWORD *)(v106 + 16);
        *(void *)&v263[16] = *(void *)(v106 + 32);
        unint64_t v262 = v114;
        *(_OWORD *)uint64_t v263 = v115;
        int64_t v116 = *v257;
        unint64_t v117 = *(long long *)((char *)a2 - 104);
        *(void *)(v106 + 29) = *(void *)((char *)a2 - 91);
        *(_OWORD *)uint64_t v106 = v116;
        *(_OWORD *)(v106 + 16) = v117;
        __n128 v118 = v262;
        __n128 v119 = *(_OWORD *)v263;
        *(void *)((char *)a2 - 91) = *(void *)&v263[13];
        *double v257 = v118;
        *(long long *)((char *)a2 - 104) = v119;
        if ((*a3)(v106, (char *)(a1 + 80)))
        {
          *(void *)&v263[16] = *(void *)(a1 + 112);
          __n128 v121 = *(_OWORD *)(a1 + 96);
          unint64_t v262 = *v105;
          __n128 v120 = v262;
          *(_OWORD *)uint64_t v263 = v121;
          __n128 v123 = *(_OWORD *)v106;
          __n128 v122 = *(_OWORD *)(v106 + 16);
          *(void *)(a1 + 109) = *(void *)(v106 + 29);
          *uint64_t v105 = v123;
          *(_OWORD *)(a1 + 96) = v122;
          *(void *)(v106 + 29) = *(void *)&v263[13];
          *(_OWORD *)uint64_t v106 = v120;
          *(_OWORD *)(v106 + 16) = v121;
        }
      }
LABEL_47:
      __n128 v132 = (*a3)(v16, (char *)v67);
      __n128 v133 = (*a3)(v106, (char *)v16);
      if (v132)
      {
        if (v133)
        {
          __n128 v134 = *(_OWORD *)v67;
          __n128 v135 = *(_OWORD *)(v67 + 16);
          *(void *)&v263[16] = *(void *)(v67 + 32);
          unint64_t v262 = v134;
          *(_OWORD *)uint64_t v263 = v135;
          __n128 v136 = *(_OWORD *)(v106 + 16);
          *(_OWORD *)unint64_t v67 = *(_OWORD *)v106;
          *(_OWORD *)(v67 + 16) = v136;
          *(void *)(v67 + 29) = *(void *)(v106 + 29);
        }
        else
        {
          uint64_t v147 = *(_OWORD *)v67;
          uint64_t v148 = *(_OWORD *)(v67 + 16);
          *(void *)&v263[16] = *(void *)(v67 + 32);
          unint64_t v262 = v147;
          *(_OWORD *)uint64_t v263 = v148;
          uint64_t v149 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)unint64_t v67 = *(_OWORD *)v16;
          *(_OWORD *)(v67 + 16) = v149;
          *(void *)(v67 + 29) = *(void *)(v16 + 29);
          uint64_t v150 = v262;
          uint64_t v151 = *(_OWORD *)v263;
          *(void *)(v16 + 29) = *(void *)&v263[13];
          *(_OWORD *)uint64_t v16 = v150;
          *(_OWORD *)(v16 + 16) = v151;
          if (!(*a3)(v106, (char *)v16)) {
            goto LABEL_56;
          }
          uint64_t v152 = *(_OWORD *)v16;
          uint64_t v153 = *(_OWORD *)(v16 + 16);
          *(void *)&v263[16] = *(void *)(v16 + 32);
          unint64_t v262 = v152;
          *(_OWORD *)uint64_t v263 = v153;
          uint64_t v154 = *(_OWORD *)(v106 + 16);
          *(_OWORD *)uint64_t v16 = *(_OWORD *)v106;
          *(_OWORD *)(v16 + 16) = v154;
          *(void *)(v16 + 29) = *(void *)(v106 + 29);
        }
        uint64_t v155 = v262;
        uint64_t v156 = *(_OWORD *)v263;
        *(void *)(v106 + 29) = *(void *)&v263[13];
        *(_OWORD *)uint64_t v106 = v155;
        *(_OWORD *)(v106 + 16) = v156;
      }
      else if (v133)
      {
        __n128 v137 = *(_OWORD *)v16;
        __n128 v138 = *(_OWORD *)(v16 + 16);
        *(void *)&v263[16] = *(void *)(v16 + 32);
        unint64_t v262 = v137;
        *(_OWORD *)uint64_t v263 = v138;
        __n128 v139 = *(_OWORD *)(v106 + 16);
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v106;
        *(_OWORD *)(v16 + 16) = v139;
        *(void *)(v16 + 29) = *(void *)(v106 + 29);
        __n128 v140 = v262;
        __n128 v141 = *(_OWORD *)v263;
        *(void *)(v106 + 29) = *(void *)&v263[13];
        *(_OWORD *)uint64_t v106 = v140;
        *(_OWORD *)(v106 + 16) = v141;
        if ((*a3)(v16, (char *)v67))
        {
          uint64_t v142 = *(_OWORD *)v67;
          long long v143 = *(_OWORD *)(v67 + 16);
          *(void *)&v263[16] = *(void *)(v67 + 32);
          unint64_t v262 = v142;
          *(_OWORD *)uint64_t v263 = v143;
          uint64_t v144 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)unint64_t v67 = *(_OWORD *)v16;
          *(_OWORD *)(v67 + 16) = v144;
          *(void *)(v67 + 29) = *(void *)(v16 + 29);
          uint64_t v145 = v262;
          uint64_t v146 = *(_OWORD *)v263;
          *(void *)(v16 + 29) = *(void *)&v263[13];
          *(_OWORD *)uint64_t v16 = v145;
          *(_OWORD *)(v16 + 16) = v146;
        }
      }
LABEL_56:
      uint64_t v157 = *(_OWORD *)a1;
      uint64_t v158 = *(_OWORD *)(a1 + 16);
      *(void *)&v263[16] = *(void *)(a1 + 32);
      unint64_t v262 = v157;
      *(_OWORD *)uint64_t v263 = v158;
      uint64_t v159 = *(_OWORD *)v16;
      uint64_t v160 = *(_OWORD *)(v16 + 16);
      *(void *)(a1 + 29) = *(void *)(v16 + 29);
      *(_OWORD *)a1 = v159;
      *(_OWORD *)(a1 + 16) = v160;
      uint64_t v161 = v262;
      uint64_t v162 = *(_OWORD *)v263;
      *(void *)(v16 + 29) = *(void *)&v263[13];
      *(_OWORD *)uint64_t v16 = v161;
      *(_OWORD *)(v16 + 16) = v162;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_57;
      }
LABEL_58:
      uint64_t v163 = 0;
      uint64_t v164 = *(_OWORD *)a1;
      char v165 = *(_OWORD *)(a1 + 16);
      *(void *)&v261[16] = *(void *)(a1 + 32);
      uint64_t v260 = v164;
      *(_OWORD *)uint64_t v261 = v165;
      do
        v163 += 40;
      while ((((uint64_t (*)(unint64_t, long long *))*a3)(v163 + a1, &v260) & 1) != 0);
      uint64_t v166 = a1 + v163;
      uint64_t v167 = a2;
      if (v163 == 40)
      {
        uint64_t v167 = a2;
        do
        {
          if (v166 >= (unint64_t)v167) {
            break;
          }
          uint64_t v167 = (long long *)((char *)v167 - 40);
        }
        while ((((uint64_t (*)(long long *, long long *))*a3)(v167, &v260) & 1) == 0);
      }
      else
      {
        do
          uint64_t v167 = (long long *)((char *)v167 - 40);
        while (!(*a3)((uint64_t)v167, (char *)&v260));
      }
      if (v166 >= (unint64_t)v167)
      {
        uint64_t v176 = v166 - 40;
        if (v166 - 40 == a1) {
          goto LABEL_76;
        }
LABEL_75:
        uint64_t v177 = *(_OWORD *)v176;
        uint64_t v178 = *(_OWORD *)(v176 + 16);
        *(void *)(a1 + 29) = *(void *)(v176 + 29);
        *(_OWORD *)a1 = v177;
        *(_OWORD *)(a1 + 16) = v178;
        goto LABEL_76;
      }
      uint64_t v168 = a1 + v163;
      uint64_t v169 = (unint64_t)v167;
      do
      {
        uint64_t v170 = *(_OWORD *)v168;
        uint64_t v171 = *(_OWORD *)(v168 + 16);
        *(void *)&v263[16] = *(void *)(v168 + 32);
        unint64_t v262 = v170;
        *(_OWORD *)uint64_t v263 = v171;
        uint64_t v172 = *(_OWORD *)v169;
        uint64_t v173 = *(_OWORD *)(v169 + 16);
        *(void *)(v168 + 29) = *(void *)(v169 + 29);
        *(_OWORD *)uint64_t v168 = v172;
        *(_OWORD *)(v168 + 16) = v173;
        uint64_t v174 = v262;
        uint64_t v175 = *(_OWORD *)v263;
        *(void *)(v169 + 29) = *(void *)&v263[13];
        *(_OWORD *)uint64_t v169 = v174;
        *(_OWORD *)(v169 + 16) = v175;
        do
          v168 += 40;
        while ((((uint64_t (*)(unint64_t, long long *))*a3)(v168, &v260) & 1) != 0);
        do
          v169 -= 40;
        while (!(*a3)(v169, (char *)&v260));
      }
      while (v168 < v169);
      uint64_t v176 = v168 - 40;
      if (v176 != a1) {
        goto LABEL_75;
      }
LABEL_76:
      id v179 = v260;
      uint64_t v180 = *(_OWORD *)v261;
      *(void *)(v176 + 29) = *(void *)&v261[13];
      *(_OWORD *)uint64_t v176 = v179;
      *(_OWORD *)(v176 + 16) = v180;
      if (v166 < (unint64_t)v167) {
        goto LABEL_79;
      }
      uint64_t v181 = sub_1C495710C(a1, v176, (uint64_t (**)(long long *, long long *))a3);
      uint64_t v12 = v176 + 40;
      if (sub_1C495710C(v176 + 40, (uint64_t)a2, (uint64_t (**)(long long *, long long *))a3))
      {
        a2 = (long long *)v176;
        if (v181) {
          return;
        }
        goto LABEL_1;
      }
      if (!v181)
      {
LABEL_79:
        sub_1C49562BC(a1, v176, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v176 + 40;
      }
    }
    else
    {
      uint64_t v24 = v17(v12, (char *)(v12 + 40 * (v14 >> 1)));
      uint64_t v25 = (*a3)((uint64_t)a2 - 40, (char *)v12);
      if (v24)
      {
        if (v25)
        {
          unint64_t v26 = *(_OWORD *)v16;
          unint64_t v27 = *(_OWORD *)(v16 + 16);
          *(void *)&v263[16] = *(void *)(v16 + 32);
          unint64_t v262 = v26;
          *(_OWORD *)uint64_t v263 = v27;
          unint64_t v28 = *(_OWORD *)v11;
          __n128 v29 = *(long long *)((char *)a2 - 24);
          *(void *)(v16 + 29) = *(void *)((char *)a2 - 11);
          *(_OWORD *)uint64_t v16 = v28;
          *(_OWORD *)(v16 + 16) = v29;
          goto LABEL_32;
        }
        unint64_t v85 = *(_OWORD *)v16;
        int64_t v86 = *(_OWORD *)(v16 + 16);
        *(void *)&v263[16] = *(void *)(v16 + 32);
        unint64_t v262 = v85;
        *(_OWORD *)uint64_t v263 = v86;
        int64_t v87 = *(_OWORD *)v12;
        BOOL v88 = *(_OWORD *)(v12 + 16);
        *(void *)(v16 + 29) = *(void *)(v12 + 29);
        *(_OWORD *)uint64_t v16 = v87;
        *(_OWORD *)(v16 + 16) = v88;
        uint64_t v89 = v262;
        uint64_t v90 = *(_OWORD *)v263;
        *(void *)(v12 + 29) = *(void *)&v263[13];
        *(_OWORD *)uint64_t v12 = v89;
        *(_OWORD *)(v12 + 16) = v90;
        if ((*a3)((uint64_t)a2 - 40, (char *)v12))
        {
          unint64_t v91 = *(_OWORD *)v12;
          BOOL v92 = *(_OWORD *)(v12 + 16);
          *(void *)&v263[16] = *(void *)(v12 + 32);
          unint64_t v262 = v91;
          *(_OWORD *)uint64_t v263 = v92;
          uint64_t v93 = *(_OWORD *)v11;
          unint64_t v94 = *(long long *)((char *)a2 - 24);
          *(void *)(v12 + 29) = *(void *)((char *)a2 - 11);
          *(_OWORD *)uint64_t v12 = v93;
          *(_OWORD *)(v12 + 16) = v94;
LABEL_32:
          uint64_t v95 = v262;
          unint64_t v96 = *(_OWORD *)v263;
          *(void *)((char *)a2 - 11) = *(void *)&v263[13];
          *(_OWORD *)uint64_t v11 = v95;
          *(long long *)((char *)a2 - 24) = v96;
        }
LABEL_33:
        --a4;
        if (a5) {
          goto LABEL_58;
        }
        goto LABEL_57;
      }
      if (!v25) {
        goto LABEL_33;
      }
      unint64_t v42 = *(_OWORD *)v12;
      uint64_t v43 = *(_OWORD *)(v12 + 16);
      *(void *)&v263[16] = *(void *)(v12 + 32);
      unint64_t v262 = v42;
      *(_OWORD *)uint64_t v263 = v43;
      unint64_t v44 = *(_OWORD *)v11;
      unint64_t v45 = *(long long *)((char *)a2 - 24);
      *(void *)(v12 + 29) = *(void *)((char *)a2 - 11);
      *(_OWORD *)uint64_t v12 = v44;
      *(_OWORD *)(v12 + 16) = v45;
      uint64_t v46 = v262;
      uint64_t v47 = *(_OWORD *)v263;
      *(void *)((char *)a2 - 11) = *(void *)&v263[13];
      *(_OWORD *)uint64_t v11 = v46;
      *(long long *)((char *)a2 - 24) = v47;
      if (!(*a3)(v12, (char *)v16)) {
        goto LABEL_33;
      }
      unint64_t v48 = *(_OWORD *)v16;
      unint64_t v49 = *(_OWORD *)(v16 + 16);
      *(void *)&v263[16] = *(void *)(v16 + 32);
      unint64_t v262 = v48;
      *(_OWORD *)uint64_t v263 = v49;
      uint64_t v50 = *(_OWORD *)v12;
      unint64_t v51 = *(_OWORD *)(v12 + 16);
      *(void *)(v16 + 29) = *(void *)(v12 + 29);
      *(_OWORD *)uint64_t v16 = v50;
      *(_OWORD *)(v16 + 16) = v51;
      unint64_t v52 = v262;
      uint64_t v53 = *(_OWORD *)v263;
      *(void *)(v12 + 29) = *(void *)&v263[13];
      *(_OWORD *)uint64_t v12 = v52;
      *(_OWORD *)(v12 + 16) = v53;
      --a4;
      if (a5) {
        goto LABEL_58;
      }
LABEL_57:
      if (((uint64_t (*)(unint64_t, unint64_t))*a3)(a1 - 40, a1)) {
        goto LABEL_58;
      }
      uint64_t v182 = *(_OWORD *)a1;
      int v183 = *(_OWORD *)(a1 + 16);
      *(void *)&v261[16] = *(void *)(a1 + 32);
      uint64_t v260 = v182;
      *(_OWORD *)uint64_t v261 = v183;
      if (((uint64_t (*)(long long *, uint64_t))*a3)(&v260, (uint64_t)a2 - 40))
      {
        uint64_t v12 = a1;
        do
          v12 += 40;
        while ((((uint64_t (*)(long long *, unint64_t))*a3)(&v260, v12) & 1) == 0);
      }
      else
      {
        uint64_t v184 = (char *)(a1 + 40);
        do
        {
          uint64_t v12 = (unint64_t)v184;
          if (v184 >= (char *)a2) {
            break;
          }
          uint64_t v185 = (*a3)((uint64_t)&v260, v184);
          uint64_t v184 = (char *)(v12 + 40);
        }
        while (!v185);
      }
      uint64_t v186 = a2;
      if (v12 < (unint64_t)a2)
      {
        uint64_t v186 = a2;
        do
          uint64_t v186 = (long long *)((char *)v186 - 40);
        while ((((uint64_t (*)(long long *, long long *))*a3)(&v260, v186) & 1) != 0);
      }
      while (v12 < (unint64_t)v186)
      {
        uint64_t v187 = *(_OWORD *)v12;
        unint64_t v188 = *(_OWORD *)(v12 + 16);
        *(void *)&v263[16] = *(void *)(v12 + 32);
        unint64_t v262 = v187;
        *(_OWORD *)uint64_t v263 = v188;
        uint64_t v189 = *v186;
        uint64_t v190 = v186[1];
        *(void *)(v12 + 29) = *(void *)((char *)v186 + 29);
        *(_OWORD *)uint64_t v12 = v189;
        *(_OWORD *)(v12 + 16) = v190;
        uint64_t v191 = v262;
        uint64_t v192 = *(_OWORD *)v263;
        *(void *)((char *)v186 + 29) = *(void *)&v263[13];
        *uint64_t v186 = v191;
        v186[1] = v192;
        do
          v12 += 40;
        while (!(*a3)((uint64_t)&v260, (char *)v12));
        do
          uint64_t v186 = (long long *)((char *)v186 - 40);
        while ((((uint64_t (*)(long long *, long long *))*a3)(&v260, v186) & 1) != 0);
      }
      unint64_t v193 = (long long *)(v12 - 40);
      BOOL v5 = v12 - 40 >= a1;
      BOOL v6 = v12 - 40 == a1;
      if (v12 - 40 != a1)
      {
        uint64_t v194 = *v193;
        uint64_t v195 = *(_OWORD *)(v12 - 24);
        *(void *)(a1 + 29) = *(void *)(v12 - 11);
        *(_OWORD *)a1 = v194;
        *(_OWORD *)(a1 + 16) = v195;
      }
      a5 = 0;
      uint64_t v196 = v260;
      uint64_t v197 = *(_OWORD *)v261;
      *(void *)(v12 - 11) = *(void *)&v261[13];
      const char *v193 = v196;
      *(_OWORD *)(v12 - 24) = v197;
    }
  }
  switch(v14)
  {
    case 0uLL:
    case 1uLL:
      return;
    case 2uLL:
      if (!(*a3)((uint64_t)a2 - 40, (char *)v12)) {
        return;
      }
      goto LABEL_105;
    case 3uLL:
      unint64_t v198 = v12 + 40;
      uint64_t v199 = (*a3)(v12 + 40, (char *)v12);
      uint64_t v200 = (*a3)((uint64_t)v11, (char *)(v12 + 40));
      if (v199)
      {
        if (v200)
        {
LABEL_105:
          uint64_t v201 = *(_OWORD *)v12;
          uint64_t v202 = *(_OWORD *)(v12 + 16);
          *(void *)&v263[16] = *(void *)(v12 + 32);
          unint64_t v262 = v201;
          *(_OWORD *)uint64_t v263 = v202;
          uint64_t v203 = *(_OWORD *)v11;
          BOOL v204 = *((_OWORD *)v11 + 1);
          *(void *)(v12 + 29) = *(void *)(v11 + 29);
          *(_OWORD *)uint64_t v12 = v203;
          *(_OWORD *)(v12 + 16) = v204;
          uint64_t v205 = v262;
          uint64_t v206 = *(_OWORD *)v263;
        }
        else
        {
          uint64_t v251 = *(_OWORD *)v12;
          uint64_t v252 = *(_OWORD *)(v12 + 16);
          *(void *)&v263[16] = *(void *)(v12 + 32);
          unint64_t v262 = v251;
          *(_OWORD *)uint64_t v263 = v252;
          uint64_t v253 = *(_OWORD *)(v12 + 56);
          *(_OWORD *)uint64_t v12 = *(_OWORD *)v198;
          *(_OWORD *)(v12 + 16) = v253;
          *(void *)(v12 + 29) = *(void *)(v12 + 69);
          uint64_t v254 = *(_OWORD *)v263;
          *(_OWORD *)unint64_t v198 = v262;
          *(_OWORD *)(v12 + 56) = v254;
          *(void *)(v12 + 69) = *(void *)&v263[13];
          if (!(*a3)((uint64_t)v11, (char *)(v12 + 40))) {
            return;
          }
          *(void *)&v263[16] = *(void *)(v12 + 72);
          uint64_t v205 = *(_OWORD *)v198;
          uint64_t v206 = *(_OWORD *)(v12 + 56);
          unint64_t v262 = *(_OWORD *)v198;
          *(_OWORD *)uint64_t v263 = v206;
          id v256 = *(_OWORD *)v11;
          uint64_t v255 = *((_OWORD *)v11 + 1);
          *(void *)(v12 + 69) = *(void *)(v11 + 29);
          *(_OWORD *)unint64_t v198 = v256;
          *(_OWORD *)(v12 + 56) = v255;
        }
        *(void *)(v11 + 29) = *(void *)&v263[13];
        *(_OWORD *)uint64_t v11 = v205;
        *((_OWORD *)v11 + 1) = v206;
        return;
      }
      if (v200)
      {
        *(void *)&v263[16] = *(void *)(v12 + 72);
        unint64_t v235 = *(_OWORD *)(v12 + 56);
        unint64_t v262 = *(_OWORD *)v198;
        uint64_t v234 = v262;
        *(_OWORD *)uint64_t v263 = v235;
        id v237 = *(_OWORD *)v11;
        uint64_t v236 = *((_OWORD *)v11 + 1);
        *(void *)(v12 + 69) = *(void *)(v11 + 29);
        *(_OWORD *)unint64_t v198 = v237;
        *(_OWORD *)(v12 + 56) = v236;
        *(void *)(v11 + 29) = *(void *)&v263[13];
        *(_OWORD *)uint64_t v11 = v234;
        *((_OWORD *)v11 + 1) = v235;
LABEL_133:
        if ((*a3)(v198, (char *)v12))
        {
          id v238 = *(_OWORD *)v12;
          uint64_t v239 = *(_OWORD *)(v12 + 16);
          *(void *)&v263[16] = *(void *)(v12 + 32);
          unint64_t v262 = v238;
          *(_OWORD *)uint64_t v263 = v239;
          uint64_t v240 = *(_OWORD *)(v198 + 16);
          *(_OWORD *)uint64_t v12 = *(_OWORD *)v198;
          *(_OWORD *)(v12 + 16) = v240;
          *(void *)(v12 + 29) = *(void *)(v198 + 29);
          uint64_t v241 = *(_OWORD *)v263;
          *(_OWORD *)unint64_t v198 = v262;
          *(_OWORD *)(v198 + 16) = v241;
          *(void *)(v198 + 29) = *(void *)&v263[13];
        }
      }
      break;
    case 4uLL:
      sub_1C4957640((long long *)v12, (long long *)(v12 + 40), (long long *)(v12 + 80), (long long *)((char *)a2 - 40), (uint64_t (**)(long long *, long long *))a3);
      return;
    case 5uLL:
      unint64_t v198 = v12 + 40;
      uint64_t v207 = (long long *)(v12 + 80);
      uint64_t v208 = (long long *)(v12 + 120);
      uint64_t v209 = sub_1C4957640((long long *)v12, (long long *)(v12 + 40), (long long *)(v12 + 80), (long long *)(v12 + 120), (uint64_t (**)(long long *, long long *))a3);
      if (!((unsigned int (*)(char *, unint64_t, __n128))*a3)(v11, v12 + 120, v209)) {
        return;
      }
      *(void *)&v263[16] = *(void *)(v12 + 152);
      uint64_t v211 = *(_OWORD *)(v12 + 136);
      unint64_t v262 = *v208;
      uint64_t v210 = v262;
      *(_OWORD *)uint64_t v263 = v211;
      uint64_t v213 = *(_OWORD *)v11;
      uint64_t v212 = *((_OWORD *)v11 + 1);
      *(void *)(v12 + 149) = *(void *)(v11 + 29);
      *uint64_t v208 = v213;
      *(_OWORD *)(v12 + 136) = v212;
      *(void *)(v11 + 29) = *(void *)&v263[13];
      *(_OWORD *)uint64_t v11 = v210;
      *((_OWORD *)v11 + 1) = v211;
      if (!(*a3)(v12 + 120, (char *)(v12 + 80))) {
        return;
      }
      uint64_t v215 = *v207;
      *(_OWORD *)uint64_t v263 = *(_OWORD *)(v12 + 96);
      uint64_t v214 = *(_OWORD *)v263;
      *(void *)&v263[16] = *(void *)(v12 + 112);
      uint64_t v216 = *(_OWORD *)(v12 + 136);
      *uint64_t v207 = *v208;
      *(_OWORD *)(v12 + 96) = v216;
      *(void *)(v12 + 109) = *(void *)(v12 + 149);
      *uint64_t v208 = v215;
      *(_OWORD *)(v12 + 136) = v214;
      *(void *)(v12 + 149) = *(void *)&v263[13];
      if (!(*a3)(v12 + 80, (char *)(v12 + 40))) {
        return;
      }
      uint64_t v218 = *(_OWORD *)v198;
      *(_OWORD *)uint64_t v263 = *(_OWORD *)(v12 + 56);
      uint64_t v217 = *(_OWORD *)v263;
      *(void *)&v263[16] = *(void *)(v12 + 72);
      uint64_t v219 = *(_OWORD *)(v12 + 96);
      *(_OWORD *)unint64_t v198 = *v207;
      *(_OWORD *)(v12 + 56) = v219;
      *(void *)(v12 + 69) = *(void *)(v12 + 109);
      *uint64_t v207 = v218;
      *(_OWORD *)(v12 + 96) = v217;
      *(void *)(v12 + 109) = *(void *)&v263[13];
      goto LABEL_133;
    default:
      JUMPOUT(0);
  }
}

  uint64_t v11 = a2 - 2;
  uint64_t i = a1;
  while (1)
  {
    a1 = i;
    uint64_t v13 = (char *)a2 - (char *)i;
    uint64_t v14 = ((char *)a2 - (char *)i) >> 4;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v45 = a2 - 2;
          unint64_t result = *(a2 - 2);
          if (result < *i || *i >= result && (unint64_t result = *(a2 - 1), result < i[1]))
          {
            uint64_t v99 = *(_OWORD *)i;
            *(_OWORD *)uint64_t i = *(_OWORD *)v45;
            unint64_t result = *(double *)&v99;
            *(_OWORD *)unint64_t v45 = v99;
          }
          break;
        case 3uLL:
          unint64_t result = sub_1C49B7378(i, i + 2, (long long *)a2 - 1);
          break;
        case 4uLL:
          uint64_t v46 = (long long *)(i + 2);
          uint64_t v47 = i + 4;
          sub_1C49B7378(i, i + 2, (long long *)i + 2);
          unint64_t v48 = a2 - 2;
          unint64_t result = *(a2 - 2);
          unint64_t v49 = i[4];
          if (result < v49 || v49 >= result && (unint64_t result = *(a2 - 1), result < i[5]))
          {
            uint64_t v50 = *(_OWORD *)v47;
            *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
            *(_OWORD *)unint64_t v48 = v50;
            unint64_t result = *v47;
            if (*v47 < *(double *)v46 || *(double *)v46 >= result && (unint64_t result = i[5], result < i[3]))
            {
              unint64_t v51 = *v46;
              *uint64_t v46 = *(_OWORD *)v47;
              *(_OWORD *)uint64_t v47 = v51;
              unint64_t result = i[2];
              if (result < *i || *i >= result && (unint64_t result = i[3], result < i[1]))
              {
                uint64_t v100 = *(_OWORD *)i;
                *(_OWORD *)uint64_t i = *v46;
                unint64_t result = *(double *)&v100;
                *uint64_t v46 = v100;
              }
            }
          }
          break;
        case 5uLL:
          unint64_t result = sub_1C49B77CC(i, i + 2, (uint64_t)(i + 4), (uint64_t)(i + 6), (void *)a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 383)
    {
      unint64_t v52 = i + 2;
      BOOL v54 = i == a2 || v52 == a2;
      if (a4)
      {
        if (v54) {
          return result;
        }
        __n128 v55 = 0;
        unint64_t v56 = i;
LABEL_113:
        uint64_t v57 = v56;
        unint64_t v56 = v52;
        unint64_t result = v57[2];
        if (result >= *v57)
        {
          if (*v57 < result) {
            goto LABEL_112;
          }
          uint64_t v58 = v57[3];
          if (v58 >= v57[1]) {
            goto LABEL_112;
          }
        }
        else
        {
          uint64_t v58 = v57[3];
        }
        *(_OWORD *)unint64_t v52 = *(_OWORD *)v57;
        unint64_t v59 = i;
        if (v57 == i) {
          goto LABEL_111;
        }
        unint64_t v60 = v55;
        while (1)
        {
          unint64_t v61 = *(double *)((char *)i + v60 - 16);
          if (result >= v61)
          {
            if (v61 < result)
            {
              unint64_t v59 = v57;
LABEL_111:
              char *v59 = result;
              v59[1] = v58;
LABEL_112:
              unint64_t v52 = v56 + 2;
              v55 += 16;
              if (v56 + 2 == a2) {
                return result;
              }
              goto LABEL_113;
            }
            unint64_t v59 = (double *)((char *)i + v60);
            if (v58 >= *(double *)((char *)i + v60 - 8)) {
              goto LABEL_111;
            }
          }
          v57 -= 2;
          *(_OWORD *)((char *)i + v60) = *(_OWORD *)((char *)i + v60 - 16);
          v60 -= 16;
          if (!v60)
          {
            unint64_t v59 = i;
            goto LABEL_111;
          }
        }
      }
      if (v54) {
        return result;
      }
      while (2)
      {
        unint64_t v91 = a1;
        a1 = v52;
        unint64_t result = v91[2];
        if (result >= *v91)
        {
          if (*v91 >= result)
          {
            BOOL v92 = v91[3];
            if (v92 < v91[1]) {
              goto LABEL_193;
            }
          }
        }
        else
        {
          BOOL v92 = v91[3];
          do
          {
            do
            {
LABEL_193:
              uint64_t v93 = v91;
              *((_OWORD *)v91 + 1) = *(_OWORD *)v91;
              unint64_t v94 = *(v91 - 2);
              v91 -= 2;
              uint64_t v95 = v94;
            }
            while (result < v94);
          }
          while (v95 >= result && v92 < *(v93 - 1));
          *uint64_t v93 = result;
          v93[1] = v92;
        }
        v52 += 2;
        if (a1 + 2 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = &i[2 * (v14 >> 1)];
    if ((unint64_t)v13 >= 0x801)
    {
      sub_1C49B7378(a1, &a1[2 * (v14 >> 1)], (long long *)a2 - 1);
      unint64_t v17 = 2 * v15;
      uint64_t v18 = &a1[2 * v15 - 2];
      sub_1C49B7378(a1 + 2, v18, (long long *)a2 - 2);
      sub_1C49B7378(a1 + 4, &a1[v17 + 2], (long long *)a2 - 3);
      sub_1C49B7378(v18, v16, (long long *)&a1[v17 + 2]);
      unint64_t v96 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v96;
      --a3;
      unint64_t result = *a1;
      if (a4) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_1C49B7378(&a1[2 * (v14 >> 1)], a1, (long long *)a2 - 1);
      --a3;
      unint64_t result = *a1;
      if (a4) {
        goto LABEL_14;
      }
    }
    unint64_t v19 = *(a1 - 2);
    if (v19 < result)
    {
LABEL_14:
      unint64_t v21 = 0;
      unint64_t v22 = a1[1];
      while (1)
      {
        uint64_t v23 = a1[v21 + 2];
        if (v23 >= result && (result < v23 || a1[v21 + 3] >= v22)) {
          break;
        }
        v21 += 2;
      }
      uint64_t v24 = (unint64_t)&a1[v21 + 2];
      if (v21 * 8)
      {
        uint64_t v25 = *v11;
        unint64_t v26 = a2 - 2;
        if (*v11 >= result)
        {
          do
          {
            if (result >= v25 && v26[1] < v22) {
              break;
            }
            unint64_t v27 = *(v26 - 2);
            v26 -= 2;
            uint64_t v25 = v27;
          }
          while (v27 >= result);
        }
      }
      else
      {
        unint64_t v26 = a2;
        if (v24 < (unint64_t)a2)
        {
          unint64_t v28 = *v11;
          unint64_t v26 = a2 - 2;
          if (*v11 >= result)
          {
            unint64_t v26 = a2 - 2;
            do
            {
              if (result < v28)
              {
                if (v24 >= (unint64_t)v26) {
                  break;
                }
              }
              else if (v24 >= (unint64_t)v26 || v26[1] < v22)
              {
                break;
              }
              unint64_t v35 = *(v26 - 2);
              v26 -= 2;
              unint64_t v28 = v35;
            }
            while (v35 >= result);
          }
        }
      }
      uint64_t i = (double *)v24;
      if (v24 < (unint64_t)v26)
      {
        __n128 v29 = v26;
        do
        {
          unint64_t v97 = *(_OWORD *)i;
          *(_OWORD *)uint64_t i = *(_OWORD *)v29;
          *(_OWORD *)__n128 v29 = v97;
          do
          {
            do
            {
              __n128 v30 = i[2];
              i += 2;
              __n128 v31 = v30;
            }
            while (v30 < result);
          }
          while (result >= v31 && i[1] < v22);
          do
          {
            uint64_t v32 = *(v29 - 2);
            v29 -= 2;
            uint64_t v33 = v32;
          }
          while (v32 >= result && (result < v33 || v29[1] >= v22));
        }
        while (i < v29);
      }
      if (i - 2 != a1) {
        *(_OWORD *)a1 = *((_OWORD *)i - 1);
      }
      *(i - 2) = result;
      *(i - 1) = v22;
      if (v24 < (unint64_t)v26) {
        goto LABEL_44;
      }
      uint64_t v34 = sub_1C49B74A0(a1, i - 2);
      if (sub_1C49B74A0(i, a2))
      {
        a2 = i - 2;
        if (v34) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v34)
      {
LABEL_44:
        sub_1C49B6914(a1, i - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (result < v19)
      {
        unint64_t v20 = a1[1];
      }
      else
      {
        unint64_t v20 = a1[1];
        if (*(a1 - 1) < v20) {
          goto LABEL_14;
        }
      }
      unint64_t v36 = *v11;
      if (result >= *v11 && (v36 < result || v20 >= *(a2 - 1)))
      {
        for (uint64_t i = a1 + 2; i < a2 && result >= *i && (*i < result || v20 >= i[1]); i += 2)
          ;
      }
      else
      {
        uint64_t i = a1;
        do
        {
          unint64_t v37 = i[2];
          i += 2;
          __n128 v38 = v37;
        }
        while (result >= v37 && (v38 < result || v20 >= i[1]));
      }
      uint64_t j = a2;
      if (i < a2)
      {
        for (uint64_t j = a2 - 2; result < v36 || v36 >= result && v20 < j[1]; j -= 2)
        {
          __n128 v40 = *(j - 2);
          unint64_t v36 = v40;
        }
      }
      while (i < j)
      {
        BOOL v98 = *(_OWORD *)i;
        *(_OWORD *)uint64_t i = *(_OWORD *)j;
        *(_OWORD *)uint64_t j = v98;
        do
        {
          unint64_t v41 = i[2];
          i += 2;
          unint64_t v42 = v41;
        }
        while (result >= v41 && (v42 < result || v20 >= i[1]));
        do
        {
          do
          {
            uint64_t v43 = *(j - 2);
            j -= 2;
            unint64_t v44 = v43;
          }
          while (result < v43);
        }
        while (v44 >= result && v20 < j[1]);
      }
      BOOL v5 = i - 2 >= a1;
      BOOL v6 = i - 2 == a1;
      if (i - 2 != a1) {
        *(_OWORD *)a1 = *((_OWORD *)i - 1);
      }
      a4 = 0;
      *(i - 2) = result;
      *(i - 1) = v20;
    }
  }
  if (i != a2)
  {
    unint64_t v62 = (v14 - 2) >> 1;
    uint64_t v63 = v62;
    while (2)
    {
      unint64_t v65 = v63;
      if (v62 >= v63)
      {
        uint64_t v66 = (2 * v63) | 1;
        unint64_t v67 = &i[2 * v66];
        if (2 * v65 + 2 < (uint64_t)v14)
        {
          unint64_t v68 = v67[2];
          if (*v67 < v68 || v68 >= *v67 && i[2 * v66 + 1] < v67[3])
          {
            v67 += 2;
            uint64_t v66 = 2 * v65 + 2;
          }
        }
        unint64_t v69 = &i[2 * v65];
        uint64_t v70 = *v69;
        if (*v67 >= *v69)
        {
          if (v70 < *v67)
          {
            uint64_t v71 = v69[1];
            goto LABEL_141;
          }
          uint64_t v71 = i[2 * v65 + 1];
          if (v67[1] >= v71)
          {
LABEL_141:
            *(_OWORD *)unint64_t v69 = *(_OWORD *)v67;
            if (v62 >= v66)
            {
              while (1)
              {
                uint64_t v72 = 2 * v66;
                uint64_t v66 = (2 * v66) | 1;
                uint64_t v64 = &i[2 * v66];
                uint64_t v73 = v72 + 2;
                if (v73 < (uint64_t)v14)
                {
                  unint64_t v74 = v64[2];
                  if (*v64 < v74 || v74 >= *v64 && i[2 * v66 + 1] < v64[3])
                  {
                    v64 += 2;
                    uint64_t v66 = v73;
                  }
                }
                if (*v64 < v70 || v70 >= *v64 && v64[1] < v71) {
                  break;
                }
                *(_OWORD *)unint64_t v67 = *(_OWORD *)v64;
                unint64_t v67 = v64;
                if (v62 < v66) {
                  goto LABEL_129;
                }
              }
            }
            uint64_t v64 = v67;
LABEL_129:
            __n128 *v64 = v70;
            v64[1] = v71;
          }
        }
      }
      uint64_t v63 = v65 - 1;
      if (v65) {
        continue;
      }
      break;
    }
    uint64_t v75 = (unint64_t)v13 >> 4;
    while (2)
    {
      BOOL v77 = 0;
      uint64_t v101 = *(_OWORD *)i;
      uint64_t v78 = i;
      do
      {
        uint64_t v79 = v78;
        uint64_t v80 = v77 + 1;
        v78 += 2 * v77 + 2;
        uint64_t v81 = 2 * v77;
        BOOL v77 = (2 * v77) | 1;
        unint64_t v82 = v81 + 2;
        if (v82 < v75)
        {
          uint64_t v83 = v78[2];
          if (*v78 < v83 || v83 >= *v78 && v79[2 * v80 + 1] < v78[3])
          {
            v78 += 2;
            BOOL v77 = v82;
          }
        }
        *(_OWORD *)uint64_t v79 = *(_OWORD *)v78;
      }
      while (v77 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
      a2 -= 2;
      if (v78 == a2)
      {
        unint64_t result = *(double *)&v101;
        *(_OWORD *)uint64_t v78 = v101;
        goto LABEL_154;
      }
      *(_OWORD *)uint64_t v78 = *(_OWORD *)a2;
      unint64_t result = *(double *)&v101;
      *(_OWORD *)a2 = v101;
      uint64_t v84 = (char *)v78 - (char *)i + 16;
      if (v84 >= 17)
      {
        unint64_t v85 = ((unint64_t)v84 >> 4) - 2;
        int64_t v86 = v85 >> 1;
        int64_t v87 = &i[2 * (v85 >> 1)];
        unint64_t result = *v78;
        if (*v87 < *v78)
        {
          BOOL v88 = v78[1];
          goto LABEL_168;
        }
        if (result >= *v87)
        {
          BOOL v88 = v78[1];
          if (i[2 * v86 + 1] < v88)
          {
LABEL_168:
            *(_OWORD *)uint64_t v78 = *(_OWORD *)v87;
            if (v85 >= 2)
            {
              while (1)
              {
                uint64_t v90 = v86 - 1;
                int64_t v86 = (v86 - 1) >> 1;
                uint64_t v89 = &i[2 * v86];
                if (*v89 >= result && (result < *v89 || i[2 * v86 + 1] >= v88)) {
                  break;
                }
                *(_OWORD *)int64_t v87 = *(_OWORD *)v89;
                int64_t v87 = &i[2 * v86];
                if (v90 <= 1) {
                  goto LABEL_170;
                }
              }
            }
            uint64_t v89 = v87;
LABEL_170:
            *uint64_t v89 = result;
            v89[1] = v88;
          }
        }
      }
LABEL_154:
      if (v75-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

  uint64_t v9 = a2 - 248;
  uint64_t v10 = a1;
  while (1)
  {
    a1 = v10;
    uint64_t v11 = a2;
    uint64_t v12 = a2 - v10;
    uint64_t v13 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a2 - v10) >> 3);
    if (!(!v5 & v4))
    {
      switch(v13)
      {
        case 0:
        case 1:
          return;
        case 2:
          unint64_t v94 = *(void *)(a2 - 168) - *(void *)(a2 - 176);
          if (v94)
          {
            uint64_t v95 = *(float *)(a2 - 56);
            unint64_t v96 = v95 / pow((double)(unint64_t)(v94 >> 2), 0.330993);
            unint64_t v97 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
            if (v97) {
              goto LABEL_96;
            }
          }
          else
          {
            unint64_t v96 = *(float *)(a2 - 56);
            unint64_t v97 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
            if (v97)
            {
LABEL_96:
              BOOL v98 = *(float *)(a1 + 192);
              uint64_t v99 = v98 / pow((double)(unint64_t)(v97 >> 2), 0.330993);
              if (v96 <= v99) {
                return;
              }
              goto LABEL_213;
            }
          }
          if (v96 <= *(float *)(a1 + 192)) {
            return;
          }
LABEL_213:
          sub_1C4AC8B58(v202, a1);
          sub_1C4ACFB98(a1, v9);
          sub_1C4ACFB98(v9, (uint64_t)v202);
          sub_1C4AC89C8((uint64_t)v202);
          return;
        case 3:
          sub_1C4ACF3FC(a1, a1 + 248, v9);
          return;
        case 4:
          sub_1C4AD04A8(a1, a1 + 248, a1 + 496, v9);
          return;
        case 5:
          sub_1C4AD073C(a1, a1 + 248, a1 + 496, a1 + 744, v9);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 5951)
    {
      if (a4)
      {
        if (a1 == a2) {
          return;
        }
        uint64_t v100 = a1 + 248;
        if (a1 + 248 == a2) {
          return;
        }
        uint64_t v101 = 0;
        uint64_t v102 = a1;
        while (1)
        {
          uint64_t v103 = v100;
          uint64_t v104 = *(void *)(v102 + 328) - *(void *)(v102 + 320);
          if (v104)
          {
            uint64_t v105 = *(float *)(v102 + 440);
            uint64_t v106 = v105 / pow((double)(unint64_t)(v104 >> 2), 0.330993);
            uint64_t v107 = a2;
            unint64_t v108 = *(void *)(v102 + 80) - *(void *)(v102 + 72);
            if (v108) {
              goto LABEL_108;
            }
          }
          else
          {
            uint64_t v106 = *(float *)(v102 + 440);
            uint64_t v107 = a2;
            unint64_t v108 = *(void *)(v102 + 80) - *(void *)(v102 + 72);
            if (v108)
            {
LABEL_108:
              uint64_t v109 = *(float *)(v102 + 192);
              unint64_t v110 = v109 / pow((double)(unint64_t)(v108 >> 2), 0.330993);
              if (v106 <= v110) {
                goto LABEL_105;
              }
              goto LABEL_112;
            }
          }
          if (v106 <= *(float *)(v102 + 192)) {
            goto LABEL_105;
          }
LABEL_112:
          sub_1C4AC8B58(v202, v103);
          unint64_t v111 = v101;
          while (1)
          {
            sub_1C4ACFB98(a1 + v111 + 248, a1 + v111);
            if (!v111) {
              break;
            }
            if (v204 == v203)
            {
              unint64_t v115 = v205;
              int64_t v116 = a1 + v111;
              unint64_t v117 = *(void *)(a1 + v111 - 168) - *(void *)(a1 + v111 - 176);
              if (v117) {
                goto LABEL_113;
              }
LABEL_119:
              v111 -= 248;
              if (v115 <= *(float *)(v116 - 56))
              {
LABEL_120:
                __n128 v118 = a1 + v111 + 248;
                goto LABEL_122;
              }
            }
            else
            {
              unint64_t v114 = v205;
              unint64_t v115 = v114 / pow((double)(unint64_t)((v204 - v203) >> 2), 0.330993);
              int64_t v116 = a1 + v111;
              unint64_t v117 = *(void *)(a1 + v111 - 168) - *(void *)(a1 + v111 - 176);
              if (!v117) {
                goto LABEL_119;
              }
LABEL_113:
              uint64_t v112 = *(float *)(v116 - 56);
              uint64_t v113 = v112 / pow((double)(unint64_t)(v117 >> 2), 0.330993);
              v111 -= 248;
              if (v115 <= v113) {
                goto LABEL_120;
              }
            }
          }
          __n128 v118 = a1;
LABEL_122:
          sub_1C4ACFB98(v118, (uint64_t)v202);
          sub_1C4AC89C8((uint64_t)v202);
LABEL_105:
          uint64_t v100 = v103 + 248;
          v101 += 248;
          uint64_t v102 = v103;
          if (v103 + 248 == v107) {
            return;
          }
        }
      }
      if (a1 == a2) {
        return;
      }
      uint64_t v182 = a1 + 248;
      if (a1 + 248 == a2) {
        return;
      }
      while (2)
      {
        int v183 = v182;
        uint64_t v184 = *(void *)(a1 + 328) - *(void *)(a1 + 320);
        if (v184)
        {
          uint64_t v185 = *(float *)(a1 + 440);
          uint64_t v186 = v185 / pow((double)(unint64_t)(v184 >> 2), 0.330993);
          uint64_t v187 = a2;
          unint64_t v188 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
          if (v188)
          {
LABEL_199:
            uint64_t v189 = *(float *)(a1 + 192);
            uint64_t v190 = v189 / pow((double)(unint64_t)(v188 >> 2), 0.330993);
            if (v186 > v190) {
              break;
            }
            goto LABEL_196;
          }
        }
        else
        {
          uint64_t v186 = *(float *)(a1 + 440);
          uint64_t v187 = a2;
          unint64_t v188 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
          if (v188) {
            goto LABEL_199;
          }
        }
        if (v186 <= *(float *)(a1 + 192))
        {
LABEL_196:
          uint64_t v182 = v183 + 248;
          a1 = v183;
          if (v183 + 248 == v187) {
            return;
          }
          continue;
        }
        break;
      }
      sub_1C4AC8B58(v202, v183);
      while (1)
      {
        sub_1C4ACFB98(a1 + 248, a1);
        if (v204 == v203)
        {
          uint64_t v194 = v205;
          uint64_t v195 = *(void *)(a1 - 168) - *(void *)(a1 - 176);
          if (v195)
          {
LABEL_204:
            uint64_t v191 = *(float *)(a1 - 56);
            uint64_t v192 = v191 / pow((double)(unint64_t)(v195 >> 2), 0.330993);
            a1 -= 248;
            if (v194 <= v192) {
              goto LABEL_210;
            }
            continue;
          }
        }
        else
        {
          unint64_t v193 = v205;
          uint64_t v194 = v193 / pow((double)(unint64_t)((v204 - v203) >> 2), 0.330993);
          uint64_t v195 = *(void *)(a1 - 168) - *(void *)(a1 - 176);
          if (v195) {
            goto LABEL_204;
          }
        }
        uint64_t v196 = *(float *)(a1 - 56);
        a1 -= 248;
        if (v194 <= v196)
        {
LABEL_210:
          sub_1C4ACFB98(a1 + 248, (uint64_t)v202);
          sub_1C4AC89C8((uint64_t)v202);
          goto LABEL_196;
        }
      }
    }
    if (!a3) {
      break;
    }
    uint64_t v14 = (unint64_t)v13 >> 1;
    uint64_t v15 = a1 + 248 * ((unint64_t)v13 >> 1);
    if ((unint64_t)v12 < 0x7C01)
    {
      sub_1C4ACF3FC(v15, a1, v9);
      --a3;
      if (a4) {
        goto LABEL_13;
      }
LABEL_10:
      unint64_t v17 = *(void *)(a1 - 168) - *(void *)(a1 - 176);
      if (v17)
      {
        uint64_t v18 = *(float *)(a1 - 56);
        unint64_t v19 = v18 / pow((double)(unint64_t)(v17 >> 2), 0.330993);
        unint64_t v20 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
        if (v20) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v19 = *(float *)(a1 - 56);
        unint64_t v20 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
        if (v20)
        {
LABEL_12:
          unint64_t v21 = *(float *)(a1 + 192);
          unint64_t v22 = v21 / pow((double)(unint64_t)(v20 >> 2), 0.330993);
          if (v19 > v22) {
            goto LABEL_13;
          }
          goto LABEL_53;
        }
      }
      if (v19 > *(float *)(a1 + 192)) {
        goto LABEL_13;
      }
LABEL_53:
      sub_1C4AC8B58(v198, a1);
      unint64_t v60 = v199;
      unint64_t v59 = v200;
      if (v200 == v199)
      {
        unint64_t v61 = v201;
        uint64_t v63 = v201;
        uint64_t v64 = *(void *)(v11 - 168) - *(void *)(v11 - 176);
        if (v64)
        {
LABEL_55:
          unint64_t v65 = *(float *)(v11 - 56);
          uint64_t v66 = v65 / pow((double)(unint64_t)(v64 >> 2), 0.330993);
          goto LABEL_58;
        }
      }
      else
      {
        unint64_t v61 = v201;
        unint64_t v62 = v201;
        uint64_t v63 = v62 / pow((double)(unint64_t)((v200 - v199) >> 2), 0.330993);
        uint64_t v64 = *(void *)(v11 - 168) - *(void *)(v11 - 176);
        if (v64) {
          goto LABEL_55;
        }
      }
      uint64_t v66 = *(float *)(v11 - 56);
LABEL_58:
      unint64_t v67 = v61 / pow((double)(unint64_t)((v59 - v60) >> 2), 0.330993);
      if (v59 != v60) {
        unint64_t v61 = v67;
      }
      if (v63 <= v66)
      {
        uint64_t v72 = a1 + 248;
        while (1)
        {
          uint64_t v10 = v72;
          if (v72 >= v11) {
            break;
          }
          uint64_t v75 = *(void *)(v72 + 80) - *(void *)(v72 + 72);
          if (v75)
          {
            uint64_t v73 = *(float *)(v10 + 192);
            unint64_t v74 = v73 / pow((double)(unint64_t)(v75 >> 2), 0.330993);
            uint64_t v72 = v10 + 248;
            if (v61 > v74) {
              break;
            }
          }
          else
          {
            uint64_t v72 = v10 + 248;
            if (v61 > *(float *)(v10 + 192)) {
              break;
            }
          }
        }
      }
      else
      {
        uint64_t v10 = a1;
        do
        {
          while (1)
          {
            uint64_t v70 = *(void *)(v10 + 328) - *(void *)(v10 + 320);
            if (!v70) {
              break;
            }
            unint64_t v68 = *(float *)(v10 + 440);
            unint64_t v69 = v68 / pow((double)(unint64_t)(v70 >> 2), 0.330993);
            v10 += 248;
            if (v61 > v69) {
              goto LABEL_71;
            }
          }
          uint64_t v71 = *(float *)(v10 + 440);
          v10 += 248;
        }
        while (v61 <= v71);
      }
LABEL_71:
      uint64_t v76 = v11;
      if (v10 < v11)
      {
        uint64_t v76 = v11;
        do
        {
          while (1)
          {
            uint64_t v79 = *(void *)(v76 - 168) - *(void *)(v76 - 176);
            if (!v79) {
              break;
            }
            BOOL v77 = *(float *)(v76 - 56);
            uint64_t v78 = v77 / pow((double)(unint64_t)(v79 >> 2), 0.330993);
            v76 -= 248;
            if (v61 <= v78) {
              goto LABEL_87;
            }
          }
          uint64_t v80 = *(float *)(v76 - 56);
          v76 -= 248;
        }
        while (v61 > v80);
      }
LABEL_87:
      while (v10 < v76)
      {
        sub_1C4AC8B58(v202, v10);
        sub_1C4ACFB98(v10, v76);
        sub_1C4ACFB98(v76, (uint64_t)v202);
        sub_1C4AC89C8((uint64_t)v202);
        unint64_t v82 = v199;
        uint64_t v81 = v200;
        uint64_t v83 = pow((double)(unint64_t)((v200 - v199) >> 2), 0.330993);
        uint64_t v84 = v201 / v83;
        if (v81 == v82) {
          unint64_t v85 = v201;
        }
        else {
          unint64_t v85 = v84;
        }
        do
        {
          while (1)
          {
            BOOL v88 = *(void *)(v10 + 328) - *(void *)(v10 + 320);
            if (!v88) {
              break;
            }
            int64_t v86 = *(float *)(v10 + 440);
            int64_t v87 = v86 / pow((double)(unint64_t)(v88 >> 2), 0.330993);
            v10 += 248;
            if (v85 > v87) {
              goto LABEL_85;
            }
          }
          uint64_t v89 = *(float *)(v10 + 440);
          v10 += 248;
        }
        while (v85 <= v89);
        do
        {
LABEL_85:
          while (1)
          {
            BOOL v92 = *(void *)(v76 - 168) - *(void *)(v76 - 176);
            if (!v92) {
              break;
            }
            uint64_t v90 = *(float *)(v76 - 56);
            unint64_t v91 = v90 / pow((double)(unint64_t)(v92 >> 2), 0.330993);
            v76 -= 248;
            if (v85 <= v91) {
              goto LABEL_87;
            }
          }
          uint64_t v93 = *(float *)(v76 - 56);
          v76 -= 248;
        }
        while (v85 > v93);
      }
      if (v10 - 248 != a1) {
        sub_1C4ACFB98(a1, v10 - 248);
      }
      sub_1C4ACFB98(v10 - 248, (uint64_t)v198);
      sub_1C4AC89C8((uint64_t)v198);
      a4 = 0;
    }
    else
    {
      sub_1C4ACF3FC(a1, v15, v9);
      uint64_t v16 = 248 * v14;
      sub_1C4ACF3FC(a1 + 248, v16 + a1 - 248, a2 - 496);
      sub_1C4ACF3FC(a1 + 496, a1 + 248 + v16, a2 - 744);
      sub_1C4ACF3FC(v16 + a1 - 248, v15, a1 + 248 + v16);
      sub_1C4AC8B58(v202, a1);
      sub_1C4ACFB98(a1, v15);
      sub_1C4ACFB98(v15, (uint64_t)v202);
      sub_1C4AC89C8((uint64_t)v202);
      uint64_t v11 = a2;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_10;
      }
LABEL_13:
      sub_1C4AC8B58(v198, a1);
      uint64_t v24 = v199;
      uint64_t v23 = v200;
      uint64_t v25 = pow((double)(unint64_t)((v200 - v199) >> 2), 0.330993);
      unint64_t v26 = 0;
      unint64_t v27 = v201 / v25;
      if (v23 == v24) {
        unint64_t v28 = v201;
      }
      else {
        unint64_t v28 = v27;
      }
      do
      {
        while (1)
        {
          __n128 v31 = a1 + v26;
          uint64_t v32 = *(void *)(a1 + v26 + 328) - *(void *)(a1 + v26 + 320);
          if (!v32) {
            break;
          }
          __n128 v29 = *(float *)(v31 + 440);
          __n128 v30 = v29 / pow((double)(unint64_t)(v32 >> 2), 0.330993);
          v26 += 248;
          if (v30 <= v28) {
            goto LABEL_19;
          }
        }
        v26 += 248;
      }
      while (*(float *)(v31 + 440) > v28);
LABEL_19:
      uint64_t v33 = a1 + v26;
      if (v26 == 248)
      {
        uint64_t v11 = a2;
        while (v33 < v11)
        {
          __n128 v40 = *(void *)(v11 - 168) - *(void *)(v11 - 176);
          if (v40)
          {
            __n128 v38 = *(float *)(v11 - 56);
            __n128 v39 = v38 / pow((double)(unint64_t)(v40 >> 2), 0.330993);
            v11 -= 248;
            if (v39 > v28) {
              break;
            }
          }
          else
          {
            unint64_t v41 = *(float *)(v11 - 56);
            v11 -= 248;
            if (v41 > v28) {
              break;
            }
          }
        }
      }
      else
      {
        do
        {
          while (1)
          {
            unint64_t v36 = *(void *)(v11 - 168) - *(void *)(v11 - 176);
            if (!v36) {
              break;
            }
            uint64_t v34 = *(float *)(v11 - 56);
            unint64_t v35 = v34 / pow((double)(unint64_t)(v36 >> 2), 0.330993);
            v11 -= 248;
            if (v35 > v28) {
              goto LABEL_29;
            }
          }
          unint64_t v37 = *(float *)(v11 - 56);
          v11 -= 248;
        }
        while (v37 <= v28);
      }
LABEL_29:
      if (v33 >= v11)
      {
        uint64_t v57 = v33 - 248;
        if (v33 - 248 != a1) {
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t v42 = a1 + v26;
        uint64_t v43 = v11;
        do
        {
          sub_1C4AC8B58(v202, v42);
          sub_1C4ACFB98(v42, v43);
          sub_1C4ACFB98(v43, (uint64_t)v202);
          sub_1C4AC89C8((uint64_t)v202);
          unint64_t v45 = v199;
          unint64_t v44 = v200;
          uint64_t v46 = pow((double)(unint64_t)((v200 - v199) >> 2), 0.330993);
          uint64_t v47 = v201 / v46;
          if (v44 == v45) {
            unint64_t v48 = v201;
          }
          else {
            unint64_t v48 = v47;
          }
          do
          {
            while (1)
            {
              unint64_t v51 = *(void *)(v42 + 328) - *(void *)(v42 + 320);
              if (!v51) {
                break;
              }
              unint64_t v49 = *(float *)(v42 + 440);
              uint64_t v50 = v49 / pow((double)(unint64_t)(v51 >> 2), 0.330993);
              v42 += 248;
              if (v50 <= v48) {
                goto LABEL_40;
              }
            }
            unint64_t v52 = *(float *)(v42 + 440);
            v42 += 248;
          }
          while (v52 > v48);
          do
          {
LABEL_40:
            while (1)
            {
              __n128 v55 = *(void *)(v43 - 168) - *(void *)(v43 - 176);
              if (!v55) {
                break;
              }
              uint64_t v53 = *(float *)(v43 - 56);
              BOOL v54 = v53 / pow((double)(unint64_t)(v55 >> 2), 0.330993);
              v43 -= 248;
              if (v54 > v48) {
                goto LABEL_31;
              }
            }
            unint64_t v56 = *(float *)(v43 - 56);
            v43 -= 248;
          }
          while (v56 <= v48);
LABEL_31:
          ;
        }
        while (v42 < v43);
        uint64_t v57 = v42 - 248;
        if (v42 - 248 != a1) {
LABEL_46:
        }
          sub_1C4ACFB98(a1, v57);
      }
      sub_1C4ACFB98(v57, (uint64_t)v198);
      sub_1C4AC89C8((uint64_t)v198);
      if (v33 < v11) {
        goto LABEL_50;
      }
      uint64_t v58 = sub_1C4ACF7D8(a1, v57);
      uint64_t v10 = v57 + 248;
      if (sub_1C4ACF7D8(v57 + 248, a2))
      {
        a2 = v57;
        if (v58) {
          return;
        }
        goto LABEL_1;
      }
      if ((v58 & 1) == 0)
      {
LABEL_50:
        sub_1C4ACE17C(a1, v57, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v57 + 248;
      }
    }
  }
  if (a1 == a2) {
    return;
  }
  __n128 v119 = (unint64_t)(v13 - 2) >> 1;
  __n128 v120 = v119;
  do
  {
    __n128 v121 = v120;
    if (v119 < v120) {
      goto LABEL_125;
    }
    __n128 v122 = (2 * v120) | 1;
    __n128 v123 = a1 + 248 * v122;
    if (2 * v120 + 2 < v13)
    {
      __n128 v124 = *(void *)(a1 + 248 * v122 + 80) - *(void *)(a1 + 248 * v122 + 72);
      if (v124)
      {
        __n128 v125 = *(float *)(a1 + 248 * v122 + 192);
        __n128 v126 = v125 / pow((double)(unint64_t)(v124 >> 2), 0.330993);
        __n128 v127 = *(void *)(v123 + 328) - *(void *)(v123 + 320);
        if (v127) {
          goto LABEL_130;
        }
      }
      else
      {
        __n128 v126 = *(float *)(a1 + 248 * v122 + 192);
        __n128 v127 = *(void *)(v123 + 328) - *(void *)(v123 + 320);
        if (v127)
        {
LABEL_130:
          __n128 v128 = *(float *)(v123 + 440);
          __n128 v129 = v128 / pow((double)(unint64_t)(v127 >> 2), 0.330993);
          if (v126 <= v129) {
            goto LABEL_132;
          }
LABEL_131:
          v123 += 248;
          __n128 v122 = 2 * v121 + 2;
          goto LABEL_132;
        }
      }
      if (v126 > *(float *)(v123 + 440)) {
        goto LABEL_131;
      }
    }
LABEL_132:
    __n128 v130 = *(void *)(v123 + 80) - *(void *)(v123 + 72);
    if (v130)
    {
      __n128 v131 = *(float *)(v123 + 192);
      __n128 v132 = v131 / pow((double)(unint64_t)(v130 >> 2), 0.330993);
      __n128 v133 = *(void *)(a1 + 248 * v121 + 80) - *(void *)(a1 + 248 * v121 + 72);
      if (!v133) {
        goto LABEL_137;
      }
    }
    else
    {
      __n128 v132 = *(float *)(v123 + 192);
      __n128 v133 = *(void *)(a1 + 248 * v121 + 80) - *(void *)(a1 + 248 * v121 + 72);
      if (!v133)
      {
LABEL_137:
        if (v132 > *(float *)(a1 + 248 * v121 + 192)) {
          goto LABEL_125;
        }
        goto LABEL_138;
      }
    }
    __n128 v134 = *(float *)(a1 + 248 * v121 + 192);
    __n128 v135 = v134 / pow((double)(unint64_t)(v133 >> 2), 0.330993);
    if (v132 > v135) {
      goto LABEL_125;
    }
LABEL_138:
    __n128 v136 = a1 + 248 * v121;
    sub_1C4AC8B58(v202, v136);
    while (1)
    {
      __n128 v139 = v123;
      sub_1C4ACFB98(v136, v123);
      if (v119 < v122) {
        break;
      }
      __n128 v140 = 2 * v122;
      __n128 v141 = (2 * v122) | 1;
      __n128 v122 = v141;
      __n128 v123 = a1 + 248 * v141;
      uint64_t v142 = v140 + 2;
      if (v140 + 2 < v13)
      {
        long long v143 = *(void *)(a1 + 248 * v141 + 80) - *(void *)(a1 + 248 * v141 + 72);
        if (v143)
        {
          uint64_t v144 = *(float *)(a1 + 248 * v141 + 192);
          uint64_t v145 = v144 / pow((double)(unint64_t)(v143 >> 2), 0.330993);
          uint64_t v146 = *(void *)(v123 + 328) - *(void *)(v123 + 320);
          if (!v146) {
            goto LABEL_153;
          }
        }
        else
        {
          uint64_t v145 = *(float *)(a1 + 248 * v141 + 192);
          uint64_t v146 = *(void *)(v123 + 328) - *(void *)(v123 + 320);
          if (!v146)
          {
LABEL_153:
            if (v145 <= *(float *)(v123 + 440)) {
              goto LABEL_146;
            }
LABEL_145:
            v123 += 248;
            __n128 v122 = v142;
            goto LABEL_146;
          }
        }
        uint64_t v147 = *(float *)(v123 + 440);
        uint64_t v148 = v147 / pow((double)(unint64_t)(v146 >> 2), 0.330993);
        if (v145 > v148) {
          goto LABEL_145;
        }
      }
LABEL_146:
      uint64_t v149 = *(void *)(v123 + 80) - *(void *)(v123 + 72);
      if (v149)
      {
        uint64_t v150 = *(float *)(v123 + 192);
        uint64_t v151 = v150 / pow((double)(unint64_t)(v149 >> 2), 0.330993);
        uint64_t v152 = v204 - v203;
        if (v204 == v203) {
          goto LABEL_150;
        }
LABEL_139:
        __n128 v137 = v205;
        __n128 v138 = v137 / pow((double)(unint64_t)(v152 >> 2), 0.330993);
        __n128 v136 = v139;
        if (v151 > v138) {
          break;
        }
      }
      else
      {
        uint64_t v151 = *(float *)(v123 + 192);
        uint64_t v152 = v204 - v203;
        if (v204 != v203) {
          goto LABEL_139;
        }
LABEL_150:
        __n128 v136 = v139;
        if (v151 > v205) {
          break;
        }
      }
    }
    sub_1C4ACFB98(v139, (uint64_t)v202);
    sub_1C4AC89C8((uint64_t)v202);
LABEL_125:
    __n128 v120 = v121 - 1;
  }
  while (v121);
  uint64_t v153 = v12 / 0xF8uLL;
  while (2)
  {
    if (v153 < 2) {
      goto LABEL_162;
    }
    sub_1C4AC8B58(v198, a1);
    uint64_t v155 = 0;
    uint64_t v156 = a1;
    while (2)
    {
      uint64_t v157 = v155 + 1;
      uint64_t v158 = v156 + 248 * (v155 + 1);
      uint64_t v159 = 2 * v155;
      uint64_t v155 = (2 * v155) | 1;
      uint64_t v160 = v159 + 2;
      if (v159 + 2 >= v153) {
        goto LABEL_171;
      }
      uint64_t v161 = *(void *)(v156 + 248 * v157 + 80) - *(void *)(v156 + 248 * v157 + 72);
      if (v161)
      {
        uint64_t v162 = *(float *)(v156 + 248 * v157 + 192);
        uint64_t v163 = v162 / pow((double)(unint64_t)(v161 >> 2), 0.330993);
        uint64_t v164 = *(void *)(v158 + 328) - *(void *)(v158 + 320);
        if (v164) {
          goto LABEL_169;
        }
LABEL_174:
        if (v163 <= *(float *)(v158 + 440)) {
          goto LABEL_171;
        }
LABEL_170:
        v158 += 248;
        uint64_t v155 = v160;
        goto LABEL_171;
      }
      uint64_t v163 = *(float *)(v156 + 248 * v157 + 192);
      uint64_t v164 = *(void *)(v158 + 328) - *(void *)(v158 + 320);
      if (!v164) {
        goto LABEL_174;
      }
LABEL_169:
      char v165 = *(float *)(v158 + 440);
      uint64_t v166 = v165 / pow((double)(unint64_t)(v164 >> 2), 0.330993);
      if (v163 > v166) {
        goto LABEL_170;
      }
LABEL_171:
      sub_1C4ACFB98(v156, v158);
      uint64_t v156 = v158;
      if (v155 <= (uint64_t)((unint64_t)(v153 - 2) >> 1)) {
        continue;
      }
      break;
    }
    if (v158 == a2 - 248)
    {
      sub_1C4ACFB98(v158, (uint64_t)v198);
      goto LABEL_161;
    }
    sub_1C4ACFB98(v158, a2 - 248);
    sub_1C4ACFB98(a2 - 248, (uint64_t)v198);
    uint64_t v167 = v158 - a1 + 248;
    if (v167 >= 249)
    {
      uint64_t v168 = (v167 / 0xF8uLL - 2) >> 1;
      uint64_t v169 = *(void *)(a1 + 248 * v168 + 80) - *(void *)(a1 + 248 * v168 + 72);
      if (v169)
      {
        uint64_t v170 = *(float *)(a1 + 248 * v168 + 192);
        uint64_t v171 = v170 / pow((double)(unint64_t)(v169 >> 2), 0.330993);
        uint64_t v172 = *(void *)(v158 + 80) - *(void *)(v158 + 72);
        if (v172)
        {
LABEL_180:
          uint64_t v173 = *(float *)(v158 + 192);
          uint64_t v174 = v173 / pow((double)(unint64_t)(v172 >> 2), 0.330993);
          if (v171 <= v174) {
            goto LABEL_161;
          }
          goto LABEL_184;
        }
      }
      else
      {
        uint64_t v171 = *(float *)(a1 + 248 * v168 + 192);
        uint64_t v172 = *(void *)(v158 + 80) - *(void *)(v158 + 72);
        if (v172) {
          goto LABEL_180;
        }
      }
      if (v171 <= *(float *)(v158 + 192)) {
        goto LABEL_161;
      }
LABEL_184:
      sub_1C4AC8B58(v202, v158);
      while (1)
      {
        uint64_t v177 = v158;
        uint64_t v158 = a1 + 248 * v168;
        sub_1C4ACFB98(v177, v158);
        if (!v168)
        {
LABEL_192:
          sub_1C4ACFB98(v158, (uint64_t)v202);
          sub_1C4AC89C8((uint64_t)v202);
          break;
        }
        uint64_t v168 = (v168 - 1) >> 1;
        uint64_t v178 = *(void *)(a1 + 248 * v168 + 80) - *(void *)(a1 + 248 * v168 + 72);
        if (v178)
        {
          id v179 = *(float *)(a1 + 248 * v168 + 192);
          uint64_t v180 = v179 / pow((double)(unint64_t)(v178 >> 2), 0.330993);
          uint64_t v181 = v204 - v203;
          if (v204 != v203) {
            goto LABEL_185;
          }
        }
        else
        {
          uint64_t v180 = *(float *)(a1 + 248 * v168 + 192);
          uint64_t v181 = v204 - v203;
          if (v204 != v203)
          {
LABEL_185:
            uint64_t v175 = v205;
            uint64_t v176 = v175 / pow((double)(unint64_t)(v181 >> 2), 0.330993);
            if (v180 <= v176) {
              goto LABEL_192;
            }
            continue;
          }
        }
        if (v180 <= v205) {
          goto LABEL_192;
        }
      }
    }
LABEL_161:
    sub_1C4AC89C8((uint64_t)v198);
LABEL_162:
    a2 -= 248;
    if ((unint64_t)v153-- > 2) {
      continue;
    }
    break;
  }
}

  uint64_t v259 = (uint64_t)(a2 - 18);
  uint64_t v260 = (uint64_t)(a2 - 9);
  double v257 = (uint64_t)(a2 - 27);
  uint64_t v8 = (double *)a1;
  while (1)
  {
    uint64_t v9 = (uint64_t)v8;
    uint64_t v10 = (char *)a2 - (char *)v8;
    uint64_t v11 = 0x8E38E38E38E38E39 * (a2 - v8);
    a1 = v9;
    if (!(!v5 & v4))
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          if (*(a2 - 5) >= *(double *)(v9 + 32)) {
            return;
          }
          uint64_t v103 = v9;
          goto LABEL_298;
        case 3:
          uint64_t v104 = v9 + 72;
          uint64_t v105 = *(double *)(v9 + 104);
          uint64_t v106 = *(a2 - 5);
          if (v105 >= *(double *)(v9 + 32))
          {
            if (v106 >= v105) {
              return;
            }
            uint64_t v109 = v9 + 72;
            unint64_t v110 = v260;
LABEL_268:
            sub_1C4BEE410(v109, v110);
            if (*(double *)(a1 + 104) >= *(double *)(a1 + 32)) {
              return;
            }
            uint64_t v103 = a1;
            uint64_t v229 = v104;
          }
          else
          {
            if (v106 >= v105)
            {
              sub_1C4BEE410(v9, v9 + 72);
              if (*(a2 - 5) >= *(double *)(v9 + 104)) {
                return;
              }
              uint64_t v103 = v9 + 72;
            }
            else
            {
              uint64_t v103 = v9;
            }
LABEL_298:
            uint64_t v229 = v260;
          }
          sub_1C4BEE410(v103, v229);
          return;
        case 4:
          sub_1C4BEE614(v9, v9 + 72, v9 + 144, v260);
          return;
        case 5:
          uint64_t v104 = v9 + 72;
          uint64_t v107 = v9 + 144;
          unint64_t v108 = v9 + 216;
          sub_1C4BEE614(a1, a1 + 72, a1 + 144, a1 + 216);
          if (*(a2 - 5) >= *(double *)(a1 + 248)) {
            return;
          }
          sub_1C4BEE410(v108, v260);
          if (*(double *)(a1 + 248) >= *(double *)(a1 + 176)) {
            return;
          }
          sub_1C4BEE410(v107, v108);
          if (*(double *)(a1 + 176) >= *(double *)(a1 + 104)) {
            return;
          }
          uint64_t v109 = v104;
          unint64_t v110 = v107;
          goto LABEL_268;
        default:
          JUMPOUT(0);
      }
    }
    if (v10 <= 1727) {
      break;
    }
    if (!a3)
    {
      if ((double *)v9 != a2)
      {
        uint64_t v261 = v10;
        uint64_t v267 = (unint64_t)(v11 - 2) >> 1;
        __n128 v141 = v267;
        uint64_t v142 = v9;
        do
        {
          uint64_t v144 = v141;
          if (v267 >= v141)
          {
            uint64_t v145 = (2 * v141) | 1;
            uint64_t v146 = v142 + 72 * v145;
            if (2 * v144 + 2 < v11 && *(double *)(v146 + 32) < *(double *)(v146 + 104))
            {
              v146 += 72;
              uint64_t v145 = 2 * v144 + 2;
            }
            uint64_t v147 = v142 + 72 * v144;
            if (*(double *)(v146 + 32) >= *(double *)(v147 + 32))
            {
              uint64_t v278 = *(void ***)v147;
              uint64_t v148 = (void *)(v147 + 8);
              uint64_t v149 = *(void **)(v147 + 8);
              uint64_t v279 = v149;
              uint64_t v280 = *(void *)(v147 + 16);
              if (v280)
              {
                v149[2] = &v279;
                *(void *)uint64_t v147 = v148;
                *uint64_t v148 = 0;
                *(void *)(v147 + 16) = 0;
              }
              else
              {
                uint64_t v278 = &v279;
              }
              uint64_t v150 = v142 + 72 * v144;
              unint64_t v281 = *(_OWORD *)(v150 + 24);
              uint64_t v151 = (void *)(v150 + 40);
              uint64_t v282 = *(void **)(v150 + 40);
              uint64_t v154 = *(void **)(v150 + 48);
              uint64_t v152 = (void *)(v150 + 48);
              uint64_t v153 = v154;
              id v283 = v154;
              unint64_t v284 = v152[1];
              if (v284)
              {
                v153[2] = &v283;
                void *v151 = v152;
                *uint64_t v152 = 0;
                v152[1] = 0;
              }
              else
              {
                uint64_t v282 = &v283;
              }
              CGFloat v265 = v144;
              uint64_t v285 = *(void *)(v142 + 72 * v144 + 64);
              do
              {
                uint64_t v155 = v146;
                uint64_t v156 = v147 + 8;
                sub_1C494AC4C(v147, *(void **)(v147 + 8));
                *(void *)uint64_t v147 = *(void *)v155;
                uint64_t v158 = (void *)(v155 + 8);
                uint64_t v157 = *(void *)(v155 + 8);
                *(void *)(v147 + 8) = v157;
                uint64_t v159 = *(void *)(v155 + 16);
                *(void *)(v147 + 16) = v159;
                if (v159)
                {
                  *(void *)(v157 + 16) = v156;
                  *(void *)uint64_t v155 = v158;
                  *uint64_t v158 = 0;
                  *(void *)(v155 + 16) = 0;
                }
                else
                {
                  *(void *)uint64_t v147 = v156;
                }
                uint64_t v161 = v147 + 48;
                uint64_t v160 = *(void **)(v147 + 48);
                *(_OWORD *)(v147 + 24) = *(_OWORD *)(v155 + 24);
                sub_1C4999C7C(v147 + 40, v160);
                uint64_t v162 = (void *)(v155 + 40);
                *(void *)(v147 + 40) = *(void *)(v155 + 40);
                uint64_t v164 = (void *)(v155 + 48);
                uint64_t v163 = *(void *)(v155 + 48);
                *(void *)(v147 + 48) = v163;
                char v165 = *(void *)(v155 + 56);
                *(void *)(v147 + 56) = v165;
                if (v165)
                {
                  *(void *)(v163 + 16) = v161;
                  *uint64_t v162 = v164;
                  *uint64_t v164 = 0;
                  *(void *)(v155 + 56) = 0;
                  *(void *)(v147 + 64) = *(void *)(v155 + 64);
                  if (v267 < v145) {
                    break;
                  }
                }
                else
                {
                  *(void *)(v147 + 40) = v161;
                  *(void *)(v147 + 64) = *(void *)(v155 + 64);
                  if (v267 < v145) {
                    break;
                  }
                }
                uint64_t v166 = 2 * v145;
                uint64_t v145 = (2 * v145) | 1;
                uint64_t v146 = a1 + 72 * v145;
                uint64_t v167 = v166 + 2;
                if (v167 < v11 && *(double *)(v146 + 32) < *(double *)(v146 + 104))
                {
                  v146 += 72;
                  uint64_t v145 = v167;
                }
                uint64_t v147 = v155;
              }
              while (*(double *)(v146 + 32) >= *((double *)&v281 + 1));
              sub_1C494AC4C(v155, *(void **)(v155 + 8));
              *(void *)uint64_t v155 = v278;
              uint64_t v168 = v279;
              *(void *)(v155 + 8) = v279;
              uint64_t v169 = v280;
              *(void *)(v155 + 16) = v280;
              if (v169)
              {
                v168[2] = v158;
                uint64_t v278 = &v279;
                uint64_t v279 = 0;
                uint64_t v280 = 0;
              }
              else
              {
                *(void *)uint64_t v155 = v158;
              }
              *(_OWORD *)(v155 + 24) = v281;
              sub_1C4999C7C(v155 + 40, *(void **)(v155 + 48));
              *(void *)(v155 + 40) = v282;
              uint64_t v170 = v283;
              *(void *)(v155 + 48) = v283;
              uint64_t v171 = v284;
              *(void *)(v155 + 56) = v284;
              if (v171)
              {
                long long v143 = 0;
                v170[2] = v164;
                uint64_t v282 = &v283;
                id v283 = 0;
                unint64_t v284 = 0;
              }
              else
              {
                *uint64_t v162 = v164;
                long long v143 = v283;
              }
              uint64_t v142 = a1;
              uint64_t v144 = v265;
              *(void *)(v155 + 64) = v285;
              sub_1C4999C7C((uint64_t)&v282, v143);
              sub_1C494AC4C((uint64_t)&v278, v279);
            }
          }
          __n128 v141 = v144 - 1;
        }
        while (v144);
        uint64_t v172 = v261 / 0x48;
        unint64_t v262 = (long long *)(v142 + 24);
        id v256 = (void *)(v142 + 48);
        double v258 = (void *)(v142 + 8);
        do
        {
          uint64_t v174 = a1;
          uint64_t v175 = *(void **)(a1 + 8);
          uint64_t v270 = *(void ***)a1;
          v271 = v175;
          uint64_t v272 = *(void *)(a1 + 16);
          if (v272)
          {
            v175[2] = &v271;
            *(void *)a1 = v258;
            *double v258 = 0;
            v258[1] = 0;
          }
          else
          {
            uint64_t v270 = &v271;
          }
          uint64_t v273 = *v262;
          uint64_t v176 = *(void **)(a1 + 48);
          uint64_t v274 = *(void ***)(a1 + 40);
          uint64_t v275 = v176;
          uint64_t v276 = *(void *)(a1 + 56);
          id v264 = a2;
          if (v276)
          {
            v176[2] = &v275;
            *(void *)(a1 + 40) = v256;
            *id v256 = 0;
            v256[1] = 0;
          }
          else
          {
            uint64_t v274 = &v275;
          }
          uint64_t v177 = 0;
          v277 = *(void *)(a1 + 64);
          uint64_t v178 = (unint64_t)(v172 - 2) >> 1;
          do
          {
            while (1)
            {
              id v179 = v174 + 72 * v177 + 72;
              uint64_t v180 = 2 * v177;
              uint64_t v177 = (2 * v177) | 1;
              uint64_t v181 = v180 + 2;
              if (v181 < v172 && *(double *)(v179 + 32) < *(double *)(v179 + 104))
              {
                v179 += 72;
                uint64_t v177 = v181;
              }
              uint64_t v182 = v174 + 8;
              sub_1C494AC4C(v174, *(void **)(v174 + 8));
              *(void *)uint64_t v174 = *(void *)v179;
              uint64_t v184 = (void *)(v179 + 8);
              int v183 = *(void *)(v179 + 8);
              *(void *)(v174 + 8) = v183;
              uint64_t v185 = *(void *)(v179 + 16);
              *(void *)(v174 + 16) = v185;
              if (v185)
              {
                *(void *)(v183 + 16) = v182;
                *(void *)id v179 = v184;
                *uint64_t v184 = 0;
                *(void *)(v179 + 16) = 0;
              }
              else
              {
                *(void *)uint64_t v174 = v182;
              }
              uint64_t v187 = v174 + 48;
              uint64_t v186 = *(void **)(v174 + 48);
              *(_OWORD *)(v174 + 24) = *(_OWORD *)(v179 + 24);
              sub_1C4999C7C(v174 + 40, v186);
              unint64_t v188 = (void *)(v179 + 40);
              *(void *)(v174 + 40) = *(void *)(v179 + 40);
              uint64_t v190 = (void *)(v179 + 48);
              uint64_t v189 = *(void *)(v179 + 48);
              *(void *)(v174 + 48) = v189;
              uint64_t v191 = *(void *)(v179 + 56);
              *(void *)(v174 + 56) = v191;
              if (v191) {
                break;
              }
              *(void *)(v174 + 40) = v187;
              *(void *)(v174 + 64) = *(void *)(v179 + 64);
              uint64_t v174 = v179;
              if (v177 > v178) {
                goto LABEL_225;
              }
            }
            *(void *)(v189 + 16) = v187;
            void *v188 = v190;
            *uint64_t v190 = 0;
            *(void *)(v179 + 56) = 0;
            *(void *)(v174 + 64) = *(void *)(v179 + 64);
            uint64_t v174 = v179;
          }
          while (v177 <= v178);
LABEL_225:
          uint64_t v192 = (_OWORD *)(v179 + 24);
          sub_1C494AC4C(v179, *(void **)(v179 + 8));
          uint64_t v268 = v264 - 9;
          if ((double *)v179 == v264 - 9)
          {
            *(void *)id v179 = v270;
            uint64_t v196 = v271;
            *(void *)(v179 + 8) = v271;
            uint64_t v197 = v272;
            *(void *)(v179 + 16) = v272;
            if (v197)
            {
              v196[2] = v184;
              uint64_t v270 = &v271;
              v271 = 0;
              uint64_t v272 = 0;
            }
            else
            {
              *(void *)id v179 = v184;
            }
            *uint64_t v192 = v273;
            sub_1C4999C7C(v179 + 40, *(void **)(v179 + 48));
            *(void *)(v179 + 40) = v274;
            uint64_t v210 = v275;
            *(void *)(v179 + 48) = v275;
            uint64_t v211 = v276;
            *(void *)(v179 + 56) = v276;
            if (v211)
            {
              v210[2] = v190;
              uint64_t v274 = &v275;
              uint64_t v275 = 0;
              uint64_t v276 = 0;
            }
            else
            {
              void *v188 = v190;
            }
            *(void *)(v179 + 64) = v277;
          }
          else
          {
            *(double *)id v179 = *(v264 - 9);
            uint64_t v194 = v264 - 8;
            unint64_t v193 = *((void *)v264 - 8);
            *(void *)(v179 + 8) = v193;
            uint64_t v195 = *((void *)v264 - 7);
            *(void *)(v179 + 16) = v195;
            if (v195)
            {
              *(void *)(v193 + 16) = v184;
              *(void *)uint64_t v268 = v194;
              void *v194 = 0.0;
              *(v264 - 7) = 0.0;
            }
            else
            {
              *(void *)id v179 = v184;
            }
            *uint64_t v192 = *((_OWORD *)v264 - 3);
            sub_1C4999C7C(v179 + 40, *(void **)(v179 + 48));
            unint64_t v198 = v264 - 4;
            *(double *)(v179 + 40) = *(v264 - 4);
            uint64_t v200 = v264 - 3;
            uint64_t v199 = *((void *)v264 - 3);
            *(void *)(v179 + 48) = v199;
            uint64_t v201 = *((void *)v264 - 2);
            *(void *)(v179 + 56) = v201;
            if (v201)
            {
              *(void *)(v199 + 16) = v190;
              *(void *)unint64_t v198 = v200;
              void *v200 = 0.0;
              *(v264 - 2) = 0.0;
            }
            else
            {
              void *v188 = v190;
            }
            *(double *)(v179 + 64) = *(v264 - 1);
            sub_1C494AC4C((uint64_t)v268, *((void **)v264 - 8));
            *((void *)v264 - 9) = v270;
            uint64_t v202 = v271;
            *((void *)v264 - 8) = v271;
            uint64_t v203 = v272;
            *((void *)v264 - 7) = v272;
            if (v203)
            {
              v202[2] = v194;
              uint64_t v270 = &v271;
              v271 = 0;
              uint64_t v272 = 0;
            }
            else
            {
              *(void *)uint64_t v268 = v194;
            }
            *((_OWORD *)v264 - 3) = v273;
            sub_1C4999C7C((uint64_t)(v264 - 4), *((void **)v264 - 3));
            *((void *)v264 - 4) = v274;
            BOOL v204 = v275;
            *((void *)v264 - 3) = v275;
            uint64_t v205 = v276;
            *((void *)v264 - 2) = v276;
            if (v205)
            {
              v204[2] = v200;
              uint64_t v274 = &v275;
              uint64_t v275 = 0;
              uint64_t v276 = 0;
              *((void *)v264 - 1) = v277;
              uint64_t v206 = v179 + 72 - a1;
              if (v206 < 73) {
                goto LABEL_208;
              }
            }
            else
            {
              *(void *)unint64_t v198 = v200;
              *((void *)v264 - 1) = v277;
              uint64_t v206 = v179 + 72 - a1;
              if (v206 < 73) {
                goto LABEL_208;
              }
            }
            uint64_t v207 = (v206 / 0x48uLL - 2) >> 1;
            uint64_t v208 = a1 + 72 * v207;
            if (*(double *)(v208 + 32) < *(double *)(v179 + 32))
            {
              uint64_t v278 = *(void ***)v179;
              uint64_t v209 = *(void **)(v179 + 8);
              uint64_t v279 = v209;
              uint64_t v280 = *(void *)(v179 + 16);
              if (v280)
              {
                v209[2] = &v279;
                *(void *)id v179 = v184;
                *uint64_t v184 = 0;
                *(void *)(v179 + 16) = 0;
              }
              else
              {
                uint64_t v278 = &v279;
              }
              unint64_t v281 = *(_OWORD *)(v179 + 24);
              uint64_t v282 = *(void **)(v179 + 40);
              uint64_t v212 = *(void **)(v179 + 48);
              id v283 = v212;
              unint64_t v284 = *(void *)(v179 + 56);
              if (v284)
              {
                v212[2] = &v283;
                void *v188 = v190;
                *uint64_t v190 = 0;
                *(void *)(v179 + 56) = 0;
              }
              else
              {
                uint64_t v282 = &v283;
              }
              uint64_t v285 = *(void *)(v179 + 64);
              while (1)
              {
                uint64_t v214 = v208;
                uint64_t v215 = v179 + 8;
                sub_1C494AC4C(v179, *(void **)(v179 + 8));
                *(void *)id v179 = *(void *)v214;
                uint64_t v217 = (void *)(v214 + 8);
                uint64_t v216 = *(void *)(v214 + 8);
                *(void *)(v179 + 8) = v216;
                uint64_t v218 = *(void *)(v214 + 16);
                *(void *)(v179 + 16) = v218;
                if (v218)
                {
                  *(void *)(v216 + 16) = v215;
                  *(void *)uint64_t v214 = v217;
                  *uint64_t v217 = 0;
                  *(void *)(v214 + 16) = 0;
                }
                else
                {
                  *(void *)id v179 = v215;
                }
                uint64_t v220 = v179 + 48;
                uint64_t v219 = *(void **)(v179 + 48);
                *(_OWORD *)(v179 + 24) = *(_OWORD *)(v214 + 24);
                sub_1C4999C7C(v179 + 40, v219);
                int v221 = (void *)(v214 + 40);
                *(void *)(v179 + 40) = *(void *)(v214 + 40);
                uint64_t v223 = (void *)(v214 + 48);
                uint64_t v222 = *(void *)(v214 + 48);
                *(void *)(v179 + 48) = v222;
                uint64_t v224 = *(void *)(v214 + 56);
                *(void *)(v179 + 56) = v224;
                if (v224)
                {
                  *(void *)(v222 + 16) = v220;
                  const char *v221 = v223;
                  *uint64_t v223 = 0;
                  *(void *)(v214 + 56) = 0;
                  *(void *)(v179 + 64) = *(void *)(v214 + 64);
                  uint64_t v213 = a1;
                  if (!v207)
                  {
LABEL_259:
                    sub_1C494AC4C(v214, *(void **)(v214 + 8));
                    *(void *)uint64_t v214 = v278;
                    uint64_t v225 = v279;
                    *(void *)(v214 + 8) = v279;
                    uint64_t v226 = v280;
                    *(void *)(v214 + 16) = v280;
                    if (v226)
                    {
                      v225[2] = v217;
                      uint64_t v278 = &v279;
                      uint64_t v279 = 0;
                      uint64_t v280 = 0;
                    }
                    else
                    {
                      *(void *)uint64_t v214 = v217;
                    }
                    *(_OWORD *)(v214 + 24) = v281;
                    sub_1C4999C7C(v214 + 40, *(void **)(v214 + 48));
                    *(void *)(v214 + 40) = v282;
                    id v227 = v283;
                    *(void *)(v214 + 48) = v283;
                    uint64_t v228 = v284;
                    *(void *)(v214 + 56) = v284;
                    if (v228)
                    {
                      v227[2] = v223;
                      id v227 = 0;
                      uint64_t v282 = &v283;
                      id v283 = 0;
                      unint64_t v284 = 0;
                    }
                    else
                    {
                      const char *v221 = v223;
                    }
                    *(void *)(v214 + 64) = v285;
                    sub_1C4999C7C((uint64_t)&v282, v227);
                    sub_1C494AC4C((uint64_t)&v278, v279);
                    break;
                  }
                }
                else
                {
                  *(void *)(v179 + 40) = v220;
                  *(void *)(v179 + 64) = *(void *)(v214 + 64);
                  uint64_t v213 = a1;
                  if (!v207) {
                    goto LABEL_259;
                  }
                }
                uint64_t v207 = (v207 - 1) >> 1;
                uint64_t v208 = v213 + 72 * v207;
                id v179 = v214;
                if (*(double *)(v208 + 32) >= *((double *)&v281 + 1)) {
                  goto LABEL_259;
                }
              }
            }
          }
LABEL_208:
          sub_1C4999C7C((uint64_t)&v274, v275);
          sub_1C494AC4C((uint64_t)&v270, v271);
          uint64_t v173 = v172-- <= 2;
          a2 = v264 - 9;
        }
        while (!v173);
      }
      return;
    }
    uint64_t v12 = (unint64_t)v11 >> 1;
    uint64_t v13 = v9 + 72 * ((unint64_t)v11 >> 1);
    uint64_t v14 = *(a2 - 5);
    if ((unint64_t)v10 >= 0x2401)
    {
      uint64_t v15 = *(double *)(v13 + 32);
      if (v15 >= *(double *)(v9 + 32))
      {
        if (v14 < v15)
        {
          sub_1C4BEE410(v13, v260);
          if (*(double *)(v13 + 32) < *(double *)(v9 + 32))
          {
            uint64_t v16 = v9;
            unint64_t v17 = v13;
            goto LABEL_20;
          }
        }
      }
      else
      {
        uint64_t v16 = v9;
        if (v14 < v15) {
          goto LABEL_11;
        }
        sub_1C4BEE410(v9, v13);
        if (*(a2 - 5) < *(double *)(v13 + 32))
        {
          uint64_t v16 = v13;
LABEL_11:
          unint64_t v17 = v260;
LABEL_20:
          sub_1C4BEE410(v16, v17);
        }
      }
      unint64_t v21 = v9 + 72 * v12;
      unint64_t v22 = v21 - 72;
      uint64_t v23 = *(double *)(v21 - 40);
      uint64_t v24 = *(a2 - 14);
      if (v23 >= *(double *)(v9 + 104))
      {
        if (v24 < v23)
        {
          sub_1C4BEE410(v21 - 72, v259);
          if (*(double *)(v22 + 32) < *(double *)(v9 + 104))
          {
            uint64_t v25 = v9 + 72;
            unint64_t v26 = v22;
            goto LABEL_32;
          }
        }
      }
      else
      {
        uint64_t v25 = v9 + 72;
        if (v24 < v23) {
          goto LABEL_25;
        }
        sub_1C4BEE410(v25, v21 - 72);
        if (*(a2 - 14) < *(double *)(v22 + 32))
        {
          uint64_t v25 = v22;
LABEL_25:
          unint64_t v26 = v259;
LABEL_32:
          sub_1C4BEE410(v25, v26);
        }
      }
      unint64_t v27 = v9 + 72 * v12;
      unint64_t v28 = v27 + 72;
      __n128 v29 = *(double *)(v27 + 104);
      __n128 v30 = *(a2 - 23);
      if (v29 >= *(double *)(v9 + 176))
      {
        if (v30 < v29)
        {
          sub_1C4BEE410(v27 + 72, v257);
          if (*(double *)(v28 + 32) < *(double *)(v9 + 176))
          {
            __n128 v31 = v9 + 144;
            uint64_t v32 = v28;
            goto LABEL_41;
          }
        }
      }
      else
      {
        __n128 v31 = v9 + 144;
        if (v30 < v29) {
          goto LABEL_37;
        }
        sub_1C4BEE410(v31, v27 + 72);
        if (*(a2 - 23) < *(double *)(v28 + 32))
        {
          __n128 v31 = v28;
LABEL_37:
          uint64_t v32 = v257;
LABEL_41:
          sub_1C4BEE410(v31, v32);
        }
      }
      uint64_t v33 = *(double *)(v13 + 32);
      uint64_t v34 = *(double *)(v28 + 32);
      if (v33 >= *(double *)(v22 + 32))
      {
        if (v34 < v33)
        {
          sub_1C4BEE410(v13, v28);
          if (*(double *)(v13 + 32) < *(double *)(v22 + 32))
          {
            unint64_t v35 = v22;
            unint64_t v36 = v13;
            goto LABEL_50;
          }
        }
      }
      else
      {
        unint64_t v35 = v22;
        if (v34 < v33) {
          goto LABEL_46;
        }
        sub_1C4BEE410(v22, v13);
        if (*(double *)(v28 + 32) < *(double *)(v13 + 32))
        {
          unint64_t v35 = v13;
LABEL_46:
          unint64_t v36 = v28;
LABEL_50:
          sub_1C4BEE410(v35, v36);
        }
      }
      unint64_t v19 = v9;
      unint64_t v20 = v13;
      goto LABEL_52;
    }
    uint64_t v18 = *(double *)(v9 + 32);
    if (v18 >= *(double *)(v13 + 32))
    {
      if (v14 >= v18) {
        goto LABEL_53;
      }
      sub_1C4BEE410(v9, v260);
      if (*(double *)(v9 + 32) >= *(double *)(v13 + 32)) {
        goto LABEL_53;
      }
      unint64_t v19 = v13;
      unint64_t v20 = v9;
    }
    else
    {
      unint64_t v19 = v13;
      if (v14 >= v18)
      {
        sub_1C4BEE410(v13, v9);
        if (*(a2 - 5) >= *(double *)(v9 + 32)) {
          goto LABEL_53;
        }
        unint64_t v19 = v9;
      }
      unint64_t v20 = v260;
    }
LABEL_52:
    sub_1C4BEE410(v19, v20);
LABEL_53:
    --a3;
    if ((a4 & 1) != 0 || *(double *)(v9 - 40) < *(double *)(v9 + 32))
    {
      __n128 v38 = (void *)(v9 + 8);
      unint64_t v37 = *(void **)(v9 + 8);
      uint64_t v278 = *(void ***)v9;
      uint64_t v279 = v37;
      uint64_t v280 = *(void *)(v9 + 16);
      if (v280)
      {
        v37[2] = &v279;
        *(void *)uint64_t v9 = v38;
        *__n128 v38 = 0;
        *(void *)(v9 + 16) = 0;
      }
      else
      {
        uint64_t v278 = &v279;
      }
      __n128 v40 = (void *)(v9 + 40);
      __n128 v39 = *(void **)(v9 + 40);
      unint64_t v281 = *(_OWORD *)(v9 + 24);
      unint64_t v42 = (void *)(v9 + 48);
      unint64_t v41 = *(void **)(v9 + 48);
      uint64_t v282 = v39;
      id v283 = v41;
      unint64_t v284 = *(void *)(v9 + 56);
      if (v284)
      {
        v41[2] = &v283;
        *__n128 v40 = v42;
        *unint64_t v42 = 0;
        *(void *)(v9 + 56) = 0;
      }
      else
      {
        uint64_t v282 = &v283;
      }
      uint64_t v43 = 0;
      uint64_t v285 = *(void *)(v9 + 64);
      do
      {
        unint64_t v44 = *(double *)(v9 + v43 + 104);
        v43 += 72;
      }
      while (v44 < *((double *)&v281 + 1));
      unint64_t v45 = (double *)(v9 + v43);
      uint64_t v46 = a2;
      if (v43 == 72)
      {
        unint64_t v49 = a2;
        while (v45 < v49)
        {
          uint64_t v47 = (unint64_t)(v49 - 9);
          uint64_t v50 = *(v49 - 5);
          v49 -= 9;
          if (v50 < *((double *)&v281 + 1)) {
            goto LABEL_69;
          }
        }
        uint64_t v47 = (unint64_t)v49;
        uint64_t v266 = a3;
        uint64_t v8 = v45;
      }
      else
      {
        do
        {
          uint64_t v47 = (unint64_t)(v46 - 9);
          unint64_t v48 = *(v46 - 5);
          v46 -= 9;
        }
        while (v48 >= *((double *)&v281 + 1));
LABEL_69:
        uint64_t v266 = a3;
        uint64_t v8 = v45;
        if ((unint64_t)v45 < v47)
        {
          unint64_t v51 = v47;
          do
          {
            sub_1C4BEE410((uint64_t)v8, v51);
            do
            {
              unint64_t v52 = v8[13];
              v8 += 9;
            }
            while (v52 < *((double *)&v281 + 1));
            do
            {
              uint64_t v53 = *(double *)(v51 - 40);
              v51 -= 72;
            }
            while (v53 >= *((double *)&v281 + 1));
          }
          while ((unint64_t)v8 < v51);
        }
      }
      BOOL v54 = v8 - 9;
      if (v8 - 9 != (double *)a1)
      {
        sub_1C494AC4C(a1, *(void **)(a1 + 8));
        *(double *)a1 = *(v8 - 9);
        __n128 v55 = v8 - 8;
        unint64_t v56 = *((void *)v8 - 8);
        *(void *)(a1 + 8) = v56;
        uint64_t v57 = *((void *)v8 - 7);
        *(void *)(a1 + 16) = v57;
        if (v57)
        {
          *(void *)(v56 + 16) = v38;
          *(void *)BOOL v54 = v55;
          char *v55 = 0.0;
          *(v8 - 7) = 0.0;
        }
        else
        {
          *(void *)a1 = v38;
        }
        *((_OWORD *)v40 - 1) = *((_OWORD *)v8 - 3);
        sub_1C4999C7C((uint64_t)v40, *(void **)(a1 + 48));
        *(double *)(a1 + 40) = *(v8 - 4);
        uint64_t v58 = v8 - 3;
        unint64_t v59 = *((void *)v8 - 3);
        *(void *)(a1 + 48) = v59;
        unint64_t v60 = *((void *)v8 - 2);
        *(void *)(a1 + 56) = v60;
        if (v60)
        {
          *(void *)(v59 + 16) = v42;
          *((void *)v8 - 4) = v58;
          *uint64_t v58 = 0.0;
          *(v8 - 2) = 0.0;
        }
        else
        {
          *__n128 v40 = v42;
        }
        *(double *)(a1 + 64) = *(v8 - 1);
      }
      unint64_t v61 = a2;
      unint64_t v62 = v8 - 8;
      sub_1C494AC4C((uint64_t)(v8 - 9), *((void **)v8 - 8));
      *((void *)v8 - 9) = v278;
      uint64_t v63 = v279;
      *((void *)v8 - 8) = v279;
      uint64_t v64 = v280;
      *((void *)v8 - 7) = v280;
      if (v64)
      {
        v63[2] = v62;
        uint64_t v278 = &v279;
        uint64_t v279 = 0;
        uint64_t v280 = 0;
      }
      else
      {
        *(void *)BOOL v54 = v62;
      }
      a3 = v266;
      uint64_t v66 = v8 - 3;
      unint64_t v65 = (void *)*((void *)v8 - 3);
      *((_OWORD *)v8 - 3) = v281;
      sub_1C4999C7C((uint64_t)(v8 - 4), v65);
      *((void *)v8 - 4) = v282;
      unint64_t v67 = v283;
      *((void *)v8 - 3) = v283;
      unint64_t v68 = v284;
      *((void *)v8 - 2) = v284;
      if (v68)
      {
        unint64_t v69 = 0;
        v67[2] = v66;
        uint64_t v282 = &v283;
        id v283 = 0;
        unint64_t v284 = 0;
      }
      else
      {
        *((void *)v8 - 4) = v66;
        unint64_t v69 = v283;
      }
      *((void *)v8 - 1) = v285;
      sub_1C4999C7C((uint64_t)&v282, v69);
      sub_1C494AC4C((uint64_t)&v278, v279);
      a2 = v61;
      if ((unint64_t)v45 < v47) {
        goto LABEL_92;
      }
      uint64_t v70 = sub_1C4BEDF38((double *)a1, v8 - 9);
      if (sub_1C4BEDF38(v8, v61))
      {
        a2 = v8 - 9;
        if (v70) {
          return;
        }
        goto LABEL_1;
      }
      if (!v70)
      {
LABEL_92:
        sub_1C4BEC614(a1, v8 - 9, v266, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v72 = (void *)(v9 + 8);
      uint64_t v71 = *(void **)(v9 + 8);
      uint64_t v278 = *(void ***)v9;
      uint64_t v279 = v71;
      uint64_t v280 = *(void *)(v9 + 16);
      if (v280)
      {
        v71[2] = &v279;
        *(void *)uint64_t v9 = v72;
        *uint64_t v72 = 0;
        *(void *)(v9 + 16) = 0;
      }
      else
      {
        uint64_t v278 = &v279;
      }
      uint64_t v73 = *(void **)(v9 + 40);
      unint64_t v281 = *(_OWORD *)(v9 + 24);
      unint64_t v74 = (void *)(v9 + 40);
      BOOL v77 = *(void **)(v9 + 48);
      uint64_t v76 = (void *)(v9 + 48);
      uint64_t v75 = v77;
      uint64_t v282 = v73;
      id v283 = v77;
      unint64_t v284 = v74[2];
      if (v284)
      {
        v75[2] = &v283;
        char *v74 = v76;
        *uint64_t v76 = 0;
        v76[1] = 0;
      }
      else
      {
        uint64_t v282 = &v283;
      }
      uint64_t v285 = *(void *)(a1 + 64);
      if (*((double *)&v281 + 1) >= *(a2 - 5))
      {
        uint64_t v80 = (double *)(a1 + 72);
        do
        {
          uint64_t v8 = v80;
          if (v80 >= a2) {
            break;
          }
          uint64_t v81 = v80[4];
          v80 += 9;
        }
        while (*((double *)&v281 + 1) >= v81);
      }
      else
      {
        uint64_t v78 = a1;
        do
        {
          uint64_t v8 = (double *)(v78 + 72);
          uint64_t v79 = *(double *)(v78 + 104);
          v78 += 72;
        }
        while (*((double *)&v281 + 1) >= v79);
      }
      unint64_t v82 = (unint64_t)a2;
      if (v8 < a2)
      {
        uint64_t v83 = a2;
        do
        {
          unint64_t v82 = (unint64_t)(v83 - 9);
          uint64_t v84 = *(v83 - 5);
          v83 -= 9;
        }
        while (*((double *)&v281 + 1) < v84);
      }
      while ((unint64_t)v8 < v82)
      {
        sub_1C4BEE410((uint64_t)v8, v82);
        do
        {
          unint64_t v85 = v8[13];
          v8 += 9;
        }
        while (*((double *)&v281 + 1) >= v85);
        do
        {
          int64_t v86 = *(double *)(v82 - 40);
          v82 -= 72;
        }
        while (*((double *)&v281 + 1) < v86);
      }
      int64_t v87 = v8 - 9;
      if (v8 - 9 != (double *)a1)
      {
        sub_1C494AC4C(a1, *(void **)(a1 + 8));
        *(double *)a1 = *(v8 - 9);
        BOOL v88 = v8 - 8;
        uint64_t v89 = *((void *)v8 - 8);
        *(void *)(a1 + 8) = v89;
        uint64_t v90 = *((void *)v8 - 7);
        *(void *)(a1 + 16) = v90;
        if (v90)
        {
          *(void *)(v89 + 16) = v72;
          *(void *)int64_t v87 = v88;
          *BOOL v88 = 0.0;
          *(v8 - 7) = 0.0;
        }
        else
        {
          *(void *)a1 = v72;
        }
        *((_OWORD *)v74 - 1) = *((_OWORD *)v8 - 3);
        sub_1C4999C7C((uint64_t)v74, *(void **)(a1 + 48));
        *(double *)(a1 + 40) = *(v8 - 4);
        unint64_t v91 = v8 - 3;
        BOOL v92 = *((void *)v8 - 3);
        *(void *)(a1 + 48) = v92;
        uint64_t v93 = *((void *)v8 - 2);
        *(void *)(a1 + 56) = v93;
        if (v93)
        {
          *(void *)(v92 + 16) = v76;
          *((void *)v8 - 4) = v91;
          void *v91 = 0.0;
          *(v8 - 2) = 0.0;
        }
        else
        {
          char *v74 = v76;
        }
        *(double *)(a1 + 64) = *(v8 - 1);
      }
      unint64_t v94 = a2;
      uint64_t v95 = v8 - 8;
      sub_1C494AC4C((uint64_t)(v8 - 9), *((void **)v8 - 8));
      *((void *)v8 - 9) = v278;
      unint64_t v96 = v279;
      *((void *)v8 - 8) = v279;
      unint64_t v97 = v280;
      *((void *)v8 - 7) = v280;
      if (v97)
      {
        v96[2] = v95;
        uint64_t v278 = &v279;
        uint64_t v279 = 0;
        uint64_t v280 = 0;
      }
      else
      {
        *(void *)int64_t v87 = v95;
      }
      uint64_t v99 = v8 - 3;
      BOOL v98 = (void *)*((void *)v8 - 3);
      *((_OWORD *)v8 - 3) = v281;
      sub_1C4999C7C((uint64_t)(v8 - 4), v98);
      *((void *)v8 - 4) = v282;
      uint64_t v100 = v283;
      *((void *)v8 - 3) = v283;
      uint64_t v101 = v284;
      *((void *)v8 - 2) = v284;
      if (v101)
      {
        uint64_t v102 = 0;
        v100[2] = v99;
        uint64_t v282 = &v283;
        id v283 = 0;
        unint64_t v284 = 0;
      }
      else
      {
        *((void *)v8 - 4) = v99;
        uint64_t v102 = v283;
      }
      a2 = v94;
      *((void *)v8 - 1) = v285;
      sub_1C4999C7C((uint64_t)&v282, v102);
      sub_1C494AC4C((uint64_t)&v278, v279);
      a4 = 0;
    }
  }
  if (a4)
  {
    if ((double *)v9 != a2)
    {
      unint64_t v111 = (void *)(v9 + 72);
      if ((double *)(v9 + 72) != a2)
      {
        uint64_t v112 = 0;
        uint64_t v113 = (void *)a1;
        do
        {
          unint64_t v115 = v111;
          if (*((double *)v111 + 4) < *((double *)v113 + 4))
          {
            int64_t v116 = v113 + 10;
            unint64_t v117 = (void *)v113[10];
            uint64_t v278 = (void **)*v115;
            uint64_t v279 = v117;
            uint64_t v280 = v113[11];
            if (v280)
            {
              v117[2] = &v279;
              uint64_t *v115 = v116;
              *int64_t v116 = 0;
              v113[11] = 0;
            }
            else
            {
              uint64_t v278 = &v279;
            }
            __n128 v118 = v113 + 15;
            __n128 v119 = (void *)v113[15];
            unint64_t v281 = *((_OWORD *)v113 + 6);
            uint64_t v282 = (void *)v113[14];
            id v283 = v119;
            unint64_t v284 = v113[16];
            __n128 v120 = a2;
            if (v284)
            {
              v119[2] = &v283;
              v113[14] = v118;
              *__n128 v118 = 0;
              v113[16] = 0;
            }
            else
            {
              uint64_t v282 = &v283;
            }
            uint64_t v285 = v113[17];
            __n128 v121 = v112;
            do
            {
              __n128 v123 = (void *)(a1 + v121);
              __n128 v124 = (void **)(a1 + v121 + 80);
              sub_1C494AC4C(a1 + v121 + 72, *v124);
              v123[9] = *v123;
              __n128 v125 = (void *)(a1 + v121 + 8);
              __n128 v126 = (void *)*v125;
              *__n128 v124 = (void *)*v125;
              __n128 v127 = *(void *)(a1 + v121 + 16);
              v123[11] = v127;
              if (v127)
              {
                v126[2] = v124;
                const char *v123 = v125;
                *__n128 v125 = 0;
                v123[2] = 0;
              }
              else
              {
                *(void *)(a1 + v121 + 72) = v124;
              }
              __n128 v128 = (void *)(a1 + v121);
              *(_OWORD *)(a1 + v121 + 96) = *(_OWORD *)(a1 + v121 + 24);
              __n128 v129 = (void **)(a1 + v121 + 120);
              sub_1C4999C7C(a1 + v121 + 112, *v129);
              v128[14] = v128[5];
              __n128 v130 = (void *)(a1 + v121 + 48);
              __n128 v131 = (void *)*v130;
              *__n128 v129 = (void *)*v130;
              __n128 v132 = *(void *)(a1 + v121 + 56);
              v128[16] = v132;
              if (v132)
              {
                v131[2] = v129;
                v128[5] = v130;
                *__n128 v130 = 0;
                v128[7] = 0;
                __n128 v122 = a1 + v121;
                *(void *)(a1 + v121 + 136) = *(void *)(a1 + v121 + 64);
                if (!v121)
                {
LABEL_165:
                  __n128 v133 = (void *)a1;
                  goto LABEL_167;
                }
              }
              else
              {
                v128[14] = v129;
                __n128 v122 = a1 + v121;
                *(void *)(a1 + v121 + 136) = *(void *)(a1 + v121 + 64);
                if (!v121) {
                  goto LABEL_165;
                }
              }
              v121 -= 72;
            }
            while (*((double *)&v281 + 1) < *(double *)(v122 - 40));
            __n128 v133 = (void *)(a1 + v121 + 72);
LABEL_167:
            __n128 v135 = *(void **)(v122 + 8);
            __n128 v134 = v122 + 8;
            sub_1C494AC4C((uint64_t)v133, v135);
            *__n128 v133 = v278;
            __n128 v136 = v279;
            *(void *)__n128 v134 = v279;
            __n128 v137 = v280;
            v133[2] = v280;
            if (v137)
            {
              v136[2] = v134;
              uint64_t v278 = &v279;
              uint64_t v279 = 0;
              uint64_t v280 = 0;
            }
            else
            {
              *__n128 v133 = v134;
            }
            __n128 v138 = v134 + 40;
            *(_OWORD *)(v134 + 16) = v281;
            sub_1C4999C7C(v134 + 32, *(void **)(v134 + 40));
            *(void *)(v134 + 32) = v282;
            __n128 v139 = v283;
            *(void *)(v134 + 40) = v283;
            __n128 v140 = v284;
            v133[7] = v284;
            if (v140)
            {
              unint64_t v114 = 0;
              v139[2] = v138;
              uint64_t v282 = &v283;
              id v283 = 0;
              unint64_t v284 = 0;
            }
            else
            {
              *(void *)(v134 + 32) = v138;
              unint64_t v114 = v283;
            }
            v133[8] = v285;
            sub_1C4999C7C((uint64_t)&v282, v114);
            sub_1C494AC4C((uint64_t)&v278, v279);
            a2 = v120;
          }
          unint64_t v111 = v115 + 9;
          v112 += 72;
          uint64_t v113 = v115;
        }
        while (v115 + 9 != (void *)a2);
      }
    }
  }
  else if ((double *)v9 != a2)
  {
    uint64_t v230 = (void *)(v9 + 72);
    if ((double *)(v9 + 72) != a2)
    {
      uint64_t v231 = (void *)(v9 + 136);
      do
      {
        uint64_t v233 = v230;
        if (*((double *)v230 + 4) < *(double *)(a1 + 32))
        {
          uint64_t v234 = (void *)(a1 + 80);
          unint64_t v235 = *(void **)(a1 + 80);
          uint64_t v278 = (void **)*v233;
          uint64_t v279 = v235;
          uint64_t v280 = *(void *)(a1 + 88);
          if (v280)
          {
            v235[2] = &v279;
            *uint64_t v233 = v234;
            *uint64_t v234 = 0;
            *(void *)(a1 + 88) = 0;
          }
          else
          {
            uint64_t v278 = &v279;
          }
          uint64_t v236 = (void *)(a1 + 120);
          id v237 = *(void **)(a1 + 120);
          unint64_t v281 = *(_OWORD *)(a1 + 96);
          uint64_t v282 = *(void **)(a1 + 112);
          id v283 = v237;
          unint64_t v284 = *(void *)(a1 + 128);
          id v238 = a2;
          if (v284)
          {
            v237[2] = &v283;
            *(void *)(a1 + 112) = v236;
            void *v236 = 0;
            *(void *)(a1 + 128) = 0;
          }
          else
          {
            uint64_t v282 = &v283;
          }
          uint64_t v285 = *(void *)(a1 + 136);
          uint64_t v239 = v231;
          do
          {
            uint64_t v242 = v239 - 7;
            sub_1C494AC4C((uint64_t)(v239 - 8), (void *)*(v239 - 7));
            uint64_t v243 = v239 - 16;
            uint64_t v244 = *(v239 - 16);
            *(v239 - 8) = *(v239 - 17);
            *(v239 - 7) = v244;
            CGFloat v245 = *(v239 - 15);
            *(v239 - 6) = v245;
            if (v245)
            {
              *(void *)(v244 + 16) = v242;
              *(v239 - 17) = v243;
              *uint64_t v243 = 0;
              *(v239 - 15) = 0;
            }
            else
            {
              *(v239 - 8) = v242;
            }
            *(_OWORD *)(v239 - 5) = *((_OWORD *)v239 - 7);
            uint64_t v246 = v239 - 2;
            sub_1C4999C7C((uint64_t)(v239 - 3), (void *)*(v239 - 2));
            uint64_t v247 = v239 - 11;
            uint64_t v248 = *(v239 - 11);
            *(v239 - 3) = *(v239 - 12);
            *(v239 - 2) = v248;
            uint64_t v249 = *(v239 - 10);
            *(v239 - 1) = v249;
            if (v249)
            {
              *(void *)(v248 + 16) = v246;
              *(v239 - 12) = v247;
              *uint64_t v247 = 0;
              *(v239 - 10) = 0;
            }
            else
            {
              *(v239 - 3) = v246;
            }
            uint64_t v240 = v239 - 9;
            *uint64_t v239 = *(v239 - 9);
            uint64_t v241 = *((double *)v239 - 22);
            v239 -= 9;
          }
          while (*((double *)&v281 + 1) < v241);
          uint64_t v250 = v240 - 7;
          sub_1C494AC4C((uint64_t)(v240 - 8), (void *)*(v240 - 7));
          *(v240 - 8) = v278;
          uint64_t v251 = v279;
          *(v240 - 7) = v279;
          uint64_t v252 = v280;
          *(v240 - 6) = v280;
          if (v252)
          {
            v251[2] = v250;
            uint64_t v278 = &v279;
            uint64_t v279 = 0;
            uint64_t v280 = 0;
          }
          else
          {
            *(v240 - 8) = v250;
          }
          uint64_t v253 = v240 - 2;
          *(_OWORD *)(v240 - 5) = v281;
          sub_1C4999C7C((uint64_t)(v240 - 3), (void *)*(v240 - 2));
          *(v240 - 3) = v282;
          uint64_t v254 = v283;
          *(v240 - 2) = v283;
          uint64_t v255 = v284;
          *(v240 - 1) = v284;
          if (v255)
          {
            uint64_t v232 = 0;
            v254[2] = v253;
            uint64_t v282 = &v283;
            id v283 = 0;
            unint64_t v284 = 0;
          }
          else
          {
            *(v240 - 3) = v253;
            uint64_t v232 = v283;
          }
          *uint64_t v240 = v285;
          sub_1C4999C7C((uint64_t)&v282, v232);
          sub_1C494AC4C((uint64_t)&v278, v279);
          a2 = v238;
        }
        uint64_t v230 = v233 + 9;
        v231 += 9;
        a1 = (uint64_t)v233;
      }
      while (v233 + 9 != (void *)a2);
    }
  }
}

BOOL sub_1C494D7C4(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5 = a2 - a1;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v7 = a2 - 1;
      if (a2[-1].n128_u64[0] < a1->n128_u64[0]) {
        goto LABEL_6;
      }
      return result;
    case 3:
      uint64_t v8 = (long long *)&a1[1];
      unint64_t v9 = a1[1].n128_u64[0];
      uint64_t v7 = a2 - 1;
      unint64_t v10 = a2[-1].n128_u64[0];
      if (v9 >= a1->n128_u64[0])
      {
        if (v10 < v9)
        {
          long long v27 = *v8;
          long long *v8 = (__int128)*v7;
          *uint64_t v7 = (__n128)v27;
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
          {
            long long v28 = (__int128)*a1;
            *a1 = (__n128)*v8;
            long long *v8 = v28;
          }
        }
      }
      else
      {
        if (v10 < v9)
        {
LABEL_6:
          __n128 v11 = *a1;
          *a1 = *v7;
LABEL_7:
          *uint64_t v7 = v11;
          return result;
        }
        long long v31 = (__int128)*a1;
        *a1 = (__n128)*v8;
        long long *v8 = v31;
        if (v7->n128_u64[0] < a1[1].n128_u64[0])
        {
          __n128 v11 = (__n128)*v8;
          long long *v8 = (__int128)*v7;
          goto LABEL_7;
        }
      }
      return result;
    case 4:
      sub_1C494DB50(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a2[-1].n128_u64, a3);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      unint64_t v19 = a1 + 2;
      unint64_t v20 = a1 + 3;
      sub_1C494DB50(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a1[3].n128_u64, a3);
      unint64_t v22 = a2[-1].n128_u64[0];
      unint64_t v21 = a2 - 1;
      if (v22 < a1[3].n128_u64[0])
      {
        __n128 v23 = *v20;
        *unint64_t v20 = *v21;
        *unint64_t v21 = v23;
        if (v20->n128_u64[0] < v19->n128_u64[0])
        {
          __n128 v24 = *v19;
          __n128 *v19 = *v20;
          *unint64_t v20 = v24;
          if (v19->n128_u64[0] < v18->n128_u64[0])
          {
            __n128 v25 = *v18;
            __n128 *v18 = *v19;
            __n128 *v19 = v25;
            if (a1[1].n128_u64[0] < a1->n128_u64[0])
            {
              __n128 v26 = *a1;
              *a1 = *v18;
              __n128 *v18 = v26;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = a1 + 2;
      unint64_t v13 = a1[2].n128_u64[0];
      uint64_t v14 = a1 + 1;
      unint64_t v15 = a1[1].n128_u64[0];
      unint64_t v16 = a1->n128_u64[0];
      if (v15 >= a1->n128_u64[0])
      {
        if (v13 < v15)
        {
          __n128 v29 = *v14;
          __n128 *v14 = *v12;
          *uint64_t v12 = v29;
          if (v14->n128_u64[0] < v16)
          {
            __n128 v30 = *a1;
            *a1 = *v14;
            __n128 *v14 = v30;
          }
        }
      }
      else
      {
        if (v13 >= v15)
        {
          __n128 v32 = *a1;
          *a1 = *v14;
          __n128 *v14 = v32;
          if (v13 >= a1[1].n128_u64[0]) {
            goto LABEL_29;
          }
          __n128 v17 = *v14;
          __n128 *v14 = *v12;
        }
        else
        {
          __n128 v17 = *a1;
          *a1 = *v12;
        }
        *uint64_t v12 = v17;
      }
LABEL_29:
      uint64_t v33 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v34 = 0;
      int v35 = 0;
      while (1)
      {
        unint64_t v36 = v33->n128_u64[0];
        if (v33->n128_u64[0] < v12->n128_u64[0]) {
          break;
        }
LABEL_32:
        uint64_t v12 = v33;
        v34 += 16;
        if (++v33 == a2) {
          return 1;
        }
      }
      uint64_t v37 = v33->n128_i64[1];
      uint64_t v38 = v34;
      do
      {
        *(__n128 *)((char *)a1 + v38 + 48) = *(__n128 *)((char *)a1 + v38 + 32);
        if (v38 == -32)
        {
          a1->n128_u64[0] = v36;
          a1->n128_u64[1] = v37;
          if (++v35 != 8) {
            goto LABEL_32;
          }
          return &v33[1] == a2;
        }
        unint64_t v39 = *(unint64_t *)((char *)a1[1].n128_u64 + v38);
        v38 -= 16;
      }
      while (v36 < v39);
      uint64_t v40 = (uint64_t)a1 + v38;
      *(void *)(v40 + 48) = v36;
      *(void *)(v40 + 56) = v37;
      if (++v35 != 8) {
        goto LABEL_32;
      }
      return &v33[1] == a2;
  }
}

__n128 sub_1C494DB50(__n128 *a1, __n128 *a2, unint64_t *a3, _OWORD *a4, __n128 result)
{
  unint64_t v5 = a2->n128_u64[0];
  unint64_t v6 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v6 < v5)
    {
      BOOL result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        BOOL result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      BOOL result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    BOOL result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (*a3 < a2->n128_u64[0])
    {
      BOOL result = *a2;
      *a2 = *(__n128 *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(void *)a4 < *a3)
  {
    BOOL result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < a2->n128_u64[0])
    {
      BOOL result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        BOOL result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

void sub_1C494DD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C494DE6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C494DE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C494DE90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C494E23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C494E584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C494E5C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @".@#:/-_", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C8FE8;
  qword_1EA3C8FE8 = v6;
}

void sub_1C494E8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C494EA98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C494EBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C494EBE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C494EBF4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  obuint64_t j = a3;
  uint64_t v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v100, (uint64_t)v105, 16, v6);
  if (v85)
  {
    uint64_t v86 = *(void *)v101;
    do
    {
      for (uint64_t i = 0; i != v85; ++i)
      {
        if (*(void *)v101 != v86) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v100 + 1) + 8 * i);
        BOOL v92 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v7, v8, v9, v10, v11);
        long long v98 = 0u;
        long long v99 = 0u;
        long long v96 = 0u;
        long long v97 = 0u;
        id v90 = *(id *)(a1 + 32);
        uint64_t v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(v90, v13, (uint64_t)&v96, (uint64_t)v104, 16, v14);
        if (v93)
        {
          uint64_t v91 = *(void *)v97;
          do
          {
            for (uint64_t j = 0; j != v93; ++j)
            {
              if (*(void *)v97 != v91) {
                objc_enumerationMutation(v90);
              }
              unint64_t v20 = *(void **)(*((void *)&v96 + 1) + 8 * j);
              unint64_t v21 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v15, v16, v17, v18, v19);
              uint64_t v27 = objc_msgSend_length(v20, v22, v23, v24, v25, v26);
              uint64_t v33 = objc_msgSend_rangeOfString_options_range_(v20, v28, (uint64_t)v4, 0, 0, v27);
              uint64_t v95 = v20;
              if (v33 != 0x7FFFFFFFFFFFFFFFLL)
              {
                uint64_t v34 = (uint64_t)v29;
                do
                {
                  int v35 = objc_msgSend_stringByReplacingCharactersInRange_withString_(v95, v29, v33, v34, (uint64_t)v12, v32);
                  uint64_t v45 = objc_msgSend_count(v21, v36, v37, v38, v39, v40);
                  if (v45)
                  {
                    for (uint64_t k = 0; k != v45; ++k)
                    {
                      uint64_t v47 = objc_msgSend_objectAtIndexedSubscript_(v21, v41, k, v42, v43, v44);
                      uint64_t v52 = objc_msgSend_rangeOfString_(v47, v48, (uint64_t)v4, v49, v50, v51);
                      uint64_t v54 = v53;

                      unint64_t v59 = objc_msgSend_objectAtIndexedSubscript_(v21, v55, k, v56, v57, v58);
                      unint64_t v62 = objc_msgSend_stringByReplacingCharactersInRange_withString_(v59, v60, v52, v54, (uint64_t)v12, v61);

                      objc_msgSend_addObject_(v21, v63, (uint64_t)v62, v64, v65, v66);
                    }
                  }
                  objc_msgSend_addObject_(v21, v41, (uint64_t)v35, v42, v43, v44);
                  uint64_t v72 = objc_msgSend_length(v12, v67, v68, v69, v70, v71);
                  uint64_t v78 = objc_msgSend_length(v95, v73, v74, v75, v76, v77);
                  uint64_t v33 = objc_msgSend_rangeOfString_options_range_(v95, v79, (uint64_t)v4, 0, v72 + v33, v78 - (v72 + v33));
                  uint64_t v34 = v80;
                }
                while (v33 != 0x7FFFFFFFFFFFFFFFLL);
              }
              objc_msgSend_addObjectsFromArray_(v92, v29, (uint64_t)v21, v30, v31, v32);
            }
            uint64_t v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(v90, v15, (uint64_t)&v96, (uint64_t)v104, 16, v19);
          }
          while (v93);
        }

        objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 32), v81, (uint64_t)v92, v82, v83, v84);
      }
      uint64_t v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v100, (uint64_t)v105, 16, v11);
    }
    while (v85);
  }
}

void sub_1C494EF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C494F1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C494F38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C494FA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C494FCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C494FD00(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  cf = LXEntryCopyString();
  LXEntryGetPartialProbability();
  double v6 = v5;
  char isEqualToString = objc_msgSend_isEqualToString_(cf, v7, a1[4], v8, v9, v10);
  uint64_t v12 = *(void *)(a1[5] + 8);
  if ((isEqualToString & 1) != 0 || v6 > *(double *)(v12 + 24))
  {
    *(double *)(v12 + 24) = v6;
    *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = LXEntryGetTokenID();
  }
  CFRelease(cf);
  *a3 = isEqualToString;
}

void sub_1C494FDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C494FDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C494FEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_1C494FF20(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
  if (a1[7])
  {
    cf = LXEntryCopyString();
    if (!objc_msgSend_caseInsensitiveCompare_(cf, v5, a1[4], v6, v7, v8))
    {
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
      *a3 = 1;
    }
    CFRelease(cf);
  }
  else
  {
    *a3 = 1;
  }
}

void sub_1C494FFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4950054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49500D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49500E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  id v63 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = objc_msgSend_mutableCopy(v63, v6, v7, v8, v9, v10);
  uint64_t v12 = (void *)qword_1EA3C9000;
  qword_1EA3C9000 = v11;

  unint64_t v13 = (void *)qword_1EA3C9000;
  objc_msgSend_ch_basicAlphanumericCharacterSet(MEMORY[0x1E4F28B88], v14, v15, v16, v17, v18);
  id v64 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v13, v19, (uint64_t)v64, v20, v21, v22);

  uint64_t v23 = (void *)qword_1EA3C9000;
  objc_msgSend_ch_hiraganaCharacterSet(MEMORY[0x1E4F28B88], v24, v25, v26, v27, v28);
  id v65 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v23, v29, (uint64_t)v65, v30, v31, v32);

  uint64_t v33 = (void *)qword_1EA3C9000;
  objc_msgSend_ch_katakanaCharacterSet(MEMORY[0x1E4F28B88], v34, v35, v36, v37, v38);
  id v66 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v33, v39, (uint64_t)v66, v40, v41, v42);

  uint64_t v43 = (void *)qword_1EA3C9000;
  objc_msgSend_ch_kanjiCharacterSet(MEMORY[0x1E4F28B88], v44, v45, v46, v47, v48);
  id v67 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v43, v49, (uint64_t)v67, v50, v51, v52);

  uint64_t v53 = (void *)qword_1EA3C9000;
  objc_msgSend_ch_kanjiCompCharacterSet(MEMORY[0x1E4F28B88], v54, v55, v56, v57, v58);
  id v68 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v53, v59, (uint64_t)v68, v60, v61, v62);
}

void sub_1C4950210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4950224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4950238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C495024C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4950260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4950274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4950634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49509A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4950A38(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"¡¿", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9D00;
  qword_1EA3C9D00 = v6;
}

void sub_1C4950A80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v32 = a2;
  if (objc_msgSend_isEqualToString_(v32, v7, *MEMORY[0x1E4F28548], v8, v9, v10))
  {
    char v15 = 1;
LABEL_9:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v15;
    goto LABEL_10;
  }
  if (!objc_msgSend_isEqualToString_(v32, v11, *MEMORY[0x1E4F28508], v12, v13, v14))
  {
    if (objc_msgSend_isEqualToString_(v32, v16, *MEMORY[0x1E4F28550], v17, v18, v19)) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (a4 != 1
    || (uint64_t v20 = (void *)qword_1EA3C9D00,
        objc_msgSend_substringWithRange_(*(void **)(a1 + 32), v16, a3, 1, v18, v19),
        uint64_t v21 = objc_claimAutoreleasedReturnValue(),
        uint64_t v26 = objc_msgSend_characterAtIndex_(v21, v22, 0, v23, v24, v25),
        char IsMember = objc_msgSend_characterIsMember_(v20, v27, v26, v28, v29, v30),
        v21,
        (IsMember & 1) == 0))
  {
LABEL_8:
    char v15 = 0;
    goto LABEL_9;
  }
LABEL_10:
}

void sub_1C4950B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4950B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4951DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  uint64_t v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(void *)(v26 - 120) = v28;
    operator delete(v28);
  }

  _Unwind_Resume(a1);
}

void sub_1C49528B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,void *a63)
{
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Block_object_dispose(&STACK[0x2E0], 8);
  _Block_object_dispose((const void *)(v74 - 256), 8);

  _Block_object_dispose((const void *)(v74 - 224), 8);
  _Block_object_dispose((const void *)(v74 - 192), 8);

  _Unwind_Resume(a1);
}

void sub_1C4952AB0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"-/", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9008;
  qword_1EA3C9008 = v6;

  uint64_t v12 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v8, @"!?():", v9, v10, v11);;
  uint64_t v13 = (void *)qword_1EA3C9010;
  qword_1EA3C9010 = v12;

  uint64_t v18 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v14, @"àáâäãçèéêëìíîïñòóôõöùúûü\xFFÀÁÂÄÃÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜŸ", v15, v16, v17);
  uint64_t v19 = (void *)qword_1EA3C9018;
  qword_1EA3C9018 = v18;

  uint64_t v25 = objc_msgSend_punctuationCharacterSet(MEMORY[0x1E4F28E58], v20, v21, v22, v23, v24);
  uint64_t v26 = (void *)qword_1EA3C9020;
  qword_1EA3C9020 = v25;

  uint64_t v27 = (void *)qword_1EA3C9020;
  objc_msgSend_symbolCharacterSet(MEMORY[0x1E4F28B88], v28, v29, v30, v31, v32);
  id v37 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v27, v33, (uint64_t)v37, v34, v35, v36);
}

void sub_1C4952B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4952BA4(uint64_t a1, uint64_t a2)
{
  id v4 = LXEntryCopyString();
  LXEntryGetPartialProbability();
  double v6 = v5;
  LXEntryGetProbability();
  double v8 = v7;
  char UserBitfield = LXEntryGetUserBitfield();
  double v10 = *(double *)(a1 + 160);
  unint64_t v16 = objc_msgSend_length(*(void **)(a1 + 32), v11, v12, v13, v14, v15);
  unint64_t v17 = *(void *)(a1 + 168);
  uint64_t v23 = objc_msgSend_length(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
  uint64_t v29 = objc_msgSend_length(v4, v24, v25, v26, v27, v28);
  uint64_t v34 = objc_msgSend_compare_(v4, v30, *(void *)(a1 + 40), v31, v32, v33);
  int MetaFlags = LXEntryGetMetaFlags();
  unint64_t v41 = objc_msgSend_length(*(void **)(a1 + 32), v36, v37, v38, v39, v40);
  if (!v34
    || ((MetaFlags & 0x200000) != 0 ? (BOOL v42 = v41 >= *(void *)(a1 + 176)) : (BOOL v42 = 1),
        !v42 ? (char v43 = 0) : (char v43 = 1),
        v23 != v29 ? (BOOL v44 = v16 >= v17) : (BOOL v44 = 1),
        !v44 ? (BOOL v45 = v8 < v10) : (BOOL v45 = 0),
        !v45 && (v43 & 1) != 0))
  {
    double v50 = __exp10(v6);
    if ((MetaFlags & 0x200000) != 0)
    {
      hasPrefidouble x = objc_msgSend_hasPrefix_(v4, v46, *(void *)(a1 + 48), v47, v48, v49);
    }
    else
    {
      uint64_t v51 = objc_msgSend_substringWithRange_(v4, v46, *(void *)(a1 + 184), *(void *)(a1 + 192), v48, v49);
      hasPrefidouble x = objc_msgSend_caseInsensitiveCompare_(v51, v52, *(void *)(a1 + 48), v53, v54, v55) == 0;
    }
    if (objc_msgSend_length(*(void **)(a1 + 48), v57, v58, v59, v60, v61))
    {
      int v67 = objc_msgSend_length(*(void **)(a1 + 48), v62, v63, v64, v65, v66) ? hasPrefix : 0;
      if (v67 != 1) {
        goto LABEL_142;
      }
    }
    id v68 = *(unsigned char **)(a1 + 200);
    if (v68) {
      *id v68 = 1;
    }
    unsigned int TokenID = LXEntryGetTokenID();
    isInappropriateLexiconEntrdouble y = objc_msgSend_isInappropriateLexiconEntry_(*(void **)(a1 + 56), v70, a2, v71, v72, v73);
    uint64_t v85 = objc_msgSend_properties(*(void **)(a1 + 64), v75, v76, v77, v78, v79);
    if (isInappropriateLexiconEntry) {
      uint64_t v86 = 276;
    }
    else {
      uint64_t v86 = 260;
    }
    uint64_t v92 = objc_msgSend_inputSources(*(void **)(a1 + 64), v80, v81, v82, v83, v84);
    uint64_t v343 = v86;
    uint64_t v345 = v85;
    BOOL v93 = v6 < *(double *)(a1 + 208)
       && objc_msgSend_caseInsensitiveCompare_(*(void **)(a1 + 32), v87, (uint64_t)v4, v89, v90, v91) != 0;
    objc_msgSend_combinedScore(*(void **)(a1 + 64), v87, v88, v89, v90, v91);
    double v98 = v97;
    if (*(void *)(a1 + 216))
    {
      unsigned int TokenIDForLemma = LMVocabularyGetTokenIDForLemma();
      if (TokenIDForLemma) {
        unsigned int TokenID = TokenIDForLemma;
      }
    }
    if (!v34)
    {
      long long v100 = *(unsigned char **)(a1 + 224);
      if (v100) {
        *long long v100 = 1;
      }
    }
    char v339 = UserBitfield;
    if (*(unsigned char *)(a1 + 272))
    {
      if ((MetaFlags & 0x200000) == 0 || *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24))
      {
        long long v101 = uppercaseFirstLetter(*(NSString **)(a1 + 32));
        long long v102 = uppercaseFirstLetter((NSString *)v4);
        int isEqualToString = objc_msgSend_isEqualToString_(v101, v103, (uint64_t)v102, v104, v105, v106);
        goto LABEL_46;
      }
    }
    else if ((MetaFlags & 0x200000) == 0 || *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24))
    {
      long long v101 = lowercaseFirstLetter(*(NSString **)(a1 + 32));
      long long v102 = lowercaseFirstLetter((NSString *)v4);
      int isEqualToString = objc_msgSend_isEqualToString_(v101, v107, (uint64_t)v102, v108, v109, v110);
LABEL_46:

      if (v34) {
        BOOL v111 = isEqualToString;
      }
      else {
        BOOL v111 = 1;
      }
      unsigned int v347 = TokenID;
      uint64_t v350 = v92;
      if (v111) {
        goto LABEL_50;
      }
      goto LABEL_52;
    }
    unsigned int v347 = TokenID;
    LOBYTE(isEqualToString) = 0;
    BOOL v111 = v34 == 0;
    uint64_t v350 = v92;
    if (!v34)
    {
LABEL_50:
      BOOL v112 = 1;
LABEL_53:
      uint64_t v118 = objc_msgSend_rangeOfString_options_(*(void **)(a1 + 72), v94, (uint64_t)v4, 129, v95, v96);
      uint64_t v119 = (uint64_t)v113;
      double v120 = 1.0 - v50;
      __n128 v121 = *(void **)(a1 + 80);
      if (v121)
      {
        if (!*(void *)(a1 + 192))
        {
          uint64_t v153 = objc_msgSend_objectForKey_(v121, v113, (uint64_t)v4, v115, v116, v117);

          if (v153)
          {
            if (v119 == objc_msgSend_length(*(void **)(a1 + 72), v113, v114, v115, v116, v117))
            {
              objc_msgSend_objectForKey_(*(void **)(a1 + 80), v113, (uint64_t)v4, v115, v116, v117);
              id v122 = (id)objc_claimAutoreleasedReturnValue();
              v350 |= 0x10uLL;
              goto LABEL_57;
            }
            goto LABEL_56;
          }
        }
      }
      if (*(unsigned char *)(a1 + 273)) {
        goto LABEL_56;
      }
      if (v111)
      {
        uint64_t v130 = objc_msgSend_rangeOfString_options_(*(void **)(a1 + 72), v113, (uint64_t)v4, 1, v116, v117);
        uint64_t v132 = v131;
        __n128 v133 = v4;
        id v122 = v133;
        if (*(unsigned char *)(a1 + 272))
        {
          BOOL v140 = (MetaFlags & 0x200000) == 0 || *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) != 0;
          if ((MetaFlags & 0x200000) == 0 && !*(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24))
          {
            __n128 v141 = uppercaseFirstLetter(v133);

            BOOL v140 = 0;
            id v122 = v141;
            uint64_t v147 = objc_msgSend_length(v141, v142, v143, v144, v145, v146);
LABEL_156:
            if (v147 != objc_msgSend_length(*(void **)(a1 + 72), v148, v149, v150, v151, v152))
            {
              objc_msgSend_stringByReplacingCharactersInRange_withString_(*(void **)(a1 + 72), v113, v130, v132, (uint64_t)v122, v117);
              uint64_t v291 = (NSString *)objc_claimAutoreleasedReturnValue();

              if (v140)
              {
                uint64_t v292 = uppercaseFirstLetter(v291);

                id v122 = (id)v292;
              }
              else
              {
                id v122 = v291;
              }
            }
            if (v34) {
              double v120 = v120 * 0.5;
            }
            else {
              double v120 = 0.0;
            }
LABEL_57:
            if (*(double *)(a1 + 248) + 0.0001 > v98) {
              double v98 = *(double *)(a1 + 248) + 0.0001;
            }
            uint64_t v123 = *(void *)(*(void *)(a1 + 128) + 8);
            double v124 = *(double *)(v123 + 24);
            if (v124 >= v98) {
              double v124 = v98;
            }
            *(double *)(v123 + 24) = v124;
            if (*(unsigned char *)(*(void *)(*(void *)(a1 + 136) + 8) + 24)) {
              BOOL v125 = 0;
            }
            else {
              BOOL v125 = v112;
            }
            if (v125)
            {
              *(double *)(*(void *)(*(void *)(a1 + 144) + 8) + 24) = v120;
              int v126 = 1;
              *(unsigned char *)(*(void *)(*(void *)(a1 + 136) + 8) + 24) = 1;
              uint64_t v127 = v350;
              if (!v122) {
                goto LABEL_141;
              }
            }
            else
            {
              if (*(unsigned char *)(*(void *)(*(void *)(a1 + 136) + 8) + 24)) {
                int v128 = v112;
              }
              else {
                int v128 = 1;
              }
              if (v128 == 1)
              {
                uint64_t v129 = *(void *)(*(void *)(a1 + 144) + 8);
                uint64_t v127 = v350;
                if (v120 >= *(double *)(v129 + 24))
                {
                  int v126 = 0;
                  if (!v122)
                  {
LABEL_141:

LABEL_142:
                    CFRelease(v4);
                    goto LABEL_143;
                  }
                }
                else
                {
                  *(double *)(v129 + 24) = v120;
                  int v126 = 1;
                  if (!v122) {
                    goto LABEL_141;
                  }
                }
              }
              else
              {
                int v126 = 0;
                uint64_t v127 = v350;
                if (!v122) {
                  goto LABEL_141;
                }
              }
            }
            if ((v127 & 0x10) == 0
              && (unint64_t)objc_msgSend_length(v122, v113, v114, v115, v116, v117) <= *(void *)(a1 + 192))
            {
              if (qword_1EA3CA000 != -1) {
                dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
              }
              uint64_t v159 = (id)qword_1EA3C9F90[0];
              if (os_log_type_enabled(v159, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1C492D000, v159, OS_LOG_TYPE_FAULT, "The corrected entry string length must be greater than the length of the active prefix", buf, 2u);
              }
            }
            int v341 = v126;
            id v160 = v122;
            uint64_t v164 = v160;
            uint64_t v165 = *(void *)(a1 + 192);
            uint64_t v166 = v160;
            if (!v165)
            {
LABEL_117:
              uint64_t v180 = v345 | v343;
              if ((v127 & 0x10) != 0)
              {
LABEL_132:
                uint64_t v185 = [CHTokenizedTextResultToken alloc];
                uint64_t v191 = objc_msgSend_strokeIndexes(*(void **)(a1 + 64), v186, v187, v188, v189, v190);
                double v349 = v98;
                objc_msgSend_modelScore(*(void **)(a1 + 64), v192, v193, v194, v195, v196);
                double v346 = v197;
                objc_msgSend_recognitionScore(*(void **)(a1 + 64), v198, v199, v200, v201, v202);
                double v344 = v203;
                objc_msgSend_alignmentScore(*(void **)(a1 + 64), v204, v205, v206, v207, v208);
                double v340 = v209;
                uint64_t v215 = objc_msgSend_recognizerSourceLocale(*(void **)(a1 + 64), v210, v211, v212, v213, v214);
                uint64_t v221 = objc_msgSend_substrokeCount(*(void **)(a1 + 64), v216, v217, v218, v219, v220);
                objc_msgSend_bounds(*(void **)(a1 + 64), v222, v223, v224, v225, v226);
                double v228 = v227;
                double v230 = v229;
                double v232 = v231;
                double v234 = v233;
                objc_msgSend_originalBounds(*(void **)(a1 + 64), v235, v236, v237, v238, v239);
                uint64_t v246 = v245;
                uint64_t v248 = v247;
                uint64_t v250 = v249;
                uint64_t v252 = v251;
                uint64_t v253 = *(void **)(a1 + 64);
                if (v253) {
                  objc_msgSend_principalLines(v253, v240, v241, v242, v243, v244);
                }
                else {
                  memset(v351, 0, sizeof(v351));
                }
                uint64_t v254 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v185, v240, (uint64_t)v166, (uint64_t)v191, v347, v180, v215, v350, v346, v344, v349, v340, v228, v230, v232, v234, v221, v246, v248,
                                 v250,
                                 v252,
                                 v351);

                objc_msgSend_addObject_(*(void **)(a1 + 104), v255, (uint64_t)v254, v256, v257, v258);
                if (((objc_msgSend_count(*(void **)(a1 + 104), v259, v260, v261, v262, v263) != 1) & ~v341) == 0)
                {
                  if (*(void *)(a1 + 256)) {
                    **(void **)(a1 + 256) = objc_msgSend_count(*(void **)(a1 + 104), v264, v265, v266, v267, v268) - 1;
                  }
                  uint64_t v269 = *(unsigned char **)(a1 + 264);
                  if (v269) {
                    *uint64_t v269 = v339 & 1;
                  }
                }

                goto LABEL_141;
              }
              if ((MetaFlags & 0x200000) != 0)
              {
                v127 |= 0x40uLL;
              }
              else
              {
                if (objc_msgSend_caseInsensitiveCompare_(*(void **)(a1 + 32), v161, (uint64_t)v166, v165, v162, v163)) {
                  v127 |= 0x40uLL;
                }
                if (*(unsigned char *)(a1 + 272)) {
                  char v181 = 0;
                }
                else {
                  char v181 = isEqualToString;
                }
                if (v181) {
                  goto LABEL_128;
                }
              }
              v180 |= 0x200uLL;
LABEL_128:
              uint64_t v182 = objc_msgSend_uppercaseStringWithLocale_(v166, v161, *(void *)(a1 + 88), v165, v162, v163);
              buf[0] = 0;
              objc_msgSend_computeEditPenalizationFromString_toReferenceString_withSuffix_withCaseSensitivity_withFirstLetterCaseSensitivity_withDiacriticSensitivity_withDiacriticsCharSet_withConsumableStrokesCharSet_outputSuffix_lexiconExtraCharacters_firstLetterCaseFlipped_(CHLanguageUtilities, v183, (uint64_t)v166, (uint64_t)v182, (uint64_t)&stru_1F20141C8, 1, 1, 0, 0, *(void *)(a1 + 96), 0, 0, buf);
              if (*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 152) + 8) + 24) != buf[0]
                || *(double *)(a1 + 232) != v184)
              {
                v127 |= 0x100uLL;
              }
              uint64_t v350 = v127;

              goto LABEL_132;
            }
            if ((MetaFlags & 0x200000) != 0)
            {
              if ((objc_msgSend_hasPrefix_(v160, v161, *(void *)(a1 + 48), v165, v162, v163) & 1) == 0)
              {
                if (qword_1EA3CA000 != -1) {
                  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                }
                uint64_t v177 = (id)qword_1EA3C9F90[0];
                if (!os_log_type_enabled(v177, OS_LOG_TYPE_FAULT)) {
                  goto LABEL_115;
                }
                *(_WORD *)buf = 0;
                uint64_t v178 = "The token prefix should be case-sensitive equal after lexicon correction";
                goto LABEL_114;
              }
            }
            else
            {
              uint64_t v167 = objc_msgSend_substringWithRange_(v160, v161, *(void *)(a1 + 184), v165, v162, v163);
              uint64_t v172 = objc_msgSend_caseInsensitiveCompare_(v167, v168, *(void *)(a1 + 48), v169, v170, v171);

              if (v172)
              {
                if (qword_1EA3CA000 != -1) {
                  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                }
                uint64_t v177 = (id)qword_1EA3C9F90[0];
                if (!os_log_type_enabled(v177, OS_LOG_TYPE_FAULT)) {
                  goto LABEL_115;
                }
                *(_WORD *)buf = 0;
                uint64_t v178 = "The token prefix should be case-insensitive equal after lexicon correction";
LABEL_114:
                _os_log_impl(&dword_1C492D000, v177, OS_LOG_TYPE_FAULT, v178, buf, 2u);
LABEL_115:
              }
            }
            uint64_t v179 = objc_msgSend_substringFromIndex_(v164, v173, *(void *)(a1 + 192), v174, v175, v176);

            uint64_t v166 = (void *)v179;
            goto LABEL_117;
          }
        }
        else
        {
          BOOL v140 = 0;
        }
        uint64_t v147 = objc_msgSend_length(v133, v134, v135, v136, v137, v138);
        goto LABEL_156;
      }
      if (v118 == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v93) {
          goto LABEL_56;
        }
        uint64_t v154 = objc_msgSend_rangeOfCharacterFromSet_(*(void **)(a1 + 72), v113, qword_1EA3C9008, v115, v116, v117);
        if ((v154 != 0x7FFFFFFFFFFFFFFFLL) != (objc_msgSend_rangeOfCharacterFromSet_(v4, v155, qword_1EA3C9008, v156, v157, v158) != 0x7FFFFFFFFFFFFFFFLL))goto LABEL_56; {
      }
        }
      else
      {
        double v270 = (double)(unint64_t)v119;
        if (*(double *)(a1 + 240) <= (double)(unint64_t)v119) {
          double v270 = *(double *)(a1 + 240);
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = *(double *)(a1 + 232) / v270 < 0.5;
        char v271 = *(unsigned char *)(a1 + 274);
        uint64_t v272 = *(void *)(*(void *)(a1 + 120) + 8);
        if (v271) {
          char v271 = *(unsigned char *)(v272 + 24) != 0;
        }
        *(unsigned char *)(v272 + 24) = v271;
        if (v93) {
          goto LABEL_56;
        }
      }
      uint64_t v273 = objc_opt_class();
      int v278 = objc_msgSend_singleScriptCodeForString_(v273, v274, *(void *)(a1 + 32), v275, v276, v277);
      uint64_t v279 = objc_opt_class();
      int v284 = objc_msgSend_singleScriptCodeForString_(v279, v280, (uint64_t)v4, v281, v282, v283);
      if ((v278 & 0xFFFFFFFD) == 0x14 && v278 != v284 && (v284 & 0xFFFFFFFD) == 0x14)
      {
LABEL_56:
        id v122 = 0;
        goto LABEL_57;
      }
      uint64_t v285 = *(void **)(a1 + 72);
      if (v118 == 0x7FFFFFFFFFFFFFFFLL)
      {
        id v286 = v285;
      }
      else
      {
        objc_msgSend_substringWithRange_(v285, v113, v118, v119, v116, v117);
        id v286 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v342 = v286;
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 8) + 24))
      {
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24))
        {
          id v122 = v4;
          BOOL v294 = 0;
          int v295 = 1;
          goto LABEL_179;
        }
        uint64_t v296 = objc_msgSend_uppercaseStringWithLocale_(v4, v287, *(void *)(a1 + 88), v288, v289, v290);
      }
      else
      {
        if (!*(unsigned char *)(a1 + 272) || (MetaFlags & 0x200000) != 0 || (MetaFlags & 0x20) != 0 || (MetaFlags & 1) != 0)
        {
          id v122 = v4;
          if (*(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24))
          {
            int v295 = 0;
            BOOL v294 = *(unsigned char *)(a1 + 272) != 0;
            goto LABEL_179;
          }
LABEL_178:
          int v295 = 0;
          BOOL v294 = 0;
LABEL_179:
          buf[0] = 0;
          objc_msgSend_computeEditPenalizationFromString_toReferenceString_withSuffix_withCaseSensitivity_withFirstLetterCaseSensitivity_withDiacriticSensitivity_withDiacriticsCharSet_withConsumableStrokesCharSet_outputSuffix_lexiconExtraCharacters_firstLetterCaseFlipped_(CHLanguageUtilities, v293, (uint64_t)v342, (uint64_t)v122, (uint64_t)&stru_1F20141C8, 1, 1, 1, qword_1EA3C9018, *(void *)(a1 + 96), 0, 0, buf);
          double v298 = v297;
          double v98 = v98 + v297 / (double)(unint64_t)objc_msgSend_length(v342, v299, v300, v301, v302, v303);
          if (v118 == 0x7FFFFFFFFFFFFFFFLL)
          {
            int v309 = objc_msgSend_length(v342, v304, v305, v306, v307, v308);
            int v315 = objc_msgSend_length(v4, v310, v311, v312, v313, v314);
            uint64_t v320 = objc_msgSend_rangeOfCharacterFromSet_(*(void **)(a1 + 72), v316, qword_1EA3C9010, v317, v318, v319);
            int v321 = v309 - v315;
            if (v309 - v315 < 0) {
              int v321 = v315 - v309;
            }
            if (v320 == 0x7FFFFFFFFFFFFFFFLL) {
              double v98 = v98 + (double)v321 * 0.2;
            }
            else {
              double v98 = v98 + (double)v321 * 0.2 + 0.6;
            }
            goto LABEL_197;
          }
          int v326 = v295;
          if (v119 == objc_msgSend_length(*(void **)(a1 + 72), v304, v305, v306, v307, v308) && v118 == 0) {
            unsigned int v328 = v347;
          }
          else {
            unsigned int v328 = 0;
          }
          unsigned int v347 = v328;
          uint64_t v329 = objc_msgSend_lowercaseStringWithLocale_(*(void **)(a1 + 72), v322, *(void *)(a1 + 88), v323, v324, v325);
          objc_msgSend_stringByReplacingCharactersInRange_withString_(v329, v330, v118, v119, (uint64_t)v122, v331);
          uint64_t v332 = (NSString *)objc_claimAutoreleasedReturnValue();

          if (v294)
          {
            uint64_t v337 = uppercaseFirstLetter(v332);
          }
          else
          {
            if (!v326)
            {
LABEL_196:

              id v122 = v332;
LABEL_197:
              double v120 = v120 * v298;

              goto LABEL_57;
            }
            uint64_t v337 = objc_msgSend_uppercaseStringWithLocale_(v332, v333, *(void *)(a1 + 88), v334, v335, v336);
          }
          uint64_t v338 = (NSString *)v337;

          uint64_t v332 = v338;
          goto LABEL_196;
        }
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24))
        {
          id v122 = v4;
          int v295 = 0;
          BOOL v294 = 1;
          goto LABEL_179;
        }
        uint64_t v296 = uppercaseFirstLetter((NSString *)v4);
      }
      id v122 = (id)v296;
      goto LABEL_178;
    }
LABEL_52:
    BOOL v112 = objc_msgSend_rangeOfString_options_(*(void **)(a1 + 32), v94, (uint64_t)v4, 1, v95, v96) != 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_53;
  }
  CFRelease(v4);
LABEL_143:
}

void sub_1C4953894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1C49538C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1C49538E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49538F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1C4953924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495397C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49539A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49539BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4953BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TriangleRegressor::TriangleRegressor(TriangleRegressor *this, CHDrawing *a2, HTMLog *a3, float a4, float a5, float a6, float a7)
{
  uint64_t v301 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  *(void *)this = &unk_1F2011C50;
  *((float *)this + 8) = a4;
  *((float *)this + 9) = a5;
  *((float *)this + 10) = a6;
  *((float *)this + 11) = a7;
  uint64_t v279 = 0;
  uint64_t v280 = 0;
  uint64_t v281 = 0;
  *(float *)&double v17 = sub_1C49550B0(v12, &v279, 20.0);
  uint64_t v19 = v279;
  uint64_t v18 = v280;
  unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (v280 - v279);
  if (v20 < 7)
  {
    objc_msgSend_bounds(v12, (const char *)v280, v13, v14, v15, v16, v17);
    operator new();
  }
  uint64_t v21 = 0;
  double v22 = *(float *)&v17 * 1.5;
  unint64_t v23 = v20 - 4;
  uint64_t v24 = v279 + 16;
  unsigned int v25 = -1;
  do
  {
    if (v21 == v20 - 3) {
      break;
    }
    uint64_t v26 = &v279[5 * v21];
    double v27 = *v26;
    double v28 = v26[1];
    float v29 = v26[5] - *v26;
    float v30 = v26[6] - v28;
    float v31 = (float)(v30 * v30) + (float)(v29 * v29);
    float v32 = v30 / v31;
    if (v31 > 0.0)
    {
      float v33 = v29 / v31;
    }
    else
    {
      float v32 = v26[6] - v28;
      float v33 = v26[5] - *v26;
    }
    if (v20 - 1 > v21 + 3)
    {
      double v34 = sqrtf(v31);
      double v35 = v33;
      double v36 = v32;
      uint64_t v37 = v24;
      unint64_t v38 = v23;
      while (1)
      {
        float v39 = ((*v37 - v28) * v36 + (*(v37 - 1) - v27) * v35) * v34;
        BOOL v40 = v39 <= 0.0 || v22 <= v39;
        if (!v40) {
          break;
        }
        v37 += 5;
        if (!--v38) {
          goto LABEL_4;
        }
      }
      unsigned int v25 = v21;
    }
LABEL_4:
    ++v21;
    --v23;
    v24 += 5;
  }
  while ((v25 & 0x80000000) != 0);
  unsigned int v41 = v20 - 4;
  uint64_t v42 = -858993459 * (v280 - v279);
  int v43 = v20 - 3;
  do
  {
    if ((int)v42 < 4) {
      goto LABEL_33;
    }
    uint64_t v44 = v42 - 1;
    BOOL v45 = &v279[5 * (v42 - 1)];
    double v46 = *v45;
    double v47 = v45[1];
    uint64_t v48 = &v279[5 * (v42 - 2)];
    float v49 = *v48 - *v45;
    float v50 = v48[1] - v47;
    float v51 = (float)(v50 * v50) + (float)(v49 * v49);
    if (v51 > 0.0)
    {
      float v49 = v49 / v51;
      float v50 = v50 / v51;
    }
    uint64_t v52 = &v279[5 * v41 + 1];
    uint64_t v42 = v44;
    double v53 = sqrtf(v51);
    double v54 = v49;
    double v55 = v50;
    int v56 = v43;
    do
    {
      float v57 = ((*v52 - v47) * v55 + (*(v52 - 1) - v46) * v54) * v53;
      if (v57 > 0.0 && v22 > v57) {
        goto LABEL_19;
      }
      --v56;
      v52 -= 5;
    }
    while (v56 > 0);
    LODWORD(v44) = -1;
LABEL_19:
    --v41;
    --v43;
  }
  while ((v44 & 0x80000000) != 0);
  if (&v279[5 * v44] != v280)
  {
    uint64_t v280 = &v279[5 * v44];
    uint64_t v18 = v280;
  }
LABEL_33:
  if ((v25 & 0x80000000) != 0 || (0xCCCCCCCCCCCCCCCDLL * (v18 - v279) > v25 ? (BOOL v59 = v25 == 0) : (BOOL v59 = 1), v59))
  {
    uint64_t v277 = 0;
    int v278 = 0;
    uint64_t v276 = 0;
    int64_t v60 = (char *)v18 - (char *)v279;
    if (v18 == v279) {
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v207 = &v279[5 * v25];
    uint64_t v208 = v279;
    int64_t v209 = (char *)v18 - (char *)v207;
    if (v18 != v207)
    {
      memmove(v279, v207, v209 - 3);
      uint64_t v208 = v279;
    }
    uint64_t v210 = (double *)((char *)v19 + v209);
    uint64_t v280 = (double *)((char *)v19 + v209);
    uint64_t v19 = v208;
    uint64_t v277 = 0;
    int v278 = 0;
    uint64_t v276 = 0;
    int64_t v60 = (char *)v210 - (char *)v208;
    if (v210 == v208)
    {
LABEL_42:
      sub_1C49558A8((unint64_t *)&v276, (uint64_t)&v287);
      int v67 = *(double **)&v287;
      double v66 = v288;
      double v288 = 0.0;
      *(void *)uint64_t v289 = 0;
      double v287 = 0.0;
      if (v276)
      {
        uint64_t v277 = v276;
        operator delete(v276);
      }
      int64_t v68 = *(void *)&v66 - (void)v67;
      uint64_t v263 = v67;
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v66 - (void)v67) >> 3) < 3)
      {
        objc_msgSend_bounds(v12, v61, v62, v63, v64, v65);
        operator new();
      }
      for (v262[5] = this; v68 != 120; int64_t v68 = (char *)v198 + v199 - (char *)v67)
      {
        double v169 = *(double *)(*(void *)&v66 - 40);
        double v168 = *(double *)(*(void *)&v66 - 32);
        float v170 = v67[5] - v169;
        float v171 = v67[6] - v168;
        float v172 = (float)(v171 * v171) + (float)(v170 * v170);
        if (v172 > 0.0)
        {
          float v170 = v170 / v172;
          float v171 = v171 / v172;
        }
        uint64_t v173 = v68 / 40;
        float v174 = sqrtf(v172);
        double v175 = v67[1];
        float v176 = ((*v67 - v169) * v171 - (v175 - v168) * v170) * v174;
        float v177 = fabsf(v176);
        if ((unint64_t)(v173 - 1) < 2)
        {
          int v178 = 0;
        }
        else
        {
          int v178 = 0;
          uint64_t v179 = v67 + 6;
          uint64_t v180 = 2;
          double v181 = v67[1];
          double v182 = *v67;
          do
          {
            float v187 = v179[4] - v182;
            float v188 = v179[5] - v181;
            float v189 = (float)(v188 * v188) + (float)(v187 * v187);
            if (v189 > 0.0)
            {
              float v187 = v187 / v189;
              float v188 = v188 / v189;
            }
            double v183 = *(v179 - 1);
            double v184 = *v179;
            float v185 = ((v183 - v182) * v188 - (*v179 - v181) * v187) * sqrtf(v189);
            float v186 = fabsf(v185);
            if (v186 < v177) {
              int v178 = v180 - 1;
            }
            ++v180;
            if (v186 < v177) {
              float v177 = v186;
            }
            v179 += 5;
            double v181 = v184;
            double v182 = v183;
          }
          while (v173 != v180);
        }
        uint64_t v190 = &v67[5 * v173];
        double v192 = *(v190 - 10);
        double v191 = *(v190 - 9);
        float v193 = *v67 - v192;
        float v194 = v175 - v191;
        float v195 = (float)(v194 * v194) + (float)(v193 * v193);
        if (v195 > 0.0)
        {
          float v193 = v193 / v195;
          float v194 = v194 / v195;
        }
        float v196 = ((v169 - v192) * v194 - (v168 - v191) * v193) * sqrtf(v195);
        int v197 = v173 - 1;
        if (fabsf(v196) >= v177) {
          int v197 = v178;
        }
        unint64_t v198 = &v67[5 * v197];
        uint64_t v199 = *(void *)&v66 - (void)(v198 + 5);
        if (*(double **)&v66 != v198 + 5) {
          memmove(&v67[5 * v197], v198 + 5, v199 - 3);
        }
        *(void *)&v66 -= 40;
      }
      double v287 = 0.0;
      double v288 = 0.0;
      uint64_t v290 = 0;
      *(void *)&v289[4] = 0;
      double v291 = 0.0;
      double v292 = 0.0;
      uint64_t v295 = 0;
      unint64_t v294 = 0;
      double v296 = 0.0;
      double v297 = 0.0;
      uint64_t v300 = 0;
      unint64_t v299 = 0;
      double v69 = v67[1];
      double v71 = v67[5];
      double v70 = v67[6];
      double v287 = *v67;
      double v288 = v69;
      float v72 = v71 - v287;
      float v73 = v70 - v69;
      *(float *)&v289[4] = v72;
      *(float *)&v289[8] = v73;
      float v74 = (float)(v73 * v73) + (float)(v72 * v72);
      *(float *)&uint64_t v290 = v74;
      HIDWORD(v290) = sqrtf(v74);
      if (v74 > 0.0)
      {
        *(float *)&v289[4] = v72 / v74;
        *(float *)&v289[8] = v73 / v74;
      }
      v289[0] = 1;
      double v76 = v67[10];
      double v75 = v67[11];
      double v291 = v71;
      double v292 = v70;
      float v77 = v76 - v71;
      float v78 = v75 - v70;
      unint64_t v294 = __PAIR64__(LODWORD(v78), LODWORD(v77));
      float v79 = (float)(v78 * v78) + (float)(v77 * v77);
      *(float *)&uint64_t v295 = v79;
      HIDWORD(v295) = sqrtf(v79);
      if (v79 > 0.0)
      {
        *(float *)&unint64_t v294 = v77 / v79;
        *((float *)&v294 + 1) = v78 / v79;
      }
      char v293 = 1;
      double v80 = *v67;
      double v81 = v67[1];
      double v296 = v76;
      double v297 = v75;
      float v82 = v80 - v76;
      float v83 = v81 - v75;
      unint64_t v299 = __PAIR64__(LODWORD(v83), LODWORD(v82));
      float v84 = (float)(v83 * v83) + (float)(v82 * v82);
      *(float *)&uint64_t v300 = v84;
      HIDWORD(v300) = sqrtf(v84);
      if (v84 > 0.0)
      {
        *(float *)&unint64_t v299 = v82 / v84;
        *((float *)&v299 + 1) = v83 / v84;
      }
      v262[4] = v262;
      char v298 = 1;
      uint64_t v85 = MEMORY[0x1F4188790](((char *)v280 - (char *)v279) / 40);
      uint64_t v87 = (unsigned __int128)(((char *)v280 - (char *)v279) * (__int128)v86) >> 64;
      unint64_t v268 = (v87 >> 4) + ((unint64_t)v87 >> 63) - 1;
      uint64_t v88 = MEMORY[0x1F4188790](v85);
      uint64_t v95 = (char *)v262 - v94;
      double v96 = v93[5];
      double v97 = v93[6];
      float v98 = v96 - *v93;
      float v99 = v97 - v93[1];
      float v100 = (float)(v99 * v99) + (float)(v98 * v98);
      float v101 = sqrtf(v100);
      if (v100 > 0.0)
      {
        float v98 = v98 / v100;
        float v99 = v99 / v100;
      }
      LODWORD(v271) = *(_DWORD *)&v289[8];
      LODWORD(v272) = *(_DWORD *)&v289[4];
      float v102 = *(float *)&v294;
      LODWORD(v270) = HIDWORD(v290);
      *uint64_t v90 = fabsf(v101* (float)(*((float *)&v290 + 1)* (float)((float)(v99 * *(float *)&v289[8]) + (float)(*(float *)&v289[4] * v98))));
      float v103 = *((float *)&v294 + 1);
      float v104 = *((float *)&v295 + 1);
      *(float *)&uint64_t v269 = v102;
      uint64_t v105 = &v90[v92];
      *uint64_t v105 = fabsf(v101* (float)(*((float *)&v295 + 1) * (float)((float)(v99 * *((float *)&v294 + 1)) + (float)(v102 * v98))));
      unint64_t v106 = v299;
      float v107 = *((float *)&v300 + 1);
      float v108 = fabsf(v101* (float)(*((float *)&v300 + 1)* (float)((float)(v99 * *((float *)&v299 + 1)) + (float)(*(float *)&v299 * v98))));
      uint64_t v109 = &v90[2 * v92];
      *uint64_t v109 = v108;
      if ((unint64_t)(v91 - 3) < 0xFFFFFFFFFFFFFFFELL)
      {
        unint64_t v110 = 0;
        double v266 = v287;
        double v267 = *(float *)&v271;
        double v264 = *(float *)&v272;
        double v265 = v288;
        double v111 = *(float *)&v270;
        double v112 = v291;
        double v113 = v292;
        double v114 = *(float *)&v269;
        double v116 = v296;
        double v115 = v297;
        uint64_t v117 = v268;
        if (v268 <= 2) {
          uint64_t v117 = 2;
        }
        uint64_t v118 = v93 + 11;
        uint64_t v119 = v117 - 1;
        uint64_t v120 = (uint64_t)&v90[2 * v88 - 2];
        uint64_t v121 = (uint64_t)&v90[v88 - 1];
        uint64_t v122 = (uint64_t)&v95[8 * v91 - 4];
        uint64_t v123 = &v95[4 * v91];
        do
        {
          double v125 = v96;
          double v126 = v97;
          double v96 = *(v118 - 1);
          double v97 = *v118;
          float v127 = v96 - v125;
          float v128 = *v118 - v126;
          float v129 = (float)(v128 * v128) + (float)(v127 * v127);
          if (v129 > 0.0)
          {
            float v127 = v127 / v129;
            float v128 = v128 / v129;
          }
          uint64_t v130 = &v90[v110 / 4];
          float v131 = v90[v110 / 4];
          float v132 = *(float *)(v121 + v110);
          float v133 = v132 + 0.0;
          if ((float)(v132 + 0.0) <= (float)(v131 + 0.5)) {
            float v134 = v131 + 0.5;
          }
          else {
            float v134 = v132 + 0.0;
          }
          float v135 = v108 + 0.0;
          if ((float)(v108 + 0.0) <= v134) {
            float v136 = v134;
          }
          else {
            float v136 = v108 + 0.0;
          }
          *(_DWORD *)&v95[v110 + 4] = 0;
          if (v133 > (float)(v131 + 0.5) || v135 > v134)
          {
            if (v135 <= v134) {
              int v138 = 1;
            }
            else {
              int v138 = 2;
            }
            *(_DWORD *)&v95[v110 + 4] = v138;
          }
          float v139 = sqrtf(v129);
          double v140 = (float)(fabsf(v139* (float)(*(float *)&v270* (float)((float)(*(float *)&v271 * v128) + (float)(*(float *)&v272 * v127))))+ v136);
          double v141 = *(v118 - 6);
          double v142 = *(v118 - 5);
          float v143 = ((v141 - v266) * v267 - (v142 - v265) * v264) * v111;
          *(float *)&double v140 = v140 + fabsf(v143) * -0.005;
          v130[1] = *(float *)&v140;
          float v144 = v131 + 0.0;
          float v145 = *(float *)(v121 + v110);
          if ((float)(v145 + 0.5) <= v144) {
            float v146 = v144;
          }
          else {
            float v146 = v145 + 0.5;
          }
          if (v135 <= v146) {
            float v147 = v146;
          }
          else {
            float v147 = v135;
          }
          *(_DWORD *)&v123[v110] = 0;
          if ((float)(v145 + 0.5) > v144 || v135 > v146)
          {
            if (v135 <= v146) {
              int v148 = 1;
            }
            else {
              int v148 = 2;
            }
            *(_DWORD *)&v123[v110] = v148;
          }
          float v149 = ((v141 - v112) * v103 - (v142 - v113) * v114) * v104;
          float v150 = (float)(fabsf(v139 * (float)(v104 * (float)((float)(v103 * v128) + (float)(*(float *)&v269 * v127))))
                       + v147)
               + fabsf(v149) * -0.005;
          *(float *)(v121 + v110 + 4) = v150;
          *(_DWORD *)(v122 + v110) = 0;
          float v151 = *v130 + 0.0;
          float v152 = v145 + 0.0;
          if (v152 > v151)
          {
            *(_DWORD *)(v122 + v110) = 1;
            float v151 = v152;
          }
          float v153 = *(float *)(v120 + v110) + 0.5;
          if (v153 > v151)
          {
            *(_DWORD *)(v122 + v110) = 2;
            float v151 = v153;
          }
          float v124 = ((v141 - v116) * *((float *)&v106 + 1) - (v142 - v115) * *(float *)&v106) * v107;
          float v108 = (float)(fabsf(v139* (float)(v107* (float)((float)(*((float *)&v106 + 1) * v128) + (float)(*(float *)&v106 * v127))))+ v151)+ fabsf(v124) * -0.005;
          *(float *)(v120 + v110 + 4) = v108;
          v118 += 5;
          v110 += 4;
          --v119;
        }
        while (v119);
      }
      uint64_t v154 = 4 * v91 - 8;
      float v155 = *(float *)((char *)v90 + v154);
      float v156 = *(float *)((char *)v105 + v154);
      BOOL v157 = v156 > v155;
      if (v156 > v155) {
        float v155 = v156;
      }
      float v158 = *(float *)((char *)v109 + v154);
      uint64_t v286 = 0;
      long long v284 = 0u;
      long long v285 = 0u;
      long long v282 = 0u;
      long long v283 = 0u;
      if (v158 <= v155) {
        uint64_t v159 = v157;
      }
      else {
        uint64_t v159 = 2;
      }
      id v160 = (char **)&v282 + 3 * v159;
      uint64_t v161 = (_OWORD *)(v89 - 40);
      uint64_t v162 = v160 + 1;
      uint64_t v163 = v160[1];
      uint64_t v165 = v160 + 2;
      unint64_t v164 = (unint64_t)v160[2];
      char v271 = v95;
      v262[6] = v12;
      if ((unint64_t)v163 < v164)
      {
        *(_OWORD *)uint64_t v163 = *v161;
        uint64_t v166 = v163 + 16;
        uint64_t v167 = v263;
        goto LABEL_139;
      }
      uint64_t v200 = *v160;
      uint64_t v201 = (v163 - *v160) >> 4;
      unint64_t v202 = v201 + 1;
      if ((unint64_t)(v201 + 1) >> 60) {
        sub_1C494A220();
      }
      uint64_t v203 = v164 - (void)v200;
      if (v203 >> 3 > v202) {
        unint64_t v202 = v203 >> 3;
      }
      if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v204 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v204 = v202;
      }
      if (v204)
      {
        if (v204 >> 60) {
          sub_1C4949AA8();
        }
        uint64_t v205 = v159;
        uint64_t v206 = (char *)operator new(16 * v204);
      }
      else
      {
        uint64_t v205 = v159;
        uint64_t v206 = 0;
      }
      uint64_t v211 = &v206[16 * v201];
      uint64_t v212 = &v206[16 * v204];
      *(_OWORD *)uint64_t v211 = *v161;
      uint64_t v166 = v211 + 16;
      if (v163 == v200)
      {
        uint64_t v167 = v263;
        *id v160 = v211;
        *uint64_t v162 = v166;
        *uint64_t v165 = v212;
        uint64_t v95 = v271;
        if (!v163) {
          goto LABEL_138;
        }
      }
      else
      {
        uint64_t v167 = v263;
        do
        {
          *((_OWORD *)v211 - 1) = *((_OWORD *)v163 - 1);
          v211 -= 16;
          v163 -= 16;
        }
        while (v163 != v200);
        uint64_t v163 = *v160;
        *id v160 = v211;
        *uint64_t v162 = v166;
        *uint64_t v165 = v212;
        uint64_t v95 = v271;
        if (!v163) {
          goto LABEL_138;
        }
      }
      operator delete(v163);
LABEL_138:
      uint64_t v159 = v205;
LABEL_139:
      *uint64_t v162 = v166;
      unint64_t v213 = 0xCCCCCCCCCCCCCCCDLL * (v280 - v279);
      if ((int)v213 >= 3)
      {
        uint64_t v214 = (v213 - 2);
        while (1)
        {
          uint64_t v216 = (uint64_t *)&v282 + 3 * (int)v159;
          uint64_t v217 = &v279[5 * v214];
          uint64_t v219 = v216 + 1;
          uint64_t v218 = (_OWORD *)v216[1];
          uint64_t v221 = v216 + 2;
          unint64_t v220 = v216[2];
          if ((unint64_t)v218 < v220)
          {
            *uint64_t v218 = *(_OWORD *)v217;
            uint64_t v222 = v218 + 1;
            goto LABEL_162;
          }
          uint64_t v223 = (_OWORD *)*v216;
          uint64_t v224 = ((uint64_t)v218 - *v216) >> 4;
          unint64_t v225 = v224 + 1;
          if ((unint64_t)(v224 + 1) >> 60) {
            goto LABEL_203;
          }
          uint64_t v226 = v220 - (void)v223;
          if (v226 >> 3 > v225) {
            unint64_t v225 = v226 >> 3;
          }
          unint64_t v227 = (unint64_t)v226 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v225;
          uint64_t v272 = (double *)v159;
          if (v227) {
            break;
          }
          double v228 = 0;
          double v229 = (char *)(16 * v224);
          *(_OWORD *)(16 * v224) = *(_OWORD *)v217;
          uint64_t v230 = 16 * v224;
          if (v218 != v223) {
            goto LABEL_157;
          }
LABEL_159:
          *uint64_t v216 = v230;
          uint64_t v222 = v229 + 16;
          *uint64_t v219 = v229 + 16;
          void *v221 = &v228[16 * v227];
          uint64_t v167 = v263;
          if (v218) {
            operator delete(v218);
          }
          uint64_t v95 = v271;
          uint64_t v159 = (uint64_t)v272;
LABEL_162:
          *uint64_t v219 = v222;
          uint64_t v231 = *(unsigned int *)&v95[4 * v268 * (int)v159 + 4 * v214];
          if (v159 == v231) {
            goto LABEL_143;
          }
          double v232 = (uint64_t *)&v282 + 3 * (int)v231;
          double v233 = &v279[5 * v214];
          double v234 = v232 + 1;
          unint64_t v235 = (_OWORD *)v232[1];
          uint64_t v237 = v232 + 2;
          unint64_t v236 = v232[2];
          if ((unint64_t)v235 >= v236)
          {
            uint64_t v238 = (_OWORD *)*v232;
            uint64_t v239 = ((uint64_t)v235 - *v232) >> 4;
            unint64_t v240 = v239 + 1;
            if ((unint64_t)(v239 + 1) >> 60) {
LABEL_203:
            }
              sub_1C494A220();
            uint64_t v241 = v236 - (void)v238;
            if (v241 >> 3 > v240) {
              unint64_t v240 = v241 >> 3;
            }
            if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v242 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v242 = v240;
            }
            if (v242)
            {
              uint64_t v272 = &v279[5 * v214];
              if (v242 >> 60) {
LABEL_204:
              }
                sub_1C4949AA8();
              unint64_t v243 = v242;
              uint64_t v244 = (char *)operator new(16 * v242);
              unint64_t v242 = v243;
              uint64_t v245 = &v244[16 * v239];
              *(_OWORD *)uint64_t v245 = *(_OWORD *)v272;
              uint64_t v246 = (uint64_t)v245;
              if (v235 != v238)
              {
LABEL_173:
                uint64_t v95 = v271;
                do
                {
                  *(_OWORD *)(v246 - 16) = *(v235 - 1);
                  v246 -= 16;
                  --v235;
                }
                while (v235 != v238);
                unint64_t v235 = (_OWORD *)*v232;
LABEL_178:
                *double v232 = v246;
                uint64_t v215 = v245 + 16;
                *double v234 = v245 + 16;
                void *v237 = &v244[16 * v242];
                uint64_t v167 = v263;
                if (v235) {
                  operator delete(v235);
                }
                goto LABEL_142;
              }
            }
            else
            {
              uint64_t v244 = 0;
              uint64_t v245 = (char *)(16 * v239);
              *(_OWORD *)(16 * v239) = *(_OWORD *)v233;
              uint64_t v246 = 16 * v239;
              if (v235 != v238) {
                goto LABEL_173;
              }
            }
            uint64_t v95 = v271;
            goto LABEL_178;
          }
          *unint64_t v235 = *(_OWORD *)v233;
          uint64_t v215 = v235 + 1;
LABEL_142:
          *double v234 = v215;
          uint64_t v159 = v231;
LABEL_143:
          BOOL v40 = v214-- <= 1;
          if (v40) {
            goto LABEL_181;
          }
        }
        if (v227 >> 60) {
          goto LABEL_204;
        }
        double v228 = (char *)operator new(16 * v227);
        double v229 = &v228[16 * v224];
        *(_OWORD *)double v229 = *(_OWORD *)v217;
        uint64_t v230 = (uint64_t)v229;
        if (v218 == v223) {
          goto LABEL_159;
        }
        do
        {
LABEL_157:
          *(_OWORD *)(v230 - 16) = *(v218 - 1);
          v230 -= 16;
          --v218;
        }
        while (v218 != v223);
        uint64_t v218 = (_OWORD *)*v216;
        goto LABEL_159;
      }
LABEL_181:
      uint64_t v273 = 0;
      uint64_t v274 = 0;
      uint64_t v275 = 0;
      uint64_t v247 = (const void *)v282;
      int64_t v248 = *((void *)&v282 + 1) - v282;
      if (*((void *)&v282 + 1) != (void)v282)
      {
        if (v248 < 0) {
          goto LABEL_205;
        }
        uint64_t v273 = (double *)operator new(*((void *)&v282 + 1) - v282);
        uint64_t v274 = v273;
        uint64_t v249 = &v273[2 * (v248 >> 4)];
        uint64_t v275 = v249;
        memcpy(v273, v247, v248);
        uint64_t v274 = v249;
      }
      sub_1C4C26B6C((uint64_t)&v287, &v273, 0);
      if (v273)
      {
        uint64_t v274 = v273;
        operator delete(v273);
      }
      uint64_t v273 = 0;
      uint64_t v274 = 0;
      uint64_t v275 = 0;
      uint64_t v250 = (const void *)*((void *)&v283 + 1);
      int64_t v251 = v284 - *((void *)&v283 + 1);
      if ((void)v284 != *((void *)&v283 + 1))
      {
        if (v251 < 0) {
          goto LABEL_205;
        }
        uint64_t v273 = (double *)operator new(v284 - *((void *)&v283 + 1));
        uint64_t v274 = v273;
        uint64_t v252 = &v273[2 * (v251 >> 4)];
        uint64_t v275 = v252;
        memcpy(v273, v250, v251);
        uint64_t v274 = v252;
      }
      sub_1C4C26B6C((uint64_t)&v291, &v273, 0);
      if (v273)
      {
        uint64_t v274 = v273;
        operator delete(v273);
      }
      uint64_t v273 = 0;
      uint64_t v274 = 0;
      uint64_t v275 = 0;
      uint64_t v253 = (const void *)v285;
      int64_t v254 = *((void *)&v285 + 1) - v285;
      if (*((void *)&v285 + 1) == (void)v285)
      {
LABEL_194:
        sub_1C4C26B6C((uint64_t)&v296, &v273, 0);
        if (v273)
        {
          uint64_t v274 = v273;
          operator delete(v273);
        }
        float v256 = *(float *)&v289[4] * *((float *)&v294 + 1) - *(float *)&v294 * *(float *)&v289[8];
        if (v256 != 0.0)
        {
          float v257 = *(float *)&v294 * *((float *)&v299 + 1) - *(float *)&v299 * *((float *)&v294 + 1);
          if (v257 != 0.0)
          {
            float v258 = *(float *)&v289[8] * *(float *)&v299 - *(float *)&v289[4] * *((float *)&v299 + 1);
            if (v258 != 0.0)
            {
              *(float *)&uint64_t v272 = *(float *)&v289[8] * *(float *)&v299 - *(float *)&v289[4] * *((float *)&v299 + 1);
              *(double *)&v262[2] = v287;
              *(double *)&v262[3] = v288;
              *(double *)uint64_t v262 = v292;
              *(double *)&v262[1] = v291;
              double v266 = v167[5];
              double v267 = v297;
              double v259 = v167[6];
              double v264 = v296;
              double v265 = v259;
              uint64_t v260 = *((void *)v167 + 10);
              unint64_t v268 = *((void *)v167 + 11);
              uint64_t v269 = v260;
              uint64_t v261 = *(char **)v167;
              uint64_t v270 = *((void *)v167 + 1);
              char v271 = v261;
              operator new();
            }
          }
        }
        operator new();
      }
      if ((v254 & 0x8000000000000000) == 0)
      {
        uint64_t v273 = (double *)operator new(*((void *)&v285 + 1) - v285);
        uint64_t v274 = v273;
        uint64_t v255 = &v273[2 * (v254 >> 4)];
        uint64_t v275 = v255;
        memcpy(v273, v253, v254);
        uint64_t v274 = v255;
        goto LABEL_194;
      }
LABEL_205:
      sub_1C494A220();
    }
  }
  if (0xCCCCCCCCCCCCCCCDLL * (v60 >> 3) >= 0x666666666666667) {
    sub_1C494A220();
  }
  uint64_t v276 = (char *)operator new(v60);
  int v278 = &v276[8 * (v60 >> 3)];
  memcpy(v276, v19, v60 - 3);
  uint64_t v277 = v278;
  goto LABEL_42;
}

void sub_1C4954FB0(_Unwind_Exception *a1)
{
  double v5 = *(void **)(v1 + 256);
  if (v5)
  {
    *(void *)(v1 + 264) = v5;
    operator delete(v5);
    unint64_t v2 = *(void **)(v1 + 232);
    if (v2)
    {
LABEL_8:
      *(void *)(v1 + 240) = v2;
      operator delete(v2);
      BOOL v3 = *(void **)(v1 + 208);
      if (v3)
      {
LABEL_9:
        *(void *)(v1 + 216) = v3;
        operator delete(v3);
        if (!*(void *)(v1 + 56)) {
          goto LABEL_11;
        }
        goto LABEL_10;
      }
LABEL_4:
      if (!*(void *)(v1 + 56))
      {
LABEL_11:
        double v6 = *(void **)(v1 + 184);
        if (v6)
        {
          *(void *)(v1 + 192) = v6;
          operator delete(v6);
        }

        _Unwind_Resume(a1);
      }
LABEL_10:
      operator delete(*(void **)(v1 + 56));
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v2 = *(void **)(v1 + 232);
    if (v2) {
      goto LABEL_8;
    }
  }
  BOOL v3 = *(void **)(v1 + 208);
  if (v3) {
    goto LABEL_9;
  }
  goto LABEL_4;
}

float sub_1C49550B0(void *a1, double **a2, float a3)
{
  id v5 = a1;
  objc_msgSend_bounds(v5, v6, v7, v8, v9, v10);
  double v18 = v17;
  double v20 = v19;
  double v21 = v15;
  double v22 = v16;
  if (v15 >= v16) {
    double v23 = v15;
  }
  else {
    double v23 = v16;
  }
  unint64_t v24 = objc_msgSend_pointCountForStrokeIndex_(v5, v11, 0, v12, v13, v14);
  unint64_t v28 = v24;
  float v29 = *a2;
  if (0xCCCCCCCCCCCCCCCDLL * (a2[2] - *a2) < v24)
  {
    if (v24 > 0x666666666666666) {
      sub_1C494A220();
    }
    float v30 = (char *)a2[1];
    float v31 = (char *)operator new(40 * v24);
    float v32 = &v31[v30 - (char *)v29];
    float v33 = v32;
    if (v30 != (char *)v29)
    {
      double v34 = &v31[v30 - (char *)v29];
      do
      {
        long long v35 = *(_OWORD *)(v30 - 40);
        long long v36 = *(_OWORD *)(v30 - 24);
        float v33 = v34 - 40;
        *(void *)(v34 - 11) = *(void *)(v30 - 11);
        *(_OWORD *)(v34 - 24) = v36;
        *(_OWORD *)(v34 - 40) = v35;
        v30 -= 40;
        v34 -= 40;
      }
      while (v30 != (char *)v29);
    }
    *a2 = (double *)v33;
    a2[1] = (double *)v32;
    a2[2] = (double *)&v31[40 * v28];
    if (v29) {
      operator delete(v29);
    }
  }
  objc_msgSend_pointForStrokeIndex_pointIndex_(v5, v25, 0, 0, v26, v27);
  uint64_t v42 = v40;
  uint64_t v43 = v41;
  BOOL v45 = (char *)a2[1];
  unint64_t v44 = (unint64_t)a2[2];
  if ((unint64_t)v45 >= v44)
  {
    double v47 = *a2;
    unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)*a2) >> 3);
    unint64_t v49 = v48 + 1;
    if (v48 + 1 > 0x666666666666666) {
      sub_1C494A220();
    }
    unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - (void)v47) >> 3);
    if (2 * v50 > v49) {
      unint64_t v49 = 2 * v50;
    }
    if (v50 >= 0x333333333333333) {
      unint64_t v51 = 0x666666666666666;
    }
    else {
      unint64_t v51 = v49;
    }
    if (v51)
    {
      if (v51 > 0x666666666666666) {
        sub_1C4949AA8();
      }
      uint64_t v52 = (char *)operator new(40 * v51);
    }
    else
    {
      uint64_t v52 = 0;
    }
    double v53 = &v52[40 * v48];
    *(void *)double v53 = v42;
    *((void *)v53 + 1) = v43;
    *((void *)v53 + 2) = 0;
    *((_DWORD *)v53 + 6) = 1;
    v53[28] = 0;
    *((_DWORD *)v53 + 8) = 0;
    double v46 = v53 + 40;
    if (v45 != (char *)v47)
    {
      do
      {
        long long v54 = *(_OWORD *)(v45 - 40);
        long long v55 = *(_OWORD *)(v45 - 24);
        *(void *)(v53 - 11) = *(void *)(v45 - 11);
        *(_OWORD *)(v53 - 24) = v55;
        *(_OWORD *)(v53 - 40) = v54;
        v53 -= 40;
        v45 -= 40;
      }
      while (v45 != (char *)v47);
      BOOL v45 = (char *)*a2;
    }
    *a2 = (double *)v53;
    a2[1] = (double *)v46;
    a2[2] = (double *)&v52[40 * v51];
    if (v45) {
      operator delete(v45);
    }
  }
  else
  {
    *(void *)BOOL v45 = v40;
    *((void *)v45 + 1) = v41;
    *((void *)v45 + 2) = 0;
    *((_DWORD *)v45 + 6) = 1;
    v45[28] = 0;
    double v46 = v45 + 40;
    *((_DWORD *)v45 + 8) = 0;
  }
  a2[1] = (double *)v46;
  objc_msgSend_pointForStrokeIndex_pointIndex_(v5, v37, 0, 0, v38, v39);
  float v60 = v23 / a3;
  float v61 = v18 + 0.1;
  float v62 = v20 + 0.1;
  float v130 = v62;
  float v131 = v61;
  float v63 = v18 + v21 + -0.1;
  float v64 = v20 + v22 + -0.1;
  float v66 = v65;
  float v68 = v67;
  unint64_t v69 = 1;
  float v70 = 0.0;
  int v71 = 1;
  int v72 = 1;
  while (objc_msgSend_pointCountForStrokeIndex_(v5, v56, 0, v57, v58, v59) > v69)
  {
    objc_msgSend_pointForStrokeIndex_pointIndex_(v5, v74, 0, v69, v76, v77);
    float v79 = v78;
    float v81 = v80;
    float v70 = v70
        + sqrtf((float)((float)(v81 - v68) * (float)(v81 - v68)) + (float)((float)(v79 - v66) * (float)(v79 - v66)));
    if (v70 > v60)
    {
      double v82 = v79;
      double v83 = v81;
      uint64_t v85 = a2[1];
      unint64_t v84 = (unint64_t)a2[2];
      if ((unint64_t)v85 < v84)
      {
        *uint64_t v85 = v82;
        v85[1] = v83;
        *((_DWORD *)v85 + 4) = v71;
        *((_DWORD *)v85 + 5) = v69;
        *((_DWORD *)v85 + 6) = v72;
        *((unsigned char *)v85 + 28) = 0;
        float v73 = v85 + 5;
        ++v71;
        *((_DWORD *)v85 + 8) = 0;
      }
      else
      {
        uint64_t v86 = *a2;
        unint64_t v87 = 0xCCCCCCCCCCCCCCCDLL * (v85 - *a2);
        unint64_t v88 = v87 + 1;
        if (v87 + 1 > 0x666666666666666) {
          sub_1C494A220();
        }
        unint64_t v89 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v84 - (void)v86) >> 3);
        if (2 * v89 > v88) {
          unint64_t v88 = 2 * v89;
        }
        if (v89 >= 0x333333333333333) {
          unint64_t v90 = 0x666666666666666;
        }
        else {
          unint64_t v90 = v88;
        }
        if (v90)
        {
          if (v90 > 0x666666666666666) {
            sub_1C4949AA8();
          }
          uint64_t v91 = (char *)operator new(40 * v90);
        }
        else
        {
          uint64_t v91 = 0;
        }
        float v107 = &v91[40 * v87];
        *(double *)float v107 = v82;
        *((double *)v107 + 1) = v83;
        *((_DWORD *)v107 + 4) = v71;
        *((_DWORD *)v107 + 5) = v69;
        *((_DWORD *)v107 + 6) = v72;
        v107[28] = 0;
        *((_DWORD *)v107 + 8) = 0;
        float v108 = (double *)v107;
        if (v85 != v86)
        {
          do
          {
            long long v109 = *(_OWORD *)(v85 - 5);
            long long v110 = *(_OWORD *)(v85 - 3);
            *(double *)((char *)v108 - 11) = *(double *)((char *)v85 - 11);
            *(_OWORD *)(v108 - 3) = v110;
            *(_OWORD *)(v108 - 5) = v109;
            v108 -= 5;
            v85 -= 5;
          }
          while (v85 != v86);
          uint64_t v85 = *a2;
        }
        float v73 = (double *)(v107 + 40);
        *a2 = v108;
        a2[1] = (double *)(v107 + 40);
        a2[2] = (double *)&v91[40 * v90];
        if (v85) {
          operator delete(v85);
        }
        ++v71;
      }
      goto LABEL_30;
    }
    if (v79 < v131 || v79 > v63 || v81 < v130 || v81 > v64)
    {
      float v73 = a2[1];
      unint64_t v95 = (unint64_t)a2[2];
      double v96 = (char *)(v73 - 5);
      int v97 = *((_DWORD *)v73 - 4);
      a2[1] = v73 - 5;
      int v98 = v71 - 1;
      double v99 = v79;
      double v100 = v81;
      if ((unint64_t)(v73 - 5) >= v95)
      {
        float v101 = *a2;
        unint64_t v102 = 0xCCCCCCCCCCCCCCCDLL * ((v96 - (char *)*a2) >> 3);
        unint64_t v103 = v102 + 1;
        if (v102 + 1 > 0x666666666666666) {
          sub_1C494A220();
        }
        unint64_t v104 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v95 - (void)v101) >> 3);
        if (2 * v104 > v103) {
          unint64_t v103 = 2 * v104;
        }
        if (v104 >= 0x333333333333333) {
          unint64_t v105 = 0x666666666666666;
        }
        else {
          unint64_t v105 = v103;
        }
        if (v105)
        {
          if (v105 > 0x666666666666666) {
            sub_1C4949AA8();
          }
          unint64_t v106 = (char *)operator new(40 * v105);
        }
        else
        {
          unint64_t v106 = 0;
        }
        double v111 = &v106[40 * v102];
        *(double *)double v111 = v99;
        *((double *)v111 + 1) = v100;
        *((_DWORD *)v111 + 4) = v98;
        *((_DWORD *)v111 + 5) = v69;
        double v112 = &v106[40 * v105];
        *((_DWORD *)v111 + 6) = v97;
        v111[28] = 0;
        *((_DWORD *)v111 + 8) = 0;
        float v73 = (double *)(v111 + 40);
        if (v96 == (char *)v101)
        {
          *a2 = (double *)v111;
          a2[1] = v73;
          a2[2] = (double *)v112;
        }
        else
        {
          do
          {
            long long v113 = *(_OWORD *)(v96 - 40);
            long long v114 = *(_OWORD *)(v96 - 24);
            *(void *)(v111 - 11) = *(void *)(v96 - 11);
            *(_OWORD *)(v111 - 24) = v114;
            *(_OWORD *)(v111 - 40) = v113;
            v111 -= 40;
            v96 -= 40;
          }
          while (v96 != (char *)v101);
          double v96 = (char *)*a2;
          *a2 = (double *)v111;
          a2[1] = v73;
          a2[2] = (double *)v112;
          if (!v96) {
            goto LABEL_30;
          }
        }
        operator delete(v96);
      }
      else
      {
        *(v73 - 5) = v99;
        *(v73 - 4) = v100;
        *((_DWORD *)v73 - 6) = v98;
        *((_DWORD *)v73 - 5) = v69;
        *((_DWORD *)v73 - 4) = v97;
        *((unsigned char *)v73 - 12) = 0;
        *((_DWORD *)v73 - 2) = 0;
      }
LABEL_30:
      int v72 = 0;
      a2[1] = v73;
      float v70 = 0.0;
    }
    ++v72;
    ++v69;
    float v66 = v79;
    float v68 = v81;
  }
  uint64_t v115 = objc_msgSend_pointCountForStrokeIndex_(v5, v74, 0, v75, v76, v77);
  objc_msgSend_pointForStrokeIndex_pointIndex_(v5, v116, 0, v115 - 1, v117, v118);
  uint64_t v119 = (char *)a2[1];
  *((void *)v119 - 5) = v120;
  *((void *)v119 - 4) = v121;
  int v126 = objc_msgSend_pointCountForStrokeIndex_(v5, v122, 0, v123, v124, v125);
  float v127 = (char *)a2[1];
  int v128 = *((_DWORD *)v127 - 4) + v72;
  *((_DWORD *)v127 - 5) = v126 - 1;
  *((_DWORD *)v127 - 4) = v128;

  return v60;
}

void sub_1C4955738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4955748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4955758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4955768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4955778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4955788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4955798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49557A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49557B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49557C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49557D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TriangleRegressor::provideAnAnswer(TriangleRegressor *this, CHDrawing *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_1C49558A8(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *a1;
  id v4 = (long long *)a1[1];
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v4 - v3) >> 3);
  *(void *)a2 = 0;
  if (v6 < 4) {
    return;
  }
  long long v109 = sub_1C495629C;
  unint64_t v7 = 126 - 2 * __clz(v6);
  if (v4 == (long long *)v3) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  sub_1C49562BC(v3, v4, (unsigned int (**)(uint64_t, char *))&v109, v8, 1);
  unint64_t v9 = *a1;
  uint64_t v11 = *(char **)(a2 + 8);
  uint64_t v10 = *(char **)(a2 + 16);
  if (v11 >= v10)
  {
    double v15 = *(char **)a2;
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v11[-*(void *)a2] >> 3);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0x666666666666666) {
      goto LABEL_106;
    }
    unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v15) >> 3);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x333333333333333) {
      unint64_t v19 = 0x666666666666666;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 > 0x666666666666666) {
        goto LABEL_105;
      }
      double v20 = (char *)operator new(40 * v19);
    }
    else
    {
      double v20 = 0;
    }
    double v21 = &v20[40 * v16];
    long long v22 = *(_OWORD *)v9;
    long long v23 = *(_OWORD *)(v9 + 16);
    *((void *)v21 + 4) = *(void *)(v9 + 32);
    uint64_t v10 = &v20[40 * v19];
    *(_OWORD *)double v21 = v22;
    *((_OWORD *)v21 + 1) = v23;
    uint64_t v14 = v21 + 40;
    if (v11 != v15)
    {
      do
      {
        long long v24 = *(_OWORD *)(v11 - 40);
        long long v25 = *(_OWORD *)(v11 - 24);
        *(void *)(v21 - 11) = *(void *)(v11 - 11);
        *(_OWORD *)(v21 - 24) = v25;
        *(_OWORD *)(v21 - 40) = v24;
        v21 -= 40;
        v11 -= 40;
      }
      while (v11 != v15);
      uint64_t v11 = v15;
    }
    *(void *)a2 = v21;
    *(void *)(a2 + 8) = v14;
    *(void *)(a2 + 16) = v10;
    if (v11)
    {
      operator delete(v11);
      uint64_t v10 = *(char **)(a2 + 16);
    }
  }
  else
  {
    long long v12 = *(_OWORD *)v9;
    long long v13 = *(_OWORD *)(v9 + 16);
    *((void *)v11 + 4) = *(void *)(v9 + 32);
    *(_OWORD *)uint64_t v11 = v12;
    *((_OWORD *)v11 + 1) = v13;
    uint64_t v14 = v11 + 40;
  }
  *(void *)(a2 + 8) = v14;
  uint64_t v26 = *a1 + 40;
  if (v14 < v10)
  {
    long long v27 = *(_OWORD *)v26;
    long long v28 = *(_OWORD *)(*a1 + 56);
    *((void *)v14 + 4) = *(void *)(*a1 + 72);
    *(_OWORD *)uint64_t v14 = v27;
    *((_OWORD *)v14 + 1) = v28;
    float v29 = v14 + 40;
    goto LABEL_40;
  }
  float v30 = *(char **)a2;
  unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v14[-*(void *)a2] >> 3);
  unint64_t v32 = v31 + 1;
  if (v31 + 1 > 0x666666666666666) {
LABEL_106:
  }
    sub_1C494A220();
  unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v30) >> 3);
  if (2 * v33 > v32) {
    unint64_t v32 = 2 * v33;
  }
  if (v33 >= 0x333333333333333) {
    unint64_t v34 = 0x666666666666666;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v34)
  {
    if (v34 <= 0x666666666666666)
    {
      long long v35 = (char *)operator new(40 * v34);
      goto LABEL_34;
    }
LABEL_105:
    sub_1C4949AA8();
  }
  long long v35 = 0;
LABEL_34:
  long long v36 = &v35[40 * v31];
  long long v37 = *(_OWORD *)v26;
  long long v38 = *(_OWORD *)(v26 + 16);
  *((void *)v36 + 4) = *(void *)(v26 + 32);
  uint64_t v39 = &v35[40 * v34];
  *(_OWORD *)long long v36 = v37;
  *((_OWORD *)v36 + 1) = v38;
  float v29 = v36 + 40;
  if (v14 == v30)
  {
    *(void *)a2 = v36;
    *(void *)(a2 + 8) = v29;
    float v30 = v14;
    *(void *)(a2 + 16) = v39;
LABEL_39:
    operator delete(v30);
    goto LABEL_40;
  }
  do
  {
    long long v40 = *(_OWORD *)(v14 - 40);
    long long v41 = *(_OWORD *)(v14 - 24);
    *(void *)(v36 - 11) = *(void *)(v14 - 11);
    *(_OWORD *)(v36 - 24) = v41;
    *(_OWORD *)(v36 - 40) = v40;
    v36 -= 40;
    v14 -= 40;
  }
  while (v14 != v30);
  *(void *)a2 = v36;
  *(void *)(a2 + 8) = v29;
  *(void *)(a2 + 16) = v39;
  if (v30) {
    goto LABEL_39;
  }
LABEL_40:
  *(void *)(a2 + 8) = v29;
  uint64_t v42 = *a1 + 40 * v6 - 40;
  uint64_t v43 = operator new(0x28uLL);
  long long v44 = *(_OWORD *)v42;
  long long v45 = *(_OWORD *)(v42 + 16);
  v43[4] = *(void *)(v42 + 32);
  *(_OWORD *)uint64_t v43 = v44;
  *((_OWORD *)v43 + 1) = v45;
  double v46 = (char *)(v43 + 5);
  __dst = v43;
  uint64_t v47 = 40 * v6 + *a1 - 80;
  unint64_t v48 = v43;
  unint64_t v49 = (char *)operator new(0x50uLL);
  unint64_t v50 = &v49[8 * ((v46 - __dst) >> 3)];
  long long v51 = *(_OWORD *)v47;
  long long v52 = *(_OWORD *)(v47 + 16);
  *((void *)v50 + 4) = *(void *)(v47 + 32);
  *(_OWORD *)unint64_t v50 = v51;
  *((_OWORD *)v50 + 1) = v52;
  double v53 = v50 + 40;
  if (v46 == __dst)
  {
    __dsta = &v49[8 * ((v46 - __dst) >> 3)];
    unint64_t v48 = v46;
    float v108 = v49 + 80;
LABEL_45:
    operator delete(v48);
    goto LABEL_46;
  }
  do
  {
    long long v54 = *(_OWORD *)(v46 - 40);
    long long v55 = *(_OWORD *)(v46 - 24);
    *(void *)(v50 - 11) = *(void *)(v46 - 11);
    *(_OWORD *)(v50 - 24) = v55;
    *(_OWORD *)(v50 - 40) = v54;
    v50 -= 40;
    v46 -= 40;
  }
  while (v46 != __dst);
  __dsta = v50;
  float v108 = v49 + 80;
  if (v48) {
    goto LABEL_45;
  }
LABEL_46:
  float v107 = v53;
  int v56 = *(double **)(a2 + 8);
  for (uint64_t i = 2; i != v6; ++i)
  {
    uint64_t v58 = *a1 + 40 * i;
    unint64_t v59 = *(void *)(a2 + 16);
    if ((unint64_t)v56 >= v59)
    {
      float v63 = *(char **)a2;
      unint64_t v64 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v56 - *(void *)a2) >> 3);
      unint64_t v65 = v64 + 1;
      if (v64 + 1 > 0x666666666666666) {
        sub_1C494A220();
      }
      unint64_t v66 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v59 - (void)v63) >> 3);
      if (2 * v66 > v65) {
        unint64_t v65 = 2 * v66;
      }
      if (v66 >= 0x333333333333333) {
        unint64_t v67 = 0x666666666666666;
      }
      else {
        unint64_t v67 = v65;
      }
      if (v67)
      {
        if (v67 > 0x666666666666666) {
          sub_1C4949AA8();
        }
        float v68 = (char *)operator new(40 * v67);
      }
      else
      {
        float v68 = 0;
      }
      unint64_t v69 = &v68[40 * v64];
      long long v70 = *(_OWORD *)v58;
      long long v71 = *(_OWORD *)(v58 + 16);
      *((void *)v69 + 4) = *(void *)(v58 + 32);
      *(_OWORD *)unint64_t v69 = v70;
      *((_OWORD *)v69 + 1) = v71;
      int v72 = v69;
      if (v56 != (double *)v63)
      {
        do
        {
          long long v73 = *(_OWORD *)(v56 - 5);
          long long v74 = *(_OWORD *)(v56 - 3);
          *(double *)(v72 - 11) = *(double *)((char *)v56 - 11);
          *(_OWORD *)(v72 - 24) = v74;
          *(_OWORD *)(v72 - 40) = v73;
          v72 -= 40;
          v56 -= 5;
        }
        while (v56 != (double *)v63);
        int v56 = (double *)v63;
      }
      float v62 = (double *)(v69 + 40);
      *(void *)a2 = v72;
      *(void *)(a2 + 8) = v69 + 40;
      *(void *)(a2 + 16) = &v68[40 * v67];
      if (v56) {
        operator delete(v56);
      }
    }
    else
    {
      long long v60 = *(_OWORD *)v58;
      long long v61 = *(_OWORD *)(v58 + 16);
      v56[4] = *(double *)(v58 + 32);
      *(_OWORD *)int v56 = v60;
      *((_OWORD *)v56 + 1) = v61;
      float v62 = v56 + 5;
    }
    *(void *)(a2 + 8) = v62;
    uint64_t v75 = *(char **)a2;
    unint64_t v76 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v62 - *(void *)a2) >> 3);
    if (v76 >= 3)
    {
      double v77 = *(v62 - 5);
      double v78 = *(v62 - 4);
      do
      {
        float v79 = &v75[40 * v76];
        if ((*((double *)v79 - 10) - *((double *)v79 - 15)) * (v78 - *((double *)v79 - 14))
           - (*((double *)v79 - 9) - *((double *)v79 - 14)) * (v77 - *((double *)v79 - 15)) > 0.0)
          break;
        double v80 = v62 - 10;
        memmove(v62 - 10, v62 - 5, 0x25uLL);
        uint64_t v75 = *(char **)a2;
        v62 -= 5;
        *(void *)(a2 + 8) = v80 + 5;
        unint64_t v76 = 0xCCCCCCCCCCCCCCCDLL * (((char *)(v80 + 5) - v75) >> 3);
      }
      while (v76 >= 3);
    }
    int v56 = v62;
  }
  if ((int)v6 <= 2)
  {
    int v97 = __dsta;
    unint64_t v87 = v107;
  }
  else
  {
    uint64_t v81 = (v6 - 3);
    double v82 = v107;
    do
    {
      uint64_t v84 = *a1 + 40 * v81;
      if (v82 >= v108)
      {
        unint64_t v88 = 0xCCCCCCCCCCCCCCCDLL * ((v82 - __dsta) >> 3) + 1;
        if (v88 > 0x666666666666666) {
          sub_1C494A220();
        }
        if (0x999999999999999ALL * ((v108 - __dsta) >> 3) > v88) {
          unint64_t v88 = 0x999999999999999ALL * ((v108 - __dsta) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v108 - __dsta) >> 3) >= 0x333333333333333) {
          unint64_t v89 = 0x666666666666666;
        }
        else {
          unint64_t v89 = v88;
        }
        if (v89)
        {
          if (v89 > 0x666666666666666) {
            sub_1C4949AA8();
          }
          unint64_t v90 = (char *)operator new(40 * v89);
        }
        else
        {
          unint64_t v90 = 0;
        }
        uint64_t v91 = &v90[8 * ((v82 - __dsta) >> 3)];
        long long v92 = *(_OWORD *)v84;
        long long v93 = *(_OWORD *)(v84 + 16);
        *((void *)v91 + 4) = *(void *)(v84 + 32);
        *(_OWORD *)uint64_t v91 = v92;
        *((_OWORD *)v91 + 1) = v93;
        uint64_t v94 = v91;
        if (v82 != __dsta)
        {
          do
          {
            long long v95 = *(_OWORD *)(v82 - 40);
            long long v96 = *(_OWORD *)(v82 - 24);
            *(void *)(v94 - 11) = *(void *)(v82 - 11);
            *(_OWORD *)(v94 - 24) = v96;
            *(_OWORD *)(v94 - 40) = v95;
            v94 -= 40;
            v82 -= 40;
          }
          while (v82 != __dsta);
          double v82 = __dsta;
        }
        unint64_t v87 = v91 + 40;
        __dsta = v94;
        float v108 = &v90[40 * v89];
        if (v82) {
          operator delete(v82);
        }
      }
      else
      {
        long long v85 = *(_OWORD *)v84;
        long long v86 = *(_OWORD *)(v84 + 16);
        *((void *)v82 + 4) = *(void *)(v84 + 32);
        *(_OWORD *)double v82 = v85;
        *((_OWORD *)v82 + 1) = v86;
        unint64_t v87 = v82 + 40;
      }
      int v97 = __dsta;
      unint64_t v98 = 0xCCCCCCCCCCCCCCCDLL * ((v87 - __dsta) >> 3);
      if (v98 >= 3)
      {
        double v99 = *((double *)v87 - 5);
        double v100 = *((double *)v87 - 4);
        do
        {
          float v101 = &v97[40 * v98];
          if ((*((double *)v101 - 10) - *((double *)v101 - 15)) * (v100 - *((double *)v101 - 14))
             - (*((double *)v101 - 9) - *((double *)v101 - 14)) * (v99 - *((double *)v101 - 15)) > 0.0)
            break;
          unint64_t v102 = v87 - 80;
          memmove(v87 - 80, v87 - 40, 0x25uLL);
          int v97 = __dsta;
          v87 -= 40;
          unint64_t v98 = 0xCCCCCCCCCCCCCCCDLL * ((v102 + 40 - __dsta) >> 3);
        }
        while (v98 >= 3);
      }
      double v82 = v87;
    }
    while (v81-- > 0);
  }
  unint64_t v103 = v97;
  if (v87 != v97 + 40)
  {
    memmove(v97, v97 + 40, v87 - (v97 + 40) - 3);
    unint64_t v103 = __dsta;
  }
  sub_1C4957DCC(a2, *(char **)(a2 + 8), v103, v87 - 40, 0xCCCCCCCCCCCCCCCDLL * ((v87 - 40 - v103) >> 3));
  if (__dsta) {
    operator delete(__dsta);
  }
}

void sub_1C495623C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v14 = *(void **)v12;
    if (!*(void *)v12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v14 = *(void **)v12;
    if (!*(void *)v12) {
      goto LABEL_3;
    }
  }
  *(void *)(v12 + 8) = v14;
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C4956294(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

BOOL sub_1C495629C(double *a1, double *a2)
{
  if (*a1 == *a2) {
    return a1[1] < a2[1];
  }
  else {
    return *a1 < *a2;
  }
}

void sub_1C49562BC(unint64_t a1, long long *a2, unsigned int (**a3)(uint64_t, char *), uint64_t a4, char a5)
{
BOOL sub_1C495710C(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = (long long *)(a2 - 40);
      if ((*a3)((long long *)(a2 - 40), (long long *)a1))
      {
        long long v10 = *(_OWORD *)a1;
        *(_OWORD *)long long v74 = *(_OWORD *)(a1 + 16);
        long long v9 = *(_OWORD *)v74;
        *(void *)&v74[16] = *(void *)(a1 + 32);
        uint64_t v11 = *(void *)(a2 - 11);
        long long v12 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v8;
        *(_OWORD *)(a1 + 16) = v12;
        *(void *)(a1 + 29) = v11;
        long long *v8 = v10;
        *(_OWORD *)(a2 - 24) = v9;
        *(void *)(a2 - 11) = *(void *)&v74[13];
      }
      return 1;
    case 3uLL:
      uint64_t v13 = a1 + 40;
      uint64_t v14 = a2 - 40;
      char v15 = (*a3)((long long *)(a1 + 40), (long long *)a1);
      int v16 = (*a3)((long long *)v14, (long long *)(a1 + 40));
      if (v15)
      {
        if (v16)
        {
          long long v18 = *(_OWORD *)a1;
          long long v17 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)long long v74 = v17;
          *(void *)&v74[16] = *(void *)(a1 + 32);
          uint64_t v19 = *(void *)(v14 + 29);
          long long v20 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 16) = v20;
          *(void *)(a1 + 29) = v19;
        }
        else
        {
          long long v56 = *(_OWORD *)a1;
          *(_OWORD *)long long v74 = *(_OWORD *)(a1 + 16);
          long long v55 = *(_OWORD *)v74;
          *(void *)&v74[16] = *(void *)(a1 + 32);
          long long v57 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_OWORD *)(a1 + 16) = v57;
          *(void *)(a1 + 29) = *(void *)(a1 + 69);
          *(_OWORD *)uint64_t v13 = v56;
          *(_OWORD *)(a1 + 56) = v55;
          *(void *)(a1 + 69) = *(void *)&v74[13];
          if (!(*a3)((long long *)v14, (long long *)(a1 + 40))) {
            return 1;
          }
          long long v18 = *(_OWORD *)v13;
          long long v17 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)long long v74 = v17;
          *(void *)&v74[16] = *(void *)(a1 + 72);
          uint64_t v58 = *(void *)(v14 + 29);
          long long v59 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 56) = v59;
          *(void *)(a1 + 69) = v58;
        }
        *(_OWORD *)uint64_t v14 = v18;
        *(_OWORD *)(v14 + 16) = v17;
        *(void *)(v14 + 29) = *(void *)&v74[13];
      }
      else if (v16)
      {
        long long v43 = *(_OWORD *)v13;
        *(_OWORD *)long long v74 = *(_OWORD *)(a1 + 56);
        long long v42 = *(_OWORD *)v74;
        *(void *)&v74[16] = *(void *)(a1 + 72);
        uint64_t v44 = *(void *)(v14 + 29);
        long long v45 = *(_OWORD *)(v14 + 16);
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
        *(_OWORD *)(a1 + 56) = v45;
        *(void *)(a1 + 69) = v44;
        *(_OWORD *)uint64_t v14 = v43;
        *(_OWORD *)(v14 + 16) = v42;
        *(void *)(v14 + 29) = *(void *)&v74[13];
LABEL_17:
        if ((*a3)((long long *)v13, (long long *)a1))
        {
          long long v47 = *(_OWORD *)a1;
          *(_OWORD *)long long v74 = *(_OWORD *)(a1 + 16);
          long long v46 = *(_OWORD *)v74;
          *(void *)&v74[16] = *(void *)(a1 + 32);
          long long v48 = *(_OWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_OWORD *)(a1 + 16) = v48;
          *(void *)(a1 + 29) = *(void *)(v13 + 29);
          *(_OWORD *)uint64_t v13 = v47;
          *(_OWORD *)(v13 + 16) = v46;
          *(void *)(v13 + 29) = *(void *)&v74[13];
        }
      }
      return 1;
    case 4uLL:
      sub_1C4957640((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80), (long long *)(a2 - 40), a3);
      return 1;
    case 5uLL:
      uint64_t v13 = a1 + 40;
      long long v21 = (long long *)(a1 + 80);
      long long v22 = (long long *)(a1 + 120);
      uint64_t v23 = a2 - 40;
      __n128 v24 = sub_1C4957640((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80), (long long *)(a1 + 120), a3);
      if (!((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v23, a1 + 120, v24)) {
        return 1;
      }
      long long v26 = *v22;
      *(_OWORD *)long long v74 = *(_OWORD *)(a1 + 136);
      long long v25 = *(_OWORD *)v74;
      *(void *)&v74[16] = *(void *)(a1 + 152);
      uint64_t v27 = *(void *)(v23 + 29);
      long long v28 = *(_OWORD *)(v23 + 16);
      *long long v22 = *(_OWORD *)v23;
      *(_OWORD *)(a1 + 136) = v28;
      *(void *)(a1 + 149) = v27;
      *(_OWORD *)uint64_t v23 = v26;
      *(_OWORD *)(v23 + 16) = v25;
      *(void *)(v23 + 29) = *(void *)&v74[13];
      if (!(*a3)((long long *)(a1 + 120), (long long *)(a1 + 80))) {
        return 1;
      }
      long long v30 = *v21;
      *(_OWORD *)long long v74 = *(_OWORD *)(a1 + 96);
      long long v29 = *(_OWORD *)v74;
      *(void *)&v74[16] = *(void *)(a1 + 112);
      long long v31 = *(_OWORD *)(a1 + 136);
      *long long v21 = *v22;
      *(_OWORD *)(a1 + 96) = v31;
      *(void *)(a1 + 109) = *(void *)(a1 + 149);
      *long long v22 = v30;
      *(_OWORD *)(a1 + 136) = v29;
      *(void *)(a1 + 149) = *(void *)&v74[13];
      if (!(*a3)((long long *)(a1 + 80), (long long *)(a1 + 40))) {
        return 1;
      }
      long long v33 = *(_OWORD *)v13;
      *(_OWORD *)long long v74 = *(_OWORD *)(a1 + 56);
      long long v32 = *(_OWORD *)v74;
      *(void *)&v74[16] = *(void *)(a1 + 72);
      long long v34 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v13 = *v21;
      *(_OWORD *)(a1 + 56) = v34;
      *(void *)(a1 + 69) = *(void *)(a1 + 109);
      *long long v21 = v33;
      *(_OWORD *)(a1 + 96) = v32;
      *(void *)(a1 + 109) = *(void *)&v74[13];
      goto LABEL_17;
    default:
      long long v35 = (long long *)(a1 + 80);
      long long v36 = (long long *)(a1 + 40);
      char v37 = (*a3)((long long *)(a1 + 40), (long long *)a1);
      int v38 = (*a3)((long long *)(a1 + 80), (long long *)(a1 + 40));
      if (v37)
      {
        if (v38)
        {
          long long v40 = *(_OWORD *)a1;
          long long v39 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)long long v74 = v39;
          *(void *)&v74[16] = *(void *)(a1 + 32);
          long long v41 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v35;
          *(_OWORD *)(a1 + 16) = v41;
          *(void *)(a1 + 29) = *(void *)(a1 + 109);
        }
        else
        {
          long long v61 = *(_OWORD *)a1;
          *(_OWORD *)long long v74 = *(_OWORD *)(a1 + 16);
          long long v60 = *(_OWORD *)v74;
          *(void *)&v74[16] = *(void *)(a1 + 32);
          long long v62 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *v36;
          *(_OWORD *)(a1 + 16) = v62;
          *(void *)(a1 + 29) = *(void *)(a1 + 69);
          *long long v36 = v61;
          *(_OWORD *)(a1 + 56) = v60;
          *(void *)(a1 + 69) = *(void *)&v74[13];
          if (!(*a3)((long long *)(a1 + 80), (long long *)(a1 + 40))) {
            goto LABEL_28;
          }
          long long v40 = *v36;
          long long v39 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)long long v74 = v39;
          *(void *)&v74[16] = *(void *)(a1 + 72);
          long long v63 = *(_OWORD *)(a1 + 96);
          *long long v36 = *v35;
          *(_OWORD *)(a1 + 56) = v63;
          *(void *)(a1 + 69) = *(void *)(a1 + 109);
        }
        long long *v35 = v40;
        *(_OWORD *)(a1 + 96) = v39;
        *(void *)(a1 + 109) = *(void *)&v74[13];
      }
      else if (v38)
      {
        long long v50 = *v36;
        *(_OWORD *)long long v74 = *(_OWORD *)(a1 + 56);
        long long v49 = *(_OWORD *)v74;
        *(void *)&v74[16] = *(void *)(a1 + 72);
        long long v51 = *(_OWORD *)(a1 + 96);
        *long long v36 = *v35;
        *(_OWORD *)(a1 + 56) = v51;
        *(void *)(a1 + 69) = *(void *)(a1 + 109);
        long long *v35 = v50;
        *(_OWORD *)(a1 + 96) = v49;
        *(void *)(a1 + 109) = *(void *)&v74[13];
        if ((*a3)((long long *)(a1 + 40), (long long *)a1))
        {
          long long v53 = *(_OWORD *)a1;
          *(_OWORD *)long long v74 = *(_OWORD *)(a1 + 16);
          long long v52 = *(_OWORD *)v74;
          *(void *)&v74[16] = *(void *)(a1 + 32);
          long long v54 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *v36;
          *(_OWORD *)(a1 + 16) = v54;
          *(void *)(a1 + 29) = *(void *)(a1 + 69);
          *long long v36 = v53;
          *(_OWORD *)(a1 + 56) = v52;
          *(void *)(a1 + 69) = *(void *)&v74[13];
        }
      }
LABEL_28:
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v64, v35))
    {
      long long v69 = *(_OWORD *)(v64 + 16);
      long long v73 = *(_OWORD *)v64;
      *(_OWORD *)long long v74 = v69;
      *(void *)&v74[16] = *(void *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(void *)(v71 + 149) = *(void *)(a1 + v70 + 109);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_31;
        }
        v70 -= 40;
      }
      while (((*a3)(&v73, (long long *)(v71 + 40)) & 1) != 0);
      uint64_t v67 = a1 + v70 + 120;
LABEL_31:
      long long v68 = *(_OWORD *)v74;
      *(_OWORD *)uint64_t v67 = v73;
      *(_OWORD *)(v67 + 16) = v68;
      *(void *)(v67 + 29) = *(void *)&v74[13];
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    long long v35 = (long long *)v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

__n128 sub_1C4957640(long long *a1, long long *a2, long long *a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  char v10 = (*a5)(a2, a1);
  int v11 = (*a5)(a3, a2);
  if (v10)
  {
    if (v11)
    {
      long long v13 = *a1;
      long long v12 = a1[1];
      *(_DWORD *)long long v43 = HIDWORD(v12);
      *(void *)&v43[4] = *((void *)a1 + 4);
      uint64_t v14 = *(void *)((char *)a3 + 29);
      long long v15 = a3[1];
      *a1 = *a3;
      a1[1] = v15;
      *(void *)((char *)a1 + 29) = v14;
LABEL_9:
      *a3 = v13;
      a3[1] = v12;
      *(void *)((char *)a3 + 29) = *(void *)&v43[1];
      goto LABEL_10;
    }
    long long v22 = *a1;
    *(_OWORD *)long long v39 = a1[1];
    *(void *)&v39[16] = *((void *)a1 + 4);
    uint64_t v23 = *(void *)((char *)a2 + 29);
    long long v24 = a2[1];
    *a1 = *a2;
    a1[1] = v24;
    *(void *)((char *)a1 + 29) = v23;
    *a2 = v22;
    a2[1] = *(_OWORD *)v39;
    *(void *)((char *)a2 + 29) = *(void *)&v39[13];
    if ((*a5)(a3, a2))
    {
      long long v13 = *a2;
      long long v12 = a2[1];
      *(_DWORD *)long long v43 = HIDWORD(v12);
      *(void *)&v43[4] = *((void *)a2 + 4);
      uint64_t v25 = *(void *)((char *)a3 + 29);
      long long v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      *(void *)((char *)a2 + 29) = v25;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    long long v16 = *a2;
    *(_OWORD *)char v37 = a2[1];
    *(void *)&v37[16] = *((void *)a2 + 4);
    uint64_t v17 = *(void *)((char *)a3 + 29);
    long long v18 = a3[1];
    *a2 = *a3;
    a2[1] = v18;
    *(void *)((char *)a2 + 29) = v17;
    *a3 = v16;
    a3[1] = *(_OWORD *)v37;
    *(void *)((char *)a3 + 29) = *(void *)&v37[13];
    if ((*a5)(a2, a1))
    {
      long long v19 = *a1;
      *(_OWORD *)int v38 = a1[1];
      *(void *)&v38[16] = *((void *)a1 + 4);
      uint64_t v20 = *(void *)((char *)a2 + 29);
      long long v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      *(void *)((char *)a1 + 29) = v20;
      *a2 = v19;
      a2[1] = *(_OWORD *)v38;
      *(void *)((char *)a2 + 29) = *(void *)&v38[13];
    }
  }
LABEL_10:
  if ((*a5)(a4, a3))
  {
    long long v28 = *a3;
    *(_OWORD *)long long v40 = a3[1];
    *(void *)&v40[16] = *((void *)a3 + 4);
    uint64_t v29 = *(void *)((char *)a4 + 29);
    long long v30 = a4[1];
    *a3 = *a4;
    a3[1] = v30;
    *(void *)((char *)a3 + 29) = v29;
    *a4 = v28;
    a4[1] = *(_OWORD *)v40;
    *(void *)((char *)a4 + 29) = *(void *)&v40[13];
    if ((*a5)(a3, a2))
    {
      long long v31 = *a2;
      *(_OWORD *)long long v41 = a2[1];
      *(void *)&v41[16] = *((void *)a2 + 4);
      uint64_t v32 = *(void *)((char *)a3 + 29);
      long long v33 = a3[1];
      *a2 = *a3;
      a2[1] = v33;
      *(void *)((char *)a2 + 29) = v32;
      *a3 = v31;
      a3[1] = *(_OWORD *)v41;
      *(void *)((char *)a3 + 29) = *(void *)&v41[13];
      if ((*a5)(a2, a1))
      {
        long long v34 = *a1;
        *(_OWORD *)long long v42 = a1[1];
        __n128 result = *(__n128 *)v42;
        *(void *)&v42[16] = *((void *)a1 + 4);
        uint64_t v35 = *(void *)((char *)a2 + 29);
        long long v36 = a2[1];
        *a1 = *a2;
        a1[1] = v36;
        *(void *)((char *)a1 + 29) = v35;
        *a2 = v34;
        a2[1] = *(_OWORD *)v42;
        *(void *)((char *)a2 + 29) = *(void *)&v42[13];
      }
    }
  }
  return result;
}

long long *sub_1C4957878(uint64_t a1, long long *a2, long long *a3, unsigned int (**a4)(uint64_t, char *))
{
  if ((long long *)a1 == a2) {
    return a3;
  }
  uint64_t v78 = v4;
  uint64_t v79 = v5;
  uint64_t v71 = a3;
  long long v73 = a2;
  uint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3);
  uint64_t v70 = (uint64_t)a2 - a1;
  if ((uint64_t)a2 - a1 >= 41 && (unint64_t)v70 >= 0x50)
  {
    int64_t v57 = (unint64_t)(v8 - 2) >> 1;
    int64_t v58 = v57;
    do
    {
      if (v57 >= v58)
      {
        uint64_t v61 = (2 * v58) | 1;
        long long v62 = (long long *)(a1 + 40 * v61);
        if (2 * v58 + 2 < v8 && (*a4)(a1 + 40 * v61, (char *)v62 + 40))
        {
          long long v62 = (long long *)((char *)v62 + 40);
          uint64_t v61 = 2 * v58 + 2;
        }
        long long v63 = (long long *)(a1 + 40 * v58);
        if ((((uint64_t (*)(long long *, long long *))*a4)(v62, v63) & 1) == 0)
        {
          long long v64 = v63[1];
          long long v76 = *v63;
          *(_OWORD *)long long v77 = v64;
          *(void *)&v77[16] = *((void *)v63 + 4);
          do
          {
            uint64_t v65 = v62;
            long long v66 = *v62;
            long long v67 = v62[1];
            *(void *)((char *)v63 + 29) = *(void *)((char *)v62 + 29);
            *long long v63 = v66;
            v63[1] = v67;
            if (v57 < v61) {
              break;
            }
            uint64_t v68 = (2 * v61) | 1;
            long long v62 = (long long *)(a1 + 40 * v68);
            uint64_t v69 = 2 * v61 + 2;
            if (v69 < v8 && (*a4)(a1 + 40 * v68, (char *)v62 + 40))
            {
              long long v62 = (long long *)((char *)v62 + 40);
              uint64_t v68 = v69;
            }
            long long v63 = v65;
            uint64_t v61 = v68;
          }
          while (!(*a4)((uint64_t)v62, (char *)&v76));
          long long v59 = v76;
          long long v60 = *(_OWORD *)v77;
          *(void *)((char *)v65 + 29) = *(void *)&v77[13];
          *uint64_t v65 = v59;
          v65[1] = v60;
        }
      }
      BOOL v35 = v58-- <= 0;
    }
    while (!v35);
  }
  long long v9 = v71;
  a3 = v73;
  unint64_t v10 = v70;
  if (v73 != v71)
  {
    if (v70 < 80)
    {
      int v11 = v73;
      do
      {
        if (((unsigned int (*)(long long *, uint64_t, long long *))*a4)(v11, a1, a3))
        {
          long long v13 = *v11;
          *(_OWORD *)long long v77 = v11[1];
          long long v12 = *(_OWORD *)v77;
          *(void *)&v77[16] = *((void *)v11 + 4);
          uint64_t v14 = *(void *)(a1 + 29);
          long long v15 = *(_OWORD *)(a1 + 16);
          *int v11 = *(_OWORD *)a1;
          v11[1] = v15;
          *(void *)((char *)v11 + 29) = v14;
          *(_OWORD *)a1 = v13;
          *(_OWORD *)(a1 + 16) = v12;
          *(void *)(a1 + 29) = *(void *)&v77[13];
        }
        int v11 = (long long *)((char *)v11 + 40);
      }
      while (v11 != v71);
      a3 = v71;
      goto LABEL_32;
    }
    long long v16 = (long long *)(a1 + 40);
    uint64_t v17 = v73;
    while (1)
    {
      if (((unsigned int (*)(long long *, uint64_t, long long *))*a4)(v17, a1, a3))
      {
        long long v21 = *v17;
        *(_OWORD *)long long v77 = v17[1];
        long long v20 = *(_OWORD *)v77;
        *(void *)&v77[16] = *((void *)v17 + 4);
        uint64_t v22 = *(void *)(a1 + 29);
        long long v23 = *(_OWORD *)(a1 + 16);
        *uint64_t v17 = *(_OWORD *)a1;
        v17[1] = v23;
        *(void *)((char *)v17 + 29) = v22;
        *(_OWORD *)a1 = v21;
        *(_OWORD *)(a1 + 16) = v20;
        *(void *)(a1 + 29) = *(void *)&v77[13];
        if ((unint64_t)v8 < 3)
        {
          uint64_t v25 = v16;
          int64_t v26 = 1;
          if ((((uint64_t (*)(long long *, uint64_t))*a4)(v16, a1) & 1) == 0) {
            goto LABEL_24;
          }
        }
        else
        {
          unsigned int v24 = (*a4)((uint64_t)v16, (char *)(a1 + 80));
          if (v24) {
            uint64_t v25 = (long long *)(a1 + 80);
          }
          else {
            uint64_t v25 = v16;
          }
          if (v24) {
            int64_t v26 = 2;
          }
          else {
            int64_t v26 = 1;
          }
          if ((((uint64_t (*)(long long *, uint64_t))*a4)(v25, a1) & 1) == 0)
          {
LABEL_24:
            long long v27 = *(_OWORD *)(a1 + 16);
            long long v76 = *(_OWORD *)a1;
            *(_OWORD *)long long v77 = v27;
            *(void *)&v77[16] = *(void *)(a1 + 32);
            uint64_t v28 = a1;
            do
            {
              long long v30 = v25;
              long long v31 = *v25;
              long long v32 = v25[1];
              *(void *)(v28 + 29) = *(void *)((char *)v25 + 29);
              *(_OWORD *)uint64_t v28 = v31;
              *(_OWORD *)(v28 + 16) = v32;
              if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v26) {
                break;
              }
              uint64_t v33 = (2 * v26) | 1;
              uint64_t v25 = (long long *)(a1 + 40 * v33);
              if (2 * v26 + 2 < v8 && (*a4)(a1 + 40 * v33, (char *)v25 + 40))
              {
                uint64_t v25 = (long long *)((char *)v25 + 40);
                uint64_t v33 = 2 * v26 + 2;
              }
              unsigned int v29 = (*a4)((uint64_t)v25, (char *)&v76);
              uint64_t v28 = (uint64_t)v30;
              int64_t v26 = v33;
            }
            while (!v29);
            long long v18 = v76;
            long long v19 = *(_OWORD *)v77;
            *(void *)((char *)v30 + 29) = *(void *)&v77[13];
            *long long v30 = v18;
            v30[1] = v19;
            long long v9 = v71;
            long long v16 = (long long *)(a1 + 40);
          }
        }
      }
      uint64_t v17 = (long long *)((char *)v17 + 40);
      if (v17 == v9)
      {
        a3 = v9;
        unint64_t v10 = v70;
        goto LABEL_35;
      }
    }
  }
LABEL_32:
  if (v70 >= 41)
  {
LABEL_35:
    long long v72 = a3;
    int64_t v34 = v10 / 0x28;
    do
    {
      uint64_t v36 = 0;
      long long v74 = *(_OWORD *)a1;
      *(_OWORD *)long long v75 = *(_OWORD *)(a1 + 16);
      *(void *)&v75[16] = *(void *)(a1 + 32);
      uint64_t v37 = a1;
      do
      {
        uint64_t v40 = v37 + 40 * v36 + 40;
        uint64_t v41 = (2 * v36) | 1;
        uint64_t v42 = 2 * v36 + 2;
        if (v42 < v34 && (*a4)(v37 + 40 * v36 + 40, (char *)(v37 + 40 * v36 + 80)))
        {
          v40 += 40;
          uint64_t v41 = v42;
        }
        long long v38 = *(_OWORD *)v40;
        long long v39 = *(_OWORD *)(v40 + 16);
        *(void *)(v37 + 29) = *(void *)(v40 + 29);
        *(_OWORD *)uint64_t v37 = v38;
        *(_OWORD *)(v37 + 16) = v39;
        uint64_t v37 = v40;
        uint64_t v36 = v41;
      }
      while (v41 <= (uint64_t)((unint64_t)(v34 - 2) >> 1));
      long long v43 = (long long *)((char *)v73 - 40);
      BOOL v44 = v40 == (void)v73 - 40;
      long long v73 = (long long *)((char *)v73 - 40);
      if (v44)
      {
        *(void *)(v40 + 29) = *(void *)&v75[13];
        *(_OWORD *)uint64_t v40 = v74;
        *(_OWORD *)(v40 + 16) = *(_OWORD *)v75;
      }
      else
      {
        long long v45 = *v43;
        long long v46 = v43[1];
        *(void *)(v40 + 29) = *(void *)((char *)v43 + 29);
        *(_OWORD *)uint64_t v40 = v45;
        *(_OWORD *)(v40 + 16) = v46;
        long long *v43 = v74;
        v43[1] = *(_OWORD *)v75;
        *(void *)((char *)v43 + 29) = *(void *)&v75[13];
        uint64_t v47 = v40 - a1 + 40;
        if (v47 >= 41)
        {
          unint64_t v48 = (v47 / 0x28uLL - 2) >> 1;
          uint64_t v49 = a1 + 40 * v48;
          if ((*a4)(v49, (char *)v40))
          {
            long long v50 = *(_OWORD *)v40;
            long long v51 = *(_OWORD *)(v40 + 16);
            *(void *)&v77[16] = *(void *)(v40 + 32);
            long long v76 = v50;
            *(_OWORD *)long long v77 = v51;
            do
            {
              uint64_t v52 = v49;
              long long v53 = *(_OWORD *)v49;
              long long v54 = *(_OWORD *)(v49 + 16);
              *(void *)(v40 + 29) = *(void *)(v49 + 29);
              *(_OWORD *)uint64_t v40 = v53;
              *(_OWORD *)(v40 + 16) = v54;
              if (!v48) {
                break;
              }
              unint64_t v48 = (v48 - 1) >> 1;
              uint64_t v49 = a1 + 40 * v48;
              uint64_t v40 = v52;
            }
            while ((((uint64_t (*)(uint64_t, long long *))*a4)(v49, &v76) & 1) != 0);
            long long v55 = *(_OWORD *)v77;
            *(_OWORD *)uint64_t v52 = v76;
            *(_OWORD *)(v52 + 16) = v55;
            *(void *)(v52 + 29) = *(void *)&v77[13];
          }
        }
      }
      BOOL v35 = v34-- <= 2;
    }
    while (!v35);
    return v72;
  }
  return a3;
}

char *sub_1C4957DCC(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  unint64_t v10 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v10) >> 3)) < a5)
  {
    int v11 = *(char **)a1;
    unint64_t v12 = a5 - 0x3333333333333333 * ((uint64_t)(v10 - *(void *)a1) >> 3);
    if (v12 > 0x666666666666666) {
      sub_1C494A220();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - (uint64_t)v11) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x333333333333333) {
      unint64_t v14 = 0x666666666666666;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x666666666666666) {
        sub_1C4949AA8();
      }
      long long v15 = (char *)operator new(40 * v14);
    }
    else
    {
      long long v15 = 0;
    }
    uint64_t v25 = &v15[8 * ((v5 - v11) >> 3)];
    uint64_t v26 = 40 * a5;
    long long v27 = &v25[40 * a5];
    uint64_t v28 = v25;
    do
    {
      long long v29 = *(_OWORD *)v7;
      long long v30 = *((_OWORD *)v7 + 1);
      *((void *)v28 + 4) = *((void *)v7 + 4);
      *(_OWORD *)uint64_t v28 = v29;
      *((_OWORD *)v28 + 1) = v30;
      v28 += 40;
      v7 += 40;
      v26 -= 40;
    }
    while (v26);
    long long v31 = *(char **)a1;
    long long v32 = &v15[8 * ((v5 - v11) >> 3)];
    if (*(char **)a1 != v5)
    {
      uint64_t v33 = v5;
      long long v32 = &v15[8 * ((v5 - v11) >> 3)];
      do
      {
        long long v34 = *(_OWORD *)(v33 - 40);
        long long v35 = *(_OWORD *)(v33 - 24);
        *(void *)(v32 - 11) = *(void *)(v33 - 11);
        *(_OWORD *)(v32 - 24) = v35;
        *(_OWORD *)(v32 - 40) = v34;
        v32 -= 40;
        v33 -= 40;
      }
      while (v33 != v31);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    uint64_t v36 = &v15[40 * v14];
    unint64_t v37 = v10 - (void)v5;
    if (v37) {
      memmove(v27, v5, v37 - 3);
    }
    long long v38 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[v37];
    *(void *)(a1 + 16) = v36;
    if (v38) {
      operator delete(v38);
    }
    return v25;
  }
  uint64_t v16 = v10 - (void)__dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)__dst) >> 3)) >= a5)
  {
    uint64_t v17 = &__src[40 * a5];
    long long v19 = *(unsigned char **)(a1 + 8);
LABEL_18:
    long long v20 = &v5[40 * a5];
    long long v21 = &v19[-40 * a5];
    uint64_t v22 = v19;
    if ((unint64_t)v21 < v10)
    {
      uint64_t v22 = v19;
      do
      {
        long long v23 = *(_OWORD *)v21;
        long long v24 = *((_OWORD *)v21 + 1);
        *((void *)v22 + 4) = *((void *)v21 + 4);
        *(_OWORD *)uint64_t v22 = v23;
        *((_OWORD *)v22 + 1) = v24;
        v21 += 40;
        v22 += 40;
      }
      while ((unint64_t)v21 < v10);
    }
    *(void *)(a1 + 8) = v22;
    if (v19 != v20) {
      memmove(v20, v5, v19 - v20 - 3);
    }
    if (v17 != v7) {
      memmove(v5, v7, v17 - v7 - 3);
    }
    return v5;
  }
  uint64_t v17 = &__src[8 * ((uint64_t)(v10 - (void)__dst) >> 3)];
  int64_t v18 = a4 - v17;
  if (a4 != v17) {
    memmove(*(void **)(a1 + 8), &__src[8 * ((uint64_t)(v10 - (void)__dst) >> 3)], v18 - 3);
  }
  long long v19 = (unsigned char *)(v10 + v18);
  *(void *)(a1 + 8) = v10 + v18;
  if (v16 >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_1C495805C(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "CHTriangle");
}

void *sub_1C4958BC0(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10)
{
  id v17 = a2;
  id v18 = a3;
  id v19 = a4;
  id v20 = a7;
  id v21 = a8;
  id v22 = a9;
  id v23 = a10;
  if (a1)
  {
    v74.receiver = a1;
    v74.super_class = (Class)CHStrokeGroupQueryItem;
    a1 = objc_msgSendSuper2(&v74, sel_init);
    if (a1)
    {
      uint64_t v29 = objc_msgSend_copy(v17, v24, v25, v26, v27, v28);
      long long v30 = (void *)a1[1];
      a1[1] = v29;

      uint64_t v36 = objc_msgSend_copy(v18, v31, v32, v33, v34, v35);
      unint64_t v37 = (void *)a1[2];
      a1[2] = v36;

      uint64_t v43 = objc_msgSend_copy(v19, v38, v39, v40, v41, v42);
      BOOL v44 = (void *)a1[3];
      a1[3] = v43;

      a1[9] = a5;
      a1[4] = a6;
      uint64_t v50 = objc_msgSend_copy(v20, v45, v46, v47, v48, v49);
      long long v51 = (void *)a1[5];
      a1[5] = v50;

      uint64_t v57 = objc_msgSend_copy(v21, v52, v53, v54, v55, v56);
      int64_t v58 = (void *)a1[7];
      a1[7] = v57;

      uint64_t v64 = objc_msgSend_copy(v22, v59, v60, v61, v62, v63);
      uint64_t v65 = (void *)a1[6];
      a1[6] = v64;

      uint64_t v71 = objc_msgSend_copy(v23, v66, v67, v68, v69, v70);
      long long v72 = (void *)a1[8];
      a1[8] = v71;
    }
  }

  return a1;
}

void sub_1C4958E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4958EB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4958EC0(uint64_t a1)
{
}

void sub_1C4958EC8(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1C49591E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v4 = (id)qword_1EA3C9FC8;
  uint64_t v5 = v4;
  os_signpost_id_t v6 = *(void *)(a1 + 40);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v5, OS_SIGNPOST_INTERVAL_END, v6, "CHStrokeGroupQuery_resultsForInitialStrokes", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  unint64_t v7 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1C492D000, v7, OS_LOG_TYPE_DEFAULT, "END \"CHStrokeGroupQuery_resultsForInitialStrokes\"", v8, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4959588(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  unint64_t v7 = (id)qword_1EA3C9FC8;
  uint64_t v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHStrokeGroupQuery_strokesCoveredByStroke", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  unint64_t v10 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v11 = 0;
    _os_log_impl(&dword_1C492D000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHStrokeGroupQuery_strokesCoveredByStroke\"", v11, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4959808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4959820(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_copy(*(void **)(*(void *)(a1 + 32) + 72), a2, a3, a4, a5, a6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  os_signpost_id_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

NSString *__cdecl sub_1C495A6E8(CHTokenizedMathResultToken *self, SEL a2)
{
  return self->_maskedAlternative;
}

double sub_1C495A6F8(CHTokenizedMathResultToken *self, SEL a2)
{
  return self->_maskedAlternativeScore;
}

void sub_1C495BFB4(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  self;
  if (qword_1EA3C9038 != -1) {
    dispatch_once(&qword_1EA3C9038, &unk_1F20129B0);
  }
  PPSSendTelemetry();
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v3 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    os_signpost_id_t v9 = objc_msgSend_description(v2, v4, v5, v6, v7, v8);
    int v10 = 138412290;
    int v11 = v9;
    _os_log_impl(&dword_1C492D000, v3, OS_LOG_TYPE_DEFAULT, "CHPowerLog: logModelLoadedUnloaded with %@", (uint8_t *)&v10, 0xCu);
  }
}

uint64_t sub_1C495C1B8()
{
  uint64_t result = PPSCreateTelemetryIdentifier();
  qword_1EA3C9030 = result;
  return result;
}

uint64_t sub_1C495C454()
{
  uint64_t result = PPSCreateTelemetryIdentifier();
  qword_1EA3C9040 = result;
  return result;
}

void sub_1C495C730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C495C760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495C780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495C79C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495C7B4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  int v10 = (id)qword_1EA3C9FC8;
  int v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 40);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v11, OS_SIGNPOST_INTERVAL_END, v12, "CHTextSynthesisQuery_refineContext", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  unint64_t v13 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_DEFAULT, "END \"CHTextSynthesisQuery_refineContext\"", v14, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C495C934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495CBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C495CC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495CC48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495CC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495CC7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v7 = (id)qword_1EA3C9FC8;
  id v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHTextSynthesisQuery_refinedTokens", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  int v10 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v11 = 0;
    _os_log_impl(&dword_1C492D000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHTextSynthesisQuery_refinedTokens\"", v11, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C495CDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495D1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C495D27C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  os_signpost_id_t v12 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v7, v8, v9, v10, v11);
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id v13 = v5;
  uint64_t v16 = 0;
  uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v50, (uint64_t)v55, 16, v15);
  if (v22)
  {
    uint64_t v23 = *(void *)v51;
    do
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v51 != v23) {
          objc_enumerationMutation(v13);
        }
        long long v30 = objc_msgSend_drawing(*(void **)(*((void *)&v50 + 1) + 8 * i), v17, v18, v19, v20, v21);
        if (v16) {
          objc_msgSend_appendDrawing_(v16, v25, (uint64_t)v30, v27, v28, v29);
        }
        else {
          uint64_t v16 = objc_msgSend_copy(v30, v25, v26, v27, v28, v29);
        }
      }
      uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v17, (uint64_t)&v50, (uint64_t)v55, 16, v21);
    }
    while (v22);
  }

  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id v31 = v6;
  uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v46, (uint64_t)v54, 16, v33);
  if (v38)
  {
    uint64_t v39 = *(void *)v47;
    do
    {
      for (uint64_t j = 0; j != v38; ++j)
      {
        if (*(void *)v47 != v39) {
          objc_enumerationMutation(v31);
        }
        objc_msgSend_addObjectsFromArray_(v12, v34, *(void *)(*((void *)&v46 + 1) + 8 * j), v35, v36, v37);
      }
      uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v34, (uint64_t)&v46, (uint64_t)v54, 16, v37);
    }
    while (v38);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v41 = (id)qword_1EA3C9FC8;
  uint64_t v42 = v41;
  os_signpost_id_t v43 = *(void *)(a1 + 40);
  if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v41))
  {
    *(_WORD *)long long v45 = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v42, OS_SIGNPOST_INTERVAL_END, v43, "CHTextSynthesisQuery_refineSingleLine", "", v45, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  BOOL v44 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v45 = 0;
    _os_log_impl(&dword_1C492D000, v44, OS_LOG_TYPE_DEFAULT, "END \"CHTextSynthesisQuery_refineSingleLine\"", v45, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C495D584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495D8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C495D8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495D924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495D940(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v7 = (id)qword_1EA3C9FC8;
  uint64_t v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHTextSynthesisQuery_refinedTokensSingleLine", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v10 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C492D000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHTextSynthesisQuery_refinedTokensSingleLine\"", v11, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C495DAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495DD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C495DD48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495DD60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v7 = (id)qword_1EA3C9FC8;
  uint64_t v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHTextSynthesisQuery_synthesizeTokens", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v10 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C492D000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHTextSynthesisQuery_synthesizeTokens\"", v11, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C495DEC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495E190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C495E1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495E1F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495E20C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v7 = (id)qword_1EA3C9FC8;
  uint64_t v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHTextSynthesisQuery_synthesizeTokensReplacing", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v10 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C492D000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHTextSynthesisQuery_synthesizeTokensReplacing\"", v11, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C495E370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LineRegressor::LineRegressor(LineRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  id v6 = a2;
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  objc_storeStrong((id *)this + 1, a2);
  *(void *)this = a3;
  id v7 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;

  uint64_t v8 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;

  os_signpost_id_t v9 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;

  *((float *)this + 24) = sub_1C495E698(v6, (uint64_t)this + 104, (uint64_t)this + 128, 1, 15.0);
  *((_DWORD *)this + 44) = 0;
  *((_DWORD *)this + 8) = 0;
  unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 3);
  uint64_t v15 = (const char *)(v14 - 1);
  *((_DWORD *)this + 40) = v15;
  *((_DWORD *)this + 16) = 0;
  if (v14 < 7)
  {
    uint64_t v16 = objc_msgSend_copy(v6, v15, v10, v11, v12, v13);
    id v17 = (void *)*((void *)this + 10);
    *((void *)this + 10) = v16;
  }
  else
  {
    *((_DWORD *)this + 43) = LineRegressor::detectMiddlePointIndex(this, (int)v15, -1);
    *((_DWORD *)this + 47) = LineRegressor::detectMiddlePointIndex(this, 1, 1);
    LineRegressor::detectForwardPointIndex(this);
    LineRegressor::detectBackwardPointIndex(this);
    LineRegressor::detectForwardPointType(this);
    LineRegressor::detectBackwardPointType(this);
    LineRegressor::fillBody(this);
  }
  StraightLineRegressor::StraightLineRegressor((uint64_t)v23, v6, (uint64_t)this + 16, *((void **)this + 10), (uint64_t)this + 48, (uint64_t)a3);
  uint64_t v18 = v26;
  *((void *)this + 11) = v26;
  if (fabsf(v27) <= 0.98)
  {
    if (v18) {
      MEMORY[0x1C8786460](v18, 0x1081C4095753B69);
    }
    *((void *)this + 11) = 0;
    BezierLineRegressor::BezierLineRegressor((uint64_t)v22, (uint64_t)this + 16, *((void **)this + 10), (uint64_t)this + 48, (uint64_t)a3);
  }
  uint64_t v19 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;

  uint64_t v20 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;

  uint64_t v21 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
}

void sub_1C495E63C(_Unwind_Exception *a1)
{
  id v6 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 112) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(a1);
}

float sub_1C495E698(void *a1, uint64_t a2, uint64_t a3, int a4, float a5)
{
  id v8 = a1;
  objc_msgSend_bounds(v8, v9, v10, v11, v12, v13);
  if (v18 >= v19) {
    double v20 = v18;
  }
  else {
    double v20 = v19;
  }
  unint64_t v21 = objc_msgSend_pointCountForStrokeIndex_(v8, v14, 0, v15, v16, v17);
  unint64_t v25 = v21;
  uint64_t v26 = *(double **)a2;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)a2) >> 3) < v21)
  {
    if (v21 > 0x666666666666666) {
      sub_1C494A220();
    }
    float v27 = *(double **)(a2 + 8);
    uint64_t v28 = (char *)operator new(40 * v21);
    uint64_t v29 = &v28[(char *)v27 - (char *)v26];
    long long v30 = v29;
    if (v27 != v26)
    {
      id v31 = &v28[(char *)v27 - (char *)v26];
      do
      {
        long long v32 = *(_OWORD *)(v27 - 5);
        long long v33 = *(_OWORD *)(v27 - 3);
        long long v30 = v31 - 40;
        *(double *)(v31 - 11) = *(double *)((char *)v27 - 11);
        *(_OWORD *)(v31 - 24) = v33;
        *(_OWORD *)(v31 - 40) = v32;
        v27 -= 5;
        v31 -= 40;
      }
      while (v27 != v26);
    }
    *(void *)a2 = v30;
    *(void *)(a2 + 8) = v29;
    *(void *)(a2 + 16) = &v28[40 * v25];
    if (v26) {
      operator delete(v26);
    }
  }
  objc_msgSend_pointForStrokeIndex_pointIndex_(v8, v22, 0, 0, v23, v24, a3);
  uint64_t v39 = v37;
  uint64_t v40 = v38;
  uint64_t v42 = *(double **)(a2 + 8);
  unint64_t v41 = *(void *)(a2 + 16);
  if ((unint64_t)v42 >= v41)
  {
    BOOL v44 = *(double **)a2;
    unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v42 - *(void *)a2) >> 3);
    unint64_t v46 = v45 + 1;
    if (v45 + 1 > 0x666666666666666) {
      sub_1C494A220();
    }
    unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v41 - (void)v44) >> 3);
    if (2 * v47 > v46) {
      unint64_t v46 = 2 * v47;
    }
    if (v47 >= 0x333333333333333) {
      unint64_t v48 = 0x666666666666666;
    }
    else {
      unint64_t v48 = v46;
    }
    if (v48)
    {
      if (v48 > 0x666666666666666) {
        sub_1C4949AA8();
      }
      long long v49 = (char *)operator new(40 * v48);
    }
    else
    {
      long long v49 = 0;
    }
    long long v50 = &v49[40 * v45];
    *(void *)long long v50 = v39;
    *((void *)v50 + 1) = v40;
    *((void *)v50 + 2) = 0;
    *((_DWORD *)v50 + 6) = 1;
    v50[28] = 0;
    *((_DWORD *)v50 + 8) = 0;
    os_signpost_id_t v43 = v50 + 40;
    if (v42 != v44)
    {
      do
      {
        long long v51 = *(_OWORD *)(v42 - 5);
        long long v52 = *(_OWORD *)(v42 - 3);
        *(double *)(v50 - 11) = *(double *)((char *)v42 - 11);
        *(_OWORD *)(v50 - 24) = v52;
        *(_OWORD *)(v50 - 40) = v51;
        v50 -= 40;
        v42 -= 5;
      }
      while (v42 != v44);
      uint64_t v42 = *(double **)a2;
    }
    *(void *)a2 = v50;
    *(void *)(a2 + 8) = v43;
    *(void *)(a2 + 16) = &v49[40 * v48];
    if (v42) {
      operator delete(v42);
    }
  }
  else
  {
    *(void *)uint64_t v42 = v37;
    *((void *)v42 + 1) = v38;
    void v42[2] = 0.0;
    *((_DWORD *)v42 + 6) = 1;
    *((unsigned char *)v42 + 28) = 0;
    os_signpost_id_t v43 = v42 + 5;
    *((_DWORD *)v42 + 8) = 0;
  }
  *(void *)(a2 + 8) = v43;
  objc_msgSend_pointForStrokeIndex_pointIndex_(v8, v34, 0, 0, v35, v36);
  float v57 = v20 / a5;
  float v59 = v58;
  float v61 = v60;
  unint64_t v62 = 1;
  float v135 = v57 + v57;
  int v63 = 1;
  int v64 = 1;
  float v65 = 0.0;
  float v138 = v59;
  float v139 = v59;
  float v66 = v61;
  float v67 = v61;
  id v134 = v8;
  float v133 = v57;
  while (objc_msgSend_pointCountForStrokeIndex_(v8, v53, 0, v54, v55, v56) > v62)
  {
    objc_msgSend_pointForStrokeIndex_pointIndex_(v8, v68, 0, v62, v70, v71);
    float v73 = v72;
    float v75 = v74;
    float v65 = v65
        + sqrtf((float)((float)(v75 - v67) * (float)(v75 - v67)) + (float)((float)(v73 - v59) * (float)(v73 - v59)));
    if (a4 && v65 > v135)
    {
      float v136 = v66;
      float v76 = v61;
      int v77 = vcvtms_s32_f32(v65 / v57);
      if (v77 >= 1)
      {
        uint64_t v78 = *(double **)(a2 + 8);
        double v80 = *(v78 - 5);
        double v79 = *(v78 - 4);
        float v81 = (float)v77;
        int v82 = 1;
        int v83 = v64 / v77;
        do
        {
          double v86 = (float)((float)(v77 - v82) / v81);
          float v87 = (float)v82 / v81;
          float v88 = (float)(v87 * v73) + v80 * v86;
          *(float *)&double v86 = (float)(v87 * v75) + v79 * v86;
          double v89 = v88;
          double v90 = *(float *)&v86;
          unint64_t v91 = *(void *)(a2 + 16);
          if ((unint64_t)v78 < v91)
          {
            *uint64_t v78 = v89;
            v78[1] = v90;
            *((_DWORD *)v78 + 4) = v63;
            *((_DWORD *)v78 + 5) = v62;
            *((_DWORD *)v78 + 6) = v83;
            *((unsigned char *)v78 + 28) = 0;
            long long v84 = v78 + 5;
            *((_DWORD *)v78 + 8) = 0;
          }
          else
          {
            long long v92 = *(double **)a2;
            unint64_t v93 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v78 - *(void *)a2) >> 3);
            unint64_t v94 = v93 + 1;
            if (v93 + 1 > 0x666666666666666) {
              sub_1C494A220();
            }
            unint64_t v95 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v91 - (void)v92) >> 3);
            if (2 * v95 > v94) {
              unint64_t v94 = 2 * v95;
            }
            if (v95 >= 0x333333333333333) {
              unint64_t v96 = 0x666666666666666;
            }
            else {
              unint64_t v96 = v94;
            }
            if (v96)
            {
              if (v96 > 0x666666666666666) {
                sub_1C4949AA8();
              }
              long long v97 = (char *)operator new(40 * v96);
            }
            else
            {
              long long v97 = 0;
            }
            long long v98 = &v97[40 * v93];
            *(double *)long long v98 = v89;
            *((double *)v98 + 1) = v90;
            *((_DWORD *)v98 + 4) = v63;
            *((_DWORD *)v98 + 5) = v62;
            *((_DWORD *)v98 + 6) = v83;
            v98[28] = 0;
            *((_DWORD *)v98 + 8) = 0;
            long long v99 = v98;
            if (v78 != v92)
            {
              do
              {
                long long v100 = *(_OWORD *)(v78 - 5);
                long long v101 = *(_OWORD *)(v78 - 3);
                *(double *)(v99 - 11) = *(double *)((char *)v78 - 11);
                *(_OWORD *)(v99 - 24) = v101;
                *(_OWORD *)(v99 - 40) = v100;
                v99 -= 40;
                v78 -= 5;
              }
              while (v78 != v92);
              uint64_t v78 = *(double **)a2;
            }
            long long v84 = (double *)(v98 + 40);
            *(void *)a2 = v99;
            *(void *)(a2 + 8) = v98 + 40;
            *(void *)(a2 + 16) = &v97[40 * v96];
            if (v78) {
              operator delete(v78);
            }
          }
          ++v63;
          *(void *)(a2 + 8) = v84;
          uint64_t v78 = v84;
        }
        while (v77 != v82++);
      }
      int v64 = 0;
      float v138 = fmaxf(v138, v73);
      float v139 = fminf(v139, v73);
      float v61 = fminf(v76, v75);
      float v66 = fmaxf(v136, v75);
      float v65 = 0.0;
      id v8 = v134;
      float v57 = v133;
    }
    else if (v65 > v57)
    {
      double v102 = v73;
      double v103 = v75;
      unint64_t v105 = *(double **)(a2 + 8);
      unint64_t v104 = *(void *)(a2 + 16);
      if ((unint64_t)v105 >= v104)
      {
        char v107 = *(double **)a2;
        unint64_t v108 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v105 - *(void *)a2) >> 3);
        unint64_t v109 = v108 + 1;
        if (v108 + 1 > 0x666666666666666) {
          sub_1C494A220();
        }
        unint64_t v110 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v104 - (void)v107) >> 3);
        if (2 * v110 > v109) {
          unint64_t v109 = 2 * v110;
        }
        if (v110 >= 0x333333333333333) {
          unint64_t v111 = 0x666666666666666;
        }
        else {
          unint64_t v111 = v109;
        }
        if (v111)
        {
          if (v111 > 0x666666666666666) {
            sub_1C4949AA8();
          }
          long long v112 = (char *)operator new(40 * v111);
        }
        else
        {
          long long v112 = 0;
        }
        long long v113 = (double *)&v112[40 * v108];
        *long long v113 = v102;
        v113[1] = v103;
        *((_DWORD *)v113 + 4) = v63;
        *((_DWORD *)v113 + 5) = v62;
        *((_DWORD *)v113 + 6) = v64;
        *((unsigned char *)v113 + 28) = 0;
        *((_DWORD *)v113 + 8) = 0;
        long long v114 = v113;
        if (v105 != v107)
        {
          do
          {
            long long v115 = *(_OWORD *)(v105 - 5);
            long long v116 = *(_OWORD *)(v105 - 3);
            *(double *)((char *)v114 - 11) = *(double *)((char *)v105 - 11);
            *(_OWORD *)(v114 - 3) = v116;
            *(_OWORD *)(v114 - 5) = v115;
            v114 -= 5;
            v105 -= 5;
          }
          while (v105 != v107);
          unint64_t v105 = *(double **)a2;
        }
        uint64_t v106 = v113 + 5;
        *(void *)a2 = v114;
        *(void *)(a2 + 8) = v113 + 5;
        *(void *)(a2 + 16) = &v112[40 * v111];
        if (v105) {
          operator delete(v105);
        }
        id v8 = v134;
      }
      else
      {
        *unint64_t v105 = v102;
        v105[1] = v103;
        *((_DWORD *)v105 + 4) = v63;
        *((_DWORD *)v105 + 5) = v62;
        *((_DWORD *)v105 + 6) = v64;
        *((unsigned char *)v105 + 28) = 0;
        uint64_t v106 = v105 + 5;
        *((_DWORD *)v105 + 8) = 0;
      }
      int v64 = 0;
      ++v63;
      *(void *)(a2 + 8) = v106;
      float v138 = fmaxf(v138, v73);
      float v139 = fminf(v139, v73);
      float v61 = fminf(v61, v75);
      float v66 = fmaxf(v66, v75);
      float v65 = 0.0;
    }
    ++v64;
    ++v62;
    float v67 = v75;
    float v59 = v73;
  }
  uint64_t v117 = objc_msgSend_pointCountForStrokeIndex_(v8, v68, 0, v69, v70, v71);
  objc_msgSend_pointForStrokeIndex_pointIndex_(v8, v118, 0, v117 - 1, v119, v120);
  uint64_t v121 = *(void *)(a2 + 8);
  *(void *)(v121 - 40) = v122;
  *(void *)(v121 - 32) = v123;
  int v128 = objc_msgSend_pointCountForStrokeIndex_(v8, v124, 0, v125, v126, v127);
  uint64_t v129 = *(void *)(a2 + 8);
  int v130 = *(_DWORD *)(v129 - 16) + v64;
  *(_DWORD *)(v129 - 20) = v128 - 1;
  *(_DWORD *)(v129 - 16) = v130;
  *char v132 = v139;
  v132[1] = v61;
  v132[2] = (float)(v138 - v139);
  v132[3] = (float)(v66 - v61);

  return v57;
}

void sub_1C495EDAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C495EDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C495EE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t LineRegressor::initialiseArrowHeadDetection(uint64_t this)
{
  *(_DWORD *)(this + 176) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 160) = -858993459 * ((*(void *)(this + 112) - *(void *)(this + 104)) >> 3) - 1;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void LineRegressor::performArrowHeadDetection(LineRegressor *this)
{
  *((_DWORD *)this + 43) = LineRegressor::detectMiddlePointIndex(this, -858993459 * ((*((void *)this + 14) - *((void *)this + 13)) >> 3) - 1, -1);
  *((_DWORD *)this + 47) = LineRegressor::detectMiddlePointIndex(this, 1, 1);
  LineRegressor::detectForwardPointIndex(this);
  LineRegressor::detectBackwardPointIndex(this);
  LineRegressor::detectForwardPointType(this);
  LineRegressor::detectBackwardPointType(this);
  LineRegressor::fillBody(this);
}

uint64_t LineRegressor::detectMiddlePointIndex(LineRegressor *this, int a2, int a3)
{
  double v5 = *((double *)this + 18);
  double v4 = *((double *)this + 19);
  float v6 = v5 * v5 + v4 * v4;
  uint64_t v7 = *((void *)this + 13);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 14) - v7) >> 3);
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 < 1 || (uint64_t v10 = a2, v8 <= a2))
  {
    LODWORD(v22) = -1;
    float v23 = v5 * v5 + v4 * v4;
LABEL_29:
    if (v6 >= v23) {
      uint64_t result = result;
    }
    else {
      uint64_t result = v22;
    }
    goto LABEL_32;
  }
  int v11 = 0;
  int v12 = 0;
  double v13 = v5 * 0.5 + *((double *)this + 16);
  float v14 = v4 * 0.0625 * (v4 * 0.0625) + v5 * 0.0625 * (v5 * 0.0625);
  float v15 = v13;
  float v16 = v4 * 0.5 + *((double *)this + 17);
  double v17 = v15;
  uint64_t v18 = a3;
  double v19 = (double *)(v7 + 40 * a2);
  uint64_t v20 = 40 * a3;
  double v21 = v16;
  uint64_t v22 = 0xFFFFFFFFLL;
  float v23 = v6;
  do
  {
    uint64_t v24 = (double *)(v7 + 40 * (v10 - 1));
    if (*v24 < v17 && *v19 >= v17) {
      BOOL v25 = 1;
    }
    else {
      BOOL v25 = *v24 > v17 && *v19 <= v17;
    }
    double v26 = v24[1];
    double v27 = v19[1];
    BOOL v28 = v27 <= v21;
    if (v26 <= v21) {
      BOOL v28 = 0;
    }
    if (v26 < v21 && v27 >= v21) {
      BOOL v28 = 1;
    }
    float v30 = (v27 - v21) * (v27 - v21) + (*v19 - v17) * (*v19 - v17);
    if (v25)
    {
      ++v12;
      if ((float)(v23 - v30) > v14)
      {
        uint64_t result = v10;
        float v23 = (v27 - v21) * (v27 - v21) + (*v19 - v17) * (*v19 - v17);
      }
    }
    if (v28)
    {
      ++v11;
      if ((float)(v6 - v30) > v14)
      {
        uint64_t v22 = v10;
        float v6 = (v27 - v21) * (v27 - v21) + (*v19 - v17) * (*v19 - v17);
      }
    }
    v10 += v18;
    if (v10 < 1) {
      break;
    }
    double v19 = (double *)((char *)v19 + v20);
  }
  while (v8 > v10);
  if (v11 != 1 || v12 == 1)
  {
    if (v11 != 1 && v12 == 1) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  uint64_t result = v22;
LABEL_32:
  if ((int)result < 1) {
    return 1;
  }
  if (v8 - 2 < result) {
    return (v8 - 2);
  }
  return result;
}

void LineRegressor::detectForwardPointIndex(LineRegressor *this)
{
  *((_DWORD *)this + 41) = -803929351;
  int v1 = *((_DWORD *)this + 43);
  uint64_t v2 = (double *)*((void *)this + 13);
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 14) - (void)v2) >> 3);
  uint64_t v4 = v1;
  if (v3 - 2 > v1)
  {
    char v6 = 0;
    int v7 = v1 + 1;
    float v8 = 0.0;
    float v9 = -1.0e10;
    do
    {
      uint64_t v10 = &v2[5 * v4];
      double v12 = *v10;
      double v11 = v10[1];
      float v13 = *(v10 - 5) - *v10;
      float v14 = *(v10 - 4) - v11;
      float v15 = (float)(v14 * v14) + (float)(v13 * v13);
      if (v15 > 0.0)
      {
        float v13 = v13 / v15;
        float v14 = v14 / v15;
      }
      ++v1;
      uint64_t v16 = v4 + 1;
      if (v3 > v4 + 1)
      {
        char v17 = 0;
        uint64_t v18 = &v2[5 * v7 + 1];
        float v19 = -1.0e10;
        float v20 = 1.0e10;
        unint64_t v21 = v1;
        float v22 = -v13;
        float v23 = -v14;
        double v24 = v22;
        double v25 = (float)-v14;
        double v26 = sqrtf(v15);
        float v27 = *((float *)this + 24);
        float v28 = 1.0e10;
        float v29 = -1.0e10;
        do
        {
          double v30 = *(v18 - 1) - v12;
          double v31 = *v18 - v11;
          double v32 = v31 * v25 + v30 * v24;
          float v33 = v32 * v26;
          float v34 = v32;
          float v35 = v30 * v25 - v31 * v24;
          if (v20 > v34) {
            float v20 = v34;
          }
          if (v19 < v34) {
            float v19 = v34;
          }
          v17 |= (float)(v27 * 0.5) > v33;
          if (v28 > v35) {
            float v28 = v35;
          }
          if (v29 < v35) {
            float v29 = v35;
          }
          ++v21;
          v18 += 5;
        }
        while (v3 > v21);
        if (v17)
        {
          float v36 = (float)(v19 + v20) * 0.5;
          float v37 = (float)(v29 + v28) * 0.5;
          double v38 = v12 + (float)(v15 * (float)(v36 * v22)) + (float)(v15 * (float)(v37 * v23));
          double v39 = v11 + (float)(v15 * (float)(v36 * v23)) - (float)(v15 * (float)(v37 * v22));
          double v40 = v38 - v12;
          double v41 = v39 - v11;
          *(float *)&double v38 = (v41 * v25 + (v38 - v12) * v24) * v26;
          float v42 = (v40 * v25 - v41 * v24) * v26;
          float v43 = fabsf(v42);
          if ((float)(v27 * -0.5) < *(float *)&v38 && v43 < v27)
          {
            float v45 = v15 * (float)((float)(v29 - v28) * (float)(v19 - v20));
            if ((v6 & 1) == 0) {
              float v8 = v45;
            }
            if (v4 < 3)
            {
              float v48 = -2.0;
              if (v4 == 2)
              {
                float v49 = (*v2 - v12) * v25 - (v2[1] - v11) * v24;
                float v48 = -1.0 - fabsf(v49);
              }
            }
            else
            {
              float v46 = (v2[5 * (v4 - 2)] - v12) * v25 - (v2[5 * (v4 - 2) + 1] - v11) * v24;
              float v47 = (v2[5 * (v4 - 3)] - v12) * v25 - (v2[5 * (v4 - 3) + 1] - v11) * v24;
              float v48 = (float)-fabsf(v46) + fabsf(v47) * -0.5;
            }
            float v50 = (float)((float)(v45 / v8) - (float)((float)(v29 + v28) * (float)(v29 + v28))) + v48;
            if (v50 > v9)
            {
              *((float *)this + 41) = v50;
              *((_DWORD *)this + 40) = v4;
              *((float *)this + 42) = atan2f(v23, v22);
              char v6 = 1;
              float v9 = v50;
            }
            else
            {
              char v6 = 1;
            }
          }
        }
      }
      ++v7;
      uint64_t v4 = v16;
    }
    while (v16 != v3 - 2);
  }
}

void LineRegressor::detectBackwardPointIndex(LineRegressor *this)
{
  *((_DWORD *)this + 45) = -803929351;
  int v1 = *((_DWORD *)this + 47);
  if (v1 >= 2)
  {
    char v3 = 0;
    uint64_t v4 = *((void *)this + 13);
    float v5 = *((float *)this + 24);
    float v6 = 0.0;
    int v7 = 0;
    float v8 = -1.0e10;
    unint64_t v9 = *((unsigned int *)this + 47);
    do
    {
      double v11 = (double *)(v4 + 40 * v9);
      double v13 = *v11;
      double v12 = v11[1];
      float v14 = (double *)(v4 + 40 * (v9 + 1));
      float v15 = *v14 - v13;
      float v16 = v14[1] - v12;
      float v17 = (float)(v16 * v16) + (float)(v15 * v15);
      if (v17 > 0.0)
      {
        float v15 = v15 / v17;
        float v16 = v16 / v17;
      }
      char v18 = 0;
      float v19 = -v15;
      float v20 = -v16;
      double v21 = v19;
      double v22 = (float)-v16;
      double v23 = sqrtf(v17);
      float v24 = -1.0e10;
      float v25 = 1.0e10;
      int v26 = v7;
      float v27 = 1.0e10;
      float v28 = -1.0e10;
      do
      {
        float v29 = (double *)(v4 + 40 * (v1 + v26 - 1));
        double v30 = *v29 - v13;
        double v31 = v29[1] - v12;
        double v32 = v31 * v22 + v30 * v21;
        float v33 = v32 * v23;
        float v34 = v32;
        float v35 = v30 * v22 - v31 * v21;
        v18 |= (float)(v5 * 0.5) > v33;
        if (v25 > v34) {
          float v25 = v34;
        }
        if (v24 < v34) {
          float v24 = v34;
        }
        if (v27 > v35) {
          float v27 = v35;
        }
        if (v28 < v35) {
          float v28 = v35;
        }
        --v26;
      }
      while (v1 + v26 + 1 > 2);
      if (v18)
      {
        float v36 = (float)(v24 + v25) * 0.5;
        float v37 = (float)(v28 + v27) * 0.5;
        double v38 = v13 + (float)(v17 * (float)(v36 * v19)) + (float)(v17 * (float)(v37 * v20));
        double v39 = v12 + (float)(v17 * (float)(v36 * v20)) - (float)(v17 * (float)(v37 * v19));
        double v40 = v38 - v13;
        double v41 = v39 - v12;
        *(float *)&double v38 = (v41 * v22 + (v38 - v13) * v21) * v23;
        float v42 = (v40 * v22 - v41 * v21) * v23;
        float v43 = fabsf(v42);
        if (v5 * -0.5 < *(float *)&v38 && v43 < v5)
        {
          float v45 = v17 * (float)((float)(v28 - v27) * (float)(v24 - v25));
          if ((v3 & 1) == 0) {
            float v6 = v45;
          }
          unint64_t v46 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 14) - v4) >> 3);
          if (v46 - 3 <= v9)
          {
            float v50 = -2.0;
            if (v46 - 2 > v9)
            {
              float v51 = (*(double *)(v4 + 40 * v9 + 80) - v13) * v22 - (*(double *)(v4 + 40 * v9 + 88) - v12) * v21;
              float v50 = -1.0 - fabsf(v51);
            }
          }
          else
          {
            float v47 = (double *)(v4 + 40 * v9);
            float v48 = (v47[10] - v13) * v22 - (v47[11] - v12) * v21;
            float v49 = (v47[15] - v13) * v22 - (v47[16] - v12) * v21;
            float v50 = (float)-fabsf(v48) + fabsf(v49) * -0.5;
          }
          float v52 = (float)((float)(v45 / v6) - (float)((float)(v28 + v27) * (float)(v28 + v27))) + v50;
          if (v52 > v8)
          {
            *((float *)this + 45) = v52;
            *((_DWORD *)this + 44) = v9;
            *((float *)this + 46) = atan2f(v20, v19);
            char v3 = 1;
            float v8 = v52;
          }
          else
          {
            char v3 = 1;
          }
        }
      }
      --v7;
    }
    while ((uint64_t)v9-- > 2);
  }
}

void LineRegressor::detectForwardPointType(LineRegressor *this)
{
  if (*((float *)this + 41) >= -2.0)
  {
    float v27 = objc_alloc_init(CHDrawing);
    uint64_t v2 = objc_alloc_init(CHDrawing);
    char v3 = (void *)*((void *)this + 9);
    *((void *)this + 9) = v2;

    for (unint64_t i = *(int *)(*((void *)this + 13) + 40 * *((int *)this + 40) + 60);
          objc_msgSend_pointCountForStrokeIndex_(*((void **)this + 1), v4, 0, v5, v6, v7) > i;
          ++i)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v9, 0, i, v10, v11);
      double v13 = v12;
      double v15 = v14;
      objc_msgSend_addPoint_(*((void **)this + 9), v16, v17, v18, v19, v20);
      __float2 v21 = __sincosf_stret(*((float *)this + 46));
      objc_msgSend_addPoint_(v27, v22, v23, v24, v25, v26, v15 * v21.__sinval + v13 * v21.__cosval, v15 * v21.__cosval - v13 * v21.__sinval);
    }
    *((_DWORD *)this + 16) = 1;
  }
  else
  {
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 40) = -858993459 * ((*((void *)this + 14) - *((void *)this + 13)) >> 3) - 1;
  }
}

void sub_1C495F890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_1C495F8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C495F8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void LineRegressor::detectBackwardPointType(LineRegressor *this)
{
  if (*((float *)this + 45) >= -2.0)
  {
    uint64_t v24 = objc_alloc_init(CHDrawing);
    uint64_t v2 = objc_alloc_init(CHDrawing);
    char v3 = (void *)*((void *)this + 5);
    *((void *)this + 5) = v2;

    uint64_t v7 = *(unsigned int *)(*((void *)this + 13) + 40 * *((int *)this + 44) - 20);
    if ((int)v7 >= 1)
    {
      do
      {
        objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v4, 0, v7, v5, v6);
        double v9 = v8;
        double v11 = v10;
        objc_msgSend_addPoint_(*((void **)this + 5), v12, v13, v14, v15, v16);
        __float2 v17 = __sincosf_stret(*((float *)this + 46));
        objc_msgSend_addPoint_(v24, v18, v19, v20, v21, v22, v11 * v17.__sinval + v9 * v17.__cosval, v11 * v17.__cosval - v9 * v17.__sinval);
      }
      while (v7-- > 1);
    }
    *((_DWORD *)this + 8) = 1;
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    *((_DWORD *)this + 44) = 0;
  }
}

void sub_1C495F9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_1C495FA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C495FA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void LineRegressor::fillBody(LineRegressor *this)
{
  uint64_t v2 = objc_alloc_init(CHDrawing);
  char v3 = (void *)*((void *)this + 10);
  *((void *)this + 10) = v2;

  __p = 0;
  long long v118 = 0;
  uint64_t v120 = 0;
  int v8 = *((_DWORD *)this + 44);
  if (v8 >= 2)
  {
    uint64_t v9 = *((void *)this + 13);
    double v10 = (double *)(v9 + 40 * v8);
    double v11 = v10[5];
    double v12 = v10[6];
    float v13 = *v10 - v11;
    float v14 = v10[1] - v12;
    float v15 = (float)(v14 * v14) + (float)(v13 * v13);
    if (v15 > 0.0)
    {
      float v13 = v13 / v15;
      float v14 = v14 / v15;
    }
    uint64_t v16 = *(unsigned int *)(v9 + 40 * v8 + 20);
    double v17 = v13;
    double v18 = v14;
    objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v4, 0, v16, v6, v7);
    while (1)
    {
      double v26 = v22;
      double v27 = v23;
      float v28 = (v23 - v12) * v18 + (v22 - v11) * v17;
      float v29 = v118;
      if (v118 < (double *)v120)
      {
        *long long v118 = v22;
        v118[1] = v23;
        v118[2] = 0.0;
        *(double *)((char *)v118 + 21) = 0.0;
        uint64_t v24 = v118 + 5;
        *((float *)v118 + 8) = v28;
      }
      else
      {
        unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * (v118 - __p) + 1;
        if (v30 > 0x666666666666666) {
          sub_1C494A220();
        }
        if (0x999999999999999ALL * ((v120 - (char *)__p) >> 3) > v30) {
          unint64_t v30 = 0x999999999999999ALL * ((v120 - (char *)__p) >> 3);
        }
        unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((v120 - (char *)__p) >> 3) >= 0x333333333333333 ? 0x666666666666666 : v30;
        if (v31)
        {
          if (v31 > 0x666666666666666) {
            sub_1C4949AA8();
          }
          double v32 = (char *)operator new(40 * v31);
        }
        else
        {
          double v32 = 0;
        }
        float v33 = &v32[8 * (v118 - __p)];
        *(double *)float v33 = v26;
        *((double *)v33 + 1) = v27;
        *((void *)v33 + 2) = 0;
        *(void *)(v33 + 21) = 0;
        *((float *)v33 + 8) = v28;
        float v34 = (double *)v33;
        if (v118 != __p)
        {
          do
          {
            long long v35 = *(_OWORD *)(v29 - 5);
            long long v36 = *(_OWORD *)(v29 - 3);
            *(double *)((char *)v34 - 11) = *(double *)((char *)v29 - 11);
            *(_OWORD *)(v34 - 3) = v36;
            *(_OWORD *)(v34 - 5) = v35;
            v34 -= 5;
            v29 -= 5;
          }
          while (v29 != __p);
          float v29 = __p;
        }
        uint64_t v24 = (double *)(v33 + 40);
        __p = v34;
        uint64_t v120 = &v32[40 * v31];
        if (v29) {
          operator delete(v29);
        }
      }
      long long v118 = v24;
      BOOL v25 = v16-- <= 1;
      if (v25) {
        break;
      }
      objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v19, 0, v16, v20, v21);
    }
    float v37 = (char *)__p;
    double v38 = (float *)(__p + 5);
    if (__p != v24 && v38 != (float *)v24)
    {
      do
      {
        if (*((float *)v37 + 8) < v38[8]) {
          float v37 = (char *)v38;
        }
        v38 += 10;
      }
      while (v38 != (float *)v24);
    }
    double v41 = *(double *)v37;
    double v40 = *((double *)v37 + 1);
    float v42 = *((float *)v37 + 8);
    objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v19, 0, *(int *)(*((void *)this + 13) + 40 * *((int *)this + 44) + 20), v20, v21);
    double v45 = v44;
    double v47 = v46;
    float v48 = v41 - v44;
    float v49 = v40 - v46;
    float v50 = (float)(v49 * v49) + (float)(v48 * v48);
    if (v50 > 0.0) {
      float v51 = v48 / v50;
    }
    else {
      float v51 = v48;
    }
    if (v50 > 0.0) {
      float v52 = v49 / v50;
    }
    else {
      float v52 = v49;
    }
    if (v42 > 0.0)
    {
      float v53 = sqrtf(v50);
      float v54 = 1.0;
      float v55 = 1.0 / ceilf((float)(v53 + v53) / *((float *)this + 24));
      do
      {
        objc_msgSend_addPoint_(*((void **)this + 10), v4, v43, v5, v6, v7, v45 + (float)(v50 * (float)(v51 * v54)), v47 + (float)(v50 * (float)(v52 * v54)));
        float v54 = v54 - v55;
      }
      while (v54 > 0.01);
    }
  }
  uint64_t v56 = *((void *)this + 13);
  uint64_t v57 = *(int *)(v56 + 40 * *((int *)this + 44) + 20);
  int v58 = *((_DWORD *)this + 40);
  LODWORD(v59) = *(_DWORD *)(v56 + 40 * v58 + 20);
  if ((int)v57 <= (int)v59)
  {
    do
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v4, 0, v57, v6, v7);
      objc_msgSend_addPoint_(*((void **)this + 10), v61, v62, v63, v64, v65);
      int v58 = *((_DWORD *)this + 40);
      uint64_t v56 = *((void *)this + 13);
      uint64_t v59 = *(int *)(v56 + 40 * v58 + 20);
      BOOL v25 = v57++ < v59;
    }
    while (v25);
    unint64_t v60 = v58;
  }
  else
  {
    unint64_t v60 = v58;
  }
  uint64_t v119 = __p;
  if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 14) - v56) >> 3) - 2 > v60)
  {
    float v66 = (double *)(v56 + 40 * (int)v60);
    float v67 = (double *)(v56 + 40 * (v58 - 1));
    double v68 = *v67;
    double v69 = v67[1];
    float v70 = *v66 - *v67;
    float v71 = v66[1] - v69;
    float v72 = (float)(v71 * v71) + (float)(v70 * v70);
    if (v72 > 0.0)
    {
      float v70 = v70 / v72;
      float v71 = v71 / v72;
    }
    double v73 = v70;
    double v74 = v71;
    for (unint64_t i = (int)v59; objc_msgSend_pointCountForStrokeIndex_(*((void **)this + 1), v4, 0, v5, v6, v7) > i; ++i)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v77, 0, i, v78, v79);
      double v82 = v80;
      double v83 = v81;
      float v84 = (v81 - v69) * v74 + (v80 - v68) * v73;
      long long v85 = v119;
      if (v119 < (double *)v120)
      {
        double *v119 = v80;
        v119[1] = v81;
        v119[2] = 0.0;
        *(double *)((char *)v119 + 21) = 0.0;
        float v76 = v119 + 5;
        *((float *)v119 + 8) = v84;
      }
      else
      {
        unint64_t v86 = 0xCCCCCCCCCCCCCCCDLL * (v119 - __p) + 1;
        if (v86 > 0x666666666666666) {
          sub_1C494A220();
        }
        if (0x999999999999999ALL * ((v120 - (char *)__p) >> 3) > v86) {
          unint64_t v86 = 0x999999999999999ALL * ((v120 - (char *)__p) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v120 - (char *)__p) >> 3) >= 0x333333333333333) {
          unint64_t v87 = 0x666666666666666;
        }
        else {
          unint64_t v87 = v86;
        }
        if (v87)
        {
          if (v87 > 0x666666666666666) {
            sub_1C4949AA8();
          }
          float v88 = (char *)operator new(40 * v87);
        }
        else
        {
          float v88 = 0;
        }
        double v89 = &v88[8 * (v119 - __p)];
        *(double *)double v89 = v82;
        *((double *)v89 + 1) = v83;
        *((void *)v89 + 2) = 0;
        *(void *)(v89 + 21) = 0;
        *((float *)v89 + 8) = v84;
        double v90 = (double *)v89;
        if (v119 != __p)
        {
          do
          {
            long long v91 = *(_OWORD *)(v85 - 5);
            long long v92 = *(_OWORD *)(v85 - 3);
            *(double *)((char *)v90 - 11) = *(double *)((char *)v85 - 11);
            *(_OWORD *)(v90 - 3) = v92;
            *(_OWORD *)(v90 - 5) = v91;
            v90 -= 5;
            v85 -= 5;
          }
          while (v85 != __p);
          long long v85 = __p;
        }
        float v76 = (double *)(v89 + 40);
        __p = v90;
        uint64_t v120 = &v88[40 * v87];
        if (v85) {
          operator delete(v85);
        }
      }
      uint64_t v119 = v76;
    }
    unint64_t v93 = (char *)__p;
    unint64_t v94 = (float *)(__p + 5);
    if (__p != v119 && v94 != (float *)v119)
    {
      do
      {
        if (*((float *)v93 + 8) < v94[8]) {
          unint64_t v93 = (char *)v94;
        }
        v94 += 10;
      }
      while (v94 != (float *)v119);
    }
    double v97 = *(double *)v93;
    double v96 = *((double *)v93 + 1);
    float v98 = *((float *)v93 + 8);
    objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v77, 0, *(int *)(*((void *)this + 13) + 40 * *((int *)this + 40) + 20), v78, v79);
    double v105 = v104;
    double v107 = v106;
    float v108 = v97 - v104;
    float v109 = v96 - v106;
    float v110 = (float)(v109 * v109) + (float)(v108 * v108);
    *(float *)&double v111 = v108 / v110;
    if (v110 > 0.0) {
      float v112 = v109 / v110;
    }
    else {
      float v112 = v109;
    }
    if (v110 > 0.0) {
      float v113 = v108 / v110;
    }
    else {
      float v113 = v108;
    }
    if (v98 > 0.0)
    {
      float v114 = sqrtf(v110);
      float v115 = 1.0 / ceilf((float)(v114 + v114) / *((float *)this + 24));
      if (v115 < 1.01)
      {
        float v116 = v115;
        do
        {
          objc_msgSend_addPoint_(*((void **)this + 10), v99, v100, v101, v102, v103, v105 + (float)(v110 * (float)(v113 * v116)), v107 + (float)(v110 * (float)(v112 * v116)), v111);
          float v116 = v115 + v116;
        }
        while (v116 < 1.01);
      }
    }
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void sub_1C49600EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id LineRegressor::provideAnAnswer(LineRegressor *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((_OWORD *)this + 1) = *(_OWORD *)*((void *)this + 13);
  *((_OWORD *)this + 3) = *(_OWORD *)(v1 - 40);
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 8) = 0;
  StraightLineRegressor::StraightLineRegressor((uint64_t)v4, *((void **)this + 1), (uint64_t)this + 16, *((void **)this + 1), (uint64_t)this + 48, *(void *)this);
  id v2 = v4[3];

  return v2;
}

void sub_1C49604DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49604F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49605D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4960828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4960968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4960978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4960A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4960B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4960B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4960B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4960BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4960BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4961050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a27, 8);

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v42 - 144), 8);

  _Unwind_Resume(a1);
}

id sub_1C4961130(unsigned __int8 *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = [CHRemoteRecognitionTextRequest alloc];
    float v13 = objc_msgSend_locales(a1, v8, v9, v10, v11, v12);
    uint64_t v19 = objc_msgSend_recognitionMode(a1, v14, v15, v16, v17, v18);
    uint64_t v25 = objc_msgSend_priority(a1, v20, v21, v22, v23, v24);
    double v27 = objc_msgSend_initWithLocales_recognitionMode_drawing_options_priority_(v7, v26, (uint64_t)v13, v19, (uint64_t)v5, (uint64_t)v6, v25);

    float v33 = objc_msgSend_activeCharacterSetPerLocale(a1, v28, v29, v30, v31, v32);
    objc_msgSend_setActiveCharacterSetPerLocale_(v27, v34, (uint64_t)v33, v35, v36, v37);

    uint64_t v43 = objc_msgSend_contentType(a1, v38, v39, v40, v41, v42);
    objc_msgSend_setContentType_(v27, v44, v43, v45, v46, v47);
    uint64_t v53 = objc_msgSend_autoCapitalizationMode(a1, v48, v49, v50, v51, v52);
    objc_msgSend_setAutoCapitalizationMode_(v27, v54, v53, v55, v56, v57);
    uint64_t v63 = objc_msgSend_autoCorrectionMode(a1, v58, v59, v60, v61, v62);
    objc_msgSend_setAutoCorrectionMode_(v27, v64, v63, v65, v66, v67);
    uint64_t v73 = objc_msgSend_baseWritingDirection(a1, v68, v69, v70, v71, v72);
    objc_msgSend_setBaseWritingDirection_(v27, v74, v73, v75, v76, v77);
    uint64_t v83 = objc_msgSend_maxRecognitionResultCount(a1, v78, v79, v80, v81, v82);
    objc_msgSend_setMaxRecognitionResultCount_(v27, v84, v83, v85, v86, v87);
    objc_msgSend_minimumDrawingSize(a1, v88, v89, v90, v91, v92);
    objc_msgSend_setMinimumDrawingSize_(v27, v93, v94, v95, v96, v97);
    uint64_t shouldUseTextReplacements = objc_msgSend_shouldUseTextReplacements(a1, v98, v99, v100, v101, v102);
    objc_msgSend_setShouldUseTextReplacements_(v27, v104, shouldUseTextReplacements, v105, v106, v107);
    uint64_t v113 = objc_msgSend_enableCachingIfAvailable(a1, v108, v109, v110, v111, v112);
    objc_msgSend_setEnableCachingIfAvailable_(v27, v114, v113, v115, v116, v117);
    uint64_t v123 = objc_msgSend_enableGen2ModelIfAvailable(a1, v118, v119, v120, v121, v122);
    objc_msgSend_setEnableGen2ModelIfAvailable_(v27, v124, v123, v125, v126, v127);
    uint64_t v133 = objc_msgSend_enableGen2CharacterLMIfAvailable(a1, v128, v129, v130, v131, v132);
    objc_msgSend_setEnableGen2CharacterLMIfAvailable_(v27, v134, v133, v135, v136, v137);
    objc_msgSend_setEnableStrokeReordering_(v27, v138, a1[56], v139, v140, v141);
    long long v147 = objc_msgSend_declaredVariables(a1, v142, v143, v144, v145, v146);
    objc_msgSend_setCustomLexiconEntries_(v27, v148, (uint64_t)v147, v149, v150, v151);
  }
  else
  {
    double v27 = 0;
  }

  return v27;
}

void sub_1C496130C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C496132C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4961340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4961358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49616DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4961788(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4961798(uint64_t a1)
{
}

void sub_1C49617A0(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9FB0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    int v13 = 138412290;
    float v14 = v10;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v3;
}

void sub_1C49618A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49618C0(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  uint64_t v11 = v10;
  if (v8 && v9)
  {
    objc_storeStrong((id *)(*(void *)(a1[4] + 8) + 40), a2);
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a3);
  }
  else if (v10)
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a4);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v12 = (id)qword_1EA3C9FB0;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = objc_msgSend_localizedDescription(*(void **)(*(void *)(a1[6] + 8) + 40), v13, v14, v15, v16, v17);
      int v19 = 138412290;
      uint64_t v20 = v18;
      _os_log_impl(&dword_1C492D000, v12, OS_LOG_TYPE_DEBUG, "Error during recognition: %@", (uint8_t *)&v19, 0xCu);
    }
  }
}

void sub_1C4961A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4961A60(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9FB0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    id v10 = objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    int v13 = 138412290;
    uint64_t v14 = v10;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v3;
}

void sub_1C4961B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4961B80(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  id v10 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  else if (v7)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v11 = (id)qword_1EA3C9FB0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = objc_msgSend_localizedDescription(v10, v12, v13, v14, v15, v16);
      int v18 = 138412290;
      int v19 = v17;
      _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_DEBUG, "Error during recognition: %@", (uint8_t *)&v18, 0xCu);
    }
  }
  objc_msgSend_logDrawingsAndResultsForRequest_result_error_(*(void **)(a1 + 32), v8, *(void *)(a1 + 40), (uint64_t)v6, (uint64_t)v10, v9);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
}

void sub_1C4961CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4962044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49620EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4962100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4962180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49623D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4962490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4962704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4962728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C496286C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4962888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4962A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4962BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4962CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4962CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C496338C(_Unwind_Exception *a1)
{
  id v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1C49633B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49634F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49637F0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4963840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49639A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4963B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4963B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4963E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4963FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4964014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4964028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C496403C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C496404C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4964060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49641D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if ((id)a1 == v3)
    {
      a1 = 1;
    }
    else
    {
      v76.receiver = (id)a1;
      v76.super_class = (Class)CHTokenizedTextResultToken;
      if (!objc_msgSendSuper2(&v76, sel_isEqualToTokenizedResultToken_, v3)) {
        goto LABEL_17;
      }
      int v10 = *(_DWORD *)(a1 + 56);
      if (v10 != objc_msgSend_wordID(v4, v5, v6, v7, v8, v9)) {
        goto LABEL_17;
      }
      double v16 = *(double *)(a1 + 64);
      objc_msgSend_modelScore(v4, v11, v12, v13, v14, v15);
      if (vabdd_f64(v16, v22) >= 2.22044605e-16) {
        goto LABEL_17;
      }
      double v23 = *(double *)(a1 + 72);
      objc_msgSend_recognitionScore(v4, v17, v18, v19, v20, v21);
      if (vabdd_f64(v23, v29) >= 2.22044605e-16) {
        goto LABEL_17;
      }
      double v30 = *(double *)(a1 + 80);
      objc_msgSend_combinedScore(v4, v24, v25, v26, v27, v28);
      if (vabdd_f64(v30, v36) >= 2.22044605e-16) {
        goto LABEL_17;
      }
      double v37 = *(double *)(a1 + 88);
      objc_msgSend_alignmentScore(v4, v31, v32, v33, v34, v35);
      if (vabdd_f64(v37, v43) >= 2.22044605e-16) {
        goto LABEL_17;
      }
      uint64_t v44 = *(void *)(a1 + 96);
      if (v44 != objc_msgSend_properties(v4, v38, v39, v40, v41, v42)) {
        goto LABEL_17;
      }
      uint64_t v50 = *(void **)(a1 + 104);
      uint64_t v56 = objc_msgSend_recognizerSourceLocale(v4, v45, v46, v47, v48, v49);
      if (v50 == v56)
      {
      }
      else
      {
        uint64_t v57 = *(void **)(a1 + 104);
        int v58 = objc_msgSend_recognizerSourceLocale(v4, v51, v52, v53, v54, v55);
        LODWORD(v57) = objc_msgSend_isEqual_(v57, v59, (uint64_t)v58, v60, v61, v62);

        if (!v57) {
          goto LABEL_17;
        }
      }
      uint64_t v68 = *(void *)(a1 + 112);
      if (v68 != objc_msgSend_inputSources(v4, v63, v64, v65, v66, v67))
      {
LABEL_17:
        a1 = 0;
        goto LABEL_18;
      }
      uint64_t v74 = *(void *)(a1 + 120);
      a1 = v74 == objc_msgSend_substrokeCount(v4, v69, v70, v71, v72, v73);
    }
  }
LABEL_18:

  return a1;
}

void sub_1C49643D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49643EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4964400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4964480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1C49644D8(CHTokenizedTextResultToken *self, SEL a2)
{
  return self->_inputSources;
}

BOOL sub_1C49644E8(CHTokenizedTextResultToken *self, SEL a2)
{
  return self->_isOriginal;
}

BOOL sub_1C49644F8(CHTokenizedTextResultToken *self, SEL a2)
{
  return self->_isTopOriginal;
}

BOOL sub_1C4964508(CHTokenizedTextResultToken *self, SEL a2)
{
  return self->_isTransliterated;
}

NSLocale *__cdecl sub_1C4964518(CHTokenizedTextResultToken *self, SEL a2)
{
  return self->_recognizerSourceLocale;
}

void sub_1C49647E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49649AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4964A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4964A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4964AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4964AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4964B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4964C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4964CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4964D50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v98 = v3;
    char v9 = objc_msgSend_properties(v3, v4, v5, v6, v7, v8);
    int v10 = @" ";
    if ((v9 & 0x20) == 0) {
      int v10 = &stru_1F20141C8;
    }
    uint64_t v11 = v10;
    uint64_t v12 = *(void **)(a1 + 296);
    uint64_t v18 = objc_msgSend_string(v98, v13, v14, v15, v16, v17);
    uint64_t v23 = objc_msgSend_stringByAppendingFormat_(v12, v19, @"%@%@", v20, v21, v22, v11, v18);
    uint64_t v24 = *(void **)(a1 + 296);
    *(void *)(a1 + 296) = v23;

    double v30 = objc_msgSend_mutableCopy(*(void **)(a1 + 304), v25, v26, v27, v28, v29);
    double v36 = objc_msgSend_strokeIndexes(v98, v31, v32, v33, v34, v35);
    objc_msgSend_addIndexes_(v30, v37, (uint64_t)v36, v38, v39, v40);

    objc_storeStrong((id *)(a1 + 304), v30);
    *(void *)(a1 + 120) += objc_msgSend_substrokeCount(v98, v41, v42, v43, v44, v45);
    objc_msgSend_recognitionScore(v98, v46, v47, v48, v49, v50);
    *(double *)(a1 + 72) = v51 * *(double *)(a1 + 72);
    objc_msgSend_combinedScore(v98, v52, v53, v54, v55, v56);
    *(double *)(a1 + 80) = v57 * *(double *)(a1 + 80);
    objc_msgSend_alignmentScore(v98, v58, v59, v60, v61, v62);
    *(void *)(a1 + 88) = v63;
    CGFloat v64 = *(double *)(a1 + 312);
    CGFloat v65 = *(double *)(a1 + 320);
    CGFloat v66 = *(double *)(a1 + 328);
    CGFloat v67 = *(double *)(a1 + 336);
    objc_msgSend_bounds(v98, v68, v69, v70, v71, v72);
    v101.origin.double x = v73;
    v101.origin.double y = v74;
    v101.size.double width = v75;
    v101.size.double height = v76;
    v100.origin.double x = v64;
    v100.origin.double y = v65;
    v100.size.double width = v66;
    v100.size.double height = v67;
    *(CGRect *)(a1 + 312) = CGRectUnion(v100, v101);
    uint64_t v77 = *(void *)(a1 + 112);
    uint64_t v83 = objc_msgSend_inputSources(v98, v78, v79, v80, v81, v82);
    uint64_t v84 = *(void *)(a1 + 112);
    char v90 = objc_msgSend_inputSources(v98, v85, v86, v87, v88, v89);
    uint64_t v96 = v83 | v77;
    if ((v90 & 4) == 0 || (v84 & 4) == 0) {
      v96 &= ~4uLL;
    }
    *(void *)(a1 + 112) = v96;
    if ((objc_msgSend_properties(v98, v91, v92, v93, v94, v95) & 0x10) != 0) {
      *(void *)(a1 + 96) |= 0x10uLL;
    }

    id v3 = v98;
  }
}

void sub_1C4964F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49651EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49651FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49652B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49653E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49653F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4965728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49658F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4965B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4965BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4965BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4965D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4965DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4965DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4965DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4966098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4966150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4966164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4966324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C496649C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4966688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4966768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C496677C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C496680C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4966820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49669B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4967994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, _Unwind_Exception *exception_object, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  _Unwind_Resume(a1);
}

void sub_1C4968618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4968628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4968638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29)
{
  _Unwind_Resume(a1);
}

void sub_1C496884C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4968880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4968894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49688A4()
{
  uint64_t v0 = (void *)qword_1EA3C9D10;
  qword_1EA3C9D10 = (uint64_t)&unk_1F203CEF0;
}

uint64_t sub_1C4968A28(uint64_t a1, const char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7 = (int)a2;
  uint64_t v8 = a1;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v8 = *(void *)a1;
  }
  char v9 = objc_msgSend_stringWithCString_encoding_(NSString, a2, v8, 4, a5, a6);
  if (v9)
  {
    if (v7) {
      int v10 = MGGetBoolAnswer() ^ 1;
    }
    else {
      int v10 = 1;
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v11 = (id)qword_1EA3C9F98;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)uint64_t v35 = v10;
      _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_DEBUG, "Model execution on CPU only: %d", buf, 8u);
    }

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v12 = (id)qword_1EA3C9F98;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)uint64_t v35 = a3;
      _os_log_impl(&dword_1C492D000, v12, OS_LOG_TYPE_DEBUG, "Model batch size: %d", buf, 8u);
    }

    char v13 = v10 ^ 1;
    if (a3 < 2) {
      char v13 = 1;
    }
    if ((v13 & 1) == 0)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v14 = (id)qword_1EA3C9F98;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)uint64_t v35 = 1;
        *(_WORD *)&v35[4] = 1024;
        *(_DWORD *)&v35[6] = 1;
        _os_log_impl(&dword_1C492D000, v14, OS_LOG_TYPE_DEBUG, "Falling back to a batch size of %u for usesCPUOnly == %d", buf, 0xEu);
      }
    }
    id v15 = objc_alloc(MEMORY[0x1E4F1E990]);
    if (v10) {
      uint64_t v20 = objc_msgSend_initWithComputeUnits_(v15, v16, 0, v17, v18, v19);
    }
    else {
      uint64_t v20 = objc_msgSend_initWithComputeUnits_(v15, v16, 2, v17, v18, v19);
    }
    uint64_t v32 = (void *)v20;
    objc_msgSend_fileURLWithPath_(MEMORY[0x1E4F1CB10], v21, (uint64_t)v9, v22, v23, v24);
    double v30 = v33 = 0;
    uint64_t v27 = objc_msgSend_modelWithContentsOfURL_configuration_error_(MEMORY[0x1E4F1E968], v25, (uint64_t)v30, (uint64_t)v32, (uint64_t)&v33, v26);
    id v31 = v33;
    if (v27) {
      operator new();
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v28 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)uint64_t v35 = v31;
      *(_WORD *)&v35[8] = 2112;
      double v36 = v9;
      _os_log_impl(&dword_1C492D000, v28, OS_LOG_TYPE_FAULT, "Error in MMapBinaryModel: %@ from path=%@", buf, 0x16u);
    }
  }
  return 0;
}

void sub_1C4969374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4969608(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (*(_DWORD *)(a2 + 24))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      uint64_t v8 = a1 + 8 * a3;
      do
      {
        int v10 = *(_DWORD *)CHCodeMap::operator[](a2, v7);
        float v11 = *(double *)(v8 + 8 * v7);
        unint64_t v12 = a4[2];
        if ((unint64_t)v6 < v12)
        {
          *(_DWORD *)uint64_t v6 = v10;
          v6[1] = v11;
          char v9 = v6 + 2;
        }
        else
        {
          char v13 = (float *)*a4;
          uint64_t v14 = (uint64_t)v6 - *a4;
          uint64_t v15 = v14 >> 3;
          unint64_t v16 = (v14 >> 3) + 1;
          if (v16 >> 61) {
            sub_1C494A220();
          }
          uint64_t v17 = v12 - (void)v13;
          if (v17 >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            if (v18 >> 61) {
              sub_1C4949AA8();
            }
            uint64_t v19 = operator new(8 * v18);
            uint64_t v20 = (uint64_t)&v19[8 * v15];
            *(_DWORD *)uint64_t v20 = v10;
            *(float *)(v20 + 4) = v11;
            uint64_t v21 = (char *)((char *)v6 - (char *)v13);
            if (v6 != v13)
            {
LABEL_16:
              unint64_t v22 = (unint64_t)(v21 - 8);
              if (v22 < 0x168
                || (unint64_t v26 = ((char *)(v6 - 2) - (char *)v13) & 0xFFFFFFFFFFFFFFF8, &v19[v14 - 8 - v26] > &v19[v14 - 8])
                || (float *)((char *)v6 - v26 - 8) > v6 - 2
                || (unint64_t)((char *)v6 - v19 - v14) < 0x20)
              {
                uint64_t v23 = v6;
                uint64_t v24 = v20;
              }
              else
              {
                uint64_t v27 = (v22 >> 3) + 1;
                uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v23 = &v6[v28 / 0xFFFFFFFFFFFFFFFCLL];
                uint64_t v24 = v20 - v28;
                uint64_t v29 = &v19[8 * v15 - 16];
                double v30 = v6 - 4;
                uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v32 = *(_OWORD *)v30;
                  *(v29 - 1) = *((_OWORD *)v30 - 1);
                  *uint64_t v29 = v32;
                  v29 -= 2;
                  v30 -= 8;
                  v31 -= 4;
                }
                while (v31);
                if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_19:
                  uint64_t v6 = (float *)*a4;
                  char v9 = (float *)(v20 + 8);
                  *a4 = v24;
                  a4[1] = v20 + 8;
                  a4[2] = (uint64_t)&v19[8 * v18];
                  if (!v6) {
                    goto LABEL_5;
                  }
LABEL_23:
                  operator delete(v6);
                  goto LABEL_5;
                }
              }
              do
              {
                uint64_t v25 = *((void *)v23 - 1);
                v23 -= 2;
                *(void *)(v24 - 8) = v25;
                v24 -= 8;
              }
              while (v23 != v13);
              goto LABEL_19;
            }
          }
          else
          {
            uint64_t v19 = 0;
            uint64_t v20 = 8 * v15;
            *(_DWORD *)uint64_t v20 = v10;
            *(float *)(v20 + 4) = v11;
            uint64_t v21 = (char *)((char *)v6 - (char *)v13);
            if (v6 != v13) {
              goto LABEL_16;
            }
          }
          char v9 = (float *)(v20 + 8);
          *a4 = v20;
          a4[1] = v20 + 8;
          a4[2] = (uint64_t)&v19[8 * v18];
          if (v6) {
            goto LABEL_23;
          }
        }
LABEL_5:
        a4[1] = (uint64_t)v9;
        ++v7;
        uint64_t v6 = v9;
      }
      while (v7 < *(unsigned int *)(a2 + 24));
    }
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v33 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
    {
      v34[0] = 0;
      _os_log_impl(&dword_1C492D000, v33, OS_LOG_TYPE_FAULT, "predictionsPointer == nullptr", (uint8_t *)v34, 2u);
    }

    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_1C49698B8(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C49698D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  if (a1)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (*(_DWORD *)(a2 + 24))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      uint64_t v8 = a1 + 4 * a3;
      do
      {
        int v10 = *(_DWORD *)CHCodeMap::operator[](a2, v7);
        int v11 = *(_DWORD *)(v8 + 4 * v7);
        unint64_t v12 = (unint64_t)a4[2];
        if ((unint64_t)v6 < v12)
        {
          *(_DWORD *)uint64_t v6 = v10;
          *((_DWORD *)v6 + 1) = v11;
          char v9 = v6 + 8;
        }
        else
        {
          char v13 = *a4;
          uint64_t v14 = v6 - *a4;
          uint64_t v15 = v14 >> 3;
          unint64_t v16 = (v14 >> 3) + 1;
          if (v16 >> 61) {
            sub_1C494A220();
          }
          uint64_t v17 = v12 - (void)v13;
          if (v17 >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            if (v18 >> 61) {
              sub_1C4949AA8();
            }
            uint64_t v19 = operator new(8 * v18);
            uint64_t v20 = &v19[8 * v15];
            *(_DWORD *)uint64_t v20 = v10;
            *((_DWORD *)v20 + 1) = v11;
            uint64_t v21 = (char *)(v6 - v13);
            if (v6 != v13)
            {
LABEL_16:
              unint64_t v22 = (unint64_t)(v21 - 8);
              if (v22 < 0x168
                || (unint64_t v26 = (v6 - 8 - v13) & 0xFFFFFFFFFFFFFFF8, &v19[v14 - 8 - v26] > &v19[v14 - 8])
                || &v6[-v26 - 8] > v6 - 8
                || (unint64_t)(v6 - v19 - v14) < 0x20)
              {
                uint64_t v23 = v6;
                uint64_t v24 = v20;
              }
              else
              {
                uint64_t v27 = (v22 >> 3) + 1;
                uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v23 = &v6[-v28];
                uint64_t v24 = &v20[-v28];
                uint64_t v29 = &v19[8 * v15 - 16];
                double v30 = v6 - 16;
                uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v32 = *(_OWORD *)v30;
                  *(v29 - 1) = *((_OWORD *)v30 - 1);
                  *uint64_t v29 = v32;
                  v29 -= 2;
                  v30 -= 32;
                  v31 -= 4;
                }
                while (v31);
                if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_19:
                  uint64_t v6 = *a4;
                  char v9 = v20 + 8;
                  *a4 = v24;
                  a4[1] = v20 + 8;
                  a4[2] = &v19[8 * v18];
                  if (!v6) {
                    goto LABEL_5;
                  }
LABEL_23:
                  operator delete(v6);
                  goto LABEL_5;
                }
              }
              do
              {
                uint64_t v25 = *((void *)v23 - 1);
                v23 -= 8;
                *((void *)v24 - 1) = v25;
                v24 -= 8;
              }
              while (v23 != v13);
              goto LABEL_19;
            }
          }
          else
          {
            uint64_t v19 = 0;
            uint64_t v20 = (char *)(8 * v15);
            *(_DWORD *)uint64_t v20 = v10;
            *((_DWORD *)v20 + 1) = v11;
            uint64_t v21 = (char *)(v6 - v13);
            if (v6 != v13) {
              goto LABEL_16;
            }
          }
          char v9 = v20 + 8;
          *a4 = v20;
          a4[1] = v20 + 8;
          a4[2] = &v19[8 * v18];
          if (v6) {
            goto LABEL_23;
          }
        }
LABEL_5:
        a4[1] = v9;
        ++v7;
        uint64_t v6 = v9;
      }
      while (v7 < *(unsigned int *)(a2 + 24));
    }
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v33 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
    {
      v34[0] = 0;
      _os_log_impl(&dword_1C492D000, v33, OS_LOG_TYPE_FAULT, "predictionsPointer == nullptr", (uint8_t *)v34, 2u);
    }

    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_1C4969B84(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CHNeuralNetwork::~CHNeuralNetwork(CHNeuralNetwork *this)
{
  var2 = this->var2;
  if (var2)
  {
    if (var2->var0) {
      munmap(var2->var0, var2->var1);
    }
    MEMORY[0x1C8786460](var2, 0x1010C40A749B91FLL);
    this->var2 = 0;
  }
  id var7 = this->var7;
  if (var7)
  {
    this->id var7 = 0;
  }
  id var8 = this->var8;
  if (var8)
  {
    this->id var8 = 0;

    id var8 = this->var8;
  }
}

id CHNeuralNetwork::computeClassificationFeatures(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,float32x2_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48,void *a49,void *a50,void *a51,uint64_t a52)
{
  a52 = *MEMORY[0x1E4F143B8];
  id v53 = a2;
  long long v252 = v53;
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v59 = objc_msgSend_count(v53, v54, v55, v56, v57, v58);
  }
  else {
    uint64_t v59 = *(unsigned int *)(a1 + 36);
  }
  uint64_t v60 = objc_msgSend_modelDescription(*(void **)(a1 + 40), v54, v55, v56, v57, v58);
  CGFloat v66 = objc_msgSend_inputDescriptionsByName(v60, v61, v62, v63, v64, v65);
  uint64_t v71 = objc_msgSend_objectForKeyedSubscript_(v66, v67, @"imgData", v68, v69, v70);
  uint64_t v77 = objc_msgSend_multiArrayConstraint(v71, v72, v73, v74, v75, v76);
  uint64_t v83 = objc_msgSend_shape(v77, v78, v79, v80, v81, v82);
  uint64_t v89 = objc_msgSend_count(v83, v84, v85, v86, v87, v88);

  if (v89 == 3)
  {
    id v90 = objc_alloc(MEMORY[0x1E4F1E9A8]);
    uint64_t v95 = objc_msgSend_numberWithInteger_(NSNumber, v91, v59, v92, v93, v94);
    a49 = v95;
    CGRect v100 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v96, *(unsigned int *)(a1 + 24), v97, v98, v99);
    a50 = v100;
    uint64_t v105 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v101, *(unsigned int *)(a1 + 28), v102, v103, v104);
    a51 = v105;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v106, (uint64_t)&a49, 3, v107, v108);
  }
  else
  {
    id v90 = objc_alloc(MEMORY[0x1E4F1E9A8]);
    uint64_t v95 = objc_msgSend_numberWithInteger_(NSNumber, v112, v59, v113, v114, v115);
    a45 = v95;
    a46 = &unk_1F203DEF0;
    CGRect v100 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v116, *(unsigned int *)(a1 + 24), v117, v118, v119);
    a47 = v100;
    uint64_t v105 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v120, *(unsigned int *)(a1 + 28), v121, v122, v123);
    a48 = v105;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v124, (uint64_t)&a45, 4, v125, v126);
  uint64_t v109 = };
  uint64_t v127 = objc_msgSend_initWithShape_dataType_error_(v90, v110, (uint64_t)v109, 65600, 0, v111);

  id v249 = v127;
  uint64_t v250 = objc_msgSend_dataPointer(v249, v128, v129, v130, v131, v132);
  int v138 = *(_DWORD *)(a1 + 24);
  int v139 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 32))
  {
    id v140 = objc_alloc(MEMORY[0x1E4F1E9A8]);
    a42 = &unk_1F203DEF0;
    uint64_t v145 = objc_msgSend_numberWithInteger_(NSNumber, v141, v59, v142, v143, v144);
    a43 = v145;
    uint64_t v150 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v146, *(unsigned int *)(a1 + 32), v147, v148, v149);
    a44 = v150;
    long long v154 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v151, (uint64_t)&a42, 3, v152, v153);
    id v251 = (id)objc_msgSend_initWithShape_dataType_error_(v140, v155, (uint64_t)v154, 65600, 0, v156);
  }
  else
  {
    id v251 = 0;
  }
  uint64_t v157 = 0;
  unint64_t v158 = 0;
  uint64_t v159 = (v139 * v138);
  long long v160 = (float64x2_t *)(v250 + 32);
  while (v158 < objc_msgSend_count(v252, v133, v134, v135, v136, v137))
  {
    long long v165 = objc_msgSend_objectAtIndexedSubscript_(v252, v161, v158, v162, v163, v164);
    long long v171 = objc_msgSend_drawing(v165, v166, v167, v168, v169, v170);
    long long v179 = v171;
    if (v171)
    {
      LODWORD(v178) = *(_DWORD *)(a1 + 24);
      LODWORD(v177) = *(_DWORD *)(a1 + 28);
      objc_msgSend_bitmapRepresentationForSize_(v171, v172, v173, v174, v175, v176, (double)v178, (double)v177);
    }
    else
    {
      a21 = 0;
      *(_OWORD *)buf = 0u;
      long long vars0 = 0u;
    }

    if (v159)
    {
      if (v159 < 8)
      {
        uint64_t v185 = 0;
LABEL_21:
        uint64_t v192 = v159 - v185;
        float v193 = (double *)(v250 + 8 * (v185 + v157));
        long long v194 = (float *)a21 + v185;
        do
        {
          float v195 = *v194++;
          *v193++ = v195;
          --v192;
        }
        while (v192);
        goto LABEL_23;
      }
      float v186 = a21 + 2;
      uint64_t v187 = v159 & 0xFFFFFFF8;
      long long v188 = v160;
      do
      {
        float32x4_t v189 = *(float32x4_t *)v186[-2].f32;
        float64x2_t v190 = vcvtq_f64_f32(*v186);
        float64x2_t v191 = vcvt_hight_f64_f32(*(float32x4_t *)v186->f32);
        v188[-2] = vcvtq_f64_f32(*(float32x2_t *)v189.f32);
        v188[-1] = vcvt_hight_f64_f32(v189);
        float64x2_t *v188 = v190;
        v188[1] = v191;
        v188 += 4;
        v186 += 4;
        v187 -= 8;
      }
      while (v187);
      uint64_t v185 = v159 & 0xFFFFFFF8;
      if (v185 != v159) {
        goto LABEL_21;
      }
    }
LABEL_23:
    if (*(_DWORD *)(a1 + 32))
    {
      long long v196 = objc_msgSend_drawing(v165, v180, v181, v182, v183, v184);
      objc_msgSend_bounds(v196, v197, v198, v199, v200, v201);
      double v203 = v202;
      double v205 = v204;
      double v207 = v206;

      if (CGRectIsNull(*(CGRect *)(a1 + 56)))
      {
        objc_msgSend_normalizationContext(v165, v208, v209, v210, v211, v212);
        double v216 = v215;
        double v218 = v217;
      }
      else
      {
        uint64_t v213 = *(void *)(a1 + 56);
        double v216 = *(double *)(a1 + 64);
        uint64_t v214 = *(void *)(a1 + 72);
        double v218 = *(double *)(a1 + 80);
      }
      double v219 = v216;
      double v220 = v218;
      IsEmptdouble y = CGRectIsEmpty(*(CGRect *)&v213);
      BOOL v222 = IsEmpty;
      if (IsEmpty) {
        double v223 = 195.0;
      }
      else {
        double v223 = v218;
      }
      if (IsEmpty) {
        double v224 = 156.0;
      }
      else {
        double v224 = v218 * 156.0 / 195.0;
      }
      id v225 = v251;
      uint64_t v231 = objc_msgSend_dataPointer(v225, v226, v227, v228, v229, v230);
      if (v222) {
        double v232 = 0.0;
      }
      else {
        double v232 = v216;
      }
      long long v233 = (double *)(v231 + 8 * v158 * *(unsigned int *)(a1 + 32));
      *long long v233 = v205 / v224;
      v233[1] = v207 / v223;
      v233[2] = (v207 * 0.5 + v203 - v232) / v223;
    }
    *(void *)buf = &unk_1F2011D20;
    if (a21) {
      MEMORY[0x1C8786430](a21, 0x1000C8052888210);
    }

    ++v158;
    long long v160 = (float64x2_t *)((char *)v160 + 8 * v159);
    v157 += v159;
  }
  id v234 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  objc_msgSend_setObject_forKeyedSubscript_(v234, v235, (uint64_t)v249, @"imgData", v236, v237);
  if (v251) {
    objc_msgSend_setObject_forKeyedSubscript_(v234, v238, (uint64_t)v251, @"featureData", v239, v240);
  }
  id v241 = objc_alloc(MEMORY[0x1E4F1E930]);
  id v253 = 0;
  long long v245 = objc_msgSend_initWithDictionary_error_(v241, v242, (uint64_t)v234, (uint64_t)&v253, v243, v244);
  id v246 = v253;
  if (!v245)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    long long v247 = (id)qword_1EA3C9F98;
    if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v246;
      _os_log_impl(&dword_1C492D000, v247, OS_LOG_TYPE_ERROR, "Error creating MLFeatures: %@", buf, 0xCu);
    }
  }
  return v245;
}

void sub_1C496A2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void *sub_1C496A490(void *a1)
{
  *a1 = &unk_1F2011D20;
  uint64_t v2 = a1[16];
  if (v2)
  {
    MEMORY[0x1C8786430](v2, 0x1000C8052888210);
    a1[16] = 0;
  }
  return a1;
}

#error "1C496A548: call analysis failed (funcsize=341)"

void sub_1C496AA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  _Unwind_Resume(a1);
}

void CHNeuralNetwork::feedforwardFromBatches(CHNeuralNetwork *this@<X0>, MLDictionaryFeatureProvider *a2@<X1>, void ***a3@<X8>)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  uint64_t v153 = a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1E9E0]);
  uint64_t v151 = objc_msgSend_initWithUsesCPUOnly_(v5, v6, this->var1, v7, v8, v9);
  objc_msgSend_setMaxComputationBatchSize_(v151, v10, this->var6, v11, v12, v13);
  id var7 = this->var7;
  id v154 = 0;
  uint64_t v17 = objc_msgSend_predictionFromFeatures_options_error_(var7, v15, (uint64_t)v153, (uint64_t)v151, (uint64_t)&v154, v16);
  id v152 = v154;
  if (!v17)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    unint64_t v22 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      uint64_t v28 = objc_msgSend_localizedDescription(v152, v23, v24, v25, v26, v27);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v28;
      _os_log_impl(&dword_1C492D000, v22, OS_LOG_TYPE_FAULT, "Error for model prediction in CHNeuralNetwork::feedforwardFromBatches: %@", buf, 0xCu);
    }
  }
  uint64_t v29 = objc_msgSend_featureValueForName_(v17, v18, @"softmax_output", v19, v20, v21);
  uint64_t v35 = objc_msgSend_multiArrayValue(v29, v30, v31, v32, v33, v34);

  id v36 = v35;
  uint64_t v42 = objc_msgSend_dataPointer(v36, v37, v38, v39, v40, v41);
  uint64_t v48 = objc_msgSend_shape(v36, v43, v44, v45, v46, v47);
  if (objc_msgSend_count(v48, v49, v50, v51, v52, v53) == 5) {
    goto LABEL_8;
  }
  uint64_t v64 = objc_msgSend_shape(v36, v54, v55, v56, v57, v58);
  BOOL v70 = objc_msgSend_count(v64, v65, v66, v67, v68, v69) == 2;

  if (!v70)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v48 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v48, OS_LOG_TYPE_FAULT))
    {
      uint64_t v132 = objc_msgSend_shape(v36, v127, v128, v129, v130, v131);
      uint64_t v138 = objc_msgSend_count(v132, v133, v134, v135, v136, v137);
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v138;
      _os_log_impl(&dword_1C492D000, v48, OS_LOG_TYPE_FAULT, "Unexpected prediction tensor dimension: %lu", buf, 0xCu);
    }
LABEL_8:
  }
  uint64_t v71 = objc_msgSend_shape(v36, v59, v60, v61, v62, v63);
  BOOL v77 = objc_msgSend_count(v71, v72, v73, v74, v75, v76) == 5;

  uint64_t v83 = objc_msgSend_shape(v36, v78, v79, v80, v81, v82);
  if (objc_msgSend_count(v83, v84, v85, v86, v87, v88) == 5)
  {
LABEL_11:

    goto LABEL_13;
  }
  BOOL v94 = this->var6 == 1;

  if (!v94)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v83 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v83, OS_LOG_TYPE_FAULT))
    {
      uint64_t v144 = objc_msgSend_shape(v36, v139, v140, v141, v142, v143);
      uint64_t v150 = objc_msgSend_count(v144, v145, v146, v147, v148, v149);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = 5;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v150;
      _os_log_impl(&dword_1C492D000, v83, OS_LOG_TYPE_FAULT, "Prediction tensor must be of dimension %ld instead of %lu for batch size different from 1", buf, 0x16u);
    }
    goto LABEL_11;
  }
LABEL_13:
  uint64_t v95 = objc_msgSend_shape(v36, v89, v90, v91, v92, v93);
  CGRect v100 = objc_msgSend_objectAtIndexedSubscript_(v95, v96, v77, v97, v98, v99);
  unint64_t v106 = objc_msgSend_integerValue(v100, v101, v102, v103, v104, v105);

  uint64_t v112 = objc_msgSend_strides(v36, v107, v108, v109, v110, v111);
  uint64_t v117 = objc_msgSend_objectAtIndexedSubscript_(v112, v113, v77, v114, v115, v116);
  uint64_t v123 = objc_msgSend_integerValue(v117, v118, v119, v120, v121, v122);

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v106)
  {
    if (v106 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C494A220();
    }
    long long v124 = (void **)operator new(24 * v106);
    *a3 = v124;
    a3[2] = &v124[3 * v106];
    bzero(v124, 24 * ((24 * v106 - 24) / 0x18) + 24);
    uint64_t v125 = 0;
    a3[1] = &v124[3 * ((24 * v106 - 24) / 0x18) + 3];
    do
    {
      ((void (*)(unsigned char *__return_ptr, uint64_t, CHCodeMap *, uint64_t))this->var0)(buf, v42, this->var2, v125);
      uint64_t v126 = *v124;
      if (*v124)
      {
        v124[1] = v126;
        operator delete(v126);
        *long long v124 = 0;
        v124[1] = 0;
        v124[2] = 0;
      }
      *(_OWORD *)long long v124 = *(_OWORD *)buf;
      v124[2] = *(void **)&buf[16];
      v124 += 3;
      v125 += v123;
      --v106;
    }
    while (v106);
  }
}

void sub_1C496B04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C496B16C(unint64_t *a1, uint64_t a2, uint64_t **a3, uint64_t a4, void *a5, char a6)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  id v11 = a5;
  uint64_t v16 = v11;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  unsigned __int8 v77 = 1;
  uint64_t v78 = a4;
  uint64_t v17 = *a3;
  unint64_t v18 = a3[1];
  if (*a3 != v18)
  {
    if (v11)
    {
      if (a6)
      {
        while (1)
        {
          uint64_t v44 = *v17;
          if ((objc_msgSend_characterIsMember_(v16, v12, (unsigned __int16)*v17, v13, v14, v15) & 1) == 0)
          {
            uint64_t v45 = *(void **)(a2 + 48);
            if ((v44 - 57440) > 0x400 || v45 == 0) {
              goto LABEL_41;
            }
            uint64_t v47 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v12, v44, v13, v14, v15);
            uint64_t v52 = objc_msgSend_objectForKeyedSubscript_(v45, v48, (uint64_t)v47, v49, v50, v51);

            if (!v52) {
              goto LABEL_41;
            }
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            id v53 = v52;
            uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v53, v54, (uint64_t)&v70, (uint64_t)v83, 16, v55);
            if (v61)
            {
              uint64_t v62 = *(void *)v71;
              while (2)
              {
                for (uint64_t i = 0; i != v61; ++i)
                {
                  if (*(void *)v71 != v62) {
                    objc_enumerationMutation(v53);
                  }
                  unsigned __int16 v64 = objc_msgSend_unsignedIntValue(*(void **)(*((void *)&v70 + 1) + 8 * i), v56, v57, v58, v59, v60);
                  if ((objc_msgSend_characterIsMember_(v16, v65, v64, v66, v67, v68) & 1) == 0)
                  {

                    goto LABEL_41;
                  }
                }
                uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v53, v56, (uint64_t)&v70, (uint64_t)v83, 16, v60);
                if (v61) {
                  continue;
                }
                break;
              }
            }
          }
          sub_1C496B6E4((uint64_t)&v74, v44);
LABEL_41:
          if (++v17 == v18) {
            goto LABEL_6;
          }
        }
      }
      do
      {
        uint64_t v43 = *v17;
        if (objc_msgSend_characterIsMember_(v16, v12, (unsigned __int16)*v17, v13, v14, v15)) {
          sub_1C496B6E4((uint64_t)&v74, v43);
        }
        ++v17;
      }
      while (v17 != v18);
    }
    else
    {
      do
        sub_1C496B6E4((uint64_t)&v74, *v17++);
      while (v17 != v18);
    }
  }
LABEL_6:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v20 = v74;
  uint64_t v19 = v75;
  if (v75 != (unsigned char *)v74)
  {
    while (1)
    {
      uint64_t v69 = *v20;
      if (v19 - (unsigned char *)v20 >= 9)
      {
        uint64_t v21 = 0;
        uint64_t v22 = (v19 - (unsigned char *)v20) >> 3;
        int v23 = v77;
        uint64_t v24 = *v20;
        uint64_t v25 = (float *)v20;
        do
        {
          uint64_t v26 = &v25[2 * v21 + 2];
          uint64_t v27 = (2 * v21) | 1;
          uint64_t v28 = 2 * v21 + 2;
          if (v28 < v22)
          {
            float v29 = v26[1];
            float v30 = v26[3];
            BOOL v31 = v29 > v30;
            if (!v23) {
              BOOL v31 = v29 < v30;
            }
            v26 += 2 * v31;
            if (v31) {
              uint64_t v27 = v28;
            }
          }
          *(void *)uint64_t v25 = *(void *)v26;
          uint64_t v25 = v26;
          uint64_t v21 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
        uint64_t v32 = v19 - 8;
        if (v26 == (float *)(v19 - 8))
        {
          *(void *)uint64_t v26 = v24;
        }
        else
        {
          *(void *)uint64_t v26 = *v32;
          *uint64_t v32 = v24;
          uint64_t v33 = (char *)v26 - (char *)v20 + 8;
          if (v33 >= 9)
          {
            unint64_t v34 = (((unint64_t)v33 >> 3) - 2) >> 1;
            float v35 = *((float *)&v20[v34] + 1);
            float v36 = v26[1];
            BOOL v37 = v35 > v36;
            if (!v23) {
              BOOL v37 = v35 < v36;
            }
            if (v37)
            {
              int v38 = *(_DWORD *)v26;
              do
              {
                uint64_t v39 = v26;
                uint64_t v26 = (float *)&v20[v34];
                *(void *)uint64_t v39 = *(void *)v26;
                if (!v34) {
                  break;
                }
                unint64_t v34 = (v34 - 1) >> 1;
                float v40 = *((float *)&v20[v34] + 1);
                BOOL v41 = v40 > v36;
                if (!v23) {
                  BOOL v41 = v40 < v36;
                }
              }
              while (v41);
              *(_DWORD *)uint64_t v26 = v38;
              v26[1] = v36;
            }
          }
        }
      }
      v75 -= 8;
      sub_1C496BA64(a1, (void *)*a1, (char *)&v69);
      if (v69 != 57424) {
        goto LABEL_9;
      }
      if (qword_1EA3CA000 != -1) {
        break;
      }
      uint64_t v42 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT)) {
        goto LABEL_34;
      }
LABEL_8:

LABEL_9:
      uint64_t v20 = v74;
      uint64_t v19 = v75;
      if (v75 == (unsigned char *)v74) {
        goto LABEL_58;
      }
    }
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v42 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_FAULT)) {
      goto LABEL_8;
    }
LABEL_34:
    *(_DWORD *)buf = 67109376;
    int v80 = v69;
    __int16 v81 = 1024;
    BOOL v82 = v16 == 0;
    _os_log_impl(&dword_1C492D000, v42, OS_LOG_TYPE_FAULT, "Not-a-char codepoint (U+%04x) is being added to the filtered candidate results (activeCharacterSet is nil: %d)", buf, 0xEu);
    goto LABEL_8;
  }
LABEL_58:
  if (v19)
  {
    uint64_t v75 = v19;
    operator delete(v19);
  }
}

void sub_1C496B5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void **sub_1C496B66C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    id v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      id v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        id v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C496B6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)a1;
  id v5 = *(char **)(a1 + 8);
  uint64_t v6 = (uint64_t)&v5[-*(void *)a1];
  uint64_t v7 = v6 >> 3;
  if ((unint64_t)(v6 >> 3) >= *(void *)(a1 + 32))
  {
    if (*((float *)v4 + 1) >= *((float *)&a2 + 1)) {
      return;
    }
    if (v6 >= 9)
    {
      uint64_t v8 = 0;
      int v9 = *(unsigned __int8 *)(a1 + 24);
      uint64_t v10 = *(void *)v4;
      id v11 = *(char **)a1;
      do
      {
        uint64_t v12 = (float *)&v11[8 * v8 + 8];
        uint64_t v13 = (2 * v8) | 1;
        uint64_t v14 = 2 * v8 + 2;
        if (v14 < v7)
        {
          float v15 = v12[1];
          float v16 = v12[3];
          BOOL v17 = v15 > v16;
          if (!v9) {
            BOOL v17 = v15 < v16;
          }
          v12 += 2 * v17;
          if (v17) {
            uint64_t v13 = v14;
          }
        }
        *(void *)id v11 = *(void *)v12;
        id v11 = (char *)v12;
        uint64_t v8 = v13;
      }
      while (v13 <= (uint64_t)((unint64_t)(v7 - 2) >> 1));
      unint64_t v18 = v5 - 8;
      if (v12 == (float *)(v5 - 8))
      {
        *(void *)uint64_t v12 = v10;
      }
      else
      {
        *(void *)uint64_t v12 = *(void *)v18;
        *(void *)unint64_t v18 = v10;
        uint64_t v19 = (char *)v12 - v4 + 8;
        if (v19 >= 9)
        {
          unint64_t v20 = (((unint64_t)v19 >> 3) - 2) >> 1;
          float v21 = *(float *)&v4[8 * v20 + 4];
          float v22 = v12[1];
          BOOL v23 = v21 > v22;
          if (!v9) {
            BOOL v23 = v21 < v22;
          }
          if (v23)
          {
            int v24 = *(_DWORD *)v12;
            do
            {
              uint64_t v25 = v12;
              uint64_t v12 = (float *)&v4[8 * v20];
              *(void *)uint64_t v25 = *(void *)v12;
              if (!v20) {
                break;
              }
              unint64_t v20 = (v20 - 1) >> 1;
              float v26 = *(float *)&v4[8 * v20 + 4];
              BOOL v27 = v26 > v22;
              if (!v9) {
                BOOL v27 = v26 < v22;
              }
            }
            while (v27);
            *(_DWORD *)uint64_t v12 = v24;
            v12[1] = v22;
          }
        }
      }
    }
    id v5 = (char *)(*(void *)(a1 + 8) - 8);
    *(void *)(a1 + 8) = v5;
  }
  unint64_t v28 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v28)
  {
    float v30 = *(char **)a1;
    uint64_t v31 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v32 = v31 >> 3;
    unint64_t v33 = (v31 >> 3) + 1;
    if (v33 >> 61) {
      sub_1C494A220();
    }
    uint64_t v34 = v28 - (void)v30;
    if (v34 >> 2 > v33) {
      unint64_t v33 = v34 >> 2;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = v33;
    }
    if (v35)
    {
      if (v35 >> 61) {
        sub_1C4949AA8();
      }
      float v36 = operator new(8 * v35);
      BOOL v37 = &v36[8 * v32];
      int v38 = &v36[8 * v35];
      *BOOL v37 = a2;
      uint64_t v29 = (uint64_t)(v37 + 1);
      uint64_t v39 = (char *)(v5 - v30);
      if (v5 == v30) {
        goto LABEL_47;
      }
    }
    else
    {
      float v36 = 0;
      BOOL v37 = (void *)(8 * v32);
      int v38 = 0;
      *(void *)(8 * v32) = a2;
      uint64_t v29 = 8 * v32 + 8;
      uint64_t v39 = (char *)(v5 - v30);
      if (v5 == v30) {
        goto LABEL_47;
      }
    }
    unint64_t v40 = (unint64_t)(v39 - 8);
    if (v40 >= 0x58)
    {
      if ((unint64_t)(v5 - v36 - v31) >= 0x20)
      {
        uint64_t v42 = (v40 >> 3) + 1;
        uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        BOOL v41 = &v5[-v43];
        BOOL v37 = (void *)((char *)v37 - v43);
        uint64_t v44 = &v36[8 * v32 - 16];
        uint64_t v45 = v5 - 16;
        uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v47 = *(_OWORD *)v45;
          *(v44 - 1) = *((_OWORD *)v45 - 1);
          *uint64_t v44 = v47;
          v44 -= 2;
          v45 -= 32;
          v46 -= 4;
        }
        while (v46);
        if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_46;
        }
      }
      else
      {
        BOOL v41 = v5;
      }
    }
    else
    {
      BOOL v41 = v5;
    }
    do
    {
      uint64_t v48 = *((void *)v41 - 1);
      v41 -= 8;
      *--BOOL v37 = v48;
    }
    while (v41 != v30);
LABEL_46:
    id v5 = *(char **)a1;
LABEL_47:
    *(void *)a1 = v37;
    *(void *)(a1 + 8) = v29;
    *(void *)(a1 + 16) = v38;
    if (v5) {
      operator delete(v5);
    }
    goto LABEL_49;
  }
  *(void *)id v5 = a2;
  uint64_t v29 = (uint64_t)(v5 + 8);
LABEL_49:
  *(void *)(a1 + 8) = v29;
  uint64_t v49 = *(char **)a1;
  uint64_t v50 = v29 - *(void *)a1;
  if (v50 >= 9)
  {
    int v51 = *(unsigned __int8 *)(a1 + 24);
    unint64_t v52 = (((unint64_t)v50 >> 3) - 2) >> 1;
    float v53 = *(float *)&v49[8 * v52 + 4];
    float v54 = *(float *)(v29 - 4);
    BOOL v55 = v53 > v54;
    if (!*(unsigned char *)(a1 + 24)) {
      BOOL v55 = v53 < v54;
    }
    if (v55)
    {
      int v58 = *(_DWORD *)(v29 - 8);
      uint64_t v57 = v29 - 8;
      int v56 = v58;
      do
      {
        uint64_t v59 = (void *)v57;
        uint64_t v57 = (uint64_t)&v49[8 * v52];
        void *v59 = *(void *)v57;
        if (!v52) {
          break;
        }
        unint64_t v52 = (v52 - 1) >> 1;
        float v60 = *(float *)&v49[8 * v52 + 4];
        BOOL v61 = v60 > v54;
        if (!v51) {
          BOOL v61 = v60 < v54;
        }
      }
      while (v61);
      *(_DWORD *)uint64_t v57 = v56;
      *(float *)(v57 + 4) = v54;
    }
  }
}

char *sub_1C496BA64(unint64_t *a1, void *a2, char *a3)
{
  id v3 = a3;
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  int v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)int v9 = *(void *)a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      BOOL v17 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = v14 + v6 + 8;
      if (v5 > v15) {
        unint64_t v15 = a1[1];
      }
      unint64_t v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        BOOL v17 = (void *)a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          uint64_t v46 = (v16 >> 3) + 1;
          uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v47);
          BOOL v17 = (void *)(v5 + v47);
          uint64_t v48 = (_OWORD *)(v5 + 16);
          uint64_t v49 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v51 = *v49;
            *(v48 - 1) = *(v49 - 1);
            *uint64_t v48 = v51;
            v48 += 2;
            v49 += 2;
            v50 -= 4;
          }
          while (v50);
          if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        BOOL v17 = (void *)a1[1];
      }
      do
      {
        uint64_t v52 = *v13++;
        *v17++ = v52;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = (unint64_t)v17;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    if (v9 <= v3) {
      v3 += 8 * (a1[1] > (unint64_t)v3);
    }
    *(void *)int v9 = *(void *)v3;
    return v9;
  }
  unint64_t v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61) {
    sub_1C494A220();
  }
  uint64_t v20 = v10 - v6;
  if (v20 >> 2 > v18) {
    unint64_t v18 = v20 >> 2;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v18;
  }
  if (v21)
  {
    if (v21 >> 61) {
      sub_1C4949AA8();
    }
    float v22 = (char *)operator new(8 * v21);
    BOOL v23 = &v22[8 * v8];
    int v24 = &v22[8 * v21];
    if (v8 != v21) {
      goto LABEL_24;
    }
  }
  else
  {
    float v22 = 0;
    BOOL v23 = (char *)(8 * v8);
    int v24 = 0;
    if (v8) {
      goto LABEL_24;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v45 = 1;
    }
    else {
      unint64_t v45 = v7 >> 2;
    }
    if (v45 >> 61) {
      sub_1C4949AA8();
    }
    BOOL v23 = (char *)operator new(8 * v45);
    int v24 = &v23[8 * v45];
    if (v22)
    {
      operator delete(v22);
      int v24 = &v23[8 * v45];
      float v26 = (char *)*a1;
      *(void *)BOOL v23 = *(void *)v3;
      BOOL v27 = v23 + 8;
      unint64_t v28 = v23;
      if (v26 != v9) {
        goto LABEL_25;
      }
      goto LABEL_31;
    }
  }
  else
  {
    unint64_t v25 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v25 = v8 + 1;
    }
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  float v26 = (char *)v6;
  *(void *)BOOL v23 = *(void *)v3;
  BOOL v27 = v23 + 8;
  unint64_t v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    uint64_t v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v30 = v29 - v26 - 8;
    uint64_t v31 = v9;
    unint64_t v28 = v23;
    if (v30 < 0x58) {
      goto LABEL_60;
    }
    uint64_t v31 = v9;
    unint64_t v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20) {
      goto LABEL_60;
    }
    uint64_t v32 = (v30 >> 3) + 1;
    uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v31 = &v9[-v33];
    unint64_t v28 = &v23[-v33];
    uint64_t v34 = v23 - 16;
    unint64_t v35 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)uint64_t v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_60:
      do
      {
        uint64_t v38 = *((void *)v31 - 1);
        v31 -= 8;
        *((void *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  uint64_t v39 = (char *)a1[1];
  int64_t v40 = v39 - v9;
  if (v39 != v9)
  {
    BOOL v41 = v9;
    size_t v42 = v39 - v9;
    uint64_t v43 = v24;
    memmove(v27, v41, v42);
    int v24 = v43;
  }
  uint64_t v44 = (void *)*a1;
  *a1 = (unint64_t)v28;
  a1[1] = (unint64_t)&v27[v40];
  a1[2] = (unint64_t)v24;
  if (v44) {
    operator delete(v44);
  }
  return v23;
}

void sub_1C496BDD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

#error "1C496BEBC: call analysis failed (funcsize=91)"

void sub_1C496BF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CHNeuralNetwork::feedforward(CHNeuralNetwork *this, MLDictionaryFeatureProvider *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1E9E0]);
  int v9 = objc_msgSend_initWithUsesCPUOnly_(v4, v5, this->var1, v6, v7, v8);
  id var7 = this->var7;
  id v40 = 0;
  uint64_t v13 = objc_msgSend_predictionFromFeatures_options_error_(var7, v11, (uint64_t)v3, (uint64_t)v9, (uint64_t)&v40, v12);
  id v18 = v40;
  if (!v13)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v19 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
    {
      unint64_t v25 = objc_msgSend_localizedDescription(v18, v20, v21, v22, v23, v24);
      *(_DWORD *)buf = 138412290;
      size_t v42 = v25;
      _os_log_impl(&dword_1C492D000, v19, OS_LOG_TYPE_FAULT, "Error for model prediction in CHNeuralNetwork::feedforward: %@", buf, 0xCu);
    }
  }
  float v26 = objc_msgSend_featureValueForName_(v13, v14, @"softmax_output", v15, v16, v17);
  objc_msgSend_multiArrayValue(v26, v27, v28, v29, v30, v31);
  id v32 = objc_claimAutoreleasedReturnValue();
  uint64_t v38 = objc_msgSend_dataPointer(v32, v33, v34, v35, v36, v37);

  if (!v38)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v39 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C492D000, v39, OS_LOG_TYPE_FAULT, "predictionResultsPtr is nullptr", buf, 2u);
    }
  }
  ((void (*)(uint64_t, CHCodeMap *, void))this->var0)(v38, this->var2, 0);
}

void sub_1C496C1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CHCodeMap *CHNeuralNetwork::supportedCodes@<X0>(CHNeuralNetwork *this@<X0>, char **a2@<X8>)
{
  uint64_t v2 = this;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = this->var2;
  if (result->var3)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    BOOL v27 = v2;
    while (1)
    {
      int v10 = *(_DWORD *)CHCodeMap::operator[]((uint64_t)result, v8);
      if (v7 >= v6) {
        break;
      }
      *(_DWORD *)uint64_t v7 = v10;
      uint64_t v9 = (uint64_t)(v7 + 4);
LABEL_4:
      a2[1] = (char *)v9;
      ++v8;
      uint64_t result = v2->var2;
      uint64_t v7 = (char *)v9;
      if (v8 >= result->var3) {
        return result;
      }
    }
    uint64_t v11 = (v7 - v5) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      sub_1C494A220();
    }
    if ((v6 - v5) >> 1 > v12) {
      unint64_t v12 = (v6 - v5) >> 1;
    }
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 >> 62) {
        sub_1C4949AA8();
      }
      unint64_t v14 = operator new(4 * v13);
      uint64_t v15 = &v14[4 * v11];
      *(_DWORD *)uint64_t v15 = v10;
      uint64_t v9 = (uint64_t)(v15 + 4);
      int64_t v16 = v7 - v5;
      if (v7 == v5) {
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v15 = (char *)(4 * v11);
      *(_DWORD *)(4 * v11) = v10;
      uint64_t v9 = 4 * v11 + 4;
      int64_t v16 = v7 - v5;
      if (v7 == v5) {
        goto LABEL_20;
      }
    }
    unint64_t v17 = v16 - 4;
    if (v17 >= 0xBC)
    {
      unint64_t v20 = (v7 - 4 - v5) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v14[v7 - v5 - 4 - v20] > &v14[v7 - v5 - 4])
      {
        id v18 = v7;
      }
      else if (&v7[-v20 - 4] > v7 - 4)
      {
        id v18 = v7;
      }
      else if ((unint64_t)(v5 - v14) >= 0x20)
      {
        uint64_t v21 = (v17 >> 2) + 1;
        uint64_t v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
        id v18 = &v7[-v22];
        v15 -= v22;
        uint64_t v23 = &v14[4 * v11 - 16];
        uint64_t v24 = v7 - 16;
        uint64_t v25 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          _OWORD *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 8;
        }
        while (v25);
        if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_20:
          uint64_t v6 = &v14[4 * v13];
          *a2 = v15;
          a2[1] = (char *)v9;
          a2[2] = v6;
          if (v5) {
            operator delete(v5);
          }
          unint64_t v5 = v15;
          uint64_t v2 = v27;
          goto LABEL_4;
        }
      }
      else
      {
        id v18 = v7;
      }
    }
    else
    {
      id v18 = v7;
    }
    do
    {
      int v19 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v15 - 1) = v19;
      v15 -= 4;
    }
    while (v18 != v5);
    goto LABEL_20;
  }
  return result;
}

void sub_1C496C458(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C496C478(void *a1)
{
  *a1 = &unk_1F2011D20;
  uint64_t v1 = a1[16];
  if (v1) {
    MEMORY[0x1C8786430](v1, 0x1000C8052888210);
  }
  JUMPOUT(0x1C8786450);
}

void sub_1C496C4E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 140);
  int v5 = *(_DWORD *)(a2 + 136);
  *(void *)a3 = &unk_1F2011D20;
  *(_DWORD *)(a3 + 136) = v5;
  *(_DWORD *)(a3 + 140) = v4;
  operator new[]();
}

void sub_1C496C7A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a1 + 140);
  *(void *)a2 = &unk_1F2011D20;
  *(_DWORD *)(a2 + 136) = v4;
  *(_DWORD *)(a2 + 140) = v3;
  operator new[]();
}

void sub_1C496C918(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a1 + 140);
  *(void *)a2 = &unk_1F2011D20;
  *(_DWORD *)(a2 + 136) = v4;
  *(_DWORD *)(a2 + 140) = v3;
  operator new[]();
}

uint64_t sub_1C496CAD0(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 140);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(result + 136);
    if (v3)
    {
      unsigned int v4 = 0;
      unsigned int v5 = 0;
      int v6 = 0;
      uint64_t v7 = *(void *)(a2 + 128);
      int v8 = *(_DWORD *)(a2 + 136);
      int v9 = v3 - 1;
      uint64_t v10 = *(void *)(result + 128);
      do
      {
        if (v3 >= 0xC)
        {
          uint64_t v11 = 0;
          BOOL v13 = __CFADD__(v3 * v6, v9);
          BOOL v14 = __CFADD__(v8 * v6, v9);
          if (v13 || v14 || (unint64_t)(v3 - 1) >> 32) {
            goto LABEL_6;
          }
          uint64_t v15 = 4 * (v3 * v6);
          uint64_t v16 = 4 * (v8 * v6);
          if (v10 + v15 >= (unint64_t)(v7 + 4 * v3 + v16) || v7 + v16 >= (unint64_t)(v10 + 4 * v3 + v15))
          {
            unsigned int v17 = v4;
            unsigned int v18 = v5;
            uint64_t v19 = v3 & 0xFFFFFFF8;
            do
            {
              unint64_t v20 = (float32x4_t *)(v7 + 4 * v18);
              float32x4_t v21 = *v20;
              float32x4_t v22 = v20[1];
              uint64_t v23 = (float32x4_t *)(v10 + 4 * v17);
              float32x4_t v24 = vaddq_f32(v22, v23[1]);
              float32x4_t *v23 = vaddq_f32(v21, *v23);
              v23[1] = v24;
              v18 += 8;
              v17 += 8;
              v19 -= 8;
            }
            while (v19);
            uint64_t v11 = v3 & 0xFFFFFFF8;
            if (v11 == v3) {
              goto LABEL_8;
            }
            goto LABEL_6;
          }
        }
        uint64_t v11 = 0;
LABEL_6:
        uint64_t v12 = v3 - v11;
        do
        {
          *(float *)(v10 + 4 * (v4 + v11)) = *(float *)(v7 + 4 * (v5 + v11))
                                                           + *(float *)(v10 + 4 * (v4 + v11));
          LODWORD(v11) = v11 + 1;
          --v12;
        }
        while (v12);
LABEL_8:
        ++v6;
        v5 += v8;
        v4 += v3;
      }
      while (v6 != v2);
    }
  }
  return result;
}

void sub_1C496CC00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 128);
  if (v4) {
    MEMORY[0x1C8786430](v4, 0x1000C8052888210);
  }
  int v5 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = v5;
  operator new[]();
}

uint64_t sub_1C496CC80(uint64_t a1, const void *a2)
{
  return a1;
}

BOOL sub_1C496CCB8(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 136);
  if (v2 == *(_DWORD *)(a2 + 136) && (int v3 = *(_DWORD *)(a1 + 140), v3 == *(_DWORD *)(a2 + 140))) {
    return memcmp(*(const void **)(a1 + 128), *(const void **)(a2 + 128), 4 * (v3 * v2)) == 0;
  }
  else {
    return 0;
  }
}

uint64_t sub_1C496CD14(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 24;
        uint64_t v4 = *(void **)(v2 - 24);
        *(void *)(a1 + 16) = v2 - 24;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 16) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void characterCodes(NSString *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1;
  uint64_t v41 = 0;
  size_t v42 = &v41;
  uint64_t v43 = 0x4812000000;
  uint64_t v44 = sub_1C496D054;
  unint64_t v45 = sub_1C496D078;
  uint64_t v46 = &unk_1C4CB5C62;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  __p = 0;
  unint64_t v9 = objc_msgSend_length(v3, v4, v5, v6, v7, v8);
  unint64_t v15 = v9;
  uint64_t v16 = __p;
  if (v9 <= (v49 - (unsigned char *)__p) >> 2) {
    goto LABEL_13;
  }
  if (v9 >> 62) {
    sub_1C494A220();
  }
  unsigned int v17 = v48;
  unsigned int v18 = (char *)operator new(4 * v9);
  uint64_t v19 = v17 - v16;
  unint64_t v20 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFFCLL];
  float32x4_t v21 = v20;
  if (v17 != v16)
  {
    if ((unint64_t)(v19 - 4) < 0x2C)
    {
      float32x4_t v21 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        int v30 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v21 - 1) = v30;
        v21 -= 4;
      }
      while (v17 != v16);
      goto LABEL_11;
    }
    float32x4_t v21 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFFCLL];
    if (v17 - v18 - (v19 & 0xFFFFFFFFFFFFFFFCLL) < 0x20) {
      goto LABEL_10;
    }
    uint64_t v22 = v19 >> 2;
    unint64_t v23 = ((unint64_t)(v19 - 4) >> 2) + 1;
    uint64_t v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v25 = &v17[-v24];
    float32x4_t v21 = &v20[-v24];
    long long v26 = &v18[4 * v22 - 16];
    BOOL v27 = (long long *)(v17 - 16);
    uint64_t v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v29 = *v27;
      *((_OWORD *)v26 - 1) = *(v27 - 1);
      *(_OWORD *)long long v26 = v29;
      v26 -= 32;
      v27 -= 2;
      v28 -= 8;
    }
    while (v28);
    unsigned int v17 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_10;
    }
  }
LABEL_11:
  __p = v21;
  uint64_t v48 = v20;
  uint64_t v49 = &v18[4 * v15];
  if (v16) {
    operator delete(v16);
  }
LABEL_13:
  uint64_t v31 = objc_msgSend_length(v3, v10, v11, v12, v13, v14);
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 3221225472;
  v40[2] = sub_1C496D090;
  v40[3] = &unk_1E64E1140;
  v40[4] = &v41;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v3, v32, 0, v31, (uint64_t)v40, v33);
  uint64_t v34 = v42;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v36 = (unsigned char *)v34[6];
  uint64_t v35 = (unsigned char *)v34[7];
  int64_t v37 = v35 - v36;
  if (v35 != v36)
  {
    if (v37 < 0) {
      sub_1C494A220();
    }
    uint64_t v38 = (char *)operator new(v35 - v36);
    *a2 = v38;
    uint64_t v39 = &v38[4 * (v37 >> 2)];
    a2[2] = v39;
    memcpy(v38, v36, v37);
    a2[1] = v39;
  }
  _Block_object_dispose(&v41, 8);
  if (__p)
  {
    uint64_t v48 = __p;
    operator delete(__p);
  }
}

void sub_1C496CFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v24 = *(void **)v22;
  if (*(void *)v22)
  {
    *(void *)(v22 + 8) = v24;
    operator delete(v24);
    _Block_object_dispose(&a14, 8);
    uint64_t v25 = __p;
    if (!__p)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    _Block_object_dispose(&a14, 8);
    uint64_t v25 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  a21 = (uint64_t)v25;
  operator delete(v25);

  _Unwind_Resume(a1);
}

__n128 sub_1C496D054(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C496D078(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C496D090(uint64_t a1, int a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = (char *)v3[7];
  unint64_t v4 = v3[8];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_DWORD *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 4);
    goto LABEL_22;
  }
  uint64_t v8 = (char *)v3[6];
  uint64_t v9 = (v5 - v8) >> 2;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 62) {
    sub_1C494A220();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 1 > v10) {
    unint64_t v10 = v11 >> 1;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 62) {
      sub_1C4949AA8();
    }
    uint64_t v13 = operator new(4 * v12);
    uint64_t v14 = &v13[4 * v9];
    unint64_t v15 = &v13[4 * v12];
    _DWORD *v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  uint64_t v14 = (_DWORD *)(4 * v9);
  unint64_t v15 = 0;
  *(_DWORD *)(4 * v9) = a2;
  uint64_t v7 = 4 * v9 + 4;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 4;
    if (v17 < 0x2C) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 2) + 1;
    uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v6 = &v5[-v19];
    uint64_t v14 = (_DWORD *)((char *)v14 - v19);
    unint64_t v20 = &v13[4 * v9 - 16];
    float32x4_t v21 = v5 - 16;
    uint64_t v22 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *unint64_t v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 8;
    }
    while (v22);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        int v24 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--uint64_t v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  v3[6] = v14;
  v3[7] = v7;
  v3[8] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  v3[7] = v7;
}

void sub_1C496D31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C496D6E0(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C496D834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C496D854(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C496D864(uint64_t a1)
{
}

void sub_1C496D86C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_copy(*(void **)(*(void *)(a1 + 32) + 416), a2, a3, a4, a5, a6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_1C496D8B8(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (a1)
  {
    label = dispatch_queue_get_label(0);
    if (strcmp(label, "com.apple.CoreHandwriting.recognizerQueue"))
    {
      uint64_t v5 = *(NSObject **)(a1 + 272);
      if (v5)
      {
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_1C49721C8;
        block[3] = &unk_1E64E11B8;
        uint64_t v7 = v3;
        dispatch_sync(v5, block);

        return;
      }
    }
    v3[2](v3);
  }
}

void sub_1C496D994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C496DB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C496DB58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C496DB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C496DC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Block_object_dispose((const void *)(v16 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C496DC90(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_isInappropriateString_(*(void **)(a1[4] + 496), a2, a1[5], a4, a5, a6);
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_1C496DDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1C496DE00(uint64_t a1)
{
  uint64_t v227 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  id v218 = *(id *)(a1 + 40);
  if (v1)
  {
    unint64_t v12 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v2, v3, v4, v5, v6);
    if (*(void *)(v1 + 392) && objc_msgSend_length(v218, v7, v8, v9, v10, v11))
    {
      uint64_t v18 = objc_msgSend_length(v218, v13, v14, v15, v16, v17);
      int v22 = objc_msgSend_codepointAtIndex_outRange_(v218, v19, v18 - 1, (uint64_t)&v225, v20, v21);
      VariantMap::VariantsForCode(*(VariantMap **)(v1 + 392), v22, &v223);
      if (objc_msgSend_shouldGenerateDigitLetterAlternatives(*(void **)(v1 + 464), v23, v24, v25, v26, v27))
      {
        id v32 = v218;
        int64_t v37 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v33, @"012olzOLZ", v34, v35, v36);
        size_t v42 = objc_msgSend_stringByTrimmingCharactersInSet_(v32, v38, (uint64_t)v37, v39, v40, v41);
        if (objc_msgSend_isEqualToString_(v42, v43, (uint64_t)&stru_1F20141C8, v44, v45, v46))
        {
          uint64_t v52 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v47, v48, v49, v50, v51);
          uint64_t v57 = objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], v53, (uint64_t)v32, v54, v55, v56);
          uint64_t v62 = objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], v58, (uint64_t)v32, v59, v60, v61);
          uint64_t v68 = objc_msgSend_length(v62, v63, v64, v65, v66, v67);
          objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v62, v69, @"l", @"1", 1, 0, v68);
          uint64_t v75 = objc_msgSend_length(v57, v70, v71, v72, v73, v74);
          objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v57, v76, @"1", @"l", 1, 0, v75);
          uint64_t v82 = objc_msgSend_length(v62, v77, v78, v79, v80, v81);
          objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v62, v83, @"o", @"0", 1, 0, v82);
          uint64_t v89 = objc_msgSend_length(v57, v84, v85, v86, v87, v88);
          objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v57, v90, @"0", @"o", 1, 0, v89);
          uint64_t v96 = objc_msgSend_length(v62, v91, v92, v93, v94, v95);
          objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v62, v97, @"z", @"2", 1, 0, v96);
          uint64_t v103 = objc_msgSend_length(v57, v98, v99, v100, v101, v102);
          objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v57, v104, @"2", @"z", 1, 0, v103);
          objc_msgSend_addObject_(v52, v105, (uint64_t)v62, v106, v107, v108);
          uint64_t v114 = objc_msgSend_lowercaseString(v57, v109, v110, v111, v112, v113);
          objc_msgSend_addObject_(v52, v115, (uint64_t)v114, v116, v117, v118);
        }
        else
        {
          uint64_t v52 = 0;
        }

        long long v221 = 0u;
        long long v222 = 0u;
        long long v219 = 0u;
        long long v220 = 0u;
        id v120 = v52;
        uint64_t v127 = objc_msgSend_countByEnumeratingWithState_objects_count_(v120, v121, (uint64_t)&v219, (uint64_t)v226, 16, v122);
        if (v127)
        {
          uint64_t v128 = *(void *)v220;
          do
          {
            for (uint64_t i = 0; i != v127; ++i)
            {
              if (*(void *)v220 != v128) {
                objc_enumerationMutation(v120);
              }
              uint64_t v130 = *(void *)(*((void *)&v219 + 1) + 8 * i);
              if ((objc_msgSend_isInappropriateString_(*(void **)(v1 + 496), v123, v130, v124, v125, v126) & 1) == 0) {
                objc_msgSend_addObject_(v12, v123, v130, v124, v125, v126);
              }
            }
            uint64_t v127 = objc_msgSend_countByEnumeratingWithState_objects_count_(v120, v123, (uint64_t)&v219, (uint64_t)v226, 16, v126);
          }
          while (v127);
        }
      }
      uint64_t v131 = v224;
      if (v224 != v223)
      {
        objc_msgSend_substringToIndex_(v218, v28, v225, v29, v30, v31);
        uint64_t v132 = (NSString *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_shouldEnforceGrammarOnTransliterations(*(void **)(v1 + 464), v133, v134, v135, v136, v137))
        {
          char v143 = isMixedCaseString(v132);
          uint64_t v149 = objc_msgSend_contentType(*(void **)(v1 + 464), v144, v145, v146, v147, v148);
          id v152 = objc_msgSend_rootCursorForContentType_inNetwork_forFirstSegmentGroup_(CHPatternNetwork, v150, v149, *(void *)(v1 + 296), 0, v151);
          long long v155 = objc_msgSend_newCursorByAdvancingWithString_fromCursor_inNetwork_(CHPatternNetwork, v153, (uint64_t)v132, (uint64_t)v152, *(void *)(v1 + 296), v154);

          long long v161 = v223;
          if (v224 != v223)
          {
            unint64_t v162 = 0;
            if (v155)
            {
              do
              {
                unsigned int v178 = *(_DWORD *)&v161[4 * v162];
                uint64_t v182 = objc_msgSend_newCursorByAdvancingWithSymbol_fromCursor_inNetwork_(CHPatternNetwork, v156, v178, (uint64_t)v155, *(void *)(v1 + 296), v160);
                if (v182)
                {
                  uint64_t v183 = unicodeToNSString(v178, v156, v179, v180, v181, v160);
                  objc_msgSend_stringWithFormat_(NSString, v184, @"%@%@", v185, v186, v187, v132, v183);
                  long long v188 = (NSString *)objc_claimAutoreleasedReturnValue();
                  float v193 = v188;
                  if (((v143 & 1) != 0 || (isMixedCaseString(v188) & 1) == 0)
                    && (objc_msgSend_isInappropriateString_(*(void **)(v1 + 496), v189, (uint64_t)v193, v190, v191, v192) & 1) == 0)
                  {
                    objc_msgSend_addObject_(v12, v194, (uint64_t)v193, v195, v196, v197);
                  }
                }
                ++v162;
                long long v161 = v223;
              }
              while (v162 < (v224 - v223) >> 2);
            }
            else
            {
              do
              {
                uint64_t v163 = unicodeToNSString(*(_DWORD *)&v161[4 * v162], v156, v157, v158, v159, v160);
                objc_msgSend_stringWithFormat_(NSString, v164, @"%@%@", v165, v166, v167, v132, v163);
                uint64_t v168 = (NSString *)objc_claimAutoreleasedReturnValue();
                uint64_t v173 = v168;
                if (((v143 & 1) != 0 || (isMixedCaseString(v168) & 1) == 0)
                  && (objc_msgSend_isInappropriateString_(*(void **)(v1 + 496), v169, (uint64_t)v173, v170, v171, v172) & 1) == 0)
                {
                  objc_msgSend_addObject_(v12, v174, (uint64_t)v173, v175, v176, v177);
                }

                ++v162;
                long long v161 = v223;
              }
              while (v162 < (v224 - v223) >> 2);
            }
          }
        }
        else
        {
          uint64_t v198 = v223;
          if (v224 != v223)
          {
            unint64_t v199 = 0;
            do
            {
              uint64_t v200 = unicodeToNSString(*(_DWORD *)&v198[4 * v199], v138, v139, v140, v141, v142);
              double v205 = objc_msgSend_stringWithFormat_(NSString, v201, @"%@%@", v202, v203, v204, v132, v200);
              if ((objc_msgSend_isInappropriateString_(*(void **)(v1 + 496), v206, (uint64_t)v205, v207, v208, v209) & 1) == 0) {
                objc_msgSend_addObject_(v12, v210, (uint64_t)v205, v211, v212, v213);
              }

              ++v199;
              uint64_t v198 = v223;
            }
            while (v199 < (v224 - v223) >> 2);
          }
        }

        uint64_t v131 = v223;
      }
      id v214 = v12;
      if (v131)
      {
        double v224 = v131;
        operator delete(v131);
      }
    }
    else
    {
      id v119 = v12;
    }
  }
  else
  {
    unint64_t v12 = 0;
  }

  uint64_t v215 = *(void *)(*(void *)(a1 + 48) + 8);
  double v216 = *(void **)(v215 + 40);
  *(void *)(v215 + 40) = v12;
}

void sub_1C496E3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C496E540(uint64_t a1)
{
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 3221225472;
  uint64_t v196 = sub_1C4971E40;
  uint64_t v197 = &unk_1E64E0D48;
  uint64_t v198 = v2;
  sub_1C496D8B8(v2, &buf);
  uint64_t v3 = (uint64_t *)(a1 + 32);
  *(void *)(*v3 + 232) = objc_msgSend_newRecognitionEngine(*(void **)(*(void *)(a1 + 32) + 464), v4, v5, v6, v7, v8);
  *(void *)(*v3 + 240) = objc_msgSend_newFreeFormEngine(*(void **)(*(void *)(a1 + 32) + 464), v9, v10, v11, v12, v13);
  uint64_t v19 = objc_msgSend_newCornerDetector(*(void **)(*(void *)(a1 + 32) + 464), v14, v15, v16, v17, v18);
  uint64_t v20 = *(void **)(*(void *)(a1 + 32) + 248);
  *(void *)(*v3 + 248) = v19;

  uint64_t isMainThread = objc_msgSend_isMainThread(MEMORY[0x1E4F29060], v21, v22, v23, v24, v25);
  *(void *)(*v3 + 488) = objc_msgSend_newWordLanguageModelForRecognizer_async_synchronizationQueue_(*(void **)(*v3 + 464), v27, *v3, isMainThread, *(void *)(*v3 + 272), v28);
  uint64_t v34 = objc_msgSend_newSpellChecker(*(void **)(*(void *)(a1 + 32) + 464), v29, v30, v31, v32, v33);
  uint64_t v35 = *(void **)(*(void *)(a1 + 32) + 424);
  *(void *)(*v3 + 424) = v34;

  uint64_t v36 = *(void **)(*(void *)(a1 + 32) + 464);
  id v194 = 0;
  uint64_t v41 = objc_msgSend_newStaticLexicon_(v36, v37, (uint64_t)&v194, v38, v39, v40);
  id v46 = v194;
  *(void *)(*v3 + 480) = v41;
  if (v46)
  {
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v47 = (id)qword_1EA3C9F98;
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
LABEL_5:

        goto LABEL_6;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v47 = (id)qword_1EA3C9F98;
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
        goto LABEL_5;
      }
    }
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v46;
    _os_log_impl(&dword_1C492D000, v47, OS_LOG_TYPE_ERROR, "Error loading the static lexicon: %@", (uint8_t *)&buf, 0xCu);
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v48 = *(void **)(*(void *)(a1 + 32) + 464);
  id v193 = 0;
  uint64_t v49 = objc_msgSend_newSecondaryStaticLexicon_(v48, v42, (uint64_t)&v193, v43, v44, v45);
  id v54 = v193;
  *(void *)(*(void *)(a1 + 32) + 344) = v49;
  if (!v54) {
    goto LABEL_11;
  }
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v55 = (id)qword_1EA3C9F98;
    if (!os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v55 = (id)qword_1EA3C9F98;
  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
  {
LABEL_9:
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v54;
    _os_log_impl(&dword_1C492D000, v55, OS_LOG_TYPE_ERROR, "Error loading the secondary static lexicon: %@", (uint8_t *)&buf, 0xCu);
  }
LABEL_10:

LABEL_11:
  uint64_t v56 = *(void **)(*(void *)(a1 + 32) + 464);
  id v192 = 0;
  uint64_t v57 = objc_msgSend_newPhraseLexicon_(v56, v50, (uint64_t)&v192, v51, v52, v53);
  id v63 = v192;
  *(void *)(*(void *)(a1 + 32) + 352) = v57;
  if (!v63) {
    goto LABEL_16;
  }
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v64 = (id)qword_1EA3C9F98;
    if (!os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v64 = (id)qword_1EA3C9F98;
  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
  {
LABEL_14:
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v63;
    _os_log_impl(&dword_1C492D000, v64, OS_LOG_TYPE_ERROR, "Error loading the phrase lexicon: %@", (uint8_t *)&buf, 0xCu);
  }
LABEL_15:

LABEL_16:
  *(void *)(*(void *)(a1 + 32) + 328) = objc_msgSend_newCJKStaticLexicon(*(void **)(*(void *)(a1 + 32) + 464), v58, v59, v60, v61, v62);
  uint64_t v68 = objc_msgSend_newOVSStringCheckerWithStaticLexicon_customLexicon_(*(void **)(*(void *)(a1 + 32) + 464), v65, *(void *)(*(void *)(a1 + 32) + 480), *(void *)(*(void *)(a1 + 32) + 360), v66, v67);
  uint64_t v69 = *(void *)(a1 + 32);
  long long v70 = *(void **)(v69 + 496);
  *(void *)(v69 + 496) = v68;

  uint64_t v76 = objc_msgSend_newPatternFST(*(void **)(*(void *)(a1 + 32) + 464), v71, v72, v73, v74, v75);
  uint64_t v77 = *(void *)(a1 + 32);
  uint64_t v78 = *(void **)(v77 + 296);
  *(void *)(v77 + 296) = v76;

  uint64_t v84 = objc_msgSend_sharedPostProcessingFST(*(void **)(*(void *)(a1 + 32) + 464), v79, v80, v81, v82, v83);
  uint64_t v85 = *(void *)(a1 + 32);
  uint64_t v86 = *(void **)(v85 + 304);
  *(void *)(v85 + 304) = v84;

  *(void *)(*(void *)(a1 + 32) + 288) = objc_msgSend_newGrammarFST(*(void **)(*(void *)(a1 + 32) + 464), v87, v88, v89, v90, v91);
  *(void *)(*(void *)(a1 + 32) + 280) = objc_msgSend_newRadicalClusterFST(*(void **)(*(void *)(a1 + 32) + 464), v92, v93, v94, v95, v96);
  *(void *)(*(void *)(a1 + 32) + 392) = objc_msgSend_newTransliterationVariantMap(*(void **)(*(void *)(a1 + 32) + 464), v97, v98, v99, v100, v101);
  uint64_t v107 = *(void *)(a1 + 32);
  if (v107)
  {
    uint64_t v113 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v102, v103, v104, v105, v106);
    if (*(void *)(v107 + 392))
    {
      uint64_t v114 = unicodeToNSString(9785, v108, v109, v110, v111, v112);
      objc_msgSend_addObject_(v113, v115, (uint64_t)v114, v116, v117, v118);

      VariantMap::VariantsForCode(*(VariantMap **)(v107 + 392), 9785, (char **)&buf);
      uint64_t v125 = (int *)*((void *)&buf + 1);
      uint64_t v124 = (int *)buf;
      if ((void)buf != *((void *)&buf + 1))
      {
        do
        {
          if (*v124 != 9785)
          {
            uint64_t v126 = unicodeToNSString(*v124, v119, v120, v121, v122, v123);
            objc_msgSend_addObject_(v113, v127, (uint64_t)v126, v128, v129, v130);
          }
          ++v124;
        }
        while (v124 != v125);
        uint64_t v124 = (int *)buf;
      }
      if (v124)
      {
        *((void *)&buf + 1) = v124;
        operator delete(v124);
      }
      uint64_t v131 = unicodeToNSString(9786, v119, v120, v121, v122, v123);
      objc_msgSend_addObject_(v113, v132, (uint64_t)v131, v133, v134, v135);

      VariantMap::VariantsForCode(*(VariantMap **)(v107 + 392), 9786, (char **)&buf);
      uint64_t v142 = (int *)*((void *)&buf + 1);
      uint64_t v141 = (int *)buf;
      if ((void)buf != *((void *)&buf + 1))
      {
        do
        {
          if (*v141 != 9786)
          {
            char v143 = unicodeToNSString(*v141, v136, v137, v138, v139, v140);
            objc_msgSend_addObject_(v113, v144, (uint64_t)v143, v145, v146, v147);
          }
          ++v141;
        }
        while (v141 != v142);
        uint64_t v141 = (int *)buf;
      }
      if (v141)
      {
        *((void *)&buf + 1) = v141;
        operator delete(v141);
      }
      uint64_t v148 = unicodeToNSString(9825, v136, v137, v138, v139, v140);
      objc_msgSend_addObject_(v113, v149, (uint64_t)v148, v150, v151, v152);

      VariantMap::VariantsForCode(*(VariantMap **)(v107 + 392), 9825, (char **)&buf);
      uint64_t v159 = (int *)*((void *)&buf + 1);
      uint64_t v158 = (int *)buf;
      if ((void)buf != *((void *)&buf + 1))
      {
        do
        {
          if (*v158 != 9825)
          {
            uint64_t v160 = unicodeToNSString(*v158, v153, v154, v155, v156, v157);
            objc_msgSend_addObject_(v113, v161, (uint64_t)v160, v162, v163, v164);
          }
          ++v158;
        }
        while (v158 != v159);
        uint64_t v158 = (int *)buf;
      }
      if (v158)
      {
        *((void *)&buf + 1) = v158;
        operator delete(v158);
      }
    }
  }
  else
  {
    uint64_t v113 = 0;
  }
  uint64_t v165 = *(void *)(a1 + 32);
  uint64_t v166 = *(void **)(v165 + 24);
  *(void *)(v165 + 24) = v113;

  *((void *)&buf + 1) = 0;
  uint64_t v196 = 0;
  *(void *)&long long buf = (char *)&buf + 8;
  uint64_t v167 = *(void *)(a1 + 32);
  uint64_t v168 = v167 + 552;
  sub_1C4999C7C(v167 + 544, *(void **)(v167 + 552));
  uint64_t v169 = (void *)*((void *)&buf + 1);
  *(void *)(v167 + 544) = buf;
  *(void *)(v167 + 552) = v169;
  uint64_t v170 = v196;
  *(void *)(v167 + 560) = v196;
  if (v170)
  {
    v169[2] = v168;
    *(void *)&long long buf = (char *)&buf + 8;
    *((void *)&buf + 1) = 0;
    uint64_t v196 = 0;
    uint64_t v169 = 0;
  }
  else
  {
    *(void *)(v167 + 544) = v168;
  }
  sub_1C4999C7C((uint64_t)&buf, v169);
  *(void *)(*(void *)(a1 + 32) + 320) = objc_msgSend_newCharacterLanguageModelAndMap_force_(*(void **)(*(void *)(a1 + 32) + 464), v171, *(void *)(a1 + 32) + 544, 0, v172, v173);
  uint64_t v179 = objc_msgSend_newCTCRecognitionModel(*(void **)(*(void *)(a1 + 32) + 464), v174, v175, v176, v177, v178);
  uint64_t v180 = *(void *)(a1 + 32);
  uint64_t v181 = *(void **)(v180 + 256);
  *(void *)(v180 + 256) = v179;

  uint64_t v187 = objc_msgSend_newMecabraWrapper(*(void **)(*(void *)(a1 + 32) + 464), v182, v183, v184, v185, v186);
  uint64_t v188 = *(void *)(a1 + 32);
  float32x4_t v189 = *(void **)(v188 + 472);
  *(void *)(v188 + 472) = v187;

  uint64_t v190 = *(void *)(a1 + 32);
  if (v190)
  {
    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 3221225472;
    uint64_t v196 = sub_1C496EF48;
    uint64_t v197 = &unk_1E64E0D48;
    uint64_t v198 = v190;
    sub_1C496D8B8(v190, &buf);
    uint64_t v191 = *(void *)(a1 + 32);
    if (v191)
    {
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 3221225472;
      uint64_t v196 = sub_1C496ED70;
      uint64_t v197 = &unk_1E64E0D48;
      uint64_t v198 = v191;
      sub_1C496D8B8(v191, &buf);
    }
  }
}

void sub_1C496ECE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_1C496ED70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 448);
  *(void *)(v2 + 448) = 0;

  int shouldConvertKanaInPostProcessing = objc_msgSend_shouldConvertKanaInPostProcessing(*(void **)(*(void *)(a1 + 32) + 464), v4, v5, v6, v7, v8);
  uint64_t v15 = *(void *)(a1 + 32);
  if (shouldConvertKanaInPostProcessing)
  {
    uint64_t v16 = *(void **)(v15 + 472);
    uint64_t v17 = objc_msgSend_mecabraInputMethodType(*(void **)(v15 + 464), v10, v11, v12, v13, v14);
    objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v16, v18, v17, *(void *)(v15 + 376), v19, v20);
    uint64_t v15 = *(void *)(a1 + 32);
  }
  uint64_t v43 = objc_msgSend_postProcessorLexiconWithStaticLexicon_secondaryLexicon_(*(void **)(v15 + 464), v10, *(void *)(v15 + 480), *(void *)(v15 + 344), v13, v14);
  uint64_t v21 = *(void **)(a1 + 32);
  uint64_t v41 = v21[44];
  uint64_t v42 = v21[45];
  uint64_t v23 = v21[54];
  uint64_t v22 = v21[55];
  uint64_t v24 = (void *)v21[58];
  uint64_t v25 = v21[59];
  uint64_t v27 = v21[61];
  uint64_t v26 = v21[62];
  uint64_t v28 = v21[53];
  uint64_t v30 = v21[38];
  uint64_t v29 = v21[39];
  uint64_t v36 = objc_msgSend__effectiveMaxRecognitionResultCount(v21, v31, v32, v33, v34, v35);
  uint64_t v38 = objc_msgSend_newPostProcessorWithStaticLexicon_customLexicon_phraseLexicon_customPhraseLexicon_textReplacements_postProcessingFST_wordLM_mecabraWrapper_ovsStringChecker_spellChecker_lmVocabulary_maxResultCount_(v24, v37, v43, v42, v41, v23, v22, v30, v27, v25, v26, v28, v29, v36);
  uint64_t v39 = *(void *)(a1 + 32);
  uint64_t v40 = *(void **)(v39 + 448);
  *(void *)(v39 + 448) = v38;
}

void sub_1C496EEE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 456);
  *(void *)(v2 + 456) = 0;

  uint64_t v6 = objc_msgSend_newMergedResultPostProcessorWithStaticLexicon_customLexicon_stringChecker_(*(void **)(*(void *)(a1 + 32) + 464), v4, *(void *)(*(void *)(a1 + 32) + 480), *(void *)(*(void *)(a1 + 32) + 360), *(void *)(*(void *)(a1 + 32) + 496), v5);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 456);
  *(void *)(v7 + 456) = v6;
}

void sub_1C496EF48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 264);
  *(void *)(v2 + 264) = 0;

  int shouldUseModernizedCTCDecoder = objc_msgSend_shouldUseModernizedCTCDecoder(*(void **)(*(void *)(a1 + 32) + 464), v4, v5, v6, v7, v8);
  uint64_t v15 = *(void *)(a1 + 32);
  if (shouldUseModernizedCTCDecoder)
  {
    uint64_t v354 = a1;
    uint64_t v16 = *(void **)(v15 + 256);
    if (v16)
    {
      if (objc_msgSend_codeMap(v16, v10, v11, v12, v13, v14)) {
        goto LABEL_4;
      }
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v31 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v31, OS_LOG_TYPE_FAULT, "The recognition model must be loaded before the text decoder can be initialized", buf, 2u);
      }

      if (objc_msgSend_codeMap(*(void **)(*(void *)(v354 + 32) + 256), v32, v33, v34, v35, v36))
      {
LABEL_4:
        uint64_t v22 = v354;
        if (!objc_msgSend_codeMap(*(void **)(*(void *)(v354 + 32) + 256), v17, v18, v19, v20, v21)) {
          return;
        }
LABEL_19:
        uint64_t v43 = objc_msgSend__effectiveMaxRecognitionResultCount(*(void **)(v22 + 32), v23, v24, v25, v26, v27);
        uint64_t v44 = *(void **)(v22 + 32);
        if (v44) {
          uint64_t v44 = (void *)v44[32];
        }
        uint64_t v45 = v44;
        uint64_t v51 = objc_msgSend_blankIndex(v45, v46, v47, v48, v49, v50);

        if (2 * v43 <= 20) {
          int v52 = 20;
        }
        else {
          int v52 = 2 * v43;
        }
        if (v43 <= 3) {
          int v53 = 3;
        }
        else {
          int v53 = v43;
        }
        uint64_t v54 = *(void *)(v354 + 32);
        if (v54)
        {
          id v55 = *(id *)(v54 + 256);
          if (v55)
          {
            uint64_t v61 = v55;
            objc_msgSend_decodingPruningPolicy(v55, v56, v57, v58, v59, v60);
            uint64_t v62 = *(void *)buf;

            uint64_t v54 = *(void *)(v354 + 32);
            if (v62 == 1)
            {
              int v63 = 0;
              float v64 = 0.0;
              if (v54)
              {
                id v65 = *(id *)(v54 + 256);
                if (v65)
                {
                  uint64_t v71 = v65;
                  objc_msgSend_decodingPruningPolicy(v65, v66, v67, v68, v69, v70);
                  float v64 = *((float *)&v357 + 1);
                }
              }
              char v72 = 0;
              double v73 = v64;
LABEL_48:
              uint64_t v383 = 0;
              uint64_t v384 = 0;
              uint64_t v385 = 0;
              uint64_t v99 = *(void **)(v354 + 32);
              if (v99) {
                uint64_t v99 = (void *)v99[32];
              }
              uint64_t v100 = v99;
              uint64_t v106 = *(unsigned int *)(objc_msgSend_codeMap(v100, v101, v102, v103, v104, v105) + 24);

              uint64_t v352 = v51;
              int v349 = v53;
              int v350 = v52;
              char v348 = v72;
              if (v106)
              {
                uint64_t v107 = (char *)operator new(4 * v106);
                unint64_t v108 = 0;
                uint64_t v109 = &v107[4 * v106];
                uint64_t v383 = v107;
                uint64_t v384 = v107;
                unint64_t v355 = -1;
                uint64_t v385 = v109;
                uint64_t v110 = v107;
                while (1)
                {
                  uint64_t v113 = *(void **)(v354 + 32);
                  if (v113) {
                    uint64_t v113 = (void *)v113[32];
                  }
                  uint64_t v114 = v113;
                  uint64_t v120 = objc_msgSend_codeMap(v114, v115, v116, v117, v118, v119);
                  uint64_t v121 = (_DWORD *)CHCodeMap::operator[](v120, v108);
                  uint64_t v122 = v121;
                  if (v110 >= v109) {
                    break;
                  }
                  *(_DWORD *)uint64_t v110 = *v121;
                  uint64_t v111 = (unsigned __int16 *)(v110 + 4);
LABEL_53:
                  uint64_t v384 = (char *)v111;

                  unint64_t v112 = v355;
                  if (*((_DWORD *)v111 - 1) == 57427) {
                    unint64_t v112 = v108;
                  }
                  unint64_t v355 = v112;
                  ++v108;
                  uint64_t v110 = (char *)v111;
                  if (v108 == v106) {
                    goto LABEL_87;
                  }
                }
                uint64_t v123 = (v110 - v107) >> 2;
                unint64_t v124 = v123 + 1;
                if ((unint64_t)(v123 + 1) >> 62) {
                  sub_1C494A220();
                }
                if ((v109 - v107) >> 1 > v124) {
                  unint64_t v124 = (v109 - v107) >> 1;
                }
                if ((unint64_t)(v109 - v107) >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v125 = v124;
                }
                if (v125)
                {
                  if (v125 >> 62) {
                    sub_1C4949AA8();
                  }
                  uint64_t v126 = operator new(4 * v125);
                  uint64_t v127 = &v126[4 * v123];
                  _DWORD *v127 = *v122;
                  uint64_t v111 = (unsigned __int16 *)(v127 + 1);
                  int64_t v128 = v110 - v107;
                  if (v110 == v107) {
                    goto LABEL_73;
                  }
                }
                else
                {
                  uint64_t v126 = 0;
                  uint64_t v127 = (_DWORD *)(4 * v123);
                  *(_DWORD *)(4 * v123) = *v122;
                  uint64_t v111 = (unsigned __int16 *)(4 * v123 + 4);
                  int64_t v128 = v110 - v107;
                  if (v110 == v107) {
                    goto LABEL_73;
                  }
                }
                unint64_t v129 = v128 - 4;
                if (v129 >= 0xBC)
                {
                  unint64_t v132 = (v110 - 4 - v107) & 0xFFFFFFFFFFFFFFFCLL;
                  if (&v126[v110 - v107 - 4 - v132] > &v126[v110 - v107 - 4])
                  {
                    uint64_t v130 = v110;
                  }
                  else if (&v110[-v132 - 4] > v110 - 4)
                  {
                    uint64_t v130 = v110;
                  }
                  else if ((unint64_t)(v107 - v126) >= 0x20)
                  {
                    uint64_t v133 = (v129 >> 2) + 1;
                    uint64_t v134 = 4 * (v133 & 0x7FFFFFFFFFFFFFF8);
                    uint64_t v130 = &v110[-v134];
                    uint64_t v127 = (_DWORD *)((char *)v127 - v134);
                    uint64_t v135 = &v126[4 * v123 - 16];
                    uint64_t v136 = v110 - 16;
                    uint64_t v137 = v133 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v138 = *(_OWORD *)v136;
                      *(v135 - 1) = *((_OWORD *)v136 - 1);
                      _OWORD *v135 = v138;
                      v135 -= 2;
                      v136 -= 32;
                      v137 -= 8;
                    }
                    while (v137);
                    if (v133 == (v133 & 0x7FFFFFFFFFFFFFF8)) {
                      goto LABEL_73;
                    }
                  }
                  else
                  {
                    uint64_t v130 = v110;
                  }
                }
                else
                {
                  uint64_t v130 = v110;
                }
                do
                {
                  int v131 = *((_DWORD *)v130 - 1);
                  v130 -= 4;
                  *--uint64_t v127 = v131;
                }
                while (v130 != v107);
LABEL_73:
                uint64_t v109 = &v126[4 * v125];
                uint64_t v383 = (char *)v127;
                uint64_t v384 = (char *)v111;
                uint64_t v385 = v109;
                if (v107) {
                  operator delete(v107);
                }
                uint64_t v107 = (char *)v127;
                goto LABEL_53;
              }
              uint64_t v111 = 0;
              unint64_t v355 = -1;
LABEL_87:
              uint64_t v380 = 0;
              uint64_t v381 = 0;
              unint64_t v382 = 0;
              uint64_t v139 = *(void **)(v354 + 32);
              if (v139) {
                uint64_t v139 = (void *)v139[32];
              }
              uint64_t v140 = v139;
              uint64_t v146 = objc_msgSend_spaceIndex(v140, v141, v142, v143, v144, v145);
              uint64_t v147 = v146;
              uint64_t v148 = v381;
              if ((unint64_t)v381 < v382)
              {
                *(void *)uint64_t v381 = v146;
                uint64_t v149 = (uint64_t)(v148 + 8);
                goto LABEL_110;
              }
              uint64_t v150 = (char *)v380;
              uint64_t v151 = (v381 - (char *)v380) >> 3;
              unint64_t v152 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 61) {
                sub_1C494A220();
              }
              uint64_t v153 = v382 - (void)v380;
              if ((uint64_t)(v382 - (void)v380) >> 2 > v152) {
                unint64_t v152 = v153 >> 2;
              }
              if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v154 = v152;
              }
              if (v154)
              {
                if (v154 >> 61) {
                  sub_1C4949AA8();
                }
                uint64_t v155 = operator new(8 * v154);
                uint64_t v156 = (uint64_t *)&v155[8 * v151];
                uint64_t v157 = &v155[8 * v154];
                *uint64_t v156 = v147;
                uint64_t v149 = (uint64_t)(v156 + 1);
                int64_t v158 = v148 - v150;
                if (v148 == v150) {
                  goto LABEL_108;
                }
              }
              else
              {
                uint64_t v155 = 0;
                uint64_t v156 = (uint64_t *)(8 * v151);
                uint64_t v157 = 0;
                *(void *)(8 * v151) = v147;
                uint64_t v149 = 8 * v151 + 8;
                int64_t v158 = v148 - v150;
                if (v148 == v150)
                {
LABEL_108:
                  uint64_t v380 = (unint64_t *)v156;
                  uint64_t v381 = (char *)v149;
                  unint64_t v382 = (unint64_t)v157;
                  if (v150) {
                    operator delete(v150);
                  }
LABEL_110:
                  uint64_t v381 = (char *)v149;

                  uint64_t v170 = v381;
                  if (v355 < ((char *)v111 - v383) >> 2)
                  {
                    if ((unint64_t)v381 >= v382)
                    {
                      uint64_t v172 = v380;
                      uint64_t v173 = (v381 - (char *)v380) >> 3;
                      unint64_t v174 = v173 + 1;
                      if ((unint64_t)(v173 + 1) >> 61) {
                        sub_1C494A220();
                      }
                      uint64_t v175 = v382 - (void)v380;
                      if ((uint64_t)(v382 - (void)v380) >> 2 > v174) {
                        unint64_t v174 = v175 >> 2;
                      }
                      if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v176 = v174;
                      }
                      if (v176)
                      {
                        if (v176 >> 61) {
                          sub_1C4949AA8();
                        }
                        uint64_t v177 = operator new(8 * v176);
                      }
                      else
                      {
                        uint64_t v177 = 0;
                      }
                      uint64_t v178 = (unint64_t *)&v177[8 * v173];
                      uint64_t v179 = &v177[8 * v176];
                      *uint64_t v178 = v355;
                      uint64_t v171 = (char *)(v178 + 1);
                      if (v170 != (char *)v172)
                      {
                        unint64_t v180 = v170 - (char *)v172 - 8;
                        if (v180 < 0x58) {
                          goto LABEL_260;
                        }
                        if ((unint64_t)((char *)v172 - v177) < 0x20) {
                          goto LABEL_260;
                        }
                        uint64_t v181 = (v180 >> 3) + 1;
                        uint64_t v182 = 8 * (v181 & 0x3FFFFFFFFFFFFFFCLL);
                        uint64_t v183 = &v170[-v182];
                        uint64_t v178 = (unint64_t *)((char *)v178 - v182);
                        uint64_t v184 = &v177[8 * v173 - 16];
                        uint64_t v185 = v170 - 16;
                        uint64_t v186 = v181 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v187 = *(_OWORD *)v185;
                          *(v184 - 1) = *((_OWORD *)v185 - 1);
                          *uint64_t v184 = v187;
                          v184 -= 2;
                          v185 -= 32;
                          v186 -= 4;
                        }
                        while (v186);
                        uint64_t v170 = v183;
                        if (v181 != (v181 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_260:
                          do
                          {
                            unint64_t v188 = *((void *)v170 - 1);
                            v170 -= 8;
                            *--uint64_t v178 = v188;
                          }
                          while (v170 != (char *)v172);
                        }
                      }
                      uint64_t v380 = v178;
                      uint64_t v381 = v171;
                      unint64_t v382 = (unint64_t)v179;
                      if (v172) {
                        operator delete(v172);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v381 = v355;
                      uint64_t v171 = v170 + 8;
                    }
                    uint64_t v381 = v171;
                    uint64_t v170 = v171;
                  }
                  char v375 = 1;
                  uint64_t v374 = &unk_1F2012610;
                  uint64_t v376 = 0;
                  uint64_t v377 = 0;
                  uint64_t v378 = 0;
                  float32x4_t v189 = v380;
                  int64_t v190 = v170 - (char *)v380;
                  if (v170 != (char *)v380)
                  {
                    if (v190 < 0) {
                      sub_1C494A220();
                    }
                    uint64_t v376 = operator new(v170 - (char *)v380);
                    uint64_t v377 = v376;
                    uint64_t v191 = (char *)v376 + 8 * (v190 >> 3);
                    uint64_t v378 = v191;
                    memcpy(v376, v189, v190);
                    uint64_t v377 = v191;
                  }
                  char v379 = 1;
                  long long v371 = xmmword_1C4C39D60;
                  uint64_t v370 = &unk_1F2012660;
                  uint64_t v372 = 0;
                  long long v373 = 0uLL;
                  id v192 = objc_msgSend_languageResourceBundleWithStaticLexicon_customLexicon_wordLanguageModel_(*(void **)(*(void *)(v354 + 32) + 464), v168, *(void *)(*(void *)(v354 + 32) + 480), *(void *)(*(void *)(v354 + 32) + 360), *(void *)(*(void *)(v354 + 32) + 488), v169, v346);
                  v351 = v192;
                  uint64_t v198 = objc_msgSend_characterLanguageModel(v192, v193, v194, v195, v196, v197);

                  if (v198)
                  {
                    uint64_t v204 = objc_msgSend_characterLanguageModel(v192, v199, v200, v201, v202, v203);
                    int v210 = objc_msgSend_lmSPIType(v204, v205, v206, v207, v208, v209);

                    if (v210 == 2)
                    {
                      double v216 = objc_msgSend_characterLanguageModel(v192, v211, v212, v213, v214, v215);
                      long long v222 = (const void *)objc_msgSend_languageModel(v216, v217, v218, v219, v220, v221);
                      double v223 = v222;
                      if (v222) {
                        CFRetain(v222);
                      }
                      *(void *)long long buf = v223;

                      operator new();
                    }
                    double v224 = objc_msgSend_characterLanguageModel(v192, v211, v212, v213, v214, v215);
                    int v230 = objc_msgSend_lmSPIType(v224, v225, v226, v227, v228, v229);

                    if (v230 == 1)
                    {
                      uint64_t v231 = objc_msgSend_characterLanguageModel(v192, v199, v200, v201, v202, v203);
                      uint64_t v237 = (char *)objc_msgSend_languageModel(v231, v232, v233, v234, v235, v236);
                      long long v238 = v237;
                      if (v237) {
                        CFRetain(v237);
                      }
                      uint64_t v388 = v238;

                      operator new();
                    }
                  }
                  uint64_t v239 = objc_msgSend_mixedScriptPenalty(*(void **)(*(void *)(v354 + 32) + 464), v199, v200, v201, v202, v203);
                  if (v239 == 1)
                  {
                    long long v254 = v383;
                    uint64_t v388 = 0;
                    uint64_t v389 = 0;
                    uint64_t v390 = 0;
                    uint64_t v255 = (char *)v111 - v383;
                    if (v111 == (unsigned __int16 *)v383)
                    {
                      float v257 = 0;
                      float v258 = 0;
                    }
                    else
                    {
                      if (v255 < 0) {
                        sub_1C494A220();
                      }
                      uint64_t v388 = (char *)operator new((char *)v111 - v383);
                      uint64_t v389 = v388;
                      uint64_t v390 = &v388[4 * (v255 >> 2)];
                      v391[0] = (uint64_t)&v388;
                      do
                      {
                        int v256 = CVNLPCodepointToScriptCode();
                        sub_1C499E02C(v391, v256);
                        v254 += 4;
                      }
                      while (v254 != (char *)v111);
                      float v258 = v388;
                      float v257 = v389;
                    }
                    long long v357 = xmmword_1C4C39D60;
                    *(void *)long long buf = &unk_1F20126A8;
                    long long v358 = 0uLL;
                    uint64_t v359 = 0;
                    int64_t v262 = v257 - v258;
                    if (v257 != v258)
                    {
                      if (v262 < 0) {
                        sub_1C494A220();
                      }
                      uint64_t v263 = (char *)operator new(v257 - v258);
                      double v264 = &v263[4 * (v262 >> 2)];
                      *(void *)&long long v358 = v263;
                      uint64_t v359 = v264;
                      memcpy(v263, v258, v262);
                      *((void *)&v358 + 1) = v264;
                    }
                    *(void *)&long long v360 = 0xC08F400000000000;
                    *(void *)long long buf = &unk_1F20127B0;
                    if (v258)
                    {
                      uint64_t v389 = v258;
                      operator delete(v258);
                    }
                    operator new();
                  }
                  if (v239 == 2)
                  {
                    long long v245 = (unsigned __int16 *)v383;
                    uint64_t v388 = 0;
                    uint64_t v389 = 0;
                    uint64_t v390 = 0;
                    uint64_t v246 = (char *)v111 - v383;
                    if (v111 == (unsigned __int16 *)v383)
                    {
                      long long v252 = 0;
                      id v253 = 0;
                    }
                    else
                    {
                      if (v246 < 0) {
                        sub_1C494A220();
                      }
                      uint64_t v388 = (char *)operator new((char *)v111 - v383);
                      uint64_t v389 = v388;
                      uint64_t v390 = &v388[4 * (v246 >> 2)];
                      v391[0] = (uint64_t)&v388;
                      do
                      {
                        int v247 = *v245;
                        if ((v247 - 48) >= 0xA)
                        {
                          if ((v247 - 1632) >= 0xA)
                          {
                            int v248 = 2;
                            if ((v247 - 42) >= 6 && (v247 - 1642) >= 4)
                            {
                              unsigned int v249 = v247 - 1548;
                              if ((v247 - 151) >= 0x8C && (v247 - 101) >= 0x2C) {
                                int v251 = 4;
                              }
                              else {
                                int v251 = 3;
                              }
                              if (v249 >= 2) {
                                int v248 = v251;
                              }
                              else {
                                int v248 = 2;
                              }
                            }
                          }
                          else
                          {
                            int v248 = 1;
                          }
                        }
                        else
                        {
                          int v248 = 0;
                        }
                        sub_1C499E02C(v391, v248);
                        v245 += 2;
                      }
                      while (v245 != v111);
                      id v253 = v388;
                      long long v252 = v389;
                    }
                    long long v357 = xmmword_1C4C39D60;
                    *(void *)long long buf = &unk_1F20126A8;
                    long long v358 = 0uLL;
                    uint64_t v359 = 0;
                    int64_t v259 = v252 - v253;
                    if (v252 != v253)
                    {
                      if (v259 < 0) {
                        sub_1C494A220();
                      }
                      long long v260 = (char *)operator new(v252 - v253);
                      uint64_t v261 = &v260[4 * (v259 >> 2)];
                      *(void *)&long long v358 = v260;
                      uint64_t v359 = v261;
                      memcpy(v260, v253, v259);
                      *((void *)&v358 + 1) = v261;
                    }
                    *(void *)&long long v360 = 0xC08F400000000000;
                    *(void *)long long buf = &unk_1F2012750;
                    if (v253)
                    {
                      uint64_t v389 = v253;
                      operator delete(v253);
                    }
                    operator new();
                  }
                  if (objc_msgSend_mode(*(void **)(*(void *)(v354 + 32) + 464), v240, v241, v242, v243, v244) == 1)operator new(); {
                  uint64_t v275 = objc_msgSend_lexicons(v192, v265, v266, v267, v268, v269);
                  }
                  if (v275)
                  {
                    uint64_t v276 = objc_msgSend_lexicons(v192, v270, v271, v272, v273, v274);
                    long long v282 = objc_msgSend_decodingWeight(v276, v277, v278, v279, v280, v281);
                    objc_msgSend_floatValue(v282, v283, v284, v285, v286, v287);
                    float v289 = v288;

                    if (v289 > 0.0)
                    {
                      *(void *)long long buf = 0;
                      long long v357 = 0uLL;
                      uint64_t v290 = *(void *)(v354 + 32);
                      double v291 = *(char **)(v290 + 480);
                      if (v291)
                      {
                        CFRetain(*(CFTypeRef *)(v290 + 480));
                        uint64_t v388 = v291;
                        uint64_t v292 = v357;
                        if ((unint64_t)v357 >= *((void *)&v357 + 1))
                        {
                          *(void *)&long long v357 = sub_1C499E3A0((char **)buf, &v388);
                          if (v388) {
                            CFRelease(v388);
                          }
                        }
                        else
                        {
                          *(void *)long long v357 = v291;
                          *(void *)&long long v357 = v292 + 8;
                        }
                        uint64_t v290 = *(void *)(v354 + 32);
                      }
                      char v293 = *(char **)(v290 + 360);
                      if (v293)
                      {
                        CFRetain(*(CFTypeRef *)(v290 + 360));
                        uint64_t v388 = v293;
                        uint64_t v294 = v357;
                        if ((unint64_t)v357 >= *((void *)&v357 + 1))
                        {
                          *(void *)&long long v357 = sub_1C499E3A0((char **)buf, &v388);
                          if (v388) {
                            CFRelease(v388);
                          }
                        }
                        else
                        {
                          *(void *)long long v357 = v293;
                          *(void *)&long long v357 = v294 + 8;
                        }
                      }
                      operator new();
                    }
                  }
                  uint64_t v295 = objc_msgSend_wordLanguageModel(v192, v270, v271, v272, v273, v274);

                  if (v295)
                  {
                    uint64_t v301 = objc_msgSend_wordLanguageModel(v192, v296, v297, v298, v299, v300);
                    uint64_t v307 = (const void *)objc_msgSend_languageModel(v301, v302, v303, v304, v305, v306);
                    uint64_t v308 = v307;
                    if (v307) {
                      CFRetain(v307);
                    }
                    *(void *)long long buf = v308;

                    uint64_t v314 = objc_msgSend_locale(*(void **)(*(void *)(v354 + 32) + 464), v309, v310, v311, v312, v313);
                    uint64_t v388 = (char *)LMStreamTokenizerCreate();

                    operator new();
                  }
                  *(void *)long long buf = &unk_1F2012530;
                  *(void *)&long long v357 = v352;
                  long long v358 = v371;
                  int v315 = v372;
                  *((void *)&v357 + 1) = &unk_1F2012660;
                  uint64_t v359 = v372;
                  uint64_t v353 = v373;
                  long long v360 = v373;
                  long long v373 = 0uLL;
                  uint64_t v372 = 0;
                  char v362 = v375;
                  uint64_t v361 = &unk_1F2012610;
                  long long v363 = 0uLL;
                  uint64_t v364 = 0;
                  v316 = v376;
                  int64_t v317 = v377 - (unsigned char *)v376;
                  if (v377 != v376)
                  {
                    if (v317 < 0) {
                      sub_1C494A220();
                    }
                    *(void *)&long long v363 = operator new(v377 - (unsigned char *)v376);
                    *((void *)&v363 + 1) = v363;
                    uint64_t v318 = v363 + 8 * (v317 >> 3);
                    uint64_t v364 = v318;
                    memcpy((void *)v363, v316, v317);
                    *((void *)&v363 + 1) = v318;
                  }
                  char v365 = v379;
                  *(void *)&long long v366 = v352;
                  *((void *)&v366 + 1) = __PAIR64__(v349, v350);
                  *(double *)&long long v367 = v73;
                  DWORD2(v367) = v63;
                  *(void *)&long long v368 = v347;
                  BYTE8(v368) = 1;
                  *(_DWORD *)((char *)&v368 + 9) = *(_DWORD *)v387;
                  HIDWORD(v368) = *(_DWORD *)&v387[3];
                  LOBYTE(v369) = v348;
                  *(_DWORD *)((char *)&v369 + 1) = *(_DWORD *)v386;
                  HIDWORD(v369) = *(_DWORD *)&v386[3];
                  uint64_t v319 = *(void *)(v354 + 32);
                  if (*(unsigned char *)(v319 + 200))
                  {
                    uint64_t v320 = (void **)(v319 + 72);
                    int v321 = *(void **)(v319 + 72);
                    *(void *)(v319 + 40) = v352;
                    *(_OWORD *)(v319 + 56) = v371;
                    if (v321)
                    {
                      uint64_t v322 = *(void **)(v319 + 80);
                      uint64_t v323 = v321;
                      if (v322 != v321)
                      {
                        do
                        {
                          uint64_t v325 = *--v322;
                          uint64_t v324 = v325;
                          *uint64_t v322 = 0;
                          if (v325) {
                            (*(void (**)(uint64_t))(*(void *)v324 + 8))(v324);
                          }
                        }
                        while (v322 != v321);
                        uint64_t v323 = *v320;
                      }
                      *(void *)(v319 + 80) = v321;
                      operator delete(v323);
                      const char *v320 = 0;
                      *(void *)(v319 + 80) = 0;
                      *(void *)(v319 + 88) = 0;
                      int v315 = v359;
                      uint64_t v332 = v360;
                    }
                    else
                    {
                      uint64_t v332 = v353;
                    }
                    v333 = *(void **)(v319 + 112);
                    *(void *)(v319 + 72) = v315;
                    *(void *)(v319 + 80) = v332;
                    *(void *)(v319 + 88) = *((void *)&v360 + 1);
                    long long v360 = 0uLL;
                    uint64_t v359 = 0;
                    *(unsigned char *)(v319 + 104) = v362;
                    id v330 = v351;
                    if (v333)
                    {
                      *(void *)(v319 + 120) = v333;
                      operator delete(v333);
                      *(void *)(v319 + 112) = 0;
                      *(void *)(v319 + 120) = 0;
                      *(void *)(v319 + 128) = 0;
                    }
                    *(_OWORD *)(v319 + 112) = v363;
                    *(void *)(v319 + 128) = v364;
                    uint64_t v364 = 0;
                    long long v363 = 0uLL;
                    *(unsigned char *)(v319 + 136) = v365;
                    uint64_t v334 = v369;
                    long long v336 = v367;
                    long long v335 = v368;
                    *(_OWORD *)(v319 + 144) = v366;
                    *(_OWORD *)(v319 + 160) = v336;
                    *(_OWORD *)(v319 + 176) = v335;
                    *(void *)(v319 + 192) = v334;
                    uint64_t v361 = &unk_1F2012610;
                    uint64_t v331 = v359;
                    *(void *)long long buf = &unk_1F2012530;
                    *((void *)&v357 + 1) = &unk_1F2012660;
                    if (!v359) {
                      goto LABEL_231;
                    }
                  }
                  else
                  {
                    *(void *)(v319 + 32) = &unk_1F2012530;
                    *(void *)(v319 + 40) = v352;
                    *(_OWORD *)(v319 + 56) = v358;
                    *(void *)(v319 + 48) = &unk_1F2012660;
                    *(void *)(v319 + 72) = v315;
                    *(void *)(v319 + 80) = v353;
                    uint64_t v326 = *((void *)&v360 + 1);
                    uint64_t v359 = 0;
                    long long v360 = 0uLL;
                    *(unsigned char *)(v319 + 104) = v362;
                    *(void *)(v319 + 88) = v326;
                    *(void *)(v319 + 96) = &unk_1F2012610;
                    *(_OWORD *)(v319 + 112) = v363;
                    *(void *)(v319 + 128) = v364;
                    uint64_t v364 = 0;
                    long long v363 = 0uLL;
                    *(unsigned char *)(v319 + 136) = v365;
                    long long v327 = v366;
                    long long v328 = v367;
                    long long v329 = v368;
                    *(void *)(v319 + 192) = v369;
                    *(_OWORD *)(v319 + 160) = v328;
                    *(_OWORD *)(v319 + 176) = v329;
                    *(_OWORD *)(v319 + 144) = v327;
                    *(unsigned char *)(v319 + 200) = 1;
                    id v330 = v192;
                    uint64_t v361 = &unk_1F2012610;
                    uint64_t v331 = v359;
                    *(void *)long long buf = &unk_1F2012530;
                    *((void *)&v357 + 1) = &unk_1F2012660;
                    if (!v359)
                    {
LABEL_231:

                      uint64_t v370 = &unk_1F2012660;
                      int v341 = v372;
                      if (v372)
                      {
                        uint64_t v342 = (void *)v373;
                        uint64_t v343 = v372;
                        if ((void *)v373 != v372)
                        {
                          do
                          {
                            uint64_t v345 = *--v342;
                            uint64_t v344 = v345;
                            *uint64_t v342 = 0;
                            if (v345) {
                              (*(void (**)(uint64_t))(*(void *)v344 + 8))(v344);
                            }
                          }
                          while (v342 != v341);
                          uint64_t v343 = v372;
                        }
                        *(void *)&long long v373 = v341;
                        operator delete(v343);
                      }
                      uint64_t v374 = &unk_1F2012610;
                      if (v376)
                      {
                        uint64_t v377 = v376;
                        operator delete(v376);
                      }
                      if (v380)
                      {
                        uint64_t v381 = (char *)v380;
                        operator delete(v380);
                      }
                      if (v383) {
                        operator delete(v383);
                      }
                      return;
                    }
                  }
                  uint64_t v337 = (void *)v360;
                  uint64_t v338 = v331;
                  if ((void *)v360 != v331)
                  {
                    do
                    {
                      uint64_t v340 = *--v337;
                      uint64_t v339 = v340;
                      *uint64_t v337 = 0;
                      if (v340) {
                        (*(void (**)(uint64_t))(*(void *)v339 + 8))(v339);
                      }
                    }
                    while (v337 != v331);
                    uint64_t v338 = v359;
                  }
                  *(void *)&long long v360 = v331;
                  operator delete(v338);
                  goto LABEL_231;
                }
              }
              unint64_t v159 = v158 - 8;
              if (v159 < 0x58) {
                goto LABEL_261;
              }
              if ((unint64_t)(v150 - v155) < 0x20) {
                goto LABEL_261;
              }
              uint64_t v160 = (v159 >> 3) + 1;
              uint64_t v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v162 = &v148[-v161];
              uint64_t v156 = (uint64_t *)((char *)v156 - v161);
              uint64_t v163 = &v155[8 * v151 - 16];
              uint64_t v164 = v148 - 16;
              uint64_t v165 = v160 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v166 = *(_OWORD *)v164;
                *(v163 - 1) = *((_OWORD *)v164 - 1);
                _OWORD *v163 = v166;
                v163 -= 2;
                v164 -= 32;
                v165 -= 4;
              }
              while (v165);
              uint64_t v148 = v162;
              if (v160 != (v160 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_261:
                do
                {
                  uint64_t v167 = *((void *)v148 - 1);
                  v148 -= 8;
                  *--uint64_t v156 = v167;
                }
                while (v148 != v150);
              }
              goto LABEL_108;
            }
          }
          else
          {
            uint64_t v54 = *(void *)(v354 + 32);
          }
        }
        if (v54)
        {
          id v74 = *(id *)(v54 + 256);
          if (v74)
          {
            uint64_t v80 = v74;
            objc_msgSend_decodingPruningPolicy(v74, v75, v76, v77, v78, v79);
            uint64_t v81 = *(void *)buf;

            if (v81)
            {
              char v72 = 0;
              int v63 = 0;
              double v73 = -INFINITY;
              goto LABEL_48;
            }
          }
        }
        uint64_t v82 = *(void *)(v354 + 32);
        if (v82 && (id v83 = *(id *)(v82 + 256)) != 0)
        {
          uint64_t v89 = v83;
          objc_msgSend_decodingPruningPolicy(v83, v84, v85, v86, v87, v88);
          int v63 = DWORD1(v357);
          uint64_t v90 = *(void *)(v354 + 32);
          if (!v90) {
            goto LABEL_46;
          }
        }
        else
        {
          uint64_t v89 = 0;
          *(void *)long long buf = 0;
          long long v357 = 0uLL;
          int v63 = 0;
          uint64_t v90 = *(void *)(v354 + 32);
          if (!v90) {
            goto LABEL_46;
          }
        }
        id v91 = *(id *)(v90 + 256);
        if (v91)
        {
          uint64_t v97 = v91;
          objc_msgSend_decodingPruningPolicy(v91, v92, v93, v94, v95, v96);
          unsigned int v98 = v376;

LABEL_47:
          uint64_t v346 = v98;

          char v72 = 1;
          double v73 = -INFINITY;
          goto LABEL_48;
        }
LABEL_46:
        unsigned int v98 = 0;
        goto LABEL_47;
      }
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    int64_t v37 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v37, OS_LOG_TYPE_FAULT, "The codemap must be loaded before the text decoder can be initialized", buf, 2u);
    }

    uint64_t v22 = v354;
    if (objc_msgSend_codeMap(*(void **)(*(void *)(v354 + 32) + 256), v38, v39, v40, v41, v42)) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v28 = objc_msgSend_newCTCTextDecoderWithStaticLexicon_customLexicon_wordLanguageModel_(*(void **)(v15 + 464), v10, *(void *)(v15 + 480), *(void *)(v15 + 360), *(void *)(v15 + 488), v14);
    uint64_t v29 = *(void *)(a1 + 32);
    uint64_t v30 = *(void **)(v29 + 264);
    *(void *)(v29 + 264) = v28;
  }
}

void sub_1C4971548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58)
{
  sub_1C4971B2C((const void **)(v58 - 160));
  sub_1C4971B60((void **)&a21);

  sub_1C4971CCC(&a49);
  a55 = a11;
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v60 = *(void **)(v58 - 224);
    if (!v60)
    {
LABEL_3:
      uint64_t v61 = *(void **)(v58 - 200);
      if (!v61) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v60 = *(void **)(v58 - 224);
    if (!v60) {
      goto LABEL_3;
    }
  }
  *(void *)(v58 - 216) = v60;
  operator delete(v60);
  uint64_t v61 = *(void **)(v58 - 200);
  if (!v61) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  *(void *)(v58 - 192) = v61;
  operator delete(v61);
  _Unwind_Resume(a1);
}

const void **sub_1C4971A24(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_1C4971A58(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_1C4971A8C(void *a1)
{
  *a1 = &unk_1F20126A8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_1C4971ADC(void *a1)
{
  *a1 = &unk_1F20126A8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

const void **sub_1C4971B2C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void **sub_1C4971B60(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if (v6) {
          CFRelease(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_1C4971BD0(void *a1)
{
  *a1 = &unk_1F2012530;
  a1[8] = &unk_1F2012610;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  a1[2] = &unk_1F2012660;
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    uint64_t v4 = (void *)a1[6];
    uint64_t v5 = (void *)a1[5];
    if (v4 != v3)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[5];
    }
    a1[6] = v3;
    operator delete(v5);
  }
  return a1;
}

void *sub_1C4971CCC(void *a1)
{
  *a1 = &unk_1F2012660;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_1C4971D78(void *a1)
{
  *a1 = &unk_1F2012610;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1C4971E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4971E40(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (CHNeuralNetwork *)v2[29];
  if (v3)
  {
    CHNeuralNetwork::~CHNeuralNetwork(v3);
    MEMORY[0x1C8786460]();
    *(void *)(*(void *)(a1 + 32) + 232) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v4 = (CHNeuralNetwork *)v2[30];
  if (v4)
  {
    CHNeuralNetwork::~CHNeuralNetwork(v4);
    MEMORY[0x1C8786460]();
    *(void *)(*(void *)(a1 + 32) + 240) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v5 = v2[49];
  if (v5)
  {
    free(*(void **)(v5 + 16));
    MEMORY[0x1C8786460](v5, 0x1010C40BF976668);
    *(void *)(*(void *)(a1 + 32) + 392) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  if (v2[61])
  {
    LMLanguageModelRelease();
    *(void *)(*(void *)(a1 + 32) + 488) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  if (v2[40])
  {
    LMLanguageModelRelease();
    *(void *)(*(void *)(a1 + 32) + 320) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v6 = (const void *)v2[60];
  if (v6)
  {
    CFRelease(v6);
    *(void *)(*(void *)(a1 + 32) + 480) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v7 = (const void *)v2[43];
  if (v7)
  {
    CFRelease(v7);
    *(void *)(*(void *)(a1 + 32) + 344) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v8 = (const void *)v2[44];
  if (v8)
  {
    CFRelease(v8);
    *(void *)(*(void *)(a1 + 32) + 352) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  if (v2[41])
  {
    LMLexiconRelease();
    *(void *)(*(void *)(a1 + 32) + 328) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  if (v2[42])
  {
    LMLexiconRelease();
    *(void *)(*(void *)(a1 + 32) + 336) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v9 = (const void *)v2[45];
  if (v9)
  {
    CFRelease(v9);
    *(void *)(*(void *)(a1 + 32) + 360) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v10 = (const void *)v2[54];
  if (v10)
  {
    CFRelease(v10);
    *(void *)(*(void *)(a1 + 32) + 432) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v11 = v2[35];
  if (v11)
  {
    uint64_t v12 = sub_1C4999ABC(v11);
    MEMORY[0x1C8786460](v12, 0x10B2C40ACD43ABBLL);
    *(void *)(*(void *)(a1 + 32) + 280) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v13 = v2[36];
  if (v13)
  {
    uint64_t v14 = sub_1C4999ABC(v13);
    MEMORY[0x1C8786460](v14, 0x10B2C40ACD43ABBLL);
    *(void *)(*(void *)(a1 + 32) + 288) = 0;
    uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v15 = (void *)v2[31];
  v2[31] = 0;

  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void **)(v16 + 448);
  *(void *)(v16 + 448) = 0;

  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v19 = *(void **)(v18 + 264);
  *(void *)(v18 + 264) = 0;

  uint64_t v20 = *(void *)(a1 + 32);
  uint64_t v21 = *(void **)(v20 + 472);
  *(void *)(v20 + 472) = 0;

  uint64_t v22 = *(void *)(a1 + 32);
  uint64_t v23 = *(void **)(v22 + 424);
  *(void *)(v22 + 424) = 0;

  uint64_t v24 = *(void *)(a1 + 32);
  uint64_t v25 = *(void **)(v24 + 496);
  *(void *)(v24 + 496) = 0;

  uint64_t v26 = *(void *)(a1 + 32);
  uint64_t v27 = *(void **)(v26 + 296);
  *(void *)(v26 + 296) = 0;

  uint64_t v28 = *(void *)(a1 + 32);
  uint64_t v29 = *(void **)(v28 + 304);
  *(void *)(v28 + 304) = 0;

  uint64_t v30 = *(void *)(a1 + 32);
  uint64_t v31 = *(void **)(v30 + 24);
  *(void *)(v30 + 24) = 0;

  uint64_t v32 = *(void *)(a1 + 32);
  sub_1C4999C7C(v32 + 544, *(void **)(v32 + 552));
  *(void *)(v32 + 544) = v32 + 552;
  *(_OWORD *)(v32 + 552) = 0u;
  uint64_t v33 = *(void *)(a1 + 32);
  uint64_t v34 = *(void **)(v33 + 256);
  *(void *)(v33 + 256) = 0;

  uint64_t v35 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v35 + 200))
  {
    *(void *)(v35 + 32) = &unk_1F2012530;
    *(void *)(v35 + 96) = &unk_1F2012610;
    uint64_t v36 = *(void **)(v35 + 112);
    if (v36)
    {
      *(void *)(v35 + 120) = v36;
      operator delete(v36);
    }
    *(void *)(v35 + 48) = &unk_1F2012660;
    int64_t v37 = *(void **)(v35 + 72);
    if (v37)
    {
      uint64_t v38 = *(void **)(v35 + 80);
      uint64_t v39 = *(void **)(v35 + 72);
      if (v38 != v37)
      {
        do
        {
          uint64_t v41 = *--v38;
          uint64_t v40 = v41;
          *uint64_t v38 = 0;
          if (v41) {
            (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
          }
        }
        while (v38 != v37);
        uint64_t v39 = *(void **)(v35 + 72);
      }
      *(void *)(v35 + 80) = v37;
      operator delete(v39);
    }
    *(unsigned char *)(v35 + 200) = 0;
  }
}

uint64_t sub_1C49721C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4972278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4972290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49722A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 472);
  uint64_t v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 464), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(void *)(v7 + 376), v11, v12);
  if (objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v13, v14, v15, v16, v17))
  {
    objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v18, v19, v20, v21, v22);
    MecabraSetAddressBookNamePhoneticPairs();
    if (objc_msgSend_shouldLoadCJKLexicons(*(void **)(*(void *)(a1 + 32) + 464), v23, v24, v25, v26, v27))
    {
      if (*(void *)(*(void *)(a1 + 32) + 336))
      {
        LMLexiconRelease();
        *(void *)(*(void *)(a1 + 32) + 336) = 0;
      }
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v32 = *MEMORY[0x1E4F72388];
      v33[0] = v30;
      uint64_t v31 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v28, (uint64_t)v33, (uint64_t)&v32, 1, v29);
      *(void *)(*(void *)(a1 + 32) + 336) = LMLexiconCreate();
    }
  }
}

void sub_1C49723A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4972460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4972478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4972488(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 472);
  uint64_t v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 464), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(void *)(v7 + 376), v11, v12);
  if (objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v13, v14, v15, v16, v17))
  {
    objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v18, v19, v20, v21, v22);
    MecabraSetUserWordKeyPairs();
    if (objc_msgSend_shouldLoadCJKLexicons(*(void **)(*(void *)(a1 + 32) + 464), v23, v24, v25, v26, v27))
    {
      if (*(void *)(*(void *)(a1 + 32) + 336))
      {
        LMLexiconRelease();
        *(void *)(*(void *)(a1 + 32) + 336) = 0;
      }
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v32 = *MEMORY[0x1E4F72388];
      v33[0] = v30;
      uint64_t v31 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v28, (uint64_t)v33, (uint64_t)&v32, 1, v29);
      *(void *)(*(void *)(a1 + 32) + 336) = LMLexiconCreate();
    }
  }
}

void sub_1C4972590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4972668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C497268C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 472);
  uint64_t v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 464), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(void *)(v7 + 376), v11, v12);
  uint64_t result = objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v13, v14, v15, v16, v17);
  if (result)
  {
    uint64_t result = objc_msgSend_shouldForwardMecabraOTAAssetsUpdate(*(void **)(*(void *)(a1 + 32) + 464), v19, v20, v21, v22, v23);
    if (result)
    {
      objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v24, v25, v26, v27, v28);
      MecabraSetAssetDataItemsForType();
      objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v29, v30, v31, v32, v33);
      MecabraSetAssetDataItemsForType();
      uint64_t v39 = *(void *)(a1 + 32);
      if (*(void *)(v39 + 328))
      {
        LMLexiconRelease();
        *(void *)(*(void *)(a1 + 32) + 328) = 0;
        uint64_t v39 = *(void *)(a1 + 32);
      }
      *(void *)(*(void *)(a1 + 32) + 328) = objc_msgSend_newCJKStaticLexicon(*(void **)(v39 + 464), v34, v35, v36, v37, v38);
      uint64_t v45 = *(void *)(a1 + 32);
      if (*(void *)(v45 + 488))
      {
        LMLanguageModelRelease();
        *(void *)(*(void *)(a1 + 32) + 488) = 0;
        uint64_t v45 = *(void *)(a1 + 32);
      }
      uint64_t result = objc_msgSend_newWordLanguageModel(*(void **)(v45 + 464), v40, v41, v42, v43, v44);
      *(void *)(*(void *)(a1 + 32) + 488) = result;
    }
  }
  return result;
}

void sub_1C49727EC(void *a1)
{
  uint64_t v3 = a1[4];
  CFTypeRef v2 = (CFTypeRef)a1[5];
  CFTypeRef v4 = *(CFTypeRef *)(v3 + 360);
  if (v4 != v2)
  {
    if (v4)
    {
      CFRelease(v4);
      CFTypeRef v2 = (CFTypeRef)a1[5];
    }
    if (v2) {
      CFTypeRef v2 = CFRetain(v2);
    }
    *(void *)(a1[4] + 360) = v2;
    uint64_t v5 = a1[4];
    if (!*(void *)(v5 + 488)
      || (LMLanguageModelAddTransientVocabulary(), *(void *)(a1[4] + 312) = a1[6], (uint64_t v5 = a1[4]) != 0))
    {
      uint64_t v7 = MEMORY[0x1E4F143A8];
      uint64_t v8 = 3221225472;
      uint64_t v9 = sub_1C496EF48;
      uint64_t v10 = &unk_1E64E0D48;
      uint64_t v11 = v5;
      sub_1C496D8B8(v5, &v7);
      uint64_t v6 = a1[4];
      if (v6)
      {
        uint64_t v7 = MEMORY[0x1E4F143A8];
        uint64_t v8 = 3221225472;
        uint64_t v9 = sub_1C496ED70;
        uint64_t v10 = &unk_1E64E0D48;
        uint64_t v11 = v6;
        sub_1C496D8B8(v6, &v7);
      }
    }
  }
}

void sub_1C4972988(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef v2 = *(CFTypeRef *)(a1 + 40);
  CFTypeRef v4 = *(CFTypeRef *)(v3 + 432);
  if (v4 != v2)
  {
    if (v4)
    {
      CFRelease(v4);
      CFTypeRef v2 = *(CFTypeRef *)(a1 + 40);
    }
    if (v2) {
      CFTypeRef v2 = CFRetain(v2);
    }
    *(void *)(*(void *)(a1 + 32) + 432) = v2;
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      v6[2] = sub_1C496ED70;
      v6[3] = &unk_1E64E0D48;
      v6[4] = v5;
      sub_1C496D8B8(v5, v6);
    }
  }
}

void sub_1C4972AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4972AE8(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  if (*(void **)(v2 + 440) != v1)
  {
    objc_storeStrong((id *)(v2 + 440), v1);
    uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 368);
    if (!v9)
    {
      id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void **)(v11 + 368);
      *(void *)(v11 + 368) = v10;

      uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 368);
    }
    objc_msgSend_removeAllObjects(v9, v4, v5, v6, v7, v8);
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v13 = *(id *)(*(void *)(a1 + 32) + 440);
    uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v31, (uint64_t)v36, 16, v15);
    if (v21)
    {
      uint64_t v22 = *(void *)v32;
      do
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (*(void *)v32 != v22) {
            objc_enumerationMutation(v13);
          }
          uint64_t v24 = *(void **)(*((void *)&v31 + 1) + 8 * i);
          uint64_t v25 = *(void **)(*(void *)(a1 + 32) + 368);
          uint64_t v26 = objc_msgSend_lowercaseString(v24, v16, v17, v18, v19, v20, (void)v31);
          objc_msgSend_setObject_forKey_(v25, v27, (uint64_t)v24, (uint64_t)v26, v28, v29);
        }
        uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v31, (uint64_t)v36, 16, v20);
      }
      while (v21);
    }

    uint64_t v30 = *(void *)(a1 + 32);
    if (v30)
    {
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 3221225472;
      v35[2] = sub_1C496ED70;
      v35[3] = &unk_1E64E0D48;
      v35[4] = v30;
      sub_1C496D8B8(v30, v35);
    }
  }
}

void sub_1C4972CB8(_Unwind_Exception *exception_object)
{
}

void sub_1C4972D58(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 488);
  if (*(void *)(a1 + 40) != v2)
  {
    if (v2)
    {
      LMLanguageModelRelease();
      *(void *)(*(void *)(a1 + 32) + 488) = 0;
    }
    *(void *)(*(void *)(a1 + 32) + 488) = LMLanguageModelRetain();
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v5 = MEMORY[0x1E4F143A8];
      uint64_t v6 = 3221225472;
      uint64_t v7 = sub_1C496EF48;
      uint64_t v8 = &unk_1E64E0D48;
      uint64_t v9 = v3;
      sub_1C496D8B8(v3, &v5);
      uint64_t v4 = *(void *)(a1 + 32);
      if (v4)
      {
        uint64_t v5 = MEMORY[0x1E4F143A8];
        uint64_t v6 = 3221225472;
        uint64_t v7 = sub_1C496ED70;
        uint64_t v8 = &unk_1E64E0D48;
        uint64_t v9 = v4;
        sub_1C496D8B8(v4, &v5);
      }
    }
  }
}

uint64_t sub_1C4972ED8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 472);
  uint64_t v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 464), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(void *)(v7 + 376), v11, v12);
  uint64_t result = objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v13, v14, v15, v16, v17);
  if (result)
  {
    int IsPredictionCandidate = MecabraCandidateIsPredictionCandidate();
    objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v20, v21, v22, v23, v24);
    if (IsPredictionCandidate)
    {
      MecabraPredictionAcceptCandidate();
      uint64_t result = MecabraCandidateGetSurface();
      if (!result) {
        return result;
      }
    }
    else
    {
      MecabraAcceptCandidate();
      uint64_t result = MecabraCandidateGetSurface();
      if (!result) {
        return result;
      }
    }
    uint64_t v30 = result;
    uint64_t v31 = objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v25, v26, v27, v28, v29);
    return MEMORY[0x1F4180D78](v31, v30);
  }
  return result;
}

void sub_1C497315C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  _Block_object_dispose(&a18, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1C49731A4(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C49731C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1C49731E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 472);
  uint64_t v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 464), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(void *)(v7 + 376), v11, v12);
  uint64_t result = objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v13, v14, v15, v16, v17);
  if (result)
  {
    objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v19, v20, v21, v22, v23);
    MecabraPredictionAnalyze();
    objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v24, v25, v26, v27, v28);
    uint64_t result = MecabraPredictionGetNextCandidate();
    if (result)
    {
      uint64_t v34 = result;
      while (1)
      {
        uint64_t v36 = *(void **)(*(void *)(a1 + 56) + 8);
        uint64_t v38 = (uint64_t *)v36[7];
        unint64_t v37 = v36[8];
        if ((unint64_t)v38 >= v37) {
          break;
        }
        *uint64_t v38 = v34;
        uint64_t v35 = (uint64_t)(v38 + 1);
LABEL_5:
        v36[7] = v35;
        objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v29, v30, v31, v32, v33);
        uint64_t result = MecabraPredictionGetNextCandidate();
        uint64_t v34 = result;
        if (!result) {
          return result;
        }
      }
      uint64_t v39 = (char *)v36[6];
      uint64_t v40 = ((char *)v38 - v39) >> 3;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61) {
        sub_1C494A220();
      }
      uint64_t v42 = v37 - (void)v39;
      if (v42 >> 2 > v41) {
        unint64_t v41 = v42 >> 2;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v41;
      }
      if (v43)
      {
        if (v43 >> 61) {
          sub_1C4949AA8();
        }
        uint64_t v44 = (char *)operator new(8 * v43);
        uint64_t v45 = (uint64_t *)&v44[8 * v40];
        *uint64_t v45 = v34;
        uint64_t v35 = (uint64_t)(v45 + 1);
        id v46 = (char *)((char *)v38 - v39);
        if (v38 == (uint64_t *)v39) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v44 = 0;
        uint64_t v45 = (uint64_t *)(8 * v40);
        *(void *)(8 * v40) = v34;
        uint64_t v35 = 8 * v40 + 8;
        id v46 = (char *)((char *)v38 - v39);
        if (v38 == (uint64_t *)v39)
        {
LABEL_25:
          v36[6] = v45;
          v36[7] = v35;
          v36[8] = &v44[8 * v43];
          if (v38) {
            operator delete(v38);
          }
          goto LABEL_5;
        }
      }
      unint64_t v47 = (unint64_t)(v46 - 8);
      if (v47 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v39 - v44) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v48 = (v47 >> 3) + 1;
      uint64_t v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v50 = &v38[v49 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v45 = (uint64_t *)((char *)v45 - v49);
      uint64_t v51 = &v44[8 * v40 - 16];
      int v52 = v38 - 2;
      uint64_t v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v54 = *(_OWORD *)v52;
        *((_OWORD *)v51 - 1) = *((_OWORD *)v52 - 1);
        *(_OWORD *)uint64_t v51 = v54;
        v51 -= 32;
        v52 -= 4;
        v53 -= 4;
      }
      while (v53);
      uint64_t v38 = v50;
      if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v55 = *--v38;
          *--uint64_t v45 = v55;
        }
        while (v38 != (uint64_t *)v39);
      }
      uint64_t v38 = (uint64_t *)v36[6];
      goto LABEL_25;
    }
  }
  return result;
}

void sub_1C49734A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Block_object_dispose((const void *)(v16 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C49734C4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a1[4];
  uint64_t v8 = *(void **)(v7 + 472);
  uint64_t v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 464), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(void *)(v7 + 376), v11, v12);
  uint64_t result = objc_msgSend_containsObject_(*(void **)(a1[4] + 24), v13, a1[5], v14, v15, v16);
  if (result)
  {
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 0;
  }
  else
  {
    uint64_t result = objc_msgSend_mecabra(*(void **)(a1[4] + 472), v18, v19, v20, v21, v22);
    if (result)
    {
      objc_msgSend_mecabra(*(void **)(a1[4] + 472), v23, v24, v25, v26, v27);
      uint64_t result = MecabraWorkingSetContainsString();
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result == 0;
    }
  }
  return result;
}

id sub_1C497356C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init(MEMORY[0x1E4F28E60]);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1C49736B8;
  v14[3] = &unk_1E64E12D0;
  v14[4] = a1;
  id v8 = v6;
  id v15 = v8;
  id v9 = v5;
  id v16 = v9;
  id v10 = v7;
  id v17 = v10;
  sub_1C496D8B8(a1, v14);
  uint64_t v11 = v17;
  id v12 = v10;

  return v12;
}

void sub_1C4973674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C49736A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1C49736B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(v7 + 472);
  uint64_t v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 464), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(void *)(v7 + 376), v11, v12);
  unint64_t result = objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v13, v14, v15, v16, v17);
  if (result)
  {
    unint64_t result = objc_msgSend_count(*(void **)(a1 + 40), v19, v20, v21, v22, v23);
    if (result)
    {
      unint64_t v28 = 0;
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v24, 0, v25, v26, v27);
      while (1)
        uint64_t v38 = {;
        uint64_t v44 = objc_msgSend_rangeValue(v38, v39, v40, v41, v42, v43);
        uint64_t v46 = v45;

        uint64_t v50 = objc_msgSend_substringWithRange_(*(void **)(a1 + 48), v47, v44, v46, v48, v49);
        objc_msgSend_mecabra(*(void **)(*(void *)(a1 + 32) + 472), v51, v52, v53, v54, v55);
        if (!MecabraWorkingSetContainsString()) {
          objc_msgSend_addIndex_(*(void **)(a1 + 56), v56, v28, v57, v58, v59);
        }

        ++v28;
        unint64_t result = objc_msgSend_count(*(void **)(a1 + 40), v29, v30, v31, v32, v33);
        if (v28 >= result) {
          break;
        }
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v34, v28, v35, v36, v37);
      }
    }
  }
  return result;
}

void sub_1C49737A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49737B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4973880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)CHRecognizer;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

id sub_1C49738B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v20[13] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v6 = (int)a2;
    v19[0] = &unk_1F203DF08;
    v19[1] = &unk_1F203DF20;
    v20[0] = @"Oval";
    v20[1] = @"Line";
    v19[2] = &unk_1F203DF38;
    v19[3] = &unk_1F203DF50;
    v20[2] = @"Outline Arrow";
    v20[3] = @"Triangle";
    v19[4] = &unk_1F203DF68;
    v19[5] = &unk_1F203DF80;
    v20[4] = @"Rectangle";
    v20[5] = @"Pentagon";
    v19[6] = &unk_1F203DF98;
    v19[7] = &unk_1F203DFB0;
    v20[6] = @"Manhattan Line";
    v20[7] = @"Chat Bubble";
    v19[8] = &unk_1F203DFC8;
    v19[9] = &unk_1F203DFE0;
    v20[8] = @"Star";
    v20[9] = @"Heart";
    v19[10] = &unk_1F203DFF8;
    v19[11] = &unk_1F203E010;
    v20[10] = @"Cloud";
    v20[11] = @"ScratchOut";
    v19[12] = &unk_1F203E028;
    v20[12] = @"Scribble";
    uint64_t v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v20, (uint64_t)v19, 13, a6);
    uint64_t v12 = objc_msgSend_numberWithInteger_(NSNumber, v8, v6, v9, v10, v11);
    uint64_t v17 = objc_msgSend_objectForKey_(v7, v13, (uint64_t)v12, v14, v15, v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
  return v17;
}

void sub_1C4973A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4973B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4973B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4973C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4973CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4973E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4973EEC(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_1C4973EF4(uint64_t a1)
{
  *(void *)a1 = &unk_1F2011C90;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_1C4973F5C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_1C4973FA8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1C4973FB0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_1C4974004(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }

  return a1;
}

void *sub_1C4974068(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

id sub_1C49740AC(void *a1, void *a2, void *a3, void *a4)
{
  id v317 = a2;
  id v312 = a3;
  uint64_t v319 = a4;
  if (a1)
  {
    unint64_t v315 = objc_msgSend__effectiveMaxRecognitionResultCount(a1, v7, v8, v9, v10, v11);
    uint64_t v320 = 0;
    int v321 = 0;
    uint64_t v322 = 0;
    uint64_t v17 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v12, v13, v14, v15, v16);
    if (objc_msgSend_strokeCount(v317, v18, v19, v20, v21, v22) <= 10) {
      uint64_t v28 = objc_msgSend_strokeCount(v317, v23, v24, v25, v26, v27);
    }
    else {
      uint64_t v28 = 10;
    }
    uint64_t v29 = objc_msgSend_objectForKeyedSubscript_(v312, v23, CHRecognitionOptionShouldConsumeAllStrokes, v25, v26, v27);
    int v35 = objc_msgSend_BOOLValue(v29, v30, v31, v32, v33, v34);

    if (v35)
    {
      uint64_t v41 = objc_msgSend_strokeCount(v317, v36, v37, v38, v39, v40);
      uint64_t v28 = objc_msgSend_strokeCount(v317, v42, v43, v44, v45, v46);
      uint64_t v318 = (uint64_t)a1;
      if (v41 <= v28)
      {
LABEL_7:
        BOOL v47 = 0;
        uint64_t v48 = v28 + 1;
        float v49 = -1.0;
        uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v51 = (CGRect *)MEMORY[0x1E4F1DB28];
        id v313 = (id)MEMORY[0x1E4F1CBF0];
        int v52 = 0xFFFF;
        while (1)
        {
          if (v319 && (v319[2]() & 1) != 0) {
            goto LABEL_184;
          }
          objc_msgSend_drawingWithLastStrokes_(v317, v36, v41, v38, v39, v40);
          uint64_t v54 = (CHDrawing *)objc_claimAutoreleasedReturnValue();
          CHNeuralNetwork::ClassifyCHDrawing((uint64_t *)&__p, *(CHNeuralNetwork **)(v318 + 232), v54, *(NSCharacterSet **)(v318 + 224), v315, *v51, 1);
          uint64_t v55 = __p;
          float v53 = *((float *)__p + 1);
          float v56 = 0.2;
          if (*(_DWORD *)__p == v52) {
            float v56 = 0.0;
          }
          char v57 = v53 > (float)(v49 - v56) ? 1 : v35;
          if (v57) {
            break;
          }
          float v53 = v49;
LABEL_9:
          *(void *)uint64_t v326 = v55;
          operator delete(v55);
LABEL_10:

          ++v41;
          float v49 = v53;
          if (v48 == v41)
          {
            if (v47)
            {
              uint64_t v62 = [CHFreeformRecognitionResult alloc];
              uint64_t v68 = objc_msgSend_initWithScore_(v62, v63, v64, v65, v66, v67, 0.0);
              objc_msgSend_insertObject_atIndex_(v17, v69, (uint64_t)v68, 0, v70, v71);
            }
            objc_msgSend_drawingWithLastStrokes_(v317, v36, v50, v38, v39, v40);
            goto LABEL_38;
          }
        }
        sub_1C494ACB0(&v320, (char *)__p, *(char **)v326, (uint64_t)(*(void *)v326 - (void)__p) >> 3);
        int v52 = *(_DWORD *)v320;
        CHNeuralNetwork::ClassifyCHDrawing((uint64_t *)valuePtr, *(CHNeuralNetwork **)(v318 + 240), v54, 0, 2uLL, *v51, 1);
        if (*(_DWORD *)valuePtr[0])
        {
          if (*(_DWORD *)valuePtr[0] == 0xFFFF)
          {
            BOOL v58 = 0;
            BOOL v59 = (float)(*((float *)valuePtr[0] + 1) - *((float *)valuePtr[0] + 3)) > 0.2;
            uint64_t v60 = (float *)__p;
            if (*(void **)v326 == __p) {
              goto LABEL_30;
            }
            goto LABEL_27;
          }
        }
        else if (*((float *)valuePtr[0] + 1) < 0.85)
        {
          BOOL v59 = 0;
          BOOL v58 = *(_DWORD *)__p == 4098;
          uint64_t v60 = (float *)__p;
          if (*(void **)v326 == __p) {
            goto LABEL_30;
          }
LABEL_27:
          if (*(_DWORD *)v60 == 4106 && v60[1] > 0.98)
          {
            BOOL v61 = *((float *)valuePtr[0] + 1) < 0.9;
            goto LABEL_31;
          }
LABEL_30:
          BOOL v61 = 0;
LABEL_31:
          BOOL v47 = v59 && !v61 || v58;
          valuePtr[1] = valuePtr[0];
          operator delete(valuePtr[0]);
          uint64_t v55 = __p;
          uint64_t v50 = v41;
          if (!__p) {
            goto LABEL_10;
          }
          goto LABEL_9;
        }
        BOOL v59 = 0;
        BOOL v58 = 0;
        uint64_t v60 = (float *)__p;
        if (*(void **)v326 == __p) {
          goto LABEL_30;
        }
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v41 = 1;
      uint64_t v318 = (uint64_t)a1;
      if (v28 >= 1) {
        goto LABEL_7;
      }
    }
    objc_msgSend_drawingWithLastStrokes_(v317, v36, 0x7FFFFFFFFFFFFFFFLL, v38, v39, v40);
    char v72 = LABEL_38:;
    v316 = objc_msgSend_singleStrokeDrawing(v72, v73, v74, v75, v76, v77);

    id v83 = (float *)v320;
    uint64_t v314 = v321;
    if (v320 == v321)
    {
LABEL_157:
      uint64_t v189 = v318;
      int64_t v190 = *(void **)(v318 + 224);
      if (v190)
      {
        uint64_t v191 = objc_msgSend_objectForKey_(&unk_1F203CF18, v78, @"ScratchOut", v80, v81, v82);
        unsigned __int16 v197 = objc_msgSend_integerValue(v191, v192, v193, v194, v195, v196);
        int IsMember = objc_msgSend_characterIsMember_(v190, v198, v197, v199, v200, v201);
      }
      else
      {
        int IsMember = 1;
      }
      uint64_t v203 = objc_msgSend_firstObject(v17, v78, v79, v80, v81, v82);
      uint64_t v209 = objc_msgSend_string(v203, v204, v205, v206, v207, v208);
      int isEqualToString = objc_msgSend_isEqualToString_(v209, v210, @"Freeform", v211, v212, v213);

      uint64_t v220 = objc_msgSend_string(v203, v215, v216, v217, v218, v219);
      int v225 = objc_msgSend_isEqualToString_(v220, v221, @"Manhattan Line", v222, v223, v224);

      unint64_t v236 = objc_msgSend_pointCount(v316, v226, v227, v228, v229, v230);
      if (v319 && (v319[2]() & 1) != 0)
      {
        id v313 = (id)MEMORY[0x1E4F1CBF0];
      }
      else
      {
        if ((IsMember & isEqualToString) == 1 && v236 <= 0x3E7)
        {
          if ((unint64_t)objc_msgSend_count(v17, v231, v232, v233, v234, v235) < 2)
          {
            uint64_t v242 = v318;
            BOOL v256 = 1;
          }
          else
          {
            uint64_t v241 = objc_msgSend_objectAtIndexedSubscript_(v17, v237, 1, v238, v239, v240);
            uint64_t v242 = v318;
            objc_msgSend_score(v241, v243, v244, v245, v246, v247);
            double v249 = v248;
            objc_msgSend_score(v203, v250, v251, v252, v253, v254);
            BOOL v256 = vabdd_f64(v249, v255) > 0.4;
          }
          objc_msgSend_setDrawing_(*(void **)(v242 + 248), v237, (uint64_t)v316, v238, v239, v240);
          if (v256)
          {
            BOOL v262 = 1;
            uint64_t v189 = v242;
          }
          else
          {
            uint64_t v189 = v242;
            BOOL v262 = (unint64_t)objc_msgSend_directionChangeCount(*(void **)(v242 + 248), v257, v258, v259, v260, v261) > 1;
          }
          if (objc_msgSend_indexOfObjectPassingTest_(v17, v257, (uint64_t)&unk_1F20129F0, v259, v260, v261) && v262)
          {
            objc_msgSend_bounds(v316, v231, v232, v233, v234, v235);
            CGFloat x = v332.origin.x;
            CGFloat y = v332.origin.y;
            CGFloat width = v332.size.width;
            CGFloat height = v332.size.height;
            CGRectGetMidX(v332);
            v333.origin.CGFloat x = x;
            v333.origin.CGFloat y = y;
            v333.size.CGFloat width = width;
            v333.size.CGFloat height = height;
            CGRectGetMidY(v333);
            uint64_t v268 = [CHScratchOutRecognitionResult alloc];
            objc_msgSend_score(v203, v269, v270, v271, v272, v273);
            uint64_t v278 = objc_msgSend_initWithString_score_rotation_center_size_(v268, v274, @"ScratchOut", v275, v276, v277);
            objc_msgSend_insertObject_atIndex_(v17, v279, (uint64_t)v278, 0, v280, v281);
          }
        }
        if ((IsMember & v225) == 1)
        {
          objc_msgSend_setDrawing_(*(void **)(v189 + 248), v231, (uint64_t)v316, v233, v234, v235);
          if ((unint64_t)objc_msgSend_directionChangeCount(*(void **)(v189 + 248), v282, v283, v284, v285, v286) >= 5)
          {
            objc_msgSend_bounds(v316, v231, v232, v233, v234, v235);
            CGFloat v287 = v334.origin.x;
            CGFloat v288 = v334.origin.y;
            CGFloat v289 = v334.size.width;
            CGFloat v290 = v334.size.height;
            CGRectGetMidX(v334);
            v335.origin.CGFloat x = v287;
            v335.origin.CGFloat y = v288;
            v335.size.CGFloat width = v289;
            v335.size.CGFloat height = v290;
            CGRectGetMidY(v335);
            double v291 = [CHScratchOutRecognitionResult alloc];
            objc_msgSend_score(v203, v292, v293, v294, v295, v296);
            uint64_t v301 = objc_msgSend_initWithString_score_rotation_center_size_(v291, v297, @"ScratchOut", v298, v299, v300);
            objc_msgSend_insertObject_atIndex_(v17, v302, (uint64_t)v301, 0, v303, v304);
          }
        }
        if (objc_msgSend_count(v17, v231, v232, v233, v234, v235) > v315) {
          objc_msgSend_removeLastObject(v17, v305, v306, v307, v308, v309);
        }
        id v313 = v17;
      }
    }
    else
    {
      while (!v319 || (v319[2]() & 1) == 0)
      {
        double v84 = v83[1];
        if (v84 < 2.22507386e-308) {
          double v84 = 2.22507386e-308;
        }
        float v90 = log10(v84);
        v83[1] = v90;
        id v91 = 0;
        switch(*(_DWORD *)v83)
        {
          case 0x1000:
            id v92 = v316;
            LODWORD(valuePtr[0]) = 1048576000;
            LODWORD(v324) = 1097859072;
            CFNumberRef v93 = (const __CFNumber *)CFPreferencesCopyAppValue(@"HWROvalFitToCircleRadiiRatioThreshold", @"com.apple.CoreHandwriting");
            CFNumberRef v94 = v93;
            if (!v93
              || ((CFTypeID v95 = CFGetTypeID(v93), v95 != CFNumberGetTypeID())
                ? (int Value = 0)
                : (int Value = CFNumberGetValue(v94, kCFNumberFloatType, valuePtr)),
                  (CFRelease(v94), !Value) || *(float *)valuePtr < 0.0 || *(float *)valuePtr > 0.5))
            {
              LODWORD(valuePtr[0]) = 1048576000;
            }
            CFNumberRef v159 = (const __CFNumber *)CFPreferencesCopyAppValue(@"HWROvalAlignToIncrementsOf", @"com.apple.CoreHandwriting");
            CFNumberRef v160 = v159;
            if (!v159
              || ((CFTypeID v161 = CFGetTypeID(v159), v161 != CFNumberGetTypeID())
                ? (int v162 = 0)
                : (int v162 = CFNumberGetValue(v160, kCFNumberFloatType, &v324)),
                  (CFRelease(v160), !v162) || *(float *)&v324 < 1.0 || *(float *)&v324 > 90.1))
            {
              LODWORD(v324) = 1097859072;
            }
            operator new();
          case 0x1001:
            id v140 = v316;
            LODWORD(valuePtr[0]) = 1084227584;
            LODWORD(v324) = 1048576000;
            CFNumberRef v141 = (const __CFNumber *)CFPreferencesCopyAppValue(@"HWRLineAlignToAxisThreshold", @"com.apple.CoreHandwriting");
            CFNumberRef v142 = v141;
            if (!v141
              || ((CFTypeID v143 = CFGetTypeID(v141), v143 != CFNumberGetTypeID())
                ? (int v144 = 0)
                : (int v144 = CFNumberGetValue(v142, kCFNumberFloatType, valuePtr)),
                  (CFRelease(v142), !v144) || *(float *)valuePtr < 0.0 || *(float *)valuePtr > 40.0))
            {
              LODWORD(valuePtr[0]) = 1084227584;
            }
            CFNumberRef v167 = (const __CFNumber *)CFPreferencesCopyAppValue(@"HWRLineLengthRatioThreshold", @"com.apple.CoreHandwriting");
            CFNumberRef v168 = v167;
            if (!v167
              || ((CFTypeID v169 = CFGetTypeID(v167), v169 != CFNumberGetTypeID())
                ? (int v170 = 0)
                : (int v170 = CFNumberGetValue(v168, kCFNumberFloatType, &v324)),
                  (CFRelease(v168), !v170) || *(float *)&v324 < 0.0 || *(float *)&v324 > 0.5))
            {
              LODWORD(v324) = 1048576000;
            }
            operator new();
          case 0x1002:
            id v128 = v316;
            LODWORD(valuePtr[0]) = 1097859072;
            CFNumberRef v129 = (const __CFNumber *)CFPreferencesCopyAppValue(@"HWROutlinedArrowAlignToIncrementsOf", @"com.apple.CoreHandwriting");
            CFNumberRef v130 = v129;
            if (!v129
              || ((CFTypeID v131 = CFGetTypeID(v129), v131 != CFNumberGetTypeID())
                ? (int v132 = 0)
                : (int v132 = CFNumberGetValue(v130, kCFNumberFloatType, valuePtr)),
                  (CFRelease(v130), !v132) || *(float *)valuePtr < 1.0 || *(float *)valuePtr > 90.1))
            {
              LODWORD(valuePtr[0]) = 1097859072;
            }
            operator new();
          case 0x1003:
            id v123 = v316;
            LODWORD(valuePtr[0]) = 1084227584;
            LODWORD(v324) = 1048576000;
            v328[0] = 0.1;
            CFNumberRef v124 = (const __CFNumber *)CFPreferencesCopyAppValue(@"HWRTriangleAlignToAxisThreshold", @"com.apple.CoreHandwriting");
            CFNumberRef v125 = v124;
            if (!v124
              || ((CFTypeID v126 = CFGetTypeID(v124), v126 != CFNumberGetTypeID())
                ? (int v127 = 0)
                : (int v127 = CFNumberGetValue(v125, kCFNumberFloatType, valuePtr)),
                  (CFRelease(v125), !v127) || *(float *)valuePtr < 0.0 || *(float *)valuePtr > 40.0))
            {
              LODWORD(valuePtr[0]) = 1084227584;
            }
            CFNumberRef v155 = (const __CFNumber *)CFPreferencesCopyAppValue(@"HWRTriangleIsoscelesLengthRatioThreshold", @"com.apple.CoreHandwriting");
            CFNumberRef v156 = v155;
            if (!v155
              || ((CFTypeID v157 = CFGetTypeID(v155), v157 != CFNumberGetTypeID())
                ? (int v158 = 0)
                : (int v158 = CFNumberGetValue(v156, kCFNumberFloatType, &v324)),
                  (CFRelease(v156), !v158) || *(float *)&v324 < 0.0 || *(float *)&v324 > 0.5))
            {
              LODWORD(v324) = 1048576000;
            }
            CFNumberRef v185 = (const __CFNumber *)CFPreferencesCopyAppValue(@"HWRTriangleEquilateralLengthRatioThreshold", @"com.apple.CoreHandwriting");
            CFNumberRef v186 = v185;
            if (!v185
              || ((CFTypeID v187 = CFGetTypeID(v185), v187 != CFNumberGetTypeID())
                ? (int v188 = 0)
                : (int v188 = CFNumberGetValue(v186, kCFNumberFloatType, v328)),
                  (CFRelease(v186), !v188) || v328[0] < 0.0 || v328[0] > 0.3))
            {
              v328[0] = 0.1;
            }
            operator new();
          case 0x1004:
            id v134 = v316;
            LODWORD(valuePtr[0]) = 1048576000;
            LODWORD(v324) = 1097859072;
            CFNumberRef v135 = (const __CFNumber *)CFPreferencesCopyAppValue(@"HWRRectangleFitToSquareLengthRatioThreshold", @"com.apple.CoreHandwriting");
            CFNumberRef v136 = v135;
            if (!v135
              || ((CFTypeID v137 = CFGetTypeID(v135), v137 != CFNumberGetTypeID())
                ? (int v138 = 0)
                : (int v138 = CFNumberGetValue(v136, kCFNumberFloatType, valuePtr)),
                  (CFRelease(v136), !v138) || *(float *)valuePtr < 0.0 || *(float *)valuePtr > 0.5))
            {
              LODWORD(valuePtr[0]) = 1048576000;
            }
            CFNumberRef v163 = (const __CFNumber *)CFPreferencesCopyAppValue(@"HWRRectangleAlignToIncrementsOf", @"com.apple.CoreHandwriting");
            CFNumberRef v164 = v163;
            if (!v163
              || ((CFTypeID v165 = CFGetTypeID(v163), v165 != CFNumberGetTypeID())
                ? (int v166 = 0)
                : (int v166 = CFNumberGetValue(v164, kCFNumberFloatType, &v324)),
                  (CFRelease(v164), !v166) || *(float *)&v324 < 1.0 || *(float *)&v324 > 90.1))
            {
              LODWORD(v324) = 1097859072;
            }
            operator new();
          case 0x1005:
            id v122 = v316;
            operator new();
          case 0x1006:
          case 0x1008:
            break;
          case 0x1007:
            id v117 = v316;
            float v327 = 0.25;
            v328[0] = 5.0;
            CFNumberRef v118 = (const __CFNumber *)CFPreferencesCopyAppValue(@"HWRLineAlignToAxisThreshold", @"com.apple.CoreHandwriting");
            CFNumberRef v119 = v118;
            if (!v118
              || ((CFTypeID v120 = CFGetTypeID(v118), v120 != CFNumberGetTypeID())
                ? (int v121 = 0)
                : (int v121 = CFNumberGetValue(v119, kCFNumberFloatType, v328)),
                  (CFRelease(v119), !v121) || v328[0] < 0.0 || v328[0] > 40.0))
            {
              v328[0] = 5.0;
            }
            CFNumberRef v147 = (const __CFNumber *)CFPreferencesCopyAppValue(@"HWRLineLengthRatioThreshold", @"com.apple.CoreHandwriting");
            CFNumberRef v152 = v147;
            if (!v147
              || ((CFTypeID v153 = CFGetTypeID(v147), v153 != CFNumberGetTypeID())
                ? (int v154 = 0)
                : (int v154 = CFNumberGetValue(v152, kCFNumberFloatType, &v327)),
                  (CFRelease(v152), !v154) || (*(float *)&double v151 = v327, v327 < 0.0) || v327 > 0.5))
            {
              float v327 = 0.25;
            }
            objc_msgSend_pointForStrokeIndex_pointIndex_(v117, v148, 0, 0, v149, v150, v151);
            uint64_t v176 = objc_msgSend_pointCount(v117, v171, v172, v173, v174, v175);
            objc_msgSend_pointForStrokeIndex_pointIndex_(v117, v177, 0, v176 - 1, v178, v179);
            objc_msgSend_bounds(v117, v180, v181, v182, v183, v184);
            operator new();
          case 0x1009:
            id v133 = v316;
            operator new();
          case 0x100A:
            id v146 = v316;
            operator new();
          case 0x100B:
            id v145 = v316;
            operator new();
          case 0x100C:
            id v139 = v316;
            operator new();
          default:
            if (*(_DWORD *)v83 == 0xFFFF)
            {
              objc_msgSend_bounds(v316, v85, v86, v87, v88, v89);
              CGFloat v97 = v330.origin.x;
              CGFloat v98 = v330.origin.y;
              double v99 = v330.size.width;
              double v100 = v330.size.height;
              double MidX = CGRectGetMidX(v330);
              v331.origin.CGFloat x = v97;
              v331.origin.CGFloat y = v98;
              v331.size.CGFloat width = v99;
              v331.size.CGFloat height = v100;
              double MidY = CGRectGetMidY(v331);
              uint64_t v103 = [CHScribbleRecognitionResult alloc];
              unint64_t v108 = sub_1C49738B0(v318, (const char *)*(unsigned int *)v83, v104, v105, v106, v107);
              id v91 = objc_msgSend_initWithString_score_rotation_center_size_(v103, v109, (uint64_t)v108, v110, v111, v112, v83[1], 0.0, MidX, MidY, v99, v100);

              if (v91) {
                objc_msgSend_addObject_(v17, v113, (uint64_t)v91, v114, v115, v116);
              }
            }
            break;
        }

        v83 += 2;
        if (v83 == (float *)v314) {
          goto LABEL_157;
        }
      }
      id v313 = (id)MEMORY[0x1E4F1CBF0];
    }

LABEL_184:
    if (v320)
    {
      int v321 = (unsigned int *)v320;
      operator delete(v320);
    }
    uint64_t v310 = v313;
  }
  else
  {
    uint64_t v310 = 0;
  }

  return v310;
}

void sub_1C4976BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  sub_1C4977278(&a26);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1C49771BC(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v8 = objc_msgSend_string(v2, v3, v4, v5, v6, v7);
  if (objc_msgSend_isEqualToString_(v8, v9, @"Line", v10, v11, v12))
  {
    uint64_t isEqualToString = 1;
  }
  else
  {
    uint64_t v19 = objc_msgSend_string(v2, v13, v14, v15, v16, v17);
    uint64_t isEqualToString = objc_msgSend_isEqualToString_(v19, v20, @"Manhattan Line", v21, v22, v23);
  }
  return isEqualToString;
}

void sub_1C497723C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4977254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4977264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **sub_1C4977278(void **a1)
{
  id v2 = (id *)*a1;
  if (*a1)
  {
    uint64_t v3 = (id *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {

        uint64_t v5 = *(v3 - 2);
        v3 -= 2;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C49772E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v12 = objc_msgSend_firstObject(v5, v7, v8, v9, v10, v11);
  uint64_t v13 = (void *)MEMORY[0x1E4F28F60];
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 3221225472;
  v41[2] = sub_1C4977508;
  v41[3] = &unk_1E64E1318;
  id v14 = v12;
  id v42 = v14;
  uint64_t v19 = objc_msgSend_predicateWithBlock_(v13, v15, (uint64_t)v41, v16, v17, v18);
  objc_msgSend_filterUsingPredicate_(v5, v20, (uint64_t)v19, v21, v22, v23);

  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x2020000000;
  v40[3] = 0;
  uint64_t v29 = objc_msgSend_length(v6, v24, v25, v26, v27, v28);
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 3221225472;
  v34[2] = sub_1C49775AC;
  v34[3] = &unk_1E64E1368;
  id v30 = v5;
  id v35 = v30;
  id v31 = v14;
  id v36 = v31;
  uint64_t v37 = a1;
  id v32 = v6;
  id v38 = v32;
  uint64_t v39 = v40;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v32, v33, 0, v29, 258, (uint64_t)v34);

  _Block_object_dispose(v40, 8);
}

void sub_1C4977494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

void sub_1C49774F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4977508(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = v3;
  if (*(id *)(a1 + 32) == v3)
  {

    return 1;
  }
  else
  {
    uint64_t v10 = objc_msgSend_inappropriateWordIndexes(v3, v4, v5, v6, v7, v8);
    BOOL v16 = objc_msgSend_count(v10, v11, v12, v13, v14, v15) == 0;

    return v16;
  }
}

void sub_1C4977588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497759C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49775AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, BOOL *a7)
{
  uint64_t v11 = (void *)MEMORY[0x1E4F28F60];
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = sub_1C4977710;
  v31[3] = &unk_1E64E1340;
  uint64_t v12 = *(void **)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void **)(a1 + 56);
  id v32 = v13;
  uint64_t v33 = v14;
  id v34 = v15;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v20 = objc_msgSend_predicateWithBlock_(v11, v16, (uint64_t)v31, v17, v18, v19);
  objc_msgSend_filterUsingPredicate_(v12, v21, (uint64_t)v20, v22, v23, v24);

  BOOL v30 = (unint64_t)objc_msgSend_count(*(void **)(a1 + 32), v25, v26, v27, v28, v29) < 2
     || *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) > 4uLL;
  *a7 = v30;
  ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
}

void sub_1C49776D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4977710(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (*(id *)(a1 + 32) == v7)
  {
    uint64_t v25 = 1;
  }
  else
  {
    uint64_t v8 = *(void **)(*(void *)(a1 + 40) + 496);
    uint64_t v9 = objc_msgSend_substringFromIndex_(*(void **)(a1 + 48), v3, *(void *)(a1 + 56), v4, v5, v6);
    uint64_t v15 = objc_msgSend_string(v7, v10, v11, v12, v13, v14);
    uint64_t v20 = objc_msgSend_stringByAppendingString_(v9, v16, (uint64_t)v15, v17, v18, v19);
    uint64_t v25 = objc_msgSend_isInappropriateString_(v8, v21, (uint64_t)v20, v22, v23, v24) ^ 1;
  }
  return v25;
}

void sub_1C49777BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49777E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1C49777F8(void *a1)
{
  id v1 = a1;
  uint64_t v6 = v1;
  long long v7 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  v14[0] = *MEMORY[0x1E4F1DB20];
  v14[1] = v7;
  if (v1)
  {
    uint64_t v8 = objc_msgSend_objectForKey_(v1, v2, (uint64_t)CHRecognitionOptionFrameContext, v3, v4, v5);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      objc_msgSend_getValue_(v8, v9, (uint64_t)v14, v10, v11, v12);
    }
  }
  return *(double *)v14;
}

void sub_1C4977890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49778A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49778B4(double *a1, unsigned int **a2, void *a3)
{
  id v47 = a3;
  uint64_t v10 = objc_msgSend_indexesOfStrokesSmallerThanSize_(v47, v5, v6, v7, v8, v9, a1[63], a1[64]);
  uint64_t v16 = objc_msgSend_count(v10, v11, v12, v13, v14, v15);
  if (v16 == objc_msgSend_strokeCount(v47, v17, v18, v19, v20, v21))
  {
    if (objc_msgSend_strokeCount(v47, v22, v23, v24, v25, v26) == 1)
    {
      id v32 = (unsigned int *)operator new(4uLL);
      *id v32 = 46;
      float v49 = (char *)(v32 + 1);
      uint64_t v50 = (char *)(v32 + 1);
      uint64_t v48 = v32;
      sub_1C498CAC4(a1, a2, &v48, v33, v34, v35);
    }
    else if (objc_msgSend_strokeCount(v47, v27, v28, v29, v30, v31) == 2)
    {
      id v32 = (unsigned int *)operator new(0x18uLL);
      float v49 = (char *)(v32 + 6);
      uint64_t v50 = (char *)(v32 + 6);
      *((void *)v32 + 2) = 0x22EF00002026;
      *(_OWORD *)id v32 = xmmword_1C4C39EA8;
      uint64_t v48 = v32;
      sub_1C498CAC4(a1, a2, &v48, v41, v42, v43);
    }
    else
    {
      if (objc_msgSend_strokeCount(v47, v36, v37, v38, v39, v40) != 3) {
        goto LABEL_9;
      }
      id v32 = (unsigned int *)operator new(0x14uLL);
      float v49 = (char *)(v32 + 5);
      uint64_t v50 = (char *)(v32 + 5);
      v32[4] = 59;
      *(_OWORD *)id v32 = xmmword_1C4C39EC0;
      uint64_t v48 = v32;
      sub_1C498CAC4(a1, a2, &v48, v44, v45, v46);
    }
    operator delete(v32);
  }
LABEL_9:
}

void sub_1C4977A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  operator delete(v10);

  _Unwind_Resume(a1);
}

void sub_1C4977A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4977A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4977AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

id sub_1C4977AC0(uint64_t a1, void *a2)
{
  v149[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v9 = v3;
  if (*(void *)(a1 + 440))
  {
    uint64_t v10 = *(void **)(a1 + 368);
    uint64_t v11 = objc_msgSend_string(v3, v4, v5, v6, v7, v8);
    uint64_t v17 = objc_msgSend_lowercaseString(v11, v12, v13, v14, v15, v16);
    uint64_t v22 = objc_msgSend_objectForKey_(v10, v18, (uint64_t)v17, v19, v20, v21);

    if (v22)
    {
      CFTypeID v137 = objc_msgSend_objectForKey_(*(void **)(a1 + 440), v23, (uint64_t)v22, v24, v25, v26);
      uint64_t v27 = NSNumber;
      objc_msgSend_score(v9, v28, v29, v30, v31, v32);
      uint64_t v38 = objc_msgSend_numberWithDouble_(v27, v33, v34, v35, v36, v37);
      v149[0] = v38;
      id v133 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v39, (uint64_t)v149, 1, v40, v41);

      uint64_t v42 = NSNumber;
      objc_msgSend_score(v9, v43, v44, v45, v46, v47);
      float v53 = objc_msgSend_numberWithDouble_(v42, v48, v49, v50, v51, v52);
      uint64_t v148 = v53;
      id v134 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v54, (uint64_t)&v148, 1, v55, v56);

      char v57 = (void *)MEMORY[0x1E4F29238];
      uint64_t v63 = objc_msgSend_length(v137, v58, v59, v60, v61, v62);
      uint64_t v67 = objc_msgSend_valueWithRange_(v57, v64, 0, v63, v65, v66);
      CFNumberRef v147 = v67;
      CFNumberRef v135 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v68, (uint64_t)&v147, 1, v69, v70);

      uint64_t v75 = objc_msgSend_numberWithBool_(NSNumber, v71, 1, v72, v73, v74);
      id v146 = v75;
      CFNumberRef v136 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v76, (uint64_t)&v146, 1, v77, v78);

      id v83 = objc_msgSend_numberWithBool_(NSNumber, v79, 1, v80, v81, v82);
      id v145 = v83;
      uint64_t v87 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v84, (uint64_t)&v145, 1, v85, v86);

      id v92 = objc_msgSend_numberWithInt_(NSNumber, v88, 0, v89, v90, v91);
      int v144 = v92;
      uint64_t v96 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v93, (uint64_t)&v144, 1, v94, v95);

      uint64_t v102 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v97, v98, v99, v100, v101);
      long long v140 = 0u;
      long long v141 = 0u;
      long long v138 = 0u;
      long long v139 = 0u;
      unint64_t v108 = objc_msgSend_wordStrokeSets(v9, v103, v104, v105, v106, v107);
      uint64_t v115 = objc_msgSend_countByEnumeratingWithState_objects_count_(v108, v109, (uint64_t)&v138, (uint64_t)v143, 16, v110);
      if (v115)
      {
        uint64_t v116 = *(void *)v139;
        do
        {
          for (uint64_t i = 0; i != v115; ++i)
          {
            if (*(void *)v139 != v116) {
              objc_enumerationMutation(v108);
            }
            objc_msgSend_addIndexes_(v102, v111, *(void *)(*((void *)&v138 + 1) + 8 * i), v112, v113, v114);
          }
          uint64_t v115 = objc_msgSend_countByEnumeratingWithState_objects_count_(v108, v111, (uint64_t)&v138, (uint64_t)v143, 16, v114);
        }
        while (v115);
      }

      CFNumberRef v118 = [CHTextRecognitionResult alloc];
      objc_msgSend_score(v9, v119, v120, v121, v122, v123);
      double v125 = v124;
      CFNumberRef v142 = v102;
      CFNumberRef v129 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v126, (uint64_t)&v142, 1, v127, v128);
      isTextReplacement = objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v118, v130, (uint64_t)v137, (uint64_t)v135, (uint64_t)v96, (uint64_t)v133, v134, v129, v125, v136, v87, 0, 0, 1);
    }
    else
    {
      isTextReplacement = 0;
    }
  }
  else
  {
    isTextReplacement = 0;
  }

  return isTextReplacement;
}

void sub_1C4977E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4977FA0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v63 = a2;
  uint64_t v9 = (void *)a1[4];
  uint64_t v13 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v10, a5, a6, v11, v12);
  objc_msgSend_addObject_(v9, v14, (uint64_t)v13, v15, v16, v17);

  uint64_t v18 = (void *)a1[5];
  uint64_t v19 = NSNumber;
  uint64_t v25 = objc_msgSend_wordID(v63, v20, v21, v22, v23, v24);
  uint64_t v30 = objc_msgSend_numberWithUnsignedInt_(v19, v26, v25, v27, v28, v29);
  objc_msgSend_addObject_(v18, v31, (uint64_t)v30, v32, v33, v34);

  uint64_t v35 = (void *)a1[6];
  uint64_t v36 = NSNumber;
  unint64_t v42 = objc_msgSend_properties(v63, v37, v38, v39, v40, v41);
  uint64_t v47 = objc_msgSend_numberWithBool_(v36, v43, (v42 >> 3) & 1, v44, v45, v46);
  objc_msgSend_addObject_(v35, v48, (uint64_t)v47, v49, v50, v51);

  char v57 = objc_msgSend_string(v63, v52, v53, v54, v55, v56);
  *(void *)(*(void *)(a1[7] + 8) + 24) += objc_msgSend_length(v57, v58, v59, v60, v61, v62);
}

void sub_1C49780BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49780F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4978454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C497851C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_punctuationCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  id v60 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = objc_msgSend_mutableCopy(v60, v6, v7, v8, v9, v10);
  uint64_t v12 = (void *)qword_1EA3C9050;
  qword_1EA3C9050 = v11;

  uint64_t v13 = (void *)qword_1EA3C9050;
  objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E4F28B88], v14, v15, v16, v17, v18);
  id v61 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v13, v19, (uint64_t)v61, v20, v21, v22);

  uint64_t v23 = (void *)qword_1EA3C9050;
  objc_msgSend_symbolCharacterSet(MEMORY[0x1E4F28B88], v24, v25, v26, v27, v28);
  id v62 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v23, v29, (uint64_t)v62, v30, v31, v32);

  uint64_t v38 = objc_msgSend_letterCharacterSet(MEMORY[0x1E4F28B88], v33, v34, v35, v36, v37);
  id v63 = (id)objc_msgSend_mutableCopy(v38, v39, v40, v41, v42, v43);

  uint64_t v48 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v44, @"'.-/", v45, v46, v47);
  objc_msgSend_formUnionWithCharacterSet_(v63, v49, (uint64_t)v48, v50, v51, v52);

  uint64_t v58 = objc_msgSend_invertedSet(v63, v53, v54, v55, v56, v57);
  uint64_t v59 = (void *)qword_1EA3C9058;
  qword_1EA3C9058 = v58;
}

void sub_1C497863C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1C4978658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1C4978674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4978688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C497869C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49786B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1C49786C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v100 = v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = *(const void **)(a1 + 104);
  size_t v10 = 4 * *(void *)(a1 + 96);
  uint64_t v99 = (char *)&v97 - v11;
  memcpy((char *)&v97 - v11, v9, v10);
  uint64_t v16 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v12, 0, v13, v14, v15);
  uint64_t v22 = objc_msgSend_rangeValue(v16, v17, v18, v19, v20, v21);
  uint64_t v101 = v23;
  uint64_t v24 = v22;

  unint64_t result = objc_msgSend_count(*(void **)(a1 + 32), v25, v26, v27, v28, v29);
  if (result)
  {
    unint64_t v35 = 0;
    unint64_t v36 = 0;
    uint64_t v98 = &v99[4 * v100];
    do
    {
      uint64_t v37 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v31, v36, v32, v33, v34);
      uint64_t v43 = objc_msgSend_rangeValue(v37, v38, v39, v40, v41, v42);
      uint64_t v45 = v44;

      BOOL v47 = objc_msgSend_rangeOfCharacterFromSet_options_range_(*(void **)(a1 + 48), v46, qword_1EA3C9058, 2, v43, v45) == 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v53 = objc_msgSend_rangeOfCharacterFromSet_options_range_(*(void **)(a1 + 48), v48, qword_1EA3C9050, 2, v43, v45);
      if (v47)
      {
        int v54 = 0;
      }
      else
      {
        uint64_t v55 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 56), v49, v35, v50, v51, v52);
        int v54 = objc_msgSend_BOOLValue(v55, v56, v57, v58, v59, v60);
      }
      int v61 = 0;
      if (v45 == 1 && v53 != 0x7FFFFFFFFFFFFFFFLL)
      {
        id v62 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 56), v49, v35, v50, v51, v52);
        int v61 = objc_msgSend_BOOLValue(v62, v63, v64, v65, v66, v67);
      }
      if (v43 != v24
        || v45 != v101
        || (objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 64), v49, v35, v50, v51, v52),
            uint64_t v68 = objc_claimAutoreleasedReturnValue(),
            int v74 = objc_msgSend_unsignedIntegerValue(v68, v69, v70, v71, v72, v73),
            v68,
            !v74))
      {
        uint64_t v75 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 72), v49, v36, v50, v51, v52);
        int v81 = objc_msgSend_unsignedIntegerValue(v75, v76, v77, v78, v79, v80);

        int v74 = v81;
      }
      LMLanguageModelConditionalProbability();
      *(_DWORD *)&v98[4 * v36] = v74;
      if (v87 > 0.0) {
        double v87 = -5.0;
      }
      if (v54 | v61) {
        double v88 = v87;
      }
      else {
        double v88 = -15.654;
      }
      if (!v74) {
        double v87 = v88;
      }
      *(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = *(double *)(*(void *)(*(void *)(a1 + 88) + 8)
                                                                              + 24)
                                                                  + v87;
      if (v43 + v45 == v101 + v24 && v35 < objc_msgSend_count(*(void **)(a1 + 40), v82, v83, v84, v85, v86) - 1)
      {
        uint64_t v89 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v82, ++v35, v84, v85, v86);
        uint64_t v95 = objc_msgSend_rangeValue(v89, v90, v91, v92, v93, v94);
        uint64_t v101 = v96;
        uint64_t v24 = v95;
      }
      unint64_t result = objc_msgSend_count(*(void **)(a1 + 32), v82, v83, v84, v85, v86);
      ++v36;
    }
    while (v36 < result);
  }
  return result;
}

void sub_1C49789C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49789D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4978BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4978C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4978C70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"-/._@", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9D28;
  qword_1EA3C9D28 = v6;
}

void sub_1C4978CB8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = objc_msgSend_maximumLengthOfBytesUsingEncoding_(*(void **)(a1 + 32), a2, 4, a4, a5, a6);
  uint64_t v13 = objc_msgSend_length(*(void **)(a1 + 32), v8, v9, v10, v11, v12);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  v37[0] = 0;
  objc_msgSend_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(*(void **)(a1 + 32), v16, (uint64_t)v23.i64 - v15, v7, (uint64_t)v37, 4, 0, 0, v14, 0);
  v36[0] = 0;
  v36[1] = v36;
  v36[2] = 0x2020000000;
  v36[3] = 0;
  v35[0] = 0;
  v35[1] = v35;
  v35[2] = 0x2020000000;
  v35[3] = 0;
  objc_msgSend_locale(*(void **)(*(void *)(a1 + 40) + 464), v17, v18, v19, v20, v21);

  LMStreamTokenizerCreate();
  uint64_t v24 = MEMORY[0x1E4F143A8];
  uint64_t v25 = 3221225472;
  uint64_t v26 = sub_1C4978F68;
  uint64_t v27 = &unk_1E64E13E0;
  id v28 = *(id *)(a1 + 48);
  uint64_t v33 = v35;
  id v29 = *(id *)(a1 + 56);
  uint64_t v34 = v36;
  int8x16_t v23 = *(int8x16_t *)(a1 + 32);
  id v22 = (id)v23.i64[0];
  int8x16_t v30 = vextq_s8(v23, v23, 8uLL);
  id v31 = *(id *)(a1 + 64);
  id v32 = *(id *)(a1 + 72);
  LMStreamTokenizerPushBytes();
  LMStreamTokenizerRelease();

  _Block_object_dispose(v35, 8);
  _Block_object_dispose(v36, 8);
}

void sub_1C4978EDC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C4978F68(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v307 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), a2, *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), a4, a5, a6);
  uint64_t v16 = objc_msgSend_rangeValue(v10, v11, v12, v13, v14, v15);
  uint64_t v297 = v17;
  uint64_t v298 = v16;

  id v18 = [NSString alloc];
  uint64_t v21 = objc_msgSend_initWithBytes_length_encoding_(v18, v19, (uint64_t)a2, a3, 4, v20);
  uint64_t v27 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v22, v23, v24, v25, v26);
  id v32 = objc_msgSend_stringByTrimmingCharactersInSet_(v21, v28, (uint64_t)v27, v29, v30, v31);

  uint64_t v299 = v32;
  if (objc_msgSend_length(v32, v33, v34, v35, v36, v37))
  {
    uint64_t v42 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v38, *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), v39, v40, v41);
    uint64_t v48 = objc_msgSend_BOOLValue(v42, v43, v44, v45, v46, v47);

    uint64_t v305 = 0;
    uint64_t v49 = objc_opt_class();
    unsigned int v55 = objc_msgSend_normalizeLMTokenIDForWord_tokenID_isFromPattern_score_wordLanguageModel_(v49, v50, (uint64_t)v32, a4, v48, (uint64_t)&v305, *(void *)(*(void *)(a1 + 48) + 488));
    if (v48
      && (objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v51, *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), v52, v53, v54), uint64_t v56 = objc_claimAutoreleasedReturnValue(), v62 = objc_msgSend_rangeValue(v56, v57, v58, v59, v60, v61), v56, v64 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24), v64 > v62))
    {
      uint64_t v65 = *(void **)(a1 + 56);
      uint64_t v66 = objc_msgSend_length(v65, v51, v63, v52, v53, v54);
      uint64_t v68 = objc_msgSend_rangeOfString_options_range_(v65, v67, (uint64_t)v32, 0, v64, v66 - *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24));
      *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = &v69[v68];
      if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) >= (unint64_t)(v298 + v297))
      {
        do
        {
          unint64_t v74 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
          if (v74 >= objc_msgSend_count(*(void **)(a1 + 32), v69, v70, v71, v72, v73) - 1) {
            break;
          }
          uint64_t v79 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v75, ++*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), v76, v77, v78);
          uint64_t v85 = objc_msgSend_rangeValue(v79, v80, v81, v82, v83, v84);
          uint64_t v87 = v86;
        }
        while (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) >= (unint64_t)(v85 + v87));
      }
    }
    else
    {
      if (v55)
      {
        double v88 = *(void **)(a1 + 64);
        uint64_t v89 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v51, v55, v52, v53, v54);
        objc_msgSend_addObject_(v88, v90, (uint64_t)v89, v91, v92, v93);

        uint64_t v94 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
        uint64_t v95 = *(void **)(a1 + 56);
        uint64_t v101 = objc_msgSend_length(v95, v96, v97, v98, v99, v100);
        uint64_t v103 = objc_msgSend_rangeOfString_options_range_(v95, v102, (uint64_t)v32, 0, v94, v101 - *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24));
        uint64_t v107 = v103;
        unint64_t v108 = v104;
        if (v48) {
          uint64_t v109 = v298;
        }
        else {
          uint64_t v109 = v103;
        }
        if (v48) {
          uint64_t v110 = v297;
        }
        else {
          uint64_t v110 = (uint64_t)v104;
        }
        uint64_t v111 = *(void **)(a1 + 72);
        uint64_t v112 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v104, v109, v110, v105, v106);
        objc_msgSend_addObject_(v111, v113, (uint64_t)v112, v114, v115, v116);

        *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = &v108[v107];
      }
      else
      {
        uint64_t v296 = objc_msgSend_componentsSeparatedByCharactersInSet_(v32, v51, qword_1EA3C9D28, v52, v53, v54);
        if ((unint64_t)objc_msgSend_count(v296, v122, v123, v124, v125, v126) < 2)
        {
          double v255 = *(void **)(a1 + 64);
          BOOL v256 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v127, 0, v128, v129, v130);
          objc_msgSend_addObject_(v255, v257, (uint64_t)v256, v258, v259, v260);

          uint64_t v261 = *(void **)(a1 + 56);
          uint64_t v262 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
          uint64_t v268 = objc_msgSend_length(v261, v263, v264, v265, v266, v267);
          uint64_t v270 = objc_msgSend_rangeOfString_options_range_(v261, v269, (uint64_t)v32, 0, v262, v268 - *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24));
          uint64_t v272 = v271;
          uint64_t v273 = *(void **)(a1 + 72);
          uint64_t v276 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v271, v270, (uint64_t)v271, v274, v275);
          objc_msgSend_addObject_(v273, v277, (uint64_t)v276, v278, v279, v280);

          *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = &v272[v270];
        }
        else
        {
          uint64_t v131 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v32, v127, 0, v128, v129, v130);
          uint64_t v295 = objc_msgSend_substringWithRange_(v32, v132, v131, (uint64_t)v132, v133, v134);
          long long v139 = objc_msgSend_stringByTrimmingCharactersInSet_(v295, v135, qword_1EA3C9D28, v136, v137, v138);
          BOOL v145 = objc_msgSend_length(v139, v140, v141, v142, v143, v144) == 0;

          if (v145)
          {
            uint64_t v150 = *(void **)(a1 + 64);
            double v151 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v146, 24, v147, v148, v149);
            objc_msgSend_addObject_(v150, v152, (uint64_t)v151, v153, v154, v155);

            CFNumberRef v156 = *(void **)(a1 + 72);
            CFNumberRef v160 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v157, *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24), 1, v158, v159);
            objc_msgSend_addObject_(v156, v161, (uint64_t)v160, v162, v163, v164);

            ++*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
          }
          long long v303 = 0u;
          long long v304 = 0u;
          long long v301 = 0u;
          long long v302 = 0u;
          id v165 = v296;
          uint64_t v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v165, v166, (uint64_t)&v301, (uint64_t)v306, 16, v167);
          if (v173)
          {
            uint64_t v174 = *(void *)v302;
            do
            {
              for (uint64_t i = 0; i != v173; ++i)
              {
                if (*(void *)v302 != v174) {
                  objc_enumerationMutation(v165);
                }
                uint64_t v176 = *(void **)(*((void *)&v301 + 1) + 8 * i);
                if (objc_msgSend_length(v176, v168, v169, v170, v171, v172))
                {
                  uint64_t v300 = 0;
                  uint64_t v177 = objc_opt_class();
                  unsigned int v179 = objc_msgSend_normalizeLMTokenIDForWord_tokenID_isFromPattern_score_wordLanguageModel_(v177, v178, (uint64_t)v176, 0, 0, (uint64_t)&v300, *(void *)(*(void *)(a1 + 48) + 488));
                  unint64_t v180 = *(void **)(a1 + 64);
                  CFNumberRef v185 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v181, v179, v182, v183, v184);
                  objc_msgSend_addObject_(v180, v186, (uint64_t)v185, v187, v188, v189);

                  int64_t v190 = *(void **)(a1 + 56);
                  uint64_t v191 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
                  uint64_t v197 = objc_msgSend_length(v190, v192, v193, v194, v195, v196);
                  uint64_t v199 = objc_msgSend_rangeOfString_options_range_(v190, v198, (uint64_t)v176, 0, v191, v197 - *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24));
                  uint64_t v201 = v200;
                  uint64_t v202 = *(void **)(a1 + 72);
                  uint64_t v205 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v200, v199, (uint64_t)v200, v203, v204);
                  objc_msgSend_addObject_(v202, v206, (uint64_t)v205, v207, v208, v209);

                  *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = &v201[v199];
                }
              }
              uint64_t v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v165, v168, (uint64_t)&v301, (uint64_t)v306, 16, v172);
            }
            while (v173);
          }

          uint64_t v215 = objc_msgSend_length(v299, v210, v211, v212, v213, v214);
          uint64_t v220 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v299, v216, v215 - 1, v217, v218, v219);
          uint64_t v224 = objc_msgSend_substringWithRange_(v299, v221, v220, (uint64_t)v221, v222, v223);
          uint64_t v229 = objc_msgSend_stringByTrimmingCharactersInSet_(v224, v225, qword_1EA3C9D28, v226, v227, v228);
          BOOL v235 = objc_msgSend_length(v229, v230, v231, v232, v233, v234) == 0;

          if (v235)
          {
            uint64_t v240 = *(void **)(a1 + 64);
            uint64_t v241 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v236, 24, v237, v238, v239);
            objc_msgSend_addObject_(v240, v242, (uint64_t)v241, v243, v244, v245);

            uint64_t v246 = *(void **)(a1 + 72);
            uint64_t v250 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v247, *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24), 1, v248, v249);
            objc_msgSend_addObject_(v246, v251, (uint64_t)v250, v252, v253, v254);

            ++*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
          }
        }
      }
      if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) >= (unint64_t)(v298 + v297))
      {
        do
        {
          unint64_t v281 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
          if (v281 >= objc_msgSend_count(*(void **)(a1 + 32), v117, v118, v119, v120, v121) - 1) {
            break;
          }
          uint64_t v286 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v282, ++*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), v283, v284, v285);
          uint64_t v292 = objc_msgSend_rangeValue(v286, v287, v288, v289, v290, v291);
          uint64_t v294 = v293;
        }
        while (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) >= (unint64_t)(v292 + v294));
      }
    }
  }
}

void sub_1C4979740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C49798EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, int a13)
{
  v71[70] = *(void **)MEMORY[0x1E4F143B8];
  id v66 = a6;
  a7;
  a12;
  int shouldPerformGlobalBestSearch = objc_msgSend_shouldPerformGlobalBestSearch(*(void **)(a1 + 464), v17, v18, v19, v20, v21);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3) - 1 <= 9) {
    int shouldPerformGlobalBestSearch = objc_msgSend_shouldPerformGlobalBestSearchWithSmallLattice(*(void **)(a1 + 464), v22, v23, v24, v25, v26);
  }
  if (objc_msgSend_shouldPerformIntegratedLexiconExpansion(*(void **)(a1 + 464), v22, v23, v24, v25, v26))
  {
    int shouldPenalizeLetterInsertion = objc_msgSend_shouldPenalizeLetterInsertion(*(void **)(a1 + 464), v28, v29, v30, v31, v32);
    shouldApplyLexicalPenaltCGFloat y = objc_msgSend_shouldApplyLexicalPenalty(*(void **)(a1 + 464), v34, v35, v36, v37, v38);
    if (shouldPenalizeLetterInsertion) {
      uint64_t v40 = &unk_1F20131B0;
    }
    else {
      uint64_t v40 = &unk_1F20131F0;
    }
    if (shouldApplyLexicalPenalty) {
      uint64_t v41 = &unk_1F2013210;
    }
    else {
      uint64_t v41 = &unk_1F2013250;
    }
  }
  else
  {
    uint64_t v41 = &unk_1F2013290;
    uint64_t v40 = &unk_1F2013270;
  }
  if ((objc_msgSend_shouldPerformIntegratedLexiconExpansion(*(void **)(a1 + 464), v28, v29, v30, v31, v32) ^ 1 | shouldPerformGlobalBestSearch))
  {
    if (a3 >= 5)
    {
LABEL_16:
      char v67 = shouldPerformGlobalBestSearch;
      v71[0] = 0;
      v71[1] = 0;
      uint64_t v70 = v71;
      sub_1C499A568(&v70, *(void **)(a2 + 56), (void *)(a2 + 64));
      uint64_t v68 = v70[4];
      sub_1C4999C7C((uint64_t)&v70, v71[0]);
      uint64_t v47 = *(void **)(a1 + 296);
      uint64_t v48 = *(void *)(a1 + 320);
      objc_msgSend_shouldComputeStrokePenalties(*(void **)(a1 + 464), v49, v50, v51, v52, v53);
      objc_msgSend_shouldExpandCodePoints(*(void **)(a1 + 464), v54, v55, v56, v57, v58);
      objc_msgSend_shouldPenalizePrefixes(*(void **)(a1 + 464), v59, v60, v61, v62, v63);
      LOBYTE(v65) = v67;
      LODWORD(v64) = a13;
      Network::kBestPaths(a2, v68, &__p, v47, v66, v64, v48, v65, v40, v41);
    }
  }
  else if (a3 > 0x13)
  {
    goto LABEL_16;
  }
  objc_msgSend_shouldPerformIntegratedLexiconExpansion(*(void **)(a1 + 464), v42, v43, v44, v45, v46);
  goto LABEL_16;
}

void sub_1C497A6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  sub_1C497C5E4(&a37);
  _Unwind_Resume(a1);
}

double sub_1C497A9C0(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 32) * (double)*(unint64_t *)(a2 + 64) + 0.2;
}

double sub_1C497A9DC(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 32) * (double)*(unint64_t *)(a2 + 64);
}

double sub_1C497A9F0(uint64_t a1, double *a2)
{
  double v2 = a2[17];
  if (v2 <= 15.654)
  {
    double v3 = a2[15];
    if (v3 <= 15.654) {
      goto LABEL_3;
    }
LABEL_7:
    a2[15] = 15.654;
    double v3 = 15.654;
    double v4 = a2[21];
    if (v4 <= 15.654) {
      return v2
    }
           + a2[16]
           + (v3 + a2[14] + 0.0) * 0.15
           + (v4 + a2[20]) * 0.2
           + (a2[18] + a2[19]) * 2.0
           + (a2[22] + a2[23]) * 0.2
           + a2[24] * 8.0;
    goto LABEL_4;
  }
  a2[17] = 15.654;
  double v2 = 15.654;
  double v3 = a2[15];
  if (v3 > 15.654) {
    goto LABEL_7;
  }
LABEL_3:
  double v4 = a2[21];
  if (v4 > 15.654)
  {
LABEL_4:
    a2[21] = 15.654;
    double v4 = 15.654;
  }
  return v2
       + a2[16]
       + (v3 + a2[14] + 0.0) * 0.15
       + (v4 + a2[20]) * 0.2
       + (a2[18] + a2[19]) * 2.0
       + (a2[22] + a2[23]) * 0.2
       + a2[24] * 8.0;
}

double sub_1C497AAE8(uint64_t a1, double *a2)
{
  double v2 = a2[17];
  if (v2 > 15.654)
  {
    a2[17] = 15.654;
    double v2 = 15.654;
  }
  double v3 = a2[21];
  if (v3 > 15.654)
  {
    a2[21] = 15.654;
    double v3 = 15.654;
  }
  return v2 + a2[16] + (v3 + a2[20]) * 0.2 + (a2[18] + a2[19]) * 2.0 + (a2[22] + a2[23]) * 0.2 + a2[24] * 8.0;
}

double sub_1C497AB80(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 32);
}

double sub_1C497AB88(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 128) + *(double *)(a2 + 136);
}

id sub_1C497AB94(void **a1, uint64_t *a2, unint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  v539 = a5;
  unint64_t v532 = a3;
  v543 = a1;
  v585[16] = *MEMORY[0x1E4F143B8];
  id v527 = a7;
  v530 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v10, v11, v12, v13, v14);
  v541 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v15, v16, v17, v18, v19);
  uint64_t v25 = a2[1];
  uint64_t v559 = *a2;
  uint64_t v531 = v25;
  if (v559 == v25)
  {
LABEL_203:
    id v535 = 0;
    goto LABEL_204;
  }
  uint64_t v538 = a6;
  id v535 = 0;
  uint64_t v26 = 0;
  v562 = &v584.__r_.__value_.__s.__data_[1];
  uint64_t v553 = a4;
  do
  {
    unint64_t v27 = objc_msgSend_count(v541, v20, v21, v22, v23, v24);
    if (v27 >= v532)
    {
      if (v535) {
        break;
      }
      if ((objc_msgSend_shouldPromoteCJKCommonCharacters(v543[58], v20, v21, v22, v23, v24) & 1) == 0) {
        goto LABEL_203;
      }
    }
    v555 = objc_msgSend_string(MEMORY[0x1E4F28E78], v20, v21, v22, v23, v24);
    v582 = 0;
    v581 = 0;
    v583 = 0;
    uint64_t v34 = *(unsigned char **)(v559 + 56);
    uint64_t v33 = *(unsigned char **)(v559 + 64);
    int64_t v35 = v33 - v34;
    uint64_t v534 = v26;
    if (v33 == v34)
    {
      v536 = 0;
      uint64_t v37 = 0;
    }
    else
    {
      if (v35 < 0) {
        sub_1C494A220();
      }
      uint64_t v36 = (char *)operator new(v33 - v34);
      uint64_t v37 = &v36[8 * (v35 >> 3)];
      v581 = v36;
      v583 = v37;
      v536 = v36;
      memcpy(v36, v34, v35);
      v582 = v37;
    }
    v579 = 0;
    v578 = 0;
    v580 = 0;
    uint64_t v39 = *(unsigned char **)(v559 + 80);
    uint64_t v38 = *(unsigned char **)(v559 + 88);
    int64_t v40 = v38 - v39;
    if (v38 == v39)
    {
      v533 = 0;
    }
    else
    {
      if (v40 < 0) {
        sub_1C494A220();
      }
      uint64_t v41 = (char *)operator new(v38 - v39);
      uint64_t v42 = &v41[8 * (v40 >> 3)];
      v578 = v41;
      v580 = v42;
      v533 = v41;
      memcpy(v41, v39, v40);
      v579 = v42;
    }
    v550 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v28, v29, v30, v31, v32);
    v547 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v43, v44, v45, v46, v47);
    v545 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v48, v49, v50, v51, v52);
    v544 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v53, v54, v55, v56, v57);
    v546 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v58, v59, v60, v61, v62);
    v548 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v63, v64, v65, v66, v67);
    v549 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v68, v69, v70, v71, v72);
    v537 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v73, v74, v75, v76, v77);
    memset(&v577, 0, sizeof(v577));
    memset(&v576, 0, sizeof(v576));
    uint64_t v78 = v37 - v536;
    if ((unint64_t)(v37 - v536) < 9)
    {
LABEL_159:
      uint64_t v26 = v534;
      if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_201;
      }
      goto LABEL_160;
    }
    uint64_t v79 = 0;
    int v80 = 0;
    unint64_t v81 = v78 >> 3;
    if (v81 <= 2) {
      unint64_t v81 = 2;
    }
    unint64_t v542 = v81;
    unint64_t v82 = v81 - 1;
    do
    {
      unint64_t v83 = *(void *)(*(void *)(a4 + 80)
                      + 72
                      * (*(void *)(*(void *)(a4 + 32) + 40 * *(void *)(*(void *)(v559 + 56) + 8 * v79) + 16)
                       + *(void *)(*(void *)(v559 + 80) + 8 * v79 + 8))
                      + 24);
      if (*(unsigned char *)(a4 + 184))
      {
        if (v83)
        {
          ul2sh(v83, (uint64_t)&v584);
          goto LABEL_26;
        }
        uint64_t v84 = *(void *)(a4 + 136);
        if ((*(char *)(v84 + 23) & 0x80000000) == 0)
        {
LABEL_23:
          long long v85 = *(_OWORD *)v84;
          v584.__r_.__value_.__r.__words[2] = *(void *)(v84 + 16);
          *(_OWORD *)&v584.__r_.__value_.__l.__data_ = v85;
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v84 = *(void *)(a4 + 136) + 24 * v83;
        if ((*(char *)(v84 + 23) & 0x80000000) == 0) {
          goto LABEL_23;
        }
      }
      sub_1C4949ADC(&v584, *(void **)v84, *(void *)(v84 + 8));
LABEL_26:
      sub_1C4B2F514((uint64_t *)&v584, (int **)&v574);
      uint64_t v87 = *((void *)&v574 + 1);
      uint64_t v88 = v574;
      if ((void)v574)
      {
        *((void *)&v574 + 1) = v574;
        operator delete((void *)v574);
      }
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      v80 += (unint64_t)(v87 - v88) >> 2;
      ++v79;
    }
    while (v82 != v79);
    if (!v80) {
      goto LABEL_159;
    }
    v529 = &v526;
    uint64_t v528 = (2 * v80);
    MEMORY[0x1F4188790](v86);
    uint64_t v561 = (uint64_t)&v526 - v92;
    uint64_t v93 = 0;
    uint64_t v558 = 0;
    uint64_t v554 = 0;
    uint64_t v94 = 1;
    while (2)
    {
      uint64_t v95 = v94 - 1;
      uint64_t v96 = *(void *)(*(void *)(v559 + 56) + 8 * (v94 - 1));
      uint64_t v97 = *(void *)(v559 + 80);
      uint64_t v552 = v94;
      uint64_t v98 = *(void *)(*(void *)(a4 + 32) + 40 * v96 + 16) + *(void *)(v97 + 8 * v94);
      uint64_t v99 = *(void *)(a4 + 80);
      uint64_t v100 = (int)v554;
      uint64_t v557 = v98;
      v560.i64[0] = v99;
      uint64_t v101 = v99 + 72 * v98;
      uint64_t v102 = objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E4F28D60], v89, (int)v554, *(void *)(v101 + 48), v90, v91);
      uint64_t v551 = v95;
      v556 = (void *)v102;
      objc_msgSend_addObject_(v549, v103, v102, v104, v105, v106);
      size_t size = 0;
      BOOL v108 = 0;
      unint64_t v109 = *(void *)(v101 + 48);
      v540 = *(void **)(v560.i64[0] + 72 * v557 + 56);
      uint64_t v554 = v109 + v100;
      *((unsigned char *)&v573.__r_.__value_.__s + 23) = 0;
      v573.__r_.__value_.__s.__data_[0] = 0;
      std::string::size_type v110 = 1;
      while (2)
      {
        unsigned __int8 v111 = (v109 % 0xA) | 0x30;
        if (v110 >= 0x17)
        {
          uint64_t v113 = (v110 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v110 | 7) != 0x17) {
            uint64_t v113 = v110 | 7;
          }
          uint64_t v114 = v113 + 1;
          uint64_t v115 = operator new(v113 + 1);
          v584.__r_.__value_.__r.__words[2] = v114 | 0x8000000000000000;
          v584.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
          v584.__r_.__value_.__l.__size_ = v110;
          unsigned char *v115 = v111;
          uint64_t v112 = v115 + 1;
        }
        else
        {
          v584.__r_.__value_.__r.__words[2] = 0;
          *((unsigned char *)&v584.__r_.__value_.__s + 23) = v110;
          uint64_t v112 = v562;
          *(_OWORD *)&v584.__r_.__value_.__l.__data_ = v111;
          if (!size)
          {
            std::string::value_type *v562 = 0;
            if (v108) {
              goto LABEL_36;
            }
            goto LABEL_37;
          }
        }
        if (v108) {
          uint64_t v116 = (std::string *)v573.__r_.__value_.__r.__words[0];
        }
        else {
          uint64_t v116 = &v573;
        }
        memmove(v112, v116, size);
        v112[size] = 0;
        if (v108) {
LABEL_36:
        }
          operator delete(v573.__r_.__value_.__l.__data_);
LABEL_37:
        std::string v573 = v584;
        if (v109 >= 0xA)
        {
          BOOL v108 = (v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
          if ((v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v573.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v573.__r_.__value_.__l.__size_;
          }
          std::string::size_type v110 = size + 1;
          v109 /= 0xAuLL;
          if (size + 1 > 0x7FFFFFFFFFFFFFF7) {
            sub_1C4949B7C();
          }
          continue;
        }
        break;
      }
      id v117 = std::string::append(&v573, " ");
      long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
      int64_t v575 = v117->__r_.__value_.__r.__words[2];
      long long v574 = v118;
      v117->__r_.__value_.__l.__size_ = 0;
      v117->__r_.__value_.__r.__words[2] = 0;
      v117->__r_.__value_.__r.__words[0] = 0;
      if (v575 >= 0) {
        uint64_t v119 = (const std::string::value_type *)&v574;
      }
      else {
        uint64_t v119 = (const std::string::value_type *)v574;
      }
      if (v575 >= 0) {
        std::string::size_type v120 = HIBYTE(v575);
      }
      else {
        std::string::size_type v120 = *((void *)&v574 + 1);
      }
      std::string::append(&v576, v119, v120);
      uint64_t v121 = v538;
      uint64_t v122 = v553;
      uint64_t v123 = v557;
      if (SHIBYTE(v575) < 0)
      {
        operator delete((void *)v574);
        if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_63;
        }
      }
      else
      {
        if ((SHIBYTE(v573.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_59;
        }
LABEL_63:
        operator delete(v573.__r_.__value_.__l.__data_);
      }
LABEL_59:
      uint64_t v124 = *(unsigned int *)(*v539 + 4 * v123);
      unint64_t v125 = *(void *)(v560.i64[0] + 72 * v123 + 24);
      if (!*(unsigned char *)(v122 + 184))
      {
        uint64_t v126 = *(void *)(v122 + 136) + 24 * v125;
        if (*(char *)(v126 + 23) < 0) {
          goto LABEL_67;
        }
LABEL_65:
        long long v127 = *(_OWORD *)v126;
        int64_t v575 = *(void *)(v126 + 16);
        long long v574 = v127;
        goto LABEL_68;
      }
      if (v125)
      {
        ul2sh(v125, (uint64_t)&v574);
        goto LABEL_68;
      }
      uint64_t v126 = *(void *)(v122 + 136);
      if ((*(char *)(v126 + 23) & 0x80000000) == 0) {
        goto LABEL_65;
      }
LABEL_67:
      sub_1C4949ADC(&v574, *(void **)v126, *(void *)(v126 + 8));
LABEL_68:
      sub_1C4B2F514((uint64_t *)&v574, (int **)&v573);
      uint64_t v131 = (int *)v573.__r_.__value_.__r.__words[0];
      if (v573.__r_.__value_.__l.__size_ == v573.__r_.__value_.__r.__words[0])
      {
        unsigned int v132 = 0;
      }
      else
      {
        unsigned int v132 = 0;
        uint64_t v133 = *(void *)(v560.i64[0] + 72 * v123 + 8);
        unint64_t v134 = (uint64_t)(v573.__r_.__value_.__l.__size_ - v573.__r_.__value_.__r.__words[0]) >> 2;
        if (v134 <= 1) {
          unint64_t v134 = 1;
        }
        do
        {
          while (1)
          {
            int v137 = *v131++;
            int v136 = v137;
            if (v133 == v121)
            {
              if ((v136 - 33) < 0xF
                || ((v136 - 91) <= 0x23
                  ? (BOOL v138 = ((1 << (v136 - 91)) & 0xF0000003FLL) == 0)
                  : (BOOL v138 = 1),
                    !v138 || (v136 - 58) < 6))
              {
                if (v136 == 46) {
                  int v136 = 12290;
                }
                else {
                  v136 += 65248;
                }
              }
            }
            uint64_t v139 = (int)v93;
            if (!((v136 - 0x10000) >> 20)) {
              break;
            }
            uint64_t v135 = v561;
            *(_WORD *)(v561 + 2 * (int)v93) = v136;
            uint64_t v93 = (int)v93 + 1;
            *(_WORD *)(v135 + 2 * (v139 + 1)) = v136;
            ++v132;
            if (!--v134) {
              goto LABEL_88;
            }
          }
          uint64_t v140 = v561;
          unsigned int v141 = ((v136 + 67043328) >> 10) - 10240;
          *(_WORD *)(v561 + 2 * (int)v93) = ((v136 + 67043328) >> 10) - 10240;
          __int16 v142 = v136 & 0x3FF | 0xDC00;
          *(_WORD *)(v140 + 2 * (int)v93 + 2) = v142;
          uint64_t v93 = (int)v93 + 2;
          uint64_t v143 = (_WORD *)(v140 + 2 * (v139 + 2));
          _WORD *v143 = v141;
          v143[1] = v142;
          v132 += 2;
          --v134;
        }
        while (v134);
      }
LABEL_88:
      uint64_t v144 = v132;
      BOOL v145 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v128, v558, v132, v129, v130);
      objc_msgSend_addObject_(v550, v146, (uint64_t)v145, v147, v148, v149);

      uint64_t v154 = objc_msgSend_numberWithInt_(NSNumber, v150, v124, v151, v152, v153);
      objc_msgSend_addObject_(v547, v155, (uint64_t)v154, v156, v157, v158);

      objc_msgSend_addObject_(v545, v159, (uint64_t)&unk_1F203E058, v160, v161, v162);
      CFNumberRef v168 = objc_msgSend_numberWithDouble_(NSNumber, v163, v164, v165, v166, v167, *(double *)(v560.i64[0] + 72 * v123 + 32));
      objc_msgSend_addObject_(v544, v169, (uint64_t)v168, v170, v171, v172);

      uint64_t v177 = objc_msgSend_numberWithBool_(NSNumber, v173, v124 > 0x1F3, v174, v175, v176);
      objc_msgSend_addObject_(v546, v178, (uint64_t)v177, v179, v180, v181);

      CFNumberRef v186 = objc_msgSend_numberWithBool_(NSNumber, v182, v124 != 0, v183, v184, v185);
      objc_msgSend_addObject_(v548, v187, (uint64_t)v186, v188, v189, v190);

      uint64_t v194 = objc_msgSend_stringWithCharacters_length_(NSString, v191, v561 + 2 * ((int)v93 - (int)v144), v144, v192, v193);
      objc_msgSend_appendString_(v555, v195, (uint64_t)v194, v196, v197, v198);

      if (objc_msgSend_isInappropriateString_(v543[62], v199, (uint64_t)v555, v200, v201, v202)) {
        objc_msgSend_addIndex_(v537, v203, v551, v204, v205, v206);
      }
      unint64_t v207 = HIBYTE(v575);
      uint64_t v208 = (int8x16_t *)&v574;
      if (v575 < 0)
      {
        unint64_t v207 = *((void *)&v574 + 1);
        uint64_t v208 = (int8x16_t *)v574;
      }
      if (!v207)
      {
        uint64_t v209 = 0;
        goto LABEL_111;
      }
      if (v207 >= 8)
      {
        if (v207 >= 0x20)
        {
          int64x2_t v212 = 0uLL;
          unint64_t v211 = v207 & 0xFFFFFFFFFFFFFFE0;
          int64x2_t v213 = 0uLL;
          uint64_t v214 = v208 + 1;
          int64x2_t v215 = 0uLL;
          unint64_t v216 = v207 & 0xFFFFFFFFFFFFFFE0;
          int64x2_t v217 = 0uLL;
          int64x2_t v218 = 0uLL;
          int64x2_t v219 = 0uLL;
          int64x2_t v220 = 0uLL;
          int64x2_t v221 = 0uLL;
          int64x2_t v222 = 0uLL;
          int64x2_t v223 = 0uLL;
          int64x2_t v224 = 0uLL;
          int64x2_t v225 = 0uLL;
          int64x2_t v226 = 0uLL;
          int64x2_t v227 = 0uLL;
          int64x2_t v228 = 0uLL;
          int64x2_t v229 = 0uLL;
          do
          {
            int8x16_t v230 = *v214;
            v231.i64[0] = 0x5F5F5F5F5F5F5F5FLL;
            v231.i64[1] = 0x5F5F5F5F5F5F5F5FLL;
            uint8x16_t v232 = (uint8x16_t)vceqq_s8(v214[-1], v231);
            uint16x8_t v233 = vmovl_u8(*(uint8x8_t *)v232.i8);
            uint32x4_t v234 = vmovl_u16(*(uint16x4_t *)v233.i8);
            v235.i64[0] = v234.u32[0];
            v235.i64[1] = v234.u32[1];
            int8x16_t v236 = (int8x16_t)vdupq_n_s64(1uLL);
            int64x2_t v560 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v234.u32[2];
            v235.i64[1] = v234.u32[3];
            int64x2_t v237 = (int64x2_t)vandq_s8(v235, v236);
            uint32x4_t v238 = vmovl_high_u16(v233);
            v235.i64[0] = v238.u32[0];
            v235.i64[1] = v238.u32[1];
            int64x2_t v239 = (int64x2_t)vandq_s8(v235, v236);
            uint16x8_t v240 = vmovl_high_u8(v232);
            uint32x4_t v241 = vmovl_u16(*(uint16x4_t *)v240.i8);
            v235.i64[0] = v241.u32[0];
            v235.i64[1] = v241.u32[1];
            int64x2_t v242 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v238.u32[2];
            v235.i64[1] = v238.u32[3];
            int64x2_t v243 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v241.u32[2];
            v235.i64[1] = v241.u32[3];
            int64x2_t v244 = (int64x2_t)vandq_s8(v235, v236);
            uint32x4_t v245 = vmovl_high_u16(v240);
            v235.i64[0] = v245.u32[0];
            v235.i64[1] = v245.u32[1];
            int64x2_t v246 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v245.u32[2];
            v235.i64[1] = v245.u32[3];
            int64x2_t v247 = (int64x2_t)vandq_s8(v235, v236);
            uint8x16_t v248 = (uint8x16_t)vceqq_s8(v230, v231);
            uint16x8_t v249 = vmovl_u8(*(uint8x8_t *)v248.i8);
            uint32x4_t v250 = vmovl_u16(*(uint16x4_t *)v249.i8);
            v235.i64[0] = v250.u32[0];
            v235.i64[1] = v250.u32[1];
            int64x2_t v251 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v250.u32[2];
            v235.i64[1] = v250.u32[3];
            int64x2_t v252 = (int64x2_t)vandq_s8(v235, v236);
            uint32x4_t v253 = vmovl_high_u16(v249);
            v235.i64[0] = v253.u32[0];
            v235.i64[1] = v253.u32[1];
            int64x2_t v254 = (int64x2_t)vandq_s8(v235, v236);
            uint16x8_t v255 = vmovl_high_u8(v248);
            uint32x4_t v256 = vmovl_u16(*(uint16x4_t *)v255.i8);
            v235.i64[0] = v256.u32[0];
            v235.i64[1] = v256.u32[1];
            int64x2_t v257 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v253.u32[2];
            v235.i64[1] = v253.u32[3];
            int64x2_t v258 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v256.u32[2];
            v235.i64[1] = v256.u32[3];
            int64x2_t v259 = (int64x2_t)vandq_s8(v235, v236);
            uint32x4_t v260 = vmovl_high_u16(v255);
            v235.i64[0] = v260.u32[0];
            v235.i64[1] = v260.u32[1];
            int64x2_t v261 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v260.u32[2];
            v235.i64[1] = v260.u32[3];
            int64x2_t v221 = vaddq_s64(v221, v247);
            int64x2_t v220 = vaddq_s64(v220, v246);
            int64x2_t v219 = vaddq_s64(v219, v244);
            int64x2_t v217 = vaddq_s64(v217, v243);
            int64x2_t v218 = vaddq_s64(v218, v242);
            int64x2_t v215 = vaddq_s64(v215, v239);
            int64x2_t v213 = vaddq_s64(v213, v237);
            int64x2_t v212 = vaddq_s64(v212, v560);
            int64x2_t v229 = vaddq_s64(v229, (int64x2_t)vandq_s8(v235, v236));
            int64x2_t v228 = vaddq_s64(v228, v261);
            int64x2_t v227 = vaddq_s64(v227, v259);
            int64x2_t v225 = vaddq_s64(v225, v258);
            int64x2_t v226 = vaddq_s64(v226, v257);
            int64x2_t v224 = vaddq_s64(v224, v254);
            int64x2_t v223 = vaddq_s64(v223, v252);
            int64x2_t v222 = vaddq_s64(v222, v251);
            v214 += 2;
            v216 -= 32;
          }
          while (v216);
          uint64_t v209 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v222, v212), vaddq_s64(v226, v218)), vaddq_s64(vaddq_s64(v224, v215), vaddq_s64(v228, v220))), vaddq_s64(vaddq_s64(vaddq_s64(v223, v213), vaddq_s64(v227, v219)), vaddq_s64(vaddq_s64(v225, v217), vaddq_s64(v229, v221)))));
          if (v207 == v211) {
            goto LABEL_111;
          }
          if ((v207 & 0x18) == 0)
          {
            int v210 = &v208->u8[v211];
            goto LABEL_107;
          }
        }
        else
        {
          uint64_t v209 = 0;
          unint64_t v211 = 0;
        }
        int v210 = &v208->u8[v207 & 0xFFFFFFFFFFFFFFF8];
        int64x2_t v262 = 0uLL;
        int64x2_t v263 = (int64x2_t)(unint64_t)v209;
        uint64_t v264 = (int8x8_t *)&v208->i8[v211];
        unint64_t v265 = v211 - (v207 & 0xFFFFFFFFFFFFFFF8);
        int64x2_t v266 = 0uLL;
        int64x2_t v267 = 0uLL;
        do
        {
          int8x8_t v268 = *v264++;
          uint16x8_t v269 = vmovl_u8((uint8x8_t)vceq_s8(v268, (int8x8_t)0x5F5F5F5F5F5F5F5FLL));
          uint32x4_t v270 = vmovl_u16(*(uint16x4_t *)v269.i8);
          v271.i64[0] = v270.u32[0];
          v271.i64[1] = v270.u32[1];
          int8x16_t v272 = (int8x16_t)vdupq_n_s64(1uLL);
          int64x2_t v273 = (int64x2_t)vandq_s8(v271, v272);
          v271.i64[0] = v270.u32[2];
          v271.i64[1] = v270.u32[3];
          int64x2_t v274 = (int64x2_t)vandq_s8(v271, v272);
          uint32x4_t v275 = vmovl_high_u16(v269);
          v271.i64[0] = v275.u32[0];
          v271.i64[1] = v275.u32[1];
          int64x2_t v276 = (int64x2_t)vandq_s8(v271, v272);
          v271.i64[0] = v275.u32[2];
          v271.i64[1] = v275.u32[3];
          int64x2_t v267 = vaddq_s64(v267, (int64x2_t)vandq_s8(v271, v272));
          int64x2_t v266 = vaddq_s64(v266, v276);
          int64x2_t v262 = vaddq_s64(v262, v274);
          int64x2_t v263 = vaddq_s64(v263, v273);
          v265 += 8;
        }
        while (v265);
        uint64_t v209 = vaddvq_s64(vaddq_s64(vaddq_s64(v263, v266), vaddq_s64(v262, v267)));
        if (v207 != (v207 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_107;
        }
      }
      else
      {
        uint64_t v209 = 0;
        int v210 = (unsigned __int8 *)v208;
LABEL_107:
        uint64_t v277 = &v208->u8[v207];
        do
        {
          int v278 = *v210++;
          if (v278 == 95) {
            ++v209;
          }
        }
        while (v210 != v277);
      }
LABEL_111:
      i2s(v124, (uint64_t)&v568);
      uint64_t v279 = std::string::append(&v568, "/");
      std::string::size_type v280 = 0;
      v558 += v144;
      unint64_t v281 = v209 + 1;
      long long v282 = *(_OWORD *)&v279->__r_.__value_.__l.__data_;
      v569.__r_.__value_.__r.__words[2] = v279->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v569.__r_.__value_.__l.__data_ = v282;
      v279->__r_.__value_.__l.__size_ = 0;
      v279->__r_.__value_.__r.__words[2] = 0;
      v279->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v567.__r_.__value_.__s + 23) = 0;
      v567.__r_.__value_.__s.__data_[0] = 0;
      while (2)
      {
        int v284 = (char)v280;
        if ((v280 & 0x80u) == 0) {
          size_t v285 = v280;
        }
        else {
          size_t v285 = v567.__r_.__value_.__l.__size_;
        }
        unint64_t v286 = v285 + 1;
        if (v285 + 1 > 0x7FFFFFFFFFFFFFF7) {
          sub_1C4949B7C();
        }
        unsigned __int8 v287 = (v281 % 0xA) | 0x30;
        if (v286 >= 0x17)
        {
          uint64_t v289 = (v286 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v286 | 7) != 0x17) {
            uint64_t v289 = v286 | 7;
          }
          uint64_t v290 = v289 + 1;
          uint64_t v291 = operator new(v289 + 1);
          v584.__r_.__value_.__r.__words[2] = v290 | 0x8000000000000000;
          v584.__r_.__value_.__r.__words[0] = (std::string::size_type)v291;
          v584.__r_.__value_.__l.__size_ = v285 + 1;
          *uint64_t v291 = v287;
          uint64_t v288 = v291 + 1;
LABEL_125:
          if (v284 >= 0) {
            uint64_t v292 = &v567;
          }
          else {
            uint64_t v292 = (std::string *)v567.__r_.__value_.__r.__words[0];
          }
          memmove(v288, v292, v285);
          v288[v285] = 0;
          if (v284 < 0) {
            goto LABEL_129;
          }
          goto LABEL_113;
        }
        v584.__r_.__value_.__r.__words[2] = 0;
        *((unsigned char *)&v584.__r_.__value_.__s + 23) = v285 + 1;
        uint64_t v288 = v562;
        *(_OWORD *)&v584.__r_.__value_.__l.__data_ = v287;
        if (v285) {
          goto LABEL_125;
        }
        std::string::value_type *v562 = 0;
        if (((char)v280 & 0x80000000) == 0) {
          goto LABEL_113;
        }
LABEL_129:
        operator delete(v567.__r_.__value_.__l.__data_);
LABEL_113:
        std::string v567 = v584;
        std::string::size_type v280 = HIBYTE(v584.__r_.__value_.__r.__words[2]);
        BOOL v283 = v281 >= 0xA;
        v281 /= 0xAuLL;
        if (v283) {
          continue;
        }
        break;
      }
      if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v293 = &v567;
      }
      else {
        uint64_t v293 = (std::string *)v567.__r_.__value_.__r.__words[0];
      }
      if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v294 = HIBYTE(v584.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v294 = v567.__r_.__value_.__l.__size_;
      }
      uint64_t v295 = std::string::append(&v569, (const std::string::value_type *)v293, v294);
      long long v296 = *(_OWORD *)&v295->__r_.__value_.__l.__data_;
      v570.__r_.__value_.__r.__words[2] = v295->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v570.__r_.__value_.__l.__data_ = v296;
      v295->__r_.__value_.__l.__size_ = 0;
      v295->__r_.__value_.__r.__words[2] = 0;
      v295->__r_.__value_.__r.__words[0] = 0;
      uint64_t v297 = v556;
      uint64_t v298 = std::string::append(&v570, ",");
      long long v299 = *(_OWORD *)&v298->__r_.__value_.__l.__data_;
      int64_t v572 = v298->__r_.__value_.__r.__words[2];
      long long v571 = v299;
      v298->__r_.__value_.__l.__size_ = 0;
      v298->__r_.__value_.__r.__words[2] = 0;
      v298->__r_.__value_.__r.__words[0] = 0;
      if (v572 >= 0) {
        uint64_t v300 = (const std::string::value_type *)&v571;
      }
      else {
        uint64_t v300 = (const std::string::value_type *)v571;
      }
      if (v572 >= 0) {
        std::string::size_type v301 = HIBYTE(v572);
      }
      else {
        std::string::size_type v301 = *((void *)&v571 + 1);
      }
      std::string::append(&v577, v300, v301);
      a4 = v553;
      if (SHIBYTE(v572) < 0)
      {
        operator delete((void *)v571);
        if (SHIBYTE(v570.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_154;
        }
LABEL_144:
        if ((SHIBYTE(v567.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_145;
        }
LABEL_155:
        operator delete(v567.__r_.__value_.__l.__data_);
        if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_156;
        }
LABEL_146:
        if ((SHIBYTE(v568.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_147;
        }
LABEL_157:
        operator delete(v568.__r_.__value_.__l.__data_);
        long long v302 = (void *)v573.__r_.__value_.__r.__words[0];
        if (v573.__r_.__value_.__r.__words[0])
        {
LABEL_148:
          v573.__r_.__value_.__l.__size_ = (std::string::size_type)v302;
          operator delete(v302);
        }
      }
      else
      {
        if ((SHIBYTE(v570.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_144;
        }
LABEL_154:
        operator delete(v570.__r_.__value_.__l.__data_);
        if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_155;
        }
LABEL_145:
        if ((SHIBYTE(v569.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_146;
        }
LABEL_156:
        operator delete(v569.__r_.__value_.__l.__data_);
        if (SHIBYTE(v568.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_157;
        }
LABEL_147:
        long long v302 = (void *)v573.__r_.__value_.__r.__words[0];
        if (v573.__r_.__value_.__r.__words[0]) {
          goto LABEL_148;
        }
      }
      if (SHIBYTE(v575) < 0) {
        operator delete((void *)v574);
      }

      uint64_t v94 = v552 + 1;
      if (v552 + 1 != v542) {
        continue;
      }
      break;
    }
    int shouldTransliterateSentencesSCTC = objc_msgSend_shouldTransliterateSentencesSCTC(v543[58], v89, v303, v304, v90, v91);
    uint64_t v310 = v534;
    if ((int)v93 > 0) {
      int v311 = shouldTransliterateSentencesSCTC;
    }
    else {
      int v311 = 0;
    }
    if (v311 != 1) {
      goto LABEL_186;
    }
    id v312 = objc_msgSend__applySentenceTransliterationCandidates_codesLen_codesMax_(v543, v306, v561, v93, v528, v309);
    uint64_t v561 = objc_msgSend_countCharacters(v555, v313, v314, v315, v316, v317);
    if (v561 >= 2)
    {
      uint64_t v322 = objc_msgSend_stringWithString_(NSString, v318, (uint64_t)v312, v319, v320, v321);
      long long v328 = unicodeToNSString(26348, v323, v324, v325, v326, v327);
      CGRect v334 = unicodeToNSString(26194, v329, v330, v331, v332, v333);
      uint64_t v338 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v322, v335, (uint64_t)v328, (uint64_t)v334, v336, v337);

      uint64_t v344 = unicodeToNSString(39221, v339, v340, v341, v342, v343);
      int v350 = unicodeToNSString(21890, v345, v346, v347, v348, v349);
      uint64_t v354 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v338, v351, (uint64_t)v344, (uint64_t)v350, v352, v353);

      long long v360 = unicodeToNSString(33879, v355, v356, v357, v358, v359);
      long long v366 = unicodeToNSString(30528, v361, v362, v363, v364, v365);
      uint64_t v370 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v354, v367, (uint64_t)v360, (uint64_t)v366, v368, v369);

      uint64_t v376 = unicodeToNSString(22151, v371, v372, v373, v374, v375);
      unint64_t v382 = unicodeToNSString(21523, v377, v378, v379, v380, v381);
      uint64_t v386 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v370, v383, (uint64_t)v376, (uint64_t)v382, v384, v385);

      if ((objc_msgSend_containsObject_(v530, v387, (uint64_t)v386, v388, v389, v390) & 1) == 0)
      {
        objc_msgSend_addObject_(v530, v391, (uint64_t)v386, v392, v393, v394);
        v395 = sub_1C497356C((uint64_t)v543, v386, v550);
        unint64_t v396 = [CHTextRecognitionResult alloc];
        LOBYTE(v525) = 0;
        isTextReplacement = objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v396, v397, (uint64_t)v386, (uint64_t)v550, (uint64_t)v547, (uint64_t)v545, v544, v549, *(double *)(v559 + 104), v546, v548, v395, v537, v525);
        objc_msgSend_addObject_(v541, v399, (uint64_t)isTextReplacement, v400, v401, v402);
        if (!v535)
        {
          id v535 = 0;
          long long v408 = objc_msgSend_rareWordIndexes(isTextReplacement, v403, v404, v405, v406, v407);
          BOOL v414 = objc_msgSend_count(v408, v409, v410, v411, v412, v413) == 0;

          if (v414) {
            id v535 = isTextReplacement;
          }
          else {
            id v535 = 0;
          }
        }
      }
    }
    if ((objc_msgSend_containsObject_(v530, v318, (uint64_t)v312, v319, v320, v321) & 1) == 0)
    {
      objc_msgSend_addObject_(v530, v415, (uint64_t)v312, v416, v417, v418);
      uint64_t v419 = sub_1C497356C((uint64_t)v543, v312, v550);
      long long v420 = [CHTextRecognitionResult alloc];
      LOBYTE(v525) = 0;
      v422 = objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v420, v421, (uint64_t)v312, (uint64_t)v550, (uint64_t)v547, (uint64_t)v545, v544, v549, *(double *)(v559 + 104), v546, v548, v419, v537, v525);
      objc_msgSend_addObject_(v541, v423, (uint64_t)v422, v424, v425, v426);
      if (!v535)
      {
        id v535 = 0;
        long long v432 = objc_msgSend_rareWordIndexes(v422, v427, v428, v429, v430, v431);
        BOOL v438 = objc_msgSend_count(v432, v433, v434, v435, v436, v437) == 0;

        if (v438) {
          id v535 = v422;
        }
        else {
          id v535 = 0;
        }
      }
    }
    BOOL v439 = v561 < 2;

    uint64_t v310 = v534;
    if (v439)
    {
LABEL_186:
      if ((objc_msgSend_containsObject_(v530, v306, (uint64_t)v555, v307, v308, v309) & 1) == 0)
      {
        objc_msgSend_addObject_(v530, v440, (uint64_t)v555, v441, v442, v443);
        v444 = sub_1C497356C((uint64_t)v543, v555, v550);
        v445 = [CHTextRecognitionResult alloc];
        LOBYTE(v525) = 0;
        v447 = objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v445, v446, (uint64_t)v555, (uint64_t)v550, (uint64_t)v547, (uint64_t)v545, v544, v549, *(double *)(v559 + 104), v546, v548, v444, v537, v525);
        v452 = sub_1C4977AC0((uint64_t)v543, v447);
        if (v452)
        {
          objc_msgSend_addObject_(v541, v448, (uint64_t)v452, v449, v450, v451);
          if (!v535)
          {
            id v535 = 0;
            v454 = objc_msgSend_rareWordIndexes(v447, v448, v453, v449, v450, v451);
            BOOL v460 = objc_msgSend_count(v454, v455, v456, v457, v458, v459) == 0;

            if (v460) {
              id v535 = v452;
            }
            else {
              id v535 = 0;
            }
          }
        }
        objc_msgSend_addObject_(v541, v448, (uint64_t)v447, v449, v450, v451);
        if (!v535)
        {
          id v535 = 0;
          v466 = objc_msgSend_rareWordIndexes(v447, v461, v462, v463, v464, v465);
          BOOL v472 = objc_msgSend_count(v466, v467, v468, v469, v470, v471) == 0;

          if (v472) {
            id v535 = v447;
          }
          else {
            id v535 = 0;
          }
        }

        uint64_t v310 = v534;
      }
    }
    if (!v310)
    {
      v543[51] = v540;
      uint64_t v26 = 1;
      if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_201;
      }
LABEL_160:
      if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_202;
      }
      goto LABEL_161;
    }
    uint64_t v26 = v310 + 1;
    if ((SHIBYTE(v576.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_160;
    }
LABEL_201:
    operator delete(v576.__r_.__value_.__l.__data_);
    if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
LABEL_202:
    }
      operator delete(v577.__r_.__value_.__l.__data_);
LABEL_161:

    if (v533) {
      operator delete(v533);
    }
    if (v536) {
      operator delete(v536);
    }

    v559 += 416;
  }
  while (v559 != v531);
LABEL_204:
  int shouldPromoteCJKCommonCharacters = objc_msgSend_shouldPromoteCJKCommonCharacters(v543[58], v20, v21, v22, v23, v24);
  if (v535) {
    int v479 = shouldPromoteCJKCommonCharacters;
  }
  else {
    int v479 = 0;
  }
  if (v479 == 1)
  {
    objc_msgSend_firstObject(v541, v474, v475, v476, v477, v478);
    id v480 = (id)objc_claimAutoreleasedReturnValue();
    BOOL v481 = v535 == v480;

    if (!v481)
    {
      uint64_t v482 = objc_msgSend_indexOfObject_(v541, v474, (uint64_t)v535, v476, v477, v478);
      objc_msgSend_removeObjectAtIndex_(v541, v483, v482, v484, v485, v486);
      objc_msgSend_insertObject_atIndex_(v541, v487, (uint64_t)v535, 0, v488, v489);
    }
  }
  for (unint64_t i = 1; i < objc_msgSend_count(v541, v474, v475, v476, v477, v478); ++i)
  {
    v495 = objc_msgSend_objectAtIndexedSubscript_(v541, v491, i, v492, v493, v494);
    long long v565 = 0u;
    long long v566 = 0u;
    long long v563 = 0u;
    long long v564 = 0u;
    v501 = objc_msgSend_wordCombinedScores(v495, v496, v497, v498, v499, v500);
    uint64_t v509 = objc_msgSend_countByEnumeratingWithState_objects_count_(v501, v502, (uint64_t)&v563, (uint64_t)v585, 16, v503);
    if (v509)
    {
      uint64_t v510 = *(void *)v564;
      while (2)
      {
        for (uint64_t j = 0; j != v509; ++j)
        {
          if (*(void *)v564 != v510) {
            objc_enumerationMutation(v501);
          }
          objc_msgSend_floatValue(*(void **)(*((void *)&v563 + 1) + 8 * j), v504, v505, v506, v507, v508);
          if (v512 > 50.0)
          {

            objc_msgSend_removeObjectAtIndex_(v541, v513, i--, v514, v515, v516);
            goto LABEL_222;
          }
        }
        uint64_t v509 = objc_msgSend_countByEnumeratingWithState_objects_count_(v501, v504, (uint64_t)&v563, (uint64_t)v585, 16, v508);
        if (v509) {
          continue;
        }
        break;
      }
    }

LABEL_222:
  }
  v517 = objc_msgSend__tokenizedTextResultFromResults_segmentGroup_offsetSegment_decodedStrokeSets_spaceBehavior_(v543, v491, (uint64_t)v541, (uint64_t)v527, 0, 0, 1);
  objc_msgSend_adjustColumns(v517, v518, v519, v520, v521, v522);
  id v523 = v517;

  return v523;
}

void sub_1C497C1A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = 0;
  if (*(char *)(v1 + 599) < 0) {
    operator delete(*(void **)(v1 + 576));
  }
  if (*(char *)(v1 + 623) < 0) {
    operator delete(*(void **)(v1 + 600));
  }

  *(void *)(v1 + 56) = *(void *)(v1 + 624);
  if (*(void *)(v1 + 56))
  {
    uint64_t v8 = *(void **)(v1 + 56);
    *(void *)(v1 + 632) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(v1 + 648);
  if (v9) {
    operator delete(v9);
  }

  _Unwind_Resume(a1);
}

void **sub_1C497C5E4(void **a1)
{
  double v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    double v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_1C49A0984(v3 - 416);
      while ((void *)v3 != v2);
      double v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_1C497C640(void *a1, void *a2, void *a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, void *a8, double a9, double a10)
{
  v130[1] = *MEMORY[0x1E4F143B8];
  id v19 = a2;
  id v20 = a3;
  std::string::size_type v120 = v19;
  id v121 = a8;
  if (!a1)
  {
    BOOL v119 = 0;
    goto LABEL_14;
  }
  v122[0] = MEMORY[0x1E4F143A8];
  v122[1] = 3221225472;
  v122[2] = sub_1C497CB60;
  v122[3] = &unk_1E64E1470;
  id v21 = v20;
  id v123 = v21;
  uint64_t v27 = objc_msgSend_indexOfObjectPassingTest_(v19, v22, (uint64_t)v122, v23, v24, v25);
  BOOL v119 = v27 == 0x7FFFFFFFFFFFFFFFLL;
  if (v27 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v36 = objc_msgSend_objectAtIndex_(v19, v26, v27, v28, v29, v30);
    objc_msgSend_score(v36, v37, v38, v39, v40, v41);
    if (v47 > a9) {
      double v47 = a9;
    }
    objc_msgSend_setScore_(v36, v42, v43, v44, v45, v46, v47);
    goto LABEL_13;
  }
  uint64_t v113 = (uint64_t)v21;
  if (!objc_msgSend_isRareChineseEntry_(a1, v26, (uint64_t)v21, v28, v29, v30))
  {
    uint64_t v118 = 0;
    if (a6) {
      goto LABEL_6;
    }
LABEL_11:
    id v117 = 0;
    goto LABEL_12;
  }
  uint64_t v118 = objc_msgSend_indexSetWithIndex_(MEMORY[0x1E4F28D60], v31, 0, v33, v34, v35);
  if (!a6) {
    goto LABEL_11;
  }
LABEL_6:
  id v117 = objc_msgSend_indexSetWithIndex_(MEMORY[0x1E4F28D60], v31, 0, v33, v34, v35);
LABEL_12:
  uint64_t v48 = objc_msgSend_length(v21, v31, v32, v33, v34, v35);
  uint64_t v49 = [CHTextRecognitionResult alloc];
  uint64_t v112 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v50, 0, v48, v51, v52);
  v130[0] = v112;
  uint64_t v116 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v53, (uint64_t)v130, 1, v54, v55);
  unsigned __int8 v111 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v56, a7, v57, v58, v59);
  uint64_t v129 = v111;
  uint64_t v115 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v60, (uint64_t)&v129, 1, v61, v62);
  std::string::size_type v110 = objc_msgSend_numberWithDouble_(NSNumber, v63, v64, v65, v66, v67, a10);
  uint64_t v128 = v110;
  uint64_t v114 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v68, (uint64_t)&v128, 1, v69, v70);
  uint64_t v76 = objc_msgSend_numberWithDouble_(NSNumber, v71, v72, v73, v74, v75, a9);
  long long v127 = v76;
  int v80 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v77, (uint64_t)&v127, 1, v78, v79);
  id v126 = v121;
  uint64_t v84 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v81, (uint64_t)&v126, 1, v82, v83);
  uint64_t v89 = objc_msgSend_numberWithBool_(NSNumber, v85, a4, v86, v87, v88);
  unint64_t v125 = v89;
  uint64_t v93 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v90, (uint64_t)&v125, 1, v91, v92);
  uint64_t v98 = objc_msgSend_numberWithBool_(NSNumber, v94, a5, v95, v96, v97);
  uint64_t v124 = v98;
  uint64_t v102 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v99, (uint64_t)&v124, 1, v100, v101);
  isTextReplacement = objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v49, v103, v113, (uint64_t)v116, (uint64_t)v115, (uint64_t)v114, v80, v84, a9, v93, v102, v118, v117, 0);

  uint64_t v36 = (void *)v118;
  objc_msgSend_addObject_(v120, v105, (uint64_t)isTextReplacement, v106, v107, v108);

LABEL_13:
LABEL_14:

  return v119;
}

void sub_1C497CA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C497CB60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_string(a2, (const char *)a2, a3, a4, a5, a6);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v7, v8, *(void *)(a1 + 32), v9, v10, v11);

  return isEqualToString;
}

void sub_1C497CBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497D01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

double sub_1C497D1A0(double a1, uint64_t a2, double *a3)
{
  return a3[16]
       + a3[17]
       + (a3[14] + a3[15] + a1) * 0.15
       + (a3[20] + a3[21]) * 0.2
       + (a3[18] + a3[19]) * 2.0
       + (a3[22] + a3[23]) * 0.2
       + a3[24] * 8.0;
}

double sub_1C497D204(uint64_t a1, double *a2)
{
  return a2[16] + a2[17] + (a2[20] + a2[21]) * 0.2 + (a2[18] + a2[19]) * 2.0 + (a2[22] + a2[23]) * 0.2 + a2[24] * 8.0;
}

void sub_1C497D24C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"'\".-", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9060;
  qword_1EA3C9060 = v6;

  uint64_t v12 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v8, @"àáâäãçèéêëìíîïñòóôõöùúûü\xFFÀÁÂÄÃÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜŸ", v9, v10, v11);
  uint64_t v13 = (void *)qword_1EA3C9068;
  qword_1EA3C9068 = v12;

  uint64_t v18 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v14, @".-", v15, v16, v17);
  id v19 = (void *)qword_1EA3C9070;
  qword_1EA3C9070 = v18;
}

void sub_1C497D2E0(uint64_t a1, uint64_t a2)
{
  id v4 = (id)LXEntryCopyString();
  LXEntryGetPartialProbability();
  double v6 = v5;
  unsigned int TokenID = LXEntryGetTokenID();
  isInappropriateLexiconEntrCGFloat y = objc_msgSend_isInappropriateLexiconEntry_(*(void **)(*(void *)(a1 + 32) + 496), v8, a2, v9, v10, v11);
  int isEqualToString = objc_msgSend_isEqualToString_(v4, v13, *(void *)(a1 + 40), v14, v15, v16);
  uint64_t v23 = objc_msgSend_lowercaseString(v4, v18, v19, v20, v21, v22);
  int v28 = objc_msgSend_isEqualToString_(v4, v24, (uint64_t)v23, v25, v26, v27);

  uint64_t v175 = objc_msgSend_compare_options_(v4, v29, *(void *)(a1 + 40), 1, v30, v31);
  if (v6 > *(double *)(*(void *)(*(void *)(a1 + 112) + 8) + 24))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = TokenID;
    *(double *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = v6;
  }
  uint64_t v36 = *(void *)(*(void *)(a1 + 128) + 8);
  if (*(unsigned char *)(v36 + 24)) {
    char v37 = 1;
  }
  else {
    char v37 = isInappropriateLexiconEntry;
  }
  *(unsigned char *)(v36 + 24) = v37;
  uint64_t v38 = objc_msgSend_componentsSeparatedByCharactersInSet_(v4, v32, qword_1EA3C9060, v33, v34, v35);
  unsigned int v173 = TokenID;
  uint64_t v43 = objc_msgSend_componentsJoinedByString_(v38, v39, (uint64_t)&stru_1F20141C8, v40, v41, v42);

  if (!objc_msgSend_compare_options_(v43, v44, *(void *)(a1 + 48), 129, v45, v46))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 136) + 8) + 24) = 1;
    if (*(unsigned char *)(a1 + 208)) {
      int v59 = v28;
    }
    else {
      int v59 = 0;
    }
    if (v59 == 1) {
      goto LABEL_11;
    }
LABEL_17:
    uint64_t v60 = v4;
    unint64_t v61 = objc_msgSend_length(v4, v47, v48, v49, v50, v51);
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 208)) {
    int v52 = v28;
  }
  else {
    int v52 = 0;
  }
  if (v52 != 1) {
    goto LABEL_17;
  }
LABEL_11:
  uint64_t v53 = uppercaseFirstLetter((NSString *)v4);

  if (isEqualToString) {
    int isEqualToString = 1;
  }
  else {
    int isEqualToString = objc_msgSend_isEqualToString_(v53, v54, *(void *)(a1 + 40), v56, v57, v58);
  }
  uint64_t v60 = v53;
  unint64_t v61 = objc_msgSend_length(v53, v54, v55, v56, v57, v58);
LABEL_20:
  int v172 = isInappropriateLexiconEntry;
  unint64_t v65 = *(void *)(a1 + 176);
  if (v61 >= v65)
  {
    uint64_t v174 = v43;
    uint64_t v66 = objc_msgSend_substringWithRange_(*(void **)(a1 + 56), v62, *(void *)(a1 + 168), v65, v63, v64);
    uint64_t v71 = objc_msgSend_substringToIndex_(v60, v67, *(void *)(a1 + 176), v68, v69, v70);
    int v76 = objc_msgSend_isEqualToString_(v66, v72, (uint64_t)v71, v73, v74, v75);

    int v80 = objc_msgSend_substringWithRange_(*(void **)(a1 + 56), v77, *(void *)(a1 + 168), *(void *)(a1 + 176), v78, v79);
    long long v85 = objc_msgSend_substringToIndex_(v60, v81, *(void *)(a1 + 176), v82, v83, v84);
    uint64_t v90 = objc_msgSend_caseInsensitiveCompare_(v80, v86, (uint64_t)v85, v87, v88, v89);
    char v91 = v28 ^ 1;

    int v96 = v65 ? v76 : 1;
    char v97 = v90 ? 1 : v91;
    uint64_t v43 = v174;
    if (v96 == 1 || (v97 & 1) == 0)
    {
      if (v175 && !*(unsigned char *)(*(void *)(*(void *)(a1 + 136) + 8) + 24))
      {
        if (v6 <= *(double *)(a1 + 200)) {
          double v134 = 0.0004 - v6;
        }
        else {
          double v134 = 0.0004;
        }
        uint64_t v135 = objc_msgSend_stringWithFormat_(NSString, v92, @"%@%@%@", v93, v94, v95, *(void *)(a1 + 64), v60, *(void *)(a1 + 72));
        uint64_t v140 = v135;
        unsigned int v141 = *(void **)(a1 + 32);
        uint64_t v142 = *(void *)(a1 + 176);
        if (v172)
        {
          uint64_t v143 = *(void **)(a1 + 96);
          uint64_t v144 = objc_msgSend_substringFromIndex_(v135, v136, v142, v137, v138, v139);
          double v145 = (*(double (**)(double))(*(void *)(a1 + 104) + 16))(v134);
          sub_1C497C640(v141, v143, v144, 1, 1u, 1, v173, *(void **)(a1 + 88), v145, **(double **)(*(void *)(a1 + 192) + 304));
        }
        else
        {
          uint64_t v166 = *(void **)(a1 + 80);
          uint64_t v144 = objc_msgSend_substringFromIndex_(v135, v136, v142, v137, v138, v139);
          double v167 = (*(double (**)(double))(*(void *)(a1 + 104) + 16))(v134);
          sub_1C497C640(v141, v166, v144, 1, 1u, 0, v173, *(void **)(a1 + 88), v167, **(double **)(*(void *)(a1 + 192) + 304));
        }

        goto LABEL_61;
      }
      uint64_t v103 = objc_msgSend_stringWithFormat_(NSString, v92, @"%@%@%@", v93, v94, v95, *(void *)(a1 + 64), v60, *(void *)(a1 + 72));
      if (!isEqualToString || objc_msgSend_length(*(void **)(a1 + 72), v98, v99, v100, v101, v102))
      {
        if (v6 < *(double *)(a1 + 200) || *(unsigned char *)(*(void *)(*(void *)(a1 + 144) + 8) + 24)) {
          double v104 = 0.0001;
        }
        else {
          double v104 = 0.0;
        }
        double v105 = 0.1;
        if (!*(unsigned char *)(a1 + 209)) {
          double v105 = 0.0;
        }
        double v106 = v104 + v105;
        if (v175)
        {
          uint64_t v176 = v103;
          char v179 = 0;
          uint64_t v107 = *(void *)(a1 + 72);
          uint64_t v108 = *(void *)(a1 + 40);
          shouldApplyDiacriticSensitivitCGFloat y = objc_msgSend_shouldApplyDiacriticSensitivity(*(void **)(*(void *)(a1 + 32) + 464), v98, v99, v100, v101, v102);
          id v177 = 0;
          id v178 = 0;
          objc_msgSend_computeEditPenalizationFromString_toReferenceString_withSuffix_withCaseSensitivity_withFirstLetterCaseSensitivity_withDiacriticSensitivity_withDiacriticsCharSet_withConsumableStrokesCharSet_outputSuffix_lexiconExtraCharacters_firstLetterCaseFlipped_(CHLanguageUtilities, v110, v108, (uint64_t)v60, v107, 0, 0, shouldApplyDiacriticSensitivity, qword_1EA3C9068, qword_1EA3C9060, &v178, &v177, &v179);
          double v112 = v111;
          id v113 = v178;
          id v114 = v177;
          BOOL v119 = objc_msgSend_stringWithFormat_(NSString, v115, @"%@%@%@", v116, v117, v118, *(void *)(a1 + 64), v60, v113);
          if (objc_msgSend_rangeOfCharacterFromSet_(v114, v120, qword_1EA3C9070, v121, v122, v123) != 0x7FFFFFFFFFFFFFFFLL) {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 152) + 8) + 24) = 1;
          }
          double v106 = v106 + v112 * 3.0 * 0.0001;

          uint64_t v103 = v176;
          uint64_t v128 = *(void **)(a1 + 32);
          uint64_t v129 = *(void *)(a1 + 176);
          if (v172) {
            goto LABEL_42;
          }
        }
        else
        {
          BOOL v119 = objc_msgSend_stringWithFormat_(NSString, v98, @"%@%@%@", v100, v101, v102, *(void *)(a1 + 64), v60, *(void *)(a1 + 72));
          uint64_t v128 = *(void **)(a1 + 32);
          uint64_t v129 = *(void *)(a1 + 176);
          if (v172)
          {
LABEL_42:
            uint64_t v130 = *(void **)(a1 + 96);
            uint64_t v131 = objc_msgSend_substringFromIndex_(v119, v124, v129, v125, v126, v127);
            double v132 = (*(double (**)(double))(*(void *)(a1 + 104) + 16))(v106);
            BOOL v133 = sub_1C497C640(v128, v130, v131, 1, 1u, 1, v173, *(void **)(a1 + 88), v132, **(double **)(*(void *)(a1 + 192) + 304));
LABEL_50:
            char v148 = v133;

            uint64_t v149 = *(void *)(*(void *)(a1 + 160) + 8);
            if (*(unsigned char *)(v149 + 24)) {
              char v150 = 1;
            }
            else {
              char v150 = v148;
            }
            *(unsigned char *)(v149 + 24) = v150;

            goto LABEL_54;
          }
        }
        id v146 = *(void **)(a1 + 80);
        uint64_t v131 = objc_msgSend_substringFromIndex_(v119, v124, v129, v125, v126, v127);
        double v147 = (*(double (**)(double))(*(void *)(a1 + 104) + 16))(v106);
        BOOL v133 = sub_1C497C640(v128, v146, v131, 1, 1u, 0, v173, *(void **)(a1 + 88), v147, **(double **)(*(void *)(a1 + 192) + 304));
        goto LABEL_50;
      }
      if (v6 <= *(double *)(a1 + 184))
      {
        uint64_t v151 = objc_msgSend_componentsSeparatedByCharactersInSet_(v60, v98, qword_1EA3C9068, v100, v101, v102);
        uint64_t v156 = objc_msgSend_componentsJoinedByString_(v151, v152, (uint64_t)&stru_1F20141C8, v153, v154, v155);

        if (objc_msgSend_isEqualToString_(v174, v157, (uint64_t)v60, v158, v159, v160))
        {
          char v165 = objc_msgSend_isEqualToString_(v156, v161, (uint64_t)v60, v162, v163, v164);

          if (v165)
          {
            *(_DWORD *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = v173;
            *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = 0;
LABEL_54:

LABEL_61:
            uint64_t v43 = v174;
            goto LABEL_62;
          }
        }
        else
        {
        }
      }
      CFNumberRef v168 = *(void **)(a1 + 32);
      uint64_t v169 = *(void **)(a1 + 80);
      uint64_t v170 = objc_msgSend_substringFromIndex_(v103, v98, *(void *)(a1 + 176), v100, v101, v102);
      double v171 = (*(double (**)(double))(*(void *)(a1 + 104) + 16))(0.0);
      sub_1C497C640(v168, v169, v170, 1, 1u, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 128) + 8) + 24), v173, *(void **)(a1 + 88), v171, **(double **)(*(void *)(a1 + 192) + 304));

      *(unsigned char *)(*(void *)(*(void *)(a1 + 144) + 8) + 24) = 1;
      goto LABEL_54;
    }
  }
LABEL_62:
  CFRelease(v4);
}

void sub_1C497DA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C497DB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C497DB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497DBA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497DBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497DBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497DBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497DBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497DBFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497DC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497DC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497DC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C497DC4C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  double v6 = NSNumber;
  objc_msgSend_score(v4, v7, v8, v9, v10, v11);
  uint64_t v17 = objc_msgSend_numberWithDouble_(v6, v12, v13, v14, v15, v16);
  uint64_t v18 = NSNumber;
  objc_msgSend_score(v5, v19, v20, v21, v22, v23);
  uint64_t v29 = objc_msgSend_numberWithDouble_(v18, v24, v25, v26, v27, v28);
  uint64_t v34 = objc_msgSend_compare_(v17, v30, (uint64_t)v29, v31, v32, v33);

  return v34;
}

void sub_1C497DCEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497DD10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C497DD24(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  double v6 = NSNumber;
  objc_msgSend_score(v4, v7, v8, v9, v10, v11);
  uint64_t v17 = objc_msgSend_numberWithDouble_(v6, v12, v13, v14, v15, v16);
  uint64_t v18 = NSNumber;
  objc_msgSend_score(v5, v19, v20, v21, v22, v23);
  uint64_t v29 = objc_msgSend_numberWithDouble_(v18, v24, v25, v26, v27, v28);
  uint64_t v34 = objc_msgSend_compare_(v17, v30, (uint64_t)v29, v31, v32, v33);

  return v34;
}

void sub_1C497DDC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497DDE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497E04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C497E150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C497E180(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v8 = objc_msgSend_wordLexicalEntries(v2, v3, v4, v5, v6, v7);
  if (objc_msgSend_count(v8, v9, v10, v11, v12, v13))
  {
    uint64_t v19 = objc_msgSend_wordLexicalEntries(v2, v14, v15, v16, v17, v18);
    uint64_t v25 = objc_msgSend_lastObject(v19, v20, v21, v22, v23, v24);
    char v31 = objc_msgSend_BOOLValue(v25, v26, v27, v28, v29, v30);
  }
  else
  {
    char v31 = 0;
  }

  char v37 = objc_msgSend_wordPatternEntries(v2, v32, v33, v34, v35, v36);
  if (objc_msgSend_count(v37, v38, v39, v40, v41, v42))
  {
    uint64_t v48 = objc_msgSend_wordPatternEntries(v2, v43, v44, v45, v46, v47);
    uint64_t v54 = objc_msgSend_lastObject(v48, v49, v50, v51, v52, v53);
    char v60 = objc_msgSend_BOOLValue(v54, v55, v56, v57, v58, v59);

    char v61 = v60 ^ 1;
    if (v31)
    {
LABEL_6:
      uint64_t v67 = 1;
      goto LABEL_14;
    }
  }
  else
  {
    char v61 = 1;

    if (v31) {
      goto LABEL_6;
    }
  }
  uint64_t v68 = objc_msgSend_string(v2, v62, v63, v64, v65, v66);
  uint64_t v74 = objc_msgSend_length(v68, v69, v70, v71, v72, v73);
  uint64_t v67 = v74 == 1;
  if (v74 == 1) {
    char v80 = 1;
  }
  else {
    char v80 = v61;
  }
  if ((v80 & 1) == 0)
  {
    objc_msgSend_string(v2, v75, v76, v77, v78, v79);
    unint64_t v81 = (NSString *)objc_claimAutoreleasedReturnValue();
    uint64_t v67 = isMixedCaseString(v81) ^ 1;
  }
LABEL_14:

  return v67;
}

void sub_1C497E2B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497E2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497E2F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497E304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497E314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C497E328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C497E33C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v509 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v468 = a3;
  id v466 = a4;
  id v462 = a5;
  uint64_t v464 = v9;
  uint64_t v469 = objc_alloc_init(CHMutableTokenizedTextResult);
  objc_msgSend_strokeCount(v9, v10, v11, v12, v13, v14);
  objc_msgSend_totalSegmentCount(v468, v15, v16, v17, v18, v19);
  uint64_t v20 = sub_1C4981C3C(a1, v466);
  objc_msgSend_precomposedStringWithCanonicalMapping(v20, v21, v22, v23, v24, v25);
  v467 = (NSString *)objc_claimAutoreleasedReturnValue();

  uint64_t v474 = sub_1C4981CFC(a1, v466);
  double v493 = sub_1C49777F8(v466);
  uint64_t v494 = v31;
  uint64_t v495 = v32;
  uint64_t v496 = v33;
  if (v474 == 2)
  {
    uint64_t v465 = &stru_1F20141C8;
  }
  else
  {
    lastWordInString(v467);
    uint64_t v465 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v34 = objc_msgSend_length(v467, v26, v27, v28, v29, v30);
  uint64_t v40 = objc_msgSend_length(v465, v35, v36, v37, v38, v39);
  objc_msgSend_length(v465, v41, v42, v43, v44, v45);
  uint64_t v459 = objc_msgSend__effectiveMaxRecognitionResultCount((void *)a1, v46, v47, v48, v49, v50);
  if (objc_msgSend_shouldApplyLexicalPenalty(*(void **)(a1 + 464), v51, v52, v53, v54, v55))
  {
    CFTypeRef RootCursor = (CFTypeRef)LXLexiconCreateRootCursor();
    if (*(void *)(a1 + 360)) {
      CFTypeRef cf = (CFTypeRef)LXLexiconCreateRootCursor();
    }
    else {
      CFTypeRef cf = 0;
    }
  }
  else
  {
    CFTypeRef cf = 0;
    CFTypeRef RootCursor = 0;
  }
  context = (void *)MEMORY[0x1C8786C20]();
  sub_1C499A82C((uint64_t)v490);
  v487 = 0;
  uint64_t v488 = 0;
  uint64_t v489 = 0;
  uint64_t v61 = objc_msgSend_supportedSegmentationStrategy(*(void **)(a1 + 464), v56, v57, v58, v59, v60);
  uint64_t v478 = (void **)a1;
  if (v61)
  {
    if (v61 == 1)
    {
      sub_1C49D8198(v468, (uint64_t)buf);
      sub_1C4981DB8((uint64_t)v490, (uint64_t)buf);
      sub_1C4999ABC((uint64_t)buf);
    }
  }
  else
  {
    objc_msgSend_sortedDrawingUsingMinXCoordinate(v9, v62, v63, v64, v65, v66);
    uint64_t v67 = (CHDrawing *)objc_claimAutoreleasedReturnValue();
    spatialSegmentationNetworkFromDrawing(v67, (uint64_t)buf);
    sub_1C4981DB8((uint64_t)v490, (uint64_t)buf);
    sub_1C4999ABC((uint64_t)buf);
  }
  if (v492 - v491 == 72
    || (objc_msgSend_segments(v468, v62, v63, v64, v65, v66),
        uint64_t v68 = objc_claimAutoreleasedReturnValue(),
        BOOL v74 = objc_msgSend_count(v68, v69, v70, v71, v72, v73) == 1,
        v68,
        uint64_t v80 = a1,
        v74))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    unint64_t v81 = (id)qword_1EA3C9F98;
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v87 = objc_msgSend_segments(v468, v82, v83, v84, v85, v86);
      uint64_t v93 = objc_msgSend_count(v87, v88, v89, v90, v91, v92);
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v93;
      _os_log_impl(&dword_1C492D000, v81, OS_LOG_TYPE_DEBUG, "Processing input as single character drawing with %lu segments\n", buf, 0xCu);
    }
    int v94 = 1;
    uint64_t v80 = a1;
  }
  else
  {
    int v94 = 0;
  }
  uint64_t v458 = v34 - v40;
  unsigned int v457 = v94;
  if ((v94 & objc_msgSend_shouldFallbackOnSingleCharacterExpansion(*(void **)(v80 + 464), v75, v76, v77, v78, v79)) != 1)
  {
    unint64_t v165 = objc_msgSend_matchingStrokePrefixRangeForDrawing_(*(void **)(v80 + 384), v95, (uint64_t)v464, v96, v97, v98);
    unint64_t v167 = v166;
    id v173 = v464;
    if (v167)
    {
      uint64_t v174 = *(uint64_t **)(v80 + 520);
      if (v174 != (uint64_t *)(v80 + 528))
      {
        do
        {
          uint64_t v175 = (void *)v174[4];
          *(void *)&uint8_t buf[8] = 0;
          *(void *)&uint8_t buf[16] = 0;
          *(void *)long long buf = &buf[8];
          sub_1C49A0A6C(buf, v175, v174 + 5);
          uint64_t v176 = *(void **)buf;
          if (*(unsigned char **)buf == &buf[8])
          {
LABEL_43:
            id v177 = (uint64_t *)v174[1];
            if (v177)
            {
              do
              {
                id v178 = v177;
                id v177 = (uint64_t *)*v177;
              }
              while (v177);
            }
            else
            {
              do
              {
                id v178 = (uint64_t *)v174[2];
                BOOL v184 = *v178 == (void)v174;
                uint64_t v174 = v178;
              }
              while (!v184);
            }
          }
          else
          {
            while (1)
            {
              unint64_t v179 = v176[4];
              BOOL v181 = v179 >= v165;
              unint64_t v180 = v179 - v165;
              BOOL v181 = !v181 || v180 >= v167;
              if (v181) {
                break;
              }
              uint64_t v182 = (void *)v176[1];
              if (v182)
              {
                do
                {
                  uint64_t v183 = v182;
                  uint64_t v182 = (void *)*v182;
                }
                while (v182);
              }
              else
              {
                do
                {
                  uint64_t v183 = (unsigned char *)v176[2];
                  BOOL v184 = *(void *)v183 == (void)v176;
                  uint64_t v176 = v183;
                }
                while (!v184);
              }
              uint64_t v176 = v183;
              if (v183 == &buf[8]) {
                goto LABEL_43;
              }
            }
            uint64_t v185 = (uint64_t *)v174[1];
            CFNumberRef v186 = v174;
            if (v185)
            {
              do
              {
                id v178 = v185;
                uint64_t v185 = (uint64_t *)*v185;
              }
              while (v185);
            }
            else
            {
              do
              {
                id v178 = (uint64_t *)v186[2];
                BOOL v184 = *v178 == (void)v186;
                CFNumberRef v186 = v178;
              }
              while (!v184);
            }
            if (*(uint64_t **)(v80 + 520) == v174) {
              *(void *)(v80 + 520) = v178;
            }
            --*(void *)(v80 + 536);
            sub_1C49A0D30(*(uint64_t **)(v80 + 528), v174);
            uint64_t v187 = (void *)v174[7];
            if (v187)
            {
              v174[8] = (uint64_t)v187;
              operator delete(v187);
            }
            sub_1C4999C7C((uint64_t)(v174 + 4), (void *)v174[5]);
            operator delete(v174);
          }
          sub_1C4999C7C((uint64_t)buf, *(void **)&buf[8]);
          uint64_t v174 = v178;
        }
        while (v178 != (uint64_t *)(v80 + 528));
      }
    }
    else
    {
      sub_1C499CD44(*(void **)(v80 + 528));
      *(void *)(v80 + 520) = v80 + 528;
      *(_OWORD *)(v80 + 528) = 0u;
    }
    if (objc_msgSend_shouldUseCaching(*(void **)(v80 + 464), v168, v169, v170, v171, v172)) {
      objc_setProperty_nonatomic_copy((id)v80, v188, v173, 384);
    }

    id v189 = v468;
    id v190 = v173;
    long long v486 = 0uLL;
    uint64_t v485 = 0;
    int v479 = v190;
    uint64_t v196 = objc_msgSend_supportedSegmentationStrategy(*(void **)(a1 + 464), v191, v192, v193, v194, v195);
    if (!v196)
    {
      if (v190)
      {
        objc_msgSend_strokeIndicesSortedByMinXCoordinate(v190, v197, v198, v199, v200, v201);
        long long v231 = *(_OWORD *)&buf[8];
        uint64_t v204 = *(unint64_t **)buf;
      }
      else
      {
        uint64_t v204 = 0;
        long long v231 = 0uLL;
      }
      uint64_t v485 = v204;
      long long v486 = v231;
      uint64_t v203 = (char *)v231;
LABEL_112:

      int64x2_t v237 = objc_msgSend_segments(v189, v232, v233, v234, v235, v236);
      uint64_t v243 = (v203 - (char *)v204) >> 3;
      BOOL v244 = v243 == objc_msgSend_count(v237, v238, v239, v240, v241, v242);

      if (!v244)
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint32x4_t v245 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v245, OS_LOG_TYPE_FAULT))
        {
          int64x2_t v251 = objc_msgSend_segments(v189, v246, v247, v248, v249, v250);
          uint64_t v257 = objc_msgSend_count(v251, v252, v253, v254, v255, v256);
          *(_DWORD *)long long buf = 134218240;
          *(void *)&uint8_t buf[4] = v257;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = (v203 - (char *)v204) >> 3;
          _os_log_impl(&dword_1C492D000, v245, OS_LOG_TYPE_FAULT, "The number of segments (%lu) must be the same as the number of sorted segment indexes (%lu)", buf, 0x16u);
        }
      }
      v482[1] = 0;
      v483 = 0;
      uint64_t v484 = 0;
      if (v203 != (char *)v204)
      {
        if (v203 - (char *)v204 < 0) {
          sub_1C494A220();
        }
        uint64_t v456 = (char *)operator new(v203 - (char *)v204);
        memcpy(v456, v204, v203 - (char *)v204);
        v483 = &v456[8 * v243];
      }
      v189;
      v479;
      v462;
      operator new();
    }
    if (v196 != 1)
    {
      uint64_t v204 = 0;
      uint64_t v203 = 0;
      goto LABEL_112;
    }
    uint64_t v202 = 0;
    uint64_t v203 = 0;
    uint64_t v204 = 0;
    uint64_t v205 = 0;
    unint64_t v206 = 0;
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t v209 = objc_msgSend_segments(v189, v197, v198, v199, v200, v201);
      BOOL v215 = i < objc_msgSend_count(v209, v210, v211, v212, v213, v214);

      if (!v215)
      {
        uint64_t v485 = v204;
        *(void *)&long long v486 = v203;
        *((void *)&v486 + 1) = v202;
        goto LABEL_112;
      }
      if ((unint64_t)v203 < v206)
      {
        *(void *)uint64_t v203 = i;
        uint64_t v208 = (uint64_t)(v203 + 8);
        goto LABEL_76;
      }
      uint64_t v216 = (v203 - v205) >> 3;
      unint64_t v217 = v216 + 1;
      if ((unint64_t)(v216 + 1) >> 61)
      {
        uint64_t v485 = v204;
        *(void *)&long long v486 = v203;
        *((void *)&v486 + 1) = v202;
        sub_1C494A220();
      }
      if ((uint64_t)(v206 - (void)v205) >> 2 > v217) {
        unint64_t v217 = (uint64_t)(v206 - (void)v205) >> 2;
      }
      if (v206 - (unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v218 = v217;
      }
      if (v218)
      {
        if (v218 >> 61)
        {
          uint64_t v485 = v204;
          *(void *)&long long v486 = v203;
          *((void *)&v486 + 1) = v202;
          sub_1C4949AA8();
        }
        int64x2_t v219 = operator new(8 * v218);
        uint64_t v204 = (unint64_t *)&v219[8 * v216];
        unint64_t *v204 = i;
        uint64_t v208 = (uint64_t)(v204 + 1);
        int64_t v220 = v203 - v205;
        if (v203 == v205) {
          goto LABEL_93;
        }
      }
      else
      {
        int64x2_t v219 = 0;
        uint64_t v204 = (unint64_t *)(8 * v216);
        *(void *)(8 * v216) = i;
        uint64_t v208 = 8 * v216 + 8;
        int64_t v220 = v203 - v205;
        if (v203 == v205) {
          goto LABEL_93;
        }
      }
      unint64_t v221 = v220 - 8;
      if (v221 >= 0x168)
      {
        unint64_t v224 = (v203 - 8 - v205) & 0xFFFFFFFFFFFFFFF8;
        if (&v219[v203 - v205 - 8 - v224] > &v219[v203 - v205 - 8])
        {
          int64x2_t v222 = v203;
        }
        else if (&v203[-v224 - 8] > v203 - 8)
        {
          int64x2_t v222 = v203;
        }
        else if ((unint64_t)(v205 - v219) >= 0x20)
        {
          uint64_t v225 = (v221 >> 3) + 1;
          uint64_t v226 = 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
          int64x2_t v222 = &v203[-v226];
          uint64_t v204 = (unint64_t *)((char *)v204 - v226);
          int64x2_t v227 = &v219[8 * v216 - 16];
          int64x2_t v228 = v203 - 16;
          uint64_t v229 = v225 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v230 = *(_OWORD *)v228;
            *(v227 - 1) = *((_OWORD *)v228 - 1);
            *int64x2_t v227 = v230;
            v227 -= 2;
            v228 -= 32;
            v229 -= 4;
          }
          while (v229);
          if (v225 == (v225 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_93;
          }
        }
        else
        {
          int64x2_t v222 = v203;
        }
      }
      else
      {
        int64x2_t v222 = v203;
      }
      do
      {
        unint64_t v223 = *((void *)v222 - 1);
        v222 -= 8;
        *--uint64_t v204 = v223;
      }
      while (v222 != v205);
LABEL_93:
      uint64_t v202 = &v219[8 * v218];
      if (v205) {
        operator delete(v205);
      }
      uint64_t v205 = (char *)v204;
      unint64_t v206 = (unint64_t)v202;
LABEL_76:
      uint64_t v203 = (char *)v208;
    }
  }
  v473 = v464;
  id v472 = v468;
  id v470 = v466;
  size_t size = v467;
  unint64_t v104 = objc_msgSend__effectiveMaxRecognitionResultCount((void *)v80, v99, v100, v101, v102, v103);
  v511.origin.CGFloat x = sub_1C49777F8(v470);
  CGFloat x = v511.origin.x;
  CGFloat y = v511.origin.y;
  CGFloat width = v511.size.width;
  CGFloat height = v511.size.height;
  if (CGRectIsNull(v511))
  {
    objc_msgSend_bounds(v473, v109, v110, v111, v112, v113);
    CGFloat x = v114;
    CGFloat y = v115;
    CGFloat width = v116;
    CGFloat height = v117;
  }
  objc_msgSend_bounds(v473, v109, v110, v111, v112, v113);
  v515.origin.CGFloat x = v118;
  v515.origin.CGFloat y = v119;
  v515.size.CGFloat width = v120;
  v515.size.CGFloat height = v121;
  v512.origin.CGFloat x = x;
  v512.origin.CGFloat y = y;
  v512.size.CGFloat width = width;
  v512.size.CGFloat height = height;
  CGRect v513 = CGRectUnion(v512, v515);
  CGFloat v122 = v513.origin.x;
  CGFloat v123 = v513.origin.y;
  CGFloat v124 = v513.size.width;
  CGFloat v125 = v513.size.height;
  uint64_t v477 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v126, v127, v128, v129, v130);
  uint64_t v131 = *(CHNeuralNetwork **)(v80 + 232);
  if (v131)
  {
    v514.origin.CGFloat x = v122;
    v514.origin.CGFloat y = v123;
    v514.size.CGFloat width = v124;
    v514.size.CGFloat height = v125;
    CHNeuralNetwork::ClassifyCHDrawing((uint64_t *)&__dst, v131, v473, *(NSCharacterSet **)(v80 + 224), v104, v514, 0);
    if (objc_msgSend_shouldRefineChineseCharacterCandidates(*(void **)(v80 + 464), v132, v133, v134, v135, v136))sub_1C49778B4((double *)v80, (unsigned int **)&__dst, v473); {
    if (objc_msgSend_shouldApplyLMRescoring(*(void **)(v80 + 464), v137, v138, v139, v140, v141))
    }
      objc_msgSend__rescoreCandidatesWithLanguageModel_history_((void *)v80, v142, (uint64_t)&__dst, (uint64_t)size, v145, v146);
    if (objc_msgSend_shouldTransliterateAndSynthetizeCandidates(*(void **)(v80 + 464), v142, v143, v144, v145, v146))objc_msgSend__applyTransliterationAndSyntheticCandidates_((void *)v80, v147, (uint64_t)&__dst, v149, v150, v151); {
    if (objc_msgSend_shouldPromoteCJKCommonCharacters(*(void **)(v80 + 464), v147, v148, v149, v150, v151))
    }
    {
      uint64_t v157 = (char *)__dst;
      if (v498 != __dst)
      {
        size_t v158 = 0;
        unint64_t v159 = 0;
        while (1)
        {
          uint64_t v160 = unicodeToNSString(*(_DWORD *)&v157[v158], v152, v153, v154, v155, v156);
          if ((objc_msgSend_isRareChineseEntry_((void *)v80, v161, (uint64_t)v160, v162, v163, v164) & 1) == 0) {
            break;
          }

          ++v159;
          uint64_t v157 = (char *)__dst;
          v158 += 8;
          uint64_t v80 = a1;
          if (v159 >= ((char *)v498 - (unsigned char *)__dst) >> 3) {
            goto LABEL_127;
          }
        }
        if (v159)
        {
          int64x2_t v258 = __dst;
          int64x2_t v259 = (char *)__dst + v158;
          if (v159 == 1)
          {
            uint64_t v260 = *(void *)__dst;
            memmove(__dst, v259, 8uLL);
            v258[1] = v260;
          }
          else
          {
            uint64_t v261 = *(void *)((char *)__dst + v158);
            memmove((char *)__dst + 8, __dst, v158);
            *int64x2_t v258 = v261;
          }
        }
      }
    }
LABEL_127:
    int64x2_t v262 = (void *)MEMORY[0x1E4F28D60];
    if (v472)
    {
      int64x2_t v263 = objc_msgSend_segments(v472, v152, v153, v154, v155, v156);
      uint64_t v269 = objc_msgSend_count(v263, v264, v265, v266, v267, v268);
      int64x2_t v273 = objc_msgSend_indexSetWithIndexesInRange_(v262, v270, 0, v269, v271, v272);

      id v274 = v273;
      id v275 = v472;
      objc_msgSend_count(v274, v276, v277, v278, v279, v280);
      unint64_t v286 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v281, v282, v283, v284, v285);
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1C498646C;
      uint64_t v505 = &unk_1E64E1500;
      uint64_t v508 = 0;
      id v287 = v275;
      id v506 = v287;
      id v288 = v286;
      id v507 = v288;
      objc_msgSend_enumerateIndexesUsingBlock_(v274, v289, (uint64_t)buf, v290, v291, v292);
      uint64_t v293 = v507;
      id v294 = v288;

      *(void *)long long buf = v294;
      uint64_t v476 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v295, (uint64_t)buf, 1, v296, v297);
    }
    else
    {
      uint64_t v298 = objc_msgSend_strokeCount(v473, v152, v153, v154, v155, v156);
      objc_msgSend_indexSetWithIndexesInRange_(v262, v299, 0, v298, v300, v301);
      id v274 = (id)objc_claimAutoreleasedReturnValue();
      *(void *)long long buf = v274;
      uint64_t v476 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v302, (uint64_t)buf, 1, v303, v304);
    }

    uint64_t v310 = (float *)__dst;
    uint64_t v475 = v498;
    if (__dst != v498)
    {
      do
      {
        int v311 = unicodeToNSString(*(_DWORD *)v310, v305, v306, v307, v308, v309);
        uint64_t v316 = objc_msgSend_numberWithBool_(NSNumber, v312, 1, v313, v314, v315);
        uint64_t v503 = v316;
        uint64_t v320 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v317, (uint64_t)&v503, 1, v318, v319);

        uint64_t v325 = objc_msgSend_numberWithInt_(NSNumber, v321, 0, v322, v323, v324);
        uint64_t v500 = v325;
        id v480 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v326, (uint64_t)&v500, 1, v327, v328);

        long long v329 = (void *)MEMORY[0x1E4F29238];
        uint64_t v335 = objc_msgSend_length(v311, v330, v331, v332, v333, v334);
        uint64_t v339 = objc_msgSend_valueWithRange_(v329, v336, 0, v335, v337, v338);
        __p = v339;
        uint64_t v343 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v340, (uint64_t)&__p, 1, v341, v342);

        int shouldTransformCharacterProbabilitiesIntoLogScores = objc_msgSend_shouldTransformCharacterProbabilitiesIntoLogScores(v478[58], v344, v345, v346, v347, v348);
        float v355 = v310[1];
        if (shouldTransformCharacterProbabilitiesIntoLogScores) {
          float v355 = -log10f(v355);
        }
        double v356 = v355;
        uint64_t v357 = objc_msgSend_numberWithDouble_(NSNumber, v350, v351, v352, v353, v354, v355);
        v501 = v357;
        uint64_t v361 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v358, (uint64_t)&v501, 1, v359, v360);

        long long v367 = objc_msgSend_numberWithDouble_(NSNumber, v362, v363, v364, v365, v366, v356);
        uint64_t v499 = v367;
        long long v371 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v368, (uint64_t)&v499, 1, v369, v370);

        uint64_t v372 = sub_1C497356C((uint64_t)v478, v311, v343);
        if (objc_msgSend_isInappropriateString_(v478[62], v373, (uint64_t)v311, v374, v375, v376))
        {
          uint64_t v381 = objc_msgSend_indexSetWithIndex_(MEMORY[0x1E4F28D60], v377, 0, v378, v379, v380);
        }
        else
        {
          uint64_t v381 = 0;
        }
        unint64_t v382 = [CHTextRecognitionResult alloc];
        LOBYTE(v455) = 0;
        isTextReplacement = objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v382, v383, (uint64_t)v311, (uint64_t)v343, (uint64_t)v480, (uint64_t)v361, v371, v476, v310[1], v320, v320, v372, v381, v455);
        uint64_t v389 = sub_1C4977AC0((uint64_t)v478, isTextReplacement);
        if (v389) {
          objc_msgSend_addObject_(v477, v385, (uint64_t)v389, v386, v387, v388);
        }
        objc_msgSend_addObject_(v477, v385, (uint64_t)isTextReplacement, v386, v387, v388);

        v310 += 2;
      }
      while (v310 != v475);
    }
    sub_1C49772E0((uint64_t)v478, v477, size);

    if (__dst)
    {
      uint64_t v498 = (float *)__dst;
      operator delete(__dst);
    }
  }

  uint64_t v391 = objc_msgSend__tokenizedTextResultFromResults_segmentGroup_offsetSegment_decodedStrokeSets_spaceBehavior_(v478, v390, (uint64_t)v477, (uint64_t)v472, 0, 1, v474);
  v397 = objc_msgSend_tokenColumns(v391, v392, v393, v394, v395, v396);
  objc_msgSend_appendTokenColumns_(v469, v398, (uint64_t)v397, v399, v400, v401);

  if (v487)
  {
    uint64_t v488 = v487;
    operator delete(v487);
  }
  sub_1C4999ABC((uint64_t)v490);
  if (RootCursor) {
    CFRelease(RootCursor);
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v405 = objc_msgSend_substringWithRange_(v467, v402, 0, v458, v403, v404);
  uint64_t v411 = objc_msgSend_transcriptionPaths(v469, v406, v407, v408, v409, v410);
  BOOL v417 = objc_msgSend_count(v411, v412, v413, v414, v415, v416) == 0;

  if (v417)
  {
    if (v457) {
      id v423 = 0;
    }
    else {
      id v423 = v405;
    }
    id v481 = 0;
    v482[0] = 0;
    uint64_t v424 = objc_msgSend__effectiveMaxRecognitionResultCount(v478, v418, v419, v420, v421, v422);
    objc_msgSend__calculateBestTranscriptionPaths_scores_fromTokenizedResult_pathCount_history_skipLMRescoring_(v478, v425, (uint64_t)v482, (uint64_t)&v481, (uint64_t)v469, v424, v423, v457);
    id v426 = v482[0];
    id v427 = v481;
    objc_msgSend_setTranscriptionPaths_scores_(v469, v428, (uint64_t)v426, (uint64_t)v427, v429, v430);
  }
  if (objc_msgSend_shouldKeepDuplicateTokenIDs(v478[58], v418, v419, v420, v421, v422)) {
    uint64_t shouldTransliterateSentencesSCTC = 1;
  }
  else {
    uint64_t shouldTransliterateSentencesSCTC = objc_msgSend_shouldTransliterateSentencesSCTC(v478[58], v431, v432, v433, v434, v435);
  }
  objc_msgSend_trimTokensToTranscriptionPathCount_(v469, v431, v459, v433, v434, v435);
  uint64_t shouldKeepOutOfPatternCandidates = objc_msgSend_shouldKeepOutOfPatternCandidates(v478[58], v437, v438, v439, v440, v441);
  objc_msgSend_filterCandidatesWithOutOfPattern_duplicateTokenIDs_keepOutOfLexiconAlternatives_keepAlternativeLengths_keepSubstrings_shouldKeepOriginalSpelling_(v469, v443, shouldKeepOutOfPatternCandidates, shouldTransliterateSentencesSCTC, 0, 0, 0, 0);
  v448 = objc_msgSend__addAlternativeCandidatesForTokenizedResult_(v478, v444, (uint64_t)v469, v445, v446, v447);

  objc_msgSend_adjustColumns(v448, v449, v450, v451, v452, v453);
  return v448;
}

void sub_1C4981424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,void *a29,void *a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,_Unwind_Exception *exception_objecta,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_1EA3C9088);
  uint64_t v67 = (void *)STACK[0x4C0];
  if (STACK[0x4C0])
  {
    STACK[0x4C8] = (unint64_t)v67;
    operator delete(v67);
  }
  uint64_t v68 = (void *)STACK[0x4D8];
  if (STACK[0x4D8])
  {
    STACK[0x4E0] = (unint64_t)v68;
    operator delete(v68);
  }
  sub_1C4999ABC((uint64_t)&STACK[0x4F0]);
  sub_1C4999ABC((uint64_t)&STACK[0x2E8]);
  sub_1C4999ABC((uint64_t)&STACK[0x5F0]);

  if (a59) {
    operator delete(a59);
  }

  if (a62) {
    operator delete(a62);
  }
  sub_1C4999ABC((uint64_t)&a65);

  _Unwind_Resume(a1);
}

id sub_1C4981C3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  id v9 = 0;
  if (a1 && v3)
  {
    uint64_t v10 = objc_msgSend_objectForKey_(v3, v4, (uint64_t)CHRecognitionOptionTextBefore, v5, v6, v7);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v9 = v10;
    }
    else {
      id v9 = 0;
    }
  }
  return v9;
}

void sub_1C4981CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4981CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4981CFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  uint64_t v9 = 0;
  if (a1 && v3)
  {
    uint64_t v10 = objc_msgSend_objectForKey_(v3, v4, (uint64_t)CHRecognitionOptionPrecedingSpaceBehavior, v5, v6, v7);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0 || (uint64_t v9 = objc_msgSend_integerValue(v10, v11, v12, v13, v14, v15)) == 0) {
      uint64_t v9 = objc_msgSend_precedingSpaceDefaultBehavior(*(void **)(a1 + 464), v11, v12, v13, v14, v15);
    }
  }
  return v9;
}

void sub_1C4981D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4981DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4981DB8(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  if (a1 != a2)
  {
    sub_1C499AC18((void *)(a1 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
    sub_1C499AD9C(a1 + 56, *(void **)(a2 + 56), (void *)(a2 + 64));
    sub_1C499B0BC(a1 + 80, *(char **)(a2 + 80), *(char **)(a2 + 88), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
    sub_1C494ACB0((void *)(a1 + 104), *(char **)(a2 + 104), *(char **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
    sub_1C499B358(a1 + 136, *(std::string **)(a2 + 136), *(std::string **)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
    sub_1C499B660((uint64_t **)(a1 + 160), *(void **)(a2 + 160), (void *)(a2 + 168));
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    sub_1C499BB5C((uint64_t **)(a1 + 192), *(uint64_t **)(a2 + 192), (uint64_t *)(a2 + 200));
    sub_1C499C454(a1 + 216, *(uint64_t **)(a2 + 216), (uint64_t *)(a2 + 224));
  }
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  return a1;
}

uint64_t sub_1C4981EC0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1C4981EEC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6, void *a7, char a8, void *a9)
{
  id v12 = a2;
  id v479 = a7;
  v473 = a9;
  uint64_t v484 = v12;
  uint64_t v18 = objc_msgSend_count(v12, v13, v14, v15, v16, v17);
  LODWORD(v24) = *(_DWORD *)(*(void *)(a1 + 232) + 36);
  unint64_t v471 = vcvtpd_u64_f64((double)(unint64_t)v18 / (double)v24);
  uint64_t v25 = 0;
  if (v471)
  {
    uint64_t v26 = 0;
    uint64_t v477 = (void *)(a1 + 528);
    uint64_t v478 = a6 + 1;
    uint64_t v494 = (void *)(a5 + 128);
    uint64_t v470 = 0x3F7FBE7700003001;
    float v27 = 0.5;
    uint64_t v476 = a6;
    uint64_t v500 = a1;
    do
    {
      unint64_t v29 = *(unsigned int *)(*(void *)(a1 + 232) + 36);
      unint64_t v481 = v26 * v29;
      if (objc_msgSend_count(v484, v19, v20, v21, v22, v23, v470) - v26 * v29 <= v29)
      {
        uint64_t v35 = objc_msgSend_count(v484, v30, v31, v32, v33, v34) - v481;
        if (a8) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v35 = *(unsigned int *)(*(void *)(a1 + 232) + 36);
        if (a8) {
          goto LABEL_11;
        }
      }
      if (v35 < *(unsigned int *)(*(void *)(a1 + 232) + 36)) {
        break;
      }
LABEL_11:
      if (v473 && (v473[2]() & 1) != 0) {
        break;
      }
      uint64_t v475 = v26;
      uint64_t v40 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v30, v35, v32, v33, v34);
      uint64_t v483 = v35;
      if (v35 >= 1)
      {
        uint64_t v41 = v481;
        uint64_t v42 = v483;
        do
        {
          uint64_t v43 = objc_msgSend_objectAtIndexedSubscript_(v484, v36, v41, v37, v38, v39);
          uint64_t v49 = objc_msgSend_classifiableDrawing(v43, v44, v45, v46, v47, v48);
          objc_msgSend_addObject_(v40, v50, (uint64_t)v49, v51, v52, v53);

          ++v41;
          --v42;
        }
        while (v42);
      }
      CHNeuralNetwork::ClassifyCHDrawingFromBatches(&__p, *(void *)(a1 + 232), v40);
      uint64_t v474 = v25;
      objc_msgSend_removeAllObjects(v40, v54, v55, v56, v57, v58);
      if (v483 >= 1)
      {
        uint64_t v63 = 0;
        uint64_t v482 = v40;
        while (1)
        {
          uint64_t v64 = __p;
          uint64_t v65 = objc_msgSend_objectAtIndexedSubscript_(v484, v59, v63 + v481, v60, v61, v62);
          uint64_t v71 = objc_msgSend_classifiableDrawing(v65, v66, v67, v68, v69, v70);
          v487 = objc_msgSend_drawing(v71, v72, v73, v74, v75, v76);
          uint64_t v490 = v63;

          uint64_t v87 = objc_msgSend_edgeIndex(v65, v77, v78, v79, v80, v81);
          uint64_t v88 = *(void *)(a4 + 80);
          if (v65)
          {
            objc_msgSend_strokeGroup(v65, v82, v83, v84, v85, v86);
          }
          else
          {
            v504 = 0;
            uint64_t v505 = 0;
            uint64_t v506 = 0;
          }
          uint64_t v491 = (unsigned int **)&v64[3 * v63];
          objc_msgSend__adjustCandidatesForConfusableCharacters_((void *)v500, v82, (uint64_t)v491, v84, v85, v86);
          if (objc_msgSend_shouldRefineChineseCharacterCandidates(*(void **)(v500 + 464), v89, v90, v91, v92, v93))sub_1C49778B4((double *)v500, v491, v487); {
          uint64_t v495 = v65;
          }
          if (objc_msgSend_shouldDetectChinesePunctuation(*(void **)(v500 + 464), v94, v95, v96, v97, v98))break; {
LABEL_89:
          }
          if (!objc_msgSend_shouldDetectRomanPunctuation(*(void **)(v500 + 464), v99, v100, v101, v102, v103))goto LABEL_138; {
          id v197 = v487;
          }
          int shouldTreatAllSmallStrokesAsPunctuation = objc_msgSend_shouldTreatAllSmallStrokesAsPunctuation(*(void **)(v500 + 464), v198, v199, v200, v201, v202);
          double v209 = *(double *)(v500 + 504);
          if (shouldTreatAllSmallStrokesAsPunctuation) {
            objc_msgSend_indexesOfStrokesSmallerThanSize_(v197, v204, v205, v206, v207, v208, v209, *(double *)(v500 + 512));
          }
          else {
          int v210 = objc_msgSend_indexesOfStrokesSmallerThanSize_(v197, v204, v205, v206, v207, v208, v209 + v209, *(double *)(v500 + 512) + *(double *)(v500 + 512));
          }
          if (objc_msgSend_count(v210, v211, v212, v213, v214, v215))
          {
            if ((unint64_t)objc_msgSend_strokeCount(v197, v216, v217, v218, v219, v220) <= 1)
            {
              uint32x4_t v238 = (char *)&v64[3 * v490];
              uint64_t v240 = (unsigned int *)*((void *)v238 + 1);
              uint64_t v239 = (unsigned int **)(v238 + 8);
              uint64_t v241 = (char *)v240 - (char *)*v491;
              if (v240 == *v491)
              {
                float v246 = 0.0;
              }
              else
              {
                unint64_t v242 = v241 >> 3;
                if (v242 <= 1) {
                  unint64_t v242 = 1;
                }
                uint64_t v243 = (float *)(*v491 + 1);
                double v244 = 0.0;
                do
                {
                  float v245 = *v243;
                  v243 += 2;
                  double v244 = v244 + v245;
                  --v242;
                }
                while (v242);
                float v246 = v244 * 0.5;
              }
              uint64_t v253 = objc_msgSend__defaultPunctuationStringsOutputScores_maxCandidateCount_((void *)v500, v221, 0, 1, v224, v225);
              if (objc_msgSend_count(v253, v254, v255, v256, v257, v258))
              {
                uint64_t v264 = objc_msgSend_firstObject(v253, v259, v260, v261, v262, v263);
                unsigned int v268 = objc_msgSend_codepointAtIndex_outRange_(v264, v265, 0, 0, v266, v267);
                uint64_t v269 = *v491;
                unint64_t v270 = ((char *)*v239 - (char *)*v491) >> 3;
                if (*v239 != *v491)
                {
                  uint64_t v271 = 0;
                  char v272 = 0;
                  if (v270 <= 1) {
                    uint64_t v273 = 1;
                  }
                  else {
                    uint64_t v273 = ((char *)*v239 - (char *)*v491) >> 3;
                  }
                  uint64_t v274 = -v273;
LABEL_112:
                  id v275 = (float *)&v269[2 * v271++ + 1];
                  do
                  {
                    if (*((_DWORD *)v275 - 1) == v268)
                    {
                      *id v275 = v246;
                      char v272 = 1;
                      if (v274 + v271) {
                        goto LABEL_112;
                      }
                      goto LABEL_120;
                    }
                    *id v275 = *v275 * v27;
                    v275 += 2;
                    ++v271;
                  }
                  while (v274 + v271 != 1);
                  if (v272) {
                    goto LABEL_120;
                  }
                }
                int64x2_t v276 = &v269[2 * v270];
                *(v276 - 2) = v268;
                *((float *)v276 - 1) = v246;
LABEL_120:
              }
              goto LABEL_137;
            }
            uint64_t v226 = objc_msgSend_count(v210, v221, v222, v223, v224, v225);
            if (v226 != objc_msgSend_strokeCount(v197, v227, v228, v229, v230, v231))
            {
              id v523 = 0;
              v524 = &v523;
              uint64_t v525 = 0x2020000000;
              uint64_t v526 = 0;
              if (objc_msgSend_shouldTreatAllSmallStrokesAsPunctuation(*(void **)(v500 + 464), v232, v233, v234, v235, v236))
              {
                uint64_t v252 = objc_msgSend_count(v210, v247, v248, v249, v250, v251);
                v524[3] = (void *)v252;
LABEL_136:
                sub_1C498D32C(v500, (uint64_t *)v491, v252);
                _Block_object_dispose(&v523, 8);
                goto LABEL_137;
              }
              uint64_t v277 = (void *)MEMORY[0x1E4F28E60];
              uint64_t v278 = objc_msgSend_strokeCount(v197, v247, v248, v249, v250, v251);
              uint64_t v282 = objc_msgSend_indexSetWithIndexesInRange_(v277, v279, 0, v278, v280, v281);
              uint64_t v497 = v282;
              objc_msgSend_removeIndexes_(v282, v283, (uint64_t)v210, v284, v285, v286);
              id v287 = objc_opt_class();
              if (v287)
              {
                objc_msgSend_convexHullForStrokes_inDrawing_(v287, v288, (uint64_t)v282, (uint64_t)v197, v289, v290);
              }
              else
              {
                uint64_t v521 = 0;
                long long v522 = 0uLL;
              }
              uint64_t v291 = objc_opt_class();
              if (v291)
              {
                objc_msgSend_enlargedConvexHull_withMargin_(v291, v292, (uint64_t)&v521, v293, v294, v295, 10.0);
                uint64_t v296 = v521;
                if (v521) {
                  goto LABEL_127;
                }
              }
              else
              {
                uint64_t v519 = 0;
                long long v520 = 0uLL;
                uint64_t v296 = v521;
                if (v521)
                {
LABEL_127:
                  *(void *)&long long v522 = v296;
                  operator delete(v296);
                }
              }
              uint64_t v297 = v519;
              uint64_t v521 = v519;
              uint64_t v492 = (unsigned char *)v520;
              long long v522 = v520;
              *(void *)long long buf = MEMORY[0x1E4F143A8];
              uint64_t v510 = 3321888768;
              CGRect v511 = sub_1C498D5D0;
              CGRect v512 = (uint64_t *)&unk_1F2012940;
              double v513 = COERCE_DOUBLE(v197);
              v517 = 0;
              v518 = 0;
              uint64_t v516 = 0;
              int64_t v298 = v492 - v297;
              if (v492 != v297)
              {
                if (v298 < 0) {
                  sub_1C494A220();
                }
                long long v299 = (char *)operator new(v492 - v297);
                uint64_t v300 = &v299[16 * (v298 >> 4)];
                uint64_t v516 = v299;
                v518 = v300;
                memcpy(v299, v297, v298);
                v517 = v300;
              }
              id v301 = v497;
              double v514 = *(double *)&v301;
              CGRect v515 = &v523;
              objc_msgSend_enumerateIndexesUsingBlock_(v210, v302, (uint64_t)buf, v303, v304, v305);

              if (v516)
              {
                v517 = v516;
                operator delete(v516);
              }

              if (v521)
              {
                *(void *)&long long v522 = v521;
                operator delete(v521);
              }

              uint64_t v252 = (uint64_t)v524[3];
              goto LABEL_136;
            }
            uint64_t v237 = objc_msgSend_strokeCount(v197, v232, v233, v234, v235, v236);
            sub_1C498D32C(v500, (uint64_t *)v491, v237);
          }
LABEL_137:

LABEL_138:
          uint64_t v306 = (const void **)v491;
          uint64_t v307 = (char *)&v64[3 * v490];
          uint64_t v309 = (unsigned int *)*((void *)v307 + 1);
          uint64_t v308 = (const void **)(v307 + 8);
          if (v309 == *v491)
          {
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            uint64_t v310 = (id)qword_1EA3C9F90[0];
            if (os_log_type_enabled(v310, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1C492D000, v310, OS_LOG_TYPE_FAULT, "We must add at least one candidate for each edge", buf, 2u);
            }

            uint64_t v306 = (const void **)v491;
          }
          v501 = 0;
          v502 = 0;
          uint64_t v503 = 0;
          int v311 = *v306;
          uint64_t v485 = (char **)v308;
          int64_t v312 = (unsigned char *)*v308 - (unsigned char *)*v306;
          if (*v308 != *v306)
          {
            if (v312 < 0) {
              sub_1C494A220();
            }
            v501 = (float *)operator new((unsigned char *)*v308 - v311);
            v502 = v501;
            uint64_t v313 = (char *)&v501[2 * (v312 >> 3)];
            uint64_t v503 = v313;
            memcpy(v501, v311, v312);
            v502 = (float *)v313;
          }
          uint64_t v314 = (void **)objc_msgSend_numberOfSegments(v65, v192, v193, v194, v195, v196);
          uint64_t v320 = objc_msgSend_numberOfSubstrokes(v65, v315, v316, v317, v318, v319);
          uint64_t v327 = v501;
          uint64_t v326 = v502;
          if (v502 != v501)
          {
            uint64_t v328 = (void *)v320;
            double v333 = 0.0;
            if (objc_msgSend_shouldApplyRomanPostProcessing(*(void **)(v500 + 464), v321, v322, v323, v324, v325))double v333 = sub_1C4A44624((uint64_t)v327, (const char *)&v501, v329, v330, v331, v332); {
            sub_1C498394C(&v523, v500, *(unsigned int *)v327, v330, v331, v332);
            }
            uint64_t v334 = sub_1C4999D30(v494, (uint64_t)&v523);
            double v493 = (uint64_t *)(v88 + 72 * v87);
            uint64_t v335 = *v493;
            uint64_t v498 = v493 + 1;
            uint64_t v336 = v493[1];
            uint64_t v337 = (void (*)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t))*(unsigned int *)v327;
            double v338 = v327[1];
            *(void *)long long buf = *v493;
            uint64_t v510 = v336;
            CGRect v511 = v337;
            CGRect v512 = v334;
            double v513 = v338;
            double v514 = v333;
            CGRect v515 = v314;
            uint64_t v516 = v314;
            v517 = v328;
            unint64_t v339 = *(void *)(a3 + 8);
            if (v339 >= *(void *)(a3 + 16))
            {
              uint64_t v340 = sub_1C499CBEC((char **)a3, (uint64_t)buf);
            }
            else
            {
              *(void *)unint64_t v339 = v335;
              *(void *)(v339 + 8) = v336;
              *(void *)(v339 + 16) = v337;
              *(void *)(v339 + 24) = v334;
              *(double *)(v339 + 32) = v338;
              *(double *)(v339 + 40) = v333;
              *(void *)(v339 + 48) = v314;
              *(void *)(v339 + 56) = v314;
              uint64_t v340 = (char *)(v339 + 72);
              *(void *)(v339 + 64) = v328;
            }
            *(void *)(a3 + 8) = v340;
            if (SHIBYTE(v525) < 0)
            {
              operator delete(v523);
              uint64_t v326 = v501;
              if ((unint64_t)((char *)v502 - (char *)v501) < 9) {
                goto LABEL_184;
              }
            }
            else
            {
              uint64_t v326 = v501;
              if ((unint64_t)((char *)v502 - (char *)v501) < 9) {
                goto LABEL_184;
              }
            }
            int64x2_t v488 = vdupq_n_s64((unint64_t)v314);
            unint64_t v341 = 1;
            uint64_t v489 = v314;
            while (1)
            {
              if (objc_msgSend_shouldRelaxFinalCandidatesThresholding(*(void **)(v500 + 464), v321, v322, v323, v324, v325))
              {
                float v342 = v326[2 * v341 + 1];
                int v343 = *(unsigned __int8 *)(*(void *)(a5 + 32) + 40 * *v498 + 32);
                unsigned __int8 shouldRelaxFinalCandidatesThresholding = objc_msgSend_shouldRelaxFinalCandidatesThresholding(*(void **)(v500 + 464), v321, v322, v323, v324, v325);
                double v345 = 0.01;
                if (((v343 != 0) & shouldRelaxFinalCandidatesThresholding) != 0) {
                  double v345 = 0.001;
                }
                if (v345 >= v342) {
                  break;
                }
              }
              int v350 = &v326[2 * v341];
              double v351 = 0.0;
              if (objc_msgSend_shouldApplyRomanPostProcessing(*(void **)(v500 + 464), v321, v322, v323, v324, v325))double v351 = sub_1C4A44624((uint64_t)&v326[2 * v341], (const char *)&v501, v346, v347, v348, v349); {
              sub_1C498394C(&v523, v500, *(unsigned int *)v350, v347, v348, v349);
              }
              uint64_t v352 = sub_1C4999D30(v494, (uint64_t)&v523);
              uint64_t v353 = *v493;
              uint64_t v354 = *v498;
              float v355 = (void (*)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t))*(unsigned int *)v350;
              double v356 = v326[2 * v341 + 1];
              *(void *)long long buf = *v493;
              uint64_t v510 = v354;
              CGRect v511 = v355;
              CGRect v512 = v352;
              double v513 = v356;
              double v514 = v351;
              CGRect v515 = v314;
              uint64_t v516 = v314;
              v517 = v328;
              unint64_t v358 = *(void *)(a3 + 8);
              unint64_t v357 = *(void *)(a3 + 16);
              if (v358 >= v357)
              {
                uint64_t v360 = v328;
                uint64_t v361 = *(char **)a3;
                unint64_t v362 = 0x8E38E38E38E38E39 * ((uint64_t)(v358 - *(void *)a3) >> 3);
                unint64_t v363 = v362 + 1;
                if (v362 + 1 > 0x38E38E38E38E38ELL) {
                  sub_1C494A220();
                }
                unint64_t v364 = 0x8E38E38E38E38E39 * ((uint64_t)(v357 - (void)v361) >> 3);
                if (2 * v364 > v363) {
                  unint64_t v363 = 2 * v364;
                }
                if (v364 >= 0x1C71C71C71C71C7) {
                  unint64_t v365 = 0x38E38E38E38E38ELL;
                }
                else {
                  unint64_t v365 = v363;
                }
                if (v365 > 0x38E38E38E38E38ELL) {
                  sub_1C4949AA8();
                }
                uint64_t v366 = (char *)operator new(72 * v365);
                long long v367 = (int64x2_t *)&v366[72 * v362];
                v367->i64[0] = v353;
                v367->i64[1] = v354;
                v367[1].i64[0] = (uint64_t)v355;
                v367[1].i64[1] = (uint64_t)v352;
                *(double *)v367[2].i64 = v356;
                *(double *)&v367[2].i64[1] = v351;
                v367[3] = v488;
                uint64_t v328 = v360;
                v367[4].i64[0] = (uint64_t)v360;
                if ((char *)v358 == v361)
                {
                  uint64_t v370 = (char *)v367;
                  uint64_t v65 = v495;
                  uint64_t v314 = v489;
                }
                else
                {
                  uint64_t v368 = 0;
                  uint64_t v314 = v489;
                  do
                  {
                    uint64_t v369 = &v367->i8[v368];
                    *(_OWORD *)(v369 - 72) = *(_OWORD *)(v358 + v368 - 72);
                    *(_OWORD *)(v369 - 56) = *(_OWORD *)(v358 + v368 - 56);
                    *(_OWORD *)(v369 - 40) = *(_OWORD *)(v358 + v368 - 40);
                    *(_OWORD *)(v369 - 24) = *(_OWORD *)(v358 + v368 - 24);
                    *((void *)v369 - 1) = *(void *)(v358 + v368 - 8);
                    v368 -= 72;
                  }
                  while ((char *)(v358 + v368) != v361);
                  uint64_t v370 = &v367->i8[v368];
                  uint64_t v65 = v495;
                }
                long long v371 = &v366[72 * v365];
                uint64_t v359 = &v367[4].i8[8];
                *(void *)a3 = v370;
                *(void *)(a3 + 8) = (char *)v367 + 72;
                *(void *)(a3 + 16) = v371;
                if (v361) {
                  operator delete(v361);
                }
              }
              else
              {
                *(void *)unint64_t v358 = v353;
                *(void *)(v358 + 8) = v354;
                *(void *)(v358 + 16) = v355;
                *(void *)(v358 + 24) = v352;
                *(double *)(v358 + 32) = v356;
                *(double *)(v358 + 40) = v351;
                *(void *)(v358 + 48) = v314;
                *(void *)(v358 + 56) = v314;
                uint64_t v359 = (char *)(v358 + 72);
                *(void *)(v358 + 64) = v328;
                uint64_t v65 = v495;
              }
              *(void *)(a3 + 8) = v359;
              if (SHIBYTE(v525) < 0) {
                operator delete(v523);
              }
              ++v341;
              uint64_t v326 = v501;
              if (v341 >= ((char *)v502 - (char *)v501) >> 3) {
                goto LABEL_184;
              }
            }
            uint64_t v326 = v501;
          }
LABEL_184:
          if (v326)
          {
            v502 = v326;
            operator delete(v326);
          }
          uint64_t v40 = v482;
          int shouldUseCaching = objc_msgSend_shouldUseCaching(*(void **)(v500 + 464), v321, v322, v323, v324, v325);
          uint64_t v373 = v485;
          if (v506) {
            int v374 = shouldUseCaching;
          }
          else {
            int v374 = 0;
          }
          if (v374 != 1) {
            goto LABEL_18;
          }
          uint64_t v375 = v478;
          uint64_t v376 = *v478;
          uint64_t v377 = v478;
          uint64_t v378 = v491;
          if (*v478)
          {
            if (v504 == &v505)
            {
              uint64_t v379 = (uint64_t *)v376[4];
              uint64_t v380 = v376 + 5;
              if (v379 == v376 + 5) {
                goto LABEL_261;
              }
              uint64_t v377 = (uint64_t **)*v478;
              while (1)
              {
                uint64_t v381 = v504;
                while (v381 != &v505)
                {
                  uint64_t v382 = v381[4];
                  uint64_t v383 = v379[4];
                  if (v382 < v383) {
                    break;
                  }
                  if (v383 >= v382)
                  {
                    uint64_t v384 = (void *)v381[1];
                    uint64_t v385 = v381;
                    if (v384)
                    {
                      do
                      {
                        uint64_t v381 = v384;
                        uint64_t v384 = (void *)*v384;
                      }
                      while (v384);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v381 = (void *)v385[2];
                        BOOL v151 = *v381 == (void)v385;
                        uint64_t v385 = v381;
                      }
                      while (!v151);
                    }
                    uint64_t v386 = (uint64_t *)v379[1];
                    if (v386)
                    {
                      do
                      {
                        uint64_t v387 = v386;
                        uint64_t v386 = (uint64_t *)*v386;
                      }
                      while (v386);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v387 = (uint64_t *)v379[2];
                        BOOL v151 = *v387 == (void)v379;
                        uint64_t v379 = v387;
                      }
                      while (!v151);
                    }
                    uint64_t v379 = v387;
                    if (v387 != v380) {
                      continue;
                    }
                  }
                  goto LABEL_261;
                }
                uint64_t v388 = *v377;
                uint64_t v375 = v377;
                if (!*v377) {
                  break;
                }
                uint64_t v379 = (uint64_t *)v388[4];
                uint64_t v380 = v388 + 5;
                uint64_t v377 = (uint64_t **)*v377;
                if (v379 == v388 + 5) {
                  goto LABEL_261;
                }
              }
            }
            else
            {
              do
              {
                while (1)
                {
                  uint64_t v375 = (uint64_t **)v376;
                  uint64_t v389 = (void *)v376[4];
                  uint64_t v390 = v376 + 5;
                  uint64_t v391 = v504;
                  uint64_t v392 = v389;
                  if (v389 == v390) {
                    break;
                  }
                  while (v391 != &v505)
                  {
                    uint64_t v400 = v391[4];
                    uint64_t v401 = v392[4];
                    if (v400 < v401) {
                      break;
                    }
                    if (v401 >= v400)
                    {
                      uint64_t v402 = (void *)v391[1];
                      uint64_t v403 = v391;
                      if (v402)
                      {
                        do
                        {
                          uint64_t v391 = v402;
                          uint64_t v402 = (void *)*v402;
                        }
                        while (v402);
                      }
                      else
                      {
                        do
                        {
                          uint64_t v391 = (void *)v403[2];
                          BOOL v151 = *v391 == (void)v403;
                          uint64_t v403 = v391;
                        }
                        while (!v151);
                      }
                      uint64_t v404 = (void *)v392[1];
                      if (v404)
                      {
                        do
                        {
                          uint64_t v405 = v404;
                          uint64_t v404 = (void *)*v404;
                        }
                        while (v404);
                      }
                      else
                      {
                        do
                        {
                          uint64_t v405 = (void *)v392[2];
                          BOOL v151 = *v405 == (void)v392;
                          uint64_t v392 = v405;
                        }
                        while (!v151);
                      }
                      uint64_t v392 = v405;
                      if (v405 != v390) {
                        continue;
                      }
                    }
                    goto LABEL_214;
                  }
                  uint64_t v376 = *v375;
                  uint64_t v377 = v375;
                  if (!*v375) {
                    goto LABEL_258;
                  }
                }
LABEL_214:
                uint64_t v393 = v504;
                while (v389 != v390)
                {
                  uint64_t v394 = v389[4];
                  uint64_t v395 = v393[4];
                  if (v394 < v395) {
                    break;
                  }
                  if (v395 >= v394)
                  {
                    uint64_t v396 = (void *)v389[1];
                    v397 = v389;
                    if (v396)
                    {
                      do
                      {
                        uint64_t v389 = v396;
                        uint64_t v396 = (void *)*v396;
                      }
                      while (v396);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v389 = (void *)v397[2];
                        BOOL v151 = *v389 == (void)v397;
                        v397 = v389;
                      }
                      while (!v151);
                    }
                    id v398 = (void *)v393[1];
                    if (v398)
                    {
                      do
                      {
                        uint64_t v399 = (void **)v398;
                        id v398 = (void *)*v398;
                      }
                      while (v398);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v399 = (void **)v393[2];
                        BOOL v151 = *v399 == v393;
                        uint64_t v393 = v399;
                      }
                      while (!v151);
                    }
                    uint64_t v393 = v399;
                    if (v399 != &v505) {
                      continue;
                    }
                  }
                  goto LABEL_261;
                }
                uint64_t v376 = v375[1];
              }
              while (v376);
              uint64_t v377 = v375 + 1;
            }
          }
LABEL_258:
          uint64_t v419 = (uint64_t *)operator new(0x38uLL);
          v419[5] = 0;
          v419[4] = (uint64_t)(v419 + 5);
          v419[6] = 0;
          sub_1C49A0A6C(v419 + 4, v504, &v505);
          *uint64_t v419 = 0;
          v419[1] = 0;
          v419[2] = (uint64_t)v375;
          const char *v377 = v419;
          uint64_t v420 = (uint64_t *)**v476;
          uint64_t v378 = v491;
          if (v420)
          {
            *uint64_t v476 = v420;
            uint64_t v419 = *v377;
          }
          sub_1C4949FD4(v476[1], v419);
          v476[2] = (uint64_t *)((char *)v476[2] + 1);
          uint64_t v373 = v485;
LABEL_261:
          uint64_t v421 = v477;
          uint64_t v422 = (void *)*v477;
          id v423 = v477;
          if (*v477)
          {
            if (v504 == &v505)
            {
              uint64_t v424 = (void *)v422[4];
              uint64_t v425 = v422 + 5;
              if (v424 != v422 + 5)
              {
                id v423 = (void *)*v477;
                do
                {
                  id v426 = v504;
                  while (v426 != &v505)
                  {
                    uint64_t v427 = v426[4];
                    uint64_t v428 = v424[4];
                    if (v427 < v428) {
                      break;
                    }
                    if (v428 >= v427)
                    {
                      uint64_t v429 = (void *)v426[1];
                      uint64_t v430 = v426;
                      if (v429)
                      {
                        do
                        {
                          id v426 = v429;
                          uint64_t v429 = (void *)*v429;
                        }
                        while (v429);
                      }
                      else
                      {
                        do
                        {
                          id v426 = (void *)v430[2];
                          BOOL v151 = *v426 == (void)v430;
                          uint64_t v430 = v426;
                        }
                        while (!v151);
                      }
                      uint64_t v431 = (void *)v424[1];
                      if (v431)
                      {
                        do
                        {
                          uint64_t v432 = v431;
                          uint64_t v431 = (void *)*v431;
                        }
                        while (v431);
                      }
                      else
                      {
                        do
                        {
                          uint64_t v432 = (void *)v424[2];
                          BOOL v151 = *v432 == (void)v424;
                          uint64_t v424 = v432;
                        }
                        while (!v151);
                      }
                      uint64_t v424 = v432;
                      if (v432 != v425) {
                        continue;
                      }
                    }
                    uint64_t v422 = v423;
                    goto LABEL_325;
                  }
                  uint64_t v422 = (void *)*v423;
                  uint64_t v421 = v423;
                  if (!*v423) {
                    goto LABEL_322;
                  }
                  uint64_t v424 = (void *)v422[4];
                  uint64_t v425 = v422 + 5;
                  id v423 = (void *)*v423;
                }
                while (v424 != v422 + 5);
              }
              goto LABEL_325;
            }
            do
            {
              while (1)
              {
                uint64_t v421 = v422;
                uint64_t v433 = (void *)v422[4];
                uint64_t v434 = v422 + 5;
                uint64_t v435 = v504;
                uint64_t v436 = v433;
                if (v433 == v422 + 5) {
                  break;
                }
                while (v435 != &v505)
                {
                  uint64_t v444 = v435[4];
                  uint64_t v445 = v436[4];
                  if (v444 < v445) {
                    break;
                  }
                  if (v445 >= v444)
                  {
                    uint64_t v446 = (void *)v435[1];
                    uint64_t v447 = v435;
                    if (v446)
                    {
                      do
                      {
                        uint64_t v435 = v446;
                        uint64_t v446 = (void *)*v446;
                      }
                      while (v446);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v435 = (void *)v447[2];
                        BOOL v151 = *v435 == (void)v447;
                        uint64_t v447 = v435;
                      }
                      while (!v151);
                    }
                    v448 = (void *)v436[1];
                    if (v448)
                    {
                      do
                      {
                        uint64_t v449 = v448;
                        v448 = (void *)*v448;
                      }
                      while (v448);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v449 = (void *)v436[2];
                        BOOL v151 = *v449 == (void)v436;
                        uint64_t v436 = v449;
                      }
                      while (!v151);
                    }
                    uint64_t v436 = v449;
                    if (v449 != v434) {
                      continue;
                    }
                  }
                  goto LABEL_285;
                }
                uint64_t v422 = (void *)*v422;
                id v423 = v421;
                if (!*v421) {
                  goto LABEL_322;
                }
              }
LABEL_285:
              uint64_t v437 = v504;
              while (v433 != v434)
              {
                uint64_t v438 = v433[4];
                uint64_t v439 = v437[4];
                if (v438 < v439) {
                  break;
                }
                if (v439 >= v438)
                {
                  uint64_t v440 = (void *)v433[1];
                  uint64_t v441 = v433;
                  if (v440)
                  {
                    do
                    {
                      uint64_t v433 = v440;
                      uint64_t v440 = (void *)*v440;
                    }
                    while (v440);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v433 = (void *)v441[2];
                      BOOL v151 = *v433 == (void)v441;
                      uint64_t v441 = v433;
                    }
                    while (!v151);
                  }
                  uint64_t v442 = (void *)v437[1];
                  if (v442)
                  {
                    do
                    {
                      uint64_t v443 = (void **)v442;
                      uint64_t v442 = (void *)*v442;
                    }
                    while (v442);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v443 = (void **)v437[2];
                      BOOL v151 = *v443 == v437;
                      uint64_t v437 = v443;
                    }
                    while (!v151);
                  }
                  uint64_t v437 = v443;
                  if (v443 != &v505) {
                    continue;
                  }
                }
                goto LABEL_325;
              }
              uint64_t v422 = (void *)v422[1];
            }
            while (v422);
            id v423 = v421 + 1;
          }
LABEL_322:
          uint64_t v422 = operator new(0x50uLL);
          v422[5] = 0;
          v422[4] = v422 + 5;
          v422[6] = 0;
          sub_1C49A0A6C(v422 + 4, v504, &v505);
          v422[7] = 0;
          v422[8] = 0;
          v422[9] = 0;
          void *v422 = 0;
          v422[1] = 0;
          v422[2] = v421;
          void *v423 = v422;
          uint64_t v450 = **(void **)(v500 + 520);
          uint64_t v451 = v422;
          uint64_t v378 = v491;
          if (v450)
          {
            *(void *)(v500 + 520) = v450;
            uint64_t v451 = (uint64_t *)*v423;
          }
          sub_1C4949FD4(*(uint64_t **)(v500 + 528), v451);
          ++*(void *)(v500 + 536);
          uint64_t v373 = v485;
LABEL_325:
          if (v422 + 7 != v378) {
            sub_1C494ACB0(v422 + 7, (char *)*v491, *v373, (*v373 - (char *)*v491) >> 3);
          }
LABEL_18:
          sub_1C4999C7C((uint64_t)&v504, v505);

          uint64_t v63 = v490 + 1;
          if (v490 + 1 == v483) {
            goto LABEL_351;
          }
        }
        id v104 = v487;
        id v105 = v479;
        objc_msgSend_bounds(v105, v106, v107, v108, v109, v110);
        double v112 = v111;
        double v114 = v113;
        double v116 = v115;
        objc_msgSend_bounds(v104, v117, v118, v119, v120, v121);
        double v123 = v122;
        double v125 = v124;
        double v127 = v126;
        double v129 = v128;
        if ((unint64_t)objc_msgSend_strokeCount(v104, v130, v131, v132, v133, v134) > 2) {
          goto LABEL_88;
        }
        double v140 = v125 - v114;
        double v141 = v114 + v116 - (v125 + v129);
        double v142 = v116 * 0.6;
        if (v140 >= v116 * 0.4 && v141 <= v142)
        {
LABEL_28:
          double v496 = v127 / (v129 + 0.000000001);
          if (objc_msgSend_strokeCount(v104, v135, v136, v137, v138, v139) == 1)
          {
            if (v129 < v116 * 0.1 && v127 < v116 * 0.1)
            {
              BOOL v148 = 0;
              if (v127 < *(double *)(v500 + 504) && v129 < *(double *)(v500 + 512) && v123 > v112) {
                BOOL v148 = v140 > v116 * 0.75;
              }
            }
            else
            {
              BOOL v148 = 0;
            }
            if (v141 < v140 && v140 > v142 && v496 < 1.5 && v123 > v112)
            {
              id v173 = *v491;
              uint64_t v174 = (char *)&v64[3 * v63];
              id v177 = (unsigned int *)*((void *)v174 + 1);
              uint64_t v176 = (unsigned int **)(v174 + 8);
              uint64_t v175 = v177;
              id v178 = *v491;
              if (*v491 != v177)
              {
                while (1)
                {
                  unsigned int v179 = *v178;
                  if (*v178 == 44) {
                    break;
                  }
                  if (v179 == 12290)
                  {
                    uint64_t v406 = v88;
                    *uint64_t v176 = v173;
                    uint64_t v412 = (char *)&v64[3 * v490];
                    unint64_t v414 = *((void *)v412 + 2);
                    uint64_t v409 = (unsigned int **)(v412 + 16);
                    unint64_t v413 = v414;
                    float v27 = 0.5;
                    if ((unint64_t)v173 < v414)
                    {
                      *(void *)id v173 = 0x3F7FBE7700003002;
                      uint64_t v415 = v173 + 2;
                      goto LABEL_350;
                    }
                    uint64_t v458 = v413 - (void)v173;
                    uint64_t v459 = v458 >> 2;
                    if ((unint64_t)(v458 >> 2) <= 1) {
                      uint64_t v459 = 1;
                    }
                    if ((unint64_t)v458 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v460 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v460 = v459;
                    }
                    if (v460 >> 61) {
                      sub_1C4949AA8();
                    }
                    uint64_t v455 = (unsigned int *)operator new(8 * v460);
                    uint64_t v456 = &v455[2 * v460];
                    uint64_t v457 = 0x3F7FBE7700003002;
                    goto LABEL_348;
                  }
                  if (v179 == 20022)
                  {
                    uint64_t v406 = v88;
                    *uint64_t v176 = v173;
                    uint64_t v416 = (char *)&v64[3 * v490];
                    unint64_t v418 = *((void *)v416 + 2);
                    uint64_t v409 = (unsigned int **)(v416 + 16);
                    unint64_t v417 = v418;
                    if ((unint64_t)v173 < v418)
                    {
                      uint64_t v411 = v470;
                      goto LABEL_257;
                    }
                    uint64_t v461 = v417 - (void)v173;
                    uint64_t v462 = v461 >> 2;
                    if ((unint64_t)(v461 >> 2) <= 1) {
                      uint64_t v462 = 1;
                    }
                    if ((unint64_t)v461 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v463 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v463 = v462;
                    }
                    float v27 = 0.5;
                    if (v463 >> 61) {
                      sub_1C4949AA8();
                    }
                    uint64_t v455 = (unsigned int *)operator new(8 * v463);
                    uint64_t v456 = &v455[2 * v463];
                    uint64_t v457 = v470;
                    goto LABEL_348;
                  }
                  v178 += 2;
                  if (v178 == v175) {
                    goto LABEL_67;
                  }
                }
                uint64_t v406 = v88;
                *uint64_t v176 = v173;
                uint64_t v407 = (char *)&v64[3 * v490];
                unint64_t v410 = *((void *)v407 + 2);
                uint64_t v409 = (unsigned int **)(v407 + 16);
                unint64_t v408 = v410;
                if ((unint64_t)v173 < v410)
                {
                  uint64_t v411 = 0x3F7FBE770000002CLL;
LABEL_257:
                  *(void *)id v173 = v411;
                  uint64_t v415 = v173 + 2;
                  float v27 = 0.5;
                  goto LABEL_350;
                }
                uint64_t v452 = v408 - (void)v173;
                uint64_t v453 = v452 >> 2;
                if ((unint64_t)(v452 >> 2) <= 1) {
                  uint64_t v453 = 1;
                }
                if ((unint64_t)v452 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v454 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v454 = v453;
                }
                float v27 = 0.5;
                if (v454 >> 61) {
                  sub_1C4949AA8();
                }
                uint64_t v455 = (unsigned int *)operator new(8 * v454);
                uint64_t v456 = &v455[2 * v454];
                uint64_t v457 = 0x3F7FBE770000002CLL;
LABEL_348:
                *(void *)uint64_t v455 = v457;
                const char *v491 = v455;
                uint64_t v415 = v455 + 2;
                *uint64_t v176 = v455 + 2;
                const char *v409 = v456;
                if (v173) {
                  operator delete(v173);
                }
LABEL_350:
                *uint64_t v176 = v415;
                uint64_t v88 = v406;
                goto LABEL_88;
              }
            }
LABEL_67:
            float v27 = 0.5;
            if (!v148) {
              goto LABEL_88;
            }
            uint64_t v166 = v88;
            unint64_t v180 = (char *)&v64[3 * v490];
            CFNumberRef v168 = *v491;
            *((void *)v180 + 1) = *v491;
            uint64_t v169 = (unsigned int **)(v180 + 8);
            uint64_t v171 = v169 + 1;
            unint64_t v181 = (unint64_t)v169[1];
            if ((unint64_t)v168 < v181)
            {
              uint64_t v172 = 0x3F7FBE770000002ELL;
LABEL_70:
              *(void *)CFNumberRef v168 = v172;
              uint64_t v182 = v168 + 2;
LABEL_87:
              *uint64_t v169 = v182;
              uint64_t v88 = v166;
LABEL_88:

              goto LABEL_89;
            }
            uint64_t v183 = v181 - (void)v168;
            uint64_t v184 = v183 >> 2;
            if ((unint64_t)(v183 >> 2) <= 1) {
              uint64_t v184 = 1;
            }
            if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v185 = v184;
            }
            if (v185 >> 61) {
              sub_1C4949AA8();
            }
            CFNumberRef v186 = (unsigned int *)operator new(8 * v185);
            uint64_t v187 = &v186[2 * v185];
            uint64_t v188 = 0x3F7FBE770000002ELL;
          }
          else
          {
            objc_msgSend_boundsForStrokeIndex_(v104, v143, 0, v144, v145, v146);
            double v155 = v154;
            double v157 = v156;
            objc_msgSend_boundsForStrokeIndex_(v104, v158, 1, v159, v160, v161);
            float v27 = 0.5;
            double v164 = *(double *)(v500 + 512);
            if (v157 >= v164) {
              goto LABEL_88;
            }
            double v165 = *(double *)(v500 + 504);
            if (v155 >= v165 || v163 >= v164 || v162 >= v165 || v496 >= 0.25) {
              goto LABEL_88;
            }
            uint64_t v166 = v88;
            unint64_t v167 = (char *)&v64[3 * v63];
            CFNumberRef v168 = *v491;
            *((void *)v167 + 1) = *v491;
            uint64_t v169 = (unsigned int **)(v167 + 8);
            uint64_t v171 = v169 + 1;
            unint64_t v170 = (unint64_t)v169[1];
            if ((unint64_t)v168 < v170)
            {
              uint64_t v172 = 0x3F7FBE770000003ALL;
              goto LABEL_70;
            }
            uint64_t v189 = v170 - (void)v168;
            uint64_t v190 = v189 >> 2;
            if ((unint64_t)(v189 >> 2) <= 1) {
              uint64_t v190 = 1;
            }
            if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v191 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v191 = v190;
            }
            if (v191 >> 61) {
              sub_1C4949AA8();
            }
            CFNumberRef v186 = (unsigned int *)operator new(8 * v191);
            uint64_t v187 = &v186[2 * v191];
            uint64_t v188 = 0x3F7FBE770000003ALL;
          }
          *(void *)CFNumberRef v186 = v188;
          const char *v491 = v186;
          uint64_t v182 = v186 + 2;
          *uint64_t v169 = v186 + 2;
          const char *v171 = v187;
          if (v168) {
            operator delete(v168);
          }
          goto LABEL_87;
        }
        uint64_t v149 = *v491;
        uint64_t v150 = (unsigned int *)v64[3 * v63 + 1];
        while (2)
        {
          if (v149 == v150) {
            goto LABEL_28;
          }
          int v153 = *v149;
          if ((int)*v149 > 12288)
          {
            BOOL v151 = (v153 - 12289) < 2 || v153 == 20022;
            if (!v151) {
              goto LABEL_41;
            }
          }
          else if (v153 != 44 && v153 != 46)
          {
            goto LABEL_41;
          }
          float v152 = *((float *)v149 + 1) * 0.1;
          *((float *)v149 + 1) = v152;
LABEL_41:
          v149 += 2;
          continue;
        }
      }
LABEL_351:
      uint64_t v464 = (char *)__p;
      a1 = v500;
      if (__p)
      {
        uint64_t v465 = v508;
        uint64_t v28 = __p;
        if (v508 != __p)
        {
          id v466 = v508;
          do
          {
            id v468 = (void *)*((void *)v466 - 3);
            v466 -= 24;
            v467 = v468;
            if (v468)
            {
              *((void *)v465 - 2) = v467;
              operator delete(v467);
            }
            uint64_t v465 = v466;
          }
          while (v466 != v464);
          uint64_t v28 = __p;
        }
        uint64_t v508 = v464;
        operator delete(v28);
      }
      uint64_t v25 = v483 + v474;

      uint64_t v26 = v475 + 1;
    }
    while (v475 + 1 != v471);
  }

  return v25;
}

void sub_1C49836CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,void *a60)
{
  sub_1C4999C7C((uint64_t)&a57, (void *)a58);
  sub_1C496B66C(&a60);

  _Unwind_Resume(a1);
}

double sub_1C498394C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v8 = *(void **)(*(void *)(a2 + 232) + 48);
  if (!v8
    || (objc_msgSend_numberWithUnsignedInt_(NSNumber, (const char *)a2, a3, a4, a5, a6),
        uint64_t v10 = objc_claimAutoreleasedReturnValue(),
        objc_msgSend_objectForKeyedSubscript_(v8, v11, (uint64_t)v10, v12, v13, v14),
        uint64_t v15 = objc_claimAutoreleasedReturnValue(),
        v15,
        v10,
        !v15))
  {
    i2sh(a3, (uint64_t)__p);
    double result = *(double *)__p;
    *(_OWORD *)a1 = *(_OWORD *)__p;
    a1[2] = v69;
    return result;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v69 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v20 = *(void **)(*(void *)(a2 + 232) + 48);
  uint64_t v21 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v16, a3, v17, v18, v19);
  uint64_t v26 = objc_msgSend_objectForKeyedSubscript_(v20, v22, (uint64_t)v21, v23, v24, v25);
  uint64_t v60 = a1;

  uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v64, (uint64_t)v70, 16, v28);
  if (!v34) {
    goto LABEL_31;
  }
  uint64_t v35 = *(void *)v65;
  obuint64_t j = v26;
  do
  {
    for (uint64_t i = 0; i != v34; ++i)
    {
      if (*(void *)v65 != v35) {
        objc_enumerationMutation(obj);
      }
      int v38 = objc_msgSend_unsignedIntValue(*(void **)(*((void *)&v64 + 1) + 8 * i), v29, v30, v31, v32, v33);
      int v39 = v38;
      uint64_t v40 = (char *)__p[1];
      if (__p[1] < v69)
      {
        *(_DWORD *)__p[1] = v38;
        uint64_t v37 = v40 + 4;
        goto LABEL_7;
      }
      uint64_t v41 = __p[0];
      int64_t v42 = (char *)__p[1] - (char *)__p[0];
      int64_t v43 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 62) {
        sub_1C494A220();
      }
      uint64_t v45 = v69 - (char *)__p[0];
      if ((v69 - (char *)__p[0]) >> 1 > v44) {
        unint64_t v44 = v45 >> 1;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        if (v46 >> 62) {
          sub_1C4949AA8();
        }
        uint64_t v47 = operator new(4 * v46);
        uint64_t v48 = &v47[4 * v43];
        *uint64_t v48 = v39;
        uint64_t v37 = v48 + 1;
        int64_t v49 = v40 - v41;
        if (v40 == v41) {
          goto LABEL_28;
        }
LABEL_22:
        unint64_t v50 = v49 - 4;
        if (v50 < 0x2C) {
          goto LABEL_41;
        }
        if ((unint64_t)(v40 - v47 - v42) < 0x20) {
          goto LABEL_41;
        }
        uint64_t v51 = (v50 >> 2) + 1;
        uint64_t v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v53 = &v40[-v52];
        uint64_t v48 = (_DWORD *)((char *)v48 - v52);
        uint64_t v54 = &v47[4 * v43 - 16];
        uint64_t v55 = v40 - 16;
        uint64_t v56 = v51 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *uint64_t v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 8;
        }
        while (v56);
        uint64_t v40 = v53;
        if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_41:
          do
          {
            int v58 = *((_DWORD *)v40 - 1);
            v40 -= 4;
            *--uint64_t v48 = v58;
          }
          while (v40 != v41);
        }
        goto LABEL_28;
      }
      uint64_t v47 = 0;
      uint64_t v48 = (_DWORD *)(4 * v43);
      *(_DWORD *)(4 * v43) = v39;
      uint64_t v37 = (void *)(4 * v43 + 4);
      int64_t v49 = v40 - v41;
      if (v40 != v41) {
        goto LABEL_22;
      }
LABEL_28:
      __p[0] = v48;
      __p[1] = v37;
      uint64_t v69 = &v47[4 * v46];
      if (v41) {
        operator delete(v41);
      }
LABEL_7:
      __p[1] = v37;
    }
    uint64_t v26 = obj;
    uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v29, (uint64_t)&v64, (uint64_t)v70, 16, v33);
  }
  while (v34);
LABEL_31:

  sub_1C4B2FC08((uint64_t)__p, 0, (uint64_t)&v62);
  if (*((char *)v60 + 23) < 0) {
    operator delete(*v60);
  }
  double result = *(double *)&v62;
  *(_OWORD *)uint64_t v60 = v62;
  v60[2] = v63;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return result;
}

void sub_1C4983C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(char *)(v25 + 23) < 0)
  {
    operator delete(*(void **)v25);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operator==(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(double *)(a1 + 8) == *(double *)(a2 + 8)) {
    return objc_msgSend_isEqual_(*(void **)a1, (const char *)a2, *(void *)a2, a4, a5, a6);
  }
  else {
    return 0;
  }
}

BOOL operator<(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) < *(double *)(a2 + 8);
}

{
  return *(double *)(a1 + 8) < *(double *)(a2 + 8);
}

{
  return *(double *)(a1 + 104) < *(double *)(a2 + 104);
}

void sub_1C498406C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4984088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49840A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49842F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4985C14(_Unwind_Exception *a1)
{
  sub_1C49A1528(*(char **)(v1 + 520));
  uint64_t v5 = *(void *)(v1 + 560);
  if (v5)
  {
    uint64_t v6 = v5 - 16;
    uint64_t v7 = *(void *)(v5 - 8);
    if (v7)
    {
      uint64_t v8 = 24 * v7;
      do
      {

        v8 -= 24;
      }
      while (v8);
    }
    MEMORY[0x1C8786430](v6, 0x1080C801842DC26);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1C4985FB4(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  uint64_t v9 = (unint64_t *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 1)) {
    BOOL v10 = v8 - 1 > 0xFFFFFFFFFFFFFFFDLL;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 1;
    do
    {
      uint64_t v14 = *(void *)(a1 + 24) + v12;
      if (*(double *)(v14 + 24) == a4)
      {
        id v15 = *(id *)(v14 + 32);
        uint64_t v20 = v15;
        if (*(double *)(v14 + 40) == *(double *)&a3)
        {
          char isEqual = objc_msgSend_isEqual_(v15, v16, (uint64_t)a2, v17, v18, v19);

          if (isEqual) {
            goto LABEL_26;
          }
        }
        else
        {
        }
      }
      ++v13;
      unint64_t v8 = *v9;
      v12 += 24;
    }
    while (v13 < *v9 + 1);
  }
  if (v8 == *(void *)(a1 + 8))
  {
    uint64_t v9 = (unint64_t *)(a1 + 32);
    double v11 = *(double *)(*(void *)(a1 + 24) + 24 * *(void *)(a1 + 32));
    if (*(unsigned char *)a1)
    {
      if (v11 <= a4) {
        goto LABEL_26;
      }
    }
    else if (v11 >= a4)
    {
LABEL_26:
      uint64_t v34 = 0;
      goto LABEL_32;
    }
    id v25 = a2;
    uint64_t v23 = *(void *)(a1 + 24);
    uint64_t v24 = *(void *)(a1 + 32);
  }
  else
  {
    id v22 = a2;
    uint64_t v23 = *(void *)(a1 + 24);
    uint64_t v24 = *(void *)(a1 + 16) + 1;
    *(void *)(a1 + 16) = v24;
  }
  uint64_t v26 = v23 + 24 * v24;
  *(double *)uint64_t v26 = a4;
  float v27 = *(void **)(v26 + 8);
  *(void *)(v26 + 8) = a2;
  id v28 = a2;

  *(double *)(v26 + 16) = *(double *)&a3;
  sub_1C49A15AC(a1, *v9);
  unint64_t v29 = *(void *)(a1 + 16);
  *(void *)(a1 + 32) = v29;
  if (v29)
  {
    unint64_t v30 = v29 >> 1;
    unint64_t v31 = v29 - 1;
    if (v29 - 1 > v29 >> 1)
    {
      uint64_t v32 = *(void *)(a1 + 24);
      if (*(unsigned char *)a1)
      {
        uint64_t v33 = (double *)(v32 + 24 * v29 - 24);
        do
        {
          if (*v33 > *(double *)(v32 + 24 * v29))
          {
            *(void *)(a1 + 32) = v31;
            unint64_t v29 = v31;
          }
          --v31;
          v33 -= 3;
        }
        while (v31 > v30);
      }
      else
      {
        uint64_t v35 = (double *)(v32 + 24 * v29 - 24);
        do
        {
          if (*v35 < *(double *)(v32 + 24 * v29))
          {
            *(void *)(a1 + 32) = v31;
            unint64_t v29 = v31;
          }
          --v31;
          v35 -= 3;
        }
        while (v31 > v30);
      }
    }
  }
  uint64_t v34 = 1;
LABEL_32:

  return v34;
}

void sub_1C49861D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49861EC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C49863DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49863EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4986458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498646C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = objc_msgSend_segments(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  unint64_t v15 = objc_msgSend_count(v9, v10, v11, v12, v13, v14);
  unint64_t v16 = (unint64_t)&a2[v8];

  if (v16 >= v15)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v22 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      uint64_t v28 = *(void *)(a1 + 48);
      unint64_t v29 = objc_msgSend_segments(*(void **)(a1 + 32), v23, v24, v25, v26, v27);
      int v52 = 134218752;
      unint64_t v53 = v16;
      __int16 v54 = 2048;
      uint64_t v55 = a2;
      __int16 v56 = 2048;
      uint64_t v57 = v28;
      __int16 v58 = 2048;
      uint64_t v59 = objc_msgSend_count(v29, v30, v31, v32, v33, v34);
      _os_log_impl(&dword_1C492D000, v22, OS_LOG_TYPE_FAULT, "Incorrect index in segment decoding: index %ld (idx %ld + offset %ld) should be smaller than %ld, the number of segments on the group.", (uint8_t *)&v52, 0x2Au);
    }
  }
  uint64_t v35 = objc_msgSend_segments(*(void **)(a1 + 32), v17, v18, v19, v20, v21);
  uint64_t v40 = objc_msgSend_objectAtIndex_(v35, v36, v16, v37, v38, v39);

  if (v40)
  {
    unint64_t v46 = *(void **)(a1 + 40);
    uint64_t v47 = objc_msgSend_strokeIndexSet(v40, v41, v42, v43, v44, v45);
    objc_msgSend_addIndexes_(v46, v48, (uint64_t)v47, v49, v50, v51);
  }
}

void sub_1C498660C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4986620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4986630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4986A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C49893BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,void *a57)
{
  if (__p) {
    operator delete(__p);
  }
  if (a57) {
    operator delete(a57);
  }

  _Unwind_Resume(a1);
}

const void **sub_1C4989B6C(const void **a1)
{
  id v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

id sub_1C4989BA0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_activations(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v13 = objc_msgSend_characterObservations(v7, v8, v9, v10, v11, v12);
  uint64_t v18 = objc_msgSend_objectAtIndexedSubscript_(v13, v14, (uint64_t)a2, v15, v16, v17);

  return v18;
}

void sub_1C4989C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4989C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ***sub_1C4989C34(void ***a1)
{
  id v2 = *a1;
  if (*a1)
  {
    id v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = a1[1];
      do
      {
        uint64_t v8 = (char *)*(v5 - 5);
        v5 -= 5;
        uint64_t v7 = v8;
        if (v8)
        {
          uint64_t v9 = (char *)*(v3 - 4);
          uint64_t v6 = v7;
          if (v9 != v7)
          {
            uint64_t v10 = (char *)*(v3 - 4);
            do
            {
              uint64_t v12 = (void *)*((void *)v10 - 8);
              v10 -= 64;
              uint64_t v11 = v12;
              if (v12)
              {
                *((void *)v9 - 7) = v11;
                operator delete(v11);
              }
              uint64_t v9 = v10;
            }
            while (v10 != v7);
            uint64_t v6 = *v5;
          }
          *(v3 - 4) = v7;
          operator delete(v6);
        }
        id v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

const void **sub_1C4989CEC(const void **a1)
{
  id v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_1C4989D20(void *a1)
{
  id v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C498A20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

id sub_1C498A2DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v154 = a3;
  id v153 = a4;
  if (!a1)
  {
    uint64_t v28 = 0;
    goto LABEL_77;
  }
  id v152 = *(id *)(a1 + 16);
  objc_msgSend_recordInputDrawing_(v152, v8, (uint64_t)v7, v9, v10, v11);
  int shouldRunNextGenRecognizer = objc_msgSend_shouldRunNextGenRecognizer(*(void **)(a1 + 464), v12, v13, v14, v15, v16);
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v18 = (id)qword_1EA3C9F98;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = shouldRunNextGenRecognizer;
    _os_log_impl(&dword_1C492D000, v18, OS_LOG_TYPE_DEBUG, "CHRecognizer is running RNN recognition pipeline: %d", buf, 8u);
  }

  if (shouldRunNextGenRecognizer)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v19 = (id)qword_1EA3C9FC8;
    os_signpost_id_t v20 = os_signpost_id_generate(v19);

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v21 = (id)qword_1EA3C9FC8;
    id v22 = v21;
    unint64_t v23 = v20 - 1;
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C492D000, v22, OS_SIGNPOST_INTERVAL_BEGIN, v20, "CHRecognizerNextGenRecognition", "", buf, 2u);
    }

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v24 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v24, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognizerNextGenRecognition\"", buf, 2u);
    }

    uint64_t v28 = objc_msgSend__resultUsingNextGenerationPipelineWithDrawing_options_((void *)a1, v25, (uint64_t)v7, (uint64_t)v154, v26, v27);
    if (qword_1EA3CA000 == -1)
    {
      unint64_t v29 = (id)qword_1EA3C9FC8;
      if (v23 > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_22;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      unint64_t v29 = (id)qword_1EA3C9FC8;
      if (v23 > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_22;
      }
    }
    if (os_signpost_enabled(v29))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C492D000, v29, OS_SIGNPOST_INTERVAL_END, v20, "CHRecognizerNextGenRecognition", "", buf, 2u);
    }
LABEL_22:

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    unint64_t v30 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v30, OS_LOG_TYPE_DEFAULT, "END \"CHRecognizerNextGenRecognition\"", buf, 2u);
    }

    if (!*(void *)(a1 + 448) || !v28) {
      goto LABEL_48;
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v36 = (id)qword_1EA3C9FC8;
    os_signpost_id_t v37 = os_signpost_id_generate(v36);

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v38 = (id)qword_1EA3C9FC8;
    uint64_t v39 = v38;
    unint64_t v40 = v37 - 1;
    if (v37 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v38))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C492D000, v39, OS_SIGNPOST_INTERVAL_BEGIN, v37, "CHRecognizerPostProcessingBlock", "", buf, 2u);
    }

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v41 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v41, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognizerPostProcessingBlock\"", buf, 2u);
    }

    uint64_t v42 = sub_1C4981C3C(a1, v154);
    uint64_t v43 = [CHResultWithContext alloc];
    uint64_t v49 = objc_msgSend_contentType(*(void **)(a1 + 464), v44, v45, v46, v47, v48);
    int v52 = objc_msgSend_initWithResult_leftContext_contentType_(v43, v50, (uint64_t)v28, (uint64_t)v42, v49, v51);
    __int16 v56 = objc_msgSend_process_options_(*(void **)(a1 + 448), v53, (uint64_t)v52, (uint64_t)v154, v54, v55);
    uint64_t v62 = objc_msgSend_result(v56, v57, v58, v59, v60, v61);

    if (qword_1EA3CA000 == -1)
    {
      uint64_t v63 = (id)qword_1EA3C9FC8;
      if (v40 <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_41;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v63 = (id)qword_1EA3C9FC8;
      if (v40 <= 0xFFFFFFFFFFFFFFFDLL)
      {
LABEL_41:
        if (os_signpost_enabled(v63))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1C492D000, v63, OS_SIGNPOST_INTERVAL_END, v37, "CHRecognizerPostProcessingBlock", "", buf, 2u);
        }
      }
    }

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    long long v64 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v64, OS_LOG_TYPE_DEFAULT, "END \"CHRecognizerPostProcessingBlock\"", buf, 2u);
    }

    uint64_t v28 = (void *)v62;
LABEL_48:
    long long v65 = objc_msgSend_lastTokenStrokeIndexes(v28, v31, v32, v33, v34, v35);
    *(void *)(a1 + 408) = objc_msgSend_count(v65, v66, v67, v68, v69, v70);
    objc_msgSend_removeAllIndexes(*(void **)(a1 + 416), v71, v72, v73, v74, v75);
    objc_msgSend_addIndexes_(*(void **)(a1 + 416), v76, (uint64_t)v65, v77, v78, v79);
    goto LABEL_89;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v80 = (id)qword_1EA3C9FC8;
  os_signpost_id_t spid = os_signpost_id_generate(v80);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v81 = (id)qword_1EA3C9FC8;
  uint64_t v82 = v81;
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v81))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v82, OS_SIGNPOST_INTERVAL_BEGIN, spid, "CHRecognizerSegmentAndDecodeBlock", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v83 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C492D000, v83, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognizerSegmentAndDecodeBlock\"", buf, 2u);
  }

  id v84 = v7;
  id v85 = v154;
  id v86 = v153;
  uint64_t v87 = objc_opt_class();
  uint64_t v92 = objc_msgSend_generateSegmentsFromDrawing_(v87, v88, (uint64_t)v84, v89, v90, v91);
  *(void *)(a1 + 408) = 0;
  objc_msgSend_removeAllIndexes(*(void **)(a1 + 416), v93, v94, v95, v96, v97);
  uint64_t v98 = [CHDrawingSegmentGroup alloc];
  uint64_t v102 = objc_msgSend_initWithSegmentGroupIndex_segments_(v98, v99, 0, (uint64_t)v92, v100, v101);
  uint64_t v28 = sub_1C497E33C(a1, v84, v102, v85, v86);
  uint64_t v113 = objc_msgSend_strokeCount(v84, v103, v104, v105, v106, v107) - *(void *)(a1 + 408);
  if (v113 < 0)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    double v114 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v114, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v114, OS_LOG_TYPE_FAULT, "The first stroke index must be non-negative", buf, 2u);
    }
  }
  uint64_t v115 = objc_msgSend_supportedSegmentationStrategy(*(void **)(a1 + 464), v108, v109, v110, v111, v112, spid - 1);
  if (v115)
  {
    if (v115 == 1)
    {
      uint64_t v121 = *(void **)(a1 + 416);
      uint64_t v122 = objc_msgSend_strokeCount(v84, v116, v117, v118, v119, v120);
      objc_msgSend_addIndexesInRange_(v121, v123, 0, v122, v124, v125);
    }
  }
  else
  {
    if (!v84)
    {
      double v126 = 0;
      double v127 = 0;
      *(void *)long long buf = 0;
      double v156 = 0;
      uint64_t v157 = 0;
      goto LABEL_114;
    }
    objc_msgSend_strokeIndicesSortedByMinXCoordinate(v84, v116, v117, v118, v119, v120);
    while (1)
    {
      double v126 = *(void **)buf;
      double v127 = v156;
LABEL_114:
      if (v113 >= (unint64_t)(v127 - v126)) {
        break;
      }
      objc_msgSend_addIndex_(*(void **)(a1 + 416), v116, v126[v113++], v118, v119, v120);
    }
    if (v126)
    {
      double v156 = v126;
      operator delete(v126);
    }
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  double v129 = (id)qword_1EA3C9FC8;
  uint64_t v130 = v129;
  if (v150 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v129))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v130, OS_SIGNPOST_INTERVAL_END, spid, "CHRecognizerSegmentAndDecodeBlock", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  long long v65 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C492D000, v65, OS_LOG_TYPE_DEFAULT, "END \"CHRecognizerSegmentAndDecodeBlock\"", buf, 2u);
  }
LABEL_89:

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v131 = (id)qword_1EA3C9FC8;
  os_signpost_id_t v132 = os_signpost_id_generate(v131);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v133 = (id)qword_1EA3C9FC8;
  uint64_t v134 = v133;
  unint64_t v135 = v132 - 1;
  if (v132 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v133))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v134, OS_SIGNPOST_INTERVAL_BEGIN, v132, "CHRecognizerFilterLowProbabilityBlock", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v136 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C492D000, v136, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognizerFilterLowProbabilityBlock\"", buf, 2u);
  }

  if (objc_msgSend_shouldFilterLowProbabilityTranscriptionPaths(*(void **)(a1 + 464), v137, v138, v139, v140, v141))
  {
    uint64_t v147 = objc_msgSend_tokenizedResultWithFilteredPaths_(v28, v142, v143, v144, v145, v146, 0.5);

    uint64_t v28 = (void *)v147;
  }
  if (qword_1EA3CA000 == -1)
  {
    BOOL v148 = (id)qword_1EA3C9FC8;
    if (v135 <= 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_104;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    BOOL v148 = (id)qword_1EA3C9FC8;
    if (v135 <= 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_104:
      if (os_signpost_enabled(v148))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1C492D000, v148, OS_SIGNPOST_INTERVAL_END, v132, "CHRecognizerFilterLowProbabilityBlock", "", buf, 2u);
      }
    }
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v149 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C492D000, v149, OS_LOG_TYPE_DEFAULT, "END \"CHRecognizerFilterLowProbabilityBlock\"", buf, 2u);
  }

LABEL_77:
  return v28;
}

void sub_1C498B060(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }

  JUMPOUT(0x1C498B000);
}

void sub_1C498B19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498B1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498B414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

void sub_1C498B494(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  if (++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 3)
  {
    uint64_t v9 = objc_msgSend_substringFromIndex_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    *a7 = 1;
  }
}

void sub_1C498B764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1C498B7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498B7D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a1;
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = objc_msgSend_pointCount(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v13 = *(void *)(v6 + 40);
  if (v7)
  {
    id v14 = *(id *)(v6 + 32);
    os_signpost_id_t v20 = v14;
    if (v13)
    {
      objc_msgSend_bounds(v14, v15, v16, v17, v18, v19);
      BOOL v28 = v27 < *(double *)(v13 + 504) && v26 < *(double *)(v13 + 512);
      if (objc_msgSend_strokeCount(v20, v21, v22, v23, v24, v25) != 1) {
        BOOL v28 = 0;
      }

      if (v28)
      {
        uint64_t v35 = *(void ***)(v6 + 40);
        uint64_t v141 = objc_msgSend_strokeCount(*(void **)(v6 + 32), v30, v31, v32, v33, v34);
        if (v35)
        {
          id v150 = 0;
          uint64_t v139 = v35;
          uint64_t v137 = objc_msgSend__defaultPunctuationStringsOutputScores_maxCandidateCount_(v35, v36, (uint64_t)&v150, -1, v37, v38);
          id v145 = v150;
          uint64_t v39 = (void *)MEMORY[0x1E4F1CA48];
          uint64_t v45 = objc_msgSend_count(v137, v40, v41, v42, v43, v44);
          uint64_t v144 = objc_msgSend_arrayWithCapacity_(v39, v46, v45, v47, v48, v49);
          uint64_t v140 = objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E4F28D60], v50, 0, v141, v51, v52);
          uint64_t v143 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v53, v54, v55, v56, v57);
          double v142 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v58, v59, v60, v61, v62);
          long long v148 = 0u;
          long long v149 = 0u;
          long long v146 = 0u;
          long long v147 = 0u;
          obuint64_t j = v137;
          uint64_t v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v63, (uint64_t)&v146, (uint64_t)v153, 16, v64);
          if (v69)
          {
            uint64_t v70 = 0;
            uint64_t v71 = *(void *)v147;
            uint64_t v72 = (double *)MEMORY[0x1E4F1DB20];
            do
            {
              uint64_t v73 = 0;
              do
              {
                if (*(void *)v147 != v71) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v74 = *(void *)(*((void *)&v146 + 1) + 8 * v73);
                uint64_t v75 = objc_msgSend_objectAtIndex_(v145, v65, v70 + v73, v66, v67, v68);
                objc_msgSend_doubleValue(v75, v76, v77, v78, v79, v80);
                double v82 = v81;

                uint64_t v83 = v6;
                id v84 = [CHTokenizedTextResultToken alloc];
                uint64_t v90 = objc_msgSend_locale(v139[58], v85, v86, v87, v88, v89);
                uint64_t v92 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_(v84, v91, v74, (uint64_t)v140, 0, 8, v90, 4, v82, v82, v82, 1.0, *v72, v72[1], v72[2], v72[3], v141);

                uint64_t v6 = v83;
                id v152 = v92;
                uint64_t v96 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v93, (uint64_t)&v152, 1, v94, v95);
                objc_msgSend_addObject_(v144, v97, (uint64_t)v96, v98, v99, v100);

                uint64_t v105 = objc_msgSend_indexPathWithIndex_(MEMORY[0x1E4F28D58], v101, v70 + v73, v102, v103, v104);
                objc_msgSend_addObject_(v143, v106, (uint64_t)v105, v107, v108, v109);

                double v114 = objc_msgSend_objectAtIndex_(v145, v110, v70 + v73, v111, v112, v113);
                objc_msgSend_addObject_(v142, v115, (uint64_t)v114, v116, v117, v118);

                ++v73;
              }
              while (v69 != v73);
              uint64_t v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v65, (uint64_t)&v146, (uint64_t)v153, 16, v68);
              v70 += v73;
            }
            while (v69);
          }

          uint64_t v119 = [CHTokenizedResultColumn alloc];
          uint64_t v124 = objc_msgSend_initWithTokenRows_(v119, v120, (uint64_t)v144, v121, v122, v123);
          uint64_t v125 = [CHTokenizedTextResult alloc];
          BOOL v151 = v124;
          double v129 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v126, (uint64_t)&v151, 1, v127, v128);
          uint64_t isMinimalDrawingResult_baseWritingDirection = objc_msgSend_initWithTokenColumns_transcriptionPaths_scores_recognizerGenerationIdentifier_isMinimalDrawingResult_baseWritingDirection_(v125, v130, (uint64_t)v129, (uint64_t)v143, (uint64_t)v142, 1, 1, 0);
        }
        else
        {
          uint64_t isMinimalDrawingResult_baseWritingDirection = 0;
        }
        uint64_t v132 = *(void *)(*(void *)(v6 + 72) + 8);
        uint64_t v133 = *(void **)(v132 + 40);
        *(void *)(v132 + 40) = isMinimalDrawingResult_baseWritingDirection;

        return;
      }
    }
    else
    {
    }
    uint64_t v134 = sub_1C498A2DC(*(void *)(v6 + 40), *(void **)(v6 + 32), *(void **)(v6 + 56), *(void **)(v6 + 64));
    uint64_t v135 = *(void *)(*(void *)(v6 + 72) + 8);
    uint64_t v136 = *(void **)(v135 + 40);
    *(void *)(v135 + 40) = v134;
  }
  else
  {
    unint64_t v29 = *(void **)(v13 + 416);
    objc_msgSend_removeAllIndexes(v29, v8, v9, v10, v11, v12);
  }
}

void sub_1C498BC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C498BF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498BF34(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v218[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = objc_msgSend_pointCount(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v13 = *(void *)(a1 + 40);
  if (v7)
  {
    id v14 = *(id *)(a1 + 32);
    os_signpost_id_t v20 = v14;
    if (v13)
    {
      objc_msgSend_bounds(v14, v15, v16, v17, v18, v19);
      BOOL v28 = v27 < *(double *)(v13 + 504) && v26 < *(double *)(v13 + 512);
      if (objc_msgSend_strokeCount(v20, v21, v22, v23, v24, v25) != 1) {
        BOOL v28 = 0;
      }

      if (v28)
      {
        uint64_t v35 = *(void **)(a1 + 40);
        uint64_t v196 = a1;
        uint64_t v36 = objc_msgSend_strokeCount(*(void **)(a1 + 32), v30, v31, v32, v33, v34);
        if (v35)
        {
          uint64_t v40 = v36;
          id v210 = 0;
          id v197 = objc_msgSend__defaultPunctuationStringsOutputScores_maxCandidateCount_(v35, v37, (uint64_t)&v210, -1, v38, v39);
          id v203 = v210;
          uint64_t v41 = (void *)MEMORY[0x1E4F1CA48];
          uint64_t v47 = objc_msgSend_count(v197, v42, v43, v44, v45, v46);
          uint64_t v200 = objc_msgSend_arrayWithCapacity_(v41, v48, v47, v49, v50, v51);
          uint64_t v56 = objc_msgSend_numberWithInt_(NSNumber, v52, 0, v53, v54, v55);
          v218[0] = v56;
          uint64_t v201 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v57, (uint64_t)v218, 1, v58, v59);

          uint64_t v202 = objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E4F28D60], v60, 0, v40, v61, v62);
          long long v208 = 0u;
          long long v209 = 0u;
          long long v206 = 0u;
          long long v207 = 0u;
          obuint64_t j = v197;
          uint64_t v65 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v63, (uint64_t)&v206, (uint64_t)buf, 16, v64);
          if (v65)
          {
            uint64_t v205 = 0;
            uint64_t v199 = *(void *)v207;
            do
            {
              uint64_t v204 = v65;
              for (uint64_t i = 0; i != v204; ++i)
              {
                if (*(void *)v207 != v199) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v72 = *(void **)(*((void *)&v206 + 1) + 8 * i);
                uint64_t v73 = (void *)MEMORY[0x1E4F29238];
                uint64_t v74 = objc_msgSend_length(v72, v66, v67, v68, v69, v70);
                uint64_t v78 = objc_msgSend_valueWithRange_(v73, v75, 0, v74, v76, v77);
                uint64_t v216 = v78;
                double v82 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v79, (uint64_t)&v216, 1, v80, v81);

                uint64_t v87 = objc_msgSend_objectAtIndex_(v203, v83, v205 + i, v84, v85, v86);
                objc_msgSend_doubleValue(v87, v88, v89, v90, v91, v92);
                double v94 = v93;

                uint64_t v100 = objc_msgSend_numberWithDouble_(NSNumber, v95, v96, v97, v98, v99, v94);
                uint64_t v215 = v100;
                uint64_t v104 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v101, (uint64_t)&v215, 1, v102, v103);

                uint64_t v110 = objc_msgSend_numberWithDouble_(NSNumber, v105, v106, v107, v108, v109, v94);
                uint64_t v214 = v110;
                double v114 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v111, (uint64_t)&v214, 1, v112, v113);

                uint64_t v119 = objc_msgSend_numberWithBool_(NSNumber, v115, 0, v116, v117, v118);
                uint64_t v213 = v119;
                uint64_t v123 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v120, (uint64_t)&v213, 1, v121, v122);

                uint64_t v128 = objc_msgSend_numberWithBool_(NSNumber, v124, 1, v125, v126, v127);
                uint64_t v212 = v128;
                uint64_t v132 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v129, (uint64_t)&v212, 1, v130, v131);

                uint64_t v211 = v202;
                uint64_t v136 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v133, (uint64_t)&v211, 1, v134, v135);
                uint64_t v137 = [CHTextRecognitionResult alloc];
                LOBYTE(v195) = 0;
                isTextReplacement = objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v137, v138, (uint64_t)v72, (uint64_t)v82, (uint64_t)v201, (uint64_t)v104, v114, v136, v94, v123, v132, 0, 0, v195);
                objc_msgSend_addObject_(v200, v140, (uint64_t)isTextReplacement, v141, v142, v143);
              }
              uint64_t v65 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v66, (uint64_t)&v206, (uint64_t)buf, 16, v70);
              v205 += i;
            }
            while (v65);
          }
        }
        else
        {
          uint64_t v200 = 0;
        }
        uint64_t v144 = *(void *)(*(void *)(v196 + 64) + 8);
        id v145 = *(void **)(v144 + 40);
        *(void *)(v144 + 40) = v200;

        *(void *)(*(void *)(v196 + 40) + 408) = objc_msgSend_strokeCount(*(void **)(v196 + 32), v146, v147, v148, v149, v150);
        objc_msgSend_removeAllIndexes(*(void **)(*(void *)(v196 + 40) + 416), v151, v152, v153, v154, v155);
        uint64_t v159 = *(void *)(v196 + 40);
        uint64_t v161 = *(void *)(v159 + 408);
        uint64_t v160 = *(void **)(v159 + 416);
        objc_msgSend_addIndexesInRange_(v160, v156, 0, v161, v157, v158);
        return;
      }
    }
    else
    {
    }
    switch(objc_msgSend_mode(*(void **)(*(void *)(a1 + 40) + 464), v30, v31, v32, v33, v34))
    {
      case 1u:
        uint64_t v169 = *(void **)(a1 + 48);
        if (v169)
        {
          unint64_t v170 = objc_msgSend_objectForKeyedSubscript_(v169, v162, (uint64_t)CHRecognitionOptionDrawingAnchorPoint, v163, v164, v165);

          if (v170) {
            goto LABEL_26;
          }
          objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E4F1CA60], v171, *(void *)(a1 + 48), v172, v173, v174);
        }
        else
        {
          objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E4F1CA60], v162, 0, v163, v164, v165);
        unint64_t v185 = };
        unint64_t v191 = objc_msgSend_valueWithPoint_(MEMORY[0x1E4F29238], v186, v187, v188, v189, v190, 0.0, -8.0);
        objc_msgSend_setObject_forKeyedSubscript_(v185, v192, (uint64_t)v191, (uint64_t)CHRecognitionOptionDrawingAnchorPoint, v193, v194);

        goto LABEL_26;
      case 2u:
      case 4u:
      case 5u:
      case 6u:
LABEL_26:
        uint64_t v166 = sub_1C498C970(*(void *)(a1 + 40), *(void **)(a1 + 32), *(void **)(a1 + 48), *(void **)(a1 + 56));
        uint64_t v167 = *(void *)(*(void *)(a1 + 64) + 8);
        CFNumberRef v168 = *(void **)(v167 + 40);
        *(void *)(v167 + 40) = v166;

        return;
      case 3u:
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v175 = (id)qword_1EA3C9FC8;
        os_signpost_id_t v176 = os_signpost_id_generate(v175);

        if (qword_1EA3CA000 == -1)
        {
          id v177 = (id)qword_1EA3C9FC8;
          unint64_t v178 = v176 - 1;
          if (v176 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
            goto LABEL_38;
          }
        }
        else
        {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          id v177 = (id)qword_1EA3C9FC8;
          unint64_t v178 = v176 - 1;
          if (v176 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
            goto LABEL_38;
          }
        }
        if (os_signpost_enabled(v177))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1C492D000, v177, OS_SIGNPOST_INTERVAL_BEGIN, v176, "CHSketchRecognition", "", buf, 2u);
        }
LABEL_38:

        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        unsigned int v179 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C492D000, v179, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHSketchRecognition\"", buf, 2u);
        }

        uint64_t v180 = sub_1C49740AC(*(void **)(a1 + 40), *(void **)(a1 + 32), *(void **)(a1 + 48), *(void **)(a1 + 56));
        uint64_t v181 = *(void *)(*(void *)(a1 + 64) + 8);
        uint64_t v182 = *(void **)(v181 + 40);
        *(void *)(v181 + 40) = v180;

        if (qword_1EA3CA000 == -1)
        {
          uint64_t v183 = (id)qword_1EA3C9FC8;
          if (v178 > 0xFFFFFFFFFFFFFFFDLL) {
            goto LABEL_46;
          }
        }
        else
        {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          uint64_t v183 = (id)qword_1EA3C9FC8;
          if (v178 > 0xFFFFFFFFFFFFFFFDLL) {
            goto LABEL_46;
          }
        }
        if (os_signpost_enabled(v183))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1C492D000, v183, OS_SIGNPOST_INTERVAL_END, v176, "CHSketchRecognition", "", buf, 2u);
        }
LABEL_46:

        if (qword_1EA3CA000 == -1)
        {
          uint64_t v184 = (id)qword_1EA3C9F90[0];
          if (!os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_49;
          }
        }
        else
        {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          uint64_t v184 = (id)qword_1EA3C9F90[0];
          if (!os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
          {
LABEL_49:

            return;
          }
        }
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v184, OS_LOG_TYPE_DEFAULT, "END \"CHSketchRecognition\"", buf, 2u);
        goto LABEL_49;
      default:
        return;
    }
  }
  unint64_t v29 = *(void **)(v13 + 416);
  objc_msgSend_removeAllIndexes(v29, v8, v9, v10, v11, v12);
}

void sub_1C498C7FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498C810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498C820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

id sub_1C498C970(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = v7;
    id v11 = v8;
    id v12 = v9;
    uint64_t v13 = sub_1C498A2DC(a1, v10, v11, v12);

    uint64_t v18 = objc_msgSend_textRecognitionResultArrayGivenHistory_(v13, v14, (uint64_t)&stru_1F20141C8, v15, v16, v17);
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

void sub_1C498CA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498CA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498CAC4(void *a1, unsigned int **a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10 = *a3;
  id v9 = a3[1];
  *(_OWORD *)uint64_t v108 = 0u;
  *(_OWORD *)uint64_t v109 = 0u;
  for (int i = 1065353216; v10 != v9; ++v10)
    sub_1C49A1980((uint64_t)v108, v10, v10);
  uint64_t v100 = a1;
  uint64_t v101 = a2;
  __p = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  *(_OWORD *)uint64_t v102 = 0u;
  *(_OWORD *)uint64_t v103 = 0u;
  int v104 = 1065353216;
  id v11 = *a2;
  id v12 = a2[1];
  if (*a2 == v12 || (int8x8_t v13 = (int8x8_t)v108[1], !v108[1]))
  {
    uint64_t v42 = 0;
    double v43 = 1.0;
    uint64_t v45 = *a3;
    uint64_t v44 = a3[1];
    if (v45 == v44) {
      goto LABEL_106;
    }
    while (1)
    {
LABEL_57:
      unint64_t v46 = *v45;
      if (v102[1])
      {
        uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v102[1]);
        v47.i16[0] = vaddlv_u8(v47);
        if (v47.u32[0] > 1uLL)
        {
          unint64_t v48 = *v45;
          if (v102[1] <= (void *)v46) {
            unint64_t v48 = v46 % (unint64_t)v102[1];
          }
        }
        else
        {
          unint64_t v48 = (LODWORD(v102[1]) - 1) & v46;
        }
        uint64_t v49 = (uint64_t **)*((void *)v102[0] + v48);
        if (v49)
        {
          uint64_t v50 = *v49;
          if (v50)
          {
            if (v47.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v52 = v50[1];
                if (v52 == v46)
                {
                  if (*((_DWORD *)v50 + 4) == v46) {
                    goto LABEL_94;
                  }
                }
                else if ((v52 & ((unint64_t)v102[1] - 1)) != v48)
                {
                  goto LABEL_77;
                }
                uint64_t v50 = (uint64_t *)*v50;
                if (!v50) {
                  goto LABEL_77;
                }
              }
            }
            do
            {
              unint64_t v51 = v50[1];
              if (v51 == v46)
              {
                if (*((_DWORD *)v50 + 4) == v46) {
                  goto LABEL_94;
                }
              }
              else
              {
                if ((void *)v51 >= v102[1]) {
                  v51 %= (unint64_t)v102[1];
                }
                if (v51 != v48) {
                  break;
                }
              }
              uint64_t v50 = (uint64_t *)*v50;
            }
            while (v50);
          }
        }
      }
LABEL_77:
      float v53 = v43;
      if (v42 < v107)
      {
        *(_DWORD *)uint64_t v42 = v46;
        v42[1] = v53;
        uint64_t v54 = (char *)(v42 + 2);
        goto LABEL_93;
      }
      uint64_t v55 = (float *)__p;
      int64_t v56 = (char *)v42 - (unsigned char *)__p;
      uint64_t v57 = ((char *)v42 - (unsigned char *)__p) >> 3;
      unint64_t v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 61) {
        sub_1C494A220();
      }
      uint64_t v59 = (char *)v107 - (unsigned char *)__p;
      if (((char *)v107 - (unsigned char *)__p) >> 2 > v58) {
        unint64_t v58 = v59 >> 2;
      }
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v60 = v58;
      }
      if (v60)
      {
        if (v60 >> 61) {
          sub_1C4949AA8();
        }
        uint64_t v61 = operator new(8 * v60);
        uint64_t v62 = &v61[8 * v57];
        *(_DWORD *)uint64_t v62 = v46;
        *((float *)v62 + 1) = v53;
        int64_t v63 = (char *)v42 - (char *)v55;
        if (v42 != v55)
        {
LABEL_88:
          unint64_t v64 = v63 - 8;
          if (v64 < 0x168
            || (unint64_t v68 = ((char *)(v42 - 2) - (char *)v55) & 0xFFFFFFFFFFFFFFF8, &v61[v56 - 8 - v68] > &v61[v56 - 8])
            || (float *)((char *)v42 - v68 - 8) > v42 - 2
            || (unint64_t)((char *)v42 - v61 - v56) < 0x20)
          {
            uint64_t v65 = v42;
            uint64_t v66 = v62;
          }
          else
          {
            uint64_t v69 = (v64 >> 3) + 1;
            uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v65 = &v42[v70 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v66 = &v62[-v70];
            uint64_t v71 = &v61[8 * v57 - 16];
            uint64_t v72 = v42 - 4;
            uint64_t v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v74 = *(_OWORD *)v72;
              *(v71 - 1) = *((_OWORD *)v72 - 1);
              *uint64_t v71 = v74;
              v71 -= 2;
              v72 -= 8;
              v73 -= 4;
            }
            while (v73);
            if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              uint64_t v42 = (float *)__p;
              uint64_t v54 = v62 + 8;
              __p = v66;
              uint64_t v106 = v62 + 8;
              uint64_t v107 = (float *)&v61[8 * v60];
              if (!v42) {
                goto LABEL_93;
              }
LABEL_92:
              operator delete(v42);
              goto LABEL_93;
            }
          }
          do
          {
            uint64_t v67 = *((void *)v65 - 1);
            v65 -= 2;
            *((void *)v66 - 1) = v67;
            v66 -= 8;
          }
          while (v65 != v55);
          goto LABEL_91;
        }
      }
      else
      {
        uint64_t v61 = 0;
        uint64_t v62 = (char *)(8 * v57);
        *(_DWORD *)uint64_t v62 = v46;
        *((float *)v62 + 1) = v53;
        int64_t v63 = (char *)v42 - (char *)v55;
        if (v42 != v55) {
          goto LABEL_88;
        }
      }
      uint64_t v54 = v62 + 8;
      __p = v62;
      uint64_t v106 = v62 + 8;
      uint64_t v107 = (float *)&v61[8 * v60];
      if (v42) {
        goto LABEL_92;
      }
LABEL_93:
      uint64_t v106 = v54;
      double v43 = v43 * 0.9;
      uint64_t v42 = (float *)v54;
LABEL_94:
      if (++v45 == v44) {
        goto LABEL_106;
      }
    }
  }
LABEL_5:
  unint64_t v14 = *v11;
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v13);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v16 = *v11;
    if (*(void *)&v13 <= v14) {
      unint64_t v16 = v14 % *(void *)&v13;
    }
  }
  else
  {
    unint64_t v16 = (v13.i32[0] - 1) & v14;
  }
  uint64_t v17 = (uint64_t **)*((void *)v108[0] + v16);
  if (v17)
  {
    uint64_t v18 = *v17;
    if (v18)
    {
      if (v15.u32[0] < 2uLL)
      {
        uint64_t v19 = *(void *)&v13 - 1;
        while (1)
        {
          uint64_t v21 = v18[1];
          if (v21 == v14)
          {
            if (*((_DWORD *)v18 + 4) == v14) {
              goto LABEL_25;
            }
          }
          else if ((v21 & v19) != v16)
          {
            goto LABEL_39;
          }
          uint64_t v18 = (uint64_t *)*v18;
          if (!v18) {
            goto LABEL_39;
          }
        }
      }
      do
      {
        unint64_t v20 = v18[1];
        if (v20 == v14)
        {
          if (*((_DWORD *)v18 + 4) == v14)
          {
LABEL_25:
            uint64_t v22 = v106;
            if (v106 < (void *)v107)
            {
              *uint64_t v106 = *(void *)v11;
              uint64_t v23 = (uint64_t)(v22 + 8);
LABEL_38:
              uint64_t v106 = (void *)v23;
              sub_1C49A1980((uint64_t)v102, v11, v11);
              break;
            }
            uint64_t v24 = __p;
            int64_t v25 = (char *)v106 - (unsigned char *)__p;
            uint64_t v26 = ((char *)v106 - (unsigned char *)__p) >> 3;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              sub_1C494A220();
            }
            uint64_t v28 = (char *)v107 - (unsigned char *)__p;
            if (((char *)v107 - (unsigned char *)__p) >> 2 > v27) {
              unint64_t v27 = v28 >> 2;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              if (v29 >> 61) {
                sub_1C4949AA8();
              }
              unint64_t v30 = operator new(8 * v29);
              uint64_t v31 = &v30[8 * v26];
              void *v31 = *(void *)v11;
              uint64_t v23 = (uint64_t)(v31 + 1);
              int64_t v32 = v22 - v24;
              if (v22 == v24) {
                goto LABEL_36;
              }
LABEL_43:
              unint64_t v33 = v32 - 8;
              if (v33 < 0x58) {
                goto LABEL_147;
              }
              if ((unint64_t)(v22 - v30 - v25) < 0x20) {
                goto LABEL_147;
              }
              uint64_t v34 = (v33 >> 3) + 1;
              uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v36 = &v22[-v35];
              uint64_t v31 = (void *)((char *)v31 - v35);
              uint64_t v37 = &v30[8 * v26 - 16];
              uint64_t v38 = (long long *)(v22 - 16);
              uint64_t v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v40 = *v38;
                *(v37 - 1) = *(v38 - 1);
                *uint64_t v37 = v40;
                v37 -= 2;
                v38 -= 2;
                v39 -= 4;
              }
              while (v39);
              uint64_t v22 = v36;
              if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_147:
                do
                {
                  uint64_t v41 = *((void *)v22 - 1);
                  v22 -= 8;
                  *--uint64_t v31 = v41;
                }
                while (v22 != v24);
              }
              uint64_t v22 = __p;
              __p = v31;
              uint64_t v106 = (void *)v23;
              uint64_t v107 = (float *)&v30[8 * v29];
              if (!v22) {
                goto LABEL_38;
              }
            }
            else
            {
              unint64_t v30 = 0;
              uint64_t v31 = (void *)(8 * v26);
              *(void *)(8 * v26) = *(void *)v11;
              uint64_t v23 = 8 * v26 + 8;
              int64_t v32 = v22 - v24;
              if (v22 != v24) {
                goto LABEL_43;
              }
LABEL_36:
              __p = v31;
              uint64_t v106 = (void *)v23;
              uint64_t v107 = (float *)&v30[8 * v29];
              if (!v22) {
                goto LABEL_38;
              }
            }
            operator delete(v22);
            goto LABEL_38;
          }
        }
        else
        {
          if (v20 >= *(void *)&v13) {
            v20 %= *(void *)&v13;
          }
          if (v20 != v16) {
            break;
          }
        }
        uint64_t v18 = (uint64_t *)*v18;
      }
      while (v18);
    }
  }
LABEL_39:
  while (1)
  {
    v11 += 2;
    if (v11 == v12) {
      break;
    }
    int8x8_t v13 = (int8x8_t)v108[1];
    if (v108[1]) {
      goto LABEL_5;
    }
  }
  uint64_t v42 = (float *)v106;
  if (v106 == __p)
  {
    double v43 = 1.0;
    uint64_t v45 = *a3;
    uint64_t v44 = a3[1];
    if (v45 != v44) {
      goto LABEL_57;
    }
  }
  else
  {
    double v43 = *((float *)v106 - 1);
    uint64_t v45 = *a3;
    uint64_t v44 = a3[1];
    if (v45 != v44) {
      goto LABEL_57;
    }
  }
LABEL_106:
  uint64_t v75 = v100;
  unint64_t v76 = objc_msgSend__effectiveMaxRecognitionResultCount(v100, (const char *)a2, (uint64_t)a3, a4, a5, a6, v100);
  double v82 = (char *)__p;
  unint64_t v83 = ((char *)v106 - (unsigned char *)__p) >> 3;
  if (v76 < v83)
  {
    unint64_t v83 = objc_msgSend__effectiveMaxRecognitionResultCount(v75, v77, v78, v79, v80, v81);
    double v82 = (char *)__p;
  }
  uint64_t v84 = &v82[8 * v83];
  uint64_t v85 = (uint64_t)v101[2];
  uint64_t v86 = (char *)*v101;
  if (v83 <= (v85 - (uint64_t)*v101) >> 3)
  {
    uint64_t v89 = (char *)v101[1];
    unint64_t v90 = (v89 - v86) >> 3;
    if (v90 < v83)
    {
      uint64_t v91 = &v82[8 * v90];
      if (v89 != v86)
      {
        memmove(v86, v82, 8 * v90);
        uint64_t v86 = (char *)v101[1];
      }
      int64_t v92 = v84 - v91;
      if (v84 == v91)
      {
        v101[1] = (unsigned int *)&v86[v92];
        double v93 = v103[0];
        if (!v103[0]) {
          goto LABEL_129;
        }
      }
      else
      {
        memmove(v86, v91, v84 - v91);
        v101[1] = (unsigned int *)&v86[v92];
        double v93 = v103[0];
        if (!v103[0]) {
          goto LABEL_129;
        }
      }
      goto LABEL_128;
    }
  }
  else
  {
    if (v86)
    {
      v101[1] = (unsigned int *)v86;
      operator delete(v86);
      uint64_t v85 = 0;
      *uint64_t v101 = 0;
      v101[1] = 0;
      v101[2] = 0;
    }
    if (v83 >> 61) {
      goto LABEL_142;
    }
    uint64_t v87 = v85 >> 2;
    if (v85 >> 2 <= v83) {
      uint64_t v87 = v83;
    }
    unint64_t v88 = (unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v87;
    if (v88 >> 61) {
LABEL_142:
    }
      sub_1C494A220();
    uint64_t v86 = (char *)operator new(8 * v88);
    *uint64_t v101 = (unsigned int *)v86;
    v101[1] = (unsigned int *)v86;
    v101[2] = (unsigned int *)&v86[8 * v88];
  }
  uint64_t v94 = 8 * v83;
  if (v84 != v82) {
    memmove(v86, v82, v84 - v82);
  }
  v101[1] = (unsigned int *)&v86[v94];
  double v93 = v103[0];
  if (v103[0])
  {
    do
    {
LABEL_128:
      uint64_t v95 = (void *)*v93;
      operator delete(v93);
      double v93 = v95;
    }
    while (v95);
  }
LABEL_129:
  uint64_t v96 = v102[0];
  v102[0] = 0;
  if (v96) {
    operator delete(v96);
  }
  if (__p)
  {
    uint64_t v106 = __p;
    operator delete(__p);
  }
  uint64_t v97 = v109[0];
  if (v109[0])
  {
    do
    {
      uint64_t v98 = (void *)*v97;
      operator delete(v97);
      uint64_t v97 = v98;
    }
    while (v98);
  }
  uint64_t v99 = v108[0];
  v108[0] = 0;
  if (v99) {
    operator delete(v99);
  }
}

void sub_1C498D26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1C498D2E0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1C498D2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *__p)
{
  uint64_t v22 = __p;
  if (__p)
  {
    do
    {
      uint64_t v23 = (void *)*v22;
      operator delete(v22);
      uint64_t v22 = v23;
    }
    while (v23);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C498D2E0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      operator delete(v2);
      id v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_1C498D32C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (a3 >= 1)
  {
    uint64_t v4 = *a2;
    if (a2[1] != *a2)
    {
      uint64_t v5 = a1;
      unint64_t v6 = 0;
      uint64_t v54 = a1;
      while (1)
      {
        uint64_t v7 = *(unsigned int *)(v4 + 8 * v6);
        id v12 = *(id *)(*(void *)(v5 + 232) + 48);
        if (!v12
          || (objc_msgSend_numberWithUnsignedInt_(NSNumber, v8, v7, v9, v10, v11),
              int8x8_t v13 = objc_claimAutoreleasedReturnValue(),
              objc_msgSend_objectForKeyedSubscript_(v12, v14, (uint64_t)v13, v15, v16, v17),
              uint64_t v18 = objc_claimAutoreleasedReturnValue(),
              BOOL v19 = v18 == 0,
              v18,
              v13,
              v19))
        {
          uint64_t v28 = objc_msgSend_expectedMaxDotCount_(CHCharacterSetRules, v8, v7, v9, v10, v11, v54);
        }
        else
        {
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          unint64_t v20 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v8, v7, v9, v10, v11);
          int64_t v25 = objc_msgSend_objectForKeyedSubscript_(v12, v21, (uint64_t)v20, v22, v23, v24);

          uint64_t v28 = 0;
          uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v56, (uint64_t)v60, 16, v27);
          if (v34)
          {
            uint64_t v35 = *(void *)v57;
            do
            {
              uint64_t v36 = 0;
              do
              {
                if (*(void *)v57 != v35) {
                  objc_enumerationMutation(v25);
                }
                uint64_t v37 = objc_msgSend_unsignedIntValue(*(void **)(*((void *)&v56 + 1) + 8 * v36), v29, v30, v31, v32, v33, v54);
                v28 += objc_msgSend_expectedMaxDotCount_(CHCharacterSetRules, v38, v37, v39, v40, v41);
                ++v36;
              }
              while (v34 != v36);
              uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v29, (uint64_t)&v56, (uint64_t)v60, 16, v33);
            }
            while (v34);
          }

          uint64_t v5 = v54;
        }
        if (!objc_msgSend_shouldTreatAllSmallStrokesAsPunctuation(*(void **)(v5 + 464), v42, v43, v44, v45, v46, v54))break; {
        if (!v28)
        }
        {
          uint64_t v47 = *a2 + 8 * v6;
          float v49 = *(float *)(v47 + 4);
          unint64_t v48 = (float *)(v47 + 4);
          double v50 = v49 * 0.1;
LABEL_19:
          float v53 = v50;
          *unint64_t v48 = v53;
        }

        ++v6;
        uint64_t v4 = *a2;
        if (v6 >= (a2[1] - *a2) >> 3) {
          return;
        }
      }
      uint64_t v51 = *a2 + 8 * v6;
      float v52 = *(float *)(v51 + 4);
      unint64_t v48 = (float *)(v51 + 4);
      double v50 = pow(0.1, (double)((a3 - v28) & ~((a3 - v28) >> 63))) * v52;
      goto LABEL_19;
    }
  }
}

void sub_1C498D588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498D5D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v42 = 0;
  uint64_t v43 = &v42;
  uint64_t v44 = 0x2020000000;
  char v45 = 0;
  objc_msgSend_boundsForStrokeIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  CGFloat x = v46.origin.x;
  CGFloat y = v46.origin.y;
  CGFloat width = v46.size.width;
  CGFloat height = v46.size.height;
  double MidX = CGRectGetMidX(v46);
  v47.origin.CGFloat x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = width;
  v47.size.CGFloat height = height;
  double MidY = CGRectGetMidY(v47);
  uint64_t v13 = *(void *)(a1 + 56);
  if ((unint64_t)(*(void *)(a1 + 64) - v13) >= 0x11)
  {
    uint64_t v14 = 0;
    double v15 = 3.40282347e38;
    while (1)
    {
      uint64_t v18 = (float64x2_t *)(v13 + 16 * v14);
      float64x2_t v34 = *v18;
      float64x2_t v35 = v18[1];
      BOOL v19 = objc_opt_class();
      objc_msgSend_threePointsOrientationWithOrigin_pointA_pointB_(v19, v20, v21, v22, v23, v24, MidX, MidY, *(_OWORD *)&v35, *(_OWORD *)&v34);
      if (v25 > 0.0) {
        break;
      }
      float32x2_t v26 = vsub_f32(vcvt_f32_f64(v35), vcvt_f32_f64(v34));
      float v27 = sqrtf(vaddv_f32(vmul_f32(v26, v26)));
      if (v27 > 0.0) {
        double v25 = v25 / v27;
      }
      double v16 = -v25;
      if (v15 >= v16) {
        double v15 = v16;
      }
      uint64_t v13 = *(void *)(a1 + 56);
      unint64_t v17 = v14 + 2;
      ++v14;
      if (v17 >= (*(void *)(a1 + 64) - v13) >> 4) {
        goto LABEL_10;
      }
    }
    *((unsigned char *)v43 + 24) = 1;
LABEL_13:
    ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    goto LABEL_14;
  }
  double v15 = 3.40282347e38;
LABEL_10:
  *((unsigned char *)v43 + 24) = 1;
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  v36[2] = sub_1C498D848;
  v36[3] = &unk_1E64E15C8;
  uint64_t v28 = *(void **)(a1 + 40);
  id v29 = *(id *)(a1 + 32);
  double v39 = MidX;
  double v40 = MidY;
  double v41 = v15;
  id v37 = v29;
  uint64_t v38 = &v42;
  objc_msgSend_enumerateIndexesUsingBlock_(v28, v30, (uint64_t)v36, v31, v32, v33);

  if (*((unsigned char *)v43 + 24)) {
    goto LABEL_13;
  }
LABEL_14:
  _Block_object_dispose(&v42, 8);
}

void sub_1C498D7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C498D800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C498D818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C498D830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t sub_1C498D848(uint64_t a1, const char *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_boundsForStrokeIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  unint64_t v17 = objc_opt_class();
  unint64_t result = objc_msgSend_distanceFromPoint_toRectangle_(v17, v18, v19, v20, v21, v22, *(double *)(a1 + 48), *(double *)(a1 + 56), v10, v12, v14, v16);
  if (v28 < *(double *)(a1 + 64))
  {
    unint64_t result = objc_msgSend_pointCountForStrokeIndex_(*(void **)(a1 + 32), v24, (uint64_t)a2, v25, v26, v27);
    if (result >= 2)
    {
      unint64_t v32 = 1;
      while (1)
      {
        objc_msgSend_pointForStrokeIndex_pointIndex_(*(void **)(a1 + 32), v29, (uint64_t)a2, v32 - 1, v30, v31);
        double v34 = v33;
        double v36 = v35;
        objc_msgSend_pointForStrokeIndex_pointIndex_(*(void **)(a1 + 32), v37, (uint64_t)a2, v32, v38, v39);
        double v41 = v40;
        double v43 = v42;
        uint64_t v44 = objc_opt_class();
        unint64_t result = objc_msgSend_distanceFromPoint_toSegmentFromPoint_toPoint_(v44, v45, v46, v47, v48, v49, *(double *)(a1 + 48), *(double *)(a1 + 56), v34, v36, v41, v43);
        if (v54 < *(double *)(a1 + 64)) {
          break;
        }
        ++v32;
        unint64_t result = objc_msgSend_pointCountForStrokeIndex_(*(void **)(a1 + 32), v50, (uint64_t)a2, v51, v52, v53);
        if (v32 >= result) {
          return result;
        }
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      *a3 = 1;
    }
  }
  return result;
}

void *sub_1C498D980(void *result, uint64_t a2)
{
  result[7] = 0;
  result[8] = 0;
  result[9] = 0;
  id v3 = *(unsigned char **)(a2 + 56);
  id v2 = *(unsigned char **)(a2 + 64);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    uint64_t v5 = result;
    if (v4 < 0) {
      sub_1C494A220();
    }
    unint64_t v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    uint64_t v7 = &v6[16 * (v4 >> 4)];
    v5[9] = v7;
    unint64_t result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void sub_1C498D9F8(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C498DA14(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void sub_1C498EB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
}

uint64_t sub_1C498EC78(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (a1)
  {
    double v9 = objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E4F28B88], v3, v4, v5, v6, v7);
    double v15 = objc_msgSend_punctuationCharacterSet(MEMORY[0x1E4F28B88], v10, v11, v12, v13, v14);
    uint64_t v21 = objc_msgSend_lowercaseLetterCharacterSet(MEMORY[0x1E4F28B88], v16, v17, v18, v19, v20);
    uint64_t v27 = objc_msgSend_uppercaseLetterCharacterSet(MEMORY[0x1E4F28B88], v22, v23, v24, v25, v26);
    if (objc_msgSend_rangeOfCharacterFromSet_(v8, v28, (uint64_t)v9, v29, v30, v31) == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (objc_msgSend_rangeOfCharacterFromSet_(v8, v32, (uint64_t)v15, v33, v34, v35) == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (objc_msgSend_rangeOfCharacterFromSet_(v8, v36, (uint64_t)v21, v37, v38, v39) == 0x7FFFFFFFFFFFFFFFLL)
        {
          if (objc_msgSend_rangeOfCharacterFromSet_(v8, v40, (uint64_t)v27, v41, v42, v43) == 0x7FFFFFFFFFFFFFFFLL) {
            uint64_t v44 = 0;
          }
          else {
            uint64_t v44 = 502;
          }
        }
        else
        {
          uint64_t v44 = 502;
        }
      }
      else
      {
        uint64_t v44 = 2;
      }
    }
    else
    {
      uint64_t v44 = 501;
    }
  }
  else
  {
    uint64_t v44 = 0;
  }

  return v44;
}

void sub_1C498ED94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498EDD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498EDE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL candidateResultSortingCriterion(uint64_t a1, uint64_t a2)
{
  return *((float *)&a1 + 1) > *((float *)&a2 + 1);
}

void sub_1C498EEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C498EEC4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v152[1] = *(unsigned int (**)(uint64_t))MEMORY[0x1E4F143B8];
  int shouldApplyLMRescoring = objc_msgSend_shouldApplyLMRescoring(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6);
  uint64_t v13 = *(void **)(a1 + 32);
  if (shouldApplyLMRescoring) {
    uint64_t v14 = v13[61];
  }
  else {
    uint64_t v14 = 0;
  }
  unint64_t v15 = objc_msgSend__effectiveMaxRecognitionResultCount(v13, v7, v8, v9, v10, v11);
  unint64_t v21 = (uint64_t)(*(void *)(*(void *)(a1 + 48) + 8) - **(void **)(a1 + 48)) >> 3;
  if (v15 < v21) {
    unint64_t v21 = objc_msgSend__effectiveMaxRecognitionResultCount(*(void **)(a1 + 32), v16, v17, v18, v19, v20);
  }
  if (!v14) {
    return;
  }
  uint64_t v143 = 0;
  uint64_t v144 = &v143;
  uint64_t v145 = 0x4812000000;
  long long v146 = sub_1C496D054;
  uint64_t v147 = sub_1C496D078;
  uint64_t v148 = &unk_1C4CB5C62;
  uint64_t v150 = 0;
  uint64_t v151 = 0;
  uint64_t v149 = 0;
  uint64_t v22 = objc_msgSend_length(*(void **)(a1 + 40), v16, v17, v18, v19, v20);
  unint64_t v23 = v22 + 1;
  uint64_t v24 = v149;
  if (v22 + 1 <= (unint64_t)((v151 - (uint64_t)v149) >> 2)) {
    goto LABEL_19;
  }
  if (v23 >> 62) {
    sub_1C494A220();
  }
  uint64_t v25 = v150;
  uint64_t v22 = (uint64_t)operator new(4 * v23);
  uint64_t v26 = v25 - v24;
  uint64_t v27 = (char *)(v22 + ((v25 - v24) & 0xFFFFFFFFFFFFFFFCLL));
  double v28 = v27;
  if (v25 != v24)
  {
    if ((unint64_t)(v26 - 4) < 0x2C)
    {
      double v28 = (char *)(v22 + ((v25 - v24) & 0xFFFFFFFFFFFFFFFCLL));
      do
      {
LABEL_16:
        int v37 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *((_DWORD *)v28 - 1) = v37;
        v28 -= 4;
      }
      while (v25 != v24);
      goto LABEL_17;
    }
    double v28 = (char *)(v22 + ((v25 - v24) & 0xFFFFFFFFFFFFFFFCLL));
    if ((unint64_t)&v25[-(v26 & 0xFFFFFFFFFFFFFFFCLL) - v22] < 0x20) {
      goto LABEL_16;
    }
    uint64_t v29 = v26 >> 2;
    unint64_t v30 = ((unint64_t)(v26 - 4) >> 2) + 1;
    uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v32 = &v25[-v31];
    double v28 = &v27[-v31];
    uint64_t v33 = (_OWORD *)(v22 + 4 * v29 - 16);
    uint64_t v34 = (long long *)(v25 - 16);
    uint64_t v35 = v30 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v36 = *v34;
      *(v33 - 1) = *(v34 - 1);
      *uint64_t v33 = v36;
      v33 -= 2;
      v34 -= 2;
      v35 -= 8;
    }
    while (v35);
    uint64_t v25 = v32;
    if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_16;
    }
  }
LABEL_17:
  uint64_t v149 = v28;
  uint64_t v150 = v27;
  uint64_t v151 = v22 + 4 * v23;
  if (v24) {
    operator delete(v24);
  }
LABEL_19:
  uint64_t v139 = v14;
  uint64_t v137 = (uint64_t)&v137;
  uint64_t v38 = MEMORY[0x1F4188790](v22);
  uint64_t v138 = (float64x2_t *)((char *)&v137 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = 4 * v21;
  MEMORY[0x1F4188790](v38);
  uint64_t v46 = v144;
  uint64_t v48 = (char *)v144[7];
  unint64_t v47 = v144[8];
  if ((unint64_t)v48 >= v47)
  {
    double v50 = (char *)v144[6];
    uint64_t v51 = (v48 - v50) >> 2;
    unint64_t v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 62) {
      sub_1C494A220();
    }
    uint64_t v53 = v47 - (void)v50;
    if (v53 >> 1 > v52) {
      unint64_t v52 = v53 >> 1;
    }
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v54 = v52;
    }
    if (v54)
    {
      if (v54 >> 62) {
        sub_1C4949AA8();
      }
      uint64_t v55 = operator new(4 * v54);
    }
    else
    {
      uint64_t v55 = 0;
    }
    long long v56 = &v55[4 * v51];
    long long v57 = &v55[4 * v54];
    *long long v56 = 1;
    uint64_t v49 = v56 + 1;
    if (v48 != v50)
    {
      unint64_t v58 = v48 - v50 - 4;
      if (v58 < 0x2C) {
        goto LABEL_101;
      }
      if ((unint64_t)(v50 - v55) < 0x20) {
        goto LABEL_101;
      }
      uint64_t v59 = (v58 >> 2) + 1;
      uint64_t v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v61 = &v48[-v60];
      long long v56 = (_DWORD *)((char *)v56 - v60);
      uint64_t v62 = &v55[4 * v51 - 16];
      int64_t v63 = v48 - 16;
      uint64_t v64 = v59 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v65 = *(_OWORD *)v63;
        *(v62 - 1) = *((_OWORD *)v63 - 1);
        *uint64_t v62 = v65;
        v62 -= 2;
        v63 -= 32;
        v64 -= 8;
      }
      while (v64);
      uint64_t v48 = v61;
      if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_101:
        do
        {
          int v66 = *((_DWORD *)v48 - 1);
          v48 -= 4;
          *--long long v56 = v66;
        }
        while (v48 != v50);
      }
    }
    v46[6] = (uint64_t)v56;
    v46[7] = (uint64_t)v49;
    v46[8] = (uint64_t)v57;
    if (v50) {
      operator delete(v50);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v48 = 1;
    uint64_t v49 = v48 + 4;
  }
  v46[7] = (uint64_t)v49;
  int shouldReplaceInvalidTokenIDs = objc_msgSend_shouldReplaceInvalidTokenIDs(*(void **)(*(void *)(a1 + 32) + 464), v41, v42, v43, v44, v45);
  unint64_t v68 = *(void **)(a1 + 40);
  uint64_t v69 = *(void *)(*(void *)(a1 + 32) + 560);
  uint64_t v75 = objc_msgSend_length(v68, v70, v71, v72, v73, v74);
  v140[0] = MEMORY[0x1E4F143A8];
  v140[1] = 3221225472;
  v140[2] = sub_1C498F6BC;
  v140[3] = &unk_1E64E15F0;
  BOOL v141 = v69 != 0;
  v140[4] = *(void *)(a1 + 32);
  v140[5] = &v143;
  char v142 = shouldReplaceInvalidTokenIDs;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v68, v76, 0, v75, (uint64_t)v140, v77);
  if (!v21) {
    goto LABEL_69;
  }
  if (!v69)
  {
    uint64_t v95 = 0;
    int v96 = shouldReplaceInvalidTokenIDs ^ 1;
    uint64_t v97 = (_DWORD *)((char *)&v137 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v98 = v21;
    do
    {
      uint64_t v99 = unicodeToNSString(*(_DWORD *)(**(void **)(a1 + 48) + v95), v78, v79, v80, v81, v82);
      if (((v96 | LMLexiconGetFirstTokenIDForString()) & 1) == 0) {
        *uint64_t v97 = sub_1C498EC78(*(void *)(a1 + 32), v99);
      }

      ++v97;
      v95 += 8;
      --v98;
    }
    while (v98);
    goto LABEL_69;
  }
  if (!*(void *)(*(void *)(a1 + 32) + 552))
  {
    bzero((char *)&v137 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0), 4 * v21);
    goto LABEL_69;
  }
  uint64_t v83 = 0;
  while (2)
  {
    uint64_t v85 = *(void *)(a1 + 32);
    uint64_t v84 = *(uint64_t **)(v85 + 552);
    if (!v84) {
      goto LABEL_45;
    }
    unsigned int v86 = *(_DWORD *)(**(void **)(a1 + 48) + 8 * v83);
    uint64_t v87 = *(uint64_t **)(v85 + 552);
    while (1)
    {
      unsigned int v88 = *((_DWORD *)v87 + 7);
      if (v86 < v88) {
        goto LABEL_49;
      }
      if (v88 >= v86) {
        break;
      }
      ++v87;
LABEL_49:
      uint64_t v87 = (uint64_t *)*v87;
      if (!v87)
      {
        LODWORD(v84) = 0;
        goto LABEL_45;
      }
    }
    do
    {
      while (1)
      {
        uint64_t v89 = v84;
        unsigned int v90 = *((_DWORD *)v84 + 7);
        if (v86 < v90) {
          break;
        }
        if (v90 >= v86)
        {
          LODWORD(v84) = *((_DWORD *)v89 + 8);
          goto LABEL_45;
        }
        uint64_t v84 = (uint64_t *)v89[1];
        if (!v84)
        {
          uint64_t v91 = (uint64_t **)(v89 + 1);
          goto LABEL_59;
        }
      }
      uint64_t v84 = (uint64_t *)*v89;
    }
    while (*v89);
    uint64_t v91 = (uint64_t **)v89;
LABEL_59:
    int64_t v92 = operator new(0x28uLL);
    v92[7] = v86;
    v92[8] = 0;
    *(void *)int64_t v92 = 0;
    *((void *)v92 + 1) = 0;
    *((void *)v92 + 2) = v89;
    char *v91 = (uint64_t *)v92;
    uint64_t v93 = **(void **)(v85 + 544);
    uint64_t v94 = (uint64_t *)v92;
    if (v93)
    {
      *(void *)(v85 + 544) = v93;
      uint64_t v94 = *v91;
    }
    sub_1C4949FD4(*(uint64_t **)(v85 + 552), v94);
    ++*(void *)(v85 + 560);
    LODWORD(v84) = v92[8];
LABEL_45:
    *(_DWORD *)((char *)&v137 + 4 * v83++ - ((4 * v21 + 15) & 0xFFFFFFFFFFFFFFF0)) = v84;
    if (v83 != v21) {
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v100 = v138;
  LMLanguageModelConditionalProbabilityVector();
  if (v21)
  {
    if (v21 < 4)
    {
      unint64_t v101 = 0;
      goto LABEL_75;
    }
    unint64_t v101 = v21 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v102 = v100 + 1;
    __asm { FMOV            V0.2D, #20.0 }
    unint64_t v108 = v21 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v109 = vdivq_f64(vaddq_f64(*v102, _Q0), _Q0);
      v102[-1] = vdivq_f64(vaddq_f64(v102[-1], _Q0), _Q0);
      *uint64_t v102 = v109;
      v102 += 2;
      v108 -= 4;
    }
    while (v108);
    if (v21 != v101)
    {
LABEL_75:
      unint64_t v110 = v21 - v101;
      uint64_t v111 = &v100->f64[v101];
      do
      {
        double *v111 = (*v111 + 20.0) / 20.0;
        ++v111;
        --v110;
      }
      while (v110);
    }
  }
  uint64_t v112 = v144[7] - v144[6];
  double v113 = 0.8;
  if (v112 != 8) {
    double v113 = 2.0;
  }
  if (v112 == 4) {
    double v113 = 0.0;
  }
  double v114 = *(uint64_t **)(a1 + 48);
  uint64_t v115 = *v114;
  if (v21)
  {
    if (v21 > 4)
    {
      uint64_t v117 = v21 & 3;
      if ((v21 & 3) == 0) {
        uint64_t v117 = 4;
      }
      unint64_t v116 = v21 - v117;
      float64x2_t v118 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v113, 0);
      uint64_t v119 = (float *)(v115 + 20);
      uint64_t v120 = v100 + 1;
      unint64_t v121 = v116;
      do
      {
        uint64_t v122 = v119 - 4;
        float32x2_t v123 = (float32x2_t)*(_OWORD *)vld2_f32(v122).val;
        float32x2_t v124 = (float32x2_t)*(_OWORD *)vld2_f32(v119).val;
        uint64_t v125 = v119 + 2;
        float32x2_t v126 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v123), v120[-1], v118));
        float32x2_t v127 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v124), *v120, v118));
        *(v119 - 4) = v126.f32[0];
        *(v119 - 2) = v126.f32[1];
        float *v119 = v127.f32[0];
        v119 += 8;
        *uint64_t v125 = v127.i32[1];
        v120 += 2;
        v121 -= 4;
      }
      while (v121);
    }
    else
    {
      unint64_t v116 = 0;
    }
    unint64_t v128 = v21 - v116;
    uint64_t v129 = 8 * v116;
    uint64_t v130 = &v100->f64[v116];
    uint64_t v131 = (float *)(v129 + v115 + 4);
    do
    {
      double v132 = *v130++;
      float v133 = *v131 + v113 * v132;
      float *v131 = v133;
      v131 += 2;
      --v128;
    }
    while (v128);
  }
  uint64_t v134 = (int8x16_t *)v114[1];
  unint64_t v135 = 126 - 2 * __clz(((uint64_t)v134->i64 - v115) >> 3);
  v152[0] = (unsigned int (*)(uint64_t))candidateResultSortingCriterion;
  if (v134 == (int8x16_t *)v115) {
    uint64_t v136 = 0;
  }
  else {
    uint64_t v136 = v135;
  }
  sub_1C49A1E84(v115, v134, v152, v136, 1);
  _Block_object_dispose(&v143, 8);
  if (v149)
  {
    uint64_t v150 = v149;
    operator delete(v149);
  }
}

void sub_1C498F65C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  id v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C498F6BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = (int)a2;
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v20 = unicodeToNSString((int)a2, a2, a3, a4, a5, a6);
    char FirstTokenIDForString = LMLexiconGetFirstTokenIDForString();
    if (*(unsigned char *)(a1 + 49)) {
      char v22 = FirstTokenIDForString;
    }
    else {
      char v22 = 1;
    }
    unint64_t v23 = *(void **)(*(void *)(a1 + 40) + 8);
    if (v22)
    {
      uint64_t v25 = (char *)v23[7];
      unint64_t v24 = v23[8];
      if ((unint64_t)v25 >= v24)
      {
        uint64_t v41 = (char *)v23[6];
        uint64_t v42 = (v25 - v41) >> 2;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62) {
          sub_1C494A220();
        }
        uint64_t v44 = v24 - (void)v41;
        if (v44 >> 1 > v43) {
          unint64_t v43 = v44 >> 1;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45)
        {
          if (v45 >> 62) {
            sub_1C4949AA8();
          }
          uint64_t v46 = operator new(4 * v45);
        }
        else
        {
          uint64_t v46 = 0;
        }
        uint64_t v83 = &v46[4 * v42];
        uint64_t v84 = &v46[4 * v45];
        _DWORD *v83 = 0;
        uint64_t v26 = v83 + 1;
        if (v25 != v41)
        {
          unint64_t v85 = v25 - v41 - 4;
          if (v85 < 0x2C) {
            goto LABEL_120;
          }
          if ((unint64_t)(v41 - v46) < 0x20) {
            goto LABEL_120;
          }
          uint64_t v86 = (v85 >> 2) + 1;
          uint64_t v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
          unsigned int v88 = &v25[-v87];
          uint64_t v83 = (_DWORD *)((char *)v83 - v87);
          uint64_t v89 = &v46[4 * v42 - 16];
          unsigned int v90 = v25 - 16;
          uint64_t v91 = v86 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v92 = *(_OWORD *)v90;
            *(v89 - 1) = *((_OWORD *)v90 - 1);
            *uint64_t v89 = v92;
            v89 -= 2;
            v90 -= 32;
            v91 -= 8;
          }
          while (v91);
          uint64_t v25 = v88;
          if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_120:
            do
            {
              int v93 = *((_DWORD *)v25 - 1);
              v25 -= 4;
              *--uint64_t v83 = v93;
            }
            while (v25 != v41);
          }
        }
        v23[6] = v83;
        v23[7] = v26;
        unsigned char v23[8] = v84;
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v25 = 0;
        uint64_t v26 = v25 + 4;
      }
      v23[7] = v26;

      return;
    }
    int v37 = sub_1C498EC78(*(void *)(a1 + 32), v20);
    int v38 = v37;
    uint64_t v40 = (char *)v23[7];
    unint64_t v39 = v23[8];
    if ((unint64_t)v40 < v39)
    {
      *(_DWORD *)uint64_t v40 = v37;
      v23[7] = v40 + 4;

      return;
    }
    unint64_t v47 = (char *)v23[6];
    uint64_t v48 = (v40 - v47) >> 2;
    unint64_t v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 62) {
      sub_1C494A220();
    }
    uint64_t v50 = v39 - (void)v47;
    if (v50 >> 1 > v49) {
      unint64_t v49 = v50 >> 1;
    }
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v51 = v49;
    }
    if (v51)
    {
      if (v51 >> 62) {
        sub_1C4949AA8();
      }
      unint64_t v52 = operator new(4 * v51);
      uint64_t v53 = &v52[4 * v48];
      unint64_t v54 = &v52[4 * v51];
      *uint64_t v53 = v38;
      uint64_t v55 = (uint64_t)(v53 + 1);
      int64_t v56 = v40 - v47;
      if (v40 == v47) {
        goto LABEL_97;
      }
    }
    else
    {
      unint64_t v52 = 0;
      uint64_t v53 = (_DWORD *)(4 * v48);
      unint64_t v54 = 0;
      *(_DWORD *)(4 * v48) = v38;
      uint64_t v55 = 4 * v48 + 4;
      int64_t v56 = v40 - v47;
      if (v40 == v47)
      {
LABEL_97:
        v23[6] = v53;
        v23[7] = v55;
        unsigned char v23[8] = v54;
        if (v47) {
          operator delete(v47);
        }
        v23[7] = v55;

        return;
      }
    }
    unint64_t v94 = v56 - 4;
    if (v94 < 0x2C) {
      goto LABEL_121;
    }
    if ((unint64_t)(v47 - v52) < 0x20) {
      goto LABEL_121;
    }
    uint64_t v95 = (v94 >> 2) + 1;
    uint64_t v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v97 = &v40[-v96];
    uint64_t v53 = (_DWORD *)((char *)v53 - v96);
    unint64_t v98 = &v52[4 * v48 - 16];
    uint64_t v99 = v40 - 16;
    uint64_t v100 = v95 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v101 = *(_OWORD *)v99;
      *(v98 - 1) = *((_OWORD *)v99 - 1);
      *unint64_t v98 = v101;
      v98 -= 2;
      v99 -= 32;
      v100 -= 8;
    }
    while (v100);
    uint64_t v40 = v97;
    if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_121:
      do
      {
        int v102 = *((_DWORD *)v40 - 1);
        v40 -= 4;
        *--uint64_t v53 = v102;
      }
      while (v40 != v47);
    }
    goto LABEL_97;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(uint64_t **)(v8 + 552);
  if (!v9)
  {
LABEL_14:
    uint64_t v17 = *(void **)(*(void *)(a1 + 40) + 8);
    uint64_t v19 = (char *)v17[7];
    unint64_t v18 = v17[8];
    if ((unint64_t)v19 < v18)
    {
      *(_DWORD *)uint64_t v19 = 0;
      v17[7] = v19 + 4;
      return;
    }
    uint64_t v27 = (char *)v17[6];
    uint64_t v28 = (v19 - v27) >> 2;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 62) {
      sub_1C494A220();
    }
    uint64_t v30 = v18 - (void)v27;
    if (v30 >> 1 > v29) {
      unint64_t v29 = v30 >> 1;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      if (v31 >> 62) {
        goto LABEL_112;
      }
      unint64_t v32 = operator new(4 * v31);
      uint64_t v33 = &v32[4 * v28];
      uint64_t v34 = &v32[4 * v31];
      *uint64_t v33 = 0;
      uint64_t v35 = (uint64_t)(v33 + 1);
      int64_t v36 = v19 - v27;
      if (v19 == v27)
      {
LABEL_60:
        v17[6] = v33;
        v17[7] = v35;
        v17[8] = v34;
        if (v27) {
          operator delete(v27);
        }
        v17[7] = v35;
        return;
      }
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = (_DWORD *)(4 * v28);
      uint64_t v34 = 0;
      *(_DWORD *)(4 * v28) = 0;
      uint64_t v35 = 4 * v28 + 4;
      int64_t v36 = v19 - v27;
      if (v19 == v27) {
        goto LABEL_60;
      }
    }
    unint64_t v57 = v36 - 4;
    if (v57 < 0x2C) {
      goto LABEL_122;
    }
    if ((unint64_t)(v27 - v32) < 0x20) {
      goto LABEL_122;
    }
    uint64_t v58 = (v57 >> 2) + 1;
    uint64_t v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v60 = &v19[-v59];
    uint64_t v33 = (_DWORD *)((char *)v33 - v59);
    uint64_t v61 = &v32[4 * v28 - 16];
    uint64_t v62 = v19 - 16;
    uint64_t v63 = v58 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v64 = *(_OWORD *)v62;
      *(v61 - 1) = *((_OWORD *)v62 - 1);
      *uint64_t v61 = v64;
      v61 -= 2;
      v62 -= 32;
      v63 -= 8;
    }
    while (v63);
    uint64_t v19 = v60;
    if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_122:
      do
      {
        int v65 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *--uint64_t v33 = v65;
      }
      while (v19 != v27);
    }
    goto LABEL_60;
  }
  uint64_t v10 = *(uint64_t **)(v8 + 552);
  while (1)
  {
    unsigned int v11 = *((_DWORD *)v10 + 7);
    if (v11 <= a2) {
      break;
    }
LABEL_4:
    uint64_t v10 = (uint64_t *)*v10;
    if (!v10) {
      goto LABEL_14;
    }
  }
  if (v11 < a2)
  {
    ++v10;
    goto LABEL_4;
  }
  uint64_t v12 = *(void **)(*(void *)(a1 + 40) + 8);
  uint64_t v13 = (void **)(v12 + 6);
  while (1)
  {
    while (1)
    {
      uint64_t v14 = v9;
      unsigned int v15 = *((_DWORD *)v9 + 7);
      if (v15 <= a2) {
        break;
      }
      uint64_t v9 = (uint64_t *)*v14;
      if (!*v14)
      {
        double v16 = (uint64_t **)v14;
LABEL_64:
        int v66 = operator new(0x28uLL);
        v66[7] = v6;
        v66[8] = 0;
        *(void *)int v66 = 0;
        *((void *)v66 + 1) = 0;
        *((void *)v66 + 2) = v14;
        *double v16 = (uint64_t *)v66;
        uint64_t v67 = **(void **)(v8 + 544);
        unint64_t v68 = (uint64_t *)v66;
        if (v67)
        {
          *(void *)(v8 + 544) = v67;
          unint64_t v68 = *v16;
        }
        sub_1C4949FD4(*(uint64_t **)(v8 + 552), v68);
        ++*(void *)(v8 + 560);
        int v69 = v66[8];
        uint64_t v71 = (char *)v12[7];
        unint64_t v70 = v12[8];
        if ((unint64_t)v71 < v70) {
          goto LABEL_67;
        }
LABEL_69:
        uint64_t v73 = (char *)*v13;
        uint64_t v74 = v71 - (unsigned char *)*v13;
        uint64_t v75 = v74 >> 2;
        unint64_t v76 = (v74 >> 2) + 1;
        if (v76 >> 62) {
          sub_1C494A220();
        }
        uint64_t v77 = v70 - (void)v73;
        if (v77 >> 1 > v76) {
          unint64_t v76 = v77 >> 1;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v76;
        }
        if (!v78)
        {
          uint64_t v79 = 0;
          uint64_t v80 = (_DWORD *)(4 * v75);
          uint64_t v81 = 0;
          *(_DWORD *)(4 * v75) = v69;
          uint64_t v72 = 4 * v75 + 4;
          int64_t v82 = v71 - v73;
          if (v71 == v73) {
            goto LABEL_107;
          }
          goto LABEL_101;
        }
        if (!(v78 >> 62))
        {
          uint64_t v79 = operator new(4 * v78);
          uint64_t v80 = &v79[4 * v75];
          uint64_t v81 = &v79[4 * v78];
          *uint64_t v80 = v69;
          uint64_t v72 = (uint64_t)(v80 + 1);
          int64_t v82 = v71 - v73;
          if (v71 == v73)
          {
LABEL_107:
            v12[6] = v80;
            v12[7] = v72;
            v12[8] = v81;
            if (v73) {
              operator delete(v73);
            }
            goto LABEL_109;
          }
LABEL_101:
          unint64_t v103 = v82 - 4;
          if (v103 < 0x2C) {
            goto LABEL_123;
          }
          if ((unint64_t)(v71 - v79 - v74) < 0x20) {
            goto LABEL_123;
          }
          uint64_t v104 = (v103 >> 2) + 1;
          uint64_t v105 = 4 * (v104 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v106 = &v71[-v105];
          uint64_t v80 = (_DWORD *)((char *)v80 - v105);
          uint64_t v107 = &v79[4 * v75 - 16];
          unint64_t v108 = v71 - 16;
          uint64_t v109 = v104 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v110 = *(_OWORD *)v108;
            *(v107 - 1) = *((_OWORD *)v108 - 1);
            _OWORD *v107 = v110;
            v107 -= 2;
            v108 -= 32;
            v109 -= 8;
          }
          while (v109);
          uint64_t v71 = v106;
          if (v104 != (v104 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_123:
            do
            {
              int v111 = *((_DWORD *)v71 - 1);
              v71 -= 4;
              *--uint64_t v80 = v111;
            }
            while (v71 != v73);
          }
          goto LABEL_107;
        }
LABEL_112:
        sub_1C4949AA8();
      }
    }
    if (v15 >= a2) {
      break;
    }
    uint64_t v9 = (uint64_t *)v14[1];
    if (!v9)
    {
      double v16 = (uint64_t **)(v14 + 1);
      goto LABEL_64;
    }
  }
  int v69 = *((_DWORD *)v14 + 8);
  uint64_t v71 = (char *)v12[7];
  unint64_t v70 = v12[8];
  if ((unint64_t)v71 >= v70) {
    goto LABEL_69;
  }
LABEL_67:
  *(_DWORD *)uint64_t v71 = v69;
  uint64_t v72 = (uint64_t)(v71 + 4);
LABEL_109:
  v12[7] = v72;
}

void sub_1C498FD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C498FD3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C498FDBC(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 216) = *(void *)(result + 40);
  return result;
}

void sub_1C498FEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1C498FED4(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

__n128 sub_1C498FEE4(uint64_t a1)
{
  uint64_t v1 = (__n128 *)(*(void *)(a1 + 32) + 504);
  __n128 result = *v1;
  *(__n128 *)(*(void *)(*(void *)(a1 + 40) + 8) + 48) = *v1;
  return result;
}

__n128 sub_1C498FF70(uint64_t a1)
{
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(*(void *)(a1 + 32) + 504) = result;
  return result;
}

void sub_1C498FFF8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if (*(_DWORD *)(v6 + 208) != v7)
  {
    uint64_t v9 = objc_msgSend_mode(*(void **)(v6 + 464), a2, a3, a4, a5, a6);
    uint64_t v13 = objc_msgSend_defaultLocaleForRecognitionType_withMode_(CHRecognizerConfiguration, v10, v7, v9, v11, v12);
    uint64_t v19 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v14, v15, v16, v17, v18);
    if (objc_msgSend_isLocaleSupported_withMode_(CHRecognizerConfiguration, v20, (uint64_t)v13, v19, v21, v22))
    {
      unint64_t v23 = [CHRecognizerConfiguration alloc];
      uint64_t v29 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v24, v25, v26, v27, v28);
      uint64_t v35 = objc_msgSend_contentType(*(void **)(*(void *)(a1 + 32) + 464), v30, v31, v32, v33, v34);
      uint64_t v41 = objc_msgSend_autoCapitalizationMode(*(void **)(*(void *)(a1 + 32) + 464), v36, v37, v38, v39, v40);
      uint64_t v47 = objc_msgSend_autoCorrectionMode(*(void **)(*(void *)(a1 + 32) + 464), v42, v43, v44, v45, v46);
      uint64_t v53 = objc_msgSend_baseWritingDirection(*(void **)(*(void *)(a1 + 32) + 464), v48, v49, v50, v51, v52);
      char v59 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v54, v55, v56, v57, v58);
      char v65 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v60, v61, v62, v63, v64);
      BYTE2(v95) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v66, v67, v68, v69, v70);
      BYTE1(v95) = v65;
      LOBYTE(v95) = v59;
      uint64_t v72 = objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v23, v71, v29, (uint64_t)v13, v35, v41, v47, v53, v95);
      objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v73, (uint64_t)v72, v74, v75, v76);
      *(_DWORD *)(*(void *)(a1 + 32) + 208) = *(_DWORD *)(a1 + 40);
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v77 = (id)qword_1EA3C9F98;
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        uint64_t v83 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v78, v79, v80, v81, v82);
        unsigned int v88 = objc_msgSend_stringForRecognitionMode_(CHRecognizerConfiguration, v84, v83, v85, v86, v87);
        unint64_t v94 = objc_msgSend_localeIdentifier(v13, v89, v90, v91, v92, v93);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v97 = v88;
        __int16 v98 = 2112;
        uint64_t v99 = v94;
        _os_log_impl(&dword_1C492D000, v77, OS_LOG_TYPE_ERROR, "Configuration for recognizer with mode=%@ and locale=%@ is not supported.", buf, 0x16u);
      }
    }
  }
}

void sub_1C499026C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4990284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4990298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49902AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49902C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4990374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C499038C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4990438(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  int v7 = *(_DWORD *)(a1 + 40);
  if (v7 != objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6))
  {
    uint64_t v13 = objc_msgSend_locale(*(void **)(*(void *)(a1 + 32) + 464), v8, v9, v10, v11, v12);
    int isLocaleSupported_withMode = objc_msgSend_isLocaleSupported_withMode_(CHRecognizerConfiguration, v14, (uint64_t)v13, *(unsigned int *)(a1 + 40), v15, v16);

    if (isLocaleSupported_withMode)
    {
      uint64_t v18 = [CHRecognizerConfiguration alloc];
      uint64_t v19 = *(unsigned int *)(a1 + 40);
      uint64_t v25 = objc_msgSend_locale(*(void **)(*(void *)(a1 + 32) + 464), v20, v21, v22, v23, v24);
      uint64_t v31 = objc_msgSend_contentType(*(void **)(*(void *)(a1 + 32) + 464), v26, v27, v28, v29, v30);
      uint64_t v37 = objc_msgSend_autoCapitalizationMode(*(void **)(*(void *)(a1 + 32) + 464), v32, v33, v34, v35, v36);
      uint64_t v43 = objc_msgSend_autoCorrectionMode(*(void **)(*(void *)(a1 + 32) + 464), v38, v39, v40, v41, v42);
      uint64_t v49 = objc_msgSend_baseWritingDirection(*(void **)(*(void *)(a1 + 32) + 464), v44, v45, v46, v47, v48);
      char v55 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v50, v51, v52, v53, v54);
      char v61 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v56, v57, v58, v59, v60);
      BYTE2(v90) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v62, v63, v64, v65, v66);
      BYTE1(v90) = v61;
      LOBYTE(v90) = v55;
      id v91 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v18, v67, v19, (uint64_t)v25, v31, v37, v43, v49, v90);

      objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v68, (uint64_t)v91, v69, v70, v71);
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v72 = (id)qword_1EA3C9F98;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend_stringForRecognitionMode_(CHRecognizerConfiguration, v73, *(unsigned int *)(a1 + 40), v74, v75, v76);
        id v77 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v83 = objc_msgSend_locale(*(void **)(*(void *)(a1 + 32) + 464), v78, v79, v80, v81, v82);
        uint64_t v89 = objc_msgSend_localeIdentifier(v83, v84, v85, v86, v87, v88);
        *(_DWORD *)long long buf = 138412546;
        id v93 = v77;
        __int16 v94 = 2112;
        int v95 = v89;
        _os_log_impl(&dword_1C492D000, v72, OS_LOG_TYPE_ERROR, "Configuration for recognizer with mode=%@ and locale=%@ is not supported.", buf, 0x16u);
      }
    }
  }
}

void sub_1C49906EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4990708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4990720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4990730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4990744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4990758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49908C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49908D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49908E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49908F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4990900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49909F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4990A18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_locale(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_1C4990AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4990B14(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  objc_msgSend_locale(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6);
  id v94 = (id)objc_claimAutoreleasedReturnValue();
  char isEqual = objc_msgSend_isEqual_(v94, v7, *(void *)(a1 + 40), v8, v9, v10);

  if ((isEqual & 1) == 0)
  {
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v12, v13, v14, v15, v16);
    if (objc_msgSend_isLocaleSupported_withMode_(CHRecognizerConfiguration, v19, v17, v18, v20, v21))
    {
      uint64_t v22 = [CHRecognizerConfiguration alloc];
      uint64_t v28 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v23, v24, v25, v26, v27);
      uint64_t v29 = *(void *)(a1 + 40);
      uint64_t v35 = objc_msgSend_contentType(*(void **)(*(void *)(a1 + 32) + 464), v30, v31, v32, v33, v34);
      uint64_t v41 = objc_msgSend_autoCapitalizationMode(*(void **)(*(void *)(a1 + 32) + 464), v36, v37, v38, v39, v40);
      uint64_t v47 = objc_msgSend_autoCorrectionMode(*(void **)(*(void *)(a1 + 32) + 464), v42, v43, v44, v45, v46);
      uint64_t v53 = objc_msgSend_baseWritingDirection(*(void **)(*(void *)(a1 + 32) + 464), v48, v49, v50, v51, v52);
      char v59 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v54, v55, v56, v57, v58);
      char v65 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v60, v61, v62, v63, v64);
      BYTE2(v93) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v66, v67, v68, v69, v70);
      BYTE1(v93) = v65;
      LOBYTE(v93) = v59;
      id v95 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v22, v71, v28, v29, v35, v41, v47, v53, v93);
      objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v72, (uint64_t)v95, v73, v74, v75);
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v96 = (id)qword_1EA3C9F98;
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        uint64_t v81 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v76, v77, v78, v79, v80);
        uint64_t v86 = objc_msgSend_stringForRecognitionMode_(CHRecognizerConfiguration, v82, v81, v83, v84, v85);
        uint64_t v92 = objc_msgSend_localeIdentifier(*(void **)(a1 + 40), v87, v88, v89, v90, v91);
        *(_DWORD *)long long buf = 138412546;
        __int16 v98 = v86;
        __int16 v99 = 2112;
        uint64_t v100 = v92;
        _os_log_impl(&dword_1C492D000, v96, OS_LOG_TYPE_ERROR, "Configuration for recognizer with mode=%@ and locale=%@ is not supported.", buf, 0x16u);
      }
    }
  }
}

void sub_1C4990DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4990DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4990DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4990DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4990EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4990EB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  uint64_t v5 = *(void **)(v2 + 224);
  uint64_t v4 = (id *)(v2 + 224);
  if (v5 != v3) {
    objc_storeStrong(v4, v3);
  }
}

void sub_1C4990F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4990F94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_contentType(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4991040(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (objc_msgSend_contentType(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6) != *(_DWORD *)(a1 + 40))
  {
    uint64_t v7 = [CHRecognizerConfiguration alloc];
    uint64_t v13 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v8, v9, v10, v11, v12);
    uint64_t v19 = objc_msgSend_locale(*(void **)(*(void *)(a1 + 32) + 464), v14, v15, v16, v17, v18);
    uint64_t v20 = *(unsigned int *)(a1 + 40);
    uint64_t v26 = objc_msgSend_autoCapitalizationMode(*(void **)(*(void *)(a1 + 32) + 464), v21, v22, v23, v24, v25);
    uint64_t v32 = objc_msgSend_autoCorrectionMode(*(void **)(*(void *)(a1 + 32) + 464), v27, v28, v29, v30, v31);
    uint64_t v38 = objc_msgSend_baseWritingDirection(*(void **)(*(void *)(a1 + 32) + 464), v33, v34, v35, v36, v37);
    char v44 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v39, v40, v41, v42, v43);
    char v50 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v45, v46, v47, v48, v49);
    BYTE2(v61) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v51, v52, v53, v54, v55);
    BYTE1(v61) = v50;
    LOBYTE(v61) = v44;
    id v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v20, v26, v32, v38, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1C49911A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49911BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4991270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4991288(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_autoCapitalizationMode(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4991334(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (objc_msgSend_autoCapitalizationMode(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6) != *(_DWORD *)(a1 + 40))
  {
    uint64_t v7 = [CHRecognizerConfiguration alloc];
    uint64_t v13 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v8, v9, v10, v11, v12);
    uint64_t v19 = objc_msgSend_locale(*(void **)(*(void *)(a1 + 32) + 464), v14, v15, v16, v17, v18);
    uint64_t v25 = objc_msgSend_contentType(*(void **)(*(void *)(a1 + 32) + 464), v20, v21, v22, v23, v24);
    uint64_t v26 = *(unsigned int *)(a1 + 40);
    uint64_t v32 = objc_msgSend_autoCorrectionMode(*(void **)(*(void *)(a1 + 32) + 464), v27, v28, v29, v30, v31);
    uint64_t v38 = objc_msgSend_baseWritingDirection(*(void **)(*(void *)(a1 + 32) + 464), v33, v34, v35, v36, v37);
    char v44 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v39, v40, v41, v42, v43);
    char v50 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v45, v46, v47, v48, v49);
    BYTE2(v61) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v51, v52, v53, v54, v55);
    BYTE1(v61) = v50;
    LOBYTE(v61) = v44;
    id v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v25, v26, v32, v38, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1C499149C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49914B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4991564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C499157C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_autoCorrectionMode(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4991628(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (objc_msgSend_autoCorrectionMode(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6) != *(_DWORD *)(a1 + 40))
  {
    uint64_t v7 = [CHRecognizerConfiguration alloc];
    uint64_t v13 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v8, v9, v10, v11, v12);
    uint64_t v19 = objc_msgSend_locale(*(void **)(*(void *)(a1 + 32) + 464), v14, v15, v16, v17, v18);
    uint64_t v25 = objc_msgSend_contentType(*(void **)(*(void *)(a1 + 32) + 464), v20, v21, v22, v23, v24);
    uint64_t v31 = objc_msgSend_autoCapitalizationMode(*(void **)(*(void *)(a1 + 32) + 464), v26, v27, v28, v29, v30);
    uint64_t v32 = *(unsigned int *)(a1 + 40);
    uint64_t v38 = objc_msgSend_baseWritingDirection(*(void **)(*(void *)(a1 + 32) + 464), v33, v34, v35, v36, v37);
    char v44 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v39, v40, v41, v42, v43);
    char v50 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v45, v46, v47, v48, v49);
    BYTE2(v61) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v51, v52, v53, v54, v55);
    BYTE1(v61) = v50;
    LOBYTE(v61) = v44;
    id v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v25, v31, v32, v38, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1C4991790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49917A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4991858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4991870(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_baseWritingDirection(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4991918(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (objc_msgSend_baseWritingDirection(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6) != *(void *)(a1 + 40))
  {
    uint64_t v7 = [CHRecognizerConfiguration alloc];
    uint64_t v13 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v8, v9, v10, v11, v12);
    uint64_t v19 = objc_msgSend_locale(*(void **)(*(void *)(a1 + 32) + 464), v14, v15, v16, v17, v18);
    uint64_t v25 = objc_msgSend_contentType(*(void **)(*(void *)(a1 + 32) + 464), v20, v21, v22, v23, v24);
    uint64_t v31 = objc_msgSend_autoCapitalizationMode(*(void **)(*(void *)(a1 + 32) + 464), v26, v27, v28, v29, v30);
    uint64_t v37 = objc_msgSend_autoCorrectionMode(*(void **)(*(void *)(a1 + 32) + 464), v32, v33, v34, v35, v36);
    uint64_t v38 = *(void *)(a1 + 40);
    char v44 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v39, v40, v41, v42, v43);
    char v50 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v45, v46, v47, v48, v49);
    BYTE2(v61) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v51, v52, v53, v54, v55);
    BYTE1(v61) = v50;
    LOBYTE(v61) = v44;
    id v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v25, v31, v37, v38, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1C4991A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4991A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4991B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4991B5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_enableCachingIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4991C08(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(unsigned __int8 *)(a1 + 40) != objc_msgSend_enableCachingIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6))
  {
    uint64_t v7 = [CHRecognizerConfiguration alloc];
    uint64_t v13 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v8, v9, v10, v11, v12);
    uint64_t v19 = objc_msgSend_locale(*(void **)(*(void *)(a1 + 32) + 464), v14, v15, v16, v17, v18);
    uint64_t v25 = objc_msgSend_contentType(*(void **)(*(void *)(a1 + 32) + 464), v20, v21, v22, v23, v24);
    uint64_t v31 = objc_msgSend_autoCapitalizationMode(*(void **)(*(void *)(a1 + 32) + 464), v26, v27, v28, v29, v30);
    uint64_t v37 = objc_msgSend_autoCorrectionMode(*(void **)(*(void *)(a1 + 32) + 464), v32, v33, v34, v35, v36);
    uint64_t v43 = objc_msgSend_baseWritingDirection(*(void **)(*(void *)(a1 + 32) + 464), v38, v39, v40, v41, v42);
    int v44 = *(unsigned __int8 *)(a1 + 40);
    char v50 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v45, v46, v47, v48, v49);
    BYTE2(v61) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v51, v52, v53, v54, v55);
    BYTE1(v61) = v50;
    LOBYTE(v61) = v44 != 0;
    id v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v25, v31, v37, v43, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1C4991D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4991D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4991E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4991E58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4991F04(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(unsigned __int8 *)(a1 + 40) != objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6))
  {
    uint64_t v7 = [CHRecognizerConfiguration alloc];
    uint64_t v13 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v8, v9, v10, v11, v12);
    uint64_t v19 = objc_msgSend_locale(*(void **)(*(void *)(a1 + 32) + 464), v14, v15, v16, v17, v18);
    uint64_t v25 = objc_msgSend_contentType(*(void **)(*(void *)(a1 + 32) + 464), v20, v21, v22, v23, v24);
    uint64_t v31 = objc_msgSend_autoCapitalizationMode(*(void **)(*(void *)(a1 + 32) + 464), v26, v27, v28, v29, v30);
    uint64_t v37 = objc_msgSend_autoCorrectionMode(*(void **)(*(void *)(a1 + 32) + 464), v32, v33, v34, v35, v36);
    uint64_t v43 = objc_msgSend_baseWritingDirection(*(void **)(*(void *)(a1 + 32) + 464), v38, v39, v40, v41, v42);
    char v49 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v44, v45, v46, v47, v48);
    int v50 = *(unsigned __int8 *)(a1 + 40);
    BYTE2(v61) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v51, v52, v53, v54, v55);
    BYTE1(v61) = v50 != 0;
    LOBYTE(v61) = v49;
    id v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v25, v31, v37, v43, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1C4992074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4992088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C499213C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4992154(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4992200(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(unsigned __int8 *)(a1 + 40) != objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), a2, a3, a4, a5, a6))
  {
    uint64_t v7 = [CHRecognizerConfiguration alloc];
    uint64_t v13 = objc_msgSend_mode(*(void **)(*(void *)(a1 + 32) + 464), v8, v9, v10, v11, v12);
    uint64_t v19 = objc_msgSend_locale(*(void **)(*(void *)(a1 + 32) + 464), v14, v15, v16, v17, v18);
    uint64_t v25 = objc_msgSend_contentType(*(void **)(*(void *)(a1 + 32) + 464), v20, v21, v22, v23, v24);
    uint64_t v31 = objc_msgSend_autoCapitalizationMode(*(void **)(*(void *)(a1 + 32) + 464), v26, v27, v28, v29, v30);
    uint64_t v37 = objc_msgSend_autoCorrectionMode(*(void **)(*(void *)(a1 + 32) + 464), v32, v33, v34, v35, v36);
    uint64_t v43 = objc_msgSend_baseWritingDirection(*(void **)(*(void *)(a1 + 32) + 464), v38, v39, v40, v41, v42);
    char v49 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v44, v45, v46, v47, v48);
    char v55 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(void *)(a1 + 32) + 464), v50, v51, v52, v53, v54);
    BYTE2(v61) = *(unsigned char *)(a1 + 40);
    BYTE1(v61) = v55;
    LOBYTE(v61) = v49;
    id v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v25, v31, v37, v43, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1C4992368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C499237C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C499271C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4992734(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(v2 + 8);
  id v3 = (id *)(v2 + 8);
  if (v1 != v4) {
    objc_storeStrong(v3, v1);
  }
}

void sub_1C4992834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4992854(uint64_t a1)
{
}

void sub_1C4992868(void *a1)
{
  *a1 = &unk_1F2012660;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    id v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1C8786460);
}

void sub_1C4992934()
{
}

uint64_t sub_1C4992984(uint64_t a1, void *a2)
{
  return sub_1C4992E90(*(void *)(a1 + 24), *(void *)(a1 + 32), a2);
}

double sub_1C4992998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 != *(void *)(a1 + 32))
  {
    uint64_t v10 = (void *)(a4 + 16);
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)v5 + 16))();
    uint64_t v7 = *(uint64_t **)(a4 + 24);
    if ((unint64_t)v7 < *(void *)(a4 + 32))
    {
      *uint64_t v7 = v6;
      operator new();
    }
    sub_1C4992FF0(v10, v6);
  }
  double v8 = *(double *)(a1 + 16);
  if (v8 <= 0.0) {
    double v8 = 0.0;
  }
  double result = *(double *)(a1 + 8) * v8;
  *(double *)(a4 + 8) = result;
  return result;
}

void sub_1C4992B20(_Unwind_Exception *exception_object)
{
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(exception_object);
}

double sub_1C4992B5C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 8);
}

double sub_1C4992B64(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a2 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 24);
  uint64_t v6 = *(uint64_t **)(a1 + 32);
  if (v5 == v6)
  {
    double v8 = 0.0;
  }
  else
  {
    uint64_t v7 = 0;
    double v8 = 0.0;
    do
    {
      uint64_t v9 = *v5++;
      double v8 = v8
         + (*(double (**)(uint64_t, void))(*(void *)v9 + 48))(v9, *(void *)(*(void *)(a2 + 16) + v7));
      v7 += 16;
    }
    while (v5 != v6);
  }
  double v10 = *(double *)(a1 + 8);
  double v11 = *(double *)(a1 + 16);
  if (v11 <= v8 + v4 / v10) {
    double v11 = v8 + v4 / v10;
  }
  *(double *)(a2 + 8) = v10 * v11;
  return v8;
}

double sub_1C4992C24()
{
  return 0.0;
}

uint64_t sub_1C4992C2C(uint64_t result)
{
  *(void *)(result + 8) = 0;
  return result;
}

void *sub_1C4992C34(void *a1)
{
  *a1 = &unk_1F20124C0;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    double v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      double v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C4992D04(void *a1)
{
  *a1 = &unk_1F20124C0;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    double v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      double v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1C8786460);
}

void sub_1C4992DF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  for (uint64_t i = *(void *)(a1 + 24); i != v2; i -= 16)
  {
    double v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(void *)(a1 + 24) = v2;
}

uint64_t sub_1C4992E90(uint64_t result, uint64_t a2, void *a3)
{
  if (result != a2)
  {
    double v4 = a3 + 2;
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)result + 16))();
    uint64_t v6 = (uint64_t *)a3[3];
    if ((unint64_t)v6 < a3[4])
    {
      *uint64_t v6 = v5;
      operator new();
    }
    sub_1C4992FF0(v4, v5);
  }
  return result;
}

void sub_1C4992FB4(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)(v1 + 24) = v3;
  _Unwind_Resume(exception_object);
}

void sub_1C4992FF0(void *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1[1] - *a1) >> 4;
  unint64_t v3 = v2 + 1;
  if (!((unint64_t)(v2 + 1) >> 60))
  {
    uint64_t v5 = a1[2] - *a1;
    if (v5 >> 3 > v3) {
      unint64_t v3 = v5 >> 3;
    }
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v6 = v3;
    }
    if (v6)
    {
      if (v6 >> 60) {
        sub_1C4949AA8();
      }
      uint64_t v7 = operator new(16 * v6);
    }
    else
    {
      uint64_t v7 = 0;
    }
    v7[2 * v2] = a2;
    operator new();
  }
  sub_1C494A220();
}

void sub_1C49931AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1C49932DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C49931F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C4993228(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1C4993258(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C4C3A03CLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C4C3A03CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C4C3A03CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C4C3A03CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t sub_1C49932DC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    double v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C499338C()
{
}

double sub_1C49933D8(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (*(uint64_t (**)(double *, uint64_t))(*(void *)a1 + 72))(a1, a5);
  *(_DWORD *)(a4 + 20) = v9;
  if (a3 == -1)
  {
    *(unsigned char *)(a4 + 16) = 0;
    *(void *)(a4 + 8) = 0;
    return 0.0;
  }
  else if ((*(unsigned int (**)(double *, uint64_t))(*(void *)a1 + 64))(a1, v9))
  {
    *(_DWORD *)(a4 + 20) = *(_DWORD *)(a2 + 20);
    *(unsigned char *)(a4 + 16) = *(unsigned char *)(a2 + 16);
    *(void *)(a4 + 8) = 0;
    return 0.0;
  }
  else if (*(unsigned char *)(a2 + 16) {
         || ((*(uint64_t (**)(double *, void, void))(*(void *)a1 + 56))(a1, *(unsigned int *)(a2 + 20), *(unsigned int *)(a4 + 20)) & 1) != 0)
  }
  {
    *(unsigned char *)(a4 + 16) = 1;
    double v11 = a1[6];
    if (a1[2] > v11) {
      double v11 = a1[2];
    }
    double result = a1[1] * v11;
    *(double *)(a4 + 8) = result;
  }
  else
  {
    return *(double *)(a4 + 8);
  }
  return result;
}

uint64_t sub_1C4993524(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = (*(void *)(a1 + 32) - v6) >> 2;
  if (v7 > (unint64_t)a2) {
    return *(unsigned int *)(v6 + 4 * (void)a2);
  }
  uint64_t v9 = objc_msgSend_stringWithFormat_(NSString, a2, @"Label=%lu is out-of-bounds for labelToScriptMap of size=%lu", a4, a5, a6, a2, v7);
  CVNLPLogGeneralFault();

  return 0;
}

void sub_1C499359C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49935B0()
{
}

void sub_1C49935C4(void *a1)
{
  *a1 = &unk_1F2012530;
  a1[8] = &unk_1F2012610;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  a1[2] = &unk_1F2012660;
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    double v4 = (void *)a1[6];
    uint64_t v5 = (void *)a1[5];
    if (v4 != v3)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *double v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[5];
    }
    a1[6] = v3;
    operator delete(v5);
  }
  JUMPOUT(0x1C8786460);
}

void sub_1C49936E0()
{
}

void sub_1C4997A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (v42)
  {
    *(void *)(v43 - 248) = v42;
    operator delete(v42);
  }
  sub_1C4998664((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1C4997D84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v4 = (unint64_t *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  double v5 = *(double *)(a2 + 32);
  *(double *)(a4 + 24) = v5 + *(double *)(a2 + 48);
  *(double *)(a4 + 32) = v5;
  memset(&v114[8], 0, 32);
  *(_OWORD *)__p = 0u;
  double v113 = 0;
  *(double *)double v114 = v5;
  uint64_t v6 = (void *)(a2 + 56);
  if (!*(void *)(a2 + 56)) {
    goto LABEL_111;
  }
  double v8 = (void *)a2;
  char v10 = 1;
  do
  {
    ++*(void *)&v114[32];
    int v17 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 48))(a1, *v8);
    int v18 = v17;
    if (v17 != 2)
    {
      if (v17)
      {
        if (v17 == 1)
        {
          uint64_t v19 = (char *)__p[1];
          if (__p[1] < v113)
          {
            *(void *)__p[1] = *v8;
            uint64_t v20 = v19 + 8;
            goto LABEL_58;
          }
          uint64_t v108 = a3;
          uint64_t v31 = __p[0];
          int64_t v32 = (char *)__p[1] - (char *)__p[0];
          int64_t v33 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61) {
            goto LABEL_118;
          }
          uint64_t v35 = v113 - (char *)__p[0];
          if ((v113 - (char *)__p[0]) >> 2 > v34) {
            unint64_t v34 = v35 >> 2;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            if (v36 >> 61) {
              goto LABEL_116;
            }
            unint64_t v37 = v36;
            uint64_t v38 = operator new(8 * v36);
            unint64_t v36 = v37;
            uint64_t v39 = &v38[8 * v33];
            void *v39 = *v8;
            uint64_t v20 = v39 + 1;
            int64_t v40 = v19 - v31;
            if (v19 != v31)
            {
LABEL_33:
              unint64_t v41 = v40 - 8;
              if (v41 < 0x58)
              {
                double v4 = (unint64_t *)a4;
                goto LABEL_54;
              }
              unint64_t v53 = v19 - v38 - v32;
              double v4 = (unint64_t *)a4;
              if (v53 < 0x20) {
                goto LABEL_122;
              }
              uint64_t v54 = (v41 >> 3) + 1;
              uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v56 = &v19[-v55];
              uint64_t v39 = (void *)((char *)v39 - v55);
              uint64_t v57 = &v38[8 * v33 - 16];
              uint64_t v58 = v19 - 16;
              uint64_t v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v60 = *(_OWORD *)v58;
                *(v57 - 1) = *((_OWORD *)v58 - 1);
                *uint64_t v57 = v60;
                v57 -= 2;
                v58 -= 32;
                v59 -= 4;
              }
              while (v59);
              uint64_t v19 = v56;
              if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_122:
                do
                {
LABEL_54:
                  uint64_t v61 = *((void *)v19 - 1);
                  v19 -= 8;
                  *--uint64_t v39 = v61;
                }
                while (v19 != v31);
              }
LABEL_55:
              __p[0] = v39;
              double v113 = &v38[8 * v36];
              if (v31) {
                operator delete(v31);
              }
              a3 = v108;
LABEL_58:
              __p[1] = v20;
              uint64_t v21 = v8[1];
              *(void *)&v114[16] = v21;
              *(void *)&v114[24] = a3;
              unint64_t v22 = v4[1];
              if (v22 >= v4[2])
              {
LABEL_59:
                id v62 = sub_1C4999754(v4, (uint64_t)__p);
                uint64_t v23 = __p[0];
                *(void *)(a4 + 8) = v62;
                __p[1] = v23;
                *(void *)&v114[32] = 0;
                if (v18 == 2) {
                  goto LABEL_60;
                }
LABEL_20:
                uint64_t v12 = (void *)*v6;
                if (!*v6)
                {
                  double v13 = 0.0;
                  goto LABEL_6;
                }
LABEL_5:
                double v13 = (*(double (**)(uint64_t, void *, void))(*(void *)a1 + 56))(a1, v12, v10 & 1);
LABEL_6:
                uint64_t v14 = v8[5];
                *(double *)double v114 = v13;
                *(void *)&v114[8] = v14;
                a3 = v21;
                double v4 = (unint64_t *)a4;
                goto LABEL_7;
              }
LABEL_16:
              *(void *)unint64_t v22 = 0;
              *(void *)(v22 + 8) = 0;
              *(void *)(v22 + 16) = 0;
              uint64_t v23 = __p[0];
              int64_t v24 = (char *)__p[1] - (char *)__p[0];
              if (__p[1] != __p[0])
              {
                if (v24 < 0) {
                  sub_1C494A220();
                }
                uint64_t v25 = (char *)operator new((char *)__p[1] - (char *)__p[0]);
                *(void *)unint64_t v22 = v25;
                *(void *)(v22 + 8) = v25;
                uint64_t v26 = &v25[8 * (v24 >> 3)];
                *(void *)(v22 + 16) = v26;
                memcpy(v25, v23, v24);
                *(void *)(v22 + 8) = v26;
                double v4 = (unint64_t *)a4;
              }
              long long v27 = *(_OWORD *)v114;
              long long v28 = *(_OWORD *)&v114[16];
              *(void *)(v22 + 56) = *(void *)&v114[32];
              *(_OWORD *)(v22 + 40) = v28;
              *(_OWORD *)(v22 + 24) = v27;
              v4[1] = v22 + 64;
              v4[1] = v22 + 64;
              __p[1] = v23;
              *(void *)&v114[32] = 0;
              if (v18 != 2) {
                goto LABEL_20;
              }
LABEL_60:
              if (v23 < (void *)v113)
              {
                void *v23 = *v8;
                double v11 = v23 + 1;
              }
              else
              {
                unint64_t v63 = (v113 - (unsigned char *)v23) >> 2;
                if (v63 <= 1) {
                  unint64_t v63 = 1;
                }
                if ((unint64_t)(v113 - (unsigned char *)v23) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v64 = v63;
                }
                if (v64 >> 61) {
LABEL_116:
                }
                  sub_1C4949AA8();
                char v65 = operator new(8 * v64);
                *char v65 = *v8;
                double v11 = v65 + 1;
                __p[0] = v65;
                double v113 = &v65[v64];
                if (v23) {
                  operator delete(v23);
                }
              }
              __p[1] = v11;
              uint64_t v12 = v8;
              goto LABEL_5;
            }
          }
          else
          {
            uint64_t v38 = 0;
            uint64_t v39 = (void *)(8 * v33);
            *(void *)(8 * v33) = *v8;
            uint64_t v20 = (void *)(8 * v33 + 8);
            int64_t v40 = v19 - v31;
            if (v19 != v31) {
              goto LABEL_33;
            }
          }
          double v4 = (unint64_t *)a4;
          goto LABEL_55;
        }
LABEL_15:
        uint64_t v21 = v8[1] + 1;
        *(void *)&v114[16] = v21;
        *(void *)&v114[24] = a3;
        unint64_t v22 = v4[1];
        if (v22 >= v4[2]) {
          goto LABEL_59;
        }
        goto LABEL_16;
      }
      uint64_t v29 = (char *)__p[1];
      if (__p[1] < v113)
      {
        *(void *)__p[1] = *v8;
        uint64_t v30 = v29 + 8;
LABEL_77:
        __p[1] = v30;
        goto LABEL_7;
      }
      uint64_t v42 = a3;
      uint64_t v43 = __p[0];
      int64_t v44 = (char *)__p[1] - (char *)__p[0];
      int64_t v45 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      unint64_t v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 61) {
LABEL_118:
      }
        sub_1C494A220();
      uint64_t v47 = v113 - (char *)__p[0];
      if ((v113 - (char *)__p[0]) >> 2 > v46) {
        unint64_t v46 = v47 >> 2;
      }
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v46;
      }
      if (v48)
      {
        if (v48 >> 61) {
          goto LABEL_116;
        }
        char v49 = operator new(8 * v48);
        int v50 = &v49[8 * v45];
        *int v50 = *v8;
        uint64_t v30 = v50 + 1;
        int64_t v51 = v29 - v43;
        if (v29 != v43) {
          goto LABEL_44;
        }
      }
      else
      {
        char v49 = 0;
        int v50 = (void *)(8 * v45);
        *(void *)(8 * v45) = *v8;
        uint64_t v30 = (void *)(8 * v45 + 8);
        int64_t v51 = v29 - v43;
        if (v29 != v43)
        {
LABEL_44:
          unint64_t v52 = v51 - 8;
          if (v52 >= 0x58)
          {
            unint64_t v66 = v29 - &v49[v44];
            double v4 = (unint64_t *)a4;
            if (v66 >= 0x20)
            {
              uint64_t v67 = (v52 >> 3) + 1;
              uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v69 = &v29[-v68];
              int v50 = (void *)((char *)v50 - v68);
              uint64_t v70 = &v49[8 * v45 - 16];
              uint64_t v71 = v29 - 16;
              uint64_t v72 = v67 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v73 = *(_OWORD *)v71;
                *(v70 - 1) = *((_OWORD *)v71 - 1);
                _OWORD *v70 = v73;
                v70 -= 2;
                v71 -= 32;
                v72 -= 4;
              }
              while (v72);
              uint64_t v29 = v69;
              if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_74;
              }
            }
          }
          else
          {
            double v4 = (unint64_t *)a4;
          }
          do
          {
            uint64_t v74 = *((void *)v29 - 1);
            v29 -= 8;
            *--int v50 = v74;
          }
          while (v29 != v43);
LABEL_74:
          __p[0] = v50;
          double v113 = &v49[8 * v48];
          if (v43) {
            operator delete(v43);
          }
          a3 = v42;
          goto LABEL_77;
        }
      }
      double v4 = (unint64_t *)a4;
      goto LABEL_74;
    }
    if (__p[0] != __p[1]) {
      goto LABEL_15;
    }
LABEL_7:
    char v10 = 0;
    double v8 = (void *)*v6;
    uint64_t v15 = (void *)*v6;
    uint64_t v16 = v15[7];
    uint64_t v6 = v15 + 7;
  }
  while (v16);
  uint64_t v76 = __p[0];
  uint64_t v75 = __p[1];
  if (__p[0] == __p[1])
  {
    unint64_t v84 = *v4;
    uint64_t v83 = (char *)v4[1];
    if ((char *)*v4 != v83)
    {
      *((void *)v83 - 3) = 0;
      goto LABEL_86;
    }
  }
  else
  {
    *(void *)&v114[16] = 0;
    *(void *)&v114[24] = a3;
    unint64_t v77 = v4[1];
    if (v77 >= v4[2])
    {
      uint64_t v83 = sub_1C4999754(v4, (uint64_t)__p);
    }
    else
    {
      *(void *)unint64_t v77 = 0;
      *(void *)(v77 + 8) = 0;
      *(void *)(v77 + 16) = 0;
      int64_t v78 = v75 - v76;
      if (v75 - v76 < 0) {
        sub_1C494A220();
      }
      uint64_t v79 = (char *)operator new(v75 - v76);
      *(void *)unint64_t v77 = v79;
      *(void *)(v77 + 8) = v79;
      uint64_t v80 = &v79[8 * (v78 >> 3)];
      *(void *)(v77 + 16) = v80;
      memcpy(v79, v76, v78);
      *(void *)(v77 + 8) = v80;
      uint64_t v81 = *(void *)&v114[32];
      long long v82 = *(_OWORD *)&v114[16];
      *(_OWORD *)(v77 + 24) = *(_OWORD *)v114;
      *(_OWORD *)(v77 + 40) = v82;
      *(void *)(v77 + 56) = v81;
      uint64_t v83 = (char *)(v77 + 64);
      double v4 = (unint64_t *)a4;
      *(void *)(a4 + 8) = v77 + 64;
    }
    v4[1] = (unint64_t)v83;
    unint64_t v84 = *v4;
    if ((char *)*v4 != v83)
    {
LABEL_86:
      uint64_t v85 = (char *)(v84 + 64);
      if ((char *)(v84 + 64) != v83)
      {
        unint64_t v86 = (unint64_t)&v83[-v84 - 128];
        unint64_t v87 = v84;
        if (v86 < 0x40) {
          goto LABEL_91;
        }
        uint64_t v88 = (v86 >> 6) + 1;
        uint64_t v89 = (v88 & 0x7FFFFFFFFFFFFFELL) << 6;
        v85 += v89;
        unint64_t v87 = v84 + v89;
        uint64_t v90 = (double *)(v84 + 88);
        uint64_t v91 = v88 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          double v92 = *v90 - v90[8];
          *(v90 - 8) = *(v90 - 8) - *v90;
          *uint64_t v90 = v92;
          v90 += 16;
          v91 -= 2;
        }
        while (v91);
        if (v88 != (v88 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_91:
          int v93 = (double *)(v87 + 88);
          do
          {
            *(v93 - 8) = *(v93 - 8) - *v93;
            v85 += 64;
            v93 += 8;
          }
          while (v85 != v83);
        }
      }
    }
    if ((char *)v84 != v83)
    {
      id v94 = v83 - 64;
      if ((unint64_t)(v83 - 64) > v84)
      {
        do
        {
          unint64_t v95 = *(void *)v84;
          long long v96 = *(_OWORD *)(v84 + 8);
          *(void *)(v84 + 8) = 0;
          *(void *)(v84 + 16) = 0;
          *(void *)unint64_t v84 = 0;
          long long v115 = *(_OWORD *)(v84 + 24);
          long long v97 = *(_OWORD *)(v84 + 40);
          uint64_t v98 = *(void *)(v84 + 56);
          *(_OWORD *)unint64_t v84 = *(_OWORD *)v94;
          *(void *)(v84 + 16) = *((void *)v94 + 2);
          *(void *)id v94 = 0;
          *((void *)v94 + 1) = 0;
          *((void *)v94 + 2) = 0;
          *(_OWORD *)(v84 + 24) = *(_OWORD *)(v94 + 24);
          *(void *)(v84 + 40) = *((void *)v94 + 5);
          *(_OWORD *)(v84 + 48) = *((_OWORD *)v94 + 3);
          __int16 v99 = *(void **)v94;
          if (*(void *)v94)
          {
            *((void *)v94 + 1) = v99;
            long long v109 = v97;
            long long v110 = v96;
            operator delete(v99);
            long long v97 = v109;
            long long v96 = v110;
          }
          *(void *)id v94 = v95;
          *(_OWORD *)(v94 + 8) = v96;
          *(_OWORD *)(v94 + 24) = v115;
          *(_OWORD *)(v94 + 40) = v97;
          *((void *)v94 + 7) = v98;
          v94 -= 64;
          v84 += 64;
        }
        while (v84 < (unint64_t)v94);
        unint64_t v84 = *(void *)a4;
        uint64_t v83 = *(char **)(a4 + 8);
      }
    }
    while ((char *)v84 != v83)
    {
      unint64_t v100 = *(void *)v84;
      uint64_t v101 = *(void *)(v84 + 8);
      int v102 = (void *)(v101 - 8);
      if (*(void *)v84 != v101 && (unint64_t)v102 > v100)
      {
        unint64_t v104 = v100 + 8;
        do
        {
          uint64_t v105 = *(void *)(v104 - 8);
          *(void *)(v104 - 8) = *v102;
          *v102-- = v105;
          BOOL v106 = v104 >= (unint64_t)v102;
          v104 += 8;
        }
        while (!v106);
      }
      v84 += 64;
    }
  }
LABEL_111:
  uint64_t v107 = __p[0];
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(v107);
  }
}

void sub_1C4998578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1C49985EC(a14);
  _Unwind_Resume(a1);
}

void **sub_1C49985EC(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    double v4 = *a1;
    if (v3 != v2)
    {
      double v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 8);
        v5 -= 64;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      double v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1C4998664(uint64_t a1)
{
  double v4 = (void **)(a1 + 56);
  sub_1C49989E0(&v4);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    sub_1C4998B18(a1 + 24, v2);
    operator delete(*(void **)(a1 + 24));
  }
  sub_1C4998D2C(*(void **)(a1 + 8));
  return a1;
}

void sub_1C49986C4(char **a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  double v4 = (char *)operator new(8uLL);
  *(void *)double v4 = *a2;
  double v5 = v4 + 8;
  a1[1] = v4 + 8;
  a1[2] = v4 + 8;
  *a1 = v4;
  uint64_t v6 = (void *)a2[7];
  if (v6)
  {
    uint64_t v7 = v4;
    double v8 = v4 + 8;
    while (1)
    {
      while (v8 < v5)
      {
        *(void *)double v8 = *v6;
        v8 += 8;
        a1[1] = v8;
        uint64_t v6 = (void *)v6[7];
        if (!v6) {
          return;
        }
      }
      uint64_t v9 = (v8 - v7) >> 3;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        sub_1C494A220();
      }
      if ((v5 - v7) >> 2 > v10) {
        unint64_t v10 = (v5 - v7) >> 2;
      }
      if ((unint64_t)(v5 - v7) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11)
      {
        if (v11 >> 61) {
          sub_1C4949AA8();
        }
        uint64_t v12 = operator new(8 * v11);
        double v13 = &v12[8 * v9];
        *(void *)double v13 = *v6;
        uint64_t v14 = (uint64_t)(v13 + 8);
        int64_t v15 = v8 - v7;
        if (v8 == v7) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v12 = 0;
        double v13 = (char *)(8 * v9);
        *(void *)(8 * v9) = *v6;
        uint64_t v14 = 8 * v9 + 8;
        int64_t v15 = v8 - v7;
        if (v8 == v7) {
          goto LABEL_19;
        }
      }
      unint64_t v16 = v15 - 8;
      if (v16 < 0x168)
      {
        int v17 = v8;
        goto LABEL_18;
      }
      unint64_t v19 = (v8 - 8 - v7) & 0xFFFFFFFFFFFFFFF8;
      if (&v12[v8 - v7 - 8 - v19] > &v12[v8 - v7 - 8]) {
        break;
      }
      if (&v8[-v19 - 8] > v8 - 8)
      {
        int v17 = v8;
        goto LABEL_18;
      }
      if ((unint64_t)(v7 - v12) < 0x20)
      {
        int v17 = v8;
        goto LABEL_18;
      }
      uint64_t v20 = (v16 >> 3) + 1;
      uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      int v17 = &v8[-v21];
      v13 -= v21;
      unint64_t v22 = &v12[8 * v9 - 16];
      uint64_t v23 = v8 - 16;
      uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *unint64_t v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 4;
      }
      while (v24);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
LABEL_19:
      double v5 = &v12[8 * v11];
      *a1 = v13;
      a1[1] = (char *)v14;
      a1[2] = v5;
      if (v7) {
        operator delete(v7);
      }
      uint64_t v7 = v13;
      a1[1] = (char *)v14;
      uint64_t v6 = (void *)v6[7];
      double v8 = (char *)v14;
      if (!v6) {
        return;
      }
    }
    int v17 = v8;
    do
    {
LABEL_18:
      uint64_t v18 = *((void *)v17 - 1);
      v17 -= 8;
      *((void *)v13 - 1) = v18;
      v13 -= 8;
    }
    while (v17 != v7);
    goto LABEL_19;
  }
}

void sub_1C49988E4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1C499890C(void *a1)
{
  a1[8] = &unk_1F20124C0;
  uint64_t v2 = a1[10];
  if (v2)
  {
    uint64_t v3 = a1[11];
    double v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        double v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      double v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C49989E0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    double v4 = (char *)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        *((void *)v4 - 5) = &unk_1F20124C0;
        uint64_t v7 = *((void *)v4 - 3);
        if (v7)
        {
          uint64_t v8 = *((void *)v4 - 2);
          uint64_t v6 = (void *)*((void *)v4 - 3);
          if (v8 != v7)
          {
            do
            {
              uint64_t v9 = *(std::__shared_weak_count **)(v8 - 8);
              if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
              v8 -= 16;
            }
            while (v8 != v7);
            uint64_t v6 = (void *)*((void *)v4 - 3);
          }
          *((void *)v4 - 2) = v7;
          operator delete(v6);
        }
        v4 -= 104;
      }
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C4998B18(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  double v4 = *(void **)(result + 8);
  while (v4 != a2)
  {
    uint64_t v7 = (void *)*--v4;
    uint64_t v6 = v7;
    *double v4 = 0;
    if (v7)
    {
      v6[8] = &unk_1F20124C0;
      uint64_t v8 = v6[10];
      if (v8)
      {
        uint64_t v9 = v6[11];
        double v5 = (void *)v6[10];
        if (v9 != v8)
        {
          do
          {
            unint64_t v10 = *(std::__shared_weak_count **)(v9 - 8);
            if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
            v9 -= 16;
          }
          while (v9 != v8);
          double v5 = (void *)v6[10];
        }
        v6[11] = v8;
        operator delete(v5);
      }
      double result = MEMORY[0x1C8786460](v6, 0x10A0C407BC771E5);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void *sub_1C4998C34(void *a1)
{
  uint64_t v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    v2[8] = &unk_1F20124C0;
    uint64_t v3 = v2[10];
    if (v3)
    {
      uint64_t v4 = v2[11];
      double v5 = (void *)v2[10];
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
          if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          v4 -= 16;
        }
        while (v4 != v3);
        double v5 = (void *)v2[10];
      }
      v2[11] = v3;
      operator delete(v5);
    }
    MEMORY[0x1C8786460](v2, 0x10A0C407BC771E5);
  }
  return a1;
}

void sub_1C4998D2C(void *a1)
{
  if (a1)
  {
    sub_1C4998D2C(*a1);
    sub_1C4998D2C(a1[1]);
    uint64_t v2 = (void *)a1[4];
    if (v2)
    {
      a1[5] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_1C4998D88(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4 = *(void **)(result + 16);
  double v5 = *(void **)(result + 24);
  if (v4 != v5)
  {
    while (*v4 != *(void *)a2)
    {
      if (++v4 == v5)
      {
        uint64_t v4 = *(void **)(result + 24);
        break;
      }
    }
  }
  if (v4 != v5 && *(unsigned char *)(result + 8) && *(double *)(a2 + 40) < a4)
  {
    *(void *)(a2 + 8) = a3;
    *(double *)(a2 + 40) = a4;
  }
  return result;
}

uint64_t sub_1C4998DDC(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4 = *(void **)(result + 16);
  double v5 = *(void **)(result + 24);
  if (v4 != v5)
  {
    while (*v4 != *(void *)a2)
    {
      if (++v4 == v5)
      {
        uint64_t v4 = *(void **)(result + 24);
        break;
      }
    }
  }
  if (v4 != v5)
  {
    *(void *)(a2 + 8) = a3;
    *(double *)(a2 + 40) = a4;
  }
  return result;
}

char *sub_1C4998E1C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  uint64_t v1 = (char *)a1[1];
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * ((v1 - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    sub_1C494A220();
  }
  if (0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - v2) >> 3) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - v2) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - v2) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x276276276276276) {
      sub_1C4949AA8();
    }
    uint64_t v7 = (char *)operator new(104 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[104 * v3];
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  uint64_t v9 = &v7[104 * v6];
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((void *)v8 + 8) = &unk_1F20124C0;
  *((void *)v8 + 11) = 0;
  *((void *)v8 + 12) = 0;
  *((void *)v8 + 10) = 0;
  unint64_t v10 = v8 + 104;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = &v8[v11];
      double v13 = &v1[v11];
      long long v14 = *(_OWORD *)&v1[v11 - 104];
      long long v15 = *(_OWORD *)&v1[v11 - 88];
      long long v16 = *(_OWORD *)&v1[v11 - 72];
      *(_OWORD *)(v12 - 56) = *(_OWORD *)&v1[v11 - 56];
      *(_OWORD *)(v12 - 72) = v16;
      *(_OWORD *)(v12 - 88) = v15;
      *(_OWORD *)(v12 - 104) = v14;
      *((void *)v12 - 4) = *(void *)&v1[v11 - 32];
      *((void *)v12 - 5) = &unk_1F20124C0;
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)&v1[v11 - 24];
      *((void *)v12 - 1) = *(void *)&v1[v11 - 8];
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      v11 -= 104;
    }
    while (&v1[v11] != v2);
    uint64_t v1 = (char *)*a1;
    int v17 = (char *)a1[1];
    *a1 = &v8[v11];
    a1[1] = v10;
    for (a1[2] = v9; v17 != v1; v17 -= 104)
    {
      *((void *)v17 - 5) = &unk_1F20124C0;
      uint64_t v19 = *((void *)v17 - 3);
      if (v19)
      {
        uint64_t v20 = *((void *)v17 - 2);
        uint64_t v18 = (void *)*((void *)v17 - 3);
        if (v20 != v19)
        {
          do
          {
            uint64_t v21 = *(std::__shared_weak_count **)(v20 - 8);
            if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
            v20 -= 16;
          }
          while (v20 != v19);
          uint64_t v18 = (void *)*((void *)v17 - 3);
        }
        *((void *)v17 - 2) = v19;
        operator delete(v18);
      }
    }
  }
  if (v1) {
    operator delete(v1);
  }
  return v10;
}

void sub_1C49990A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = 0;
    long long v18 = *(_OWORD *)(a1 + 32);
    long long v19 = *(_OWORD *)(a1 + 48);
    long long v16 = *(_OWORD *)a1;
    long long v17 = *(_OWORD *)(a1 + 16);
    uint64_t v20 = *(void *)(a1 + 72);
    *(_OWORD *)__p = *(_OWORD *)(a1 + 80);
    uint64_t v22 = *(void *)(a1 + 96);
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 80) = 0;
    uint64_t v4 = a1;
    do
    {
      uint64_t v8 = v4;
      uint64_t v9 = v3 + 1;
      v4 += 104 * (v3 + 1);
      uint64_t v10 = 2 * v3;
      uint64_t v3 = (2 * v3) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a3
        && *(double *)(v8 + 104 * v9 + 32) + *(double *)(v8 + 104 * v9 + 48) > *(double *)(v4 + 136)
                                                                             + *(double *)(v4 + 152))
      {
        v4 += 104;
        uint64_t v3 = v11;
      }
      long long v5 = *(_OWORD *)v4;
      long long v6 = *(_OWORD *)(v4 + 16);
      long long v7 = *(_OWORD *)(v4 + 48);
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(v4 + 32);
      *(_OWORD *)(v8 + 48) = v7;
      *(_OWORD *)uint64_t v8 = v5;
      *(_OWORD *)(v8 + 16) = v6;
      *(void *)(v8 + 72) = *(void *)(v4 + 72);
      *(_OWORD *)(v8 + 80) = *(_OWORD *)(v4 + 80);
      *(void *)(v8 + 96) = *(void *)(v4 + 96);
      *(void *)(v4 + 80) = 0;
      *(void *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = 0;
    }
    while (v3 <= (uint64_t)((unint64_t)(a3 - 2) >> 1));
    uint64_t v12 = (long long *)(a2 - 104);
    if (a2 - 104 == v4)
    {
      *(_OWORD *)(v4 + 32) = v18;
      *(_OWORD *)(v4 + 48) = v19;
      *(_OWORD *)uint64_t v4 = v16;
      *(_OWORD *)(v4 + 16) = v17;
      *(void *)(v4 + 72) = v20;
      *(_OWORD *)(v4 + 80) = *(_OWORD *)__p;
      *(void *)(v4 + 96) = v22;
    }
    else
    {
      long long v13 = *v12;
      long long v14 = *(_OWORD *)(a2 - 88);
      long long v15 = *(_OWORD *)(a2 - 56);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 - 72);
      *(_OWORD *)(v4 + 48) = v15;
      *(_OWORD *)uint64_t v4 = v13;
      *(_OWORD *)(v4 + 16) = v14;
      *(void *)(v4 + 72) = *(void *)(a2 - 32);
      *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 - 24);
      *(void *)(v4 + 96) = *(void *)(a2 - 8);
      *(_OWORD *)(a2 - 72) = v18;
      *(_OWORD *)(a2 - 56) = v19;
      *uint64_t v12 = v16;
      *(_OWORD *)(a2 - 88) = v17;
      *(void *)(a2 - 32) = v20;
      *(_OWORD *)(a2 - 24) = *(_OWORD *)__p;
      *(void *)(a2 - 8) = v22;
      sub_1C499933C(a1, v4 + 104, 0x4EC4EC4EC4EC4EC5 * ((v4 + 104 - a1) >> 3));
    }
  }
}

void sub_1C4999328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_1C499933C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = v3 >> 1;
    double result = *(double *)(a1 + 104 * (v3 >> 1) + 32) + *(double *)(a1 + 104 * (v3 >> 1) + 48);
    if (result > *(double *)(a2 - 72) + *(double *)(a2 - 56))
    {
      long long v7 = (long long *)(a2 - 104);
      long long v23 = *(_OWORD *)(a2 - 72);
      long long v24 = *(_OWORD *)(a2 - 56);
      long long v21 = *(_OWORD *)(a2 - 104);
      long long v22 = *(_OWORD *)(a2 - 88);
      uint64_t v25 = *(void *)(a2 - 32);
      long long v26 = *(_OWORD *)(a2 - 24);
      uint64_t v27 = *(void *)(a2 - 8);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      do
      {
        uint64_t v8 = (long long *)(a1 + 104 * v5);
        long long v9 = *v8;
        long long v10 = v8[1];
        long long v11 = v8[3];
        v7[2] = v8[2];
        v7[3] = v11;
        *long long v7 = v9;
        v7[1] = v10;
        *((void *)v7 + 9) = *((void *)v8 + 9);
        uint64_t v12 = (void **)(v7 + 5);
        uint64_t v13 = *((void *)v7 + 10);
        if (v13)
        {
          uint64_t v14 = *((void *)v7 + 11);
          long long v15 = (void *)*((void *)v7 + 10);
          if (v14 != v13)
          {
            do
            {
              long long v16 = *(std::__shared_weak_count **)(v14 - 8);
              if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
              v14 -= 16;
            }
            while (v14 != v13);
            long long v15 = *v12;
          }
          *((void *)v7 + 11) = v13;
          operator delete(v15);
          *uint64_t v12 = 0;
          *((void *)v7 + 11) = 0;
          *((void *)v7 + 12) = 0;
        }
        uint64_t v17 = a1 + 104 * v5;
        long long v18 = (void *)(v17 + 80);
        v7[5] = *(_OWORD *)(v17 + 80);
        uint64_t v20 = *(void *)(v17 + 96);
        long long v19 = (void *)(v17 + 96);
        *((void *)v7 + 12) = v20;
        *(v19 - 1) = 0;
        void *v19 = 0;
        void *v18 = 0;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        long long v7 = v8;
      }
      while (*(double *)(a1 + 104 * v5 + 32) + *(double *)(a1 + 104 * v5 + 48) > *(double *)&v23 + *(double *)&v24);
      v8[2] = v23;
      v8[3] = v24;
      long long *v8 = v21;
      v8[1] = v22;
      *((void *)v8 + 9) = v25;
      double result = *(double *)&v26;
      *(_OWORD *)long long v18 = v26;
      void *v19 = v27;
    }
  }
  return result;
}

uint64_t *sub_1C499954C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  long long v6 = *(char **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  long long v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    long long v9 = *(char **)v4;
    uint64_t v10 = (uint64_t)&v6[-*(void *)v4];
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      sub_1C494A220();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_1C4949AA8();
      }
      long long v15 = operator new(8 * v14);
    }
    else
    {
      long long v15 = 0;
    }
    long long v16 = &v15[8 * v11];
    *long long v16 = *a2;
    uint64_t v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 8;
      if (v17 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      long long v7 = &v6[-v19];
      long long v16 = (void *)((char *)v16 - v19);
      uint64_t v20 = &v15[8 * v11 - 16];
      long long v21 = v6 - 16;
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *uint64_t v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v24 = *((void *)v7 - 1);
          v7 -= 8;
          *--long long v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(void *)uint64_t v4 = v16;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = &v15[8 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)long long v6 = *a2;
    uint64_t v8 = v6 + 8;
  }
  *(void *)(v4 + 8) = v8;
  return a1;
}

BOOL sub_1C49996C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) == 2
      || (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a3) == 1;
}

char *sub_1C4999754(void *a1, uint64_t a2)
{
  unint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  uint64_t v4 = (uint64_t)&v2[-*a1] >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    sub_1C494A220();
  }
  uint64_t v8 = a1[2] - (void)v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 58) {
      sub_1C4949AA8();
    }
    uint64_t v10 = (char *)operator new(v9 << 6);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[64 * v4];
  unint64_t v12 = &v10[64 * v9];
  *((void *)&v29 + 1) = v12;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)uint64_t v11 = 0;
  unint64_t v14 = *(const void **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  int64_t v15 = v13 - *(void *)a2;
  if (v13 != *(void *)a2)
  {
    if (v15 < 0) {
      sub_1C494A220();
    }
    long long v16 = (char *)operator new(v13 - *(void *)a2);
    *(void *)uint64_t v11 = v16;
    *((void *)v11 + 1) = v16;
    unint64_t v17 = &v16[8 * (v15 >> 3)];
    *((void *)v11 + 2) = v17;
    memcpy(v16, v14, v15);
    *((void *)v11 + 1) = v17;
  }
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  uint64_t v18 = v11 + 64;
  if (v2 == v3)
  {
    *a1 = v11;
    a1[1] = v18;
    a1[2] = v12;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = &v11[v19];
      long long v21 = &v2[v19];
      *((void *)v20 - 7) = 0;
      *((void *)v20 - 6) = 0;
      *((_OWORD *)v20 - 4) = *(_OWORD *)&v2[v19 - 64];
      *((void *)v20 - 6) = *(void *)&v2[v19 - 48];
      *((void *)v21 - 8) = 0;
      *((void *)v21 - 7) = 0;
      *((void *)v21 - 6) = 0;
      long long v22 = *(_OWORD *)&v2[v19 - 40];
      long long v23 = *(_OWORD *)&v2[v19 - 24];
      *((void *)v20 - 1) = *(void *)&v2[v19 - 8];
      *(_OWORD *)(v20 - 24) = v23;
      *(_OWORD *)(v20 - 40) = v22;
      v19 -= 64;
    }
    while (&v2[v19] != v3);
    uint64_t v2 = (char *)*a1;
    uint64_t v24 = (char *)a1[1];
    *a1 = &v11[v19];
    *(void *)&long long v29 = v11 + 64;
    *(_OWORD *)(a1 + 1) = v29;
    uint64_t v18 = v11 + 64;
    if (v24 != v2)
    {
      uint64_t v25 = v24;
      do
      {
        uint64_t v27 = (void *)*((void *)v25 - 8);
        v25 -= 64;
        long long v26 = v27;
        if (v27)
        {
          *((void *)v24 - 7) = v26;
          operator delete(v26);
        }
        uint64_t v24 = v25;
      }
      while (v25 != v2);
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v18;
}

void sub_1C499993C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_1C4999960((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4999960(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 64;
        uint64_t v4 = *(void **)(v2 - 64);
        *(void *)(a1 + 16) = v2 - 64;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 56) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 64;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C49999D0(void *a1)
{
  *a1 = &unk_1F2012610;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C4999A40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 24);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        uint64_t v2 = *(void **)(a1 + 24);
        return 2 * (v2 != v3);
      }
    }
  }
  return 2 * (v2 != v3);
}

double sub_1C4999A78(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    return 0.0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void *)(a2 + 56);
    if (v3 && a3 == 0) {
      return (*(double *)(a2 + 32) + *(double *)(v3 + 32)) * 0.5;
    }
  }
  return *(double *)(a2 + 32);
}

uint64_t sub_1C4999ABC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 240);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 240) = 0;
  }
  sub_1C4999C7C(a1 + 216, *(void **)(a1 + 224));
  sub_1C4999CD0(a1 + 192, *(void **)(a1 + 200));
  *(void *)(a1 + 128) = &unk_1F2011DC0;
  sub_1C4949DD4(a1 + 160, *(char **)(a1 + 168));
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    uint64_t v5 = *(void **)(a1 + 136);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 24;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 136);
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 104);
  if (v6)
  {
    *(void *)(a1 + 112) = v6;
    operator delete(v6);
  }
  long long v7 = *(void **)(a1 + 80);
  if (v7)
  {
    *(void *)(a1 + 88) = v7;
    operator delete(v7);
  }
  sub_1C4999C7C(a1 + 56, *(void **)(a1 + 64));
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8)
  {
    *(void *)(a1 + 40) = v8;
    operator delete(v8);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1C4999BE4(uint64_t a1)
{
  *(void *)a1 = &unk_1F2011DC0;
  sub_1C4949DD4(a1 + 32, *(char **)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C4999C7C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1C4999C7C(a1, *a2);
    sub_1C4999C7C(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_1C4999CD0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1C4999CD0(a1, *a2);
    sub_1C4999CD0(a1, a2[1]);
    sub_1C4999C7C((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *sub_1C4999D30(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = (char **)(a1 + 1);
  uint64_t v36 = a1[2];
  long long v6 = (uint64_t **)(a1 + 4);
  uint64_t v8 = a1 + 5;
  uint64_t v7 = a1[5];
  if (!v7) {
    goto LABEL_40;
  }
  uint64_t v35 = a1[1];
  unint64_t v9 = (uint64_t **)(a1 + 4);
  int v10 = *(char *)(a2 + 23);
  size_t v11 = v10 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  unint64_t v12 = v10 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v13 = a1 + 5;
  do
  {
    int v14 = *(char *)(v7 + 55);
    if (v14 >= 0) {
      size_t v15 = *(unsigned __int8 *)(v7 + 55);
    }
    else {
      size_t v15 = *(void *)(v7 + 40);
    }
    if (v14 >= 0) {
      long long v16 = (const void *)(v7 + 32);
    }
    else {
      long long v16 = *(const void **)(v7 + 32);
    }
    if (v11 >= v15) {
      size_t v17 = v15;
    }
    else {
      size_t v17 = v11;
    }
    int v18 = memcmp(v16, v12, v17);
    BOOL v19 = v15 < v11;
    if (v18) {
      BOOL v19 = v18 < 0;
    }
    BOOL v20 = !v19;
    if (v19) {
      long long v21 = (uint64_t *)(v7 + 8);
    }
    else {
      long long v21 = (uint64_t *)v7;
    }
    if (v20) {
      uint64_t v13 = (void *)v7;
    }
    uint64_t v7 = *v21;
  }
  while (*v21);
  long long v6 = v9;
  uint64_t v5 = v35;
  if (v13 == v8) {
    goto LABEL_40;
  }
  uint64_t v24 = (const void *)v13[4];
  long long v23 = v13 + 4;
  long long v22 = v24;
  int v25 = *((char *)v23 + 23);
  if (v25 >= 0) {
    size_t v26 = *((unsigned __int8 *)v23 + 23);
  }
  else {
    size_t v26 = v23[1];
  }
  if (v25 >= 0) {
    uint64_t v27 = v23;
  }
  else {
    uint64_t v27 = v22;
  }
  if (v26 >= v11) {
    size_t v28 = v11;
  }
  else {
    size_t v28 = v26;
  }
  int v29 = memcmp(v12, v27, v28);
  BOOL v30 = v11 < v26;
  if (v29) {
    BOOL v30 = v29 < 0;
  }
  if (v30)
  {
LABEL_40:
    uint64_t v31 = (uint64_t *)(0xAAAAAAAAAAAAAAABLL * ((v36 - v5) >> 3));
    unint64_t v37 = (long long *)a2;
    sub_1C499A108(v6, (const void **)a2, (uint64_t)&unk_1C4C39B40, &v37)[7] = v31;
    unint64_t v32 = a1[2];
    if (v32 >= a1[3])
    {
      a1[2] = sub_1C499A2A8(v4, a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1C4949ADC((unsigned char *)a1[2], *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v33 = *(_OWORD *)a2;
        *(void *)(v32 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)unint64_t v32 = v33;
      }
      a1[2] = v32 + 24;
      a1[2] = v32 + 24;
    }
  }
  else
  {
    unint64_t v37 = (long long *)a2;
    return sub_1C499A108(v6, (const void **)a2, (uint64_t)&unk_1C4C39B40, &v37)[7];
  }
  return v31;
}

void sub_1C4999F2C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_1C4999F34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 40;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = (uint64_t **)(a1 + 32);
  if (!v7) {
    goto LABEL_40;
  }
  int v9 = *(char *)(a2 + 23);
  size_t v10 = v9 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  size_t v11 = v9 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v12 = a1 + 40;
  do
  {
    int v13 = *(char *)(v7 + 55);
    if (v13 >= 0) {
      size_t v14 = *(unsigned __int8 *)(v7 + 55);
    }
    else {
      size_t v14 = *(void *)(v7 + 40);
    }
    if (v13 >= 0) {
      size_t v15 = (const void *)(v7 + 32);
    }
    else {
      size_t v15 = *(const void **)(v7 + 32);
    }
    if (v10 >= v14) {
      size_t v16 = v14;
    }
    else {
      size_t v16 = v10;
    }
    int v17 = memcmp(v15, v11, v16);
    BOOL v18 = v14 < v10;
    if (v17) {
      BOOL v18 = v17 < 0;
    }
    BOOL v19 = !v18;
    if (v18) {
      BOOL v20 = (uint64_t *)(v7 + 8);
    }
    else {
      BOOL v20 = (uint64_t *)v7;
    }
    if (v19) {
      uint64_t v12 = v7;
    }
    uint64_t v7 = *v20;
  }
  while (*v20);
  if (v12 == v6) {
    goto LABEL_40;
  }
  long long v23 = *(const void **)(v12 + 32);
  uint64_t v22 = v12 + 32;
  long long v21 = v23;
  int v24 = *(char *)(v22 + 23);
  if (v24 >= 0) {
    size_t v25 = *(unsigned __int8 *)(v22 + 23);
  }
  else {
    size_t v25 = *(void *)(v22 + 8);
  }
  if (v24 >= 0) {
    size_t v26 = (const void *)v22;
  }
  else {
    size_t v26 = v21;
  }
  if (v25 >= v10) {
    size_t v27 = v10;
  }
  else {
    size_t v27 = v25;
  }
  int v28 = memcmp(v11, v26, v27);
  BOOL v29 = v10 < v25;
  if (v28) {
    BOOL v29 = v28 < 0;
  }
  if (v29)
  {
LABEL_40:
    long long v33 = (long long *)a2;
    sub_1C499A108(v8, (const void **)a2, (uint64_t)&unk_1C4C39B40, &v33)[7] = a3;
    unint64_t v30 = *(void *)(a1 + 16);
    if (v30 >= *(void *)(a1 + 24))
    {
      *(void *)(a1 + 16) = sub_1C499A2A8((char **)(a1 + 8), a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1C4949ADC(*(unsigned char **)(a1 + 16), *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v31 = *(_OWORD *)a2;
        *(void *)(v30 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)unint64_t v30 = v31;
      }
      *(void *)(a1 + 16) = v30 + 24;
      *(void *)(a1 + 16) = v30 + 24;
    }
  }
  else
  {
    long long v33 = (long long *)a2;
    return sub_1C499A108(v8, (const void **)a2, (uint64_t)&unk_1C4C39B40, &v33)[7];
  }
  return a3;
}

void sub_1C499A100(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t **sub_1C499A108(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      size_t v10 = a2;
    }
    else {
      size_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        size_t v11 = (uint64_t **)v6;
        size_t v14 = (const void *)v6[4];
        uint64_t v12 = v6 + 4;
        int v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          int v17 = v12;
        }
        else {
          int v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      uint64_t v6 = v11[1];
      if (!v6)
      {
        uint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    size_t v11 = a1 + 1;
LABEL_27:
    long long v23 = operator new(0x40uLL);
    int v24 = v23 + 4;
    size_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_1C4949ADC(v24, *(void **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      v23[6] = *((void *)v25 + 2);
      *(_OWORD *)int v24 = v26;
    }
    v23[7] = 0;
    void *v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *uint64_t v7 = v23;
    size_t v27 = (uint64_t *)**a1;
    int v28 = v23;
    if (v27)
    {
      *a1 = v27;
      int v28 = *v7;
    }
    sub_1C4949FD4(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1C499A294(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1C499A2A8(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1C494A220();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C4949AA8();
    }
    size_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    size_t v9 = 0;
  }
  size_t v10 = &v9[24 * v5];
  size_t v16 = v10;
  int v17 = v10;
  size_t v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C4949ADC(v10, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    size_t v10 = v16;
    size_t v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      int v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)size_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
    size_t v11 = v10 + 24;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    *((void *)v10 - 1) = *((void *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  int v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    size_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_1C499A46C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C499A480((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C499A480(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C499A4E8(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "CHChatBubble");
}

void sub_1C499A518(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "CHEllipse");
}

void sub_1C499A53C(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "CHManhattanLine");
}

void *sub_1C499A568(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    unint64_t v6 = a2;
    uint64_t v7 = (void **)result;
    unint64_t v8 = result + 1;
    do
    {
      double result = sub_1C499A67C(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        size_t v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        size_t v10 = (uint64_t **)result;
        size_t v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6[4];
        uint64_t v12 = v18[0];
        *size_t v11 = 0;
        v11[1] = 0;
        v11[2] = v12;
        *size_t v10 = v11;
        int v13 = (void *)**v7;
        if (v13)
        {
          *uint64_t v7 = v13;
          size_t v14 = *v10;
        }
        else
        {
          size_t v14 = v11;
        }
        double result = sub_1C4949FD4(v7[1], v14);
        v7[2] = (void *)((char *)v7[2] + 1);
        size_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            int v15 = v9;
            size_t v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        int v15 = (void *)v6[2];
        BOOL v16 = *v15 == (void)v6;
        unint64_t v6 = v15;
      }
      while (!v16);
LABEL_3:
      unint64_t v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void *sub_1C499A67C(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      size_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      size_t v9 = (void *)*a2;
      do
      {
        size_t v10 = v9;
        size_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      size_t v14 = a2;
      do
      {
        size_t v10 = (void *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        size_t v14 = v10;
      }
      while (v15);
    }
    unint64_t v16 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    size_t v18 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v19 = v18;
          unint64_t v20 = v18[4];
          if (v16 >= v20) {
            break;
          }
          size_t v18 = (void *)*v19;
          unint64_t v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        unint64_t v5 = v19 + 1;
        size_t v18 = (void *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      uint64_t v12 = (void *)a2[1];
      do
      {
        int v13 = v12;
        uint64_t v12 = (void *)*v12;
      }
      while (v12);
    }
    else
    {
      int v21 = a2;
      do
      {
        int v13 = (void *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        int v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      BOOL v22 = (void *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            long long v23 = v22;
            unint64_t v24 = v22[4];
            if (v6 >= v24) {
              break;
            }
            BOOL v22 = (void *)*v23;
            unint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          unint64_t v5 = v23 + 1;
          BOOL v22 = (void *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t sub_1C499A82C(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v2 = (void *)(a1 + 32);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_1C499AAD8((void *)(a1 + 128));
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  uint64_t v4 = *(_OWORD **)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  if ((unint64_t)v4 >= v3)
  {
    unint64_t v16 = (_OWORD **)v2;
    unint64_t v6 = (_OWORD *)*v2;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v4 - *v2) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0x666666666666666) {
      sub_1C494A220();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3 - (void)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x333333333333333) {
      unint64_t v10 = 0x666666666666666;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x666666666666666) {
        sub_1C4949AA8();
      }
      uint64_t v11 = (char *)operator new(40 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[40 * v7];
    v12[32] = 0;
    *(_OWORD *)uint64_t v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    unint64_t v5 = v12 + 40;
    if (v4 != v6)
    {
      do
      {
        long long v13 = *(_OWORD *)((char *)v4 - 40);
        long long v14 = *(_OWORD *)((char *)v4 - 24);
        *(v12 - 8) = *((unsigned char *)v4 - 8);
        *(_OWORD *)(v12 - 24) = v14;
        *(_OWORD *)(v12 - 40) = v13;
        v12 -= 40;
        uint64_t v4 = (_OWORD *)((char *)v4 - 40);
      }
      while (v4 != v6);
      uint64_t v4 = *v16;
    }
    *(void *)(a1 + 32) = v12;
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = &v11[40 * v10];
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *((unsigned char *)v4 + 32) = 0;
    *uint64_t v4 = 0u;
    v4[1] = 0u;
    unint64_t v5 = (char *)v4 + 40;
  }
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(*(void *)(a1 + 32) + 32) = 1;
  return a1;
}

void sub_1C499AA14(_Unwind_Exception *a1)
{
  unint64_t v7 = *(void **)(v1 + 104);
  if (v7)
  {
    *(void *)(v1 + 112) = v7;
    operator delete(v7);
    unint64_t v8 = *v5;
    if (!*v5)
    {
LABEL_3:
      sub_1C4999C7C(v3, *v4);
      unint64_t v9 = *v2;
      if (!*v2) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v8 = *v5;
    if (!*v5) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 88) = v8;
  operator delete(v8);
  sub_1C4999C7C(v3, *v4);
  unint64_t v9 = *v2;
  if (!*v2)
  {
LABEL_4:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v1 + 40) = v9;
  operator delete(v9);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void *sub_1C499AAD8(void *a1)
{
  *a1 = &unk_1F2011DC0;
  a1[1] = 0;
  a1[5] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 5;
  a1[6] = 0;
  char v6 = 1;
  LOWORD(v5) = 44;
  char v4 = 1;
  LOWORD(__p) = 35;
  sub_1C4999D30(a1, (uint64_t)&v5);
  (*(void (**)(void *, void **))*a1)(a1, &__p);
  if (v4 < 0)
  {
    operator delete(__p);
    if ((v6 & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((v6 & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v5);
  return a1;
}

void sub_1C499ABD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_1C4949DD4(v21, *v22);
  sub_1C4935DF0(v20);
  _Unwind_Resume(a1);
}

void *sub_1C499AC18(void *result, char *__src, char *a3, size_t __sz)
{
  char v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666) {
LABEL_23:
    }
      sub_1C494A220();
    uint64_t v13 = 5 * v12;
    double result = operator new(40 * v12);
    unint64_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      double result = memcpy(result, v6, v14 - 7);
    }
    BOOL v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  BOOL v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 7;
    int v19 = (void *)*result;
LABEL_21:
    double result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    double result = memmove((void *)*result, __src, v16 - v9 - 7);
    unint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 7;
    int v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *BOOL v15 = &v9[v14];
  return result;
}

void sub_1C499AD9C(uint64_t a1, void *a2, void *a3)
{
  char v4 = a2;
  if (*(void *)(a1 + 16))
  {
    char v6 = *(uint64_t **)a1;
    uint64_t v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    unint64_t v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      unint64_t v10 = (uint64_t *)v9[2];
      if (v10)
      {
        uint64_t v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *unint64_t v10 = 0;
          while (1)
          {
            unint64_t v34 = (uint64_t *)v10[1];
            if (!v34) {
              break;
            }
            do
            {
              unint64_t v10 = v34;
              unint64_t v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
          {
            do
            {
              unint64_t v10 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        unint64_t v12 = v9;
        uint64_t v13 = v4;
        while (1)
        {
          unint64_t v9 = v10;
          unint64_t v14 = v13[4];
          v12[4] = v14;
          BOOL v15 = *v8;
          unint64_t v16 = (uint64_t **)(a1 + 8);
          uint64_t v17 = (uint64_t **)(a1 + 8);
          if (*v8) {
            break;
          }
LABEL_14:
          *unint64_t v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *uint64_t v17 = v12;
          uint64_t v18 = **(void **)a1;
          if (v18) {
            goto LABEL_15;
          }
LABEL_16:
          sub_1C4949FD4(*(uint64_t **)(a1 + 8), v12);
          ++*(void *)(a1 + 16);
          if (v10)
          {
            unint64_t v10 = (uint64_t *)v10[2];
            if (v10)
            {
              uint64_t v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *unint64_t v10 = 0;
                while (1)
                {
                  BOOL v22 = (uint64_t *)v10[1];
                  if (!v22) {
                    break;
                  }
                  do
                  {
                    unint64_t v10 = v22;
                    BOOL v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; uint64_t v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    unint64_t v10 = v21;
                    uint64_t v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            unint64_t v10 = 0;
          }
          int v19 = (void *)v13[1];
          if (v19)
          {
            do
            {
              char v4 = v19;
              int v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              char v4 = (void *)v13[2];
              BOOL v20 = *v4 == (void)v13;
              uint64_t v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            unint64_t v12 = v9;
            uint64_t v13 = v4;
            if (v4 != a3) {
              continue;
            }
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            unint64_t v16 = (uint64_t **)v15;
            if (v14 >= v15[4]) {
              break;
            }
            BOOL v15 = (uint64_t *)*v15;
            uint64_t v17 = v16;
            if (!*v16) {
              goto LABEL_14;
            }
          }
          BOOL v15 = (uint64_t *)v15[1];
        }
        while (v15);
        uint64_t v17 = v16 + 1;
        *unint64_t v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        uint64_t v18 = **(void **)a1;
        if (!v18) {
          goto LABEL_16;
        }
LABEL_15:
        *(void *)a1 = v18;
        unint64_t v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      sub_1C4999C7C(a1, v9);
      if (v10)
      {
        for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
          unint64_t v10 = i;
        sub_1C4999C7C(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    unint64_t v24 = (uint64_t **)(a1 + 8);
    while (1)
    {
      size_t v25 = (uint64_t *)operator new(0x28uLL);
      long long v26 = v25;
      unint64_t v27 = v4[4];
      v25[4] = v27;
      int v28 = *v24;
      BOOL v29 = (uint64_t **)(a1 + 8);
      unint64_t v30 = (uint64_t **)(a1 + 8);
      if (*v24) {
        break;
      }
LABEL_50:
      *size_t v25 = 0;
      v25[1] = 0;
      void v25[2] = (uint64_t)v29;
      *unint64_t v30 = v25;
      uint64_t v31 = **(void **)a1;
      if (v31) {
        goto LABEL_51;
      }
LABEL_52:
      sub_1C4949FD4(*(uint64_t **)(a1 + 8), v26);
      ++*(void *)(a1 + 16);
      unint64_t v32 = (void *)v4[1];
      if (v32)
      {
        do
        {
          long long v33 = v32;
          unint64_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          long long v33 = (void *)v4[2];
          BOOL v20 = *v33 == (void)v4;
          char v4 = v33;
        }
        while (!v20);
      }
      char v4 = v33;
      if (v33 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        BOOL v29 = (uint64_t **)v28;
        if (v27 >= v28[4]) {
          break;
        }
        int v28 = (uint64_t *)*v28;
        unint64_t v30 = v29;
        if (!*v29) {
          goto LABEL_50;
        }
      }
      int v28 = (uint64_t *)v28[1];
    }
    while (v28);
    unint64_t v30 = v29 + 1;
    *size_t v25 = 0;
    v25[1] = 0;
    void v25[2] = (uint64_t)v29;
    v29[1] = v25;
    uint64_t v31 = **(void **)a1;
    if (!v31) {
      goto LABEL_52;
    }
LABEL_51:
    *(void *)a1 = v31;
    long long v26 = *v30;
    goto LABEL_52;
  }
}

char *sub_1C499B0BC(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  char v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(char **)a1;
  if (0x8E38E38E38E38E39 * ((v8 - *(void *)a1) >> 3) >= __sz)
  {
    uint64_t v18 = (void *)(a1 + 8);
    double result = *(char **)(a1 + 8);
    if (0x8E38E38E38E38E39 * ((result - v9) >> 3) >= __sz)
    {
      if (a2 == a3)
      {
        BOOL v29 = v9;
      }
      else
      {
        uint64_t v23 = 0;
        do
        {
          if (a2 != v9)
          {
            unint64_t v24 = &v9[v23];
            *(_OWORD *)unint64_t v24 = *(_OWORD *)&a2[v23];
            long long v25 = *(_OWORD *)&a2[v23 + 32];
            *((_OWORD *)v24 + 1) = *(_OWORD *)&a2[v23 + 16];
            *((_OWORD *)v24 + 2) = v25;
            *((_OWORD *)v24 + 3) = *(_OWORD *)&a2[v23 + 48];
            *((void *)v24 + 8) = *(void *)&a2[v23 + 64];
          }
          v23 += 72;
        }
        while (&a2[v23] != a3);
        BOOL v29 = &v9[v23];
      }
      void *v18 = v29;
    }
    else
    {
      int v19 = &a2[8 * ((result - v9) >> 3)];
      if (result != v9)
      {
        uint64_t v20 = 0;
        do
        {
          if (a2 != v9)
          {
            uint64_t v21 = &v9[v20];
            *(_OWORD *)uint64_t v21 = *(_OWORD *)&a2[v20];
            long long v22 = *(_OWORD *)&a2[v20 + 32];
            *((_OWORD *)v21 + 1) = *(_OWORD *)&a2[v20 + 16];
            *((_OWORD *)v21 + 2) = v22;
            *((_OWORD *)v21 + 3) = *(_OWORD *)&a2[v20 + 48];
            *((void *)v21 + 8) = *(void *)&a2[v20 + 64];
          }
          v20 += 72;
        }
        while (8 * ((result - v9) >> 3) != v20);
      }
      long long v26 = result;
      if (v19 != a3)
      {
        uint64_t v27 = (uint64_t)result;
        do
        {
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v19;
          long long v28 = *((_OWORD *)v19 + 2);
          *(_OWORD *)(v27 + 16) = *((_OWORD *)v19 + 1);
          *(_OWORD *)(v27 + 32) = v28;
          *(_OWORD *)(v27 + 48) = *((_OWORD *)v19 + 3);
          *(void *)(v27 + 64) = *((void *)v19 + 8);
          v26 += 72;
          v19 += 72;
          v27 += 72;
        }
        while (v19 != a3);
      }
      void *v18 = v26;
    }
  }
  else
  {
    if (v9)
    {
      *(void *)(a1 + 8) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0x38E38E38E38E38ELL) {
      goto LABEL_33;
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v11;
    if (v12 > 0x38E38E38E38E38ELL) {
LABEL_33:
    }
      sub_1C494A220();
    uint64_t v13 = 72 * v12;
    double result = (char *)operator new(72 * v12);
    *(void *)a1 = result;
    *(void *)(a1 + 16) = &result[v13];
    uint64_t v15 = (uint64_t)result;
    if (v6 != a3)
    {
      uint64_t v15 = (uint64_t)result;
      do
      {
        long long v16 = *((_OWORD *)v6 + 1);
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v6;
        *(_OWORD *)(v15 + 16) = v16;
        long long v17 = *((_OWORD *)v6 + 3);
        *(_OWORD *)(v15 + 32) = *((_OWORD *)v6 + 2);
        *(_OWORD *)(v15 + 48) = v17;
        *(void *)(v15 + 64) = *((void *)v6 + 8);
        v15 += 72;
        v6 += 72;
      }
      while (v6 != a3);
    }
    *(void *)(a1 + 8) = v15;
  }
  return result;
}

void sub_1C499B358(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  char v6 = __str;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) >= __sz)
  {
    unint64_t v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        uint64_t v20 = *(std::string **)a1;
      }
      else
      {
        uint64_t v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v20;
        }
        while (v6 != a3);
        unint64_t v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        }
        --v12;
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        uint64_t v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        unint64_t v9 = *(std::string **)(a1 + 8);
      }
      uint64_t v15 = v9;
      if (v13 != a3)
      {
        uint64_t v16 = 0;
        do
        {
          uint64_t v18 = &v9[v16];
          int v19 = (char *)&v13[v16];
          if (SHIBYTE(v13[v16].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_1C4949ADC(v18, *(void **)v19, *((void *)v19 + 1));
          }
          else
          {
            long long v17 = *(_OWORD *)v19;
            v18->__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v17;
          }
          ++v16;
        }
        while (&v13[v16] != a3);
        uint64_t v15 = &v9[v16];
      }
      *(void *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      unint64_t v10 = *(std::string **)(a1 + 8);
      uint64_t v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          }
          --v10;
        }
        while (v10 != v9);
        uint64_t v11 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_48;
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= __sz) {
      uint64_t v22 = __sz;
    }
    unint64_t v23 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v22;
    if (v23 > 0xAAAAAAAAAAAAAAALL) {
LABEL_48:
    }
      sub_1C494A220();
    uint64_t v24 = 24 * v23;
    long long v25 = (char *)operator new(24 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      uint64_t v26 = 0;
      do
      {
        uint64_t v27 = &v25[v26 * 24];
        long long v28 = &v6[v26];
        if (SHIBYTE(v6[v26].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_1C4949ADC(v27, v28->__r_.__value_.__l.__data_, v28->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)uint64_t v27 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          *((void *)v27 + 2) = *((void *)&v28->__r_.__value_.__l + 2);
        }
        ++v26;
      }
      while (&v6[v26] != a3);
      v25 += v26 * 24;
    }
    *(void *)(a1 + 8) = v25;
  }
}

void sub_1C499B660(uint64_t **a1, void *a2, void *a3)
{
  char v4 = a2;
  if (!a1[2]) {
    goto LABEL_64;
  }
  char v6 = *a1;
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  *a1 = (uint64_t *)(a1 + 1);
  v7[2] = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v9 = v6[1] ? (uint64_t *)v6[1] : v6;
  unint64_t v41 = v9;
  if (!v9) {
    goto LABEL_64;
  }
  unint64_t v10 = (char *)v9[2];
  if (v10)
  {
    uint64_t v11 = *(char **)v10;
    if (*(uint64_t **)v10 == v9)
    {
      *(void *)unint64_t v10 = 0;
      while (1)
      {
        uint64_t v38 = (char *)*((void *)v10 + 1);
        if (!v38) {
          break;
        }
        do
        {
          unint64_t v10 = v38;
          uint64_t v38 = *(char **)v38;
        }
        while (v38);
      }
    }
    else
    {
      for (*((void *)v10 + 1) = 0; v11; uint64_t v11 = (char *)*((void *)v10 + 1))
      {
        do
        {
          unint64_t v10 = v11;
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  int64_t v40 = v10;
  if (a2 == a3)
  {
    uint64_t v34 = (uint64_t)a1;
    sub_1C4949DD4((uint64_t)a1, (char *)v9);
    if (!v10) {
      goto LABEL_64;
    }
    goto LABEL_61;
  }
  unint64_t v12 = a2;
  do
  {
    std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v12 + 4));
    v9[7] = v12[7];
    uint64_t v13 = v41;
    uint64_t v14 = *v8;
    uint64_t v15 = a1 + 1;
    uint64_t v16 = a1 + 1;
    if (!*v8)
    {
LABEL_34:
      *unint64_t v41 = 0;
      v41[1] = 0;
      v41[2] = (uint64_t)v15;
      *uint64_t v16 = v41;
      BOOL v29 = (uint64_t *)**a1;
      if (!v29) {
        goto LABEL_36;
      }
LABEL_35:
      *a1 = v29;
      uint64_t v13 = *v16;
      goto LABEL_36;
    }
    int v17 = *((char *)v41 + 55);
    if (v17 >= 0) {
      size_t v18 = *((unsigned __int8 *)v41 + 55);
    }
    else {
      size_t v18 = v41[5];
    }
    if (v17 >= 0) {
      int v19 = v41 + 4;
    }
    else {
      int v19 = (const void *)v41[4];
    }
    do
    {
      while (1)
      {
        uint64_t v15 = (uint64_t **)v14;
        uint64_t v22 = (const void *)v14[4];
        uint64_t v20 = v14 + 4;
        unint64_t v21 = v22;
        int v23 = *((char *)v20 + 23);
        if (v23 >= 0) {
          size_t v24 = *((unsigned __int8 *)v20 + 23);
        }
        else {
          size_t v24 = v20[1];
        }
        if (v23 >= 0) {
          long long v25 = v20;
        }
        else {
          long long v25 = v21;
        }
        if (v24 >= v18) {
          size_t v26 = v18;
        }
        else {
          size_t v26 = v24;
        }
        int v27 = memcmp(v19, v25, v26);
        BOOL v28 = v18 < v24;
        if (v27) {
          BOOL v28 = v27 < 0;
        }
        if (!v28) {
          break;
        }
        uint64_t v14 = *v15;
        uint64_t v16 = v15;
        if (!*v15) {
          goto LABEL_34;
        }
      }
      uint64_t v14 = v15[1];
    }
    while (v14);
    uint64_t v16 = v15 + 1;
    *unint64_t v41 = 0;
    v41[1] = 0;
    v41[2] = (uint64_t)v15;
    v15[1] = v41;
    BOOL v29 = (uint64_t *)**a1;
    if (v29) {
      goto LABEL_35;
    }
LABEL_36:
    sub_1C4949FD4(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    unint64_t v9 = (uint64_t *)v40;
    unint64_t v41 = (uint64_t *)v40;
    if (v40)
    {
      unint64_t v10 = (char *)*((void *)v40 + 2);
      if (v10)
      {
        unint64_t v30 = *(char **)v10;
        if (*(char **)v10 == v40)
        {
          *(void *)unint64_t v10 = 0;
          while (1)
          {
            long long v33 = (char *)*((void *)v10 + 1);
            if (!v33) {
              break;
            }
            do
            {
              unint64_t v10 = v33;
              long long v33 = *(char **)v33;
            }
            while (v33);
          }
        }
        else
        {
          for (*((void *)v10 + 1) = 0; v30; unint64_t v30 = (char *)*((void *)v10 + 1))
          {
            do
            {
              unint64_t v10 = v30;
              unint64_t v30 = *(char **)v30;
            }
            while (v30);
          }
        }
      }
      int64_t v40 = v10;
      uint64_t v31 = (void *)v12[1];
      if (!v31)
      {
        do
        {
LABEL_47:
          char v4 = (void *)v12[2];
          BOOL v32 = *v4 == (void)v12;
          unint64_t v12 = v4;
        }
        while (!v32);
        goto LABEL_49;
      }
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v31 = (void *)v12[1];
      if (!v31) {
        goto LABEL_47;
      }
    }
    do
    {
      char v4 = v31;
      uint64_t v31 = (void *)*v31;
    }
    while (v31);
LABEL_49:
    if (!v9) {
      break;
    }
    unint64_t v12 = v4;
  }
  while (v4 != a3);
  uint64_t v34 = (uint64_t)a1;
  sub_1C4949DD4((uint64_t)a1, (char *)v9);
  if (!v10) {
    goto LABEL_64;
  }
LABEL_61:
  for (uint64_t i = (char *)*((void *)v10 + 2); i; uint64_t i = (char *)*((void *)i + 2))
    unint64_t v10 = i;
  sub_1C4949DD4(v34, v10);
LABEL_64:
  if (v4 != a3)
  {
    do
    {
      sub_1C499BA00(a1, (uint64_t)(v4 + 4));
      uint64_t v36 = (void *)v4[1];
      if (v36)
      {
        do
        {
          unint64_t v37 = v36;
          uint64_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          unint64_t v37 = (void *)v4[2];
          BOOL v32 = *v37 == (void)v4;
          char v4 = v37;
        }
        while (!v32);
      }
      char v4 = v37;
    }
    while (v37 != a3);
  }
}

void sub_1C499B994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C499B9A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C499B9A8(uint64_t a1)
{
  sub_1C4949DD4(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1C4949DD4(*(void *)a1, (char *)v2);
  }
  return a1;
}

char *sub_1C499BA00(uint64_t **a1, uint64_t a2)
{
  char v4 = (char *)operator new(0x40uLL);
  unint64_t v5 = v4;
  char v6 = v4 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C4949ADC(v4 + 32, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *char v6 = *(_OWORD *)a2;
    *((void *)v4 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v5 + 7) = *(void *)(a2 + 24);
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    int v9 = v5[55];
    if (v9 >= 0) {
      size_t v10 = v5[55];
    }
    else {
      size_t v10 = *((void *)v5 + 5);
    }
    if (v9 < 0) {
      char v6 = (_OWORD *)*((void *)v5 + 4);
    }
    do
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v7;
        uint64_t v13 = (const void *)v7[4];
        uint64_t v11 = v7 + 4;
        unint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = v12;
        }
        if (v15 >= v10) {
          size_t v17 = v10;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v6, v16, v17);
        BOOL v19 = v10 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v7 = *v8;
        uint64_t v20 = v8;
        if (!*v8) {
          goto LABEL_28;
        }
      }
      uint64_t v7 = v8[1];
    }
    while (v7);
    uint64_t v20 = v8 + 1;
  }
  else
  {
    uint64_t v20 = a1 + 1;
  }
LABEL_28:
  *(void *)unint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = v8;
  *uint64_t v20 = (uint64_t *)v5;
  unint64_t v21 = (uint64_t *)**a1;
  uint64_t v22 = (uint64_t *)v5;
  if (v21)
  {
    *a1 = v21;
    uint64_t v22 = *v20;
  }
  sub_1C4949FD4(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v5;
}

void sub_1C499BB48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C499BB5C(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (!a1[2]) {
    goto LABEL_50;
  }
  char v6 = *a1;
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  *a1 = (uint64_t *)(a1 + 1);
  v7[2] = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v9 = v6[1] ? (uint64_t *)v6[1] : v6;
  BOOL v28 = v9;
  if (!v9) {
    goto LABEL_50;
  }
  size_t v10 = (uint64_t *)v9[2];
  if (v10)
  {
    uint64_t v11 = (uint64_t *)*v10;
    if ((uint64_t *)*v10 == v9)
    {
      *size_t v10 = 0;
      while (1)
      {
        long long v25 = (uint64_t *)v10[1];
        if (!v25) {
          break;
        }
        do
        {
          size_t v10 = v25;
          long long v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
    }
    else
    {
      for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
      {
        do
        {
          size_t v10 = v11;
          uint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  int v27 = v10;
  if (a2 == a3)
  {
    uint64_t v21 = (uint64_t)a1;
    sub_1C4999CD0((uint64_t)a1, v9);
    if (!v10) {
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  unint64_t v12 = a2;
  do
  {
    v9[4] = v12[4];
    if (v9 != v12)
    {
      sub_1C499BE94((uint64_t)(v9 + 5), (void *)v12[5], v12 + 6);
      int v9 = v28;
    }
    uint64_t v13 = *v8;
    int v14 = a1 + 1;
    size_t v15 = a1 + 1;
    if (!*v8)
    {
LABEL_20:
      *int v9 = 0;
      v9[1] = 0;
      v9[2] = (uint64_t)v14;
      *size_t v15 = v9;
      uint64_t v16 = (uint64_t *)**a1;
      if (!v16) {
        goto LABEL_22;
      }
LABEL_21:
      *a1 = v16;
      int v9 = *v15;
      goto LABEL_22;
    }
    do
    {
      while (1)
      {
        int v14 = (uint64_t **)v13;
        if (v9[4] >= (unint64_t)v13[4]) {
          break;
        }
        uint64_t v13 = (uint64_t *)*v13;
        size_t v15 = v14;
        if (!*v14) {
          goto LABEL_20;
        }
      }
      uint64_t v13 = (uint64_t *)v13[1];
    }
    while (v13);
    size_t v15 = v14 + 1;
    *int v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v14;
    v14[1] = v9;
    uint64_t v16 = (uint64_t *)**a1;
    if (v16) {
      goto LABEL_21;
    }
LABEL_22:
    sub_1C4949FD4(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    int v9 = v27;
    BOOL v28 = v27;
    if (v27)
    {
      size_t v10 = (uint64_t *)v27[2];
      if (v10)
      {
        size_t v17 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v27)
        {
          *size_t v10 = 0;
          while (1)
          {
            uint64_t v20 = (uint64_t *)v10[1];
            if (!v20) {
              break;
            }
            do
            {
              size_t v10 = v20;
              uint64_t v20 = (uint64_t *)*v20;
            }
            while (v20);
          }
        }
        else
        {
          for (v10[1] = 0; v17; size_t v17 = (uint64_t *)v10[1])
          {
            do
            {
              size_t v10 = v17;
              size_t v17 = (uint64_t *)*v17;
            }
            while (v17);
          }
        }
      }
      int v27 = v10;
      int v18 = (uint64_t *)v12[1];
      if (!v18)
      {
        do
        {
LABEL_33:
          a2 = (uint64_t *)v12[2];
          BOOL v19 = *a2 == (void)v12;
          unint64_t v12 = a2;
        }
        while (!v19);
        goto LABEL_35;
      }
    }
    else
    {
      size_t v10 = 0;
      int v18 = (uint64_t *)v12[1];
      if (!v18) {
        goto LABEL_33;
      }
    }
    do
    {
      a2 = v18;
      int v18 = (uint64_t *)*v18;
    }
    while (v18);
LABEL_35:
    if (!v9) {
      break;
    }
    unint64_t v12 = a2;
  }
  while (a2 != a3);
  uint64_t v21 = (uint64_t)a1;
  sub_1C4999CD0((uint64_t)a1, v9);
  if (!v10) {
    goto LABEL_50;
  }
LABEL_47:
  for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
    size_t v10 = i;
  sub_1C4999CD0(v21, v10);
LABEL_50:
  if (a2 != a3)
  {
    do
    {
      sub_1C499C1C4(a1, a2 + 4);
      int v23 = (uint64_t *)a2[1];
      if (v23)
      {
        do
        {
          size_t v24 = v23;
          int v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          size_t v24 = (uint64_t *)a2[2];
          BOOL v19 = *v24 == (void)a2;
          a2 = v24;
        }
        while (!v19);
      }
      a2 = v24;
    }
    while (v24 != a3);
  }
}

void sub_1C499BE28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C499BE3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C499BE3C(uint64_t a1)
{
  sub_1C4999CD0(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1C4999CD0(*(void *)a1, v2);
  }
  return a1;
}

void sub_1C499BE94(uint64_t a1, void *a2, void *a3)
{
  char v4 = a2;
  if (*(void *)(a1 + 16))
  {
    char v6 = *(uint64_t **)a1;
    uint64_t v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    int v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      size_t v10 = (uint64_t *)v9[2];
      if (v10)
      {
        uint64_t v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *size_t v10 = 0;
          while (1)
          {
            long long v33 = (uint64_t *)v10[1];
            if (!v33) {
              break;
            }
            do
            {
              size_t v10 = v33;
              long long v33 = (uint64_t *)*v33;
            }
            while (v33);
          }
        }
        else
        {
          for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
          {
            do
            {
              size_t v10 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        unint64_t v12 = v9;
        uint64_t v13 = v4;
        while (1)
        {
          int v9 = v10;
          unint64_t v14 = v13[4];
          v12[4] = v14;
          v12[5] = v13[5];
          size_t v15 = *v8;
          uint64_t v16 = (uint64_t **)(a1 + 8);
          size_t v17 = (uint64_t **)(a1 + 8);
          if (*v8) {
            break;
          }
LABEL_14:
          *unint64_t v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *size_t v17 = v12;
          uint64_t v18 = **(void **)a1;
          if (v18) {
            goto LABEL_15;
          }
LABEL_16:
          sub_1C4949FD4(*(uint64_t **)(a1 + 8), v12);
          ++*(void *)(a1 + 16);
          if (v10)
          {
            size_t v10 = (uint64_t *)v10[2];
            if (v10)
            {
              uint64_t v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *size_t v10 = 0;
                while (1)
                {
                  uint64_t v22 = (uint64_t *)v10[1];
                  if (!v22) {
                    break;
                  }
                  do
                  {
                    size_t v10 = v22;
                    uint64_t v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; uint64_t v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    size_t v10 = v21;
                    uint64_t v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            size_t v10 = 0;
          }
          BOOL v19 = (void *)v13[1];
          if (v19)
          {
            do
            {
              char v4 = v19;
              BOOL v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              char v4 = (void *)v13[2];
              BOOL v20 = *v4 == (void)v13;
              uint64_t v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            unint64_t v12 = v9;
            uint64_t v13 = v4;
            if (v4 != a3) {
              continue;
            }
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            uint64_t v16 = (uint64_t **)v15;
            if (v14 >= v15[4]) {
              break;
            }
            size_t v15 = (uint64_t *)*v15;
            size_t v17 = v16;
            if (!*v16) {
              goto LABEL_14;
            }
          }
          size_t v15 = (uint64_t *)v15[1];
        }
        while (v15);
        size_t v17 = v16 + 1;
        *unint64_t v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        uint64_t v18 = **(void **)a1;
        if (!v18) {
          goto LABEL_16;
        }
LABEL_15:
        *(void *)a1 = v18;
        unint64_t v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      sub_1C4999C7C(a1, v9);
      if (v10)
      {
        for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
          size_t v10 = i;
        sub_1C4999C7C(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    size_t v24 = (uint64_t **)(a1 + 8);
    while (1)
    {
      long long v25 = (uint64_t *)operator new(0x30uLL);
      size_t v26 = v25;
      *((_OWORD *)v25 + 2) = *((_OWORD *)v4 + 2);
      int v27 = *v24;
      BOOL v28 = (uint64_t **)(a1 + 8);
      BOOL v29 = (uint64_t **)(a1 + 8);
      if (*v24) {
        break;
      }
LABEL_54:
      *long long v25 = 0;
      v25[1] = 0;
      void v25[2] = (uint64_t)v28;
      *BOOL v29 = v25;
      uint64_t v30 = **(void **)a1;
      if (v30) {
        goto LABEL_55;
      }
LABEL_56:
      sub_1C4949FD4(*(uint64_t **)(a1 + 8), v26);
      ++*(void *)(a1 + 16);
      uint64_t v31 = (void *)v4[1];
      if (v31)
      {
        do
        {
          BOOL v32 = v31;
          uint64_t v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          BOOL v32 = (void *)v4[2];
          BOOL v20 = *v32 == (void)v4;
          char v4 = v32;
        }
        while (!v20);
      }
      char v4 = v32;
      if (v32 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        BOOL v28 = (uint64_t **)v27;
        if (v25[4] >= (unint64_t)v27[4]) {
          break;
        }
        int v27 = (uint64_t *)*v27;
        BOOL v29 = v28;
        if (!*v28) {
          goto LABEL_54;
        }
      }
      int v27 = (uint64_t *)v27[1];
    }
    while (v27);
    BOOL v29 = v28 + 1;
    *long long v25 = 0;
    v25[1] = 0;
    void v25[2] = (uint64_t)v28;
    v28[1] = v25;
    uint64_t v30 = **(void **)a1;
    if (!v30) {
      goto LABEL_56;
    }
LABEL_55:
    *(void *)a1 = v30;
    size_t v26 = *v29;
    goto LABEL_56;
  }
}

uint64_t *sub_1C499C1C4(uint64_t **a1, uint64_t *a2)
{
  char v4 = a1 + 1;
  unint64_t v5 = (uint64_t *)operator new(0x40uLL);
  uint64_t v11 = v5;
  v5[6] = 0;
  char v6 = (void *)a2[1];
  v5[4] = *a2;
  v5[5] = (uint64_t)(v5 + 6);
  v5[7] = 0;
  sub_1C499C340(v5 + 5, v6, a2 + 2);
  uint64_t v7 = *v4;
  uint64_t v8 = v4;
  if (!*v4)
  {
LABEL_6:
    *unint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = (uint64_t)v4;
    void *v8 = v5;
    int v9 = (uint64_t *)**a1;
    if (!v9) {
      goto LABEL_8;
    }
LABEL_7:
    *a1 = v9;
    unint64_t v5 = *v8;
    goto LABEL_8;
  }
  do
  {
    while (1)
    {
      char v4 = (uint64_t **)v7;
      if (v5[4] >= (unint64_t)v7[4]) {
        break;
      }
      uint64_t v7 = (uint64_t *)*v7;
      uint64_t v8 = v4;
      if (!*v4) {
        goto LABEL_6;
      }
    }
    uint64_t v7 = (uint64_t *)v7[1];
  }
  while (v7);
  uint64_t v8 = v4 + 1;
  *unint64_t v5 = 0;
  v5[1] = 0;
  v5[2] = (uint64_t)v4;
  v4[1] = v5;
  int v9 = (uint64_t *)**a1;
  if (v9) {
    goto LABEL_7;
  }
LABEL_8:
  sub_1C4949FD4(a1[1], v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v11;
}

void sub_1C499C2D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4999C7C(v2, *v3);
  sub_1C499C2F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C499C2F4(uint64_t a1)
{
  uint64_t v2 = *(void ***)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1C4999C7C((uint64_t)(v2 + 5), v2[6]);
    }
    operator delete(v2);
  }
  return a1;
}

void *sub_1C499C340(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    char v6 = a2;
    uint64_t v7 = (void **)result;
    uint64_t v8 = result + 1;
    do
    {
      double result = sub_1C499A67C(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        int v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        size_t v10 = (uint64_t **)result;
        uint64_t v11 = operator new(0x30uLL);
        v11[2] = *((_OWORD *)v6 + 2);
        uint64_t v12 = v18[0];
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v12;
        *size_t v10 = (uint64_t *)v11;
        uint64_t v13 = (void *)**v7;
        if (v13)
        {
          *uint64_t v7 = v13;
          unint64_t v14 = *v10;
        }
        else
        {
          unint64_t v14 = (uint64_t *)v11;
        }
        double result = sub_1C4949FD4(v7[1], v14);
        v7[2] = (void *)((char *)v7[2] + 1);
        int v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            size_t v15 = v9;
            int v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        size_t v15 = (void *)v6[2];
        BOOL v16 = *v15 == (void)v6;
        char v6 = v15;
      }
      while (!v16);
LABEL_3:
      char v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void sub_1C499C454(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_41;
  }
  char v6 = *(uint64_t **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = a1 + 8;
  *(void *)(v7 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v8 = v6[1] ? (uint64_t *)v6[1] : v6;
  if (!v8) {
    goto LABEL_41;
  }
  int v9 = (uint64_t *)v8[2];
  if (v9)
  {
    size_t v10 = (uint64_t *)*v9;
    if ((uint64_t *)*v9 == v8)
    {
      *int v9 = 0;
      while (1)
      {
        int v23 = (uint64_t *)v9[1];
        if (!v23) {
          break;
        }
        do
        {
          int v9 = v23;
          int v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
    }
    else
    {
      for (v9[1] = 0; v10; size_t v10 = (uint64_t *)v9[1])
      {
        do
        {
          int v9 = v10;
          size_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
  if (a2 == a3)
  {
    uint64_t v19 = a1;
    sub_1C4999C7C(a1, v8);
    if (!v9) {
      goto LABEL_41;
    }
    goto LABEL_38;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v8;
  uint64_t v13 = v4;
  do
  {
    unint64_t v14 = v11;
    if (v13 != v12)
    {
      *((_DWORD *)v12 + 7) = *((_DWORD *)v13 + 7);
      *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
      *((_DWORD *)v12 + 9) = *((_DWORD *)v13 + 9);
      *((_DWORD *)v12 + 10) = *((_DWORD *)v13 + 10);
      *((_DWORD *)v12 + 11) = *((_DWORD *)v13 + 11);
    }
    sub_1C499C6D0((uint64_t **)a1, (uint64_t)v12);
    if (v14)
    {
      int v9 = (uint64_t *)v14[2];
      if (v9)
      {
        BOOL v16 = (uint64_t *)*v9;
        if ((uint64_t *)*v9 == v14)
        {
          *int v9 = 0;
          while (1)
          {
            uint64_t v18 = (uint64_t *)v9[1];
            if (!v18) {
              break;
            }
            do
            {
              int v9 = v18;
              uint64_t v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
        }
        else
        {
          for (v9[1] = 0; v16; BOOL v16 = (uint64_t *)v9[1])
          {
            do
            {
              int v9 = v16;
              BOOL v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
        }
      }
      uint64_t v11 = v9;
      size_t v15 = (uint64_t *)v13[1];
      if (!v15)
      {
        do
        {
LABEL_26:
          uint64_t v4 = (uint64_t *)v13[2];
          BOOL v17 = *v4 == (void)v13;
          uint64_t v13 = v4;
        }
        while (!v17);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v11 = 0;
      size_t v15 = (uint64_t *)v13[1];
      if (!v15) {
        goto LABEL_26;
      }
    }
    do
    {
      uint64_t v4 = v15;
      size_t v15 = (uint64_t *)*v15;
    }
    while (v15);
LABEL_28:
    if (!v14) {
      break;
    }
    uint64_t v12 = v14;
    uint64_t v13 = v4;
  }
  while (v4 != a3);
  uint64_t v19 = a1;
  sub_1C4999C7C(a1, v14);
  if (!v9) {
    goto LABEL_41;
  }
LABEL_38:
  for (uint64_t i = (uint64_t *)v9[2]; i; uint64_t i = (uint64_t *)i[2])
    int v9 = i;
  sub_1C4999C7C(v19, v9);
LABEL_41:
  if (v4 != a3)
  {
    do
    {
      sub_1C499C840((uint64_t **)a1, (uint64_t)v4 + 28);
      uint64_t v21 = (uint64_t *)v4[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (uint64_t *)v4[2];
          BOOL v17 = *v22 == (void)v4;
          uint64_t v4 = v22;
        }
        while (!v17);
      }
      uint64_t v4 = v22;
    }
    while (v22 != a3);
  }
}

void sub_1C499C6BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C499C7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C499C6D0(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  unint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 36);
    unsigned int v7 = *(_DWORD *)(a2 + 40);
    unsigned int v8 = *(_DWORD *)(a2 + 28);
    unsigned int v9 = *(_DWORD *)(a2 + 32);
    do
    {
      while (1)
      {
        uint64_t v4 = v5;
        unsigned int v11 = *((_DWORD *)v5 + 7);
        BOOL v12 = v8 >= v11;
        BOOL v13 = v8 > v11;
        if (v12) {
          int v14 = v13;
        }
        else {
          int v14 = -1;
        }
        unsigned int v15 = *((_DWORD *)v5 + 9);
        unsigned int v16 = *((_DWORD *)v5 + 10);
        BOOL v12 = v6 >= v15;
        BOOL v17 = v6 > v15;
        if (v12) {
          int v18 = v17;
        }
        else {
          int v18 = -1;
        }
        int v19 = v7 > v16;
        if (v7 < v16) {
          int v19 = -1;
        }
        if (v14 != -1)
        {
          if (v14) {
            break;
          }
          unsigned int v20 = *((_DWORD *)v4 + 8);
          BOOL v12 = v9 >= v20;
          int v21 = v9 > v20;
          if (!v12) {
            int v21 = -1;
          }
          if (v21 != -1
            && (v21 || v18 != -1 && (v18 || v19 != -1 && (v19 || *(_DWORD *)(a2 + 44) >= *((_DWORD *)v4 + 11)))))
          {
            break;
          }
        }
        unint64_t v5 = (uint64_t *)*v4;
        size_t v10 = v4;
        if (!*v4) {
          goto LABEL_26;
        }
      }
      unint64_t v5 = (uint64_t *)v4[1];
    }
    while (v5);
    size_t v10 = v4 + 1;
  }
  else
  {
    size_t v10 = (uint64_t *)(a1 + 1);
  }
LABEL_26:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v4;
  *size_t v10 = a2;
  uint64_t v22 = (uint64_t *)**a1;
  if (v22)
  {
    *a1 = v22;
    a2 = *v10;
  }
  sub_1C4949FD4(a1[1], (uint64_t *)a2);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v2;
}

uint64_t sub_1C499C7E8(uint64_t a1)
{
  sub_1C4999C7C(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1C4999C7C(*(void *)a1, v2);
  }
  return a1;
}

char *sub_1C499C840(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  unint64_t v5 = v4;
  *(_OWORD *)(v4 + 28) = *(_OWORD *)a2;
  *((_DWORD *)v4 + 11) = *(_DWORD *)(a2 + 16);
  unsigned int v6 = a1 + 1;
  unsigned int v7 = a1[1];
  if (v7)
  {
    unsigned int v8 = *((_DWORD *)v4 + 9);
    unsigned int v9 = *((_DWORD *)v4 + 10);
    unsigned int v10 = *((_DWORD *)v4 + 7);
    unsigned int v11 = *((_DWORD *)v4 + 8);
    do
    {
      while (1)
      {
        unsigned int v6 = (uint64_t **)v7;
        unsigned int v13 = *((_DWORD *)v7 + 7);
        BOOL v14 = v10 >= v13;
        BOOL v15 = v10 > v13;
        if (v14) {
          int v16 = v15;
        }
        else {
          int v16 = -1;
        }
        unsigned int v17 = *((_DWORD *)v7 + 9);
        unsigned int v18 = *((_DWORD *)v7 + 10);
        BOOL v14 = v8 >= v17;
        BOOL v19 = v8 > v17;
        if (v14) {
          int v20 = v19;
        }
        else {
          int v20 = -1;
        }
        int v21 = v9 > v18;
        if (v9 < v18) {
          int v21 = -1;
        }
        if (v16 != -1)
        {
          if (v16) {
            break;
          }
          unsigned int v22 = *((_DWORD *)v6 + 8);
          BOOL v14 = v11 >= v22;
          int v23 = v11 > v22;
          if (!v14) {
            int v23 = -1;
          }
          if (v23 != -1
            && (v23 || v20 != -1 && (v20 || v21 != -1 && (v21 || *((_DWORD *)v4 + 11) >= *((_DWORD *)v6 + 11)))))
          {
            break;
          }
        }
        unsigned int v7 = *v6;
        BOOL v12 = v6;
        if (!*v6) {
          goto LABEL_26;
        }
      }
      unsigned int v7 = v6[1];
    }
    while (v7);
    BOOL v12 = v6 + 1;
  }
  else
  {
    BOOL v12 = a1 + 1;
  }
LABEL_26:
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = v6;
  *BOOL v12 = (uint64_t *)v4;
  size_t v24 = (uint64_t *)**a1;
  long long v25 = (uint64_t *)v4;
  if (v24)
  {
    *a1 = v24;
    long long v25 = *v12;
  }
  sub_1C4949FD4(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v5;
}

void sub_1C499C97C(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      unsigned int v11 = &v5[40 * a2];
      uint64_t v12 = 40 * a2;
      do
      {
        v5[32] = 0;
        *(_OWORD *)unint64_t v5 = 0uLL;
        *((_OWORD *)v5 + 1) = 0uLL;
        v5 += 40;
        v12 -= 40;
      }
      while (v12);
      unint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x666666666666666) {
      sub_1C494A220();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x333333333333333) {
      unint64_t v9 = 0x666666666666666;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x666666666666666) {
        sub_1C4949AA8();
      }
      unsigned int v10 = (char *)operator new(40 * v9);
    }
    else
    {
      unsigned int v10 = 0;
    }
    unsigned int v13 = &v10[40 * v6];
    uint64_t v14 = 40 * a2;
    BOOL v15 = &v13[40 * a2];
    int v16 = v13;
    do
    {
      v16[32] = 0;
      *(_OWORD *)int v16 = 0uLL;
      *((_OWORD *)v16 + 1) = 0uLL;
      v16 += 40;
      v14 -= 40;
    }
    while (v14);
    unsigned int v17 = (char *)*a1;
    if (v5 != *a1)
    {
      do
      {
        long long v18 = *(_OWORD *)(v5 - 40);
        long long v19 = *(_OWORD *)(v5 - 24);
        *(v13 - 8) = *(v5 - 8);
        *(_OWORD *)(v13 - 24) = v19;
        *(_OWORD *)(v13 - 40) = v18;
        v13 -= 40;
        v5 -= 40;
      }
      while (v5 != v17);
      unint64_t v5 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = &v10[40 * v9];
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void *sub_1C499CB34(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1C87861F0](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_1C499CBBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

char *sub_1C499CBEC(char **a1, uint64_t a2)
{
  CFTypeID v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x38E38E38E38E38ELL) {
    sub_1C494A220();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x1C71C71C71C71C72 * ((a1[2] - v3) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  if (v6 > 0x38E38E38E38E38ELL) {
    sub_1C4949AA8();
  }
  uint64_t v8 = 72 * v6;
  unint64_t v9 = (char *)operator new(72 * v6);
  unsigned int v10 = &v9[72 * v5];
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unsigned int v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  long long v12 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v10 + 3) = v12;
  *((void *)v10 + 8) = *(void *)(a2 + 64);
  unsigned int v13 = v10 + 72;
  if (v4 != v3)
  {
    uint64_t v14 = 0;
    do
    {
      BOOL v15 = &v10[v14];
      *(_OWORD *)(v15 - 72) = *(_OWORD *)&v4[v14 - 72];
      *(_OWORD *)(v15 - 56) = *(_OWORD *)&v4[v14 - 56];
      *(_OWORD *)(v15 - 40) = *(_OWORD *)&v4[v14 - 40];
      *(_OWORD *)(v15 - 24) = *(_OWORD *)&v4[v14 - 24];
      *((void *)v15 - 1) = *(void *)&v4[v14 - 8];
      v14 -= 72;
    }
    while (&v4[v14] != v3);
    v10 += v14;
  }
  *a1 = v10;
  a1[1] = v13;
  a1[2] = &v9[v8];
  if (v3) {
    operator delete(v3);
  }
  return v13;
}

void sub_1C499CD44(void *a1)
{
  if (a1)
  {
    sub_1C499CD44(*a1);
    sub_1C499CD44(a1[1]);
    uint64_t v2 = (void *)a1[7];
    if (v2)
    {
      a1[8] = v2;
      operator delete(v2);
    }
    sub_1C4999C7C((uint64_t)(a1 + 4), (void *)a1[5]);
    operator delete(a1);
  }
}

void sub_1C499CDB0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  if (*(void *)(a1 + 16))
  {
    unint64_t v6 = *(uint64_t **)a1;
    uint64_t v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    unint64_t v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      unsigned int v10 = (uint64_t *)v9[2];
      if (v10)
      {
        long long v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *unsigned int v10 = 0;
          while (1)
          {
            uint64_t v34 = (uint64_t *)v10[1];
            if (!v34) {
              break;
            }
            do
            {
              unsigned int v10 = v34;
              uint64_t v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; long long v11 = (uint64_t *)v10[1])
          {
            do
            {
              unsigned int v10 = v11;
              long long v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        long long v12 = v9;
        unsigned int v13 = v4;
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v14 = v13[4];
          v12[4] = v14;
          BOOL v15 = *v8;
          int v16 = (uint64_t **)(a1 + 8);
          unsigned int v17 = (uint64_t **)(a1 + 8);
          if (*v8) {
            break;
          }
LABEL_14:
          *long long v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *unsigned int v17 = v12;
          uint64_t v18 = **(void **)a1;
          if (v18) {
            goto LABEL_15;
          }
LABEL_16:
          sub_1C4949FD4(*(uint64_t **)(a1 + 8), v12);
          ++*(void *)(a1 + 16);
          if (v10)
          {
            unsigned int v10 = (uint64_t *)v10[2];
            if (v10)
            {
              int v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *unsigned int v10 = 0;
                while (1)
                {
                  unsigned int v22 = (uint64_t *)v10[1];
                  if (!v22) {
                    break;
                  }
                  do
                  {
                    unsigned int v10 = v22;
                    unsigned int v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; int v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    unsigned int v10 = v21;
                    int v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            unsigned int v10 = 0;
          }
          long long v19 = (void *)v13[1];
          if (v19)
          {
            do
            {
              uint64_t v4 = v19;
              long long v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v4 = (void *)v13[2];
              BOOL v20 = *v4 == (void)v13;
              unsigned int v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            long long v12 = v9;
            unsigned int v13 = v4;
            if (v4 != a3) {
              continue;
            }
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            int v16 = (uint64_t **)v15;
            if (v14 >= v15[4]) {
              break;
            }
            BOOL v15 = (uint64_t *)*v15;
            unsigned int v17 = v16;
            if (!*v16) {
              goto LABEL_14;
            }
          }
          BOOL v15 = (uint64_t *)v15[1];
        }
        while (v15);
        unsigned int v17 = v16 + 1;
        *long long v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        uint64_t v18 = **(void **)a1;
        if (!v18) {
          goto LABEL_16;
        }
LABEL_15:
        *(void *)a1 = v18;
        long long v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      sub_1C4999C7C(a1, v9);
      if (v10)
      {
        for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
          unsigned int v10 = i;
        sub_1C4999C7C(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    size_t v24 = (uint64_t **)(a1 + 8);
    while (1)
    {
      long long v25 = (uint64_t *)operator new(0x28uLL);
      size_t v26 = v25;
      uint64_t v27 = v4[4];
      v25[4] = v27;
      BOOL v28 = *v24;
      BOOL v29 = (uint64_t **)(a1 + 8);
      uint64_t v30 = (uint64_t **)(a1 + 8);
      if (*v24) {
        break;
      }
LABEL_50:
      *long long v25 = 0;
      v25[1] = 0;
      void v25[2] = (uint64_t)v29;
      *uint64_t v30 = v25;
      uint64_t v31 = **(void **)a1;
      if (v31) {
        goto LABEL_51;
      }
LABEL_52:
      sub_1C4949FD4(*(uint64_t **)(a1 + 8), v26);
      ++*(void *)(a1 + 16);
      BOOL v32 = (void *)v4[1];
      if (v32)
      {
        do
        {
          long long v33 = v32;
          BOOL v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          long long v33 = (void *)v4[2];
          BOOL v20 = *v33 == (void)v4;
          uint64_t v4 = v33;
        }
        while (!v20);
      }
      uint64_t v4 = v33;
      if (v33 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        BOOL v29 = (uint64_t **)v28;
        if (v27 >= v28[4]) {
          break;
        }
        BOOL v28 = (uint64_t *)*v28;
        uint64_t v30 = v29;
        if (!*v29) {
          goto LABEL_50;
        }
      }
      BOOL v28 = (uint64_t *)v28[1];
    }
    while (v28);
    uint64_t v30 = v29 + 1;
    *long long v25 = 0;
    v25[1] = 0;
    void v25[2] = (uint64_t)v29;
    v29[1] = v25;
    uint64_t v31 = **(void **)a1;
    if (!v31) {
      goto LABEL_52;
    }
LABEL_51:
    *(void *)a1 = v31;
    size_t v26 = *v30;
    goto LABEL_52;
  }
}

void *sub_1C499D0D0(void *a1)
{
  *a1 = &unk_1F2012558;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  CFTypeID v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void sub_1C499D130(void *a1)
{
  *a1 = &unk_1F2012558;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  CFTypeID v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  JUMPOUT(0x1C8786460);
}

void sub_1C499D1B0()
{
}

void sub_1C499D1FC(uint64_t a1, uint64_t a2, CFStringRef *a3)
{
  unint64_t v5 = (const void *)CVNLPLanguageModelWithStateCreate();
  if (*a3 && CFStringGetLength(*a3)) {
    CVNLPLanguageModelWithStateUpdateWithContext();
  }
  unint64_t v6 = *(const void **)(a2 + 16);
  *(void *)(a2 + 16) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1C499D28C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_1C499D2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a4 + 8) = 0;
  CopCGFloat y = CVNLPLanguageModelWithStateCreateCopy();
  unint64_t v9 = *(const void **)(a4 + 16);
  *(void *)(a4 + 16) = Copy;
  if (v9) {
    CFRelease(v9);
  }
  if (*(void *)(a1 + 56) == a5) {
    return *(double *)(a4 + 8);
  }
  int v11 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * a5);
  if ((v11 - 0x10000) >> 20)
  {
    CFIndex v13 = 1;
    unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * a5);
  }
  else
  {
    unsigned int v12 = ((v11 + 67043328) >> 10) - 10240;
    chars[1] = v11 & 0x3FF | 0xDC00;
    CFIndex v13 = 2;
  }
  chars[0] = v12;
  CFStringRef v14 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E4F1CF80], chars, v13);
  sub_1C499CB34(&cf, v14);
  CVNLPLanguageModelWithStateConditionalProbability();
  float v16 = v15;
  CVNLPLanguageModelWithStateUpdateWithContext();
  double v17 = logf(v16);
  double v18 = *(double *)(a1 + 8);
  if (*(double *)(a1 + 16) > v17) {
    double v17 = *(double *)(a1 + 16);
  }
  double v10 = v18 * v17;
  *(double *)(a4 + 8) = v18 * v17;
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

void sub_1C499D3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1C499D3F0(void *a1)
{
  *a1 = &unk_1F2012428;
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1C499D440(void *a1)
{
  *a1 = &unk_1F2012428;
  uint64_t v1 = (const void *)a1[2];
  if (v1) {
    CFRelease(v1);
  }
  JUMPOUT(0x1C8786460);
}

void *sub_1C499D4B0(void *a1)
{
  *a1 = &unk_1F20125A0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  CFTypeID v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void sub_1C499D510(void *a1)
{
  *a1 = &unk_1F20125A0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  CFTypeID v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  JUMPOUT(0x1C8786460);
}

void sub_1C499D590()
{
}

uint64_t sub_1C499D5E4(uint64_t a1, void *a2, CFStringRef *a3)
{
  unint64_t v5 = *(int *)(a1 + 56);
  uint64_t v7 = (unsigned char *)a2[2];
  uint64_t v8 = (unsigned char *)a2[3];
  unint64_t v6 = a2 + 2;
  unint64_t v9 = (v8 - v7) >> 2;
  unint64_t v10 = v5 - v9;
  if (v5 > v9)
  {
    uint64_t v11 = a2[4];
    if (v10 <= (v11 - (uint64_t)v8) >> 2)
    {
      memset_pattern16(v8, &unk_1C4C39DB0, 4 * v10);
      a2[3] = &v8[4 * v10];
      long long v19 = a2;
      goto LABEL_23;
    }
    if ((v5 & 0x80000000) != 0) {
      sub_1C494A220();
    }
    uint64_t v12 = v11 - (void)v7;
    uint64_t v13 = v12 >> 1;
    if (v12 >> 1 <= v5) {
      uint64_t v13 = *(int *)(a1 + 56);
    }
    BOOL v14 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v13;
    }
    if (v15 >> 62) {
      sub_1C4949AA8();
    }
    uint64_t v36 = 4 * v15;
    float v16 = operator new(4 * v15);
    double v17 = &v16[4 * v9];
    memset_pattern16(v17, &unk_1C4C39DB0, 4 * v10);
    if (v8 == v7)
    {
      long long v19 = a2;
      goto LABEL_21;
    }
    unint64_t v18 = v8 - v7 - 4;
    if (v18 >= 0x2C)
    {
      long long v19 = a2;
      if ((unint64_t)(v7 - v16) >= 0x20)
      {
        uint64_t v20 = (v18 >> 2) + 1;
        uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
        unsigned int v22 = &v8[-v21];
        v17 -= v21;
        int v23 = &v16[4 * v9 - 16];
        size_t v24 = (long long *)(v8 - 16);
        uint64_t v25 = v20 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          _OWORD *v23 = v26;
          v23 -= 2;
          v24 -= 2;
          v25 -= 8;
        }
        while (v25);
        uint64_t v8 = v22;
        if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_21:
          v19[2] = v17;
          v19[3] = &v16[4 * v5];
          v19[4] = &v16[v36];
          if (v7) {
            operator delete(v7);
          }
          goto LABEL_23;
        }
      }
    }
    else
    {
      long long v19 = a2;
    }
    do
    {
      int v27 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v17 - 1) = v27;
      v17 -= 4;
    }
    while (v8 != v7);
    goto LABEL_21;
  }
  long long v19 = a2;
  if (v5 < v9) {
    a2[3] = &v7[4 * v5];
  }
LABEL_23:
  uint64_t result = (uint64_t)*a3;
  if (*a3)
  {
    uint64_t result = CFStringGetLength((CFStringRef)result);
    if (result)
    {
      uint64_t result = CFStringGetLength(*a3);
      if (result >= 1)
      {
        uint64_t v29 = result;
        char v30 = 0;
        uint64_t v31 = v19[3];
        while (1)
        {
          if (v31 == *v6) {
            return result;
          }
          CFIndex v32 = v29 - 1;
          uint64_t result = CFStringGetCharacterAtIndex(*a3, v29 - 1);
          int v33 = result;
          CFIndex v34 = v29 - 2;
          if ((unint64_t)v29 < 2)
          {
            --v29;
            if ((v30 & 1) == 0) {
              goto LABEL_39;
            }
LABEL_27:
            char v30 = 1;
            *(_DWORD *)(v31 - 4) = v33;
            v31 -= 4;
            if (v29 <= 0) {
              return result;
            }
          }
          else
          {
            --v29;
            if ((result & 0xFC00) == 0xDC00)
            {
              uint64_t result = CFStringGetCharacterAtIndex(*a3, v34);
              uint64_t v29 = (result & 0xFC00) == 0xD800 ? v34 : v32;
              if ((result & 0xFC00) == 0xD800) {
                int v33 = v33 + (result << 10) - 56613888;
              }
            }
            if (v30) {
              goto LABEL_27;
            }
LABEL_39:
            uint64_t result = CVNLPIsWhitespaceCharLMCodepoint();
            if (result) {
              goto LABEL_27;
            }
            uint64_t result = CVNLPIsDigitCharLMCodepoint();
            char v30 = 0;
            uint64_t v35 = 6;
            if (result) {
              uint64_t v35 = 5;
            }
            ++v19[v35];
            *(_DWORD *)(v31 - 4) = v33;
            v31 -= 4;
            if (v29 <= 0) {
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}

double sub_1C499D8A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  a4[1] = 0;
  if (*(void *)(a1 + 64) != a5)
  {
    unint64_t v9 = (void **)(a4 + 2);
    uint64_t v8 = (unsigned char *)a4[2];
    uint64_t v10 = *(int *)(a1 + 56);
    uint64_t v11 = v10 + 1;
    if (v10 + 1 <= (unint64_t)((uint64_t)(a4[4] - (void)v8) >> 2)) {
      goto LABEL_17;
    }
    if ((int)v10 <= -2) {
      goto LABEL_88;
    }
    uint64_t v12 = (unsigned char *)a4[3];
    uint64_t v13 = 4 * v11;
    BOOL v14 = (char *)operator new(4 * v11);
    uint64_t v15 = v12 - v8;
    float v16 = &v14[(v12 - v8) & 0xFFFFFFFFFFFFFFFCLL];
    double v17 = v16;
    if (v12 != v8)
    {
      if ((unint64_t)(v15 - 4) < 0x2C)
      {
        double v17 = &v14[(v12 - v8) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_14:
          int v26 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v17 - 1) = v26;
          v17 -= 4;
        }
        while (v12 != v8);
        goto LABEL_15;
      }
      double v17 = &v14[(v12 - v8) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v12[-(v15 & 0xFFFFFFFFFFFFFFFCLL)] - v14) < 0x20) {
        goto LABEL_14;
      }
      uint64_t v18 = v15 >> 2;
      unint64_t v19 = ((unint64_t)(v15 - 4) >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v21 = &v12[-v20];
      double v17 = &v16[-v20];
      unsigned int v22 = &v14[4 * v18 - 16];
      int v23 = (long long *)(v12 - 16);
      uint64_t v24 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v25 = *v23;
        *((_OWORD *)v22 - 1) = *(v23 - 1);
        *(_OWORD *)unsigned int v22 = v25;
        v22 -= 32;
        v23 -= 2;
        v24 -= 8;
      }
      while (v24);
      uint64_t v12 = v21;
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_14;
      }
    }
LABEL_15:
    a4[2] = v17;
    a4[3] = v16;
    a4[4] = &v14[v13];
    if (v8)
    {
      operator delete(v8);
      LODWORD(v10) = *(_DWORD *)(a1 + 56);
    }
LABEL_17:
    uint64_t v87 = a2;
    uint64_t v88 = a1;
    uint64_t v27 = *(void *)(a2 + 16);
    BOOL v28 = *(int **)(a2 + 24);
    if ((int)v10 >= (unint64_t)(((uint64_t)v28 - v27) >> 2)) {
      uint64_t v29 = *(int **)(a2 + 16);
    }
    else {
      uint64_t v29 = (int *)(v27 + 4);
    }
    if (v28 != v29)
    {
      char v30 = (char *)a4[3];
      uint64_t v90 = *(int **)(a2 + 24);
      while (1)
      {
        while (1)
        {
          int v31 = *v29;
          unint64_t v32 = a4[4];
          if ((unint64_t)v30 >= v32) {
            break;
          }
          *(_DWORD *)char v30 = v31;
          v30 += 4;
          a4[3] = v30;
          if (++v29 == v28) {
            goto LABEL_50;
          }
        }
        int v33 = v9;
        CFIndex v34 = (char *)*v9;
        uint64_t v35 = v30 - (unsigned char *)*v9;
        uint64_t v36 = v35 >> 2;
        unint64_t v37 = (v35 >> 2) + 1;
        if (v37 >> 62) {
          sub_1C494A220();
        }
        uint64_t v38 = v32 - (void)v34;
        if (v38 >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        unint64_t v39 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v37;
        if (v39)
        {
          if (v39 >> 62) {
            goto LABEL_87;
          }
          int64_t v40 = operator new(4 * v39);
          unint64_t v41 = &v40[4 * v36];
          *unint64_t v41 = v31;
          uint64_t v42 = (uint64_t)(v41 + 1);
          int64_t v43 = v30 - v34;
          if (v30 == v34)
          {
LABEL_41:
            unint64_t v9 = v33;
            a4[2] = v41;
            a4[3] = v42;
            a4[4] = &v40[4 * v39];
            if (!v34) {
              goto LABEL_38;
            }
LABEL_37:
            operator delete(v34);
            goto LABEL_38;
          }
        }
        else
        {
          int64_t v40 = 0;
          unint64_t v41 = (_DWORD *)(4 * v36);
          *(_DWORD *)(4 * v36) = v31;
          uint64_t v42 = 4 * v36 + 4;
          int64_t v43 = v30 - v34;
          if (v30 == v34) {
            goto LABEL_41;
          }
        }
        unint64_t v44 = v43 - 4;
        if (v44 < 0xBC) {
          break;
        }
        unint64_t v47 = (v30 - 4 - v34) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v40[v35 - 4 - v47] > &v40[v35 - 4]
          || &v30[-v47 - 4] > v30 - 4
          || (unint64_t)(v30 - v40 - v35) < 0x20)
        {
          break;
        }
        uint64_t v48 = (v44 >> 2) + 1;
        uint64_t v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
        int64_t v45 = &v30[-v49];
        unint64_t v41 = (_DWORD *)((char *)v41 - v49);
        int v50 = &v40[4 * v36 - 16];
        int64_t v51 = v30 - 16;
        uint64_t v52 = v48 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v53 = *(_OWORD *)v51;
          *(v50 - 1) = *((_OWORD *)v51 - 1);
          *int v50 = v53;
          v50 -= 2;
          v51 -= 32;
          v52 -= 8;
        }
        while (v52);
        unint64_t v9 = v33;
        if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_35;
        }
LABEL_36:
        a4[2] = v41;
        a4[3] = v42;
        a4[4] = &v40[4 * v39];
        if (v34) {
          goto LABEL_37;
        }
LABEL_38:
        BOOL v28 = v90;
        a4[3] = v42;
        ++v29;
        char v30 = (char *)v42;
        if (v29 == v90) {
          goto LABEL_50;
        }
      }
      int64_t v45 = v30;
      unint64_t v9 = v33;
      do
      {
LABEL_35:
        int v46 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--unint64_t v41 = v46;
      }
      while (v45 != v34);
      goto LABEL_36;
    }
LABEL_50:
    int v54 = *(_DWORD *)(*(void *)(v88 + 32) + 4 * a5);
    if (CVNLPIsWhitespaceCharLMCodepoint())
    {
      a4[5] = 0;
      a4[6] = 0;
      unint64_t v55 = *(void *)(v87 + 40);
      unint64_t v56 = *(void *)(v87 + 48) + v55;
      if (v56) {
        goto LABEL_52;
      }
LABEL_58:
      if (*(float *)(v88 + 72) < 0.0) {
        goto LABEL_63;
      }
LABEL_59:
      if ((uint64_t)(a4[3] - a4[2]) >> 2 >= (unint64_t)*(int *)(v88 + 56))
      {
        LMLanguageModelConditionalProbability();
        double v63 = v62 * 2.30258509;
        if (*(double *)(v88 + 16) > v63) {
          double v63 = *(double *)(v88 + 16);
        }
        *((double *)a4 + 1) = *(double *)(v88 + 8) * v63;
      }
LABEL_63:
      char v65 = (char *)a4[3];
      unint64_t v64 = a4[4];
      if ((unint64_t)v65 < v64)
      {
        *(_DWORD *)char v65 = v54;
        uint64_t v66 = (uint64_t)(v65 + 4);
LABEL_84:
        a4[3] = v66;
        return *((double *)a4 + 1);
      }
      uint64_t v67 = (char *)*v9;
      uint64_t v68 = v65 - (unsigned char *)*v9;
      uint64_t v69 = v68 >> 2;
      unint64_t v70 = (v68 >> 2) + 1;
      if (!(v70 >> 62))
      {
        uint64_t v71 = v64 - (void)v67;
        if (v71 >> 1 > v70) {
          unint64_t v70 = v71 >> 1;
        }
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v72 = v70;
        }
        if (v72)
        {
          if (v72 >> 62) {
LABEL_87:
          }
            sub_1C4949AA8();
          long long v73 = operator new(4 * v72);
          uint64_t v74 = &v73[4 * v69];
          uint64_t v75 = &v73[4 * v72];
          _DWORD *v74 = v54;
          uint64_t v66 = (uint64_t)(v74 + 1);
          int64_t v76 = v65 - v67;
          if (v65 == v67) {
            goto LABEL_82;
          }
        }
        else
        {
          long long v73 = 0;
          uint64_t v74 = (_DWORD *)(4 * v69);
          uint64_t v75 = 0;
          *(_DWORD *)(4 * v69) = v54;
          uint64_t v66 = 4 * v69 + 4;
          int64_t v76 = v65 - v67;
          if (v65 == v67)
          {
LABEL_82:
            a4[2] = v74;
            a4[3] = v66;
            a4[4] = v75;
            if (v67) {
              operator delete(v67);
            }
            goto LABEL_84;
          }
        }
        unint64_t v77 = v76 - 4;
        if (v77 < 0x2C) {
          goto LABEL_91;
        }
        if ((unint64_t)(v65 - v73 - v68) < 0x20) {
          goto LABEL_91;
        }
        uint64_t v78 = (v77 >> 2) + 1;
        uint64_t v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v80 = &v65[-v79];
        uint64_t v74 = (_DWORD *)((char *)v74 - v79);
        uint64_t v81 = &v73[4 * v69 - 16];
        long long v82 = v65 - 16;
        uint64_t v83 = v78 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v84 = *(_OWORD *)v82;
          *(v81 - 1) = *((_OWORD *)v82 - 1);
          *uint64_t v81 = v84;
          v81 -= 2;
          v82 -= 32;
          v83 -= 8;
        }
        while (v83);
        char v65 = v80;
        if (v78 != (v78 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_91:
          do
          {
            int v85 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *--uint64_t v74 = v85;
          }
          while (v65 != v67);
        }
        goto LABEL_82;
      }
LABEL_88:
      sub_1C494A220();
    }
    int v58 = CVNLPIsDigitCharLMCodepoint();
    uint64_t v59 = *(void *)(v87 + 40);
    if (v58)
    {
      uint64_t v60 = *(void *)(v87 + 48);
      a4[5] = v59 + 1;
      a4[6] = v60;
      unint64_t v55 = *(void *)(v87 + 40);
      unint64_t v56 = *(void *)(v87 + 48) + v55;
      if (!v56) {
        goto LABEL_58;
      }
    }
    else
    {
      uint64_t v61 = *(void *)(v87 + 48) + 1;
      a4[5] = v59;
      a4[6] = v61;
      unint64_t v55 = *(void *)(v87 + 40);
      unint64_t v56 = *(void *)(v87 + 48) + v55;
      if (!v56) {
        goto LABEL_58;
      }
    }
LABEL_52:
    float v57 = (float)(v55 / v56);
    if (v57 > *(float *)(v88 + 72)) {
      goto LABEL_63;
    }
    goto LABEL_59;
  }
  if (a4 != (void *)a2) {
    sub_1C499DEE4(a4 + 2, *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  }
  *(_OWORD *)(a4 + 5) = *(_OWORD *)(a2 + 40);
  return *((double *)a4 + 1);
}

void *sub_1C499DE24(void *a1)
{
  *a1 = &unk_1F20123B0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1C499DE74(void *a1)
{
  *a1 = &unk_1F20123B0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C8786460);
}

void *sub_1C499DEE4(void *result, char *__src, char *a3, size_t __sz)
{
  unint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      sub_1C494A220();
    uint64_t v13 = 4 * v12;
    uint64_t result = operator new(4 * v12);
    unint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  float v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    unint64_t v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    unint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

uint64_t *sub_1C499E02C(uint64_t *a1, int a2)
{
  uint64_t v4 = *a1;
  unint64_t v6 = *(char **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  uint64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_DWORD *)unint64_t v6 = a2;
    uint64_t v8 = (uint64_t)(v6 + 4);
    goto LABEL_22;
  }
  unint64_t v9 = *(char **)v4;
  uint64_t v10 = (uint64_t)&v6[-*(void *)v4];
  uint64_t v11 = v10 >> 2;
  unint64_t v12 = (v10 >> 2) + 1;
  if (v12 >> 62) {
    sub_1C494A220();
  }
  uint64_t v13 = v5 - (void)v9;
  if (v13 >> 1 > v12) {
    unint64_t v12 = v13 >> 1;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 62) {
      sub_1C4949AA8();
    }
    uint64_t v15 = operator new(4 * v14);
    float v16 = &v15[4 * v11];
    unint64_t v17 = &v15[4 * v14];
    *float v16 = a2;
    uint64_t v8 = (uint64_t)(v16 + 1);
    int64_t v18 = v6 - v9;
    if (v6 == v9) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v15 = 0;
  float v16 = (_DWORD *)(4 * v11);
  unint64_t v17 = 0;
  *(_DWORD *)(4 * v11) = a2;
  uint64_t v8 = 4 * v11 + 4;
  int64_t v18 = v6 - v9;
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v19 = v18 - 4;
    if (v19 < 0x2C) {
      goto LABEL_27;
    }
    if ((unint64_t)(v6 - v15 - v10) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v20 = (v19 >> 2) + 1;
    uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v7 = &v6[-v21];
    float v16 = (_DWORD *)((char *)v16 - v21);
    unsigned int v22 = &v15[4 * v11 - 16];
    int v23 = v6 - 16;
    uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *unsigned int v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        int v26 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--float v16 = v26;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  *(void *)uint64_t v4 = v16;
  *(void *)(v4 + 8) = v8;
  *(void *)(v4 + 16) = v17;
  if (v9) {
    operator delete(v9);
  }
LABEL_22:
  *(void *)(v4 + 8) = v8;
  return a1;
}

void sub_1C499E1B0(void *a1)
{
  *a1 = &unk_1F20126A8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C499E220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F410DC08](a2, a3);
}

uint64_t sub_1C499E22C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F410DC68](a2);
}

void sub_1C499E234(void *a1)
{
  *a1 = &unk_1F20126A8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C8786460);
}

BOOL sub_1C499E2A4(uint64_t a1, int a2, int a3)
{
  if (!a2 && a3 == 1) {
    return 1;
  }
  if (a3) {
    BOOL v4 = a3 == 3;
  }
  else {
    BOOL v4 = 1;
  }
  char v5 = v4;
  if (a2 == 1 && (v5 & 1) != 0) {
    return 1;
  }
  return a2 == 3 && a3 == 1;
}

BOOL sub_1C499E2E8(uint64_t a1, int a2)
{
  return a2 == 2;
}

void sub_1C499E2F8()
{
}

void sub_1C499E30C()
{
}

double sub_1C499E358(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16);
  double v5 = a1[3] * (double)v4;
  if (a1[2] > v5) {
    double v5 = a1[2];
  }
  double result = a1[1] * v5;
  *(double *)(a4 + 8) = result;
  *(void *)(a4 + 16) = v4 + 1;
  return result;
}

void sub_1C499E38C()
{
}

char *sub_1C499E3A0(char **a1, void *a2)
{
  CFTypeID v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = v4 - *a1;
  uint64_t v6 = v5 >> 3;
  unint64_t v7 = (v5 >> 3) + 1;
  if (v7 >> 61) {
    sub_1C494A220();
  }
  uint64_t v9 = a1[2] - v3;
  if (v9 >> 2 > v7) {
    unint64_t v7 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v10)
  {
    if (v10 >> 61) {
      sub_1C4949AA8();
    }
    uint64_t v11 = (char *)operator new(8 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  unint64_t v12 = &v11[8 * v6];
  uint64_t v13 = &v11[8 * v10];
  *(void *)unint64_t v12 = *a2;
  unint64_t v14 = v12 + 8;
  *a2 = 0;
  if (v4 != v3)
  {
    unint64_t v15 = v4 - v3 - 8;
    if (v15 < 0x78 || &v11[v5 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v4 && &v4[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12) {
      goto LABEL_30;
    }
    uint64_t v16 = (v15 >> 3) + 1;
    uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v12 -= v17;
    int64_t v18 = &v4[-v17];
    unint64_t v19 = v4 - 16;
    uint64_t v20 = &v11[8 * v6 - 16];
    uint64_t v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v22 = *(_OWORD *)v19;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)uint64_t v20 = v22;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)unint64_t v19 = 0uLL;
      v19 -= 32;
      v20 -= 32;
      v21 -= 4;
    }
    while (v21);
    unint64_t v4 = v18;
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        uint64_t v23 = *((void *)v4 - 1);
        v4 -= 8;
        *((void *)v12 - 1) = v23;
        v12 -= 8;
        *(void *)unint64_t v4 = 0;
      }
      while (v4 != v3);
    }
  }
  uint64_t v24 = *a1;
  long long v25 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  while (v25 != v24)
  {
    uint64_t v27 = (const void *)*((void *)v25 - 1);
    v25 -= 8;
    int v26 = v27;
    if (v27) {
      CFRelease(v26);
    }
  }
  if (v24) {
    operator delete(v24);
  }
  return v14;
}

void *sub_1C499E534(void *result, CFTypeRef *a2, CFTypeRef *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 61) {
      sub_1C494A220();
    }
    double result = operator new(8 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[a4];
    while (a2 != a3)
    {
      CFTypeRef v9 = *a2;
      if (*a2) {
        double result = CFRetain(*a2);
      }
      *v8++ = v9;
      ++a2;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1C499E5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***sub_1C499E5F4(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    CFTypeID v3 = (char *)**result;
    if (v3)
    {
      unint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          unint64_t v7 = (const void *)*((void *)v4 - 1);
          v4 -= 8;
          uint64_t v6 = v7;
          if (v7) {
            CFRelease(v6);
          }
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_1C499E688(void *a1)
{
  *a1 = &unk_1F20124E8;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = (void *)a1[3];
    if (v4 != v3)
    {
      do
      {
        unint64_t v7 = *(const void **)(v4 - 8);
        v4 -= 8;
        uint64_t v6 = v7;
        if (v7) {
          CFRelease(v6);
        }
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[3];
    }
    a1[4] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_1C499E724(void *a1)
{
  *a1 = &unk_1F20124E8;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = (void *)a1[3];
    if (v4 != v3)
    {
      do
      {
        unint64_t v7 = *(const void **)(v4 - 8);
        v4 -= 8;
        uint64_t v6 = v7;
        if (v7) {
          CFRelease(v6);
        }
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[3];
    }
    a1[4] = v3;
    operator delete(v5);
  }
  JUMPOUT(0x1C8786460);
}

void sub_1C499E7E0()
{
}

void sub_1C499E83C(uint64_t a1, void *a2, uint64_t a3)
{
  if (!*(void *)a3 || !CFStringGetLength(*(CFStringRef *)a3) || (v6.length = *(void *)(a3 + 16)) == 0)
  {
    CFTypeRef cf = 0;
    CFTypeRef v9 = *(CFTypeRef **)(a1 + 24);
    uint64_t v8 = *(CFTypeRef **)(a1 + 32);
    if (v9 == v8) {
      goto LABEL_51;
    }
    goto LABEL_7;
  }
  v6.location = *(void *)(a3 + 8);
  CFStringRef v7 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFStringRef *)a3, v6);
  sub_1C499CB34(&cf, v7);
  CFTypeRef v9 = *(CFTypeRef **)(a1 + 24);
  uint64_t v8 = *(CFTypeRef **)(a1 + 32);
  if (v9 != v8)
  {
LABEL_7:
    int64_t v40 = v8;
    do
    {
      CFTypeRef v10 = *v9;
      if (*v9) {
        CFRetain(*v9);
      }
      uint64_t RootCursor = LXLexiconCreateRootCursor();
      unint64_t v12 = (const void *)RootCursor;
      if (cf)
      {
        uint64_t v13 = (const void *)LXCursorCreateByAdvancing();
        if (v12) {
          CFRelease(v12);
        }
        unint64_t v15 = (char *)a2[3];
        unint64_t v14 = a2[4];
        if ((unint64_t)v15 >= v14)
        {
LABEL_19:
          uint64_t v17 = (char *)a2[2];
          int64_t v18 = v15 - v17;
          uint64_t v19 = (v15 - v17) >> 3;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61) {
            sub_1C494A220();
          }
          uint64_t v21 = v14 - (void)v17;
          if (v21 >> 2 > v20) {
            unint64_t v20 = v21 >> 2;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            if (v22 >> 61) {
              sub_1C4949AA8();
            }
            uint64_t v23 = (char *)operator new(8 * v22);
            if (!v13)
            {
LABEL_28:
              uint64_t v24 = &v23[8 * v19];
              long long v25 = &v23[8 * v22];
              *(void *)uint64_t v24 = v13;
              uint64_t v16 = v24 + 8;
              int64_t v26 = v15 - v17;
              if (v15 != v17) {
                goto LABEL_29;
              }
LABEL_33:
              a2[2] = v24;
              a2[3] = v16;
              a2[4] = v25;
LABEL_34:
              uint64_t v8 = v40;
              if (v17) {
                operator delete(v17);
              }
              goto LABEL_36;
            }
          }
          else
          {
            uint64_t v23 = 0;
            if (!v13) {
              goto LABEL_28;
            }
          }
          CFRetain(v13);
          uint64_t v17 = (char *)a2[2];
          unint64_t v15 = (char *)a2[3];
          uint64_t v24 = &v23[8 * v19];
          long long v25 = &v23[8 * v22];
          *(void *)uint64_t v24 = v13;
          uint64_t v16 = v24 + 8;
          int64_t v26 = v15 - v17;
          if (v15 == v17) {
            goto LABEL_33;
          }
LABEL_29:
          unint64_t v27 = v26 - 8;
          if (v27 < 0x78)
          {
            BOOL v28 = v15;
            goto LABEL_46;
          }
          unint64_t v29 = (v15 - 8 - v17) & 0xFFFFFFFFFFFFFFF8;
          if (&v23[v18 - v29 - 8] < v15 && &v15[-v29 - 8] < v24)
          {
            BOOL v28 = v15;
            goto LABEL_46;
          }
          uint64_t v30 = (v27 >> 3) + 1;
          uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
          v24 -= v31;
          BOOL v28 = &v15[-v31];
          unint64_t v32 = v15 - 16;
          int v33 = &v23[8 * v19 - 16];
          uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v35 = *(_OWORD *)v32;
            *((_OWORD *)v33 - 1) = *((_OWORD *)v32 - 1);
            *(_OWORD *)int v33 = v35;
            *((_OWORD *)v32 - 1) = 0uLL;
            *(_OWORD *)unint64_t v32 = 0uLL;
            v32 -= 32;
            v33 -= 32;
            v34 -= 4;
          }
          while (v34);
          if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_46:
              uint64_t v36 = *((void *)v28 - 1);
              v28 -= 8;
              *((void *)v24 - 1) = v36;
              v24 -= 8;
              *(void *)BOOL v28 = 0;
            }
            while (v28 != v17);
          }
          uint64_t v17 = (char *)a2[2];
          unint64_t v37 = (char *)a2[3];
          a2[2] = v24;
          a2[3] = v16;
          a2[4] = v25;
          while (v37 != v17)
          {
            unint64_t v39 = (const void *)*((void *)v37 - 1);
            v37 -= 8;
            uint64_t v38 = v39;
            if (v39) {
              CFRelease(v38);
            }
          }
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v13 = (const void *)RootCursor;
        unint64_t v15 = (char *)a2[3];
        unint64_t v14 = a2[4];
        if ((unint64_t)v15 >= v14) {
          goto LABEL_19;
        }
      }
      if (v13) {
        CFRetain(v13);
      }
      *(void *)unint64_t v15 = v13;
      uint64_t v16 = v15 + 8;
LABEL_36:
      a2[3] = v16;
      if (v13) {
        CFRelease(v13);
      }
      if (v10) {
        CFRelease(v10);
      }
      ++v9;
    }
    while (v9 != v8);
  }
LABEL_51:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C499EB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

double sub_1C499EB98(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  a4[1] = 0;
  a4[5] = a2[5];
  if (a1[10] == a5)
  {
    if (a4 == a2) {
      return 0.0;
    }
    uint64_t v8 = (void **)(a4 + 2);
    CFStringRef v7 = (const void **)a4[2];
    CFTypeRef v10 = (CFTypeRef *)a2[2];
    CFTypeRef v9 = (CFTypeRef *)a2[3];
    unint64_t v11 = v9 - v10;
    uint64_t v12 = a4[4];
    if (v11 <= (v12 - (uint64_t)v7) >> 3)
    {
      uint64_t v60 = (const void **)a4[3];
      unint64_t v61 = v60 - v7;
      if (v61 >= v11)
      {
        if (v10 == v9)
        {
          unint64_t v100 = (const void **)a4[2];
        }
        else
        {
          unint64_t v100 = (const void **)a4[2];
          do
          {
            uint64_t v101 = *v7;
            CFTypeRef v102 = *v10;
            *CFStringRef v7 = *v10;
            if (v102) {
              CFRetain(v102);
            }
            if (v101) {
              CFRelease(v101);
            }
            ++v10;
            ++v7;
            ++v100;
          }
          while (v10 != v9);
          uint64_t v60 = (const void **)a4[3];
        }
        while (v60 != v100)
        {
          float32x2_t v124 = *--v60;
          float32x2_t v123 = v124;
          if (v124) {
            CFRelease(v123);
          }
        }
        a4[3] = v100;
      }
      else
      {
        if (v60 != v7)
        {
          uint64_t v62 = 8 * v61;
          double v63 = (const void **)a2[2];
          do
          {
            unint64_t v64 = *v7;
            char v65 = *v63;
            *CFStringRef v7 = *v63;
            if (v65) {
              CFRetain(v65);
            }
            if (v64) {
              CFRelease(v64);
            }
            ++v63;
            ++v7;
            v62 -= 8;
          }
          while (v62);
          CFStringRef v7 = (const void **)a4[3];
        }
        uint64_t v119 = &v10[v61];
        uint64_t v120 = v7;
        if (v119 != v9)
        {
          uint64_t v120 = v7;
          unint64_t v121 = v7;
          do
          {
            CFTypeRef v122 = *v119;
            if (*v119) {
              CFRetain(*v119);
            }
            *v121++ = v122;
            ++v119;
            ++v120;
          }
          while (v119 != v9);
        }
        a4[3] = v120;
      }
    }
    else
    {
      if (v7)
      {
        uint64_t v13 = (const void **)a4[3];
        unint64_t v14 = (void *)a4[2];
        if (v13 != v7)
        {
          do
          {
            uint64_t v16 = *--v13;
            unint64_t v15 = v16;
            if (v16) {
              CFRelease(v15);
            }
          }
          while (v13 != v7);
          unint64_t v14 = *v8;
        }
        a4[3] = v7;
        operator delete(v14);
        uint64_t v12 = 0;
        CFTypeRef *v8 = 0;
        a4[3] = 0;
        a4[4] = 0;
      }
      if ((char *)v9 - (char *)v10 < 0) {
        goto LABEL_166;
      }
      uint64_t v113 = v12 >> 2;
      if (v12 >> 2 <= v11) {
        uint64_t v113 = v9 - v10;
      }
      BOOL v114 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v114) {
        unint64_t v115 = v113;
      }
      if (v115 >> 61) {
LABEL_166:
      }
        sub_1C494A220();
      uint64_t v116 = v115;
      uint64_t v117 = operator new(8 * v115);
      a4[2] = v117;
      a4[3] = v117;
      a4[4] = &v117[v116];
      while (v10 != v9)
      {
        CFTypeRef v118 = *v10;
        if (*v10) {
          CFRetain(*v10);
        }
        *v117++ = v118;
        ++v10;
      }
      a4[3] = v117;
    }
    return *((double *)a4 + 1);
  }
  int v19 = *(_DWORD *)(a1[6] + 4 * a5);
  if ((v19 - 0x10000) >> 20)
  {
    CFIndex v21 = 1;
    unsigned int v20 = *(_DWORD *)(a1[6] + 4 * a5);
  }
  else
  {
    unsigned int v20 = ((v19 + 67043328) >> 10) - 10240;
    chars[1] = v19 & 0x3FF | 0xDC00;
    CFIndex v21 = 2;
  }
  chars[0] = v20;
  CFStringRef v22 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E4F1CF80], chars, v21);
  sub_1C499CB34(&cf, v22);
  uint64_t v23 = (void (*)(void))a1[12];
  if (v23)
  {
    uint64_t v24 = (id)cf;
    v23();
    id v25 = (id)objc_claimAutoreleasedReturnValue();
    int64_t v26 = v25;
    if (v25) {
      CFRetain(v25);
    }
    sub_1C499CB34(chars, v26);

    BOOL v28 = *(const void **)chars;
    CFTypeRef v27 = cf;
    *(void *)chars = cf;
    CFTypeRef cf = v28;
    if (*(void *)chars) {
      CFRelease(v27);
    }
  }
  if (a1[9] == a5 || MEMORY[0x1C8785A30](cf))
  {
    uint64_t v29 = a1[3];
    uint64_t v30 = a1[4];
    if (v29 != v30)
    {
      while (1)
      {
        uint64_t RootCursor = LXLexiconCreateRootCursor();
        uint64_t v33 = RootCursor;
        long long v35 = (uint64_t *)a4[3];
        unint64_t v34 = a4[4];
        if ((unint64_t)v35 >= v34) {
          break;
        }
        uint64_t *v35 = RootCursor;
        uint64_t v31 = (uint64_t)(v35 + 1);
LABEL_24:
        a4[3] = v31;
        v29 += 8;
        if (v29 == v30) {
          goto LABEL_50;
        }
      }
      uint64_t v36 = (char *)a4[2];
      uint64_t v37 = ((char *)v35 - v36) >> 3;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 61) {
        sub_1C494A220();
      }
      uint64_t v39 = v34 - (void)v36;
      if (v39 >> 2 > v38) {
        unint64_t v38 = v39 >> 2;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v38;
      }
      if (v40)
      {
        if (v40 >> 61) {
          sub_1C4949AA8();
        }
        unint64_t v41 = (char *)operator new(8 * v40);
        uint64_t v42 = (uint64_t *)&v41[8 * v37];
        int64_t v43 = &v41[8 * v40];
        *uint64_t v42 = v33;
        uint64_t v31 = (uint64_t)(v42 + 1);
        unint64_t v44 = (char *)((char *)v35 - v36);
        if (v35 != (uint64_t *)v36) {
          goto LABEL_35;
        }
      }
      else
      {
        unint64_t v41 = 0;
        uint64_t v42 = (uint64_t *)(8 * v37);
        int64_t v43 = 0;
        *(void *)(8 * v37) = v33;
        uint64_t v31 = 8 * v37 + 8;
        unint64_t v44 = (char *)((char *)v35 - v36);
        if (v35 != (uint64_t *)v36)
        {
LABEL_35:
          unint64_t v45 = (unint64_t)(v44 - 8);
          if (v45 < 0x78) {
            goto LABEL_172;
          }
          unint64_t v46 = ((char *)(v35 - 1) - v36) & 0xFFFFFFFFFFFFFFF8;
          if (&v41[(char *)v35 - v36 - v46 - 8] < (char *)v35 && (uint64_t *)((char *)v35 - v46 - 8) < v42) {
            goto LABEL_172;
          }
          uint64_t v47 = (v45 >> 3) + 1;
          uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v42 = (uint64_t *)((char *)v42 - v48);
          uint64_t v49 = &v35[v48 / 0xFFFFFFFFFFFFFFF8];
          int v50 = v35 - 2;
          int64_t v51 = &v41[8 * v37 - 16];
          uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v53 = *(_OWORD *)v50;
            *((_OWORD *)v51 - 1) = *((_OWORD *)v50 - 1);
            *(_OWORD *)int64_t v51 = v53;
            *((_OWORD *)v50 - 1) = 0uLL;
            *(_OWORD *)int v50 = 0uLL;
            v50 -= 4;
            v51 -= 32;
            v52 -= 4;
          }
          while (v52);
          long long v35 = v49;
          if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_172:
            do
            {
              uint64_t v54 = *--v35;
              *--uint64_t v42 = v54;
              uint64_t *v35 = 0;
            }
            while (v35 != (uint64_t *)v36);
          }
          long long v35 = (uint64_t *)a4[2];
          unint64_t v55 = (uint64_t *)a4[3];
          a4[2] = v42;
          a4[3] = v31;
          a4[4] = v43;
          while (v55 != v35)
          {
            float v57 = (const void *)*--v55;
            unint64_t v56 = v57;
            if (v57) {
              CFRelease(v56);
            }
          }
          goto LABEL_48;
        }
      }
      a4[2] = v42;
      a4[3] = v31;
      a4[4] = v43;
LABEL_48:
      if (v35) {
        operator delete(v35);
      }
      goto LABEL_24;
    }
LABEL_50:
    a4[5] = 0;
    double v58 = *((double *)a4 + 1);
    CFTypeRef v59 = cf;
    if (!cf) {
      return v58;
    }
LABEL_160:
    CFRelease(v59);
    return v58;
  }
  uint64_t v129 = a1;
  uint64_t v66 = (CFTypeRef *)a2[2];
  uint64_t v67 = (CFTypeRef *)a2[3];
  while (v66 != v67)
  {
    CFTypeRef v68 = *v66;
    if (*v66) {
      CFRetain(*v66);
    }
    uint64_t v69 = (const void *)LXCursorCreateByAdvancing();
    unint64_t v70 = v69;
    if (v69)
    {
      unint64_t v72 = (void *)a4[3];
      unint64_t v71 = a4[4];
      if ((unint64_t)v72 >= v71)
      {
        uint64_t v74 = a4[2];
        uint64_t v75 = (char *)v72 - v74;
        uint64_t v76 = ((uint64_t)v72 - v74) >> 3;
        if ((unint64_t)(v76 + 1) >> 61) {
          sub_1C494A220();
        }
        uint64_t v77 = v71 - v74;
        uint64_t v78 = v77 >> 2;
        if (v77 >> 2 <= (unint64_t)(v76 + 1)) {
          uint64_t v78 = v76 + 1;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v79 = v78;
        }
        if (v79)
        {
          if (v79 >> 61) {
            sub_1C4949AA8();
          }
          uint64_t v80 = (char *)operator new(8 * v79);
        }
        else
        {
          uint64_t v80 = 0;
        }
        CFRetain(v70);
        uint64_t v81 = &v80[8 * v76];
        long long v82 = &v80[8 * v79];
        uint64_t v83 = (char *)a4[2];
        long long v84 = (char *)a4[3];
        *(void *)uint64_t v81 = v70;
        long long v73 = v81 + 8;
        if (v84 == v83)
        {
          a4[2] = v81;
          a4[3] = v73;
          a4[4] = v82;
        }
        else
        {
          unint64_t v85 = v84 - v83 - 8;
          if (v85 < 0x78) {
            goto LABEL_173;
          }
          unint64_t v86 = (v84 - 8 - v83) & 0xFFFFFFFFFFFFFFF8;
          if (&v75[(void)v80 - v86 - 8] < v84 && &v84[-v86 - 8] < v81) {
            goto LABEL_173;
          }
          uint64_t v87 = (v85 >> 3) + 1;
          uint64_t v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
          v81 -= v88;
          uint64_t v89 = &v84[-v88];
          uint64_t v90 = v84 - 16;
          uint64_t v91 = &v80[8 * v76 - 16];
          uint64_t v92 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v93 = *(_OWORD *)v90;
            *((_OWORD *)v91 - 1) = *((_OWORD *)v90 - 1);
            *(_OWORD *)uint64_t v91 = v93;
            *((_OWORD *)v90 - 1) = 0uLL;
            *(_OWORD *)uint64_t v90 = 0uLL;
            v90 -= 32;
            v91 -= 32;
            v92 -= 4;
          }
          while (v92);
          long long v84 = v89;
          if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_173:
            do
            {
              uint64_t v94 = *((void *)v84 - 1);
              v84 -= 8;
              *((void *)v81 - 1) = v94;
              v81 -= 8;
              *(void *)long long v84 = 0;
            }
            while (v84 != v83);
          }
          long long v84 = (char *)a4[2];
          unint64_t v95 = (char *)a4[3];
          a4[2] = v81;
          a4[3] = v73;
          a4[4] = v82;
          while (v95 != v84)
          {
            long long v97 = (const void *)*((void *)v95 - 1);
            v95 -= 8;
            long long v96 = v97;
            if (v97) {
              CFRelease(v96);
            }
          }
        }
        if (v84) {
          operator delete(v84);
        }
      }
      else
      {
        CFRetain(v69);
        *unint64_t v72 = v70;
        long long v73 = v72 + 1;
      }
      a4[3] = v73;
      CFRelease(v70);
    }
    if (v68) {
      CFRelease(v68);
    }
    ++v66;
  }
  if (CVNLPShouldUseLexiconContextLogProb())
  {
    uint64_t v98 = &CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::CONTEXT_LOG_PROB;
    {
      goto LABEL_154;
    }
    CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::CONTEXT_LOG_PROB = 0xC007F7427B73E391;
LABEL_169:
    __cxa_guard_release(v99);
LABEL_154:
    double v106 = *(double *)v98;
    goto LABEL_155;
  }
  unint64_t v103 = (CFTypeRef *)a4[2];
  unint64_t v104 = (CFTypeRef *)a4[3];
  if (v103 == v104)
  {
    uint64_t v98 = &CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::WORD_MIN_LOG_PROB;
    {
      goto LABEL_154;
    }
    CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::WORD_MIN_LOG_PROB = 0xC04205966F2B4F12;
    goto LABEL_169;
  }
  double v105 = log((double)(unint64_t)((uint64_t)(v129[4] - v129[3]) >> 3));
  if (*((unsigned char *)v129 + 88)) {
    double v106 = 0.0;
  }
  else {
    double v106 = -INFINITY;
  }
  double v107 = -v105;
  do
  {
    CFTypeRef v108 = *v103;
    if (*v103) {
      CFRetain(*v103);
    }
    LXCursorConditionalProbability();
    double v110 = v107 + v109 * 2.30258509;
    if (v106 <= v110) {
      double v111 = v106;
    }
    else {
      double v111 = v107 + v109 * 2.30258509;
    }
    if (v106 <= v110) {
      double v106 = v110;
    }
    if (v111 > -INFINITY)
    {
      long double v112 = exp(v111 - v106);
      double v106 = v106 + log1p(v112);
    }
    if (v108) {
      CFRelease(v108);
    }
    ++v103;
  }
  while (v103 != v104);
LABEL_155:
  double v125 = *((double *)v129 + 2);
  double v126 = *((double *)a4 + 5);
  double v127 = v125 - v126;
  if (v106 >= v125 - v126) {
    double v127 = v106;
  }
  *((double *)a4 + 5) = v126 + v127;
  if (v125 <= v127) {
    double v125 = v127;
  }
  double v58 = *((double *)v129 + 1) * v125;
  *((double *)a4 + 1) = v58;
  CFTypeRef v59 = cf;
  if (cf) {
    goto LABEL_160;
  }
  return v58;
}

void sub_1C499F430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1C499F528(void *a1)
{
  *a1 = &unk_1F2012400;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        CFRange v6 = *(const void **)(v3 - 8);
        v3 -= 8;
        uint64_t v5 = v6;
        if (v6) {
          CFRelease(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C499F5B4(void *a1)
{
  *a1 = &unk_1F2012400;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        CFRange v6 = *(const void **)(v3 - 8);
        v3 -= 8;
        uint64_t v5 = v6;
        if (v6) {
          CFRelease(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1C8786460);
}

const void **sub_1C499F660(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_1C499F694(void *a1)
{
  *a1 = &unk_1F2012478;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    CFRelease(v4);
  }
  return a1;
}

void sub_1C499F704(void *a1)
{
  *a1 = &unk_1F2012478;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    CFRelease(v4);
  }
  JUMPOUT(0x1C8786460);
}

void sub_1C499F794()
{
}

void sub_1C499F7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a3 && CFStringGetLength(*(CFStringRef *)a3))
  {
    if (*(void *)a3 && CFStringGetLength(*(CFStringRef *)a3) && (v4.length = *(void *)(a3 + 8)) != 0)
    {
      v4.location = 0;
      CFStringRef v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFStringRef *)a3, v4);
      sub_1C499CB34(&v6, v5);
    }
    else
    {
      CFTypeRef v6 = 0;
    }
    CVNLPWordTokenIDsForString();
    if (v6) {
      CFRelease(v6);
    }
  }
}

void sub_1C499F8E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 - 40);
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1C499F8FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  a4[1] = 0;
  if (a4 == (void *)a2)
  {
    CFTypeRef v9 = (void **)(a4 + 5);
    if (*(void *)(a1 + 72) == a5) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1C499DEE4(a4 + 2, *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
    CFTypeRef v9 = (void **)(a4 + 5);
    sub_1C494ACB0(a4 + 5, *(char **)(a2 + 40), *(char **)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
    if (*(void *)(a1 + 72) == a5)
    {
LABEL_3:
      double result = *(double *)(a2 + 8);
      *((double *)a4 + 1) = result;
      return result;
    }
  }
  if (*(void *)(a1 + 64) != a5)
  {
    uint64_t v12 = (uint64_t *)a4[6];
    unint64_t v11 = a4[7];
    if ((unint64_t)v12 < v11)
    {
      *uint64_t v12 = a5;
      uint64_t v13 = (uint64_t)(v12 + 1);
LABEL_28:
      a4[6] = v13;
      return *((double *)a4 + 1);
    }
    unint64_t v14 = (uint64_t *)*v9;
    uint64_t v15 = (char *)v12 - (unsigned char *)*v9;
    uint64_t v16 = v15 >> 3;
    unint64_t v17 = (v15 >> 3) + 1;
    if (v17 >> 61) {
      sub_1C494A220();
    }
    uint64_t v18 = v11 - (void)v14;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        sub_1C4949AA8();
      }
      unsigned int v20 = operator new(8 * v19);
      CFIndex v21 = (uint64_t *)&v20[8 * v16];
      CFStringRef v22 = &v20[8 * v19];
      *CFIndex v21 = a5;
      uint64_t v13 = (uint64_t)(v21 + 1);
      int64_t v23 = (char *)v12 - (char *)v14;
      if (v12 == v14) {
        goto LABEL_26;
      }
    }
    else
    {
      unsigned int v20 = 0;
      CFIndex v21 = (uint64_t *)(8 * v16);
      CFStringRef v22 = 0;
      *(void *)(8 * v16) = a5;
      uint64_t v13 = 8 * v16 + 8;
      int64_t v23 = (char *)v12 - (char *)v14;
      if (v12 == v14)
      {
LABEL_26:
        a4[5] = v21;
        a4[6] = v13;
        a4[7] = v22;
        if (v14) {
          operator delete(v14);
        }
        goto LABEL_28;
      }
    }
    unint64_t v24 = v23 - 8;
    if (v24 < 0x58) {
      goto LABEL_34;
    }
    if ((unint64_t)((char *)v12 - v20 - v15) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v25 = (v24 >> 3) + 1;
    uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v27 = &v12[v26 / 0xFFFFFFFFFFFFFFF8];
    CFIndex v21 = (uint64_t *)((char *)v21 - v26);
    BOOL v28 = &v20[8 * v16 - 16];
    uint64_t v29 = v12 - 2;
    uint64_t v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *BOOL v28 = v31;
      v28 -= 2;
      v29 -= 4;
      v30 -= 4;
    }
    while (v30);
    uint64_t v12 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v32 = *--v12;
        *--CFIndex v21 = v32;
      }
      while (v12 != v14);
    }
    goto LABEL_26;
  }
  sub_1C499FE6C(a1, a4, a5);
  return *((double *)a4 + 1);
}

double sub_1C499FB10(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  if (!*(unsigned char *)(a1 + 80) && *(void *)(a2 + 40) != *(void *)(a2 + 48))
  {
    sub_1C499FE6C(a1, (void *)a2, *(void *)(a1 + 64));
    return *(double *)(a2 + 8);
  }
  return result;
}

void *sub_1C499FB64(void *a1)
{
  *a1 = &unk_1F20123D8;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C499FBC4(void *a1)
{
  *a1 = &unk_1F20123D8;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1C8786460);
}

void sub_1C499FC44(uint64_t a1, void *a2, int TokenIDForString)
{
  id v5 = a2;
  if (TokenIDForString)
  {
    unint64_t v11 = *(void **)(a1 + 40);
    uint64_t v13 = (char *)v11[3];
    unint64_t v12 = v11[4];
    if ((unint64_t)v13 < v12)
    {
LABEL_3:
      *(_DWORD *)uint64_t v13 = TokenIDForString;
      uint64_t v14 = (uint64_t)(v13 + 4);
      goto LABEL_25;
    }
  }
  else
  {
    id v34 = v5;
    uint64_t v15 = objc_msgSend_lowercaseString(v5, v6, v7, v8, v9, v10);
    TokenIDForString = LMLanguageModelGetTokenIDForString();

    id v5 = v34;
    unint64_t v11 = *(void **)(a1 + 40);
    uint64_t v13 = (char *)v11[3];
    unint64_t v12 = v11[4];
    if ((unint64_t)v13 < v12) {
      goto LABEL_3;
    }
  }
  id v35 = v5;
  uint64_t v16 = (char *)v11[2];
  uint64_t v17 = (v13 - v16) >> 2;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 62) {
    sub_1C494A220();
  }
  uint64_t v19 = v12 - (void)v16;
  if (v19 >> 1 > v18) {
    unint64_t v18 = v19 >> 1;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 62) {
      sub_1C4949AA8();
    }
    CFIndex v21 = operator new(4 * v20);
    CFStringRef v22 = &v21[4 * v17];
    int64_t v23 = &v21[4 * v20];
    *CFStringRef v22 = TokenIDForString;
    uint64_t v14 = (uint64_t)(v22 + 1);
    int64_t v24 = v13 - v16;
    if (v13 == v16) {
      goto LABEL_22;
    }
    goto LABEL_16;
  }
  CFIndex v21 = 0;
  CFStringRef v22 = (_DWORD *)(4 * v17);
  int64_t v23 = 0;
  *(_DWORD *)(4 * v17) = TokenIDForString;
  uint64_t v14 = 4 * v17 + 4;
  int64_t v24 = v13 - v16;
  if (v13 != v16)
  {
LABEL_16:
    unint64_t v25 = v24 - 4;
    if (v25 < 0x2C) {
      goto LABEL_32;
    }
    if ((unint64_t)(v16 - v21) < 0x20) {
      goto LABEL_32;
    }
    uint64_t v26 = (v25 >> 2) + 1;
    uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    BOOL v28 = &v13[-v27];
    CFStringRef v22 = (_DWORD *)((char *)v22 - v27);
    uint64_t v29 = &v21[4 * v17 - 16];
    uint64_t v30 = v13 - 16;
    uint64_t v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *uint64_t v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    uint64_t v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_32:
      do
      {
        int v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--CFStringRef v22 = v33;
      }
      while (v13 != v16);
    }
  }
LABEL_22:
  v11[2] = v22;
  v11[3] = v14;
  v11[4] = v23;
  if (v16) {
    operator delete(v16);
  }
  id v5 = v35;
LABEL_25:
  v11[3] = v14;
}

void sub_1C499FE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C499FE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C499FE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C499FE6C(uint64_t a1, void *a2, uint64_t a3)
{
  CFRange v4 = (char *)a2[5];
  uint64_t v3 = (char *)a2[6];
  id v5 = (char **)(a2 + 5);
  if (v4 != v3)
  {
    uint64_t v8 = a1;
    if (*(void *)(a1 + 64) == a3) {
      goto LABEL_25;
    }
    unint64_t v9 = a2[7];
    if ((unint64_t)v3 < v9)
    {
      *(void *)uint64_t v3 = a3;
      v3 += 8;
LABEL_24:
      a2[6] = v3;
LABEL_25:
      __p = 0;
      p_p = 0;
      uint64_t v111 = 0;
      uint64_t v30 = v3 - v4;
      double v106 = a2;
      if (v3 != v4)
      {
        CFTypeRef v108 = v3;
        if (v30 < 0) {
          sub_1C494A220();
        }
        long long v32 = (char *)operator new((unint64_t)v30 >> 2);
        int v33 = &v32[2 * (v30 >> 3)];
        id v34 = v32;
        id v35 = v108;
        while (1)
        {
          int v37 = *(_DWORD *)(*(void *)(v8 + 40) + 4 * *(void *)v4);
          unsigned int v38 = v37 - 1114112;
          if ((v37 - 1114112) >= 0xFFF00000) {
            __int16 v39 = ((v37 + 67043328) >> 10) - 10240;
          }
          else {
            __int16 v39 = *(_DWORD *)(*(void *)(v8 + 40) + 4 * *(void *)v4);
          }
          if (v38 >= 0xFFF00000) {
            unsigned int v31 = *(_DWORD *)(*(void *)(v8 + 40) + 4 * *(void *)v4) & 0x3FF | 0xFFFFDC00;
          }
          if (v32 < v33)
          {
            *(_WORD *)long long v32 = v39;
            uint64_t v36 = v32 + 2;
            if (v38 < 0xFFF00000) {
              goto LABEL_29;
            }
            goto LABEL_54;
          }
          uint64_t v40 = v32 - v34;
          if (v32 - v34 <= -3) {
            goto LABEL_131;
          }
          uint64_t v41 = v40 >> 1;
          if (v33 - v34 <= (unint64_t)((v40 >> 1) + 1)) {
            uint64_t v42 = v41 + 1;
          }
          else {
            uint64_t v42 = v33 - v34;
          }
          if ((unint64_t)(v33 - v34) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v43 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v43 = v42;
          }
          if (v43)
          {
            if (v43 < 0) {
              goto LABEL_133;
            }
            unsigned int v44 = v31;
            uint64_t v45 = v43;
            unint64_t v46 = operator new(2 * v43);
            id v35 = v108;
            unsigned int v31 = v44;
            uint64_t v43 = v45;
            uint64_t v47 = &v46[2 * v41];
            *(_WORD *)uint64_t v47 = v39;
            uint64_t v36 = v47 + 2;
            int64_t v48 = v32 - v34;
            if (v32 != v34)
            {
LABEL_48:
              unint64_t v49 = v48 - 2;
              if (v49 < 0x5E
                || (unint64_t v61 = (v32 - 2 - v34) & 0xFFFFFFFFFFFFFFFELL,
                    &v46[(v40 & 0xFFFFFFFFFFFFFFFELL) - 2 - v61] > &v46[(v40 & 0xFFFFFFFFFFFFFFFELL) - 2])
                || &v32[-v61 - 2] > v32 - 2
                || v32 - v46 - (v40 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
              {
                int v50 = v32;
                uint64_t v8 = a1;
              }
              else
              {
                uint64_t v62 = (v49 >> 1) + 1;
                unint64_t v63 = 2 * (v62 & 0xFFFFFFFFFFFFFFF0);
                int v50 = &v32[-v63];
                v47 -= v63;
                unint64_t v64 = &v46[2 * v41 - 16];
                char v65 = v32 - 16;
                unint64_t v66 = v62 & 0xFFFFFFFFFFFFFFF0;
                uint64_t v8 = a1;
                do
                {
                  long long v67 = *(_OWORD *)v65;
                  *(v64 - 1) = *((_OWORD *)v65 - 1);
                  _OWORD *v64 = v67;
                  v64 -= 2;
                  v65 -= 32;
                  v66 -= 16;
                }
                while (v66);
                if (v62 == (v62 & 0xFFFFFFFFFFFFFFF0))
                {
LABEL_51:
                  int v33 = &v46[2 * v43];
                  if (!v34) {
                    goto LABEL_53;
                  }
LABEL_52:
                  unsigned int v52 = v31;
                  operator delete(v34);
                  unsigned int v31 = v52;
                  id v35 = v108;
                  goto LABEL_53;
                }
              }
              do
              {
                __int16 v51 = *((_WORD *)v50 - 1);
                v50 -= 2;
                *((_WORD *)v47 - 1) = v51;
                v47 -= 2;
              }
              while (v50 != v34);
              goto LABEL_51;
            }
          }
          else
          {
            unint64_t v46 = 0;
            uint64_t v47 = (char *)(2 * v41);
            *(_WORD *)(2 * v41) = v39;
            uint64_t v36 = (char *)(2 * v41 + 2);
            int64_t v48 = v32 - v34;
            if (v32 != v34) {
              goto LABEL_48;
            }
          }
          uint64_t v8 = a1;
          int v33 = &v46[2 * v43];
          if (v34) {
            goto LABEL_52;
          }
LABEL_53:
          id v34 = v47;
          if (v38 < 0xFFF00000) {
            goto LABEL_29;
          }
LABEL_54:
          if (v36 < v33)
          {
            *(_WORD *)uint64_t v36 = v31;
            v36 += 2;
LABEL_29:
            long long v32 = v36;
            v4 += 8;
            if (v4 == v35) {
              goto LABEL_94;
            }
          }
          else
          {
            uint64_t v53 = v36 - v34;
            if (v36 - v34 < -2)
            {
              long long v32 = v36;
LABEL_131:
              p_p = (void **)v32;
              uint64_t v111 = (uint64_t)v33;
              __p = v34;
              sub_1C494A220();
            }
            uint64_t v54 = v53 >> 1;
            if (v33 - v34 <= (unint64_t)((v53 >> 1) + 1)) {
              uint64_t v55 = v54 + 1;
            }
            else {
              uint64_t v55 = v33 - v34;
            }
            if ((unint64_t)(v33 - v34) >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v56 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v56 = v55;
            }
            if (v56)
            {
              if (v56 < 0)
              {
                long long v32 = v36;
LABEL_133:
                p_p = (void **)v32;
                uint64_t v111 = (uint64_t)v33;
                __p = v34;
                sub_1C4949AA8();
              }
              unsigned int v57 = v31;
              double v58 = operator new(2 * v56);
              uint64_t v8 = a1;
              id v35 = v108;
              unsigned int v31 = v57;
              CFTypeRef v59 = &v58[2 * v54];
              *(_WORD *)CFTypeRef v59 = v57;
              long long v32 = v59 + 2;
              int64_t v60 = v36 - v34;
              if (v36 == v34) {
                goto LABEL_80;
              }
            }
            else
            {
              double v58 = 0;
              CFTypeRef v59 = (char *)(2 * v54);
              *(_WORD *)(2 * v54) = v31;
              long long v32 = (char *)(2 * v54 + 2);
              int64_t v60 = v36 - v34;
              if (v36 == v34) {
                goto LABEL_80;
              }
            }
            unint64_t v68 = v60 - 2;
            if (v68 >= 0x5E)
            {
              unint64_t v72 = (v36 - 2 - v34) & 0xFFFFFFFFFFFFFFFELL;
              if (&v58[(v53 & 0xFFFFFFFFFFFFFFFELL) - 2 - v72] > &v58[(v53 & 0xFFFFFFFFFFFFFFFELL) - 2])
              {
                uint64_t v69 = v36;
              }
              else if (&v36[-v72 - 2] > v36 - 2)
              {
                uint64_t v69 = v36;
              }
              else if (v36 - v58 - (v53 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
              {
                uint64_t v73 = (v68 >> 1) + 1;
                unint64_t v74 = 2 * (v73 & 0xFFFFFFFFFFFFFFF0);
                uint64_t v69 = &v36[-v74];
                v59 -= v74;
                uint64_t v75 = &v58[2 * v54 - 16];
                uint64_t v76 = (long long *)(v36 - 16);
                unint64_t v77 = v73 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  long long v78 = *v76;
                  *(v75 - 1) = *(v76 - 1);
                  _OWORD *v75 = v78;
                  v75 -= 2;
                  v76 -= 2;
                  v77 -= 16;
                }
                while (v77);
                if (v73 == (v73 & 0xFFFFFFFFFFFFFFF0)) {
                  goto LABEL_80;
                }
              }
              else
              {
                uint64_t v69 = v36;
              }
            }
            else
            {
              uint64_t v69 = v36;
            }
            do
            {
              __int16 v70 = *((_WORD *)v69 - 1);
              v69 -= 2;
              *((_WORD *)v59 - 1) = v70;
              v59 -= 2;
            }
            while (v69 != v34);
LABEL_80:
            int v33 = &v58[2 * v56];
            if (v34)
            {
              unsigned int v71 = v31;
              operator delete(v34);
              unsigned int v31 = v71;
              id v35 = v108;
            }
            id v34 = v59;
            v4 += 8;
            if (v4 == v35)
            {
LABEL_94:
              p_p = (void **)v32;
              goto LABEL_96;
            }
          }
        }
      }
      long long v32 = 0;
      id v34 = 0;
      int v33 = 0;
LABEL_96:
      uint64_t v111 = (uint64_t)v33;
      __p = v34;
      CFStringRef v79 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UniChar *)v34, (v32 - v34) >> 1);
      sub_1C499CB34(&v113, v79);
      if (v34) {
        operator delete(v34);
      }
      __p = 0;
      p_p = &__p;
      uint64_t v111 = 0x2020000000;
      uint64_t v112 = 0;
      if (*(double *)(v8 + 16) / 2.30258509 >= -15.654) {
        double v80 = *(double *)(v8 + 16) / 2.30258509;
      }
      else {
        double v80 = -15.654;
      }
      int TokenIDForString = LMLanguageModelGetTokenIDForString();
      if (!TokenIDForString)
      {
        CVNLPWordTokenIDsForString();
LABEL_127:
        v106[6] = v106[5];
        *((double *)v106 + 1) = *(double *)(a1 + 8) * *((double *)p_p + 3) * 2.30258509;
        _Block_object_dispose(&__p, 8);
        if (v113) {
          CFRelease(v113);
        }
        return;
      }
      long long v82 = (void **)(v106 + 2);
      LMLanguageModelConditionalProbability();
      if (v83 < v80) {
        double v83 = v80;
      }
      *((double *)p_p + 3) = v83;
      unint64_t v85 = (char *)v106[3];
      unint64_t v84 = v106[4];
      if ((unint64_t)v85 < v84)
      {
        *(_DWORD *)unint64_t v85 = TokenIDForString;
        v106[3] = v85 + 4;
        goto LABEL_127;
      }
      unint64_t v86 = (char *)*v82;
      uint64_t v87 = v85 - (unsigned char *)*v82;
      uint64_t v88 = v87 >> 2;
      unint64_t v89 = (v87 >> 2) + 1;
      if (v89 >> 62) {
        sub_1C494A220();
      }
      uint64_t v90 = v84 - (void)v86;
      if (v90 >> 1 > v89) {
        unint64_t v89 = v90 >> 1;
      }
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v91 = v89;
      }
      if (v91)
      {
        if (v91 >> 62) {
          sub_1C4949AA8();
        }
        uint64_t v92 = operator new(4 * v91);
        long long v93 = &v92[4 * v88];
        uint64_t v94 = &v92[4 * v91];
        *long long v93 = TokenIDForString;
        uint64_t v95 = (uint64_t)(v93 + 1);
        int64_t v96 = v85 - v86;
        if (v85 == v86) {
          goto LABEL_124;
        }
      }
      else
      {
        uint64_t v92 = 0;
        long long v93 = (_DWORD *)(4 * v88);
        uint64_t v94 = 0;
        *(_DWORD *)(4 * v88) = TokenIDForString;
        uint64_t v95 = 4 * v88 + 4;
        int64_t v96 = v85 - v86;
        if (v85 == v86)
        {
LABEL_124:
          v106[2] = v93;
          v106[3] = v95;
          v106[4] = v94;
          if (v86) {
            operator delete(v86);
          }
          v106[3] = v95;
          goto LABEL_127;
        }
      }
      unint64_t v97 = v96 - 4;
      if (v97 < 0x2C) {
        goto LABEL_141;
      }
      if ((unint64_t)(v85 - v92 - v87) < 0x20) {
        goto LABEL_141;
      }
      uint64_t v98 = (v97 >> 2) + 1;
      uint64_t v99 = 4 * (v98 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v100 = &v85[-v99];
      long long v93 = (_DWORD *)((char *)v93 - v99);
      uint64_t v101 = &v92[4 * v88 - 16];
      CFTypeRef v102 = v85 - 16;
      uint64_t v103 = v98 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v104 = *(_OWORD *)v102;
        *(v101 - 1) = *((_OWORD *)v102 - 1);
        *uint64_t v101 = v104;
        v101 -= 2;
        v102 -= 32;
        v103 -= 8;
      }
      while (v103);
      unint64_t v85 = v100;
      if (v98 != (v98 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_141:
        do
        {
          int v105 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *--long long v93 = v105;
        }
        while (v85 != v86);
      }
      goto LABEL_124;
    }
    int64_t v10 = v3 - v4;
    uint64_t v11 = (v3 - v4) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_1C494A220();
    }
    uint64_t v13 = v9 - (void)v4;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v15 = (char *)a2[6];
      uint64_t v16 = operator new(8 * v14);
      uint64_t v3 = v15;
      uint64_t v17 = &v16[8 * v11];
      *(void *)uint64_t v17 = a3;
      unint64_t v18 = v10 - 8;
      if ((unint64_t)(v10 - 8) < 0x58) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = (char *)(8 * v11);
      *(void *)(8 * v11) = a3;
      unint64_t v18 = v10 - 8;
      if ((unint64_t)(v10 - 8) < 0x58)
      {
LABEL_14:
        uint64_t v19 = v17;
        uint64_t v8 = a1;
        do
        {
LABEL_20:
          uint64_t v28 = *((void *)v3 - 1);
          v3 -= 8;
          *((void *)v19 - 1) = v28;
          v19 -= 8;
        }
        while (v3 != v4);
LABEL_21:
        uint64_t v3 = v17 + 8;
        a2[5] = v19;
        a2[6] = v17 + 8;
        a2[7] = &v16[8 * v14];
        if (v4)
        {
          uint64_t v29 = v17 + 8;
          operator delete(v4);
          uint64_t v3 = v29;
          CFRange v4 = *v5;
        }
        else
        {
          CFRange v4 = v19;
        }
        goto LABEL_24;
      }
    }
    unint64_t v20 = v3 - v16 - v10;
    uint64_t v19 = v17;
    uint64_t v8 = a1;
    if (v20 >= 0x20)
    {
      uint64_t v21 = (v18 >> 3) + 1;
      uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      int64_t v23 = &v3[-v22];
      uint64_t v19 = &v17[-v22];
      int64_t v24 = &v16[8 * v11 - 16];
      unint64_t v25 = v3 - 16;
      uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *int64_t v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 4;
      }
      while (v26);
      uint64_t v3 = v23;
      if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
    }
    goto LABEL_20;
  }
}

void sub_1C49A06BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C49A0714(uint64_t a1, void *a2, int TokenIDForString)
{
  id v34 = a2;
  if (TokenIDForString
    || (objc_msgSend_lowercaseString(v34, v5, v6, v7, v8, v9),
        int64_t v10 = objc_claimAutoreleasedReturnValue(),
        int TokenIDForString = LMLanguageModelGetTokenIDForString(),
        v10,
        TokenIDForString))
  {
    LMLanguageModelConditionalProbability();
    if (v11 < *(double *)(a1 + 56)) {
      double v11 = *(double *)(a1 + 56);
    }
  }
  else
  {
    double v11 = *(double *)(a1 + 56);
  }
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v11
                                                              + *(double *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  unint64_t v12 = *(void **)(a1 + 48);
  unint64_t v14 = (char *)v12[3];
  unint64_t v13 = v12[4];
  if ((unint64_t)v14 < v13)
  {
    *(_DWORD *)unint64_t v14 = TokenIDForString;
    uint64_t v15 = (uint64_t)(v14 + 4);
    goto LABEL_26;
  }
  uint64_t v16 = (char *)v12[2];
  uint64_t v17 = (v14 - v16) >> 2;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 62) {
    sub_1C494A220();
  }
  uint64_t v19 = v13 - (void)v16;
  if (v19 >> 1 > v18) {
    unint64_t v18 = v19 >> 1;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 62) {
      sub_1C4949AA8();
    }
    uint64_t v21 = operator new(4 * v20);
    uint64_t v22 = &v21[4 * v17];
    int64_t v23 = &v21[4 * v20];
    *uint64_t v22 = TokenIDForString;
    uint64_t v15 = (uint64_t)(v22 + 1);
    int64_t v24 = v14 - v16;
    if (v14 == v16) {
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  uint64_t v21 = 0;
  uint64_t v22 = (_DWORD *)(4 * v17);
  int64_t v23 = 0;
  *(_DWORD *)(4 * v17) = TokenIDForString;
  uint64_t v15 = 4 * v17 + 4;
  int64_t v24 = v14 - v16;
  if (v14 != v16)
  {
LABEL_18:
    unint64_t v25 = v24 - 4;
    if (v25 < 0x2C) {
      goto LABEL_34;
    }
    if ((unint64_t)(v16 - v21) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v26 = (v25 >> 2) + 1;
    uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v28 = &v14[-v27];
    uint64_t v22 = (_DWORD *)((char *)v22 - v27);
    uint64_t v29 = &v21[4 * v17 - 16];
    uint64_t v30 = v14 - 16;
    uint64_t v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *uint64_t v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    unint64_t v14 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_34:
      do
      {
        int v33 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--uint64_t v22 = v33;
      }
      while (v14 != v16);
    }
  }
LABEL_24:
  v12[2] = v22;
  uint64_t v12[3] = v15;
  v12[4] = v23;
  if (v16) {
    operator delete(v16);
  }
LABEL_26:
  uint64_t v12[3] = v15;
}

void sub_1C49A0930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49A0948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49A095C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49A0970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49A0984(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(void *)a1 = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 216);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 216) = 0;
  }
  CFRange v4 = *(const void **)(a1 + 208);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 208) = 0;
  }
  id v5 = *(void **)(a1 + 224);
  if (v5)
  {
    *(void *)(a1 + 224) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 376);
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 352);
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 328);
  if (v8)
  {
    *(void *)(a1 + 336) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 304);
  if (v9)
  {
    *(void *)(a1 + 312) = v9;
    operator delete(v9);
  }
  int64_t v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(void *)(a1 + 288) = v10;
    operator delete(v10);
  }
  double v11 = *(void **)(a1 + 256);
  if (v11)
  {
    *(void *)(a1 + 264) = v11;
    operator delete(v11);
  }

  unint64_t v12 = *(void **)(a1 + 80);
  if (v12)
  {
    *(void *)(a1 + 88) = v12;
    operator delete(v12);
  }
  unint64_t v13 = *(void **)(a1 + 56);
  if (v13)
  {
    *(void *)(a1 + 64) = v13;
    operator delete(v13);
  }
  return a1;
}

void *sub_1C49A0A6C(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    uint64_t v6 = a2;
    uint64_t v7 = (void **)result;
    uint64_t v8 = result + 1;
    do
    {
      double result = sub_1C49A0B80(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        uint64_t v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        int64_t v10 = (uint64_t **)result;
        double v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6[4];
        uint64_t v12 = v18[0];
        *double v11 = 0;
        v11[1] = 0;
        v11[2] = v12;
        *int64_t v10 = v11;
        unint64_t v13 = (void *)**v7;
        if (v13)
        {
          *uint64_t v7 = v13;
          unint64_t v14 = *v10;
        }
        else
        {
          unint64_t v14 = v11;
        }
        double result = sub_1C4949FD4(v7[1], v14);
        v7[2] = (void *)((char *)v7[2] + 1);
        uint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            uint64_t v15 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        uint64_t v15 = (void *)v6[2];
        BOOL v16 = *v15 == (void)v6;
        uint64_t v6 = v15;
      }
      while (!v16);
LABEL_3:
      uint64_t v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void *sub_1C49A0B80(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  id v5 = a1 + 1;
  if (a1 + 1 == a2 || (uint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      int64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        int64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v14 = a2;
      do
      {
        int64_t v10 = (void *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        unint64_t v14 = v10;
      }
      while (v15);
    }
    uint64_t v16 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    unint64_t v18 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v19 = v18;
          uint64_t v20 = v18[4];
          if (v16 >= v20) {
            break;
          }
          unint64_t v18 = (void *)*v19;
          id v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        id v5 = v19 + 1;
        unint64_t v18 = (void *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      uint64_t v12 = (void *)a2[1];
      do
      {
        unint64_t v13 = v12;
        uint64_t v12 = (void *)*v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v21 = a2;
      do
      {
        unint64_t v13 = (void *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        uint64_t v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = (void *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            int64_t v23 = v22;
            uint64_t v24 = v22[4];
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = (void *)*v23;
            id v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          id v5 = v23 + 1;
          uint64_t v22 = (void *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t *sub_1C49A0D30(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_10;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    uint64_t v6 = (uint64_t **)v3[2];
    uint64_t v7 = *v6;
    if (*v6 == v3) {
      goto LABEL_6;
    }
LABEL_11:
    v6[1] = (uint64_t *)v2;
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
LABEL_10:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 != v3) {
    goto LABEL_11;
  }
LABEL_6:
  *uint64_t v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    uint64_t v7 = v6[1];
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      double result = v3;
    }
    goto LABEL_16;
  }
  uint64_t v7 = 0;
  double result = (uint64_t *)v2;
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2) {
    goto LABEL_12;
  }
LABEL_16:
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    unint64_t v14 = (uint64_t **)v7[2];
    if (*v14 != v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      uint64_t v16 = (void *)*v7;
      if (*v7) {
        goto LABEL_48;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      uint64_t v20 = (uint64_t *)v7[1];
      void *v14 = v20;
      if (v20) {
        v20[2] = (uint64_t)v14;
      }
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      _OWORD v14[2] = v7;
      if (result == (uint64_t *)v14) {
        double result = v7;
      }
      uint64_t v7 = *v14;
      uint64_t v16 = (void *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((unsigned char *)v16 + 24)) {
          goto LABEL_71;
        }
      }
    }
    uint64_t v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v16 && !*((unsigned char *)v16 + 24))
      {
LABEL_71:
        uint64_t v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = *v21;
        v7[1] = *v21;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        *uint64_t v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        uint64_t v16 = v7;
      }
      uint64_t v27 = (uint64_t *)v21[2];
      *((unsigned char *)v21 + 24) = *((unsigned char *)v27 + 24);
      *((unsigned char *)v27 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v28 = *v27;
      uint64_t v29 = *(void *)(*v27 + 8);
      uint64_t *v27 = v29;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      *(void *)(v28 + 16) = v27[2];
      *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v28;
      *(void *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
LABEL_24:
    uint64_t v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    BOOL v15 = (void *)*v7;
    if (!*v7)
    {
LABEL_38:
      uint64_t v19 = (uint64_t *)v7[1];
      if (v19 && !*((unsigned char *)v19 + 24)) {
        goto LABEL_67;
      }
      *((unsigned char *)v7 + 24) = 0;
      uint64_t v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        uint64_t v12 = result;
LABEL_61:
        *((unsigned char *)v12 + 24) = 1;
        return result;
      }
      if (!*((unsigned char *)v12 + 24)) {
        goto LABEL_61;
      }
      goto LABEL_24;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    uint64_t v17 = v14[1];
    unint64_t v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18) {
      v18[2] = (uint64_t)v14;
    }
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
    *uint64_t v17 = (uint64_t)v14;
    _OWORD v14[2] = v17;
    if (result == (uint64_t *)*v7) {
      double result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
    BOOL v15 = (void *)*v7;
    if (!*v7) {
      goto LABEL_38;
    }
  }
  if (*((unsigned char *)v15 + 24)) {
    goto LABEL_38;
  }
  uint64_t v19 = (uint64_t *)v7[1];
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_67:
    BOOL v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    *uint64_t v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    uint64_t v19 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  unint64_t v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  void v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  *unint64_t v25 = v24;
  *(void *)(v24 + 16) = v25;
  return result;
}

void **sub_1C49A10F4(void **a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      uint64_t v7 = sub_1C49A11E4(a1, v4, &v14, &v13, *a2);
      if (!*v7)
      {
        int v8 = v7;
        uint64_t v9 = operator new(0x20uLL);
        v9[7] = *a2;
        uint64_t v10 = v14;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = v10;
        uint64_t *v8 = (uint64_t)v9;
        uint64_t v11 = (void *)**a1;
        if (v11)
        {
          *a1 = v11;
          uint64_t v9 = (_DWORD *)*v8;
        }
        sub_1C4949FD4(a1[1], (uint64_t *)v9);
        a1[2] = (void *)((char *)a1[2] + 1);
      }
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_1C49A11D0(_Unwind_Exception *a1)
{
  sub_1C49A1374(*v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C49A11E4(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *((_DWORD *)a2 + 7), v6 > a5))
  {
    uint64_t v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v9 = a2;
LABEL_18:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      int v8 = (uint64_t *)*a2;
      do
      {
        uint64_t v9 = v8;
        int v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v9 = (uint64_t *)v13[2];
        BOOL v14 = *v9 == (void)v13;
        BOOL v13 = v9;
      }
      while (v14);
    }
    if (*((_DWORD *)v9 + 7) < a5) {
      goto LABEL_18;
    }
    uint64_t v15 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v16 = (uint64_t *)v15;
          int v17 = *(_DWORD *)(v15 + 28);
          if (v17 <= a5) {
            break;
          }
          uint64_t v15 = *v16;
          int v5 = v16;
          if (!*v16) {
            goto LABEL_22;
          }
        }
        if (v17 >= a5) {
          break;
        }
        int v5 = v16 + 1;
        uint64_t v15 = v16[1];
      }
      while (v15);
    }
    else
    {
      uint64_t v16 = a1 + 1;
    }
LABEL_22:
    *a3 = v16;
    return v5;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  uint64_t v10 = a2[1];
  if (v10)
  {
    uint64_t v11 = (uint64_t *)a2[1];
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      uint64_t v12 = (uint64_t *)v19[2];
      BOOL v14 = *v12 == (void)v19;
      uint64_t v19 = v12;
    }
    while (!v14);
  }
  if (v12 != v5 && *((_DWORD *)v12 + 7) <= a5)
  {
    uint64_t v20 = *v5;
    if (!*v5)
    {
      *a3 = v5;
      return a1 + 1;
    }
    do
    {
      while (1)
      {
        uint64_t v16 = (uint64_t *)v20;
        int v21 = *(_DWORD *)(v20 + 28);
        if (v21 <= a5) {
          break;
        }
        uint64_t v20 = *v16;
        int v5 = v16;
        if (!*v16) {
          goto LABEL_22;
        }
      }
      if (v21 >= a5) {
        break;
      }
      int v5 = v16 + 1;
      uint64_t v20 = v16[1];
    }
    while (v20);
    goto LABEL_22;
  }
  if (v10)
  {
    *a3 = v12;
    return v12;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

void sub_1C49A1374(void *a1)
{
  if (a1)
  {
    sub_1C49A1374(*a1);
    sub_1C49A1374(a1[1]);
    operator delete(a1);
  }
}

uint64_t *sub_1C49A13C0(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    int v6 = a2;
    uint64_t v7 = result;
    int v8 = result + 1;
    do
    {
      double result = sub_1C49A11E4(v7, v8, v18, &v17, *((_DWORD *)v6 + 7));
      if (*result)
      {
        uint64_t v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = result;
        uint64_t v11 = operator new(0x20uLL);
        v11[7] = *((_DWORD *)v6 + 7);
        uint64_t v12 = v18[0];
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v12;
        *uint64_t v10 = (uint64_t)v11;
        BOOL v13 = *(void **)*v7;
        if (v13)
        {
          *uint64_t v7 = (uint64_t)v13;
          BOOL v14 = (uint64_t *)*v10;
        }
        else
        {
          BOOL v14 = (uint64_t *)v11;
        }
        double result = sub_1C4949FD4((uint64_t *)v7[1], v14);
        ++v7[2];
        uint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            uint64_t v15 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        uint64_t v15 = (void *)v6[2];
        BOOL v16 = *v15 == (void)v6;
        int v6 = v15;
      }
      while (!v16);
LABEL_3:
      int v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void sub_1C49A14D0(void *a1)
{
  if (a1)
  {
    sub_1C49A14D0(*a1);
    sub_1C49A14D0(a1[1]);
    sub_1C4999C7C((uint64_t)(a1 + 4), (void *)a1[5]);
    operator delete(a1);
  }
}

void sub_1C49A1528(char *a1)
{
  if (a1)
  {
    sub_1C49A1528(*(void *)a1);
    sub_1C49A1528(*((void *)a1 + 1));

    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

void sub_1C49A15AC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = *(void *)(a1 + 24) + 24 * a2;
  double v5 = *(double *)v4;
  id v6 = *(id *)(v4 + 8);
  uint64_t v7 = *(void *)(v4 + 16);
  if (*(unsigned char *)a1) {
    double v8 = -2147483650.0;
  }
  else {
    double v8 = 2147483650.0;
  }
  id v9 = v6;
  uint64_t v10 = *(void *)(a1 + 24);
  *(double *)uint64_t v10 = v8;
  uint64_t v11 = *(void **)(v10 + 8);
  *(void *)(v10 + 8) = v9;
  id v12 = v9;

  *(void *)(v10 + 16) = v7;
  while (1)
  {
    unint64_t v13 = v2;
    uint64_t v14 = *(void *)(a1 + 24);
    v2 >>= 1;
    uint64_t v15 = v14 + 24 * v2;
    if (!*(unsigned char *)a1) {
      break;
    }
    if (v5 > *(double *)v15) {
      goto LABEL_11;
    }
LABEL_9:
    if (v13 != v2)
    {
      uint64_t v16 = v14 + 24 * v13;
      *(void *)uint64_t v16 = *(void *)v15;
      objc_storeStrong((id *)(v16 + 8), *(id *)(v15 + 8));
      *(void *)(v16 + 16) = *(void *)(v15 + 16);
    }
  }
  if (v5 >= *(double *)v15) {
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v17 = v14 + 24 * v13;
  *(double *)uint64_t v17 = v5;
  unint64_t v18 = *(void **)(v17 + 8);
  *(void *)(v17 + 8) = v12;
  id v19 = v12;

  *(void *)(v17 + 16) = v7;
}

void sub_1C49A16E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v3)
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = *(void *)v4;
    if (v4 != a1)
    {
      objc_storeStrong((id *)(a1 + 8), *(id *)(v4 + 8));
      *(void *)(a1 + 16) = *(void *)(v4 + 16);
    }
    return;
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = *(void *)(v4 + 24);
  if (v4 + 24 != a1)
  {
    objc_storeStrong((id *)(a1 + 8), *(id *)(v4 + 32));
    *(void *)(a1 + 16) = *(void *)(v4 + 40);
    uint64_t v3 = *(void *)(a2 + 16);
    uint64_t v4 = *(void *)(a2 + 24);
  }
  *(void *)(a2 + 16) = v3 - 1;
  if (v3 != 1)
  {
    uint64_t v6 = v4 + 24 * v3;
    *(void *)(v4 + 24) = *(void *)v6;
    objc_storeStrong((id *)(v4 + 32), *(id *)(v6 + 8));
    *(void *)(v4 + 40) = *(void *)(v6 + 16);
    uint64_t v4 = *(void *)(a2 + 24);
  }
  double v7 = *(double *)(v4 + 24);
  id v8 = *(id *)(v4 + 32);
  uint64_t v9 = *(void *)(v4 + 40);
  unint64_t v10 = *(void *)(a2 + 16);
  if (v10 < 2)
  {
    unint64_t v11 = 1;
    goto LABEL_25;
  }
  uint64_t v12 = 1;
  while (1)
  {
    unint64_t v11 = 2 * v12;
    uint64_t v13 = *(void *)(a2 + 24);
    if (2 * v12 < v10) {
      break;
    }
    if (!*(unsigned char *)a2) {
      goto LABEL_21;
    }
LABEL_17:
    double v16 = *(double *)(v13 + 24 * v11);
    if (v16 >= v7) {
      goto LABEL_24;
    }
LABEL_22:
    if (v12 != v11)
    {
      uint64_t v17 = v13 + 24 * v11;
      uint64_t v18 = v13 + 24 * v12;
      *(double *)uint64_t v18 = v16;
      objc_storeStrong((id *)(v18 + 8), *(id *)(v17 + 8));
      *(void *)(v18 + 16) = *(void *)(v17 + 16);
      unint64_t v10 = *(void *)(a2 + 16);
    }
    uint64_t v12 = v11;
    if (v11 > v10 >> 1) {
      goto LABEL_25;
    }
  }
  double v14 = *(double *)(v13 + 24 * (v11 | 1));
  double v15 = *(double *)(v13 + 48 * v12);
  if (*(unsigned char *)a2)
  {
    if (v14 < v15) {
      v11 |= 1uLL;
    }
    goto LABEL_17;
  }
  if (v14 > v15) {
    v11 |= 1uLL;
  }
LABEL_21:
  double v16 = *(double *)(v13 + 24 * v11);
  if (v16 > v7) {
    goto LABEL_22;
  }
LABEL_24:
  unint64_t v11 = v12;
LABEL_25:
  uint64_t v19 = *(void *)(a2 + 24) + 24 * v11;
  *(double *)uint64_t v19 = v7;
  uint64_t v20 = *(void **)(v19 + 8);
  *(void *)(v19 + 8) = v8;
  id v21 = v8;

  *(void *)(v19 + 16) = v9;
  unint64_t v22 = *(void *)(a2 + 16);
  if (*(void *)(a2 + 32) == v22 + 1)
  {
    *(void *)(a2 + 32) = v22;
    if (v22)
    {
      unint64_t v23 = v22 >> 1;
      unint64_t v24 = v22 - 1;
      if (v22 - 1 > v22 >> 1)
      {
        uint64_t v25 = *(void *)(a2 + 24);
        if (*(unsigned char *)a2)
        {
          uint64_t v26 = (double *)(v25 + 24 * v22 - 24);
          do
          {
            if (*v26 > *(double *)(v25 + 24 * v22))
            {
              *(void *)(a2 + 32) = v24;
              unint64_t v22 = v24;
            }
            --v24;
            v26 -= 3;
          }
          while (v24 > v23);
        }
        else
        {
          uint64_t v27 = (double *)(v25 + 24 * v22 - 24);
          do
          {
            if (*v27 < *(double *)(v25 + 24 * v22))
            {
              *(void *)(a2 + 32) = v24;
              unint64_t v22 = v24;
            }
            --v24;
            v27 -= 3;
          }
          while (v24 > v23);
        }
      }
    }
  }
}

uint64_t *sub_1C49A1980(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  double v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        sub_1C4949C24(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    void *v14 = *v25;
LABEL_59:
    *uint64_t v25 = v14;
    goto LABEL_60;
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1C49A1C70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1C49A1C84(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1C494A220();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C4949AA8();
    }
    uint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = &v9[24 * v5];
  unint64_t v11 = &v9[24 * v8];
  *((void *)&v25 + 1) = v11;
  *((void *)v10 + 1) = 0;
  uint64_t v12 = (char **)(v10 + 8);
  *((void *)v10 + 2) = 0;
  *(void *)unint64_t v10 = 0;
  uint64_t v13 = *(const void **)a2;
  int64_t v14 = *(void *)(a2 + 8) - *(void *)a2;
  if (v14)
  {
    if (v14 < 0) {
      sub_1C494A220();
    }
    float v15 = (char *)operator new(v14);
    *(void *)unint64_t v10 = v15;
    *uint64_t v12 = v15;
    float v16 = &v15[8 * (v14 >> 3)];
    *((void *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *uint64_t v12 = v16;
  }
  BOOL v17 = v10 + 24;
  *(void *)&long long v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      unint64_t v18 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((void *)v18 - 1) = *((void *)v3 + 2);
      *(void *)unint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    unint64_t v3 = *a1;
    uint64_t v20 = a1[1];
    *a1 = v10;
    *(_OWORD *)(a1 + 1) = v25;
    BOOL v17 = (char *)v25;
    if (v20 != v3)
    {
      unint64_t v21 = v20;
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        uint8x8_t v22 = v23;
        if (v23)
        {
          *((void *)v20 - 2) = v22;
          operator delete(v22);
        }
        uint64_t v20 = v21;
      }
      while (v21 != v3);
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_1C49A1E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  sub_1C496CD14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C49A1E84(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t), uint64_t a4, int a5)
{
  unint64_t v10 = (int8x16_t *)result;
  while (2)
  {
    unint64_t v11 = v10;
LABEL_3:
    uint64_t v12 = a2;
LABEL_4:
    int v126 = a5;
    while (1)
    {
      unint64_t v10 = v11;
      uint64_t v13 = (char *)v12 - (char *)v11;
      uint64_t v14 = ((char *)v12 - (char *)v11) >> 3;
      if (v6 || !v5)
      {
        switch(v14)
        {
          case 0:
          case 1:
            return result;
          case 2:
            double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v11->i64[0]);
            if (!result) {
              return result;
            }
            uint64_t v77 = v11->i64[0];
            long long v78 = a2;
            v11->i64[0] = a2[-1].i64[1];
            goto LABEL_175;
          case 3:
            char v79 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v11->i64[1], v11->i64[0]);
            double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v11->i64[1]);
            if (v79)
            {
              uint64_t v80 = v11->i64[0];
              if (result)
              {
                v11->i64[0] = a2[-1].i64[1];
                a2[-1].i64[1] = v80;
              }
              else
              {
                v11->i64[0] = v11->i64[1];
                v11->i64[1] = v80;
                double result = ((uint64_t (*)(uint64_t))*a3)(a2[-1].i64[1]);
                if (result)
                {
                  uint64_t v77 = v11->i64[1];
                  long long v78 = a2;
                  v11->i64[1] = a2[-1].i64[1];
LABEL_175:
                  v78[-1].i64[1] = v77;
                }
              }
            }
            else if (result)
            {
              uint64_t v119 = v11->i64[1];
              v11->i64[1] = a2[-1].i64[1];
              a2[-1].i64[1] = v119;
              double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v11->i64[1], v11->i64[0]);
LABEL_164:
              if (result) {
                *unint64_t v11 = vextq_s8(*v11, *v11, 8uLL);
              }
            }
            break;
          case 4:
            return sub_1C49A2DA4(v11, &v11->i64[1], (int8x16_t *)v11[1].i64, &a2[-1].i64[1], a3);
          case 5:
            uint64_t v81 = v11 + 1;
            long long v82 = &v11[1].i64[1];
            sub_1C49A2DA4(v11, &v11->i64[1], (int8x16_t *)v11[1].i64, &v11[1].i64[1], a3);
            double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v11[1].i64[1]);
            if (!result) {
              return result;
            }
            uint64_t v83 = *v82;
            *long long v82 = a2[-1].i64[1];
            a2[-1].i64[1] = v83;
            double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v82, v81->i64[0]);
            if (!result) {
              return result;
            }
            uint64_t v84 = v81->i64[0];
            v81->i64[0] = *v82;
            *long long v82 = v84;
            double result = ((uint64_t (*)(void))*a3)();
            if (!result) {
              return result;
            }
            uint64_t v86 = v11->i64[1];
            uint64_t v85 = v11[1].i64[0];
            uint64_t v87 = v11->i64[0];
            v11->i64[1] = v85;
            v11[1].i64[0] = v86;
            double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v85, v87);
            goto LABEL_164;
          default:
            JUMPOUT(0);
        }
        return result;
      }
      if (v13 <= 191)
      {
        uint64_t v88 = (int8x16_t *)&v11->u64[1];
        BOOL v90 = v11 == v12 || v88 == v12;
        if (a5)
        {
          if (!v90)
          {
            uint64_t v91 = 0;
            uint64_t v92 = (uint64_t *)v11;
            do
            {
              uint64_t v95 = *v92;
              uint64_t v94 = v92[1];
              uint64_t v92 = (uint64_t *)v88;
              double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v94, v95);
              if (result)
              {
                uint64_t v96 = *v92;
                uint64_t v97 = v91;
                do
                {
                  *(uint64_t *)((char *)&v11->i64[1] + v97) = *(uint64_t *)((char *)v11->i64 + v97);
                  if (!v97)
                  {
                    long long v93 = (uint64_t *)v11;
                    goto LABEL_123;
                  }
                  double result = ((uint64_t (*)(uint64_t, void))*a3)(v96, *(uint64_t *)((char *)&v11->i64[-1] + v97));
                  v97 -= 8;
                }
                while ((result & 1) != 0);
                long long v93 = (uint64_t *)((char *)&v11->i64[1] + v97);
LABEL_123:
                *long long v93 = v96;
              }
              uint64_t v88 = (int8x16_t *)(v92 + 1);
              v91 += 8;
            }
            while (v92 + 1 != (uint64_t *)a2);
          }
        }
        else if (!v90)
        {
          do
          {
            uint64_t v121 = v10->i64[0];
            uint64_t v120 = v10->i64[1];
            unint64_t v10 = v88;
            double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v120, v121);
            if (result)
            {
              uint64_t v122 = v10->i64[0];
              float32x2_t v123 = (uint64_t *)v10;
              do
              {
                float32x2_t v124 = v123;
                uint64_t v125 = *--v123;
                *float32x2_t v124 = v125;
                double result = ((uint64_t (*)(uint64_t, void))*a3)(v122, *(v124 - 2));
              }
              while ((result & 1) != 0);
              uint64_t *v123 = v122;
            }
            uint64_t v88 = (int8x16_t *)&v10->u64[1];
          }
          while (&v10->u64[1] != (unint64_t *)a2);
        }
        return result;
      }
      if (!a4)
      {
        if (v11 != v12)
        {
          int64_t v98 = (unint64_t)(v14 - 2) >> 1;
          int64_t v129 = v98;
          do
          {
            if (v129 >= v98)
            {
              uint64_t v100 = (2 * v98) | 1;
              uint64_t v101 = &v10->i64[v100];
              if (2 * v98 + 2 < v14 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v101, v101[1]))
              {
                ++v101;
                uint64_t v100 = 2 * v98 + 2;
              }
              CFTypeRef v102 = &v10->i64[v98];
              double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v101, *v102);
              if ((result & 1) == 0)
              {
                uint64_t v127 = *v102;
                do
                {
                  uint64_t v103 = v101;
                  *CFTypeRef v102 = *v101;
                  if (v129 < v100) {
                    break;
                  }
                  uint64_t v104 = (2 * v100) | 1;
                  uint64_t v101 = &v10->i64[v104];
                  uint64_t v105 = 2 * v100 + 2;
                  if (v105 < v14 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v101, v101[1]))
                  {
                    ++v101;
                    uint64_t v104 = v105;
                  }
                  double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v101, v127);
                  CFTypeRef v102 = v103;
                  uint64_t v100 = v104;
                }
                while (!result);
                uint64_t *v103 = v127;
              }
            }
            BOOL v99 = v98-- <= 0;
          }
          while (!v99);
          uint64_t v106 = (unint64_t)v13 >> 3;
          do
          {
            uint64_t v107 = 0;
            uint64_t v108 = v10->i64[0];
            double v109 = (uint64_t *)v10;
            do
            {
              double v110 = &v109[v107 + 1];
              uint64_t v111 = (2 * v107) | 1;
              uint64_t v112 = 2 * v107 + 2;
              if (v112 < v106)
              {
                double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v109[v107 + 1], v109[v107 + 2]);
                if (result)
                {
                  ++v110;
                  uint64_t v111 = v112;
                }
              }
              *double v109 = *v110;
              double v109 = v110;
              uint64_t v107 = v111;
            }
            while (v111 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
            CFTypeRef v113 = &a2[-1].i64[1];
            BOOL v6 = v110 == (uint64_t *)&a2[-1].u64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
            if (v6)
            {
              *double v110 = v108;
            }
            else
            {
              *double v110 = *v113;
              *CFTypeRef v113 = v108;
              uint64_t v114 = (char *)v110 - (char *)v10 + 8;
              if (v114 >= 9)
              {
                unint64_t v115 = (((unint64_t)v114 >> 3) - 2) >> 1;
                uint64_t v116 = &v10->i64[v115];
                double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v116, *v110);
                if (result)
                {
                  uint64_t v117 = *v110;
                  do
                  {
                    CFTypeRef v118 = v116;
                    *double v110 = *v116;
                    if (!v115) {
                      break;
                    }
                    unint64_t v115 = (v115 - 1) >> 1;
                    uint64_t v116 = &v10->i64[v115];
                    double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v116, v117);
                    double v110 = v118;
                  }
                  while ((result & 1) != 0);
                  *CFTypeRef v118 = v117;
                }
              }
            }
            BOOL v99 = v106-- <= 2;
          }
          while (!v99);
        }
        return result;
      }
      unint64_t v15 = (unint64_t)v14 >> 1;
      float v16 = *a3;
      if ((unint64_t)v13 >= 0x401)
      {
        char v17 = ((uint64_t (*)(uint64_t, uint64_t))v16)(v10->i64[v15], v10->i64[0]);
        int v18 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v12[-1].i64[1], v10->i64[v15]);
        uint64_t v128 = a4;
        if (v17)
        {
          uint64_t v19 = v10->i64[0];
          if (v18)
          {
            v10->i64[0] = v12[-1].i64[1];
            v12[-1].i64[1] = v19;
          }
          else
          {
            v10->i64[0] = v10->i64[v15];
            v10->i64[v15] = v19;
            if ((*a3)(v12[-1].i64[1]))
            {
              uint64_t v28 = v10->i64[v15];
              v10->i64[v15] = v12[-1].i64[1];
              v12[-1].i64[1] = v28;
            }
          }
        }
        else if (v18)
        {
          uint64_t v24 = v10->i64[v15];
          v10->i64[v15] = v12[-1].i64[1];
          v12[-1].i64[1] = v24;
          if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v10->i64[v15], v10->i64[0]))
          {
            uint64_t v25 = v10->i64[0];
            v10->i64[0] = v10->i64[v15];
            v10->i64[v15] = v25;
          }
        }
        unint64_t v29 = v15 - 1;
        uint64_t v30 = v15 - 1;
        char v31 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[v30], v10->i64[1]);
        int v32 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v12[-1].i64[0], v10->i64[v30]);
        if (v31)
        {
          uint64_t v33 = v10->i64[1];
          if (v32)
          {
            v10->i64[1] = v12[-1].i64[0];
            v12[-1].i64[0] = v33;
          }
          else
          {
            v10->i64[1] = v10->i64[v30];
            v10->i64[v30] = v33;
            if ((*a3)(v12[-1].i64[0]))
            {
              uint64_t v37 = v10->i64[v30];
              v10->i64[v30] = v12[-1].i64[0];
              v12[-1].i64[0] = v37;
            }
          }
        }
        else if (v32)
        {
          uint64_t v34 = v10->i64[v30];
          v10->i64[v30] = v12[-1].i64[0];
          v12[-1].i64[0] = v34;
          if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v10->i64[v30], v10->i64[1]))
          {
            uint64_t v35 = v10->i64[1];
            v10->i64[1] = v10->i64[v30];
            v10->i64[v30] = v35;
          }
        }
        unsigned int v38 = v12;
        unint64_t v39 = v15 + 1;
        uint64_t v40 = v15 + 1;
        char v41 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[v40], v10[1].i64[0]);
        int v42 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v38[-2].i64[1], v10->i64[v40]);
        if (v41)
        {
          uint64_t v43 = v10[1].i64[0];
          if (v42)
          {
            v10[1].i64[0] = a2[-2].i64[1];
            a2[-2].i64[1] = v43;
          }
          else
          {
            v10[1].i64[0] = v10->i64[v40];
            v10->i64[v40] = v43;
            if ((*a3)(a2[-2].i64[1]))
            {
              uint64_t v46 = v10->i64[v40];
              v10->i64[v40] = a2[-2].i64[1];
              a2[-2].i64[1] = v46;
            }
          }
        }
        else if (v42)
        {
          uint64_t v44 = v10->i64[v40];
          v10->i64[v40] = a2[-2].i64[1];
          a2[-2].i64[1] = v44;
          if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v10->i64[v40], v10[1].i64[0]))
          {
            uint64_t v45 = v10[1].i64[0];
            v10[1].i64[0] = v10->i64[v40];
            v10->i64[v40] = v45;
          }
        }
        char v47 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[v15], v10->i64[v29]);
        int v48 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[v39], v10->i64[v15]);
        if (v47)
        {
          uint64_t v49 = v10->i64[v29];
          if (v48)
          {
            v10->i64[v29] = v10->i64[v40];
            v10->i64[v40] = v49;
            uint64_t v50 = v10->i64[v15];
          }
          else
          {
            v10->i64[v29] = v10->i64[v15];
            v10->i64[v15] = v49;
            unsigned int v53 = (*a3)(v10->i64[v39]);
            uint64_t v50 = v10->i64[v15];
            if (v53)
            {
              uint64_t v54 = v10->i64[v40];
              v10->i64[v15] = v54;
              v10->i64[v40] = v50;
              uint64_t v50 = v54;
            }
          }
          uint64_t v12 = a2;
        }
        else
        {
          uint64_t v50 = v10->i64[v15];
          uint64_t v12 = a2;
          if (v48)
          {
            v10->i64[v15] = v10->i64[v40];
            v10->i64[v40] = v50;
            int v51 = ((uint64_t (*)(void))*a3)();
            uint64_t v50 = v10->i64[v15];
            if (v51)
            {
              uint64_t v52 = v10->i64[v30];
              v10->i64[v30] = v50;
              v10->i64[v15] = v52;
              uint64_t v50 = v52;
            }
          }
        }
        a5 = v126;
        uint64_t v55 = v10->i64[0];
        v10->i64[0] = v50;
        v10->i64[v15] = v55;
        a4 = v128 - 1;
        uint64_t v23 = v10->i64[0];
        if (v126) {
          goto LABEL_58;
        }
        goto LABEL_57;
      }
      char v20 = ((uint64_t (*)(uint64_t, uint64_t))v16)(v10->i64[0], v10->i64[v15]);
      int v21 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v12[-1].i64[1], v10->i64[0]);
      if (v20)
      {
        uint64_t v22 = v10->i64[v15];
        if (v21)
        {
          v10->i64[v15] = v12[-1].i64[1];
          v12[-1].i64[1] = v22;
          --a4;
          uint64_t v23 = v10->i64[0];
          if (a5) {
            goto LABEL_58;
          }
          goto LABEL_57;
        }
        v10->i64[v15] = v10->i64[0];
        v10->i64[0] = v22;
        if ((*a3)(v12[-1].i64[1]))
        {
          uint64_t v36 = v10->i64[0];
          v10->i64[0] = v12[-1].i64[1];
          v12[-1].i64[1] = v36;
        }
      }
      else if (v21)
      {
        uint64_t v26 = v10->i64[0];
        v10->i64[0] = v12[-1].i64[1];
        v12[-1].i64[1] = v26;
        if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v10->i64[0], v10->i64[v15]))
        {
          uint64_t v27 = v10->i64[v15];
          v10->i64[v15] = v10->i64[0];
          v10->i64[0] = v27;
          --a4;
          uint64_t v23 = v27;
          if (a5) {
            goto LABEL_58;
          }
          goto LABEL_57;
        }
      }
      --a4;
      uint64_t v23 = v10->i64[0];
      if (a5) {
        goto LABEL_58;
      }
LABEL_57:
      char v56 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[-1].i64[1], v23);
      uint64_t v23 = v10->i64[0];
      if ((v56 & 1) == 0)
      {
        double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[0], v12[-1].i64[1]);
        if (result)
        {
          unint64_t v11 = v10;
          do
          {
            uint64_t v70 = v11->i64[1];
            unint64_t v11 = (int8x16_t *)((char *)v11 + 8);
            double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v70);
          }
          while ((result & 1) == 0);
        }
        else
        {
          unsigned int v71 = (int8x16_t *)&v10->u64[1];
          do
          {
            unint64_t v11 = v71;
            if (v71 >= v12) {
              break;
            }
            unsigned int v71 = (int8x16_t *)((char *)v71 + 8);
            double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v11->i64[0]);
          }
          while (!result);
        }
        if (v11 < v12)
        {
          uint64_t v12 = a2;
          do
          {
            uint64_t v72 = v12[-1].i64[1];
            uint64_t v12 = (int8x16_t *)((char *)v12 - 8);
            double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v72);
          }
          while ((result & 1) != 0);
        }
        while (v11 < v12)
        {
          uint64_t v73 = v11->i64[0];
          v11->i64[0] = v12->i64[0];
          v12->i64[0] = v73;
          do
          {
            uint64_t v74 = v11->i64[1];
            unint64_t v11 = (int8x16_t *)((char *)v11 + 8);
          }
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v23, v74));
          do
          {
            uint64_t v75 = v12[-1].i64[1];
            uint64_t v12 = (int8x16_t *)((char *)v12 - 8);
            double result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v75);
          }
          while ((result & 1) != 0);
        }
        uint64_t v76 = &v11[-1].i64[1];
        BOOL v5 = &v11[-1].u64[1] >= (unint64_t *)v10;
        BOOL v6 = &v11[-1].u64[1] == (unint64_t *)v10;
        if (&v11[-1].u64[1] != (unint64_t *)v10) {
          v10->i64[0] = *v76;
        }
        a5 = 0;
        *uint64_t v76 = v23;
        goto LABEL_3;
      }
LABEL_58:
      uint64_t v57 = 0;
      do
        char v58 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[++v57], v23);
      while ((v58 & 1) != 0);
      CFTypeRef v59 = (int8x16_t *)((char *)v10 + v57 * 8);
      int64_t v60 = v12;
      if (v57 == 1)
      {
        int64_t v60 = v12;
        do
        {
          if (v59 >= v60) {
            break;
          }
          uint64_t v62 = v60[-1].i64[1];
          int64_t v60 = (int8x16_t *)((char *)v60 - 8);
        }
        while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v62, v23) & 1) == 0);
      }
      else
      {
        do
        {
          uint64_t v61 = v60[-1].i64[1];
          int64_t v60 = (int8x16_t *)((char *)v60 - 8);
        }
        while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v61, v23));
      }
      if (v59 >= v60)
      {
        unint64_t v68 = &v59[-1].i64[1];
        if (&v59[-1].u64[1] == (unint64_t *)v10) {
          goto LABEL_76;
        }
LABEL_75:
        v10->i64[0] = *v68;
        goto LABEL_76;
      }
      unint64_t v63 = &v10->i64[v57];
      unint64_t v64 = (uint64_t *)v60;
      do
      {
        uint64_t v65 = *v63;
        *unint64_t v63 = *v64;
        uint64_t *v64 = v65;
        do
        {
          uint64_t v66 = v63[1];
          ++v63;
        }
        while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v66, v23) & 1) != 0);
        do
          uint64_t v67 = *--v64;
        while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v67, v23));
      }
      while (v63 < v64);
      unint64_t v68 = v63 - 1;
      uint64_t v12 = a2;
      if (v63 - 1 != (uint64_t *)v10) {
        goto LABEL_75;
      }
LABEL_76:
      *unint64_t v68 = v23;
      if (v59 < v60) {
        goto LABEL_79;
      }
      BOOL v69 = sub_1C49A2A38(v10, v68, a3);
      unint64_t v11 = (int8x16_t *)(v68 + 1);
      double result = sub_1C49A2A38(v68 + 1, v12, a3);
      if (result) {
        break;
      }
      if (!v69)
      {
LABEL_79:
        double result = sub_1C49A1E84(v10, v68, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v11 = (int8x16_t *)(v68 + 1);
        goto LABEL_4;
      }
    }
    a2 = (int8x16_t *)v68;
    if (!v69) {
      continue;
    }
    return result;
  }
}

BOOL sub_1C49A2A38(void *a1, void *a2, unsigned int (**a3)(uint64_t))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      char v9 = ((uint64_t (*)(void, void))*a3)(a1[1], *a1);
      int v10 = ((uint64_t (*)(void, void))*a3)(*(a2 - 1), a1[1]);
      if (v9)
      {
        uint64_t v11 = *a1;
        if (v10)
        {
          *a1 = *(a2 - 1);
          *(a2 - 1) = v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v11;
          if ((*a3)(*(a2 - 1)))
          {
            uint64_t v26 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v26;
          }
        }
      }
      else if (v10)
      {
        uint64_t v24 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v24;
        int v19 = ((uint64_t (*)(void, void))*a3)(a1[1], *a1);
LABEL_17:
        if (v19) {
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 4:
      sub_1C49A2DA4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v12 = a1 + 2;
      uint64_t v13 = a1 + 3;
      sub_1C49A2DA4(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!((unsigned int (*)(void, void))*a3)(*(a2 - 1), a1[3])) {
        return 1;
      }
      uint64_t v14 = *v13;
      void *v13 = *(a2 - 1);
      *(a2 - 1) = v14;
      if (!((unsigned int (*)(void, void))*a3)(*v13, *v12)) {
        return 1;
      }
      uint64_t v15 = *v12;
      *uint64_t v12 = *v13;
      void *v13 = v15;
      if (!((unsigned int (*)(void))*a3)()) {
        return 1;
      }
      uint64_t v17 = a1[1];
      uint64_t v16 = a1[2];
      uint64_t v18 = *a1;
      a1[1] = v16;
      a1[2] = v17;
      int v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v16, v18);
      goto LABEL_17;
    default:
      char v20 = ((uint64_t (*)(void, void))*a3)(a1[1], *a1);
      int v21 = a1 + 2;
      int v22 = ((uint64_t (*)(void, void))*a3)(a1[2], a1[1]);
      if (v20)
      {
        uint64_t v23 = *a1;
        if (v22)
        {
          *a1 = a1[2];
          a1[2] = v23;
        }
        else
        {
          uint64_t v27 = a1[2];
          *a1 = a1[1];
          a1[1] = v23;
          if ((*a3)(v27)) {
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
          }
        }
      }
      else if (v22)
      {
        uint64_t v25 = a1[1];
        a1[1] = a1[2];
        a1[2] = v25;
        if (((unsigned int (*)(void))*a3)()) {
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      uint64_t v28 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v29 = 0;
      int v30 = 0;
      break;
  }
  while (!((unsigned int (*)(void, void))*a3)(*v28, *v21))
  {
LABEL_35:
    int v21 = v28;
    v29 += 8;
    if (++v28 == a2) {
      return 1;
    }
  }
  uint64_t v31 = *v28;
  uint64_t v32 = v29;
  do
  {
    uint64_t v33 = (char *)a1 + v32;
    *(void *)((char *)a1 + v32 + 24) = *(void *)((char *)a1 + v32 + 16);
    if (v32 == -16)
    {
      *a1 = v31;
      if (++v30 != 8) {
        goto LABEL_35;
      }
      return v28 + 1 == a2;
    }
    v32 -= 8;
  }
  while ((((uint64_t (*)(uint64_t, void))*a3)(v31, *((void *)v33 + 1)) & 1) != 0);
  *(void *)((char *)a1 + v32 + 24) = v31;
  if (++v30 != 8) {
    goto LABEL_35;
  }
  return v28 + 1 == a2;
}

uint64_t sub_1C49A2DA4(void *a1, void *a2, void *a3, void *a4, unsigned int (**a5)(void))
{
  char v10 = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
  int v11 = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
  if (v10)
  {
    uint64_t v12 = *a1;
    if (v11)
    {
      *a1 = *a3;
      *a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      if ((*a5)(*a3))
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
      }
    }
  }
  else if (v11)
  {
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((unsigned int (*)(void, void))*a5)(*a2, *a1))
    {
      uint64_t v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
    }
  }
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

void sub_1C49A2FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49A3024(_Unwind_Exception *a1)
{
  sub_1C4999C7C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void StarRegressor::StarRegressor(StarRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  PentagonRegressor::PentagonRegressor((PentagonRegressor *)&v3, a2, a3);
}

void sub_1C49A3154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C49A316C(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "CHStar");
}

void sub_1C49A37AC()
{
  unint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.CoreHandwriting.CHClientStroke", v2);
  uint64_t v1 = (void *)qword_1EA3C90C8;
  qword_1EA3C90C8 = (uint64_t)v0;
}

uint64_t sub_1C49A3810(uint64_t result)
{
  uint64_t v1 = qword_1EA3C9D38;
  *(void *)(*(void *)(result + 32) + 32) = qword_1EA3C9D38;
  qword_1EA3C9D38 = v1 + 1;
  return result;
}

uint64_t sub_1C49A53F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  int v11 = objc_msgSend_strokeIdentifier(a2, v6, v7, v8, v9, v10);
  uint64_t v17 = objc_msgSend_strokeIdentifier(v5, v12, v13, v14, v15, v16);

  uint64_t v21 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v4, v18, (uint64_t)v11, (uint64_t)v17, v19, v20);
  return v21;
}

void sub_1C49A54E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 40);
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(*(void *)(a1 + 32) + 8), a2, (uint64_t)a2, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setStrokeAttributes_(v11, v7, v6, v8, v9, v10);
}

void sub_1C49A5BB4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v6, a3, v7, v8, v9);
  uint64_t v21 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v11, v12, v13, v14, v15);
  if (*(void *)(a1 + 40) && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    id v23 = v5;
    uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v82, (uint64_t)v87, 16, v25);
    if (v26)
    {
      uint64_t v32 = v26;
      uint64_t v33 = *(void *)v83;
      do
      {
        uint64_t v34 = 0;
        do
        {
          if (*(void *)v83 != v33) {
            objc_enumerationMutation(v23);
          }
          uint64_t v35 = *(void **)(a1 + 40);
          int v36 = objc_msgSend_intValue(*(void **)(*((void *)&v82 + 1) + 8 * v34), v27, v28, v29, v30, v31);
          char v41 = objc_msgSend_objectAtIndexedSubscript_(v35, v37, v36, v38, v39, v40);
          uint64_t v46 = objc_msgSend_objectAtIndexedSubscript_(v41, v42, 0, v43, v44, v45);

          if ((objc_msgSend_containsObject_(v21, v47, (uint64_t)v46, v48, v49, v50) & 1) == 0) {
            objc_msgSend_addObject_(v21, v51, (uint64_t)v46, v52, v53, v54);
          }

          ++v34;
        }
        while (v32 != v34);
        uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v27, (uint64_t)&v82, (uint64_t)v87, 16, v31);
      }
      while (v32);
    }
  }
  else
  {
    uint64_t v22 = objc_msgSend_mutableCopy(v5, v16, v17, v18, v19, v20);

    uint64_t v21 = (void *)v22;
  }
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  id v55 = v21;
  uint64_t v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v56, (uint64_t)&v78, (uint64_t)v86, 16, v57);
  if (v58)
  {
    uint64_t v64 = v58;
    uint64_t v65 = *(void *)v79;
    do
    {
      uint64_t v66 = 0;
      do
      {
        if (*(void *)v79 != v65) {
          objc_enumerationMutation(v55);
        }
        uint64_t v67 = *(void **)(a1 + 48);
        int v68 = objc_msgSend_intValue(*(void **)(*((void *)&v78 + 1) + 8 * v66), v59, v60, v61, v62, v63, (void)v78);
        uint64_t v73 = objc_msgSend_objectAtIndexedSubscript_(v67, v69, v68, v70, v71, v72);
        objc_msgSend_addObjectsFromArray_(v73, v74, (uint64_t)v10, v75, v76, v77);

        ++v66;
      }
      while (v64 != v66);
      uint64_t v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v59, (uint64_t)&v78, (uint64_t)v86, 16, v63);
    }
    while (v64);
  }
}

void sub_1C49A5E3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  objc_msgSend_numberWithLong_(NSNumber, a2, 1, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

uint64_t sub_1C49A686C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addPoint_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

void sub_1C49A6EB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C49A6EC4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C49A6FF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::createDrawingFromDeltaFeatures(CoreHandwriting::synthesis *this, MLMultiArray *a2, MLMultiArray *a3)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  id v5 = this;
  uint64_t v6 = a2;
  uint64_t v12 = objc_msgSend_shape(v6, v7, v8, v9, v10, v11);
  uint64_t v17 = objc_msgSend_objectAtIndexedSubscript_(v12, v13, 1, v14, v15, v16);
  uint64_t v23 = objc_msgSend_unsignedLongValue(v17, v18, v19, v20, v21, v22);
  uint64_t v29 = objc_msgSend_shape(v5, v24, v25, v26, v27, v28);
  uint64_t v34 = objc_msgSend_objectAtIndexedSubscript_(v29, v30, 1, v31, v32, v33);
  uint64_t v40 = objc_msgSend_unsignedLongValue(v34, v35, v36, v37, v38, v39);

  if (v23 != v40)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v46 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
    {
      uint64_t v52 = objc_msgSend_shape(v5, v47, v48, v49, v50, v51);
      uint64_t v57 = objc_msgSend_objectAtIndexedSubscript_(v52, v53, 1, v54, v55, v56);
      uint64_t v63 = objc_msgSend_unsignedLongValue(v57, v58, v59, v60, v61, v62);
      BOOL v69 = objc_msgSend_shape(v6, v64, v65, v66, v67, v68);
      uint64_t v74 = objc_msgSend_objectAtIndexedSubscript_(v69, v70, 1, v71, v72, v73);
      int v136 = 134218240;
      uint64_t v137 = (MLMultiArray *)v63;
      __int16 v138 = 2048;
      uint64_t v139 = objc_msgSend_unsignedLongValue(v74, v75, v76, v77, v78, v79);
      _os_log_impl(&dword_1C492D000, v46, OS_LOG_TYPE_FAULT, "Expected dxdy.shape[1]=%lu to match eos.shape[1]=%lu", (uint8_t *)&v136, 0x16u);
    }
  }
  long long v80 = objc_msgSend_shape(v6, v41, v42, v43, v44, v45);
  long long v85 = objc_msgSend_objectAtIndexedSubscript_(v80, v81, 1, v82, v83, v84);
  BOOL v91 = objc_msgSend_unsignedIntValue(v85, v86, v87, v88, v89, v90) < (unint64_t)a3;

  if (v91)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v92 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v92, OS_LOG_TYPE_FAULT))
    {
      int64_t v98 = objc_msgSend_shape(v6, v93, v94, v95, v96, v97);
      uint64_t v103 = objc_msgSend_objectAtIndexedSubscript_(v98, v99, 1, v100, v101, v102);
      uint64_t v109 = objc_msgSend_unsignedLongValue(v103, v104, v105, v106, v107, v108);
      int v136 = 134218240;
      uint64_t v137 = a3;
      __int16 v138 = 2048;
      uint64_t v139 = v109;
      _os_log_impl(&dword_1C492D000, v92, OS_LOG_TYPE_FAULT, "Expected length=%lu to match eos.shape[1]=%lu", (uint8_t *)&v136, 0x16u);
    }
  }
  double v110 = objc_opt_new();
  uint64_t v111 = v5;
  uint64_t v117 = (float *)objc_msgSend_dataPointer(v111, v112, v113, v114, v115, v116);
  CFTypeRef v118 = v6;
  uint64_t v124 = objc_msgSend_dataPointer(v118, v119, v120, v121, v122, v123);
  if (a3)
  {
    uint64_t v130 = (float *)v124;
    double v131 = 0.0;
    double v132 = 0.0;
    do
    {
      float v133 = *v130++;
      double v131 = v131 + *v117;
      double v132 = v132 + v117[1];
      objc_msgSend_addPoint_(v110, v125, v126, v127, v128, v129, v131, v132);
      if (v133 > 0.0) {
        objc_msgSend_endStroke(v110, v125, v126, v127, v128, v129);
      }
      v117 += 2;
      a3 = (MLMultiArray *)((char *)a3 - 1);
    }
    while (a3);
  }
  if (objc_msgSend_pointCount(v110, v125, v126, v127, v128, v129)) {
    id v134 = v110;
  }
  else {
    id v134 = 0;
  }

  return v134;
}

void sub_1C49A768C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::multiArrayWithContent(void *a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  uint64_t v8 = objc_msgSend_initWithShape_dataType_error_(v5, v6, (uint64_t)v4, 65568, 0, v7);
  uint64_t v14 = objc_msgSend_count(v8, v9, v10, v11, v12, v13);
  if (v14 != objc_msgSend_count(v3, v15, v16, v17, v18, v19))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v20 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      uint64_t v40 = objc_msgSend_count(v8, v21, v22, v23, v24, v25);
      __int16 v41 = 2048;
      uint64_t v42 = objc_msgSend_count(v3, v26, v27, v28, v29, v30);
      _os_log_impl(&dword_1C492D000, v20, OS_LOG_TYPE_FAULT, "Size mismatch! shape elements: %ld, vector elements: %ld", buf, 0x16u);
    }
  }
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  void v37[2] = sub_1C49A7974;
  v37[3] = &unk_1E64E17C8;
  id v31 = v3;
  id v38 = v31;
  objc_msgSend_getBytesWithHandler_(v8, v32, (uint64_t)v37, v33, v34, v35);

  return v8;
}

void sub_1C49A7930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49A7974(uint64_t a1, _DWORD *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = *(id *)(a1 + 32);
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v15, (uint64_t)v19, 16, v5);
  if (v11)
  {
    uint64_t v12 = *(void *)v16;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v16 != v12) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend_floatValue(*(void **)(*((void *)&v15 + 1) + 8 * v13), v6, v7, v8, v9, v10, (void)v15);
        *a2++ = v14;
        ++v13;
      }
      while (v11 != v13);
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v15, (uint64_t)v19, 16, v10);
    }
    while (v11);
  }
}

void sub_1C49A7A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::multiArrayWithContent(void *a1, void *a2, float a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  uint64_t v10 = objc_msgSend_initWithShape_dataType_error_(v7, v8, (uint64_t)v6, 65568, 0, v9);
  unint64_t v16 = objc_msgSend_count(v10, v11, v12, v13, v14, v15);
  if (v16 < objc_msgSend_count(v5, v17, v18, v19, v20, v21))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v22 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      uint64_t v47 = objc_msgSend_count(v10, v23, v24, v25, v26, v27);
      __int16 v48 = 2048;
      uint64_t v49 = objc_msgSend_count(v5, v28, v29, v30, v31, v32);
      _os_log_impl(&dword_1C492D000, v22, OS_LOG_TYPE_FAULT, "Size mismatch! shape elements: %ld, vector elements: %ld", buf, 0x16u);
    }
  }
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  void v42[2] = sub_1C49A7CC8;
  v42[3] = &unk_1E64E17F0;
  id v33 = v10;
  id v43 = v33;
  id v34 = v5;
  id v44 = v34;
  float v45 = a3;
  objc_msgSend_getBytesWithHandler_(v33, v35, (uint64_t)v42, v36, v37, v38);
  uint64_t v39 = v44;
  id v40 = v33;

  return v40;
}

void sub_1C49A7C78(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

unint64_t sub_1C49A7CC8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      while (i >= objc_msgSend_count(*(void **)(a1 + 40), v9, v10, v11, v12, v13))
      {
        *(_DWORD *)&a2[4 * i++] = *(_DWORD *)(a1 + 48);
        unint64_t result = objc_msgSend_count(*(void **)(a1 + 32), v15, v16, v17, v18, v19);
        if (i >= result) {
          return result;
        }
      }
      uint64_t v20 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v15, i, v17, v18, v19);
      objc_msgSend_floatValue(v20, v21, v22, v23, v24, v25);
      *(_DWORD *)&a2[4 * i] = v26;

      unint64_t result = objc_msgSend_count(*(void **)(a1 + 32), v27, v28, v29, v30, v31);
    }
  }
  return result;
}

void sub_1C49A7D68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::multiArrayWithFixedValue(void *a1, float a2)
{
  id v3 = a1;
  id v4 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  id v7 = objc_msgSend_initWithShape_dataType_error_(v4, v5, (uint64_t)v3, 65568, 0, v6);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  _OWORD v14[2] = sub_1C49A7E80;
  v14[3] = &unk_1E64E1818;
  id v8 = v7;
  id v15 = v8;
  float v16 = a2;
  objc_msgSend_getBytesWithHandler_(v8, v9, (uint64_t)v14, v10, v11, v12);

  return v8;
}

void sub_1C49A7E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C49A7E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49A7E80(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  if (result)
  {
    uint64_t v14 = (char *)a2;
    do
    {
      *(_DWORD *)uint64_t v14 = *(_DWORD *)(a1 + 40);
      v14 += 4;
      uint64_t result = objc_msgSend_count(*(void **)(a1 + 32), v9, v10, v11, v12, v13);
    }
    while (v14 != &a2[4 * result]);
  }
  return result;
}

float pointDistance(int a1, float64x2_t a2, double a3, float64x2_t a4, double a5)
{
  switch(a1)
  {
    case 0:
      a2.f64[1] = a3;
      a4.f64[1] = a5;
      *(float32x2_t *)&a2.f64[0] = vsub_f32(vcvt_f32_f64(a2), vcvt_f32_f64(a4));
      *(float *)a2.f64 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&a2.f64[0], *(float32x2_t *)&a2.f64[0])));
      break;
    case 1:
      *(float *)a2.f64 = vabdd_f64(a2.f64[0], a4.f64[0]) + vabdd_f64(a3, a5);
      break;
    case 2:
      float v5 = a2.f64[0] - a4.f64[0];
      *(float *)a2.f64 = fabsf(v5);
      break;
    case 3:
      float v6 = a3 - a5;
      *(float *)a2.f64 = fabsf(v6);
      break;
    default:
      LODWORD(a2.f64[0]) = 0;
      break;
  }
  return *(float *)a2.f64;
}

void CHFastGroupingCluster::CHFastGroupingCluster(CHFastGroupingCluster *this)
{
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = (char *)this + 48;
  v3[0] = 0;
  v3[1] = 0;
  unint64_t v2 = v3;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  sub_1C494AC4C((uint64_t)&v2, 0);
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E4F1DAD8];
  *((void *)this + 8) = 0;
}

{
  _OWORD *v1;

  *((void *)this + 6) = 0;
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  uint64_t v1 = (_OWORD *)MEMORY[0x1E4F1DAD8];
  *(void *)this = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = *v1;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
}

uint64_t sub_1C49A8024(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  id v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 56) = 0;
  id v4 = a2 + 1;
  float v5 = (void *)*a2;
  if ((void *)*a2 == a2 + 1) {
    goto LABEL_28;
  }
  do
  {
    float v6 = (unsigned char *)v5[5];
    unint64_t v23 = v5[4];
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v24 = 0;
    id v7 = (unsigned char *)v5[6];
    int64_t v8 = v7 - v6;
    if (v7 == v6)
    {
      uint64_t v9 = 0;
    }
    else
    {
      if (v8 < 0) {
        sub_1C494A220();
      }
      uint64_t v9 = (char *)operator new(v7 - v6);
      uint64_t v24 = v9;
      int v26 = &v9[16 * (v8 >> 4)];
      memcpy(v9, v6, v8);
      uint64_t v25 = &v9[16 * (v8 >> 4)];
    }
    sub_1C49A8454((uint64_t **)a1, &v23);
    if (v9) {
      operator delete(v9);
    }
    uint64_t v11 = (void *)v5[1];
    if (v11)
    {
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        uint64_t v12 = (void *)v5[2];
        BOOL v13 = *v12 == (void)v5;
        float v5 = v12;
      }
      while (!v13);
    }
    float v5 = v12;
  }
  while (v12 != v4);
  unint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
LABEL_28:
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  else
  {
    id v15 = *(uint64_t **)a1;
    float32x2_t v16 = 0;
    if (*(uint64_t **)a1 != v3)
    {
      do
      {
        uint64_t v17 = (float64x2_t *)v15[5];
        for (i = (float64x2_t *)v15[6]; v17 != i; float32x2_t v16 = vcvt_f32_f64(vaddq_f64(v19, vcvtq_f64_f32(v16))))
        {
          float64x2_t v19 = *v17++;
          v10.i32[1] = HIDWORD(v19.f64[0]);
        }
        uint64_t v20 = (uint64_t *)v15[1];
        if (v20)
        {
          do
          {
            uint64_t v21 = v20;
            uint64_t v20 = (uint64_t *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            uint64_t v21 = (uint64_t *)v15[2];
            BOOL v13 = *v21 == (void)v15;
            id v15 = v21;
          }
          while (!v13);
        }
        id v15 = v21;
      }
      while (v21 != v3);
    }
    *(float *)v10.i32 = (float)v14;
    *(float64x2_t *)(a1 + 24) = vcvtq_f64_f32(vdiv_f32(v16, (float32x2_t)vdup_lane_s32(v10, 0)));
  }
  *(void *)(a1 + 64) = 0;
  return a1;
}

void sub_1C49A81FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_1C4999C7C(v12, *(void **)(v11 + 48));
  sub_1C494AC4C(v11, *(void **)(v11 + 8));
  _Unwind_Resume(a1);
}

CHFastGroupingCluster *CHFastGroupingCluster::computeGlobalAnchorPoint(CHFastGroupingCluster *this, double a2, double a3)
{
  unint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    id v4 = *(CHFastGroupingCluster **)this;
    float32x2_t v5 = 0;
    if (*(CHFastGroupingCluster **)this != (CHFastGroupingCluster *)((char *)this + 8))
    {
      do
      {
        float v6 = (float64x2_t *)*((void *)v4 + 5);
        for (i = (float64x2_t *)*((void *)v4 + 6); v6 != i; float32x2_t v5 = vcvt_f32_f64(vaddq_f64(v8, vcvtq_f64_f32(v5))))
        {
          float64x2_t v8 = *v6++;
          HIDWORD(a3) = HIDWORD(v8.f64[0]);
        }
        uint64_t v9 = (CHFastGroupingCluster *)*((void *)v4 + 1);
        if (v9)
        {
          do
          {
            int32x2_t v10 = v9;
            uint64_t v9 = *(CHFastGroupingCluster **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            int32x2_t v10 = (CHFastGroupingCluster *)*((void *)v4 + 2);
            BOOL v11 = *(void *)v10 == (void)v4;
            id v4 = v10;
          }
          while (!v11);
        }
        id v4 = v10;
      }
      while (v10 != (CHFastGroupingCluster *)((char *)this + 8));
    }
    *(float *)&a3 = (float)v3;
    *(float64x2_t *)((char *)this + 24) = vcvtq_f64_f32(vdiv_f32(v5, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0)));
  }
  else
  {
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
  }
  return this;
}

uint64_t *sub_1C49A82E4(uint64_t *result, void *a2)
{
  unint64_t v2 = a2 + 1;
  unint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    id v4 = result;
    float32x2_t v5 = (uint64_t **)(result + 6);
    do
    {
      float v6 = *v5;
      unint64_t v7 = v3[4];
      float64x2_t v8 = v5;
      uint64_t v9 = v5;
      if (*v5)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v9 = (uint64_t **)v6;
            unint64_t v10 = v6[4];
            if (v7 >= v10) {
              break;
            }
            float v6 = *v9;
            float64x2_t v8 = v9;
            if (!*v9) {
              goto LABEL_11;
            }
          }
          if (v10 >= v7) {
            break;
          }
          float v6 = v9[1];
          if (!v6)
          {
            float64x2_t v8 = v9 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        BOOL v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v7;
        *BOOL v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v9;
        const char *v8 = v11;
        uint64_t v12 = *(void *)v4[5];
        if (v12)
        {
          v4[5] = v12;
          BOOL v13 = *v8;
        }
        else
        {
          BOOL v13 = v11;
        }
        uint64_t result = sub_1C4949FD4((uint64_t *)v4[6], v13);
        ++v4[7];
      }
      unint64_t v14 = (void *)v3[1];
      if (v14)
      {
        do
        {
          id v15 = v14;
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          id v15 = (void *)v3[2];
          BOOL v16 = *v15 == (void)v3;
          unint64_t v3 = v15;
        }
        while (!v16);
      }
      unint64_t v3 = v15;
    }
    while (v15 != v2);
  }
  return result;
}

void *CHFastGroupingCluster::getAnchorPoints@<X0>(CHFastGroupingCluster *this@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  return sub_1C49AB0DC(a2, *(void **)this, (void *)this + 1);
}

void sub_1C49A843C(_Unwind_Exception *a1)
{
  sub_1C494AC4C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

float64x2_t sub_1C49A8454(uint64_t **a1, unint64_t *a2)
{
  id v4 = a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  float v6 = a1 + 1;
  unint64_t v7 = (unsigned char *)a2[1];
  float64x2_t v8 = (unsigned char *)a2[2];
  unint64_t v9 = *a2;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v10 = (uint64_t **)v4;
        unint64_t v11 = v4[4];
        if (v9 >= v11) {
          break;
        }
        id v4 = *v10;
        float v6 = v10;
        if (!*v10) {
          goto LABEL_8;
        }
      }
      if (v11 >= v9) {
        break;
      }
      id v4 = v10[1];
      if (!v4)
      {
        float v6 = v10 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unint64_t v10 = a1 + 1;
LABEL_8:
    uint64_t v12 = (uint64_t *)operator new(0x40uLL);
    v12[4] = v9;
    v12[5] = 0;
    v12[6] = 0;
    v12[7] = 0;
    uint64_t v13 = v8 - v7;
    if (v8 != v7)
    {
      if (v13 < 0) {
        sub_1C494A220();
      }
      unint64_t v14 = (char *)operator new(v8 - v7);
      v12[5] = (uint64_t)v14;
      id v15 = &v14[16 * (v13 >> 4)];
      v12[7] = (uint64_t)v15;
      memcpy(v14, v7, v8 - v7);
      v12[6] = (uint64_t)v15;
    }
    *uint64_t v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v10;
    *float v6 = v12;
    BOOL v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      uint64_t v12 = *v6;
    }
    sub_1C4949FD4(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    unint64_t v9 = *a2;
  }
  uint64_t v18 = a1 + 6;
  uint64_t v17 = a1[6];
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        float64x2_t v19 = (uint64_t **)v17;
        unint64_t v20 = v17[4];
        if (v9 >= v20) {
          break;
        }
        uint64_t v17 = *v19;
        uint64_t v18 = v19;
        if (!*v19) {
          goto LABEL_21;
        }
      }
      if (v20 >= v9) {
        break;
      }
      uint64_t v17 = v19[1];
      if (!v17)
      {
        uint64_t v18 = v19 + 1;
        goto LABEL_21;
      }
    }
  }
  else
  {
    float64x2_t v19 = a1 + 6;
LABEL_21:
    uint64_t v21 = (uint64_t *)operator new(0x28uLL);
    v21[4] = v9;
    *uint64_t v21 = 0;
    v21[1] = 0;
    v21[2] = (uint64_t)v19;
    const char *v18 = v21;
    uint64_t v22 = (uint64_t *)*a1[5];
    if (v22)
    {
      a1[5] = v22;
      unint64_t v23 = *v18;
    }
    else
    {
      unint64_t v23 = v21;
    }
    sub_1C4949FD4(a1[6], v23);
    a1[7] = (uint64_t *)((char *)a1[7] + 1);
  }
  uint64_t v24 = (float64x2_t *)a2[1];
  uint64_t v25 = (float64x2_t *)a2[2];
  if (v24 == v25)
  {
    float64x2_t v28 = 0uLL;
  }
  else
  {
    float32x2_t v26 = 0;
    do
    {
      float64x2_t v27 = *v24++;
      float32x2_t v26 = vcvt_f32_f64(vaddq_f64(v27, vcvtq_f64_f32(v26)));
    }
    while (v24 != v25);
    float64x2_t v28 = vcvtq_f64_f32(v26);
  }
  float64x2_t result = vdivq_f64(vmlaq_n_f64(v28, *(float64x2_t *)(a1 + 3), (double)v5), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v5 + ((v8 - v7) >> 4))), 0));
  *(float64x2_t *)(a1 + 3) = result;
  return result;
}

void sub_1C49A8660(_Unwind_Exception *a1)
{
  id v4 = *v2;
  if (*v2)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

double CHFastGroupingCluster::getGlobalAnchorPoint(CHFastGroupingCluster *this)
{
  return *((double *)this + 3);
}

float CHFastGroupingCluster::getDistanceToCluster(void *a1, void *a2, unsigned int a3, int a4)
{
  int v4 = a4;
  if (!a4)
  {
    int v92 = 0;
    uint64_t v13 = (void *)*a1;
    uint64_t v96 = a1 + 1;
    if ((void *)*a1 == a1 + 1)
    {
      float64x2_t v8 = 0;
      id v15 = 0;
      id v40 = (void *)*a2;
      BOOL v99 = a2 + 1;
      if ((void *)*a2 != a2 + 1) {
        goto LABEL_45;
      }
      goto LABEL_123;
    }
    float64x2_t v8 = 0;
    unint64_t v14 = 0;
    id v15 = 0;
LABEL_7:
    BOOL v16 = (uint64_t *)v13[5];
    uint64_t v17 = (uint64_t *)v13[6];
    if (v16 == v17)
    {
      uint64_t v18 = (void *)v13[1];
      if (!v18) {
        goto LABEL_33;
      }
      do
      {
LABEL_31:
        uint64_t v29 = v18;
        uint64_t v18 = (void *)*v18;
      }
      while (v18);
      goto LABEL_6;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v21 = *v16;
        uint64_t v20 = v16[1];
        if (v8 >= v14) {
          break;
        }
        *(void *)float64x2_t v8 = v21;
        *((void *)v8 + 1) = v20;
        float64x2_t v19 = v8 + 16;
        v16 += 2;
        v8 += 16;
        if (v16 == v17) {
          goto LABEL_30;
        }
      }
      uint64_t v22 = (v8 - v15) >> 4;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60) {
        sub_1C494A220();
      }
      if ((v14 - v15) >> 3 > v23) {
        unint64_t v23 = (v14 - v15) >> 3;
      }
      if ((unint64_t)(v14 - v15) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24)
      {
        if (v24 >> 60) {
          sub_1C4949AA8();
        }
        uint64_t v25 = (char *)operator new(16 * v24);
        float32x2_t v26 = &v25[16 * v22];
        *(void *)float32x2_t v26 = v21;
        *((void *)v26 + 1) = v20;
        if (v8 == v15)
        {
LABEL_28:
          float64x2_t v28 = v26;
          unint64_t v14 = &v25[16 * v24];
          float64x2_t v19 = v26 + 16;
          if (!v15) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v25 = 0;
        float32x2_t v26 = (char *)(16 * v22);
        *(void *)float32x2_t v26 = v21;
        *((void *)v26 + 1) = v20;
        if (v8 == v15) {
          goto LABEL_28;
        }
      }
      float64x2_t v27 = v26;
      do
      {
        float64x2_t v28 = v27 - 16;
        *((_OWORD *)v27 - 1) = *((_OWORD *)v8 - 1);
        v8 -= 16;
        v27 -= 16;
      }
      while (v8 != v15);
      unint64_t v14 = &v25[16 * v24];
      float64x2_t v19 = v26 + 16;
      if (!v15) {
        goto LABEL_25;
      }
LABEL_24:
      operator delete(v15);
LABEL_25:
      id v15 = v28;
      v16 += 2;
      float64x2_t v8 = v19;
      if (v16 == v17)
      {
LABEL_30:
        float64x2_t v8 = v19;
        uint64_t v18 = (void *)v13[1];
        if (v18) {
          goto LABEL_31;
        }
        do
        {
LABEL_33:
          uint64_t v29 = (void *)v13[2];
          BOOL v30 = *v29 == (void)v13;
          uint64_t v13 = v29;
        }
        while (!v30);
LABEL_6:
        uint64_t v13 = v29;
        if (v29 != v96) {
          goto LABEL_7;
        }
        id v40 = (void *)*a2;
        BOOL v99 = a2 + 1;
        if (v40 != v99)
        {
LABEL_45:
          uint64_t v12 = 0;
          __int16 v41 = 0;
          unint64_t v11 = 0;
LABEL_47:
          id v43 = (uint64_t *)v40[5];
          uint64_t v42 = (uint64_t *)v40[6];
          if (v43 == v42)
          {
            id v44 = (void *)v40[1];
            if (!v44) {
              goto LABEL_73;
            }
            do
            {
LABEL_71:
              uint64_t v56 = v44;
              id v44 = (void *)*v44;
            }
            while (v44);
            goto LABEL_46;
          }
          while (1)
          {
            while (1)
            {
              uint64_t v47 = *v43;
              uint64_t v46 = v43[1];
              if (v12 >= v41) {
                break;
              }
              *(void *)uint64_t v12 = v47;
              *((void *)v12 + 1) = v46;
              float v45 = v12 + 16;
              v43 += 2;
              v12 += 16;
              if (v43 == v42) {
                goto LABEL_70;
              }
            }
            uint64_t v48 = (v12 - v11) >> 4;
            unint64_t v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 60) {
              sub_1C494A220();
            }
            if ((v41 - v11) >> 3 > v49) {
              unint64_t v49 = (v41 - v11) >> 3;
            }
            if ((unint64_t)(v41 - v11) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v49;
            }
            if (v50)
            {
              uint64_t v51 = v11;
              if (v50 >> 60) {
                sub_1C4949AA8();
              }
              uint64_t v52 = (char *)operator new(16 * v50);
              unint64_t v11 = v51;
              uint64_t v53 = &v52[16 * v48];
              *(void *)uint64_t v53 = v47;
              *((void *)v53 + 1) = v46;
              if (v12 == v51)
              {
LABEL_68:
                uint64_t v55 = v53;
                __int16 v41 = &v52[16 * v50];
                float v45 = v53 + 16;
                if (!v11) {
                  goto LABEL_65;
                }
                goto LABEL_64;
              }
            }
            else
            {
              uint64_t v52 = 0;
              uint64_t v53 = (char *)(16 * v48);
              *(void *)uint64_t v53 = v47;
              *((void *)v53 + 1) = v46;
              if (v12 == v11) {
                goto LABEL_68;
              }
            }
            uint64_t v54 = v53;
            do
            {
              uint64_t v55 = v54 - 16;
              *((_OWORD *)v54 - 1) = *((_OWORD *)v12 - 1);
              v12 -= 16;
              v54 -= 16;
            }
            while (v12 != v11);
            __int16 v41 = &v52[16 * v50];
            float v45 = v53 + 16;
            if (!v11) {
              goto LABEL_65;
            }
LABEL_64:
            operator delete(v11);
LABEL_65:
            unint64_t v11 = v55;
            v43 += 2;
            uint64_t v12 = v45;
            if (v43 == v42)
            {
LABEL_70:
              uint64_t v12 = v45;
              id v44 = (void *)v40[1];
              if (v44) {
                goto LABEL_71;
              }
              do
              {
LABEL_73:
                uint64_t v56 = (void *)v40[2];
                BOOL v30 = *v56 == (void)v40;
                id v40 = v56;
              }
              while (!v30);
LABEL_46:
              id v40 = v56;
              if (v56 != v99) {
                goto LABEL_47;
              }
              if (v15 != v8)
              {
LABEL_77:
                if (v11 != v12)
                {
                  long long v93 = v8;
                  float64x2_t v8 = v15;
                  unsigned int v5 = a3;
                  goto LABEL_79;
                }
                uint64_t v31 = 0;
                uint64_t v32 = 0;
                float64x2_t v8 = v15;
LABEL_37:
                id v33 = v32;
                if (v32 != v31)
                {
                  id v34 = v32 + 1;
                  id v33 = v32;
                  if (v32 + 1 != v31)
                  {
                    float v35 = *v32;
                    id v33 = v32;
                    uint64_t v36 = v32 + 1;
                    do
                    {
                      float v37 = *v36++;
                      float v38 = v37;
                      if (v37 < v35)
                      {
                        float v35 = v38;
                        id v33 = v34;
                      }
                      id v34 = v36;
                    }
                    while (v36 != v31);
                  }
                }
                float v39 = *v33;
                goto LABEL_136;
              }
LABEL_124:
              uint64_t v31 = 0;
              uint64_t v32 = 0;
              goto LABEL_37;
            }
          }
        }
LABEL_123:
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        if (v15 != v8) {
          goto LABEL_77;
        }
        goto LABEL_124;
      }
    }
  }
  if (a4 != 1)
  {
    unint64_t v11 = 0;
    float64x2_t v8 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    goto LABEL_126;
  }
  unsigned int v5 = a3;
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  float64x2_t v8 = (char *)operator new(0x10uLL);
  int v92 = 1;
  *(void *)float64x2_t v8 = v6;
  *((void *)v8 + 1) = v7;
  long long v93 = v8 + 16;
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  unint64_t v11 = (char *)operator new(0x10uLL);
  uint64_t v12 = v11 + 16;
  *(void *)unint64_t v11 = v9;
  *((void *)v11 + 1) = v10;
LABEL_79:
  uint64_t v31 = 0;
  uint64_t v57 = 0;
  uint64_t v32 = 0;
  uint64_t v97 = v5;
  uint64_t v100 = (float64x2_t *)v8;
  uint64_t v95 = v11;
  while (2)
  {
    uint64_t v58 = (float64x2_t *)v11;
    do
    {
      while (1)
      {
        if (v5 <= 3)
        {
          float64x2_t v59 = *v100;
          float64x2_t v60 = *v58;
          switch(v97)
          {
            case 1:
              float64x2_t v65 = vsubq_f64(v59, v60);
              float v62 = fabs(v65.f64[0]) + fabs(v65.f64[1]);
              if (v31 >= v57) {
                goto LABEL_94;
              }
              goto LABEL_82;
            case 2:
              float v63 = vsubq_f64(v59, v60).f64[0];
              float v62 = fabsf(v63);
              if (v31 >= v57) {
                goto LABEL_94;
              }
              goto LABEL_82;
            case 3:
              float v64 = COERCE_DOUBLE(*(void *)&vsubq_f64(v59, v60).f64[1]);
              float v62 = fabsf(v64);
              if (v31 >= v57) {
                goto LABEL_94;
              }
              goto LABEL_82;
            default:
              float32x2_t v61 = vsub_f32(vcvt_f32_f64(v59), vcvt_f32_f64(v60));
              float v62 = sqrtf(vaddv_f32(vmul_f32(v61, v61)));
              if (v31 >= v57) {
                goto LABEL_94;
              }
              goto LABEL_82;
          }
        }
        float v62 = 0.0;
        if (v31 >= v57) {
          break;
        }
LABEL_82:
        *v31++ = v62;
        if (++v58 == (float64x2_t *)v12) {
          goto LABEL_80;
        }
      }
LABEL_94:
      uint64_t v66 = v31 - v32;
      unint64_t v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 62) {
        sub_1C494A220();
      }
      if (((char *)v57 - (char *)v32) >> 1 > v67) {
        unint64_t v67 = ((char *)v57 - (char *)v32) >> 1;
      }
      if ((unint64_t)((char *)v57 - (char *)v32) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v67;
      }
      if (v68)
      {
        if (v68 >> 62) {
          sub_1C4949AA8();
        }
        BOOL v69 = operator new(4 * v68);
        unint64_t v11 = v95;
        uint64_t v70 = (float *)&v69[4 * v66];
        float *v70 = v62;
        uint64_t v71 = (uint64_t)(v70 + 1);
        int64_t v72 = (char *)v31 - (char *)v32;
        if (v31 != v32)
        {
LABEL_103:
          unint64_t v73 = v72 - 4;
          if (v73 < 0xBC
            || (unint64_t v76 = ((char *)(v31 - 1) - (char *)v32) & 0xFFFFFFFFFFFFFFFCLL,
                &v69[(char *)v31 - (char *)v32 - 4 - v76] > &v69[(char *)v31 - (char *)v32 - 4])
            || (float *)((char *)v31 - v76 - 4) > v31 - 1
            || (unint64_t)((char *)v32 - v69) < 0x20)
          {
            uint64_t v74 = v31;
            unsigned int v5 = a3;
          }
          else
          {
            uint64_t v77 = (v73 >> 2) + 1;
            uint64_t v78 = 4 * (v77 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v74 = &v31[v78 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v70 = (float *)((char *)v70 - v78);
            uint64_t v79 = &v69[4 * v66 - 16];
            long long v80 = v31 - 4;
            uint64_t v81 = v77 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v82 = *(_OWORD *)v80;
              *(v79 - 1) = *((_OWORD *)v80 - 1);
              _OWORD *v79 = v82;
              v79 -= 2;
              v80 -= 8;
              v81 -= 8;
            }
            while (v81);
            unsigned int v5 = a3;
            if (v77 == (v77 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_106:
              uint64_t v57 = (float *)&v69[4 * v68];
              if (!v32) {
                goto LABEL_108;
              }
LABEL_107:
              operator delete(v32);
              unint64_t v11 = v95;
              goto LABEL_108;
            }
          }
          do
          {
            int v75 = *((_DWORD *)v74-- - 1);
            *((_DWORD *)v70-- - 1) = v75;
          }
          while (v74 != v32);
          goto LABEL_106;
        }
      }
      else
      {
        BOOL v69 = 0;
        uint64_t v70 = (float *)(4 * v66);
        *(float *)(4 * v66) = v62;
        uint64_t v71 = 4 * v66 + 4;
        int64_t v72 = (char *)v31 - (char *)v32;
        if (v31 != v32) {
          goto LABEL_103;
        }
      }
      unsigned int v5 = a3;
      uint64_t v57 = (float *)&v69[4 * v68];
      if (v32) {
        goto LABEL_107;
      }
LABEL_108:
      uint64_t v32 = v70;
      uint64_t v31 = (float *)v71;
      ++v58;
    }
    while (v58 != (float64x2_t *)v12);
LABEL_80:
    if (++v100 != (float64x2_t *)v93) {
      continue;
    }
    break;
  }
  int v4 = v92;
  if (!v92) {
    goto LABEL_37;
  }
LABEL_126:
  float v39 = 0.0;
  if (v4 == 1)
  {
    if (v32 == v31)
    {
      float v84 = 0.0;
    }
    else
    {
      unint64_t v83 = (char *)v31 - (char *)v32 - 4;
      float v84 = 0.0;
      long long v85 = v32;
      if (v83 < 4) {
        goto LABEL_151;
      }
      uint64_t v86 = (v83 >> 2) + 1;
      long long v85 = &v32[v86 & 0x7FFFFFFFFFFFFFFELL];
      uint64_t v87 = v32 + 1;
      uint64_t v88 = v86 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        float v84 = (float)(v84 + *(v87 - 1)) + *v87;
        v87 += 2;
        v88 -= 2;
      }
      while (v88);
      if (v86 != (v86 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_151:
        do
        {
          float v89 = *v85++;
          float v84 = v84 + v89;
        }
        while (v85 != v31);
      }
    }
    float v39 = v84 / (float)(unint64_t)(v31 - v32);
  }
LABEL_136:
  if (v32)
  {
    uint64_t v90 = v11;
    operator delete(v32);
    unint64_t v11 = v90;
  }
  if (v11) {
    operator delete(v11);
  }
  if (v8) {
    operator delete(v8);
  }
  return v39;
}

void sub_1C49A8F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v25 = a22;
    if (!a22) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v25 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

void CHFastGroupingCluster::mergeCluster(CHFastGroupingCluster *this, const CHFastGroupingCluster *a2)
{
  v16[0] = 0;
  v16[1] = 0;
  id v15 = v16;
  sub_1C49AB0DC(&v15, *(void **)a2, (void *)a2 + 1);
  unint64_t v3 = v15;
  if (v15 != v16)
  {
    do
    {
      int v4 = (unsigned char *)v3[5];
      unint64_t v11 = v3[4];
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      uint64_t v12 = 0;
      unsigned int v5 = (unsigned char *)v3[6];
      int64_t v6 = v5 - v4;
      if (v5 == v4)
      {
        uint64_t v7 = 0;
      }
      else
      {
        if (v6 < 0) {
          sub_1C494A220();
        }
        uint64_t v7 = (char *)operator new(v5 - v4);
        uint64_t v12 = v7;
        unint64_t v14 = &v7[16 * (v6 >> 4)];
        memcpy(v7, v4, v6);
        uint64_t v13 = &v7[16 * (v6 >> 4)];
      }
      sub_1C49A8454((uint64_t **)this, &v11);
      if (v7) {
        operator delete(v7);
      }
      float64x2_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = (void **)v8;
          float64x2_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void **)v3[2];
          BOOL v10 = *v9 == v3;
          unint64_t v3 = v9;
        }
        while (!v10);
      }
      unint64_t v3 = v9;
    }
    while (v9 != v16);
  }
  sub_1C494AC4C((uint64_t)&v15, v16[0]);
}

void sub_1C49A90FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

void sub_1C49A9114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

void sub_1C49A912C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, void *a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1C494AC4C((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t CHFastGroupingCluster::containsStrokeIndex(CHFastGroupingCluster *this, unint64_t a2)
{
  unint64_t v2 = (void *)*((void *)this + 1);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    unint64_t v4 = v2[4];
    if (v4 <= a2) {
      break;
    }
LABEL_3:
    unint64_t v2 = (void *)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (v4 < a2)
  {
    ++v2;
    goto LABEL_3;
  }
  return 1;
}

uint64_t CHFastGroupingCluster::getStrokeIndexes(CHFastGroupingCluster *this)
{
  return (uint64_t)this + 40;
}

void CHFastGroupingCluster::explode(CHFastGroupingCluster *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v2 = (char *)this + 8;
  unint64_t v3 = *(char **)this;
  if (*(CHFastGroupingCluster **)this != (CHFastGroupingCluster *)((char *)this + 8))
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 4);
      int64_t v6 = (unsigned char *)*((void *)v3 + 5);
      uint64_t v30 = v5;
      uint64_t v32 = 0;
      id v33 = 0;
      uint64_t v31 = 0;
      uint64_t v7 = (unsigned char *)*((void *)v3 + 6);
      int64_t v8 = v7 - v6;
      if (v7 == v6)
      {
        BOOL v10 = 0;
        uint64_t v9 = 0;
      }
      else
      {
        if (v8 < 0) {
          sub_1C494A220();
        }
        uint64_t v9 = (char *)operator new(v7 - v6);
        BOOL v10 = &v9[16 * (v8 >> 4)];
        uint64_t v31 = v9;
        id v33 = v10;
        memcpy(v9, v6, v8);
        uint64_t v32 = v10;
      }
      float64x2_t v28 = 0;
      uint64_t v29 = 0;
      float64x2_t v27 = &v28;
      unint64_t v11 = operator new(0x40uLL);
      uint64_t v21 = v11;
      uint64_t v22 = &v28;
      char v23 = 0;
      v11[4] = v5;
      v11[5] = 0;
      v11[6] = 0;
      v11[7] = 0;
      uint64_t v12 = v10 - v9;
      if (v10 != v9)
      {
        if (v12 < 0) {
          sub_1C494A220();
        }
        uint64_t v13 = (char *)operator new(v10 - v9);
        v11[5] = v13;
        unint64_t v14 = &v13[16 * (v12 >> 4)];
        v11[7] = v14;
        memcpy(v13, v9, v10 - v9);
        v11[6] = v14;
      }
      *unint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = &v28;
      float64x2_t v27 = (void **)v11;
      float64x2_t v28 = v11;
      *((unsigned char *)v11 + 24) = 1;
      uint64_t v29 = 1;
      sub_1C49A8024((uint64_t)&v21, &v27);
      unint64_t v15 = *(void *)(a2 + 8);
      if (v15 >= *(void *)(a2 + 16))
      {
        uint64_t v17 = sub_1C49AB30C((void **)a2, (uint64_t)&v21);
      }
      else
      {
        *(void *)(v15 + 16) = 0;
        *(void *)(v15 + 8) = 0;
        *(void *)unint64_t v15 = v15 + 8;
        sub_1C49AB0DC((void *)v15, v21, &v22);
        long long v16 = v24;
        *(void *)(v15 + 48) = 0;
        *(void *)(v15 + 40) = v15 + 48;
        *(_OWORD *)(v15 + 24) = v16;
        *(void *)(v15 + 56) = 0;
        sub_1C499A568((void *)(v15 + 40), v25, v26);
        *(void **)(v15 + 64) = v26[2];
        uint64_t v17 = (char *)(v15 + 72);
        *(void *)(a2 + 8) = v15 + 72;
      }
      *(void *)(a2 + 8) = v17;
      uint64_t v18 = (char *)*((void *)v3 + 1);
      if (v18)
      {
        do
        {
          float64x2_t v19 = v18;
          uint64_t v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          float64x2_t v19 = (char *)*((void *)v3 + 2);
          BOOL v20 = *(void *)v19 == (void)v3;
          unint64_t v3 = v19;
        }
        while (!v20);
      }
      sub_1C4999C7C((uint64_t)&v25, v26[0]);
      sub_1C494AC4C((uint64_t)&v21, v22);
      sub_1C494AC4C((uint64_t)&v27, v28);
      if (v9) {
        operator delete(v9);
      }
      unint64_t v3 = v19;
    }
    while (v19 != v2);
  }
}

void sub_1C49A9418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24)
{
  sub_1C494AC4C(v26, *(void **)(v26 + 8));
  *(void *)(v24 + 8) = v26;
  sub_1C49A94D4((uint64_t)&a14);
  sub_1C494AC4C((uint64_t)&a23, a24);
  if (v25) {
    operator delete(v25);
  }
  sub_1C49A9510((void **)v24);
  _Unwind_Resume(a1);
}

uint64_t sub_1C49A94D4(uint64_t a1)
{
  return a1;
}

void **sub_1C49A9510(void **a1)
{
  unint64_t v2 = *a1;
  if (*a1)
  {
    unint64_t v3 = a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (uint64_t)v3 - 32;
      do
      {
        uint64_t v6 = v5 - 40;
        sub_1C4999C7C(v5, *(void **)(v5 + 8));
        sub_1C494AC4C(v5 - 40, *(void **)(v5 - 32));
        v5 -= 72;
      }
      while ((void *)v6 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

CHFastGroupingCluster *CHFastGroupingCluster::findRoot(CHFastGroupingCluster *this)
{
  do
  {
    uint64_t v1 = this;
    this = (CHFastGroupingCluster *)*((void *)this + 8);
  }
  while (this);
  return v1;
}

uint64_t *CHFastGroupingCluster::unionWithCluster(CHFastGroupingCluster *this, CHFastGroupingCluster *a2)
{
  *((void *)a2 + 8) = this;
  return sub_1C49A82E4((uint64_t *)this, (void *)a2 + 5);
}

BOOL CHFastGroupingCluster::isRoot(CHFastGroupingCluster *this)
{
  return *((void *)this + 8) == 0;
}

uint64_t **sub_1C49A95BC(uint64_t **a1, uint64_t *a2, int a3, int a4)
{
  a1[1] = 0;
  unint64_t v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  a1[3] = 0;
  uint64_t v24 = (void **)(a1 + 3);
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  uint64_t v5 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v6 = 0;
    do
    {
      v28[0] = 0;
      v28[1] = 0;
      *(void *)&long long v27 = v6;
      *((void *)&v27 + 1) = v28;
      sub_1C49AB0DC((void *)&v27 + 1, *(void **)(v5 + 72 * v6), (void *)(v5 + 72 * v6 + 8));
      uint64_t v7 = v5 + 72 * v6;
      long long v29 = *(_OWORD *)(v7 + 24);
      v31[0] = 0;
      v31[1] = 0;
      uint64_t v30 = v31;
      sub_1C499A568(&v30, *(void **)(v7 + 40), (void *)(v7 + 48));
      uint64_t v32 = *(void *)(v5 + 72 * v6 + 64);
      int64_t v8 = (void *)*v4;
      uint64_t v9 = v4;
      BOOL v10 = v4;
      if (*v4)
      {
        while (1)
        {
          while (1)
          {
            BOOL v10 = v8;
            unint64_t v11 = v8[4];
            if ((unint64_t)v27 >= v11) {
              break;
            }
            int64_t v8 = (void *)*v10;
            uint64_t v9 = v10;
            if (!*v10) {
              goto LABEL_12;
            }
          }
          if (v11 >= (unint64_t)v27) {
            break;
          }
          int64_t v8 = (void *)v10[1];
          if (!v8)
          {
            uint64_t v9 = v10 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v12 = operator new(0x70uLL);
        id v33 = v12;
        id v34 = v4;
        char v35 = 0;
        uint64_t v13 = (void *)*((void *)&v27 + 1);
        v12[4] = v27;
        v12[6] = 0;
        v12[5] = v12 + 6;
        v12[7] = 0;
        sub_1C49AB0DC(v12 + 5, v13, v28);
        v12[11] = 0;
        *((_OWORD *)v12 + 4) = v29;
        v12[12] = 0;
        v12[10] = v12 + 11;
        sub_1C499A568(v12 + 10, v30, v31);
        v12[13] = v32;
        *uint64_t v12 = 0;
        v12[1] = 0;
        v12[2] = v10;
        *uint64_t v9 = v12;
        unint64_t v14 = (uint64_t *)**a1;
        if (v14)
        {
          *a1 = v14;
          uint64_t v12 = (void *)*v9;
        }
        sub_1C4949FD4(a1[1], v12);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      sub_1C4999C7C((uint64_t)&v30, v31[0]);
      sub_1C494AC4C((uint64_t)&v27 + 8, v28[0]);
      ++v6;
      uint64_t v5 = *a2;
    }
    while (v6 < 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  }
  *((_DWORD *)a1 + 12) = a3;
  *((_DWORD *)a1 + 13) = a4;
  CHFastGroupingClusters::computeDistanceMatrix(a1, (char **)&v27);
  unint64_t v15 = (uint64_t *)*v24;
  if (*v24)
  {
    long long v16 = a1[4];
    uint64_t v17 = *v24;
    if (v16 != v15)
    {
      uint64_t v18 = a1[4];
      do
      {
        BOOL v20 = (void *)*(v18 - 3);
        v18 -= 3;
        float64x2_t v19 = v20;
        if (v20)
        {
          *(v16 - 2) = (uint64_t)v19;
          operator delete(v19);
        }
        long long v16 = v18;
      }
      while (v18 != v15);
      uint64_t v17 = *v24;
    }
    a1[4] = v15;
    operator delete(v17);
    *uint64_t v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
  }
  *(_OWORD *)(a1 + 3) = v27;
  a1[5] = v28[0];
  return a1;
}

void sub_1C49A98A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  long long v16 = *(void **)(a15 + 80);
  if (v16)
  {
    *(void *)(a15 + 88) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *a10;
  if (*a10)
  {
    *(void *)(a15 + 64) = v17;
    operator delete(v17);
  }
  sub_1C496B66C(a12);
  sub_1C49AB640(a15, *(void **)(a15 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1C49A9958(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  sub_1C4999C7C(a1 + 48, *(void **)(a1 + 56));
  sub_1C494AC4C(v2, *(void **)(a1 + 16));
  return a1;
}

void CHFastGroupingClusters::computeDistanceMatrix(uint64_t **this@<X0>, char **a2@<X8>)
{
  uint64_t v2 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v3 = this + 7;
  this[8] = this[7];
  uint64_t v106 = this + 10;
  this[11] = this[10];
  unint64_t v4 = (unint64_t)this[2];
  LODWORD(v112) = 2139095039;
  if (!v4) {
    return;
  }
  sub_1C49AB714((uint64_t)(this + 7), v4, (const float *)&v112);
  unint64_t v6 = (unint64_t)this[2];
  uint64_t v7 = this[10];
  int64_t v8 = this[11];
  uint64_t v112 = -1;
  unint64_t v9 = v8 - v7;
  if (v6 <= v9)
  {
    if (v6 < v9) {
      this[11] = &v7[v6];
    }
  }
  else
  {
    sub_1C49AB988((uint64_t)v106, v6 - v9, &v112);
    unint64_t v6 = (unint64_t)this[2];
  }
  uint64_t v109 = v2;
  if (v6 >= 2)
  {
    unint64_t v16 = 0;
    uint64_t v17 = this + 1;
    uint64_t v103 = v2 + 2;
    float v18 = 3.4028e38;
    uint64_t v107 = -1;
    uint64_t v108 = -1;
    while (1)
    {
      if (v6 >> 62) {
        sub_1C494A220();
      }
      BOOL v20 = (float *)operator new(4 * v6);
      double v110 = v20;
      memset_pattern16(v20, &unk_1C4C3A670, 4 * v6);
      uint64_t v111 = (char *)&v20[v6];
      if (v16)
      {
        unint64_t v21 = 0;
        uint64_t v22 = -1;
        float v23 = 3.4028e38;
        while (1)
        {
          uint64_t v24 = *v17;
          uint64_t v25 = this + 1;
          uint64_t v26 = this + 1;
          if (*v17)
          {
            long long v27 = *v17;
            while (1)
            {
              while (1)
              {
                uint64_t v26 = (uint64_t **)v27;
                unint64_t v28 = v27[4];
                if (v16 >= v28) {
                  break;
                }
                long long v27 = *v26;
                uint64_t v25 = v26;
                if (!*v26) {
                  goto LABEL_26;
                }
              }
              if (v28 >= v16) {
                break;
              }
              long long v27 = v26[1];
              if (!v27)
              {
                uint64_t v25 = v26 + 1;
                goto LABEL_26;
              }
            }
            long long v29 = v26;
            id v44 = this + 1;
            float v45 = (uint64_t *)(this + 1);
            if (v24) {
              goto LABEL_55;
            }
          }
          else
          {
LABEL_26:
            long long v29 = operator new(0x70uLL);
            v29[12] = 0;
            v29[13] = 0;
            v29[11] = 0;
            v29[10] = v29 + 11;
            v29[6] = 0;
            v29[7] = 0;
            v29[4] = v16;
            v29[5] = v29 + 6;
            *((_OWORD *)v29 + 4) = *MEMORY[0x1E4F1DAD8];
            *long long v29 = 0;
            v29[1] = 0;
            v29[2] = v26;
            *uint64_t v25 = v29;
            uint64_t v30 = (uint64_t *)**this;
            uint64_t v31 = v29;
            if (v30)
            {
              *this = v30;
              uint64_t v31 = *v25;
            }
            uint64_t v32 = *v17;
            BOOL v33 = v31 == *v17;
            *((unsigned char *)v31 + 24) = v33;
            if (!v33)
            {
              do
              {
                uint64_t v34 = v31[2];
                if (*(unsigned char *)(v34 + 24)) {
                  break;
                }
                char v35 = *(uint64_t **)(v34 + 16);
                uint64_t v36 = *v35;
                if (*v35 == v34)
                {
                  uint64_t v39 = v35[1];
                  if (!v39 || (v40 = *(unsigned __int8 *)(v39 + 24), float v37 = (unsigned char *)(v39 + 24), v40))
                  {
                    if (*(uint64_t **)v34 == v31)
                    {
                      *(unsigned char *)(v34 + 24) = 1;
                      *((unsigned char *)v35 + 24) = 0;
                      uint64_t v43 = *(void *)(v34 + 8);
                      uint64_t *v35 = v43;
                      if (v43) {
                        goto LABEL_43;
                      }
                    }
                    else
                    {
                      __int16 v41 = *(uint64_t **)(v34 + 8);
                      uint64_t v42 = *v41;
                      *(void *)(v34 + 8) = *v41;
                      if (v42)
                      {
                        *(void *)(v42 + 16) = v34;
                        char v35 = *(uint64_t **)(v34 + 16);
                      }
                      v41[2] = (uint64_t)v35;
                      *(void *)(*(void *)(v34 + 16) + 8 * (**(void **)(v34 + 16) != v34)) = v41;
                      *__int16 v41 = v34;
                      *(void *)(v34 + 16) = v41;
                      char v35 = (uint64_t *)v41[2];
                      uint64_t v34 = *v35;
                      *((unsigned char *)v41 + 24) = 1;
                      *((unsigned char *)v35 + 24) = 0;
                      uint64_t v43 = *(void *)(v34 + 8);
                      uint64_t *v35 = v43;
                      if (v43) {
LABEL_43:
                      }
                        *(void *)(v43 + 16) = v35;
                    }
                    *(void *)(v34 + 16) = v35[2];
                    *(void *)(v35[2] + 8 * (*(void *)v35[2] != (void)v35)) = v34;
                    *(void *)(v34 + 8) = v35;
LABEL_51:
                    v35[2] = v34;
                    break;
                  }
                }
                else if (!v36 || (v38 = *(unsigned __int8 *)(v36 + 24), float v37 = (unsigned char *)(v36 + 24), v38))
                {
                  if (*(uint64_t **)v34 == v31)
                  {
                    uint64_t v64 = v31[1];
                    *(void *)uint64_t v34 = v64;
                    if (v64)
                    {
                      *(void *)(v64 + 16) = v34;
                      char v35 = *(uint64_t **)(v34 + 16);
                    }
                    v31[2] = (uint64_t)v35;
                    *(void *)(*(void *)(v34 + 16) + 8 * (**(void **)(v34 + 16) != v34)) = v31;
                    v31[1] = v34;
                    *(void *)(v34 + 16) = v31;
                    char v35 = (uint64_t *)v31[2];
                    *((unsigned char *)v31 + 24) = 1;
                    *((unsigned char *)v35 + 24) = 0;
                    uint64_t v34 = v35[1];
                    uint64_t v46 = *(uint64_t **)v34;
                    v35[1] = *(void *)v34;
                    if (v46) {
LABEL_49:
                    }
                      v46[2] = (uint64_t)v35;
                  }
                  else
                  {
                    *(unsigned char *)(v34 + 24) = 1;
                    *((unsigned char *)v35 + 24) = 0;
                    uint64_t v34 = v35[1];
                    uint64_t v46 = *(uint64_t **)v34;
                    v35[1] = *(void *)v34;
                    if (v46) {
                      goto LABEL_49;
                    }
                  }
                  *(void *)(v34 + 16) = v35[2];
                  *(void *)(v35[2] + 8 * (*(void *)v35[2] != (void)v35)) = v34;
                  *(void *)uint64_t v34 = v35;
                  goto LABEL_51;
                }
                *(unsigned char *)(v34 + 24) = 1;
                uint64_t v31 = v35;
                *((unsigned char *)v35 + 24) = v35 == v32;
                *float v37 = 1;
              }
              while (v35 != v32);
            }
            uint64_t v24 = this[1];
            this[2] = (uint64_t *)((char *)this[2] + 1);
            id v44 = this + 1;
            float v45 = (uint64_t *)(this + 1);
            if (v24)
            {
              while (1)
              {
LABEL_55:
                while (1)
                {
                  float v45 = v24;
                  unint64_t v47 = v24[4];
                  if (v21 >= v47) {
                    break;
                  }
                  uint64_t v24 = (uint64_t *)*v45;
                  id v44 = (uint64_t **)v45;
                  if (!*v45) {
                    goto LABEL_59;
                  }
                }
                if (v47 >= v21) {
                  break;
                }
                uint64_t v24 = (uint64_t *)v45[1];
                if (!v24)
                {
                  id v44 = (uint64_t **)(v45 + 1);
                  goto LABEL_59;
                }
              }
              uint64_t v48 = v45;
              goto LABEL_85;
            }
          }
LABEL_59:
          uint64_t v48 = operator new(0x70uLL);
          v48[12] = 0;
          v48[13] = 0;
          v48[11] = 0;
          v48[10] = v48 + 11;
          v48[6] = 0;
          v48[7] = 0;
          v48[4] = v21;
          v48[5] = v48 + 6;
          *((_OWORD *)v48 + 4) = *MEMORY[0x1E4F1DAD8];
          *uint64_t v48 = 0;
          v48[1] = 0;
          v48[2] = v45;
          *id v44 = v48;
          unint64_t v49 = (uint64_t *)**this;
          unint64_t v50 = v48;
          if (v49)
          {
            *this = v49;
            unint64_t v50 = *v44;
          }
          uint64_t v51 = *v17;
          BOOL v33 = v50 == *v17;
          *((unsigned char *)v50 + 24) = v33;
          if (!v33)
          {
            do
            {
              uint64_t v52 = v50[2];
              if (*(unsigned char *)(v52 + 24)) {
                break;
              }
              uint64_t v53 = *(uint64_t **)(v52 + 16);
              uint64_t v54 = *v53;
              if (*v53 == v52)
              {
                uint64_t v57 = v53[1];
                if (!v57 || (int v58 = *(unsigned __int8 *)(v57 + 24), v55 = (unsigned char *)(v57 + 24), v58))
                {
                  if (*(uint64_t **)v52 == v50)
                  {
                    *(unsigned char *)(v52 + 24) = 1;
                    *((unsigned char *)v53 + 24) = 0;
                    uint64_t v61 = *(void *)(v52 + 8);
                    *uint64_t v53 = v61;
                    if (v61) {
                      goto LABEL_76;
                    }
                  }
                  else
                  {
                    float64x2_t v59 = *(uint64_t **)(v52 + 8);
                    uint64_t v60 = *v59;
                    *(void *)(v52 + 8) = *v59;
                    if (v60)
                    {
                      *(void *)(v60 + 16) = v52;
                      uint64_t v53 = *(uint64_t **)(v52 + 16);
                    }
                    v59[2] = (uint64_t)v53;
                    *(void *)(*(void *)(v52 + 16) + 8 * (**(void **)(v52 + 16) != v52)) = v59;
                    uint64_t *v59 = v52;
                    *(void *)(v52 + 16) = v59;
                    uint64_t v53 = (uint64_t *)v59[2];
                    uint64_t v52 = *v53;
                    *((unsigned char *)v59 + 24) = 1;
                    *((unsigned char *)v53 + 24) = 0;
                    uint64_t v61 = *(void *)(v52 + 8);
                    *uint64_t v53 = v61;
                    if (v61) {
LABEL_76:
                    }
                      *(void *)(v61 + 16) = v53;
                  }
                  *(void *)(v52 + 16) = v53[2];
                  *(void *)(v53[2] + 8 * (*(void *)v53[2] != (void)v53)) = v52;
                  *(void *)(v52 + 8) = v53;
LABEL_83:
                  v53[2] = v52;
                  break;
                }
              }
              else if (!v54 || (int v56 = *(unsigned __int8 *)(v54 + 24), v55 = (unsigned char *)(v54 + 24), v56))
              {
                if (*(uint64_t **)v52 == v50)
                {
                  uint64_t v65 = v50[1];
                  *(void *)uint64_t v52 = v65;
                  if (v65)
                  {
                    *(void *)(v65 + 16) = v52;
                    uint64_t v53 = *(uint64_t **)(v52 + 16);
                  }
                  v50[2] = (uint64_t)v53;
                  *(void *)(*(void *)(v52 + 16) + 8 * (**(void **)(v52 + 16) != v52)) = v50;
                  v50[1] = v52;
                  *(void *)(v52 + 16) = v50;
                  uint64_t v53 = (uint64_t *)v50[2];
                  *((unsigned char *)v50 + 24) = 1;
                  *((unsigned char *)v53 + 24) = 0;
                  uint64_t v52 = v53[1];
                  float v62 = *(uint64_t **)v52;
                  v53[1] = *(void *)v52;
                  if (v62) {
LABEL_81:
                  }
                    uint64_t v62[2] = (uint64_t)v53;
                }
                else
                {
                  *(unsigned char *)(v52 + 24) = 1;
                  *((unsigned char *)v53 + 24) = 0;
                  uint64_t v52 = v53[1];
                  float v62 = *(uint64_t **)v52;
                  v53[1] = *(void *)v52;
                  if (v62) {
                    goto LABEL_81;
                  }
                }
                *(void *)(v52 + 16) = v53[2];
                *(void *)(v53[2] + 8 * (*(void *)v53[2] != (void)v53)) = v52;
                *(void *)uint64_t v52 = v53;
                goto LABEL_83;
              }
              *(unsigned char *)(v52 + 24) = 1;
              unint64_t v50 = v53;
              *((unsigned char *)v53 + 24) = v53 == v51;
              unsigned char *v55 = 1;
            }
            while (v53 != v51);
          }
          this[2] = (uint64_t *)((char *)this[2] + 1);
LABEL_85:
          float DistanceToCluster = CHFastGroupingCluster::getDistanceToCluster(v29 + 5, v48 + 5, *((_DWORD *)this + 12), *((_DWORD *)this + 13));
          BOOL v20 = v110;
          v110[v21] = DistanceToCluster;
          if (DistanceToCluster < v23)
          {
            if (DistanceToCluster < v18)
            {
              uint64_t v107 = v21;
              uint64_t v108 = v16;
              float v18 = DistanceToCluster;
            }
            float v23 = DistanceToCluster;
            uint64_t v22 = v21;
          }
          if (++v21 == v16) {
            goto LABEL_102;
          }
        }
      }
      uint64_t v22 = -1;
      float v23 = 3.4028e38;
LABEL_102:
      *(float *)(*v3 + 4 * v16) = v23;
      *(void *)(*v106 + 8 * v16) = v22;
      unint64_t v67 = v109[1];
      unint64_t v66 = (unint64_t)v109[2];
      if ((unint64_t)v67 >= v66)
      {
        uint64_t v70 = *v109;
        unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((v67 - *v109) >> 3);
        unint64_t v72 = v71 + 1;
        if (v71 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1C494A220();
        }
        unint64_t v73 = v111;
        unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (void)v70) >> 3);
        if (2 * v74 > v72) {
          unint64_t v72 = 2 * v74;
        }
        if (v74 >= 0x555555555555555) {
          unint64_t v75 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v75 = v72;
        }
        uint64_t v115 = v103;
        if (v75)
        {
          if (v75 > 0xAAAAAAAAAAAAAAALL) {
            sub_1C4949AA8();
          }
          unint64_t v76 = (char *)operator new(24 * v75);
          unint64_t v73 = v111;
        }
        else
        {
          unint64_t v76 = 0;
        }
        uint64_t v112 = (uint64_t)v76;
        uint64_t v113 = &v76[24 * v71];
        uint64_t v78 = v113;
        *((void *)v113 + 1) = 0;
        uint64_t v104 = &v76[24 * v75];
        uint64_t v105 = (char **)(v78 + 8);
        *(void *)&long long v114 = &v76[24 * v71];
        *((void *)&v114 + 1) = v104;
        uint64_t v77 = (char *)v114;
        *(void *)(v114 + 16) = 0;
        *(void *)uint64_t v77 = 0;
        int64_t v79 = v73 - (char *)v20;
        if (v73 != (char *)v20)
        {
          if (v79 < 0) {
            sub_1C494A220();
          }
          long long v80 = (char *)operator new(v73 - (char *)v20);
          *(void *)uint64_t v77 = v80;
          *((void *)v77 + 2) = &v80[4 * (v79 >> 2)];
          uint64_t v81 = &v80[4 * (v79 >> 2)];
          memcpy(v80, v20, v79);
          *uint64_t v105 = v81;
        }
        long long v82 = v77 + 24;
        *(void *)&long long v114 = v77 + 24;
        if (v67 == v70)
        {
          *uint64_t v109 = v77;
          v109[1] = v82;
          v109[2] = v104;
        }
        else
        {
          do
          {
            unint64_t v83 = v77;
            *((void *)v77 - 2) = 0;
            *((void *)v77 - 1) = 0;
            long long v84 = *(_OWORD *)(v67 - 24);
            v67 -= 24;
            *(_OWORD *)(v77 - 24) = v84;
            v77 -= 24;
            *((void *)v83 - 1) = *((void *)v67 + 2);
            *(void *)unint64_t v67 = 0;
            *((void *)v67 + 1) = 0;
            *((void *)v67 + 2) = 0;
          }
          while (v67 != v70);
          unint64_t v67 = *v109;
          long long v85 = v109[1];
          *uint64_t v109 = v77;
          uint64_t v86 = (char *)v114;
          *(_OWORD *)(v109 + 1) = v114;
          long long v82 = v86;
          if (v85 != v67)
          {
            uint64_t v87 = v85;
            do
            {
              float v89 = (void *)*((void *)v87 - 3);
              v87 -= 24;
              uint64_t v88 = v89;
              if (v89)
              {
                *((void *)v85 - 2) = v88;
                operator delete(v88);
              }
              long long v85 = v87;
            }
            while (v87 != v67);
          }
        }
        if (v67) {
          operator delete(v67);
        }
        BOOL v20 = v110;
        v109[1] = v82;
        if (!v110) {
          goto LABEL_13;
        }
      }
      else
      {
        *(void *)unint64_t v67 = 0;
        *((void *)v67 + 1) = 0;
        *((void *)v67 + 2) = 0;
        int64_t v68 = v111 - (char *)v20;
        if (v111 != (char *)v20)
        {
          if (v68 < 0) {
            sub_1C494A220();
          }
          BOOL v69 = (char *)operator new(v111 - (char *)v20);
          *(void *)unint64_t v67 = v69;
          *((void *)v67 + 1) = v69;
          float64x2_t v19 = &v69[4 * (v68 >> 2)];
          *((void *)v67 + 2) = v19;
          memcpy(v69, v20, v68);
          *((void *)v67 + 1) = v19;
        }
        v109[1] = v67 + 24;
      }
      operator delete(v20);
LABEL_13:
      ++v16;
      unint64_t v6 = (unint64_t)this[2];
      if (v16 >= v6)
      {
        this[13] = (uint64_t *)v108;
        this[14] = (uint64_t *)v107;
        *((float *)this + 30) = v18;
        return;
      }
    }
  }
  if (v6)
  {
    BOOL v10 = operator new(4uLL);
    unint64_t v11 = v10;
    *BOOL v10 = 0;
    unint64_t v12 = (unint64_t)(v10 + 1);
    unint64_t v14 = v2[1];
    unint64_t v13 = (unint64_t)v2[2];
    if ((unint64_t)v14 >= v13)
    {
      uint64_t v90 = *v2;
      unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *v2) >> 3);
      unint64_t v92 = v91 + 1;
      if (v91 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1C494A220();
      }
      unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v90) >> 3);
      if (2 * v93 > v92) {
        unint64_t v92 = 2 * v93;
      }
      if (v93 >= 0x555555555555555) {
        unint64_t v94 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v94 = v92;
      }
      if (v94 > 0xAAAAAAAAAAAAAAALL) {
        sub_1C4949AA8();
      }
      uint64_t v95 = (char *)operator new(24 * v94);
      uint64_t v96 = &v95[24 * v91];
      uint64_t v97 = &v95[24 * v94];
      *((void *)v96 + 1) = 0;
      *((void *)v96 + 2) = 0;
      *(void *)uint64_t v96 = v11;
      *(int64x2_t *)(v96 + 8) = vdupq_n_s64(v12);
      unint64_t v15 = v96 + 24;
      if (v14 == v90)
      {
        uint64_t v2 = v109;
        *uint64_t v109 = v96;
        v109[1] = v15;
        v109[2] = v97;
      }
      else
      {
        uint64_t v2 = v109;
        do
        {
          long long v98 = *(_OWORD *)(v14 - 24);
          v14 -= 24;
          *(_OWORD *)(v96 - 24) = v98;
          v96 -= 24;
          *((void *)v96 + 2) = *((void *)v14 + 2);
          *(void *)unint64_t v14 = 0;
          *((void *)v14 + 1) = 0;
          *((void *)v14 + 2) = 0;
        }
        while (v14 != v90);
        unint64_t v14 = *v109;
        BOOL v99 = v109[1];
        *uint64_t v109 = v96;
        v109[1] = v15;
        v109[2] = v97;
        if (v99 != v14)
        {
          uint64_t v100 = v99;
          do
          {
            uint64_t v102 = (void *)*((void *)v100 - 3);
            v100 -= 24;
            uint64_t v101 = v102;
            if (v102)
            {
              *((void *)v99 - 2) = v101;
              operator delete(v101);
            }
            BOOL v99 = v100;
          }
          while (v100 != v14);
        }
      }
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(void *)unint64_t v14 = v10;
      *((void *)v14 + 1) = v12;
      unint64_t v15 = v14 + 24;
      *((void *)v14 + 2) = v12;
    }
    v2[1] = v15;
    this[13] = 0;
    this[14] = 0;
    *((_DWORD *)this + 30) = 0;
    *this[10] = 0;
    *(_DWORD *)this[7] = 0;
  }
}

void sub_1C49AA44C(_Unwind_Exception *a1)
{
  sub_1C496B66C(v1);
  _Unwind_Resume(a1);
}

void sub_1C49AA460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  operator delete(v16);
  sub_1C496B66C(a16);
  _Unwind_Resume(a1);
}

void sub_1C49AA480(_Unwind_Exception *a1)
{
  sub_1C496B66C(v1);
  _Unwind_Resume(a1);
}

void sub_1C49AA494(_Unwind_Exception *a1)
{
  sub_1C496B66C(v1);
  _Unwind_Resume(a1);
}

void sub_1C49AA4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v22 = *v20;
  if (*v20)
  {
    *a11 = v22;
    operator delete(v22);
  }
  sub_1C496CD14((uint64_t)&a20);
  if (__p) {
    operator delete(__p);
  }
  sub_1C496B66C(a16);
  _Unwind_Resume(a1);
}

uint64_t CHFastGroupingClusters::getClosestClusterIndexes(CHFastGroupingClusters *this)
{
  return *((void *)this + 13);
}

float CHFastGroupingClusters::getClosestClusterDistance(CHFastGroupingClusters *this)
{
  return *((float *)this + 30);
}

uint64_t CHFastGroupingClusters::getClusterCount(CHFastGroupingClusters *this)
{
  return *((void *)this + 2);
}

void CHFastGroupingClusters::getClusters(CHFastGroupingClusters **this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = this + 1;
  unint64_t v3 = *this;
  if (*this != (CHFastGroupingClusters *)(this + 1))
  {
    do
    {
      v13[0] = 0;
      v13[1] = 0;
      uint64_t v5 = (void *)*((void *)v3 + 5);
      unint64_t v12 = v13;
      sub_1C49AB0DC(&v12, v5, (void *)v3 + 6);
      long long v14 = *((_OWORD *)v3 + 4);
      v16[0] = 0;
      v16[1] = 0;
      unint64_t v15 = v16;
      sub_1C499A568(&v15, *((void **)v3 + 10), (void *)v3 + 11);
      uint64_t v17 = *((void *)v3 + 13);
      unint64_t v6 = *(void *)(a2 + 8);
      if (v6 >= *(void *)(a2 + 16))
      {
        int64_t v8 = sub_1C49AB30C((void **)a2, (uint64_t)&v12);
      }
      else
      {
        *(void *)(v6 + 16) = 0;
        *(void *)(v6 + 8) = 0;
        *(void *)unint64_t v6 = v6 + 8;
        sub_1C49AB0DC((void *)v6, v12, v13);
        long long v7 = v14;
        *(void *)(v6 + 48) = 0;
        *(void *)(v6 + 40) = v6 + 48;
        *(_OWORD *)(v6 + 24) = v7;
        *(void *)(v6 + 56) = 0;
        sub_1C499A568((void *)(v6 + 40), v15, v16);
        *(void *)(v6 + 64) = v17;
        int64_t v8 = (char *)(v6 + 72);
        *(void *)(a2 + 8) = v6 + 72;
      }
      *(void *)(a2 + 8) = v8;
      sub_1C4999C7C((uint64_t)&v15, v16[0]);
      sub_1C494AC4C((uint64_t)&v12, v13[0]);
      unint64_t v9 = (CHFastGroupingClusters *)*((void *)v3 + 1);
      if (v9)
      {
        do
        {
          BOOL v10 = (CHFastGroupingClusters **)v9;
          unint64_t v9 = *(CHFastGroupingClusters **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (CHFastGroupingClusters **)*((void *)v3 + 2);
          BOOL v11 = *v10 == v3;
          unint64_t v3 = (CHFastGroupingClusters *)v10;
        }
        while (!v11);
      }
      unint64_t v3 = (CHFastGroupingClusters *)v10;
    }
    while (v10 != v2);
  }
}

void sub_1C49AA738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1C49A9958((uint64_t)va);
  sub_1C49A9510(v3);
  _Unwind_Resume(a1);
}

void sub_1C49AA780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  sub_1C4999C7C(v19, a18);
  sub_1C494AC4C(a10, a13);
  sub_1C49A9510(v18);
  _Unwind_Resume(a1);
}

float CHFastGroupingClusters::updateClosestClusters(CHFastGroupingClusters *this)
{
  if (*((void *)this + 2) == 1)
  {
    uint64_t v1 = *(void *)(*(void *)this + 32);
    float result = 0.0;
    *((void *)this + 13) = v1;
    *((void *)this + 14) = v1;
    *((_DWORD *)this + 30) = 0;
  }
  else
  {
    uint64_t v3 = *((void *)this + 7);
    uint64_t v4 = *((void *)this + 8) - v3;
    if (v4)
    {
      uint64_t v5 = 0;
      unint64_t v6 = v4 >> 2;
      if (v6 <= 1) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = v6;
      }
      uint64_t v8 = -1;
      float result = 3.4028e38;
      do
      {
        if (*(float *)(v3 + 4 * v5) < result)
        {
          uint64_t v8 = v5;
          float result = *(float *)(v3 + 4 * v5);
        }
        ++v5;
      }
      while (v7 != v5);
      uint64_t v9 = *(void *)(*((void *)this + 10) + 8 * v8);
      *((void *)this + 13) = v8;
      *((void *)this + 14) = v9;
      *((float *)this + 30) = result;
    }
    else
    {
      float result = 3.4028e38;
      uint64_t v10 = *(void *)(*((void *)this + 10) - 8);
      *((void *)this + 13) = -1;
      *((void *)this + 14) = v10;
      *((_DWORD *)this + 30) = 2139095039;
    }
  }
  return result;
}

void CHFastGroupingClusters::mergeClusters(uint64_t **this, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = this + 1;
  unint64_t v6 = (char *)this[1];
  uint64_t v8 = (_OWORD *)MEMORY[0x1E4F1DAD8];
  uint64_t v9 = this + 1;
  uint64_t v10 = (char *)(this + 1);
  if (v6)
  {
    BOOL v11 = (char *)this[1];
    while (1)
    {
      while (1)
      {
        uint64_t v10 = v11;
        unint64_t v12 = *((void *)v11 + 4);
        if (v12 <= a2) {
          break;
        }
        BOOL v11 = *(char **)v10;
        uint64_t v9 = (uint64_t **)v10;
        if (!*(void *)v10) {
          goto LABEL_8;
        }
      }
      if (v12 >= a2) {
        break;
      }
      BOOL v11 = (char *)*((void *)v10 + 1);
      if (!v11)
      {
        uint64_t v9 = (uint64_t **)(v10 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    unint64_t v13 = v10;
    uint64_t v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 11) = 0;
    *((void *)v10 + 10) = v10 + 88;
    *((void *)v10 + 6) = 0;
    *((void *)v10 + 7) = 0;
    *((void *)v10 + 4) = a2;
    *((void *)v10 + 5) = v10 + 48;
    *((_OWORD *)v10 + 4) = *v8;
    *(void *)uint64_t v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v13;
    *uint64_t v9 = (uint64_t *)v10;
    long long v14 = (uint64_t *)**this;
    unint64_t v15 = (uint64_t *)v10;
    if (v14)
    {
      *this = v14;
      unint64_t v15 = *v9;
    }
    sub_1C4949FD4(this[1], v15);
    unint64_t v6 = (char *)this[1];
    this[2] = (uint64_t *)((char *)this[2] + 1);
  }
  unint64_t v16 = (CHFastGroupingCluster *)(v10 + 40);
  uint64_t v17 = v7;
  float v18 = (char *)v7;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        float v18 = v6;
        unint64_t v19 = *((void *)v6 + 4);
        if (v19 <= a3) {
          break;
        }
        unint64_t v6 = *(char **)v18;
        uint64_t v17 = (uint64_t **)v18;
        if (!*(void *)v18) {
          goto LABEL_18;
        }
      }
      if (v19 >= a3) {
        break;
      }
      unint64_t v6 = (char *)*((void *)v18 + 1);
      if (!v6)
      {
        uint64_t v17 = (uint64_t **)(v18 + 8);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    BOOL v20 = v18;
    float v18 = (char *)operator new(0x70uLL);
    *((void *)v18 + 12) = 0;
    *((void *)v18 + 13) = 0;
    *((void *)v18 + 11) = 0;
    *((void *)v18 + 10) = v18 + 88;
    *((void *)v18 + 6) = 0;
    *((void *)v18 + 7) = 0;
    *((void *)v18 + 4) = a3;
    *((void *)v18 + 5) = v18 + 48;
    *((_OWORD *)v18 + 4) = *v8;
    *(void *)float v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = v20;
    *uint64_t v17 = (uint64_t *)v18;
    unint64_t v21 = (uint64_t *)**this;
    uint64_t v22 = (uint64_t *)v18;
    if (v21)
    {
      *this = v21;
      uint64_t v22 = *v17;
    }
    sub_1C4949FD4(this[1], v22);
    this[2] = (uint64_t *)((char *)this[2] + 1);
  }
  CHFastGroupingCluster::mergeCluster(v16, (const CHFastGroupingCluster *)(v18 + 40));
  float v23 = *v7;
  if (!*v7) {
    goto LABEL_32;
  }
  uint64_t v24 = v7;
  uint64_t v25 = *v7;
  do
  {
    unint64_t v26 = v25[4];
    BOOL v27 = v26 >= a3;
    if (v26 >= a3) {
      unint64_t v28 = (uint64_t **)v25;
    }
    else {
      unint64_t v28 = (uint64_t **)(v25 + 1);
    }
    if (v27) {
      uint64_t v24 = (uint64_t **)v25;
    }
    uint64_t v25 = *v28;
  }
  while (*v28);
  if (v24 == v7 || (unint64_t)v24[4] > a3) {
LABEL_32:
  }
    uint64_t v24 = v7;
  long long v29 = v24[1];
  if (v29)
  {
    do
    {
      uint64_t v30 = v29;
      long long v29 = (uint64_t *)*v29;
    }
    while (v29);
  }
  else
  {
    uint64_t v31 = v24;
    do
    {
      uint64_t v30 = v31[2];
      BOOL v37 = *v30 == (void)v31;
      uint64_t v31 = (uint64_t **)v30;
    }
    while (!v37);
  }
  if (*this == (uint64_t *)v24) {
    *this = v30;
  }
  this[2] = (uint64_t *)((char *)this[2] - 1);
  sub_1C49A0D30(v23, (uint64_t *)v24);
  sub_1C4999C7C((uint64_t)(v24 + 10), v24[11]);
  sub_1C494AC4C((uint64_t)(v24 + 5), v24[6]);
  operator delete(v24);
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v96 = &v97;
  uint64_t v32 = this[7];
  BOOL v33 = this[8];
  if (v33 == v32)
  {
    uint64_t v32 = this[8];
  }
  else
  {
    unint64_t v34 = 0;
    do
    {
      if (v34 != a2 && v34 != a3)
      {
        char v35 = this[10];
        uint64_t v36 = v35[v34];
        BOOL v37 = v36 == a2 || v36 == a3;
        if (v37)
        {
          *((_DWORD *)v32 + v34) = 2139095039;
          v35[v34] = -1;
          int v38 = v97;
          uint64_t v39 = &v97;
          int v40 = &v97;
          if (v97)
          {
            while (1)
            {
              while (1)
              {
                int v40 = (uint64_t **)v38;
                unint64_t v41 = v38[4];
                if (v34 >= v41) {
                  break;
                }
                int v38 = *v40;
                uint64_t v39 = v40;
                if (!*v40) {
                  goto LABEL_59;
                }
              }
              if (v41 >= v34) {
                break;
              }
              int v38 = v40[1];
              if (!v38)
              {
                uint64_t v39 = v40 + 1;
                goto LABEL_59;
              }
            }
          }
          else
          {
LABEL_59:
            uint64_t v42 = (uint64_t *)operator new(0x28uLL);
            void v42[4] = v34;
            *uint64_t v42 = 0;
            v42[1] = 0;
            void v42[2] = (uint64_t)v40;
            void *v39 = v42;
            if (*v96)
            {
              uint64_t v96 = (uint64_t **)*v96;
              uint64_t v42 = *v39;
            }
            sub_1C4949FD4(v97, v42);
            ++v98;
            uint64_t v32 = this[7];
            BOOL v33 = this[8];
          }
        }
      }
      ++v34;
    }
    while (v34 < ((char *)v33 - (char *)v32) >> 2);
  }
  *((_DWORD *)v32 + a2) = 2139095039;
  uint64_t v43 = this[10];
  v43[a2] = -1;
  *((_DWORD *)v32 + a3) = 2139095039;
  v43[a3] = -1;
  id v44 = this[3];
  float v45 = &v44[3 * a2];
  v45[1] = *v45;
  uint64_t v46 = this[4];
  int v95 = 2139095039;
  if (v46 == v44)
  {
    v44[3 * a3 + 1] = v44[3 * a3];
LABEL_112:
    uint64_t v78 = (uint64_t *)v96;
    if (v96 == &v97) {
      goto LABEL_127;
    }
    goto LABEL_115;
  }
  sub_1C49AB714((uint64_t)v45, 0xAAAAAAAAAAAAAAABLL * (v46 - v44), (const float *)&v95);
  id v44 = this[3];
  unint64_t v47 = this[4];
  uint64_t v48 = &v44[3 * a3];
  v48[1] = *v48;
  int v95 = 2139095039;
  uint64_t v49 = (char *)v47 - (char *)v44;
  if (!v49) {
    goto LABEL_112;
  }
  sub_1C49AB714((uint64_t)v48, 0xAAAAAAAAAAAAAAABLL * (v49 >> 3), (const float *)&v95);
  id v44 = this[3];
  unint64_t v50 = this[4];
  if (v50 != v44)
  {
    unint64_t v51 = ((char *)v50 - (char *)v44) / 24;
    if (v51 <= 1) {
      unint64_t v51 = 1;
    }
    uint64_t v52 = this[3];
    do
    {
      uint64_t v53 = *v52;
      v52 += 3;
      *(_DWORD *)(v53 + 4 * a3) = 2139095039;
      *(_DWORD *)(v53 + 4 * a2) = 2139095039;
      --v51;
    }
    while (v51);
    unint64_t v54 = 0;
    while (1)
    {
      if (v54 == a2) {
        goto LABEL_71;
      }
      uint64_t v55 = *v7;
      if (!*v7) {
        goto LABEL_71;
      }
      int v56 = v7;
      uint64_t v57 = *v7;
      do
      {
        unint64_t v58 = v57[4];
        BOOL v59 = v58 >= v54;
        if (v58 >= v54) {
          uint64_t v60 = (uint64_t **)v57;
        }
        else {
          uint64_t v60 = (uint64_t **)(v57 + 1);
        }
        if (v59) {
          int v56 = (uint64_t **)v57;
        }
        uint64_t v57 = *v60;
      }
      while (*v60);
      if (v56 == v7 || v54 < (unint64_t)v56[4]) {
        goto LABEL_71;
      }
      uint64_t v61 = *v7;
      do
      {
        while (1)
        {
          float v62 = v61;
          unint64_t v63 = v61[4];
          if (v63 > a2) {
            break;
          }
          if (v63 >= a2)
          {
            uint64_t v65 = v62;
            int64_t v68 = v7;
            BOOL v69 = v7;
            if (v55) {
              goto LABEL_98;
            }
            goto LABEL_102;
          }
          uint64_t v61 = (uint64_t *)v62[1];
          if (!v61)
          {
            uint64_t v64 = (uint64_t **)(v62 + 1);
            goto LABEL_91;
          }
        }
        uint64_t v61 = (uint64_t *)*v62;
      }
      while (*v62);
      uint64_t v64 = (uint64_t **)v62;
LABEL_91:
      uint64_t v65 = operator new(0x70uLL);
      v65[12] = 0;
      v65[13] = 0;
      v65[11] = 0;
      v65[10] = v65 + 11;
      v65[6] = 0;
      v65[7] = 0;
      void v65[4] = a2;
      v65[5] = v65 + 6;
      *((_OWORD *)v65 + 4) = *MEMORY[0x1E4F1DAD8];
      *uint64_t v65 = 0;
      v65[1] = 0;
      v65[2] = v62;
      const char *v64 = v65;
      unint64_t v66 = (uint64_t *)**this;
      unint64_t v67 = v65;
      if (v66)
      {
        *this = v66;
        unint64_t v67 = *v64;
      }
      sub_1C4949FD4(this[1], v67);
      uint64_t v55 = this[1];
      this[2] = (uint64_t *)((char *)this[2] + 1);
      int64_t v68 = v7;
      BOOL v69 = v7;
      if (!v55)
      {
LABEL_102:
        unint64_t v71 = operator new(0x70uLL);
        v71[12] = 0;
        v71[13] = 0;
        v71[11] = 0;
        v71[10] = v71 + 11;
        v71[6] = 0;
        v71[7] = 0;
        v71[4] = v54;
        v71[5] = v71 + 6;
        *((_OWORD *)v71 + 4) = *MEMORY[0x1E4F1DAD8];
        *unint64_t v71 = 0;
        v71[1] = 0;
        v71[2] = v69;
        *int64_t v68 = v71;
        unint64_t v72 = (uint64_t *)**this;
        unint64_t v73 = v71;
        if (v72)
        {
          *this = v72;
          unint64_t v73 = *v68;
        }
        sub_1C4949FD4(this[1], v73);
        this[2] = (uint64_t *)((char *)this[2] + 1);
        goto LABEL_106;
      }
      while (1)
      {
LABEL_98:
        while (1)
        {
          BOOL v69 = (uint64_t **)v55;
          unint64_t v70 = v55[4];
          if (v54 >= v70) {
            break;
          }
          uint64_t v55 = (uint64_t *)*v55;
          int64_t v68 = v69;
          if (!*v69) {
            goto LABEL_102;
          }
        }
        if (v70 >= v54) {
          break;
        }
        uint64_t v55 = (uint64_t *)v55[1];
        if (!v55)
        {
          int64_t v68 = v69 + 1;
          goto LABEL_102;
        }
      }
      unint64_t v71 = v55;
LABEL_106:
      float DistanceToCluster = CHFastGroupingCluster::getDistanceToCluster(v65 + 5, v71 + 5, *((_DWORD *)this + 12), *((_DWORD *)this + 13));
      id v44 = this[3];
      if (v54 >= a2)
      {
        *(float *)(v44[3 * v54] + 4 * a2) = DistanceToCluster;
        unint64_t v75 = (float *)this[7] + v54;
        unint64_t v76 = v54;
        unint64_t v77 = a2;
        if (DistanceToCluster >= *v75) {
          goto LABEL_71;
        }
      }
      else
      {
        *(float *)(v44[3 * a2] + 4 * v54) = DistanceToCluster;
        unint64_t v75 = (float *)this[7] + a2;
        unint64_t v76 = a2;
        unint64_t v77 = v54;
        if (DistanceToCluster >= *v75) {
          goto LABEL_71;
        }
      }
      float *v75 = DistanceToCluster;
      this[10][v76] = v77;
LABEL_71:
      if (++v54 >= 0xAAAAAAAAAAAAAAABLL * (this[4] - v44)) {
        goto LABEL_112;
      }
    }
  }
  id v44 = this[4];
  uint64_t v78 = (uint64_t *)v96;
  if (v96 != &v97)
  {
    do
    {
LABEL_115:
      uint64_t v79 = v78[4];
      if (v79)
      {
        uint64_t v80 = 0;
        uint64_t v81 = v44[3 * v79];
        long long v82 = this[7];
        float v83 = *((float *)v82 + v79);
        do
        {
          float v84 = *(float *)(v81 + 4 * v80);
          if (v84 < v83)
          {
            *((float *)v82 + v79) = v84;
            this[10][v79] = v80;
            float v83 = v84;
          }
          ++v80;
        }
        while (v79 != v80);
      }
      long long v85 = (uint64_t *)v78[1];
      if (v85)
      {
        do
        {
          uint64_t v86 = (uint64_t **)v85;
          long long v85 = (uint64_t *)*v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          uint64_t v86 = (uint64_t **)v78[2];
          BOOL v37 = *v86 == v78;
          uint64_t v78 = (uint64_t *)v86;
        }
        while (!v37);
      }
      uint64_t v78 = (uint64_t *)v86;
    }
    while (v86 != &v97);
  }
LABEL_127:
  if (this[2] == (uint64_t *)1)
  {
    uint64_t v87 = (*this)[4];
    float v88 = 0.0;
    uint64_t v89 = v87;
  }
  else
  {
    uint64_t v90 = this[7];
    uint64_t v91 = (char *)this[8] - (char *)v90;
    if (v91)
    {
      uint64_t v92 = 0;
      unint64_t v93 = v91 >> 2;
      if (v93 <= 1) {
        uint64_t v94 = 1;
      }
      else {
        uint64_t v94 = v93;
      }
      uint64_t v87 = -1;
      float v88 = 3.4028e38;
      do
      {
        if (*((float *)v90 + v92) < v88)
        {
          uint64_t v87 = v92;
          float v88 = *((float *)v90 + v92);
        }
        ++v92;
      }
      while (v94 != v92);
    }
    else
    {
      uint64_t v87 = -1;
      float v88 = 3.4028e38;
    }
    uint64_t v89 = this[10][v87];
  }
  this[13] = (uint64_t *)v87;
  this[14] = (uint64_t *)v89;
  *((float *)this + 30) = v88;
  sub_1C4999C7C((uint64_t)&v96, v97);
}

void sub_1C49AB07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void sub_1C49AB094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void sub_1C49AB0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void sub_1C49AB0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void *sub_1C49AB0DC(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    unint64_t v6 = a2;
    uint64_t v7 = (void **)result;
    uint64_t v8 = result + 1;
    do
    {
      float result = sub_1C499A67C(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        uint64_t v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v10 = (uint64_t **)result;
        sub_1C49AB1EC((uint64_t)v7, v6 + 4, (uint64_t)&v16);
        uint64_t v11 = v18[0];
        unint64_t v12 = v16;
        *unint64_t v16 = 0;
        v12[1] = 0;
        v12[2] = v11;
        *uint64_t v10 = v12;
        unint64_t v13 = (void *)**v7;
        if (v13)
        {
          *uint64_t v7 = v13;
          unint64_t v12 = *v10;
        }
        float result = sub_1C4949FD4(v7[1], v12);
        v7[2] = (void *)((char *)v7[2] + 1);
        uint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_10:
            long long v14 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        long long v14 = (void *)v6[2];
        BOOL v15 = *v14 == (void)v6;
        unint64_t v6 = v14;
      }
      while (!v15);
LABEL_3:
      unint64_t v6 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void *sub_1C49AB1EC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  float result = operator new(0x40uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (unsigned char *)a2[1];
  result[4] = *a2;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  uint64_t v8 = (unsigned char *)a2[2];
  int64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    uint64_t v10 = result;
    if (v9 < 0) {
      sub_1C494A220();
    }
    uint64_t v11 = (char *)operator new(v8 - v7);
    v10[5] = v11;
    v10[6] = v11;
    unint64_t v12 = &v11[16 * (v9 >> 4)];
    v10[7] = v12;
    float result = memcpy(v11, v7, v9);
    v10[6] = v12;
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1C49AB298(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 48) = v5;
    operator delete(v5);
  }
  sub_1C49AB2BC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C49AB2BC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[5];
      if (v3)
      {
        v2[6] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_1C49AB30C(void **a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_1C494A220();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      sub_1C4949AA8();
    }
    uint64_t v7 = (char *)operator new(72 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  BOOL v27 = &v7[72 * v3];
  unint64_t v28 = &v7[72 * v6];
  *((void *)v27 + 2) = 0;
  *((void *)v27 + 1) = 0;
  *(void *)BOOL v27 = v27 + 8;
  sub_1C49AB0DC(v27, *(void **)a2, (void *)(a2 + 8));
  long long v8 = *(_OWORD *)(a2 + 24);
  *((void *)v27 + 6) = 0;
  *((void *)v27 + 5) = v27 + 48;
  *(_OWORD *)(v27 + 24) = v8;
  *((void *)v27 + 7) = 0;
  sub_1C499A568((void *)v27 + 5, *(void **)(a2 + 40), (void *)(a2 + 48));
  *((void *)v27 + 8) = *(void *)(a2 + 64);
  int64_t v9 = v27 + 72;
  uint64_t v10 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v27;
    a1[1] = v9;
    a1[2] = v28;
    if (!v11) {
      return v27 + 72;
    }
    goto LABEL_24;
  }
  uint64_t v12 = 0;
  do
  {
    unint64_t v13 = &v27[v12];
    *((void *)v13 - 9) = *(void *)&v11[v12 - 72];
    long long v14 = &v11[v12 - 64];
    uint64_t v15 = *(void *)v14;
    *(void *)&v27[v12 - 64] = *(void *)v14;
    uint64_t v16 = (uint64_t)&v27[v12 - 64];
    uint64_t v17 = *(void *)&v11[v12 - 56];
    *((void *)v13 - 7) = v17;
    if (v17)
    {
      *(void *)(v15 + 16) = v16;
      *(void *)&v11[v12 - 72] = v14;
      *(void *)long long v14 = 0;
      *(void *)&v11[v12 - 56] = 0;
    }
    else
    {
      *((void *)v13 - 9) = v16;
    }
    float v18 = &v27[v12];
    *((_OWORD *)v18 - 3) = *(_OWORD *)&v11[v12 - 48];
    *((void *)v18 - 4) = *(void *)&v11[v12 - 32];
    unint64_t v19 = &v11[v12 - 24];
    uint64_t v20 = *(void *)v19;
    *(void *)&v27[v12 - 24] = *(void *)v19;
    uint64_t v21 = (uint64_t)&v27[v12 - 24];
    uint64_t v22 = *(void *)&v11[v12 - 16];
    *((void *)v18 - 2) = v22;
    if (v22)
    {
      *(void *)(v20 + 16) = v21;
      *(void *)&v11[v12 - 32] = v19;
      *(void *)unint64_t v19 = 0;
      *(void *)&v11[v12 - 16] = 0;
    }
    else
    {
      *((void *)v18 - 4) = v21;
    }
    *(void *)&v27[v12 - 8] = *(void *)&v11[v12 - 8];
    v12 -= 72;
  }
  while (&v11[v12] != v10);
  uint64_t v11 = (char *)*a1;
  float v23 = (char *)a1[1];
  *a1 = &v27[v12];
  a1[1] = v9;
  a1[2] = v28;
  if (v23 != v11)
  {
    uint64_t v24 = (uint64_t)(v23 - 32);
    do
    {
      uint64_t v25 = (char *)(v24 - 40);
      sub_1C4999C7C(v24, *(void **)(v24 + 8));
      sub_1C494AC4C(v24 - 40, *(void **)(v24 - 32));
      v24 -= 72;
    }
    while (v25 != v11);
  }
  if (v11) {
LABEL_24:
  }
    operator delete(v11);
  return v27 + 72;
}

void sub_1C49AB59C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4999C7C(v3, *v4);
  sub_1C494AC4C(v2, *(void **)(v2 + 8));
  sub_1C49AB5D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C49AB5D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    sub_1C4999C7C(i - 32, *(void **)(i - 24));
    sub_1C494AC4C(i - 72, *(void **)(i - 64));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C49AB640(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1C49AB640(a1, *a2);
    sub_1C49AB640(a1, a2[1]);
    sub_1C4999C7C((uint64_t)(a2 + 10), (void *)a2[11]);
    sub_1C494AC4C((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t sub_1C49AB6B0(uint64_t a1)
{
  uint64_t v2 = *(void ***)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      sub_1C4999C7C((uint64_t)(v2 + 10), v2[11]);
      sub_1C494AC4C((uint64_t)(v2 + 5), v2[6]);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_1C49AB714(uint64_t a1, unint64_t a2, const float *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  long long v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3) {
        goto LABEL_45;
      }
      unint64_t v17 = v16 + 1;
      long long v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      float32x4_t v18 = vld1q_dup_f32(a3);
      unint64_t v19 = (float32x4_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        float32x4_t *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      long long v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(void *)(a1 + 8) = v8;
  }
  else
  {
    int64_t v9 = *(_DWORD **)a1;
    uint64_t v10 = v7 - *(void *)a1;
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + a2;
    if (v12 >> 62) {
      sub_1C494A220();
    }
    uint64_t v13 = v6 - (void)v9;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_1C4949AA8();
      }
      uint64_t v15 = (char *)operator new(4 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[4 * v11];
    uint64_t v22 = (char *)(v21 + 4 * a2);
    unint64_t v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v24 = (char *)v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      uint64_t v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3) {
        goto LABEL_46;
      }
    }
    unint64_t v25 = v23 + 1;
    uint64_t v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    float32x4_t v26 = vld1q_dup_f32(a3);
    BOOL v27 = (float32x4_t *)&v15[4 * v11 + 16];
    uint64_t v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      float32x4_t *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_46:
      do
      {
        *(float *)uint64_t v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      unint64_t v29 = v7 - (void)v9 - 4;
      if (v29 < 0x2C) {
        goto LABEL_47;
      }
      if (v7 - (unint64_t)&v15[v10] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 2) + 1;
      uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      long long v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      uint64_t v32 = &v15[4 * v11 - 16];
      BOOL v33 = (long long *)(v7 - 16);
      uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)uint64_t v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_47:
        do
        {
          int v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v15[4 * v14];
    if (v9)
    {
      operator delete(v9);
    }
  }
}

void sub_1C49AB988(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  long long v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3) {
        goto LABEL_45;
      }
      unint64_t v17 = v16 + 1;
      long long v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      float32x4_t v18 = (int64x2_t *)(v7 + 16);
      uint64_t v19 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v20 = vdupq_lane_s64(*a3, 0);
        v18[-1] = v20;
        int64x2_t *v18 = v20;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      long long v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(void *)(a1 + 8) = v8;
  }
  else
  {
    int64_t v9 = *(uint64_t **)a1;
    uint64_t v10 = v7 - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + a2;
    if (v12 >> 61) {
      sub_1C494A220();
    }
    uint64_t v13 = v6 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[8 * v11];
    uint64_t v22 = (uint64_t *)(v21 + 8 * a2);
    unint64_t v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v24 = (uint64_t *)v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      uint64_t v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3) {
        goto LABEL_46;
      }
    }
    unint64_t v25 = v23 + 1;
    uint64_t v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    int64x2_t v26 = vdupq_lane_s64(*a3, 0);
    BOOL v27 = (int64x2_t *)&v15[8 * v11 + 16];
    uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      int64x2_t *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_46:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      unint64_t v29 = v7 - (void)v9 - 8;
      if (v29 < 0x58) {
        goto LABEL_47;
      }
      if (v7 - (unint64_t)&v15[v10] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 3) + 1;
      uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      long long v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      uint64_t v32 = &v15[8 * v11 - 16];
      BOOL v33 = (long long *)(v7 - 16);
      uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)uint64_t v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_47:
        do
        {
          uint64_t v36 = *--v8;
          *(void *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v15[8 * v14];
    if (v9)
    {
      operator delete(v9);
    }
  }
}

void sub_1C49ACAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49ACBD8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  if (__ROR8__(0x8F5C28F5C28F5C29 * a3, 2) <= 0x28F5C28F5C28F5CuLL)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    if (v15)
    {
      if ((*(unsigned int (**)(void))(v15 + 16))()) {
        *a4 = 1;
      }
    }
  }
  long long v8 = objc_opt_class();
  uint64_t v13 = objc_msgSend_isPointEnumerationSupportedForStroke_(v8, v9, (uint64_t)v7, v10, v11, v12) ^ 1;

  return v13;
}

void sub_1C49ACC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49ACC94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49ACD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49ACD28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49ACF6C(_Unwind_Exception *a1)
{
  id v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C49AD0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C49AD0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C49AD0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49AD0F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v10 = objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  uint64_t v15 = objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v11, (uint64_t)v5, v12, v13, v14);
  uint64_t v19 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(*(void **)(a1 + 32), v16, (uint64_t)v10, (uint64_t)v15, v17, v18);

  return v19;
}

void sub_1C49AD178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AD198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AD3F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AD5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AD880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49AD998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AD9AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AD9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AD9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49ADB48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49ADE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C49ADE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49ADE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49ADE8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1C49ADE9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C49ADF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1C49ADF98(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *a2 = 1;
  return result;
}

void sub_1C49AE0EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AE13C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AE154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AE3E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 120), 8);
  _Unwind_Resume(a1);
}

void *sub_1C49AE424(void *result, double a2, double a3, double a4)
{
  uint64_t v4 = *(uint64_t *)(*(void *)(result[4] + 8) + 24) % result[5];
  uint64_t v5 = result[7];
  uint64_t v6 = (double *)(result[6] + 16 * v4);
  *uint64_t v6 = a2;
  v6[1] = a3;
  *(double *)(v5 + 8 * v4) = a4;
  ++*(void *)(*(void *)(result[4] + 8) + 24);
  return result;
}

uint64_t sub_1C49AE460(uint64_t a1, uint64_t a2)
{
  return (*(void *)(a1 + 32) + a2) % *(void *)(a1 + 40);
}

void sub_1C49AE5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);

  _Unwind_Resume(a1);
}

__n128 sub_1C49AE608(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void *sub_1C49AE618(void *result, double a2, double a3)
{
  uint64_t v3 = *(void *)(result[4] + 8);
  if (*(unsigned char *)(v3 + 24))
  {
    v4.f64[0] = a2;
    v4.f64[1] = a3;
    *(float32x2_t *)&v4.f64[0] = vsub_f32(vcvt_f32_f64(v4), vcvt_f32_f64(*(float64x2_t *)(*(void *)(result[6] + 8) + 48)));
    *(double *)(*(void *)(result[5] + 8) + 24) = *(double *)(*(void *)(result[5] + 8) + 24)
                                                     + sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v4.f64[0], *(float32x2_t *)&v4.f64[0])));
  }
  else
  {
    *(unsigned char *)(v3 + 24) = 1;
  }
  uint64_t v5 = *(void *)(result[6] + 8);
  *(double *)(v5 + 48) = a2;
  *(double *)(v5 + 56) = a3;
  return result;
}

void sub_1C49AE7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AEC64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C49AED8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1C49AF0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AF108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AF3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49AF460(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addPoint_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

void sub_1C49AF508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49AF7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  _Block_object_dispose(&a24, 8);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1C49AF7F8(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C49AF81C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C49AF834(uint64_t a1, double a2, double a3)
{
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = (double *)v5[7];
  unint64_t v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    *uint64_t v7 = a2;
    v7[1] = a3;
    uint64_t v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  uint64_t v9 = (double *)v5[6];
  uint64_t v10 = ((char *)v7 - (char *)v9) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 60) {
      sub_1C4949AA8();
    }
    uint64_t v14 = (char *)operator new(16 * v13);
    uint64_t v15 = (double *)&v14[16 * v10];
    uint64_t v16 = &v14[16 * v13];
    *uint64_t v15 = a2;
    v15[1] = a3;
    uint64_t v8 = (uint64_t)(v15 + 2);
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v15 = (double *)(16 * v10);
  uint64_t v16 = 0;
  *uint64_t v15 = a2;
  v15[1] = a3;
  uint64_t v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    uint64_t v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_18:
  v5[7] = v8;
}

void sub_1C49AFB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

unint64_t sub_1C49AFB80(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result = objc_msgSend_pointCountForStrokeIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if (result)
  {
    unint64_t v12 = 0;
    while (1)
    {
      uint64_t v14 = *(void **)(*(void *)(a1 + 40) + 8);
      objc_msgSend_pointForStrokeIndex_pointIndex_(*(void **)(a1 + 32), v9, (uint64_t)a2, v12, v10, v11);
      uint64_t v21 = v19;
      uint64_t v22 = v20;
      uint64_t v24 = (char *)v14[7];
      unint64_t v23 = v14[8];
      if ((unint64_t)v24 >= v23) {
        break;
      }
      *(void *)uint64_t v24 = v19;
      *((void *)v24 + 1) = v20;
      unint64_t v13 = v24 + 16;
LABEL_4:
      v14[7] = v13;
      ++v12;
      unint64_t result = objc_msgSend_pointCountForStrokeIndex_(*(void **)(a1 + 32), v15, (uint64_t)a2, v16, v17, v18);
      if (v12 >= result) {
        return result;
      }
    }
    unint64_t v25 = (char *)v14[6];
    uint64_t v26 = (v24 - v25) >> 4;
    unint64_t v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v28 = v23 - (void)v25;
    if (v28 >> 3 > v27) {
      unint64_t v27 = v28 >> 3;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v27;
    }
    if (v29)
    {
      if (v29 >> 60) {
        sub_1C4949AA8();
      }
      uint64_t v30 = (char *)operator new(16 * v29);
      uint64_t v31 = &v30[16 * v26];
      *(void *)uint64_t v31 = v21;
      *((void *)v31 + 1) = v22;
      uint64_t v32 = (uint64_t)v31;
      if (v24 == v25) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = (char *)(16 * v26);
      *(void *)uint64_t v31 = v19;
      *((void *)v31 + 1) = v20;
      uint64_t v32 = 16 * v26;
      if (v24 == v25)
      {
LABEL_19:
        unint64_t v13 = v31 + 16;
        v14[6] = v32;
        v14[7] = v31 + 16;
        v14[8] = &v30[16 * v29];
        if (v24) {
          operator delete(v24);
        }
        goto LABEL_4;
      }
    }
    do
    {
      *(_OWORD *)(v32 - 16) = *((_OWORD *)v24 - 1);
      v32 -= 16;
      v24 -= 16;
    }
    while (v24 != v25);
    uint64_t v24 = (char *)v14[6];
    goto LABEL_19;
  }
  return result;
}

void sub_1C49B01CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (!*(void *)v1) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  operator delete(v3);
  _Unwind_Resume(exception_object);
}

void sub_1C49B0508(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C49B0604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C49B16A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49B16B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49B16C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49B16DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49B16F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49B1AA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C49B1C84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4, a5, a6);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  unint64_t v12 = objc_msgSend_scriptClassificationClasses(CHStrokeUtilities, v7, v8, v9, v10, v11, 0);
  uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v34, (uint64_t)v38, 16, v14);
  if (v20)
  {
    uint64_t v21 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v35 != v21) {
          objc_enumerationMutation(v12);
        }
        unint64_t v23 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        if (objc_msgSend_integerValue(v23, v15, v16, v17, v18, v19) == 8) {
          objc_msgSend_numberWithDouble_(NSNumber, v24, v25, v26, v27, v28, 1.0);
        }
        else {
        unint64_t v29 = objc_msgSend_numberWithDouble_(NSNumber, v24, v25, v26, v27, v28, 0.0);
        }
        objc_msgSend_setObject_forKey_(v6, v30, (uint64_t)v29, (uint64_t)v23, v31, v32);
      }
      uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v15, (uint64_t)&v34, (uint64_t)v38, 16, v19);
    }
    while (v20);
  }

  BOOL v33 = (void *)qword_1EA3C90D0;
  qword_1EA3C90D0 = (uint64_t)v6;
}

void sub_1C49B1DF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49B1F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C49B1FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49B1FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49B1FE8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_containsPoint_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a2 = 1;
  }
  return result;
}

void sub_1C49B2290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C49B2540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49B29E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C49B2C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float sub_1C49B2C38(void *a1, uint64_t a2, uint64_t a3, float *a4)
{
  self;
  float __C = 0.0;
  vDSP_meanv(*(const float **)a3, 1, &__C, (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  float __B = -__C;
  uint64_t v9 = a3;
  uint64_t v8 = *(const float **)a3;
  uint64_t v7 = *(const float **)(v9 + 8);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  int64_t v10 = (char *)v7 - (char *)v8;
  vDSP_Length v11 = v7 - v8;
  if (v7 == v8)
  {
    unint64_t v12 = 0;
  }
  else
  {
    if (v10 < 0) {
      sub_1C494A220();
    }
    unint64_t v12 = (char *)operator new((char *)v7 - (char *)v8);
    *a1 = v12;
    unint64_t v13 = &v12[4 * v11];
    a1[2] = v13;
    bzero(v12, v10 & 0xFFFFFFFFFFFFFFFCLL);
    a1[1] = v13;
  }
  vDSP_vsadd(v8, 1, &__B, (float *)v12, 1, v11);
  if (a4)
  {
    float result = __C;
    *a4 = __C;
  }
  return result;
}

void sub_1C49B2D2C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C49B3554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v25 = a16;
    if (!a16)
    {
LABEL_3:
      uint64_t v26 = a20;
      if (!a20) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v25 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  uint64_t v26 = a20;
  if (!a20)
  {
LABEL_4:
    uint64_t v27 = a23;
    if (!a23) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v26);
  uint64_t v27 = a23;
  if (!a23) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

void sub_1C49B3B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v19 = *(void **)a11;
  if (*(void *)a11)
  {
    *(void *)(a11 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C49B3BD4(char **a1, uint64_t a2, uint64_t a3)
{
  self;
  unint64_t v6 = *(float **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v7 = v5 - *(void *)a3;
  if ((unint64_t)v7 <= 0xB)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  uint64_t v8 = a3;
  uint64_t v138 = a3;
  uint64_t v139 = a1;
  float v9 = *v6;
  unint64_t v10 = v7 >> 2;
  if (v10 - 3 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    vDSP_Length v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = 1;
    while (1)
    {
      while (1)
      {
        float v18 = v9;
        unint64_t v19 = v17;
        if (v10 <= v17 + 1) {
          unint64_t v10 = v17 + 1;
        }
        unint64_t v20 = v10 - 1;
        unint64_t v21 = v17;
        while (v20 != v21)
        {
          unint64_t v17 = v21 + 1;
          float v9 = v6[++v21];
          if (v6[v19] != v9) {
            goto LABEL_13;
          }
        }
        float v9 = v6[v20];
        unint64_t v17 = v20;
LABEL_13:
        float v22 = v6[v19 - 1];
        unint64_t v23 = (v17 + v19 - 1) >> 1;
        float v24 = v6[v23];
        float v25 = fminf(v22, v18);
        if (v24 > v22 && v24 > v9) {
          break;
        }
        float v9 = v25;
        unint64_t v10 = (v5 - (uint64_t)v6) >> 2;
        if (v17 >= v10 - 1) {
          goto LABEL_75;
        }
      }
      unint64_t v136 = (unint64_t)v13;
      if (v12 < v14)
      {
        *(void *)unint64_t v12 = v23;
        uint64_t v27 = (uint64_t)(v12 + 8);
        if (v11 >= v13) {
          goto LABEL_35;
        }
        goto LABEL_19;
      }
      uint64_t v29 = (v12 - v15) >> 3;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 61) {
        sub_1C494A220();
      }
      if ((v14 - v15) >> 2 > v30) {
        unint64_t v30 = (v14 - v15) >> 2;
      }
      if ((unint64_t)(v14 - v15) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31)
      {
        if (v31 >> 61) {
          goto LABEL_160;
        }
        uint64_t v32 = operator new(8 * v31);
        BOOL v33 = (unint64_t *)&v32[8 * v29];
        *BOOL v33 = v23;
        uint64_t v27 = (uint64_t)(v33 + 1);
        int64_t v34 = v12 - v15;
        if (v12 != v15)
        {
LABEL_29:
          unint64_t v35 = v34 - 8;
          if (v35 < 0x168
            || (unint64_t v51 = (v12 - 8 - v15) & 0xFFFFFFFFFFFFFFF8, &v32[v12 - v15 - 8 - v51] > &v32[v12 - v15 - 8])
            || &v12[-v51 - 8] > v12 - 8
            || (unint64_t)(v15 - v32) < 0x20)
          {
            long long v36 = v12;
          }
          else
          {
            uint64_t v52 = (v35 >> 3) + 1;
            uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
            long long v36 = &v12[-v53];
            BOOL v33 = (unint64_t *)((char *)v33 - v53);
            unint64_t v54 = &v32[8 * v29 - 16];
            uint64_t v55 = v12 - 16;
            uint64_t v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v57 = *(_OWORD *)v55;
              *(v54 - 1) = *((_OWORD *)v55 - 1);
              *unint64_t v54 = v57;
              v54 -= 2;
              v55 -= 32;
              v56 -= 4;
            }
            while (v56);
            if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_32:
              uint64_t v14 = &v32[8 * v31];
              if (!v15) {
                goto LABEL_34;
              }
LABEL_33:
              int v38 = v14;
              uint64_t v39 = v27;
              operator delete(v15);
              uint64_t v14 = v38;
              uint64_t v27 = v39;
              goto LABEL_34;
            }
          }
          do
          {
            unint64_t v37 = *((void *)v36 - 1);
            v36 -= 8;
            *--BOOL v33 = v37;
          }
          while (v36 != v15);
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v32 = 0;
        BOOL v33 = (unint64_t *)(8 * v29);
        *(void *)(8 * v29) = v23;
        uint64_t v27 = 8 * v29 + 8;
        int64_t v34 = v12 - v15;
        if (v12 != v15) {
          goto LABEL_29;
        }
      }
      uint64_t v14 = &v32[8 * v31];
      if (v15) {
        goto LABEL_33;
      }
LABEL_34:
      uint64_t v15 = (char *)v33;
      unint64_t v13 = (float *)v136;
      uint64_t v8 = v138;
      if ((unint64_t)v11 >= v136)
      {
LABEL_35:
        uint64_t v40 = v11 - v16;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          sub_1C494A220();
        }
        if (((char *)v13 - (char *)v16) >> 1 > v41) {
          unint64_t v41 = ((char *)v13 - (char *)v16) >> 1;
        }
        if ((unint64_t)((char *)v13 - (char *)v16) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        id v134 = v14;
        if (v42)
        {
          uint64_t v43 = v27;
          if (v42 >> 62) {
LABEL_160:
          }
            sub_1C4949AA8();
          id v44 = operator new(4 * v42);
          uint64_t v27 = v43;
          float v45 = (float *)&v44[4 * v40];
          *float v45 = v25;
          uint64_t v28 = (uint64_t)(v45 + 1);
          int64_t v46 = (char *)v11 - (char *)v16;
          if (v11 == v16) {
            goto LABEL_52;
          }
LABEL_49:
          unint64_t v47 = v46 - 4;
          if (v47 < 0xBC)
          {
            uint64_t v48 = v11;
            goto LABEL_51;
          }
          unint64_t v58 = ((char *)(v11 - 1) - (char *)v16) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v44[(char *)v11 - (char *)v16 - 4 - v58] > &v44[(char *)v11 - (char *)v16 - 4])
          {
            uint64_t v48 = v11;
            goto LABEL_51;
          }
          if ((float *)((char *)v11 - v58 - 4) > v11 - 1)
          {
            uint64_t v48 = v11;
            goto LABEL_51;
          }
          if ((unint64_t)((char *)v16 - v44) < 0x20)
          {
            uint64_t v48 = v11;
            goto LABEL_51;
          }
          uint64_t v59 = (v47 >> 2) + 1;
          uint64_t v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v48 = &v11[v60 / 0xFFFFFFFFFFFFFFFCLL];
          float v45 = (float *)((char *)v45 - v60);
          uint64_t v61 = &v44[4 * v40 - 16];
          float v62 = v11 - 4;
          uint64_t v63 = v59 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v64 = *(_OWORD *)v62;
            *(v61 - 1) = *((_OWORD *)v62 - 1);
            *uint64_t v61 = v64;
            v61 -= 2;
            v62 -= 8;
            v63 -= 8;
          }
          while (v63);
          if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_51:
              int v49 = *((_DWORD *)v48-- - 1);
              *((_DWORD *)v45-- - 1) = v49;
            }
            while (v48 != v16);
          }
        }
        else
        {
          id v44 = 0;
          float v45 = (float *)(4 * v40);
          *(float *)(4 * v40) = v25;
          uint64_t v28 = 4 * v40 + 4;
          int64_t v46 = (char *)v11 - (char *)v16;
          if (v11 != v16) {
            goto LABEL_49;
          }
        }
LABEL_52:
        unint64_t v13 = (float *)&v44[4 * v42];
        if (v16)
        {
          uint64_t v50 = v27;
          operator delete(v16);
          uint64_t v27 = v50;
        }
        uint64_t v16 = v45;
        uint64_t v8 = v138;
        uint64_t v14 = v134;
        goto LABEL_55;
      }
LABEL_19:
      *vDSP_Length v11 = v25;
      uint64_t v28 = (uint64_t)(v11 + 1);
LABEL_55:
      unint64_t v6 = *(float **)v8;
      uint64_t v5 = *(void *)(v8 + 8);
      vDSP_Length v11 = (float *)v28;
      unint64_t v12 = (char *)v27;
      unint64_t v10 = (v5 - *(void *)v8) >> 2;
      if (v17 >= v10 - 1) {
        goto LABEL_75;
      }
    }
  }
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  vDSP_Length v11 = 0;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
LABEL_75:
  float v65 = fminf(fminf(v9, v6[v10 - 2]), *(float *)(v5 - 4));
  if (v11 >= v13)
  {
    uint64_t v68 = v11 - v16;
    unint64_t v69 = v68 + 1;
    if ((unint64_t)(v68 + 1) >> 62) {
      sub_1C494A220();
    }
    if (((char *)v13 - (char *)v16) >> 1 > v69) {
      unint64_t v69 = ((char *)v13 - (char *)v16) >> 1;
    }
    if ((unint64_t)((char *)v13 - (char *)v16) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v70 = v69;
    }
    if (v70)
    {
      if (v70 >> 62) {
        sub_1C4949AA8();
      }
      unint64_t v71 = operator new(4 * v70);
    }
    else
    {
      unint64_t v71 = 0;
    }
    unint64_t v72 = (float *)&v71[4 * v68];
    *unint64_t v72 = v65;
    unint64_t v73 = v72 + 1;
    if (v11 != v16)
    {
      unint64_t v74 = (char *)v11 - (char *)v16 - 4;
      if (v74 < 0x2C)
      {
        unint64_t v75 = v11;
        goto LABEL_96;
      }
      if ((unint64_t)((char *)v16 - v71) < 0x20)
      {
        unint64_t v75 = v11;
        do
        {
LABEL_96:
          int v82 = *((_DWORD *)v75-- - 1);
          *((_DWORD *)v72-- - 1) = v82;
        }
        while (v75 != v16);
        goto LABEL_97;
      }
      uint64_t v76 = (v74 >> 2) + 1;
      uint64_t v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v75 = &v11[v77 / 0xFFFFFFFFFFFFFFFCLL];
      unint64_t v72 = (float *)((char *)v72 - v77);
      uint64_t v78 = &v71[4 * v68 - 16];
      uint64_t v79 = v11 - 4;
      uint64_t v80 = v76 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v81 = *(_OWORD *)v79;
        *(v78 - 1) = *((_OWORD *)v79 - 1);
        *uint64_t v78 = v81;
        v78 -= 2;
        v79 -= 8;
        v80 -= 8;
      }
      while (v80);
      if (v76 != (v76 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_96;
      }
    }
LABEL_97:
    if (v16) {
      operator delete(v16);
    }
    uint64_t v16 = v72;
    uint64_t v8 = v138;
    unint64_t v66 = v73;
    v139[1] = 0;
    v139[2] = 0;
    void *v139 = 0;
    uint64_t v67 = v12 - v15;
    if (v12 == v15) {
      goto LABEL_149;
    }
    goto LABEL_100;
  }
  *vDSP_Length v11 = v65;
  unint64_t v66 = v11 + 1;
  v139[1] = 0;
  v139[2] = 0;
  void *v139 = 0;
  uint64_t v67 = v12 - v15;
  if (v12 != v15)
  {
LABEL_100:
    float v83 = 0;
    float v84 = 0;
    long long v85 = 0;
    unint64_t v86 = 0;
    unint64_t v87 = v67 >> 3;
    uint64_t v88 = (v67 >> 3) - 1;
    if ((unint64_t)(v67 >> 3) <= 1) {
      uint64_t v89 = 1;
    }
    else {
      uint64_t v89 = v67 >> 3;
    }
    uint64_t v90 = (uint64_t *)(v15 + 8);
    uint64_t v91 = v16 + 1;
    uint64_t v92 = 0x7FFFFFFFFFFFFFFELL;
    uint64_t v131 = v67 >> 3;
    double v132 = v66;
    uint64_t v130 = v89;
    while (1)
    {
      uint64_t v95 = *(void *)&v15[8 * v86];
      uint64_t v96 = *(float **)v8;
      float v97 = *(float *)(*(void *)v8 + 4 * v95);
      float v98 = v16[v86];
      unint64_t v99 = v86;
      while (1)
      {
        unint64_t v100 = v99 - 1;
        if ((uint64_t)(v99 - 1) < 0) {
          break;
        }
        float v98 = fminf(v98, v16[v99]);
        float v101 = v96[*(void *)&v15[8 * v99-- - 8]];
        if (v101 > v97)
        {
          if (v100 != 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_112;
          }
          break;
        }
      }
      float v98 = fminf(v98, *v16);
LABEL_112:
      float v102 = v16[++v86];
      if (v86 >= v87) {
        goto LABEL_118;
      }
      uint64_t v103 = v91;
      uint64_t v104 = v90;
      uint64_t v105 = v88;
      uint64_t v106 = v92;
      while (1)
      {
        float v102 = fminf(v102, *v103);
        uint64_t v107 = *v104++;
        if (v96[v107] > v97) {
          break;
        }
        --v106;
        ++v103;
        if (!--v105) {
          goto LABEL_118;
        }
      }
      if (!v106) {
LABEL_118:
      }
        float v102 = fminf(v102, *(v66 - 1));
      if ((float)(v97 - fmaxf(v98, v102)) <= 3.0) {
        goto LABEL_106;
      }
      if (v85 >= v84) {
        break;
      }
      *(void *)long long v85 = v95;
      uint64_t v93 = (uint64_t)(v85 + 8);
      uint64_t v94 = v139;
LABEL_105:
      v94[1] = (char *)v93;
      long long v85 = (char *)v93;
LABEL_106:
      --v92;
      --v88;
      ++v90;
      ++v91;
      if (v86 == v89)
      {
        unint64_t v12 = v15;
        goto LABEL_149;
      }
    }
    uint64_t v108 = (char *)(v85 - v83);
    uint64_t v109 = (v85 - v83) >> 3;
    unint64_t v110 = v109 + 1;
    if ((unint64_t)(v109 + 1) >> 61) {
      sub_1C494A220();
    }
    if ((v84 - v83) >> 2 > v110) {
      unint64_t v110 = (v84 - v83) >> 2;
    }
    if ((unint64_t)(v84 - v83) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v111 = v110;
    }
    if (v111)
    {
      float v133 = (char *)(v85 - v83);
      uint64_t v135 = (v85 - v83) >> 3;
      uint64_t v137 = v95;
      if (v111 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v112 = v85;
      unint64_t v113 = v111;
      long long v114 = operator new(8 * v111);
      long long v85 = v112;
      unint64_t v111 = v113;
      uint64_t v109 = v135;
      uint64_t v108 = v133;
      uint64_t v115 = &v114[8 * v135];
      *(void *)uint64_t v115 = v137;
      uint64_t v93 = (uint64_t)(v115 + 8);
      uint64_t v116 = (char *)(v85 - v83);
      if (v85 == v83) {
        goto LABEL_135;
      }
    }
    else
    {
      long long v114 = 0;
      uint64_t v115 = (char *)(8 * v109);
      *(void *)(8 * v109) = v95;
      uint64_t v93 = 8 * v109 + 8;
      uint64_t v116 = (char *)(v85 - v83);
      if (v85 == v83) {
        goto LABEL_135;
      }
    }
    unint64_t v117 = (unint64_t)(v116 - 8);
    if (v117 >= 0x168)
    {
      unint64_t v123 = (v85 - 8 - v83) & 0xFFFFFFFFFFFFFFF8;
      if (&v108[(void)v114 - 8 - v123] > &v108[(void)v114 - 8])
      {
        CFTypeRef v118 = v85;
      }
      else if (&v85[-v123 - 8] > v85 - 8)
      {
        CFTypeRef v118 = v85;
      }
      else if ((unint64_t)(v85 - v114 - (void)v108) >= 0x20)
      {
        uint64_t v124 = (v117 >> 3) + 1;
        uint64_t v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
        CFTypeRef v118 = &v85[-v125];
        v115 -= v125;
        uint64_t v126 = &v114[8 * v109 - 16];
        uint64_t v127 = v85 - 16;
        uint64_t v128 = v124 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v129 = *(_OWORD *)v127;
          *(v126 - 1) = *((_OWORD *)v127 - 1);
          *uint64_t v126 = v129;
          v126 -= 2;
          v127 -= 32;
          v128 -= 4;
        }
        while (v128);
        if (v124 == (v124 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_135;
        }
      }
      else
      {
        CFTypeRef v118 = v85;
      }
    }
    else
    {
      CFTypeRef v118 = v85;
    }
    do
    {
      uint64_t v119 = *((void *)v118 - 1);
      v118 -= 8;
      *((void *)v115 - 1) = v119;
      v115 -= 8;
    }
    while (v118 != v83);
LABEL_135:
    float v84 = &v114[8 * v111];
    uint64_t v94 = v139;
    void *v139 = v115;
    v139[1] = (char *)v93;
    v139[2] = v84;
    if (v83)
    {
      uint64_t v120 = v83;
      uint64_t v121 = v84;
      uint64_t v122 = v93;
      operator delete(v120);
      uint64_t v93 = v122;
      float v84 = v121;
      uint64_t v94 = v139;
    }
    float v83 = v115;
    uint64_t v8 = v138;
    unint64_t v87 = v131;
    unint64_t v66 = v132;
    uint64_t v89 = v130;
    goto LABEL_105;
  }
LABEL_149:
  if (v12) {
    operator delete(v12);
  }
  if (v16)
  {
    operator delete(v16);
  }
}

void sub_1C49B4588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22)
{
  if (v22)
  {
    operator delete(v22);
    float v24 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    float v24 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_1C49B4DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v39 = a25;
    if (!a25)
    {
LABEL_3:
      uint64_t v40 = a30;
      if (!a30) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v39 = a25;
    if (!a25) {
      goto LABEL_3;
    }
  }
  operator delete(v39);
  uint64_t v40 = a30;
  if (!a30)
  {
LABEL_4:
    unint64_t v41 = a33;
    if (!a33) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v40);
  unint64_t v41 = a33;
  if (!a33)
  {
LABEL_5:
    unint64_t v42 = a36;
    if (!a36)
    {
LABEL_12:
      uint64_t v43 = *(void **)(v37 - 208);
      if (v43)
      {
        *(void *)(v37 - 200) = v43;
        operator delete(v43);
      }
      id v44 = *(void **)(v37 - 184);
      if (v44)
      {
        *(void *)(v37 - 176) = v44;
        operator delete(v44);
        float v45 = *(void **)(v37 - 160);
        if (!v45) {
LABEL_16:
        }
          _Unwind_Resume(exception_object);
      }
      else
      {
        float v45 = *(void **)(v37 - 160);
        if (!v45) {
          goto LABEL_16;
        }
      }
      *(void *)(v37 - 152) = v45;
      operator delete(v45);
      _Unwind_Resume(exception_object);
    }
LABEL_11:
    operator delete(v42);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(v41);
  unint64_t v42 = a36;
  if (!a36) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void sub_1C49B5FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v35 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v35;
    operator delete(v35);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C49B61EC(uint64_t a1, unint64_t a2)
{
  if (a2 > *(void *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_1C494A220();
    }
    unint64_t v3 = ((a2 - 1) >> 6) + 1;
    float64x2_t v4 = (uint64_t *)operator new(8 * v3);
    uint64_t v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    int v7 = v6 & 0x3F;
    unint64_t v8 = (v6 - 1) >> 6;
    if (v6 < 0x41) {
      unint64_t v8 = 0;
    }
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      int v9 = 0;
      int v10 = 0;
      vDSP_Length v11 = &v5[v6 >> 6];
      unint64_t v12 = v4;
      unint64_t v13 = v5;
      do
      {
        uint64_t v14 = 1 << v9;
        if ((*v13 >> v10)) {
          uint64_t v15 = *v12 | v14;
        }
        else {
          uint64_t v15 = *v12 & ~v14;
        }
        *unint64_t v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63) {
          int v10 = 0;
        }
        else {
          ++v10;
        }
        v12 += v9 == 63;
        if (v9 == 63) {
          int v9 = 0;
        }
        else {
          ++v9;
        }
      }
      while (v10 != v7 || v13 != v11);
    }
    *(void *)a1 = v4;
    *(void *)(a1 + 16) = v3;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_1C49B65CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  _Block_object_dispose(&a24, 8);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C49B66DC(uint64_t a1, double a2, double a3)
{
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 8);
  int v7 = (double *)v5[7];
  unint64_t v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    *int v7 = a2;
    v7[1] = a3;
    uint64_t v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  int v9 = (double *)v5[6];
  uint64_t v10 = ((char *)v7 - (char *)v9) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 60) {
      sub_1C4949AA8();
    }
    uint64_t v14 = (char *)operator new(16 * v13);
    uint64_t v15 = (double *)&v14[16 * v10];
    uint64_t v16 = &v14[16 * v13];
    *uint64_t v15 = a2;
    v15[1] = a3;
    uint64_t v8 = (uint64_t)(v15 + 2);
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v15 = (double *)(16 * v10);
  uint64_t v16 = 0;
  *uint64_t v15 = a2;
  v15[1] = a3;
  uint64_t v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    int v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_18:
  v5[7] = v8;
}

void sub_1C49B6804(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = objc_msgSend_UUID(MEMORY[0x1E4F29128], a2, a3, a4, a5, a6);
  objc_msgSend_UUIDString(v6, v7, v8, v9, v10, v11);
  id v25 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v12 = (void *)MEMORY[0x1E4F1CB10];
  unint64_t v13 = NSTemporaryDirectory();
  float v18 = objc_msgSend_fileURLWithPath_(v12, v14, (uint64_t)v13, v15, v16, v17);
  uint64_t v23 = objc_msgSend_URLByAppendingPathComponent_(v18, v19, (uint64_t)v25, v20, v21, v22);
  float v24 = (void *)qword_1EA3C90E0;
  qword_1EA3C90E0 = v23;
}

void sub_1C49B68AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1C49B68D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49B68E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

double sigmoidFunction(double a1)
{
  return a1 / sqrt(a1 * a1 + 1.0);
}

double sub_1C49B6914(double *a1, double *a2, uint64_t a3, char a4, double result)
{
double sub_1C49B7378(double *a1, double *a2, long long *a3)
{
  *(double *)&long long v3 = *a2;
  if (*a2 >= *a1 && (*a1 < *(double *)&v3 || a2[1] >= a1[1]))
  {
    if (*(double *)a3 < *(double *)&v3
      || *(double *)&v3 >= *(double *)a3 && (*(void *)&long long v3 = *((void *)a3 + 1), *(double *)&v3 < a2[1]))
    {
      long long v3 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *a3;
      *a3 = v3;
      *(double *)&long long v3 = *a2;
      if (*a2 < *a1 || *a1 >= *(double *)&v3 && (*(double *)&long long v3 = a2[1], *(double *)&v3 < a1[1]))
      {
        long long v3 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v3;
      }
    }
  }
  else
  {
    if (*(double *)a3 < *(double *)&v3 || *(double *)&v3 >= *(double *)a3 && *((double *)a3 + 1) < a2[1])
    {
      long long v3 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *a3;
LABEL_17:
      *a3 = v3;
      return *(double *)&v3;
    }
    long long v3 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v3;
    *(void *)&long long v3 = *(void *)a3;
    if (*(double *)a3 < *a2 || *a2 >= *(double *)&v3 && (*(void *)&long long v3 = *((void *)a3 + 1), *(double *)&v3 < a2[1]))
    {
      long long v3 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *a3;
      goto LABEL_17;
    }
  }
  return *(double *)&v3;
}

BOOL sub_1C49B74A0(double *a1, double *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v15 = a2 - 2;
      double v16 = *(a2 - 2);
      if (v16 < *a1 || *a1 >= v16 && *(a2 - 1) < a1[1])
      {
        long long v17 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v15;
        *(_OWORD *)unint64_t v15 = v17;
      }
      return result;
    case 3:
      sub_1C49B7378(a1, a1 + 2, (long long *)a2 - 1);
      return 1;
    case 4:
      float v18 = a1 + 2;
      double v19 = a1 + 4;
      sub_1C49B7378(a1, a1 + 2, (long long *)a1 + 2);
      double v20 = a2 - 2;
      double v21 = *(a2 - 2);
      double v22 = a1[4];
      if (v21 >= v22 && (v22 < v21 || *(a2 - 1) >= a1[5])) {
        return 1;
      }
      long long v23 = *(_OWORD *)v19;
      *(_OWORD *)double v19 = *(_OWORD *)v20;
      *(_OWORD *)double v20 = v23;
      if (*v19 >= *v18 && (*v18 < *v19 || a1[5] >= a1[3])) {
        return 1;
      }
      long long v24 = *(_OWORD *)v18;
      *(_OWORD *)float v18 = *(_OWORD *)v19;
      *(_OWORD *)double v19 = v24;
      double v25 = a1[2];
      if (v25 >= *a1 && (*a1 < v25 || a1[3] >= a1[1])) {
        return 1;
      }
      long long v26 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)float v18 = v26;
      return 1;
    case 5:
      sub_1C49B77CC(a1, a1 + 2, (uint64_t)(a1 + 4), (uint64_t)(a1 + 6), (void *)a2 - 2);
      return 1;
    default:
      BOOL v6 = a1 + 4;
      sub_1C49B7378(a1, a1 + 2, (long long *)a1 + 2);
      int v7 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    double v11 = *v7;
    if (*v7 >= *v6)
    {
      if (*v6 < v11) {
        goto LABEL_7;
      }
      double v12 = v7[1];
      if (v12 >= v6[1]) {
        goto LABEL_7;
      }
    }
    else
    {
      double v12 = v7[1];
    }
    *(_OWORD *)int v7 = *(_OWORD *)v6;
    uint64_t v10 = a1;
    if (v6 == a1) {
      goto LABEL_6;
    }
    uint64_t v13 = v8;
    while (1)
    {
      double v14 = *(double *)((char *)a1 + v13 + 16);
      if (v11 < v14) {
        goto LABEL_12;
      }
      if (v14 < v11) {
        break;
      }
      if (v12 >= *(double *)((char *)a1 + v13 + 24))
      {
        uint64_t v10 = v6;
        goto LABEL_6;
      }
LABEL_12:
      v6 -= 2;
      *(_OWORD *)((char *)a1 + v13 + 32) = *(_OWORD *)((char *)a1 + v13 + 16);
      v13 -= 16;
      if (v13 == -32)
      {
        uint64_t v10 = a1;
        goto LABEL_6;
      }
    }
    uint64_t v10 = (double *)((char *)a1 + v13 + 32);
LABEL_6:
    *uint64_t v10 = v11;
    v10[1] = v12;
    if (++v9 == 8) {
      return v7 + 2 == a2;
    }
LABEL_7:
    BOOL v6 = v7;
    v8 += 16;
    v7 += 2;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

double sub_1C49B77CC(double *a1, double *a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_1C49B7378(a1, a2, (long long *)a3);
  if (*(double *)a4 < *(double *)a3 || *(double *)a3 >= *(double *)a4 && *(double *)(a4 + 8) < *(double *)(a3 + 8))
  {
    long long v10 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v10;
    if (*(double *)a3 < *a2 || *a2 >= *(double *)a3 && *(double *)(a3 + 8) < a2[1])
    {
      long long v11 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v11;
      if (*a2 < *a1 || *a1 >= *a2 && a2[1] < a1[1])
      {
        long long v12 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v12;
      }
    }
  }
  *(void *)&long long v13 = *a5;
  if (*(double *)a5 < *(double *)a4
    || *(double *)a4 >= *(double *)&v13 && (*(void *)&long long v13 = a5[1], *(double *)&v13 < *(double *)(a4 + 8)))
  {
    long long v13 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v13;
    *(void *)&long long v13 = *(void *)a4;
    if (*(double *)a4 < *(double *)a3
      || *(double *)a3 >= *(double *)&v13
      && (*(void *)&long long v13 = *(void *)(a4 + 8), *(double *)&v13 < *(double *)(a3 + 8)))
    {
      long long v13 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v13;
      *(void *)&long long v13 = *(void *)a3;
      if (*(double *)a3 < *a2
        || *a2 >= *(double *)&v13 && (*(void *)&long long v13 = *(void *)(a3 + 8), *(double *)&v13 < a2[1]))
      {
        long long v13 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v13;
        *(double *)&long long v13 = *a2;
        if (*a2 < *a1 || *a1 >= *(double *)&v13 && (*(double *)&long long v13 = a2[1], *(double *)&v13 < a1[1]))
        {
          long long v13 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)a2 = v13;
        }
      }
    }
  }
  return *(double *)&v13;
}

char *sub_1C49B79D0(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = a5 - 1;
  if (a5 < 1) {
    return v8;
  }
  long long v11 = __src;
  uint64_t v13 = v7 >> 3;
  unint64_t v15 = a1[1];
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    unint64_t v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61) {
      sub_1C494A220();
    }
    uint64_t v17 = v14 - v6;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        sub_1C4949AA8();
      }
      unint64_t v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v20 = v18;
      double v21 = operator new(8 * v18);
      unint64_t v18 = v20;
      uint64_t v8 = (char *)v19;
      uint64_t v13 = v7 >> 3;
      long long v11 = __src;
    }
    else
    {
      double v21 = 0;
    }
    double v35 = &v21[8 * v13];
    double v36 = &v35[8 * a5];
    double v37 = v35;
    double v38 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_56;
    }
    double v37 = &v21[8 * v13];
    double v38 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20) {
      goto LABEL_56;
    }
    uint64_t v39 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
    double v37 = &v35[v40];
    double v38 = &v11[v40];
    double v41 = (long long *)(v11 + 16);
    double v42 = &v21[8 * v13 + 16];
    uint64_t v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v44 = *v41;
      *(v42 - 1) = *(v41 - 1);
      *double v42 = v44;
      v41 += 2;
      v42 += 2;
      v43 -= 4;
    }
    while (v43);
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        uint64_t v45 = *(void *)v38;
        v38 += 8;
        *(void *)double v37 = v45;
        v37 += 8;
      }
      while (v37 != v36);
    }
    int64_t v46 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      unint64_t v47 = v8;
      int64_t v46 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68) {
        goto LABEL_57;
      }
      unint64_t v47 = v8;
      int64_t v46 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20) {
        goto LABEL_57;
      }
      unint64_t v48 = ((unint64_t)(v7 - 8) >> 3) + 1;
      uint64_t v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v47 = &v8[-v49];
      int64_t v46 = &v35[-v49];
      uint64_t v50 = 8 * v13 - 16;
      long long v51 = &v21[v50];
      uint64_t v52 = (long long *)(v6 + v50);
      uint64_t v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v54 = *v52;
        *(v51 - 1) = *(v52 - 1);
        _OWORD *v51 = v54;
        v51 -= 2;
        v52 -= 2;
        v53 -= 4;
      }
      while (v53);
      if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_57:
        do
        {
          uint64_t v55 = *((void *)v47 - 1);
          v47 -= 8;
          *((void *)v46 - 1) = v55;
          v46 -= 8;
        }
        while (v47 != (char *)v6);
      }
    }
    uint64_t v56 = &v21[8 * v18];
    size_t v57 = v15 - (void)v8;
    if (v57) {
      memmove(&v35[8 * a5], v8, v57);
    }
    *a1 = (unint64_t)v46;
    a1[1] = (unint64_t)&v36[v57];
    a1[2] = (unint64_t)v56;
    if (v6) {
      operator delete((void *)v6);
    }
    return v35;
  }
  uint64_t v22 = v15 - (void)v8;
  uint64_t v23 = (uint64_t)(v15 - (void)v8) >> 3;
  if (v23 >= a5)
  {
    long long v24 = &__src[8 * a5];
    unint64_t v26 = a1[1];
  }
  else
  {
    long long v24 = &__src[8 * v23];
    int64_t v25 = a4 - v24;
    if (a4 != v24)
    {
      unint64_t v68 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      uint64_t v13 = v7 >> 3;
      uint64_t v8 = (char *)v68;
    }
    unint64_t v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1) {
      return v8;
    }
  }
  double v27 = &v8[8 * a5];
  size_t v28 = v26 - (void)v27;
  uint64_t v29 = (uint64_t)(v26 - (void)v27) >> 3;
  double v30 = (uint64_t *)(v26 - 8 * a5);
  double v31 = (void *)v26;
  if ((unint64_t)v30 < v15)
  {
    unint64_t v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    unint64_t v33 = v32 + v6 + 8;
    if (v15 > v33) {
      unint64_t v33 = v15;
    }
    unint64_t v34 = v33 + ~v6 - v32;
    if (v34 < 0x58)
    {
      double v31 = (void *)v26;
      do
      {
LABEL_45:
        uint64_t v64 = *v30++;
        *v31++ = v64;
      }
      while ((unint64_t)v30 < v15);
      goto LABEL_46;
    }
    double v31 = (void *)v26;
    if ((unint64_t)&v27[-(v7 & 0xFFFFFFFFFFFFFFF8) - v6] < 0x20) {
      goto LABEL_45;
    }
    uint64_t v58 = (v34 >> 3) + 1;
    uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    double v30 = (uint64_t *)((char *)v30 + v59);
    double v31 = (void *)(v26 + v59);
    uint64_t v60 = (_OWORD *)(v26 + 16);
    double v61 = (long long *)(8 * v29 + 8 * v13 + v6 + 16);
    uint64_t v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v63 = *v61;
      *(v60 - 1) = *(v61 - 1);
      *uint64_t v60 = v63;
      v60 += 2;
      v61 += 2;
      v62 -= 4;
    }
    while (v62);
    if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_45;
    }
  }
LABEL_46:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    int64_t v65 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    uint64_t v8 = v65;
  }
  if (v24 != v11)
  {
    double v35 = v8;
    memmove(v8, v11, v24 - v11);
    return v35;
  }
  return v8;
}

void *sub_1C49B7D84(void *result, char *__src, char *a3, size_t __sz)
{
  unint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
LABEL_22:
    }
      sub_1C494A220();
    uint64_t v13 = 2 * v12;
    BOOL result = operator new(16 * v12);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      BOOL result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unint64_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    unint64_t v19 = (void *)*result;
LABEL_20:
    BOOL result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  unint64_t v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    BOOL result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    unint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *unint64_t v15 = &v9[v14];
  return result;
}

void sub_1C49B8398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C49B85D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49B85EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_appendFormat_(*(void **)(a1 + 32), a2, @"    %@: %@,\n", a4, a5, a6, a2, a3);
}

void sub_1C49B89E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49B8A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49B8AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49B8AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49B8AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49B8AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49B8B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49B8BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CHDrawingStrokes::cleanup(CHDrawingStrokes *this, CHDrawingStrokes *a2, double a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  sub_1C49B8F48((uint64_t *)a2);
  end = this->strokes.__end_;
  uint64_t v7 = end - (char *)this->strokes.__begin_;
  if (!v7) {
    return 0;
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3) - (*((void *)end - 2) == *((void *)end - 3));
  if ((uint64_t)v8 < 1) {
    return 0;
  }
  begin = a2->strokes.__begin_;
  uint64_t v9 = (char *)a2->strokes.__end_;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - begin) >> 3);
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      uint64_t v13 = &begin[24 * v8];
      if (v9 != v13)
      {
        size_t v14 = (char *)a2->strokes.__end_;
        do
        {
          unint64_t v16 = (void *)*((void *)v14 - 3);
          v14 -= 24;
          unint64_t v15 = v16;
          if (v16)
          {
            *((void *)v9 - 2) = v15;
            operator delete(v15);
          }
          uint64_t v9 = v14;
        }
        while (v14 != v13);
      }
      a2->strokes.__end_ = v13;
    }
  }
  else
  {
    sub_1C49CA300((uint64_t)&a2->strokes, v8 - v11);
  }
  unint64_t v17 = (char *)a2->strokeBounds.__end_;
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - (char *)a2->strokeBounds.__begin_) >> 3);
  if (v8 <= v18)
  {
    if (v8 < v18)
    {
      unint64_t v19 = (char *)a2->strokeBounds.__begin_ + 24 * v8;
      if (v17 != v19)
      {
        unint64_t v20 = (char *)a2->strokeBounds.__end_;
        do
        {
          uint64_t v22 = (void *)*((void *)v20 - 3);
          v20 -= 24;
          double v21 = v22;
          if (v22)
          {
            *((void *)v17 - 2) = v21;
            operator delete(v21);
          }
          unint64_t v17 = v20;
        }
        while (v20 != v19);
      }
      a2->strokeBounds.__end_ = v19;
    }
  }
  else
  {
    sub_1C49CA300((uint64_t)a2, v8 - v18);
  }
  sub_1C49B90FC((uint64_t)&a2->strokeBoundsValidity, v8, 0);
  int v23 = 0;
  LODWORD(v12) = 0;
  unint64_t v24 = 0;
  unint64_t v37 = v8;
  do
  {
    int64_t v25 = (double *)*((void *)this->strokes.__begin_ + 3 * v24);
    uint64_t v26 = *((void *)this->strokes.__begin_ + 3 * v24 + 1) - (void)v25;
    unint64_t v27 = (unint64_t)(v26 >> 3) >> 1;
    sub_1C49B9378((uint64_t)a2, v24, *v25, v25[1]);
    uint64_t v12 = (v12 + 1);
    if ((unint64_t)v26 >= 0x19)
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      if (v27 <= 2) {
        unint64_t v30 = 2;
      }
      else {
        unint64_t v30 = (unint64_t)(v26 >> 3) >> 1;
      }
      uint64_t v31 = 1;
      do
      {
        uint64_t v32 = *((void *)this->strokes.__begin_ + 3 * v24);
        double v33 = *(double *)(v32 + v28 + 16);
        double v34 = *(double *)(v32 + v28 + 24);
        if (vabdd_f64(v33, *(double *)(v32 + 16 * v29)) > a3
          || vabdd_f64(v34, *(double *)(v32 + ((16 * v29) | 8))) > a3)
        {
          sub_1C49B9378((uint64_t)a2, v24, v33, v34);
          uint64_t v12 = (v12 + 1);
          uint64_t v29 = v31;
        }
        ++v31;
        v28 += 16;
      }
      while (v30 != v31);
    }
    v23 += v27;
    ++v24;
  }
  while (v24 != v37);
  if ((double)v23 * 0.1 > (double)(int)v12)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    double v35 = (id)qword_1EA3C9F98;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134218496;
      uint64_t v39 = 0x4024000000000000;
      __int16 v40 = 1024;
      int v41 = v23;
      __int16 v42 = 1024;
      int v43 = v12;
      _os_log_impl(&dword_1C492D000, v35, OS_LOG_TYPE_DEBUG, "Warning: Less than %2.1f%% of the original points remain in the drawing after cleanup (before: %d, after: %d)", buf, 0x18u);
    }
  }
  return v12;
}

void sub_1C49B8F48(uint64_t *a1)
{
  uint64_t v2 = a1 + 12;
  uint64_t v3 = a1[12];
  a1[15] = 0;
  uint64_t v4 = a1[13];
  if (v4 != v3)
  {
    uint64_t v5 = a1[13];
    do
    {
      uint64_t v7 = *(void **)(v5 - 24);
      v5 -= 24;
      unint64_t v6 = v7;
      if (v7)
      {
        *(void *)(v4 - 16) = v6;
        operator delete(v6);
      }
      uint64_t v4 = v5;
    }
    while (v5 != v3);
    uint64_t v4 = *v2;
  }
  a1[13] = v3;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3);
  if (v3 == v4)
  {
    sub_1C49CA300((uint64_t)v2, 1 - v8);
LABEL_15:
    uint64_t v14 = *a1;
    uint64_t v13 = a1[1];
    if (v13 == *a1) {
      goto LABEL_23;
    }
    goto LABEL_18;
  }
  if (v8 < 2) {
    goto LABEL_15;
  }
  uint64_t v9 = v4 + 24;
  if (v3 != v4 + 24)
  {
    uint64_t v10 = v3;
    do
    {
      uint64_t v12 = *(void **)(v10 - 24);
      v10 -= 24;
      unint64_t v11 = v12;
      if (v12)
      {
        *(void *)(v3 - 16) = v11;
        operator delete(v11);
      }
      uint64_t v3 = v10;
    }
    while (v10 != v9);
  }
  a1[13] = v9;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  if (v13 != *a1)
  {
LABEL_18:
    uint64_t v15 = v13;
    do
    {
      unint64_t v17 = *(void **)(v15 - 24);
      v15 -= 24;
      unint64_t v16 = v17;
      if (v17)
      {
        *(void *)(v13 - 16) = v16;
        operator delete(v16);
      }
      uint64_t v13 = v15;
    }
    while (v15 != v14);
    uint64_t v13 = *a1;
  }
LABEL_23:
  a1[1] = v14;
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3);
  if (v14 == v13)
  {
    sub_1C49CA300((uint64_t)a1, 1 - v18);
  }
  else if (v18 >= 2)
  {
    uint64_t v19 = v13 + 24;
    if (v14 != v13 + 24)
    {
      uint64_t v20 = v14;
      do
      {
        uint64_t v22 = *(void **)(v20 - 24);
        v20 -= 24;
        double v21 = v22;
        if (v22)
        {
          *(void *)(v14 - 16) = v21;
          operator delete(v21);
        }
        uint64_t v14 = v20;
      }
      while (v20 != v19);
    }
    a1[1] = v19;
  }
  a1[4] = 0;
  sub_1C49B90FC((uint64_t)(a1 + 3), 1uLL, 0);
  a1[7] = a1[6];
  a1[10] = a1[9];
}

void sub_1C49B90FC(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(void *)(a1 + 8) = a2;
    return;
  }
  int v6 = __len;
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    __dst = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    if ((a2 & 0x8000000000000000) != 0) {
      sub_1C494A220();
    }
    unint64_t v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
      unint64_t v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    }
    if (v8 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_1C49B61EC((uint64_t)&__dst, v11);
    uint64_t v12 = *(void **)a1;
    uint64_t v13 = *(void *)(a1 + 8);
    unint64_t v14 = v13 + v5;
    uint64_t v24 = v13 + v5;
    uint64_t v15 = (char *)__dst;
    if (v13 < 1)
    {
      LODWORD(v17) = 0;
      unint64_t v16 = (char *)__dst;
    }
    else
    {
      unint64_t v17 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40) {
        memmove(__dst, v12, 8 * v17);
      }
      unint64_t v16 = &v15[8 * v17];
      if ((v13 & 0x3F) != 0)
      {
        *(void *)unint64_t v16 = *(void *)v16 & ~(0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F)) | *((void *)v12 + v17) & (0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F));
        LODWORD(v17) = v13 & 0x3F;
      }
      else
      {
        LODWORD(v17) = 0;
      }
      uint64_t v12 = *(void **)a1;
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v15 = (char *)__dst;
      unint64_t v14 = v24;
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v14;
    __dst = v12;
    uint64_t v24 = v13;
    uint64_t v18 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    uint64_t v25 = v18;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    unint64_t v16 = (char *)(*(void *)a1 + 8 * (v4 >> 6));
    unint64_t v17 = *(void *)(a1 + 8) & 0x3FLL;
    *(void *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if (v17)
      {
        if ((64 - v17) >= v5) {
          unint64_t v19 = v5;
        }
        else {
          unint64_t v19 = (64 - v17);
        }
        *(void *)v16 |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v19)) & (-1 << v17);
        v16 += 8;
        v5 -= v19;
      }
      uint64_t v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40) {
        memset(v16, 255, 8 * (v5 >> 6));
      }
      if ((v5 & 0x3F) != 0)
      {
        unint64_t v21 = *(void *)&v16[v20] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_44:
        *(void *)&v16[v20] = v21;
      }
    }
    else
    {
      if (v17)
      {
        if ((64 - v17) >= v5) {
          unint64_t v22 = v5;
        }
        else {
          unint64_t v22 = (64 - v17);
        }
        *(void *)v16 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v22)) & (-1 << v17));
        v16 += 8;
        v5 -= v22;
      }
      uint64_t v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40) {
        bzero(v16, 8 * (v5 >> 6));
      }
      if ((v5 & 0x3F) != 0)
      {
        unint64_t v21 = *(void *)&v16[v20] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_44;
      }
    }
  }
}

void sub_1C49B9360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C49B9378(uint64_t a1, unint64_t a2, double a3, double a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a1 + 96) + 24 * a2;
  uint64_t v9 = (uint64_t *)(v8 + 8);
  unint64_t v10 = *(double **)(v8 + 8);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(v8 + 16);
  if ((unint64_t)v10 < v12)
  {
    *unint64_t v10 = a3;
    uint64_t v13 = (uint64_t)(v10 + 1);
    goto LABEL_23;
  }
  unint64_t v14 = *(double **)v8;
  uint64_t v15 = (uint64_t)v10 - *(void *)v8;
  uint64_t v16 = v15 >> 3;
  unint64_t v17 = (v15 >> 3) + 1;
  if (v17 >> 61) {
    goto LABEL_45;
  }
  uint64_t v18 = v12 - (void)v14;
  if (v18 >> 2 > v17) {
    unint64_t v17 = v18 >> 2;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v17;
  }
  if (v19)
  {
    if (v19 >> 61) {
      goto LABEL_46;
    }
    uint64_t v20 = operator new(8 * v19);
    unint64_t v21 = (double *)&v20[8 * v16];
    unint64_t v22 = &v20[8 * v19];
    *unint64_t v21 = a3;
    uint64_t v13 = (uint64_t)(v21 + 1);
    int64_t v23 = (char *)v10 - (char *)v14;
    if (v10 == v14) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v20 = 0;
  unint64_t v21 = (double *)(8 * v16);
  unint64_t v22 = 0;
  *(double *)(8 * v16) = a3;
  uint64_t v13 = 8 * v16 + 8;
  int64_t v23 = (char *)v10 - (char *)v14;
  if (v10 != v14)
  {
LABEL_14:
    unint64_t v24 = v23 - 8;
    if (v24 < 0x58) {
      goto LABEL_49;
    }
    if ((unint64_t)((char *)v10 - v20 - v15) < 0x20) {
      goto LABEL_49;
    }
    uint64_t v25 = (v24 >> 3) + 1;
    uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v11 = &v10[v26 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = (double *)((char *)v21 - v26);
    unint64_t v27 = &v20[8 * v16 - 16];
    uint64_t v28 = v10 - 2;
    uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      _OWORD *v27 = v30;
      v27 -= 2;
      v28 -= 4;
      v29 -= 4;
    }
    while (v29);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        uint64_t v31 = *((void *)v11-- - 1);
        *((void *)v21-- - 1) = v31;
      }
      while (v11 != v14);
    }
  }
LABEL_20:
  *(void *)uint64_t v8 = v21;
  *uint64_t v9 = v13;
  *(void *)(v8 + 16) = v22;
  if (v14) {
    operator delete(v14);
  }
  uint64_t v7 = a1;
LABEL_23:
  *uint64_t v9 = v13;
  uint64_t v32 = *(void *)(v7 + 96) + 24 * a2;
  double v33 = (uint64_t *)(v32 + 8);
  double v34 = *(double **)(v32 + 8);
  unint64_t v35 = *(void *)(v32 + 16);
  if ((unint64_t)v34 < v35)
  {
    *double v34 = a4;
    uint64_t v36 = (uint64_t)(v34 + 1);
    goto LABEL_44;
  }
  unint64_t v37 = *(double **)v32;
  uint64_t v38 = (uint64_t)v34 - *(void *)v32;
  uint64_t v39 = v38 >> 3;
  unint64_t v40 = (v38 >> 3) + 1;
  if (v40 >> 61) {
LABEL_45:
  }
    sub_1C494A220();
  uint64_t v41 = v35 - (void)v37;
  if (v41 >> 2 > v40) {
    unint64_t v40 = v41 >> 2;
  }
  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v42 = v40;
  }
  if (!v42)
  {
    int v43 = 0;
    uint64_t v44 = (double *)(8 * v39);
    uint64_t v45 = 0;
    *(double *)(8 * v39) = a4;
    uint64_t v36 = 8 * v39 + 8;
    int64_t v46 = (char *)v34 - (char *)v37;
    if (v34 == v37) {
      goto LABEL_42;
    }
LABEL_36:
    unint64_t v47 = v46 - 8;
    if (v47 < 0x58) {
      goto LABEL_50;
    }
    if ((unint64_t)((char *)v34 - v43 - v38) < 0x20) {
      goto LABEL_50;
    }
    uint64_t v48 = (v47 >> 3) + 1;
    uint64_t v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v50 = &v34[v49 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v44 = (double *)((char *)v44 - v49);
    long long v51 = &v43[8 * v39 - 16];
    uint64_t v52 = v34 - 2;
    uint64_t v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      _OWORD *v51 = v54;
      v51 -= 2;
      v52 -= 4;
      v53 -= 4;
    }
    while (v53);
    double v34 = v50;
    if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_50:
      do
      {
        uint64_t v55 = *((void *)v34-- - 1);
        *((void *)v44-- - 1) = v55;
      }
      while (v34 != v37);
    }
    goto LABEL_42;
  }
  if (v42 >> 61) {
LABEL_46:
  }
    sub_1C4949AA8();
  int v43 = operator new(8 * v42);
  uint64_t v44 = (double *)&v43[8 * v39];
  uint64_t v45 = &v43[8 * v42];
  *uint64_t v44 = a4;
  uint64_t v36 = (uint64_t)(v44 + 1);
  int64_t v46 = (char *)v34 - (char *)v37;
  if (v34 != v37) {
    goto LABEL_36;
  }
LABEL_42:
  *(void *)uint64_t v32 = v44;
  *double v33 = v36;
  *(void *)(v32 + 16) = v45;
  if (v37) {
    operator delete(v37);
  }
LABEL_44:
  *double v33 = v36;
  *(void *)(*(void *)(v7 + 24) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << a2);
}

void CHDrawingStrokes::generateBitmap(CHDrawingStrokes *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,int a48)
{
  STACK[0xA98] = *MEMORY[0x1E4F143B8];
  sub_1C49C5610((uint64_t)&STACK[0x7D0]);
  sub_1C49C5610((uint64_t)&v51);
  CHDrawingStrokes::cleanup(a1, (CHDrawingStrokes *)&STACK[0x7D0], 0.5);
  CHDrawingStrokes::center((CHDrawingStrokes *)&STACK[0x7D0]);
  CHDrawingStrokes::scaleTo((CHDrawingStrokes *)&STACK[0x7D0], 65536.0);
  CHDrawingStrokes::computeSparseBitmapBresenham((CHDrawingStrokes *)&STACK[0x7D0], 256);
  CHDrawingStrokes::computeSpatialFeaturesWithNoOverlapFromSparseBitmap((CHDrawingStrokes *)&STACK[0x7D0], (CHDrawingStrokes *)&v51, a2);
  *(void *)a3 = &unk_1F2011D20;
  *(_DWORD *)(a3 + 136) = a47;
  *(_DWORD *)(a3 + 140) = a48;
  operator new[]();
}

void sub_1C49B98BC(_Unwind_Exception *a1)
{
}

void sub_1C49B98D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void CHDrawingStrokes::center(CHDrawingStrokes *this)
{
  CHDrawingStrokes::computeCenter(this, (double **)&__p);
  uint64_t v2 = __p;
  begin = this->strokes.__begin_;
  end = this->strokes.__end_;
  if (end != begin)
  {
    int64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3) - (*((void *)end - 2) == *((void *)end - 3));
    if (v5 >= 1)
    {
      unint64_t v6 = 0;
      float64x2_t v7 = *(float64x2_t *)__p;
      float64x2_t v8 = (float64x2_t)vdupq_lane_s64(*(void *)__p, 0);
      float64x2_t v9 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)__p, 1);
      do
      {
        unint64_t v10 = (uint64_t *)&begin[24 * v6];
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1] - *v10;
        if ((unint64_t)v12 < 0x10) {
          goto LABEL_5;
        }
        unint64_t v13 = (unint64_t)(v12 >> 3) >> 1;
        unint64_t v14 = this->strokeBoundsValidity.__begin_;
        unint64_t v15 = v14[v6 >> 6];
        if (v13 <= 1) {
          unint64_t v13 = 1;
        }
        if (v13 >= 4)
        {
          uint64_t v16 = v13 & 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v17 = (double *)(v11 + 32);
          uint64_t v18 = v13 & 0x7FFFFFFFFFFFFFFCLL;
          do
          {
            unint64_t v19 = v17 - 4;
            float64x2x2_t v24 = vld2q_f64(v19);
            float64x2x2_t v25 = vld2q_f64(v17);
            v26.val[0] = vsubq_f64(v24.val[0], v8);
            v26.val[1] = vsubq_f64(v24.val[1], v9);
            v24.val[0] = vsubq_f64(v25.val[0], v8);
            v24.val[1] = vsubq_f64(v25.val[1], v9);
            vst2q_f64(v19, v26);
            vst2q_f64(v17, v24);
            v17 += 8;
            v18 -= 4;
          }
          while (v18);
          if (v13 == v16) {
            goto LABEL_4;
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        unint64_t v20 = v13 - v16;
        unint64_t v21 = (float64x2_t *)(v11 + 16 * v16);
        do
        {
          *unint64_t v21 = vsubq_f64(*v21, v7);
          ++v21;
          --v20;
        }
        while (v20);
LABEL_4:
        v14[v6 >> 6] = v15 & ~(1 << v6);
LABEL_5:
        ++v6;
      }
      while (v6 != v5);
    }
  }
  operator delete(v2);
}

void CHDrawingStrokes::scaleTo(CHDrawingStrokes *this, double a2)
{
  CHDrawingStrokes::getBoundingBox(this, (double **)__p);
  unint64_t v4 = __p[0];
  double v5 = *((double *)__p[0] + 3) - *((double *)__p[0] + 1);
  if (v5 <= *((double *)__p[0] + 2) - *(double *)__p[0]) {
    double v5 = *((double *)__p[0] + 2) - *(double *)__p[0];
  }
  begin = this->strokes.__begin_;
  end = this->strokes.__end_;
  if (end != begin)
  {
    int64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3) - (*((void *)end - 2) == *((void *)end - 3));
    if (v8 >= 1)
    {
      unint64_t v9 = 0;
      double v10 = a2 / v5;
      do
      {
        uint64_t v11 = (float64x2_t **)&begin[24 * v9];
        uint64_t v12 = *v11;
        uint64_t v13 = (char *)v11[1] - (char *)*v11;
        if ((unint64_t)v13 < 0x10) {
          goto LABEL_7;
        }
        unint64_t v14 = (unint64_t)(v13 >> 3) >> 1;
        unint64_t v15 = this->strokeBoundsValidity.__begin_;
        unint64_t v16 = v15[v9 >> 6];
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        if (v14 >= 2)
        {
          uint64_t v17 = v14 & 0x7FFFFFFFFFFFFFFELL;
          uint64_t v18 = v14 & 0x7FFFFFFFFFFFFFFELL;
          unint64_t v19 = v12;
          do
          {
            float64x2_t v20 = vmulq_n_f64(v19[1], v10);
            float64x2_t *v19 = vmulq_n_f64(*v19, v10);
            v19[1] = v20;
            v19 += 2;
            v18 -= 2;
          }
          while (v18);
          if (v14 == v17) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v17 = 0;
        }
        unint64_t v21 = v14 - v17;
        unint64_t v22 = &v12[v17];
        do
        {
          *unint64_t v22 = vmulq_n_f64(*v22, v10);
          ++v22;
          --v21;
        }
        while (v21);
LABEL_6:
        v15[v9 >> 6] = v16 & ~(1 << (v9 & 0x3F));
LABEL_7:
        ++v9;
      }
      while (v9 != v8);
    }
  }
  __p[1] = v4;
  operator delete(v4);
}

void CHDrawingStrokes::computeSparseBitmapBresenham(CHDrawingStrokes *this, signed int a2)
{
  CHDrawingStrokes::getBoundingBox(this, (double **)__p);
  uint64_t v4 = 0;
  double v5 = *((double *)__p[0] + 3) - *((double *)__p[0] + 1);
  double v6 = *((double *)__p[0] + 2) - *(double *)__p[0];
  int v7 = a2 / 10;
  int v8 = a2 - 2 * (a2 / 10);
  BOOL v9 = v5 <= v6;
  if (v5 <= v6) {
    double v10 = *((double *)__p[0] + 2) - *(double *)__p[0];
  }
  else {
    double v10 = *((double *)__p[0] + 3) - *((double *)__p[0] + 1);
  }
  if (v5 > v6) {
    double v5 = *((double *)__p[0] + 2) - *(double *)__p[0];
  }
  double v11 = v10 / (double)v8 + 0.001;
  unsigned int v12 = vcvtmd_s64_f64((1.0 - v5 / v10) * (double)v8 * 0.5);
  this->unsigned int mSize = a2;
  uint64_t v103 = (void **)&this[2].bitmap._vptr$Matrix;
  uint64_t v13 = (double *)this[2].bitmap._vptr$Matrix;
  this[2].bitmap._data = v13;
  if (v9) {
    unsigned int v14 = 0;
  }
  else {
    unsigned int v14 = v12;
  }
  unsigned int v15 = v14 + v7;
  if (!v9) {
    unsigned int v12 = 0;
  }
  unsigned int v100 = v12 + v7;
  unsigned int v101 = v15;
  double v97 = v11;
  float64x2_t v98 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11, 0);
  while (1)
  {
    begin = (char *)this->strokes.__begin_;
    end = (char *)this->strokes.__end_;
    if (end == begin) {
      break;
    }
    if (v4 >= -(uint64_t)(*((void *)end - 2) == *((void *)end - 3)) - 0x5555555555555555 * ((end - begin) >> 3)) {
      goto LABEL_109;
    }
LABEL_19:
    float64x2_t v20 = &begin[24 * v4];
    unint64_t v19 = *(double **)v20;
    if (*((void *)v20 + 1) - *(void *)v20 >= 0x19uLL)
    {
      int64_t v21 = 0;
      uint64_t v99 = v4;
      while (1)
      {
        unsigned int mSize = this->mSize;
        int64_t v102 = v21 + 1;
        int32x2_t v23 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vdivq_f64(vsubq_f64(*(float64x2_t *)&v19[2 * v21], *(float64x2_t *)__p[0]), v98))));
        int32x2_t v24 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vdivq_f64(vsubq_f64(*(float64x2_t *)&v19[2 * v21 + 2], *(float64x2_t *)__p[0]), v98))));
        int32x2_t v25 = vcgt_s32(v24, v23);
        unsigned __int32 v26 = v101 + v23.i32[0];
        unsigned __int32 v27 = v100 + v23.i32[1];
        unsigned __int32 v28 = v101 + v24.i32[0];
        unsigned __int32 v29 = v100 + v24.i32[1];
        if (v24.i32[0] - v23.i32[0] >= 0) {
          unsigned int v30 = v24.i32[0] - v23.i32[0];
        }
        else {
          unsigned int v30 = v23.i32[0] - v24.i32[0];
        }
        if (v25.i8[0]) {
          int v31 = 1;
        }
        else {
          int v31 = -1;
        }
        unsigned int v110 = this->mSize;
        unsigned __int32 v111 = v100 + v24.i32[1];
        if ((int)(v29 - v27) >= 0) {
          int v32 = v29 - v27;
        }
        else {
          int v32 = v27 - v29;
        }
        if (v25.i8[4]) {
          int v33 = 1;
        }
        else {
          int v33 = -1;
        }
        if (v30 <= v32) {
          int v34 = -v32;
        }
        else {
          int v34 = v30;
        }
        int v35 = v34 / 2;
        int v36 = -v30;
        unsigned int v108 = v30;
        unsigned __int32 v109 = v101 + v24.i32[0];
        int v106 = v32;
        int v107 = v31;
        int v104 = -v30;
        int v105 = v33;
        while (1)
        {
          unsigned __int32 v42 = v27 + v26 * mSize;
          unint64_t v43 = *(void *)&this[2].bitmap._w;
          if ((unint64_t)v13 < v43) {
            break;
          }
          uint64_t v44 = (double *)*v103;
          uint64_t v45 = (char *)v13 - (unsigned char *)*v103;
          uint64_t v46 = v45 >> 2;
          unint64_t v47 = (v45 >> 2) + 1;
          if (v47 >> 62) {
            sub_1C494A220();
          }
          uint64_t v48 = v43 - (void)v44;
          if (v48 >> 1 > v47) {
            unint64_t v47 = v48 >> 1;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49)
          {
            if (v49 >> 62) {
              sub_1C4949AA8();
            }
            uint64_t v50 = v13;
            uint64_t v51 = operator new(4 * v49);
            uint64_t v13 = v50;
            uint64_t v52 = (void **)&v51[4 * v46];
            *(_DWORD *)uint64_t v52 = v42;
            uint64_t v53 = (double *)((char *)v52 + 4);
            int64_t v54 = (char *)v13 - (char *)v44;
            if (v13 == v44) {
              goto LABEL_68;
            }
          }
          else
          {
            uint64_t v51 = 0;
            uint64_t v52 = (void **)(4 * v46);
            *(_DWORD *)(4 * v46) = v42;
            uint64_t v53 = (double *)(4 * v46 + 4);
            int64_t v54 = (char *)v13 - (char *)v44;
            if (v13 == v44) {
              goto LABEL_68;
            }
          }
          unint64_t v55 = v54 - 4;
          if (v55 < 0xBC)
          {
            uint64_t v56 = v13;
            goto LABEL_67;
          }
          unint64_t v58 = ((char *)v13 - 4 - (char *)v44) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v51[v45 - 4 - v58] > &v51[v45 - 4])
          {
            uint64_t v56 = v13;
            do
            {
LABEL_67:
              int v57 = *((_DWORD *)v56 - 1);
              uint64_t v56 = (double *)((char *)v56 - 4);
              *((_DWORD *)v52 - 1) = v57;
              uint64_t v52 = (void **)((char *)v52 - 4);
            }
            while (v56 != v44);
            goto LABEL_68;
          }
          if ((char *)v13 - v58 - 4 > (char *)v13 - 4)
          {
            uint64_t v56 = v13;
            goto LABEL_67;
          }
          if ((unint64_t)((char *)v13 - &v51[v45]) < 0x20)
          {
            uint64_t v56 = v13;
            goto LABEL_67;
          }
          uint64_t v59 = (v55 >> 2) + 1;
          uint64_t v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v56 = (double *)((char *)v13 - v60);
          uint64_t v52 = (void **)((char *)v52 - v60);
          double v61 = &v51[4 * v46 - 16];
          uint64_t v62 = v13 - 2;
          uint64_t v63 = v59 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v64 = *(_OWORD *)v62;
            *(v61 - 1) = *((_OWORD *)v62 - 1);
            *double v61 = v64;
            v61 -= 2;
            v62 -= 4;
            v63 -= 8;
          }
          while (v63);
          if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_67;
          }
LABEL_68:
          this[2].bitmap._vptr$MatriCGFloat x = v52;
          this[2].bitmap._data = v53;
          *(void *)&this[2].bitmap._w = &v51[4 * v49];
          if (v44) {
            operator delete(v44);
          }
          uint64_t v13 = v53;
          unsigned __int32 v28 = v109;
          unsigned int mSize = v110;
          int v31 = v107;
          unsigned int v30 = v108;
          int v33 = v105;
          int v32 = v106;
          int v36 = v104;
          this[2].bitmap._data = v53;
          if (v26 == v109) {
            goto LABEL_39;
          }
LABEL_40:
          if (v35 <= v36) {
            int v37 = 0;
          }
          else {
            int v37 = v31;
          }
          v26 += v37;
          if (v35 <= v36) {
            int v38 = 0;
          }
          else {
            int v38 = v32;
          }
          int v39 = v35 - v38;
          if (v35 >= v32) {
            int v40 = 0;
          }
          else {
            int v40 = v33;
          }
          v27 += v40;
          if (v35 >= v32) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = v30;
          }
          int v35 = v39 + v41;
        }
        *(_DWORD *)uint64_t v13 = v42;
        uint64_t v13 = (double *)((char *)v13 + 4);
        this[2].bitmap._data = v13;
        if (v26 != v28) {
          goto LABEL_40;
        }
LABEL_39:
        if (v27 != v111) {
          goto LABEL_40;
        }
        uint64_t v4 = v99;
        unint64_t v19 = (double *)*((void *)this->strokes.__begin_ + 3 * v99);
        int64_t v21 = v102;
        if (v102 >= (uint64_t)(((unint64_t)((uint64_t)(*((void *)this->strokes.__begin_ + 3 * v99 + 1)
                                                           - (void)v19) >> 3) >> 1)
                             - 1))
          goto LABEL_14;
      }
    }
    unsigned int v65 = v100
        + vcvtmd_s64_f64((v19[1] - *((double *)__p[0] + 1)) / v97)
        + (v101 + vcvtmd_s64_f64((*v19 - *(double *)__p[0]) / v97)) * this->mSize;
    unint64_t v66 = *(void *)&this[2].bitmap._w;
    if ((unint64_t)v13 >= v66)
    {
      uint64_t v67 = (double *)*v103;
      uint64_t v68 = (char *)v13 - (unsigned char *)*v103;
      uint64_t v69 = v68 >> 2;
      unint64_t v70 = (v68 >> 2) + 1;
      if (v70 >> 62) {
        sub_1C494A220();
      }
      uint64_t v71 = v66 - (void)v67;
      if (v71 >> 1 > v70) {
        unint64_t v70 = v71 >> 1;
      }
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v72 = v70;
      }
      if (v72)
      {
        if (v72 >> 62) {
          sub_1C4949AA8();
        }
        uint64_t v73 = v13;
        double v74 = operator new(4 * v72);
        uint64_t v13 = v73;
        uint64_t v75 = (void **)&v74[4 * v69];
        *(_DWORD *)uint64_t v75 = v65;
        unint64_t v16 = (double *)((char *)v75 + 4);
        int64_t v76 = (char *)v13 - (char *)v67;
        if (v13 == v67) {
          goto LABEL_97;
        }
LABEL_94:
        unint64_t v77 = v76 - 4;
        if (v77 < 0xBC)
        {
          uint64_t v78 = v13;
          goto LABEL_96;
        }
        unint64_t v80 = ((char *)v13 - 4 - (char *)v67) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v74[v68 - 4 - v80] > &v74[v68 - 4])
        {
          uint64_t v78 = v13;
          goto LABEL_96;
        }
        if ((char *)v13 - v80 - 4 > (char *)v13 - 4)
        {
          uint64_t v78 = v13;
          goto LABEL_96;
        }
        if ((unint64_t)((char *)v13 - v74 - v68) < 0x20)
        {
          uint64_t v78 = v13;
          goto LABEL_96;
        }
        uint64_t v81 = (v77 >> 2) + 1;
        uint64_t v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v78 = (double *)((char *)v13 - v82);
        uint64_t v75 = (void **)((char *)v75 - v82);
        double v83 = &v74[4 * v69 - 16];
        uint64_t v84 = v13 - 2;
        uint64_t v85 = v81 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v86 = *(_OWORD *)v84;
          *(v83 - 1) = *((_OWORD *)v84 - 1);
          _OWORD *v83 = v86;
          v83 -= 2;
          v84 -= 4;
          v85 -= 8;
        }
        while (v85);
        if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_96:
            int v79 = *((_DWORD *)v78 - 1);
            uint64_t v78 = (double *)((char *)v78 - 4);
            *((_DWORD *)v75 - 1) = v79;
            uint64_t v75 = (void **)((char *)v75 - 4);
          }
          while (v78 != v67);
        }
      }
      else
      {
        double v74 = 0;
        uint64_t v75 = (void **)(4 * v69);
        *(_DWORD *)(4 * v69) = v65;
        unint64_t v16 = (double *)(4 * v69 + 4);
        int64_t v76 = (char *)v13 - (char *)v67;
        if (v13 != v67) {
          goto LABEL_94;
        }
      }
LABEL_97:
      this[2].bitmap._vptr$MatriCGFloat x = v75;
      this[2].bitmap._data = v16;
      *(void *)&this[2].bitmap._w = &v74[4 * v72];
      if (v67) {
        operator delete(v67);
      }
      goto LABEL_13;
    }
    *(_DWORD *)uint64_t v13 = v65;
    unint64_t v16 = (double *)((char *)v13 + 4);
LABEL_13:
    this[2].bitmap._data = v16;
    uint64_t v13 = v16;
LABEL_14:
    ++v4;
  }
  if (v4 < 0) {
    goto LABEL_19;
  }
LABEL_109:
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v87 = this[2].bitmap._vptr$Matrix;
  data = this[2].bitmap._data;
  if (v87 != (void **)data)
  {
    uint64_t v89 = (double *)((char *)v87 + 4);
    while (v89 != data)
    {
      int v90 = *((_DWORD *)v89 - 1);
      int v91 = *(_DWORD *)v89;
      uint64_t v89 = (double *)((char *)v89 + 4);
      if (v90 == v91)
      {
        double v92 = v89 - 1;
        while (v89 != data)
        {
          int v93 = v90;
          int v90 = *(_DWORD *)v89;
          if (v93 != *(_DWORD *)v89)
          {
            *((_DWORD *)v92 + 1) = v90;
            double v92 = (double *)((char *)v92 + 4);
          }
          uint64_t v89 = (double *)((char *)v89 + 4);
        }
        double v95 = (double *)((char *)v92 + 4);
        long long v96 = (char *)((char *)data - ((char *)v92 + 4));
        if (data == (double *)((char *)v92 + 4)) {
          break;
        }
        if (data != (double *)&v96[(void)v95]) {
          memmove((char *)v92 + 4, &v96[(void)v95], 0);
        }
        this[2].bitmap._data = v95;
        double v94 = __p[0];
        if (__p[0]) {
          goto LABEL_119;
        }
        return;
      }
    }
  }
  double v94 = __p[0];
  if (__p[0])
  {
LABEL_119:
    __p[1] = v94;
    operator delete(v94);
  }
}

void sub_1C49BA270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CHDrawingStrokes::computeSpatialFeaturesWithNoOverlapFromSparseBitmap(CHDrawingStrokes *this, CHDrawingStrokes *a2, unsigned int a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unsigned int mSize = this->mSize;
  if (mSize < a3)
  {
    unint64_t v22 = CHOSLogForCategory(1);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      unsigned int v23 = this->mSize;
      int v25 = 67109376;
      unsigned int v26 = a3;
      __int16 v27 = 1024;
      unsigned int v28 = v23;
      _os_log_impl(&dword_1C492D000, v22, OS_LOG_TYPE_ERROR, "Error: computeSpatialFeaturesWithNoOverlapFromSparseBitmap: new bitmap size (%u) is larger than the original size (%u)\n", (uint8_t *)&v25, 0xEu);
    }

    exit(1);
  }
  if (!a3)
  {
    int32x2_t v24 = CHOSLogForCategory(1);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      int v25 = 67109120;
      unsigned int v26 = 0;
      _os_log_impl(&dword_1C492D000, v24, OS_LOG_TYPE_ERROR, "Error: computeSpatialFeaturesWithNoOverlapFromSparseBitmap: new bitmap size (%u) is equal to 0\n", (uint8_t *)&v25, 8u);
    }

    exit(1);
  }
  a2->unsigned int mSize = a3;
  begin = a2[2].strokeBounds.__begin_;
  if (a3 * a3 != HIDWORD(a2[2].strokeBounds.__end_) * LODWORD(a2[2].strokeBounds.__end_))
  {
    if (begin) {
      MEMORY[0x1C8786430](begin, 0x1000C8000313F17);
    }
    operator new[]();
  }
  HIDWORD(a2[2].strokeBounds.__end_) = a3;
  LODWORD(a2[2].strokeBounds.__end_) = a3;
  bzero(begin, 8 * a3 * (unint64_t)a3);
  int v8 = this[2].bitmap._vptr$Matrix;
  data = this[2].bitmap._data;
  if (v8 == (void **)data) {
    return 0;
  }
  uint64_t result = 0;
  signed int v11 = (mSize % a3) >> 1;
  int v12 = mSize / a3 * a3 + v11 - 1;
  uint64_t v13 = (char *)a2[2].strokeBounds.__begin_;
  int end = (int)a2[2].strokeBounds.__end_;
  do
  {
    int v15 = *(_DWORD *)v8 / mSize;
    int v16 = *(_DWORD *)v8 % mSize;
    if (v16 <= v12 && v15 >= v11 && v15 <= v12 && v16 >= v11)
    {
      uint64_t v20 = 8 * ((v15 - v11) / (int)(mSize / a3) + (v16 - v11) / (int)(mSize / a3) * end);
      double v21 = *(double *)&v13[v20] + 1.0;
      *(double *)&v13[v20] = v21;
      if (v21 <= (double)(int)result) {
        uint64_t result = result;
      }
      else {
        uint64_t result = (int)v21;
      }
    }
    int v8 = (void **)((char *)v8 + 4);
  }
  while (v8 != (void **)data);
  return result;
}

uint64_t previousOrientationIndex(int a1, int a2, int a3)
{
  if (a2 == a1) {
    return 1;
  }
  float v4 = (float)((a2 - a1 + a3) % a3);
  float v5 = (float)a3;
  if ((float)((float)((float)((float)a3 * 20.0) / 360.0) + 1.0) > v4) {
    return 2;
  }
  if ((float)((float)((float)(v5 * 70.0) / 360.0) + 1.0) > v4) {
    return 3;
  }
  if ((float)((float)((float)(v5 * 110.0) / 360.0) + 1.0) > v4) {
    return 4;
  }
  if ((float)((float)((float)(v5 * 160.0) / 360.0) + 1.0) > v4) {
    return 5;
  }
  if ((float)((float)((float)(v5 * 200.0) / 360.0) + 1.0) > v4) {
    return 6;
  }
  if ((float)((float)((float)(v5 * 250.0) / 360.0) + 1.0) > v4) {
    return 7;
  }
  if ((float)((float)((float)(v5 * 290.0) / 360.0) + 1.0) > v4) {
    return 8;
  }
  if ((float)((float)((float)(v5 * 340.0) / 360.0) + 1.0) <= v4) {
    return 10;
  }
  return 9;
}

void CHDrawingStrokes::generateOrientation(CHDrawingStrokes *this)
{
}

void sub_1C49BC57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a41)
  {
    MEMORY[0x1C8786430](a41, 0x1000C8052888210);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CHDrawingStrokes::getBoundingBox(CHDrawingStrokes *this@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int end = this->strokes.__end_;
  double v4 = 0.0;
  double v5 = 0.000001;
  uint64_t v6 = end - (char *)this->strokes.__begin_;
  if (!v6)
  {
    double v9 = 0.0;
LABEL_17:
    double v10 = v5;
    goto LABEL_18;
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  uint64_t v8 = *((void *)end - 2) == *((void *)end - 3);
  double v9 = 0.0;
  double v10 = 0.000001;
  uint64_t v11 = v7 - v8;
  if (v7 == v8) {
    goto LABEL_18;
  }
  if (v11 < 1)
  {
    double v5 = -1.79769313e308;
    double v4 = 1.79769313e308;
    double v9 = 1.79769313e308;
    goto LABEL_17;
  }
  unint64_t v13 = 0;
  double v9 = 1.79769313e308;
  double v10 = -1.79769313e308;
  double v5 = -1.79769313e308;
  double v4 = 1.79769313e308;
  do
  {
    CHDrawingStrokes::getBoundingBoxForStroke(this, v13, __p);
    if (*(double *)__p[0] < v4) {
      double v4 = *(double *)__p[0];
    }
    if (*((double *)__p[0] + 1) < v9) {
      double v9 = *((double *)__p[0] + 1);
    }
    if (*((double *)__p[0] + 2) > v5) {
      double v5 = *((double *)__p[0] + 2);
    }
    if (*((double *)__p[0] + 3) > v10) {
      double v10 = *((double *)__p[0] + 3);
    }
    __p[1] = __p[0];
    operator delete(__p[0]);
    ++v13;
  }
  while (v11 != v13);
LABEL_18:
  sub_1C49CA658((uint64_t)a2, 4uLL);
  unsigned int v14 = *a2;
  double *v14 = v4;
  v14[1] = v9;
  _OWORD v14[2] = v5;
  v14[3] = v10;
}

void sub_1C49BC6F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double CHDrawingStrokes::computeCenter@<D0>(CHDrawingStrokes *this@<X0>, double **a2@<X8>)
{
  begin = (char *)this->strokes.__begin_;
  int end = (char *)this->strokes.__end_;
  double v5 = 1.0;
  double v6 = 0.0;
  if (end == begin)
  {
    double v11 = 0.0;
    goto LABEL_26;
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3);
  BOOL v8 = *((void *)end - 2) == *((void *)end - 3);
  if (*((void *)end - 2) == *((void *)end - 3)) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v7 - v8;
  double v11 = 0.0;
  if (v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      unint64_t v13 = &begin[24 * i];
      uint64_t v14 = *(void *)v13;
      uint64_t v15 = *((void *)v13 + 1) - *(void *)v13;
      if ((unint64_t)v15 >= 0x10)
      {
        unint64_t v16 = (unint64_t)(v15 >> 3) >> 1;
        if (v16 <= 1) {
          unint64_t v16 = 1;
        }
        uint64_t v17 = (double *)(v14 + 8);
        do
        {
          double v11 = v11 + *(v17 - 1);
          double v6 = v6 + *v17;
          v17 += 2;
          --v16;
        }
        while (v16);
      }
    }
    if ((unint64_t)v10 >= 2)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      unint64_t v18 = v10 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v22 = (uint64_t *)(begin + 24);
      unint64_t v23 = v10 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v24 = *(v22 - 3);
        uint64_t v25 = *(v22 - 2);
        uint64_t v27 = *v22;
        uint64_t v26 = v22[1];
        v22 += 6;
        v20 += (unint64_t)((v25 - v24) >> 3) >> 1;
        v21 += (unint64_t)((v26 - v27) >> 3) >> 1;
        v23 -= 2;
      }
      while (v23);
      unint64_t v19 = v21 + v20;
      if (v10 == v18)
      {
LABEL_22:
        if (v19 <= 1) {
          uint64_t v30 = 1;
        }
        else {
          uint64_t v30 = v19;
        }
        double v5 = (double)v30;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v18 = 0;
      unint64_t v19 = 0;
    }
    unint64_t v28 = v7 + v9 - v18;
    uint64_t v29 = &begin[24 * v18 + 8];
    do
    {
      v19 += (unint64_t)((uint64_t)(*(void *)v29 - *((void *)v29 - 1)) >> 3) >> 1;
      v29 += 24;
      --v28;
    }
    while (v28);
    goto LABEL_22;
  }
LABEL_26:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v31 = (double *)operator new(0x10uLL);
  double result = v6 / v5;
  a2[1] = v31 + 2;
  a2[2] = v31 + 2;
  double *v31 = v11 / v5;
  v31[1] = v6 / v5;
  *a2 = v31;
  return result;
}

uint64_t CHDrawingStrokes::totalNumPoints(CHDrawingStrokes *this)
{
  begin = this->strokes.__begin_;
  int end = this->strokes.__end_;
  if (end == begin) {
    return 0;
  }
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3);
  BOOL v4 = *((void *)end - 2) == *((void *)end - 3);
  uint64_t v5 = *((void *)end - 2) == *((void *)end - 3) ? -1 : 0;
  uint64_t v6 = v3 - v4;
  if (v6 < 1) {
    return 0;
  }
  if ((unint64_t)v6 >= 5)
  {
    uint64_t v9 = v6 & 3;
    if ((v6 & 3) == 0) {
      uint64_t v9 = 4;
    }
    uint64_t v7 = v6 - v9;
    int64x2_t v10 = 0uLL;
    uint64_t v11 = v7;
    int v12 = (const double *)this->strokes.__begin_;
    int64x2_t v13 = 0uLL;
    do
    {
      uint64_t v14 = v12;
      v12 += 12;
      float64x2x3_t v17 = vld3q_f64(v14);
      v14 += 6;
      int64x2_t v10 = (int64x2_t)vsraq_n_u64((uint64x2_t)v10, (uint64x2_t)vshrq_n_s64(vsubq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), 3uLL), 1uLL);
      float64x2x3_t v18 = vld3q_f64(v14);
      int64x2_t v13 = (int64x2_t)vsraq_n_u64((uint64x2_t)v13, (uint64x2_t)vshrq_n_s64(vsubq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), 3uLL), 1uLL);
      v11 -= 4;
    }
    while (v11);
    uint64_t result = vaddvq_s64(vaddq_s64(v13, v10));
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
  unint64_t v15 = v3 + v5 - v7;
  unint64_t v16 = &begin[24 * v7 + 8];
  do
  {
    result += (unint64_t)((uint64_t)(*v16 - *(v16 - 1)) >> 3) >> 1;
    v16 += 3;
    --v15;
  }
  while (v15);
  return result;
}

CHDrawingStrokes *CHDrawingStrokes::translateBy(CHDrawingStrokes *this, float64_t a2, float64_t a3)
{
  begin = this->strokes.__begin_;
  int end = this->strokes.__end_;
  if (end != begin)
  {
    int64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3) - (*((void *)end - 2) == *((void *)end - 3));
    if (v5 >= 1)
    {
      unint64_t v6 = 0;
      v7.f64[0] = a2;
      v7.f64[1] = a3;
      do
      {
        BOOL v8 = (float64x2_t **)&begin[24 * v6];
        uint64_t v9 = *v8;
        uint64_t v10 = (char *)v8[1] - (char *)*v8;
        if ((unint64_t)v10 < 0x10) {
          goto LABEL_5;
        }
        unint64_t v11 = (unint64_t)(v10 >> 3) >> 1;
        int v12 = this->strokeBoundsValidity.__begin_;
        unint64_t v13 = v12[v6 >> 6];
        if (v11 <= 1) {
          unint64_t v11 = 1;
        }
        if (v11 >= 4)
        {
          uint64_t v14 = v11 & 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v15 = v9 + 2;
          uint64_t v16 = v11 & 0x7FFFFFFFFFFFFFFCLL;
          do
          {
            float64x2_t v17 = *v15;
            float64x2_t v18 = v15[1];
            float64x2_t v19 = vaddq_f64(v15[-1], v7);
            v15[-2] = vaddq_f64(v15[-2], v7);
            v15[-1] = v19;
            *unint64_t v15 = vaddq_f64(v17, v7);
            v15[1] = vaddq_f64(v18, v7);
            v15 += 4;
            v16 -= 4;
          }
          while (v16);
          if (v11 == v14) {
            goto LABEL_4;
          }
        }
        else
        {
          uint64_t v14 = 0;
        }
        unint64_t v20 = v11 - v14;
        uint64_t v21 = &v9[v14].f64[1];
        do
        {
          double v22 = *v21 + a3;
          *(v21 - 1) = *(v21 - 1) + a2;
          *uint64_t v21 = v22;
          v21 += 2;
          --v20;
        }
        while (v20);
LABEL_4:
        v12[v6 >> 6] = v13 & ~(1 << (v6 & 0x3F));
LABEL_5:
        ++v6;
      }
      while (v6 != v5);
    }
  }
  return this;
}

CHDrawingStrokes *CHDrawingStrokes::pathLength(CHDrawingStrokes *this)
{
  begin = this->strokes.__begin_;
  int end = this->strokes.__end_;
  double v3 = 0.0;
  if (end != begin)
  {
    int64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3) - (*((void *)end - 2) == *((void *)end - 3));
    if (v4 >= 1)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = *(void *)&begin[24 * i];
        uint64_t v7 = *(void *)&begin[24 * i + 8] - v6;
        if ((unint64_t)v7 >= 0x19)
        {
          unint64_t v8 = (unint64_t)(v7 >> 3) >> 1;
          if (v8 <= 2) {
            unint64_t v8 = 2;
          }
          if (v8 >= 5)
          {
            unint64_t v10 = (v8 - 1) & 0xFFFFFFFFFFFFFFFCLL;
            uint64_t v9 = v10 | 1;
            this = (CHDrawingStrokes *)(v6 + 32);
            unint64_t v11 = v10;
            do
            {
              float64x2_t v13 = *(float64x2_t *)&this->strokeBounds.__end_cap_.__value_;
              float64x2_t v12 = *(float64x2_t *)&this->strokeBoundsValidity.__size_;
              float64x2_t v15 = *(float64x2_t *)&this[-1].lineHeight;
              float64x2_t v14 = *(float64x2_t *)&this[-1].sparseBitmap.__end_;
              float64x2_t v16 = *(float64x2_t *)&this->strokeBounds.__begin_;
              this = (CHDrawingStrokes *)((char *)this + 64);
              float64x2_t v17 = vsubq_f64(v16, v14);
              float64x2_t v18 = vsubq_f64(v14, v15);
              float64x2_t v19 = (float64x2_t)vzip1q_s64((int64x2_t)v18, (int64x2_t)v17);
              float64x2_t v20 = vsubq_f64(v12, v13);
              float64x2_t v21 = vsubq_f64(v13, v16);
              float64x2_t v22 = (float64x2_t)vzip1q_s64((int64x2_t)v21, (int64x2_t)v20);
              float64x2_t v23 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v18, v18), (int64x2_t)vmulq_f64(v17, v17)), v19, v19));
              float64x2_t v24 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v21, v21), (int64x2_t)vmulq_f64(v20, v20)), v22, v22));
              double v3 = v3 + v23.f64[0] + v23.f64[1] + v24.f64[0] + v24.f64[1];
              v11 -= 4;
            }
            while (v11);
            if (v8 - 1 == v10) {
              continue;
            }
          }
          else
          {
            uint64_t v9 = 1;
          }
          unint64_t v25 = v8 - v9;
          uint64_t v26 = (double *)(v6 + 16 * v9);
          do
          {
            double v3 = v3 + sqrt((v26[1] - *(v26 - 1)) * (v26[1] - *(v26 - 1)) + (*v26 - *(v26 - 2)) * (*v26 - *(v26 - 2)));
            v26 += 2;
            --v25;
          }
          while (v25);
        }
      }
    }
  }
  return this;
}

double CHDrawingStrokes::pathLength(CHDrawingStrokes *this, uint64_t a2)
{
  uint64_t v2 = (float64x2_t *)*((void *)this->strokes.__begin_ + 3 * a2);
  uint64_t v3 = *((void *)this->strokes.__begin_ + 3 * a2 + 1) - (void)v2;
  double result = 0.0;
  if ((unint64_t)v3 >= 0x19)
  {
    unint64_t v5 = (unint64_t)(v3 >> 3) >> 1;
    if (v5 <= 2) {
      unint64_t v5 = 2;
    }
    if (v5 < 5)
    {
      uint64_t v6 = 1;
LABEL_9:
      unint64_t v23 = v5 - v6;
      f64 = v2[v6].f64;
      do
      {
        double result = result
               + sqrt((f64[1] - *(f64 - 1)) * (f64[1] - *(f64 - 1)) + (*f64 - *(f64 - 2)) * (*f64 - *(f64 - 2)));
        f64 += 2;
        --v23;
      }
      while (v23);
      return result;
    }
    unint64_t v7 = (v5 - 1) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v6 = v7 | 1;
    unint64_t v8 = v2 + 2;
    unint64_t v9 = v7;
    do
    {
      float64x2_t v11 = v8[1];
      float64x2_t v10 = v8[2];
      float64x2_t v13 = v8[-2];
      float64x2_t v12 = v8[-1];
      float64x2_t v14 = *v8;
      v8 += 4;
      float64x2_t v15 = vsubq_f64(v14, v12);
      float64x2_t v16 = vsubq_f64(v12, v13);
      float64x2_t v17 = (float64x2_t)vzip1q_s64((int64x2_t)v16, (int64x2_t)v15);
      float64x2_t v18 = vsubq_f64(v10, v11);
      float64x2_t v19 = vsubq_f64(v11, v14);
      float64x2_t v20 = (float64x2_t)vzip1q_s64((int64x2_t)v19, (int64x2_t)v18);
      float64x2_t v21 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v16, v16), (int64x2_t)vmulq_f64(v15, v15)), v17, v17));
      float64x2_t v22 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v19, v19), (int64x2_t)vmulq_f64(v18, v18)), v20, v20));
      double result = result + v21.f64[0] + v21.f64[1] + v22.f64[0] + v22.f64[1];
      v9 -= 4;
    }
    while (v9);
    if (v5 - 1 != v7) {
      goto LABEL_9;
    }
  }
  return result;
}

void sub_1C49BCCF4(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, float a5)
{
  sub_1C49B8F48(a2);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v11 = v10 - *(void *)(a1 + 96);
  if (v11)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3) - (*(void *)(v10 - 16) == *(void *)(v10 - 24));
    if ((uint64_t)v12 >= 1)
    {
      uint64_t v14 = a2[12];
      uint64_t v13 = a2[13];
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3);
      if (v12 <= v15)
      {
        if (v12 < v15)
        {
          uint64_t v16 = v14 + 24 * v12;
          if (v13 != v16)
          {
            uint64_t v17 = a2[13];
            do
            {
              float64x2_t v19 = *(void **)(v17 - 24);
              v17 -= 24;
              float64x2_t v18 = v19;
              if (v19)
              {
                *(void *)(v13 - 16) = v18;
                operator delete(v18);
              }
              uint64_t v13 = v17;
            }
            while (v17 != v16);
          }
          a2[13] = v16;
        }
      }
      else
      {
        sub_1C49CA300((uint64_t)(a2 + 12), v12 - v15);
      }
      uint64_t v20 = a2[1];
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v20 - *a2) >> 3);
      if (v12 <= v21)
      {
        if (v12 < v21)
        {
          uint64_t v22 = *a2 + 24 * v12;
          if (v20 != v22)
          {
            uint64_t v23 = a2[1];
            do
            {
              unint64_t v25 = *(void **)(v23 - 24);
              v23 -= 24;
              float64x2_t v24 = v25;
              if (v25)
              {
                *(void *)(v20 - 16) = v24;
                operator delete(v24);
              }
              uint64_t v20 = v23;
            }
            while (v23 != v22);
          }
          a2[1] = v22;
        }
      }
      else
      {
        sub_1C49CA300((uint64_t)a2, v12 - v21);
      }
      sub_1C49B90FC((uint64_t)(a2 + 3), v12, 0);
      for (unint64_t i = 0; i != v12; ++i)
        sub_1C49BCEA8(a1, (uint64_t)a2, i, a3, a4, a5);
    }
  }
}

void CHDrawingStrokes::resampleStrokesEqualInSpace(CHDrawingStrokes *this, CHDrawingStrokes *a2, float a3)
{
}

void CHDrawingStrokes::resampleStrokesEqualInSpace(CHDrawingStrokes *this, CHDrawingStrokes *a2, float a3, uint64_t a4)
{
}

void sub_1C49BCEA8(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, float a6)
{
  uint64_t v6 = (void **)a4;
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  v135[0] = 0;
  v135[1] = 0;
  id v134 = v135;
  if (a4)
  {
    unint64_t v9 = a4[2];
    uint64_t v10 = (void *)a4[1];
    if ((unint64_t)v10 < v9)
    {
      v10[2] = 0;
      v10[1] = 0;
      *uint64_t v10 = v10 + 1;
      sub_1C49CA4EC(v10, v134, v135);
      v6[1] = v10 + 3;
      v6[1] = v10 + 3;
      goto LABEL_24;
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *a4) >> 3);
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C494A220();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a4) >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= v11 + 1) {
      uint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v139 = a4 + 2;
    if (v14)
    {
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        sub_1C4949AA8();
      }
      unint64_t v15 = (char *)operator new(24 * v14);
    }
    else
    {
      unint64_t v15 = 0;
    }
    uint64_t v16 = &v15[24 * v11];
    *(void *)&long long buf = v15;
    *((void *)&buf + 1) = v16;
    uint64_t v137 = v16;
    uint64_t v138 = &v15[24 * v14];
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 1) = 0;
    *(void *)uint64_t v16 = v16 + 8;
    sub_1C49CA4EC(v16, v135, v135);
    uint64_t v17 = *((void *)&buf + 1);
    float64x2_t v18 = v137 + 24;
    float64x2_t v19 = (char *)*v6;
    uint64_t v20 = (char *)v6[1];
    if (v20 == *v6)
    {
      *uint64_t v6 = (void *)*((void *)&buf + 1);
      v6[1] = v18;
      v6[2] = v138;
      if (!v20) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v21 = 0;
      do
      {
        while (1)
        {
          uint64_t v22 = v17 + v21;
          *(void *)(v22 - 24) = *(void *)&v20[v21 - 24];
          uint64_t v23 = &v20[v21 - 16];
          uint64_t v24 = *(void *)v23;
          *(void *)(v17 + v21 - 16) = *(void *)v23;
          uint64_t v25 = v17 + v21 - 16;
          uint64_t v26 = *(void *)&v20[v21 - 8];
          *(void *)(v22 - 8) = v26;
          if (v26) {
            break;
          }
          *(void *)(v22 - 24) = v25;
          v21 -= 24;
          if (&v20[v21] == v19) {
            goto LABEL_19;
          }
        }
        *(void *)(v24 + 16) = v25;
        *(void *)&v20[v21 - 24] = v23;
        *(void *)uint64_t v23 = 0;
        *(void *)&v20[v21 - 8] = 0;
        v21 -= 24;
      }
      while (&v20[v21] != v19);
LABEL_19:
      uint64_t v20 = (char *)*v6;
      uint64_t v27 = (char *)v6[1];
      *uint64_t v6 = (void *)(v17 + v21);
      v6[1] = v18;
      v6[2] = v138;
      if (v27 != v20)
      {
        do
        {
          unint64_t v28 = v27 - 24;
          sub_1C4999C7C((uint64_t)(v27 - 24), *((void **)v27 - 2));
          uint64_t v27 = v28;
        }
        while (v28 != v20);
      }
      if (!v20) {
        goto LABEL_23;
      }
    }
    operator delete(v20);
LABEL_23:
    v6[1] = v18;
  }
LABEL_24:
  uint64_t v29 = *(double **)(*(void *)(a1 + 96) + 24 * a3);
  uint64_t v30 = *(void *)(*(void *)(a1 + 96) + 24 * a3 + 8) - (void)v29;
  if ((unint64_t)v30 <= 0xF)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    int v31 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = a3;
      _os_log_impl(&dword_1C492D000, v31, OS_LOG_TYPE_FAULT, "Empty stroke at index=%lu detected during spatial resampling.", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v29 = *(double **)(*(void *)(a1 + 96) + 24 * a3);
  }
  float v32 = *v29;
  float v33 = v29[1];
  sub_1C49B9378(a2, a3, v32, v33);
  if (v6)
  {
    int v35 = v6[1];
    int v36 = (uint64_t *)operator new(0x30uLL);
    int v37 = v36;
    void v36[4] = 0;
    v36[5] = 0;
    int v38 = (uint64_t **)(v35 - 2);
    int v39 = (uint64_t *)*(v35 - 2);
    if (v39)
    {
      while (1)
      {
        while (1)
        {
          int v40 = (uint64_t **)v39;
          uint64_t v41 = v39[4];
          if (v41 < 1) {
            break;
          }
          int v39 = (uint64_t *)*v39;
          int v38 = v40;
          if (!*v40) {
            goto LABEL_38;
          }
        }
        if ((v41 & 0x8000000000000000) == 0) {
          break;
        }
        int v39 = (uint64_t *)v39[1];
        if (!v39)
        {
          int v38 = v40 + 1;
          goto LABEL_38;
        }
      }
      operator delete(v36);
    }
    else
    {
      int v40 = (uint64_t **)(v35 - 2);
LABEL_38:
      *int v36 = 0;
      v36[1] = 0;
      v36[2] = (uint64_t)v40;
      *int v38 = v36;
      uint64_t v42 = *(void *)*(v35 - 3);
      if (v42)
      {
        *(v35 - 3) = v42;
        int v37 = *v38;
      }
      sub_1C4949FD4((uint64_t *)*(v35 - 2), v37);
      ++*(v35 - 1);
    }
  }
  unint64_t v43 = *(float64x2_t **)(*(void *)(a1 + 96) + 24 * a3);
  uint64_t v44 = *(void *)(*(void *)(a1 + 96) + 24 * a3 + 8) - (void)v43;
  double v45 = 0.0;
  if ((unint64_t)v44 >= 0x19)
  {
    unint64_t v46 = (unint64_t)(v44 >> 3) >> 1;
    if (v46 <= 2) {
      unint64_t v46 = 2;
    }
    if (v46 < 5)
    {
      uint64_t v47 = 1;
LABEL_49:
      unint64_t v63 = v46 - v47;
      f64 = v43[v47].f64;
      do
      {
        double v45 = v45 + sqrt((f64[1] - *(f64 - 1)) * (f64[1] - *(f64 - 1)) + (*f64 - *(f64 - 2)) * (*f64 - *(f64 - 2)));
        f64 += 2;
        --v63;
      }
      while (v63);
      goto LABEL_51;
    }
    unint64_t v48 = (v46 - 1) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v47 = v48 | 1;
    unint64_t v49 = v43 + 2;
    unint64_t v50 = v48;
    do
    {
      float64x2_t v52 = v49[1];
      float64x2_t v51 = v49[2];
      float64x2_t v54 = v49[-2];
      float64x2_t v53 = v49[-1];
      float64x2_t v55 = *v49;
      v49 += 4;
      float64x2_t v56 = vsubq_f64(v55, v53);
      float64x2_t v57 = vsubq_f64(v53, v54);
      float64x2_t v34 = (float64x2_t)vzip1q_s64((int64x2_t)v57, (int64x2_t)v56);
      float64x2_t v58 = vsubq_f64(v51, v52);
      float64x2_t v59 = vsubq_f64(v52, v55);
      float64x2_t v60 = (float64x2_t)vzip1q_s64((int64x2_t)v59, (int64x2_t)v58);
      float64x2_t v61 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v57, v57), (int64x2_t)vmulq_f64(v56, v56)), v34, v34));
      float64x2_t v62 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v59, v59), (int64x2_t)vmulq_f64(v58, v58)), v60, v60));
      double v45 = v45 + v61.f64[0] + v61.f64[1] + v62.f64[0] + v62.f64[1];
      v50 -= 4;
    }
    while (v50);
    if (v46 - 1 != v48) {
      goto LABEL_49;
    }
  }
LABEL_51:
  unint64_t v65 = (unint64_t)(v30 >> 3) >> 1;
  float v66 = v45;
  if (v66 >= a6)
  {
    if (a5 != 0x7FFFFFFFFFFFFFFFLL && ceilf(v66 / a6) > (float)a5) {
      a6 = v66 / ((double)a5 + -1.0);
    }
    if ((unint64_t)v30 < 0x19)
    {
      uint64_t v84 = 1;
    }
    else
    {
      long long v129 = v6;
      uint64_t v79 = a5 - 1;
      unint64_t v80 = 2;
      if (v65 > 2) {
        unint64_t v80 = (unint64_t)(v30 >> 3) >> 1;
      }
      unint64_t v126 = v80;
      float v81 = 0.0;
      unint64_t v82 = a3;
      uint64_t v127 = 24 * a3;
      uint64_t v83 = 1;
      uint64_t v84 = 1;
      do
      {
        float v85 = v81;
        long long v86 = (float64x2_t *)(*(void *)(*(void *)(a1 + 96) + v127) + 16 * v83);
        *(float32x2_t *)&v34.f64[0] = vcvt_f32_f64(v86[-1]);
        float32x2_t v87 = vcvt_f32_f64(*v86);
        float32x2_t v88 = vsub_f32(*(float32x2_t *)&v34.f64[0], v87);
        float v81 = sqrtf(vaddv_f32(vmul_f32(v88, v88)));
        float v89 = v85 + v81;
        if (v89 < a6)
        {
          float v81 = v89;
        }
        else
        {
          float64x2_t v90 = v34;
          if (v129)
          {
            uint64_t v91 = a5;
            do
            {
              *(float32x2_t *)&v90.f64[0] = vmla_n_f32(*(float32x2_t *)&v90.f64[0], vsub_f32(v87, *(float32x2_t *)&v90.f64[0]), (float)(a6 - (float)(v89 - v81)) / v81);
              float64x2_t v132 = v90;
              if (v91 == 0x7FFFFFFFFFFFFFFFLL || v84 < v79)
              {
                sub_1C49B9378(a2, v82, *(float *)v90.f64, *((float *)v90.f64 + 1));
                int v93 = v129[1];
                double v95 = (void **)(v93 - 2);
                double v94 = (void *)*(v93 - 2);
                long long v96 = v93 - 2;
                double v97 = v93 - 2;
                if (v94)
                {
                  while (1)
                  {
                    while (1)
                    {
                      double v97 = v94;
                      uint64_t v98 = v94[4];
                      if (v84 >= v98) {
                        break;
                      }
                      double v94 = (void *)*v97;
                      long long v96 = v97;
                      if (!*v97) {
                        goto LABEL_90;
                      }
                    }
                    if (v98 >= v84) {
                      break;
                    }
                    double v94 = (void *)v97[1];
                    if (!v94)
                    {
                      long long v96 = v97 + 1;
                      goto LABEL_90;
                    }
                  }
                }
                else
                {
LABEL_90:
                  uint64_t v99 = operator new(0x30uLL);
                  v99[4] = v84;
                  v99[5] = v83;
                  void *v99 = 0;
                  v99[1] = 0;
                  v99[2] = v97;
                  *long long v96 = v99;
                  uint64_t v100 = *(void *)*(v93 - 3);
                  if (v100)
                  {
                    *(v93 - 3) = v100;
                    uint64_t v99 = (void *)*v96;
                  }
                  unsigned int v101 = *v95;
                  BOOL v102 = v99 == *v95;
                  *((unsigned char *)v99 + 24) = v102;
                  if (!v102)
                  {
                    do
                    {
                      uint64_t v103 = v99[2];
                      if (*(unsigned char *)(v103 + 24)) {
                        break;
                      }
                      int v104 = *(unsigned char **)(v103 + 16);
                      uint64_t v105 = *(void *)v104;
                      if (*(void *)v104 == v103)
                      {
                        uint64_t v108 = *((void *)v104 + 1);
                        if (!v108 || (v109 = *(unsigned __int8 *)(v108 + 24), int v106 = (unsigned char *)(v108 + 24), v109))
                        {
                          if (*(void **)v103 == v99)
                          {
                            *(unsigned char *)(v103 + 24) = 1;
                            v104[24] = 0;
                            uint64_t v112 = *(void *)(v103 + 8);
                            *(void *)int v104 = v112;
                            if (v112) {
                              goto LABEL_107;
                            }
                          }
                          else
                          {
                            unsigned int v110 = *(uint64_t **)(v103 + 8);
                            uint64_t v111 = *v110;
                            *(void *)(v103 + 8) = *v110;
                            if (v111)
                            {
                              *(void *)(v111 + 16) = v103;
                              int v104 = *(unsigned char **)(v103 + 16);
                            }
                            v110[2] = (uint64_t)v104;
                            *(void *)(*(void *)(v103 + 16) + 8 * (**(void **)(v103 + 16) != v103)) = v110;
                            *unsigned int v110 = v103;
                            *(void *)(v103 + 16) = v110;
                            int v104 = (unsigned char *)v110[2];
                            uint64_t v103 = *(void *)v104;
                            *((unsigned char *)v110 + 24) = 1;
                            v104[24] = 0;
                            uint64_t v112 = *(void *)(v103 + 8);
                            *(void *)int v104 = v112;
                            if (v112) {
LABEL_107:
                            }
                              *(void *)(v112 + 16) = v104;
                          }
                          *(void *)(v103 + 16) = *((void *)v104 + 2);
                          *(void *)(*((void *)v104 + 2) + 8 * (**((void **)v104 + 2) != (void)v104)) = v103;
                          *(void *)(v103 + 8) = v104;
LABEL_77:
                          *((void *)v104 + 2) = v103;
                          break;
                        }
                      }
                      else if (!v105 || (v107 = *(unsigned __int8 *)(v105 + 24), int v106 = (unsigned char *)(v105 + 24), v107))
                      {
                        if (*(void **)v103 == v99)
                        {
                          uint64_t v114 = v99[1];
                          *(void *)uint64_t v103 = v114;
                          if (v114)
                          {
                            *(void *)(v114 + 16) = v103;
                            int v104 = *(unsigned char **)(v103 + 16);
                          }
                          v99[2] = v104;
                          *(void *)(*(void *)(v103 + 16) + 8 * (**(void **)(v103 + 16) != v103)) = v99;
                          v99[1] = v103;
                          *(void *)(v103 + 16) = v99;
                          int v104 = (unsigned char *)v99[2];
                          *((unsigned char *)v99 + 24) = 1;
                          v104[24] = 0;
                          uint64_t v103 = *((void *)v104 + 1);
                          unint64_t v113 = *(void **)v103;
                          *((void *)v104 + 1) = *(void *)v103;
                          if (!v113) {
                            goto LABEL_76;
                          }
                        }
                        else
                        {
                          *(unsigned char *)(v103 + 24) = 1;
                          v104[24] = 0;
                          uint64_t v103 = *((void *)v104 + 1);
                          unint64_t v113 = *(void **)v103;
                          *((void *)v104 + 1) = *(void *)v103;
                          if (!v113) {
                            goto LABEL_76;
                          }
                        }
                        v113[2] = v104;
LABEL_76:
                        *(void *)(v103 + 16) = *((void *)v104 + 2);
                        *(void *)(*((void *)v104 + 2) + 8 * (**((void **)v104 + 2) != (void)v104)) = v103;
                        *(void *)uint64_t v103 = v104;
                        goto LABEL_77;
                      }
                      *(unsigned char *)(v103 + 24) = 1;
                      uint64_t v99 = v104;
                      v104[24] = v104 == (unsigned char *)v101;
                      *int v106 = 1;
                    }
                    while (v104 != (unsigned char *)v101);
                  }
                  ++*(v93 - 1);
                }
                ++v84;
                uint64_t v91 = a5;
              }
              float64x2_t v90 = v132;
              float32x2_t v92 = vsub_f32(*(float32x2_t *)&v132.f64[0], v87);
              float v81 = sqrtf(vaddv_f32(vmul_f32(v92, v92)));
              float v89 = v81;
            }
            while (v81 >= a6);
          }
          else
          {
            uint64_t v115 = a5;
            do
            {
              *(float32x2_t *)&v90.f64[0] = vmla_n_f32(*(float32x2_t *)&v90.f64[0], vsub_f32(v87, *(float32x2_t *)&v90.f64[0]), (float)(a6 - (float)(v89 - v81)) / v81);
              float64x2_t v133 = v90;
              if (v115 == 0x7FFFFFFFFFFFFFFFLL || v84 < v79)
              {
                sub_1C49B9378(a2, v82, *(float *)v90.f64, *((float *)v90.f64 + 1));
                ++v84;
                uint64_t v115 = a5;
              }
              float64x2_t v90 = v133;
              float32x2_t v116 = vsub_f32(*(float32x2_t *)&v133.f64[0], v87);
              float v81 = sqrtf(vaddv_f32(vmul_f32(v116, v116)));
              float v89 = v81;
            }
            while (v81 >= a6);
          }
        }
        ++v83;
      }
      while (v83 != v126);
      uint64_t v6 = v129;
      a3 = v82;
      unint64_t v43 = *(float64x2_t **)(*(void *)(a1 + 96) + 24 * v82);
      unint64_t v65 = (unint64_t)(v30 >> 3) >> 1;
    }
    unint64_t v117 = v65 - 1;
    CFTypeRef v118 = v43[v65 - 1].f64;
    float v119 = *v118;
    float v120 = v118[1];
    sub_1C49B9378(a2, a3, v119, v120);
    if (v6)
    {
      uint64_t v71 = v6[1];
      uint64_t v122 = (uint64_t **)(v71 - 2);
      uint64_t v121 = (uint64_t *)*(v71 - 2);
      if (!v121)
      {
        unint64_t v123 = (uint64_t **)(v71 - 2);
LABEL_134:
        uint64_t v73 = (uint64_t *)operator new(0x30uLL);
        v73[4] = v84;
        v73[5] = v117;
        *uint64_t v73 = 0;
        v73[1] = 0;
        v73[2] = (uint64_t)v123;
        *uint64_t v122 = v73;
        uint64_t v125 = *(void *)*(v71 - 3);
        if (v125)
        {
          *(v71 - 3) = v125;
          uint64_t v73 = *v122;
        }
        goto LABEL_136;
      }
      while (1)
      {
        while (1)
        {
          unint64_t v123 = (uint64_t **)v121;
          uint64_t v124 = v121[4];
          if (v84 >= v124) {
            break;
          }
          uint64_t v121 = *v123;
          uint64_t v122 = v123;
          if (!*v123) {
            goto LABEL_134;
          }
        }
        if (v124 >= v84) {
          break;
        }
        uint64_t v121 = v123[1];
        if (!v121)
        {
          uint64_t v122 = v123 + 1;
          goto LABEL_134;
        }
      }
    }
  }
  else if ((unint64_t)v30 >= 0x19)
  {
    unint64_t v67 = v65 - 1;
    uint64_t v68 = v43[v65 - 1].f64;
    float v69 = *v68;
    float v70 = v68[1];
    sub_1C49B9378(a2, a3, v69, v70);
    if (v6)
    {
      uint64_t v71 = v6[1];
      unint64_t v72 = (uint64_t *)operator new(0x30uLL);
      uint64_t v73 = v72;
      void v72[4] = 1;
      v72[5] = v67;
      double v74 = (uint64_t **)(v71 - 2);
      uint64_t v75 = (uint64_t *)*(v71 - 2);
      if (!v75)
      {
        int64_t v76 = (uint64_t **)(v71 - 2);
LABEL_61:
        *unint64_t v72 = 0;
        v72[1] = 0;
        v72[2] = (uint64_t)v76;
        unsigned char *v74 = v72;
        uint64_t v78 = *(void *)*(v71 - 3);
        if (v78)
        {
          *(v71 - 3) = v78;
          uint64_t v73 = *v74;
        }
LABEL_136:
        sub_1C4949FD4((uint64_t *)*(v71 - 2), v73);
        ++*(v71 - 1);
        goto LABEL_137;
      }
      while (1)
      {
        while (1)
        {
          int64_t v76 = (uint64_t **)v75;
          uint64_t v77 = v75[4];
          if (v77 < 2) {
            break;
          }
          uint64_t v75 = (uint64_t *)*v75;
          double v74 = v76;
          if (!*v76) {
            goto LABEL_61;
          }
        }
        if (v77 == 1) {
          break;
        }
        uint64_t v75 = (uint64_t *)v75[1];
        if (!v75)
        {
          double v74 = v76 + 1;
          goto LABEL_61;
        }
      }
      operator delete(v72);
    }
  }
LABEL_137:
  sub_1C4999C7C((uint64_t)&v134, v135[0]);
}

void sub_1C49BD964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

void sub_1C49BD97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

void sub_1C49BD994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

void sub_1C49BD9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void *);
  uint64_t v17 = va_arg(va1, void);
  sub_1C4999C7C(v12, *(void **)(v12 + 8));
  sub_1C49CA600((uint64_t)va1);
  sub_1C4999C7C((uint64_t)va, v16);
  _Unwind_Resume(a1);
}

void sub_1C49BD9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
  sub_1C4999C7C(v22, *(void **)(v22 + 8));
  *(void *)(v21 + 8) = v22;
  sub_1C4999C7C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_1C49BDA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

void sub_1C49BDA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

void sub_1C49BDA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

void sub_1C49BDA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

void sub_1C49BDA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

void sub_1C49BDA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

void CHDrawingStrokes::resampleStrokesWithCatmullRomSplineInterpolation(CHDrawingStrokes *this, CHDrawingStrokes *a2, float a3)
{
  int64_t v4 = a2;
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  int end = this->strokes.__end_;
  uint64_t v7 = end - (char *)this->strokes.__begin_;
  if (v7) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3) - (*((void *)end - 2) == *((void *)end - 3));
  }
  else {
    unint64_t v8 = 0;
  }
  sub_1C49B8F48((uint64_t *)a2);
  begin = v4->strokes.__begin_;
  unint64_t v9 = (char *)v4->strokes.__end_;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - begin) >> 3);
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      uint64_t v12 = &begin[24 * v8];
      if (v9 != v12)
      {
        uint64_t v13 = (char *)v4->strokes.__end_;
        do
        {
          unint64_t v15 = (void *)*((void *)v13 - 3);
          v13 -= 24;
          uint64_t v14 = v15;
          if (v15)
          {
            *((void *)v9 - 2) = v14;
            operator delete(v14);
          }
          unint64_t v9 = v13;
        }
        while (v13 != v12);
      }
      v4->strokes.__end_ = v12;
    }
  }
  else
  {
    sub_1C49CA300((uint64_t)&v4->strokes, v8 - v11);
  }
  uint64_t v16 = (char *)v4->strokeBounds.__end_;
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (char *)v4->strokeBounds.__begin_) >> 3);
  if (v8 <= v17)
  {
    if (v8 < v17)
    {
      uint64_t v18 = (uint64_t)v4->strokeBounds.__begin_ + 24 * v8;
      if (v16 != (char *)v18)
      {
        float64x2_t v19 = (char *)v4->strokeBounds.__end_;
        do
        {
          uint64_t v21 = (void *)*((void *)v19 - 3);
          v19 -= 24;
          uint64_t v20 = v21;
          if (v21)
          {
            *((void *)v16 - 2) = v20;
            operator delete(v20);
          }
          uint64_t v16 = v19;
        }
        while (v19 != (char *)v18);
      }
      v4->strokeBounds.__end_ = (void *)v18;
    }
  }
  else
  {
    sub_1C49CA300((uint64_t)v4, v8 - v17);
  }
  sub_1C49B90FC((uint64_t)&v4->strokeBoundsValidity, v8, 0);
  unint64_t v22 = 0;
  uint64_t v115 = v4;
  while (1)
  {
    uint64_t v23 = this->strokes.__begin_;
    uint64_t v24 = this->strokes.__end_;
    if (v24 == v23 || v22 >= 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3) - (*((void *)v24 - 2) == *((void *)v24 - 3))) {
      break;
    }
    uint64_t v25 = (float64x2_t **)&v23[24 * v22];
    uint64_t v26 = *v25;
    unint64_t v27 = (char *)v25[1] - (char *)*v25;
    double v28 = 0.0;
    unint64_t v29 = (uint64_t)v27 >> 3;
    if (v27 >= 0x19)
    {
      unint64_t v30 = v29 >> 1;
      if (v29 >> 1 <= 2) {
        unint64_t v30 = 2;
      }
      if (v30 >= 5)
      {
        unint64_t v32 = (v30 - 1) & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v31 = v32 | 1;
        float v33 = v26 + 2;
        unint64_t v34 = v32;
        do
        {
          float64x2_t v36 = v33[1];
          float64x2_t v35 = v33[2];
          float64x2_t v38 = v33[-2];
          float64x2_t v37 = v33[-1];
          float64x2_t v39 = *v33;
          v33 += 4;
          float64x2_t v40 = vsubq_f64(v39, v37);
          float64x2_t v41 = vsubq_f64(v37, v38);
          float64x2_t v42 = (float64x2_t)vzip1q_s64((int64x2_t)v41, (int64x2_t)v40);
          float64x2_t v43 = vsubq_f64(v35, v36);
          float64x2_t v44 = vsubq_f64(v36, v39);
          float64x2_t v45 = (float64x2_t)vzip1q_s64((int64x2_t)v44, (int64x2_t)v43);
          float64x2_t v46 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v41, v41), (int64x2_t)vmulq_f64(v40, v40)), v42, v42));
          float64x2_t v47 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v44, v44), (int64x2_t)vmulq_f64(v43, v43)), v45, v45));
          double v28 = v28 + v46.f64[0] + v46.f64[1] + v47.f64[0] + v47.f64[1];
          v34 -= 4;
        }
        while (v34);
        if (v30 - 1 == v32) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v31 = 1;
      }
      unint64_t v48 = v30 - v31;
      f64 = v26[v31].f64;
      do
      {
        double v28 = v28 + sqrt((f64[1] - *(f64 - 1)) * (f64[1] - *(f64 - 1)) + (*f64 - *(f64 - 2)) * (*f64 - *(f64 - 2)));
        f64 += 2;
        --v48;
      }
      while (v48);
    }
LABEL_39:
    if (v27 < 0x10) {
      goto LABEL_24;
    }
    if (v27 < 0x40)
    {
      unint64_t v50 = 0;
      float64x2_t v51 = 0;
      float64x2_t v52 = 0;
      goto LABEL_74;
    }
    if ((v27 & 0x8000000000000000) != 0) {
      sub_1C494A220();
    }
    unint64_t v53 = v29 >> 1;
    uint64_t v54 = (v29 >> 1) + 3;
    float64x2_t v55 = (double *)operator new(16 * v54);
    unint64_t v50 = v55;
    uint64_t v56 = 0;
    float64x2_t v52 = &v55[2 * v54];
    if (v53 <= 1) {
      uint64_t v57 = 1;
    }
    else {
      uint64_t v57 = v53;
    }
    float64x2_t v51 = v55;
    float64x2_t v58 = v55;
    do
    {
      float64x2_t v59 = (double *)(*((void *)this->strokes.__begin_ + 3 * v22) + 16 * v56);
      double v61 = *v59;
      double v60 = v59[1];
      if (!v56 || vabdd_f64(v61, *(v51 - 2)) >= 2.22044605e-16 || vabdd_f64(v60, *(v51 - 1)) >= 2.22044605e-16)
      {
        if (v51 < v52)
        {
          double *v51 = v61;
          v51[1] = v60;
          v51 += 2;
          goto LABEL_48;
        }
        uint64_t v62 = ((char *)v51 - (char *)v58) >> 4;
        unint64_t v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 60) {
          sub_1C494A220();
        }
        if (v52 - v58 > v63) {
          unint64_t v63 = v52 - v58;
        }
        if ((unint64_t)((char *)v52 - (char *)v58) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v64 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64)
        {
          if (v64 >> 60) {
            sub_1C4949AA8();
          }
          unint64_t v65 = (char *)operator new(16 * v64);
          float v66 = (double *)&v65[16 * v62];
          *float v66 = v61;
          v66[1] = v60;
          if (v51 != v58)
          {
LABEL_62:
            unint64_t v67 = v66;
            do
            {
              unint64_t v50 = v67 - 2;
              *((_OWORD *)v67 - 1) = *((_OWORD *)v51 - 1);
              v51 -= 2;
              v67 -= 2;
            }
            while (v51 != v58);
            float64x2_t v52 = (double *)&v65[16 * v64];
            float64x2_t v51 = v66 + 2;
            if (v58) {
LABEL_65:
            }
              operator delete(v58);
LABEL_66:
            float64x2_t v58 = v50;
            goto LABEL_48;
          }
        }
        else
        {
          unint64_t v65 = 0;
          float v66 = (double *)(16 * v62);
          *float v66 = v61;
          v66[1] = v60;
          if (v51 != v58) {
            goto LABEL_62;
          }
        }
        unint64_t v50 = v66;
        float64x2_t v52 = (double *)&v65[16 * v64];
        float64x2_t v51 = v66 + 2;
        if (v58) {
          goto LABEL_65;
        }
        goto LABEL_66;
      }
LABEL_48:
      ++v56;
    }
    while (v56 != v57);
    double v68 = *(v51 - 2);
    if (vabdd_f64(*v58, v68) < 2.22044605e-16)
    {
      double v69 = *(v51 - 1);
      if (vabdd_f64(v58[1], v69) < 2.22044605e-16)
      {
        *(v51 - 2) = v68 + 2.22044605e-16;
        *(v51 - 1) = v69 + 2.22044605e-16;
      }
    }
    int64_t v4 = v115;
LABEL_74:
    double v70 = round(v28 / a3) + 1.0;
    uint64_t v71 = (unint64_t)v70;
    if ((unint64_t)((char *)v51 - (char *)v50) >= 0x31)
    {
      unint64_t v117 = v50;
      CFTypeRef v118 = v51;
      float v119 = (char *)v52;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v72 = (char *)v51 - (char *)v50;
      __p = 0;
      if ((unint64_t)((char *)v51 - (char *)v50) <= 0x3F)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "The Catmull-Rom curve requires at least 4 points.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E64E0AC0, MEMORY[0x1E4FBA1C0]);
      }
      uint64_t v73 = v72 >> 4;
      unint64_t v74 = (v72 >> 4) + 3;
      if (v72 >> 4 != -3)
      {
        unint64_t v75 = (unint64_t)v70;
        sub_1C49CA658((uint64_t)&__p, (v72 >> 4) + 3);
        unint64_t v50 = v117;
        int64_t v76 = v118;
        unint64_t v77 = ((char *)v118 - (char *)v117) >> 4;
        BOOL v78 = v74 >= v77;
        unint64_t v79 = v74 - v77;
        if (v74 > v77)
        {
          if (v79 <= (v119 - (char *)v118) >> 4)
          {
            uint64_t v86 = 2 * v79;
            bzero(v118, 16 * v79);
            CFTypeRef v118 = &v76[v86];
            int64_t v4 = v115;
            uint64_t v71 = v75;
          }
          else
          {
            if (v74 >> 60) {
              sub_1C494A220();
            }
            unint64_t v80 = (v119 - (char *)v117) >> 3;
            if (v80 <= v74) {
              unint64_t v80 = (v72 >> 4) + 3;
            }
            if ((unint64_t)(v119 - (char *)v117) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v80 = 0xFFFFFFFFFFFFFFFLL;
            }
            if (v80 >> 60) {
              sub_1C4949AA8();
            }
            unint64_t v113 = v80;
            float v81 = (char *)operator new(16 * v80);
            size_t v82 = 16 * (v74 - v77);
            uint64_t v114 = v81;
            uint64_t v83 = &v81[16 * v77];
            size_t v112 = v82;
            bzero(v83, v82);
            uint64_t v84 = v83;
            if (v76 != v50)
            {
              do
              {
                *((_OWORD *)v84 - 1) = *((_OWORD *)v76 - 1);
                v84 -= 16;
                v76 -= 2;
              }
              while (v76 != v50);
              int64_t v76 = v50;
            }
            int64_t v4 = v115;
            uint64_t v71 = v75;
            unint64_t v117 = (double *)v84;
            CFTypeRef v118 = (double *)&v83[v112];
            float v119 = &v114[16 * v113];
            if (v76)
            {
              operator delete(v76);
              uint64_t v71 = v75;
            }
          }
          unint64_t v50 = v117;
          uint64_t v73 = v72 >> 4;
LABEL_96:
          uint64_t v87 = 2 * v73;
          *(_OWORD *)&v50[2 * v73 + 2] = *(_OWORD *)v50;
          *(_OWORD *)&v117[2 * v73 + 4] = *((_OWORD *)v117 + 1);
          float32x2_t v88 = v117;
          long long v124 = *(_OWORD *)&v117[2 * v73 - 2];
          uint64_t v116 = v71;
          if (v72 >= 1)
          {
            uint64_t v89 = v73;
            do
            {
              *(_OWORD *)&v117[v87] = *(_OWORD *)&v117[v87 - 2];
              v87 -= 2;
            }
            while (v89-- > 1);
            float32x2_t v88 = v117;
          }
          *(_OWORD *)float32x2_t v88 = v124;
          uint64_t v91 = v117;
          double v92 = pow((*v117 - v117[2]) * (*v117 - v117[2]) + 0.0 + (v117[1] - v117[3]) * (v117[1] - v117[3]), 0.25);
          int v93 = (char *)__p;
          *(double *)__p = -v92;
          if (fabs(v92) < 2.22044605e-16)
          {
            uint64_t v111 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v111, "The first and last point should not be the same.\n");
            v111->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            __cxa_throw(v111, (struct type_info *)off_1E64E0AC0, MEMORY[0x1E4FBA1C0]);
          }
          *((void *)v93 + 1) = 0;
          if ((unint64_t)(v121 - v93) >= 0x11)
          {
            unint64_t v94 = (v121 - v93) >> 3;
            if (v94 <= 3) {
              unint64_t v94 = 3;
            }
            unint64_t v95 = v94 - 2;
            long long v96 = (double *)(v93 + 16);
            double v97 = (double *)v91 + 3;
            double v98 = 0.0;
            do
            {
              double v99 = v97[1] - *(v97 - 1);
              double v100 = pow(v99 * v99 + 0.0 + (v97[2] - *v97) * (v97[2] - *v97), 0.25);
              if (fabs(v100) < 2.22044605e-16)
              {
                int v109 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v109, "The control points of the Catmull-Rom curve are too close together; this will lead to ill-conditioning.\n");
                v109->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                __cxa_throw(v109, (struct type_info *)off_1E64E0AC0, MEMORY[0x1E4FBA1C0]);
              }
              double v98 = v98 + v100;
              *v96++ = v98;
              v97 += 2;
              --v95;
            }
            while (v95);
          }
          double v101 = *(double *)&v93[8 * v73];
          double v123 = v101;
          unint64_t v102 = v116 - 1;
          if (v116 != 1)
          {
            double v103 = v101 / (double)v102;
            double v104 = 0.0;
            do
            {
              double v105 = sub_1C49C6168((uint64_t)&v117, v104);
              sub_1C49B9378((uint64_t)v4, v22, v105, v106);
              double v104 = v103 + v104;
              --v102;
            }
            while (v102);
            double v101 = v123;
          }
          double v107 = sub_1C49C6168((uint64_t)&v117, v101);
          sub_1C49B9378((uint64_t)v4, v22, v107, v108);
          if (__p)
          {
            uint64_t v121 = __p;
            operator delete(__p);
          }
          float v85 = v117;
          if (v117)
          {
            CFTypeRef v118 = v117;
LABEL_23:
            operator delete(v85);
          }
          goto LABEL_24;
        }
        uint64_t v71 = v75;
        uint64_t v73 = v72 >> 4;
        int64_t v4 = v115;
        if (v78) {
          goto LABEL_96;
        }
      }
      CFTypeRef v118 = &v50[2 * v74];
      goto LABEL_96;
    }
    sub_1C49BCEA8((uint64_t)this, (uint64_t)v4, v22, 0, v71, a3);
    if (v50)
    {
      float v85 = v50;
      goto LABEL_23;
    }
LABEL_24:
    ++v22;
  }
}

void sub_1C49BE3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16)
  {
    operator delete(a16);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C49BE480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1C49C62F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void CHDrawingStrokes::getBoundingBoxForStroke(CHDrawingStrokes *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = a2 >> 6;
  uint64_t v7 = 1 << a2;
  if ((this->strokeBoundsValidity.__begin_[a2 >> 6] & (1 << a2)) == 0)
  {
    CHDrawingStrokes::computeBoundingBoxForStroke(this, a2, (double **)&v17);
    begin = this->strokeBounds.__begin_;
    unint64_t v9 = (char *)this->strokeBounds.__begin_ + 24 * a2;
    uint64_t v10 = *(void **)v9;
    if (*(void *)v9)
    {
      begin[3 * a2 + 1] = v10;
      operator delete(v10);
      *(void *)unint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
    }
    *(_OWORD *)unint64_t v9 = v17;
    begin[3 * a2 + 2] = v18;
    this->strokeBoundsValidity.__begin_[v6] |= v7;
  }
  unint64_t v11 = (char *)this->strokeBounds.__begin_ + 24 * a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v13 = *(unsigned char **)v11;
  uint64_t v12 = (unsigned char *)*((void *)v11 + 1);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_1C494A220();
    }
    unint64_t v15 = (char *)operator new(v12 - v13);
    *a3 = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    a3[2] = v16;
    memcpy(v15, v13, v14);
    a3[1] = v16;
  }
}

void sub_1C49BE5B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CHDrawingStrokes::computeBoundingBoxForStroke(CHDrawingStrokes *this@<X0>, uint64_t a2@<X1>, double **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int64_t v4 = (uint64_t *)((char *)this->strokes.__begin_ + 24 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1] - *v4;
  if ((unint64_t)v6 >= 0x10)
  {
    unint64_t v11 = (unint64_t)(v6 >> 3) >> 1;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    uint64_t v12 = (double *)(v5 + 8);
    double v9 = -1.79769313e308;
    double v10 = 1.79769313e308;
    double v7 = -1.79769313e308;
    double v8 = 1.79769313e308;
    do
    {
      double v13 = *(v12 - 1);
      double v14 = *v12;
      if (v13 < v10) {
        double v10 = *(v12 - 1);
      }
      if (v13 > v9) {
        double v9 = *(v12 - 1);
      }
      if (v14 < v8) {
        double v8 = *v12;
      }
      if (v14 > v7) {
        double v7 = *v12;
      }
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  else
  {
    double v7 = -1.79769313e308;
    double v8 = 1.79769313e308;
    double v9 = -1.79769313e308;
    double v10 = 1.79769313e308;
  }
  sub_1C49CA658((uint64_t)a3, 4uLL);
  unint64_t v15 = *a3;
  if (vabdd_f64(v7, v8) >= 0.000001) {
    double v16 = v7;
  }
  else {
    double v16 = v7 + 1.0;
  }
  double v17 = v9 + 1.0;
  *unint64_t v15 = v10;
  v15[1] = v8;
  if (vabdd_f64(v9, v10) >= 0.000001) {
    double v17 = v9;
  }
  v15[2] = v17;
  v15[3] = v16;
}

void sub_1C49BE6E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CHDrawingStrokes::readCharacter(CHDrawingStrokes *this, const char *__filename)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (__filename && *__filename)
  {
    char v9 = 0;
    int v8 = 0;
    uint64_t v7 = 0;
    int64_t v4 = fopen(__filename, "rt");
    if (!v4)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v5 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        unint64_t v11 = __filename;
        _os_log_impl(&dword_1C492D000, v5, OS_LOG_TYPE_FAULT, "Error: readCharacter: Wrong filename :%s:\n", buf, 0xCu);
      }
    }
    sub_1C49B8F48((uint64_t *)this);
    do
    {
      buf[0] = 0;
      while (fgets((char *)buf, 1024, v4))
      {
        if (sscanf((const char *)buf, "%d %d %d", &v8, (char *)&v7 + 4, &v7) < 1) {
          break;
        }
        sub_1C49BE984(this, (double)v8, (double)SHIDWORD(v7));
      }
      if (*((void *)this->strokes.__end_ - 2) != *((void *)this->strokes.__end_ - 3))
      {
        ++this->currentStrokeIndex;
        sub_1C49BFCE4(this);
      }
    }
    while (sscanf((const char *)buf, " %c", &v9) > 0);
    fclose(v4);
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v6 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v6, OS_LOG_TYPE_ERROR, "filename is empty", buf, 2u);
    }
  }
}

void sub_1C49BE984(void *a1, double a2, double a3)
{
  uint64_t v5 = a1;
  unint64_t v6 = a1[15];
  uint64_t v7 = a1[12] + 24 * v6;
  int v8 = (uint64_t *)(v7 + 8);
  char v9 = *(double **)(v7 + 8);
  double v10 = v9;
  unint64_t v11 = *(void *)(v7 + 16);
  if ((unint64_t)v9 < v11)
  {
    *char v9 = a2;
    uint64_t v12 = (uint64_t)(v9 + 1);
    goto LABEL_23;
  }
  double v13 = *(double **)v7;
  uint64_t v14 = (uint64_t)v9 - *(void *)v7;
  uint64_t v15 = v14 >> 3;
  unint64_t v16 = (v14 >> 3) + 1;
  if (v16 >> 61) {
    goto LABEL_45;
  }
  uint64_t v17 = v11 - (void)v13;
  if (v17 >> 2 > v16) {
    unint64_t v16 = v17 >> 2;
  }
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v18 = v16;
  }
  if (v18)
  {
    if (v18 >> 61) {
      goto LABEL_46;
    }
    float64x2_t v19 = operator new(8 * v18);
    uint64_t v20 = (double *)&v19[8 * v15];
    uint64_t v21 = &v19[8 * v18];
    *uint64_t v20 = a2;
    uint64_t v12 = (uint64_t)(v20 + 1);
    int64_t v22 = (char *)v9 - (char *)v13;
    if (v9 == v13) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  float64x2_t v19 = 0;
  uint64_t v20 = (double *)(8 * v15);
  uint64_t v21 = 0;
  *(double *)(8 * v15) = a2;
  uint64_t v12 = 8 * v15 + 8;
  int64_t v22 = (char *)v9 - (char *)v13;
  if (v9 != v13)
  {
LABEL_14:
    unint64_t v23 = v22 - 8;
    if (v23 < 0x58) {
      goto LABEL_49;
    }
    if ((unint64_t)((char *)v9 - v19 - v14) < 0x20) {
      goto LABEL_49;
    }
    uint64_t v24 = (v23 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    double v10 = &v9[v25 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v20 = (double *)((char *)v20 - v25);
    uint64_t v26 = &v19[8 * v15 - 16];
    unint64_t v27 = v9 - 2;
    uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *uint64_t v26 = v29;
      v26 -= 2;
      v27 -= 4;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        uint64_t v30 = *((void *)v10-- - 1);
        *((void *)v20-- - 1) = v30;
      }
      while (v10 != v13);
    }
  }
LABEL_20:
  *(void *)uint64_t v7 = v20;
  uint64_t *v8 = v12;
  *(void *)(v7 + 16) = v21;
  if (v13)
  {
    operator delete(v13);
    uint64_t v5 = a1;
    unint64_t v6 = a1[15];
  }
  else
  {
    uint64_t v5 = a1;
  }
LABEL_23:
  uint64_t *v8 = v12;
  uint64_t v31 = v5[12] + 24 * v6;
  unint64_t v32 = (uint64_t *)(v31 + 8);
  float v33 = *(double **)(v31 + 8);
  unint64_t v34 = *(void *)(v31 + 16);
  if ((unint64_t)v33 < v34)
  {
    *float v33 = a3;
    uint64_t v35 = (uint64_t)(v33 + 1);
    goto LABEL_44;
  }
  float64x2_t v36 = *(double **)v31;
  uint64_t v37 = (uint64_t)v33 - *(void *)v31;
  uint64_t v38 = v37 >> 3;
  unint64_t v39 = (v37 >> 3) + 1;
  if (v39 >> 61) {
LABEL_45:
  }
    sub_1C494A220();
  uint64_t v40 = v34 - (void)v36;
  if (v40 >> 2 > v39) {
    unint64_t v39 = v40 >> 2;
  }
  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v41 = v39;
  }
  if (!v41)
  {
    float64x2_t v42 = 0;
    float64x2_t v43 = (double *)(8 * v38);
    float64x2_t v44 = 0;
    *(double *)(8 * v38) = a3;
    uint64_t v35 = 8 * v38 + 8;
    int64_t v45 = (char *)v33 - (char *)v36;
    if (v33 == v36) {
      goto LABEL_42;
    }
LABEL_36:
    unint64_t v46 = v45 - 8;
    if (v46 < 0x58) {
      goto LABEL_50;
    }
    if ((unint64_t)((char *)v33 - v42 - v37) < 0x20) {
      goto LABEL_50;
    }
    uint64_t v47 = (v46 >> 3) + 1;
    uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v49 = &v33[v48 / 0xFFFFFFFFFFFFFFF8];
    float64x2_t v43 = (double *)((char *)v43 - v48);
    unint64_t v50 = &v42[8 * v38 - 16];
    float64x2_t v51 = v33 - 2;
    uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      *unint64_t v50 = v53;
      v50 -= 2;
      v51 -= 4;
      v52 -= 4;
    }
    while (v52);
    float v33 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_50:
      do
      {
        uint64_t v54 = *((void *)v33-- - 1);
        *((void *)v43-- - 1) = v54;
      }
      while (v33 != v36);
    }
    goto LABEL_42;
  }
  if (v41 >> 61) {
LABEL_46:
  }
    sub_1C4949AA8();
  float64x2_t v42 = operator new(8 * v41);
  float64x2_t v43 = (double *)&v42[8 * v38];
  float64x2_t v44 = &v42[8 * v41];
  double *v43 = a3;
  uint64_t v35 = (uint64_t)(v43 + 1);
  int64_t v45 = (char *)v33 - (char *)v36;
  if (v33 != v36) {
    goto LABEL_36;
  }
LABEL_42:
  *(void *)uint64_t v31 = v43;
  *unint64_t v32 = v35;
  *(void *)(v31 + 16) = v44;
  if (v36)
  {
    operator delete(v36);
    unint64_t v6 = v5[15];
  }
LABEL_44:
  *unint64_t v32 = v35;
  *(void *)(v5[3] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v6);
}

void sub_1C49BEEBC(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C49BF120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49BF4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C49BFBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  sub_1C49C6028((void **)&STACK[0x400]);
  _Unwind_Resume(a1);
}

void sub_1C49BFCE4(void *a1)
{
  uint64_t v4 = a1[12];
  uint64_t v3 = a1[13];
  uint64_t v2 = (uint64_t)(a1 + 12);
  if (v3 != v4 && *(void *)(v3 - 16) != *(void *)(v3 - 24))
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3);
    unint64_t v6 = a1[15] + 1;
    if (v6 <= v5)
    {
      if (v6 < v5)
      {
        uint64_t v7 = v4 + 24 * v6;
        if (v3 != v7)
        {
          uint64_t v8 = v3;
          do
          {
            double v10 = *(void **)(v8 - 24);
            v8 -= 24;
            char v9 = v10;
            if (v10)
            {
              *(void *)(v3 - 16) = v9;
              operator delete(v9);
            }
            uint64_t v3 = v8;
          }
          while (v8 != v7);
        }
        a1[13] = v7;
      }
    }
    else
    {
      sub_1C49CA300(v2, v6 - v5);
    }
    unint64_t v11 = a1[15] + 1;
    uint64_t v12 = a1[1];
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a1) >> 3);
    if (v11 <= v13)
    {
      if (v11 < v13)
      {
        uint64_t v14 = *a1 + 24 * v11;
        if (v12 != v14)
        {
          uint64_t v15 = a1[1];
          do
          {
            uint64_t v17 = *(void **)(v15 - 24);
            v15 -= 24;
            unint64_t v16 = v17;
            if (v17)
            {
              *(void *)(v12 - 16) = v16;
              operator delete(v16);
            }
            uint64_t v12 = v15;
          }
          while (v15 != v14);
        }
        a1[1] = v14;
      }
    }
    else
    {
      sub_1C49CA300((uint64_t)a1, v11 - v13);
    }
    unint64_t v18 = a1[15] + 1;
    sub_1C49B90FC((uint64_t)(a1 + 3), v18, 0);
  }
}

void sub_1C49BFE30(void *a1, double a2)
{
  unint64_t v5 = (double *)a1[7];
  unint64_t v4 = a1[8];
  unint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *unint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 1);
    goto LABEL_22;
  }
  uint64_t v8 = (double *)a1[6];
  uint64_t v9 = v5 - v8;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    sub_1C494A220();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      sub_1C4949AA8();
    }
    unint64_t v13 = operator new(8 * v12);
    uint64_t v14 = (double *)&v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    double *v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = (char *)v5 - (char *)v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v13 = 0;
  uint64_t v14 = (double *)(8 * v9);
  uint64_t v15 = 0;
  *(double *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = (char *)v5 - (char *)v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)((char *)v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v6 = &v5[v19 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v14 = (double *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    uint64_t v21 = v5 - 2;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *uint64_t v20 = v23;
      v20 -= 2;
      v21 -= 4;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6-- - 1);
        *((void *)v14-- - 1) = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[6] = v14;
  a1[7] = v7;
  a1[8] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[7] = v7;
}

void sub_1C49BFFAC(void *a1, double a2)
{
  unint64_t v5 = (double *)a1[10];
  unint64_t v4 = a1[11];
  unint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *unint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 1);
    goto LABEL_22;
  }
  uint64_t v8 = (double *)a1[9];
  uint64_t v9 = v5 - v8;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    sub_1C494A220();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      sub_1C4949AA8();
    }
    unint64_t v13 = operator new(8 * v12);
    uint64_t v14 = (double *)&v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    double *v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = (char *)v5 - (char *)v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v13 = 0;
  uint64_t v14 = (double *)(8 * v9);
  uint64_t v15 = 0;
  *(double *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = (char *)v5 - (char *)v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)((char *)v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v6 = &v5[v19 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v14 = (double *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    uint64_t v21 = v5 - 2;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *uint64_t v20 = v23;
      v20 -= 2;
      v21 -= 4;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6-- - 1);
        *((void *)v14-- - 1) = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[9] = v14;
  a1[10] = v7;
  a1[11] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[10] = v7;
}

void sub_1C49C038C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  _Unwind_Resume(a1);
}

void sub_1C49C051C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C052C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C0540(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1C49C69C4(a1, *(char ***)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    unint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = *(void **)(a1 + 24);
      if (v4 > *(void *)(a1 + 40) << 6)
      {
        if (v5)
        {
          operator delete(v5);
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          unint64_t v4 = *(void *)(a2 + 32);
        }
        if ((v4 & 0x8000000000000000) != 0) {
          sub_1C494A220();
        }
        unint64_t v6 = ((v4 - 1) >> 6) + 1;
        unint64_t v5 = operator new(8 * v6);
        *(void *)(a1 + 24) = v5;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = v6;
        unint64_t v4 = *(void *)(a2 + 32);
      }
      memmove(v5, *(const void **)(a2 + 24), (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      unint64_t v4 = *(void *)(a2 + 32);
    }
    *(void *)(a1 + 32) = v4;
    sub_1C494ACB0((void *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
    sub_1C494ACB0((void *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
    sub_1C49C69C4(a1 + 96, *(char ***)(a2 + 96), *(void *)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
  }
  uint64_t v7 = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 120) = v7;
  uint64_t v8 = *(void *)(a1 + 384);
  if (v8) {
    MEMORY[0x1C8786430](v8, 0x1000C8000313F17);
  }
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  operator new[]();
}

void sub_1C49C07AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C07BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C07D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C07E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C07F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C08C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C08D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C08E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C08F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C0D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v17 = a14;
    if (!a14)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v17 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v17);

  _Unwind_Resume(a1);
}

void sub_1C49C1088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1C49C1194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C49C11B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C11C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = *(void **)(a1 + 32);
  objc_msgSend_numberWithUnsignedInteger_(NSNumber, a2, (uint64_t)a2, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C49C1224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C14C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1C49C6028((void **)va);
  sub_1C49C6028((void **)&STACK[0x380]);

  _Unwind_Resume(a1);
}

void sub_1C49C16F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_1C49C1728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1C49C1738(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result = objc_msgSend_pointCountForStrokeIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(*(void **)(a1 + 32), v9, (uint64_t)a2, i, v10, v11);
      *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v13
                                                                  + *(double *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                              + 24);
      *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v14
                                                                  + *(double *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                              + 24);
      ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
      unint64_t result = objc_msgSend_pointCountForStrokeIndex_(*(void **)(a1 + 32), v15, (uint64_t)a2, v16, v17, v18);
    }
  }
  return result;
}

void sub_1C49C18E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1C49C18FC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1C49C190C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_boundsForStrokeIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  v11.origin.CGFloat x = v7;
  v11.origin.CGFloat y = v8;
  v11.size.CGFloat width = v9;
  v11.size.CGFloat height = v10;
  *(CGRect *)(*(void *)(*(void *)(a1 + 40) + 8) + 48) = CGRectUnion(*(CGRect *)(*(void *)(*(void *)(a1 + 40) + 8)+ 48), v11);
}

void sub_1C49C1D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C1D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C1D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C1E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C1E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C1FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C2060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C21DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C21EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C2200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C2210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C23E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C49C269C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1C49C6028((void **)va);
  sub_1C49C6028((void **)&STACK[0x300]);

  _Unwind_Resume(a1);
}

void sub_1C49C2A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (v14) {
    operator delete(v14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1C49C2F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v16 = a14;
    if (!a14) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v16 = a14;
    if (!a14) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  operator delete(v16);
  goto LABEL_7;
}

void sub_1C49C30F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1C49C6028(&a9);
  sub_1C49C6028((void **)&STACK[0x280]);
  sub_1C49C6028((void **)&STACK[0x500]);

  _Unwind_Resume(a1);
}

void sub_1C49C3364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1C49C6028(&a9);
  sub_1C49C6028((void **)&STACK[0x280]);
  sub_1C49C6028((void **)&STACK[0x500]);

  _Unwind_Resume(a1);
}

void sub_1C49C34A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1C49C6028(&a9);
  sub_1C49C6028((void **)&STACK[0x280]);
  sub_1C49C6028((void **)&STACK[0x500]);

  _Unwind_Resume(a1);
}

void sub_1C49C35B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C35C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C36B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C36C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C36D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3960(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C49C3AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double sub_1C49C3CC0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v11 = a3;
  if (a1)
  {
    uint64_t v12 = objc_msgSend_strokeIndex(v5, v6, v7, v8, v9, v10);
    uint64_t v18 = objc_msgSend_pointIndex(v5, v13, v14, v15, v16, v17);
    uint64_t v24 = objc_msgSend_strokeIndex(v11, v19, v20, v21, v22, v23);
    uint64_t v30 = objc_msgSend_pointIndex(v11, v25, v26, v27, v28, v29);
    if (v12 <= v24)
    {
      uint64_t v38 = v30;
      float v39 = -3.4028e38;
      float v35 = 3.4028e38;
      float v40 = 3.4028e38;
      float v41 = -3.4028e38;
      uint64_t v42 = v12;
      do
      {
        if (v42 == v12) {
          uint64_t v44 = v18;
        }
        else {
          uint64_t v44 = 0;
        }
        uint64_t v45 = v38;
        if (v42 != v24) {
          uint64_t v45 = objc_msgSend_pointCountForStrokeIndex_(a1, v31, v42, v32, v33, v34) - 1;
        }
        objc_msgSend_boundsForStrokeIndex_(a1, v31, v42, v32, v33, v34);
        CGFloat rect = v46;
        CGFloat v48 = v47;
        CGFloat v50 = v49;
        CGFloat v52 = v51;
        if (objc_msgSend_pointCountForStrokeIndex_(a1, v53, v42, v54, v55, v56) == v45 - v44 + 1)
        {
          v64.origin.CGFloat x = v48;
          v64.origin.CGFloat y = v50;
          v64.size.CGFloat width = v52;
          v64.size.CGFloat height = rect;
          double MinX = CGRectGetMinX(v64);
          v65.origin.CGFloat x = v48;
          v65.origin.CGFloat y = v50;
          v65.size.CGFloat width = v52;
          v65.size.CGFloat height = rect;
          double MinY = CGRectGetMinY(v65);
          v66.origin.CGFloat x = v48;
          v66.origin.CGFloat y = v50;
          v66.size.CGFloat width = v52;
          v66.size.CGFloat height = rect;
          double MaxX = CGRectGetMaxX(v66);
          v67.origin.CGFloat x = v48;
          v67.origin.CGFloat y = v50;
          v67.size.CGFloat width = v52;
          v67.size.CGFloat height = rect;
          float v35 = fmin(v35, MinX);
          float v40 = fmin(v40, MinY);
          float v39 = fmax(v39, MaxX);
          float v41 = fmax(v41, CGRectGetMaxY(v67));
        }
        else
        {
          v68.origin.CGFloat x = v48;
          v68.origin.CGFloat y = v50;
          v68.size.CGFloat width = v52;
          v68.size.CGFloat height = rect;
          if (CGRectGetMinX(v68) > v35) {
            goto LABEL_19;
          }
          v69.origin.CGFloat x = v48;
          v69.origin.CGFloat y = v50;
          v69.size.CGFloat width = v52;
          v69.size.CGFloat height = rect;
          if (CGRectGetMaxX(v69) > v39) {
            goto LABEL_19;
          }
          v70.origin.CGFloat x = v48;
          v70.origin.CGFloat y = v50;
          v70.size.CGFloat width = v52;
          v70.size.CGFloat height = rect;
          if (CGRectGetMinY(v70) < v40
            || (v71.origin.CGFloat x = v48,
                v71.origin.CGFloat y = v50,
                v71.size.CGFloat width = v52,
                v71.size.CGFloat height = rect,
                CGRectGetMaxY(v71) > v41))
          {
LABEL_19:
            if (v45 >= v44)
            {
              uint64_t v58 = v45 + 1;
              do
              {
                objc_msgSend_pointForStrokeIndex_pointIndex_(a1, v31, v42, v44, v33, v34);
                float v35 = fmin(v35, v59);
                float v40 = fmin(v40, v60);
                float v39 = fmax(v39, v59);
                float v41 = fmax(v41, v60);
                ++v44;
              }
              while (v58 != v44);
            }
          }
        }
      }
      while (v42++ != v24);
    }
    else
    {
      float v35 = 3.4028e38;
    }
    double v36 = v35;
  }
  else
  {
    double v36 = 0.0;
  }

  return v36;
}

void sub_1C49C3FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C3FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C402C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C49C44F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1C49C6028(&a9);

  _Unwind_Resume(a1);
}

void sub_1C49C4698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49C46EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49C470C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49C472C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49C478C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49C4CD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3, a4, a5, a6);
}

void sub_1C49C4E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C4FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C511C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C512C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C5174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C5188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C5288(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1C49C52C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C5378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C49C5390(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_segmentID(a2, (const char *)a2, a3, a4, a5, a6);
  uint64_t v13 = objc_msgSend_unsignedIntegerValue(v7, v8, v9, v10, v11, v12);
  BOOL v19 = v13 == objc_msgSend_unsignedIntegerValue(*(void **)(a1 + 32), v14, v15, v16, v17, v18);

  return v19;
}

void sub_1C49C53E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C5500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49C55DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49C5610(uint64_t a1)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 256) = &unk_1F2011CC8;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  sub_1C49B8F48((uint64_t *)a1);
  return a1;
}

void sub_1C49C5694(_Unwind_Exception *a1)
{
  uint64_t v7 = *(void **)(v1 + 520);
  if (v7)
  {
    *(void *)(v1 + 528) = v7;
    operator delete(v7);
    *unint64_t v4 = v3;
    uint64_t v8 = *v5;
    if (!*v5)
    {
LABEL_3:
      sub_1C496B66C(v2);
      uint64_t v9 = *(void **)(v1 + 72);
      if (!v9) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    *unint64_t v4 = v3;
    uint64_t v8 = *v5;
    if (!*v5) {
      goto LABEL_3;
    }
  }
  MEMORY[0x1C8786430](v8, 0x1000C8000313F17);
  *id v5 = 0;
  sub_1C496B66C(v2);
  uint64_t v9 = *(void **)(v1 + 72);
  if (!v9)
  {
LABEL_4:
    uint64_t v10 = *(void **)(v1 + 48);
    if (!v10) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  *(void *)(v1 + 80) = v9;
  operator delete(v9);
  uint64_t v10 = *(void **)(v1 + 48);
  if (!v10)
  {
LABEL_5:
    uint64_t v11 = *(void **)(v1 + 24);
    if (!v11) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  *(void *)(v1 + 56) = v10;
  operator delete(v10);
  uint64_t v11 = *(void **)(v1 + 24);
  if (!v11)
  {
LABEL_6:
    sub_1C496B66C((void **)v1);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(v11);
  sub_1C496B66C((void **)v1);
  _Unwind_Resume(a1);
}

void *sub_1C49C574C(void *a1)
{
  *a1 = &unk_1F2011CC8;
  uint64_t v2 = a1[16];
  if (v2)
  {
    MEMORY[0x1C8786430](v2, 0x1000C8000313F17);
    a1[16] = 0;
  }
  return a1;
}

void sub_1C49C57AC(void *a1)
{
  *a1 = &unk_1F2011CC8;
  uint64_t v1 = a1[16];
  if (v1) {
    MEMORY[0x1C8786430](v1, 0x1000C8000313F17);
  }
  JUMPOUT(0x1C8786450);
}

void sub_1C49C581C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 140);
  int v5 = *(_DWORD *)(a2 + 136);
  *(void *)a3 = &unk_1F2011CC8;
  *(_DWORD *)(a3 + 136) = v5;
  *(_DWORD *)(a3 + 140) = v4;
  operator new[]();
}

void sub_1C49C5AB8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a1 + 140);
  *(void *)a2 = &unk_1F2011CC8;
  *(_DWORD *)(a2 + 136) = v4;
  *(_DWORD *)(a2 + 140) = v3;
  operator new[]();
}

void sub_1C49C5C2C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a1 + 140);
  *(void *)a2 = &unk_1F2011CC8;
  *(_DWORD *)(a2 + 136) = v4;
  *(_DWORD *)(a2 + 140) = v3;
  operator new[]();
}

uint64_t sub_1C49C5DE4(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 140);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(result + 136);
    if (v3)
    {
      unsigned int v4 = 0;
      unsigned int v5 = 0;
      int v6 = 0;
      uint64_t v7 = *(void *)(a2 + 128);
      int v8 = *(_DWORD *)(a2 + 136);
      int v9 = v3 - 1;
      uint64_t v10 = *(void *)(result + 128);
      do
      {
        if (v3 >= 0xC)
        {
          uint64_t v11 = 0;
          BOOL v13 = __CFADD__(v3 * v6, v9);
          BOOL v14 = __CFADD__(v8 * v6, v9);
          if (v13 || v14 || (unint64_t)(v3 - 1) >> 32) {
            goto LABEL_6;
          }
          uint64_t v15 = 8 * (v3 * v6);
          uint64_t v16 = 8 * (v8 * v6);
          if (v10 + v15 >= (unint64_t)(v7 + 8 * v3 + v16) || v7 + v16 >= (unint64_t)(v10 + 8 * v3 + v15))
          {
            unsigned int v17 = v4;
            unsigned int v18 = v5;
            uint64_t v19 = v3 & 0xFFFFFFFC;
            do
            {
              uint64_t v20 = (float64x2_t *)(v7 + 8 * v18);
              float64x2_t v21 = *v20;
              float64x2_t v22 = v20[1];
              uint64_t v23 = (float64x2_t *)(v10 + 8 * v17);
              float64x2_t v24 = vaddq_f64(v22, v23[1]);
              float64x2_t *v23 = vaddq_f64(v21, *v23);
              v23[1] = v24;
              v18 += 4;
              v17 += 4;
              v19 -= 4;
            }
            while (v19);
            uint64_t v11 = v3 & 0xFFFFFFFC;
            if (v11 == v3) {
              goto LABEL_8;
            }
            goto LABEL_6;
          }
        }
        uint64_t v11 = 0;
LABEL_6:
        uint64_t v12 = v3 - v11;
        do
        {
          *(double *)(v10 + 8 * (v4 + v11)) = *(double *)(v7 + 8 * (v5 + v11))
                                                            + *(double *)(v10 + 8 * (v4 + v11));
          LODWORD(v11) = v11 + 1;
          --v12;
        }
        while (v12);
LABEL_8:
        ++v6;
        v5 += v8;
        v4 += v3;
      }
      while (v6 != v2);
    }
  }
  return result;
}

void sub_1C49C5F14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 128);
  if (v4) {
    MEMORY[0x1C8786430](v4, 0x1000C8000313F17);
  }
  int v5 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = v5;
  operator new[]();
}

uint64_t sub_1C49C5F94(uint64_t a1, const void *a2)
{
  return a1;
}

BOOL sub_1C49C5FCC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 136);
  if (v2 == *(_DWORD *)(a2 + 136) && (int v3 = *(_DWORD *)(a1 + 140), v3 == *(_DWORD *)(a2 + 140))) {
    return memcmp(*(const void **)(a1 + 128), *(const void **)(a2 + 128), 8 * (v3 * v2)) == 0;
  }
  else {
    return 0;
  }
}

void **sub_1C49C6028(void **a1)
{
  int v2 = a1[65];
  if (v2)
  {
    a1[66] = v2;
    operator delete(v2);
  }
  a1[32] = &unk_1F2011CC8;
  int v3 = a1[48];
  if (v3)
  {
    MEMORY[0x1C8786430](v3, 0x1000C8000313F17);
    a1[48] = 0;
  }
  uint64_t v4 = (char *)a1[12];
  if (v4)
  {
    int v5 = (char *)a1[13];
    int v6 = a1[12];
    if (v5 != v4)
    {
      uint64_t v7 = (char *)a1[13];
      do
      {
        int v9 = (void *)*((void *)v7 - 3);
        v7 -= 24;
        int v8 = v9;
        if (v9)
        {
          *((void *)v5 - 2) = v8;
          operator delete(v8);
        }
        int v5 = v7;
      }
      while (v7 != v4);
      int v6 = a1[12];
    }
    a1[13] = v4;
    operator delete(v6);
  }
  uint64_t v10 = a1[9];
  if (v10)
  {
    a1[10] = v10;
    operator delete(v10);
  }
  uint64_t v11 = a1[6];
  if (v11)
  {
    a1[7] = v11;
    operator delete(v11);
  }
  uint64_t v12 = a1[3];
  if (v12) {
    operator delete(v12);
  }
  BOOL v13 = (char *)*a1;
  if (*a1)
  {
    BOOL v14 = (char *)a1[1];
    uint64_t v15 = *a1;
    if (v14 != v13)
    {
      uint64_t v16 = (char *)a1[1];
      do
      {
        unsigned int v18 = (void *)*((void *)v16 - 3);
        v16 -= 24;
        unsigned int v17 = v18;
        if (v18)
        {
          *((void *)v14 - 2) = v17;
          operator delete(v17);
        }
        BOOL v14 = v16;
      }
      while (v16 != v13);
      uint64_t v15 = *a1;
    }
    a1[1] = v13;
    operator delete(v15);
  }
  return a1;
}

double sub_1C49C6168(uint64_t a1, double a2)
{
  if (a2 < 0.0 || *(double *)(a1 + 48) < a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1C49C6338(exception);
    __cxa_throw(exception, (struct type_info *)off_1E64E0AC0, MEMORY[0x1E4FBA1C0]);
  }
  int v2 = *(double **)(a1 + 24);
  int v3 = v2;
  if (*(double **)(a1 + 32) != v2)
  {
    unint64_t v4 = (uint64_t)(*(void *)(a1 + 32) - (void)v2) >> 3;
    int v3 = *(double **)(a1 + 24);
    do
    {
      unint64_t v5 = v4 >> 1;
      int v6 = &v3[v4 >> 1];
      double v8 = *v6;
      uint64_t v7 = v6 + 1;
      v4 += ~(v4 >> 1);
      if (v8 > a2) {
        unint64_t v4 = v5;
      }
      else {
        int v3 = v7;
      }
    }
    while (v4);
  }
  double v9 = *(v3 - 1);
  uint64_t v10 = (char *)(v3 - 1) - (char *)v2;
  uint64_t v11 = (v10 >> 3) + 1;
  double v12 = v2[v11];
  uint64_t v13 = (v10 >> 3) - 1;
  double v14 = v2[v13];
  double v15 = v9 - a2;
  if ((v10 >> 3) + 2 == (uint64_t)(*(void *)(a1 + 32) - (void)v2) >> 3) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = (v10 >> 3) + 2;
  }
  double v17 = v2[v16];
  double v18 = 1.0 / (v9 - v14);
  double v19 = -(v14 - a2);
  double v20 = 1.0 / (v12 - v9);
  double v21 = v12 - a2;
  double v22 = -v15;
  double v23 = 1.0 / (v12 - v14);
  double v24 = v17 - a2;
  double v25 = 1.0 / (v17 - v12);
  double v26 = 1.0 / (v17 - v9);
  float64x2_t v27 = *(float64x2_t *)(*(void *)a1 + 2 * v10);
  float64x2_t v28 = vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v27, v19), *(float64x2_t *)(*(void *)a1 + 16 * v13), v15), v18);
  float64x2_t v29 = *(float64x2_t *)(*(void *)a1 + 16 * v11);
  float64x2_t v30 = vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v29, v22), v27, v21), v20);
  *(void *)&double result = *(_OWORD *)&vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(*(void *)a1 + 16 * v16), -v21), v29, v24), v25), v22), v30, v24), v26), v22), vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v30, v19), v28, v21), v23), v21), v20);
  return result;
}

void sub_1C49C62E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C49C62F4(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

std::logic_error *sub_1C49C6338(std::logic_error *a1)
{
  double result = std::logic_error::logic_error(a1, "Parameter outside bounds.");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
  return result;
}

void sub_1C49C6374(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1C49C6634((void *)a1, (uint64_t *)a2);
  sub_1C49C68B8(v4 + 3, a2 + 24);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int v6 = *(unsigned char **)(a2 + 48);
  unint64_t v5 = *(unsigned char **)(a2 + 56);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_1C494A220();
    }
    double v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v8;
    double v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 64) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 56) = v9;
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v11 = *(unsigned char **)(a2 + 72);
  uint64_t v10 = *(unsigned char **)(a2 + 80);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_1C494A220();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 72) = v13;
    *(void *)(a1 + 80) = v13;
    double v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 88) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 80) = v14;
  }
  sub_1C49C6634((void *)(a1 + 96), (uint64_t *)(a2 + 96));
  uint64_t v15 = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 120) = v15;
  *(void *)(a1 + 256) = &unk_1F2011CC8;
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  operator new[]();
}

void sub_1C49C6560(_Unwind_Exception *a1)
{
  sub_1C496B66C(v5);
  int64_t v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
    double v8 = *v3;
    if (!*v3)
    {
LABEL_3:
      double v9 = *v2;
      if (!*v2) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    double v8 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 56) = v8;
  operator delete(v8);
  double v9 = *v2;
  if (!*v2)
  {
LABEL_4:
    sub_1C496B66C((void **)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v9);
  sub_1C496B66C((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1C49C6624()
{
  if (*v0) {
    JUMPOUT(0x1C49C6600);
  }
  JUMPOUT(0x1C49C65D8);
}

void *sub_1C49C6634(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C494A220();
    }
    double v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_1C49C6744(v3, v4, v5, v8);
  }
  return a1;
}

void sub_1C49C66E0(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  uint64_t v4 = (char *)*v1;
  if (*v1)
  {
    uint64_t v5 = (char *)v1[1];
    int64_t v6 = *v1;
    if (v5 != v4)
    {
      unint64_t v7 = (char *)v1[1];
      do
      {
        double v9 = (void *)*((void *)v7 - 3);
        v7 -= 24;
        double v8 = v9;
        if (v9)
        {
          *((void *)v5 - 2) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      int64_t v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1C49C6744(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      double v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_1C494A220();
        }
        uint64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1C49C6810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C49C6824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1C49C6848((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1C49C6848(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void *sub_1C49C68B8(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 < 0) {
      sub_1C494A220();
    }
    unint64_t v5 = ((unint64_t)(v3 - 1) >> 6) + 1;
    uint64_t v6 = operator new(8 * v5);
    *a1 = v6;
    a1[1] = 0;
    a1[2] = v5;
    unint64_t v7 = *(void **)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    a1[1] = v8;
    unint64_t v9 = (v8 - 1) >> 6;
    if (v8 < 0x41) {
      unint64_t v9 = 0;
    }
    v6[v9] = 0;
    int v10 = v8 & 0x3F;
    if (v8 > 0x3F || (v8 & 0x3F) != 0)
    {
      int v11 = 0;
      int v12 = 0;
      int v13 = 0;
      double v14 = &v7[v8 >> 6];
      do
      {
        uint64_t v15 = 1 << v11;
        if ((*v7 >> v13)) {
          uint64_t v16 = *v6 | v15;
        }
        else {
          uint64_t v16 = *v6 & ~v15;
        }
        *uint64_t v6 = v16;
        ++v13;
        v7 += v12 == 63;
        if (v12 == 63) {
          int v13 = 0;
        }
        v6 += v11 == 63;
        if (v11 == 63) {
          int v11 = 0;
        }
        else {
          ++v11;
        }
        int v12 = v13;
      }
      while (v7 != v14 || v10 != v13);
    }
  }
  return a1;
}

void sub_1C49C69C4(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  int v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      int v11 = *(char ***)(a1 + 8);
      int v12 = *(char ***)a1;
      if (v11 != v10)
      {
        int v13 = *(char ***)(a1 + 8);
        do
        {
          uint64_t v15 = *(v13 - 3);
          v13 -= 3;
          double v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          int v11 = v13;
        }
        while (v13 != v10);
        int v12 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_40;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_40:
    }
      sub_1C494A220();
    uint64_t v23 = 3 * v22;
    double v24 = operator new(24 * v22);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v23];
    double v25 = sub_1C49C6744(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(void *)(a1 + 8) = v25;
    return;
  }
  uint64_t v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    uint64_t v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10) {
          sub_1C494ACB0(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
        }
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      int v10 = *(char ***)(a1 + 8);
    }
    double v25 = sub_1C49C6744(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    double v19 = *(char ***)a1;
    do
    {
      if (v6 != v10) {
        sub_1C494ACB0(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
      }
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    uint64_t v16 = *(char ***)(a1 + 8);
    if (v16 == v19) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  double v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    double v26 = v16;
    do
    {
      float64x2_t v28 = *(v26 - 3);
      v26 -= 3;
      float64x2_t v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      uint64_t v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(void *)(a1 + 8) = v19;
}

void sub_1C49C6C2C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C49C6C34(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_1C49C6C3C(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = v2 - *a1;
  if (v2 != *a1)
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3 >> 3;
    double v6 = 1.79769313e308;
    do
    {
      if (*(double *)(*a1 + 8 * v4) < v6) {
        double v6 = *(double *)(*a1 + 8 * v4);
      }
      v4 += 2;
    }
    while (v4 < v5);
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    uint64_t v9 = v8 - *a2;
    if (v8 != *a2) {
      goto LABEL_7;
    }
    return v6 < 1.79769313e308;
  }
  double v6 = 1.79769313e308;
  uint64_t v7 = *a2;
  uint64_t v14 = a2[1];
  uint64_t v9 = v14 - *a2;
  if (v14 == *a2) {
    return v6 < 1.79769313e308;
  }
LABEL_7:
  unint64_t v10 = 0;
  unint64_t v11 = v9 >> 3;
  double v12 = 1.79769313e308;
  do
  {
    if (*(double *)(v7 + 8 * v10) < v12) {
      double v12 = *(double *)(v7 + 8 * v10);
    }
    v10 += 2;
  }
  while (v10 < v11);
  return v6 < v12;
}

void sub_1C49C6CD8(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  while (2)
  {
    double v12 = a2 - 3;
    uint64_t v84 = a2;
    uint64_t v86 = a2 - 6;
    size_t v82 = a2 - 9;
    int v13 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v13;
        uint64_t v14 = (char *)a2 - (char *)v13;
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (a2 - v13);
        if (v6 || !v5)
        {
          switch(v15)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              if ((*a3)(v12, a1))
              {
                uint64_t v37 = *a1;
                *a1 = *(a2 - 3);
                *(a2 - 3) = v37;
                uint64_t v38 = a1[1];
                a1[1] = *(a2 - 2);
                *(a2 - 2) = v38;
                uint64_t v39 = a1[2];
                a1[2] = *(a2 - 1);
                *(a2 - 1) = v39;
              }
              break;
            case 3uLL:
              sub_1C49C78C4(a1, a1 + 3, v12, a3);
              break;
            case 4uLL:
              sub_1C49C7CEC(a1, a1 + 3, a1 + 6, v12, a3);
              break;
            case 5uLL:
              sub_1C49C7E00(a1, a1 + 3, a1 + 6, a1 + 9, v12, a3);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v14 <= 575)
        {
          if (a5)
          {
            if (a1 != a2)
            {
              float v40 = a1 + 3;
              if (a1 + 3 != a2)
              {
                uint64_t v41 = 0;
                uint64_t v42 = a1;
                do
                {
                  uint64_t v45 = v40;
                  if ((*a3)(v40, v42))
                  {
                    double v46 = 0;
                    long long v89 = *(_OWORD *)v45;
                    uint64_t v90 = v42[5];
                    *uint64_t v45 = 0;
                    v45[1] = 0;
                    v45[2] = 0;
                    uint64_t v47 = v41;
                    do
                    {
                      CGFloat v48 = (char *)a1 + v47;
                      if (v46)
                      {
                        *((void *)v48 + 4) = v46;
                        operator delete(v46);
                        *((void *)v48 + 3) = 0;
                        *((void *)v48 + 4) = 0;
                        *((void *)v48 + 5) = 0;
                      }
                      *(_OWORD *)(v48 + 24) = *(_OWORD *)v48;
                      *((void *)v48 + 5) = *((void *)v48 + 2);
                      *((void *)v48 + 1) = 0;
                      *((void *)v48 + 2) = 0;
                      *(void *)CGFloat v48 = 0;
                      if (!v47)
                      {
                        float64x2_t v43 = a1 + 1;
                        uint64_t v44 = a1;
                        goto LABEL_79;
                      }
                      char v49 = (*a3)((uint64_t *)&v89, (uint64_t *)((char *)a1 + v47 - 24));
                      double v46 = *(void **)v48;
                      v47 -= 24;
                    }
                    while ((v49 & 1) != 0);
                    CGFloat v50 = (char *)a1 + v47;
                    float64x2_t v43 = (uint64_t *)((char *)a1 + v47 + 32);
                    uint64_t v44 = (uint64_t *)(v50 + 24);
                    if (v46)
                    {
                      *((void *)v50 + 4) = v46;
                      operator delete(v46);
                      *uint64_t v44 = 0;
                      v44[1] = 0;
                      v44[2] = 0;
                    }
LABEL_79:
                    *uint64_t v44 = v89;
                    void *v43 = *((void *)&v89 + 1);
                    v44[2] = v90;
                    a2 = v84;
                  }
                  float v40 = v45 + 3;
                  v41 += 24;
                  uint64_t v42 = v45;
                }
                while (v45 + 3 != a2);
              }
            }
          }
          else if (a1 != a2)
          {
            unint64_t v75 = a1 + 3;
            if (a1 + 3 != a2)
            {
              int64_t v76 = a1 - 3;
              do
              {
                unint64_t v77 = v75;
                if ((*a3)(v75, a1))
                {
                  BOOL v78 = 0;
                  long long v89 = *(_OWORD *)v77;
                  uint64_t v90 = a1[5];
                  *unint64_t v77 = 0;
                  v77[1] = 0;
                  v77[2] = 0;
                  unint64_t v79 = v76;
                  do
                  {
                    if (v78)
                    {
                      v79[7] = (uint64_t)v78;
                      operator delete(v78);
                      v79[6] = 0;
                      v79[7] = 0;
                      v79[8] = 0;
                    }
                    *((_OWORD *)v79 + 3) = *(_OWORD *)(v79 + 3);
                    v79[8] = v79[5];
                    v79[4] = 0;
                    v79[5] = 0;
                    v79[3] = 0;
                    char v80 = (*a3)((uint64_t *)&v89, v79);
                    BOOL v78 = (void *)v79[3];
                    v79 -= 3;
                  }
                  while ((v80 & 1) != 0);
                  if (v78)
                  {
                    v79[7] = (uint64_t)v78;
                    operator delete(v78);
                    v79[6] = 0;
                    v79[7] = 0;
                    v79[8] = 0;
                  }
                  *((_OWORD *)v79 + 3) = v89;
                  v79[8] = v90;
                }
                unint64_t v75 = v77 + 3;
                v76 += 3;
                a1 = v77;
              }
              while (v77 + 3 != a2);
            }
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            int64_t v51 = (v15 - 2) >> 1;
            int64_t v87 = v51;
            do
            {
              int64_t v52 = v51;
              if (v87 >= v51)
              {
                uint64_t v53 = (2 * v51) | 1;
                uint64_t v54 = &a1[3 * v53];
                if (2 * v51 + 2 < (uint64_t)v15 && (*a3)(&a1[3 * v53], v54 + 3))
                {
                  v54 += 3;
                  uint64_t v53 = 2 * v52 + 2;
                }
                uint64_t v55 = &a1[3 * v52];
                if (((*a3)(v54, v55) & 1) == 0)
                {
                  uint64_t v56 = 0;
                  long long v89 = *(_OWORD *)v55;
                  uint64_t v90 = a1[3 * v52 + 2];
                  uint64_t *v55 = 0;
                  v55[1] = 0;
                  v55[2] = 0;
                  while (1)
                  {
                    uint64_t v57 = v54;
                    if (v56)
                    {
                      v55[1] = (uint64_t)v56;
                      operator delete(v56);
                      uint64_t *v55 = 0;
                      v55[1] = 0;
                      v55[2] = 0;
                    }
                    *(_OWORD *)uint64_t v55 = *(_OWORD *)v54;
                    v55[2] = v54[2];
                    *uint64_t v54 = 0;
                    v54[1] = 0;
                    v54[2] = 0;
                    if (v87 < v53) {
                      break;
                    }
                    uint64_t v58 = (2 * v53) | 1;
                    uint64_t v54 = &a1[3 * v58];
                    uint64_t v53 = 2 * v53 + 2;
                    if (v53 < (uint64_t)v15)
                    {
                      if ((*a3)(&a1[3 * v58], v54 + 3)) {
                        v54 += 3;
                      }
                      else {
                        uint64_t v53 = v58;
                      }
                    }
                    else
                    {
                      uint64_t v53 = v58;
                    }
                    int v59 = (*a3)(v54, (uint64_t *)&v89);
                    uint64_t v56 = (void *)*v57;
                    uint64_t v55 = v57;
                    if (v59)
                    {
                      if (v56)
                      {
                        v57[1] = (uint64_t)v56;
                        operator delete(v56);
                        *uint64_t v57 = 0;
                        v57[1] = 0;
                        v57[2] = 0;
                      }
                      break;
                    }
                  }
                  *(_OWORD *)uint64_t v57 = v89;
                  v57[2] = v90;
                }
              }
              int64_t v51 = v52 - 1;
            }
            while (v52);
            int64_t v60 = v14 / 0x18uLL;
            double v61 = v84;
            do
            {
              float v85 = v61;
              if (v60 >= 2)
              {
                uint64_t v63 = 0;
                uint64_t v88 = *a1;
                uint64_t v81 = a1[2];
                uint64_t v83 = a1[1];
                a1[1] = 0;
                a1[2] = 0;
                CGRect v64 = a1;
                *a1 = 0;
                do
                {
                  CGRect v65 = v64;
                  v64 += 3 * v63 + 3;
                  uint64_t v66 = 2 * v63;
                  uint64_t v63 = (2 * v63) | 1;
                  uint64_t v67 = v66 + 2;
                  if (v66 + 2 < v60)
                  {
                    if ((*a3)(v64, v64 + 3))
                    {
                      v64 += 3;
                      uint64_t v63 = v67;
                    }
                    CGRect v68 = (void *)*v65;
                    if (*v65)
                    {
                      v65[1] = (uint64_t)v68;
                      operator delete(v68);
                      *CGRect v65 = 0;
                      v65[1] = 0;
                      v65[2] = 0;
                    }
                  }
                  *(_OWORD *)CGRect v65 = *(_OWORD *)v64;
                  v65[2] = v64[2];
                  uint64_t *v64 = 0;
                  v64[1] = 0;
                  v64[2] = 0;
                }
                while (v63 <= (uint64_t)((unint64_t)(v60 - 2) >> 1));
                if (v64 == v85 - 3)
                {
                  uint64_t *v64 = v88;
                  v64[1] = v83;
                  v64[2] = v81;
                }
                else
                {
                  *(_OWORD *)CGRect v64 = *(_OWORD *)(v85 - 3);
                  v64[2] = *(v85 - 1);
                  *(v85 - 3) = v88;
                  *(v85 - 2) = v83;
                  *(v85 - 1) = v81;
                  uint64_t v69 = (char *)v64 - (char *)a1 + 24;
                  if (v69 >= 25)
                  {
                    unint64_t v70 = (v69 / 0x18uLL - 2) >> 1;
                    CGRect v71 = &a1[3 * v70];
                    if ((*a3)(v71, v64))
                    {
                      uint64_t v72 = 0;
                      long long v89 = *(_OWORD *)v64;
                      uint64_t v90 = v64[2];
                      uint64_t *v64 = 0;
                      v64[1] = 0;
                      v64[2] = 0;
                      while (1)
                      {
                        uint64_t v73 = v71;
                        if (v72)
                        {
                          v64[1] = (uint64_t)v72;
                          operator delete(v72);
                          uint64_t *v64 = 0;
                          v64[1] = 0;
                          v64[2] = 0;
                        }
                        *(_OWORD *)CGRect v64 = *(_OWORD *)v71;
                        v64[2] = v71[2];
                        *CGRect v71 = 0;
                        v71[1] = 0;
                        v71[2] = 0;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        CGRect v71 = &a1[3 * v70];
                        char v74 = (*a3)(v71, (uint64_t *)&v89);
                        uint64_t v72 = (void *)*v73;
                        CGRect v64 = v73;
                        if ((v74 & 1) == 0)
                        {
                          if (v72)
                          {
                            v73[1] = (uint64_t)v72;
                            operator delete(v72);
                            *uint64_t v73 = 0;
                            v73[1] = 0;
                            v73[2] = 0;
                          }
                          break;
                        }
                      }
                      *(_OWORD *)uint64_t v73 = v89;
                      v73[2] = v90;
                    }
                  }
                }
              }
              double v61 = v85 - 3;
            }
            while ((unint64_t)v60-- > 2);
          }
          return;
        }
        uint64_t v16 = &a1[3 * (v15 >> 1)];
        if ((unint64_t)v14 < 0xC01) {
          break;
        }
        sub_1C49C78C4(a1, &a1[3 * (v15 >> 1)], v12, a3);
        uint64_t v17 = 3 * (v15 >> 1);
        sub_1C49C78C4(a1 + 3, &a1[v17 - 3], v86, a3);
        sub_1C49C78C4(a1 + 6, &a1[v17 + 3], v82, a3);
        sub_1C49C78C4(&a1[v17 - 3], v16, &a1[v17 + 3], a3);
        long long v18 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v16;
        *(_OWORD *)uint64_t v16 = v18;
        uint64_t v19 = a1[2];
        a1[2] = a1[v17 + 2];
        a1[v17 + 2] = v19;
        --a4;
        a2 = v84;
        if (a5) {
          goto LABEL_12;
        }
LABEL_11:
        if ((*a3)(a1 - 3, a1)) {
          goto LABEL_12;
        }
        long long v89 = *(_OWORD *)a1;
        uint64_t v90 = a1[2];
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        if ((*a3)((uint64_t *)&v89, v12))
        {
          int v13 = a1;
          do
            v13 += 3;
          while (((*a3)((uint64_t *)&v89, v13) & 1) == 0);
        }
        else
        {
          float64x2_t v30 = a1 + 3;
          do
          {
            int v13 = v30;
            if (v30 >= a2) {
              break;
            }
            int v31 = (*a3)((uint64_t *)&v89, v30);
            float64x2_t v30 = v13 + 3;
          }
          while (!v31);
        }
        uint64_t v32 = a2;
        if (v13 < a2)
        {
          uint64_t v32 = a2;
          do
            v32 -= 3;
          while (((*a3)((uint64_t *)&v89, v32) & 1) != 0);
        }
        while (v13 < v32)
        {
          uint64_t v33 = *v13;
          uint64_t *v13 = *v32;
          *uint64_t v32 = v33;
          uint64_t v34 = v13[1];
          v13[1] = v32[1];
          v32[1] = v34;
          uint64_t v35 = v13[2];
          v13[2] = v32[2];
          v32[2] = v35;
          do
            v13 += 3;
          while (!(*a3)((uint64_t *)&v89, v13));
          do
            v32 -= 3;
          while (((*a3)((uint64_t *)&v89, v32) & 1) != 0);
        }
        double v36 = (void *)*a1;
        BOOL v5 = v13 - 3 >= a1;
        BOOL v6 = v13 - 3 == a1;
        if (v13 - 3 == a1)
        {
          if (!v36) {
            goto LABEL_59;
          }
          *(v13 - 2) = (uint64_t)v36;
          operator delete(v36);
        }
        else
        {
          if (v36)
          {
            a1[1] = (uint64_t)v36;
            operator delete(v36);
            *a1 = 0;
            a1[1] = 0;
            a1[2] = 0;
          }
          *(_OWORD *)a1 = *(_OWORD *)(v13 - 3);
          a1[2] = *(v13 - 1);
        }
        *(v13 - 3) = 0;
        *(v13 - 2) = 0;
        *(v13 - 1) = 0;
LABEL_59:
        a5 = 0;
        *(_OWORD *)(v13 - 3) = v89;
        *(v13 - 1) = v90;
      }
      sub_1C49C78C4(&a1[3 * (v15 >> 1)], a1, v12, a3);
      --a4;
      a2 = v84;
      if ((a5 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_12:
      uint64_t v20 = 0;
      long long v89 = *(_OWORD *)a1;
      uint64_t v90 = a1[2];
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      do
      {
        char v21 = (*a3)(&a1[v20 + 3], (uint64_t *)&v89);
        v20 += 3;
      }
      while ((v21 & 1) != 0);
      unint64_t v22 = &a1[v20];
      uint64_t v23 = a2;
      if (v20 == 3)
      {
        uint64_t v23 = a2;
        do
        {
          if (v22 >= v23) {
            break;
          }
          v23 -= 3;
        }
        while (((*a3)(v23, (uint64_t *)&v89) & 1) == 0);
      }
      else
      {
        do
          v23 -= 3;
        while (!(*a3)(v23, (uint64_t *)&v89));
      }
      int v13 = &a1[v20];
      if (v22 < v23)
      {
        double v24 = v23;
        do
        {
          uint64_t v25 = *v13;
          uint64_t *v13 = *v24;
          *double v24 = v25;
          uint64_t v26 = v13[1];
          v13[1] = v24[1];
          v24[1] = v26;
          uint64_t v27 = v13[2];
          v13[2] = v24[2];
          v24[2] = v27;
          do
            v13 += 3;
          while (((*a3)(v13, (uint64_t *)&v89) & 1) != 0);
          do
            v24 -= 3;
          while (!(*a3)(v24, (uint64_t *)&v89));
        }
        while (v13 < v24);
      }
      float64x2_t v28 = (void *)*a1;
      if (v13 - 3 == a1)
      {
        if (!v28) {
          goto LABEL_33;
        }
        *(v13 - 2) = (uint64_t)v28;
        operator delete(v28);
      }
      else
      {
        if (v28)
        {
          a1[1] = (uint64_t)v28;
          operator delete(v28);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
        }
        *(_OWORD *)a1 = *(_OWORD *)(v13 - 3);
        a1[2] = *(v13 - 1);
      }
      *(v13 - 3) = 0;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
LABEL_33:
      *(_OWORD *)(v13 - 3) = v89;
      *(v13 - 1) = v90;
      if (v22 < v23) {
        goto LABEL_36;
      }
      BOOL v29 = sub_1C49C7A3C(a1, v13 - 3, a3);
      if (sub_1C49C7A3C(v13, a2, a3)) {
        break;
      }
      if (!v29)
      {
LABEL_36:
        sub_1C49C6CD8(a1, v13 - 3, a3, a4, a5 & 1);
        a5 = 0;
      }
    }
    a2 = v13 - 3;
    if (!v29) {
      continue;
    }
    break;
  }
}

void sub_1C49C7844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C49C78C4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    unint64_t v11 = a1 + 2;
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      uint64_t v12 = a1[1];
      a1[1] = a3[1];
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      uint64_t v19 = a1[1];
      a1[1] = a2[1];
      a2[1] = v19;
      unint64_t v11 = a2 + 2;
      uint64_t v20 = a1[2];
      a1[2] = a2[2];
      a2[2] = v20;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = *a2;
      *a2 = *a3;
      *a3 = v21;
      uint64_t v12 = a2[1];
      a2[1] = a3[1];
    }
    a3[1] = v12;
    uint64_t v16 = a3 + 2;
    goto LABEL_10;
  }
  if (result)
  {
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    uint64_t v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    uint64_t v16 = a2 + 2;
    uint64_t v15 = a2[2];
    a2[2] = a3[2];
    a3[2] = v15;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      uint64_t v17 = *a1;
      *a1 = *a2;
      *a2 = v17;
      uint64_t v18 = a1[1];
      a1[1] = a2[1];
      a2[1] = v18;
      unint64_t v11 = a1 + 2;
LABEL_10:
      uint64_t v22 = *v11;
      *unint64_t v11 = *v16;
      *uint64_t v16 = v22;
    }
  }
  return result;
}

BOOL sub_1C49C7A3C(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (!(*a3)(a2 - 3, a1)) {
        return 1;
      }
      uint64_t v8 = *a1;
      *a1 = *(a2 - 3);
      *(a2 - 3) = v8;
      uint64_t v9 = a1[1];
      a1[1] = *(a2 - 2);
      *(a2 - 2) = v9;
      uint64_t v10 = a1[2];
      a1[2] = *(a2 - 1);
      *(a2 - 1) = v10;
      return 1;
    case 3uLL:
      sub_1C49C78C4(a1, a1 + 3, a2 - 3, a3);
      return 1;
    case 4uLL:
      sub_1C49C7CEC(a1, a1 + 3, a1 + 6, a2 - 3, a3);
      return 1;
    case 5uLL:
      sub_1C49C7E00(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3, a3);
      return 1;
    default:
      unint64_t v11 = a1 + 6;
      sub_1C49C78C4(a1, a1 + 3, a1 + 6, a3);
      uint64_t v12 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v12, v11))
    {
      uint64_t v18 = 0;
      long long v24 = *(_OWORD *)v12;
      uint64_t v25 = v12[2];
      v12[1] = 0;
      v12[2] = 0;
      *uint64_t v12 = 0;
      uint64_t v19 = v13;
      do
      {
        uint64_t v20 = (char *)a1 + v19;
        uint64_t v21 = (uint64_t *)((char *)a1 + v19 + 72);
        if (v18)
        {
          *((void *)v20 + 10) = v18;
          operator delete(v18);
          *uint64_t v21 = 0;
          *(uint64_t *)((char *)a1 + v19 + 80) = 0;
          *(uint64_t *)((char *)a1 + v19 + 88) = 0;
        }
        *(_OWORD *)uint64_t v21 = *((_OWORD *)v20 + 3);
        *((void *)v20 + 11) = *((void *)v20 + 8);
        *((void *)v20 + 6) = 0;
        *((void *)v20 + 7) = 0;
        *((void *)v20 + 8) = 0;
        if (v19 == -48)
        {
          uint64_t v15 = a1 + 1;
          uint64_t v16 = a1;
          goto LABEL_7;
        }
        char v22 = (*a3)((uint64_t *)&v24, (uint64_t *)((char *)a1 + v19 + 24));
        uint64_t v18 = (void *)*((void *)v20 + 6);
        v19 -= 24;
      }
      while ((v22 & 1) != 0);
      uint64_t v23 = (char *)a1 + v19;
      uint64_t v15 = (uint64_t *)((char *)a1 + v19 + 80);
      uint64_t v16 = (uint64_t *)(v23 + 72);
      if (v18)
      {
        *((void *)v23 + 10) = v18;
        operator delete(v18);
        *uint64_t v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
      }
LABEL_7:
      uint64_t v17 = *((void *)&v24 + 1);
      *uint64_t v16 = v24;
      *uint64_t v15 = v17;
      v16[2] = v25;
      if (++v14 == 8) {
        return v12 + 3 == a2;
      }
    }
    unint64_t v11 = v12;
    v13 += 24;
    v12 += 3;
    if (v12 == a2) {
      return 1;
    }
  }
}

void sub_1C49C7CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C49C7CEC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  sub_1C49C78C4(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    uint64_t v13 = a3[2];
    a3[2] = a4[2];
    a4[2] = v13;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      uint64_t v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      uint64_t v15 = a2[1];
      a2[1] = a3[1];
      a3[1] = v15;
      uint64_t v16 = a2[2];
      a2[2] = a3[2];
      a3[2] = v16;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        uint64_t v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        uint64_t v18 = a1[1];
        a1[1] = a2[1];
        a2[1] = v18;
        uint64_t v19 = a1[2];
        a1[2] = a2[2];
        a2[2] = v19;
      }
    }
  }
  return result;
}

uint64_t sub_1C49C7E00(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  sub_1C49C7CEC(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    uint64_t v15 = a4[2];
    a4[2] = a5[2];
    a5[2] = v15;
    uint64_t result = (*a6)(a4, a3);
    if (result)
    {
      uint64_t v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      uint64_t v17 = a3[1];
      a3[1] = a4[1];
      a4[1] = v17;
      uint64_t v18 = a3[2];
      a3[2] = a4[2];
      a4[2] = v18;
      uint64_t result = (*a6)(a3, a2);
      if (result)
      {
        uint64_t v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        uint64_t v20 = a2[1];
        a2[1] = a3[1];
        a3[1] = v20;
        uint64_t v21 = a2[2];
        a2[2] = a3[2];
        a3[2] = v21;
        uint64_t result = (*a6)(a2, a1);
        if (result)
        {
          uint64_t v22 = *a1;
          *a1 = *a2;
          *a2 = v22;
          uint64_t v23 = a1[1];
          a1[1] = a2[1];
          a2[1] = v23;
          uint64_t v24 = a1[2];
          a1[2] = a2[2];
          a2[2] = v24;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1C49C7F5C(unint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = a2 - 1;
  uint64_t v353 = a2 - 3;
  uint64_t v354 = a2 - 2;
  uint64_t v12 = v10;
  float v355 = a2;
  double v356 = a2 - 1;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    unint64_t v14 = a2 - v12;
    if (v6 || !v5) {
      break;
    }
    if (v13 <= 191)
    {
      id v197 = *a3;
      if (a5)
      {
        if (v12 == a2) {
          return result;
        }
        uint64_t v198 = v12 + 1;
        if (v12 + 1 == a2) {
          return result;
        }
        uint64_t v199 = *v197;
        uint64_t v200 = v12;
        while (2)
        {
          uint64_t v202 = v198;
          uint64_t v203 = v200[1];
          uint64_t v205 = *(void *)(v199 + 24 * v203);
          uint64_t v204 = *(void *)(v199 + 24 * v203 + 8);
          unint64_t v206 = (v204 - v205) >> 3;
          if (v204 == v205)
          {
            double v208 = 1.79769313e308;
            uint64_t v209 = *v200;
            uint64_t v210 = *(void *)(v199 + 24 * *v200);
            uint64_t result = *(void *)(v199 + 24 * *v200 + 8);
            uint64_t v211 = result - v210;
            if (result == v210) {
              goto LABEL_283;
            }
LABEL_276:
            uint64_t result = 0;
            unint64_t v212 = v211 >> 3;
            double v213 = 1.79769313e308;
            do
            {
              if (*(double *)(v210 + 8 * result) < v213) {
                double v213 = *(double *)(v210 + 8 * result);
              }
              result += 2;
            }
            while (result < v212);
            if (v208 >= v213) {
              goto LABEL_269;
            }
          }
          else
          {
            unint64_t v207 = 0;
            double v208 = 1.79769313e308;
            do
            {
              if (*(double *)(v205 + 8 * v207) < v208) {
                double v208 = *(double *)(v205 + 8 * v207);
              }
              v207 += 2;
            }
            while (v207 < v206);
            uint64_t v209 = *v200;
            uint64_t v210 = *(void *)(v199 + 24 * *v200);
            uint64_t result = *(void *)(v199 + 24 * *v200 + 8);
            uint64_t v211 = result - v210;
            if (result != v210) {
              goto LABEL_276;
            }
LABEL_283:
            if (v208 >= 1.79769313e308) {
              goto LABEL_269;
            }
          }
          uint64_t v201 = v202;
LABEL_287:
          *uint64_t v201 = v209;
          if (v200 == v12)
          {
            uint64_t v201 = v12;
LABEL_268:
            *uint64_t v201 = v203;
LABEL_269:
            uint64_t v198 = v202 + 1;
            uint64_t v200 = v202;
            if (v202 + 1 == a2) {
              return result;
            }
            continue;
          }
          break;
        }
        uint64_t v201 = v200;
        if (v204 == v205)
        {
          double v216 = 1.79769313e308;
          --v200;
          uint64_t v209 = *(v201 - 1);
          uint64_t result = *(void *)(v199 + 24 * v209);
          uint64_t v219 = *(void *)(v199 + 24 * v209 + 8);
          uint64_t v218 = v219 - result;
          if (v219 == result) {
            goto LABEL_285;
          }
        }
        else
        {
          unint64_t v215 = 0;
          double v216 = 1.79769313e308;
          do
          {
            if (*(double *)(v205 + 8 * v215) < v216) {
              double v216 = *(double *)(v205 + 8 * v215);
            }
            v215 += 2;
          }
          while (v215 < v206);
          uint64_t v200 = v201 - 1;
          uint64_t v209 = *(v201 - 1);
          uint64_t result = *(void *)(v199 + 24 * v209);
          uint64_t v217 = *(void *)(v199 + 24 * v209 + 8);
          uint64_t v218 = v217 - result;
          if (v217 == result)
          {
LABEL_285:
            uint64_t result = 0x7FEFFFFFFFFFFFFFLL;
            double v214 = 1.79769313e308;
            goto LABEL_286;
          }
        }
        unint64_t v220 = 0;
        unint64_t v221 = v218 >> 3;
        double v214 = 1.79769313e308;
        do
        {
          if (*(double *)(result + 8 * v220) < v214) {
            double v214 = *(double *)(result + 8 * v220);
          }
          v220 += 2;
        }
        while (v220 < v221);
LABEL_286:
        if (v216 >= v214) {
          goto LABEL_268;
        }
        goto LABEL_287;
      }
      if (v12 == a2) {
        return result;
      }
      uint64_t v329 = v12 + 1;
      if (v12 + 1 == a2) {
        return result;
      }
      uint64_t v330 = *v197;
      while (2)
      {
        uint64_t v331 = v329;
        uint64_t v332 = v10[1];
        uint64_t v334 = *(void *)(v330 + 24 * v332);
        uint64_t v333 = *(void *)(v330 + 24 * v332 + 8);
        unint64_t v335 = (v333 - v334) >> 3;
        if (v333 == v334)
        {
          double v337 = 1.79769313e308;
          uint64_t v338 = *v10;
          uint64_t v339 = *(void *)(v330 + 24 * *v10);
          uint64_t v343 = *(void *)(v330 + 24 * *v10 + 8);
          uint64_t result = v343 - v339;
          if (v343 != v339) {
            goto LABEL_438;
          }
        }
        else
        {
          unint64_t v336 = 0;
          double v337 = 1.79769313e308;
          do
          {
            if (*(double *)(v334 + 8 * v336) < v337) {
              double v337 = *(double *)(v334 + 8 * v336);
            }
            v336 += 2;
          }
          while (v336 < v335);
          uint64_t v338 = *v10;
          uint64_t v339 = *(void *)(v330 + 24 * *v10);
          uint64_t v340 = *(void *)(v330 + 24 * *v10 + 8);
          uint64_t result = v340 - v339;
          if (v340 != v339)
          {
LABEL_438:
            unint64_t v341 = 0;
            uint64_t result = (uint64_t)result >> 3;
            double v342 = 1.79769313e308;
            do
            {
              if (*(double *)(v339 + 8 * v341) < v342) {
                double v342 = *(double *)(v339 + 8 * v341);
              }
              v341 += 2;
            }
            while (v341 < result);
            if (v337 < v342)
            {
LABEL_446:
              uint64_t v344 = v331;
              while (1)
              {
                uint64_t *v344 = v338;
                uint64_t v344 = v10;
                if (v333 == v334)
                {
                  double v347 = 1.79769313e308;
                  --v10;
                  uint64_t v338 = *(v344 - 1);
                  uint64_t v348 = *(void *)(v330 + 24 * v338);
                  uint64_t result = *(void *)(v330 + 24 * v338 + 8);
                  uint64_t v349 = result - v348;
                  if (result != v348) {
                    goto LABEL_457;
                  }
                }
                else
                {
                  unint64_t v346 = 0;
                  double v347 = 1.79769313e308;
                  do
                  {
                    if (*(double *)(v334 + 8 * v346) < v347) {
                      double v347 = *(double *)(v334 + 8 * v346);
                    }
                    v346 += 2;
                  }
                  while (v346 < v335);
                  --v10;
                  uint64_t v338 = *(v344 - 1);
                  uint64_t v348 = *(void *)(v330 + 24 * v338);
                  uint64_t result = *(void *)(v330 + 24 * v338 + 8);
                  uint64_t v349 = result - v348;
                  if (result != v348)
                  {
LABEL_457:
                    uint64_t result = 0;
                    unint64_t v350 = v349 >> 3;
                    double v345 = 1.79769313e308;
                    do
                    {
                      if (*(double *)(v348 + 8 * result) < v345) {
                        double v345 = *(double *)(v348 + 8 * result);
                      }
                      result += 2;
                    }
                    while (result < v350);
                    goto LABEL_448;
                  }
                }
                double v345 = 1.79769313e308;
LABEL_448:
                if (v347 >= v345)
                {
                  uint64_t *v344 = v332;
                  break;
                }
              }
            }
LABEL_431:
            uint64_t v329 = v331 + 1;
            uint64_t v10 = v331;
            if (v331 + 1 == a2) {
              return result;
            }
            continue;
          }
        }
        break;
      }
      if (v337 < 1.79769313e308) {
        goto LABEL_446;
      }
      goto LABEL_431;
    }
    if (!a4)
    {
      if (v12 == a2) {
        return result;
      }
      int64_t v222 = (v14 - 2) >> 1;
      int64_t v223 = v222;
      while (2)
      {
        int64_t v224 = v223;
        if (v222 < v223) {
          goto LABEL_304;
        }
        uint64_t v225 = (2 * v223) | 1;
        uint64_t v226 = &v12[v225];
        uint64_t v227 = 2 * v223 + 2;
        uint64_t v228 = **a3;
        if (v227 < (uint64_t)v14)
        {
          uint64_t v230 = *(void *)(v228 + 24 * *v226);
          uint64_t v229 = *(void *)(v228 + 24 * *v226 + 8);
          uint64_t v231 = v229 - v230;
          if (v229 == v230)
          {
            double v234 = 1.79769313e308;
          }
          else
          {
            unint64_t v232 = 0;
            unint64_t v233 = v231 >> 3;
            double v234 = 1.79769313e308;
            do
            {
              if (*(double *)(v230 + 8 * v232) < v234) {
                double v234 = *(double *)(v230 + 8 * v232);
              }
              v232 += 2;
            }
            while (v232 < v233);
          }
          uint64_t v235 = *(void *)(v228 + 24 * v226[1]);
          uint64_t v236 = *(void *)(v228 + 24 * v226[1] + 8);
          uint64_t v237 = v236 - v235;
          if (v236 == v235)
          {
            if (v234 < 1.79769313e308) {
              goto LABEL_319;
            }
          }
          else
          {
            unint64_t v238 = 0;
            unint64_t v239 = v237 >> 3;
            double v240 = 1.79769313e308;
            do
            {
              if (*(double *)(v235 + 8 * v238) < v240) {
                double v240 = *(double *)(v235 + 8 * v238);
              }
              v238 += 2;
            }
            while (v238 < v239);
            if (v234 < v240)
            {
LABEL_319:
              ++v226;
              uint64_t v225 = 2 * v224 + 2;
            }
          }
        }
        uint64_t v241 = *v226;
        uint64_t v242 = *(void *)(v228 + 24 * *v226);
        uint64_t v243 = *(void *)(v228 + 24 * *v226 + 8);
        uint64_t v244 = v243 - v242;
        if (v243 == v242)
        {
          double v247 = 1.79769313e308;
        }
        else
        {
          unint64_t v245 = 0;
          unint64_t v246 = v244 >> 3;
          double v247 = 1.79769313e308;
          do
          {
            if (*(double *)(v242 + 8 * v245) < v247) {
              double v247 = *(double *)(v242 + 8 * v245);
            }
            v245 += 2;
          }
          while (v245 < v246);
        }
        uint64_t v248 = &v12[v224];
        uint64_t v249 = *v248;
        uint64_t v251 = *(void *)(v228 + 24 * *v248);
        uint64_t v250 = *(void *)(v228 + 24 * *v248 + 8);
        unint64_t v252 = (v250 - v251) >> 3;
        if (v250 == v251)
        {
          if (v247 >= 1.79769313e308) {
            break;
          }
          goto LABEL_304;
        }
        unint64_t v253 = 0;
        double v254 = 1.79769313e308;
        do
        {
          if (*(double *)(v251 + 8 * v253) < v254) {
            double v254 = *(double *)(v251 + 8 * v253);
          }
          v253 += 2;
        }
        while (v253 < v252);
        if (v247 < v254)
        {
LABEL_304:
          int64_t v223 = v224 - 1;
          if (v224) {
            continue;
          }
          uint64_t v277 = (unint64_t)v13 >> 3;
          while (2)
          {
            int64_t v279 = 0;
            uint64_t v280 = *v12;
            uint64_t v281 = *a3;
            uint64_t v282 = v12;
LABEL_374:
            uint64_t v283 = v282;
            v282 += v279 + 1;
            uint64_t v284 = 2 * v279;
            uint64_t result = (2 * v279) | 1;
            int64_t v279 = result;
            int64_t v285 = v284 + 2;
            if (v285 >= v277) {
              goto LABEL_373;
            }
            uint64_t v286 = *v281;
            uint64_t v287 = *(void *)(*v281 + 24 * *v282);
            uint64_t v288 = *(void *)(*v281 + 24 * *v282 + 8);
            uint64_t v289 = v288 - v287;
            if (v288 == v287)
            {
              double v292 = 1.79769313e308;
              uint64_t result = (unint64_t)(v282 + 1);
              id v301 = (uint64_t *)(v286 + 24 * v282[1]);
              uint64_t v293 = *v301;
              uint64_t v300 = v301[1];
              uint64_t v296 = v300 - *v301;
              if (v300 != *v301) {
                goto LABEL_381;
              }
            }
            else
            {
              unint64_t v290 = 0;
              unint64_t v291 = v289 >> 3;
              double v292 = 1.79769313e308;
              do
              {
                if (*(double *)(v287 + 8 * v290) < v292) {
                  double v292 = *(double *)(v287 + 8 * v290);
                }
                v290 += 2;
              }
              while (v290 < v291);
              uint64_t result = (unint64_t)(v282 + 1);
              uint64_t v295 = (uint64_t *)(v286 + 24 * v282[1]);
              uint64_t v293 = *v295;
              uint64_t v294 = v295[1];
              uint64_t v296 = v294 - *v295;
              if (v294 != *v295)
              {
LABEL_381:
                unint64_t v297 = 0;
                unint64_t v298 = v296 >> 3;
                double v299 = 1.79769313e308;
                do
                {
                  if (*(double *)(v293 + 8 * v297) < v299) {
                    double v299 = *(double *)(v293 + 8 * v297);
                  }
                  v297 += 2;
                }
                while (v297 < v298);
                if (v292 < v299)
                {
LABEL_389:
                  uint64_t v282 = (uint64_t *)result;
                  int64_t v279 = v285;
                }
LABEL_373:
                *uint64_t v283 = *v282;
                if (v279 > (uint64_t)((unint64_t)(v277 - 2) >> 1))
                {
                  if (v282 == --a2)
                  {
                    *uint64_t v282 = v280;
                    goto LABEL_371;
                  }
                  *uint64_t v282 = *a2;
                  *a2 = v280;
                  uint64_t v302 = (char *)v282 - (char *)v12 + 8;
                  if (v302 >= 9)
                  {
                    unint64_t v303 = (((unint64_t)v302 >> 3) - 2) >> 1;
                    uint64_t v304 = &v12[v303];
                    uint64_t v305 = *v304;
                    uint64_t v306 = **a3;
                    uint64_t v307 = *(void *)(v306 + 24 * *v304);
                    uint64_t v308 = *(void *)(v306 + 24 * *v304 + 8);
                    uint64_t v309 = v308 - v307;
                    if (v308 == v307)
                    {
                      double v312 = 1.79769313e308;
                      uint64_t v313 = *v282;
                      uint64_t v314 = *(void *)(v306 + 24 * *v282);
                      uint64_t result = *(void *)(v306 + 24 * *v282 + 8) - v314;
                      if (result) {
                        goto LABEL_398;
                      }
                    }
                    else
                    {
                      unint64_t v310 = 0;
                      unint64_t v311 = v309 >> 3;
                      double v312 = 1.79769313e308;
                      do
                      {
                        if (*(double *)(v307 + 8 * v310) < v312) {
                          double v312 = *(double *)(v307 + 8 * v310);
                        }
                        v310 += 2;
                      }
                      while (v310 < v311);
                      uint64_t v313 = *v282;
                      uint64_t v314 = *(void *)(v306 + 24 * *v282);
                      uint64_t result = *(void *)(v306 + 24 * *v282 + 8) - v314;
                      if (result)
                      {
LABEL_398:
                        unint64_t v315 = 0;
                        uint64_t result = (uint64_t)result >> 3;
                        double v316 = 1.79769313e308;
                        do
                        {
                          if (*(double *)(v314 + 8 * v315) < v316) {
                            double v316 = *(double *)(v314 + 8 * v315);
                          }
                          v315 += 2;
                        }
                        while (v315 < result);
                        if (v312 < v316)
                        {
                          do
                          {
                            *uint64_t v282 = v305;
                            uint64_t v282 = v304;
                            if (!v303) {
                              break;
                            }
                            unint64_t v303 = (v303 - 1) >> 1;
                            uint64_t v304 = &v12[v303];
                            uint64_t v305 = *v304;
                            uint64_t v317 = *(void *)(v306 + 24 * *v304);
                            uint64_t v318 = *(void *)(v306 + 24 * *v304 + 8);
                            uint64_t v319 = v318 - v317;
                            if (v318 == v317)
                            {
                              double v322 = 1.79769313e308;
                            }
                            else
                            {
                              unint64_t v320 = 0;
                              unint64_t v321 = v319 >> 3;
                              double v322 = 1.79769313e308;
                              do
                              {
                                if (*(double *)(v317 + 8 * v320) < v322) {
                                  double v322 = *(double *)(v317 + 8 * v320);
                                }
                                v320 += 2;
                              }
                              while (v320 < v321);
                            }
                            unint64_t v323 = 0;
                            double v324 = 1.79769313e308;
                            do
                            {
                              if (*(double *)(v314 + 8 * v323) < v324) {
                                double v324 = *(double *)(v314 + 8 * v323);
                              }
                              v323 += 2;
                            }
                            while (v323 < result);
                          }
                          while (v322 < v324);
                          goto LABEL_426;
                        }
                        goto LABEL_371;
                      }
                    }
                    if (v312 < 1.79769313e308)
                    {
                      do
                      {
                        *uint64_t v282 = v305;
                        uint64_t v282 = v304;
                        if (!v303) {
                          break;
                        }
                        unint64_t v303 = (v303 - 1) >> 1;
                        uint64_t v304 = &v12[v303];
                        uint64_t v305 = *v304;
                        uint64_t v325 = *(void *)(v306 + 24 * *v304);
                        uint64_t result = *(void *)(v306 + 24 * *v304 + 8);
                        uint64_t v326 = result - v325;
                        if (result == v325) {
                          break;
                        }
                        uint64_t result = 0;
                        unint64_t v327 = v326 >> 3;
                        double v328 = 1.79769313e308;
                        do
                        {
                          if (*(double *)(v325 + 8 * result) < v328) {
                            double v328 = *(double *)(v325 + 8 * result);
                          }
                          result += 2;
                        }
                        while (result < v327);
                      }
                      while (v328 < 1.79769313e308);
LABEL_426:
                      *uint64_t v282 = v313;
                    }
                  }
LABEL_371:
                  if (v277-- <= 2) {
                    return result;
                  }
                  continue;
                }
                goto LABEL_374;
              }
            }
            break;
          }
          if (v292 < 1.79769313e308) {
            goto LABEL_389;
          }
          goto LABEL_373;
        }
        break;
      }
      while (2)
      {
        *uint64_t v248 = v241;
        uint64_t v248 = v226;
        if (v222 < v225)
        {
LABEL_303:
          *uint64_t v248 = v249;
          goto LABEL_304;
        }
        uint64_t v256 = 2 * v225;
        uint64_t v225 = (2 * v225) | 1;
        uint64_t v226 = &v12[v225];
        uint64_t v257 = v256 + 2;
        if (v257 < (uint64_t)v14)
        {
          uint64_t v258 = *(void *)(v228 + 24 * *v226);
          uint64_t v259 = *(void *)(v228 + 24 * *v226 + 8);
          uint64_t v260 = v259 - v258;
          if (v259 == v258)
          {
            double v263 = 1.79769313e308;
          }
          else
          {
            unint64_t v261 = 0;
            unint64_t v262 = v260 >> 3;
            double v263 = 1.79769313e308;
            do
            {
              if (*(double *)(v258 + 8 * v261) < v263) {
                double v263 = *(double *)(v258 + 8 * v261);
              }
              v261 += 2;
            }
            while (v261 < v262);
          }
          uint64_t v264 = *(void *)(v228 + 24 * v226[1]);
          uint64_t v265 = *(void *)(v228 + 24 * v226[1] + 8);
          uint64_t v266 = v265 - v264;
          if (v265 == v264)
          {
            if (v263 < 1.79769313e308) {
              goto LABEL_351;
            }
          }
          else
          {
            unint64_t v267 = 0;
            unint64_t v268 = v266 >> 3;
            double v269 = 1.79769313e308;
            do
            {
              if (*(double *)(v264 + 8 * v267) < v269) {
                double v269 = *(double *)(v264 + 8 * v267);
              }
              v267 += 2;
            }
            while (v267 < v268);
            if (v263 < v269)
            {
LABEL_351:
              ++v226;
              uint64_t v225 = v257;
            }
          }
        }
        uint64_t v241 = *v226;
        uint64_t v270 = *(void *)(v228 + 24 * *v226);
        uint64_t v271 = *(void *)(v228 + 24 * *v226 + 8);
        uint64_t v272 = v271 - v270;
        if (v271 == v270)
        {
          double v275 = 1.79769313e308;
          if (v250 == v251) {
            goto LABEL_335;
          }
        }
        else
        {
          unint64_t v273 = 0;
          unint64_t v274 = v272 >> 3;
          double v275 = 1.79769313e308;
          do
          {
            if (*(double *)(v270 + 8 * v273) < v275) {
              double v275 = *(double *)(v270 + 8 * v273);
            }
            v273 += 2;
          }
          while (v273 < v274);
          if (v250 == v251)
          {
LABEL_335:
            double v255 = 1.79769313e308;
            goto LABEL_336;
          }
        }
        unint64_t v276 = 0;
        double v255 = 1.79769313e308;
        do
        {
          if (*(double *)(v251 + 8 * v276) < v255) {
            double v255 = *(double *)(v251 + 8 * v276);
          }
          v276 += 2;
        }
        while (v276 < v252);
LABEL_336:
        if (v275 < v255) {
          goto LABEL_303;
        }
        continue;
      }
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = &v12[v14 >> 1];
    uint64_t v17 = **a3;
    if ((unint64_t)v13 >= 0x401)
    {
      sub_1C49C95C8(v10, &v10[v14 >> 1], v11, v17);
      uint64_t v18 = &v10[v15];
      sub_1C49C95C8(v10 + 1, v18 - 1, v354, **a3);
      a2 = v355;
      sub_1C49C95C8(v10 + 2, &v10[v15 + 1], v353, **a3);
      uint64_t result = (unint64_t)sub_1C49C95C8(v18 - 1, v16, &v10[v15 + 1], **a3);
      uint64_t v19 = *v10;
      *uint64_t v10 = *v18;
      uint64_t *v18 = v19;
      uint64_t v11 = v356;
      --a4;
      uint64_t v20 = **a3;
      uint64_t v21 = *v10;
      if (a5) {
        goto LABEL_38;
      }
LABEL_10:
      uint64_t v22 = *(void *)(v20 + 24 * *(v10 - 1));
      uint64_t v23 = *(void *)(v20 + 24 * *(v10 - 1) + 8);
      uint64_t v24 = v23 - v22;
      if (v23 == v22)
      {
        double v27 = 1.79769313e308;
        uint64_t v29 = *(void *)(v20 + 24 * v21);
        uint64_t v28 = *(void *)(v20 + 24 * v21 + 8);
        unint64_t v30 = (v28 - v29) >> 3;
        if (v28 == v29) {
          goto LABEL_41;
        }
      }
      else
      {
        unint64_t v25 = 0;
        unint64_t v26 = v24 >> 3;
        double v27 = 1.79769313e308;
        do
        {
          if (*(double *)(v22 + 8 * v25) < v27) {
            double v27 = *(double *)(v22 + 8 * v25);
          }
          v25 += 2;
        }
        while (v25 < v26);
        uint64_t v29 = *(void *)(v20 + 24 * v21);
        uint64_t v28 = *(void *)(v20 + 24 * v21 + 8);
        unint64_t v30 = (v28 - v29) >> 3;
        if (v28 == v29)
        {
LABEL_41:
          if (v27 < 1.79769313e308)
          {
            unint64_t v33 = 0;
            goto LABEL_43;
          }
          double v112 = 1.79769313e308;
          uint64_t v113 = *(void *)(v20 + 24 * *v11);
          uint64_t v120 = *(void *)(v20 + 24 * *v11 + 8);
          uint64_t v116 = v120 - v113;
          if (v120 == v113) {
            goto LABEL_146;
          }
          goto LABEL_139;
        }
      }
      unint64_t v31 = 0;
      double v32 = 1.79769313e308;
      do
      {
        if (*(double *)(v29 + 8 * v31) < v32) {
          double v32 = *(double *)(v29 + 8 * v31);
        }
        v31 += 2;
      }
      while (v31 < v30);
      if (v27 < v32)
      {
        unint64_t v33 = (v28 - v29) >> 3;
        BOOL v34 = v28 == v29;
        if (v28 != v29) {
          goto LABEL_22;
        }
        goto LABEL_39;
      }
      unint64_t v111 = 0;
      double v112 = 1.79769313e308;
      do
      {
        if (*(double *)(v29 + 8 * v111) < v112) {
          double v112 = *(double *)(v29 + 8 * v111);
        }
        v111 += 2;
      }
      while (v111 < v30);
      uint64_t v115 = (uint64_t *)(v20 + 24 * *v11);
      uint64_t v113 = *v115;
      uint64_t v114 = v115[1];
      uint64_t v116 = v114 - *v115;
      if (v114 == *v115)
      {
LABEL_146:
        uint64_t v12 = v10;
        if (v112 >= 1.79769313e308) {
          goto LABEL_165;
        }
LABEL_147:
        uint64_t v12 = v10;
        while (2)
        {
          if (v28 == v29)
          {
            double v123 = 1.79769313e308;
            uint64_t v128 = v12[1];
            ++v12;
            uint64_t v125 = *(void *)(v20 + 24 * v128);
            uint64_t v129 = *(void *)(v20 + 24 * v128 + 8);
            uint64_t v127 = v129 - v125;
            if (v129 == v125) {
              goto LABEL_148;
            }
          }
          else
          {
            unint64_t v122 = 0;
            double v123 = 1.79769313e308;
            do
            {
              if (*(double *)(v29 + 8 * v122) < v123) {
                double v123 = *(double *)(v29 + 8 * v122);
              }
              v122 += 2;
            }
            while (v122 < v30);
            uint64_t v124 = v12[1];
            ++v12;
            uint64_t v125 = *(void *)(v20 + 24 * v124);
            uint64_t v126 = *(void *)(v20 + 24 * v124 + 8);
            uint64_t v127 = v126 - v125;
            if (v126 == v125)
            {
LABEL_148:
              double v121 = 1.79769313e308;
              goto LABEL_149;
            }
          }
          unint64_t v130 = 0;
          unint64_t v131 = v127 >> 3;
          double v121 = 1.79769313e308;
          do
          {
            if (*(double *)(v125 + 8 * v130) < v121) {
              double v121 = *(double *)(v125 + 8 * v130);
            }
            v130 += 2;
          }
          while (v130 < v131);
LABEL_149:
          if (v123 < v121) {
            goto LABEL_179;
          }
          continue;
        }
      }
LABEL_139:
      unint64_t v117 = 0;
      unint64_t v118 = v116 >> 3;
      double v119 = 1.79769313e308;
      do
      {
        if (*(double *)(v113 + 8 * v117) < v119) {
          double v119 = *(double *)(v113 + 8 * v117);
        }
        v117 += 2;
      }
      while (v117 < v118);
      uint64_t v12 = v10;
      if (v112 < v119) {
        goto LABEL_147;
      }
LABEL_165:
      do
      {
        if (++v12 >= a2) {
          break;
        }
        if (v28 == v29)
        {
          double v134 = 1.79769313e308;
          uint64_t v135 = *(void *)(v20 + 24 * *v12);
          uint64_t v138 = *(void *)(v20 + 24 * *v12 + 8);
          uint64_t v137 = v138 - v135;
          if (v138 != v135) {
            goto LABEL_174;
          }
        }
        else
        {
          unint64_t v133 = 0;
          double v134 = 1.79769313e308;
          do
          {
            if (*(double *)(v29 + 8 * v133) < v134) {
              double v134 = *(double *)(v29 + 8 * v133);
            }
            v133 += 2;
          }
          while (v133 < v30);
          uint64_t v135 = *(void *)(v20 + 24 * *v12);
          uint64_t v136 = *(void *)(v20 + 24 * *v12 + 8);
          uint64_t v137 = v136 - v135;
          if (v136 != v135)
          {
LABEL_174:
            unint64_t v139 = 0;
            unint64_t v140 = v137 >> 3;
            double v132 = 1.79769313e308;
            do
            {
              if (*(double *)(v135 + 8 * v139) < v132) {
                double v132 = *(double *)(v135 + 8 * v139);
              }
              v139 += 2;
            }
            while (v139 < v140);
            continue;
          }
        }
        double v132 = 1.79769313e308;
      }
      while (v134 >= v132);
LABEL_179:
      BOOL v141 = a2;
      if (v12 < a2)
      {
        BOOL v141 = a2;
        do
        {
          if (v28 == v29)
          {
            double v144 = 1.79769313e308;
            uint64_t v149 = *--v141;
            uint64_t v146 = *(void *)(v20 + 24 * v149);
            uint64_t v150 = *(void *)(v20 + 24 * v149 + 8);
            uint64_t v148 = v150 - v146;
            if (v150 != v146) {
              goto LABEL_191;
            }
          }
          else
          {
            unint64_t v143 = 0;
            double v144 = 1.79769313e308;
            do
            {
              if (*(double *)(v29 + 8 * v143) < v144) {
                double v144 = *(double *)(v29 + 8 * v143);
              }
              v143 += 2;
            }
            while (v143 < v30);
            uint64_t v145 = *--v141;
            uint64_t v146 = *(void *)(v20 + 24 * v145);
            uint64_t v147 = *(void *)(v20 + 24 * v145 + 8);
            uint64_t v148 = v147 - v146;
            if (v147 != v146)
            {
LABEL_191:
              unint64_t v151 = 0;
              unint64_t v152 = v148 >> 3;
              double v142 = 1.79769313e308;
              do
              {
                if (*(double *)(v146 + 8 * v151) < v142) {
                  double v142 = *(double *)(v146 + 8 * v151);
                }
                v151 += 2;
              }
              while (v151 < v152);
              continue;
            }
          }
          double v142 = 1.79769313e308;
        }
        while (v144 < v142);
      }
      if (v12 >= v141) {
        goto LABEL_236;
      }
      uint64_t v153 = *v12;
      uint64_t v154 = *v141;
      while (2)
      {
        *uint64_t v12 = v154;
        *BOOL v141 = v153;
        if (v28 == v29)
        {
          do
          {
            uint64_t v165 = v12[1];
            ++v12;
            uint64_t v153 = v165;
            uint64_t v166 = *(void *)(v20 + 24 * v165);
            uint64_t v167 = *(void *)(v20 + 24 * v165 + 8);
            uint64_t v168 = v167 - v166;
            if (v167 == v166)
            {
              double v164 = 1.79769313e308;
            }
            else
            {
              unint64_t v169 = 0;
              unint64_t v170 = v168 >> 3;
              double v164 = 1.79769313e308;
              do
              {
                if (*(double *)(v166 + 8 * v169) < v164) {
                  double v164 = *(double *)(v166 + 8 * v169);
                }
                v169 += 2;
              }
              while (v169 < v170);
            }
          }
          while (v164 <= 1.79769313e308);
        }
        else
        {
          do
          {
            unint64_t v156 = 0;
            uint64_t v157 = v12[1];
            ++v12;
            uint64_t v153 = v157;
            double v158 = 1.79769313e308;
            do
            {
              if (*(double *)(v29 + 8 * v156) < v158) {
                double v158 = *(double *)(v29 + 8 * v156);
              }
              v156 += 2;
            }
            while (v156 < v30);
            uint64_t v159 = *(void *)(v20 + 24 * v153);
            uint64_t v160 = *(void *)(v20 + 24 * v153 + 8);
            uint64_t v161 = v160 - v159;
            if (v160 == v159)
            {
              double v155 = 1.79769313e308;
            }
            else
            {
              unint64_t v162 = 0;
              unint64_t v163 = v161 >> 3;
              double v155 = 1.79769313e308;
              do
              {
                if (*(double *)(v159 + 8 * v162) < v155) {
                  double v155 = *(double *)(v159 + 8 * v162);
                }
                v162 += 2;
              }
              while (v162 < v163);
            }
          }
          while (v158 >= v155);
        }
        do
        {
          uint64_t v172 = *--v141;
          uint64_t v154 = v172;
          if (v28 == v29)
          {
            double v174 = 1.79769313e308;
            uint64_t v175 = *(void *)(v20 + 24 * v154);
            uint64_t v177 = *(void *)(v20 + 24 * v154 + 8);
            uint64_t result = v177 - v175;
            if (v177 == v175) {
              goto LABEL_221;
            }
          }
          else
          {
            unint64_t v173 = 0;
            double v174 = 1.79769313e308;
            do
            {
              if (*(double *)(v29 + 8 * v173) < v174) {
                double v174 = *(double *)(v29 + 8 * v173);
              }
              v173 += 2;
            }
            while (v173 < v30);
            uint64_t v175 = *(void *)(v20 + 24 * v154);
            uint64_t v176 = *(void *)(v20 + 24 * v154 + 8);
            uint64_t result = v176 - v175;
            if (v176 == v175)
            {
LABEL_221:
              double v171 = 1.79769313e308;
              continue;
            }
          }
          unint64_t v178 = 0;
          uint64_t result = (uint64_t)result >> 3;
          double v171 = 1.79769313e308;
          do
          {
            if (*(double *)(v175 + 8 * v178) < v171) {
              double v171 = *(double *)(v175 + 8 * v178);
            }
            v178 += 2;
          }
          while (v178 < result);
        }
        while (v174 < v171);
        if (v12 < v141) {
          continue;
        }
        break;
      }
LABEL_236:
      unsigned int v179 = v12 - 1;
      BOOL v5 = v12 - 1 >= v10;
      BOOL v6 = v12 - 1 == v10;
      if (v12 - 1 != v10) {
        *uint64_t v10 = *v179;
      }
      a5 = 0;
      uint64_t *v179 = v21;
    }
    else
    {
      uint64_t result = (unint64_t)sub_1C49C95C8(&v10[v14 >> 1], v10, v11, v17);
      --a4;
      uint64_t v20 = **a3;
      uint64_t v21 = *v10;
      if ((a5 & 1) == 0) {
        goto LABEL_10;
      }
LABEL_38:
      uint64_t v29 = *(void *)(v20 + 24 * v21);
      uint64_t v48 = *(void *)(v20 + 24 * v21 + 8);
      unint64_t v33 = (v48 - v29) >> 3;
      BOOL v34 = v48 == v29;
      if (v48 != v29)
      {
LABEL_22:
        uint64_t v35 = v10;
        do
        {
          double v36 = v35;
          uint64_t v38 = v35[1];
          ++v35;
          uint64_t v37 = v38;
          uint64_t v39 = *(void *)(v20 + 24 * v38);
          uint64_t v40 = *(void *)(v20 + 24 * v38 + 8);
          uint64_t v41 = v40 - v39;
          if (v40 == v39)
          {
            double v44 = 1.79769313e308;
          }
          else
          {
            unint64_t v42 = 0;
            unint64_t v43 = v41 >> 3;
            double v44 = 1.79769313e308;
            do
            {
              if (*(double *)(v39 + 8 * v42) < v44) {
                double v44 = *(double *)(v39 + 8 * v42);
              }
              v42 += 2;
            }
            while (v42 < v43);
          }
          unint64_t v45 = 0;
          double v46 = 1.79769313e308;
          do
          {
            if (*(double *)(v29 + 8 * v45) < v46) {
              double v46 = *(double *)(v29 + 8 * v45);
            }
            v45 += 2;
          }
          while (v45 < v33);
        }
        while (v44 < v46);
        uint64_t v28 = v29;
        uint64_t v47 = a2;
        if (v36 != v10) {
          goto LABEL_51;
        }
        while (1)
        {
LABEL_114:
          if (v35 >= v47) {
            goto LABEL_65;
          }
          uint64_t v101 = *--v47;
          uint64_t v102 = *(void *)(v20 + 24 * v101);
          uint64_t v103 = *(void *)(v20 + 24 * v101 + 8);
          uint64_t v104 = v103 - v102;
          if (v103 == v102)
          {
            double v107 = 1.79769313e308;
            if (!v34) {
              goto LABEL_123;
            }
          }
          else
          {
            unint64_t v105 = 0;
            unint64_t v106 = v104 >> 3;
            double v107 = 1.79769313e308;
            do
            {
              if (*(double *)(v102 + 8 * v105) < v107) {
                double v107 = *(double *)(v102 + 8 * v105);
              }
              v105 += 2;
            }
            while (v105 < v106);
            if (!v34)
            {
LABEL_123:
              unint64_t v108 = 0;
              double v100 = 1.79769313e308;
              do
              {
                if (*(double *)(v28 + 8 * v108) < v100) {
                  double v100 = *(double *)(v28 + 8 * v108);
                }
                v108 += 2;
              }
              while (v108 < v33);
              goto LABEL_113;
            }
          }
          double v100 = 1.79769313e308;
LABEL_113:
          if (v107 < v100) {
            goto LABEL_65;
          }
        }
      }
LABEL_39:
      uint64_t v28 = v29;
LABEL_43:
      uint64_t v35 = v10;
      do
      {
        char v49 = v35;
        uint64_t v50 = v35[1];
        ++v35;
        uint64_t v37 = v50;
        uint64_t v51 = *(void *)(v20 + 24 * v50);
        uint64_t v52 = *(void *)(v20 + 24 * v50 + 8);
        uint64_t v53 = v52 - v51;
        if (v52 == v51) {
          break;
        }
        unint64_t v54 = 0;
        unint64_t v55 = v53 >> 3;
        double v56 = 1.79769313e308;
        do
        {
          if (*(double *)(v51 + 8 * v54) < v56) {
            double v56 = *(double *)(v51 + 8 * v54);
          }
          v54 += 2;
        }
        while (v54 < v55);
      }
      while (v56 < 1.79769313e308);
      BOOL v34 = 1;
      uint64_t v47 = a2;
      if (v49 == v10) {
        goto LABEL_114;
      }
LABEL_51:
      uint64_t v47 = a2;
      if (v34)
      {
        uint64_t v47 = a2;
        do
        {
          uint64_t v94 = *--v47;
          uint64_t v95 = *(void *)(v20 + 24 * v94);
          uint64_t v96 = *(void *)(v20 + 24 * v94 + 8);
          uint64_t v97 = v96 - v95;
          if (v96 == v95)
          {
            double v93 = 1.79769313e308;
          }
          else
          {
            unint64_t v98 = 0;
            unint64_t v99 = v97 >> 3;
            double v93 = 1.79769313e308;
            do
            {
              if (*(double *)(v95 + 8 * v98) < v93) {
                double v93 = *(double *)(v95 + 8 * v98);
              }
              v98 += 2;
            }
            while (v98 < v99);
          }
        }
        while (v93 >= 1.79769313e308);
      }
      else
      {
        do
        {
          uint64_t v57 = *--v47;
          uint64_t v58 = *(void *)(v20 + 24 * v57);
          uint64_t v59 = *(void *)(v20 + 24 * v57 + 8);
          uint64_t v60 = v59 - v58;
          if (v59 == v58)
          {
            double v63 = 1.79769313e308;
          }
          else
          {
            unint64_t v61 = 0;
            unint64_t v62 = v60 >> 3;
            double v63 = 1.79769313e308;
            do
            {
              if (*(double *)(v58 + 8 * v61) < v63) {
                double v63 = *(double *)(v58 + 8 * v61);
              }
              v61 += 2;
            }
            while (v61 < v62);
          }
          unint64_t v64 = 0;
          double v65 = 1.79769313e308;
          do
          {
            if (*(double *)(v28 + 8 * v64) < v65) {
              double v65 = *(double *)(v28 + 8 * v64);
            }
            v64 += 2;
          }
          while (v64 < v33);
        }
        while (v63 >= v65);
      }
LABEL_65:
      uint64_t v12 = v35;
      if (v35 >= v47) {
        goto LABEL_128;
      }
      uint64_t v66 = *v47;
      uint64_t v12 = v35;
      uint64_t v67 = v47;
      while (2)
      {
        *uint64_t v12 = v66;
        *uint64_t v67 = v37;
        if (v34)
        {
          do
          {
            uint64_t v68 = v12[1];
            ++v12;
            uint64_t v37 = v68;
            uint64_t v70 = *(void *)(v20 + 24 * v68);
            uint64_t v69 = *(void *)(v20 + 24 * v68 + 8);
            uint64_t v71 = v69 - v70;
            if (v69 == v70) {
              break;
            }
            unint64_t v72 = 0;
            unint64_t v73 = v71 >> 3;
            double v74 = 1.79769313e308;
            do
            {
              if (*(double *)(v70 + 8 * v72) < v74) {
                double v74 = *(double *)(v70 + 8 * v72);
              }
              v72 += 2;
            }
            while (v72 < v73);
          }
          while (v74 < 1.79769313e308);
        }
        else
        {
          do
          {
            uint64_t v75 = v12[1];
            ++v12;
            uint64_t v37 = v75;
            uint64_t v77 = *(void *)(v20 + 24 * v75);
            uint64_t v76 = *(void *)(v20 + 24 * v75 + 8);
            uint64_t v78 = v76 - v77;
            if (v76 == v77)
            {
              double v81 = 1.79769313e308;
            }
            else
            {
              unint64_t v79 = 0;
              unint64_t v80 = v78 >> 3;
              double v81 = 1.79769313e308;
              do
              {
                if (*(double *)(v77 + 8 * v79) < v81) {
                  double v81 = *(double *)(v77 + 8 * v79);
                }
                v79 += 2;
              }
              while (v79 < v80);
            }
            unint64_t v82 = 0;
            double v83 = 1.79769313e308;
            do
            {
              if (*(double *)(v28 + 8 * v82) < v83) {
                double v83 = *(double *)(v28 + 8 * v82);
              }
              v82 += 2;
            }
            while (v82 < v33);
          }
          while (v81 < v83);
        }
        do
        {
          uint64_t v85 = *--v67;
          uint64_t v66 = v85;
          uint64_t v86 = *(void *)(v20 + 24 * v85);
          uint64_t v87 = *(void *)(v20 + 24 * v85 + 8);
          uint64_t v88 = v87 - v86;
          if (v87 == v86)
          {
            double v91 = 1.79769313e308;
            if (v34) {
              goto LABEL_89;
            }
          }
          else
          {
            unint64_t v89 = 0;
            unint64_t v90 = v88 >> 3;
            double v91 = 1.79769313e308;
            do
            {
              if (*(double *)(v86 + 8 * v89) < v91) {
                double v91 = *(double *)(v86 + 8 * v89);
              }
              v89 += 2;
            }
            while (v89 < v90);
            if (v34)
            {
LABEL_89:
              double v84 = 1.79769313e308;
              continue;
            }
          }
          unint64_t v92 = 0;
          double v84 = 1.79769313e308;
          do
          {
            if (*(double *)(v28 + 8 * v92) < v84) {
              double v84 = *(double *)(v28 + 8 * v92);
            }
            v92 += 2;
          }
          while (v92 < v33);
        }
        while (v91 >= v84);
        if (v12 < v67) {
          continue;
        }
        break;
      }
LABEL_128:
      int v109 = v12 - 1;
      if (v12 - 1 != v10) {
        *uint64_t v10 = *v109;
      }
      *int v109 = v21;
      if (v35 < v47)
      {
LABEL_133:
        uint64_t result = sub_1C49C7F5C(v10, v12 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      else
      {
        BOOL v110 = sub_1C49C991C(v10, v12 - 1, a3);
        uint64_t result = sub_1C49C991C(v12, a2, a3);
        if (result)
        {
          a2 = v12 - 1;
          if (v110) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v110) {
          goto LABEL_133;
        }
      }
    }
  }
  switch(v14)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v180 = *(a2 - 1);
      uint64_t v181 = *v12;
      uint64_t v182 = **a3;
      uint64_t v183 = *(void *)(v182 + 24 * v180);
      uint64_t v184 = *(void *)(v182 + 24 * v180 + 8);
      uint64_t v185 = v184 - v183;
      if (v184 == v183)
      {
        double v188 = 1.79769313e308;
        uint64_t v352 = (uint64_t *)(v182 + 24 * v181);
        uint64_t v189 = *v352;
        uint64_t v351 = v352[1];
        uint64_t v192 = v351 - *v352;
        if (v351 != *v352) {
          goto LABEL_248;
        }
LABEL_463:
        if (v188 >= 1.79769313e308) {
          return result;
        }
        goto LABEL_464;
      }
      unint64_t v186 = 0;
      unint64_t v187 = v185 >> 3;
      double v188 = 1.79769313e308;
      do
      {
        if (*(double *)(v183 + 8 * v186) < v188) {
          double v188 = *(double *)(v183 + 8 * v186);
        }
        v186 += 2;
      }
      while (v186 < v187);
      unint64_t v191 = (uint64_t *)(v182 + 24 * v181);
      uint64_t v189 = *v191;
      uint64_t v190 = v191[1];
      uint64_t v192 = v190 - *v191;
      if (v190 == *v191) {
        goto LABEL_463;
      }
LABEL_248:
      unint64_t v193 = 0;
      unint64_t v194 = v192 >> 3;
      double v195 = 1.79769313e308;
      do
      {
        if (*(double *)(v189 + 8 * v193) < v195) {
          double v195 = *(double *)(v189 + 8 * v193);
        }
        v193 += 2;
      }
      while (v193 < v194);
      if (v188 < v195)
      {
LABEL_464:
        *uint64_t v12 = v180;
        *(a2 - 1) = v181;
      }
      return result;
    case 3uLL:
      uint64_t v196 = **a3;
      return (unint64_t)sub_1C49C95C8(v12, v12 + 1, v11, v196);
    case 4uLL:
      return (unint64_t)sub_1C49C9CF8(v12, v12 + 1, v12 + 2, v11, a3);
    case 5uLL:
      return (unint64_t)sub_1C49C9F9C(v12, v12 + 1, v12 + 2, v12 + 3, v11, a3);
    default:
      JUMPOUT(0);
  }
}

uint64_t *sub_1C49C95C8(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = *(void *)(a4 + 24 * *a2);
  uint64_t v7 = *(void *)(a4 + 24 * *a2 + 8);
  unint64_t v8 = (v7 - v6) >> 3;
  if (v7 != v6)
  {
    unint64_t v9 = 0;
    double v10 = 1.79769313e308;
    do
    {
      if (*(double *)(v6 + 8 * v9) < v10) {
        double v10 = *(double *)(v6 + 8 * v9);
      }
      v9 += 2;
    }
    while (v9 < v8);
    uint64_t v11 = *(void *)(a4 + 24 * v5);
    uint64_t v12 = *(void *)(a4 + 24 * v5 + 8);
    unint64_t v13 = (v12 - v11) >> 3;
    if (v12 != v11) {
      goto LABEL_7;
    }
LABEL_13:
    double v15 = 1.79769313e308;
    goto LABEL_14;
  }
  double v10 = 1.79769313e308;
  uint64_t v11 = *(void *)(a4 + 24 * v5);
  uint64_t v12 = *(void *)(a4 + 24 * v5 + 8);
  unint64_t v13 = (v12 - v11) >> 3;
  if (v12 == v11) {
    goto LABEL_13;
  }
LABEL_7:
  unint64_t v14 = 0;
  double v15 = 1.79769313e308;
  do
  {
    if (*(double *)(v11 + 8 * v14) < v15) {
      double v15 = *(double *)(v11 + 8 * v14);
    }
    v14 += 2;
  }
  while (v14 < v13);
LABEL_14:
  uint64_t v16 = *a3;
  uint64_t v18 = *(void *)(a4 + 24 * *a3);
  uint64_t v17 = *(void *)(a4 + 24 * *a3 + 8);
  unint64_t v19 = (v17 - v18) >> 3;
  if (v10 >= v15)
  {
    if (v17 == v18)
    {
      double v25 = 1.79769313e308;
      if (v7 != v6) {
        goto LABEL_33;
      }
    }
    else
    {
      unint64_t v24 = 0;
      double v25 = 1.79769313e308;
      do
      {
        if (*(double *)(v18 + 8 * v24) < v25) {
          double v25 = *(double *)(v18 + 8 * v24);
        }
        v24 += 2;
      }
      while (v24 < v19);
      if (v7 != v6)
      {
LABEL_33:
        unint64_t v26 = 0;
        double v27 = 1.79769313e308;
        do
        {
          if (*(double *)(v6 + 8 * v26) < v27) {
            double v27 = *(double *)(v6 + 8 * v26);
          }
          v26 += 2;
        }
        while (v26 < v8);
        if (v25 >= v27) {
          return result;
        }
LABEL_55:
        *a2 = v16;
        *a3 = v4;
        uint64_t v36 = *result;
        uint64_t v37 = *(void *)(a4 + 24 * *a2);
        uint64_t v38 = *(void *)(a4 + 24 * *a2 + 8);
        uint64_t v39 = v38 - v37;
        if (v38 == v37)
        {
          double v42 = 1.79769313e308;
          uint64_t v43 = *(void *)(a4 + 24 * v36);
          uint64_t v49 = *(void *)(a4 + 24 * v36 + 8);
          uint64_t v45 = v49 - v43;
          if (v49 != v43) {
            goto LABEL_61;
          }
        }
        else
        {
          unint64_t v40 = 0;
          unint64_t v41 = v39 >> 3;
          double v42 = 1.79769313e308;
          do
          {
            if (*(double *)(v37 + 8 * v40) < v42) {
              double v42 = *(double *)(v37 + 8 * v40);
            }
            v40 += 2;
          }
          while (v40 < v41);
          uint64_t v43 = *(void *)(a4 + 24 * v36);
          uint64_t v44 = *(void *)(a4 + 24 * v36 + 8);
          uint64_t v45 = v44 - v43;
          if (v44 != v43)
          {
LABEL_61:
            unint64_t v46 = 0;
            unint64_t v47 = v45 >> 3;
            double v48 = 1.79769313e308;
            do
            {
              if (*(double *)(v43 + 8 * v46) < v48) {
                double v48 = *(double *)(v43 + 8 * v46);
              }
              v46 += 2;
            }
            while (v46 < v47);
            if (v42 >= v48) {
              return result;
            }
LABEL_72:
            *uint64_t result = *a2;
            *a2 = v36;
            return result;
          }
        }
        if (v42 >= 1.79769313e308) {
          return result;
        }
        goto LABEL_72;
      }
    }
    if (v25 >= 1.79769313e308) {
      return result;
    }
    goto LABEL_55;
  }
  if (v17 == v18)
  {
    double v21 = 1.79769313e308;
    if (v7 != v6) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v20 = 0;
    double v21 = 1.79769313e308;
    do
    {
      if (*(double *)(v18 + 8 * v20) < v21) {
        double v21 = *(double *)(v18 + 8 * v20);
      }
      v20 += 2;
    }
    while (v20 < v19);
    if (v7 != v6)
    {
LABEL_21:
      unint64_t v22 = 0;
      double v23 = 1.79769313e308;
      do
      {
        if (*(double *)(v6 + 8 * v22) < v23) {
          double v23 = *(double *)(v6 + 8 * v22);
        }
        v22 += 2;
      }
      while (v22 < v8);
      if (v21 < v23) {
        goto LABEL_26;
      }
      goto LABEL_41;
    }
  }
  if (v21 < 1.79769313e308)
  {
LABEL_26:
    *uint64_t result = v16;
    *a3 = v5;
    return result;
  }
LABEL_41:
  *uint64_t result = v4;
  *a2 = v5;
  uint64_t v28 = *(void *)(a4 + 24 * *a3);
  uint64_t v29 = *(void *)(a4 + 24 * *a3 + 8);
  uint64_t v30 = v29 - v28;
  if (v29 == v28)
  {
    double v33 = 1.79769313e308;
    if (v12 != v11) {
      goto LABEL_47;
    }
  }
  else
  {
    unint64_t v31 = 0;
    unint64_t v32 = v30 >> 3;
    double v33 = 1.79769313e308;
    do
    {
      if (*(double *)(v28 + 8 * v31) < v33) {
        double v33 = *(double *)(v28 + 8 * v31);
      }
      v31 += 2;
    }
    while (v31 < v32);
    if (v12 != v11)
    {
LABEL_47:
      unint64_t v34 = 0;
      double v35 = 1.79769313e308;
      do
      {
        if (*(double *)(v11 + 8 * v34) < v35) {
          double v35 = *(double *)(v11 + 8 * v34);
        }
        v34 += 2;
      }
      while (v34 < v13);
      if (v33 < v35) {
        goto LABEL_69;
      }
      return result;
    }
  }
  if (v33 < 1.79769313e308)
  {
LABEL_69:
    *a2 = *a3;
    *a3 = v5;
  }
  return result;
}

BOOL sub_1C49C991C(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v36 = *(a2 - 1);
      uint64_t v37 = *a1;
      uint64_t v38 = **a3;
      uint64_t v39 = *(void *)(v38 + 24 * v36);
      uint64_t v40 = *(void *)(v38 + 24 * v36 + 8);
      uint64_t v41 = v40 - v39;
      if (v40 != v39)
      {
        unint64_t v42 = 0;
        unint64_t v43 = v41 >> 3;
        double v44 = 1.79769313e308;
        do
        {
          if (*(double *)(v39 + 8 * v42) < v44) {
            double v44 = *(double *)(v39 + 8 * v42);
          }
          v42 += 2;
        }
        while (v42 < v43);
        unint64_t v47 = (uint64_t *)(v38 + 24 * v37);
        uint64_t v45 = *v47;
        uint64_t v46 = v47[1];
        uint64_t v48 = v46 - *v47;
        if (v46 != *v47) {
          goto LABEL_44;
        }
LABEL_54:
        if (v44 >= 1.79769313e308) {
          return 1;
        }
        goto LABEL_55;
      }
      double v44 = 1.79769313e308;
      uint64_t v53 = (uint64_t *)(v38 + 24 * v37);
      uint64_t v45 = *v53;
      uint64_t v52 = v53[1];
      uint64_t v48 = v52 - *v53;
      if (v52 == *v53) {
        goto LABEL_54;
      }
LABEL_44:
      unint64_t v49 = 0;
      unint64_t v50 = v48 >> 3;
      double v51 = 1.79769313e308;
      do
      {
        if (*(double *)(v45 + 8 * v49) < v51) {
          double v51 = *(double *)(v45 + 8 * v49);
        }
        v49 += 2;
      }
      while (v49 < v50);
      if (v44 >= v51) {
        return 1;
      }
LABEL_55:
      *a1 = v36;
      *(a2 - 1) = v37;
      return 1;
    case 3:
      sub_1C49C95C8(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_1C49C9CF8(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C49C9F9C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      sub_1C49C95C8(a1, a1 + 1, a1 + 2, **a3);
      unint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = **a3;
LABEL_7:
      uint64_t v13 = *v9;
      uint64_t v15 = *(void *)(v11 + 24 * *v9);
      uint64_t v14 = *(void *)(v11 + 24 * *v9 + 8);
      unint64_t v16 = (v14 - v15) >> 3;
      if (v14 == v15)
      {
        double v18 = 1.79769313e308;
        uint64_t v19 = *v8;
        uint64_t v21 = *(void *)(v11 + 24 * *v8);
        uint64_t v26 = *(void *)(v11 + 24 * *v8 + 8);
        uint64_t v22 = v26 - v21;
        if (v26 != v21)
        {
LABEL_13:
          unint64_t v23 = 0;
          unint64_t v24 = v22 >> 3;
          double v25 = 1.79769313e308;
          do
          {
            if (*(double *)(v21 + 8 * v23) < v25) {
              double v25 = *(double *)(v21 + 8 * v23);
            }
            v23 += 2;
          }
          while (v23 < v24);
          if (v18 >= v25) {
            goto LABEL_6;
          }
LABEL_21:
          uint64_t v12 = v9;
          while (1)
          {
            *uint64_t v12 = v19;
            if (v8 == a1)
            {
              uint64_t v12 = a1;
LABEL_5:
              *uint64_t v12 = v13;
              if (++v10 != 8)
              {
LABEL_6:
                unint64_t v8 = v9++;
                if (v9 == a2) {
                  return 1;
                }
                goto LABEL_7;
              }
              return v9 + 1 == a2;
            }
            uint64_t v12 = v8;
            if (v14 == v15)
            {
              double v29 = 1.79769313e308;
              --v8;
              uint64_t v19 = *(v12 - 1);
              uint64_t v30 = *(void *)(v11 + 24 * v19);
              uint64_t v33 = *(void *)(v11 + 24 * v19 + 8);
              uint64_t v32 = v33 - v30;
              if (v33 != v30) {
                goto LABEL_33;
              }
            }
            else
            {
              unint64_t v28 = 0;
              double v29 = 1.79769313e308;
              do
              {
                if (*(double *)(v15 + 8 * v28) < v29) {
                  double v29 = *(double *)(v15 + 8 * v28);
                }
                v28 += 2;
              }
              while (v28 < v16);
              --v8;
              uint64_t v19 = *(v12 - 1);
              uint64_t v30 = *(void *)(v11 + 24 * v19);
              uint64_t v31 = *(void *)(v11 + 24 * v19 + 8);
              uint64_t v32 = v31 - v30;
              if (v31 != v30)
              {
LABEL_33:
                unint64_t v34 = 0;
                unint64_t v35 = v32 >> 3;
                double v27 = 1.79769313e308;
                do
                {
                  if (*(double *)(v30 + 8 * v34) < v27) {
                    double v27 = *(double *)(v30 + 8 * v34);
                  }
                  v34 += 2;
                }
                while (v34 < v35);
                goto LABEL_23;
              }
            }
            double v27 = 1.79769313e308;
LABEL_23:
            if (v29 >= v27) {
              goto LABEL_5;
            }
          }
        }
      }
      else
      {
        unint64_t v17 = 0;
        double v18 = 1.79769313e308;
        do
        {
          if (*(double *)(v15 + 8 * v17) < v18) {
            double v18 = *(double *)(v15 + 8 * v17);
          }
          v17 += 2;
        }
        while (v17 < v16);
        uint64_t v19 = *v8;
        uint64_t v21 = *(void *)(v11 + 24 * *v8);
        uint64_t v20 = *(void *)(v11 + 24 * *v8 + 8);
        uint64_t v22 = v20 - v21;
        if (v20 != v21) {
          goto LABEL_13;
        }
      }
      if (v18 >= 1.79769313e308) {
        goto LABEL_6;
      }
      goto LABEL_21;
  }
}

uint64_t *sub_1C49C9CF8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  BOOL result = sub_1C49C95C8(a1, a2, a3, **a5);
  uint64_t v11 = *a3;
  uint64_t v12 = **a5;
  uint64_t v13 = *(void *)(v12 + 24 * *a4);
  uint64_t v14 = *(void *)(v12 + 24 * *a4 + 8);
  uint64_t v15 = v14 - v13;
  if (v14 == v13)
  {
    double v18 = 1.79769313e308;
    uint64_t v19 = *(void *)(v12 + 24 * v11);
    uint64_t v25 = *(void *)(v12 + 24 * v11 + 8);
    uint64_t v21 = v25 - v19;
    if (v25 != v19) {
      goto LABEL_7;
    }
LABEL_14:
    if (v18 >= 1.79769313e308) {
      return result;
    }
LABEL_15:
    *a3 = *a4;
    *a4 = v11;
    uint64_t v26 = *a2;
    uint64_t v27 = *(void *)(v12 + 24 * *a3);
    uint64_t v28 = *(void *)(v12 + 24 * *a3 + 8);
    uint64_t v29 = v28 - v27;
    if (v28 == v27)
    {
      double v32 = 1.79769313e308;
      uint64_t v33 = *(void *)(v12 + 24 * v26);
      uint64_t v39 = *(void *)(v12 + 24 * v26 + 8);
      uint64_t v35 = v39 - v33;
      if (v39 != v33) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v30 = 0;
      unint64_t v31 = v29 >> 3;
      double v32 = 1.79769313e308;
      do
      {
        if (*(double *)(v27 + 8 * v30) < v32) {
          double v32 = *(double *)(v27 + 8 * v30);
        }
        v30 += 2;
      }
      while (v30 < v31);
      uint64_t v33 = *(void *)(v12 + 24 * v26);
      uint64_t v34 = *(void *)(v12 + 24 * v26 + 8);
      uint64_t v35 = v34 - v33;
      if (v34 != v33)
      {
LABEL_21:
        unint64_t v36 = 0;
        unint64_t v37 = v35 >> 3;
        double v38 = 1.79769313e308;
        do
        {
          if (*(double *)(v33 + 8 * v36) < v38) {
            double v38 = *(double *)(v33 + 8 * v36);
          }
          v36 += 2;
        }
        while (v36 < v37);
        if (v32 >= v38) {
          return result;
        }
LABEL_29:
        *a2 = *a3;
        *a3 = v26;
        uint64_t v40 = *a1;
        uint64_t v41 = *(void *)(v12 + 24 * *a2);
        uint64_t v42 = *(void *)(v12 + 24 * *a2 + 8);
        uint64_t v43 = v42 - v41;
        if (v42 == v41)
        {
          double v46 = 1.79769313e308;
          unint64_t v55 = (uint64_t *)(v12 + 24 * v40);
          uint64_t v47 = *v55;
          uint64_t v54 = v55[1];
          uint64_t v50 = v54 - *v55;
          if (v54 != *v55) {
            goto LABEL_35;
          }
        }
        else
        {
          unint64_t v44 = 0;
          unint64_t v45 = v43 >> 3;
          double v46 = 1.79769313e308;
          do
          {
            if (*(double *)(v41 + 8 * v44) < v46) {
              double v46 = *(double *)(v41 + 8 * v44);
            }
            v44 += 2;
          }
          while (v44 < v45);
          unint64_t v49 = (uint64_t *)(v12 + 24 * v40);
          uint64_t v47 = *v49;
          uint64_t v48 = v49[1];
          uint64_t v50 = v48 - *v49;
          if (v48 != *v49)
          {
LABEL_35:
            unint64_t v51 = 0;
            unint64_t v52 = v50 >> 3;
            double v53 = 1.79769313e308;
            do
            {
              if (*(double *)(v47 + 8 * v51) < v53) {
                double v53 = *(double *)(v47 + 8 * v51);
              }
              v51 += 2;
            }
            while (v51 < v52);
            if (v46 >= v53) {
              return result;
            }
LABEL_43:
            *a1 = *a2;
            *a2 = v40;
            return result;
          }
        }
        if (v46 >= 1.79769313e308) {
          return result;
        }
        goto LABEL_43;
      }
    }
    if (v32 >= 1.79769313e308) {
      return result;
    }
    goto LABEL_29;
  }
  unint64_t v16 = 0;
  unint64_t v17 = v15 >> 3;
  double v18 = 1.79769313e308;
  do
  {
    if (*(double *)(v13 + 8 * v16) < v18) {
      double v18 = *(double *)(v13 + 8 * v16);
    }
    v16 += 2;
  }
  while (v16 < v17);
  uint64_t v19 = *(void *)(v12 + 24 * v11);
  uint64_t v20 = *(void *)(v12 + 24 * v11 + 8);
  uint64_t v21 = v20 - v19;
  if (v20 == v19) {
    goto LABEL_14;
  }
LABEL_7:
  unint64_t v22 = 0;
  unint64_t v23 = v21 >> 3;
  double v24 = 1.79769313e308;
  do
  {
    if (*(double *)(v19 + 8 * v22) < v24) {
      double v24 = *(double *)(v19 + 8 * v22);
    }
    v22 += 2;
  }
  while (v22 < v23);
  if (v18 < v24) {
    goto LABEL_15;
  }
  return result;
}

uint64_t *sub_1C49C9F9C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t **a6)
{
  BOOL result = sub_1C49C9CF8(a1, a2, a3, a4, a6);
  uint64_t v13 = *a4;
  uint64_t v14 = **a6;
  uint64_t v15 = *(void *)(v14 + 24 * *a5);
  uint64_t v16 = *(void *)(v14 + 24 * *a5 + 8);
  uint64_t v17 = v16 - v15;
  if (v16 == v15)
  {
    double v20 = 1.79769313e308;
    uint64_t v21 = *(void *)(v14 + 24 * v13);
    uint64_t v27 = *(void *)(v14 + 24 * v13 + 8);
    uint64_t v23 = v27 - v21;
    if (v27 != v21) {
      goto LABEL_7;
    }
LABEL_14:
    if (v20 >= 1.79769313e308) {
      return result;
    }
LABEL_15:
    *a4 = *a5;
    *a5 = v13;
    uint64_t v28 = *a3;
    uint64_t v29 = *(void *)(v14 + 24 * *a4);
    uint64_t v30 = *(void *)(v14 + 24 * *a4 + 8);
    uint64_t v31 = v30 - v29;
    if (v30 == v29)
    {
      double v34 = 1.79769313e308;
      uint64_t v35 = *(void *)(v14 + 24 * v28);
      uint64_t v41 = *(void *)(v14 + 24 * v28 + 8);
      uint64_t v37 = v41 - v35;
      if (v41 != v35) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v32 = 0;
      unint64_t v33 = v31 >> 3;
      double v34 = 1.79769313e308;
      do
      {
        if (*(double *)(v29 + 8 * v32) < v34) {
          double v34 = *(double *)(v29 + 8 * v32);
        }
        v32 += 2;
      }
      while (v32 < v33);
      uint64_t v35 = *(void *)(v14 + 24 * v28);
      uint64_t v36 = *(void *)(v14 + 24 * v28 + 8);
      uint64_t v37 = v36 - v35;
      if (v36 != v35)
      {
LABEL_21:
        unint64_t v38 = 0;
        unint64_t v39 = v37 >> 3;
        double v40 = 1.79769313e308;
        do
        {
          if (*(double *)(v35 + 8 * v38) < v40) {
            double v40 = *(double *)(v35 + 8 * v38);
          }
          v38 += 2;
        }
        while (v38 < v39);
        if (v34 >= v40) {
          return result;
        }
LABEL_29:
        *a3 = *a4;
        *a4 = v28;
        uint64_t v42 = *a2;
        uint64_t v43 = *(void *)(v14 + 24 * *a3);
        uint64_t v44 = *(void *)(v14 + 24 * *a3 + 8);
        uint64_t v45 = v44 - v43;
        if (v44 == v43)
        {
          double v48 = 1.79769313e308;
          uint64_t v49 = *(void *)(v14 + 24 * v42);
          uint64_t v55 = *(void *)(v14 + 24 * v42 + 8);
          uint64_t v51 = v55 - v49;
          if (v55 != v49) {
            goto LABEL_35;
          }
        }
        else
        {
          unint64_t v46 = 0;
          unint64_t v47 = v45 >> 3;
          double v48 = 1.79769313e308;
          do
          {
            if (*(double *)(v43 + 8 * v46) < v48) {
              double v48 = *(double *)(v43 + 8 * v46);
            }
            v46 += 2;
          }
          while (v46 < v47);
          uint64_t v49 = *(void *)(v14 + 24 * v42);
          uint64_t v50 = *(void *)(v14 + 24 * v42 + 8);
          uint64_t v51 = v50 - v49;
          if (v50 != v49)
          {
LABEL_35:
            unint64_t v52 = 0;
            unint64_t v53 = v51 >> 3;
            double v54 = 1.79769313e308;
            do
            {
              if (*(double *)(v49 + 8 * v52) < v54) {
                double v54 = *(double *)(v49 + 8 * v52);
              }
              v52 += 2;
            }
            while (v52 < v53);
            if (v48 >= v54) {
              return result;
            }
LABEL_43:
            *a2 = *a3;
            *a3 = v42;
            uint64_t v56 = *a1;
            uint64_t v57 = *(void *)(v14 + 24 * *a2);
            uint64_t v58 = *(void *)(v14 + 24 * *a2 + 8);
            uint64_t v59 = v58 - v57;
            if (v58 == v57)
            {
              double v62 = 1.79769313e308;
              uint64_t v71 = (uint64_t *)(v14 + 24 * v56);
              uint64_t v63 = *v71;
              uint64_t v70 = v71[1];
              uint64_t v66 = v70 - *v71;
              if (v70 != *v71) {
                goto LABEL_49;
              }
            }
            else
            {
              unint64_t v60 = 0;
              unint64_t v61 = v59 >> 3;
              double v62 = 1.79769313e308;
              do
              {
                if (*(double *)(v57 + 8 * v60) < v62) {
                  double v62 = *(double *)(v57 + 8 * v60);
                }
                v60 += 2;
              }
              while (v60 < v61);
              double v65 = (uint64_t *)(v14 + 24 * v56);
              uint64_t v63 = *v65;
              uint64_t v64 = v65[1];
              uint64_t v66 = v64 - *v65;
              if (v64 != *v65)
              {
LABEL_49:
                unint64_t v67 = 0;
                unint64_t v68 = v66 >> 3;
                double v69 = 1.79769313e308;
                do
                {
                  if (*(double *)(v63 + 8 * v67) < v69) {
                    double v69 = *(double *)(v63 + 8 * v67);
                  }
                  v67 += 2;
                }
                while (v67 < v68);
                if (v62 >= v69) {
                  return result;
                }
LABEL_57:
                *a1 = *a2;
                *a2 = v56;
                return result;
              }
            }
            if (v62 >= 1.79769313e308) {
              return result;
            }
            goto LABEL_57;
          }
        }
        if (v48 >= 1.79769313e308) {
          return result;
        }
        goto LABEL_43;
      }
    }
    if (v34 >= 1.79769313e308) {
      return result;
    }
    goto LABEL_29;
  }
  unint64_t v18 = 0;
  unint64_t v19 = v17 >> 3;
  double v20 = 1.79769313e308;
  do
  {
    if (*(double *)(v15 + 8 * v18) < v20) {
      double v20 = *(double *)(v15 + 8 * v18);
    }
    v18 += 2;
  }
  while (v18 < v19);
  uint64_t v21 = *(void *)(v14 + 24 * v13);
  uint64_t v22 = *(void *)(v14 + 24 * v13 + 8);
  uint64_t v23 = v22 - v21;
  if (v22 == v21) {
    goto LABEL_14;
  }
LABEL_7:
  unint64_t v24 = 0;
  unint64_t v25 = v23 >> 3;
  double v26 = 1.79769313e308;
  do
  {
    if (*(double *)(v21 + 8 * v24) < v26) {
      double v26 = *(double *)(v21 + 8 * v24);
    }
    v24 += 2;
  }
  while (v24 < v25);
  if (v20 < v26) {
    goto LABEL_15;
  }
  return result;
}

void sub_1C49CA300(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      uint64_t v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C494A220();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_1C4949AA8();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[24 * v7];
    uint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        uint64_t v17 = v13;
        *((void *)v13 - 2) = 0;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = v5[2];
        *uint64_t v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      uint64_t v5 = *(void **)a1;
      unint64_t v19 = *(void **)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        double v20 = v19;
        do
        {
          uint64_t v22 = (void *)*(v20 - 3);
          v20 -= 3;
          uint64_t v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          unint64_t v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void *sub_1C49CA4EC(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    uint64_t v6 = a2;
    unint64_t v7 = (void **)result;
    unint64_t v8 = result + 1;
    do
    {
      BOOL result = sub_1C49A0B80(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        unint64_t v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v10 = (uint64_t **)result;
        uint64_t v11 = operator new(0x30uLL);
        v11[2] = *((_OWORD *)v6 + 2);
        uint64_t v12 = v18[0];
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v12;
        *unint64_t v10 = (uint64_t *)v11;
        uint64_t v13 = (void *)**v7;
        if (v13)
        {
          *unint64_t v7 = v13;
          uint64_t v14 = *v10;
        }
        else
        {
          uint64_t v14 = (uint64_t *)v11;
        }
        BOOL result = sub_1C4949FD4(v7[1], v14);
        v7[2] = (void *)((char *)v7[2] + 1);
        unint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            size_t v15 = v9;
            unint64_t v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        size_t v15 = (void *)v6[2];
        BOOL v16 = *v15 == (void)v6;
        uint64_t v6 = v15;
      }
      while (!v16);
LABEL_3:
      uint64_t v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t sub_1C49CA600(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_1C4999C7C(i - 24, *(void **)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C49CA658(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_1C494A220();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    BOOL v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[8 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t sub_1C49CA808(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
LABEL_2:
  unint64_t v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    unint64_t v14 = a2 - v12;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v89 = *(a2 - 1);
          uint64_t v90 = *v12;
          if (*(double *)(**a3 + 8 * v89) >= *(double *)(**a3 + 8 * *v12)) {
            return result;
          }
          *unint64_t v12 = v89;
          goto LABEL_176;
        case 3uLL:
          uint64_t v91 = **a3;
          uint64_t v90 = *v12;
          uint64_t v92 = v12[1];
          double v93 = *(double *)(v91 + 8 * v92);
          double v94 = *(double *)(v91 + 8 * *v12);
          uint64_t v95 = *(a2 - 1);
          double v96 = *(double *)(v91 + 8 * v95);
          if (v93 >= v94)
          {
            if (v96 < v93)
            {
              v12[1] = v95;
              *(a2 - 1) = v92;
              uint64_t v149 = *v12;
              uint64_t v148 = v12[1];
              if (*(double *)(v91 + 8 * v148) < *(double *)(v91 + 8 * *v12))
              {
                *unint64_t v12 = v148;
                v12[1] = v149;
              }
            }
          }
          else
          {
            if (v96 >= v93)
            {
              *unint64_t v12 = v92;
              v12[1] = v90;
              uint64_t v160 = *(a2 - 1);
              if (*(double *)(v91 + 8 * v160) >= v94) {
                return result;
              }
              v12[1] = v160;
            }
            else
            {
              *unint64_t v12 = v95;
            }
LABEL_176:
            *(a2 - 1) = v90;
          }
          return result;
        case 4uLL:
          unint64_t v98 = v12 + 1;
          uint64_t v99 = v12[1];
          double v100 = v12 + 2;
          uint64_t v101 = v12[2];
          uint64_t v102 = **a3;
          double v103 = *(double *)(v102 + 8 * v99);
          uint64_t v104 = (uint64_t *)*v12;
          double v105 = *(double *)(v102 + 8 * *v12);
          double v106 = *(double *)(v102 + 8 * v101);
          if (v103 >= v105)
          {
            if (v106 >= v103)
            {
LABEL_170:
              uint64_t v99 = v101;
              uint64_t v150 = *(a2 - 1);
              if (*(double *)(v102 + 8 * v150) >= *(double *)(v102 + 8 * v99)) {
                return result;
              }
LABEL_171:
              *double v100 = v150;
              *(a2 - 1) = v99;
              uint64_t v156 = *v100;
              uint64_t v157 = *v98;
              double v158 = *(double *)(v102 + 8 * v156);
              if (v158 < *(double *)(v102 + 8 * v157))
              {
                v12[1] = v156;
                v12[2] = v157;
                uint64_t v159 = *v12;
                if (v158 < *(double *)(v102 + 8 * *v12))
                {
                  *unint64_t v12 = v156;
                  v12[1] = v159;
                }
              }
              return result;
            }
            *unint64_t v98 = v101;
            *double v100 = v99;
            double v107 = v12;
            unint64_t v108 = (uint64_t **)(v12 + 1);
            BOOL result = v99;
            if (v106 >= v105)
            {
LABEL_161:
              uint64_t v150 = *(a2 - 1);
              if (*(double *)(v102 + 8 * v150) >= *(double *)(v102 + 8 * v99)) {
                return result;
              }
              goto LABEL_171;
            }
          }
          else
          {
            double v107 = v12;
            unint64_t v108 = (uint64_t **)(v12 + 2);
            BOOL result = *v12;
            if (v106 >= v103)
            {
              *unint64_t v12 = v99;
              v12[1] = (uint64_t)v104;
              double v107 = v12 + 1;
              unint64_t v108 = (uint64_t **)(v12 + 2);
              BOOL result = (uint64_t)v104;
              if (v106 >= v105) {
                goto LABEL_170;
              }
            }
          }
          uint64_t *v107 = v101;
          *unint64_t v108 = v104;
          uint64_t v99 = result;
          goto LABEL_161;
        case 5uLL:
          uint64_t v97 = **a3;
          return (uint64_t)sub_1C49CB30C(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, v97);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 != a2)
      {
        int64_t v120 = (v14 - 2) >> 1;
        int64_t v121 = v120;
        do
        {
          if (v120 >= v121)
          {
            uint64_t v123 = (2 * v121) | 1;
            uint64_t v124 = &v12[v123];
            uint64_t v125 = **a3;
            if (2 * v121 + 2 < (uint64_t)v14 && *(double *)(v125 + 8 * *v124) < *(double *)(v125 + 8 * v124[1]))
            {
              ++v124;
              uint64_t v123 = 2 * v121 + 2;
            }
            BOOL result = (uint64_t)&v12[v121];
            uint64_t v126 = *v124;
            uint64_t v127 = *(void *)result;
            double v128 = *(double *)(v125 + 8 * *(void *)result);
            if (*(double *)(v125 + 8 * *v124) >= v128)
            {
              do
              {
                uint64_t v129 = v124;
                *(void *)BOOL result = v126;
                if (v120 < v123) {
                  break;
                }
                uint64_t v130 = 2 * v123;
                uint64_t v123 = (2 * v123) | 1;
                uint64_t v124 = &v12[v123];
                uint64_t v131 = v130 + 2;
                if (v131 < (uint64_t)v14 && *(double *)(v125 + 8 * *v124) < *(double *)(v125 + 8 * v124[1]))
                {
                  ++v124;
                  uint64_t v123 = v131;
                }
                uint64_t v126 = *v124;
                BOOL result = (uint64_t)v129;
              }
              while (*(double *)(v125 + 8 * *v124) >= v128);
              *uint64_t v129 = v127;
            }
          }
          BOOL v122 = v121-- <= 0;
        }
        while (!v122);
        uint64_t v132 = (unint64_t)v13 >> 3;
        do
        {
          uint64_t v133 = 0;
          uint64_t v134 = *v12;
          uint64_t v135 = *a3;
          uint64_t v136 = v12;
          do
          {
            uint64_t v137 = v136;
            v136 += v133 + 1;
            uint64_t v138 = 2 * v133;
            uint64_t v133 = (2 * v133) | 1;
            uint64_t v139 = v138 + 2;
            if (v139 < v132)
            {
              BOOL result = v136[1];
              if (*(double *)(*v135 + 8 * *v136) < *(double *)(*v135 + 8 * result))
              {
                ++v136;
                uint64_t v133 = v139;
              }
            }
            *uint64_t v137 = *v136;
          }
          while (v133 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
          if (v136 == --a2)
          {
            *uint64_t v136 = v134;
          }
          else
          {
            *uint64_t v136 = *a2;
            *a2 = v134;
            uint64_t v140 = (char *)v136 - (char *)v12 + 8;
            if (v140 >= 9)
            {
              unint64_t v141 = (((unint64_t)v140 >> 3) - 2) >> 1;
              double v142 = &v12[v141];
              uint64_t v143 = *v142;
              uint64_t v144 = *v136;
              uint64_t v145 = **a3;
              double v146 = *(double *)(v145 + 8 * *v136);
              if (*(double *)(v145 + 8 * *v142) < v146)
              {
                do
                {
                  uint64_t v147 = v142;
                  *uint64_t v136 = v143;
                  if (!v141) {
                    break;
                  }
                  unint64_t v141 = (v141 - 1) >> 1;
                  double v142 = &v12[v141];
                  uint64_t v143 = *v142;
                  uint64_t v136 = v147;
                }
                while (*(double *)(v145 + 8 * *v142) < v146);
                uint64_t *v147 = v144;
              }
            }
          }
          BOOL v122 = v132-- <= 2;
        }
        while (!v122);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    BOOL v16 = &v12[v14 >> 1];
    uint64_t v17 = **a3;
    uint64_t v18 = *(a2 - 1);
    double v19 = *(double *)(v17 + 8 * v18);
    if ((unint64_t)v13 < 0x401)
    {
      uint64_t v24 = *v12;
      uint64_t v25 = *v16;
      double v26 = *(double *)(v17 + 8 * *v12);
      double v27 = *(double *)(v17 + 8 * *v16);
      if (v26 < v27)
      {
        if (v19 < v26)
        {
          *BOOL v16 = v18;
          goto LABEL_32;
        }
        *BOOL v16 = v24;
        *unint64_t v12 = v25;
        uint64_t v42 = *(a2 - 1);
        if (*(double *)(v17 + 8 * v42) < v27)
        {
          *unint64_t v12 = v42;
LABEL_32:
          *(a2 - 1) = v25;
        }
LABEL_33:
        --a4;
        uint64_t v30 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v19 >= v26) {
        goto LABEL_33;
      }
      *unint64_t v12 = v18;
      *(a2 - 1) = v24;
      uint64_t v29 = *v16;
      if (*(double *)(v17 + 8 * *v12) >= *(double *)(v17 + 8 * *v16)) {
        goto LABEL_33;
      }
      *BOOL v16 = *v12;
      *unint64_t v12 = v29;
      --a4;
      uint64_t v30 = v29;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      double v63 = *(double *)(v17 + 8 * v30);
      if (*(double *)(v17 + 8 * *(v12 - 1)) < v63) {
        goto LABEL_57;
      }
      if (v63 < *(double *)(v17 + 8 * *(a2 - 1)))
      {
        do
        {
          uint64_t v80 = v12[1];
          ++v12;
        }
        while (v63 >= *(double *)(v17 + 8 * v80));
      }
      else
      {
        double v81 = v12 + 1;
        do
        {
          unint64_t v12 = v81;
          if (v81 >= a2) {
            break;
          }
          ++v81;
        }
        while (v63 >= *(double *)(v17 + 8 * *v12));
      }
      unint64_t v82 = a2;
      if (v12 < a2)
      {
        unint64_t v82 = a2;
        do
          uint64_t v83 = *--v82;
        while (v63 < *(double *)(v17 + 8 * v83));
      }
      if (v12 < v82)
      {
        uint64_t v84 = *v12;
        uint64_t v85 = *v82;
        do
        {
          *unint64_t v12 = v85;
          *unint64_t v82 = v84;
          do
          {
            uint64_t v86 = v12[1];
            ++v12;
            uint64_t v84 = v86;
          }
          while (v63 >= *(double *)(v17 + 8 * v86));
          do
          {
            uint64_t v87 = *--v82;
            uint64_t v85 = v87;
          }
          while (v63 < *(double *)(v17 + 8 * v87));
        }
        while (v12 < v82);
      }
      uint64_t v88 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *uint64_t v11 = *v88;
      }
      a5 = 0;
      *uint64_t v88 = v30;
    }
    else
    {
      uint64_t v20 = *v16;
      uint64_t v21 = *v12;
      double v22 = *(double *)(v17 + 8 * *v16);
      double v23 = *(double *)(v17 + 8 * *v12);
      if (v22 >= v23)
      {
        if (v19 < v22)
        {
          *BOOL v16 = v18;
          *(a2 - 1) = v20;
          uint64_t v28 = *v12;
          if (*(double *)(v17 + 8 * *v16) < *(double *)(v17 + 8 * *v12))
          {
            *unint64_t v12 = *v16;
            *BOOL v16 = v28;
          }
        }
      }
      else
      {
        if (v19 >= v22)
        {
          *unint64_t v12 = v20;
          *BOOL v16 = v21;
          uint64_t v31 = *(a2 - 1);
          if (*(double *)(v17 + 8 * v31) >= v23) {
            goto LABEL_24;
          }
          *BOOL v16 = v31;
        }
        else
        {
          *unint64_t v12 = v18;
        }
        *(a2 - 1) = v21;
      }
LABEL_24:
      unint64_t v32 = &v12[v15];
      uint64_t v35 = *(v32 - 1);
      unint64_t v33 = v32 - 1;
      uint64_t v34 = v35;
      uint64_t v36 = v12[1];
      double v37 = *(double *)(v17 + 8 * v35);
      double v38 = *(double *)(v17 + 8 * v36);
      uint64_t v39 = *(a2 - 2);
      double v40 = *(double *)(v17 + 8 * v39);
      if (v37 >= v38)
      {
        if (v40 < v37)
        {
          *unint64_t v33 = v39;
          *(a2 - 2) = v34;
          uint64_t v41 = v12[1];
          if (*(double *)(v17 + 8 * *v33) < *(double *)(v17 + 8 * v41))
          {
            v12[1] = *v33;
            *unint64_t v33 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[1] = v34;
          *unint64_t v33 = v36;
          uint64_t v43 = *(a2 - 2);
          if (*(double *)(v17 + 8 * v43) >= v38) {
            goto LABEL_38;
          }
          *unint64_t v33 = v43;
        }
        else
        {
          v12[1] = v39;
        }
        *(a2 - 2) = v36;
      }
LABEL_38:
      uint64_t v44 = &v12[v15];
      uint64_t v47 = v44[1];
      uint64_t v45 = v44 + 1;
      uint64_t v46 = v47;
      uint64_t v48 = v12[2];
      double v49 = *(double *)(v17 + 8 * v47);
      double v50 = *(double *)(v17 + 8 * v48);
      uint64_t v51 = *(a2 - 3);
      double v52 = *(double *)(v17 + 8 * v51);
      if (v49 >= v50)
      {
        if (v52 < v49)
        {
          *uint64_t v45 = v51;
          *(a2 - 3) = v46;
          uint64_t v53 = v12[2];
          if (*(double *)(v17 + 8 * *v45) < *(double *)(v17 + 8 * v53))
          {
            v12[2] = *v45;
            *uint64_t v45 = v53;
          }
        }
      }
      else
      {
        if (v52 >= v49)
        {
          v12[2] = v46;
          *uint64_t v45 = v48;
          uint64_t v54 = *(a2 - 3);
          if (*(double *)(v17 + 8 * v54) >= v50) {
            goto LABEL_47;
          }
          *uint64_t v45 = v54;
        }
        else
        {
          v12[2] = v51;
        }
        *(a2 - 3) = v48;
      }
LABEL_47:
      uint64_t v55 = *v16;
      uint64_t v56 = *v33;
      double v57 = *(double *)(v17 + 8 * *v16);
      double v58 = *(double *)(v17 + 8 * *v33);
      uint64_t v59 = *v45;
      double v60 = *(double *)(v17 + 8 * *v45);
      if (v57 >= v58)
      {
        if (v60 >= v57) {
          goto LABEL_55;
        }
        *BOOL v16 = v59;
        *uint64_t v45 = v55;
        uint64_t v45 = &v12[v14 >> 1];
        uint64_t v55 = v56;
        if (v60 < v58)
        {
LABEL_54:
          *unint64_t v33 = v59;
          *uint64_t v45 = v56;
LABEL_55:
          uint64_t v62 = *v12;
          *unint64_t v12 = v55;
          *BOOL v16 = v62;
          --a4;
          uint64_t v30 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        uint64_t v79 = *v12;
        *unint64_t v12 = v59;
        *BOOL v16 = v79;
        --a4;
        uint64_t v30 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v60 < v57) {
        goto LABEL_54;
      }
      *unint64_t v33 = v55;
      *BOOL v16 = v56;
      unint64_t v33 = &v12[v14 >> 1];
      uint64_t v55 = v59;
      if (v60 < v58) {
        goto LABEL_54;
      }
      uint64_t v61 = *v12;
      *unint64_t v12 = v56;
      *BOOL v16 = v61;
      --a4;
      uint64_t v30 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v64 = 0;
      uint64_t v65 = **a3;
      double v66 = *(double *)(v65 + 8 * v30);
      do
        uint64_t v67 = v12[++v64];
      while (*(double *)(v65 + 8 * v67) < v66);
      unint64_t v68 = &v12[v64];
      double v69 = a2;
      if (v64 == 1)
      {
        double v69 = a2;
        do
        {
          if (v68 >= v69) {
            break;
          }
          uint64_t v71 = *--v69;
        }
        while (*(double *)(v65 + 8 * v71) >= v66);
      }
      else
      {
        do
          uint64_t v70 = *--v69;
        while (*(double *)(v65 + 8 * v70) >= v66);
      }
      if (v68 >= v69)
      {
        uint64_t v77 = v68 - 1;
        if (v68 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *unint64_t v12 = *v77;
        goto LABEL_75;
      }
      uint64_t v72 = *v69;
      unint64_t v73 = &v12[v64];
      double v74 = v69;
      do
      {
        *unint64_t v73 = v72;
        uint64_t *v74 = v67;
        do
        {
          uint64_t v75 = v73[1];
          ++v73;
          uint64_t v67 = v75;
        }
        while (*(double *)(v65 + 8 * v75) < v66);
        do
        {
          uint64_t v76 = *--v74;
          uint64_t v72 = v76;
        }
        while (*(double *)(v65 + 8 * v76) >= v66);
      }
      while (v73 < v74);
      uint64_t v77 = v73 - 1;
      if (v73 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *uint64_t v77 = v30;
      if (v68 < v69) {
        goto LABEL_78;
      }
      BOOL v78 = sub_1C49CB4A8(v12, v77, *a3);
      unint64_t v12 = v77 + 1;
      BOOL result = sub_1C49CB4A8(v77 + 1, a2, *a3);
      if (result)
      {
        a2 = v77;
        if (v78) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v78)
      {
LABEL_78:
        BOOL result = sub_1C49CA808(v11, v77, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v77 + 1;
      }
    }
  }
  int v109 = *a3;
  if (a5)
  {
    if (v12 != a2)
    {
      BOOL v110 = v12 + 1;
      if (v12 + 1 != a2)
      {
        uint64_t v111 = *v109;
        uint64_t v112 = 8;
        uint64_t v113 = v12;
        do
        {
          uint64_t v116 = *v113;
          uint64_t v115 = v113[1];
          uint64_t v113 = v110;
          double v117 = *(double *)(v111 + 8 * v115);
          if (v117 < *(double *)(v111 + 8 * v116))
          {
            uint64_t v118 = v112;
            do
            {
              *(uint64_t *)((char *)v12 + v118) = v116;
              uint64_t v119 = v118 - 8;
              if (v118 == 8)
              {
                uint64_t v114 = v12;
                goto LABEL_118;
              }
              uint64_t v116 = *(uint64_t *)((char *)v12 + v118 - 16);
              v118 -= 8;
            }
            while (v117 < *(double *)(v111 + 8 * v116));
            uint64_t v114 = (uint64_t *)((char *)v12 + v119);
LABEL_118:
            *uint64_t v114 = v115;
          }
          BOOL v110 = v113 + 1;
          v112 += 8;
        }
        while (v113 + 1 != a2);
      }
    }
  }
  else if (v12 != a2)
  {
    unint64_t v151 = v12 + 1;
    if (v12 + 1 != a2)
    {
      uint64_t v152 = *v109;
      do
      {
        uint64_t v154 = *v11;
        uint64_t v153 = v11[1];
        uint64_t v11 = v151;
        double v155 = *(double *)(v152 + 8 * v153);
        if (v155 < *(double *)(v152 + 8 * v154))
        {
          do
          {
            uint64_t *v151 = v154;
            uint64_t v154 = *(v151 - 2);
            --v151;
          }
          while (v155 < *(double *)(v152 + 8 * v154));
          uint64_t *v151 = v153;
        }
        unint64_t v151 = v11 + 1;
      }
      while (v11 + 1 != a2);
    }
  }
  return result;
}

uint64_t *sub_1C49CB30C(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *result;
  double v8 = *(double *)(a6 + 8 * *a2);
  double v9 = *(double *)(a6 + 8 * *result);
  uint64_t v10 = *a3;
  double v11 = *(double *)(a6 + 8 * *a3);
  if (v8 >= v9)
  {
    if (v11 >= v8)
    {
      uint64_t v6 = *a3;
      uint64_t v13 = *a4;
      if (*(double *)(a6 + 8 * *a4) >= *(double *)(a6 + 8 * v10)) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v10;
    *a3 = v6;
    uint64_t v12 = *result;
    if (*(double *)(a6 + 8 * *a2) < *(double *)(a6 + 8 * *result))
    {
      *BOOL result = *a2;
      *a2 = v12;
      uint64_t v6 = *a3;
      uint64_t v13 = *a4;
      if (*(double *)(a6 + 8 * *a4) >= *(double *)(a6 + 8 * *a3)) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v11 >= v8)
    {
      *BOOL result = v6;
      *a2 = v7;
      uint64_t v6 = *a3;
      if (*(double *)(a6 + 8 * *a3) >= v9) {
        goto LABEL_11;
      }
      *a2 = v6;
    }
    else
    {
      *BOOL result = v10;
    }
    *a3 = v7;
    uint64_t v6 = v7;
  }
LABEL_11:
  uint64_t v13 = *a4;
  if (*(double *)(a6 + 8 * *a4) >= *(double *)(a6 + 8 * v6)) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v13;
  *a4 = v6;
  uint64_t v14 = *a2;
  if (*(double *)(a6 + 8 * *a3) < *(double *)(a6 + 8 * *a2))
  {
    *a2 = *a3;
    *a3 = v14;
    uint64_t v15 = *result;
    if (*(double *)(a6 + 8 * *a2) < *(double *)(a6 + 8 * *result))
    {
      *BOOL result = *a2;
      *a2 = v15;
    }
  }
LABEL_17:
  uint64_t v16 = *a4;
  if (*(double *)(a6 + 8 * *a5) < *(double *)(a6 + 8 * *a4))
  {
    *a4 = *a5;
    *a5 = v16;
    uint64_t v17 = *a3;
    if (*(double *)(a6 + 8 * *a4) < *(double *)(a6 + 8 * *a3))
    {
      *a3 = *a4;
      *a4 = v17;
      uint64_t v18 = *a2;
      if (*(double *)(a6 + 8 * *a3) < *(double *)(a6 + 8 * *a2))
      {
        *a2 = *a3;
        *a3 = v18;
        uint64_t v19 = *result;
        if (*(double *)(a6 + 8 * *a2) < *(double *)(a6 + 8 * *result))
        {
          *BOOL result = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C49CB4A8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      uint64_t v14 = *(a2 - 1);
      uint64_t v15 = *a1;
      if (*(double *)(*a3 + 8 * v14) >= *(double *)(*a3 + 8 * *a1)) {
        return 1;
      }
      *a1 = v14;
      *(a2 - 1) = v15;
      return 1;
    case 3:
      uint64_t v16 = *a3;
      uint64_t v17 = *a1;
      uint64_t v18 = a1[1];
      double v19 = *(double *)(*a3 + 8 * v18);
      double v20 = *(double *)(*a3 + 8 * *a1);
      uint64_t v21 = *(a2 - 1);
      double v22 = *(double *)(*a3 + 8 * v21);
      if (v19 >= v20)
      {
        if (v22 >= v19) {
          return 1;
        }
        a1[1] = v21;
        *(a2 - 1) = v18;
        uint64_t v44 = *a1;
        uint64_t v43 = a1[1];
        if (*(double *)(v16 + 8 * v43) >= *(double *)(v16 + 8 * *a1)) {
          return 1;
        }
        *a1 = v43;
        a1[1] = v44;
        return 1;
      }
      else if (v22 >= v19)
      {
        *a1 = v18;
        a1[1] = v17;
        uint64_t v50 = *(a2 - 1);
        if (*(double *)(v16 + 8 * v50) >= v20) {
          return 1;
        }
        a1[1] = v50;
        *(a2 - 1) = v17;
        return 1;
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v17;
        return 1;
      }
    case 4:
      double v23 = a1 + 1;
      uint64_t v24 = a1[1];
      uint64_t v25 = a1 + 2;
      uint64_t v26 = a1[2];
      uint64_t v27 = *a3;
      double v28 = *(double *)(*a3 + 8 * v24);
      uint64_t v29 = *a1;
      double v30 = *(double *)(*a3 + 8 * *a1);
      double v31 = *(double *)(*a3 + 8 * v26);
      if (v28 < v30)
      {
        unint64_t v32 = a1;
        unint64_t v33 = a1 + 2;
        uint64_t v34 = *a1;
        if (v31 >= v28)
        {
          *a1 = v24;
          a1[1] = v29;
          unint64_t v32 = a1 + 1;
          unint64_t v33 = a1 + 2;
          uint64_t v34 = v29;
          if (v31 >= v30) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *unint64_t v32 = v26;
        *unint64_t v33 = v29;
        uint64_t v24 = v34;
LABEL_36:
        uint64_t v45 = *(a2 - 1);
        if (*(double *)(v27 + 8 * v45) >= *(double *)(v27 + 8 * v24)) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v31 < v28)
      {
        uint64_t *v23 = v26;
        *uint64_t v25 = v24;
        unint64_t v32 = a1;
        unint64_t v33 = a1 + 1;
        uint64_t v34 = v24;
        if (v31 >= v30) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      uint64_t v24 = v26;
      uint64_t v45 = *(a2 - 1);
      if (*(double *)(v27 + 8 * v45) >= *(double *)(v27 + 8 * v24)) {
        return 1;
      }
LABEL_39:
      *uint64_t v25 = v45;
      *(a2 - 1) = v24;
      uint64_t v46 = *v25;
      uint64_t v47 = *v23;
      double v48 = *(double *)(v27 + 8 * v46);
      if (v48 >= *(double *)(v27 + 8 * v47)) {
        return 1;
      }
      a1[1] = v46;
      a1[2] = v47;
      uint64_t v49 = *a1;
      if (v48 >= *(double *)(v27 + 8 * *a1)) {
        return 1;
      }
      *a1 = v46;
      a1[1] = v49;
      return 1;
    case 5:
      sub_1C49CB30C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      BOOL v5 = a1 + 2;
      uint64_t v4 = a1[2];
      uint64_t v6 = a1[1];
      uint64_t v7 = *a3;
      double v8 = *(double *)(*a3 + 8 * v6);
      uint64_t v9 = *a1;
      double v10 = *(double *)(*a3 + 8 * *a1);
      double v11 = *(double *)(*a3 + 8 * v4);
      if (v8 >= v10)
      {
        if (v11 >= v8 || (a1[1] = v4, *v5 = v6, uint64_t v12 = a1, v13 = a1 + 1, v11 >= v10))
        {
LABEL_20:
          uint64_t v35 = a1 + 3;
          if (a1 + 3 == a2) {
            return 1;
          }
          int v36 = 0;
          for (uint64_t i = 24; ; i += 8)
          {
            uint64_t v38 = *v35;
            uint64_t v39 = *v5;
            double v40 = *(double *)(v7 + 8 * *v35);
            if (v40 < *(double *)(v7 + 8 * v39)) {
              break;
            }
LABEL_23:
            BOOL v5 = v35++;
            if (v35 == a2) {
              return 1;
            }
          }
          uint64_t v41 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v41) = v39;
            uint64_t v42 = v41 - 8;
            if (v41 == 8)
            {
              *a1 = v38;
              if (++v36 != 8) {
                goto LABEL_23;
              }
              return v35 + 1 == a2;
            }
            uint64_t v39 = *(uint64_t *)((char *)a1 + v41 - 16);
            v41 -= 8;
          }
          while (v40 < *(double *)(v7 + 8 * v39));
          *(uint64_t *)((char *)a1 + v42) = v38;
          if (++v36 != 8) {
            goto LABEL_23;
          }
          return v35 + 1 == a2;
        }
      }
      else
      {
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 2;
        if (v11 >= v8)
        {
          *a1 = v6;
          a1[1] = v9;
          uint64_t v12 = a1 + 1;
          uint64_t v13 = a1 + 2;
          if (v11 >= v10) {
            goto LABEL_20;
          }
        }
      }
      *uint64_t v12 = v4;
      uint64_t *v13 = v9;
      goto LABEL_20;
  }
}

__n128 sub_1C49CB850(uint64_t *a1, uint64_t *a2, long long *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    double v8 = a1;
    if (a4 == 2)
    {
      if (sub_1C49CBBA4((uint64_t)a3, *(a2 - 1), *a1))
      {
        uint64_t v10 = *v8;
        uint64_t *v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      unint64_t v22 = a4 >> 1;
      double v23 = &a1[a4 >> 1];
      unint64_t v24 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C49CBD58(a1, v23, (uint64_t)a3, v24, a5);
        uint64_t v25 = &a5[v22];
        result.n128_u64[0] = sub_1C49CBD58(&v8[a4 >> 1], a2, (uint64_t)a3, a4 - (a4 >> 1), v25).n128_u64[0];
        uint64_t v26 = v25;
        uint64_t v27 = a5;
        double v28 = v8;
        uint64_t v29 = &a5[a4];
        do
        {
          if (v26 == v29)
          {
            if (v27 == v25) {
              return result;
            }
            unint64_t v45 = (char *)&a5[v22] - (char *)v27 - 8;
            if (v45 >= 0x38 && (unint64_t)((char *)v8 - (char *)v27) >= 0x20)
            {
              uint64_t v49 = 0;
              uint64_t v50 = (v45 >> 3) + 1;
              uint64_t v51 = v50 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v46 = &v27[v51];
              uint64_t v47 = &v28[v51];
              uint64_t v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                uint64_t v53 = &v28[v49];
                __n128 result = *(__n128 *)&v27[v49];
                long long v54 = *(_OWORD *)&v27[v49 + 2];
                *(__n128 *)uint64_t v53 = result;
                *((_OWORD *)v53 + 1) = v54;
                v49 += 4;
                v52 -= 4;
              }
              while (v52);
              if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
            }
            else
            {
              uint64_t v46 = v27;
              uint64_t v47 = v28;
            }
            do
            {
              uint64_t v48 = *v46++;
              *v47++ = v48;
            }
            while (v46 != v25);
            return result;
          }
          double v30 = v26;
          int v31 = sub_1C49CBBA4((uint64_t)a3, *v26, *v27);
          if (v31) {
            unint64_t v32 = v30;
          }
          else {
            unint64_t v32 = v27;
          }
          v27 += v31 ^ 1u;
          uint64_t v26 = &v30[v31];
          *v28++ = *v32;
          ++v8;
        }
        while (v27 != v25);
        if (v26 != v29)
        {
          uint64_t v33 = -8;
          if (!v31) {
            uint64_t v33 = 0;
          }
          unint64_t v34 = (char *)&a5[a4] - (char *)v30 + v33 - 8;
          if (v34 < 0x68) {
            goto LABEL_50;
          }
          uint64_t v35 = 8;
          if (!v31) {
            uint64_t v35 = 0;
          }
          if ((unint64_t)((char *)v8 - (char *)v30 - v35) < 0x20) {
            goto LABEL_50;
          }
          uint64_t v36 = 0;
          uint64_t v37 = (v34 >> 3) + 1;
          uint64_t v38 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v39 = &v26[v38];
          double v40 = &v28[v38];
          uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v42 = &v28[v36];
            __n128 result = *(__n128 *)&v26[v36];
            long long v43 = *(_OWORD *)&v26[v36 + 2];
            *(__n128 *)uint64_t v42 = result;
            *((_OWORD *)v42 + 1) = v43;
            v36 += 4;
            v41 -= 4;
          }
          while (v41);
          uint64_t v26 = v39;
          double v28 = v40;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_50:
            do
            {
              uint64_t v44 = *v26++;
              *v28++ = v44;
            }
            while (v26 != v29);
          }
        }
      }
      else
      {
        sub_1C49CB850(a1, v23, a3, v24, a5, a6);
        sub_1C49CB850(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        result.n128_u64[0] = sub_1C49CC054(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6).n128_u64[0];
      }
    }
    else if (a1 != a2)
    {
      uint64_t v12 = a1 + 1;
      if (a1 + 1 != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a1;
        do
        {
          uint64_t v16 = *v14;
          uint64_t v14 = v12;
          if (sub_1C49CBBA4((uint64_t)a3, *v12, v16))
          {
            uint64_t v17 = *v14;
            uint64_t v18 = v13;
            do
            {
              double v19 = (char *)v8 + v18;
              *(uint64_t *)((char *)v8 + v18 + 8) = *(uint64_t *)((char *)v8 + v18);
              if (!v18)
              {
                uint64_t v15 = v8;
                goto LABEL_10;
              }
              v18 -= 8;
            }
            while ((sub_1C49CBBA4((uint64_t)a3, v17, *((void *)v19 - 1)) & 1) != 0);
            uint64_t v15 = (uint64_t *)((char *)v8 + v18 + 8);
LABEL_10:
            *uint64_t v15 = v17;
          }
          uint64_t v12 = v14 + 1;
          v13 += 8;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C49CBBA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double MinX = CGRectGetMinX(*(CGRect *)(**(void **)a1 + 32 * a2));
  if (MinX < CGRectGetMinX(*(CGRect *)(**(void **)a1 + 32 * a3)))
  {
    double MaxX = CGRectGetMaxX(*(CGRect *)(**(void **)a1 + 32 * a2));
    if (MaxX > CGRectGetMaxX(*(CGRect *)(**(void **)a1 + 32 * a3))) {
      return 1;
    }
  }
  double v9 = CGRectGetMinX(*(CGRect *)(**(void **)a1 + 32 * a3));
  if (v9 < CGRectGetMinX(*(CGRect *)(**(void **)a1 + 32 * a2)))
  {
    double v10 = CGRectGetMaxX(*(CGRect *)(**(void **)a1 + 32 * a3));
    if (v10 > CGRectGetMaxX(*(CGRect *)(**(void **)a1 + 32 * a2))) {
      return 0;
    }
  }
  int v11 = *(unsigned __int8 *)(a1 + 8);
  double MidX = CGRectGetMidX(*(CGRect *)(**(void **)a1 + 32 * a2));
  double v13 = CGRectGetMidX(*(CGRect *)(**(void **)a1 + 32 * a3));
  if (v11) {
    return MidX > v13;
  }
  else {
    return MidX < v13;
  }
}

__n128 sub_1C49CBD58(uint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    BOOL v5 = a5;
    uint64_t v7 = a1;
    if (a4 == 1)
    {
LABEL_9:
      *BOOL v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      double v10 = a2 - 1;
      int v11 = sub_1C49CBBA4(a3, *(a2 - 1), *a1);
      if (v11) {
        double v13 = v10;
      }
      else {
        double v13 = v7;
      }
      *v5++ = *v13;
      if (!v11) {
        uint64_t v7 = v10;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v22 = a4 >> 1;
      uint64_t v23 = a4 >> 1;
      unint64_t v24 = &a1[v23];
      sub_1C49CB850(a1, &a1[v23], a3, a4 >> 1, a5, a4 >> 1);
      sub_1C49CB850(&v7[v23], a2, a3, a4 - v22, &v5[v23], a4 - v22);
      uint64_t v25 = v5;
      uint64_t v26 = v7;
      uint64_t v27 = v24;
      do
      {
        if (v27 == a2)
        {
          if (v26 == v24) {
            return result;
          }
          unint64_t v43 = (char *)&v7[v22] - (char *)v26 - 8;
          if (v43 >= 0x38 && (unint64_t)((char *)v25 - (char *)v26) >= 0x20)
          {
            uint64_t v47 = 0;
            uint64_t v48 = (v43 >> 3) + 1;
            uint64_t v49 = v48 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v44 = &v5[v49];
            unint64_t v45 = &v26[v49];
            uint64_t v50 = v48 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v51 = &v5[v47];
              __n128 result = *(__n128 *)&v26[v47];
              long long v52 = *(_OWORD *)&v26[v47 + 2];
              *(__n128 *)uint64_t v51 = result;
              *((_OWORD *)v51 + 1) = v52;
              v47 += 4;
              v50 -= 4;
            }
            while (v50);
            if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL)) {
              return result;
            }
          }
          else
          {
            uint64_t v44 = v5;
            unint64_t v45 = v26;
          }
          do
          {
            uint64_t v46 = *v45++;
            *v44++ = v46;
          }
          while (v45 != v24);
          return result;
        }
        double v28 = v27;
        int v29 = sub_1C49CBBA4(a3, *v27, *v26);
        if (v29) {
          double v30 = v28;
        }
        else {
          double v30 = v26;
        }
        uint64_t v27 = &v28[v29];
        v26 += v29 ^ 1u;
        *v5++ = *v30;
        ++v25;
      }
      while (v26 != v24);
      if (v27 != a2)
      {
        uint64_t v31 = -8;
        if (!v29) {
          uint64_t v31 = 0;
        }
        unint64_t v32 = (char *)a2 - (char *)v28 + v31 - 8;
        if (v32 < 0x68) {
          goto LABEL_51;
        }
        uint64_t v33 = 8;
        if (!v29) {
          uint64_t v33 = 0;
        }
        if ((unint64_t)((char *)v25 - (char *)v28 - v33) < 0x20) {
          goto LABEL_51;
        }
        uint64_t v34 = 0;
        uint64_t v35 = (v32 >> 3) + 1;
        uint64_t v36 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        uint64_t v37 = &v5[v36];
        uint64_t v38 = &v27[v36];
        uint64_t v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          double v40 = &v5[v34];
          __n128 result = *(__n128 *)&v27[v34];
          long long v41 = *(_OWORD *)&v27[v34 + 2];
          *(__n128 *)double v40 = result;
          *((_OWORD *)v40 + 1) = v41;
          v34 += 4;
          v39 -= 4;
        }
        while (v39);
        BOOL v5 = v37;
        uint64_t v27 = v38;
        if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          do
          {
            uint64_t v42 = *v27++;
            *v5++ = v42;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      uint64_t v14 = a1 + 1;
      *a5 = *a1;
      if (a1 + 1 != a2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = a5;
        do
        {
          uint64_t v18 = v16;
          uint64_t v19 = *v16++;
          double v20 = v16;
          if (sub_1C49CBBA4(a3, *v14, v19))
          {
            v18[1] = *v18;
            double v20 = v5;
            if (v18 != v5)
            {
              uint64_t v21 = v15;
              while (1)
              {
                double v20 = (uint64_t *)((char *)v5 + v21);
                if (!sub_1C49CBBA4(a3, *v14, *(uint64_t *)((char *)v5 + v21 - 8))) {
                  break;
                }
                *double v20 = *(v20 - 1);
                v21 -= 8;
                if (!v21)
                {
                  double v20 = v5;
                  break;
                }
              }
            }
          }
          uint64_t v17 = *v14++;
          *double v20 = v17;
          v15 += 8;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

__n128 sub_1C49CC054(uint64_t *a1, uint64_t *a2, uint64_t *a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v107 = a6;
  if (!a6) {
    return result;
  }
  while (a5 > a8 && v107 > a8)
  {
    if (!a5) {
      return result;
    }
    unint64_t v15 = 0;
    uint64_t v16 = -a5;
    while ((sub_1C49CBBA4((uint64_t)a4, *a2, a1[v15 / 8]) & 1) == 0)
    {
      v15 += 8;
      if (__CFADD__(v16++, 1)) {
        return result;
      }
    }
    uint64_t v19 = -v16;
    __src = a7;
    uint64_t v20 = v107;
    double v106 = a3;
    if (-v16 >= v107)
    {
      if (v16 == -1)
      {
        uint64_t v85 = a1[v15 / 8];
        a1[v15 / 8] = *a2;
        *a2 = v85;
        return result;
      }
      if (v16 > 0) {
        uint64_t v19 = 1 - v16;
      }
      uint64_t v29 = v19 >> 1;
      unint64_t v24 = &a1[(v19 >> 1) + v15 / 8];
      long long v108 = *a4;
      uint64_t v36 = a3;
      uint64_t v23 = a2;
      if (a2 != v36)
      {
        uint64_t v102 = v29;
        unint64_t v37 = v106 - a2;
        uint64_t v23 = a2;
        do
        {
          uint64_t v38 = &v23[v37 >> 1];
          uint64_t v40 = *v38;
          uint64_t v39 = v38 + 1;
          int v41 = sub_1C49CBBA4((uint64_t)&v108, v40, *v24);
          if (v41) {
            v37 += ~(v37 >> 1);
          }
          else {
            v37 >>= 1;
          }
          if (v41) {
            uint64_t v23 = v39;
          }
        }
        while (v37);
        uint64_t v29 = v102;
        uint64_t v20 = v107;
      }
      uint64_t v22 = v23 - a2;
      if (v24 != a2)
      {
LABEL_22:
        uint64_t v30 = (char *)v23 - (char *)a2;
        if (v23 == a2)
        {
          a2 = v24;
        }
        else
        {
          uint64_t v101 = v29;
          uint64_t v104 = v22;
          uint64_t v31 = v24 + 1;
          if (v24 + 1 == a2)
          {
            uint64_t v42 = a8;
            uint64_t v43 = *v24;
            memmove(v24, a2, (char *)v23 - (char *)a2);
            a2 = (uint64_t *)((char *)v24 + v30);
            *(uint64_t *)((char *)v24 + v30) = v43;
            a8 = v42;
          }
          else
          {
            unint64_t v32 = a2 + 1;
            if (a2 + 1 == v23)
            {
              uint64_t v44 = *(v23 - 1);
              a2 = v24 + 1;
              if (v23 - 1 != v24) {
                memmove(v24 + 1, v24, (char *)(v23 - 1) - (char *)v24);
              }
              *unint64_t v24 = v44;
            }
            else
            {
              uint64_t v33 = a2 - v24;
              if (v33 == v30 >> 3)
              {
                do
                {
                  uint64_t v34 = *(v31 - 1);
                  *(v31 - 1) = *(v32 - 1);
                  *(v32 - 1) = v34;
                  if (v31 == a2) {
                    break;
                  }
                  ++v31;
                }
                while (v32++ != v23);
              }
              else
              {
                uint64_t v45 = v30 >> 3;
                uint64_t v46 = a2 - v24;
                do
                {
                  uint64_t v47 = v46;
                  uint64_t v46 = v45;
                  uint64_t v45 = v47 % v45;
                }
                while (v45);
                if (v46)
                {
                  uint64_t v48 = &v24[v46];
                  do
                  {
                    uint64_t v50 = *--v48;
                    uint64_t v49 = v50;
                    uint64_t v51 = &v48[v33];
                    long long v52 = v48;
                    do
                    {
                      uint64_t v53 = v51;
                      *long long v52 = *v51;
                      uint64_t v54 = v23 - v51;
                      BOOL v55 = __OFSUB__(v33, v54);
                      uint64_t v57 = v33 - v54;
                      char v56 = (v57 < 0) ^ v55;
                      uint64_t v51 = &v24[v57];
                      if (v56) {
                        uint64_t v51 = &v53[v33];
                      }
                      long long v52 = v53;
                    }
                    while (v51 != v48);
                    *uint64_t v53 = v49;
                  }
                  while (v48 != v24);
                }
                a2 = &v24[v30 >> 3];
              }
            }
          }
          uint64_t v20 = v107;
          uint64_t v29 = v101;
          uint64_t v22 = v104;
        }
        goto LABEL_60;
      }
    }
    else
    {
      if (v107 >= 0) {
        uint64_t v21 = v107;
      }
      else {
        uint64_t v21 = v107 + 1;
      }
      uint64_t v22 = v21 >> 1;
      uint64_t v23 = &a2[v21 >> 1];
      unint64_t v24 = a2;
      if ((char *)a2 - (char *)a1 != v15)
      {
        uint64_t v103 = v21 >> 1;
        uint64_t v100 = a8;
        unint64_t v25 = (uint64_t)((char *)a2 - (char *)a1 - v15) >> 3;
        unint64_t v24 = &a1[v15 / 8];
        do
        {
          uint64_t v26 = &v24[v25 >> 1];
          uint64_t v28 = *v26;
          uint64_t v27 = v26 + 1;
          if (sub_1C49CBBA4((uint64_t)a4, *v23, v28))
          {
            v25 >>= 1;
          }
          else
          {
            unint64_t v24 = v27;
            v25 += ~(v25 >> 1);
          }
        }
        while (v25);
        a8 = v100;
        uint64_t v20 = v107;
        uint64_t v22 = v103;
      }
      uint64_t v29 = (uint64_t)((char *)v24 - (char *)a1 - v15) >> 3;
      if (v24 != a2) {
        goto LABEL_22;
      }
    }
    a2 = v23;
LABEL_60:
    a5 = -v29 - v16;
    uint64_t v58 = v20 - v22;
    if (v29 + v22 >= v20 - (v29 + v22) - v16)
    {
      double v60 = a2;
      uint64_t v61 = a5;
      a5 = v29;
      uint64_t v62 = v22;
      sub_1C49CC054(a2, v23, v106, a4, v61, v20 - v22, __src, a8);
      a2 = v24;
      a7 = __src;
      a3 = v60;
      a1 = (uint64_t *)((char *)a1 + v15);
      uint64_t v107 = v62;
      if (!v62) {
        return result;
      }
    }
    else
    {
      uint64_t v59 = v24;
      a7 = __src;
      sub_1C49CC054(&a1[v15 / 8], v59, a2, a4, v29, v22, __src, a8);
      a1 = a2;
      a2 = v23;
      a3 = v106;
      uint64_t v107 = v58;
      if (!v58) {
        return result;
      }
    }
  }
  if (a5 <= v107)
  {
    if (a1 != a2)
    {
      unint64_t v73 = (char *)a2 - (char *)a1 - 8;
      double v74 = a7;
      uint64_t v75 = a1;
      if (v73 < 0x18) {
        goto LABEL_115;
      }
      double v74 = a7;
      uint64_t v75 = a1;
      if ((unint64_t)((char *)a7 - (char *)a1) < 0x20) {
        goto LABEL_115;
      }
      uint64_t v76 = (v73 >> 3) + 1;
      uint64_t v77 = v76 & 0x3FFFFFFFFFFFFFFCLL;
      double v74 = &a7[v77];
      uint64_t v75 = &a1[v77];
      BOOL v78 = (__n128 *)(a1 + 2);
      uint64_t v79 = (__n128 *)(a7 + 2);
      uint64_t v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __n128 result = v78[-1];
        __n128 v81 = *v78;
        v79[-1] = result;
        __n128 *v79 = v81;
        v78 += 2;
        v79 += 2;
        v80 -= 4;
      }
      while (v80);
      if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_115:
        do
        {
          uint64_t v82 = *v75++;
          *v74++ = v82;
        }
        while (v75 != a2);
      }
      if (v74 != a7)
      {
        while (a2 != a3)
        {
          unsigned int v83 = sub_1C49CBBA4((uint64_t)a4, *a2, *a7);
          if (v83) {
            uint64_t v84 = a2;
          }
          else {
            uint64_t v84 = a7;
          }
          a2 += v83;
          a7 += v83 ^ 1;
          *a1++ = *v84;
          if (a7 == v74) {
            return result;
          }
        }
        memmove(a1, a7, (char *)v74 - (char *)a7);
      }
    }
    return result;
  }
  int64_t v63 = (char *)a3 - (char *)a2;
  if (a3 == a2) {
    return result;
  }
  unint64_t v64 = v63 - 8;
  if ((unint64_t)(v63 - 8) < 0x18)
  {
    uint64_t v65 = a7;
    double v66 = a2;
    do
    {
LABEL_92:
      uint64_t v86 = *v66++;
      *v65++ = v86;
    }
    while (v66 != a3);
    goto LABEL_93;
  }
  uint64_t v65 = a7;
  double v66 = a2;
  if ((unint64_t)((char *)a7 - (char *)a2) < 0x20) {
    goto LABEL_92;
  }
  uint64_t v67 = (v64 >> 3) + 1;
  uint64_t v68 = v67 & 0x3FFFFFFFFFFFFFFCLL;
  uint64_t v65 = &a7[v68];
  double v66 = &a2[v68];
  double v69 = (__n128 *)(a2 + 2);
  uint64_t v70 = (__n128 *)(a7 + 2);
  uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    __n128 result = v69[-1];
    __n128 v72 = *v69;
    v70[-1] = result;
    __n128 *v70 = v72;
    v69 += 2;
    v70 += 2;
    v71 -= 4;
  }
  while (v71);
  if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_92;
  }
LABEL_93:
  if (v65 != a7)
  {
    uint64_t v87 = a3;
    while (a2 != a1)
    {
      int v88 = sub_1C49CBBA4((uint64_t)a4, *(v65 - 1), *(a2 - 1));
      if (v88) {
        uint64_t v89 = a2;
      }
      else {
        uint64_t v89 = v65;
      }
      if (v88) {
        --a2;
      }
      else {
        --v65;
      }
      *--a3 = *(v89 - 1);
      --v87;
      if (v65 == a7) {
        return result;
      }
    }
    unint64_t v90 = (char *)v65 - (char *)a7 - 8;
    if (v90 < 0x58 || (unint64_t)((char *)v65 - (char *)v87) < 0x20)
    {
      uint64_t v91 = v65;
      uint64_t v92 = a3;
      goto LABEL_107;
    }
    uint64_t v95 = 0;
    uint64_t v96 = (v90 >> 3) + 1;
    uint64_t v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v91 = &v65[v97 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v92 = &a3[v97 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v98 = v96 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      __n128 result = *(__n128 *)&v65[v95 - 2];
      uint64_t v99 = &a3[v95];
      *((_OWORD *)v99 - 2) = *(_OWORD *)&v65[v95 - 4];
      *((__n128 *)v99 - 1) = result;
      v95 -= 4;
      v98 -= 4;
    }
    while (v98);
    if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_107:
      double v93 = v92 - 1;
      do
      {
        uint64_t v94 = *--v91;
        *v93-- = v94;
      }
      while (v91 != a7);
    }
  }
  return result;
}

void sub_1C49CC6A8(unint64_t a1, CGRect *a2, uint64_t a3, char a4)
{
  while (2)
  {
    double v10 = (CGRect *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                v153.origin.CGFloat x = a2[-1].origin.x;
                v153.origin.CGFloat y = a2[-1].origin.y;
                uint64_t v49 = a2 - 1;
                v153.size.CGFloat width = v49->size.width;
                v153.size.CGFloat height = v49->size.height;
                double MinX = CGRectGetMinX(v153);
                if (MinX < CGRectGetMinX(*(CGRect *)a1))
                {
                  CGPoint v126 = *(CGPoint *)a1;
                  CGSize v131 = *(CGSize *)(a1 + 16);
                  CGSize size = v49->size;
                  *(CGPoint *)a1 = v49->origin;
                  *(CGSize *)(a1 + 16) = size;
                  v49->CGPoint origin = v126;
                  v49->CGSize size = v131;
                }
                break;
              case 3:
                sub_1C49CD1E8((CGRect *)a1, (CGPoint *)(a1 + 32), &a2[-1].origin);
                break;
              case 4:
                sub_1C49CD548((CGRect *)a1, (CGPoint *)(a1 + 32), (CGPoint *)(a1 + 64), &a2[-1].origin);
                break;
              case 5:
                sub_1C49CD0C4((CGRect *)a1, (CGPoint *)(a1 + 32), (CGPoint *)(a1 + 64), (CGPoint *)(a1 + 96), &a2[-1].origin);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 767)
          {
            long long v52 = (CGRect *)(a1 + 32);
            BOOL v54 = (CGRect *)a1 == a2 || v52 == a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 0;
                char v56 = (CGRect *)a1;
                do
                {
                  p_CGFloat x = &v52->origin.x;
                  double v59 = CGRectGetMinX(v56[1]);
                  if (v59 < CGRectGetMinX(*v56))
                  {
                    CGFloat v60 = *p_x;
                    CGFloat y = v56[1].origin.y;
                    CGFloat width = v56[1].size.width;
                    uint64_t v63 = v55;
                    CGFloat height = v56[1].size.height;
                    do
                    {
                      uint64_t v65 = a1 + v63;
                      long long v66 = *(_OWORD *)(a1 + v63 + 16);
                      *(_OWORD *)(v65 + 32) = *(_OWORD *)(a1 + v63);
                      *(_OWORD *)(v65 + 48) = v66;
                      if (!v63)
                      {
                        uint64_t v57 = (CGFloat *)a1;
                        goto LABEL_74;
                      }
                      v154.origin.CGFloat x = v60;
                      v154.origin.CGFloat y = y;
                      v154.size.CGFloat width = width;
                      v154.size.CGFloat height = height;
                      double v67 = CGRectGetMinX(v154);
                      v63 -= 32;
                    }
                    while (v67 < CGRectGetMinX(*(CGRect *)(v65 - 32)));
                    uint64_t v57 = (CGFloat *)(a1 + v63 + 32);
LABEL_74:
                    *uint64_t v57 = v60;
                    v57[1] = y;
                    v57[2] = width;
                    v57[3] = height;
                  }
                  long long v52 = (CGRect *)(p_x + 4);
                  v55 += 32;
                  char v56 = (CGRect *)p_x;
                }
                while (p_x + 4 != (CGFloat *)a2);
              }
            }
            else if (!v54)
            {
              do
              {
                int v109 = (void *)&v52->origin.x;
                double v110 = CGRectGetMinX(*(CGRect *)(a1 + 32));
                if (v110 < CGRectGetMinX(*(CGRect *)a1))
                {
                  uint64_t v111 = *v109;
                  uint64_t v112 = *(void *)(a1 + 40);
                  uint64_t v113 = *(void *)(a1 + 48);
                  uint64_t v114 = v109;
                  uint64_t v115 = *(void *)(a1 + 56);
                  do
                  {
                    long long v117 = *(v114 - 1);
                    *uint64_t v114 = *(v114 - 2);
                    v114[1] = v117;
                    uint64_t v118 = v111;
                    *(void *)&long long v117 = v112;
                    uint64_t v119 = v113;
                    uint64_t v120 = v115;
                    double v121 = CGRectGetMinX(*(CGRect *)((char *)&v117 - 8));
                    CGRect v157 = *(CGRect *)((unsigned char *)v114 - 2);
                    uint64_t v116 = v114 - 2;
                    v114 -= 2;
                  }
                  while (v121 < CGRectGetMinX(v157));
                  *uint64_t v116 = v111;
                  v116[1] = v112;
                  v116[2] = v113;
                  v116[3] = v115;
                }
                long long v52 = (CGRect *)(v109 + 4);
                a1 = (unint64_t)v109;
              }
              while (v109 + 4 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if ((CGRect *)a1 != a2)
            {
              BOOL v122 = a2;
              int64_t v68 = (unint64_t)(v12 - 2) >> 1;
              int64_t v69 = v68;
              do
              {
                int64_t v70 = v69;
                if (v68 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  unint64_t v72 = a1 + 32 * v71;
                  if (2 * v69 + 2 < v12)
                  {
                    double v73 = CGRectGetMinX(*(CGRect *)v72);
                    if (v73 < CGRectGetMinX(*(CGRect *)(v72 + 32)))
                    {
                      v72 += 32;
                      uint64_t v71 = 2 * v70 + 2;
                    }
                  }
                  double v74 = (CGRect *)(a1 + 32 * v70);
                  double v75 = CGRectGetMinX(*(CGRect *)v72);
                  if (v75 >= CGRectGetMinX(*v74))
                  {
                    CGFloat x = v74->origin.x;
                    CGFloat v77 = v74->origin.y;
                    CGFloat v78 = v74->size.width;
                    CGFloat v79 = v74->size.height;
                    do
                    {
                      __n128 v81 = (_OWORD *)&v74->origin.x;
                      double v74 = (CGRect *)v72;
                      long long v82 = *(_OWORD *)(v72 + 16);
                      *__n128 v81 = *(_OWORD *)v72;
                      v81[1] = v82;
                      if (v68 < v71) {
                        break;
                      }
                      uint64_t v83 = 2 * v71;
                      uint64_t v71 = (2 * v71) | 1;
                      unint64_t v72 = a1 + 32 * v71;
                      uint64_t v84 = v83 + 2;
                      if (v83 + 2 < v12)
                      {
                        double v85 = CGRectGetMinX(*(CGRect *)v72);
                        if (v85 < CGRectGetMinX(*(CGRect *)(v72 + 32)))
                        {
                          v72 += 32;
                          uint64_t v71 = v84;
                        }
                      }
                      double v80 = CGRectGetMinX(*(CGRect *)v72);
                      v155.origin.CGFloat x = x;
                      v155.origin.CGFloat y = v77;
                      v155.size.CGFloat width = v78;
                      v155.size.CGFloat height = v79;
                    }
                    while (v80 >= CGRectGetMinX(v155));
                    v74->origin.CGFloat x = x;
                    v74->origin.CGFloat y = v77;
                    v74->size.CGFloat width = v78;
                    v74->size.CGFloat height = v79;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v86 = (unint64_t)v11 >> 5;
              uint64_t v87 = (_OWORD *)&v122->origin.x;
              do
              {
                uint64_t v89 = v87;
                uint64_t v90 = 0;
                long long v127 = *(_OWORD *)a1;
                long long v132 = *(_OWORD *)(a1 + 16);
                unint64_t v91 = a1;
                do
                {
                  double v93 = (_OWORD *)v91;
                  v91 += 32 * v90 + 32;
                  uint64_t v94 = 2 * v90;
                  uint64_t v90 = (2 * v90) | 1;
                  uint64_t v95 = v94 + 2;
                  if (v94 + 2 < v86)
                  {
                    double v96 = CGRectGetMinX(*(CGRect *)v91);
                    if (v96 < CGRectGetMinX(*(CGRect *)(v91 + 32)))
                    {
                      v91 += 32;
                      uint64_t v90 = v95;
                    }
                  }
                  long long v92 = *(_OWORD *)(v91 + 16);
                  *double v93 = *(_OWORD *)v91;
                  v93[1] = v92;
                }
                while (v90 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
                v87 -= 2;
                if ((_OWORD *)v91 == v89 - 2)
                {
                  *(_OWORD *)unint64_t v91 = v127;
                  *(_OWORD *)(v91 + 16) = v132;
                }
                else
                {
                  long long v97 = *(v89 - 1);
                  *(_OWORD *)unint64_t v91 = *v87;
                  *(_OWORD *)(v91 + 16) = v97;
                  _OWORD *v87 = v127;
                  *(v89 - 1) = v132;
                  uint64_t v98 = v91 - a1 + 32;
                  if (v98 >= 33)
                  {
                    unint64_t v99 = (((unint64_t)v98 >> 5) - 2) >> 1;
                    unint64_t v100 = a1 + 32 * v99;
                    double v101 = CGRectGetMinX(*(CGRect *)v100);
                    if (v101 < CGRectGetMinX(*(CGRect *)v91))
                    {
                      CGFloat v102 = *(double *)v91;
                      CGFloat v103 = *(double *)(v91 + 8);
                      CGFloat v104 = *(double *)(v91 + 16);
                      CGFloat v105 = *(double *)(v91 + 24);
                      do
                      {
                        double v106 = (_OWORD *)v91;
                        unint64_t v91 = v100;
                        long long v107 = *(_OWORD *)(v100 + 16);
                        *double v106 = *(_OWORD *)v100;
                        v106[1] = v107;
                        if (!v99) {
                          break;
                        }
                        unint64_t v99 = (v99 - 1) >> 1;
                        unint64_t v100 = a1 + 32 * v99;
                        double v108 = CGRectGetMinX(*(CGRect *)v100);
                        v156.origin.CGFloat x = v102;
                        v156.origin.CGFloat y = v103;
                        v156.size.CGFloat width = v104;
                        v156.size.CGFloat height = v105;
                      }
                      while (v108 < CGRectGetMinX(v156));
                      *(CGFloat *)unint64_t v91 = v102;
                      *(CGFloat *)(v91 + 8) = v103;
                      *(CGFloat *)(v91 + 16) = v104;
                      *(CGFloat *)(v91 + 24) = v105;
                    }
                  }
                }
              }
              while (v86-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = a1 + 32 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 <= 0x1000) {
            break;
          }
          sub_1C49CD1E8((CGRect *)a1, (CGPoint *)v14, &a2[-1].origin);
          uint64_t v15 = 32 * v13;
          sub_1C49CD1E8((CGRect *)(a1 + 32), (CGPoint *)(v15 + a1 - 32), &a2[-2].origin);
          sub_1C49CD1E8((CGRect *)(a1 + 64), (CGPoint *)(a1 + 32 + v15), &a2[-3].origin);
          sub_1C49CD1E8((CGRect *)(v15 + a1 - 32), (CGPoint *)v14, (CGPoint *)(a1 + 32 + v15));
          long long v123 = *(_OWORD *)a1;
          long long v128 = *(_OWORD *)(a1 + 16);
          long long v16 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 16) = v16;
          *(_OWORD *)unint64_t v14 = v123;
          *(_OWORD *)(v14 + 16) = v128;
          --a3;
          if (a4) {
            goto LABEL_11;
          }
LABEL_10:
          double v17 = CGRectGetMinX(*(CGRect *)(a1 - 32));
          if (v17 < CGRectGetMinX(*(CGRect *)a1)) {
            goto LABEL_11;
          }
          CGFloat v34 = *(double *)a1;
          CGFloat v35 = *(double *)(a1 + 8);
          CGFloat v36 = *(double *)(a1 + 16);
          CGFloat v37 = *(double *)(a1 + 24);
          v143.origin.CGFloat x = *(CGFloat *)a1;
          v143.origin.CGFloat y = v35;
          v143.size.CGFloat width = v36;
          v143.size.CGFloat height = v37;
          double v38 = CGRectGetMinX(v143);
          if (v38 >= CGRectGetMinX(a2[-1]))
          {
            uint64_t v40 = (CGRect *)(a1 + 32);
            do
            {
              double v10 = v40;
              if (v40 >= a2) {
                break;
              }
              v146.origin.CGFloat x = v34;
              v146.origin.CGFloat y = v35;
              v146.size.CGFloat width = v36;
              v146.size.CGFloat height = v37;
              double v41 = CGRectGetMinX(v146);
              CGFloat v42 = CGRectGetMinX(*v10);
              uint64_t v40 = v10 + 1;
            }
            while (v41 >= v42);
          }
          else
          {
            double v10 = (CGRect *)a1;
            do
            {
              v144.origin.CGFloat x = v34;
              v144.origin.CGFloat y = v35;
              v144.size.CGFloat width = v36;
              v144.size.CGFloat height = v37;
              double v39 = CGRectGetMinX(v144);
              v145.origin.CGFloat x = v10[1].origin.x;
              v145.origin.CGFloat y = v10[1].origin.y;
              ++v10;
              v145.size.CGFloat width = v10->size.width;
              v145.size.CGFloat height = v10->size.height;
            }
            while (v39 >= CGRectGetMinX(v145));
          }
          uint64_t v43 = a2;
          if (v10 < a2)
          {
            uint64_t v43 = a2;
            do
            {
              v147.origin.CGFloat x = v34;
              v147.origin.CGFloat y = v35;
              v147.size.CGFloat width = v36;
              v147.size.CGFloat height = v37;
              double v44 = CGRectGetMinX(v147);
              v148.origin.CGFloat x = v43[-1].origin.x;
              v148.origin.CGFloat y = v43[-1].origin.y;
              --v43;
              v148.size.CGFloat width = v43->size.width;
              v148.size.CGFloat height = v43->size.height;
            }
            while (v44 < CGRectGetMinX(v148));
          }
          while (v10 < v43)
          {
            CGPoint origin = v10->origin;
            CGSize v130 = v10->size;
            CGSize v45 = v43->size;
            v10->CGPoint origin = v43->origin;
            v10->CGSize size = v45;
            v43->CGPoint origin = origin;
            v43->CGSize size = v130;
            do
            {
              v149.origin.CGFloat x = v34;
              v149.origin.CGFloat y = v35;
              v149.size.CGFloat width = v36;
              v149.size.CGFloat height = v37;
              double v46 = CGRectGetMinX(v149);
              v150.origin.CGFloat x = v10[1].origin.x;
              v150.origin.CGFloat y = v10[1].origin.y;
              ++v10;
              v150.size.CGFloat width = v10->size.width;
              v150.size.CGFloat height = v10->size.height;
            }
            while (v46 >= CGRectGetMinX(v150));
            do
            {
              v151.origin.CGFloat x = v34;
              v151.origin.CGFloat y = v35;
              v151.size.CGFloat width = v36;
              v151.size.CGFloat height = v37;
              double v47 = CGRectGetMinX(v151);
              v152.origin.CGFloat x = v43[-1].origin.x;
              v152.origin.CGFloat y = v43[-1].origin.y;
              --v43;
              v152.size.CGFloat width = v43->size.width;
              v152.size.CGFloat height = v43->size.height;
            }
            while (v47 < CGRectGetMinX(v152));
          }
          BOOL v4 = (unint64_t)&v10[-1] >= a1;
          BOOL v5 = &v10[-1] == (CGRect *)a1;
          if (&v10[-1] != (CGRect *)a1)
          {
            CGSize v48 = v10[-1].size;
            *(CGPoint *)a1 = v10[-1].origin;
            *(CGSize *)(a1 + 16) = v48;
          }
          a4 = 0;
          v10[-1].origin.CGFloat x = v34;
          v10[-1].origin.CGFloat y = v35;
          v10[-1].size.CGFloat width = v36;
          v10[-1].size.CGFloat height = v37;
        }
        sub_1C49CD1E8((CGRect *)v14, (CGPoint *)a1, &a2[-1].origin);
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_10;
        }
LABEL_11:
        uint64_t v18 = 0;
        CGFloat v19 = *(double *)a1;
        CGFloat v20 = *(double *)(a1 + 8);
        CGFloat v21 = *(double *)(a1 + 16);
        CGFloat v22 = *(double *)(a1 + 24);
        do
        {
          double v23 = CGRectGetMinX(*(CGRect *)(a1 + v18 + 32));
          v134.origin.CGFloat x = v19;
          v134.origin.CGFloat y = v20;
          v134.size.CGFloat width = v21;
          v134.size.CGFloat height = v22;
          v18 += 32;
        }
        while (v23 < CGRectGetMinX(v134));
        unint64_t v24 = a1 + v18;
        unint64_t v25 = a2;
        if (v18 == 32)
        {
          unint64_t v25 = a2;
          do
          {
            if (v24 >= (unint64_t)v25) {
              break;
            }
            v137.origin.CGFloat x = v25[-1].origin.x;
            v137.origin.CGFloat y = v25[-1].origin.y;
            --v25;
            v137.size.CGFloat width = v25->size.width;
            v137.size.CGFloat height = v25->size.height;
            double v27 = CGRectGetMinX(v137);
            v138.origin.CGFloat x = v19;
            v138.origin.CGFloat y = v20;
            v138.size.CGFloat width = v21;
            v138.size.CGFloat height = v22;
          }
          while (v27 >= CGRectGetMinX(v138));
        }
        else
        {
          do
          {
            v135.origin.CGFloat x = v25[-1].origin.x;
            v135.origin.CGFloat y = v25[-1].origin.y;
            --v25;
            v135.size.CGFloat width = v25->size.width;
            v135.size.CGFloat height = v25->size.height;
            double v26 = CGRectGetMinX(v135);
            v136.origin.CGFloat x = v19;
            v136.origin.CGFloat y = v20;
            v136.size.CGFloat width = v21;
            v136.size.CGFloat height = v22;
          }
          while (v26 >= CGRectGetMinX(v136));
        }
        double v10 = (CGRect *)(a1 + v18);
        if (v24 < (unint64_t)v25)
        {
          p_CGPoint origin = &v25->origin;
          do
          {
            CGPoint v124 = v10->origin;
            CGSize v129 = v10->size;
            CGSize v29 = (CGSize)p_origin[1];
            v10->CGPoint origin = *p_origin;
            v10->CGSize size = v29;
            CGPoint *p_origin = v124;
            p_origin[1] = (CGPoint)v129;
            do
            {
              v139.origin.CGFloat x = v10[1].origin.x;
              v139.origin.CGFloat y = v10[1].origin.y;
              ++v10;
              v139.size.CGFloat width = v10->size.width;
              v139.size.CGFloat height = v10->size.height;
              double v30 = CGRectGetMinX(v139);
              v140.origin.CGFloat x = v19;
              v140.origin.CGFloat y = v20;
              v140.size.CGFloat width = v21;
              v140.size.CGFloat height = v22;
            }
            while (v30 < CGRectGetMinX(v140));
            do
            {
              v141.origin.CGFloat x = p_origin[-2].x;
              v141.origin.CGFloat y = p_origin[-2].y;
              p_origin -= 2;
              v141.size.CGFloat width = p_origin[1].x;
              v141.size.CGFloat height = p_origin[1].y;
              double v31 = CGRectGetMinX(v141);
              v142.origin.CGFloat x = v19;
              v142.origin.CGFloat y = v20;
              v142.size.CGFloat width = v21;
              v142.size.CGFloat height = v22;
            }
            while (v31 >= CGRectGetMinX(v142));
          }
          while (v10 < (CGRect *)p_origin);
        }
        if (&v10[-1] != (CGRect *)a1)
        {
          CGSize v32 = v10[-1].size;
          *(CGPoint *)a1 = v10[-1].origin;
          *(CGSize *)(a1 + 16) = v32;
        }
        v10[-1].origin.CGFloat x = v19;
        v10[-1].origin.CGFloat y = v20;
        v10[-1].size.CGFloat width = v21;
        v10[-1].size.CGFloat height = v22;
        if (v24 >= (unint64_t)v25) {
          break;
        }
LABEL_30:
        sub_1C49CC6A8(a1, &v10[-1], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v33 = sub_1C49CD320((long long *)a1, v10 - 1);
      if (sub_1C49CD320((long long *)v10, a2)) {
        break;
      }
      if (!v33) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 1;
    if (!v33) {
      continue;
    }
    break;
  }
}