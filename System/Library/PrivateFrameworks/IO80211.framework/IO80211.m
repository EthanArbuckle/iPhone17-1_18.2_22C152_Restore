uint64_t Apple80211CopyCurrentNetwork()
{
  return Apple80211CopyValue();
}

uint64_t Apple80211CalculateShortSSIDCopy(const __CFData *a1, CFTypeRef *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294963396;
  }
  uint64_t v8 = 0;
  CFDataGetBytePtr(a1);
  CFDataGetLength(a1);
  if (CNCRC()) {
    return 4294963394;
  }
  int valuePtr = v8;
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  if (!v4) {
    return 4294963395;
  }
  CFNumberRef v5 = v4;
  if (a2) {
    *a2 = CFRetain(v4);
  }
  CFRelease(v5);
  return 0;
}

uint64_t _addScanResultToList(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFArray *a4, CFTypeRef cf, int a6, int a7, int a8, unsigned __int8 a9, char a10, char a11, char a12)
{
  uint64_t v194 = *MEMORY[0x263EF8340];
  CFIndex idx = 0xAAAAAAAAAAAAAAAALL;
  if (!a2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      CFNumberRef cfa = 0;
      CFDataRef v28 = 0;
      CFStringRef v26 = 0;
      CFStringRef v32 = 0;
      v143 = 0;
      v154 = 0;
      CFMutableArrayRef v30 = 0;
      v20 = 0;
      v168 = 0;
      uint64_t v120 = 4294963396;
      goto LABEL_336;
    }
    return 4294963396;
  }
  char v182 = *(unsigned char *)(a1 + 99);
  v18 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (cf) {
    Mutable = (__CFDictionary *)CFRetain(cf);
  }
  else {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  }
  v20 = Mutable;
  if (!Mutable)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      CFNumberRef cfa = 0;
      CFDataRef v28 = 0;
      CFStringRef v26 = 0;
      CFStringRef v32 = 0;
      v143 = 0;
      v154 = 0;
      CFMutableArrayRef v30 = 0;
      v20 = 0;
      v168 = 0;
      uint64_t v120 = 4294963395;
      goto LABEL_336;
    }
    return 4294963395;
  }
  v183 = a3;
  int v173 = a7;
  int v174 = a6;
  uint64_t v176 = a1;
  if ((v182 & 0x40) == 0)
  {
    int v179 = 0;
LABEL_9:
    if (*(unsigned char *)(a2 + 96) && *(unsigned char *)(a2 + 97))
    {
      uint64_t v22 = 0;
      CFAllocatorRef v23 = *v18;
      char v24 = 1;
      do
      {
        CFStringRef v25 = CFStringCreateWithBytes(v23, (const UInt8 *)(a2 + 97), *(unsigned __int8 *)(a2 + 96), dword_210753DD0[v22], 0);
        CFStringRef v26 = v25;
        if ((v24 & 1) == 0) {
          break;
        }
        char v24 = 0;
        uint64_t v22 = 1;
      }
      while (!v25);
      CFDataRef v27 = CFDataCreate(v23, (const UInt8 *)(a2 + 97), *(unsigned __int8 *)(a2 + 96));
      a3 = v183;
      CFNumberRef cfa = 0;
      if (!v27)
      {
        CFMutableArrayRef v30 = 0;
        uint64_t v120 = 4294963395;
        CFDataRef v28 = 0;
        CFStringRef v32 = 0;
        v143 = 0;
        v175 = 0;
        goto LABEL_328;
      }
      CFDataRef v28 = v27;
    }
    else
    {
      CFStringRef v26 = 0;
      CFDataRef v28 = 0;
      CFNumberRef cfa = 0;
    }
    goto LABEL_19;
  }
  unsigned int v21 = *(unsigned __int8 *)(a2 + 136);
  int v179 = (v21 >> 2) & 1;
  if ((v21 & 8) == 0) {
    goto LABEL_9;
  }
  CFNumberRef v29 = CFNumberCreate(*v18, kCFNumberSInt32Type, (const void *)(a2 + 97));
  CFMutableArrayRef v30 = 0;
  if (!v29)
  {
    uint64_t v120 = 4294963395;
    CFDataRef v28 = 0;
    CFStringRef v26 = 0;
    CFStringRef v32 = 0;
    v143 = 0;
    v175 = 0;
    CFNumberRef cfa = 0;
    goto LABEL_328;
  }
  CFStringRef v26 = 0;
  CFDataRef v28 = 0;
  CFNumberRef cfa = v29;
LABEL_19:
  v31 = ether_ntoa((const ether_addr *)(a2 + 28));
  if (!v31)
  {
    CFStringRef v32 = 0;
    goto LABEL_353;
  }
  CFAllocatorRef allocator = *v18;
  CFStringRef v32 = CFStringCreateWithCString(*v18, v31, 0x8000100u);
  if (!v32)
  {
LABEL_353:
    v143 = 0;
    v175 = 0;
    CFMutableArrayRef v30 = 0;
    uint64_t v120 = 4294963395;
    goto LABEL_328;
  }
  CFArrayRef theArray = a4;
  CFDataRef cf2 = v28;
  CFStringRef v177 = v26;
  if (!a3 || (CFIndex Count = CFArrayGetCount(a3), Count < 1))
  {
    CFIndex v34 = 0;
    goto LABEL_45;
  }
  CFIndex v34 = Count;
  v172 = v20;
  CFIndex v35 = 0;
  v36 = (const void *)*MEMORY[0x263EFFB40];
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v35);
    if (!ValueAtIndex) {
      goto LABEL_42;
    }
    CFDictionaryRef v38 = ValueAtIndex;
    Value = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
    v40 = CFDictionaryGetValue(v38, @"SSID");
    if ((v182 & 0x40) != 0)
    {
      unint64_t v41 = (unint64_t)CFDictionaryGetValue(v38, @"SHORT_SSID");
      int v42 = CFDictionaryGetValue(v38, @"SCAN_RESULT_FROM_FILS_DISC_FRAME") == v36;
      if (!Value) {
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v41 = 0;
      int v42 = 0;
      if (!Value) {
        goto LABEL_42;
      }
    }
    if (!CFEqual(Value, v32)) {
      goto LABEL_42;
    }
    if (cf2 && v40)
    {
      if (!CFEqual(v40, cf2)) {
        goto LABEL_42;
      }
    }
    else if (cf2 || v40)
    {
      goto LABEL_42;
    }
    if (v42 == v179)
    {
      if (cfa && v41)
      {
        if (CFEqual((CFTypeRef)v41, cfa)) {
          goto LABEL_325;
        }
      }
      else if (!((unint64_t)cfa | v41))
      {
LABEL_325:
        v143 = 0;
        v175 = 0;
        CFMutableArrayRef v30 = 0;
        CFIndex idx = v35;
        uint64_t v120 = 4294963394;
        v20 = v172;
        goto LABEL_326;
      }
    }
LABEL_42:
    ++v35;
    a3 = v183;
  }
  while (v34 != v35);
  v20 = v172;
  CFStringRef v26 = v177;
  a4 = theArray;
  CFDataRef v28 = cf2;
LABEL_45:
  CFIndex idx = v34;
  if (!a12 && v179)
  {
    uint64_t v120 = 0;
    v143 = 0;
    v154 = 0;
    CFMutableArrayRef v30 = 0;
    goto LABEL_307;
  }
  int v43 = 0;
  CFMutableArrayRef v44 = 0;
  if (!v174 || !v28) {
    goto LABEL_99;
  }
  if (!a4)
  {
    CFMutableArrayRef v44 = 0;
    int v43 = 0;
    CFIndex idx = 0;
    goto LABEL_99;
  }
  CFIndex v45 = CFArrayGetCount(a4);
  CFIndex idx = 0;
  if (v45 < 1)
  {
    CFMutableArrayRef v44 = 0;
    int v43 = 0;
    goto LABEL_99;
  }
  CFIndex v46 = v45;
  CFMutableArrayRef MutableCopy = 0;
  CFIndex v48 = 0;
  while (2)
  {
    CFDictionaryRef v49 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v48);
    if (!v49) {
      goto LABEL_74;
    }
    CFDictionaryRef v50 = v49;
    v51 = CFDictionaryGetValue(v49, @"SSID");
    if (!v51) {
      goto LABEL_74;
    }
    if (!CFEqual(v28, v51)) {
      goto LABEL_74;
    }
    __int16 valuePtr = -21846;
    CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue(v50, @"AP_MODE");
    if (!v52 || !CFNumberGetValue(v52, kCFNumberSInt16Type, &valuePtr)) {
      goto LABEL_74;
    }
    if (valuePtr == 2)
    {
      if ((*(_WORD *)(a2 + 26) & 1) == 0) {
        goto LABEL_74;
      }
    }
    else if (valuePtr == 1 && (*(_WORD *)(a2 + 26) & 2) == 0)
    {
      goto LABEL_74;
    }
    if (a8)
    {
      int v53 = *(unsigned __int16 *)(a2 + 138);
      if ((v53 - 3) <= 0x7FD)
      {
        int v58 = 0;
        char v59 = 0;
        v60 = (unsigned __int8 *)(a2 + 140);
        do
        {
          unsigned int v61 = v53 - 2;
          uint64_t v62 = v60[1];
          BOOL v64 = v61 >= v62;
          int v53 = v61 - v62;
          if (!v64) {
            break;
          }
          int v63 = *v60;
          if (v63 == 11)
          {
            if (v62 >= 5)
            {
              if (*((__int16 *)v60 + 1) != -1) {
                break;
              }
              int v58 = 1;
            }
          }
          else
          {
            BOOL v64 = v63 == 127 && v62 >= 4;
            if (v64 && (v60[4] & 8) != 0) {
              char v59 = 1;
            }
          }
          if (v59 && v58) {
            goto LABEL_74;
          }
          uint64_t v65 = (uint64_t)&v60[v62 + 2];
          if (v53 > 0) {
            v60 = (unsigned __int8 *)v65;
          }
        }
        while (v53 > 2);
      }
    }
    if (a10)
    {
      CFArrayRef v54 = (const __CFArray *)CFDictionaryGetValue(v50, @"SCAN_BSSID_LIST");
      if (v54)
      {
        CFArrayRef v55 = v54;
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(allocator, 0, v55);
      }
      CFDataRef v28 = cf2;
    }
    CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(v50, @"RSSI");
    if (!v56
      || (__int16 v187 = -21846, !CFNumberGetValue(v56, kCFNumberSInt16Type, &v187))
      || (CFNumberRef v57 = (const __CFNumber *)CFDictionaryGetValue(v50, @"CHANNEL_FLAGS")) == 0
      || (*(_DWORD *)buf = -1431655766, !CFNumberGetValue(v57, kCFNumberSInt32Type, buf)))
    {
LABEL_74:
      CFIndex v48 = idx + 1;
      CFIndex idx = v48;
      if (v48 < v46) {
        continue;
      }
      int v43 = 0;
LABEL_96:
      CFMutableArrayRef v44 = MutableCopy;
      goto LABEL_99;
    }
    break;
  }
  int v169 = *(_DWORD *)(a2 + 12);
  if ((buf[1] & 0x20) != 0)
  {
    if ((v169 & 0x2000) == 0)
    {
LABEL_344:
      CFArrayRemoveValueAtIndex(theArray, idx);
      int v43 = 0;
      goto LABEL_96;
    }
LABEL_343:
    if (v187 >= *(__int16 *)(a2 + 22)) {
      goto LABEL_345;
    }
    goto LABEL_344;
  }
  if ((v169 & 0x2000) == 0) {
    goto LABEL_343;
  }
LABEL_345:
  if (MutableCopy)
  {
    CFArrayAppendValue(MutableCopy, v32);
    CFDictionarySetValue(v50, @"SCAN_BSSID_LIST", MutableCopy);
    CFRelease(MutableCopy);
  }
  CFMutableArrayRef v44 = 0;
  int v43 = 1;
LABEL_99:
  CFAllocatorRef v66 = allocator;
  CFNumberRef v67 = CFNumberCreate(allocator, kCFNumberSInt32Type, (const void *)(a2 + 8));
  v175 = v44;
  if (!v67) {
    goto LABEL_337;
  }
  CFNumberRef v68 = v67;
  CFDictionarySetValue(v20, @"CHANNEL", v67);
  CFRelease(v68);
  CFNumberRef v69 = CFNumberCreate(allocator, kCFNumberSInt32Type, (const void *)(a2 + 12));
  if (!v69) {
    goto LABEL_337;
  }
  CFNumberRef v70 = v69;
  CFDictionarySetValue(v20, @"CHANNEL_FLAGS", v69);
  CFRelease(v70);
  if (!*(_WORD *)(a2 + 16)) {
    goto LABEL_105;
  }
  CFNumberRef v71 = CFNumberCreate(allocator, kCFNumberSInt16Type, (const void *)(a2 + 18));
  if (!v71) {
    goto LABEL_337;
  }
  CFNumberRef v72 = v71;
  CFDictionarySetValue(v20, @"NOISE", v71);
  CFRelease(v72);
  CFNumberRef v73 = CFNumberCreate(allocator, kCFNumberSInt16Type, (const void *)(a2 + 20));
  if (!v73) {
    goto LABEL_337;
  }
  CFNumberRef v74 = v73;
  CFDictionarySetValue(v20, @"SNR", v73);
  CFRelease(v74);
LABEL_105:
  CFNumberRef v75 = CFNumberCreate(allocator, kCFNumberSInt16Type, (const void *)(a2 + 22));
  if (!v75) {
    goto LABEL_337;
  }
  CFNumberRef v76 = v75;
  CFDictionarySetValue(v20, @"RSSI", v75);
  CFRelease(v76);
  CFNumberRef v77 = CFNumberCreate(allocator, kCFNumberSInt16Type, (const void *)(a2 + 24));
  if (!v77) {
    goto LABEL_337;
  }
  CFNumberRef v78 = v77;
  int v171 = v43;
  CFDictionarySetValue(v20, @"BEACON_INT", v77);
  CFRelease(v78);
  __int16 v79 = (*(_WORD *)(a2 + 26) & 1) != 0 ? 2 : (*(_WORD *)(a2 + 26) >> 1) & 1;
  __int16 v186 = v79;
  CFNumberRef v80 = CFNumberCreate(allocator, kCFNumberSInt16Type, &v186);
  if (!v80)
  {
LABEL_337:
    v143 = 0;
    CFMutableArrayRef v30 = 0;
    goto LABEL_338;
  }
  CFNumberRef v81 = v80;
  CFDictionarySetValue(v20, @"AP_MODE", v80);
  CFRelease(v81);
  unsigned int v82 = *(unsigned __int8 *)(a2 + 34);
  LOBYTE(v187) = 0;
  LOBYTE(valuePtr) = 0;
  buf[0] = 0;
  int v83 = 0;
  if (v82)
  {
    unsigned int v84 = 0;
    while (1)
    {
      unsigned int v85 = *(_DWORD *)(a2 + 36 + 4 * v84);
      if (v85 > 0x36) {
        goto LABEL_126;
      }
      if (((1 << v85) & 0x41001001041240) != 0) {
        break;
      }
      if (((1 << v85) & 0x826) == 0)
      {
        if (((1 << v85) & 0x200400000) != 0) {
          p___int16 valuePtr = &valuePtr;
        }
        else {
LABEL_126:
        }
          p___int16 valuePtr = &v187;
LABEL_116:
        *(unsigned char *)p___int16 valuePtr = 1;
        if (!v83) {
          goto LABEL_122;
        }
      }
      int v83 = 1;
      if (buf[0] && (_BYTE)valuePtr && (_BYTE)v187) {
        goto LABEL_127;
      }
LABEL_122:
      if (++v84 >= v82) {
        goto LABEL_127;
      }
    }
    p___int16 valuePtr = (__int16 *)buf;
    goto LABEL_116;
  }
LABEL_127:
  int v87 = *(_DWORD *)(a2 + 12);
  if ((v87 & 0x2018) == 0)
  {
    int v93 = 0;
    goto LABEL_184;
  }
  int v88 = *(unsigned __int16 *)(a2 + 138);
  if (v88 >= 3)
  {
    char v94 = 0;
    char v95 = 0;
    char v96 = 0;
    char v97 = 0;
    v98 = (unsigned __int8 *)(a2 + 140);
    do
    {
      int v99 = *v98;
      switch(v99)
      {
        case 61:
          unsigned int v100 = v98[1];
          BOOL v103 = v100 > 0x15 && v88 - 2 >= v100;
          v97 |= v103;
          break;
        case 191:
          unsigned int v100 = v98[1];
          BOOL v105 = v100 > 0xB && v88 - 2 >= v100;
          v96 |= v105;
          break;
        case 255:
          unsigned int v100 = v98[1];
          if (v88 - 2 >= v100)
          {
            int v106 = v98[2];
            v95 |= v106 == 35;
            BOOL v101 = v106 == 108;
          }
          else
          {
            BOOL v101 = 0;
          }
          v94 |= v101;
          break;
        default:
          unsigned int v100 = v98[1];
          break;
      }
      uint64_t v107 = v100 + 2;
      v88 -= v107;
      v98 += v107;
    }
    while (v88 > 2);
    if (v97)
    {
      if (v96) {
        int v89 = 144;
      }
      else {
        int v89 = 16;
      }
      if (v95)
      {
        v89 |= 0x100u;
        if (v94) {
          goto LABEL_175;
        }
      }
      else if (v94)
      {
        goto LABEL_175;
      }
    }
    else if (v95)
    {
      int v89 = 256;
      if (v94)
      {
LABEL_175:
        v89 |= 0x200u;
        if ((v87 & 0x10) == 0) {
          goto LABEL_182;
        }
LABEL_130:
        BOOL v92 = (~v89 & 0x90) != 0 && v187 == 0 && buf[0] != 0 && v83 == 0;
        int v93 = v89 | 2;
        goto LABEL_140;
      }
    }
    else
    {
      int v89 = 0;
      if (v94) {
        goto LABEL_175;
      }
    }
    if ((v87 & 0x10) == 0) {
      goto LABEL_182;
    }
    goto LABEL_130;
  }
  int v89 = 0;
  if ((v87 & 0x10) != 0) {
    goto LABEL_130;
  }
LABEL_182:
  if ((v87 & 8) == 0)
  {
    int v93 = v89;
    goto LABEL_184;
  }
  BOOL v133 = (v89 & 0x10) != 0 || v187 != 0 || buf[0] != 0 || v83 == 0;
  int v93 = v89 | 4;
  if (v133) {
    int v93 = v89;
  }
  if (buf[0] | valuePtr && !(_BYTE)v187)
  {
    v93 |= 8u;
    BOOL v92 = (v89 & 0x10) == 0;
LABEL_140:
    if (!v92) {
      int v93 = v89;
    }
  }
LABEL_184:
  int v185 = v93;
  CFNumberRef v108 = CFNumberCreate(allocator, kCFNumberSInt32Type, &v185);
  if (!v108) {
    goto LABEL_337;
  }
  CFNumberRef v109 = v108;
  CFDictionarySetValue(v20, @"PHY_MODE", v108);
  CFRelease(v109);
  CFNumberRef v110 = CFNumberCreate(allocator, kCFNumberSInt16Type, (const void *)(a2 + 26));
  if (!v110) {
    goto LABEL_337;
  }
  CFNumberRef v111 = v110;
  CFDictionarySetValue(v20, @"CAPABILITIES", v110);
  CFRelease(v111);
  CFDictionarySetValue(v20, @"BSSID", v32);
  if (cf2) {
    CFDictionarySetValue(v20, @"SSID", cf2);
  }
  if (v26) {
    CFDictionarySetValue(v20, @"SSID_STR", v26);
  }
  if (cfa) {
    CFDictionarySetValue(v20, @"SHORT_SSID", cfa);
  }
  CFMutableArrayRef v30 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
  if (!v30) {
    goto LABEL_332;
  }
  CFIndex idx = 0;
  if (!*(unsigned char *)(a2 + 34))
  {
LABEL_197:
    CFDictionarySetValue(v20, @"RATES", v30);
    CFNumberRef v115 = CFNumberCreate(allocator, kCFNumberSInt32Type, (const void *)(a2 + 132));
    if (!v115) {
      goto LABEL_332;
    }
    CFNumberRef v116 = v115;
    CFDictionarySetValue(v20, @"AGE", v115);
    CFRelease(v116);
    CFNumberRef v117 = CFNumberCreate(allocator, kCFNumberSInt64Type, (const void *)(a2 + 2256));
    if (!v117) {
      goto LABEL_332;
    }
    CFNumberRef v118 = v117;
    CFDictionarySetValue(v20, @"TIMESTAMP", v117);
    CFRelease(v118);
    int v119 = v179 | a9;
    if (v119)
    {
      uint64_t v120 = 4294963395;
      goto LABEL_236;
    }
    if ((*(_WORD *)(a2 + 26) & 0x10) != 0)
    {
      CFStringRef v121 = v32;
      int v122 = Apple80211ParseWPAIE((unsigned __int8 *)(a2 + 140), *(unsigned __int16 *)(a2 + 138), v20);
      BOOL v123 = v122 == 0;
      int v124 = Apple80211ParseRSNIE(a2 + 140, *(unsigned __int16 *)(a2 + 138), v20);
      BOOL v125 = v124 == 0;
      Apple80211ParseRSNXE((unsigned __int8 *)(a2 + 140), *(unsigned __int16 *)(a2 + 138), v20);
      int v126 = Apple80211ParseWAPIIE((unsigned char *)(a2 + 140), *(unsigned __int16 *)(a2 + 138), v20);
      if (v122 && v124 || (*(unsigned char *)(v176 + 90) & 0x20) != 0)
      {
        CFStringRef v32 = v121;
      }
      else
      {
        CFDictionaryRef v127 = (const __CFDictionary *)CFDictionaryGetValue(v20, @"WPA_IE");
        *(_DWORD *)buf = -1431655766;
        CFStringRef v32 = v121;
        if (v127)
        {
          CFNumberRef v128 = (const __CFNumber *)CFDictionaryGetValue(v127, @"IE_KEY_WPA_MCIPHER");
          if (v128)
          {
            if (CFNumberGetValue(v128, kCFNumberSInt32Type, buf) && *(_DWORD *)buf == 5)
            {
              CFDictionaryRemoveValue(v20, @"WPA_IE");
              BOOL v123 = 0;
            }
          }
        }
        CFDictionaryRef v129 = (const __CFDictionary *)CFDictionaryGetValue(v20, @"RSN_IE");
        if (v129)
        {
          CFNumberRef v130 = (const __CFNumber *)CFDictionaryGetValue(v129, @"IE_KEY_RSN_MCIPHER");
          if (v130)
          {
            if (CFNumberGetValue(v130, kCFNumberSInt32Type, buf) && *(_DWORD *)buf == 5)
            {
              CFDictionaryRemoveValue(v20, @"RSN_IE");
              BOOL v125 = 0;
            }
          }
        }
      }
      uint64_t v120 = 0;
      if (v123 || v125)
      {
        CFAllocatorRef v66 = allocator;
        goto LABEL_236;
      }
      CFAllocatorRef v66 = allocator;
      if (!v126)
      {
LABEL_236:
        v134 = (char *)(a2 + 136);
        if ((*(unsigned char *)(a2 + 136) & 0x10) != 0)
        {
          CFStringRef v135 = v32;
          *(_DWORD *)buf = -1431655766;
          CFDictionaryRef v136 = (const __CFDictionary *)CFDictionaryGetValue(v20, @"RSN_IE");
          if (v136
            && (CFArrayRef v137 = (const __CFArray *)CFDictionaryGetValue(v136, @"IE_KEY_RSN_AUTHSELS")) != 0
            && (CFArrayRef v138 = v137, (v139 = CFArrayGetCount(v137)) != 0)
            && (CFIndex v140 = v139, idx = 0, v139 >= 1))
          {
            CFIndex v141 = 0;
            while (1)
            {
              CFNumberRef v142 = (const __CFNumber *)CFArrayGetValueAtIndex(v138, v141);
              if (v142)
              {
                if (CFNumberGetValue(v142, kCFNumberSInt32Type, buf) && *(_DWORD *)buf == 18) {
                  break;
                }
              }
              CFIndex v141 = idx + 1;
              CFIndex idx = v141;
              if (v141 >= v140) {
                goto LABEL_246;
              }
            }
            CFStringRef v32 = v135;
            CFAllocatorRef v66 = allocator;
            if (!a11)
            {
              v143 = 0;
              uint64_t v120 = 4294963394;
              goto LABEL_326;
            }
          }
          else
          {
LABEL_246:
            CFStringRef v32 = v135;
            CFAllocatorRef v66 = allocator;
          }
        }
        v143 = CFArrayCreateMutable(v66, 0, MEMORY[0x263EFFF70]);
        if (v143)
        {
          CFIndex v144 = 0;
          CFIndex idx = 0;
          do
          {
            if ((v134[v144 / 8] >> (v144 % 8)))
            {
              CFNumberRef v145 = CFNumberCreate(allocator, kCFNumberSInt32Type, &idx);
              if (!v145) {
                goto LABEL_333;
              }
              CFNumberRef v146 = v145;
              CFArrayAppendValue(v143, v145);
              CFRelease(v146);
              CFIndex v144 = idx;
            }
            CFIndex idx = v144 + 1;
          }
          while (v144++ < 5);
          CFDictionarySetValue(v20, @"SCAN_RESULT_NET_FLAGS", v143);
          v148 = (const void *)*MEMORY[0x263EFFB40];
          v149 = (const void *)*MEMORY[0x263EFFB38];
          if (*v134) {
            v150 = (const void *)*MEMORY[0x263EFFB40];
          }
          else {
            v150 = (const void *)*MEMORY[0x263EFFB38];
          }
          CFDictionarySetValue(v20, @"SCAN_RESULT_FROM_PROBE_RSP", v150);
          if ((*v134 & 0x10) != 0) {
            v151 = v148;
          }
          else {
            v151 = v149;
          }
          CFDictionarySetValue(v20, @"SCAN_RESULT_OWE_MULTI_SSID", v151);
          CFStringRef v26 = v177;
          if ((v182 & 0x40) != 0)
          {
            char v152 = *v134;
            if ((*v134 & 8) != 0)
            {
              CFDictionarySetValue(v20, @"SCAN_RESULT_INCL_SHORT_SSID", v148);
              char v152 = *v134;
            }
            if ((v152 & 4) != 0) {
              CFDictionarySetValue(v20, @"SCAN_RESULT_FROM_FILS_DISC_FRAME", v148);
            }
          }
          _parseIEs((unsigned __int8 *)(a2 + 140), *(unsigned __int16 *)(a2 + 138), v20, v176 + 88);
          *(_WORD *)buf = 20;
          CFDictionaryRef v153 = (const __CFDictionary *)CFDictionaryGetValue(v20, @"HE_OP_IE");
          v154 = v175;
          if (v153)
          {
            CFDictionaryRef v155 = v153;
            CFNumberRef v156 = (const __CFNumber *)CFDictionaryGetValue(v153, @"6GHZ_OP_INFO_CHANNEL_WIDTH");
            if (v156 && CFNumberGetValue(v156, kCFNumberSInt8Type, buf))
            {
              switch(*(_WORD *)buf)
              {
                case 0:
                  __int16 v157 = 20;
                  goto LABEL_291;
                case 1:
                  goto LABEL_288;
                case 2:
                  goto LABEL_290;
                case 3:
                  goto LABEL_289;
                default:
                  goto LABEL_275;
              }
            }
            CFNumberRef v158 = (const __CFNumber *)CFDictionaryGetValue(v155, @"VHT_OP_INFO_CHANNEL_WIDTH");
            if (v158)
            {
              if (CFNumberGetValue(v158, kCFNumberSInt8Type, buf))
              {
                if (*(unsigned __int16 *)buf - 2 < 2) {
                  goto LABEL_289;
                }
                if (*(unsigned __int16 *)buf == 1) {
                  goto LABEL_290;
                }
                if (!*(_WORD *)buf) {
                  *(_WORD *)buf = 20;
                }
              }
            }
          }
LABEL_275:
          CFDictionaryRef v159 = (const __CFDictionary *)CFDictionaryGetValue(v20, @"VHT_IE");
          if (!v159
            || (CFNumberRef v160 = (const __CFNumber *)CFDictionaryGetValue(v159, @"VHT_CHAN_WIDTH")) == 0
            || !CFNumberGetValue(v160, kCFNumberSInt8Type, buf))
          {
LABEL_282:
            CFDictionaryRef v161 = (const __CFDictionary *)CFDictionaryGetValue(v20, @"HT_IE");
            if (!v161) {
              goto LABEL_292;
            }
            CFBooleanRef v162 = (const __CFBoolean *)CFDictionaryGetValue(v161, @"HT_STA_CHAN_WIDTH");
            if (!v162) {
              goto LABEL_292;
            }
            if (CFBooleanGetValue(v162) != 1) {
              goto LABEL_292;
            }
            CFDictionaryRef v163 = (const __CFDictionary *)CFDictionaryGetValue(v20, @"HT_CAPS_IE");
            if (!v163) {
              goto LABEL_292;
            }
            __int16 valuePtr = 0;
            CFNumberRef v164 = (const __CFNumber *)CFDictionaryGetValue(v163, @"CAPS");
            if (!v164) {
              goto LABEL_292;
            }
            CFNumberGetValue(v164, kCFNumberSInt16Type, &valuePtr);
            if ((valuePtr & 2) == 0) {
              goto LABEL_292;
            }
LABEL_288:
            __int16 v157 = 40;
LABEL_291:
            *(_WORD *)buf = v157;
LABEL_292:
            CFNumberRef v165 = CFNumberCreate(allocator, kCFNumberSInt16Type, buf);
            if (v165)
            {
              CFNumberRef v166 = v165;
              CFDictionarySetValue(v20, @"CHANNEL_WIDTH", v165);
              CFRelease(v166);
            }
            if (v183)
            {
              CFDictionaryRemoveValue(v20, @"HT_CAPS_IE");
              CFDictionaryRemoveValue(v20, @"VHT_CAPS_IE");
            }
            CFDictionaryRemoveValue(v20, @"VHT_IE");
            CFDictionaryRemoveValue(v20, @"HT_IE");
            CFDataRef v28 = cf2;
            if (v173) {
              CFDictionarySetValue(v20, @"SCAN_DIRECTED", v148);
            }
            if (v183) {
              CFArrayAppendValue(v183, v20);
            }
            uint64_t v120 = 0;
            if (theArray && !v171)
            {
              if (a10)
              {
                if (v175 || (v154 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70])) != 0)
                {
                  CFArrayAppendValue(v154, v32);
                  CFDictionarySetValue(v20, @"SCAN_BSSID_LIST", v154);
                }
              }
              CFArrayAppendValue(theArray, v20);
              uint64_t v120 = 0;
            }
            goto LABEL_307;
          }
          if (*(unsigned __int16 *)buf - 2 >= 2)
          {
            if (*(unsigned __int16 *)buf != 1)
            {
              if (!*(_WORD *)buf) {
                *(_WORD *)buf = 20;
              }
              goto LABEL_282;
            }
LABEL_290:
            __int16 v157 = 80;
            goto LABEL_291;
          }
LABEL_289:
          __int16 v157 = 160;
          goto LABEL_291;
        }
LABEL_333:
        if (!v119)
        {
          uint64_t v120 = 0;
          CFStringRef v26 = v177;
          CFDataRef v28 = cf2;
          goto LABEL_329;
        }
LABEL_326:
        CFStringRef v26 = v177;
        goto LABEL_327;
      }
      CFDictionarySetValue(v20, @"WEP", (const void *)*MEMORY[0x263EFFB40]);
    }
    uint64_t v120 = 0;
    goto LABEL_236;
  }
  CFIndex v112 = 0;
  while (1)
  {
    CFNumberRef v113 = CFNumberCreate(allocator, kCFNumberSInt32Type, (const void *)(a2 + 4 * v112 + 36));
    if (!v113) {
      break;
    }
    CFNumberRef v114 = v113;
    CFArrayAppendValue(v30, v113);
    CFRelease(v114);
    CFIndex v112 = idx + 1;
    CFIndex idx = v112;
    if (v112 >= *(unsigned __int8 *)(a2 + 34)) {
      goto LABEL_197;
    }
  }
LABEL_332:
  v143 = 0;
LABEL_338:
  uint64_t v120 = 4294963395;
LABEL_327:
  CFDataRef v28 = cf2;
LABEL_328:
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_329:
    v154 = v175;
    goto LABEL_307;
  }
  v168 = CFDictionaryGetValue(v20, @"BSSID");
  v154 = v175;
LABEL_336:
  *(_DWORD *)buf = 67109378;
  int v191 = v120;
  __int16 v192 = 2112;
  v193 = v168;
  _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to add scan result to list (err=%d, bssid=%@)", buf, 0x12u);
LABEL_307:
  if (v20) {
    CFRelease(v20);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v143) {
    CFRelease(v143);
  }
  if (cfa) {
    CFRelease(cfa);
  }
  if (v154) {
    CFRelease(v154);
  }
  return v120;
}

void Apple80211EventMonitoringHelper(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a1 + 1804)
    || !*(void *)(a1 + 1824)
    || !*(void *)(a1 + 1832)
    || (CFNumberRef v5 = *(atomic_uint **)(a1 + 1848)) == 0)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)buf = 0;
    int v43 = &_os_log_internal;
    CFMutableArrayRef v44 = "IOUCPipe is invalid\n";
    uint32_t v45 = 2;
    goto LABEL_67;
  }
  __uint64_t v53 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (*(unsigned char *)(a1 + 1928)) {
    return;
  }
  atomic_uint v9 = v5[1];
  if (v9 == *v5) {
    return;
  }
  v10 = &_os_log_internal;
  while (1)
  {
    unsigned __int32 v54 = *v5;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v71 = 0u;
    unint64_t v11 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v53;
    v12 = *(NSObject **)(a1 + 1816);
    if (v12) {
      BOOL v13 = v11 >= 0xBEBC201;
    }
    else {
      BOOL v13 = 0;
    }
    if (v13)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        char v59 = "Apple80211EventMonitoringHelper";
        __int16 v60 = 2048;
        *(void *)unsigned int v61 = v11 / 0xF4240;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: processing events for %llu ms, temporarily suspending to prevent starvation", buf, 0x16u);
        v12 = *(NSObject **)(a1 + 1816);
      }
      *(unsigned char *)(a1 + 1928) = 1;
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = __Apple80211EventMonitoringHelper_block_invoke;
      block[3] = &__block_descriptor_tmp_1864;
      block[4] = a1;
      block[5] = a1;
      block[6] = a3;
      int v56 = a2;
      int v57 = a4;
      dispatch_async(v12, block);
      return;
    }
    __dmb(0xBu);
    unint64_t v14 = *(void *)(a1 + 1840);
    if (v14 < v54)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 136315650;
      char v59 = "Apple80211EventMonitoringHelper";
      __int16 v60 = 1024;
      *(_DWORD *)unsigned int v61 = v54;
      *(_WORD *)&v61[4] = 2048;
      *(void *)&v61[6] = v14;
      int v43 = &_os_log_internal;
      CFMutableArrayRef v44 = "%s:Ring offset out of range: %u > %llu\n";
LABEL_76:
      uint32_t v45 = 28;
      goto LABEL_67;
    }
    unint64_t v15 = *(void *)(a1 + 1832);
    unint64_t v16 = v15 + v54;
    if ((v16 & 3) != 0)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 136315650;
      char v59 = "Apple80211EventMonitoringHelper";
      __int16 v60 = 2048;
      *(void *)unsigned int v61 = 4;
      *(_WORD *)&v61[8] = 1024;
      *(_DWORD *)&v61[10] = v54;
      int v43 = &_os_log_internal;
      CFMutableArrayRef v44 = "%s:Read Ptr is not multiple of %lu (%d) \n";
      goto LABEL_76;
    }
    int v17 = *(_DWORD *)v16;
    if (*(_DWORD *)v16 == 80 || v14 - v54 <= 0x2F)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        char v59 = "Apple80211EventMonitoringHelper";
        __int16 v60 = 1024;
        *(_DWORD *)unsigned int v61 = v54;
        _os_log_impl(&dword_210714000, v10, OS_LOG_TYPE_DEFAULT, "%s: Skipping Padding Read offset is %d\n", buf, 0x12u);
        unint64_t v14 = *(void *)(a1 + 1840);
      }
      LODWORD(v18) = (v54 + 4) % v14;
      goto LABEL_19;
    }
    long long v25 = *(_OWORD *)v16;
    long long v26 = *(_OWORD *)(v16 + 32);
    long long v72 = *(_OWORD *)(v16 + 16);
    long long v73 = v26;
    long long v71 = v25;
    if (v54 != *v5 || v17 != v71)
    {
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136315138;
      char v59 = "Apple80211EventMonitoringHelper";
      uint64_t v22 = v10;
      CFAllocatorRef v23 = "%s: Read pointer moved while copying metadata. Retrying.\n";
      uint32_t v24 = 12;
      goto LABEL_58;
    }
    if (v71 != 87)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      if ((HIDWORD(v72) - 242) >= 0xFFFFFF0F) {
        CFIndex v48 = (const char *)gAppleMIndexToString[HIDWORD(v72)];
      }
      else {
        CFIndex v48 = "unknown APPLE80211_M_";
      }
      *(_DWORD *)buf = 136448770;
      char v59 = "Apple80211EventMonitoringHelper";
      __int16 v60 = 2048;
      *(void *)unsigned int v61 = v15 + v54;
      *(_WORD *)&v61[8] = 1024;
      *(_DWORD *)&v61[10] = v71;
      *(_WORD *)&v61[14] = 1024;
      *(_DWORD *)&v61[16] = WORD3(v71);
      *(_WORD *)&v61[20] = 1024;
      *(_DWORD *)&v61[22] = WORD4(v72);
      *(_WORD *)&v61[26] = 1024;
      *(_DWORD *)uint64_t v62 = WORD5(v72);
      *(_WORD *)&v62[4] = 1024;
      *(_DWORD *)&v62[6] = HIDWORD(v72);
      __int16 v63 = 2082;
      BOOL v64 = v48;
      __int16 v65 = 2082;
      CFAllocatorRef v66 = &v73;
      __int16 v67 = 1024;
      unsigned __int32 v68 = v54;
      __int16 v69 = 1024;
      atomic_uint v70 = v9;
      int v43 = &_os_log_internal;
      CFMutableArrayRef v44 = "%{public}s: Invalid Metadata state, dump METADATA[%p]: state %d, sequenceNumber %u, payload %u, padding %u, "
            "event_code %u/'%{public}s', ifname %{public}s, readOffset 0x%x, writeOffset 0x%x\n";
      uint32_t v45 = 84;
      goto LABEL_67;
    }
    unint64_t v27 = (v54 + 48) % v14;
    unint64_t v28 = v27 + v15;
    unint64_t v29 = v27 + WORD4(v72);
    uint64_t v30 = (v14 - v27);
    unint64_t v31 = v29 <= v14 ? 0 : v15;
    unint64_t v32 = v29 <= v14 ? WORD4(v72) : v30;
    unint64_t v33 = v29 <= v14 ? 0 : WORD4(v72) - v30;
    if (v28 >= v15 + v14 || v28 < v15) {
      break;
    }
    if (v31)
    {
      if (v31 >= v15 + v14 || v31 < v15) {
        break;
      }
    }
    if (v32 >= v14 || v33 >= v14) {
      break;
    }
    _writeEventBuffer();
    if (v54 != *v5)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      atomic_uint v49 = *v5;
      *(_DWORD *)buf = 136315650;
      char v59 = "Apple80211EventMonitoringHelper";
      __int16 v60 = 1024;
      *(_DWORD *)unsigned int v61 = v54;
      *(_WORD *)&v61[4] = 1024;
      *(_DWORD *)&v61[6] = v49;
      int v43 = &_os_log_internal;
      CFMutableArrayRef v44 = "%s:read pointer moved [%u->%u] unexpected while processing event\n";
      uint32_t v45 = 24;
      goto LABEL_67;
    }
    v37 = (int *)(*(void *)(a1 + 1832) + *v5);
    if (v71 != *v37)
    {
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_59;
      }
      int v41 = *v37;
      *(_DWORD *)buf = 136315650;
      char v59 = "Apple80211EventMonitoringHelper";
      __int16 v60 = 1024;
      *(_DWORD *)unsigned int v61 = v71;
      *(_WORD *)&v61[4] = 1024;
      *(_DWORD *)&v61[6] = v41;
      uint64_t v22 = v10;
      CFAllocatorRef v23 = "%s:metadata state changed [%d->%d] while processing event, retrying\n";
      uint32_t v24 = 24;
      goto LABEL_58;
    }
    uint64_t v38 = WORD4(v72);
    int v39 = *((unsigned __int16 *)v37 + 12);
    if (WORD4(v72) != v39 || WORD5(v72) != *((unsigned __int16 *)v37 + 13))
    {
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_59;
      }
      int v42 = *((unsigned __int16 *)v37 + 13);
      *(_DWORD *)buf = 136316162;
      char v59 = "Apple80211EventMonitoringHelper";
      __int16 v60 = 1024;
      *(_DWORD *)unsigned int v61 = v38;
      *(_WORD *)&v61[4] = 1024;
      *(_DWORD *)&v61[6] = v39;
      *(_WORD *)&v61[10] = 1024;
      *(_DWORD *)&v61[12] = WORD5(v72);
      *(_WORD *)&v61[16] = 1024;
      *(_DWORD *)&v61[18] = v42;
      uint64_t v22 = v10;
      CFAllocatorRef v23 = "%s:metadata payload/padding changed [%u/%u->%u/%u] while processing event, retrying\n";
      uint32_t v24 = 36;
      goto LABEL_58;
    }
    v40 = *(const char **)(a1 + 1840);
    unint64_t v18 = (WORD4(v72) + WORD5(v72) + v54 + 48) % (unint64_t)v40;
    if ((v18 & 3) != 0)
    {
      unsigned int v50 = WORD5(v72);
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      atomic_uint v52 = *v5;
      *(_DWORD *)buf = 136316930;
      char v59 = "Apple80211EventMonitoringHelper";
      __int16 v60 = 1024;
      *(_DWORD *)unsigned int v61 = v54;
      *(_WORD *)&v61[4] = 1024;
      *(_DWORD *)&v61[6] = v38;
      *(_WORD *)&v61[10] = 1024;
      *(_DWORD *)&v61[12] = v50;
      *(_WORD *)&v61[16] = 2048;
      *(void *)&v61[18] = v38 + v50 + 48;
      *(_WORD *)&v61[26] = 1024;
      *(_DWORD *)uint64_t v62 = v52;
      *(_WORD *)&v62[4] = 1024;
      *(_DWORD *)&v62[6] = v18;
      __int16 v63 = 2048;
      BOOL v64 = v40;
      int v43 = &_os_log_internal;
      CFMutableArrayRef v44 = "%s: Created a bad offset, don't save it, localReadOffset %u, payload %u, padding %u, total length %lu, oldOf"
            "fset %u, newOffset %u, ringSize 0x%llx";
LABEL_79:
      uint32_t v45 = 62;
LABEL_67:
      _os_log_impl(&dword_210714000, v43, OS_LOG_TYPE_DEFAULT, v44, buf, v45);
      return;
    }
LABEL_19:
    unsigned __int32 v19 = v54;
    unsigned __int32 v20 = v54;
    atomic_compare_exchange_strong_explicit(v5, &v20, v18, memory_order_relaxed, memory_order_relaxed);
    if (v20 != v19)
    {
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_59;
      }
      atomic_uint v21 = *v5;
      *(_DWORD *)buf = 136315906;
      char v59 = "Apple80211EventMonitoringHelper";
      __int16 v60 = 1024;
      *(_DWORD *)unsigned int v61 = v21;
      *(_WORD *)&v61[4] = 1024;
      *(_DWORD *)&v61[6] = v20;
      *(_WORD *)&v61[10] = 1024;
      *(_DWORD *)&v61[12] = v18;
      uint64_t v22 = v10;
      CFAllocatorRef v23 = "%s: Couldn't update read ptr, ringRead Offset %u, oldReadOffset %u, newOffset %u\n";
      uint32_t v24 = 30;
LABEL_58:
      _os_log_impl(&dword_210714000, v22, OS_LOG_TYPE_DEFAULT, v23, buf, v24);
      goto LABEL_59;
    }
    atomic_uint v9 = v5[1];
LABEL_59:
    if (v9 == *v5) {
      return;
    }
  }
  unint64_t v46 = v32;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v47 = *(void *)(a1 + 1848);
    *(_DWORD *)buf = 136316418;
    char v59 = "Apple80211EventMonitoringHelper";
    __int16 v60 = 2048;
    *(void *)unsigned int v61 = v47;
    *(_WORD *)&v61[8] = 2048;
    *(void *)&v61[10] = v15;
    *(_WORD *)&v61[18] = 2048;
    *(void *)&v61[20] = v14;
    *(_WORD *)uint64_t v62 = 2048;
    *(void *)&v62[2] = v46;
    __int16 v63 = 2048;
    BOOL v64 = (const char *)v33;
    int v43 = &_os_log_internal;
    CFMutableArrayRef v44 = "%s: Unexpected log parameters ring state3(0x%llx), ring buffer(0x%llx), ring size(%llu), logSize(%lu), logContinueSize(%lu)\n";
    goto LABEL_79;
  }
}

void _writeEventBuffer()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  size_t v2 = v1;
  CFNumberRef v4 = v3;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  bzero(v21, 0x1014uLL);
  long long v22 = *(_OWORD *)(v8 + 32);
  if (v6 >= 0xFF0) {
    unint64_t v6 = 4080;
  }
  __memcpy_chk();
  LODWORD(v10) = v6 + 16;
  if (v4)
  {
    unint64_t v11 = &v23[v6];
    unint64_t v10 = v2 + v10;
    if (v10 > 0x1000)
    {
      memcpy(v11, v4, 4080 - v6);
      LODWORD(v10) = 4096;
    }
    else
    {
      memcpy(v11, v4, v2);
    }
  }
  uint64_t v12 = *(unsigned int *)(v8 + 28);
  int v20 = v10 + 24;
  v21[4] = v12;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    if ((v12 - 242) >= 0xFFFFFF0F) {
      BOOL v13 = (const char *)gAppleMIndexToString[v12];
    }
    else {
      BOOL v13 = "unknown APPLE80211_M_";
    }
    int v14 = 136446722;
    unint64_t v15 = "_writeEventBuffer";
    __int16 v16 = 1024;
    int v17 = v12;
    __int16 v18 = 2082;
    unsigned __int32 v19 = v13;
    _os_log_debug_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%{public}s: processing event %d/'%{public}s'\n", (uint8_t *)&v14, 0x1Cu);
  }
  _eventRead(v9, &v20);
}

void _eventRead(uint64_t a1, int *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v39 = v2;
  long long v40 = v2;
  int v3 = *a2;
  if ((*a2 - 24) < 0x10) {
    return;
  }
  unint64_t v6 = (unsigned char *)(a1 + 4);
  if (strncmp((const char *)a2 + 24, (const char *)(a1 + 4), 0x10uLL)) {
    return;
  }
  uint64_t v7 = (v3 - 40);
  if (*(unsigned char *)(a1 + 51))
  {
    if (*(unsigned char *)(a1 + 52))
    {
      uint64_t v8 = a2[5];
      goto LABEL_10;
    }
    uint64_t v8 = a2[5];
    unint64_t v11 = (v8 - 1);
    int v10 = 1 << ((v8 - 1) & 7);
    if ((v10 & *(unsigned char *)(a1 + (v11 >> 3) + 20)) != 0)
    {
LABEL_10:
      if (v7) {
        uint64_t v12 = a2 + 10;
      }
      else {
        uint64_t v12 = 0;
      }
      (*(void (**)(void, uint64_t, uint64_t, int *, uint64_t, void))(a1 + 72))(0, a1, v8, v12, v7, *(void *)(a1 + 80));
      if (a2[5] == 10)
      {
LABEL_14:
        BOOL v13 = *(NSObject **)(a1 + 152);
        if (v13)
        {
          dispatch_semaphore_signal(v13);
        }
      }
      return;
    }
    unint64_t v9 = v11 >> 3;
  }
  else
  {
    uint64_t v8 = a2[5];
    if (*(unsigned char *)(a1 + 52)) {
      goto LABEL_20;
    }
    unint64_t v9 = (v8 - 1) >> 3;
    int v10 = 1 << ((v8 - 1) & 7);
  }
  if ((v10 & *(unsigned char *)(a1 + v9 + 20)) == 0) {
    return;
  }
LABEL_20:
  if ((int)v8 > 136)
  {
    if ((int)v8 <= 175)
    {
      switch((int)v8)
      {
        case 137:
          _dispatchRoamScanStart(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 138:
          _dispatchRoamScanEnd(a1, (unsigned __int8 *)a2 + 40, v7);
          break;
        case 139:
          _dispatchRoamPrep(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 140:
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "_eventRead";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4375;
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d Processing _dispatchBssSteeringRequest\n", buf, 0x12u);
          }
          _dispatchBssSteeringRequest(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 141:
          _dispatchSoftAPLPMEvent(a1, a2 + 10, v7);
          break;
        case 142:
        case 144:
        case 146:
        case 147:
        case 148:
        case 149:
        case 152:
        case 153:
        case 154:
        case 155:
        case 157:
        case 158:
        case 159:
        case 160:
        case 161:
        case 162:
        case 163:
          goto LABEL_93;
        case 143:
          _dispatchActionFrameEvent(a1, (unsigned char *)a2 + 40, v7);
          break;
        case 145:
          _dispatchWeightedAvgLQMUpdateEvent(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 150:
          _dispatchDPS(a1, a2 + 10, v7);
          break;
        case 151:
          _dispatchSlowWiFi(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 156:
          _dispatchRealtimeSessionEvent(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 164:
          _dispatchSlowWiFiLinkProbeTrigger(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 165:
          _dispatchSlowWiFiUserInputTrigger(a1, (uint64_t)(a2 + 10), v7);
          break;
        default:
          if (v8 != 169) {
            goto LABEL_93;
          }
          _dispatchLqmTxStatsUpdate(a1, (uint64_t)(a2 + 10), v7);
          break;
      }
      return;
    }
    if ((int)v8 <= 209)
    {
      switch((int)v8)
      {
        case 189:
          _dispatchTrafficInfoEvent(a1, (unsigned char *)a2 + 40, v7);
          return;
        case 190:
          _dispatchBTCoexStatsUpdateEvent(a1, (uint64_t)(a2 + 10), v7);
          return;
        case 191:
        case 194:
        case 195:
        case 197:
        case 198:
          goto LABEL_93;
        case 192:
          _dispatchSIBEvent(a1, a2 + 10, v7);
          return;
        case 193:
          _dispatchSensingResults(a1, (unsigned char *)a2 + 40, v7);
          return;
        case 196:
          _dispatchTTRFromDriver(a1, (const char *)a2 + 40, v7);
          return;
        case 199:
          _dispatchColocatedCacheEvent(a1, a2 + 10, v7);
          return;
        default:
          if (v8 == 176)
          {
            _dispatchLqmCrashTracer(a1, a2 + 10, v7);
          }
          else
          {
            if (v8 != 180) {
              goto LABEL_93;
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "_eventRead";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4370;
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d Processing _dispatchBeaconCacheUpdate\n", buf, 0x12u);
            }
            _dispatchBeaconCacheUpdate(a1, (uint64_t)(a2 + 10), v7);
          }
          break;
      }
      return;
    }
    if ((int)v8 > 237)
    {
      switch(v8)
      {
        case 0xEE:
          if (v7 != 4) {
            return;
          }
          long long v22 = *(void (**)(void, uint64_t, uint64_t, int *, uint64_t, uint64_t))(a1 + 72);
          uint64_t v21 = *(void *)(a1 + 80);
          int v20 = a2 + 10;
          uint64_t v23 = a1;
          uint64_t v8 = 238;
          uint64_t v24 = 4;
          goto LABEL_155;
        case 0xEF:
          if (v7 != 48) {
            return;
          }
          long long v22 = *(void (**)(void, uint64_t, uint64_t, int *, uint64_t, uint64_t))(a1 + 72);
          uint64_t v21 = *(void *)(a1 + 80);
          int v20 = a2 + 10;
          uint64_t v23 = a1;
          uint64_t v8 = 239;
          uint64_t v24 = 48;
          goto LABEL_155;
        case 0xF0:
          _dispatchScanForwardStatsUpdateEvent(a1, (uint64_t)(a2 + 10), v7);
          return;
      }
    }
    else
    {
      switch(v8)
      {
        case 0xD2:
          _dispatchP2PCountryCodeChange(a1, (const char *)a2 + 40);
          return;
        case 0xD9:
          if (v7)
          {
            long long v25 = *(_OWORD *)(a2 + 14);
            *(_OWORD *)buf = *(_OWORD *)(a2 + 10);
            *(_OWORD *)&buf[16] = v25;
            *(void *)&buf[29] = *(void *)((char *)a2 + 69);
            (*(void (**)(void, uint64_t, uint64_t, unsigned char *, uint64_t, void))(a1 + 72))(0, a1, 217, buf, 37, *(void *)(a1 + 80));
          }
          return;
        case 0xDA:
          _dispatchObssMitInfoEvent(a1, (uint64_t)(a2 + 10), v7);
          return;
      }
    }
LABEL_93:
    if (v7) {
      int v20 = a2 + 10;
    }
    else {
      int v20 = 0;
    }
    long long v22 = *(void (**)(void, uint64_t, uint64_t, int *, uint64_t, uint64_t))(a1 + 72);
    uint64_t v21 = *(void *)(a1 + 80);
    uint64_t v23 = a1;
    uint64_t v24 = v7;
LABEL_155:
    v22(0, v23, v8, v20, v24, v21);
    return;
  }
  if ((int)v8 <= 33)
  {
    switch((int)v8)
    {
      case 2:
        _dispatchSSIDChanged(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
        goto LABEL_93;
      case 4:
        _dispatchLinkChangedEvent(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 9:
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 272));
        uint64_t v14 = *(void *)(a1 + 344);
        uint64_t v15 = *(void *)(a1 + 56);
        if (v15) {
          BOOL v16 = 1;
        }
        else {
          BOOL v16 = v14 == 0;
        }
        BOOL v17 = !v16;
        if (v15 && v14)
        {
          pthread_t v18 = *(pthread_t *)(a1 + 336);
          BOOL v17 = v18 == pthread_self();
        }
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 272));
        if (v7 == 4) {
          uint64_t v29 = a2[10];
        }
        else {
          uint64_t v29 = 0;
        }
        if (!v17 && *(void *)(a1 + 56) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = "_eventRead";
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Error: Thread mismatch detected in assoc done event", buf, 0xCu);
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          pthread_t v31 = *(pthread_t *)(a1 + 336);
          uint64_t v30 = *(void *)(a1 + 344);
          pthread_t v32 = pthread_self();
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "_eventRead";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v17;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v30;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v31 == v32;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: asyncAssoc %d, assoc record %p, assocThread & current thread %d\n", buf, 0x22u);
        }
        if (v17)
        {
          _dispatchAsyncAssocEvent(a1, v7 == 4, v29, (uint64_t)(a2 + 10));
        }
        else if (*v6 && (*(_DWORD *)a1 & 0x80000000) == 0)
        {
          if (v7 == 4)
          {
            (*(void (**)(uint64_t, uint64_t, void, int *, uint64_t, void))(a1 + 72))(v29, a1, a2[5], a2 + 10, 4, *(void *)(a1 + 80));
          }
          else
          {
            unint64_t v41 = 0;
            long long v39 = 0u;
            long long v40 = 0u;
            __strlcpy_chk();
            LODWORD(v40) = 21;
            if (!Apple80211IOCTLGetWrapper(a1, &v39))
            {
              uint64_t v37 = _errorForAssociateResult(SDWORD1(v40));
              if (v7) {
                uint64_t v38 = a2 + 10;
              }
              else {
                uint64_t v38 = 0;
              }
              (*(void (**)(uint64_t, uint64_t, void, int *, uint64_t, void))(a1 + 72))(v37, a1, a2[5], v38, v7, *(void *)(a1 + 80));
            }
          }
        }
        return;
      case 10:
        BOOL v19 = v7 == 4;
        if (v7 == 4) {
          uint64_t v33 = a2[10];
        }
        else {
          uint64_t v33 = 0;
        }
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 160));
        if (*(void *)(a1 + 56))
        {
          pthread_t v34 = *(pthread_t *)(a1 + 224);
          BOOL v35 = v34 != pthread_self();
        }
        else
        {
          BOOL v35 = 0;
        }
        int v36 = *(unsigned __int8 *)(a1 + 232);
        if (!v35 && !*(unsigned char *)(a1 + 232)) {
          *(void *)(a1 + 224) = 0;
        }
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 160));
        if (v35)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "_eventRead";
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Error: Thread mismatch detected in scan done event, bailing, not dispatching async scan callback", buf, 0xCu);
          }
        }
        else
        {
          if (!v36)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, void))(a1 + 72))(v33, a1, 10, 0, 0, *(void *)(a1 + 80));
            goto LABEL_14;
          }
          _dispatchAsyncScanEvent(a1, v19, v33);
        }
        return;
      default:
        if (v8 == 14)
        {
          _dispatchDecryptionFailure(a1, (uint64_t)(a2 + 10), v7);
        }
        else
        {
          if (v8 != 31) {
            goto LABEL_93;
          }
          _dispatchBGScanNetworkDiscoveredEvent(a1, (uint64_t)(a2 + 10), v7);
        }
        break;
    }
  }
  else
  {
    switch((int)v8)
    {
      case '7':
        _dispatchDriverAvailable(a1, (uint64_t)(a2 + 10));
        return;
      case '8':
      case ':':
      case ';':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'M':
      case 'O':
      case 'R':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case '[':
        goto LABEL_93;
      case '9':
        _dispatchGasResults();
        return;
      case '<':
        _dispatchCCAChangedEvent(a1, (unsigned __int8 *)a2 + 40, v7);
        return;
      case '=':
        _dispatchPowerStatsUpdateEvent(a1, (uint64_t)(a2 + 10));
        return;
      case '?':
        int v26 = a2[10];
        _dispatchBGScanCachedNetworks(a1, v26);
        return;
      case 'H':
        _dispatchDissasocReceived(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 'I':
        _dispatchReassoc(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 'J':
        _dispatchAuth(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 'K':
        _dispatchPrune(a1, (const UInt8 *)a2 + 40, v7);
        return;
      case 'L':
        _dispatchSupplicant(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 'N':
        _dispatchAssoc(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 'P':
        _dispatchRoamStatus(a1, (const UInt8 *)a2 + 40, v7);
        return;
      case 'Q':
        int v27 = _dispatchLeakyStatsEvent(a1, (uint64_t)(a2 + 10), v7);
        if (v27)
        {
          unint64_t v28 = Apple80211ErrToStr(v27);
          syslog(3, "%s Unable to parse event: leaky ap stats error (%s)", "_eventRead", v28);
        }
        return;
      case 'S':
        _dispatchRangingResults(a1, (uint64_t)(a2 + 10));
        return;
      case 'Y':
        _dispatchTxFailureHistoryEvent(a1, a2 + 10, v7);
        return;
      case 'Z':
        _dispatchScanBackoffReport(a1, (uint64_t)(a2 + 10), v7);
        return;
      case '\\':
        _dispatchTxInhibitEvent(a1, (uint64_t)(a2 + 10), v7);
        return;
      case ']':
        _dispatchLocalMitigationEvent(a1, (uint64_t)(a2 + 10), v7);
        return;
      default:
        if (v8 == 34)
        {
          _dispatchDeauthReceived(a1, (uint64_t)(a2 + 10), v7);
        }
        else
        {
          if (v8 != 39) {
            goto LABEL_93;
          }
          _dispatchlqmChangedEvent(a1, (unsigned char *)a2 + 40, v7);
        }
        break;
    }
  }
}

uint64_t _eventBlockCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 16))(a6, a3, a4, a5);
}

void _parseIEs(unsigned __int8 *a1, unsigned int a2, __CFDictionary *a3, uint64_t a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    int v8 = Apple80211ParseAppleIE(a1, a2, a3);
    if (v8)
    {
      int v9 = v8;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v69 = 67109378;
        int v70 = v9;
        __int16 v71 = 2112;
        Value = CFDictionaryGetValue(a3, @"BSSID");
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse Apple IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v10 = Apple80211ParseAppleiOSIE(a1, a2, a3);
    if (v10)
    {
      int v11 = v10;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        unsigned int v50 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v11;
        __int16 v71 = 2112;
        Value = v50;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse Apple iOS IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v12 = Apple80211ParseAppleDeviceIE(a1, a2, a3);
    if (v12)
    {
      int v13 = v12;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        v51 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v13;
        __int16 v71 = 2112;
        Value = v51;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse Apple device IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v14 = Apple80211Parse80211dIE((uint64_t)a1, a2, a3);
    if (v14)
    {
      int v15 = v14;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        atomic_uint v52 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v15;
        __int16 v71 = 2112;
        Value = v52;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse Country IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v16 = Apple80211ParseSES_IE(a1, a2, a3);
    if (v16)
    {
      int v17 = v16;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        __uint64_t v53 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v17;
        __int16 v71 = 2112;
        Value = v53;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse SES IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v18 = Apple80211ParseHT_Caps((uint64_t)a1, a2, a3);
    if (v18)
    {
      int v19 = v18;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        unsigned __int32 v54 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v19;
        __int16 v71 = 2112;
        Value = v54;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse HT Caps IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v20 = Apple80211ParseHT_IE((uint64_t)a1, a2, a3);
    if (v20)
    {
      int v21 = v20;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        CFArrayRef v55 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v21;
        __int16 v71 = 2112;
        Value = v55;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse HT IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v22 = Apple80211ParseVHT_Caps(a1, a2, a3);
    if (v22)
    {
      int v23 = v22;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v56 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v23;
        __int16 v71 = 2112;
        Value = v56;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse VHT Caps IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v24 = Apple80211ParseVHT_IE(a1, a2, a3);
    if (v24)
    {
      int v25 = v24;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v57 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v25;
        __int16 v71 = 2112;
        Value = v57;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse VHT IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v26 = Apple80211ParseInterworkingIE(a1, a2, a3);
    if (v26)
    {
      int v27 = v26;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v58 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v27;
        __int16 v71 = 2112;
        Value = v58;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse Interworking IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v28 = Apple80211ParseHS20IE(a1, a2, a3);
    if (v28)
    {
      int v29 = v28;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        char v59 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v29;
        __int16 v71 = 2112;
        Value = v59;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse HS20 IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v30 = Apple80211ParseQBSSLoadIE(a1, a2, a3);
    if (v30)
    {
      int v31 = v30;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        __int16 v60 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v31;
        __int16 v71 = 2112;
        Value = v60;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse QBSS Load IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v32 = Apple80211ParseMobilityDomainIE((uint64_t)a1, a2, a3);
    if (v32)
    {
      int v33 = v32;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        unsigned int v61 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v33;
        __int16 v71 = 2112;
        Value = v61;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse Mobility Domain IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v34 = Apple80211ParseExtCapsIE((uint64_t)a1, a2, a3);
    if (v34)
    {
      int v35 = v34;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        uint64_t v62 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v35;
        __int16 v71 = 2112;
        Value = v62;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse Extended Caps IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v36 = Apple80211ParseCyclopsIE(a1, a2, a3);
    if (v36)
    {
      int v37 = v36;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        __int16 v63 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v37;
        __int16 v71 = 2112;
        Value = v63;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse Cyclops IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    int v38 = Apple80211ParseHE_IEs(a1, a2, a3);
    if (v38)
    {
      int v39 = v38;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        BOOL v64 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v39;
        __int16 v71 = 2112;
        Value = v64;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse HE IEs (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    if ((*(unsigned char *)(a4 + 11) & 0x40) != 0)
    {
      int v40 = Apple80211ParseRNRIE(a1, a2, a3);
      if (v40)
      {
        int v41 = v40;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          CFAllocatorRef v66 = CFDictionaryGetValue(a3, @"BSSID");
          int v69 = 67109378;
          int v70 = v41;
          __int16 v71 = 2112;
          Value = v66;
          _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse RNR IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
        }
      }
      int v42 = Apple80211ParseMBOOCEIE(a1, a2, a3);
      if (v42)
      {
        int v43 = v42;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          __int16 v67 = CFDictionaryGetValue(a3, @"BSSID");
          int v69 = 67109378;
          int v70 = v43;
          __int16 v71 = 2112;
          Value = v67;
          _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse MBO-OCE IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
        }
      }
      int v44 = Apple80211ParseHEOperationIE(a1, a2, a3);
      if (v44)
      {
        int v45 = v44;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          unsigned __int32 v68 = CFDictionaryGetValue(a3, @"BSSID");
          int v69 = 67109378;
          int v70 = v45;
          __int16 v71 = 2112;
          Value = v68;
          _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse HE Op IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
        }
      }
    }
    int v46 = Apple80211ParseWPS_IE(a1, a2, a3);
    if (v46)
    {
      int v47 = v46;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        __int16 v65 = CFDictionaryGetValue(a3, @"BSSID");
        int v69 = 67109378;
        int v70 = v47;
        __int16 v71 = 2112;
        Value = v65;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to parse WPS IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    CFDataRef v48 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], a1, a2);
    if (v48)
    {
      CFDataRef v49 = v48;
      CFDictionarySetValue(a3, @"IE", v48);
      CFRelease(v49);
    }
  }
}

uint64_t Apple80211ParseWPS_IE(unsigned __int8 *a1, unsigned int a2, __CFDictionary *a3)
{
  uint64_t v219 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (a1 && a3)
  {
    unsigned int v5 = a2;
    if (a2 >= 3)
    {
      unint64_t v6 = a1;
      int v7 = 0;
      int v8 = 0;
      while (1)
      {
        if (*v6 == 221 && v5 >= 6)
        {
          unsigned int v9 = v6[1];
          size_t v10 = v9 - 4;
          if (v9 >= 4)
          {
            unsigned int v11 = v9 + 2;
            if (*(_DWORD *)(v6 + 2) == 82989056 && v11 <= v5)
            {
              if (v8)
              {
                int v13 = (char *)malloc_type_realloc(v8, (v10 + v7), 0xCBE0C651uLL);
                if (!v13) {
                  goto LABEL_231;
                }
                int v14 = v13;
                memcpy(&v13[v7], v6 + 6, v10);
                int v8 = v14;
                v7 += v10;
              }
              else
              {
                int v15 = malloc_type_malloc(v10, 0xA9BF3EC4uLL);
                if (!v15) {
                  return 4294963395;
                }
                int v8 = v15;
                memcpy(v15, v6 + 6, v10);
                int v7 = v10;
              }
            }
          }
        }
        uint64_t v16 = v6[1];
        unsigned int v17 = v16 + 2;
        v6 += v16 + 2;
        unsigned int v18 = v5 - (v16 + 2);
        if (v5 >= v17) {
          unsigned int v5 = v18;
        }
        else {
          unsigned int v5 = 0;
        }
        if (v5 <= 2)
        {
          if (!v8) {
            return 0;
          }
          if (v7 < 5) {
            goto LABEL_126;
          }
          if (*v8 != 18960) {
            goto LABEL_126;
          }
          if (*((unsigned char *)v8 + 4) != 16) {
            goto LABEL_126;
          }
          unsigned int v19 = bswap32((unsigned __int16)v8[1]);
          int v20 = v7 - HIWORD(v19) - 4;
          if (v20 < 5) {
            goto LABEL_126;
          }
          int v21 = (_WORD *)((char *)v8 + HIWORD(v19) + 4);
          unsigned int v22 = bswap32(*v21) >> 16;
          if (v22 != 4155)
          {
            if (v22 == 4164)
            {
              CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              if (Mutable)
              {
                int v25 = Mutable;
                unsigned int v26 = v21[1];
                BOOL v27 = (unint64_t)__rev16(v26) + 4 > v20 || v26 == 0;
                if (!v27 && *v21 == 17424)
                {
                  CFNumberRef v28 = CFNumberCreate(v23, kCFNumberSInt8Type, v21 + 2);
                  if (!v28) {
                    goto LABEL_232;
                  }
                  CFNumberRef v29 = v28;
                  CFDictionarySetValue(v25, @"IE_KEY_WPS_SC_STATE", v28);
                  CFRelease(v29);
                  unsigned int v30 = bswap32(v21[1]);
                  unint64_t v31 = v20 - HIWORD(v30) - 4;
                  if (v31 < 4) {
                    goto LABEL_226;
                  }
                  int v32 = (const UInt8 *)v21 + HIWORD(v30) + 4;
                  unsigned int v33 = *((unsigned __int16 *)v32 + 1);
                  uint64_t v34 = __rev16(v33);
                  unint64_t v35 = v34 + 4;
                  BOOL v36 = v34 + 4 > (unint64_t)v31 || v33 == 0;
                  if (!v36 && *(_WORD *)v32 == 22288)
                  {
                    int v38 = v32[4];
                    int v37 = (unsigned __int16 *)(v32 + 4);
                    if (v38) {
                      int v39 = (const void **)MEMORY[0x263EFFB40];
                    }
                    else {
                      int v39 = (const void **)MEMORY[0x263EFFB38];
                    }
                    CFDictionarySetValue(v25, @"IE_KEY_WPS_AP_SETUP_LOCKED", *v39);
                    unsigned int v40 = bswap32(*(v37 - 1));
                    unint64_t v31 = v31 - HIWORD(v40) - 4;
                    if (v31 >= 4)
                    {
                      int v32 = (const UInt8 *)v37 + HIWORD(v40);
                      unsigned int v33 = *((unsigned __int16 *)v32 + 1);
                      uint64_t v34 = __rev16(v33);
                      unint64_t v35 = v34 + 4;
                      goto LABEL_46;
                    }
LABEL_226:
                    v209 = @"WPS_BEACON_IE";
LABEL_227:
                    CFDictionarySetValue(a3, v209, v25);
                    uint64_t v3 = 0;
LABEL_228:
                    CFRelease(v25);
LABEL_229:
                    free(v8);
                    return v3;
                  }
LABEL_46:
                  if (v35 <= v31)
                  {
                    if (v34)
                    {
                      if (*(_WORD *)v32 == 16656)
                      {
                        int v42 = v32[4];
                        int v41 = (unsigned __int16 *)(v32 + 4);
                        if (v42) {
                          int v43 = (const void **)MEMORY[0x263EFFB40];
                        }
                        else {
                          int v43 = (const void **)MEMORY[0x263EFFB38];
                        }
                        CFDictionarySetValue(v25, @"IE_KEY_WPS_SEL_REG", *v43);
                        unsigned int v44 = bswap32(*(v41 - 1));
                        unint64_t v31 = v31 - HIWORD(v44) - 4;
                        if (v31 < 4) {
                          goto LABEL_226;
                        }
                        int v32 = (const UInt8 *)v41 + HIWORD(v44);
                        unsigned int v33 = *((unsigned __int16 *)v32 + 1);
                        uint64_t v34 = __rev16(v33);
                        unint64_t v35 = v34 + 4;
                      }
                      goto LABEL_54;
                    }
LABEL_220:
                    if ((unint64_t)__rev16(v33) + 4 > v31 || !v33 || *(_WORD *)v32 != 15376) {
                      goto LABEL_226;
                    }
                    CFNumberRef v216 = CFNumberCreate(v23, kCFNumberSInt8Type, v32 + 4);
                    if (v216)
                    {
                      CFNumberRef v211 = v216;
                      v212 = @"IE_KEY_WPS_RF_BANDS";
                      goto LABEL_225;
                    }
                    goto LABEL_232;
                  }
LABEL_54:
                  BOOL v45 = v35 <= v31 && v34 >= 2;
                  if (v45 && *(_WORD *)v32 == 4624)
                  {
                    __int16 valuePtr = bswap32(*((unsigned __int16 *)v32 + 2)) >> 16;
                    CFNumberRef v46 = CFNumberCreate(v23, kCFNumberSInt16Type, &valuePtr);
                    if (!v46) {
                      goto LABEL_232;
                    }
                    CFNumberRef v47 = v46;
                    CFDictionarySetValue(v25, @"IE_KEY_WPS_DEV_PW_ID", v46);
                    CFRelease(v47);
                    unsigned int v48 = bswap32(*((unsigned __int16 *)v32 + 1));
                    unint64_t v31 = v31 - HIWORD(v48) - 4;
                    if (v31 < 4) {
                      goto LABEL_226;
                    }
                    v32 += HIWORD(v48) + 4;
                    unsigned int v33 = *((unsigned __int16 *)v32 + 1);
                    uint64_t v34 = __rev16(v33);
                    unint64_t v35 = v34 + 4;
                  }
                  if (v35 <= v31 && v34 >= 2)
                  {
                    int v49 = *(unsigned __int16 *)v32;
                    if (v49 == 21264 || v49 == 21249)
                    {
                      __int16 valuePtr = bswap32(*((unsigned __int16 *)v32 + 2)) >> 16;
                      CFNumberRef v50 = CFNumberCreate(v23, kCFNumberSInt16Type, &valuePtr);
                      if (!v50) {
                        goto LABEL_232;
                      }
                      CFNumberRef v51 = v50;
                      CFDictionarySetValue(v25, @"IE_KEY_WPS_REG_CFG_METHODS", v50);
                      CFRelease(v51);
                      unsigned int v52 = bswap32(*((unsigned __int16 *)v32 + 1));
                      unint64_t v31 = v31 - HIWORD(v52) - 4;
                      if (v31 < 4) {
                        goto LABEL_226;
                      }
                      v32 += HIWORD(v52) + 4;
                      unsigned int v33 = *((unsigned __int16 *)v32 + 1);
                      uint64_t v34 = __rev16(v33);
                      unint64_t v35 = v34 + 4;
                    }
                  }
                  if (v35 > v31 || !v34) {
                    goto LABEL_220;
                  }
                  int v53 = *(unsigned __int16 *)v32;
                  if (v53 != 15120)
                  {
                    if (v34 < 0x10) {
                      goto LABEL_220;
                    }
                    if (v53 == 18192)
                    {
                      CFDataRef v213 = CFDataCreate(v23, v32 + 4, 16);
                      if (v213)
                      {
                        CFDataRef v214 = v213;
                        CFDictionarySetValue(v25, @"IE_KEY_WPS_UUID_E", v213);
                        CFRelease(v214);
                        unsigned int v215 = bswap32(*((unsigned __int16 *)v32 + 1));
                        LODWORD(v31) = v31 - HIWORD(v215) - 4;
                        if (v31 < 4) {
                          goto LABEL_226;
                        }
                        v32 += HIWORD(v215) + 4;
                        unsigned int v33 = *((unsigned __int16 *)v32 + 1);
                        goto LABEL_220;
                      }
                    }
                    else
                    {
                      if (v53 != 6672) {
                        goto LABEL_220;
                      }
                      CFDataRef v210 = CFDataCreate(v23, v32 + 4, 16);
                      if (v210)
                      {
                        CFNumberRef v211 = v210;
                        v212 = @"IE_KEY_WPS_ENRL_NONCE";
LABEL_225:
                        CFDictionarySetValue(v25, v212, v211);
                        CFRelease(v211);
                        goto LABEL_226;
                      }
                    }
LABEL_232:
                    uint64_t v3 = 4294963395;
                    goto LABEL_228;
                  }
                  CFNumberRef v54 = CFNumberCreate(v23, kCFNumberSInt8Type, v32 + 4);
                  if (!v54) {
                    goto LABEL_232;
                  }
                  CFNumberRef v55 = v54;
                  CFDictionarySetValue(v25, @"IE_KEY_WPS_RESP_TYPE", v54);
                  CFRelease(v55);
                  unsigned int v56 = bswap32(*((unsigned __int16 *)v32 + 1));
                  unint64_t v57 = v31 - HIWORD(v56) - 4;
                  if (v57 >= 4)
                  {
                    uint64_t v58 = (uint64_t)&v32[HIWORD(v56) + 4];
                    uint64_t v59 = bswap32(*(unsigned __int16 *)(v58 + 2)) >> 16;
                    uint64_t v3 = 4294963396;
                    if (v59 < 0x10 || v59 + 4 > v57 || *(_WORD *)v58 != 18192) {
                      goto LABEL_228;
                    }
                    CFDataRef v60 = CFDataCreate(v23, (const UInt8 *)(v58 + 4), 16);
                    if (!v60) {
                      goto LABEL_232;
                    }
                    CFDataRef v61 = v60;
                    CFDictionarySetValue(v25, @"IE_KEY_WPS_UUID_E", v60);
                    CFRelease(v61);
                    unsigned int v62 = bswap32(*(unsigned __int16 *)(v58 + 2));
                    unint64_t v63 = v57 - HIWORD(v62) - 4;
                    if (v63 >= 4)
                    {
                      uint64_t v64 = v58 + 4 + HIWORD(v62);
                      CFIndex v65 = bswap32(*(unsigned __int16 *)(v64 + 2)) >> 16;
                      uint64_t v3 = 4294963396;
                      if (v65 > 0x40 || v65 + 4 > v63 || *(_WORD *)v64 != 8464) {
                        goto LABEL_228;
                      }
                      CFStringRef v66 = CFStringCreateWithBytes(v23, (const UInt8 *)(v64 + 4), v65, 0x8000100u, 0);
                      if (!v66) {
                        goto LABEL_232;
                      }
                      CFStringRef v67 = v66;
                      CFDictionarySetValue(v25, @"IE_KEY_WPS_MANUFACTURER", v66);
                      CFRelease(v67);
                      unsigned int v68 = bswap32(*(unsigned __int16 *)(v64 + 2));
                      unint64_t v69 = v63 - HIWORD(v68) - 4;
                      if (v69 >= 4)
                      {
                        uint64_t v70 = v64 + 4 + HIWORD(v68);
                        CFIndex v71 = bswap32(*(unsigned __int16 *)(v70 + 2)) >> 16;
                        uint64_t v3 = 4294963396;
                        if (v71 > 0x20 || v71 + 4 > v69 || *(_WORD *)v70 != 8976) {
                          goto LABEL_228;
                        }
                        CFStringRef v72 = CFStringCreateWithBytes(v23, (const UInt8 *)(v70 + 4), v71, 0x8000100u, 0);
                        if (!v72) {
                          goto LABEL_232;
                        }
                        CFStringRef v73 = v72;
                        CFDictionarySetValue(v25, @"IE_KEY_WPS_MODEL_NAME", v72);
                        CFRelease(v73);
                        unsigned int v74 = bswap32(*(unsigned __int16 *)(v70 + 2));
                        unint64_t v75 = v69 - HIWORD(v74) - 4;
                        if (v75 >= 4)
                        {
                          uint64_t v76 = v70 + 4 + HIWORD(v74);
                          CFIndex v77 = bswap32(*(unsigned __int16 *)(v76 + 2)) >> 16;
                          uint64_t v3 = 4294963396;
                          if (v77 > 0x20 || v77 + 4 > v75 || *(_WORD *)v76 != 9232) {
                            goto LABEL_228;
                          }
                          CFStringRef v78 = CFStringCreateWithBytes(v23, (const UInt8 *)(v76 + 4), v77, 0x8000100u, 0);
                          if (!v78) {
                            goto LABEL_232;
                          }
                          CFStringRef v79 = v78;
                          CFDictionarySetValue(v25, @"IE_KEY_WPS_MODEL_NUM", v78);
                          CFRelease(v79);
                          unsigned int v80 = bswap32(*(unsigned __int16 *)(v76 + 2));
                          unint64_t v81 = v75 - HIWORD(v80) - 4;
                          if (v81 >= 4)
                          {
                            uint64_t v82 = v76 + 4 + HIWORD(v80);
                            CFIndex v83 = bswap32(*(unsigned __int16 *)(v82 + 2)) >> 16;
                            uint64_t v3 = 4294963396;
                            if (v83 > 0x20 || v83 + 4 > v81 || *(_WORD *)v82 != 16912) {
                              goto LABEL_228;
                            }
                            CFStringRef v84 = CFStringCreateWithBytes(v23, (const UInt8 *)(v82 + 4), v83, 0x8000100u, 0);
                            if (!v84) {
                              goto LABEL_232;
                            }
                            CFStringRef v85 = v84;
                            CFDictionarySetValue(v25, @"IE_KEY_WPS_SERIAL_NUM", v84);
                            CFRelease(v85);
                            unsigned int v86 = bswap32(*(unsigned __int16 *)(v82 + 2));
                            unint64_t v87 = v81 - HIWORD(v86) - 4;
                            if (v87 >= 4)
                            {
                              uint64_t v88 = v82 + 4 + HIWORD(v86);
                              __int16 valuePtr = -21846;
                              uint64_t v89 = bswap32(*(unsigned __int16 *)(v88 + 2)) >> 16;
                              uint64_t v3 = 4294963396;
                              if (v89 < 8 || v89 + 4 > v87 || *(_WORD *)v88 != 21520) {
                                goto LABEL_228;
                              }
                              CFMutableDictionaryRef v90 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                              if (!v90) {
                                goto LABEL_232;
                              }
                              v91 = v90;
                              uint64_t v92 = v88 + 4;
                              __int16 valuePtr = bswap32(*(unsigned __int16 *)(v88 + 4)) >> 16;
                              CFNumberRef v93 = CFNumberCreate(v23, kCFNumberSInt16Type, &valuePtr);
                              if (!v93) {
                                goto LABEL_235;
                              }
                              CFNumberRef v94 = v93;
                              CFDictionarySetValue(v91, @"WPS_DEV_TYPE_CAT", v93);
                              CFRelease(v94);
                              CFDataRef v95 = CFDataCreate(v23, (const UInt8 *)(v88 + 6), 4);
                              if (!v95) {
                                goto LABEL_235;
                              }
                              CFDataRef v96 = v95;
                              CFDictionarySetValue(v91, @"WPS_DEV_TYPE_OUI", v95);
                              CFRelease(v96);
                              __int16 valuePtr = bswap32(*(unsigned __int16 *)(v88 + 10)) >> 16;
                              CFNumberRef v97 = CFNumberCreate(v23, kCFNumberSInt16Type, &valuePtr);
                              if (!v97) {
                                goto LABEL_235;
                              }
                              CFNumberRef v98 = v97;
                              CFDictionarySetValue(v91, @"WPS_DEV_TYPE_SUB_CAT", v97);
                              CFRelease(v98);
                              CFDictionarySetValue(v25, @"IE_KEY_WPS_PRIMARY_DEV_TYPE", v91);
                              unsigned int v99 = bswap32(*(unsigned __int16 *)(v88 + 2));
                              unint64_t v100 = v87 - HIWORD(v99) - 4;
                              if (v100 < 4) {
                                goto LABEL_236;
                              }
                              uint64_t v101 = v92 + HIWORD(v99);
                              CFIndex v102 = bswap32(*(unsigned __int16 *)(v101 + 2)) >> 16;
                              uint64_t v3 = 4294963396;
                              if (v102 > 0x20 || v102 + 4 > v100 || *(_WORD *)v101 != 4368) {
                                goto LABEL_124;
                              }
                              CFStringRef v103 = CFStringCreateWithBytes(v23, (const UInt8 *)(v101 + 4), v102, 0x8000100u, 0);
                              if (!v103) {
                                goto LABEL_235;
                              }
                              CFStringRef v104 = v103;
                              CFDictionarySetValue(v25, @"IE_KEY_WPS_DEV_NAME", v103);
                              CFRelease(v104);
                              unsigned int v105 = bswap32(*(unsigned __int16 *)(v101 + 2));
                              unint64_t v106 = v100 - HIWORD(v105) - 4;
                              if (v106 < 4)
                              {
LABEL_236:
                                uint64_t v3 = 4294963396;
                              }
                              else
                              {
                                uint64_t v107 = (_WORD *)(v101 + 4 + HIWORD(v105));
                                uint64_t v108 = bswap32((unsigned __int16)v107[1]) >> 16;
                                uint64_t v3 = 4294963396;
                                if (v108 >= 2 && v108 + 4 <= v106 && *v107 == 2064)
                                {
                                  __int16 valuePtr = bswap32((unsigned __int16)v107[2]) >> 16;
                                  CFNumberRef v109 = CFNumberCreate(v23, kCFNumberSInt16Type, &valuePtr);
                                  if (!v109) {
                                    goto LABEL_235;
                                  }
                                  CFNumberRef v110 = v109;
                                  CFDictionarySetValue(v25, @"IE_KEY_WPS_CFG_METHODS", v109);
                                  CFRelease(v110);
                                  unsigned int v111 = bswap32((unsigned __int16)v107[1]);
                                  unsigned int v112 = v106 - HIWORD(v111) - 4;
                                  if (v112 >= 4
                                    && (CFNumberRef v113 = (_WORD *)((char *)v107 + HIWORD(v111) + 4),
                                        (unint64_t)__rev16((unsigned __int16)v113[1]) + 4 <= v112)
                                    && v113[1]
                                    && *v113 == 15376)
                                  {
                                    CFNumberRef v114 = CFNumberCreate(v23, kCFNumberSInt8Type, v113 + 2);
                                    if (v114)
                                    {
                                      CFNumberRef v115 = v114;
                                      CFDictionarySetValue(v25, @"IE_KEY_WPS_RF_BANDS", v114);
                                      CFRelease(v115);
                                      goto LABEL_123;
                                    }
LABEL_235:
                                    uint64_t v3 = 4294963395;
                                  }
                                  else
                                  {
LABEL_123:
                                    CFDictionarySetValue(a3, @"WPS_PROB_RESP_IE", v25);
                                    uint64_t v3 = 0;
                                  }
                                }
                              }
LABEL_124:
                              CFRelease(v91);
                              goto LABEL_228;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_216;
              }
LABEL_231:
              uint64_t v3 = 4294963395;
              goto LABEL_229;
            }
LABEL_126:
            uint64_t v3 = 0;
            goto LABEL_229;
          }
          CFAllocatorRef v116 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFMutableDictionaryRef v117 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (!v117) {
            goto LABEL_231;
          }
          int v25 = v117;
          __int16 valuePtr = -21846;
          unsigned int v118 = v21[1];
          if ((unint64_t)__rev16(v118) + 4 > v20 || v118 == 0) {
            goto LABEL_216;
          }
          if (*v21 != 15120) {
            goto LABEL_216;
          }
          uint64_t v120 = v21 + 2;
          CFNumberRef v121 = CFNumberCreate(v116, kCFNumberSInt8Type, v21 + 2);
          CFDictionarySetValue(v25, @"IE_KEY_WPS_RESP_TYPE", v121);
          CFRelease(v121);
          unsigned int v122 = bswap32(v21[1]);
          unint64_t v123 = v20 - HIWORD(v122) - 4;
          if (v123 < 4) {
            goto LABEL_216;
          }
          int v124 = (const UInt8 *)v120 + HIWORD(v122);
          uint64_t v125 = bswap32(*((unsigned __int16 *)v124 + 1)) >> 16;
          if (v125 < 0x10 || v125 + 4 > v123) {
            goto LABEL_216;
          }
          int v127 = *(unsigned __int16 *)v124;
          if (v127 == 18192)
          {
            CFNumberRef v128 = @"IE_KEY_WPS_UUID_E";
          }
          else
          {
            if (v127 != 18448) {
              goto LABEL_216;
            }
            CFNumberRef v128 = @"IE_KEY_WPS_UUID_R";
          }
          CFDataRef v129 = CFDataCreate(v116, v124 + 4, 16);
          if (!v129) {
            goto LABEL_232;
          }
          CFDataRef v130 = v129;
          CFDictionarySetValue(v25, v128, v129);
          CFRelease(v130);
          unsigned int v131 = bswap32(*((unsigned __int16 *)v124 + 1));
          unsigned int v132 = v123 - HIWORD(v131) - 4;
          if (v132 < 4) {
            goto LABEL_216;
          }
          BOOL v133 = &v124[HIWORD(v131) + 4];
          unsigned int v134 = *((unsigned __int16 *)v133 + 1);
          BOOL v135 = (unint64_t)__rev16(v134) + 4 > v132 || v134 == 0;
          if (v135 || *(_WORD *)v133 != 17424) {
            goto LABEL_216;
          }
          CFNumberRef v136 = CFNumberCreate(v116, kCFNumberSInt8Type, v133 + 4);
          if (!v136) {
            goto LABEL_232;
          }
          CFNumberRef v137 = v136;
          CFDictionarySetValue(v25, @"IE_KEY_WPS_SC_STATE", v136);
          CFRelease(v137);
          unsigned int v138 = bswap32(*((unsigned __int16 *)v133 + 1));
          unint64_t v139 = v132 - HIWORD(v138) - 4;
          if (v139 < 4) {
            goto LABEL_216;
          }
          uint64_t v140 = (uint64_t)&v133[HIWORD(v138) + 4];
          CFIndex v141 = bswap32(*(unsigned __int16 *)(v140 + 2)) >> 16;
          uint64_t v3 = 4294963396;
          if (v141 > 0x40 || v141 + 4 > v139 || *(_WORD *)v140 != 8464) {
            goto LABEL_228;
          }
          CFStringRef v142 = CFStringCreateWithBytes(v116, (const UInt8 *)(v140 + 4), v141, 0x8000100u, 0);
          if (!v142) {
            goto LABEL_232;
          }
          CFStringRef v143 = v142;
          CFDictionarySetValue(v25, @"IE_KEY_WPS_MANUFACTURER", v142);
          CFRelease(v143);
          unsigned int v144 = bswap32(*(unsigned __int16 *)(v140 + 2));
          unint64_t v145 = v139 - HIWORD(v144) - 4;
          if (v145 < 4) {
            goto LABEL_216;
          }
          uint64_t v146 = v140 + 4 + HIWORD(v144);
          CFIndex v147 = bswap32(*(unsigned __int16 *)(v146 + 2)) >> 16;
          uint64_t v3 = 4294963396;
          if (v147 > 0x20 || v147 + 4 > v145 || *(_WORD *)v146 != 8976) {
            goto LABEL_228;
          }
          CFStringRef v148 = CFStringCreateWithBytes(v116, (const UInt8 *)(v146 + 4), v147, 0x8000100u, 0);
          if (!v148) {
            goto LABEL_232;
          }
          CFStringRef v149 = v148;
          CFDictionarySetValue(v25, @"IE_KEY_WPS_MODEL_NAME", v148);
          CFRelease(v149);
          unsigned int v150 = bswap32(*(unsigned __int16 *)(v146 + 2));
          unint64_t v151 = v145 - HIWORD(v150) - 4;
          if (v151 < 4) {
            goto LABEL_216;
          }
          uint64_t v152 = v146 + 4 + HIWORD(v150);
          CFIndex v153 = bswap32(*(unsigned __int16 *)(v152 + 2)) >> 16;
          uint64_t v3 = 4294963396;
          if (v153 > 0x20 || v153 + 4 > v151 || *(_WORD *)v152 != 9232) {
            goto LABEL_228;
          }
          CFStringRef v154 = CFStringCreateWithBytes(v116, (const UInt8 *)(v152 + 4), v153, 0x8000100u, 0);
          if (!v154) {
            goto LABEL_232;
          }
          CFStringRef v155 = v154;
          CFDictionarySetValue(v25, @"IE_KEY_WPS_MODEL_NUM", v154);
          CFRelease(v155);
          unsigned int v156 = bswap32(*(unsigned __int16 *)(v152 + 2));
          unint64_t v157 = v151 - HIWORD(v156) - 4;
          if (v157 < 4) {
            goto LABEL_216;
          }
          uint64_t v158 = v152 + 4 + HIWORD(v156);
          CFIndex v159 = bswap32(*(unsigned __int16 *)(v158 + 2)) >> 16;
          uint64_t v3 = 4294963396;
          if (v159 > 0x20 || v159 + 4 > v157 || *(_WORD *)v158 != 16912) {
            goto LABEL_228;
          }
          CFStringRef v160 = CFStringCreateWithBytes(v116, (const UInt8 *)(v158 + 4), v159, 0x8000100u, 0);
          if (!v160) {
            goto LABEL_232;
          }
          CFStringRef v161 = v160;
          CFDictionarySetValue(v25, @"IE_KEY_WPS_SERIAL_NUM", v160);
          CFRelease(v161);
          unsigned int v162 = bswap32(*(unsigned __int16 *)(v158 + 2));
          unint64_t v163 = v157 - HIWORD(v162) - 4;
          if (v163 < 4) {
            goto LABEL_216;
          }
          uint64_t v164 = v158 + 4 + HIWORD(v162);
          uint64_t v165 = bswap32(*(unsigned __int16 *)(v164 + 2)) >> 16;
          uint64_t v3 = 4294963396;
          if (v165 < 8 || v165 + 4 > v163 || *(_WORD *)v164 != 21520) {
            goto LABEL_228;
          }
          CFMutableDictionaryRef v166 = CFDictionaryCreateMutable(v116, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (!v166) {
            goto LABEL_232;
          }
          v167 = v166;
          __int16 valuePtr = bswap32(*(unsigned __int16 *)(v164 + 4)) >> 16;
          CFNumberRef v168 = CFNumberCreate(v116, kCFNumberSInt16Type, &valuePtr);
          if (!v168) {
            goto LABEL_234;
          }
          CFNumberRef v169 = v168;
          CFDictionarySetValue(v167, @"WPS_DEV_TYPE_CAT", v168);
          CFRelease(v169);
          CFDataRef v170 = CFDataCreate(v116, (const UInt8 *)(v164 + 6), 4);
          if (!v170
            || (CFDataRef v171 = v170,
                CFDictionarySetValue(v167, @"WPS_DEV_TYPE_OUI", v170),
                CFRelease(v171),
                __int16 valuePtr = bswap32(*(unsigned __int16 *)(v164 + 10)) >> 16,
                (CFNumberRef v172 = CFNumberCreate(v116, kCFNumberSInt16Type, &valuePtr)) == 0))
          {
LABEL_234:
            CFRelease(v25);
            uint64_t v3 = 4294963395;
            int v25 = v167;
            goto LABEL_228;
          }
          CFNumberRef v173 = v172;
          CFDictionarySetValue(v167, @"WPS_DEV_TYPE_SUB_CAT", v172);
          CFRelease(v173);
          CFDictionarySetValue(v25, @"IE_KEY_WPS_PRIMARY_DEV_TYPE", v167);
          CFRelease(v167);
          unsigned int v174 = bswap32(*(unsigned __int16 *)(v164 + 2));
          unint64_t v175 = v163 - HIWORD(v174) - 4;
          if (v175 < 4) {
            goto LABEL_216;
          }
          uint64_t v176 = v164 + 4 + HIWORD(v174);
          CFIndex v177 = bswap32(*(unsigned __int16 *)(v176 + 2)) >> 16;
          uint64_t v3 = 4294963396;
          if (v177 > 0x20 || v177 + 4 > v175 || *(_WORD *)v176 != 4368) {
            goto LABEL_228;
          }
          CFStringRef v178 = CFStringCreateWithBytes(v116, (const UInt8 *)(v176 + 4), v177, 0x8000100u, 0);
          if (!v178) {
            goto LABEL_232;
          }
          CFStringRef v179 = v178;
          CFDictionarySetValue(v25, @"IE_KEY_WPS_DEV_NAME", v178);
          CFRelease(v179);
          unsigned int v180 = bswap32(*(unsigned __int16 *)(v176 + 2));
          unsigned int v181 = v175 - HIWORD(v180) - 4;
          if (v181 < 6) {
            goto LABEL_216;
          }
          char v182 = (_WORD *)(v176 + 4 + HIWORD(v180));
          if (*v182 != 2064) {
            goto LABEL_216;
          }
          __int16 valuePtr = bswap32((unsigned __int16)v182[2]) >> 16;
          CFNumberRef v183 = CFNumberCreate(v116, kCFNumberSInt16Type, &valuePtr);
          if (!v183) {
            goto LABEL_232;
          }
          CFNumberRef v184 = v183;
          CFDictionarySetValue(v25, @"IE_KEY_WPS_CFG_METHODS", v183);
          CFRelease(v184);
          unsigned int v185 = bswap32((unsigned __int16)v182[1]);
          unsigned int v186 = v181 - HIWORD(v185) - 4;
          if (v186 < 5 || (uint64_t v187 = (uint64_t)v182 + HIWORD(v185) + 4, *(_WORD *)v187 != 16656))
          {
LABEL_216:
            uint64_t v3 = 4294963396;
            goto LABEL_228;
          }
          int v189 = *(unsigned __int8 *)(v187 + 4);
          uint64_t v188 = v187 + 4;
          v190 = (const void *)*MEMORY[0x263EFFB40];
          int v191 = (const void *)*MEMORY[0x263EFFB38];
          if (v189) {
            __int16 v192 = (const void *)*MEMORY[0x263EFFB40];
          }
          else {
            __int16 v192 = (const void *)*MEMORY[0x263EFFB38];
          }
          CFDictionarySetValue(v25, @"IE_KEY_WPS_SEL_REG", v192);
          unsigned int v193 = bswap32(*(unsigned __int16 *)(v188 - 2));
          unsigned int v194 = v186 - HIWORD(v193) - 4;
          if (v194 >= 5)
          {
            v195 = (const UInt8 *)(v188 + HIWORD(v193));
            if (*(_WORD *)v195 == 22288)
            {
              int v197 = v195[4];
              v196 = (unsigned __int16 *)(v195 + 4);
              if (v197) {
                v198 = v190;
              }
              else {
                v198 = v191;
              }
              CFDictionarySetValue(v25, @"IE_KEY_WPS_AP_SETUP_LOCKED", v198);
              unsigned int v199 = bswap32(*(v196 - 1));
              v195 = (const UInt8 *)v196 + HIWORD(v199);
              unsigned int v194 = v194 - HIWORD(v199) - 4;
            }
            if (v194 >= 6)
            {
              int v200 = *(unsigned __int16 *)v195;
              if (v200 == 21264 || v200 == 21249)
              {
                __int16 valuePtr = bswap32(*((unsigned __int16 *)v195 + 2)) >> 16;
                CFNumberRef v201 = CFNumberCreate(v116, kCFNumberSInt16Type, &valuePtr);
                if (!v201) {
                  goto LABEL_232;
                }
                CFNumberRef v202 = v201;
                CFDictionarySetValue(v25, @"IE_KEY_WPS_REG_CFG_METHODS", v201);
                CFRelease(v202);
                unsigned int v203 = bswap32(*((unsigned __int16 *)v195 + 1));
                unsigned int v194 = v194 - HIWORD(v203) - 4;
                if (v194 >= 6)
                {
                  v195 += HIWORD(v203) + 4;
                  int v200 = *(unsigned __int16 *)v195;
                  goto LABEL_203;
                }
              }
              else
              {
LABEL_203:
                if (v200 == 4624)
                {
                  __int16 valuePtr = bswap32(*((unsigned __int16 *)v195 + 2)) >> 16;
                  CFNumberRef v204 = CFNumberCreate(v116, kCFNumberSInt16Type, &valuePtr);
                  if (!v204) {
                    goto LABEL_232;
                  }
                  CFNumberRef v205 = v204;
                  CFDictionarySetValue(v25, @"IE_KEY_WPS_DEV_PW_ID", v204);
                  CFRelease(v205);
                  unsigned int v206 = bswap32(*((unsigned __int16 *)v195 + 1));
                  v195 += HIWORD(v206) + 4;
                  unsigned int v194 = v194 - HIWORD(v206) - 4;
                }
                if (v194 >= 0x14 && *(_WORD *)v195 == 6672)
                {
                  CFDataRef v207 = CFDataCreate(v116, v195 + 4, 16);
                  if (!v207) {
                    goto LABEL_232;
                  }
                  CFDataRef v208 = v207;
                  CFDictionarySetValue(v25, @"IE_KEY_WPS_ENRL_NONCE", v207);
                  CFRelease(v208);
                }
              }
            }
          }
          v209 = @"WPS_PROB_RESP_IE";
          goto LABEL_227;
        }
      }
    }
    return 0;
  }
  return v3;
}

uint64_t Apple80211ParseVHT_IE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (!a1 || !a3) {
    return v3;
  }
  if (a2 < 3) {
    return 0;
  }
  unsigned int v5 = a1;
  while (*v5 != 192)
  {
    unsigned int v7 = v5[1];
    unsigned int v6 = a2 - 2;
LABEL_13:
    a2 = v6 - v7;
    v5 += v7 + 2;
    if ((int)(v6 - v7) <= 2) {
      return 0;
    }
  }
  unsigned int v6 = a2 - 2;
  unsigned int v7 = v5[1];
  if (v7 < 5 || v6 < v7) {
    goto LABEL_13;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 4294963395;
  }
  int v12 = Mutable;
  __int16 v21 = -21846;
  unsigned __int8 valuePtr = v5[2];
  CFNumberRef v13 = CFNumberCreate(v10, kCFNumberSInt8Type, &valuePtr);
  if (!v13) {
    goto LABEL_23;
  }
  CFNumberRef v14 = v13;
  CFDictionarySetValue(v12, @"VHT_CHAN_WIDTH", v13);
  CFRelease(v14);
  unsigned __int8 valuePtr = v5[3];
  CFNumberRef v15 = CFNumberCreate(v10, kCFNumberSInt8Type, &valuePtr);
  if (!v15) {
    goto LABEL_23;
  }
  CFNumberRef v16 = v15;
  CFDictionarySetValue(v12, @"VHT_CENTER_CHAN_SEGMENT0", v15);
  CFRelease(v16);
  unsigned __int8 valuePtr = v5[4];
  CFNumberRef v17 = CFNumberCreate(v10, kCFNumberSInt8Type, &valuePtr);
  if (!v17) {
    goto LABEL_23;
  }
  CFNumberRef v18 = v17;
  CFDictionarySetValue(v12, @"VHT_CENTER_CHAN_SEGMENT1", v17);
  CFRelease(v18);
  __int16 v21 = *(_WORD *)(v5 + 5);
  CFNumberRef v19 = CFNumberCreate(v10, kCFNumberSInt16Type, &v21);
  if (v19)
  {
    CFNumberRef v20 = v19;
    CFDictionarySetValue(v12, @"VHT_BASIC_MCS_SET", v19);
    CFRelease(v20);
    CFDictionarySetValue(a3, @"VHT_IE", v12);
    uint64_t v3 = 0;
  }
  else
  {
LABEL_23:
    uint64_t v3 = 4294963395;
  }
  CFRelease(v12);
  return v3;
}

uint64_t Apple80211ParseVHT_Caps(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (!a1 || !a3) {
    return v3;
  }
  if (a2 < 3) {
    return 0;
  }
  unsigned int v5 = a1;
  while (*v5 != 191)
  {
    unsigned int v7 = v5[1];
    unsigned int v6 = a2 - 2;
LABEL_13:
    a2 = v6 - v7;
    v5 += v7 + 2;
    if ((int)(v6 - v7) <= 2) {
      return 0;
    }
  }
  unsigned int v6 = a2 - 2;
  unsigned int v7 = v5[1];
  if (v7 < 0xC || v6 < v7) {
    goto LABEL_13;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 4294963395;
  }
  int v12 = Mutable;
  int valuePtr = *(_DWORD *)(v5 + 2);
  CFNumberRef v13 = CFNumberCreate(v10, kCFNumberSInt32Type, &valuePtr);
  if (v13
    && (CFNumberRef v14 = v13,
        CFDictionarySetValue(v12, @"VHT_CAPS", v13),
        CFRelease(v14),
        (CFDataRef v15 = CFDataCreate(v10, v5 + 6, 8)) != 0))
  {
    CFDataRef v16 = v15;
    CFDictionarySetValue(v12, @"VHT_SUPPORTED_MCS_SET", v15);
    CFRelease(v16);
    CFDictionarySetValue(a3, @"VHT_CAPS_IE", v12);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 4294963395;
  }
  CFRelease(v12);
  return v3;
}

uint64_t Apple80211ParseSES_IE(unsigned __int8 *a1, signed int a2, __CFDictionary *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (a1 && a3)
  {
    if (a2 < 2)
    {
      return 0;
    }
    else
    {
      unsigned int v5 = a1;
      while (1)
      {
        unsigned int v6 = v5[1];
        BOOL v7 = *v5 == 221 && v6 >= 7;
        if (v7 && (int)(v6 + 2) <= a2 && *(_DWORD *)(v5 + 2) == 21794816 && v5[6] == 1) {
          break;
        }
        a2 = a2 - v6 - 2;
        if (a2 >= 1)
        {
          CFAllocatorRef v10 = &v5[v5[1]];
          unsigned int v5 = v10 + 2;
          if (v10[3] + 2 <= a2) {
            continue;
          }
        }
        return 0;
      }
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFNumberRef v14 = Mutable;
        int valuePtr = v5[9];
        CFNumberRef v15 = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
        if (v15)
        {
          CFNumberRef v16 = v15;
          CFDictionarySetValue(v14, @"IE_KEY_SES_VERSION", v15);
          CFRelease(v16);
          if (v5[9] == 16)
          {
            CFNumberRef v17 = (const void *)*MEMORY[0x263EFFB40];
            uint64_t v18 = (const void *)*MEMORY[0x263EFFB38];
            if (v5[10]) {
              CFNumberRef v19 = (const void *)*MEMORY[0x263EFFB40];
            }
            else {
              CFNumberRef v19 = (const void *)*MEMORY[0x263EFFB38];
            }
            CFDictionarySetValue(v14, @"IE_KEY_SES_RWO", v19);
            if ((v5[10] & 2) != 0) {
              CFNumberRef v20 = v17;
            }
            else {
              CFNumberRef v20 = v18;
            }
            CFDictionarySetValue(v14, @"IE_KEY_SES_WDS_RWO", v20);
          }
          CFDictionarySetValue(a3, @"SES_IE", v14);
          uint64_t v3 = 0;
        }
        else
        {
          uint64_t v3 = 4294963395;
        }
        CFRelease(v14);
      }
      else
      {
        return 4294963395;
      }
    }
  }
  return v3;
}

uint64_t Apple80211ParseRNRIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (!a1 || !a3) {
    return v3;
  }
  if (a2 < 2) {
    return 0;
  }
  unsigned int v5 = a1;
  while (1)
  {
    uint64_t v6 = v5[1];
    BOOL v7 = a2 >= (v6 + 2);
    a2 -= v6 + 2;
    if (!v7) {
      return 0;
    }
    if (v6 >= 4 && *v5 == 201) {
      break;
    }
    v5 += v6 + 2;
    if (a2 <= 1) {
      return 0;
    }
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 4294963395;
  }
  unsigned int v11 = Mutable;
  uint64_t v58 = a3;
  CFMutableArrayRef v60 = CFArrayCreateMutable(v9, 0, MEMORY[0x263EFFF70]);
  if (!v60)
  {
    uint64_t v3 = 4294963395;
    goto LABEL_95;
  }
  uint64_t v59 = v11;
  unsigned int v12 = v5[1];
  if (v12 < 4) {
    goto LABEL_88;
  }
  CFNumberRef v13 = v5 + 2;
  unsigned int v62 = (const void *)*MEMORY[0x263EFFB40];
  CFNumberRef v14 = (const void *)*MEMORY[0x263EFFB38];
  while (2)
  {
    CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v15)
    {
      uint64_t v3 = 4294963395;
      unsigned int v11 = v59;
      goto LABEL_94;
    }
    CFNumberRef v16 = v15;
    unsigned __int16 v17 = *(_WORD *)v13;
    char valuePtr = *(_WORD *)v13 & 2;
    CFNumberRef v18 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
    if (!v18) {
      goto LABEL_96;
    }
    CFNumberRef v19 = v18;
    CFDictionarySetValue(v16, @"TYPE", v18);
    CFRelease(v19);
    if ((v17 & 4) != 0) {
      CFNumberRef v20 = v62;
    }
    else {
      CFNumberRef v20 = v14;
    }
    CFDictionarySetValue(v16, @"FILTERED_AP", v20);
    if ((v17 & 8) != 0) {
      __int16 v21 = v62;
    }
    else {
      __int16 v21 = v14;
    }
    CFDictionarySetValue(v16, @"COLOCATED_AP", v21);
    uint64_t v22 = HIBYTE(v17);
    unsigned int v63 = v17 >> 4;
    unsigned int v23 = HIBYTE(v17) * v63 + HIBYTE(v17);
    if (v23 > v12)
    {
      uint64_t v3 = 4294963392;
      goto LABEL_100;
    }
    unsigned __int8 v70 = v13[2];
    CFNumberRef v24 = CFNumberCreate(v9, kCFNumberSInt8Type, &v70);
    if (!v24
      || (CFNumberRef v25 = v24,
          CFDictionarySetValue(v16, @"OPERATING_CLASS", v24),
          CFRelease(v25),
          unsigned __int8 v69 = v13[3],
          (CFNumberRef v26 = CFNumberCreate(v9, kCFNumberSInt8Type, &v69)) == 0))
    {
LABEL_96:
      uint64_t v3 = 4294963395;
LABEL_100:
      unsigned int v11 = v59;
LABEL_93:
      CFRelease(v16);
LABEL_94:
      CFRelease(v60);
      goto LABEL_95;
    }
    CFNumberRef v27 = v26;
    CFDictionarySetValue(v16, @"CHANNEL", v26);
    CFRelease(v27);
    int v68 = 2;
    int v68 = _channelFlagsFromIEEEOperatingClass(v13[2]) & 0x2018 | 2;
    CFNumberRef v28 = CFNumberCreate(v9, kCFNumberSInt32Type, &v68);
    if (!v28) {
      goto LABEL_97;
    }
    CFNumberRef v29 = v28;
    CFDictionarySetValue(v16, @"CHANNEL_FLAGS", v28);
    CFRelease(v29);
    v12 -= 4;
    if (v12 < v23)
    {
      CFNumberRef v28 = 0;
      uint64_t v3 = 4294963392;
LABEL_91:
      unsigned int v11 = v59;
      if (v28) {
LABEL_92:
      }
        CFRelease(v28);
      goto LABEL_93;
    }
    CFNumberRef v28 = CFArrayCreateMutable(v9, 0, MEMORY[0x263EFFF70]);
    if (!v28)
    {
LABEL_97:
      uint64_t v3 = 4294963395;
      goto LABEL_91;
    }
    CFArrayRef theArray = v28;
    theDict = v16;
    unsigned int v30 = 0;
    v13 += 4;
    BOOL v33 = (v17 & 0xFB00) == 0x200 || (v17 & 0xFE00) == 2048 || HIBYTE(v17) == 12;
    unsigned __int16 v64 = v17;
    BOOL v65 = v33;
    do
    {
      CFMutableDictionaryRef v34 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (!v34)
      {
        uint64_t v3 = 4294963395;
        CFNumberRef v16 = theDict;
        CFNumberRef v28 = theArray;
        goto LABEL_91;
      }
      unint64_t v35 = v34;
      BOOL v36 = (const ether_addr *)v13;
      if (v17 < 0x100u) {
        goto LABEL_46;
      }
      LOBYTE(v67) = -86;
      LOBYTE(v67) = *v13;
      CFNumberRef v37 = CFNumberCreate(v9, kCFNumberSInt8Type, &v67);
      if (!v37) {
        goto LABEL_89;
      }
      CFNumberRef v38 = v37;
      CFDictionarySetValue(v35, @"TBTT_OFFSET", v37);
      CFRelease(v38);
      BOOL v36 = (const ether_addr *)(v13 + 1);
      if (v17 <= 0xCFFu)
      {
LABEL_46:
        if (v22 > 0xC || ((1 << v22) & 0x1B80) == 0) {
          goto LABEL_52;
        }
        char v39 = 0;
      }
      else
      {
        char v39 = 1;
      }
      unsigned int v40 = ether_ntoa(v36);
      if (!v40 || (CFStringRef v41 = CFStringCreateWithCString(v9, v40, 0x8000100u)) == 0)
      {
LABEL_89:
        CFRelease(v35);
        uint64_t v3 = 4294963395;
        unsigned int v11 = v59;
        CFNumberRef v16 = theDict;
        CFNumberRef v28 = theArray;
        goto LABEL_92;
      }
      CFStringRef v42 = v41;
      CFDictionarySetValue(v35, @"BSSID", v41);
      CFRelease(v42);
      ++v36;
      if ((v39 & 1) == 0)
      {
LABEL_52:
        int v43 = 0;
        if (v22 > 0xC || ((1 << v22) & 0x1860) == 0) {
          goto LABEL_56;
        }
        goto LABEL_54;
      }
      int v43 = 1;
LABEL_54:
      int v67 = -1431655766;
      int v67 = *(_DWORD *)v36->octet;
      CFNumberRef v44 = CFNumberCreate(v9, kCFNumberSInt32Type, &v67);
      if (!v44) {
        goto LABEL_89;
      }
      CFNumberRef v45 = v44;
      CFDictionarySetValue(v35, @"SHORT_SSID", v44);
      CFRelease(v45);
      BOOL v36 = (const ether_addr *)((char *)v36 + 4);
LABEL_56:
      if ((v65 | v43) == 1)
      {
        LOBYTE(v67) = -86;
        LOBYTE(v67) = v36->octet[0];
        CFNumberRef v46 = CFNumberCreate(v9, kCFNumberSInt8Type, &v67);
        if (!v46) {
          goto LABEL_89;
        }
        CFNumberRef v47 = v46;
        CFDictionarySetValue(v35, @"BSS_PARAMS", v46);
        CFRelease(v47);
        if (v67) {
          unsigned int v48 = v62;
        }
        else {
          unsigned int v48 = v14;
        }
        CFDictionarySetValue(v35, @"OCT_RECOMMENDED", v48);
        if ((v67 & 2) != 0) {
          int v49 = v62;
        }
        else {
          int v49 = v14;
        }
        CFDictionarySetValue(v35, @"SAME_SSID", v49);
        if ((v67 & 4) != 0) {
          CFNumberRef v50 = v62;
        }
        else {
          CFNumberRef v50 = v14;
        }
        CFDictionarySetValue(v35, @"MULTIPLE_BSSID", v50);
        if ((v67 & 8) != 0) {
          CFNumberRef v51 = v62;
        }
        else {
          CFNumberRef v51 = v14;
        }
        CFDictionarySetValue(v35, @"TRANSMITTED_BSSID", v51);
        if ((v67 & 0x10) != 0) {
          unsigned int v52 = v62;
        }
        else {
          unsigned int v52 = v14;
        }
        CFDictionarySetValue(v35, @"MEMBER_OF_ESS_WITH_2GHZ_OR_5GHZ_COLOCATED_AP", v52);
        if ((v67 & 0x20) != 0) {
          int v53 = v62;
        }
        else {
          int v53 = v14;
        }
        CFDictionarySetValue(v35, @"UPR_ACTIVE", v53);
        if ((v67 & 0x40) != 0) {
          CFNumberRef v54 = v62;
        }
        else {
          CFNumberRef v54 = v14;
        }
        CFDictionarySetValue(v35, @"COLOCATED_AP", v54);
        BOOL v36 = (const ether_addr *)((char *)v36 + 1);
      }
      char v55 = v43 ^ 1;
      if (v22 == 9) {
        char v55 = 0;
      }
      unsigned __int16 v17 = v64;
      if ((v55 & 1) == 0)
      {
        LOBYTE(v67) = -86;
        LOBYTE(v67) = v36->octet[0];
        CFNumberRef v56 = CFNumberCreate(v9, kCFNumberSInt8Type, &v67);
        if (!v56) {
          goto LABEL_89;
        }
        CFNumberRef v57 = v56;
        CFDictionarySetValue(v35, @"20MHZ_PSD", v56);
        CFRelease(v57);
      }
      CFArrayAppendValue(theArray, v35);
      CFRelease(v35);
      v13 += v22;
      v12 -= v22;
      BOOL v7 = v30++ >= v63;
    }
    while (!v7);
    CFDictionarySetValue(theDict, @"TBTT_INFO_SET", theArray);
    CFRelease(theArray);
    CFArrayAppendValue(v60, theDict);
    CFRelease(theDict);
    if ((int)v12 > 3) {
      continue;
    }
    break;
  }
LABEL_88:
  unsigned int v11 = v59;
  CFDictionarySetValue(v59, @"NEIGHBOR_AP_INFO_LIST", v60);
  CFRelease(v60);
  CFDictionarySetValue(v58, @"RNR_IE", v59);
  uint64_t v3 = 0;
LABEL_95:
  CFRelease(v11);
  return v3;
}

uint64_t Apple80211ParseQBSSLoadIE(unsigned char *a1, int a2, __CFDictionary *a3)
{
  uint64_t v3 = 4294963396;
  if (a1 && a3)
  {
    if (!a2) {
      return 0;
    }
    if (a2 > 2048) {
      return v3;
    }
    if (a2 < 3) {
      return 0;
    }
    unsigned int v5 = a1;
    while (1)
    {
      unsigned int v6 = v5[1];
      int v7 = a2 - 2 - v6;
      if (a2 - 2 < v6) {
        return 4294963396;
      }
      BOOL v8 = *v5 == 11 && v6 >= 5;
      if (v8 && v6 + 2 <= a2) {
        break;
      }
      if (v7 > 0) {
        v5 += v5[1] + 2;
      }
      a2 = a2 - 2 - v6;
      if (v7 <= 2) {
        return 0;
      }
    }
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      unsigned int v12 = Mutable;
      CFNumberRef v13 = CFNumberCreate(v10, kCFNumberSInt16Type, v5 + 2);
      if (!v13) {
        goto LABEL_28;
      }
      CFNumberRef v14 = v13;
      CFDictionarySetValue(v12, @"QBSS_STA_COUNT", v13);
      CFRelease(v14);
      CFNumberRef v15 = CFNumberCreate(v10, kCFNumberSInt8Type, v5 + 4);
      if (!v15) {
        goto LABEL_28;
      }
      CFNumberRef v16 = v15;
      CFDictionarySetValue(v12, @"QBSS_CHAN_UTIL", v15);
      CFRelease(v16);
      CFNumberRef v17 = CFNumberCreate(v10, kCFNumberSInt16Type, v5 + 5);
      if (v17)
      {
        CFNumberRef v18 = v17;
        CFDictionarySetValue(v12, @"QBSS_AAC", v17);
        CFRelease(v18);
        CFDictionarySetValue(a3, @"QBSS_LOAD_IE", v12);
        uint64_t v3 = 0;
      }
      else
      {
LABEL_28:
        uint64_t v3 = 4294963395;
      }
      CFRelease(v12);
    }
    else
    {
      return 4294963395;
    }
  }
  return v3;
}

uint64_t Apple80211ParseMobilityDomainIE(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t result = 4294963396;
  if (!a1 || !a3) {
    return result;
  }
  if (!a2) {
    return 0;
  }
  if (a2 > 2048) {
    return result;
  }
  if (a2 < 3) {
    return 0;
  }
  while (*(unsigned char *)a1 != 54)
  {
    unsigned int v7 = *(unsigned __int8 *)(a1 + 1);
    unsigned int v6 = a2 - 2;
LABEL_14:
    a2 = v6 - v7;
    a1 += v7 + 2;
    if ((int)(v6 - v7) <= 2) {
      return 0;
    }
  }
  unsigned int v6 = a2 - 2;
  unsigned int v7 = *(unsigned __int8 *)(a1 + 1);
  if (v7 < 3 || v6 < v7) {
    goto LABEL_14;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  __int16 valuePtr = *(_WORD *)(a1 + 2);
  CFNumberRef v11 = CFNumberCreate(v9, kCFNumberSInt16Type, &valuePtr);
  CFDictionarySetValue(Mutable, @"MOBILITY_DOMAIN_IDENTIFIER", v11);
  CFRelease(v11);
  unsigned int v12 = (const void *)*MEMORY[0x263EFFB40];
  CFNumberRef v13 = (const void *)*MEMORY[0x263EFFB38];
  if (*(unsigned char *)(a1 + 4)) {
    CFNumberRef v14 = (const void *)*MEMORY[0x263EFFB40];
  }
  else {
    CFNumberRef v14 = (const void *)*MEMORY[0x263EFFB38];
  }
  CFDictionarySetValue(Mutable, @"MOBILITY_DOMAIN_FT_OVER_DS", v14);
  if ((*(unsigned char *)(a1 + 4) & 2) != 0) {
    CFNumberRef v15 = v12;
  }
  else {
    CFNumberRef v15 = v13;
  }
  CFDictionarySetValue(Mutable, @"MOBILITY_DOMAIN_RESOURCE_REQ_PROTO", v15);
  CFDictionarySetValue(a3, @"MOBILITY_DOMAIN_IE", Mutable);
  CFRelease(Mutable);
  return 0;
}

uint64_t Apple80211ParseMBOOCEIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (!a1 || !a3) {
    return v3;
  }
  if (a2 < 2) {
    return 0;
  }
  unsigned int v6 = a1;
  while (1)
  {
    uint64_t v3 = 0;
    if (a2 < 6) {
      return v3;
    }
    uint64_t v7 = v6[1];
    BOOL v8 = a2 >= (v7 + 2);
    a2 -= v7 + 2;
    if (!v8) {
      return v3;
    }
    if (v7 >= 4 && *v6 == 221 && v6[2] == 80 && v6[3] == 111 && v6[4] == 154 && v6[5] == 22) {
      break;
    }
    uint64_t v3 = 0;
    v6 += v7 + 2;
    if (a2 <= 1) {
      return v3;
    }
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 4294963395;
  }
  CFMutableDictionaryRef v11 = Mutable;
  unsigned int v12 = v6[1];
  if (v12 < 6)
  {
    CFNumberRef v13 = 0;
    CFNumberRef v14 = 0;
LABEL_74:
    CFDictionarySetValue(a3, @"MBO_OCE_IE", v11);
    uint64_t v3 = 0;
    CFNumberRef v27 = 0;
    CFNumberRef v19 = 0;
    goto LABEL_75;
  }
  CFNumberRef v13 = 0;
  CFNumberRef v14 = 0;
  int v15 = v12 - 4;
  CFNumberRef v16 = v6 + 6;
  BOOL v33 = (const void *)*MEMORY[0x263EFFB38];
  CFMutableDictionaryRef v34 = (const void *)*MEMORY[0x263EFFB40];
  CFMutableDictionaryRef v31 = Mutable;
  while (2)
  {
    uint64_t v17 = v16[1];
    uint64_t v18 = v17 + 2;
    BOOL v8 = v15 >= (v17 + 2);
    v15 -= v17 + 2;
    if (!v8)
    {
LABEL_86:
      CFNumberRef v27 = 0;
      CFNumberRef v19 = 0;
      uint64_t v3 = 4294963392;
      goto LABEL_75;
    }
    switch(*v16)
    {
      case 1:
        if (v17 != 1) {
          goto LABEL_86;
        }
        LOBYTE(valuePtr) = v16[2];
        CFNumberRef v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
        if (!v19) {
          goto LABEL_87;
        }
        CFDictionarySetValue(v11, @"AP_CAP", v19);
        CFRelease(v19);
        if ((valuePtr & 0x40) != 0) {
          CFNumberRef v20 = v34;
        }
        else {
          CFNumberRef v20 = v33;
        }
        CFDictionarySetValue(v11, @"AP_CAP_CELL_DATA_AWARE", v20);
        goto LABEL_67;
      case 2:
        if ((v17 - 1) < 2) {
          goto LABEL_86;
        }
        if (!v14 && (CFNumberRef v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x263EFFF70])) == 0
          || (theDict = CFDictionaryCreateMutable(v9, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90])) == 0)
        {
          CFNumberRef v27 = 0;
          CFNumberRef v19 = 0;
LABEL_88:
          uint64_t v3 = 4294963395;
          goto LABEL_75;
        }
        if (!v17)
        {
          CFNumberRef v27 = theDict;
LABEL_70:
          CFArrayAppendValue(v14, v27);
          CFNumberRef v30 = v27;
LABEL_66:
          CFRelease(v30);
LABEL_67:
          v16 += v18;
          if (v15 <= 1)
          {
            if (v14) {
              CFDictionarySetValue(v11, @"NON_PREF_CHANNEL_REPORT_LIST", v14);
            }
            goto LABEL_74;
          }
          continue;
        }
        unsigned __int8 v39 = v16[2];
        CFNumberRef v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &v39);
        if (!v19)
        {
          uint64_t v3 = 4294963395;
          goto LABEL_85;
        }
        CFDictionarySetValue(theDict, @"OPERATING_CLASS", v19);
        CFRelease(v19);
        int valuePtr = _channelFlagsFromIEEEOperatingClass(v39);
        CFNumberRef v19 = CFNumberCreate(v9, kCFNumberSInt32Type, &valuePtr);
        int v32 = v14;
        if (!v19) {
          goto LABEL_84;
        }
        CFDictionarySetValue(theDict, @"CHANNEL_FLAGS", v19);
        CFRelease(v19);
        CFNumberRef v19 = CFArrayCreateMutable(v9, 0, MEMORY[0x263EFFF70]);
        if (!v19) {
          goto LABEL_84;
        }
        __int16 v21 = v16 + 3;
        if (v17 < 4)
        {
LABEL_44:
          CFNumberRef v27 = theDict;
          CFDictionarySetValue(theDict, @"CHANNEL_LIST", v19);
          CFRelease(v19);
          LOBYTE(v36) = *v21;
          CFNumberRef v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &v36);
          if (!v19)
          {
            uint64_t v3 = 4294963395;
            CFMutableDictionaryRef v11 = v31;
            CFNumberRef v14 = v32;
            goto LABEL_75;
          }
          CFDictionarySetValue(theDict, @"PREF", v19);
          CFRelease(v19);
          char v37 = v21[1];
          CFNumberRef v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &v37);
          CFNumberRef v14 = v32;
          if (!v19)
          {
            uint64_t v3 = 4294963395;
            CFMutableDictionaryRef v11 = v31;
            goto LABEL_75;
          }
          CFDictionarySetValue(theDict, @"REASON_CODE", v19);
          CFRelease(v19);
          CFMutableDictionaryRef v11 = v31;
          goto LABEL_70;
        }
        int v22 = v17 - 3;
        while (1)
        {
          CFNumberRef v13 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (!v13) {
            break;
          }
          char v37 = -86;
          char v37 = *v21;
          CFNumberRef v23 = CFNumberCreate(v9, kCFNumberSInt8Type, &v37);
          if (!v23) {
            break;
          }
          CFNumberRef v24 = v23;
          CFDictionarySetValue(v13, @"CHANNEL", v23);
          CFRelease(v24);
          int v36 = valuePtr;
          CFNumberRef v25 = CFNumberCreate(v9, kCFNumberSInt32Type, &v36);
          if (!v25) {
            break;
          }
          CFNumberRef v26 = v25;
          CFDictionarySetValue(v13, @"CHANNEL_FLAGS", v25);
          CFRelease(v26);
          CFArrayAppendValue(v19, v13);
          CFRelease(v13);
          ++v21;
          if (!--v22) {
            goto LABEL_44;
          }
        }
LABEL_84:
        uint64_t v3 = 4294963395;
        CFMutableDictionaryRef v11 = v31;
        CFNumberRef v14 = v32;
LABEL_85:
        CFNumberRef v27 = theDict;
LABEL_75:
        if (v13) {
          CFRelease(v13);
        }
        if (v19) {
          CFRelease(v19);
        }
        if (v27) {
          CFRelease(v27);
        }
        if (v14) {
          CFRelease(v14);
        }
        CFRelease(v11);
        return v3;
      case 3:
        if (v17 != 1) {
          goto LABEL_86;
        }
        LOBYTE(valuePtr) = v16[2];
        CFNumberRef v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
        if (!v19) {
          goto LABEL_87;
        }
        CFNumberRef v28 = v11;
        CFNumberRef v29 = @"CELL_DATA_CONNECTIVITY";
        goto LABEL_65;
      case 4:
        if (v17 != 1) {
          goto LABEL_86;
        }
        LOBYTE(valuePtr) = v16[2];
        CFNumberRef v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
        if (!v19) {
          goto LABEL_87;
        }
        CFNumberRef v28 = v11;
        CFNumberRef v29 = @"ASSOC_DISALLOWED_REASON_CODE";
        goto LABEL_65;
      case 5:
        if (v17 != 1) {
          goto LABEL_86;
        }
        LOBYTE(valuePtr) = v16[2];
        CFNumberRef v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
        if (!v19) {
          goto LABEL_87;
        }
        CFNumberRef v28 = v11;
        CFNumberRef v29 = @"CELL_CONN_PREF";
        goto LABEL_65;
      case 6:
        if (v17 != 1) {
          goto LABEL_86;
        }
        LOBYTE(valuePtr) = v16[2];
        CFNumberRef v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
        if (!v19) {
          goto LABEL_87;
        }
        CFNumberRef v28 = v11;
        CFNumberRef v29 = @"TRANS_REASON_CODE";
        goto LABEL_65;
      case 7:
        if (v17 != 1) {
          goto LABEL_86;
        }
        LOBYTE(valuePtr) = v16[2];
        CFNumberRef v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
        if (!v19) {
          goto LABEL_87;
        }
        CFNumberRef v28 = v11;
        CFNumberRef v29 = @"TRANS_REJECT_REASON_CODE";
        goto LABEL_65;
      case 8:
        if (v17 != 2) {
          goto LABEL_86;
        }
        LOWORD(valuePtr) = *((_WORD *)v16 + 1);
        CFNumberRef v19 = CFNumberCreate(v9, kCFNumberSInt16Type, &valuePtr);
        if (v19)
        {
          CFNumberRef v28 = v11;
          CFNumberRef v29 = @"ASSOC_RETRY_DELAY";
LABEL_65:
          CFDictionarySetValue(v28, v29, v19);
          CFNumberRef v30 = v19;
          goto LABEL_66;
        }
LABEL_87:
        CFNumberRef v27 = 0;
        goto LABEL_88;
      default:
        goto LABEL_67;
    }
  }
}

uint64_t Apple80211ParseInterworkingIE(unsigned __int8 *a1, signed int a2, __CFDictionary *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (a1 && a3)
  {
    if (!a2) {
      return 0;
    }
    unsigned int v5 = a1;
    while (*v5 != 107 || !v5[1])
    {
      a2 = a2 - v5[1] - 2;
      if (a2 >= 1)
      {
        unsigned int v6 = &v5[v5[1]];
        unsigned int v5 = v6 + 2;
        if (v6[3] + 2 <= a2) {
          continue;
        }
      }
      return 0;
    }
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!Mutable) {
      return 4294963395;
    }
    CFAllocatorRef v9 = Mutable;
    char valuePtr = v5[2] & 0xF;
    CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt8Type, &valuePtr);
    if (!v10)
    {
      uint64_t v3 = 4294963395;
      goto LABEL_44;
    }
    CFNumberRef v11 = v10;
    CFDictionarySetValue(v9, @"INTERWORKING_ACCESS_NETWORK_TYPE", v10);
    CFRelease(v11);
    unsigned int v12 = (const void *)*MEMORY[0x263EFFB40];
    CFNumberRef v13 = (const void *)*MEMORY[0x263EFFB38];
    if ((v5[2] & 0x10) != 0) {
      CFNumberRef v14 = (const void *)*MEMORY[0x263EFFB40];
    }
    else {
      CFNumberRef v14 = (const void *)*MEMORY[0x263EFFB38];
    }
    CFDictionarySetValue(v9, @"INTERWORKING_ACCESS_INTERNET", v14);
    if ((v5[2] & 0x20) != 0) {
      int v15 = v12;
    }
    else {
      int v15 = v13;
    }
    CFDictionarySetValue(v9, @"INTERWORKING_ACCESS_ASRA", v15);
    if ((v5[2] & 0x40) != 0) {
      CFNumberRef v16 = v12;
    }
    else {
      CFNumberRef v16 = v13;
    }
    CFDictionarySetValue(v9, @"INTERWORKING_ACCESS_ESR", v16);
    if ((v5[2] & 0x80u) == 0) {
      uint64_t v17 = v13;
    }
    else {
      uint64_t v17 = v12;
    }
    CFDictionarySetValue(v9, @"INTERWORKING_ACCESS_UESA", v17);
    int v18 = v5[1];
    if (v18 == 9 || v18 == 3)
    {
      CFNumberRef v19 = CFNumberCreate(v7, kCFNumberSInt8Type, v5 + 3);
      if (!v19
        || (CFNumberRef v20 = v19,
            CFDictionaryAddValue(v9, @"INTERWORKING_ACCESS_VENTURE_GRP", v19),
            CFRelease(v20),
            (CFNumberRef v21 = CFNumberCreate(v7, kCFNumberSInt8Type, v5 + 4)) == 0))
      {
LABEL_41:
        uint64_t v3 = 0;
LABEL_44:
        CFRelease(v9);
        return v3;
      }
      CFNumberRef v22 = v21;
      CFDictionaryAddValue(v9, @"INTERWORKING_ACCESS_VENTURE_TYPE", v21);
      CFRelease(v22);
      int v23 = 0;
      int v18 = v5[1];
    }
    else
    {
      int v23 = 1;
    }
    if (v18 != 9 && v18 != 7) {
      goto LABEL_38;
    }
    CFNumberRef v24 = v5 + 5;
    BOOL v25 = v23 == 0;
    uint64_t v26 = 5;
    if (!v25) {
      uint64_t v26 = 3;
    }
    uint64_t v27 = v5[v26];
    if (!v25) {
      CFNumberRef v24 = v5 + 3;
    }
    CFStringRef v28 = CFStringCreateWithFormat(v7, 0, @"%02x:%02x:%02x:%02x:%02x:%02x", v27, v24[1], v24[2], v24[3], v24[4], v24[5]);
    if (v28)
    {
      CFStringRef v29 = v28;
      CFDictionarySetValue(v9, @"INTERWORKING_ACCESS_HESSID", v28);
      CFRelease(v29);
LABEL_38:
      CFDictionarySetValue(a3, @"11U_INTERWORKING_IE", v9);
      CFRelease(v9);
      return 0;
    }
    goto LABEL_41;
  }
  return v3;
}

uint64_t Apple80211ParseHT_IE(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (!a1 || !a3) {
    return v3;
  }
  if (a2 < 3) {
    return 0;
  }
  uint64_t v5 = a1;
  while (*(unsigned char *)v5 != 61)
  {
    unsigned int v7 = *(unsigned __int8 *)(v5 + 1);
    unsigned int v6 = a2 - 2;
LABEL_13:
    a2 = v6 - v7;
    v5 += v7 + 2;
    if ((int)(v6 - v7) <= 2) {
      return 0;
    }
  }
  unsigned int v6 = a2 - 2;
  unsigned int v7 = *(unsigned __int8 *)(v5 + 1);
  if (v7 < 0x16 || v6 < v7) {
    goto LABEL_13;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 4294963395;
  }
  unsigned int v12 = Mutable;
  char v38 = -86;
  __int16 valuePtr = *(unsigned __int8 *)(v5 + 2);
  CFNumberRef v13 = CFNumberCreate(v10, kCFNumberSInt16Type, &valuePtr);
  if (!v13) {
    goto LABEL_60;
  }
  CFNumberRef v14 = v13;
  CFDictionarySetValue(v12, @"HT_PRIMARY_CHAN", v13);
  CFRelease(v14);
  char v38 = *(unsigned char *)(v5 + 3) & 3;
  CFNumberRef v15 = CFNumberCreate(v10, kCFNumberSInt8Type, &v38);
  if (!v15) {
    goto LABEL_60;
  }
  CFNumberRef v16 = v15;
  CFDictionarySetValue(v12, @"HT_SECONDARY_CHAN_OFFSET", v15);
  CFRelease(v16);
  uint64_t v17 = *MEMORY[0x263EFFB40];
  uint64_t v18 = *MEMORY[0x263EFFB38];
  CFNumberRef v19 = (const void *)((*(unsigned char *)(v5 + 3) & 4) != 0 ? *MEMORY[0x263EFFB40] : *MEMORY[0x263EFFB38]);
  CFDictionarySetValue(v12, @"HT_STA_CHAN_WIDTH", v19);
  CFNumberRef v20 = (const void *)((*(unsigned char *)(v5 + 3) & 8) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, @"HT_RIFS_MODE", v20);
  CFNumberRef v21 = (const void *)((*(unsigned char *)(v5 + 3) & 0x10) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, @"HT_PSMP_STAS_ONLY", v21);
  char v38 = *(unsigned char *)(v5 + 3) >> 5;
  CFNumberRef v22 = CFNumberCreate(v10, kCFNumberSInt8Type, &v38);
  if (!v22) {
    goto LABEL_60;
  }
  CFNumberRef v23 = v22;
  CFDictionarySetValue(v12, @"HT_SERVICE_INT", v22);
  CFRelease(v23);
  char v38 = *(unsigned char *)(v5 + 4) & 3;
  CFNumberRef v24 = CFNumberCreate(v10, kCFNumberSInt8Type, &v38);
  if (!v24) {
    goto LABEL_60;
  }
  CFNumberRef v25 = v24;
  CFDictionarySetValue(v12, @"HT_OP_MODE", v24);
  CFRelease(v25);
  uint64_t v26 = (const void *)((*(unsigned char *)(v5 + 4) & 4) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, @"HT_NON_GF_STAS_PRESENT", v26);
  uint64_t v27 = (const void *)((*(unsigned char *)(v5 + 4) & 8) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, @"HT_TX_BURST_LIMIT", v27);
  CFStringRef v28 = (const void *)((*(unsigned char *)(v5 + 4) & 0x10) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, @"HT_OBSS_NON_HT_STAS_PRESENT", v28);
  CFStringRef v29 = (const void *)((*(unsigned char *)(v5 + 6) & 0x40) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, @"HT_DUAL_BEACON", v29);
  CFNumberRef v30 = (const void *)(*(char *)(v5 + 6) >= 0 ? v18 : v17);
  CFDictionarySetValue(v12, @"HT_DUAL_CTS_PROT", v30);
  CFMutableDictionaryRef v31 = (const void *)((*(unsigned char *)(v5 + 7) & 1) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, @"HT_SECONDARY_BEACON", v31);
  uint64_t v32 = (const void *)((*(unsigned char *)(v5 + 7) & 2) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, @"HT_LSIG_TXOP_PROT_FULL", v32);
  BOOL v33 = (const void *)((*(unsigned char *)(v5 + 7) & 4) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, @"HT_PCO_ACTIVE", v33);
  CFMutableDictionaryRef v34 = (const void *)((*(unsigned char *)(v5 + 7) & 8) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, @"HT_PCO_PHASE", v34);
  CFDataRef v35 = CFDataCreate(v10, (const UInt8 *)(v5 + 8), 16);
  if (v35)
  {
    CFDataRef v36 = v35;
    CFDictionarySetValue(v12, @"HT_BASIC_MCS_SET", v35);
    CFRelease(v36);
    CFDictionarySetValue(a3, @"HT_IE", v12);
    uint64_t v3 = 0;
  }
  else
  {
LABEL_60:
    uint64_t v3 = 4294963395;
  }
  CFRelease(v12);
  return v3;
}

uint64_t Apple80211ParseHT_Caps(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (!a1 || !a3) {
    return v3;
  }
  if (a2 < 3) {
    return 0;
  }
  uint64_t v5 = a1;
  while (*(unsigned char *)v5 != 45)
  {
    unsigned int v7 = *(unsigned __int8 *)(v5 + 1);
    unsigned int v6 = a2 - 2;
LABEL_13:
    a2 = v6 - v7;
    v5 += v7 + 2;
    if ((int)(v6 - v7) <= 2) {
      return 0;
    }
  }
  unsigned int v6 = a2 - 2;
  unsigned int v7 = *(unsigned __int8 *)(v5 + 1);
  if (v7 < 0x1A || v6 < v7) {
    goto LABEL_13;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 4294963395;
  }
  unsigned int v12 = Mutable;
  int v25 = -1431655766;
  __int16 valuePtr = *(_WORD *)(v5 + 2);
  CFNumberRef v13 = CFNumberCreate(v10, kCFNumberSInt16Type, &valuePtr);
  if (!v13) {
    goto LABEL_25;
  }
  CFNumberRef v14 = v13;
  CFDictionarySetValue(v12, @"CAPS", v13);
  CFRelease(v14);
  CFNumberRef v15 = CFNumberCreate(v10, kCFNumberSInt8Type, (const void *)(v5 + 4));
  if (!v15) {
    goto LABEL_25;
  }
  CFNumberRef v16 = v15;
  CFDictionarySetValue(v12, @"AMPDU_PARAMS", v15);
  CFRelease(v16);
  CFDataRef v17 = CFDataCreate(v10, (const UInt8 *)(v5 + 5), 16);
  if (!v17) {
    goto LABEL_25;
  }
  CFDataRef v18 = v17;
  CFDictionarySetValue(v12, @"MCS_SET", v17);
  CFRelease(v18);
  __int16 valuePtr = *(_WORD *)(v5 + 21);
  CFNumberRef v19 = CFNumberCreate(v10, kCFNumberSInt16Type, &valuePtr);
  if (!v19) {
    goto LABEL_25;
  }
  CFNumberRef v20 = v19;
  CFDictionarySetValue(v12, @"EXT_CAPS", v19);
  CFRelease(v20);
  int v25 = *(_DWORD *)(v5 + 23);
  CFNumberRef v21 = CFNumberCreate(v10, kCFNumberSInt32Type, &v25);
  if (!v21) {
    goto LABEL_25;
  }
  CFNumberRef v22 = v21;
  CFDictionarySetValue(v12, @"TXBF_CAPS", v21);
  CFRelease(v22);
  CFNumberRef v23 = CFNumberCreate(v10, kCFNumberSInt8Type, (const void *)(v5 + 27));
  if (v23)
  {
    CFNumberRef v24 = v23;
    CFDictionarySetValue(v12, @"ASEL_CAPS", v23);
    CFRelease(v24);
    CFDictionarySetValue(a3, @"HT_CAPS_IE", v12);
    uint64_t v3 = 0;
  }
  else
  {
LABEL_25:
    uint64_t v3 = 4294963395;
  }
  CFRelease(v12);
  return v3;
}

uint64_t Apple80211ParseHS20IE(unsigned __int8 *a1, unsigned int a2, __CFDictionary *a3)
{
  uint64_t v3 = 4294963396;
  if (!a1 || !a3) {
    return v3;
  }
  if (a2 < 2) {
    return 0;
  }
  uint64_t v5 = a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = v6 + 2;
  if (v6 + 2 > (unint64_t)a2) {
    return 0;
  }
  unint64_t v8 = a2;
  while (v8 < 7)
  {
    uint64_t v3 = 0;
    v8 -= v7;
    if (v8 <= 1) {
      return v3;
    }
LABEL_17:
    CFAllocatorRef v9 = &v5[v6];
    uint64_t v5 = v9 + 2;
    uint64_t v6 = v9[3];
    uint64_t v7 = v6 + 2;
    if (v8 < v6 + 2) {
      return 0;
    }
  }
  if (*v5 != 221 || v5[1] < 5u || v5[2] != 80 || v5[3] != 111 || v5[4] != 154 || v5[5] != 16)
  {
    v8 -= v7;
    if (v8 < 2) {
      return 0;
    }
    goto LABEL_17;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 4294963395;
  }
  CFNumberRef v13 = Mutable;
  CFNumberRef v14 = CFNumberCreate(v11, kCFNumberSInt8Type, v5 + 6);
  if (v14)
  {
    CFNumberRef v15 = v14;
    CFDictionarySetValue(v13, @"HOTSPOT20_CONFIGURATION", v14);
    CFRelease(v15);
    CFDictionarySetValue(a3, @"HOTSPOT20_IE", v13);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 4294963395;
  }
  CFRelease(v13);
  return v3;
}

uint64_t Apple80211ParseHE_IEs(const UInt8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t result = 4294963396;
  if (a1 && a3)
  {
    if (a2 < 3) {
      return 0;
    }
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    while (1)
    {
      unsigned int v7 = a2 - 2;
      if (*a1 != 255) {
        goto LABEL_8;
      }
      unsigned int v9 = a1[1];
      if (v7 >= v9 && a1[2] == 35)
      {
        CFMutableDictionaryRef Mutable = CFDataCreateMutable(v6, 0);
        if (!Mutable) {
          return 4294963395;
        }
        CFAllocatorRef v11 = Mutable;
        CFDataAppendBytes(Mutable, a1, a1[1] + 2);
        CFDictionarySetValue(a3, @"HE_CAP", v11);
        CFRelease(v11);
        if (*a1 != 255) {
          goto LABEL_8;
        }
        unsigned int v9 = a1[1];
      }
      if (v7 >= v9 && a1[2] == 36)
      {
        unsigned int v12 = CFDataCreateMutable(v6, 0);
        if (!v12) {
          return 4294963395;
        }
        CFNumberRef v13 = v12;
        CFDataAppendBytes(v12, a1, a1[1] + 2);
        CFDictionarySetValue(a3, @"HE_OP", v13);
        CFRelease(v13);
        if (*a1 != 255) {
          goto LABEL_8;
        }
        unsigned int v9 = a1[1];
      }
      if (v7 >= v9 && a1[2] == 38)
      {
        CFNumberRef v14 = CFDataCreateMutable(v6, 0);
        if (!v14) {
          return 4294963395;
        }
        CFNumberRef v15 = v14;
        CFDataAppendBytes(v14, a1, a1[1] + 2);
        CFDictionarySetValue(a3, @"HE_MU_EDCA", v15);
        CFRelease(v15);
        if (*a1 != 255) {
          goto LABEL_8;
        }
        unsigned int v9 = a1[1];
      }
      if (v7 >= v9 && a1[2] == 47)
      {
        CFNumberRef v16 = CFDataCreateMutable(v6, 0);
        if (!v16) {
          return 4294963395;
        }
        CFDataRef v17 = v16;
        CFDataAppendBytes(v16, a1, a1[1] + 2);
        CFDictionarySetValue(a3, @"HE_QBSS_LOAD", v17);
        CFRelease(v17);
      }
LABEL_8:
      uint64_t v8 = a1[1];
      a2 = v7 - v8;
      a1 += v8 + 2;
      if ((int)(v7 - v8) <= 2) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t Apple80211ParseHEOperationIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (!a1 || !a3) {
    return v3;
  }
  int v4 = a2;
  if (!a2) {
    return 0;
  }
  uint64_t v5 = a1;
  unsigned int v70 = 0;
  CFAllocatorRef v6 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v8 = (const void *)*MEMORY[0x263EFFB40];
  unsigned int v9 = (const void *)*MEMORY[0x263EFFB38];
  do
  {
    if (v4 < 2 || (uint64_t v10 = v5[1], v4 < (v10 + 2)))
    {
      uint64_t v3 = v70;
      goto LABEL_83;
    }
    if (v10 < 3 || *v5 != 255 || v10 < 7 || v5[2] != 36)
    {
      int v42 = 0;
      v5 += v10 + 2;
      v4 -= v10 + 2;
      continue;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!Mutable) {
      return 4294963395;
    }
    CFAllocatorRef v6 = Mutable;
    int v12 = v5[5];
    int v13 = *(unsigned __int16 *)(v5 + 3);
    char valuePtr = v13 & 7;
    CFNumberRef v14 = CFNumberCreate(v7, kCFNumberSInt8Type, &valuePtr);
    if (!v14) {
      goto LABEL_75;
    }
    CFNumberRef v15 = v14;
    unsigned int v16 = v13 | (v12 << 16);
    CFDictionarySetValue(v6, @"DEFAULT_PE_DURATION", v14);
    CFRelease(v15);
    if ((v13 & 8) != 0 || v9 == v8) {
      CFDictionarySetValue(v6, @"TWT_REQUIRED", v8);
    }
    __int16 v79 = (v16 >> 4) & 0x3FF;
    CFNumberRef v17 = CFNumberCreate(v7, kCFNumberSInt16Type, &v79);
    if (!v17) {
      goto LABEL_75;
    }
    CFNumberRef v18 = v17;
    CFDictionarySetValue(v6, @"TXOP_DURATION_RTS_THRESHOLD", v17);
    CFRelease(v18);
    if (v9 == v8) {
      int v19 = 1;
    }
    else {
      int v19 = (v16 >> 15) & 1;
    }
    if (v19 == 1) {
      CFDictionarySetValue(v6, @"CO_HOSTED_BSS", v8);
    }
    if ((v16 & 0x10000) != 0 || v9 == v8) {
      CFDictionarySetValue(v6, @"ER_SU_DISABLE", v8);
    }
    char v78 = v5[6] & 0x3F;
    CFNumberRef v20 = CFNumberCreate(v7, kCFNumberSInt8Type, &v78);
    if (!v20) {
      goto LABEL_75;
    }
    CFNumberRef v21 = v20;
    CFDictionarySetValue(v6, @"BSS_COLOR", v20);
    CFRelease(v21);
    unsigned __int8 v22 = v5[6];
    if ((v22 & 0x40) != 0 || v9 == v8)
    {
      CFDictionarySetValue(v6, @"PARTIAL_BSS_COLOR", v8);
      unsigned __int8 v22 = v5[6];
    }
    if ((v22 & 0x80) != 0 || v9 == v8) {
      CFDictionarySetValue(v6, @"BSS_COLOR_DISABLED", v8);
    }
    unsigned int v23 = *(unsigned __int16 *)(v5 + 7);
    char v77 = v23 & 3;
    CFNumberRef v24 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v24) {
      goto LABEL_75;
    }
    CFNumberRef v25 = v24;
    CFDictionarySetValue(v6, @"MAX_HE_MCS_1SS", v24);
    CFRelease(v25);
    char v77 = (v23 >> 2) & 3;
    CFNumberRef v26 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v26) {
      goto LABEL_75;
    }
    CFNumberRef v27 = v26;
    CFDictionarySetValue(v6, @"MAX_HE_MCS_2SS", v26);
    CFRelease(v27);
    char v77 = (v23 >> 4) & 3;
    CFNumberRef v28 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v28) {
      goto LABEL_75;
    }
    CFNumberRef v29 = v28;
    CFDictionarySetValue(v6, @"MAX_HE_MCS_3SS", v28);
    CFRelease(v29);
    char v77 = v23 >> 6;
    CFNumberRef v30 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v30) {
      goto LABEL_75;
    }
    CFNumberRef v31 = v30;
    CFDictionarySetValue(v6, @"MAX_HE_MCS_4SS", v30);
    CFRelease(v31);
    char v77 = BYTE1(v23) & 3;
    CFNumberRef v32 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v32) {
      goto LABEL_75;
    }
    CFNumberRef v33 = v32;
    CFDictionarySetValue(v6, @"MAX_HE_MCS_5SS", v32);
    CFRelease(v33);
    char v77 = (v23 >> 10) & 3;
    CFNumberRef v34 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v34) {
      goto LABEL_75;
    }
    CFNumberRef v35 = v34;
    CFDictionarySetValue(v6, @"MAX_HE_MCS_6SS", v34);
    CFRelease(v35);
    char v77 = (v23 >> 12) & 3;
    CFNumberRef v36 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v36) {
      goto LABEL_75;
    }
    CFNumberRef v37 = v36;
    CFDictionarySetValue(v6, @"MAX_HE_MCS_7SS", v36);
    CFRelease(v37);
    char v77 = v23 >> 14;
    CFNumberRef v38 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v38) {
      goto LABEL_75;
    }
    CFNumberRef v39 = v38;
    CFDictionarySetValue(v6, @"MAX_HE_MCS_8SS", v38);
    CFRelease(v39);
    uint64_t v40 = (char *)(v5 + 9);
    int v41 = v4 - 9;
    if ((v16 & 0x4000) == 0 && v9 != v8)
    {
      v4 -= 9;
      if (!v19) {
        goto LABEL_56;
      }
LABEL_53:
      if (v4 < 1) {
        goto LABEL_78;
      }
      char v76 = *v40;
      CFNumberRef v50 = CFNumberCreate(v7, kCFNumberSInt8Type, &v76);
      if (!v50) {
        goto LABEL_75;
      }
      CFNumberRef v51 = v50;
      CFDictionarySetValue(v6, @"MAX_CO_HOSTED_BSSID_IND", v50);
      CFRelease(v51);
      ++v40;
      --v4;
LABEL_56:
      if ((v16 & 0x20000) == 0 && v9 != v8)
      {
        int v42 = 8;
        continue;
      }
      if (v4 >= 5)
      {
        char v76 = -86;
        char v76 = *v40;
        CFNumberRef v52 = CFNumberCreate(v7, kCFNumberSInt8Type, &v76);
        if (v52)
        {
          CFNumberRef v53 = v52;
          CFDictionarySetValue(v6, @"6GHZ_OP_INFO_PRIMARY_CHANNEL", v52);
          CFRelease(v53);
          unsigned __int8 v75 = v40[1] & 3;
          CFNumberRef v54 = CFNumberCreate(v7, kCFNumberSInt8Type, &v75);
          if (v54)
          {
            CFNumberRef v55 = v54;
            CFDictionarySetValue(v6, @"6GHZ_OP_INFO_CHANNEL_WIDTH", v54);
            CFRelease(v55);
            unsigned int v56 = v40[1];
            if ((v56 & 4) != 0 || v9 == v8)
            {
              CFDictionarySetValue(v6, @"6GHZ_OP_INFO_DUPLICATE_BEACON", v8);
              unsigned int v56 = v40[1];
            }
            unsigned __int8 v74 = (v56 >> 3) & 7;
            CFNumberRef v57 = CFNumberCreate(v7, kCFNumberSInt8Type, &v74);
            if (v57)
            {
              CFNumberRef v58 = v57;
              CFDictionarySetValue(v6, @"6GHZ_OP_INFO_REG_INFO", v57);
              CFRelease(v58);
              if (v74)
              {
                if (v74 != 1)
                {
LABEL_71:
                  char v73 = v40[2];
                  CFNumberRef v60 = CFNumberCreate(v7, kCFNumberSInt8Type, &v73);
                  if (v60)
                  {
                    CFNumberRef v61 = v60;
                    CFDictionarySetValue(v6, @"6GHZ_OP_INFO_CENTER_CHANNEL_FREQ_SEG0", v60);
                    CFRelease(v61);
                    char v72 = v40[3];
                    CFNumberRef v62 = CFNumberCreate(v7, kCFNumberSInt8Type, &v72);
                    if (v62)
                    {
                      CFNumberRef v63 = v62;
                      CFDictionarySetValue(v6, @"6GHZ_OP_INFO_CENTER_CHANNEL_FREQ_SEG1", v62);
                      CFRelease(v63);
                      char v71 = v40[4];
                      CFNumberRef v64 = CFNumberCreate(v7, kCFNumberSInt8Type, &v71);
                      if (v64)
                      {
                        CFNumberRef v65 = v64;
                        CFDictionarySetValue(v6, @"6GHZ_OP_INFO_MIN_RATE", v64);
                        CFRelease(v65);
                        int v42 = 8;
                        v4 -= 5;
                        continue;
                      }
                    }
                  }
                  goto LABEL_75;
                }
                uint64_t v59 = @"6GHZ_OP_INFO_STANDARD_POWER_AP";
              }
              else
              {
                uint64_t v59 = @"6GHZ_OP_INFO_INDOOR_AP";
              }
              CFDictionarySetValue(v6, v59, v8);
              goto LABEL_71;
            }
          }
        }
LABEL_75:
        int v42 = 4;
        int v66 = -3901;
LABEL_76:
        unsigned int v70 = v66;
        continue;
      }
LABEL_78:
      int v42 = 4;
      int v66 = -3904;
      goto LABEL_76;
    }
    BOOL v43 = v4 >= 0xC;
    v4 -= 12;
    if (!v43)
    {
      int v42 = 4;
      unsigned int v70 = -3904;
      int v4 = v41;
      continue;
    }
    int v68 = v41;
    char v76 = *v40;
    CFNumberRef v44 = CFNumberCreate(v7, kCFNumberSInt8Type, &v76);
    if (v44)
    {
      CFNumberRef v45 = v44;
      CFDictionarySetValue(v6, @"VHT_OP_INFO_CHANNEL_WIDTH", v44);
      CFRelease(v45);
      unsigned __int8 v75 = v5[10];
      CFNumberRef v46 = CFNumberCreate(v7, kCFNumberSInt8Type, &v75);
      if (v46)
      {
        CFNumberRef v47 = v46;
        CFDictionarySetValue(v6, @"VHT_OP_INFO_CENTER_CHANNEL_FREQ_SEG0", v46);
        CFRelease(v47);
        unsigned __int8 v74 = v5[11];
        CFNumberRef v48 = CFNumberCreate(v7, kCFNumberSInt8Type, &v74);
        if (v48)
        {
          CFNumberRef v49 = v48;
          CFDictionarySetValue(v6, @"VHT_OP_INFO_CENTER_CHANNEL_FREQ_SEG1", v48);
          CFRelease(v49);
          uint64_t v40 = (char *)(v5 + 12);
          if (!v19) {
            goto LABEL_56;
          }
          goto LABEL_53;
        }
      }
    }
    int v42 = 4;
    unsigned int v70 = -3901;
    int v4 = v68;
  }
  while (!v42);
  if (v42 != 4)
  {
    uint64_t v3 = v70;
LABEL_83:
    if (!v6) {
      return v3;
    }
    CFDictionarySetValue(a3, @"HE_OP_IE", v6);
    goto LABEL_86;
  }
  uint64_t v3 = v70;
  if (!v6) {
    return v3;
  }
LABEL_86:
  CFRelease(v6);
  return v3;
}

uint64_t Apple80211ParseExtCapsIE(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (a1 && a3)
  {
    int v5 = a2;
    if (a2)
    {
      if (a2 <= 2048)
      {
        uint64_t v6 = a1;
        uint64_t v3 = 0;
        CFAllocatorRef v7 = 0;
        CFNumberRef v8 = 0;
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        while (v5 >= 3)
        {
          unsigned int v10 = *(unsigned __int8 *)(v6 + 1);
          if (v5 - 2 < v10) {
            return 4294963396;
          }
          if (v10 >= 4 && *(unsigned char *)v6 == 127)
          {
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (!Mutable) {
              return 4294963395;
            }
            CFAllocatorRef v7 = Mutable;
            char valuePtr = 1;
            CFNumberRef v8 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
            if (v8)
            {
              if ((*(unsigned char *)(v6 + 4) & 8) != 0) {
                CFDictionarySetValue(v7, @"BSS_TRANS_MGMT", v8);
              }
              unsigned int v12 = *(unsigned __int8 *)(v6 + 1);
              if (v12 >= 0xB)
              {
                if ((*(_WORD *)(v6 + 13) & 0x10) != 0)
                {
                  CFDictionarySetValue(v7, @"BEACON_PROTECTION", v8);
                  unsigned int v12 = *(unsigned __int8 *)(v6 + 1);
                }
                if (v12 >= 0xC && (*(_WORD *)(v6 + 13) & 0x100) != 0) {
                  CFDictionarySetValue(v7, @"SAE_PK_PASSWD_USED", v8);
                }
              }
              if (CFDictionaryGetCount(v7)) {
                CFDictionarySetValue(a3, @"EXT_CAPS", v7);
              }
            }
            else
            {
              uint64_t v3 = 4294963395;
            }
            break;
          }
          if ((int)(v5 - 2 - v10) > 0) {
            v6 += *(unsigned __int8 *)(v6 + 1) + 2;
          }
          int v5 = v5 - 2 - v10;
        }
        if (v7) {
          CFRelease(v7);
        }
        if (v8) {
          CFRelease(v8);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t Apple80211ParseCyclopsIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t result = 4294963396;
  if (a1 && a3)
  {
    if (!a2) {
      return 0;
    }
    if (a2 > 2048) {
      return result;
    }
    if (a2 < 3) {
      return 0;
    }
    while (1)
    {
      unsigned int v6 = a2 - 2;
      unsigned int v7 = a1[1];
      a2 = a2 - 2 - v7;
      if (v6 < v7) {
        return 4294963396;
      }
      if (v7 >= 4 && *a1 == 221)
      {
        BOOL v8 = *((_WORD *)a1 + 1) == 0x4000 && a1[4] == 150;
        if (v8 && a1[5] == 11) {
          break;
        }
      }
      if (a2 > 0) {
        a1 += a1[1] + 2;
      }
      if (a2 <= 2) {
        return 0;
      }
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      unsigned int v10 = Mutable;
      CFAllocatorRef v11 = (const void *)*MEMORY[0x263EFFB40];
      unsigned int v12 = (const void *)*MEMORY[0x263EFFB38];
      if ((a1[6] & 0x40) != 0) {
        int v13 = (const void *)*MEMORY[0x263EFFB40];
      }
      else {
        int v13 = (const void *)*MEMORY[0x263EFFB38];
      }
      CFDictionarySetValue(Mutable, @"FT_STATE", v13);
      if ((a1[6] & 0x20) != 0) {
        CFNumberRef v14 = v11;
      }
      else {
        CFNumberRef v14 = v12;
      }
      CFDictionarySetValue(v10, @"FASTLANE_STATE", v14);
      CFDictionarySetValue(a3, @"FAST_ENTERPRISE_NETWORK", v10);
      CFRelease(v10);
      return 0;
    }
    return 4294963395;
  }
  return result;
}

uint64_t Apple80211ParseAppleiOSIE(unsigned __int8 *a1, int a2, CFMutableDictionaryRef theDict)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (!a1) {
    return v3;
  }
  int v4 = a2;
  if (!a2 || !theDict) {
    return v3;
  }
  if (a2 < 3) {
    return 0;
  }
  unsigned int v6 = a1;
  CFMutableDictionaryRef v7 = 0;
  char valuePtr = -86;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  value = (void *)*MEMORY[0x263EFFB40];
  while (1)
  {
    unsigned int v9 = v6[1];
    if (v9 + 2 > v4)
    {
LABEL_37:
      if (v7)
      {
        CFDictionarySetValue(theDict, @"IOS_IE", v7);
        uint64_t v3 = 0;
        goto LABEL_39;
      }
      return 0;
    }
    if (v9 >= 4 && *v6 == 221 && Apple80211ParseAppleiOSIE_iosSignature == *(_DWORD *)(v6 + 2))
    {
      if (!v7)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (!Mutable) {
          return 4294963395;
        }
        CFMutableDictionaryRef v7 = Mutable;
        unsigned int v9 = v6[1];
      }
      unsigned int v11 = v9 - 4;
      if (v9 - 4 >= 3) {
        break;
      }
    }
LABEL_34:
    int v4 = v4 - v9 - 2;
    uint64_t v29 = (uint64_t)&v6[v9 + 2];
    if (v4 > 0) {
      unsigned int v6 = (unsigned __int8 *)v29;
    }
    if (v4 <= 2) {
      goto LABEL_37;
    }
  }
  unsigned int v12 = v6 + 6;
  while (1)
  {
    int v13 = *v12;
    int v14 = v12[1];
    char valuePtr = v12[1];
    CFIndex v15 = v12[2];
    unsigned int v16 = v11 - 3;
    if (v15 > (v11 - 3))
    {
LABEL_42:
      uint64_t v3 = 4294963394;
      goto LABEL_39;
    }
    CFNumberRef v17 = v12 + 3;
    if (v14 != 1) {
      goto LABEL_32;
    }
    if (v13 == 4)
    {
      CFNumberRef v22 = CFNumberCreate(v8, kCFNumberSInt8Type, &valuePtr);
      if (!v22) {
        goto LABEL_43;
      }
      CFNumberRef v23 = v22;
      CFNumberRef v24 = v7;
      CFNumberRef v25 = @"IOS_NAN_PH_INFO_VERSION";
      goto LABEL_31;
    }
    if (v13 == 2) {
      break;
    }
    if (v13 == 1)
    {
      if (!v12[2]) {
        goto LABEL_42;
      }
      CFNumberRef v18 = CFNumberCreate(v8, kCFNumberSInt8Type, &valuePtr);
      if (!v18) {
        goto LABEL_43;
      }
      CFNumberRef v19 = v18;
      CFDictionarySetValue(v7, @"IOS_IE_FEATURE_VERSION", v18);
      CFRelease(v19);
      CFDataRef v20 = CFDataCreate(v8, v17, v15);
      if (!v20) {
        goto LABEL_43;
      }
      CFDataRef v21 = v20;
      CFDictionarySetValue(v7, @"IOS_IE_FEATURES", v20);
      CFRelease(v21);
      if (*v17) {
        CFDictionarySetValue(v7, @"IOS_IE_FEATURE_WOW_DISALLOWED", value);
      }
    }
LABEL_32:
    unsigned int v11 = v16 - v15;
    unsigned int v12 = &v17[v15];
    if ((v16 - v15) <= 2u)
    {
      unsigned int v9 = v6[1];
      goto LABEL_34;
    }
  }
  if (v15 < 6) {
    goto LABEL_42;
  }
  CFNumberRef v26 = CFNumberCreate(v8, kCFNumberSInt8Type, &valuePtr);
  if (v26)
  {
    CFNumberRef v27 = v26;
    CFDictionarySetValue(v7, @"IOS_IE_BTMAC_VERSION", v26);
    CFRelease(v27);
    CFDataRef v28 = CFDataCreate(v8, v17, 6);
    if (v28)
    {
      CFNumberRef v23 = v28;
      CFNumberRef v24 = v7;
      CFNumberRef v25 = @"IOS_IE_BTMAC";
LABEL_31:
      CFDictionarySetValue(v24, v25, v23);
      CFRelease(v23);
      goto LABEL_32;
    }
  }
LABEL_43:
  uint64_t v3 = 4294963395;
LABEL_39:
  CFRelease(v7);
  return v3;
}

uint64_t Apple80211ParseAppleIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v3 = 4294963396;
  if (a1 && a2 && a3)
  {
    if (a2 < 2)
    {
      return 0;
    }
    else
    {
      int v5 = a1;
      while (1)
      {
        uint64_t v6 = v5[1];
        BOOL v7 = a2 >= (v6 + 2);
        a2 -= v6 + 2;
        if (!v7) {
          return 0;
        }
        if (v6 >= 3 && *v5 == 221)
        {
          BOOL v8 = Apple80211ParseAppleIE_appleOUI == *((_WORD *)v5 + 1) && byte_26774FEEA == v5[4];
          BOOL v9 = !v8;
          if (v6 >= 7 && !v9) {
            break;
          }
        }
        uint64_t v10 = (uint64_t)&v5[v6 + 2];
        if (a2 > 0) {
          int v5 = (unsigned __int8 *)v10;
        }
        if (a2 <= 1) {
          return 0;
        }
      }
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        int v14 = Mutable;
        CFNumberRef v15 = CFNumberCreate(v12, kCFNumberSInt8Type, v5 + 5);
        if (!v15) {
          goto LABEL_48;
        }
        CFNumberRef v16 = v15;
        CFDictionarySetValue(v14, @"APPLE_IE_VERSION", v15);
        CFRelease(v16);
        if (v5[5] != 1) {
          goto LABEL_37;
        }
        CFNumberRef v17 = CFNumberCreate(v12, kCFNumberSInt8Type, v5 + 6);
        if (!v17)
        {
LABEL_48:
          uint64_t v3 = 4294963395;
          goto LABEL_38;
        }
        CFNumberRef v18 = v17;
        CFDictionarySetValue(v14, @"APPLE_IE_PRODUCT_ID", v17);
        CFRelease(v18);
        unsigned int v19 = bswap32(*(unsigned __int16 *)(v5 + 7)) >> 16;
        CFDataRef v20 = (const void **)MEMORY[0x263EFFB40];
        if (v19)
        {
          CFDictionarySetValue(v14, @"APPLE_IE_INT_MIT", (const void *)*MEMORY[0x263EFFB40]);
          if ((v19 & 2) == 0)
          {
LABEL_29:
            if ((v19 & 4) == 0) {
              goto LABEL_30;
            }
            goto LABEL_41;
          }
        }
        else if ((v19 & 2) == 0)
        {
          goto LABEL_29;
        }
        CFDictionarySetValue(v14, @"APPLE_IE_UNCONFIGURED", *v20);
        if ((v19 & 4) == 0)
        {
LABEL_30:
          if ((v19 & 8) == 0) {
            goto LABEL_31;
          }
          goto LABEL_42;
        }
LABEL_41:
        CFDictionarySetValue(v14, @"APPLE_IE_FOUND_PPPOE", *v20);
        if ((v19 & 8) == 0)
        {
LABEL_31:
          if ((v19 & 0x10) == 0) {
            goto LABEL_32;
          }
          goto LABEL_43;
        }
LABEL_42:
        CFDictionarySetValue(v14, @"APPLE_IE_GUEST_NETWORK", *v20);
        if ((v19 & 0x10) == 0)
        {
LABEL_32:
          if ((v19 & 0x20) == 0) {
            goto LABEL_33;
          }
          goto LABEL_44;
        }
LABEL_43:
        CFDictionarySetValue(v14, @"APPLE_IE_LEGACY_WDS", *v20);
        if ((v19 & 0x20) == 0)
        {
LABEL_33:
          if ((v19 & 0x40) == 0) {
            goto LABEL_34;
          }
          goto LABEL_45;
        }
LABEL_44:
        CFDictionarySetValue(v14, @"APPLE_IE_WSC_CAP", *v20);
        if ((v19 & 0x40) == 0)
        {
LABEL_34:
          if ((v19 & 0x80) == 0) {
            goto LABEL_35;
          }
          goto LABEL_46;
        }
LABEL_45:
        CFDictionarySetValue(v14, @"APPLE_IE_WSC_ACTIVE", *v20);
        if ((v19 & 0x80) == 0)
        {
LABEL_35:
          if ((v19 & 0x100) != 0) {
LABEL_36:
          }
            CFDictionarySetValue(v14, @"APPLE_IE_WOW_SUPPORTED", *v20);
LABEL_37:
          CFDictionarySetValue(a3, @"APPLE_IE", v14);
          uint64_t v3 = 0;
LABEL_38:
          CFRelease(v14);
          return v3;
        }
LABEL_46:
        CFDictionarySetValue(v14, @"APPLE_IE_WSC_SOLICITABLE", *v20);
        if ((v19 & 0x100) == 0) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
      return 4294963395;
    }
  }
  return v3;
}

uint64_t Apple80211ParseAppleDeviceIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (!a1 || !a2 || !a3) {
    return v3;
  }
  if (a2 < 2) {
    return 0;
  }
  int v5 = a1;
  while (1)
  {
    uint64_t v6 = v5[1];
    BOOL v7 = a2 >= (v6 + 2);
    a2 -= v6 + 2;
    if (!v7) {
      return 0;
    }
    if (v6 >= 4 && *v5 == 221 && Apple80211ParseAppleDeviceIE_signature == *(_DWORD *)(v5 + 2)) {
      break;
    }
    uint64_t v8 = (uint64_t)&v5[v6 + 2];
    if (a2 > 0) {
      int v5 = (unsigned __int8 *)v8;
    }
    if (a2 <= 1) {
      return 0;
    }
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 4294963395;
  }
  CFMutableDictionaryRef v12 = Mutable;
  int v13 = v5[1] - 4;
  if ((v5[1] - 4) < 2u)
  {
LABEL_101:
    CFDictionarySetValue(a3, @"APPLE_DEVICE_IE", v12);
    uint64_t v3 = 0;
    goto LABEL_102;
  }
  int v14 = v5 + 6;
  CFNumberRef v15 = (const void *)*MEMORY[0x263EFFB40];
  while (2)
  {
    uint64_t v16 = v14[1];
    int v17 = v13 - 2;
    if (v16 > (v13 - 2))
    {
LABEL_103:
      uint64_t v3 = 4294963394;
      goto LABEL_102;
    }
    CFNumberRef v18 = v14 + 2;
    switch(*v14)
    {
      case 0u:
        if (!v14[1]) {
          goto LABEL_103;
        }
        CFDataRef v19 = CFDataCreate(v10, v14 + 2, v14[1]);
        if (!v19) {
          goto LABEL_104;
        }
        CFDataRef v20 = v19;
        CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_FLAGS", v19);
        CFRelease(v20);
        int v21 = (char)*v18;
        if (v21 < 0)
        {
          CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_AIRPLAY", v15);
          LOBYTE(v21) = *v18;
          if ((*v18 & 0x40) == 0)
          {
LABEL_26:
            if ((v21 & 0x20) != 0)
            {
              CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_MFI_CONFIG_V1", v15);
              LOBYTE(v21) = *v18;
              if ((*v18 & 0x10) == 0)
              {
LABEL_28:
                if ((v21 & 8) == 0) {
                  goto LABEL_29;
                }
                goto LABEL_80;
              }
            }
            else if ((v21 & 0x10) == 0)
            {
              goto LABEL_28;
            }
            CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_WOW", v15);
            LOBYTE(v21) = *v18;
            if ((*v18 & 8) == 0)
            {
LABEL_29:
              if ((v21 & 4) == 0) {
                goto LABEL_30;
              }
              goto LABEL_81;
            }
LABEL_80:
            CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_INTERFERENCE_ROBUSTNESS", v15);
            LOBYTE(v21) = *v18;
            if ((*v18 & 4) == 0)
            {
LABEL_30:
              if ((v21 & 2) == 0) {
                goto LABEL_31;
              }
              goto LABEL_82;
            }
LABEL_81:
            CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_REMOTE_PPPOE_SERVER", v15);
            LOBYTE(v21) = *v18;
            if ((*v18 & 2) == 0)
            {
LABEL_31:
              if ((v21 & 1) == 0) {
                goto LABEL_33;
              }
              goto LABEL_32;
            }
LABEL_82:
            CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_WPS", v15);
            if ((*v18 & 1) == 0)
            {
LABEL_33:
              if (v16 < 2) {
                goto LABEL_76;
              }
              int v22 = (char)v14[3];
              if (v22 < 0)
              {
                CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_AIRPRINT", v15);
                LOBYTE(v22) = v14[3];
                if ((v22 & 0x40) == 0)
                {
LABEL_37:
                  if ((v22 & 0x20) != 0)
                  {
                    CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_CARPLAY", v15);
                    LOBYTE(v22) = v14[3];
                    if ((v22 & 0x10) == 0)
                    {
LABEL_39:
                      if ((v22 & 8) == 0) {
                        goto LABEL_40;
                      }
                      goto LABEL_88;
                    }
                  }
                  else if ((v22 & 0x10) == 0)
                  {
                    goto LABEL_39;
                  }
                  CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_PROVIDES_INTERNET_ACCESS", v15);
                  LOBYTE(v22) = v14[3];
                  if ((v22 & 8) == 0)
                  {
LABEL_40:
                    if ((v22 & 4) == 0) {
                      goto LABEL_41;
                    }
                    goto LABEL_89;
                  }
LABEL_88:
                  CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_ACP_CONFIG_V1", v15);
                  LOBYTE(v22) = v14[3];
                  if ((v22 & 4) == 0)
                  {
LABEL_41:
                    if ((v22 & 2) == 0) {
                      goto LABEL_42;
                    }
                    goto LABEL_90;
                  }
LABEL_89:
                  CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_RECENT_PHYSICAL_CONTACT", v15);
                  LOBYTE(v22) = v14[3];
                  if ((v22 & 2) == 0)
                  {
LABEL_42:
                    if ((v22 & 1) == 0) {
                      goto LABEL_44;
                    }
                    goto LABEL_43;
                  }
LABEL_90:
                  CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_24GHZ_WIFI_NETWORKS", v15);
                  if ((v14[3] & 1) == 0)
                  {
LABEL_44:
                    if (v16 < 3) {
                      goto LABEL_76;
                    }
                    unsigned __int8 v23 = v14[4];
                    if ((v23 & 0x40) != 0)
                    {
                      CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_HOMEKIT", v15);
                      unsigned __int8 v23 = v14[4];
                      if ((v23 & 0x20) == 0)
                      {
LABEL_47:
                        if ((v23 & 0x10) == 0) {
                          goto LABEL_48;
                        }
                        goto LABEL_96;
                      }
                    }
                    else if ((v14[4] & 0x20) == 0)
                    {
                      goto LABEL_47;
                    }
                    CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_HOMEKIT_V2", v15);
                    unsigned __int8 v23 = v14[4];
                    if ((v23 & 0x10) == 0)
                    {
LABEL_48:
                      if ((v23 & 8) == 0) {
                        goto LABEL_49;
                      }
                      goto LABEL_97;
                    }
LABEL_96:
                    CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_BUFFERED_AIRPLAY", v15);
                    unsigned __int8 v23 = v14[4];
                    if ((v23 & 8) == 0)
                    {
LABEL_49:
                      if ((v23 & 4) == 0) {
                        goto LABEL_50;
                      }
                      goto LABEL_98;
                    }
LABEL_97:
                    CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_SECURE_WAC", v15);
                    unsigned __int8 v23 = v14[4];
                    if ((v23 & 4) == 0)
                    {
LABEL_50:
                      if ((v23 & 2) == 0) {
                        goto LABEL_51;
                      }
                      goto LABEL_99;
                    }
LABEL_98:
                    CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_MFI_HARDWARE_AUTH", v15);
                    unsigned __int8 v23 = v14[4];
                    if ((v23 & 2) == 0)
                    {
LABEL_51:
                      if ((v23 & 1) == 0) {
                        goto LABEL_76;
                      }
LABEL_100:
                      CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_SOFTWARE_CERT_AUTH", v15);
                      goto LABEL_76;
                    }
LABEL_99:
                    CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_SOFTWARE_TOKEN_AUTH", v15);
                    if ((v14[4] & 1) == 0) {
                      goto LABEL_76;
                    }
                    goto LABEL_100;
                  }
LABEL_43:
                  CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_5GHZ_WIFI_NETWORKS", v15);
                  goto LABEL_44;
                }
              }
              else if ((v22 & 0x40) == 0)
              {
                goto LABEL_37;
              }
              CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_IAP_OVER_WIFI", v15);
              LOBYTE(v22) = v14[3];
              goto LABEL_37;
            }
LABEL_32:
            CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_WPS_ACTIVE", v15);
            goto LABEL_33;
          }
        }
        else if ((v21 & 0x40) == 0)
        {
          goto LABEL_26;
        }
        CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_FEATURE_UNCONFIGURED", v15);
        LOBYTE(v21) = *v18;
        goto LABEL_26;
      case 1u:
        if (!v14[1]) {
          goto LABEL_103;
        }
        CFStringRef v24 = CFStringCreateWithBytes(v10, v14 + 2, v14[1], 0x8000100u, 0);
        if (!v24) {
          goto LABEL_104;
        }
        CFNumberRef v25 = v24;
        CFNumberRef v26 = v12;
        CFNumberRef v27 = @"APPLE_DEVICE_IE_FRIENDLY_NAME";
        goto LABEL_75;
      case 2u:
        if (!v14[1]) {
          goto LABEL_103;
        }
        CFStringRef v28 = CFStringCreateWithBytes(v10, v14 + 2, v14[1], 0x8000100u, 0);
        if (!v28) {
          goto LABEL_104;
        }
        CFNumberRef v25 = v28;
        CFNumberRef v26 = v12;
        CFNumberRef v27 = @"APPLE_DEVICE_IE_MANUFACTURER_NAME";
        goto LABEL_75;
      case 3u:
        if (!v14[1]) {
          goto LABEL_103;
        }
        CFStringRef v29 = CFStringCreateWithBytes(v10, v14 + 2, v14[1], 0x8000100u, 0);
        if (!v29) {
          goto LABEL_104;
        }
        CFNumberRef v25 = v29;
        CFNumberRef v26 = v12;
        CFNumberRef v27 = @"APPLE_DEVICE_IE_MODEL_NAME";
        goto LABEL_75;
      case 4u:
        if (v16 < 3) {
          goto LABEL_103;
        }
        CFDataRef v30 = CFDataCreate(v10, v14 + 2, 3);
        if (!v30) {
          goto LABEL_104;
        }
        CFNumberRef v25 = v30;
        CFNumberRef v26 = v12;
        CFNumberRef v27 = @"APPLE_DEVICE_IE_OUI";
        goto LABEL_75;
      case 5u:
        if (v16 < 2) {
          goto LABEL_103;
        }
        char valuePtr = *v18;
        CFNumberRef v31 = CFNumberCreate(v10, kCFNumberSInt8Type, &valuePtr);
        if (!v31) {
          goto LABEL_104;
        }
        CFNumberRef v32 = v31;
        CFDictionarySetValue(v12, @"APPLE_DEVICE_IE_DWDS_ROLE", v31);
        CFRelease(v32);
        unsigned __int8 v36 = v14[3];
        CFNumberRef v33 = CFNumberCreate(v10, kCFNumberSInt8Type, &v36);
        if (!v33) {
          goto LABEL_104;
        }
        CFNumberRef v25 = v33;
        CFNumberRef v26 = v12;
        CFNumberRef v27 = @"APPLE_DEVICE_IE_DWDS_FLAGS";
        goto LABEL_75;
      case 6u:
        if (v16 < 6) {
          goto LABEL_103;
        }
        CFDataRef v34 = CFDataCreate(v10, v14 + 2, 6);
        if (!v34) {
          goto LABEL_104;
        }
        CFNumberRef v25 = v34;
        CFNumberRef v26 = v12;
        CFNumberRef v27 = @"APPLE_DEVICE_IE_BLUETOOTH_MAC";
        goto LABEL_75;
      case 7u:
        if (v16 < 6) {
          goto LABEL_103;
        }
        CFDataRef v35 = CFDataCreate(v10, v14 + 2, 6);
        if (v35)
        {
          CFNumberRef v25 = v35;
          CFNumberRef v26 = v12;
          CFNumberRef v27 = @"APPLE_DEVICE_IE_DEVICE_ID";
LABEL_75:
          CFDictionarySetValue(v26, v27, v25);
          CFRelease(v25);
LABEL_76:
          int v14 = &v18[v16];
          int v13 = v17 - v16;
          if ((v17 - v16) <= 1u) {
            goto LABEL_101;
          }
          continue;
        }
LABEL_104:
        uint64_t v3 = 4294963395;
LABEL_102:
        CFRelease(v12);
        return v3;
      default:
        goto LABEL_76;
    }
  }
}

uint64_t Apple80211Parse80211dIE(uint64_t a1, signed int a2, __CFDictionary *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (a1 && a3)
  {
    if (a2 < 2)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        unsigned int v5 = *(unsigned __int8 *)(a1 + 1);
        BOOL v6 = *(unsigned char *)a1 == 7 && v5 >= 6;
        if (v6 && (int)(v5 + 2) <= a2) {
          break;
        }
        a2 = a2 - v5 - 2;
        if (a2 >= 1)
        {
          uint64_t v8 = a1 + *(unsigned __int8 *)(a1 + 1);
          a1 = v8 + 2;
          if (*(unsigned __int8 *)(v8 + 3) + 2 <= a2) {
            continue;
          }
        }
        return 0;
      }
      memset(v18, 0, sizeof(v18));
      *(_WORD *)cStr = *(_WORD *)(a1 + 2);
      if (v5 - 6 > 0xFFFFFFFC)
      {
        char v10 = 0;
      }
      else
      {
        if ((v5 - 6) / 3 >= 0x53) {
          unsigned int v9 = 83;
        }
        else {
          unsigned int v9 = (v5 - 6) / 3;
        }
        memcpy(&v18[2], (const void *)(a1 + 5), 3 * v9 + 3);
        char v10 = v9 + 1;
      }
      v18[1] = v10;
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], cStr, 0x8000100u);
      if (v12)
      {
        CFStringRef v13 = v12;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (Mutable)
        {
          CFNumberRef v15 = Mutable;
          CFDictionarySetValue(Mutable, @"IE_KEY_80211D_COUNTRY_CODE", v13);
          CFDictionarySetValue(a3, @"80211D_IE", v15);
          CFRelease(v13);
          uint64_t v3 = 0;
          CFStringRef v13 = (CFStringRef)v15;
        }
        else
        {
          uint64_t v3 = 4294963395;
        }
        CFRelease(v13);
      }
      else
      {
        return 4294963395;
      }
    }
  }
  return v3;
}

uint64_t Apple80211ParseWPAIE(unsigned __int8 *a1, signed int a2, __CFDictionary *a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963393;
  if (!a1 || a2 < 2) {
    return v3;
  }
  unsigned int v5 = a1;
  while (1)
  {
    unsigned int v6 = v5[1];
    BOOL v7 = *v5 == 221 && v6 >= 5;
    BOOL v8 = v7 && (int)(v6 + 2) <= a2;
    if (v8 && *(_DWORD *)(v5 + 2) == 32657408) {
      break;
    }
    a2 = a2 - v6 - 2;
    if (a2 >= 1)
    {
      unsigned int v9 = &v5[v5[1]];
      unsigned int v5 = v9 + 2;
      if (v9[3] + 2 <= a2) {
        continue;
      }
    }
    return 4294963393;
  }
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v52 + 12) = v11;
  long long v51 = v11;
  v52[0] = v11;
  long long v49 = v11;
  long long v50 = v11;
  long long v47 = v11;
  long long v48 = v11;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  int v14 = Mutable;
  unsigned __int16 valuePtr = -21846;
  if (!a3) {
    goto LABEL_60;
  }
  if (!Mutable) {
    return 4294963395;
  }
  unint64_t v15 = v5[1];
  if (v15 < 6) {
    goto LABEL_62;
  }
  unsigned __int16 valuePtr = *((_WORD *)v5 + 3);
  CFNumberRef v16 = CFNumberCreate(v12, kCFNumberSInt16Type, &valuePtr);
  if (!v16)
  {
    uint64_t v3 = 4294963395;
    goto LABEL_57;
  }
  CFNumberRef v17 = v16;
  CFDictionarySetValue(v14, @"IE_KEY_WPA_VERSION", v16);
  CFRelease(v17);
  if (valuePtr != 1)
  {
    CFDictionarySetValue(a3, @"WPA_IE", v14);
    uint64_t v3 = 0;
LABEL_57:
    CFRelease(v14);
    return v3;
  }
  long long v47 = 0u;
  long long v48 = 0u;
  long long v51 = 0u;
  memset(v52, 0, 28);
  long long v49 = 0u;
  long long v50 = 0u;
  int v18 = 2;
  DWORD2(v47) = 2;
  WORD6(v47) = 1;
  LOWORD(v50) = 1;
  DWORD1(v50) = 1;
  LODWORD(v48) = 2;
  if (((v15 - 6) & 0xFFFFFFFC) == 0
    || (int v18 = v5[11], DWORD2(v47) = v18, ((v15 - 10) & 0xFFFFFFFE) == 0))
  {
    LODWORD(v19) = 1;
    goto LABEL_42;
  }
  unsigned __int16 valuePtr = *((_WORD *)v5 + 6);
  uint64_t v19 = valuePtr;
  if (valuePtr > 8u)
  {
LABEL_62:
    uint64_t v3 = 4294963396;
    goto LABEL_57;
  }
  unsigned int v20 = v15 - 12;
  if (valuePtr)
  {
    uint64_t v21 = 0;
    int v22 = v5 + 17;
    do
    {
      BOOL v7 = v20 >= 4;
      v20 -= 4;
      if (!v7)
      {
        WORD6(v47) = v21;
        goto LABEL_60;
      }
      int v23 = *v22;
      v22 += 4;
      *((_DWORD *)&v48 + v21++) = v23;
    }
    while (v19 != v21);
    uint64_t v24 = v19;
  }
  else
  {
    uint64_t v24 = 0;
  }
  WORD6(v47) = v19;
  BOOL v7 = v20 >= 2;
  unsigned int v25 = v20 - 2;
  if (!v7) {
    goto LABEL_42;
  }
  unsigned __int16 valuePtr = *(_WORD *)&v5[4 * v24 + 14];
  uint64_t v26 = valuePtr;
  if (valuePtr > 8u)
  {
LABEL_60:
    uint64_t v3 = 4294963396;
    goto LABEL_56;
  }
  if (valuePtr)
  {
    uint64_t v27 = 0;
    CFStringRef v28 = &v5[4 * v24 + 19];
    while (1)
    {
      BOOL v7 = v25 >= 4;
      v25 -= 4;
      if (!v7) {
        break;
      }
      int v29 = *v28;
      v28 += 4;
      *((_DWORD *)&v50 + ++v27) = v29;
      if (v26 == v27) {
        goto LABEL_41;
      }
    }
    LOWORD(v50) = v27;
    goto LABEL_60;
  }
LABEL_41:
  LOWORD(v50) = v26;
LABEL_42:
  int v46 = v18;
  CFNumberRef v30 = CFNumberCreate(v12, kCFNumberSInt32Type, &v46);
  if (!v30) {
    goto LABEL_59;
  }
  CFNumberRef v31 = v30;
  CFDictionarySetValue(v14, @"IE_KEY_WPA_MCIPHER", v30);
  CFRelease(v31);
  CFMutableArrayRef v32 = CFArrayCreateMutable(v12, 0, MEMORY[0x263EFFF70]);
  if (!v32) {
    goto LABEL_59;
  }
  CFNumberRef v33 = v32;
  if (v19)
  {
    unint64_t v34 = 0;
    CFDataRef v35 = &v48;
    do
    {
      CFNumberRef v36 = CFNumberCreate(v12, kCFNumberSInt32Type, v35);
      if (!v36) {
        goto LABEL_58;
      }
      CFNumberRef v37 = v36;
      CFArrayAppendValue(v33, v36);
      CFRelease(v37);
      ++v34;
      CFDataRef v35 = (long long *)((char *)v35 + 4);
    }
    while (v34 < WORD6(v47));
  }
  CFDictionarySetValue(v14, @"IE_KEY_WPA_UCIPHERS", v33);
  CFMutableArrayRef v38 = CFArrayCreateMutable(v12, 0, MEMORY[0x263EFFF70]);
  if (!v38)
  {
LABEL_58:
    CFRelease(v33);
LABEL_59:
    uint64_t v3 = 4294963395;
    goto LABEL_56;
  }
  CFNumberRef v39 = v38;
  if ((_WORD)v50)
  {
    unint64_t v40 = 0;
    int v41 = (char *)&v50 + 4;
    while (1)
    {
      CFNumberRef v42 = CFNumberCreate(v12, kCFNumberSInt32Type, v41);
      if (!v42) {
        break;
      }
      CFNumberRef v43 = v42;
      CFArrayAppendValue(v39, v42);
      CFRelease(v43);
      ++v40;
      v41 += 4;
      if (v40 >= (unsigned __int16)v50) {
        goto LABEL_53;
      }
    }
    int v44 = 0;
    uint64_t v3 = 4294963395;
  }
  else
  {
LABEL_53:
    CFDictionarySetValue(v14, @"IE_KEY_WPA_AUTHSELS", v39);
    uint64_t v3 = 0;
    int v44 = 1;
  }
  CFRelease(v33);
  CFRelease(v39);
  if (v44)
  {
    CFDictionarySetValue(a3, @"WPA_IE", v14);
    uint64_t v3 = 0;
  }
LABEL_56:
  if (v14) {
    goto LABEL_57;
  }
  return v3;
}

uint64_t Apple80211ParseWAPIIE(unsigned char *a1, signed int a2, CFDictionaryRef theDict)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963393;
  if (a1 && a2 >= 2)
  {
    while (1)
    {
      unsigned int v5 = a1[1];
      BOOL v6 = *a1 == 68 && v5 >= 5;
      BOOL v7 = v6 && (int)(v5 + 2) <= a2;
      if (v7 && a1[2] == 1) {
        break;
      }
      a2 = a2 - v5 - 2;
      if (a2 >= 1)
      {
        BOOL v8 = &a1[a1[1]];
        a1 = v8 + 2;
        if (v8[3] + 2 <= a2) {
          continue;
        }
      }
      return 4294963393;
    }
    uint64_t v10 = a1[4];
    uint64_t v3 = 4294963393;
    if (a1[4])
    {
      if (4 * (int)v10 + 6 <= v5)
      {
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        for (i = a1 + 6; ; i += 4)
        {
          if (*(_WORD *)i != 5120 || i[2] != 114) {
            goto LABEL_34;
          }
          int valuePtr = 3;
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"WAPI");
          if (Value) {
            CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
          }
          int v15 = i[3];
          if (v15 == 2) {
            break;
          }
          if (v15 == 1)
          {
            uint64_t v3 = 0;
            int v16 = valuePtr + 8;
LABEL_30:
            int valuePtr = v16;
            goto LABEL_32;
          }
          int v16 = valuePtr;
LABEL_32:
          if (v16 >= 4)
          {
            CFNumberRef v17 = CFNumberCreate(v11, kCFNumberIntType, &valuePtr);
            CFDictionarySetValue(theDict, @"WAPI", v17);
            CFRelease(v17);
          }
LABEL_34:
          if (!--v10) {
            return v3;
          }
        }
        uint64_t v3 = 0;
        int v16 = valuePtr + 4;
        goto LABEL_30;
      }
    }
  }
  return v3;
}

uint64_t Apple80211ParseRSNXE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963393;
  if (!a1 || !a2) {
    return v3;
  }
  unsigned int v5 = a1;
  while (a2 < 3 || *v5 != 244)
  {
    uint64_t v7 = v5[1];
    a2 = a2 - v7 - 2;
    if (a2 < 1) {
      return 4294963393;
    }
    BOOL v8 = &v5[v7];
    unsigned int v5 = v8 + 2;
    unsigned int v6 = v8[3];
LABEL_10:
    if (v6 + 2 > a2) {
      return 4294963393;
    }
  }
  unsigned int v6 = v5[1];
  if (a2 - 2 < v6) {
    goto LABEL_10;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFAllocatorRef v12 = Mutable;
  if (!a3)
  {
    uint64_t v3 = 4294963396;
    if (Mutable) {
      goto LABEL_32;
    }
    return v3;
  }
  if (!Mutable) {
    return 4294963395;
  }
  if (*v5 != 244)
  {
    uint64_t v3 = 4294963379;
    goto LABEL_32;
  }
  if (!v5[2]) {
    goto LABEL_30;
  }
  CFStringRef v13 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v13)
  {
LABEL_37:
    uint64_t v3 = 4294963395;
    goto LABEL_32;
  }
  int v14 = v13;
  int v15 = (const void *)*MEMORY[0x263EFFB38];
  int v16 = (const void *)*MEMORY[0x263EFFB40];
  if ((v5[2] & 0x10) != 0) {
    CFNumberRef v17 = (const void *)*MEMORY[0x263EFFB40];
  }
  else {
    CFNumberRef v17 = (const void *)*MEMORY[0x263EFFB38];
  }
  CFDictionaryAddValue(v13, @"RSNXE_PROTECTED_TWT", v17);
  if ((v5[2] & 0x20) != 0) {
    int v18 = v16;
  }
  else {
    int v18 = v15;
  }
  CFDictionaryAddValue(v14, @"RSNXE_SAE_H2E", v18);
  if ((v5[2] & 0x40) != 0) {
    uint64_t v19 = v16;
  }
  else {
    uint64_t v19 = v15;
  }
  CFDictionaryAddValue(v14, @"RSNXE_SAE_PK", v19);
  unsigned __int8 valuePtr = v5[1];
  CFNumberRef v20 = CFNumberCreate(v10, kCFNumberSInt16Type, &valuePtr);
  if (!v20
    || (CFNumberRef v21 = v20,
        CFDictionaryAddValue(v14, @"RSNXE_CAP_LEN", v20),
        CFRelease(v21),
        unsigned __int8 valuePtr = v5[2] & 0xF,
        (CFNumberRef v22 = CFNumberCreate(v10, kCFNumberSInt16Type, &valuePtr)) == 0))
  {
    CFRelease(v14);
    goto LABEL_37;
  }
  CFNumberRef v23 = v22;
  CFDictionaryAddValue(v14, @"RSNXE_CAP_RSNXE_LEN", v22);
  CFRelease(v23);
  CFDictionaryAddValue(v12, @"IE_KEY_RSNXE_CAPS", v14);
  CFRelease(v14);
LABEL_30:
  CFDictionarySetValue(a3, @"RSN_XE", v12);
  uint64_t v3 = 0;
LABEL_32:
  CFRelease(v12);
  return v3;
}

uint64_t Apple80211ParseRSNIE(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963393;
  if (!a1 || !a2) {
    return v3;
  }
  uint64_t v5 = a1;
  while (a2 < 3 || *(unsigned char *)v5 != 48)
  {
    uint64_t v7 = *(unsigned __int8 *)(v5 + 1);
    a2 = a2 - v7 - 2;
    if (a2 < 1) {
      return 4294963393;
    }
    uint64_t v8 = v5 + v7;
    uint64_t v5 = v8 + 2;
    unsigned int v6 = *(unsigned __int8 *)(v8 + 3);
LABEL_10:
    if (v6 + 2 > a2) {
      return 4294963393;
    }
  }
  unsigned int v6 = *(unsigned __int8 *)(v5 + 1);
  if (a2 - 2 < v6) {
    goto LABEL_10;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFAllocatorRef v12 = Mutable;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v81 + 12) = v13;
  long long v80 = v13;
  v81[0] = v13;
  long long v78 = v13;
  long long v79 = v13;
  long long v76 = v13;
  long long v77 = v13;
  unsigned __int16 valuePtr = -21846;
  if (!a3) {
    goto LABEL_100;
  }
  if (!Mutable) {
    return 4294963395;
  }
  unsigned int v14 = *(unsigned __int8 *)(v5 + 1);
  unsigned __int16 valuePtr = *(_WORD *)(v5 + 2);
  CFNumberRef v15 = CFNumberCreate(v10, kCFNumberSInt16Type, &valuePtr);
  if (!v15)
  {
    uint64_t v3 = 4294963395;
    goto LABEL_95;
  }
  CFNumberRef v16 = v15;
  CFDictionarySetValue(v12, @"IE_KEY_RSN_VERSION", v15);
  CFRelease(v16);
  if (valuePtr != 1)
  {
    CFDictionarySetValue(a3, @"RSN_IE", v12);
    uint64_t v3 = 0;
    goto LABEL_95;
  }
  long long v76 = 0u;
  long long v77 = 0u;
  long long v80 = 0u;
  memset(v81, 0, 28);
  long long v78 = 0u;
  long long v79 = 0u;
  int v17 = 4;
  DWORD2(v76) = 4;
  WORD6(v76) = 1;
  LODWORD(v77) = 4;
  LOWORD(v79) = 1;
  DWORD1(v79) = 1;
  if (v14 == 2) {
    goto LABEL_43;
  }
  uint64_t v3 = 4294963396;
  if (v14 < 3 || v14 - 2 < 4) {
    goto LABEL_95;
  }
  int v17 = *(unsigned __int8 *)(v5 + 7);
  DWORD2(v76) = v17;
  if (v14 == 6)
  {
LABEL_43:
    int v75 = v17;
    CFNumberRef v40 = CFNumberCreate(v10, kCFNumberSInt32Type, &v75);
    if (!v40
      || (CFNumberRef v41 = v40,
          CFDictionarySetValue(v12, @"IE_KEY_RSN_MCIPHER", v40),
          CFRelease(v41),
          (CFMutableArrayRef v42 = CFArrayCreateMutable(v10, 0, MEMORY[0x263EFFF70])) == 0))
    {
      uint64_t v3 = 4294963395;
      goto LABEL_94;
    }
    CFNumberRef v43 = v42;
    if (WORD6(v76))
    {
      unint64_t v44 = 0;
      CFNumberRef v45 = &v77;
      do
      {
        CFNumberRef v46 = CFNumberCreate(v10, kCFNumberSInt32Type, v45);
        if (!v46) {
          goto LABEL_97;
        }
        CFNumberRef v47 = v46;
        CFArrayAppendValue(v43, v46);
        CFRelease(v47);
        ++v44;
        CFNumberRef v45 = (long long *)((char *)v45 + 4);
      }
      while (v44 < WORD6(v76));
    }
    CFDictionarySetValue(v12, @"IE_KEY_RSN_UCIPHERS", v43);
    CFMutableArrayRef v48 = CFArrayCreateMutable(v10, 0, MEMORY[0x263EFFF70]);
    if (!v48)
    {
LABEL_97:
      uint64_t v3 = 4294963395;
LABEL_91:
      CFRelease(v43);
LABEL_92:
      if (!v3) {
        CFDictionarySetValue(a3, @"RSN_IE", v12);
      }
      goto LABEL_94;
    }
    long long v49 = v48;
    if ((_WORD)v79)
    {
      unint64_t v50 = 0;
      long long v51 = (char *)&v79 + 4;
      while (1)
      {
        CFNumberRef v52 = CFNumberCreate(v10, kCFNumberSInt32Type, v51);
        if (!v52) {
          break;
        }
        CFNumberRef v53 = v52;
        CFArrayAppendValue(v49, v52);
        CFRelease(v53);
        ++v50;
        v51 += 4;
        if (v50 >= (unsigned __int16)v79) {
          goto LABEL_54;
        }
      }
      CFNumberRef v55 = 0;
      goto LABEL_99;
    }
LABEL_54:
    CFDictionarySetValue(v12, @"IE_KEY_RSN_AUTHSELS", v49);
    if (WORD2(v81[0]))
    {
      CFNumberRef v54 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      CFNumberRef v55 = v54;
      if (!v54) {
        goto LABEL_99;
      }
      uint64_t v56 = *MEMORY[0x263EFFB38];
      uint64_t v57 = *MEMORY[0x263EFFB40];
      CFNumberRef v58 = (const void *)((BYTE4(v81[0]) & 1) != 0 ? *MEMORY[0x263EFFB40] : *MEMORY[0x263EFFB38]);
      CFDictionaryAddValue(v54, @"PRE_AUTH", v58);
      uint64_t v59 = (const void *)((BYTE4(v81[0]) & 2) != 0 ? v57 : v56);
      CFDictionaryAddValue(v55, @"NO_PAIRWISE", v59);
      CFNumberRef v60 = (const void *)((BYTE4(v81[0]) & 0x40) != 0 ? v57 : v56);
      CFDictionaryAddValue(v55, @"MFP_REQUIRED", v60);
      CFNumberRef v61 = (const void *)((BYTE4(v81[0]) & 0x80) != 0 ? v57 : v56);
      CFDictionaryAddValue(v55, @"MFP_CAPABLE", v61);
      switch((WORD2(v81[0]) >> 2) & 3)
      {
        case 1:
          __int16 v62 = 2;
          break;
        case 2:
          __int16 v62 = 4;
          break;
        case 3:
          __int16 v62 = 16;
          break;
        default:
          __int16 v62 = 1;
          break;
      }
      __int16 v74 = v62;
      CFNumberRef v63 = CFNumberCreate(v10, kCFNumberSInt16Type, &v74);
      if (!v63) {
        goto LABEL_99;
      }
      CFNumberRef v64 = v63;
      CFDictionaryAddValue(v55, @"PTKSA_REPLAY_COUNTERS", v63);
      CFRelease(v64);
      switch((WORD2(v81[0]) >> 4) & 3)
      {
        case 1:
          __int16 v65 = 2;
          break;
        case 2:
          __int16 v65 = 4;
          break;
        case 3:
          __int16 v65 = 16;
          break;
        default:
          __int16 v65 = 1;
          break;
      }
      __int16 v74 = v65;
      CFNumberRef v66 = CFNumberCreate(v10, kCFNumberSInt16Type, &v74);
      if (!v66) {
        goto LABEL_99;
      }
      CFNumberRef v67 = v66;
      CFDictionaryAddValue(v55, @"GTKSA_REPLAY_COUNTERS", v66);
      CFRelease(v67);
      int v68 = (const void *)((WORD2(v81[0]) & 0x4000) != 0 ? v57 : v56);
      CFDictionaryAddValue(v55, @"OCV", v68);
      CFNumberRef v69 = CFNumberCreate(v10, kCFNumberShortType, (char *)v81 + 4);
      if (!v69) {
        goto LABEL_99;
      }
      CFNumberRef v70 = v69;
      CFDictionaryAddValue(v55, @"RSN_CAPABILITIES", v69);
      CFRelease(v70);
      CFDictionaryAddValue(v12, @"IE_KEY_RSN_CAPS", v55);
    }
    else
    {
      CFNumberRef v55 = 0;
    }
    if (!DWORD2(v81[1]))
    {
LABEL_89:
      uint64_t v3 = 0;
      goto LABEL_90;
    }
    int v75 = DWORD2(v81[1]);
    CFNumberRef v71 = CFNumberCreate(v10, kCFNumberSInt32Type, &v75);
    if (v71)
    {
      CFNumberRef v72 = v71;
      CFDictionarySetValue(v12, @"IE_KEY_RSN_BCIPHER", v71);
      CFRelease(v72);
      goto LABEL_89;
    }
LABEL_99:
    uint64_t v3 = 4294963395;
LABEL_90:
    CFRelease(v43);
    CFRelease(v49);
    CFNumberRef v43 = v55;
    if (!v55) {
      goto LABEL_92;
    }
    goto LABEL_91;
  }
  uint64_t v3 = 4294963392;
  if (v14 < 8) {
    goto LABEL_95;
  }
  unsigned __int16 valuePtr = *(_WORD *)(v5 + 8);
  uint64_t v18 = valuePtr;
  if (valuePtr > 8u)
  {
    uint64_t v3 = 4294963396;
    goto LABEL_95;
  }
  int v19 = v14 - 8;
  WORD6(v76) = 0;
  if (!valuePtr)
  {
    LOBYTE(v18) = 0;
LABEL_30:
    if (!v19) {
      goto LABEL_43;
    }
    int v24 = v19 - 2;
    if (v19 < 2) {
      goto LABEL_96;
    }
    uint64_t v25 = v5 + 4 * v18;
    unsigned int v28 = *(unsigned __int16 *)(v25 + 10);
    uint64_t v26 = v25 + 10;
    uint64_t v27 = v28;
    unsigned __int16 valuePtr = v28;
    if (v28 <= 8)
    {
      LOWORD(v79) = 0;
      if (v27)
      {
        uint64_t v29 = 0;
        CFNumberRef v30 = (unsigned __int8 *)(v5 + 4 * v18 + 15);
        while (1)
        {
          BOOL v31 = __OFSUB__(v24, 4);
          v24 -= 4;
          if (v24 < 0 != v31) {
            goto LABEL_96;
          }
          int v32 = *v30;
          v30 += 4;
          *((_DWORD *)&v79 + ++v29) = v32;
          LOWORD(v79) = v29;
          if (v27 == v29) {
            goto LABEL_39;
          }
        }
      }
      LOBYTE(v27) = 0;
LABEL_39:
      unsigned int v33 = v24 - 2;
      if (v24 >= 2)
      {
        uint64_t v34 = v26 + 4 * v27;
        __int16 v36 = *(_WORD *)(v34 + 2);
        uint64_t v35 = v34 + 2;
        WORD2(v81[0]) = v36;
        if (v33 >= 6)
        {
          unsigned int v38 = *(unsigned __int16 *)(v35 + 2);
          uint64_t v37 = v35 + 2;
          unsigned __int16 valuePtr = v38;
          uint64_t v39 = (16 * v38) | 2;
          if ((int)(v33 - v39) >= 4) {
            DWORD2(v81[1]) = *(unsigned __int8 *)(v37 + v39 + 3);
          }
        }
      }
      goto LABEL_43;
    }
LABEL_100:
    uint64_t v3 = 4294963396;
    goto LABEL_94;
  }
  uint64_t v20 = 0;
  uint64_t v21 = v19 >> 2;
  CFNumberRef v22 = (unsigned __int8 *)(v5 + 13);
  while (v21 != v20)
  {
    int v23 = *v22;
    v22 += 4;
    *((_DWORD *)&v77 + v20++) = v23;
    WORD6(v76) = v20;
    v19 -= 4;
    if (v18 == v20) {
      goto LABEL_30;
    }
  }
LABEL_96:
  uint64_t v3 = 4294963392;
LABEL_94:
  if (v12) {
LABEL_95:
  }
    CFRelease(v12);
  return v3;
}

void _dispatchLqmTxStatsUpdate(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    if (a3 == 136)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        uint64_t v7 = Mutable;
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, (const void *)a2);
        if (v9)
        {
          CFNumberRef v10 = v9;
          CFDictionaryAddValue(v7, @"LQM_TX_STATS_TX_SUCCESS", v9);
          CFRelease(v10);
          CFNumberRef v11 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 128));
          if (v11)
          {
            CFNumberRef v12 = v11;
            CFDictionaryAddValue(v7, @"APPLE80211KEY_LQM_TX_STATS_TX_DROP_MISC", v11);
            CFRelease(v12);
            CFNumberRef v13 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 24));
            if (v13)
            {
              CFNumberRef v14 = v13;
              CFDictionaryAddValue(v7, @"APPLE80211KEY_LQM_TX_STATS_TX_NO_BUFF", v13);
              CFRelease(v14);
              CFNumberRef v15 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 48));
              if (v15)
              {
                CFNumberRef v16 = v15;
                CFDictionaryAddValue(v7, @"APPLE80211KEY_LQM_TX_STATS_TX_NO_RESOURCE", v15);
                CFRelease(v16);
                CFNumberRef v17 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 32));
                if (v17)
                {
                  CFNumberRef v18 = v17;
                  CFDictionaryAddValue(v7, @"APPLE80211KEY_LQM_TX_STATS_TX_NO_ACK", v17);
                  CFRelease(v18);
                  CFNumberRef v19 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 72));
                  if (v19)
                  {
                    CFNumberRef v20 = v19;
                    CFDictionaryAddValue(v7, @"APPLE80211KEY_LQM_TX_STATS_TX_CHIP_MODE_ERROR", v19);
                    CFRelease(v20);
                    CFNumberRef v21 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 16));
                    if (v21)
                    {
                      CFNumberRef v22 = v21;
                      CFDictionaryAddValue(v7, @"APPLE80211KEY_LQM_TX_STATS_TX_EXPIRED", v21);
                      CFRelease(v22);
                      CFNumberRef v23 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 40));
                      if (v23)
                      {
                        CFNumberRef v24 = v23;
                        CFDictionaryAddValue(v7, @"APPLE80211KEY_LQM_TX_STATS_TX_FAIL", v23);
                        CFRelease(v24);
                        CFNumberRef v25 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 104));
                        if (v25)
                        {
                          CFNumberRef v26 = v25;
                          CFDictionaryAddValue(v7, @"APPLE80211KEY_LQM_TX_STATS_TX_FW_FREE_PACKET", v25);
                          CFRelease(v26);
                          CFNumberRef v27 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 112));
                          if (v27)
                          {
                            CFNumberRef v28 = v27;
                            CFDictionaryAddValue(v7, @"APPLE80211KEY_LQM_TX_STATS_TX_MAX_RETRIES", v27);
                            CFRelease(v28);
                            CFNumberRef v29 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 120));
                            if (v29)
                            {
                              CFNumberRef v30 = v29;
                              CFDictionaryAddValue(v7, @"APPLE80211KEY_LQM_TX_STATS_TX_FORCE_LIFETIME_EXPIRED", v29);
                              CFRelease(v30);
                              (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 169, v7, 8, *(void *)(a1 + 80));
LABEL_17:
                              CFRelease(v7);
                              return;
                            }
                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                              goto LABEL_17;
                            }
                            int v36 = 136315138;
                            uint64_t v37 = "_dispatchLqmTxStatsUpdate";
                            uint64_t v34 = &_os_log_internal;
                            uint64_t v35 = "%s: Failed to allocate txForceLifetimeExpiredRef";
                          }
                          else
                          {
                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                              goto LABEL_17;
                            }
                            int v36 = 136315138;
                            uint64_t v37 = "_dispatchLqmTxStatsUpdate";
                            uint64_t v34 = &_os_log_internal;
                            uint64_t v35 = "%s: Failed to allocate txMaxRetriesRef";
                          }
                        }
                        else
                        {
                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                            goto LABEL_17;
                          }
                          int v36 = 136315138;
                          uint64_t v37 = "_dispatchLqmTxStatsUpdate";
                          uint64_t v34 = &_os_log_internal;
                          uint64_t v35 = "%s: Failed to allocate txFWFreePacketRef";
                        }
                      }
                      else
                      {
                        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                          goto LABEL_17;
                        }
                        int v36 = 136315138;
                        uint64_t v37 = "_dispatchLqmTxStatsUpdate";
                        uint64_t v34 = &_os_log_internal;
                        uint64_t v35 = "%s: Failed to allocate txFailRef";
                      }
                    }
                    else
                    {
                      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                        goto LABEL_17;
                      }
                      int v36 = 136315138;
                      uint64_t v37 = "_dispatchLqmTxStatsUpdate";
                      uint64_t v34 = &_os_log_internal;
                      uint64_t v35 = "%s: Failed to allocate txExpiredRef";
                    }
                  }
                  else
                  {
                    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_17;
                    }
                    int v36 = 136315138;
                    uint64_t v37 = "_dispatchLqmTxStatsUpdate";
                    uint64_t v34 = &_os_log_internal;
                    uint64_t v35 = "%s: Failed to allocate txChipModeErrorRef";
                  }
                }
                else
                {
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_17;
                  }
                  int v36 = 136315138;
                  uint64_t v37 = "_dispatchLqmTxStatsUpdate";
                  uint64_t v34 = &_os_log_internal;
                  uint64_t v35 = "%s: Failed to allocate txNoACKRef";
                }
              }
              else
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_17;
                }
                int v36 = 136315138;
                uint64_t v37 = "_dispatchLqmTxStatsUpdate";
                uint64_t v34 = &_os_log_internal;
                uint64_t v35 = "%s: Failed to allocate txNoResourcesRef";
              }
            }
            else
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_17;
              }
              int v36 = 136315138;
              uint64_t v37 = "_dispatchLqmTxStatsUpdate";
              uint64_t v34 = &_os_log_internal;
              uint64_t v35 = "%s: Failed to allocate txNoBuffRef";
            }
          }
          else
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_17;
            }
            int v36 = 136315138;
            uint64_t v37 = "_dispatchLqmTxStatsUpdate";
            uint64_t v34 = &_os_log_internal;
            uint64_t v35 = "%s: Failed to allocate txDroppedMiscRef";
          }
        }
        else
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_17;
          }
          int v36 = 136315138;
          uint64_t v37 = "_dispatchLqmTxStatsUpdate";
          uint64_t v34 = &_os_log_internal;
          uint64_t v35 = "%s: Failed to allocate txSuccessRef";
        }
        _os_log_impl(&dword_210714000, v34, OS_LOG_TYPE_DEFAULT, v35, (uint8_t *)&v36, 0xCu);
        goto LABEL_17;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v36 = 136315138;
        uint64_t v37 = "_dispatchLqmTxStatsUpdate";
        BOOL v31 = &_os_log_internal;
        int v32 = "%s: NULL lqmTxStatsEventDict, Bail out\n";
        uint32_t v33 = 12;
        goto LABEL_23;
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v36 = 136315394;
      uint64_t v37 = "_dispatchLqmTxStatsUpdate";
      __int16 v38 = 1024;
      int v39 = a3;
      BOOL v31 = &_os_log_internal;
      int v32 = "%s:wrong DataLen:%u\n";
      uint32_t v33 = 18;
LABEL_23:
      _os_log_impl(&dword_210714000, v31, OS_LOG_TYPE_DEFAULT, v32, (uint8_t *)&v36, v33);
    }
  }
}

void _dispatchWeightedAvgLQMUpdateEvent(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    return;
  }
  if (a3 != 16) {
    return;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return;
  }
  unsigned int v6 = Mutable;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)a2);
  if (v8)
  {
    CFNumberRef v9 = v8;
    CFDictionaryAddValue(v6, @"WEIGHT_AVG_RSSI", v8);
    CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
    if (v10)
    {
      CFNumberRef v11 = v10;
      CFDictionaryAddValue(v6, @"WEIGHT_AVG_SNR", v10);
      CFNumberRef v12 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 8));
      if (v12)
      {
        CFDictionaryAddValue(v6, @"WEIGHT_AVG_TX_RATE", v12);
        CFNumberRef v13 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 12));
        if (v13)
        {
          CFDictionaryAddValue(v6, @"WEIGHT_AVG_RX_RATE", v13);
          (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 145, v6, 8, *(void *)(a1 + 80));
        }
      }
      else
      {
        CFNumberRef v13 = 0;
      }
      CFRelease(v9);
      CFRelease(v11);
      if (v12) {
        CFRelease(v12);
      }
      if (!v13) {
        goto LABEL_16;
      }
    }
    else
    {
      CFNumberRef v13 = v9;
    }
    CFRelease(v13);
  }
LABEL_16:
  CFRelease(v6);
}

void _dispatchRealtimeSessionEvent(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    return;
  }
  if (a3 != 20) {
    return;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return;
  }
  unsigned int v6 = Mutable;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt8Type, (const void *)(a2 + 1));
  if (v8)
  {
    CFNumberRef v9 = v8;
    CFDictionaryAddValue(v6, @"ASR_SESSION_STATE", v8);
    CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)a2);
    if (!v10)
    {
LABEL_27:
      CFRelease(v9);
      goto LABEL_28;
    }
    CFNumberRef v11 = v10;
    CFDictionaryAddValue(v6, @"RT_TRAFFIC_STATE", v10);
    CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v12)
    {
      (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 156, v6, 8, *(void *)(a1 + 80));
      goto LABEL_26;
    }
    CFMutableDictionaryRef v13 = v12;
    CFNumberRef v14 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 8));
    if (!v14)
    {
LABEL_25:
      CFDictionaryAddValue(v6, @"QUAL_SCORE", v13);
      (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 156, v6, 8, *(void *)(a1 + 80));
      CFRelease(v11);
      CFNumberRef v11 = v9;
      CFNumberRef v9 = v13;
LABEL_26:
      CFRelease(v11);
      goto LABEL_27;
    }
    CFNumberRef v15 = v14;
    CFDictionaryAddValue(v13, @"CHANQUAL_SCORE", v14);
    CFNumberRef v16 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 4));
    if (!v16)
    {
      CFNumberRef v21 = v15;
LABEL_24:
      CFRelease(v21);
      goto LABEL_25;
    }
    CFNumberRef v24 = v11;
    CFNumberRef v22 = v16;
    CFDictionaryAddValue(v13, @"TX_LATENCY_SCORE", v16);
    CFNumberRef v17 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 5));
    CFNumberRef cf = v15;
    if (v17)
    {
      CFDictionaryAddValue(v13, @"RX_LATENCY_SCORE", v17);
      CFNumberRef v18 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 6));
      if (v18)
      {
        CFDictionaryAddValue(v13, @"TX_LOSS_SCORE", v18);
        CFNumberRef v19 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 7));
        if (v19)
        {
          CFDictionaryAddValue(v13, @"RX_LOSS_SCORE", v19);
          CFNumberRef v20 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 12));
          if (v20)
          {
            CFDictionaryAddValue(v13, @"P95_TX_LATENCY_SCORE", v20);
            CFNumberRef v21 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 16));
            if (v21) {
              CFDictionaryAddValue(v13, @"LINK_RECOMMENDATION_FLAGS", v21);
            }
LABEL_15:
            CFRelease(cf);
            CFRelease(v22);
            if (v17) {
              CFRelease(v17);
            }
            if (v18) {
              CFRelease(v18);
            }
            if (v19) {
              CFRelease(v19);
            }
            CFNumberRef v11 = v24;
            if (v20) {
              CFRelease(v20);
            }
            if (!v21) {
              goto LABEL_25;
            }
            goto LABEL_24;
          }
LABEL_37:
          CFNumberRef v21 = 0;
          goto LABEL_15;
        }
LABEL_36:
        CFNumberRef v20 = 0;
        goto LABEL_37;
      }
    }
    else
    {
      CFNumberRef v18 = 0;
    }
    CFNumberRef v19 = 0;
    goto LABEL_36;
  }
LABEL_28:
  CFRelease(v6);
}

uint64_t Apple80211Get(uint64_t a1)
{
  if (a1) {
    return Apple80211GetWithIOCTL();
  }
  else {
    return 4294963396;
  }
}

uint64_t Apple80211ScanAsync()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v20 = *MEMORY[0x263EF8340];
  Boolean v12 = 0;
  __int16 v11 = 0;
  if (!v0) {
    return 4294963396;
  }
  uint64_t v2 = v0;
  if ((*(_DWORD *)v0 & 0x80000000) != 0 || !*(unsigned char *)(v0 + 4)) {
    return 4294963396;
  }
  CFDictionaryRef v3 = v1;
  memset(__b, 170, sizeof(__b));
  int v14 = -1431655766;
  int v15 = -1431655766;
  char v13 = -86;
  uint64_t result = _getScanData(v3, (char *)__b, 0, &v13, &v14, &v15, &v12, (Boolean *)&v11 + 1, v2 + 88, (Boolean *)&v11);
  if (!result)
  {
    *((void *)&uu + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long uu = 0xAAAAAAAAAAAAAAAALL;
    MEMORY[0x216670B10](&uu);
    uuid_unparse((const unsigned __int8 *)&uu, (char *)&__b[681] + 4);
    long long uu = 0u;
    long long v18 = 0u;
    CFNumberRef v19 = 0;
    LODWORD(v18) = 10;
    __strlcpy_chk();
    DWORD2(v18) = 5528;
    CFNumberRef v19 = __b;
    if (Apple80211RawSet())
    {
      return *__error();
    }
    else
    {
      __strlcpy_chk();
      uint64_t v5 = (pthread_mutex_t *)(v2 + 160);
      pthread_mutex_lock((pthread_mutex_t *)(v2 + 160));
      if (!*(unsigned char *)(v2 + 232))
      {
        if (v3) {
          CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v3);
        }
        else {
          CFDictionaryRef Copy = 0;
        }
        *(void *)(v2 + 144) = Copy;
        *(void *)(v2 + 240) = 0;
        *(_DWORD *)(v2 + 236) = v15;
        *(unsigned char *)(v2 + 232) = 1;
        *(unsigned char *)(v2 + 120) = v13;
        *(unsigned char *)(v2 + 121) = v12;
        *(_DWORD *)(v2 + 124) = v14;
        *(void *)(v2 + 224) = pthread_self();
        *(_DWORD *)(v2 + 264) = 0;
        *(unsigned char *)(v2 + 128) = HIBYTE(v11);
        *(unsigned char *)(v2 + 129) = v11;
        *(void *)(v2 + 136) = __b[609];
        CFAllocatorRef v7 = *(__CFRunLoopTimer **)(v2 + 248);
        if (v7)
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFRunLoopTimerSetNextFireDate(v7, Current + 315360000.0);
        }
        CFNumberRef v9 = *(NSObject **)(v2 + 256);
        if (v9)
        {
          dispatch_time_t v10 = dispatch_time(0, 315360000000000000);
          dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0);
        }
      }
      pthread_mutex_unlock(v5);
      return 0;
    }
  }
  return result;
}

uint64_t Apple80211SetProperty()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  CFStringRef v4 = v3;
  uint64_t v5 = v0;
  uint64_t v36 = *MEMORY[0x263EF8340];
  values = v1;
  keys = v3;
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  bzero(&v31, 0x1004uLL);
  int v30 = 1;
  CFErrorRef error = 0;
  if (!v4)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 4294963396;
    }
    *(_DWORD *)buf = 136315138;
    CFNumberRef v26 = "Apple80211SetProperty";
    CFNumberRef v8 = &_os_log_internal;
    CFNumberRef v9 = "%s: key NULL\n";
LABEL_37:
    uint32_t v10 = 12;
    goto LABEL_17;
  }
  if (!v2)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 136315138;
    CFNumberRef v26 = "Apple80211SetProperty";
    CFNumberRef v8 = &_os_log_internal;
    CFNumberRef v9 = "%s: property NULL\n";
    goto LABEL_37;
  }
  if (!v5)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    size_t v11 = 0;
    int v6 = -1;
LABEL_16:
    *(_DWORD *)buf = 136315906;
    CFNumberRef v26 = "Apple80211SetProperty";
    __int16 v27 = 2048;
    *(void *)CFNumberRef v28 = v5;
    *(_WORD *)&v28[8] = 1024;
    LODWORD(v29[0]) = v6;
    WORD2(v29[0]) = 2048;
    *(void *)((char *)v29 + 6) = v11;
    CFNumberRef v8 = &_os_log_internal;
    CFNumberRef v9 = "%s: bad opaque: opaque=%p, opaque->sockfd=%d, name-len=%lu\n";
    uint32_t v10 = 38;
LABEL_17:
    _os_log_impl(&dword_210714000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
    goto LABEL_18;
  }
  int v6 = *(_DWORD *)v5;
  if ((*(_DWORD *)v5 & 0x80000000) != 0 || !*(unsigned char *)(v5 + 4))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    size_t v11 = strlen((const char *)(v5 + 4));
    goto LABEL_16;
  }
  if (CFStringGetLength(v4) <= 79)
  {
    uint64_t v7 = 0;
    while (!CFEqual(v4, _isValidProperty_DEPRECATED_validProperties_DEPRECATED[v7]))
    {
      if (++v7 == 62)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136315394;
        CFNumberRef v26 = "Apple80211SetProperty";
        __int16 v27 = 2112;
        *(void *)CFNumberRef v28 = v4;
        CFNumberRef v8 = &_os_log_internal;
        CFNumberRef v9 = "%s: Key: %@ is not a valid property\n";
        uint32_t v10 = 22;
        goto LABEL_17;
      }
    }
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDictionaryRef v15 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)&keys, (const void **)&values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v15)
    {
      uint64_t v13 = 3758097085;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        CFNumberRef v26 = "Apple80211SetProperty";
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: could not build wrapper dictionary\n", buf, 0xCu);
      }
      CFDictionaryRef v12 = 0;
      goto LABEL_28;
    }
    CFDictionaryRef v12 = v15;
    CFDataRef v16 = CFPropertyListCreateData(v14, v15, kCFPropertyListXMLFormat_v1_0, 0, &error);
    if (v16)
    {
      CFDataRef v17 = v16;
      uint64_t v18 = CFDataGetLength(v16) + 1;
      int v31 = v18;
      if (v18 > 0x1000)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          CFNumberRef v26 = "Apple80211SetProperty";
          __int16 v27 = 2048;
          *(void *)CFNumberRef v28 = v18;
          *(_WORD *)&v28[8] = 1024;
          LODWORD(v29[0]) = 4096;
          WORD2(v29[0]) = 2112;
          *(void *)((char *)v29 + 6) = values;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: serialized property dictionary too long (%lu => %i). Consider changing APPLE80211_MAX_PROPERTY_SERIAL_LEN: %@\n", buf, 0x26u);
        }
        uint64_t v13 = 4294963396;
      }
      else
      {
        v37.length = CFDataGetLength(v17);
        v37.location = 0;
        CFDataGetBytes(v17, v37, v32);
        v32[v31 - 1] = 0;
        long long v33 = 0u;
        long long v34 = 0u;
        uint64_t v35 = 0;
        LODWORD(v34) = 383;
        __strlcpy_chk();
        DWORD2(v34) = 4104;
        uint64_t v35 = &v30;
        uint64_t v13 = Apple80211RawSet();
        if (v13)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            CFNumberRef v19 = keys;
            int v20 = *__error();
            *(_DWORD *)buf = 136315906;
            CFNumberRef v26 = "Apple80211SetProperty";
            __int16 v27 = 2112;
            *(void *)CFNumberRef v28 = v19;
            *(_WORD *)&v28[8] = 1024;
            LODWORD(v29[0]) = v13;
            WORD2(v29[0]) = 1024;
            *(_DWORD *)((char *)v29 + 6) = v20;
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: failed to set %@: bsdErr=%d, errno=%d\n", buf, 0x22u);
          }
          uint64_t v13 = *__error();
        }
      }
      CFRelease(v17);
      goto LABEL_28;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      CFNumberRef v26 = "Apple80211SetProperty";
      __int16 v27 = 2112;
      *(void *)CFNumberRef v28 = error;
      *(_WORD *)&v28[8] = 2112;
      v29[0] = v12;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: cannot serialize: error: %@ property- %@\n", buf, 0x20u);
    }
    goto LABEL_19;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    CFNumberRef v26 = "Apple80211SetProperty";
    __int16 v27 = 1024;
    *(_DWORD *)CFNumberRef v28 = CFStringGetLength(v4);
    *(_WORD *)&v28[4] = 1024;
    *(_DWORD *)&v28[6] = 80;
    CFNumberRef v8 = &_os_log_internal;
    CFNumberRef v9 = "%s: C-string in key is too long (%u >= %u)\n";
    uint32_t v10 = 24;
    goto LABEL_17;
  }
LABEL_18:
  CFDictionaryRef v12 = 0;
LABEL_19:
  uint64_t v13 = 4294963396;
LABEL_28:
  if (error)
  {
    CFRelease(error);
    CFErrorRef error = 0;
  }
  if (v12) {
    CFRelease(v12);
  }
  return v13;
}

uint64_t Apple80211IOCTLSetWrapper()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(v0 + 107))
  {
    uint64_t v5 = *(unsigned int *)(v1 + 16);
    if (!*(unsigned char *)(v0 + 1801))
    {
      memset(v38, 0, 32);
      uint64_t v9 = v0 + 4;
      __strlcpy_chk();
      __uint64_t v10 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      ioctl(*(_DWORD *)v3, 0xC0206911uLL, v38);
      unint64_t v11 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v10;
      if (v11 > 0x3B9AC9FF && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136448258;
        CFNumberRef v52 = "_logTimeIfThresholdExceeded";
        __int16 v53 = 2082;
        *(void *)CFNumberRef v54 = v38;
        *(_WORD *)&v54[8] = 2080;
        *(void *)&v54[10] = " 'SIOCGIFFLAGS' ";
        *(_WORD *)&v54[18] = 1024;
        __int16 v55 = 1024;
        *(_DWORD *)&v54[20] = -1071617775;
        *(_DWORD *)uint64_t v56 = -1071617775;
        *(_WORD *)&v56[4] = 2048;
        *(void *)&v56[6] = v11 / 0x3B9ACA00;
        __int16 v57 = 2048;
        *(void *)CFNumberRef v58 = v11 % 0x3B9ACA00 / 0x3E8;
        *(_WORD *)&v58[8] = 2048;
        *(void *)&v58[10] = 1;
        *(_WORD *)&v58[18] = 2048;
        uint64_t v59 = 0;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
      }
      __strlcpy_chk();
      if (*(unsigned char *)(v3 + 1984))
      {
        __uint64_t v12 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          if ((int)v5 > 558)
          {
            uint64_t v13 = "Error Invalid ioctl";
          }
          else if (v5 == -1)
          {
            uint64_t v13 = "APPLE80211_IOC_CARD_SPECIFIC";
          }
          else if ((v5 & 0x80000000) != 0 || (uint64_t v13 = (const char *)gAppleIoucIndexToString[v5]) == 0)
          {
            uint64_t v13 = "unknown Apple80211_IOC_";
          }
          int v27 = *(_DWORD *)(v2 + 24);
          *(_DWORD *)buf = 136448258;
          CFNumberRef v52 = "Apple80211IOCTLSetWrapper";
          __int16 v53 = 1024;
          *(_DWORD *)CFNumberRef v54 = 5295;
          *(_WORD *)&v54[4] = 2048;
          *(void *)&v54[6] = v12 / 0x3B9ACA00;
          *(_WORD *)&v54[14] = 2048;
          *(void *)&v54[16] = v12 % 0x3B9ACA00 / 0x3E8;
          __int16 v55 = 2082;
          *(void *)uint64_t v56 = v3 + 4;
          *(_WORD *)&v56[8] = 1024;
          *(_DWORD *)&v56[10] = *(__int16 *)&v38[16];
          __int16 v57 = 1024;
          *(_DWORD *)CFNumberRef v58 = v5;
          *(_WORD *)&v58[4] = 2082;
          *(void *)&v58[6] = v13;
          *(_WORD *)&v58[14] = 1024;
          *(_DWORD *)&v58[16] = v27;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d]\n", buf, 0x4Cu);
        }
      }
      uint64_t v20 = ioctl(*(_DWORD *)v3, 0x802869C8uLL, v2);
      if (!v20) {
        return v20;
      }
      __uint64_t v28 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v20;
      }
      uint64_t v29 = *(unsigned int *)(v2 + 16);
      if ((int)v29 > 558)
      {
        int v30 = "Error Invalid ioctl";
      }
      else if (v29 == -1)
      {
        int v30 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if ((v29 & 0x80000000) != 0 || (int v30 = (const char *)gAppleIoucIndexToString[v29]) == 0)
      {
        int v30 = "unknown Apple80211_IOC_";
      }
      int v31 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)buf = 136448770;
      CFNumberRef v52 = "Apple80211IOCTLSetWrapper";
      __int16 v53 = 1024;
      *(_DWORD *)CFNumberRef v54 = 5301;
      *(_WORD *)&v54[4] = 2048;
      *(void *)&v54[6] = v28 / 0x3B9ACA00;
      *(_WORD *)&v54[14] = 2048;
      *(void *)&v54[16] = v28 % 0x3B9ACA00 / 0x3E8;
      __int16 v55 = 2082;
      *(void *)uint64_t v56 = v9;
      *(_WORD *)&v56[8] = 1024;
      *(_DWORD *)&v56[10] = *(__int16 *)&v38[16];
      __int16 v57 = 1024;
      *(_DWORD *)CFNumberRef v58 = v29;
      *(_WORD *)&v58[4] = 2082;
      *(void *)&v58[6] = v30;
      *(_WORD *)&v58[14] = 1024;
      *(_DWORD *)&v58[16] = v31;
      LOWORD(v59) = 1024;
      *(_DWORD *)((char *)&v59 + 2) = v20;
      HIWORD(v59) = 1024;
      int v60 = v20;
      int v32 = &_os_log_internal;
      long long v33 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d] return %d/0x%08x\n";
      long long v34 = buf;
      uint32_t v35 = 88;
      goto LABEL_83;
    }
    size_t outputStructCnt = 0;
    bzero(buf, 0x3C30uLL);
    *(_DWORD *)buf = -2144835128;
    uint64_t v6 = v3 + 4;
    __strlcpy_chk();
    int v61 = v5;
    if (*(unsigned char *)(v3 + 1984))
    {
      __uint64_t v7 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        if ((int)v5 > 558)
        {
          CFNumberRef v8 = "Error Invalid ioctl";
        }
        else if (v5 == -1)
        {
          CFNumberRef v8 = "APPLE80211_IOC_CARD_SPECIFIC";
        }
        else if ((v5 & 0x80000000) != 0 || (CFNumberRef v8 = (const char *)gAppleIoucIndexToString[v5]) == 0)
        {
          CFNumberRef v8 = "unknown Apple80211_IOC_";
        }
        int v14 = *(_DWORD *)(v2 + 24);
        *(_DWORD *)__int16 v38 = 136448002;
        *(void *)&v38[4] = "Apple80211IOCTLSetWrapper";
        *(_WORD *)&v38[12] = 1024;
        *(_DWORD *)&v38[14] = 5225;
        *(_WORD *)&v38[18] = 2048;
        *(void *)&v38[20] = v7 / 0x3B9ACA00;
        *(_WORD *)&v38[28] = 2048;
        *(void *)&v38[30] = v7 % 0x3B9ACA00 / 0x3E8;
        __int16 v39 = 2082;
        uint64_t v40 = v3 + 4;
        __int16 v41 = 1024;
        int v42 = v5;
        __int16 v43 = 2082;
        unint64_t v44 = v8;
        __int16 v45 = 1024;
        int v46 = v14;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d]\n", v38, 0x46u);
      }
    }
    int v15 = *(_DWORD *)(v2 + 20);
    if (v15) {
      int v62 = *(_DWORD *)(v2 + 20);
    }
    size_t v16 = *(unsigned int *)(v2 + 24);
    if (v16 >= 0x3C01)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int16 v38 = 136446466;
        *(void *)&v38[4] = "Apple80211IOCTLSetWrapper";
        *(_WORD *)&v38[12] = 1024;
        *(_DWORD *)&v38[14] = v16;
        CFDataRef v17 = &_os_log_internal;
        uint64_t v18 = "%{public}s: req_len %d exceeds max input buffer length\n";
LABEL_38:
        _os_log_impl(&dword_210714000, v17, OS_LOG_TYPE_DEFAULT, v18, v38, 0x12u);
        return 22;
      }
      return 22;
    }
    CFNumberRef v19 = *(void **)(v2 + 32);
    if (v16)
    {
      if (v19)
      {
        LODWORD(v52) = *(_DWORD *)(v2 + 24);
        __memcpy_chk();
LABEL_40:
        int v21 = *(_DWORD *)(v2 + 16);
        if (v21 == 94 || v21 == 293 || v21 == 153)
        {
          size_t outputStructCnt = v16;
        }
        else
        {
          CFNumberRef v19 = 0;
          if ((v21 & 0xFFFFFFFE) == 0x18) {
            int v62 = v15;
          }
        }
        if (*(_DWORD *)(v3 + 1804))
        {
          pthread_self();
          uint64_t v22 = IOConnectCallStructMethod(*(_DWORD *)(v3 + 1804), 0, buf, 0x3C30uLL, v19, &outputStructCnt);
          if (!v22)
          {
            if (!outputStructCnt || outputStructCnt == *(_DWORD *)(v2 + 24)) {
              return 0;
            }
            uint64_t v20 = 0;
            *(_DWORD *)(v2 + 24) = outputStructCnt;
            return v20;
          }
          uint64_t v20 = v22;
          *__error() = v22;
          __uint64_t v23 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return v20;
          }
          if ((int)v5 > 558)
          {
            CFNumberRef v24 = "Error Invalid ioctl";
          }
          else if (v5 == -1)
          {
            CFNumberRef v24 = "APPLE80211_IOC_CARD_SPECIFIC";
          }
          else if ((v5 & 0x80000000) != 0 || (CFNumberRef v24 = (const char *)gAppleIoucIndexToString[v5]) == 0)
          {
            CFNumberRef v24 = "unknown Apple80211_IOC_";
          }
          int v36 = *(_DWORD *)(v2 + 24);
          *(_DWORD *)__int16 v38 = 136448514;
          *(void *)&v38[4] = "Apple80211IOCTLSetWrapper";
          *(_WORD *)&v38[12] = 1024;
          *(_DWORD *)&v38[14] = 5274;
          *(_WORD *)&v38[18] = 2048;
          *(void *)&v38[20] = v23 / 0x3B9ACA00;
          *(_WORD *)&v38[28] = 2048;
          *(void *)&v38[30] = v23 % 0x3B9ACA00 / 0x3E8;
          __int16 v39 = 2082;
          uint64_t v40 = v6;
          __int16 v41 = 1024;
          int v42 = v5;
          __int16 v43 = 2082;
          unint64_t v44 = v24;
          __int16 v45 = 1024;
          int v46 = v36;
          __int16 v47 = 1024;
          int v48 = v20;
          __int16 v49 = 1024;
          int v50 = v20;
          int v32 = &_os_log_internal;
          long long v33 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d] return %d/0x%08x\n";
          long long v34 = v38;
          uint32_t v35 = 82;
        }
        else
        {
          uint64_t v20 = 3758097088;
          __uint64_t v25 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return v20;
          }
          if ((int)v5 > 558)
          {
            CFNumberRef v26 = "Error Invalid ioctl";
          }
          else if (v5 == -1)
          {
            CFNumberRef v26 = "APPLE80211_IOC_CARD_SPECIFIC";
          }
          else if ((v5 & 0x80000000) != 0 || (CFNumberRef v26 = (const char *)gAppleIoucIndexToString[v5]) == 0)
          {
            CFNumberRef v26 = "unknown Apple80211_IOC_";
          }
          *(_DWORD *)__int16 v38 = 136447746;
          *(void *)&v38[4] = "Apple80211IOCTLSetWrapper";
          *(_WORD *)&v38[12] = 1024;
          *(_DWORD *)&v38[14] = 5256;
          *(_WORD *)&v38[18] = 2048;
          *(void *)&v38[20] = v25 / 0x3B9ACA00;
          *(_WORD *)&v38[28] = 2048;
          *(void *)&v38[30] = v25 % 0x3B9ACA00 / 0x3E8;
          __int16 v39 = 2082;
          uint64_t v40 = v6;
          __int16 v41 = 1024;
          int v42 = v5;
          __int16 v43 = 2082;
          unint64_t v44 = v26;
          int v32 = &_os_log_internal;
          long long v33 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] WiFi is in the middle of recovery, ignore command, typ"
                "e %d/'%{public}s'\n";
          long long v34 = v38;
          uint32_t v35 = 64;
        }
LABEL_83:
        _os_log_impl(&dword_210714000, v32, OS_LOG_TYPE_DEFAULT, v33, v34, v35);
        return v20;
      }
    }
    else if (!v19)
    {
      goto LABEL_40;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int16 v38 = 136446466;
      *(void *)&v38[4] = "Apple80211IOCTLSetWrapper";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = v16;
      CFDataRef v17 = &_os_log_internal;
      uint64_t v18 = "%{public}s: Invalid data or length in req: len %d\n";
      goto LABEL_38;
    }
    return 22;
  }
  return _Apple80211AWDLCompatibilityCall();
}

uint64_t Apple80211RawSet()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(v1 + 24) < 0x3C01u)
  {
    return Apple80211IOCTLSetWrapper();
  }
  if (!*(unsigned char *)(v0 + 107))
  {
    uint64_t v5 = *(unsigned int *)(v1 + 16);
    if (!*(unsigned char *)(v0 + 1801))
    {
      memset(v32, 0, 32);
      uint64_t v9 = v0 + 4;
      __strlcpy_chk();
      __uint64_t v10 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      ioctl(*(_DWORD *)v3, 0xC0206911uLL, v32);
      unint64_t v11 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v10;
      if (v11 > 0x3B9AC9FF && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136448258;
        unint64_t v44 = "_logTimeIfThresholdExceeded";
        __int16 v45 = 2082;
        *(void *)int v46 = v32;
        *(_WORD *)&v46[8] = 2080;
        *(void *)&v46[10] = " 'SIOCGIFFLAGS' ";
        *(_WORD *)&v46[18] = 1024;
        __int16 v47 = 1024;
        *(_DWORD *)&v46[20] = -1071617775;
        *(_DWORD *)int v48 = -1071617775;
        *(_WORD *)&v48[4] = 2048;
        *(void *)&v48[6] = v11 / 0x3B9ACA00;
        __int16 v49 = 2048;
        *(void *)int v50 = v11 % 0x3B9ACA00 / 0x3E8;
        *(_WORD *)&v50[8] = 2048;
        *(void *)&v50[10] = 1;
        *(_WORD *)&v50[18] = 2048;
        uint64_t v51 = 0;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
      }
      __strlcpy_chk();
      if (*(unsigned char *)(v3 + 1984))
      {
        __uint64_t v12 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          if ((int)v5 > 558)
          {
            uint64_t v13 = "Error Invalid ioctl";
          }
          else if (v5 == -1)
          {
            uint64_t v13 = "APPLE80211_IOC_CARD_SPECIFIC";
          }
          else if ((v5 & 0x80000000) != 0 || (uint64_t v13 = (const char *)gAppleIoucIndexToString[v5]) == 0)
          {
            uint64_t v13 = "unknown Apple80211_IOC_";
          }
          int v22 = *(_DWORD *)(v2 + 24);
          *(_DWORD *)buf = 136448258;
          unint64_t v44 = "_Apple80211LargeIOCTLSetWrapper";
          __int16 v45 = 1024;
          *(_DWORD *)int v46 = 349;
          *(_WORD *)&v46[4] = 2048;
          *(void *)&v46[6] = v12 / 0x3B9ACA00;
          *(_WORD *)&v46[14] = 2048;
          *(void *)&v46[16] = v12 % 0x3B9ACA00 / 0x3E8;
          __int16 v47 = 2082;
          *(void *)int v48 = v3 + 4;
          *(_WORD *)&v48[8] = 1024;
          *(_DWORD *)&v48[10] = v5;
          __int16 v49 = 1024;
          *(_DWORD *)int v50 = *(__int16 *)&v32[16];
          *(_WORD *)&v50[4] = 2082;
          *(void *)&v50[6] = v13;
          *(_WORD *)&v50[14] = 1024;
          *(_DWORD *)&v50[16] = v22;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s:%u  @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d]\n", buf, 0x4Cu);
        }
      }
      uint64_t v19 = ioctl(*(_DWORD *)v3, 0x802869C8uLL, v2);
      if (!v19) {
        return v19;
      }
      __uint64_t v23 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v19;
      }
      if ((int)v5 > 558)
      {
        CFNumberRef v24 = "Error Invalid ioctl";
      }
      else if (v5 == -1)
      {
        CFNumberRef v24 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if ((v5 & 0x80000000) != 0 || (CFNumberRef v24 = (const char *)gAppleIoucIndexToString[v5]) == 0)
      {
        CFNumberRef v24 = "unknown Apple80211_IOC_";
      }
      int v25 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)buf = 136448514;
      unint64_t v44 = "_Apple80211LargeIOCTLSetWrapper";
      __int16 v45 = 1024;
      *(_DWORD *)int v46 = 355;
      *(_WORD *)&v46[4] = 2048;
      *(void *)&v46[6] = v23 / 0x3B9ACA00;
      *(_WORD *)&v46[14] = 2048;
      *(void *)&v46[16] = v23 % 0x3B9ACA00 / 0x3E8;
      __int16 v47 = 2082;
      *(void *)int v48 = v9;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)&v48[10] = *(__int16 *)&v32[16];
      __int16 v49 = 1024;
      *(_DWORD *)int v50 = v5;
      *(_WORD *)&v50[4] = 2082;
      *(void *)&v50[6] = v24;
      *(_WORD *)&v50[14] = 1024;
      *(_DWORD *)&v50[16] = v25;
      LOWORD(v51) = 1024;
      *(_DWORD *)((char *)&v51 + 2) = v19;
      CFNumberRef v26 = &_os_log_internal;
      int v27 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d] return %d\n";
      __uint64_t v28 = buf;
      uint32_t v29 = 82;
LABEL_67:
      _os_log_impl(&dword_210714000, v26, OS_LOG_TYPE_DEFAULT, v27, v28, v29);
      return v19;
    }
    bzero(buf, 0x3C030uLL);
    *(_DWORD *)buf = -2144835128;
    uint64_t v6 = v3 + 4;
    __strlcpy_chk();
    int v52 = v5;
    if (*(unsigned char *)(v3 + 1984))
    {
      __uint64_t v7 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        if ((int)v5 > 558)
        {
          CFNumberRef v8 = "Error Invalid ioctl";
        }
        else if (v5 == -1)
        {
          CFNumberRef v8 = "APPLE80211_IOC_CARD_SPECIFIC";
        }
        else if ((v5 & 0x80000000) != 0 || (CFNumberRef v8 = (const char *)gAppleIoucIndexToString[v5]) == 0)
        {
          CFNumberRef v8 = "unknown Apple80211_IOC_";
        }
        int v14 = *(_DWORD *)(v2 + 24);
        *(_DWORD *)int v32 = 136448002;
        *(void *)&v32[4] = "_Apple80211LargeIOCTLSetWrapper";
        *(_WORD *)&v32[12] = 1024;
        *(_DWORD *)&v32[14] = 299;
        *(_WORD *)&v32[18] = 2048;
        *(void *)&v32[20] = v7 / 0x3B9ACA00;
        *(_WORD *)&v32[28] = 2048;
        *(void *)&v32[30] = v7 % 0x3B9ACA00 / 0x3E8;
        __int16 v33 = 2082;
        uint64_t v34 = v3 + 4;
        __int16 v35 = 1024;
        int v36 = v5;
        __int16 v37 = 2082;
        __int16 v38 = v8;
        __int16 v39 = 1024;
        int v40 = v14;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s:%u  @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d]\n", v32, 0x46u);
      }
    }
    if (*(_DWORD *)(v2 + 20)) {
      int v53 = *(_DWORD *)(v2 + 20);
    }
    size_t v15 = *(unsigned int *)(v2 + 24);
    if (v15 > 0x3C000)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v32 = 136315394;
        *(void *)&v32[4] = "_Apple80211LargeIOCTLSetWrapper";
        *(_WORD *)&v32[12] = 1024;
        *(_DWORD *)&v32[14] = v15;
        size_t v16 = &_os_log_internal;
        CFDataRef v17 = "%s: req_len %d exceeds max input buffer length\n";
LABEL_42:
        _os_log_impl(&dword_210714000, v16, OS_LOG_TYPE_DEFAULT, v17, v32, 0x12u);
        return 22;
      }
      return 22;
    }
    uint64_t v18 = *(void **)(v2 + 32);
    if (v15)
    {
      if (v18)
      {
        LODWORD(v44) = *(_DWORD *)(v2 + 24);
        __memcpy_chk();
        goto LABEL_45;
      }
    }
    else if (!v18)
    {
      size_t v15 = 0;
LABEL_45:
      size_t outputStructCnt = v15;
      uint64_t v19 = IOConnectCallStructMethod(*(_DWORD *)(v3 + 1804), 6u, buf, 0x3C030uLL, v18, &outputStructCnt);
      if (!v19) {
        return v19;
      }
      *__error() = v19;
      __uint64_t v20 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v19;
      }
      if ((int)v5 > 558)
      {
        int v21 = "Error Invalid ioctl";
      }
      else if (v5 == -1)
      {
        int v21 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if ((v5 & 0x80000000) != 0 || (int v21 = (const char *)gAppleIoucIndexToString[v5]) == 0)
      {
        int v21 = "unknown Apple80211_IOC_";
      }
      int v30 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)int v32 = 136448258;
      *(void *)&v32[4] = "_Apple80211LargeIOCTLSetWrapper";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = 328;
      *(_WORD *)&v32[18] = 2048;
      *(void *)&v32[20] = v20 / 0x3B9ACA00;
      *(_WORD *)&v32[28] = 2048;
      *(void *)&v32[30] = v20 % 0x3B9ACA00 / 0x3E8;
      __int16 v33 = 2082;
      uint64_t v34 = v6;
      __int16 v35 = 1024;
      int v36 = v5;
      __int16 v37 = 2082;
      __int16 v38 = v21;
      __int16 v39 = 1024;
      int v40 = v30;
      __int16 v41 = 1024;
      int v42 = v19;
      CFNumberRef v26 = &_os_log_internal;
      int v27 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d] return %d\n";
      __uint64_t v28 = v32;
      uint32_t v29 = 76;
      goto LABEL_67;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v32 = 136315394;
      *(void *)&v32[4] = "_Apple80211LargeIOCTLSetWrapper";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = v15;
      size_t v16 = &_os_log_internal;
      CFDataRef v17 = "%s: Invalid data or length in req: len %d\n";
      goto LABEL_42;
    }
    return 22;
  }
  return _Apple80211AWDLCompatibilityCall();
}

uint64_t _getScanData(const __CFDictionary *a1, char *a2, uint64_t a3, unsigned char *a4, _DWORD *a5, _DWORD *a6, Boolean *a7, Boolean *a8, uint64_t a9, Boolean *a10)
{
  usedBufLen[4] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 4294963396;
  }
  bzero(a2, 0x1598uLL);
  *(_DWORD *)a2 = 1;
  if (!a1)
  {
    *((_DWORD *)a2 + 1) = 3;
    *(void *)(a2 + 52) = 0x100000001;
    if (a4) {
      *a4 = 1;
    }
    if (a6) {
      *a6 = 1;
    }
    uint64_t result = 0;
    if (a5) {
      *a5 = 0x80000000;
    }
    return result;
  }
  CFNumberRef v113 = a6;
  uint64_t v114 = a3;
  CFAllocatorRef v116 = a4;
  unsigned int v118 = a2;
  unsigned int v111 = a5;
  unint64_t v123 = 0xAAAAAAAAAAAAAAAALL;
  int valuePtr = -1431655766;
  __int16 v121 = -21846;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"SCAN_SSID_LIST");
  uint64_t v19 = CFDictionaryGetValue(a1, @"SCAN_BSSID_LIST");
  CFStringRef v20 = (const __CFString *)CFDictionaryGetValue(a1, @"SSID_STR");
  CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(a1, @"BSSID");
  char v112 = *(unsigned char *)(a9 + 11);
  if ((v112 & 0x40) != 0) {
    CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_SHORT_SSID");
  }
  else {
    CFNumberRef v22 = 0;
  }
  unint64_t v24 = (unint64_t)v20 | (unint64_t)v21 | (unint64_t)v22;
  BOOL v25 = v24 != 0;
  CFStringRef v115 = v20;
  if (!v24)
  {
    if (!Value)
    {
      int v42 = 0;
      __uint64_t v28 = v118;
      int v30 = v113;
      goto LABEL_47;
    }
    CFNumberRef v103 = v22;
    CFStringRef v104 = v21;
    unsigned int v105 = a7;
    CFDictionaryRef v107 = a1;
    CFNumberRef v109 = a8;
    CFIndex Count = CFArrayGetCount(Value);
    unint64_t v31 = Count - 1;
    if (Count >= 1)
    {
      CFIndex v32 = 0;
      if (v31 >= 9) {
        unint64_t v31 = 9;
      }
      unint64_t v33 = v31 + 1;
      uint64_t v34 = (uint64_t)(v118 + 4888);
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v32);
        if (!ValueAtIndex) {
          return 4294963396;
        }
        CFDictionaryRef v36 = ValueAtIndex;
        CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"SSID_STR");
        if (!v37) {
          return 4294963396;
        }
        CFStringRef v38 = v37;
        CFIndex Length = CFStringGetLength(v37);
        if (Length > 32) {
          return 4294963396;
        }
        CFIndex v40 = Length;
        *(_DWORD *)uint64_t v34 = 1;
        usedBufLen[0] = 0;
        if (CFStringGetLength(v38))
        {
          v126.location = 0;
          v126.length = v40;
          if (!CFStringGetBytes(v38, v126, 0x8000100u, 0, 0, (UInt8 *)(v34 + 8), 32, usedBufLen)) {
            return 4294963396;
          }
        }
        *(_DWORD *)(v34 + 4) = usedBufLen[0];
        __getNetworkSecurityParams(v36, v34, a9);
        ++v32;
        v34 += 56;
      }
      while (v33 != v32);
    }
    CFNumberRef v22 = v103;
    int v41 = 10;
    if (Count < 10) {
      int v41 = Count;
    }
    __uint64_t v28 = v118;
    *((_DWORD *)v118 + 1221) = v41;
    a1 = v107;
    a8 = v109;
    CFStringRef v21 = v104;
    a7 = v105;
    CFStringRef v20 = v115;
    if (v115) {
      goto LABEL_23;
    }
LABEL_40:
    int v30 = v113;
    if (v22)
    {
      CFNumberGetValue(v22, kCFNumberSInt32Type, v28 + 5448);
      uint64_t v114 = 0;
      *((_DWORD *)v28 + 4) = 4;
    }
    goto LABEL_42;
  }
  if (v20) {
    BOOL v26 = v22 == 0;
  }
  else {
    BOOL v26 = 1;
  }
  char v27 = !v26;
  __uint64_t v28 = v118;
  if (Value || v19 || (v27 & 1) != 0) {
    return 4294963396;
  }
  if (!v20) {
    goto LABEL_40;
  }
LABEL_23:
  CFIndex v29 = CFStringGetLength(v20);
  int v30 = v113;
  if ((unint64_t)(v29 - 33) < 0xFFFFFFFFFFFFFFE0) {
    return 4294963396;
  }
  v125.length = v29;
  usedBufLen[0] = 0xAAAAAAAAAAAAAAAALL;
  v125.location = 0;
  if (!CFStringGetBytes(v20, v125, 0x8000100u, 0, 0, (UInt8 *)v28 + 20, 32, usedBufLen)) {
    return 4294963396;
  }
  uint64_t v114 = 0;
  *((_DWORD *)v28 + 4) = usedBufLen[0];
LABEL_42:
  int v42 = !v25;
  if (!v21)
  {
LABEL_47:
    uint64_t v44 = v114;
    goto LABEL_48;
  }
  memset(usedBufLen, 170, 18);
  if (!CFStringGetCString(v21, (char *)usedBufLen, 18, 0x8000100u)) {
    return 4294963396;
  }
  __int16 v43 = ether_aton((const char *)usedBufLen);
  if (!v43) {
    return 4294963396;
  }
  uint64_t v44 = 0;
  int v45 = *(_DWORD *)v43->octet;
  *((_WORD *)v28 + 6) = *(_WORD *)&v43->octet[4];
  *((_DWORD *)v28 + 2) = v45;
LABEL_48:
  if (v19) {
    int v46 = 1;
  }
  else {
    int v46 = v42;
  }
  if (v115) {
    int v46 = 1;
  }
  if (v21) {
    int v46 = 1;
  }
  if (v46) {
    uint64_t v47 = v44;
  }
  else {
    uint64_t v47 = 0;
  }
  if (v116)
  {
    CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_MERGE");
    CFBooleanRef BoolRef = makeBoolRef(v48);
    if (BoolRef) {
      LOBYTE(BoolRef) = CFBooleanGetValue(BoolRef);
    }
    *CFAllocatorRef v116 = (_BYTE)BoolRef;
  }
  if (a10)
  {
    CFNumberRef v50 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_INC_BSS_LIST");
    CFBooleanRef v51 = makeBoolRef(v50);
    if (v51) {
      *a10 = CFBooleanGetValue(v51);
    }
  }
  CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_FLAGS");
  if (v52 && !CFNumberGetValue(v52, kCFNumberSInt32Type, v28 + 4872)) {
    return 4294963396;
  }
  CFNumberRef v53 = (const __CFNumber *)*MEMORY[0x263EFFB40];
  CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_LOW_PRIORITY");
  if (v53 == makeBoolRef(v54)) {
    *((void *)v28 + 609) |= 2uLL;
  }
  CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_LOW_LATENCY");
  if (v53 == makeBoolRef(v55)) {
    *((void *)v28 + 609) |= 0x20uLL;
  }
  CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_PRIO_OVERRIDE");
  if (v53 == makeBoolRef(v56)) {
    *((void *)v28 + 609) |= 0x40uLL;
  }
  CFNumberRef v57 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_IS_THROTTLED");
  if (v53 == makeBoolRef(v57)) {
    *((void *)v28 + 609) |= 0x80uLL;
  }
  CFNumberRef v58 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_ONLY_USE_LOW_POWER_CORE");
  if (v53 == makeBoolRef(v58)) {
    *((void *)v28 + 609) |= 0x1000uLL;
  }
  CFNumberRef v59 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_INC_OFFCHANNEL_BSS");
  if (v53 == makeBoolRef(v59)) {
    *((void *)v28 + 609) |= 8uLL;
  }
  if ((v112 & 0x40) == 0)
  {
    uint64_t v60 = *((void *)v28 + 609) & 0xFFFFF0FFLL;
LABEL_89:
    *((void *)v28 + 609) = v60;
    goto LABEL_90;
  }
  CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_6GHZ_FOLLOWUP");
  if (v53 == makeBoolRef(v61)) {
    *((void *)v28 + 609) |= 0x100uLL;
  }
  CFNumberRef v62 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_INCL_FILS_DISC_FRAMES");
  if (v53 == makeBoolRef(v62)) {
    *((void *)v28 + 609) |= 0x200uLL;
  }
  CFNumberRef v63 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_SKIP_FILS_DISC_PERIOD");
  if (v53 == makeBoolRef(v63)) {
    *((void *)v28 + 609) |= 0x400uLL;
  }
  CFNumberRef v64 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_INCL_ORIG_RNR");
  if (v53 == makeBoolRef(v64))
  {
    uint64_t v60 = *((void *)v28 + 609) | 0x800;
    goto LABEL_89;
  }
LABEL_90:
  *((_DWORD *)v28 + 1220) = 0x80000000;
  CFNumberRef v65 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_RSSI_THRESHOLD");
  if (v65 && !CFNumberGetValue(v65, kCFNumberSInt32Type, v28 + 4880)) {
    return 4294963396;
  }
  if (v111) {
    *unsigned int v111 = *((_DWORD *)v28 + 1220);
  }
  if (v30)
  {
    CFNumberRef v66 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_NUM_SCANS");
    if (v66)
    {
      if (!CFNumberGetValue(v66, kCFNumberSInt32Type, v30)) {
        return 4294963396;
      }
    }
    else
    {
      *int v30 = 1;
    }
  }
  CFNumberRef v67 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_TYPE");
  if (v67)
  {
    if (!CFNumberGetValue(v67, kCFNumberSInt32Type, &valuePtr)) {
      return 4294963396;
    }
    int v68 = valuePtr;
  }
  else
  {
    int v68 = 1;
  }
  *((_DWORD *)v28 + 13) = v68;
  CFNumberRef v69 = v28 + 52;
  CFNumberRef v70 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_BSS_TYPE");
  if (v70)
  {
    if (!CFNumberGetValue(v70, kCFNumberSInt32Type, &valuePtr)) {
      return 4294963396;
    }
    int v71 = valuePtr;
  }
  else
  {
    int v71 = 3;
  }
  *((_DWORD *)v28 + 1) = v71;
  CFNumberRef v72 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_PHY_MODE");
  if (v72)
  {
    if (!CFNumberGetValue(v72, kCFNumberSInt32Type, &valuePtr)) {
      return 4294963396;
    }
    int v73 = valuePtr;
  }
  else
  {
    int v73 = 1;
  }
  *((_DWORD *)v28 + 14) = v73;
  CFNumberRef v74 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_DWELL_TIME");
  if (v74)
  {
    if (!CFNumberGetValue(v74, kCFNumberSInt16Type, &v121)) {
      return 4294963396;
    }
    *((_WORD *)v28 + 30) = v121;
  }
  CFNumberRef v75 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_REST_TIME");
  if (v75)
  {
    if (!CFNumberGetValue(v75, kCFNumberSInt32Type, &valuePtr)) {
      return 4294963396;
    }
    *((_DWORD *)v28 + 16) = valuePtr;
  }
  CFNumberRef v76 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_MIN_TIMESTAMP");
  if (v76)
  {
    if (CFNumberGetValue(v76, kCFNumberSInt64Type, &v123))
    {
      *((void *)v28 + 690) = v123;
      goto LABEL_120;
    }
    return 4294963396;
  }
LABEL_120:
  CFArrayRef v77 = (const __CFArray *)CFDictionaryGetValue(a1, @"SCAN_CHANNELS");
  if (v77)
  {
    CFArrayRef v78 = v77;
    CFIndex v79 = CFArrayGetCount(v77);
    int v120 = -1431655766;
    int v119 = -1431655766;
    if (v79 >= 1)
    {
      unint64_t v106 = a7;
      CFDictionaryRef v108 = a1;
      CFNumberRef v110 = a8;
      int v117 = 0;
      uint64_t v80 = 0;
      CFIndex v81 = 0;
      if (v47) {
        uint64_t v82 = (_DWORD *)(v47 + 512);
      }
      else {
        uint64_t v82 = v69;
      }
      if ((unint64_t)(v79 - 1) >= 0x18F) {
        uint64_t v83 = 399;
      }
      else {
        uint64_t v83 = v79 - 1;
      }
      while (1)
      {
        CFDictionaryRef v84 = (const __CFDictionary *)CFArrayGetValueAtIndex(v78, v81);
        if (!v84) {
          return 4294963396;
        }
        CFDictionaryRef v85 = v84;
        CFNumberRef v86 = (const __CFNumber *)CFDictionaryGetValue(v84, @"CHANNEL");
        if (!v86 || !CFNumberGetValue(v86, kCFNumberSInt32Type, &v120)) {
          return 4294963396;
        }
        CFNumberRef v87 = (const __CFNumber *)CFDictionaryGetValue(v85, @"CHANNEL_FLAGS");
        CFNumberRef v88 = v87;
        if (v87)
        {
          if (!CFNumberGetValue(v87, kCFNumberSInt32Type, &v119)) {
            return 4294963396;
          }
        }
        else
        {
          int v119 = 0;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            LODWORD(usedBufLen[0]) = 67109120;
            HIDWORD(usedBufLen[0]) = v120;
            _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Missing channel flags for scan channel (%u)", (uint8_t *)usedBufLen, 8u);
          }
        }
        if (!CFNumberGetValue(v88, kCFNumberSInt32Type, &v119)) {
          return 4294963396;
        }
        BOOL v90 = *v69 == 1 && v21 != 0;
        int v91 = v119;
        if ((v119 & 0x2000) == 0 || *v82 == 3 || v90)
        {
          int v93 = v120;
        }
        else
        {
          if ((_os_feature_enabled_impl() & 1) == 0)
          {
            int v97 = v120;
            int v117 = v120;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              LODWORD(usedBufLen[0]) = 67109120;
              HIDWORD(usedBufLen[0]) = v97;
              _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Excluding 6GHz scan channel (%u)", (uint8_t *)usedBufLen, 8u);
            }
            goto LABEL_158;
          }
          char v92 = _os_feature_enabled_impl();
          int v93 = v120;
          int v91 = v119;
          if ((v92 & 1) == 0)
          {
            if ((~v119 & 0x2002) != 0) {
              goto LABEL_179;
            }
            unint64_t v94 = 0;
            do
            {
              int v95 = k6GHzPSC[v94];
              if (v94 > 0xD) {
                break;
              }
              ++v94;
            }
            while (v95 != v120);
            if (v95 != v120)
            {
LABEL_179:
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
              {
                LODWORD(usedBufLen[0]) = 67109120;
                HIDWORD(usedBufLen[0]) = v93;
                _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Excluding 6GHz non-PSC scan channel (%u)", (uint8_t *)usedBufLen, 8u);
              }
              int v117 = v93;
              goto LABEL_158;
            }
          }
        }
        CFDataRef v96 = &v118[12 * v80];
        *((_DWORD *)v96 + 18) = 1;
        *((_DWORD *)v96 + 19) = v93;
        *((_DWORD *)v96 + 20) = v91;
        ++v80;
LABEL_158:
        BOOL v26 = v81++ == v83;
        if (v26)
        {
          if (v80)
          {
            a1 = v108;
            a8 = v110;
            a7 = v106;
          }
          else
          {
            a1 = v108;
            a8 = v110;
            a7 = v106;
            if (v117)
            {
              *((_DWORD *)v118 + 13) = 3;
              *((void *)v118 + 9) = 1;
              *((_DWORD *)v118 + 20) = 0;
              LODWORD(v80) = 1;
            }
          }
          goto LABEL_169;
        }
      }
    }
    LODWORD(v80) = 0;
LABEL_169:
    *((_DWORD *)v118 + 17) = v80;
  }
  if (a7)
  {
    CFNumberRef v98 = (const __CFNumber *)CFDictionaryGetValue(a1, @"MONITOR_QBSS_LOAD");
    CFBooleanRef v99 = makeBoolRef(v98);
    if (v99) {
      *a7 = CFBooleanGetValue(v99);
    }
  }
  if (!a8) {
    return 0;
  }
  CFNumberRef v100 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SCAN_TRIM_RESULTS");
  uint64_t result = (uint64_t)makeBoolRef(v100);
  if (result)
  {
    Boolean v101 = CFBooleanGetValue((CFBooleanRef)result);
    uint64_t result = 0;
    *a8 = v101;
  }
  return result;
}

CFNumberRef makeBoolRef(const __CFNumber *cf)
{
  CFNumberRef v1 = cf;
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFNumberGetTypeID())
    {
      int valuePtr = -1431655766;
      if (CFNumberGetValue(v1, kCFNumberIntType, &valuePtr))
      {
        uint64_t v3 = MEMORY[0x263EFFB38];
        if (valuePtr) {
          uint64_t v3 = MEMORY[0x263EFFB40];
        }
        return *(const __CFNumber **)v3;
      }
    }
  }
  return v1;
}

uint64_t Apple80211GetPower(uint64_t a1, BOOL *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v4 = -1431655766;
  uint64_t result = Apple80211GetPowerState(a1, &v4);
  *a2 = v4 == 1;
  return result;
}

uint64_t Apple80211GetPowerState(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v3 = Apple80211CopyValue();
  if (!v3)
  {
    int Count = CFArrayGetCount((CFArrayRef)0xAAAAAAAAAAAAAAAALL);
    if (Count >= 1)
    {
      CFIndex v5 = 0;
      do
      {
        while (1)
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)0xAAAAAAAAAAAAAAAALL, v5);
          if (ValueAtIndex) {
            break;
          }
          if ((int)++v5 >= Count) {
            goto LABEL_11;
          }
        }
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, a2);
        ++v5;
      }
      while (*a2 != 1 && (int)v5 < Count);
    }
LABEL_11:
    CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  }
  return v3;
}

uint64_t Apple80211ParseAppleSWAPIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (!a1) {
    return v3;
  }
  int v4 = a2;
  if (!a2 || !a3) {
    return v3;
  }
  if (a2 < 2) {
    return 0;
  }
  CFIndex v5 = a1;
  CFMutableDictionaryRef v6 = 0;
  char valuePtr = -86;
  __uint64_t v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v9 = (const void *)*MEMORY[0x263EFFB40];
  while (1)
  {
    unsigned int v10 = v5[1];
    if (v10 + 2 > v4)
    {
LABEL_31:
      if (v6)
      {
        CFDictionarySetValue(a3, @"APPLE_SWAP_IE", v6);
        uint64_t v3 = 0;
        goto LABEL_33;
      }
      return 0;
    }
    if (v10 >= 4 && *v5 == 221 && Apple80211ParseAppleSWAPIE_signature == *(_DWORD *)(v5 + 2))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, v7, MEMORY[0x263EFFF90]);
      if (!Mutable) {
        return 4294963395;
      }
      CFMutableDictionaryRef v6 = Mutable;
      unsigned int v10 = v5[1];
      unsigned int v12 = v10 - 4;
      if (v10 - 4 >= 3) {
        break;
      }
    }
LABEL_28:
    int v4 = v4 - v10 - 2;
    uint64_t v27 = (uint64_t)&v5[v10 + 2];
    if (v4 > 0) {
      CFIndex v5 = (unsigned __int8 *)v27;
    }
    if (v4 <= 1) {
      goto LABEL_31;
    }
  }
  uint64_t v13 = v5 + 6;
  while (1)
  {
    int v14 = *v13;
    int v15 = v13[1];
    char valuePtr = v13[1];
    CFIndex v16 = v13[2];
    unsigned int v17 = v12 - 3;
    if (v16 > (v12 - 3))
    {
LABEL_36:
      uint64_t v3 = 4294963394;
      goto LABEL_33;
    }
    uint64_t v18 = v13 + 3;
    if (v15 != 1) {
      goto LABEL_26;
    }
    if (!v14) {
      break;
    }
    if (v14 == 1)
    {
      if (!v13[2]) {
        goto LABEL_36;
      }
      CFNumberRef v19 = CFNumberCreate(v8, kCFNumberSInt8Type, &valuePtr);
      if (!v19) {
        goto LABEL_37;
      }
      CFNumberRef v20 = v19;
      CFDictionarySetValue(v6, @"SWAP_IE_FEATURE_VERSION", v19);
      CFRelease(v20);
      CFDataRef v21 = CFDataCreate(v8, v18, v16);
      if (!v21) {
        goto LABEL_37;
      }
      CFDataRef v22 = v21;
      CFDictionarySetValue(v6, @"SWAP_IE_FEATURES", v21);
      CFRelease(v22);
      if (*v18) {
        CFDictionarySetValue(v6, @"SWAP_IE_FEATURE_INTERNET_CONNECTION_SHARING_ENABLED", v9);
      }
    }
LABEL_26:
    unsigned int v12 = v17 - v16;
    uint64_t v13 = &v18[v16];
    if ((v17 - v16) <= 2u)
    {
      unsigned int v10 = v5[1];
      __uint64_t v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
      goto LABEL_28;
    }
  }
  if (!v13[2]) {
    goto LABEL_36;
  }
  CFNumberRef v23 = CFNumberCreate(v8, kCFNumberSInt8Type, &valuePtr);
  if (v23)
  {
    CFNumberRef v24 = v23;
    CFDictionarySetValue(v6, @"SWAP_IE_MODEL_IDENTIFIER_VERSION", v23);
    CFRelease(v24);
    CFStringRef v25 = CFStringCreateWithBytes(v8, v18, v16, 0x8000100u, 0);
    if (v25)
    {
      CFStringRef v26 = v25;
      CFDictionarySetValue(v6, @"SWAP_IE_MODEL_IDENTIFIER", v25);
      CFRelease(v26);
      goto LABEL_26;
    }
  }
LABEL_37:
  uint64_t v3 = 4294963395;
LABEL_33:
  CFRelease(v6);
  return v3;
}

void _dispatchAsyncScanEvent(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  int v4 = (pthread_mutex_t *)(a1 + 160);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 160));
  int v42 = *(unsigned __int8 *)(a1 + 120);
  int v5 = *(unsigned __int8 *)(a1 + 121);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 128);
  char v7 = *(unsigned char *)(a1 + 129);
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFArrayRef cf = *(const __CFArray **)(a1 + 240);
  if (!cf)
  {
    CFArrayRef cf = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
    if (!cf)
    {
      *(unsigned char *)(a1 + 1992) = 0;
      LODWORD(v17) = -3901;
      goto LABEL_38;
    }
  }
  uint64_t v47 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v45 = v9;
  long long v46 = v9;
  memset(__b, 170, 0x8D8uLL);
  CFArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  if (Mutable)
  {
    int v41 = v4;
    CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 144);
    unint64_t Value = (unint64_t)CFDictionaryGetValue(v11, @"SCAN_SHORT_SSID");
    unint64_t v13 = (unint64_t)CFDictionaryGetValue(v11, @"SSID_STR");
    CFDictionaryRef theDict = v11;
    unint64_t v36 = (unint64_t)CFDictionaryGetValue(v11, @"BSSID");
    unint64_t v37 = Value;
    BOOL v14 = (v13 | v36 | Value) != 0;
    long long v45 = 0u;
    long long v46 = 0u;
    uint64_t v47 = 0;
    __strlcpy_chk();
    LODWORD(v46) = 11;
    DWORD2(v46) = 2264;
    uint64_t v47 = __b;
    int v15 = -10000;
    while (1)
    {
      bzero(__b, 0x8D8uLL);
      HIWORD(__b[34]) = 2048;
      if (*(unsigned char *)(a1 + 1992)) {
        __strlcpy_chk();
      }
      if (Apple80211RawGet(a1, (uint64_t)&v45)) {
        break;
      }
      _addScanResultToList(a1, (uint64_t)__b, Mutable, cf, 0, v42, v14, v5, v6, v7, 0, (*(_DWORD *)(a1 + 136) & 0x200) != 0);
      if (__CFADD__(v15++, 1)) {
        goto LABEL_10;
      }
    }
    if (v15 == -1)
    {
LABEL_10:
      LODWORD(v17) = -3902;
      int v4 = v41;
      goto LABEL_11;
    }
    int v4 = v41;
    if (*__error() == -528350138 || *__error() == 5)
    {
      if ((*(unsigned char *)(a1 + 99) & 0x40) != 0 && (*(unsigned char *)(a1 + 137) & 8) != 0)
      {
        CFArrayRef v18 = (const __CFArray *)CFDictionaryGetValue(theDict, @"SCAN_SSID_LIST");
        CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(theDict, @"SCAN_BSSID_LIST");
        _Apple80211AddOriginatingRNRChannelListToScanResults(Mutable, cf, v37, v13, v36, v18, v19);
      }
      goto LABEL_19;
    }
    LODWORD(v17) = *__error();
    if (!v17)
    {
LABEL_19:
      LODWORD(v17) = 0;
      *(void *)(a1 + 240) = cf;
      goto LABEL_20;
    }
  }
  else
  {
    LODWORD(v17) = -3901;
  }
LABEL_11:
  if (!*(void *)(a1 + 240)) {
    CFRelease(cf);
  }
LABEL_20:
  if (Mutable) {
    CFRelease(Mutable);
  }
  *(unsigned char *)(a1 + 1992) = 0;
  if (v17 != 16)
  {
    if (!v17)
    {
      int v20 = *(_DWORD *)(a1 + 236) - 1;
      *(_DWORD *)(a1 + 236) = v20;
      if (v20 && (CFDataRef v21 = *(const void **)(a1 + 144)) != 0 && (v22 = CFRetain(v21)) != 0)
      {
        CFNumberRef v23 = v22;
        pthread_mutex_unlock(v4);
        LODWORD(v17) = Apple80211ScanAsync();
        CFRelease(v23);
        if (!v17) {
          return;
        }
      }
      else
      {
        LODWORD(v17) = 0;
      }
    }
    goto LABEL_38;
  }
  unsigned int v24 = *(_DWORD *)(a1 + 264);
  if (v24 > 4)
  {
    LODWORD(v17) = 16;
LABEL_38:
    CFIndex v29 = *(__CFRunLoopTimer **)(a1 + 248);
    if (v29)
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFRunLoopTimerSetNextFireDate(v29, Current + 315360000.0);
    }
    uint64_t v31 = *(NSObject **)(a1 + 256);
    if (v31)
    {
      dispatch_time_t v32 = dispatch_time(0, 315360000000000000);
      dispatch_source_set_timer(v31, v32, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    unint64_t v33 = *(const void **)(a1 + 144);
    uint64_t v34 = *(const void **)(a1 + 240);
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 240) = 0;
    *(unsigned char *)(a1 + 232) = 0;
    *(_DWORD *)(a1 + 236) = 0;
    *(_DWORD *)(a1 + 124) = 0x80000000;
    *(unsigned char *)(a1 + 128) = 0;
    pthread_mutex_unlock(v4);
    if (v17) {
      BOOL v35 = 1;
    }
    else {
      BOOL v35 = a2 == 0;
    }
    if (v35) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = a3;
    }
    if (v17 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      __b[0] = 136315394;
      *(void *)&__b[1] = "_dispatchAsyncScanEvent";
      LOWORD(__b[3]) = 1024;
      *(_DWORD *)((char *)&__b[3] + 2) = v17;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Error: posting APPLE80211_M_SCAN_DONE with err %d", (uint8_t *)__b, 0x12u);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, const void *, uint64_t, void))(a1 + 72))(v17, a1, 10, v34, 8, *(void *)(a1 + 80));
    if (v33) {
      CFRelease(v33);
    }
    if (v34) {
      CFRelease(v34);
    }
    return;
  }
  if (!v24)
  {
    CFStringRef v25 = *(__CFRunLoopTimer **)(a1 + 248);
    if (v25)
    {
      CFAbsoluteTime v26 = CFAbsoluteTimeGetCurrent();
      CFRunLoopTimerSetNextFireDate(v25, v26 + 0.2);
    }
    uint64_t v27 = *(NSObject **)(a1 + 256);
    if (v27)
    {
      dispatch_time_t v28 = dispatch_time(0, 200000000);
      dispatch_source_set_timer(v27, v28, 0xBEBC200uLL, 0);
    }
  }
  ++*(_DWORD *)(a1 + 264);
  pthread_mutex_unlock(v4);
}

uint64_t Apple80211IOCTLGetWrapper()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  CFTypeID v2 = (unsigned int *)v1;
  uint64_t v3 = v0;
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(v0 + 107))
  {
    if (*(unsigned char *)(v0 + 1801))
    {
      uint64_t v5 = *(unsigned int *)(v1 + 16);
      bzero(buf, 0x3C30uLL);
      *(_DWORD *)buf = -1071093303;
      uint64_t v6 = v3 + 4;
      __strlcpy_chk();
      int v62 = v5;
      unsigned int v63 = v2[5];
      if (*(unsigned char *)(v3 + 1984))
      {
        __uint64_t v7 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          if ((int)v5 > 558)
          {
            CFAllocatorRef v8 = "Error Invalid ioctl";
          }
          else if (v5 == -1)
          {
            CFAllocatorRef v8 = "APPLE80211_IOC_CARD_SPECIFIC";
          }
          else if ((v5 & 0x80000000) != 0 || (CFAllocatorRef v8 = (const char *)gAppleIoucIndexToString[v5]) == 0)
          {
            CFAllocatorRef v8 = "unknown Apple80211_IOC_";
          }
          unsigned int v15 = v2[6];
          *(_DWORD *)__int16 v39 = 136448002;
          *(void *)&v39[4] = "Apple80211IOCTLGetWrapper";
          *(_WORD *)&v39[12] = 1024;
          *(_DWORD *)&v39[14] = 6502;
          *(_WORD *)&v39[18] = 2048;
          *(void *)&v39[20] = v7 / 0x3B9ACA00;
          *(_WORD *)&v39[28] = 2048;
          *(void *)&v39[30] = v7 % 0x3B9ACA00 / 0x3E8;
          __int16 v40 = 2082;
          uint64_t v41 = v3 + 4;
          __int16 v42 = 1024;
          int v43 = v5;
          __int16 v44 = 2082;
          long long v45 = v8;
          __int16 v46 = 1024;
          unsigned int v47 = v15;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d]\n", v39, 0x46u);
        }
      }
      size_t v16 = v2[6];
      if ((v16 - 1) >> 10 >= 0xF)
      {
        uint64_t v17 = (void *)*((void *)v2 + 4);
      }
      else
      {
        LODWORD(v53) = v2[6];
        uint64_t v17 = (void *)*((void *)v2 + 4);
        __memcpy_chk();
      }
      if (v16) {
        BOOL v18 = v17 == 0;
      }
      else {
        BOOL v18 = 1;
      }
      int v19 = v18;
      size_t v20 = 4;
      if (!v18) {
        size_t v20 = v16;
      }
      size_t outputStructCnt = v20;
      mach_port_t v21 = *(_DWORD *)(v3 + 1804);
      if (v21)
      {
        if (v19) {
          CFTypeRef v22 = v2 + 5;
        }
        else {
          CFTypeRef v22 = v17;
        }
        uint64_t v23 = IOConnectCallStructMethod(v21, 0, buf, 0x3C30uLL, v22, &outputStructCnt);
        if (v23)
        {
          *__error() = v23;
          __uint64_t v24 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
          {
            if ((int)v5 > 558)
            {
              CFStringRef v25 = "Error Invalid ioctl";
            }
            else if (v5 == -1)
            {
              CFStringRef v25 = "APPLE80211_IOC_CARD_SPECIFIC";
            }
            else if ((v5 & 0x80000000) != 0 || (CFStringRef v25 = (const char *)gAppleIoucIndexToString[v5]) == 0)
            {
              CFStringRef v25 = "unknown Apple80211_IOC_";
            }
            unsigned int v37 = v2[6];
            *(_DWORD *)__int16 v39 = 136448514;
            *(void *)&v39[4] = "Apple80211IOCTLGetWrapper";
            *(_WORD *)&v39[12] = 1024;
            *(_DWORD *)&v39[14] = 6535;
            *(_WORD *)&v39[18] = 2048;
            *(void *)&v39[20] = v24 / 0x3B9ACA00;
            *(_WORD *)&v39[28] = 2048;
            *(void *)&v39[30] = v24 % 0x3B9ACA00 / 0x3E8;
            __int16 v40 = 2082;
            uint64_t v41 = v6;
            __int16 v42 = 1024;
            int v43 = v5;
            __int16 v44 = 2082;
            long long v45 = v25;
            __int16 v46 = 1024;
            unsigned int v47 = v37;
            __int16 v48 = 1024;
            int v49 = v23;
            __int16 v50 = 1024;
            int v51 = v23;
            _os_log_debug_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d] return %d/0x%08x\n", v39, 0x52u);
          }
        }
        else
        {
          v2[6] = outputStructCnt;
        }
        return v23;
      }
      uint64_t v23 = 3758097088;
      __uint64_t v26 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v23;
      }
      if ((int)v5 > 558)
      {
        uint64_t v27 = "Error Invalid ioctl";
      }
      else if (v5 == -1)
      {
        uint64_t v27 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if ((v5 & 0x80000000) != 0 || (uint64_t v27 = (const char *)gAppleIoucIndexToString[v5]) == 0)
      {
        uint64_t v27 = "unknown Apple80211_IOC_";
      }
      *(_DWORD *)__int16 v39 = 136447746;
      *(void *)&v39[4] = "Apple80211IOCTLGetWrapper";
      *(_WORD *)&v39[12] = 1024;
      *(_DWORD *)&v39[14] = 6520;
      *(_WORD *)&v39[18] = 2048;
      *(void *)&v39[20] = v26 / 0x3B9ACA00;
      *(_WORD *)&v39[28] = 2048;
      *(void *)&v39[30] = v26 % 0x3B9ACA00 / 0x3E8;
      __int16 v40 = 2082;
      uint64_t v41 = v6;
      __int16 v42 = 1024;
      int v43 = v5;
      __int16 v44 = 2082;
      long long v45 = v27;
      dispatch_time_t v28 = &_os_log_internal;
      CFIndex v29 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] WiFi is in the middle of recovery, ignore command, type %d/'%{public}s'\n";
      int v30 = v39;
      uint32_t v31 = 64;
    }
    else
    {
      memset(v39, 0, 32);
      uint64_t v9 = v0 + 4;
      __strlcpy_chk();
      __uint64_t v10 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      ioctl(*(_DWORD *)v3, 0xC0206911uLL, v39);
      unint64_t v11 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v10;
      if (v11 > 0x3B9AC9FF && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136448258;
        CFNumberRef v53 = "_logTimeIfThresholdExceeded";
        __int16 v54 = 2082;
        *(void *)CFNumberRef v55 = v39;
        *(_WORD *)&v55[8] = 2080;
        *(void *)&v55[10] = " 'SIOCGIFFLAGS' ";
        *(_WORD *)&v55[18] = 1024;
        __int16 v56 = 1024;
        *(_DWORD *)&v55[20] = -1071617775;
        *(_DWORD *)CFNumberRef v57 = -1071617775;
        *(_WORD *)&v57[4] = 2048;
        *(void *)&v57[6] = v11 / 0x3B9ACA00;
        __int16 v58 = 2048;
        *(void *)CFNumberRef v59 = v11 % 0x3B9ACA00 / 0x3E8;
        *(_WORD *)&v59[8] = 2048;
        *(void *)&v59[10] = 1;
        *(_WORD *)&v59[18] = 2048;
        uint64_t v60 = 0;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
      }
      __strlcpy_chk();
      if (*(unsigned char *)(v3 + 1984))
      {
        __uint64_t v12 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = v2[4];
          if ((int)v13 > 558)
          {
            BOOL v14 = "Error Invalid ioctl";
          }
          else if (v13 == -1)
          {
            BOOL v14 = "APPLE80211_IOC_CARD_SPECIFIC";
          }
          else if ((v13 & 0x80000000) != 0 || (BOOL v14 = (const char *)gAppleIoucIndexToString[v13]) == 0)
          {
            BOOL v14 = "unknown Apple80211_IOC_";
          }
          unsigned int v32 = v2[6];
          *(_DWORD *)buf = 136448258;
          CFNumberRef v53 = "Apple80211IOCTLGetWrapper";
          __int16 v54 = 1024;
          *(_DWORD *)CFNumberRef v55 = 6557;
          *(_WORD *)&v55[4] = 2048;
          *(void *)&v55[6] = v12 / 0x3B9ACA00;
          *(_WORD *)&v55[14] = 2048;
          *(void *)&v55[16] = v12 % 0x3B9ACA00 / 0x3E8;
          __int16 v56 = 2082;
          *(void *)CFNumberRef v57 = v3 + 4;
          *(_WORD *)&v57[8] = 1024;
          *(_DWORD *)&v57[10] = *(__int16 *)&v39[16];
          __int16 v58 = 1024;
          *(_DWORD *)CFNumberRef v59 = v13;
          *(_WORD *)&v59[4] = 2082;
          *(void *)&v59[6] = v14;
          *(_WORD *)&v59[14] = 1024;
          *(_DWORD *)&v59[16] = v32;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d]\n", buf, 0x4Cu);
        }
      }
      uint64_t v23 = ioctl(*(_DWORD *)v3, 0xC02869C9uLL, v2);
      if (!v23) {
        return v23;
      }
      __uint64_t v33 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v23;
      }
      uint64_t v34 = v2[4];
      if ((int)v34 > 558)
      {
        BOOL v35 = "Error Invalid ioctl";
      }
      else if (v34 == -1)
      {
        BOOL v35 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if ((v34 & 0x80000000) != 0 || (BOOL v35 = (const char *)gAppleIoucIndexToString[v34]) == 0)
      {
        BOOL v35 = "unknown Apple80211_IOC_";
      }
      unsigned int v36 = v2[6];
      *(_DWORD *)buf = 136448770;
      CFNumberRef v53 = "Apple80211IOCTLGetWrapper";
      __int16 v54 = 1024;
      *(_DWORD *)CFNumberRef v55 = 6563;
      *(_WORD *)&v55[4] = 2048;
      *(void *)&v55[6] = v33 / 0x3B9ACA00;
      *(_WORD *)&v55[14] = 2048;
      *(void *)&v55[16] = v33 % 0x3B9ACA00 / 0x3E8;
      __int16 v56 = 2082;
      *(void *)CFNumberRef v57 = v9;
      *(_WORD *)&v57[8] = 1024;
      *(_DWORD *)&v57[10] = *(__int16 *)&v39[16];
      __int16 v58 = 1024;
      *(_DWORD *)CFNumberRef v59 = v34;
      *(_WORD *)&v59[4] = 2082;
      *(void *)&v59[6] = v35;
      *(_WORD *)&v59[14] = 1024;
      *(_DWORD *)&v59[16] = v36;
      LOWORD(v60) = 1024;
      *(_DWORD *)((char *)&v60 + 2) = v23;
      HIWORD(v60) = 1024;
      int v61 = v23;
      dispatch_time_t v28 = &_os_log_internal;
      CFIndex v29 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d] return %d/0x%08x\n";
      int v30 = buf;
      uint32_t v31 = 88;
    }
    _os_log_impl(&dword_210714000, v28, OS_LOG_TYPE_DEFAULT, v29, v30, v31);
    return v23;
  }
  return _Apple80211AWDLCompatibilityCall(v0, v1, 0);
}

uint64_t Apple80211RawGet(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 24) >= 0x3C01u)
  {
    if (*(unsigned char *)(a1 + 107))
    {
      return _Apple80211AWDLCompatibilityCall();
    }
    else
    {
      uint64_t v5 = *(unsigned int *)(a2 + 16);
      if (*(unsigned char *)(a1 + 1801))
      {
        uint64_t v6 = malloc_type_malloc(0x3C030uLL, 0x1000040135F6BA2uLL);
        if (v6)
        {
          __uint64_t v7 = v6;
          CFAllocatorRef v8 = v6 + 61446;
          bzero(v6 + 1, 0x3C02CuLL);
          *__uint64_t v7 = -1071093303;
          uint64_t v9 = a1 + 4;
          __strlcpy_chk();
          *CFAllocatorRef v8 = v5;
          __uint64_t v10 = (void *)(a2 + 20);
          v8[1] = *(_DWORD *)(a2 + 20);
          if (*(unsigned char *)(a1 + 1984))
          {
            __uint64_t v11 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              if ((int)v5 > 558)
              {
                __uint64_t v12 = "Error Invalid ioctl";
              }
              else if (v5 == -1)
              {
                __uint64_t v12 = "APPLE80211_IOC_CARD_SPECIFIC";
              }
              else if ((v5 & 0x80000000) != 0 || (__uint64_t v12 = (const char *)gAppleIoucIndexToString[v5]) == 0)
              {
                __uint64_t v12 = "unknown Apple80211_IOC_";
              }
              int v20 = *(_DWORD *)(a2 + 24);
              *(_DWORD *)buf = 136448002;
              __uint64_t v33 = "_Apple80211LargeIOCTLGetWrapper";
              __int16 v34 = 1024;
              *(_DWORD *)BOOL v35 = 214;
              *(_WORD *)&v35[4] = 2048;
              *(void *)&v35[6] = v11 / 0x3B9ACA00;
              *(_WORD *)&v35[14] = 2048;
              *(void *)&v35[16] = v11 % 0x3B9ACA00 / 0x3E8;
              __int16 v36 = 2082;
              *(void *)unsigned int v37 = a1 + 4;
              *(_WORD *)&v37[8] = 1024;
              *(_DWORD *)&v37[10] = v5;
              __int16 v38 = 2082;
              *(void *)__int16 v39 = v12;
              *(_WORD *)&v39[8] = 1024;
              *(_DWORD *)&v39[10] = v20;
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d]\n", buf, 0x46u);
            }
          }
          unsigned int v21 = *(_DWORD *)(a2 + 24);
          if (v21 <= 0x3C000)
          {
            if (v21)
            {
              v7[1] = v21;
              __memcpy_chk();
            }
            if (*(void *)(a2 + 32))
            {
              size_t v22 = *(unsigned int *)(a2 + 24);
              if (v22) {
                __uint64_t v10 = *(void **)(a2 + 32);
              }
              else {
                size_t v22 = 4;
              }
            }
            else
            {
              size_t v22 = 4;
            }
            outputStructCnt[0] = v22;
            uint64_t v19 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 1804), 6u, v7, 0x3C030uLL, v10, outputStructCnt);
            if (v19)
            {
              *__error() = v19;
              __uint64_t v23 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                if ((int)v5 > 558)
                {
                  __uint64_t v24 = "Error Invalid ioctl";
                }
                else if (v5 == -1)
                {
                  __uint64_t v24 = "APPLE80211_IOC_CARD_SPECIFIC";
                }
                else if ((v5 & 0x80000000) != 0 || (__uint64_t v24 = (const char *)gAppleIoucIndexToString[v5]) == 0)
                {
                  __uint64_t v24 = "unknown Apple80211_IOC_";
                }
                int v29 = *(_DWORD *)(a2 + 24);
                *(_DWORD *)buf = 136448258;
                __uint64_t v33 = "_Apple80211LargeIOCTLGetWrapper";
                __int16 v34 = 1024;
                *(_DWORD *)BOOL v35 = 244;
                *(_WORD *)&v35[4] = 2048;
                *(void *)&v35[6] = v23 / 0x3B9ACA00;
                *(_WORD *)&v35[14] = 2048;
                *(void *)&v35[16] = v23 % 0x3B9ACA00 / 0x3E8;
                __int16 v36 = 2082;
                *(void *)unsigned int v37 = v9;
                *(_WORD *)&v37[8] = 1024;
                *(_DWORD *)&v37[10] = v5;
                __int16 v38 = 2082;
                *(void *)__int16 v39 = v24;
                *(_WORD *)&v39[8] = 1024;
                *(_DWORD *)&v39[10] = v29;
                *(_WORD *)&v39[14] = 1024;
                *(_DWORD *)&v39[16] = v19;
                _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d] return %d\n", buf, 0x4Cu);
              }
            }
            else
            {
              *(_DWORD *)(a2 + 24) = outputStructCnt[0];
            }
            free(v7);
          }
          else
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              __uint64_t v33 = "_Apple80211LargeIOCTLGetWrapper";
              __int16 v34 = 1024;
              *(_DWORD *)BOOL v35 = v21;
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Invalid length %d\n", buf, 0x12u);
            }
            free(v7);
            return 22;
          }
        }
        else
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            if ((int)v5 > 558)
            {
              BOOL v18 = "Error Invalid ioctl";
            }
            else if (v5 == -1)
            {
              BOOL v18 = "APPLE80211_IOC_CARD_SPECIFIC";
            }
            else if ((v5 & 0x80000000) != 0 || (BOOL v18 = (const char *)gAppleIoucIndexToString[v5]) == 0)
            {
              BOOL v18 = "unknown Apple80211_IOC_";
            }
            *(_DWORD *)buf = 136446722;
            __uint64_t v33 = "_Apple80211LargeIOCTLGetWrapper";
            __int16 v34 = 1024;
            *(_DWORD *)BOOL v35 = v5;
            *(_WORD *)&v35[4] = 2082;
            *(void *)&v35[6] = v18;
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: Memory allocation failed for apple80211IOUCReqV2, type %d/'%{public}s'\n", buf, 0x1Cu);
          }
          return 12;
        }
      }
      else
      {
        *(_OWORD *)size_t outputStructCnt = 0u;
        long long v31 = 0u;
        uint64_t v13 = a1 + 4;
        __strlcpy_chk();
        __uint64_t v14 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
        ioctl(*(_DWORD *)a1, 0xC0206911uLL, outputStructCnt);
        unint64_t v15 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v14;
        if (v15 > 0x3B9AC9FF && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136448258;
          __uint64_t v33 = "_logTimeIfThresholdExceeded";
          __int16 v34 = 2082;
          *(void *)BOOL v35 = outputStructCnt;
          *(_WORD *)&v35[8] = 2080;
          *(void *)&v35[10] = " 'SIOCGIFFLAGS' ";
          *(_WORD *)&v35[18] = 1024;
          __int16 v36 = 1024;
          *(_DWORD *)&v35[20] = -1071617775;
          *(_DWORD *)unsigned int v37 = -1071617775;
          *(_WORD *)&v37[4] = 2048;
          *(void *)&v37[6] = v15 / 0x3B9ACA00;
          __int16 v38 = 2048;
          *(void *)__int16 v39 = v15 % 0x3B9ACA00 / 0x3E8;
          *(_WORD *)&v39[8] = 2048;
          *(void *)&v39[10] = 1;
          *(_WORD *)&v39[18] = 2048;
          uint64_t v40 = 0;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
        }
        __strlcpy_chk();
        if (*(unsigned char *)(a1 + 1984))
        {
          __uint64_t v16 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            if ((int)v5 > 558)
            {
              uint64_t v17 = "Error Invalid ioctl";
            }
            else if (v5 == -1)
            {
              uint64_t v17 = "APPLE80211_IOC_CARD_SPECIFIC";
            }
            else if ((v5 & 0x80000000) != 0 || (uint64_t v17 = (const char *)gAppleIoucIndexToString[v5]) == 0)
            {
              uint64_t v17 = "unknown Apple80211_IOC_";
            }
            int v25 = *(_DWORD *)(a2 + 24);
            *(_DWORD *)buf = 136448258;
            __uint64_t v33 = "_Apple80211LargeIOCTLGetWrapper";
            __int16 v34 = 1024;
            *(_DWORD *)BOOL v35 = 266;
            *(_WORD *)&v35[4] = 2048;
            *(void *)&v35[6] = v16 / 0x3B9ACA00;
            *(_WORD *)&v35[14] = 2048;
            *(void *)&v35[16] = v16 % 0x3B9ACA00 / 0x3E8;
            __int16 v36 = 2082;
            *(void *)unsigned int v37 = a1 + 4;
            *(_WORD *)&v37[8] = 1024;
            *(_DWORD *)&v37[10] = (__int16)v31;
            __int16 v38 = 1024;
            *(_DWORD *)__int16 v39 = v5;
            *(_WORD *)&v39[4] = 2082;
            *(void *)&v39[6] = v17;
            *(_WORD *)&v39[14] = 1024;
            *(_DWORD *)&v39[16] = v25;
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d]\n", buf, 0x4Cu);
          }
        }
        uint64_t v19 = ioctl(*(_DWORD *)a1, 0xC02869C9uLL, a2);
        if (v19)
        {
          __uint64_t v26 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            if ((int)v5 > 558)
            {
              uint64_t v27 = "Error Invalid ioctl";
            }
            else if (v5 == -1)
            {
              uint64_t v27 = "APPLE80211_IOC_CARD_SPECIFIC";
            }
            else if ((v5 & 0x80000000) != 0 || (uint64_t v27 = (const char *)gAppleIoucIndexToString[v5]) == 0)
            {
              uint64_t v27 = "unknown Apple80211_IOC_";
            }
            int v28 = *(_DWORD *)(a2 + 24);
            *(_DWORD *)buf = 136448514;
            __uint64_t v33 = "_Apple80211LargeIOCTLGetWrapper";
            __int16 v34 = 1024;
            *(_DWORD *)BOOL v35 = 272;
            *(_WORD *)&v35[4] = 2048;
            *(void *)&v35[6] = v26 / 0x3B9ACA00;
            *(_WORD *)&v35[14] = 2048;
            *(void *)&v35[16] = v26 % 0x3B9ACA00 / 0x3E8;
            __int16 v36 = 2082;
            *(void *)unsigned int v37 = v13;
            *(_WORD *)&v37[8] = 1024;
            *(_DWORD *)&v37[10] = (__int16)v31;
            __int16 v38 = 1024;
            *(_DWORD *)__int16 v39 = v5;
            *(_WORD *)&v39[4] = 2082;
            *(void *)&v39[6] = v27;
            *(_WORD *)&v39[14] = 1024;
            *(_DWORD *)&v39[16] = v28;
            LOWORD(v40) = 1024;
            *(_DWORD *)((char *)&v40 + 2) = v19;
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d] return %d\n", buf, 0x52u);
          }
        }
      }
      return v19;
    }
  }
  else
  {
    return Apple80211IOCTLGetWrapper();
  }
}

void _Apple80211AddOriginatingRNRChannelListToScanResults(const __CFArray *a1, const __CFArray *a2, unint64_t a3, unint64_t a4, unint64_t a5, const __CFArray *a6, const __CFArray *a7)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  if (a1)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    if (theArray)
    {
      CFArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
      if (Mutable)
      {
        CFNumberRef v87 = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
        if (v87)
        {
          CFIndex v102 = 0;
          CFArrayRef v92 = a2;
          if (CFArrayGetCount(a2) >= 1)
          {
            int v96 = 1;
            uint64_t v9 = (const void *)*MEMORY[0x263EFFB40];
            CFAllocatorRef allocator = v8;
            do
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v102);
              if (!ValueAtIndex) {
                goto LABEL_139;
              }
              CFDictionaryRef v11 = ValueAtIndex;
              int valuePtr = 0;
              CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNEL_FLAGS");
              if (Value) {
                CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
              }
              int v100 = 0;
              CFDictionaryRef theDict = v11;
              CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v11, @"CHANNEL");
              if (v13) {
                CFNumberGetValue(v13, kCFNumberSInt32Type, &v100);
              }
              int v14 = v100;
              if (!(a3 | a4 | a5)) {
                goto LABEL_33;
              }
              if (a3)
              {
                *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
                unint64_t v15 = CFDictionaryGetValue(v11, @"SHORT_SSID");
                *(void *)buf = v15;
                if (v15)
                {
                  int v16 = CFEqual((CFTypeRef)a3, v15);
                }
                else
                {
                  CFDataRef v18 = (const __CFData *)CFDictionaryGetValue(v11, @"SSID");
                  if (!v18) {
                    goto LABEL_22;
                  }
                  Apple80211CalculateShortSSIDCopy(v18, (CFTypeRef *)buf);
                  if (!*(void *)buf) {
                    goto LABEL_22;
                  }
                  int v16 = CFEqual((CFTypeRef)a3, *(CFTypeRef *)buf);
                  CFRelease(*(CFTypeRef *)buf);
                }
              }
              else
              {
                if (!a4 || (uint64_t v17 = CFDictionaryGetValue(v11, @"SSID_STR")) == 0)
                {
LABEL_22:
                  int v16 = 0;
                  goto LABEL_23;
                }
                int v16 = CFEqual((CFTypeRef)a4, v17) != 0;
              }
LABEL_23:
              if (a5)
              {
                uint64_t v19 = CFDictionaryGetValue(theDict, @"BSSID");
                if (!(a3 | a4))
                {
                  if (!v19 || !CFEqual((CFTypeRef)a5, v19))
                  {
LABEL_128:
                    CFNumberRef v68 = CFNumberCreate(v8, kCFNumberCFIndexType, &v102);
                    if (!v68) {
                      goto LABEL_149;
                    }
                    CFNumberRef v69 = v68;
                    CFArrayAppendValue(Mutable, v68);
LABEL_138:
                    CFRelease(v69);
                    goto LABEL_139;
                  }
                  goto LABEL_33;
                }
                if (v19) {
                  BOOL v20 = CFEqual((CFTypeRef)a5, v19) != 0;
                }
                else {
                  BOOL v20 = 0;
                }
                v16 &= v20;
              }
              if (!v16) {
                goto LABEL_128;
              }
LABEL_33:
              if ((valuePtr & 0x2000) != 0)
              {
                int v90 = v14;
                CFDictionaryRef v21 = theDict;
                CFArrayRef v22 = (const __CFArray *)CFDictionaryGetValue(theDict, @"ORIG_RNR_CHANNEL_LIST");
                if (v96) {
                  CFArrayRef v23 = a1;
                }
                else {
                  CFArrayRef v23 = theArray;
                }
                if (CFArrayGetCount(v23) >= 1)
                {
                  CFIndex v24 = 0;
                  CFArrayRef v95 = v23;
                  while (1)
                  {
                    CFMutableArrayRef v99 = v22;
                    CFIndex v97 = v24;
                    CFDictionaryRef v25 = (const __CFDictionary *)CFArrayGetValueAtIndex(v23, v24);
                    if (!v25) {
                      goto LABEL_112;
                    }
                    CFDictionaryRef v26 = v25;
                    if (v96 && CFDictionaryGetValueIfPresent(v25, @"RNR_IE", 0)) {
                      CFArrayAppendValue(theArray, v26);
                    }
                    *(void *)buf = 0;
                    uint64_t v27 = CFDictionaryGetValue(v21, @"BSSID");
                    if (v27)
                    {
                      int v28 = v27;
                      int v29 = CFDictionaryGetValue(v21, @"SHORT_SSID");
                      *(void *)buf = v29;
                      if (v29)
                      {
                        CFRetain(v29);
                      }
                      else
                      {
                        CFDataRef v30 = (const __CFData *)CFDictionaryGetValue(v21, @"SSID");
                        if (!v30) {
                          goto LABEL_112;
                        }
                        Apple80211CalculateShortSSIDCopy(v30, (CFTypeRef *)buf);
                        if (!*(void *)buf) {
                          goto LABEL_112;
                        }
                      }
                      CFDictionaryRef v31 = (const __CFDictionary *)CFDictionaryGetValue(v26, @"RNR_IE");
                      if (v31)
                      {
                        CFArrayRef v32 = (const __CFArray *)CFDictionaryGetValue(v31, @"NEIGHBOR_AP_INFO_LIST");
                        if (v32)
                        {
                          CFArrayRef v33 = v32;
                          if (CFArrayGetCount(v32) >= 1)
                          {
                            CFIndex v34 = 0;
                            while (1)
                            {
                              CFDictionaryRef v35 = (const __CFDictionary *)CFArrayGetValueAtIndex(v33, v34);
                              if (v35)
                              {
                                CFArrayRef v36 = (const __CFArray *)CFDictionaryGetValue(v35, @"TBTT_INFO_SET");
                                if (CFArrayGetCount(v36) >= 1) {
                                  break;
                                }
                              }
                              LODWORD(v39) = 0;
LABEL_72:
                              CFIndex Count = CFArrayGetCount(v33);
                              if (!v39 && Count > ++v34) {
                                continue;
                              }
                              goto LABEL_76;
                            }
                            uint64_t v37 = 1;
                            while (2)
                            {
                              CFDictionaryRef v38 = (const __CFDictionary *)CFArrayGetValueAtIndex(v36, v37 - 1);
                              CFDictionaryRef v39 = v38;
                              if (v38)
                              {
                                uint64_t v40 = CFDictionaryGetValue(v38, @"BSSID");
                                if (!v40
                                  || !CFEqual(v40, v28)
                                  || CFDictionaryGetValue(v39, @"COLOCATED_AP") != v9)
                                {
                                  goto LABEL_66;
                                }
                                CFIndex v103 = 0xAAAAAAAAAAAAAAAALL;
                                uint64_t v41 = CFDictionaryGetValue(v39, @"SHORT_SSID");
                                CFIndex v103 = (CFIndex)v41;
                                if (v41)
                                {
                                  if (CFEqual(v41, *(CFTypeRef *)buf)) {
                                    goto LABEL_61;
                                  }
LABEL_66:
                                  LODWORD(v39) = 0;
                                }
                                else
                                {
                                  __int16 v42 = CFDictionaryGetValue(v39, @"SAME_SSID");
                                  CFDataRef v43 = (const __CFData *)CFDictionaryGetValue(v26, @"SSID");
                                  if (v42 != v9) {
                                    goto LABEL_66;
                                  }
                                  if (!v43) {
                                    goto LABEL_66;
                                  }
                                  Apple80211CalculateShortSSIDCopy(v43, (CFTypeRef *)&v103);
                                  if (!v103) {
                                    goto LABEL_66;
                                  }
                                  int v44 = CFEqual((CFTypeRef)v103, *(CFTypeRef *)buf);
                                  CFRelease((CFTypeRef)v103);
                                  if (!v44) {
                                    goto LABEL_66;
                                  }
LABEL_61:
                                  LODWORD(v39) = 1;
                                }
                              }
                              CFIndex v45 = CFArrayGetCount(v36);
                              if (v39) {
                                goto LABEL_72;
                              }
                              if (v45 <= v37++) {
                                goto LABEL_72;
                              }
                              continue;
                            }
                          }
                        }
                      }
                    }
                    LODWORD(v39) = 0;
LABEL_76:
                    if (*(void *)buf) {
                      CFRelease(*(CFTypeRef *)buf);
                    }
                    CFDictionaryRef v21 = theDict;
                    if (!v39)
                    {
                      CFAllocatorRef v8 = allocator;
LABEL_112:
                      CFArrayRef v22 = v99;
                      goto LABEL_113;
                    }
                    CFAllocatorRef v8 = allocator;
                    if (!v99)
                    {
                      CFMutableArrayRef v99 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
                      if (!v99) {
                        goto LABEL_149;
                      }
                      CFDictionarySetValue(theDict, @"ORIG_RNR_CHANNEL_LIST", v99);
                      CFRelease(v99);
                    }
                    __int16 v48 = CFDictionaryGetValue(v26, @"CHANNEL");
                    if (!v48 || (int v49 = v48, (v50 = CFDictionaryGetValue(v26, @"CHANNEL_FLAGS")) == 0))
                    {
                      CFDictionaryRef v21 = theDict;
                      goto LABEL_112;
                    }
                    int v51 = v50;
                    CFNumberRef v52 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                    if (!v52) {
                      goto LABEL_149;
                    }
                    CFNumberRef v53 = v52;
                    CFDictionarySetValue(v52, @"CHANNEL", v49);
                    CFDictionarySetValue(v53, @"CHANNEL_FLAGS", v51);
                    CFDataRef v54 = (const __CFData *)CFDictionaryGetValue(v26, @"SSID");
                    if (v54)
                    {
                      if (CFDataGetLength(v54)) {
                        break;
                      }
                    }
                    CFArrayRef v22 = v99;
                    if (!_containsNonHiddenRNRChannels(v99))
                    {
                      CFDictionarySetValue(v53, @"ORIG_RNR_CHANNEL_FROM_HIDDEN_BSS", v9);
LABEL_108:
                      CFArrayRef v22 = v99;
                      v111.length = CFArrayGetCount(v99);
                      v111.location = 0;
                      if (!CFArrayContainsValue(v99, v111, v53)) {
                        CFArrayAppendValue(v99, v53);
                      }
                    }
                    CFRelease(v53);
                    CFDictionaryRef v21 = theDict;
LABEL_113:
                    CFArrayRef v23 = v95;
                    CFIndex v24 = v97 + 1;
                    if (v97 + 1 >= CFArrayGetCount(v95)) {
                      goto LABEL_116;
                    }
                  }
                  if (CFArrayGetCount(v99))
                  {
                    *(void *)buf = 0;
                    if (CFArrayGetCount(v99) >= 1)
                    {
                      CFNumberRef v55 = 0;
                      CFArrayRef v56 = v99;
                      do
                      {
                        CFDictionaryRef v57 = (const __CFDictionary *)CFArrayGetValueAtIndex(v56, *(CFIndex *)buf);
                        if (v57 && CFDictionaryGetValue(v57, @"ORIG_RNR_CHANNEL_FROM_HIDDEN_BSS") == v9)
                        {
                          if (!v55)
                          {
                            CFNumberRef v55 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
                            if (!v55) {
                              goto LABEL_104;
                            }
                          }
                          CFNumberRef v58 = CFNumberCreate(allocator, kCFNumberCFIndexType, buf);
                          if (!v58) {
                            goto LABEL_104;
                          }
                          CFNumberRef v59 = v58;
                          CFArrayAppendValue(v55, v58);
                          CFRelease(v59);
                        }
                        CFIndex v60 = ++*(void *)buf;
                        CFArrayRef v56 = v99;
                      }
                      while (v60 < CFArrayGetCount(v99));
                      if (!v55) {
                        goto LABEL_108;
                      }
                      CFIndex v61 = CFArrayGetCount(v55);
                      if (v61 < 1) {
                        goto LABEL_105;
                      }
                      unint64_t v62 = v61 + 1;
                      do
                      {
                        CFNumberRef v63 = (const __CFNumber *)CFArrayGetValueAtIndex(v55, v62 - 2);
                        if (v63)
                        {
                          *(void *)buf = -1;
                          CFNumberGetValue(v63, kCFNumberCFIndexType, buf);
                          if (*(void *)buf != -1) {
                            CFArrayRemoveValueAtIndex(v99, *(CFIndex *)buf);
                          }
                        }
                        --v62;
                      }
                      while (v62 > 1);
LABEL_104:
                      if (!v55) {
                        goto LABEL_108;
                      }
LABEL_105:
                      CFRelease(v55);
                    }
                  }
                  goto LABEL_108;
                }
LABEL_116:
                if (!(a3 | a4 | a5) && !_containsNonHiddenRNRChannels(v22))
                {
                  if (!_os_feature_enabled_impl()) {
                    goto LABEL_124;
                  }
                  unint64_t v64 = 0;
                  do
                  {
                    int v65 = k6GHzPSC[v64];
                    if (v64 > 0xD) {
                      break;
                    }
                    ++v64;
                  }
                  while (v65 != v90);
                  if (v65 != v90)
                  {
LABEL_124:
                    if (a6)
                    {
                      CFNumberRef v66 = CFDictionaryGetValue(v21, @"SSID_STR");
                      if (v66)
                      {
                        CFNumberRef v67 = v66;
                        v112.length = CFArrayGetCount(a6);
                        v112.location = 0;
                        LODWORD(v66) = CFArrayContainsValue(a6, v112, v67);
                      }
                      CFDictionaryRef v21 = theDict;
                    }
                    else
                    {
                      LODWORD(v66) = 0;
                    }
                    if (a7 && !v66)
                    {
                      CFNumberRef v70 = CFDictionaryGetValue(v21, @"BSSID");
                      if (!v70) {
                        goto LABEL_136;
                      }
                      int v71 = v70;
                      v113.length = CFArrayGetCount(a7);
                      v113.location = 0;
                      LODWORD(v66) = CFArrayContainsValue(a7, v113, v71);
                    }
                    if (!v66)
                    {
LABEL_136:
                      CFNumberRef v72 = CFNumberCreate(v8, kCFNumberCFIndexType, &v102);
                      if (!v72) {
                        goto LABEL_149;
                      }
                      CFNumberRef v69 = v72;
                      CFArrayAppendValue(Mutable, v72);
                      CFArrayAppendValue(v87, v69);
                      int v96 = 0;
                      goto LABEL_138;
                    }
                  }
                }
                int v96 = 0;
              }
LABEL_139:
              CFIndex v73 = ++v102;
              a2 = v92;
            }
            while (v73 < CFArrayGetCount(v92));
          }
          int v74 = CFArrayGetCount(Mutable);
          if (v74 >= 1)
          {
            CFArrayRef v75 = a2;
            unint64_t v76 = v74 + 1;
            CFArrayRef v77 = &_os_log_internal;
            do
            {
              CFNumberRef v78 = (const __CFNumber *)CFArrayGetValueAtIndex(Mutable, (v76 - 2));
              if (v78)
              {
                CFNumberRef v79 = v78;
                CFIndex v103 = -1;
                CFNumberGetValue(v78, kCFNumberCFIndexType, &v103);
                if (v103 != -1)
                {
                  CFDictionaryRef v80 = (const __CFDictionary *)CFArrayGetValueAtIndex(v75, v103);
                  v114.length = CFArrayGetCount(v87);
                  v114.location = 0;
                  if (CFArrayContainsValue(v87, v114, v79))
                  {
                    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
                    {
                      CFIndex v81 = CFDictionaryGetValue(v80, @"SSID_STR");
                      uint64_t v82 = CFDictionaryGetValue(v80, @"BSSID");
                      *(_DWORD *)buf = 136315650;
                      *(void *)&uint8_t buf[4] = "_Apple80211AddOriginatingRNRChannelListToScanResults";
                      __int16 v105 = 2112;
                      unint64_t v106 = v81;
                      __int16 v107 = 2112;
                      CFDictionaryRef v108 = v82;
                      _os_log_error_impl(&dword_210714000, v77, OS_LOG_TYPE_ERROR, "%s: Excluding non-PSC 6GHz scan result (%@/%@)", buf, 0x20u);
                    }
                  }
                  CFArrayRef v75 = v92;
                  CFArrayRemoveValueAtIndex(v92, v103);
                }
              }
              --v76;
            }
            while (v76 > 1);
          }
LABEL_149:
          CFRelease(theArray);
          CFRelease(Mutable);
          CFRelease(v87);
        }
        else
        {
          CFRelease(theArray);
          CFRelease(Mutable);
        }
      }
      else
      {
        CFRelease(theArray);
      }
    }
  }
}

uint64_t Apple80211CopyValue()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!v0 || (*(_DWORD *)v0 & 0x80000000) != 0) {
    return 4294963396;
  }
  int v4 = v3;
  uint64_t v5 = 4294963396;
  if (!v3 || !*(unsigned char *)(v0 + 4)) {
    return v5;
  }
  CFDictionaryRef v6 = v2;
  int v7 = v1;
  memset(__b, 170, sizeof(__b));
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v30 = 0;
  __strlcpy_chk();
  LODWORD(v29) = v7;
  bzero(__b, 0x3C30uLL);
  __b[0] = -1071093303;
  __strlcpy_chk();
  __b[3846] = v7;
  if ((int)v29 <= 247)
  {
    uint64_t v5 = 4294963394;
    switch((int)v29)
    {
      case -1:
        return v5;
      case 0:
      case 3:
      case 10:
      case 11:
      case 20:
      case 22:
      case 23:
      case 24:
      case 25:
      case 30:
      case 46:
      case 47:
      case 48:
      case 56:
      case 67:
      case 68:
      case 69:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 80:
      case 81:
      case 82:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 98:
      case 99:
      case 100:
      case 101:
      case 105:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
        return 4294963393;
      case 1:
      case 40:
        CFArrayRef Mutable = (__CFString *)CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
        goto LABEL_44;
      case 2:
      case 4:
      case 6:
      case 7:
      case 14:
      case 16:
      case 17:
      case 29:
      case 49:
      case 53:
      case 54:
      case 61:
      case 62:
      case 103:
      case 106:
      case 115:
        goto LABEL_30;
      case 5:
      case 8:
      case 15:
      case 18:
      case 21:
      case 26:
      case 28:
      case 31:
      case 33:
      case 34:
      case 35:
      case 36:
      case 41:
      case 45:
      case 50:
      case 52:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 63:
      case 64:
      case 70:
      case 102:
      case 104:
        goto LABEL_7;
      case 9:
      case 43:
      case 44:
      case 51:
      case 97:
        CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
        goto LABEL_44;
      case 12:
      case 19:
      case 27:
      case 32:
      case 37:
      case 38:
      case 39:
      case 42:
      case 66:
      case 83:
        goto LABEL_43;
      case 13:
        int v26 = 0;
        uint64_t v22 = Apple80211GetWithIOCTL();
        if (v22) {
          return v22;
        }
        CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v17 = (char *)&v26;
        goto LABEL_24;
      case 65:
        CFNumberRef Value = CFDictionaryGetValue(v6, @"MODE");
        if (!Value) {
          return 4294963396;
        }
        CFIndex v24 = Value;
        CFDictionaryRef v25 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        *int v4 = (CFMutableStringRef)v25;
        if (!v25) {
          return 4294963395;
        }
        CFDictionarySetValue(v25, @"MODE", v24);
        goto LABEL_45;
      case 79:
        return Apple80211GetWithIOCTL();
      default:
        if (v29 == 166) {
          goto LABEL_7;
        }
        if (v29 != 207) {
          return 4294963393;
        }
        goto LABEL_43;
    }
  }
  if ((int)v29 <= 367)
  {
    switch((int)v29)
    {
      case 248:
        CFMutableStringRef v8 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
        *int v4 = v8;
        if (!v8) {
          return 4294963395;
        }
        char v9 = 1;
        unsigned int v10 = 0x2000;
        break;
      case 249:
      case 250:
      case 251:
      case 252:
      case 253:
      case 255:
      case 257:
      case 260:
      case 262:
      case 263:
        return 4294963393;
      case 254:
        goto LABEL_43;
      case 256:
      case 258:
      case 259:
      case 261:
        goto LABEL_7;
      case 264:
        goto LABEL_30;
      default:
        if (v29 != 353) {
          return 4294963393;
        }
        goto LABEL_7;
    }
LABEL_15:
    size_t v11 = v10;
    do
    {
      char v12 = v9;
      CFNumberRef v13 = malloc_type_malloc(v11, 0xDBB56C4CuLL);
      if (!v13) {
        goto LABEL_22;
      }
      int v14 = v13;
      uint64_t v15 = Apple80211GetWithIOCTL();
      if (v15 == -3901)
      {
        unsigned int v10 = 2 * v11;
        free(v14);
        char v9 = 0;
        if (v12) {
          goto LABEL_15;
        }
LABEL_22:
        uint64_t v5 = 4294963395;
        goto LABEL_46;
      }
      uint64_t v5 = v15;
      if (!v15)
      {
        *((unsigned char *)v14 + (v11 - 1)) = 0;
        CFStringAppendCString(*v4, (const char *)v14, 0x8000100u);
        free(v14);
        return v5;
      }
      free(v14);
      char v9 = 0;
    }
    while ((v12 & 1) != 0);
    if (!v5) {
      return v5;
    }
LABEL_46:
    CFRelease(*v4);
    *int v4 = 0;
    return v5;
  }
  char v19 = v29 - 112;
  if ((v29 - 368) > 0x37) {
    goto LABEL_42;
  }
  if (((1 << v19) & 0x80008022000000) != 0)
  {
LABEL_7:
    if (!Apple80211IOCTLGetWrapper())
    {
      CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v17 = (char *)&v29 + 4;
LABEL_24:
      CFNumberRef v18 = CFNumberCreate(v16, kCFNumberIntType, v17);
      *int v4 = (CFMutableStringRef)v18;
      if (v18) {
        return 0;
      }
      else {
        return 4294963395;
      }
    }
    if (*__error() == 102 || *__error() == 6) {
      return 4294963393;
    }
    if (*__error() != 22) {
      return *__error();
    }
    return 4294963396;
  }
  if (((1 << v19) & 0x40080) != 0)
  {
LABEL_30:
    CFArrayRef Mutable = (__CFString *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    goto LABEL_44;
  }
  if (v29 != 368)
  {
LABEL_42:
    if (v29 == 516) {
      goto LABEL_43;
    }
    return 4294963393;
  }
LABEL_43:
  CFArrayRef Mutable = (__CFString *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
LABEL_44:
  *int v4 = Mutable;
  if (!Mutable) {
    return 4294963395;
  }
LABEL_45:
  uint64_t v5 = Apple80211GetWithIOCTL();
  if (v5) {
    goto LABEL_46;
  }
  return v5;
}

uint64_t Apple80211GetWithIOCTL()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  int v4 = v3;
  uint64_t v5 = v0;
  uint64_t v1029 = *MEMORY[0x263EF8340];
  v1028 = 0;
  long long v1026 = 0u;
  long long v1027 = 0u;
  if ((*(_DWORD *)v0 & 0x80000000) != 0)
  {
LABEL_36:
    uint64_t v7 = 4294963396;
    goto LABEL_741;
  }
  CFDictionaryRef v6 = v1;
  uint64_t v7 = 4294963396;
  if (!v1 || !*(unsigned char *)(v0 + 4))
  {
LABEL_741:
    __uint64_t v968 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      if (v4 > 558)
      {
        v969 = "Error Invalid ioctl";
      }
      else if (v4 == -1)
      {
        v969 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if (v4 < 0 || (v969 = (const char *)gAppleIoucIndexToString[v4]) == 0)
      {
        v969 = "unknown Apple80211_IOC_";
      }
      LODWORD(valuePtr[0]) = 136448258;
      *(void *)((char *)valuePtr + 4) = "Apple80211GetWithIOCTL";
      WORD6(valuePtr[0]) = 1024;
      *(_DWORD *)((char *)valuePtr + 14) = 11613;
      WORD1(valuePtr[1]) = 2048;
      *(void *)((char *)&valuePtr[1] + 4) = v968 / 0x3B9ACA00;
      WORD6(valuePtr[1]) = 2048;
      *(void *)((char *)&valuePtr[1] + 14) = v968 % 0x3B9ACA00 / 0x3E8;
      WORD3(valuePtr[2]) = 2082;
      *((void *)&valuePtr[2] + 1) = v5 + 4;
      LOWORD(valuePtr[3]) = 1024;
      *(_DWORD *)((char *)&valuePtr[3] + 2) = v4;
      WORD3(valuePtr[3]) = 2082;
      *((void *)&valuePtr[3] + 1) = v969;
      LOWORD(valuePtr[4]) = 1024;
      *(_DWORD *)((char *)&valuePtr[4] + 2) = v7;
      WORD3(valuePtr[4]) = 1024;
      DWORD2(valuePtr[4]) = v7;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOCTL type %d/'%{public}s' return %d/0x%08x\n", (uint8_t *)valuePtr, 0x4Cu);
    }
    return v7;
  }
  int v8 = v2;
  __strlcpy_chk();
  LODWORD(v1027) = v4;
  if (v4 <= 247)
  {
    uint64_t v7 = 4294963394;
    switch(v4)
    {
      case -1:
        goto LABEL_741;
      case 0:
      case 3:
      case 10:
      case 11:
      case 20:
      case 22:
      case 23:
      case 24:
      case 25:
      case 30:
      case 46:
      case 47:
      case 56:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 92:
      case 93:
      case 94:
      case 95:
      case 98:
      case 99:
      case 100:
      case 101:
      case 105:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
        goto LABEL_10;
      case 1:
        memset(valuePtr, 0, 33);
        DWORD2(v1027) = 32;
        v1028 = (UInt8 *)valuePtr;
        goto LABEL_237;
      case 2:
        if (!v8) {
          goto LABEL_36;
        }
        valuePtr[0] = 0uLL;
        DWORD2(v1027) = 16;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v102 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v103 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v103) {
          goto LABEL_829;
        }
        CFNumberRef v104 = v103;
        CFDictionarySetValue(v6, @"AUTH_LOWER", v103);
        CFRelease(v104);
        if (!DWORD2(valuePtr[0])) {
          goto LABEL_180;
        }
        CFNumberRef v105 = CFNumberCreate(v102, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v105) {
          goto LABEL_829;
        }
        CFNumberRef v106 = v105;
        CFDictionarySetValue(v6, @"AUTH_UPPER", v105);
        CFRelease(v106);
LABEL_180:
        if (!HIDWORD(valuePtr[0])) {
          goto LABEL_739;
        }
        CFNumberRef v107 = CFNumberCreate(v102, kCFNumberSInt32Type, (char *)valuePtr + 12);
        if (!v107) {
          goto LABEL_829;
        }
        uint64_t v37 = v107;
        Boolean v101 = @"AUTH_UPPER_EXT";
        goto LABEL_736;
      case 4:
        if (!v8) {
          goto LABEL_36;
        }
        valuePtr[0] = 1uLL;
        DWORD2(v1027) = 16;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v108 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v109 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v109) {
          goto LABEL_829;
        }
        CFNumberRef v110 = v109;
        CFDictionarySetValue(v6, @"CHANNEL", v109);
        CFRelease(v110);
        CFNumberRef v111 = CFNumberCreate(v108, kCFNumberSInt32Type, (char *)valuePtr + 12);
        if (!v111) {
          goto LABEL_829;
        }
        uint64_t v37 = v111;
        Boolean v101 = @"CHANNEL_FLAGS";
        goto LABEL_736;
      case 5:
      case 8:
      case 15:
      case 18:
      case 21:
      case 26:
      case 28:
      case 31:
      case 33:
      case 34:
      case 35:
      case 36:
      case 41:
      case 45:
      case 50:
      case 52:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 63:
      case 64:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 82:
      case 91:
      case 96:
      case 102:
      case 104:
      case 166:
        goto LABEL_6;
      case 6:
        DWORD2(valuePtr[0]) = 0;
        *(void *)&valuePtr[0] = 0;
        DWORD2(v1027) = 12;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v112 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v113 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (v113)
        {
          CFNumberRef v114 = v113;
          CFDictionarySetValue(v6, @"PROTMODE", v113);
          CFRelease(v114);
          CFNumberRef v115 = CFNumberCreate(v112, kCFNumberSInt32Type, (char *)valuePtr + 8);
          if (v115)
          {
            uint64_t v37 = v115;
            Boolean v101 = @"PROTMODE_THRESHOLD";
            goto LABEL_736;
          }
        }
        v1018 = v6;
        goto LABEL_828;
      case 7:
        if (!v8) {
          goto LABEL_36;
        }
        DWORD2(valuePtr[0]) = 0;
        *(void *)&valuePtr[0] = 0;
        DWORD2(v1027) = 12;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v116 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v117 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v117) {
          return 4294963395;
        }
        CFNumberRef v118 = v117;
        CFDictionarySetValue(v6, @"TX_POWER", v117);
        CFRelease(v118);
        CFNumberRef v119 = CFNumberCreate(v116, kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v119) {
          return 4294963395;
        }
        uint64_t v37 = v119;
        Boolean v101 = @"TX_POWER_UNIT";
        goto LABEL_736;
      case 9:
        WORD2(valuePtr[0]) = 0;
        LODWORD(valuePtr[0]) = 0;
        DWORD2(v1027) = 6;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        if (v8 == 6)
        {
          uint64_t v7 = 0;
          *(_DWORD *)CFDictionaryRef v6 = valuePtr[0];
          *((_WORD *)v6 + 2) = WORD2(valuePtr[0]);
          goto LABEL_740;
        }
        v1019 = ether_ntoa((const ether_addr *)valuePtr);
        if (!v1019) {
          goto LABEL_829;
        }
        v246 = v1019;
        goto LABEL_351;
      case 12:
        memset(valuePtr, 0, 24);
        v1028 = (UInt8 *)valuePtr + 4;
        DWORD2(v1027) = 19;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        int v120 = 0;
        *(_DWORD *)buffer = 0;
        CFAllocatorRef v121 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        do
        {
          if ((*((unsigned __int8 *)valuePtr + v120 / 8 + 4) >> (v120 & 7)))
          {
            CFNumberRef v122 = CFNumberCreate(v121, kCFNumberSInt32Type, buffer);
            if (!v122) {
              goto LABEL_829;
            }
            CFNumberRef v123 = v122;
            CFArrayAppendValue(v6, v122);
            CFRelease(v123);
            int v120 = *(_DWORD *)buffer;
          }
          *(_DWORD *)buffer = v120 + 1;
          BOOL v124 = v120++ < 146;
        }
        while (v124);
        goto LABEL_739;
      case 13:
        if (!v8) {
          goto LABEL_36;
        }
        *(void *)&valuePtr[0] = 0;
        v1028 = (UInt8 *)valuePtr;
        DWORD2(v1027) = 8;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        uint64_t v7 = 0;
        *(_DWORD *)CFDictionaryRef v6 = DWORD1(valuePtr[0]);
        goto LABEL_740;
      case 14:
        DWORD2(valuePtr[0]) = 0;
        *(void *)&valuePtr[0] = 1;
        DWORD2(v1027) = 12;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v125 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v126 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v126) {
          goto LABEL_829;
        }
        CFNumberRef v127 = v126;
        CFDictionaryAddValue(v6, @"PHYMODE_SUPPORTED", v126);
        CFRelease(v127);
        CFNumberRef v128 = CFNumberCreate(v125, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v128) {
          goto LABEL_829;
        }
        uint64_t v37 = v128;
        CFDictionaryRef v38 = @"PHYMODE_ACTIVE";
        goto LABEL_793;
      case 16:
      case 17:
        *(_OWORD *)((char *)&valuePtr[2] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[1] + 4) = 0u;
        *(_OWORD *)((char *)valuePtr + 4) = 0u;
        LODWORD(valuePtr[0]) = 1;
        DWORD2(v1027) = 52;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        int v55 = v1027;
        if (v1027 == 16) {
          CFArrayRef v56 = @"RSSI_CTL_AGR";
        }
        else {
          CFArrayRef v56 = @"NOISE_CTL_AGR";
        }
        if (v1027 == 16) {
          CFDictionaryRef v57 = @"RSSI_CTL_LIST";
        }
        else {
          CFDictionaryRef v57 = @"NOISE_CTL_LIST";
        }
        if (v1027 == 16) {
          CFNumberRef v58 = @"RSSI_EXT_AGR";
        }
        else {
          CFNumberRef v58 = @"NOISE_EXT_AGR";
        }
        if (v1027 == 16) {
          CFNumberRef v59 = @"RSSI_EXT_LIST";
        }
        else {
          CFNumberRef v59 = @"NOISE_EXT_LIST";
        }
        CFAllocatorRef v60 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v61 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v61) {
          goto LABEL_829;
        }
        CFNumberRef v62 = v61;
        if (v55 == 16) {
          CFNumberRef v63 = @"RSSI_UNIT";
        }
        else {
          CFNumberRef v63 = @"NOISE_UNIT";
        }
        CFDictionaryAddValue(v6, v63, v61);
        CFRelease(v62);
        if (!DWORD1(valuePtr[0]))
        {
          uint64_t v7 = 4294963394;
          goto LABEL_740;
        }
        if (DWORD1(valuePtr[0]) == 1)
        {
          CFNumberRef v64 = CFNumberCreate(v60, kCFNumberSInt32Type, (char *)valuePtr + 12);
          if (!v64) {
            goto LABEL_829;
          }
          CFNumberRef v65 = v64;
          CFDictionaryAddValue(v6, v56, v64);
          CFNumberRef v66 = v65;
          goto LABEL_738;
        }
        v1021 = v58;
        key = v57;
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v60, 0, MEMORY[0x263EFFF70]);
        if (!Mutable) {
          goto LABEL_829;
        }
        CFMutableArrayRef v989 = Mutable;
        CFMutableArrayRef v990 = CFArrayCreateMutable(v60, 0, MEMORY[0x263EFFF70]);
        if (!v990)
        {
          v1018 = v989;
          goto LABEL_828;
        }
        v991 = v990;
        v1020 = v56;
        if (DWORD1(valuePtr[0]))
        {
          unint64_t v992 = 0;
          v993 = &valuePtr[2];
          do
          {
            CFNumberRef v994 = CFNumberCreate(v60, kCFNumberSInt32Type, (char *)v993 - 20);
            if (!v994
              || (CFNumberRef v995 = v994,
                  CFArrayAppendValue(v989, v994),
                  CFRelease(v995),
                  (CFNumberRef v996 = CFNumberCreate(v60, kCFNumberSInt32Type, v993)) == 0))
            {
              CFRelease(v989);
              v1018 = v991;
              goto LABEL_828;
            }
            CFNumberRef v997 = v996;
            CFArrayAppendValue(v991, v996);
            CFRelease(v997);
            if (v992 > 2) {
              break;
            }
            ++v992;
            v993 = (_OWORD *)((char *)v993 + 4);
          }
          while (v992 < DWORD1(valuePtr[0]));
        }
        CFDictionaryAddValue(v6, key, v989);
        CFDictionaryAddValue(v6, v59, v991);
        CFRelease(v989);
        CFRelease(v991);
        CFNumberRef v998 = CFNumberCreate(v60, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12);
        if (v998)
        {
          CFNumberRef v999 = v998;
          CFDictionaryAddValue(v6, v1020, v998);
          CFRelease(v999);
          CFNumberRef v1000 = CFNumberCreate(v60, kCFNumberSInt32Type, &valuePtr[3]);
          CFDictionaryRef v38 = v1021;
          if (v1000)
          {
            uint64_t v37 = v1000;
            goto LABEL_793;
          }
        }
        goto LABEL_829;
      case 19:
        *(void *)&valuePtr[1] = 0;
        valuePtr[0] = xmmword_210754878;
        DWORD2(v1027) = 24;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        if (!DWORD1(valuePtr[0])) {
          goto LABEL_739;
        }
        unint64_t v129 = 0;
        CFAllocatorRef v130 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        unsigned int v131 = (char *)valuePtr + 8;
        while (1)
        {
          CFNumberRef v132 = CFNumberCreate(v130, kCFNumberSInt32Type, v131);
          if (!v132) {
            goto LABEL_829;
          }
          CFNumberRef v133 = v132;
          CFArrayAppendValue(v6, v132);
          CFRelease(v133);
          uint64_t v7 = 0;
          if (v129 <= 2)
          {
            ++v129;
            v131 += 4;
            if (v129 < DWORD1(valuePtr[0])) {
              continue;
            }
          }
          goto LABEL_740;
        }
      case 27:
        goto LABEL_71;
      case 29:
        valuePtr[0] = 0uLL;
        DWORD2(v1027) = 16;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v134 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v135 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v135) {
          goto LABEL_829;
        }
        CFNumberRef v136 = v135;
        CFDictionarySetValue(v6, @"DEAUTH_REASON", v135);
        CFRelease(v136);
        CFNumberRef v137 = ether_ntoa((const ether_addr *)((char *)valuePtr + 8));
        if (!v137) {
          goto LABEL_829;
        }
        CFStringRef v138 = CFStringCreateWithCString(v134, v137, 0x8000100u);
        if (!v138) {
          goto LABEL_829;
        }
        uint64_t v37 = (__CFDictionary *)v138;
        Boolean v101 = @"DEAUTH_EA";
        goto LABEL_736;
      case 32:
        if (!v8) {
          goto LABEL_36;
        }
        memset(valuePtr, 0, 188);
        DWORD2(v1027) = 188;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        if (!WORD2(valuePtr[0])) {
          goto LABEL_739;
        }
        unint64_t v139 = 0;
        CFAllocatorRef v140 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFIndex v141 = &valuePtr[1];
        CFStringRef v142 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
        while (2)
        {
          CFMutableDictionaryRef v143 = CFDictionaryCreateMutable(v140, 0, MEMORY[0x263EFFF88], v142);
          if (v143)
          {
            unsigned int v144 = v143;
            CFNumberRef v145 = CFNumberCreate(v140, kCFNumberSInt32Type, (char *)v141 - 4);
            if (v145)
            {
              CFNumberRef v146 = v145;
              CFDictionarySetValue(v144, @"RATESET_RATE", v145);
              CFRelease(v146);
              CFNumberRef v147 = CFNumberCreate(v140, kCFNumberSInt32Type, v141);
              if (v147)
              {
                CFNumberRef v148 = v147;
                CFDictionarySetValue(v144, @"RATESET_FLAGS", v147);
                CFRelease(v148);
                CFArrayAppendValue(v6, v144);
                CFRelease(v144);
                uint64_t v7 = 0;
                if (v139 > 0xD) {
                  goto LABEL_740;
                }
                ++v139;
                CFIndex v141 = (_OWORD *)((char *)v141 + 12);
                if (v139 >= WORD2(valuePtr[0])) {
                  goto LABEL_740;
                }
                continue;
              }
            }
            v1018 = v144;
LABEL_828:
            CFRelease(v1018);
          }
          goto LABEL_829;
        }
      case 37:
      case 38:
      case 39:
        *(void *)&valuePtr[1] = 0;
        valuePtr[0] = xmmword_210754894;
        DWORD2(v1027) = 24;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        if (!DWORD1(valuePtr[0])) {
          goto LABEL_739;
        }
        unint64_t v39 = 0;
        CFAllocatorRef v40 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v41 = (char *)valuePtr + 8;
        while (1)
        {
          CFNumberRef v42 = CFNumberCreate(v40, kCFNumberSInt32Type, v41);
          if (!v42) {
            goto LABEL_829;
          }
          CFNumberRef v43 = v42;
          CFArrayAppendValue(v6, v42);
          CFRelease(v43);
          ++v39;
          v41 += 4;
          if (v39 >= DWORD1(valuePtr[0])) {
            goto LABEL_739;
          }
        }
      case 40:
        memset(valuePtr, 170, sizeof(valuePtr));
        DWORD2(v1027) = 0x8000;
        v1028 = (UInt8 *)valuePtr;
LABEL_237:
        if (!Apple80211IOCTLGetWrapper()) {
          goto LABEL_238;
        }
        goto LABEL_711;
      case 42:
        if (!v8) {
          goto LABEL_36;
        }
        bzero((char *)valuePtr + 4, 0x804uLL);
        LODWORD(valuePtr[0]) = 1;
        DWORD2(v1027) = 2056;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        if (!DWORD1(valuePtr[0])) {
          goto LABEL_739;
        }
        unint64_t v149 = 0;
        CFAllocatorRef v150 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        unint64_t v151 = (char *)&valuePtr[1] + 4;
        uint64_t v152 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
        CFIndex v153 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
        while (2)
        {
          CFStringRef v154 = ether_ntoa((const ether_addr *)(v151 - 8));
          if (!v154) {
            goto LABEL_248;
          }
          CFStringRef v155 = v154;
          CFMutableDictionaryRef v156 = CFDictionaryCreateMutable(v150, 0, v152, v153);
          if (!v156) {
            goto LABEL_829;
          }
          uint64_t v37 = v156;
          CFStringRef v157 = CFStringCreateWithCString(v150, v155, 0x8000100u);
          if (v157)
          {
            CFStringRef v158 = v157;
            CFDictionarySetValue(v37, @"STATION_MAC", v157);
            CFRelease(v158);
            CFNumberRef v159 = CFNumberCreate(v150, kCFNumberIntType, v151);
            if (v159)
            {
              CFNumberRef v160 = v159;
              CFDictionarySetValue(v37, @"STATION_RSSI", v159);
              CFRelease(v160);
              CFArrayAppendValue(v6, v37);
              CFRelease(v37);
LABEL_248:
              uint64_t v7 = 0;
              if (v149 > 0x7E) {
                goto LABEL_740;
              }
              ++v149;
              v151 += 16;
              if (v149 >= DWORD1(valuePtr[0])) {
                goto LABEL_740;
              }
              continue;
            }
          }
          goto LABEL_737;
        }
      case 43:
      case 44:
        if (!v8) {
          goto LABEL_36;
        }
        memset(valuePtr, 0, 257);
        int v67 = 256;
        goto LABEL_349;
      case 48:
        bzero((char *)valuePtr + 4, 0x804uLL);
        LODWORD(valuePtr[0]) = 1;
        DWORD2(v1027) = 2056;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        _parseIEs((unsigned __int8 *)valuePtr + 8, WORD2(valuePtr[0]), v6, v5 + 88);
        goto LABEL_739;
      case 49:
        memset(valuePtr, 0, 20);
        DWORD2(v1027) = 20;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v161 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v162 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v162) {
          goto LABEL_829;
        }
        CFNumberRef v163 = v162;
        CFDictionarySetValue(v6, @"STATS_TX_FRAME_COUNT", v162);
        CFRelease(v163);
        CFNumberRef v164 = CFNumberCreate(v161, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v164) {
          goto LABEL_829;
        }
        CFNumberRef v165 = v164;
        CFDictionarySetValue(v6, @"STATS_TX_ERRORS", v164);
        CFRelease(v165);
        CFNumberRef v166 = CFNumberCreate(v161, kCFNumberSInt32Type, (char *)valuePtr + 12);
        if (!v166) {
          goto LABEL_829;
        }
        CFNumberRef v167 = v166;
        CFDictionarySetValue(v6, @"STATS_RX_FRAME_COUNT", v166);
        CFRelease(v167);
        CFNumberRef v168 = CFNumberCreate(v161, kCFNumberSInt32Type, &valuePtr[1]);
        if (!v168) {
          goto LABEL_829;
        }
        uint64_t v37 = v168;
        Boolean v101 = @"STATS_RX_ERRORS";
        goto LABEL_736;
      case 51:
        LODWORD(valuePtr[0]) = 0;
        int v67 = 3;
        goto LABEL_349;
      case 53:
        *(void *)&valuePtr[1] = 0;
        valuePtr[0] = xmmword_210754134;
        DWORD2(v1027) = 24;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v169 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v170 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v170) {
          goto LABEL_829;
        }
        CFNumberRef v171 = v170;
        CFDictionarySetValue(v6, @"LAST_RX_RATE", v170);
        CFRelease(v171);
        CFNumberRef v172 = CFNumberCreate(v169, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v172) {
          goto LABEL_829;
        }
        CFNumberRef v173 = v172;
        CFDictionarySetValue(v6, @"LAST_RX_RSSI", v172);
        CFRelease(v173);
        CFNumberRef v174 = CFNumberCreate(v169, kCFNumberSInt32Type, (const void *)((unint64_t)valuePtr | 0xC));
        if (!v174) {
          goto LABEL_829;
        }
        CFNumberRef v175 = v174;
        CFDictionarySetValue(v6, @"LAST_RX_NUM_STREAMS", v174);
        CFRelease(v175);
        uint64_t v176 = ether_ntoa((const ether_addr *)&valuePtr[1]);
        CFStringRef v177 = CFStringCreateWithCString(v169, v176, 0x8000100u);
        if (!v177) {
          goto LABEL_829;
        }
        uint64_t v37 = (__CFDictionary *)v177;
        Boolean v101 = @"LAST_RX_SA";
        goto LABEL_736;
      case 54:
        *(void *)&valuePtr[0] = 1;
        DWORD2(v1027) = 8;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFNumberRef v178 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v178) {
          goto LABEL_829;
        }
        uint64_t v37 = v178;
        Boolean v101 = @"COUNT";
        goto LABEL_736;
      case 61:
        DWORD2(valuePtr[0]) = 0;
        *(void *)&valuePtr[0] = 1;
        DWORD2(v1027) = 12;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v179 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v180 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v180) {
          goto LABEL_829;
        }
        CFNumberRef v181 = v180;
        CFDictionarySetValue(v6, @"MAX_FACTOR", v180);
        CFRelease(v181);
        CFNumberRef v182 = CFNumberCreate(v179, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v182) {
          goto LABEL_829;
        }
        uint64_t v37 = v182;
        Boolean v101 = @"MAX_DENSITY";
        goto LABEL_736;
      case 62:
        *(void *)&valuePtr[0] = 1;
        DWORD2(v1027) = 8;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFNumberRef v183 = (const void *)*MEMORY[0x263EFFB40];
        CFNumberRef v184 = (const void *)*MEMORY[0x263EFFB38];
        if (BYTE4(valuePtr[0])) {
          unsigned int v185 = (const void *)*MEMORY[0x263EFFB40];
        }
        else {
          unsigned int v185 = (const void *)*MEMORY[0x263EFFB38];
        }
        CFDictionarySetValue(v6, @"BA", v185);
        if (BYTE5(valuePtr[0])) {
          unsigned int v186 = v183;
        }
        else {
          unsigned int v186 = v184;
        }
        CFDictionarySetValue(v6, @"IMMEDIATE_BA", v186);
        if (BYTE6(valuePtr[0])) {
          uint64_t v187 = v183;
        }
        else {
          uint64_t v187 = v184;
        }
        CFDictionarySetValue(v6, @"CCBA", v187);
        if (BYTE7(valuePtr[0])) {
          uint64_t v188 = v183;
        }
        else {
          uint64_t v188 = v184;
        }
        int v189 = @"IMPLICIT_BA";
        goto LABEL_325;
      case 65:
        valuePtr[0] = xmmword_210754A90;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, @"MODE");
        if (!Value || !CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_715;
        }
        DWORD2(v1027) = 16;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v191 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v192 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v192) {
          goto LABEL_829;
        }
        CFNumberRef v193 = v192;
        CFDictionarySetValue(v6, @"SUBMODE", v192);
        CFRelease(v193);
        CFNumberRef v194 = CFNumberCreate(v191, kCFNumberSInt32Type, (const void *)((unint64_t)valuePtr | 0xC));
        if (!v194) {
          goto LABEL_829;
        }
        uint64_t v37 = v194;
        Boolean v101 = @"FLAGS";
        goto LABEL_736;
      case 66:
        valuePtr[0] = xmmword_210754A90;
        DWORD2(v1027) = 16;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        int v195 = 0;
        *(_DWORD *)buffer = 0;
        CFAllocatorRef v196 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        do
        {
          if ((*((unsigned __int8 *)valuePtr + v195 / 8 + 4) >> (v195 & 7)))
          {
            CFNumberRef v197 = CFNumberCreate(v196, kCFNumberSInt32Type, buffer);
            if (!v197) {
              goto LABEL_829;
            }
            CFNumberRef v198 = v197;
            CFArrayAppendValue(v6, v197);
            CFRelease(v198);
            int v195 = *(_DWORD *)buffer;
          }
          *(_DWORD *)buffer = v195 + 1;
          BOOL v124 = v195++ < 76;
        }
        while (v124);
        goto LABEL_739;
      case 69:
        unsigned int v199 = malloc_type_malloc(0x3AD8uLL, 0x1000040BBD6A9C0uLL);
        if (!v199) {
          return 4294963395;
        }
        int v200 = v199;
        *unsigned int v199 = 1;
        uint64_t v201 = 0x3FFFFFFFFFFFF150;
        do
        {
          v199[v201 + 3764] = 1500;
          v201 += 376;
        }
        while (v201 * 4);
        v199[3] = 10;
        DWORD2(v1027) = 15064;
        v1028 = (UInt8 *)v199;
        if (Apple80211RawGet(v5, (uint64_t)&v1026))
        {
          free(v200);
          goto LABEL_711;
        }
        CFAllocatorRef v1001 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFMutableArrayRef v1002 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
        if (!v1002) {
          goto LABEL_825;
        }
        CFMutableArrayRef v1003 = v1002;
        unsigned int v1004 = 0;
        LODWORD(valuePtr[0]) = 0;
        break;
      case 73:
        CFStringRef v202 = (const __CFString *)CFDictionaryGetValue(v6, @"STA_MAC");
        memset(buffer, 170, 18);
        if (!v202) {
          goto LABEL_819;
        }
        if (!CFStringGetCString(v202, buffer, 18, 0x8000100u)) {
          goto LABEL_819;
        }
        unsigned int v203 = ether_aton(buffer);
        if (!v203) {
          goto LABEL_819;
        }
        CFNumberRef v204 = v203;
        bzero((char *)valuePtr + 8, 0x408uLL);
        LODWORD(valuePtr[0]) = 1;
        int v205 = *(_DWORD *)v204->octet;
        WORD4(valuePtr[0]) = *(_WORD *)&v204->octet[4];
        DWORD1(valuePtr[0]) = v205;
        HIDWORD(valuePtr[0]) = 1024;
        DWORD2(v1027) = 1040;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFDataRef v206 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)&valuePtr[1], HIDWORD(valuePtr[0]));
        if (!v206) {
          return 4294963395;
        }
        uint64_t v37 = v206;
        CFDictionaryRef v38 = @"STA_IE_LIST";
        goto LABEL_793;
      case 79:
        CFStringRef v207 = (const __CFString *)CFDictionaryGetValue(v6, @"STATION_MAC");
        memset(buffer, 170, 18);
        if (!v207) {
          goto LABEL_819;
        }
        if (!CFStringGetCString(v207, buffer, 18, 0x8000100u)) {
          goto LABEL_819;
        }
        CFDataRef v208 = ether_aton(buffer);
        if (!v208) {
          goto LABEL_819;
        }
        valuePtr[0] = xmmword_210754150;
        *(_OWORD *)((char *)valuePtr + 12) = *(long long *)((char *)&xmmword_210754150 + 12);
        __int16 v209 = *(_WORD *)&v208->octet[4];
        DWORD1(valuePtr[0]) = *(_DWORD *)v208->octet;
        WORD4(valuePtr[0]) = v209;
        DWORD2(v1027) = 28;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v210 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v211 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr[1]);
        CFDictionarySetValue(v6, @"STA_RXBYTES", v211);
        CFRelease(v211);
        CFNumberRef v212 = CFNumberCreate(v210, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8);
        CFDictionarySetValue(v6, @"STA_TXBYTES", v212);
        CFRelease(v212);
        CFNumberRef v213 = CFNumberCreate(v210, kCFNumberSInt32Type, (const void *)((unint64_t)valuePtr | 0xC));
        CFDictionarySetValue(v6, @"STA_RXPACKETS", v213);
        CFRelease(v213);
        uint64_t v37 = CFNumberCreate(v210, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4);
        Boolean v101 = @"STA_TXPACKETS";
        goto LABEL_736;
      case 80:
        DWORD2(valuePtr[0]) = 0;
        *(void *)&valuePtr[0] = 1;
        DWORD2(v1027) = 12;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v214 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v215 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v215) {
          return 4294963395;
        }
        CFNumberRef v216 = v215;
        CFDictionaryAddValue(v6, @"ROAM_THRESH_RSSI", v215);
        CFRelease(v216);
        CFNumberRef v217 = CFNumberCreate(v214, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v217) {
          return 4294963395;
        }
        uint64_t v37 = v217;
        CFDictionaryRef v38 = @"ROAM_THRESH_RATE";
        goto LABEL_793;
      case 81:
        LOBYTE(valuePtr[0]) = -86;
        DWORD2(v1027) = 1;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        char v218 = valuePtr[0];
        if (valuePtr[0])
        {
          CFDictionarySetValue(v6, @"V_DBG_FLAG_ASSOC", (const void *)*MEMORY[0x263EFFB40]);
          char v218 = valuePtr[0];
        }
        if ((v218 & 2) == 0) {
          goto LABEL_739;
        }
        uint64_t v188 = (const void *)*MEMORY[0x263EFFB40];
        int v189 = @"V_DBG_FLAG_CONNECTION";
LABEL_325:
        CFDictionarySetValue(v6, v189, v188);
        goto LABEL_739;
      case 83:
        bzero((char *)valuePtr + 4, 0x804uLL);
        LODWORD(valuePtr[0]) = 1;
        DWORD2(v1027) = 2056;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        if (!DWORD1(valuePtr[0])) {
          goto LABEL_739;
        }
        unint64_t v219 = 0;
        CFAllocatorRef v220 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        v221 = (const ether_addr *)&valuePtr[1];
        v222 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
        v223 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
        while (2)
        {
          CFMutableDictionaryRef v224 = CFDictionaryCreateMutable(v220, 0, v222, v223);
          if (!v224) {
            return 4294963395;
          }
          __int16 v50 = v224;
          CFNumberRef v225 = CFNumberCreate(v220, kCFNumberSInt32Type, &v221[-2].octet[4]);
          if (v225)
          {
            CFNumberRef v226 = v225;
            CFDictionaryAddValue(v50, @"PMKSA_AGE", v225);
            CFRelease(v226);
            CFNumberRef v227 = CFNumberCreate(v220, kCFNumberSInt32Type, &v221[-1].octet[2]);
            if (v227)
            {
              CFNumberRef v228 = v227;
              CFDictionaryAddValue(v50, @"PMKSA_AKMP", v227);
              CFRelease(v228);
              v229 = ether_ntoa(v221);
              if (v229)
              {
                CFStringRef v230 = CFStringCreateWithCString(v220, v229, 0x8000100u);
                if (v230)
                {
                  CFStringRef v231 = v230;
                  CFDictionaryAddValue(v50, @"PMKSA_AUTHENTICATOR", v230);
                  CFRelease(v231);
                  CFArrayAppendValue(v6, v50);
                  CFRelease(v50);
                  ++v219;
                  v221 = (const ether_addr *)((char *)v221 + 16);
                  if (v219 >= DWORD1(valuePtr[0])) {
                    goto LABEL_739;
                  }
                  continue;
                }
              }
            }
          }
          goto LABEL_779;
        }
      case 84:
        LODWORD(valuePtr[1]) = 0;
        valuePtr[0] = xmmword_2107548B0;
        DWORD2(v1027) = 20;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v232 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v233 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v233) {
          return 4294963395;
        }
        CFNumberRef v234 = v233;
        CFDictionaryAddValue(v6, @"LQ_RSSI_DIVISOR", v233);
        CFRelease(v234);
        CFNumberRef v235 = CFNumberCreate(v232, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v235) {
          return 4294963395;
        }
        CFNumberRef v236 = v235;
        CFDictionaryAddValue(v6, @"LQ_TX_RATE_DIVISOR", v235);
        CFRelease(v236);
        CFNumberRef v237 = CFNumberCreate(v232, kCFNumberSInt32Type, (const void *)((unint64_t)valuePtr | 0xC));
        if (!v237) {
          return 4294963395;
        }
        uint64_t v37 = v237;
        CFDictionaryRef v38 = @"LQ_EVENT_MIN_INTERVAL";
        goto LABEL_793;
      case 85:
        bzero((char *)valuePtr + 4, 0x810uLL);
        LODWORD(valuePtr[0]) = 1;
        CFDataRef v238 = (const __CFData *)CFDictionaryGetValue(v6, @"CUSTOM_IE_DATA");
        if (!v238) {
          goto LABEL_819;
        }
        CFDataRef v239 = v238;
        HIDWORD(valuePtr[0]) = CFDataGetLength(v238);
        if (HIDWORD(valuePtr[0]) > 0x800) {
          goto LABEL_819;
        }
        CFDataGetBytePtr(v239);
        __memcpy_chk();
        LODWORD(valuePtr[1]) = 2048;
        DWORD2(v1027) = 2068;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v240 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v241 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v241) {
          return 4294963395;
        }
        CFNumberRef v242 = v241;
        CFDictionarySetValue(v6, @"CUSTOM_IE_FRAME_TYPE", v241);
        CFRelease(v242);
        CFNumberRef v243 = CFNumberCreate(v240, kCFNumberSInt32Type, (char *)valuePtr + 12);
        if (!v243) {
          return 4294963395;
        }
        CFNumberRef v244 = v243;
        CFDictionarySetValue(v6, @"CUSTOM_IE_SIG_LEN", v243);
        CFRelease(v244);
        CFDataRef v245 = CFDataCreate(v240, (const UInt8 *)&valuePtr[1] + 4, LODWORD(valuePtr[1]));
        if (!v245) {
          return 4294963395;
        }
        uint64_t v37 = v245;
        Boolean v101 = @"CUSTOM_IE_DATA";
        goto LABEL_736;
      case 97:
        memset(valuePtr, 0, 17);
        int v67 = 16;
LABEL_349:
        DWORD2(v1027) = v67;
        v1028 = (UInt8 *)valuePtr;
        if (!Apple80211IOCTLGetWrapper()) {
          goto LABEL_350;
        }
        goto LABEL_711;
      case 103:
        if (!v8) {
          goto LABEL_36;
        }
        bzero(valuePtr, 0x8D8uLL);
        WORD5(valuePtr[8]) = 2048;
        DWORD2(v1027) = 2264;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        uint64_t RoamProfile = _addScanResultToList(v5, (uint64_t)valuePtr, 0, 0, v6, 0, 0, 0, 0, 0, 1, 0);
        goto LABEL_355;
      case 106:
        valuePtr[0] = xmmword_210754A90;
        DWORD2(v1027) = 16;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v247 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v248 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v248) {
          goto LABEL_829;
        }
        CFNumberRef v249 = v248;
        CFDictionarySetValue(v6, @"RSSI_MIN", v248);
        CFRelease(v249);
        CFNumberRef v250 = CFNumberCreate(v247, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v250) {
          goto LABEL_829;
        }
        CFNumberRef v251 = v250;
        CFDictionarySetValue(v6, @"RSSI_MAX", v250);
        CFRelease(v251);
        CFNumberRef v252 = CFNumberCreate(v247, kCFNumberSInt32Type, (const void *)((unint64_t)valuePtr | 0xC));
        if (!v252) {
          goto LABEL_829;
        }
        uint64_t v37 = v252;
        Boolean v101 = @"RSSI_THRESHOLD";
        goto LABEL_736;
      case 115:
        bzero(valuePtr, 0x658uLL);
        DWORD2(v1027) = 1624;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        CFAllocatorRef v253 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v254 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v254) {
          goto LABEL_829;
        }
        CFNumberRef v255 = v254;
        CFDictionarySetValue(v6, @"INSTANT_ASSOCIATED_SLEEP_DURATION", v254);
        CFRelease(v255);
        CFNumberRef v256 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[39] + 4);
        if (!v256) {
          goto LABEL_829;
        }
        CFNumberRef v257 = v256;
        CFDictionarySetValue(v6, @"CACHED_ASSOCIATED_SLEEP_DURATION", v256);
        CFRelease(v257);
        CFNumberRef v258 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v258) {
          goto LABEL_829;
        }
        CFNumberRef v259 = v258;
        CFDictionarySetValue(v6, @"INSTANT_UNASSOCIATED_SLEEP_DURATION", v258);
        CFRelease(v259);
        CFNumberRef v260 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[39] + 8);
        if (!v260) {
          goto LABEL_829;
        }
        CFNumberRef v261 = v260;
        CFDictionarySetValue(v6, @"CACHED_UNASSOCIATED_SLEEP_DURATION", v260);
        CFRelease(v261);
        CFNumberRef v262 = CFNumberCreate(v253, kCFNumberSInt32Type, valuePtr);
        if (!v262) {
          goto LABEL_829;
        }
        CFNumberRef v263 = v262;
        CFDictionarySetValue(v6, @"INSTANT_TIME_STAMP", v262);
        CFRelease(v263);
        CFNumberRef v264 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[39]);
        if (!v264) {
          goto LABEL_829;
        }
        CFNumberRef v265 = v264;
        CFDictionarySetValue(v6, @"CACHED_TIME_STAMP", v264);
        CFRelease(v265);
        CFNumberRef v266 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[31] + 8);
        if (!v266) {
          goto LABEL_829;
        }
        CFNumberRef v267 = v266;
        CFDictionarySetValue(v6, @"INSTANT_TIME_STAMP_USEC", v266);
        CFRelease(v267);
        CFNumberRef v268 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[70] + 8);
        if (!v268) {
          goto LABEL_829;
        }
        CFNumberRef v269 = v268;
        CFDictionarySetValue(v6, @"CACHED_TIME_STAMP_USEC", v268);
        CFRelease(v269);
        CFNumberRef v270 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[4] + 12);
        if (!v270) {
          goto LABEL_829;
        }
        CFNumberRef v271 = v270;
        CFDictionarySetValue(v6, @"INSTANT_USER_SCAN_COUNT", v270);
        CFRelease(v271);
        CFNumberRef v272 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[43] + 12);
        if (!v272) {
          goto LABEL_829;
        }
        CFNumberRef v273 = v272;
        CFDictionarySetValue(v6, @"CACHED_USER_SCAN_COUNT", v272);
        CFRelease(v273);
        CFNumberRef v274 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[5]);
        if (!v274) {
          goto LABEL_829;
        }
        CFNumberRef v275 = v274;
        CFDictionarySetValue(v6, @"INSTANT_USER_SCAN_DURATION", v274);
        CFRelease(v275);
        CFNumberRef v276 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[44]);
        if (!v276) {
          goto LABEL_829;
        }
        CFNumberRef v277 = v276;
        CFDictionarySetValue(v6, @"CACHED_USER_SCAN_DURATION", v276);
        CFRelease(v277);
        CFNumberRef v278 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[5] + 4);
        if (!v278) {
          goto LABEL_829;
        }
        CFNumberRef v279 = v278;
        CFDictionarySetValue(v6, @"INSTANT_ASSOC_SCAN_COUNT", v278);
        CFRelease(v279);
        CFNumberRef v280 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[44] + 4);
        if (!v280) {
          goto LABEL_829;
        }
        CFNumberRef v281 = v280;
        CFDictionarySetValue(v6, @"CACHED_ASSOC_SCAN_COUNT", v280);
        CFRelease(v281);
        CFNumberRef v282 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[5] + 8);
        if (!v282) {
          goto LABEL_829;
        }
        CFNumberRef v283 = v282;
        CFDictionarySetValue(v6, @"INSTANT_ASSOC_SCAN_DURATION", v282);
        CFRelease(v283);
        CFNumberRef v284 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[44] + 8);
        if (!v284) {
          goto LABEL_829;
        }
        CFNumberRef v285 = v284;
        CFDictionarySetValue(v6, @"CACHED_ASSOC_SCAN_DURATION", v284);
        CFRelease(v285);
        CFNumberRef v286 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[5] + 12);
        if (!v286) {
          goto LABEL_829;
        }
        CFNumberRef v287 = v286;
        CFDictionarySetValue(v6, @"INSTANT_ROAM_SCAN_COUNT", v286);
        CFRelease(v287);
        CFNumberRef v288 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[44] + 12);
        if (!v288) {
          goto LABEL_829;
        }
        CFNumberRef v289 = v288;
        CFDictionarySetValue(v6, @"CACHED_ROAM_SCAN_COUNT", v288);
        CFRelease(v289);
        CFNumberRef v290 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[6]);
        if (!v290) {
          goto LABEL_829;
        }
        CFNumberRef v291 = v290;
        CFDictionarySetValue(v6, @"INSTANT_ROAM_SCAN_DURATION", v290);
        CFRelease(v291);
        CFNumberRef v292 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[45]);
        if (!v292) {
          goto LABEL_829;
        }
        CFNumberRef v293 = v292;
        CFDictionarySetValue(v6, @"CACHED_ROAM_SCAN_DURATION", v292);
        CFRelease(v293);
        CFNumberRef v294 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[6] + 4);
        if (!v294) {
          goto LABEL_829;
        }
        CFNumberRef v295 = v294;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_BSSID_COUNT", v294);
        CFRelease(v295);
        CFNumberRef v296 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[45] + 4);
        if (!v296) {
          goto LABEL_829;
        }
        CFNumberRef v297 = v296;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_BSSID_COUNT", v296);
        CFRelease(v297);
        CFNumberRef v298 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[6] + 8);
        if (!v298) {
          goto LABEL_829;
        }
        CFNumberRef v299 = v298;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_BSSID_DURATION", v298);
        CFRelease(v299);
        CFNumberRef v300 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[45] + 8);
        if (!v300) {
          goto LABEL_829;
        }
        CFNumberRef v301 = v300;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_BSSID_DURATION", v300);
        CFRelease(v301);
        CFNumberRef v302 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[6] + 12);
        if (!v302) {
          goto LABEL_829;
        }
        CFNumberRef v303 = v302;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_SSID_COUNT", v302);
        CFRelease(v303);
        CFNumberRef v304 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[45] + 12);
        if (!v304) {
          goto LABEL_829;
        }
        CFNumberRef v305 = v304;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_SSID_COUNT", v304);
        CFRelease(v305);
        CFNumberRef v306 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[7]);
        if (!v306) {
          goto LABEL_829;
        }
        CFNumberRef v307 = v306;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_SSID_DURATION", v306);
        CFRelease(v307);
        CFNumberRef v308 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[46]);
        if (!v308) {
          goto LABEL_829;
        }
        CFNumberRef v309 = v308;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_SSID_DURATION", v308);
        CFRelease(v309);
        CFNumberRef v310 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[7] + 4);
        if (!v310) {
          goto LABEL_829;
        }
        CFNumberRef v311 = v310;
        CFDictionarySetValue(v6, @"INSTANT_OTHER_SCAN_COUNT", v310);
        CFRelease(v311);
        CFNumberRef v312 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[46] + 4);
        if (!v312) {
          goto LABEL_829;
        }
        CFNumberRef v313 = v312;
        CFDictionarySetValue(v6, @"CACHED_OTHER_SCAN_COUNT", v312);
        CFRelease(v313);
        CFNumberRef v314 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[7] + 8);
        if (!v314) {
          goto LABEL_829;
        }
        CFNumberRef v315 = v314;
        CFDictionarySetValue(v6, @"INSTANT_OTHER_SCAN_DURATION", v314);
        CFRelease(v315);
        CFNumberRef v316 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[46] + 8);
        if (!v316) {
          goto LABEL_829;
        }
        CFNumberRef v317 = v316;
        CFDictionarySetValue(v6, @"CACHED_OTHER_SCAN_DURATION", v316);
        CFRelease(v317);
        CFNumberRef v318 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[34] + 8);
        if (!v318) {
          goto LABEL_829;
        }
        CFNumberRef v319 = v318;
        CFDictionarySetValue(v6, @"INSTANT_USER_SCAN_OFF_CHANNEL_DURATION", v318);
        CFRelease(v319);
        CFNumberRef v320 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[73] + 8);
        if (!v320) {
          goto LABEL_829;
        }
        CFNumberRef v321 = v320;
        CFDictionarySetValue(v6, @"CACHED_USER_SCAN_OFF_CHANNEL_DURATION", v320);
        CFRelease(v321);
        CFNumberRef v322 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[34] + 12);
        if (!v322) {
          goto LABEL_829;
        }
        CFNumberRef v323 = v322;
        CFDictionarySetValue(v6, @"INSTANT_ASSOC_SCAN_OFF_CHANNEL_DURATION", v322);
        CFRelease(v323);
        CFNumberRef v324 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[73] + 12);
        if (!v324) {
          goto LABEL_829;
        }
        CFNumberRef v325 = v324;
        CFDictionarySetValue(v6, @"CACHED_ASSOC_SCAN_OFF_CHANNEL_DURATION", v324);
        CFRelease(v325);
        CFNumberRef v326 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[35]);
        if (!v326) {
          goto LABEL_829;
        }
        CFNumberRef v327 = v326;
        CFDictionarySetValue(v6, @"INSTANT_ROAM_SCAN_OFF_CHANNEL_DURATION", v326);
        CFRelease(v327);
        CFNumberRef v328 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[74]);
        if (!v328) {
          goto LABEL_829;
        }
        CFNumberRef v329 = v328;
        CFDictionarySetValue(v6, @"CACHED_ROAM_SCAN_OFF_CHANNEL_DURATION", v328);
        CFRelease(v329);
        CFNumberRef v330 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[35] + 4);
        if (!v330) {
          goto LABEL_829;
        }
        CFNumberRef v331 = v330;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_BSSID_OFF_CHANNEL_DURATION", v330);
        CFRelease(v331);
        CFNumberRef v332 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[74] + 4);
        if (!v332) {
          goto LABEL_829;
        }
        CFNumberRef v333 = v332;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_BSSID_OFF_CHANNEL_DURATION", v332);
        CFRelease(v333);
        CFNumberRef v334 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[35] + 8);
        if (!v334) {
          goto LABEL_829;
        }
        CFNumberRef v335 = v334;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_SSID_OFF_CHANNEL_DURATION", v334);
        CFRelease(v335);
        CFNumberRef v336 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[74] + 8);
        if (!v336) {
          goto LABEL_829;
        }
        CFNumberRef v337 = v336;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_SSID_OFF_CHANNEL_DURATION", v336);
        CFRelease(v337);
        CFNumberRef v338 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[35] + 12);
        if (!v338) {
          goto LABEL_829;
        }
        CFNumberRef v339 = v338;
        CFDictionarySetValue(v6, @"INSTANT_OTHER_SCAN_OFF_CHANNEL_DURATION", v338);
        CFRelease(v339);
        CFNumberRef v340 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[74] + 12);
        if (!v340) {
          goto LABEL_829;
        }
        CFNumberRef v341 = v340;
        CFDictionarySetValue(v6, @"CACHED_OTHER_SCAN_OFF_CHANNEL_DURATION", v340);
        CFRelease(v341);
        CFNumberRef v342 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[2] + 8);
        if (!v342) {
          goto LABEL_829;
        }
        CFNumberRef v343 = v342;
        CFDictionarySetValue(v6, @"INSTANT_NUM_CONNECTIONS", v342);
        CFRelease(v343);
        CFNumberRef v344 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[41] + 8);
        if (!v344) {
          goto LABEL_829;
        }
        CFNumberRef v345 = v344;
        CFDictionarySetValue(v6, @"CACHED_NUM_CONNECTIONS", v344);
        CFRelease(v345);
        CFNumberRef v346 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[2] + 12);
        if (!v346) {
          goto LABEL_829;
        }
        CFNumberRef v347 = v346;
        CFDictionarySetValue(v6, @"INSTANT_CONNECT_TIME", v346);
        CFRelease(v347);
        CFNumberRef v348 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[41] + 12);
        if (!v348) {
          goto LABEL_829;
        }
        CFNumberRef v349 = v348;
        CFDictionarySetValue(v6, @"CACHED_CONNECT_TIME", v348);
        CFRelease(v349);
        CFNumberRef v350 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[3]);
        if (!v350) {
          goto LABEL_829;
        }
        CFNumberRef v351 = v350;
        CFDictionarySetValue(v6, @"INSTANT_TX_DURATION", v350);
        CFRelease(v351);
        CFNumberRef v352 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[42]);
        if (!v352) {
          goto LABEL_829;
        }
        CFNumberRef v353 = v352;
        CFDictionarySetValue(v6, @"CACHED_TX_DURATION", v352);
        CFRelease(v353);
        CFNumberRef v354 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[31] + 12);
        if (!v354) {
          goto LABEL_829;
        }
        CFNumberRef v355 = v354;
        CFDictionarySetValue(v6, @"INSTANT_TX_DURATION_USEC", v354);
        CFRelease(v355);
        CFNumberRef v356 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[70] + 12);
        if (!v356) {
          goto LABEL_829;
        }
        CFNumberRef v357 = v356;
        CFDictionarySetValue(v6, @"CACHED_TX_DURATION_USEC", v356);
        CFRelease(v357);
        CFNumberRef v358 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[3] + 4);
        if (!v358) {
          goto LABEL_829;
        }
        CFNumberRef v359 = v358;
        CFDictionarySetValue(v6, @"INSTANT_TX_COUNT", v358);
        CFRelease(v359);
        CFNumberRef v360 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[42] + 4);
        if (!v360) {
          goto LABEL_829;
        }
        CFNumberRef v361 = v360;
        CFDictionarySetValue(v6, @"CACHED_TX_COUNT", v360);
        CFRelease(v361);
        CFNumberRef v362 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[3] + 8);
        if (!v362) {
          goto LABEL_829;
        }
        CFNumberRef v363 = v362;
        CFDictionarySetValue(v6, @"INSTANT_RX_DURATION", v362);
        CFRelease(v363);
        CFNumberRef v364 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[42] + 8);
        if (!v364) {
          goto LABEL_829;
        }
        CFNumberRef v365 = v364;
        CFDictionarySetValue(v6, @"CACHED_RX_DURATION", v364);
        CFRelease(v365);
        CFNumberRef v366 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[32]);
        if (!v366) {
          goto LABEL_829;
        }
        CFNumberRef v367 = v366;
        CFDictionarySetValue(v6, @"INSTANT_RX_DURATION_USEC", v366);
        CFRelease(v367);
        CFNumberRef v368 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[71]);
        if (!v368) {
          goto LABEL_829;
        }
        CFNumberRef v369 = v368;
        CFDictionarySetValue(v6, @"CACHED_RX_DURATION_USEC", v368);
        CFRelease(v369);
        CFNumberRef v370 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[32] + 8);
        if (!v370) {
          goto LABEL_829;
        }
        CFNumberRef v371 = v370;
        CFDictionarySetValue(v6, @"INSTANT_RX_DURATION_BROADCAST", v370);
        CFRelease(v371);
        CFNumberRef v372 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[71] + 8);
        if (!v372) {
          goto LABEL_829;
        }
        CFNumberRef v373 = v372;
        CFDictionarySetValue(v6, @"CACHED_RX_DURATION_BROADCAST", v372);
        CFRelease(v373);
        CFNumberRef v374 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[32] + 12);
        if (!v374) {
          goto LABEL_829;
        }
        CFNumberRef v375 = v374;
        CFDictionarySetValue(v6, @"INSTANT_RX_DURATION_MULTICAST", v374);
        CFRelease(v375);
        CFNumberRef v376 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[71] + 12);
        if (!v376) {
          goto LABEL_829;
        }
        CFNumberRef v377 = v376;
        CFDictionarySetValue(v6, @"CACHED_RX_DURATION_MULTICAST", v376);
        CFRelease(v377);
        CFNumberRef v378 = CFNumberCreate(v253, kCFNumberSInt64Type, &valuePtr[33]);
        if (!v378) {
          goto LABEL_829;
        }
        CFNumberRef v379 = v378;
        CFDictionarySetValue(v6, @"INSTANT_RX_COUNT_MULTICAST_PKTS", v378);
        CFRelease(v379);
        CFNumberRef v380 = CFNumberCreate(v253, kCFNumberSInt64Type, &valuePtr[72]);
        if (!v380) {
          goto LABEL_829;
        }
        CFNumberRef v381 = v380;
        CFDictionarySetValue(v6, @"CACHED_RX_COUNT_MULTICAST_PKTS", v380);
        CFRelease(v381);
        CFNumberRef v382 = CFNumberCreate(v253, kCFNumberSInt64Type, (char *)&valuePtr[33] + 8);
        if (!v382) {
          goto LABEL_829;
        }
        CFNumberRef v383 = v382;
        CFDictionarySetValue(v6, @"INSTANT_RX_COUNT_MULTICAST_BYTES", v382);
        CFRelease(v383);
        CFNumberRef v384 = CFNumberCreate(v253, kCFNumberSInt64Type, (char *)&valuePtr[72] + 8);
        if (!v384) {
          goto LABEL_829;
        }
        CFNumberRef v385 = v384;
        CFDictionarySetValue(v6, @"CACHED_RX_COUNT_MULTICAST_BYTES", v384);
        CFRelease(v385);
        CFNumberRef v386 = CFNumberCreate(v253, kCFNumberSInt64Type, &valuePtr[34]);
        if (!v386) {
          goto LABEL_829;
        }
        CFNumberRef v387 = v386;
        CFDictionarySetValue(v6, @"INSTANT_RX_COUNT_MULTICAST_TOTAL", v386);
        CFRelease(v387);
        CFNumberRef v388 = CFNumberCreate(v253, kCFNumberSInt64Type, &valuePtr[73]);
        if (!v388) {
          goto LABEL_829;
        }
        CFNumberRef v389 = v388;
        CFDictionarySetValue(v6, @"CACHED_RX_COUNT_MULTICAST_TOTAL", v388);
        CFRelease(v389);
        CFNumberRef v390 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[3] + 12);
        if (!v390) {
          goto LABEL_829;
        }
        CFNumberRef v391 = v390;
        CFDictionarySetValue(v6, @"INSTANT_RX_COUNT", v390);
        CFRelease(v391);
        CFNumberRef v392 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[42] + 12);
        if (!v392) {
          goto LABEL_829;
        }
        CFNumberRef v393 = v392;
        CFDictionarySetValue(v6, @"CACHED_RX_COUNT", v392);
        CFRelease(v393);
        CFNumberRef v394 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[4]);
        if (!v394) {
          goto LABEL_829;
        }
        CFNumberRef v395 = v394;
        CFDictionarySetValue(v6, @"INSTANT_RX_SEARCH_DURATION", v394);
        CFRelease(v395);
        CFNumberRef v396 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[43]);
        if (!v396) {
          goto LABEL_829;
        }
        CFNumberRef v397 = v396;
        CFDictionarySetValue(v6, @"CACHED_RX_SEARCH_DURATION", v396);
        CFRelease(v397);
        CFNumberRef v398 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[4] + 4);
        if (!v398) {
          goto LABEL_829;
        }
        CFNumberRef v399 = v398;
        CFDictionarySetValue(v6, @"INSTANT_RX_SEARCH_COUNT", v398);
        CFRelease(v399);
        CFNumberRef v400 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[43] + 4);
        if (!v400) {
          goto LABEL_829;
        }
        CFNumberRef v401 = v400;
        CFDictionarySetValue(v6, @"CACHED_RX_SEARCH_COUNT", v400);
        CFRelease(v401);
        CFNumberRef v402 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[4] + 8);
        if (!v402) {
          goto LABEL_829;
        }
        CFNumberRef v403 = v402;
        CFDictionarySetValue(v6, @"INSTANT_MAC_ACTIVE_TIME", v402);
        CFRelease(v403);
        CFNumberRef v404 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[43] + 8);
        if (!v404) {
          goto LABEL_829;
        }
        CFNumberRef v405 = v404;
        CFDictionarySetValue(v6, @"CACHED_MAC_ACTIVE_TIME", v404);
        CFRelease(v405);
        CFNumberRef v406 = CFNumberCreate(v253, kCFNumberSInt64Type, (char *)&valuePtr[26] + 8);
        if (!v406) {
          goto LABEL_829;
        }
        CFNumberRef v407 = v406;
        CFDictionarySetValue(v6, @"INSTANT_LPRX_SEARCH_DURATION", v406);
        CFRelease(v407);
        CFNumberRef v408 = CFNumberCreate(v253, kCFNumberSInt64Type, (char *)&valuePtr[65] + 8);
        if (!v408) {
          goto LABEL_829;
        }
        CFNumberRef v409 = v408;
        CFDictionarySetValue(v6, @"CACHED_LPRX_SEARCH_DURATION", v408);
        CFRelease(v409);
        CFNumberRef v410 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[27]);
        if (!v410) {
          goto LABEL_829;
        }
        CFNumberRef v411 = v410;
        CFDictionarySetValue(v6, @"INSTANT_LPRX_SEARCH_COUNT", v410);
        CFRelease(v411);
        CFNumberRef v412 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[66]);
        if (!v412) {
          goto LABEL_829;
        }
        CFNumberRef v413 = v412;
        CFDictionarySetValue(v6, @"CACHED_LPRX_SEARCH_COUNT", v412);
        CFRelease(v413);
        CFNumberRef v414 = CFNumberCreate(v253, kCFNumberSInt64Type, (char *)&valuePtr[27] + 8);
        if (!v414) {
          goto LABEL_829;
        }
        CFNumberRef v415 = v414;
        CFDictionarySetValue(v6, @"INSTANT_LPRX_ACTIVE_DURATION", v414);
        CFRelease(v415);
        CFNumberRef v416 = CFNumberCreate(v253, kCFNumberSInt64Type, (char *)&valuePtr[66] + 8);
        if (!v416) {
          goto LABEL_829;
        }
        CFNumberRef v417 = v416;
        CFDictionarySetValue(v6, @"CACHED_LPRX_ACTIVE_DURATION", v416);
        CFRelease(v417);
        CFNumberRef v418 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[28]);
        if (!v418) {
          goto LABEL_829;
        }
        CFNumberRef v419 = v418;
        CFDictionarySetValue(v6, @"INSTANT_LPRX_ACTIVE_COUNT", v418);
        CFRelease(v419);
        CFNumberRef v420 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[67]);
        if (!v420) {
          goto LABEL_829;
        }
        CFNumberRef v421 = v420;
        CFDictionarySetValue(v6, @"CACHED_LPRX_ACTIVE_COUNT", v420);
        CFRelease(v421);
        CFNumberRef v422 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[7] + 12);
        if (!v422) {
          goto LABEL_829;
        }
        CFNumberRef v423 = v422;
        CFDictionarySetValue(v6, @"INSTANT_USER_SCAN_COUNT_5G", v422);
        CFRelease(v423);
        CFNumberRef v424 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[46] + 12);
        if (!v424) {
          goto LABEL_829;
        }
        CFNumberRef v425 = v424;
        CFDictionarySetValue(v6, @"CACHED_USER_SCAN_COUNT_5G", v424);
        CFRelease(v425);
        CFNumberRef v426 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[8]);
        if (!v426) {
          goto LABEL_829;
        }
        CFNumberRef v427 = v426;
        CFDictionarySetValue(v6, @"INSTANT_USER_SCAN_DURATION_5G", v426);
        CFRelease(v427);
        CFNumberRef v428 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[47]);
        if (!v428) {
          goto LABEL_829;
        }
        CFNumberRef v429 = v428;
        CFDictionarySetValue(v6, @"CACHED_USER_SCAN_DURATION_5G", v428);
        CFRelease(v429);
        CFNumberRef v430 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[8] + 4);
        if (!v430) {
          goto LABEL_829;
        }
        CFNumberRef v431 = v430;
        CFDictionarySetValue(v6, @"INSTANT_ASSOC_SCAN_COUNT_5G", v430);
        CFRelease(v431);
        CFNumberRef v432 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[47] + 4);
        if (!v432) {
          goto LABEL_829;
        }
        CFNumberRef v433 = v432;
        CFDictionarySetValue(v6, @"CACHED_ASSOC_SCAN_COUNT_5G", v432);
        CFRelease(v433);
        CFNumberRef v434 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[8] + 8);
        if (!v434) {
          goto LABEL_829;
        }
        CFNumberRef v435 = v434;
        CFDictionarySetValue(v6, @"INSTANT_ASSOC_SCAN_DURATION_5G", v434);
        CFRelease(v435);
        CFNumberRef v436 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[47] + 8);
        if (!v436) {
          goto LABEL_829;
        }
        CFNumberRef v437 = v436;
        CFDictionarySetValue(v6, @"CACHED_ASSOC_SCAN_DURATION_5G", v436);
        CFRelease(v437);
        CFNumberRef v438 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[8] + 12);
        if (!v438) {
          goto LABEL_829;
        }
        CFNumberRef v439 = v438;
        CFDictionarySetValue(v6, @"INSTANT_ROAM_SCAN_COUNT_5G", v438);
        CFRelease(v439);
        CFNumberRef v440 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[47] + 12);
        if (!v440) {
          goto LABEL_829;
        }
        CFNumberRef v441 = v440;
        CFDictionarySetValue(v6, @"CACHED_ROAM_SCAN_COUNT_5G", v440);
        CFRelease(v441);
        CFNumberRef v442 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[9]);
        if (!v442) {
          goto LABEL_829;
        }
        CFNumberRef v443 = v442;
        CFDictionarySetValue(v6, @"INSTANT_ROAM_SCAN_DURATION_5G", v442);
        CFRelease(v443);
        CFNumberRef v444 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[48]);
        if (!v444) {
          goto LABEL_829;
        }
        CFNumberRef v445 = v444;
        CFDictionarySetValue(v6, @"CACHED_ROAM_SCAN_DURATION_5G", v444);
        CFRelease(v445);
        CFNumberRef v446 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[9] + 4);
        if (!v446) {
          goto LABEL_829;
        }
        CFNumberRef v447 = v446;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_BSSID_COUNT_5G", v446);
        CFRelease(v447);
        CFNumberRef v448 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[48] + 4);
        if (!v448) {
          goto LABEL_829;
        }
        CFNumberRef v449 = v448;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_BSSID_COUNT_5G", v448);
        CFRelease(v449);
        CFNumberRef v450 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[9] + 8);
        if (!v450) {
          goto LABEL_829;
        }
        CFNumberRef v451 = v450;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_BSSID_DURATION_5G", v450);
        CFRelease(v451);
        CFNumberRef v452 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[48] + 8);
        if (!v452) {
          goto LABEL_829;
        }
        CFNumberRef v453 = v452;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_BSSID_DURATION_5G", v452);
        CFRelease(v453);
        CFNumberRef v454 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[9] + 12);
        if (!v454) {
          goto LABEL_829;
        }
        CFNumberRef v455 = v454;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_SSID_COUNT_5G", v454);
        CFRelease(v455);
        CFNumberRef v456 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[48] + 12);
        if (!v456) {
          goto LABEL_829;
        }
        CFNumberRef v457 = v456;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_SSID_COUNT_5G", v456);
        CFRelease(v457);
        CFNumberRef v458 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[10]);
        if (!v458) {
          goto LABEL_829;
        }
        CFNumberRef v459 = v458;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_SSID_DURATION_5G", v458);
        CFRelease(v459);
        CFNumberRef v460 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[49]);
        if (!v460) {
          goto LABEL_829;
        }
        CFNumberRef v461 = v460;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_SSID_DURATION_5G", v460);
        CFRelease(v461);
        CFNumberRef v462 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[10] + 4);
        if (!v462) {
          goto LABEL_829;
        }
        CFNumberRef v463 = v462;
        CFDictionarySetValue(v6, @"INSTANT_OTHER_SCAN_COUNT_5G", v462);
        CFRelease(v463);
        CFNumberRef v464 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[49] + 4);
        if (!v464) {
          goto LABEL_829;
        }
        CFNumberRef v465 = v464;
        CFDictionarySetValue(v6, @"CACHED_OTHER_SCAN_COUNT_5G", v464);
        CFRelease(v465);
        CFNumberRef v466 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[10] + 8);
        if (!v466) {
          goto LABEL_829;
        }
        CFNumberRef v467 = v466;
        CFDictionarySetValue(v6, @"INSTANT_OTHER_SCAN_DURATION_5G", v466);
        CFRelease(v467);
        CFNumberRef v468 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[49] + 8);
        if (!v468) {
          goto LABEL_829;
        }
        CFNumberRef v469 = v468;
        CFDictionarySetValue(v6, @"CACHED_OTHER_SCAN_DURATION_5G", v468);
        CFRelease(v469);
        CFNumberRef v470 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[36]);
        if (!v470) {
          goto LABEL_829;
        }
        CFNumberRef v471 = v470;
        CFDictionarySetValue(v6, @"INSTANT_USER_SCAN_OFF_5G_INFRA_CH_DUR_5G", v470);
        CFRelease(v471);
        CFNumberRef v472 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[75]);
        if (!v472) {
          goto LABEL_829;
        }
        CFNumberRef v473 = v472;
        CFDictionarySetValue(v6, @"CACHED_USER_SCAN_OFF_5G_INFRA_CH_DUR_5G", v472);
        CFRelease(v473);
        CFNumberRef v474 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[36] + 4);
        if (!v474) {
          goto LABEL_829;
        }
        CFNumberRef v475 = v474;
        CFDictionarySetValue(v6, @"INSTANT_ASSOC_SCAN_OFF_5G_INFRA_CH_DUR_5G", v474);
        CFRelease(v475);
        CFNumberRef v476 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[75] + 4);
        if (!v476) {
          goto LABEL_829;
        }
        CFNumberRef v477 = v476;
        CFDictionarySetValue(v6, @"CACHED_ASSOC_SCAN_OFF_5G_INFRA_CH_DUR_5G", v476);
        CFRelease(v477);
        CFNumberRef v478 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[36] + 8);
        if (!v478) {
          goto LABEL_829;
        }
        CFNumberRef v479 = v478;
        CFDictionarySetValue(v6, @"INSTANT_ROAM_SCAN_OFF_5G_INFRA_CH_DUR_5G", v478);
        CFRelease(v479);
        CFNumberRef v480 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[75] + 8);
        if (!v480) {
          goto LABEL_829;
        }
        CFNumberRef v481 = v480;
        CFDictionarySetValue(v6, @"CACHED_ROAM_SCAN_OFF_5G_INFRA_CH_DUR_5G", v480);
        CFRelease(v481);
        CFNumberRef v482 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[36] + 12);
        if (!v482) {
          goto LABEL_829;
        }
        CFNumberRef v483 = v482;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_BSSID_OFF_5G_INFRA_CH_DUR_5G", v482);
        CFRelease(v483);
        CFNumberRef v484 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[75] + 12);
        if (!v484) {
          goto LABEL_829;
        }
        CFNumberRef v485 = v484;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_BSSID_OFF_5G_INFRA_CH_DUR_5G", v484);
        CFRelease(v485);
        CFNumberRef v486 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[37]);
        if (!v486) {
          goto LABEL_829;
        }
        CFNumberRef v487 = v486;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_SSID_OFF_5G_INFRA_CH_DUR_5G", v486);
        CFRelease(v487);
        CFNumberRef v488 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[76]);
        if (!v488) {
          goto LABEL_829;
        }
        CFNumberRef v489 = v488;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_SSID_OFF_5G_INFRA_CH_DUR_5G", v488);
        CFRelease(v489);
        CFNumberRef v490 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[37] + 4);
        if (!v490) {
          goto LABEL_829;
        }
        CFNumberRef v491 = v490;
        CFDictionarySetValue(v6, @"INSTANT_OTHER_SCAN_OFF_5G_INFRA_CH_DUR_5G", v490);
        CFRelease(v491);
        CFNumberRef v492 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[76] + 4);
        if (!v492) {
          goto LABEL_829;
        }
        CFNumberRef v493 = v492;
        CFDictionarySetValue(v6, @"CACHED_OTHER_SCAN_OFF_5G_INFRA_CH_DUR_5G", v492);
        CFRelease(v493);
        CFNumberRef v494 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[10] + 12);
        if (!v494) {
          goto LABEL_829;
        }
        CFNumberRef v495 = v494;
        CFDictionarySetValue(v6, @"INSTANT_USER_SCAN_COUNT_2G", v494);
        CFRelease(v495);
        CFNumberRef v496 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[49] + 12);
        if (!v496) {
          goto LABEL_829;
        }
        CFNumberRef v497 = v496;
        CFDictionarySetValue(v6, @"CACHED_USER_SCAN_COUNT_2G", v496);
        CFRelease(v497);
        CFNumberRef v498 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[11]);
        if (!v498) {
          goto LABEL_829;
        }
        CFNumberRef v499 = v498;
        CFDictionarySetValue(v6, @"INSTANT_USER_SCAN_DURATION_2G", v498);
        CFRelease(v499);
        CFNumberRef v500 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[50]);
        if (!v500) {
          goto LABEL_829;
        }
        CFNumberRef v501 = v500;
        CFDictionarySetValue(v6, @"CACHED_USER_SCAN_DURATION_2G", v500);
        CFRelease(v501);
        CFNumberRef v502 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[11] + 4);
        if (!v502) {
          goto LABEL_829;
        }
        CFNumberRef v503 = v502;
        CFDictionarySetValue(v6, @"INSTANT_ASSOC_SCAN_COUNT_2G", v502);
        CFRelease(v503);
        CFNumberRef v504 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[50] + 4);
        if (!v504) {
          goto LABEL_829;
        }
        CFNumberRef v505 = v504;
        CFDictionarySetValue(v6, @"CACHED_ASSOC_SCAN_COUNT_2G", v504);
        CFRelease(v505);
        CFNumberRef v506 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[11] + 8);
        if (!v506) {
          goto LABEL_829;
        }
        CFNumberRef v507 = v506;
        CFDictionarySetValue(v6, @"INSTANT_ASSOC_SCAN_DURATION_2G", v506);
        CFRelease(v507);
        CFNumberRef v508 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[50] + 8);
        if (!v508) {
          goto LABEL_829;
        }
        CFNumberRef v509 = v508;
        CFDictionarySetValue(v6, @"CACHED_ASSOC_SCAN_DURATION_2G", v508);
        CFRelease(v509);
        CFNumberRef v510 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[11] + 12);
        if (!v510) {
          goto LABEL_829;
        }
        CFNumberRef v511 = v510;
        CFDictionarySetValue(v6, @"INSTANT_ROAM_SCAN_COUNT_2G", v510);
        CFRelease(v511);
        CFNumberRef v512 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[50] + 12);
        if (!v512) {
          goto LABEL_829;
        }
        CFNumberRef v513 = v512;
        CFDictionarySetValue(v6, @"CACHED_ROAM_SCAN_COUNT_2G", v512);
        CFRelease(v513);
        CFNumberRef v514 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[12]);
        if (!v514) {
          goto LABEL_829;
        }
        CFNumberRef v515 = v514;
        CFDictionarySetValue(v6, @"INSTANT_ROAM_SCAN_DURATION_2G", v514);
        CFRelease(v515);
        CFNumberRef v516 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[51]);
        if (!v516) {
          goto LABEL_829;
        }
        CFNumberRef v517 = v516;
        CFDictionarySetValue(v6, @"CACHED_ROAM_SCAN_DURATION_2G", v516);
        CFRelease(v517);
        CFNumberRef v518 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[12] + 4);
        if (!v518) {
          goto LABEL_829;
        }
        CFNumberRef v519 = v518;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_BSSID_COUNT_2G", v518);
        CFRelease(v519);
        CFNumberRef v520 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[51] + 4);
        if (!v520) {
          goto LABEL_829;
        }
        CFNumberRef v521 = v520;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_BSSID_COUNT_2G", v520);
        CFRelease(v521);
        CFNumberRef v522 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[12] + 8);
        if (!v522) {
          goto LABEL_829;
        }
        CFNumberRef v523 = v522;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_BSSID_DURATION_2G", v522);
        CFRelease(v523);
        CFNumberRef v524 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[51] + 8);
        if (!v524) {
          goto LABEL_829;
        }
        CFNumberRef v525 = v524;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_BSSID_DURATION_2G", v524);
        CFRelease(v525);
        CFNumberRef v526 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[12] + 12);
        if (!v526) {
          goto LABEL_829;
        }
        CFNumberRef v527 = v526;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_SSID_COUNT_2G", v526);
        CFRelease(v527);
        CFNumberRef v528 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[51] + 12);
        if (!v528) {
          goto LABEL_829;
        }
        CFNumberRef v529 = v528;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_SSID_COUNT_2G", v528);
        CFRelease(v529);
        CFNumberRef v530 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[13]);
        if (!v530) {
          goto LABEL_829;
        }
        CFNumberRef v531 = v530;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_SSID_DURATION_2G", v530);
        CFRelease(v531);
        CFNumberRef v532 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[52]);
        if (!v532) {
          goto LABEL_829;
        }
        CFNumberRef v533 = v532;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_SSID_DURATION_2G", v532);
        CFRelease(v533);
        CFNumberRef v534 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[13] + 4);
        if (!v534) {
          goto LABEL_829;
        }
        CFNumberRef v535 = v534;
        CFDictionarySetValue(v6, @"INSTANT_OTHER_SCAN_COUNT_2G", v534);
        CFRelease(v535);
        CFNumberRef v536 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[52] + 4);
        if (!v536) {
          goto LABEL_829;
        }
        CFNumberRef v537 = v536;
        CFDictionarySetValue(v6, @"CACHED_OTHER_SCAN_COUNT_2G", v536);
        CFRelease(v537);
        CFNumberRef v538 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[13] + 8);
        if (!v538) {
          goto LABEL_829;
        }
        CFNumberRef v539 = v538;
        CFDictionarySetValue(v6, @"INSTANT_OTHER_SCAN_DURATION_2G", v538);
        CFRelease(v539);
        CFNumberRef v540 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[52] + 8);
        if (!v540) {
          goto LABEL_829;
        }
        CFNumberRef v541 = v540;
        CFDictionarySetValue(v6, @"CACHED_OTHER_SCAN_DURATION_2G", v540);
        CFRelease(v541);
        CFNumberRef v542 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[37] + 8);
        if (!v542) {
          goto LABEL_829;
        }
        CFNumberRef v543 = v542;
        CFDictionarySetValue(v6, @"INSTANT_USER_SCAN_OFF_2G_INFRA_CH_DUR_2G", v542);
        CFRelease(v543);
        CFNumberRef v544 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[76] + 8);
        if (!v544) {
          goto LABEL_829;
        }
        CFNumberRef v545 = v544;
        CFDictionarySetValue(v6, @"CACHED_USER_SCAN_OFF_2G_INFRA_CH_DUR_2G", v544);
        CFRelease(v545);
        CFNumberRef v546 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[37] + 12);
        if (!v546) {
          goto LABEL_829;
        }
        CFNumberRef v547 = v546;
        CFDictionarySetValue(v6, @"INSTANT_ASSOC_SCAN_OFF_2G_INFRA_CH_DUR_2G", v546);
        CFRelease(v547);
        CFNumberRef v548 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[76] + 12);
        if (!v548) {
          goto LABEL_829;
        }
        CFNumberRef v549 = v548;
        CFDictionarySetValue(v6, @"CACHED_ASSOC_SCAN_OFF_2G_INFRA_CH_DUR_2G", v548);
        CFRelease(v549);
        CFNumberRef v550 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[38]);
        if (!v550) {
          goto LABEL_829;
        }
        CFNumberRef v551 = v550;
        CFDictionarySetValue(v6, @"INSTANT_ROAM_SCAN_OFF_2G_INFRA_CH_DUR_2G", v550);
        CFRelease(v551);
        CFNumberRef v552 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[77]);
        if (!v552) {
          goto LABEL_829;
        }
        CFNumberRef v553 = v552;
        CFDictionarySetValue(v6, @"CACHED_ROAM_SCAN_OFF_2G_INFRA_CH_DUR_2G", v552);
        CFRelease(v553);
        CFNumberRef v554 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[38] + 4);
        if (!v554) {
          goto LABEL_829;
        }
        CFNumberRef v555 = v554;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_BSSID_OFF_2G_INFRA_CH_DUR_2G", v554);
        CFRelease(v555);
        CFNumberRef v556 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[77] + 4);
        if (!v556) {
          goto LABEL_829;
        }
        CFNumberRef v557 = v556;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_BSSID_OFF_2G_INFRA_CH_DUR_2G", v556);
        CFRelease(v557);
        CFNumberRef v558 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[38] + 8);
        if (!v558) {
          goto LABEL_829;
        }
        CFNumberRef v559 = v558;
        CFDictionarySetValue(v6, @"INSTANT_PNO_SCAN_SSID_OFF_2G_INFRA_CH_DUR_2G", v558);
        CFRelease(v559);
        CFNumberRef v560 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[77] + 8);
        if (!v560) {
          goto LABEL_829;
        }
        CFNumberRef v561 = v560;
        CFDictionarySetValue(v6, @"CACHED_PNO_SCAN_SSID_OFF_2G_INFRA_CH_DUR_2G", v560);
        CFRelease(v561);
        CFNumberRef v562 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[38] + 12);
        if (!v562) {
          goto LABEL_829;
        }
        CFNumberRef v563 = v562;
        CFDictionarySetValue(v6, @"INSTANT_OTHER_SCAN_OFF_2G_INFRA_CH_DUR_2G", v562);
        CFRelease(v563);
        CFNumberRef v564 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[77] + 12);
        if (!v564) {
          goto LABEL_829;
        }
        CFNumberRef v565 = v564;
        CFDictionarySetValue(v6, @"CACHED_OTHER_SCAN_OFF_2G_INFRA_CH_DUR_2G", v564);
        CFRelease(v565);
        CFNumberRef v566 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[13] + 12);
        if (!v566) {
          goto LABEL_829;
        }
        CFNumberRef v567 = v566;
        CFDictionarySetValue(v6, @"INSTANT_DFS_PASSIVE_TO_ACTIVE_COUNT", v566);
        CFRelease(v567);
        CFNumberRef v568 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[52] + 12);
        if (!v568) {
          goto LABEL_829;
        }
        CFNumberRef v569 = v568;
        CFDictionarySetValue(v6, @"CACHED_DFS_PASSIVE_TO_ACTIVE_COUNT", v568);
        CFRelease(v569);
        CFNumberRef v570 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[14]);
        if (!v570) {
          goto LABEL_829;
        }
        CFNumberRef v571 = v570;
        CFDictionarySetValue(v6, @"INSTANT_AWDL_TX_DUR", v570);
        CFRelease(v571);
        CFNumberRef v572 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[53]);
        if (!v572) {
          goto LABEL_829;
        }
        CFNumberRef v573 = v572;
        CFDictionarySetValue(v6, @"CACHED_AWDL_TX_DUR", v572);
        CFRelease(v573);
        CFNumberRef v574 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[14] + 4);
        if (!v574) {
          goto LABEL_829;
        }
        CFNumberRef v575 = v574;
        CFDictionarySetValue(v6, @"INSTANT_AWDL_RX_DUR", v574);
        CFRelease(v575);
        CFNumberRef v576 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[53] + 4);
        if (!v576) {
          goto LABEL_829;
        }
        CFNumberRef v577 = v576;
        CFDictionarySetValue(v6, @"CACHED_AWDL_RX_DUR", v576);
        CFRelease(v577);
        CFNumberRef v578 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[14] + 8);
        if (!v578) {
          goto LABEL_829;
        }
        CFNumberRef v579 = v578;
        CFDictionarySetValue(v6, @"INSTANT_AWDL_AW_DUR", v578);
        CFRelease(v579);
        CFNumberRef v580 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[53] + 8);
        if (!v580) {
          goto LABEL_829;
        }
        CFNumberRef v581 = v580;
        CFDictionarySetValue(v6, @"CACHED_AWDL_AW_DUR", v580);
        CFRelease(v581);
        CFNumberRef v582 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[14] + 12);
        if (!v582) {
          goto LABEL_829;
        }
        CFNumberRef v583 = v582;
        CFDictionarySetValue(v6, @"INSTANT_AWDL_PSCANS_DUR", v582);
        CFRelease(v583);
        CFNumberRef v584 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[53] + 12);
        if (!v584) {
          goto LABEL_829;
        }
        CFNumberRef v585 = v584;
        CFDictionarySetValue(v6, @"CACHED_AWDL_PSCANS_DUR", v584);
        CFRelease(v585);
        CFNumberRef v586 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[15]);
        if (!v586) {
          goto LABEL_829;
        }
        CFNumberRef v587 = v586;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_D3_SUSPEND_CT ", v586);
        CFRelease(v587);
        CFNumberRef v588 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[54]);
        if (!v588) {
          goto LABEL_829;
        }
        CFNumberRef v589 = v588;
        CFDictionarySetValue(v6, @"CACHED_PCIE_D3_SUSPEND_CT ", v588);
        CFRelease(v589);
        CFNumberRef v590 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[15] + 4);
        if (!v590) {
          goto LABEL_829;
        }
        CFNumberRef v591 = v590;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_D0_RESUME_CT", v590);
        CFRelease(v591);
        CFNumberRef v592 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[54] + 4);
        if (!v592) {
          goto LABEL_829;
        }
        CFNumberRef v593 = v592;
        CFDictionarySetValue(v6, @"CACHED_PCIE_D0_RESUME_CT", v592);
        CFRelease(v593);
        CFNumberRef v594 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[15] + 8);
        if (!v594) {
          goto LABEL_829;
        }
        CFNumberRef v595 = v594;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_PERST_ASSRT_CT", v594);
        CFRelease(v595);
        CFNumberRef v596 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[54] + 8);
        if (!v596) {
          goto LABEL_829;
        }
        CFNumberRef v597 = v596;
        CFDictionarySetValue(v6, @"CACHED_PCIE_PERST_ASSRT_CT", v596);
        CFRelease(v597);
        CFNumberRef v598 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[15] + 12);
        if (!v598) {
          goto LABEL_829;
        }
        CFNumberRef v599 = v598;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_PERST_DEASSRT_CT ", v598);
        CFRelease(v599);
        CFNumberRef v600 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[54] + 12);
        if (!v600) {
          goto LABEL_829;
        }
        CFNumberRef v601 = v600;
        CFDictionarySetValue(v6, @"CACHED_PCIE_PERST_DEASSRT_CT ", v600);
        CFRelease(v601);
        CFNumberRef v602 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[16]);
        if (!v602) {
          goto LABEL_829;
        }
        CFNumberRef v603 = v602;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_ACTIVE_DUR", v602);
        CFRelease(v603);
        CFNumberRef v604 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[55]);
        if (!v604) {
          goto LABEL_829;
        }
        CFNumberRef v605 = v604;
        CFDictionarySetValue(v6, @"CACHED_PCIE_ACTIVE_DUR", v604);
        CFRelease(v605);
        CFNumberRef v606 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[16] + 4);
        if (!v606) {
          goto LABEL_829;
        }
        CFNumberRef v607 = v606;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_D3_SUSPEND_DUR ", v606);
        CFRelease(v607);
        CFNumberRef v608 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[55] + 4);
        if (!v608) {
          goto LABEL_829;
        }
        CFNumberRef v609 = v608;
        CFDictionarySetValue(v6, @"CACHED_PCIE_D3_SUSPEND_DUR ", v608);
        CFRelease(v609);
        CFNumberRef v610 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[16] + 8);
        if (!v610) {
          goto LABEL_829;
        }
        CFNumberRef v611 = v610;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_PERST_DUR", v610);
        CFRelease(v611);
        CFNumberRef v612 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[55] + 8);
        if (!v612) {
          goto LABEL_829;
        }
        CFNumberRef v613 = v612;
        CFDictionarySetValue(v6, @"CACHED_PCIE_PERST_DUR", v612);
        CFRelease(v613);
        CFNumberRef v614 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[16] + 12);
        if (!v614) {
          goto LABEL_829;
        }
        CFNumberRef v615 = v614;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_L0_CT", v614);
        CFRelease(v615);
        CFNumberRef v616 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[55] + 12);
        if (!v616) {
          goto LABEL_829;
        }
        CFNumberRef v617 = v616;
        CFDictionarySetValue(v6, @"CACHED_PCIE_L0_CT", v616);
        CFRelease(v617);
        CFNumberRef v618 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[17]);
        if (!v618) {
          goto LABEL_829;
        }
        CFNumberRef v619 = v618;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_L0_DUR", v618);
        CFRelease(v619);
        CFNumberRef v620 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[56]);
        if (!v620) {
          goto LABEL_829;
        }
        CFNumberRef v621 = v620;
        CFDictionarySetValue(v6, @"CACHED_PCIE_L0_DUR", v620);
        CFRelease(v621);
        CFNumberRef v622 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[17] + 4);
        if (!v622) {
          goto LABEL_829;
        }
        CFNumberRef v623 = v622;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_L1_CT", v622);
        CFRelease(v623);
        CFNumberRef v624 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[56] + 4);
        if (!v624) {
          goto LABEL_829;
        }
        CFNumberRef v625 = v624;
        CFDictionarySetValue(v6, @"CACHED_PCIE_L1_CT", v624);
        CFRelease(v625);
        CFNumberRef v626 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[17] + 8);
        if (!v626) {
          goto LABEL_829;
        }
        CFNumberRef v627 = v626;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_L1_DUR", v626);
        CFRelease(v627);
        CFNumberRef v628 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[56] + 8);
        if (!v628) {
          goto LABEL_829;
        }
        CFNumberRef v629 = v628;
        CFDictionarySetValue(v6, @"CACHED_PCIE_L1_DUR", v628);
        CFRelease(v629);
        CFNumberRef v630 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[17] + 12);
        if (!v630) {
          goto LABEL_829;
        }
        CFNumberRef v631 = v630;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_L1_1_CT", v630);
        CFRelease(v631);
        CFNumberRef v632 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[56] + 12);
        if (!v632) {
          goto LABEL_829;
        }
        CFNumberRef v633 = v632;
        CFDictionarySetValue(v6, @"CACHED_PCIE_L1_1_CT", v632);
        CFRelease(v633);
        CFNumberRef v634 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[18]);
        if (!v634) {
          goto LABEL_829;
        }
        CFNumberRef v635 = v634;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_L1_1_DUR", v634);
        CFRelease(v635);
        CFNumberRef v636 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[57]);
        if (!v636) {
          goto LABEL_829;
        }
        CFNumberRef v637 = v636;
        CFDictionarySetValue(v6, @"CACHED_PCIE_L1_1_DUR", v636);
        CFRelease(v637);
        CFNumberRef v638 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[18] + 4);
        if (!v638) {
          goto LABEL_829;
        }
        CFNumberRef v639 = v638;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_L1_2_CT", v638);
        CFRelease(v639);
        CFNumberRef v640 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[57] + 4);
        if (!v640) {
          goto LABEL_829;
        }
        CFNumberRef v641 = v640;
        CFDictionarySetValue(v6, @"CACHED_PCIE_L1_2_CT", v640);
        CFRelease(v641);
        CFNumberRef v642 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[18] + 8);
        if (!v642) {
          goto LABEL_829;
        }
        CFNumberRef v643 = v642;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_L1_2_DUR", v642);
        CFRelease(v643);
        CFNumberRef v644 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[57] + 8);
        if (!v644) {
          goto LABEL_829;
        }
        CFNumberRef v645 = v644;
        CFDictionarySetValue(v6, @"CACHED_PCIE_L1_2_DUR", v644);
        CFRelease(v645);
        CFNumberRef v646 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[18] + 12);
        if (!v646) {
          goto LABEL_829;
        }
        CFNumberRef v647 = v646;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_L2_CT", v646);
        CFRelease(v647);
        CFNumberRef v648 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[57] + 12);
        if (!v648) {
          goto LABEL_829;
        }
        CFNumberRef v649 = v648;
        CFDictionarySetValue(v6, @"CACHED_PCIE_L2_CT", v648);
        CFRelease(v649);
        CFNumberRef v650 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[19]);
        if (!v650) {
          goto LABEL_829;
        }
        CFNumberRef v651 = v650;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_L2_DUR", v650);
        CFRelease(v651);
        CFNumberRef v652 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[58]);
        if (!v652) {
          goto LABEL_829;
        }
        CFNumberRef v653 = v652;
        CFDictionarySetValue(v6, @"CACHED_PCIE_L2_DUR", v652);
        CFRelease(v653);
        CFNumberRef v654 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[19] + 4);
        if (!v654) {
          goto LABEL_829;
        }
        CFNumberRef v655 = v654;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_DEEPSLEEP_CT", v654);
        CFRelease(v655);
        CFNumberRef v656 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[58] + 4);
        if (!v656) {
          goto LABEL_829;
        }
        CFNumberRef v657 = v656;
        CFDictionarySetValue(v6, @"CACHED_PCIE_DEEPSLEEP_CT", v656);
        CFRelease(v657);
        CFNumberRef v658 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[19] + 8);
        if (!v658) {
          goto LABEL_829;
        }
        CFNumberRef v659 = v658;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_DEEPSLEEP_DUR", v658);
        CFRelease(v659);
        CFNumberRef v660 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[58] + 8);
        if (!v660) {
          goto LABEL_829;
        }
        CFNumberRef v661 = v660;
        CFDictionarySetValue(v6, @"CACHED_PCIE_DEEPSLEEP_DUR", v660);
        CFRelease(v661);
        CFNumberRef v662 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[19] + 12);
        if (!v662) {
          goto LABEL_829;
        }
        CFNumberRef v663 = v662;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_LTR_ACTIVE_CT", v662);
        CFRelease(v663);
        CFNumberRef v664 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[58] + 12);
        if (!v664) {
          goto LABEL_829;
        }
        CFNumberRef v665 = v664;
        CFDictionarySetValue(v6, @"CACHED_PCIE_LTR_ACTIVE_CT", v664);
        CFRelease(v665);
        CFNumberRef v666 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[20]);
        if (!v666) {
          goto LABEL_829;
        }
        CFNumberRef v667 = v666;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_LTR_ACTIVE_DUR", v666);
        CFRelease(v667);
        CFNumberRef v668 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[59]);
        if (!v668) {
          goto LABEL_829;
        }
        CFNumberRef v669 = v668;
        CFDictionarySetValue(v6, @"CACHED_PCIE_LTR_ACTIVE_DUR", v668);
        CFRelease(v669);
        CFNumberRef v670 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[20] + 4);
        if (!v670) {
          goto LABEL_829;
        }
        CFNumberRef v671 = v670;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_LTR_SLEEP_CT", v670);
        CFRelease(v671);
        CFNumberRef v672 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[59] + 4);
        if (!v672) {
          goto LABEL_829;
        }
        CFNumberRef v673 = v672;
        CFDictionarySetValue(v6, @"CACHED_PCIE_LTR_SLEEP_CT", v672);
        CFRelease(v673);
        CFNumberRef v674 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[20] + 8);
        if (!v674) {
          goto LABEL_829;
        }
        CFNumberRef v675 = v674;
        CFDictionarySetValue(v6, @"INSTANT_PCIE_LTR_SLEEP_DUR", v674);
        CFRelease(v675);
        CFNumberRef v676 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[59] + 8);
        if (!v676) {
          goto LABEL_829;
        }
        CFNumberRef v677 = v676;
        CFDictionarySetValue(v6, @"CACHED_PCIE_LTR_SLEEP_DUR", v676);
        CFRelease(v677);
        CFNumberRef v678 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[2]);
        if (!v678) {
          goto LABEL_829;
        }
        CFNumberRef v679 = v678;
        CFDictionarySetValue(v6, @"INSTANT_FRTS_TIME", v678);
        CFRelease(v679);
        CFNumberRef v680 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[41]);
        if (!v680) {
          goto LABEL_829;
        }
        CFNumberRef v681 = v680;
        CFDictionarySetValue(v6, @"CACHED_FRTS_TIME", v680);
        CFRelease(v681);
        CFNumberRef v682 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[2] + 4);
        if (!v682) {
          goto LABEL_829;
        }
        CFNumberRef v683 = v682;
        CFDictionarySetValue(v6, @"INSTANT_FRTS_CNT", v682);
        CFRelease(v683);
        CFNumberRef v684 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[41] + 4);
        if (!v684) {
          goto LABEL_829;
        }
        CFNumberRef v685 = v684;
        CFDictionarySetValue(v6, @"CACHED_FRTS_CNT", v684);
        CFRelease(v685);
        CFNumberRef v686 = CFNumberCreate(v253, kCFNumberSInt16Type, (char *)&valuePtr[25] + 4);
        if (!v686) {
          goto LABEL_829;
        }
        CFNumberRef v687 = v686;
        CFDictionarySetValue(v6, @"INSTANT_SLICE_INDEX", v686);
        CFRelease(v687);
        CFNumberRef v688 = CFNumberCreate(v253, kCFNumberSInt16Type, (char *)&valuePtr[64] + 4);
        if (!v688) {
          goto LABEL_829;
        }
        CFNumberRef v689 = v688;
        CFDictionarySetValue(v6, @"CACHED_SLICE_INDEX", v688);
        CFRelease(v689);
        CFNumberRef v690 = CFNumberCreate(v253, kCFNumberSInt16Type, (char *)&valuePtr[25] + 6);
        if (!v690) {
          goto LABEL_829;
        }
        CFNumberRef v691 = v690;
        CFDictionarySetValue(v6, @"INSTANT_BAND_TYPE", v690);
        CFRelease(v691);
        CFNumberRef v692 = CFNumberCreate(v253, kCFNumberSInt16Type, (char *)&valuePtr[64] + 6);
        if (!v692) {
          goto LABEL_829;
        }
        CFNumberRef v693 = v692;
        CFDictionarySetValue(v6, @"CACHED_BAND_TYPE", v692);
        CFRelease(v693);
        CFNumberRef v694 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[25] + 8);
        if (!v694) {
          goto LABEL_829;
        }
        CFNumberRef v695 = v694;
        CFDictionarySetValue(v6, @"INSTANT_PSBW_ENABLED_DURATION", v694);
        CFRelease(v695);
        CFNumberRef v696 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[64] + 8);
        if (!v696) {
          goto LABEL_829;
        }
        CFNumberRef v697 = v696;
        CFDictionarySetValue(v6, @"CACHED_PSBW_ENABLED_DURATION", v696);
        CFRelease(v697);
        CFNumberRef v698 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[25] + 12);
        if (!v698) {
          goto LABEL_829;
        }
        CFNumberRef v699 = v698;
        CFDictionarySetValue(v6, @"INSTANT_PHY_OFFLINE_DURATION", v698);
        CFRelease(v699);
        CFNumberRef v700 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[64] + 12);
        if (!v700) {
          goto LABEL_829;
        }
        CFNumberRef v701 = v700;
        CFDictionarySetValue(v6, @"CACHED_CACHED_PHY_OFFLINE_DURATION", v700);
        CFRelease(v701);
        CFNumberRef v702 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[29]);
        if (!v702) {
          goto LABEL_829;
        }
        CFNumberRef v703 = v702;
        CFDictionarySetValue(v6, @"INSTANT_PHY_CALIBRATION_DURATION", v702);
        CFRelease(v703);
        CFNumberRef v704 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[68]);
        if (!v704) {
          goto LABEL_829;
        }
        CFNumberRef v705 = v704;
        CFDictionarySetValue(v6, @"CACHED_PHY_CALIBRATION_DURATION", v704);
        CFRelease(v705);
        CFNumberRef v706 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[29] + 4);
        if (!v706) {
          goto LABEL_829;
        }
        CFNumberRef v707 = v706;
        CFDictionarySetValue(v6, @"INSTANT_PHY_CALIBRATION_COUNT", v706);
        CFRelease(v707);
        CFNumberRef v708 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[68] + 4);
        if (!v708) {
          goto LABEL_829;
        }
        CFNumberRef v709 = v708;
        CFDictionarySetValue(v6, @"CACHED_PHY_CALIBRATION_COUNT", v708);
        CFRelease(v709);
        CFNumberRef v710 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[20] + 12);
        if (!v710) {
          goto LABEL_829;
        }
        CFNumberRef v711 = v710;
        CFDictionarySetValue(v6, @"INSTANT_MIMO_PS_TOTAL_IDLE_TIME_MIMO", v710);
        CFRelease(v711);
        CFNumberRef v712 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[59] + 12);
        if (!v712) {
          goto LABEL_829;
        }
        CFNumberRef v713 = v712;
        CFDictionarySetValue(v6, @"CACHED_MIMO_PS_TOTAL_IDLE_TIME_MIMO", v712);
        CFRelease(v713);
        CFNumberRef v714 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[21]);
        if (!v714) {
          goto LABEL_829;
        }
        CFNumberRef v715 = v714;
        CFDictionarySetValue(v6, @"INSTANT_MIMO_PS_TOTAL_IDLE_TIME_SISO", v714);
        CFRelease(v715);
        CFNumberRef v716 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[60]);
        if (!v716) {
          goto LABEL_829;
        }
        CFNumberRef v717 = v716;
        CFDictionarySetValue(v6, @"CACHED_MIMO_PS_TOTAL_IDLE_TIME_SISO", v716);
        CFRelease(v717);
        CFNumberRef v718 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[21] + 4);
        if (!v718) {
          goto LABEL_829;
        }
        CFNumberRef v719 = v718;
        CFDictionarySetValue(v6, @"INSTANT_MIMO_PS_TOTAL_RX_TIME_SISO", v718);
        CFRelease(v719);
        CFNumberRef v720 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[60] + 4);
        if (!v720) {
          goto LABEL_829;
        }
        CFNumberRef v721 = v720;
        CFDictionarySetValue(v6, @"CACHED_MIMO_PS_TOTAL_RX_TIME_SISO", v720);
        CFRelease(v721);
        CFNumberRef v722 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[21] + 8);
        if (!v722) {
          goto LABEL_829;
        }
        CFNumberRef v723 = v722;
        CFDictionarySetValue(v6, @"INSTANT_MIMO_PS_TOTAL_RX_TIME_MIMO", v722);
        CFRelease(v723);
        CFNumberRef v724 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[60] + 8);
        if (!v724) {
          goto LABEL_829;
        }
        CFNumberRef v725 = v724;
        CFDictionarySetValue(v6, @"CACHED_MIMO_PS_TOTAL_RX_TIME_MIMO", v724);
        CFRelease(v725);
        CFNumberRef v726 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[21] + 12);
        if (!v726) {
          goto LABEL_829;
        }
        CFNumberRef v727 = v726;
        CFDictionarySetValue(v6, @"INSTANT_MIMO_PS_TOTAL_TX_TIME_1CHAIN", v726);
        CFRelease(v727);
        CFNumberRef v728 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[60] + 12);
        if (!v728) {
          goto LABEL_829;
        }
        CFNumberRef v729 = v728;
        CFDictionarySetValue(v6, @"CACHED_MIMO_PS_TOTAL_TX_TIME_1CHAIN", v728);
        CFRelease(v729);
        CFNumberRef v730 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[22]);
        if (!v730) {
          goto LABEL_829;
        }
        CFNumberRef v731 = v730;
        CFDictionarySetValue(v6, @"INSTANT_MIMO_PS_TOTAL_TX_TIME_2CHAIN", v730);
        CFRelease(v731);
        CFNumberRef v732 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[61]);
        if (!v732) {
          goto LABEL_829;
        }
        CFNumberRef v733 = v732;
        CFDictionarySetValue(v6, @"CACHED_MIMO_PS_TOTAL_TX_TIME_2CHAIN", v732);
        CFRelease(v733);
        CFNumberRef v734 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[22] + 4);
        if (!v734) {
          goto LABEL_829;
        }
        CFNumberRef v735 = v734;
        CFDictionarySetValue(v6, @"INSTANT_MIMO_PS_TOTAL_TX_TIME_3CHAIN", v734);
        CFRelease(v735);
        CFNumberRef v736 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[61] + 4);
        if (!v736) {
          goto LABEL_829;
        }
        CFNumberRef v737 = v736;
        CFDictionarySetValue(v6, @"CACHED_MIMO_PS_TOTAL_TX_TIME_3CHAIN", v736);
        CFRelease(v737);
        CFNumberRef v738 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[22] + 12);
        if (!v738) {
          goto LABEL_829;
        }
        CFNumberRef v739 = v738;
        CFDictionarySetValue(v6, @"INSTANT_OCL_TOTAL_RX_TIME", v738);
        CFRelease(v739);
        CFNumberRef v740 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[61] + 12);
        if (!v740) {
          goto LABEL_829;
        }
        CFNumberRef v741 = v740;
        CFDictionarySetValue(v6, @"CACHED_OCL_TOTAL_RX_TIME", v740);
        CFRelease(v741);
        CFNumberRef v742 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[22] + 8);
        if (!v742) {
          goto LABEL_829;
        }
        CFNumberRef v743 = v742;
        CFDictionarySetValue(v6, @"INSTANT_OCL_TOTAL_IDLE_TIME", v742);
        CFRelease(v743);
        CFNumberRef v744 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[61] + 8);
        if (!v744) {
          goto LABEL_829;
        }
        CFNumberRef v745 = v744;
        CFDictionarySetValue(v6, @"CACHED_OCL_TOTAL_IDLE_TIME", v744);
        CFRelease(v745);
        CFNumberRef v746 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[23]);
        if (!v746) {
          goto LABEL_829;
        }
        CFNumberRef v747 = v746;
        CFDictionarySetValue(v6, @"INSTANT_EBT_BCN_SCHEDULED", v746);
        CFRelease(v747);
        CFNumberRef v748 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[62]);
        if (!v748) {
          goto LABEL_829;
        }
        CFNumberRef v749 = v748;
        CFDictionarySetValue(v6, @"CACHED_EBT_BCN_SCHEDULED", v748);
        CFRelease(v749);
        CFNumberRef v750 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[23] + 4);
        if (!v750) {
          goto LABEL_829;
        }
        CFNumberRef v751 = v750;
        CFDictionarySetValue(v6, @"INSTANT_EBT_BCN_RXED", v750);
        CFRelease(v751);
        CFNumberRef v752 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[62] + 4);
        if (!v752) {
          goto LABEL_829;
        }
        CFNumberRef v753 = v752;
        CFDictionarySetValue(v6, @"CACHED_EBT_BCN_RXED", v752);
        CFRelease(v753);
        CFNumberRef v754 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[23] + 8);
        if (!v754) {
          goto LABEL_829;
        }
        CFNumberRef v755 = v754;
        CFDictionarySetValue(v6, @"INSTANT_EBT_BCN_EARLY_TERMINATED", v754);
        CFRelease(v755);
        CFNumberRef v756 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[62] + 8);
        if (!v756) {
          goto LABEL_829;
        }
        CFNumberRef v757 = v756;
        CFDictionarySetValue(v6, @"CACHED_EBT_BCN_EARLY_TERMINATED", v756);
        CFRelease(v757);
        CFNumberRef v758 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[23] + 12);
        if (!v758) {
          goto LABEL_829;
        }
        CFNumberRef v759 = v758;
        CFDictionarySetValue(v6, @"INSTANT_EBT_BCN_MISSED", v758);
        CFRelease(v759);
        CFNumberRef v760 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[62] + 12);
        if (!v760) {
          goto LABEL_829;
        }
        CFNumberRef v761 = v760;
        CFDictionarySetValue(v6, @"CACHED_EBT_BCN_MISSED", v760);
        CFRelease(v761);
        CFNumberRef v762 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[24]);
        if (!v762) {
          goto LABEL_829;
        }
        CFNumberRef v763 = v762;
        CFDictionarySetValue(v6, @"INSTANT_OPS_PARTIAL_DURATION", v762);
        CFRelease(v763);
        CFNumberRef v764 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[63]);
        if (!v764) {
          goto LABEL_829;
        }
        CFNumberRef v765 = v764;
        CFDictionarySetValue(v6, @"CACHED_OPS_PARTIAL_DURATION", v764);
        CFRelease(v765);
        CFNumberRef v766 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[24] + 4);
        if (!v766) {
          goto LABEL_829;
        }
        CFNumberRef v767 = v766;
        CFDictionarySetValue(v6, @"INSTANT_OPS_FULL_DURATION", v766);
        CFRelease(v767);
        CFNumberRef v768 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[63] + 4);
        if (!v768) {
          goto LABEL_829;
        }
        CFNumberRef v769 = v768;
        CFDictionarySetValue(v6, @"CACHED_OPS_FULL_DURATION", v768);
        CFRelease(v769);
        CFNumberRef v770 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[24] + 8);
        if (!v770) {
          goto LABEL_829;
        }
        CFNumberRef v771 = v770;
        CFDictionarySetValue(v6, @"INSTANT_OPS_RX_DURATION_MBSS", v770);
        CFRelease(v771);
        CFNumberRef v772 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[63] + 8);
        if (!v772) {
          goto LABEL_829;
        }
        CFNumberRef v773 = v772;
        CFDictionarySetValue(v6, @"CACHED_OPS_RX_DURATION_MBSS", v772);
        CFRelease(v773);
        CFNumberRef v774 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[24] + 12);
        if (!v774) {
          goto LABEL_829;
        }
        CFNumberRef v775 = v774;
        CFDictionarySetValue(v6, @"INSTANT_OPS_RX_DURATION_IBSS", v774);
        CFRelease(v775);
        CFNumberRef v776 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[63] + 12);
        if (!v776) {
          goto LABEL_829;
        }
        CFNumberRef v777 = v776;
        CFDictionarySetValue(v6, @"CACHED_OPS_RX_DURATION_IBSS", v776);
        CFRelease(v777);
        CFNumberRef v778 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[25]);
        if (!v778) {
          goto LABEL_829;
        }
        CFNumberRef v779 = v778;
        CFDictionarySetValue(v6, @"INSTANT_OPS_RX_DURATION_OBSS", v778);
        CFRelease(v779);
        CFNumberRef v780 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[64]);
        if (!v780) {
          goto LABEL_829;
        }
        CFNumberRef v781 = v780;
        CFDictionarySetValue(v6, @"CACHED_OPS_RX_DURATION_OBSS", v780);
        CFRelease(v781);
        CFNumberRef v782 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[78]);
        if (!v782) {
          goto LABEL_829;
        }
        CFNumberRef v783 = v782;
        CFDictionarySetValue(v6, @"INSTANT_SC_TIME_STAMP", v782);
        CFRelease(v783);
        CFNumberRef v784 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[83]);
        if (!v784) {
          goto LABEL_829;
        }
        CFNumberRef v785 = v784;
        CFDictionarySetValue(v6, @"CACHED_SC_TIME_STAMP", v784);
        CFRelease(v785);
        CFNumberRef v786 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[78] + 8);
        if (!v786) {
          goto LABEL_829;
        }
        CFNumberRef v787 = v786;
        CFDictionarySetValue(v6, @"INSTANT_SC_USR_SCAN_CNT", v786);
        CFRelease(v787);
        CFNumberRef v788 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[83] + 8);
        if (!v788) {
          goto LABEL_829;
        }
        CFNumberRef v789 = v788;
        CFDictionarySetValue(v6, @"CACHED_SC_USR_SCAN_CNT", v788);
        CFRelease(v789);
        CFNumberRef v790 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[78] + 12);
        if (!v790) {
          goto LABEL_829;
        }
        CFNumberRef v791 = v790;
        CFDictionarySetValue(v6, @"INSTANT_SC_USR_SCAN_DUR", v790);
        CFRelease(v791);
        CFNumberRef v792 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[83] + 12);
        if (!v792) {
          goto LABEL_829;
        }
        CFNumberRef v793 = v792;
        CFDictionarySetValue(v6, @"CACHED_SC_USR_SCAN_DUR", v792);
        CFRelease(v793);
        CFNumberRef v794 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[79]);
        if (!v794) {
          goto LABEL_829;
        }
        CFNumberRef v795 = v794;
        CFDictionarySetValue(v6, @"INSTANT_SC_ASSOC_SCAN_CNT", v794);
        CFRelease(v795);
        CFNumberRef v796 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[84]);
        if (!v796) {
          goto LABEL_829;
        }
        CFNumberRef v797 = v796;
        CFDictionarySetValue(v6, @"CACHED_SC_ASSOC_SCAN_CNT", v796);
        CFRelease(v797);
        CFNumberRef v798 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[79] + 4);
        if (!v798) {
          goto LABEL_829;
        }
        CFNumberRef v799 = v798;
        CFDictionarySetValue(v6, @"INSTANT_SC_ASSOC_SCAN_DUR", v798);
        CFRelease(v799);
        CFNumberRef v800 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[84] + 4);
        if (!v800) {
          goto LABEL_829;
        }
        CFNumberRef v801 = v800;
        CFDictionarySetValue(v6, @"CACHED_SC_ASSOC_SCAN_DUR", v800);
        CFRelease(v801);
        CFNumberRef v802 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[79] + 8);
        if (!v802) {
          goto LABEL_829;
        }
        CFNumberRef v803 = v802;
        CFDictionarySetValue(v6, @"INSTANT_SC_ROAM_SCAN_CNT", v802);
        CFRelease(v803);
        CFNumberRef v804 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[84] + 8);
        if (!v804) {
          goto LABEL_829;
        }
        CFNumberRef v805 = v804;
        CFDictionarySetValue(v6, @"CACHED_SC_ROAM_SCAN_CNT", v804);
        CFRelease(v805);
        CFNumberRef v806 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[79] + 12);
        if (!v806) {
          goto LABEL_829;
        }
        CFNumberRef v807 = v806;
        CFDictionarySetValue(v6, @"INSTANT_SC_ROAM_SCAN_DUR", v806);
        CFRelease(v807);
        CFNumberRef v808 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[84] + 12);
        if (!v808) {
          goto LABEL_829;
        }
        CFNumberRef v809 = v808;
        CFDictionarySetValue(v6, @"CACHED_SC_ROAM_SCAN_DUR", v808);
        CFRelease(v809);
        CFNumberRef v810 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[80]);
        if (!v810) {
          goto LABEL_829;
        }
        CFNumberRef v811 = v810;
        CFDictionarySetValue(v6, @"INSTANT_SC_PNO_SCAN_CNT", v810);
        CFRelease(v811);
        CFNumberRef v812 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[85]);
        if (!v812) {
          goto LABEL_829;
        }
        CFNumberRef v813 = v812;
        CFDictionarySetValue(v6, @"CACHED_SC_PNO_SCAN_CNT", v812);
        CFRelease(v813);
        CFNumberRef v814 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[80] + 4);
        if (!v814) {
          goto LABEL_829;
        }
        CFNumberRef v815 = v814;
        CFDictionarySetValue(v6, @"INSTANT_SC_PNO_SCAN_DUR", v814);
        CFRelease(v815);
        CFNumberRef v816 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[85] + 4);
        if (!v816) {
          goto LABEL_829;
        }
        CFNumberRef v817 = v816;
        CFDictionarySetValue(v6, @"CACHED_SC_PNO_SCAN_DUR", v816);
        CFRelease(v817);
        CFNumberRef v818 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[81] + 12);
        if (!v818) {
          goto LABEL_829;
        }
        CFNumberRef v819 = v818;
        CFDictionarySetValue(v6, @"INSTANT_SC_RX_DURATION_SISO", v818);
        CFRelease(v819);
        CFNumberRef v820 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[86] + 12);
        if (!v820) {
          goto LABEL_829;
        }
        CFNumberRef v821 = v820;
        CFDictionarySetValue(v6, @"CACHED_SC_RX_DURATION_SISO", v820);
        CFRelease(v821);
        CFNumberRef v822 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[81] + 8);
        if (!v822) {
          goto LABEL_829;
        }
        CFNumberRef v823 = v822;
        CFDictionarySetValue(v6, @"INSTANT_SC_IDLE_DURATION_SISO", v822);
        CFRelease(v823);
        CFNumberRef v824 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[86] + 8);
        if (!v824) {
          goto LABEL_829;
        }
        CFNumberRef v825 = v824;
        CFDictionarySetValue(v6, @"CACHED_SC_IDLE_DURATION_SISO", v824);
        CFRelease(v825);
        CFNumberRef v826 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[82] + 4);
        if (!v826) {
          goto LABEL_829;
        }
        CFNumberRef v827 = v826;
        CFDictionarySetValue(v6, @"INSTANT_SC_PM_DURATION", v826);
        CFRelease(v827);
        CFNumberRef v828 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[87] + 4);
        if (!v828) {
          goto LABEL_829;
        }
        CFNumberRef v829 = v828;
        CFDictionarySetValue(v6, @"CACHED_SC_PM_DURATION", v828);
        CFRelease(v829);
        CFNumberRef v830 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[82] + 8);
        if (!v830) {
          goto LABEL_829;
        }
        CFNumberRef v831 = v830;
        CFDictionarySetValue(v6, @"INSTANT_SC_RX_MPC_DURATION", v830);
        CFRelease(v831);
        CFNumberRef v832 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[87] + 8);
        if (!v832) {
          goto LABEL_829;
        }
        CFNumberRef v833 = v832;
        CFDictionarySetValue(v6, @"CACHED_SC_RX_MPC_DURATION", v832);
        CFRelease(v833);
        CFNumberRef v834 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[82] + 12);
        if (!v834) {
          goto LABEL_829;
        }
        CFNumberRef v835 = v834;
        CFDictionarySetValue(v6, @"INSTANT_SC_BLANKED_SCAN_CNT", v834);
        CFRelease(v835);
        CFNumberRef v836 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[87] + 12);
        if (!v836) {
          goto LABEL_829;
        }
        CFNumberRef v837 = v836;
        CFDictionarySetValue(v6, @"CACHED_SC_BLANKED_SCAN_CNT", v836);
        CFRelease(v837);
        CFNumberRef v838 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[88]);
        if (!v838) {
          goto LABEL_829;
        }
        CFNumberRef v839 = v838;
        CFDictionarySetValue(v6, @"INACTVITY_DURATION", v838);
        CFRelease(v839);
        CFNumberRef v840 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[88] + 4);
        if (!v840) {
          goto LABEL_829;
        }
        CFNumberRef v841 = v840;
        CFDictionarySetValue(v6, @"INACTVITY_MPC_WAKE_DURATION", v840);
        CFRelease(v841);
        CFNumberRef v842 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[88] + 8);
        if (!v842) {
          goto LABEL_829;
        }
        CFNumberRef v843 = v842;
        CFDictionarySetValue(v6, @"INACTVITY_MPC_BEACONS_SCHEDULED", v842);
        CFRelease(v843);
        CFNumberRef v844 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[88] + 12);
        if (!v844) {
          goto LABEL_829;
        }
        CFNumberRef v845 = v844;
        CFDictionarySetValue(v6, @"INACTVITY_MPC_EARLY_BEACONS_TERMINATED", v844);
        CFRelease(v845);
        CFNumberRef v846 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[89]);
        if (!v846) {
          goto LABEL_829;
        }
        CFNumberRef v847 = v846;
        CFDictionarySetValue(v6, @"INACTVITY_MPC_BEACONS_RECEIVED", v846);
        CFRelease(v847);
        CFNumberRef v848 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[89] + 4);
        if (!v848) {
          goto LABEL_829;
        }
        CFNumberRef v849 = v848;
        CFDictionarySetValue(v6, @"INACTVITY_MPC_BEACONS_MISSED", v848);
        CFRelease(v849);
        CFNumberRef v850 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[89] + 8);
        if (!v850) {
          goto LABEL_829;
        }
        CFNumberRef v851 = v850;
        CFDictionarySetValue(v6, @"INACTVITY_LPSC_WAKE_DURATION", v850);
        CFRelease(v851);
        CFNumberRef v852 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[89] + 12);
        if (!v852) {
          goto LABEL_829;
        }
        CFNumberRef v853 = v852;
        CFDictionarySetValue(v6, @"INACTVITY_LPSC_BEACONS_SCHEDULED", v852);
        CFRelease(v853);
        CFNumberRef v854 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[90]);
        if (!v854) {
          goto LABEL_829;
        }
        CFNumberRef v855 = v854;
        CFDictionarySetValue(v6, @"INACTVITY_LPSC_EARLY_BEACONS_TERMINATED", v854);
        CFRelease(v855);
        CFNumberRef v856 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[90] + 4);
        if (!v856) {
          goto LABEL_829;
        }
        CFNumberRef v857 = v856;
        CFDictionarySetValue(v6, @"INACTVITY_LPSC_BEACONS_RECEIVED", v856);
        CFRelease(v857);
        CFNumberRef v858 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[90] + 8);
        if (!v858) {
          goto LABEL_829;
        }
        CFNumberRef v859 = v858;
        CFDictionarySetValue(v6, @"INACTVITY_LPSC_BEACONS_MISSED", v858);
        CFRelease(v859);
        CFNumberRef v860 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[30] + 4);
        if (!v860) {
          goto LABEL_829;
        }
        CFNumberRef v861 = v860;
        CFDictionarySetValue(v6, @"INSTANT_RX_UPR_PROCESSED", v860);
        CFRelease(v861);
        CFNumberRef v862 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[69] + 4);
        if (!v862) {
          goto LABEL_829;
        }
        CFNumberRef v863 = v862;
        CFDictionarySetValue(v6, @"CACHED_RX_UPR_PROCESSED", v862);
        CFRelease(v863);
        CFNumberRef v864 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[30] + 8);
        if (!v864) {
          goto LABEL_829;
        }
        CFNumberRef v865 = v864;
        CFDictionarySetValue(v6, @"INSTANT_RX_UPR_IGNORED", v864);
        CFRelease(v865);
        CFNumberRef v866 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[69] + 8);
        if (!v866) {
          goto LABEL_829;
        }
        CFNumberRef v867 = v866;
        CFDictionarySetValue(v6, @"CACHED_RX_UPR_IGNORED", v866);
        CFRelease(v867);
        CFNumberRef v868 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[30] + 12);
        if (!v868) {
          goto LABEL_829;
        }
        CFNumberRef v869 = v868;
        CFDictionarySetValue(v6, @"INSTANT_RX_FILS_PROCESSED", v868);
        CFRelease(v869);
        CFNumberRef v870 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[69] + 12);
        if (!v870) {
          goto LABEL_829;
        }
        CFNumberRef v871 = v870;
        CFDictionarySetValue(v6, @"CACHED_RX_FILS_PROCESSED", v870);
        CFRelease(v871);
        CFNumberRef v872 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[31]);
        if (!v872) {
          goto LABEL_829;
        }
        CFNumberRef v873 = v872;
        CFDictionarySetValue(v6, @"INSTANT_RX_FILS_IGNORED", v872);
        CFRelease(v873);
        CFNumberRef v874 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[70]);
        if (!v874) {
          goto LABEL_829;
        }
        CFNumberRef v875 = v874;
        CFDictionarySetValue(v6, @"CACHED_RX_FILS_IGNORED", v874);
        CFRelease(v875);
        CFNumberRef v876 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[31] + 4);
        if (!v876) {
          goto LABEL_829;
        }
        CFNumberRef v877 = v876;
        CFDictionarySetValue(v6, @"INSTANT_REFERRED_6G_SCANS", v876);
        CFRelease(v877);
        CFNumberRef v878 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[70] + 4);
        if (!v878) {
          goto LABEL_829;
        }
        CFNumberRef v879 = v878;
        CFDictionarySetValue(v6, @"CACHED_REFERRED_6G_SCANS", v878);
        CFRelease(v879);
        CFNumberRef v880 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[90] + 12);
        if (!v880) {
          goto LABEL_829;
        }
        CFNumberRef v881 = v880;
        CFDictionarySetValue(v6, @"INSTANT_TOTAL_SCAN_DUR_2G", v880);
        CFRelease(v881);
        CFNumberRef v882 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[91]);
        if (!v882) {
          goto LABEL_829;
        }
        CFNumberRef v883 = v882;
        CFDictionarySetValue(v6, @"INSTANT_TOTAL_SCAN_DUR_5G", v882);
        CFRelease(v883);
        CFNumberRef v884 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[91] + 4);
        if (!v884) {
          goto LABEL_829;
        }
        CFNumberRef v885 = v884;
        CFDictionarySetValue(v6, @"INSTANT_TOTAL_SCAN_DUR_6G", v884);
        CFRelease(v885);
        CFNumberRef v886 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[91] + 8);
        if (!v886) {
          goto LABEL_829;
        }
        CFNumberRef v887 = v886;
        CFDictionarySetValue(v6, @"INSTANT_TOTAL_CHANNEL_CNT_2G", v886);
        CFRelease(v887);
        CFNumberRef v888 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[91] + 12);
        if (!v888) {
          goto LABEL_829;
        }
        CFNumberRef v889 = v888;
        CFDictionarySetValue(v6, @"INSTANT_TOTAL_CHANNEL_CNT_5G", v888);
        CFRelease(v889);
        CFNumberRef v890 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[92]);
        if (!v890) {
          goto LABEL_829;
        }
        CFNumberRef v891 = v890;
        CFDictionarySetValue(v6, @"INSTANT_TOTAL_CHANNEL_CNT_6G", v890);
        CFRelease(v891);
        CFNumberRef v892 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[92] + 4);
        if (!v892) {
          goto LABEL_829;
        }
        CFNumberRef v893 = v892;
        CFDictionarySetValue(v6, @"INSTANT_TOTAL_CHANNEL_CNT_SC_2G", v892);
        CFRelease(v893);
        CFNumberRef v894 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[92] + 8);
        if (!v894) {
          goto LABEL_829;
        }
        CFNumberRef v895 = v894;
        CFDictionarySetValue(v6, @"INSTANT_TOTAL_CHANNEL_CNT_SC_5G", v894);
        CFRelease(v895);
        CFNumberRef v896 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[92] + 12);
        if (!v896) {
          goto LABEL_829;
        }
        CFNumberRef v897 = v896;
        CFDictionarySetValue(v6, @"INSTANT_TOTAL_CHANNEL_CNT_SC_6G", v896);
        CFRelease(v897);
        CFNumberRef v898 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[93]);
        if (!v898) {
          goto LABEL_829;
        }
        CFNumberRef v899 = v898;
        CFDictionarySetValue(v6, @"INSTANT_TOTAL_ACTIVE_CHANNEL_CNT", v898);
        CFRelease(v899);
        CFNumberRef v900 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[93] + 4);
        if (!v900) {
          goto LABEL_829;
        }
        CFNumberRef v901 = v900;
        CFDictionarySetValue(v6, @"INSTANT_TOTAL_PASSIVE_CHANNEL_CNT", v900);
        CFRelease(v901);
        CFNumberRef v902 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[93] + 8);
        if (!v902) {
          goto LABEL_829;
        }
        CFNumberRef v903 = v902;
        CFDictionarySetValue(v6, @"INSTANT_SCAN_START_TIME", v902);
        CFRelease(v903);
        CFNumberRef v904 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[93] + 12);
        if (!v904) {
          goto LABEL_829;
        }
        CFNumberRef v905 = v904;
        CFDictionarySetValue(v6, @"INSTANT_SCAN_END_TIME", v904);
        CFRelease(v905);
        CFNumberRef v906 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[94]);
        if (!v906) {
          goto LABEL_829;
        }
        CFNumberRef v907 = v906;
        CFDictionarySetValue(v6, @"INSTANT_SCAN_DUR_2G", v906);
        CFRelease(v907);
        CFNumberRef v908 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[94] + 4);
        if (!v908) {
          goto LABEL_829;
        }
        CFNumberRef v909 = v908;
        CFDictionarySetValue(v6, @"INSTANT_SCAN_DUR_5G", v908);
        CFRelease(v909);
        CFNumberRef v910 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[94] + 8);
        if (!v910) {
          goto LABEL_829;
        }
        CFNumberRef v911 = v910;
        CFDictionarySetValue(v6, @"INSTANT_SCAN_DUR_6G", v910);
        CFRelease(v911);
        CFNumberRef v912 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[94] + 12);
        if (!v912) {
          goto LABEL_829;
        }
        CFNumberRef v913 = v912;
        CFDictionarySetValue(v6, @"INSTANT_TOTAL_CHAN_NUM", v912);
        CFRelease(v913);
        CFNumberRef v914 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[95]);
        if (!v914) {
          goto LABEL_829;
        }
        CFNumberRef v915 = v914;
        CFDictionarySetValue(v6, @"INSTANT_CHANNEL_CNT_2G", v914);
        CFRelease(v915);
        CFNumberRef v916 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[95] + 4);
        if (!v916) {
          goto LABEL_829;
        }
        CFNumberRef v917 = v916;
        CFDictionarySetValue(v6, @"INSTANT_CHANNEL_CNT_5G", v916);
        CFRelease(v917);
        CFNumberRef v918 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[95] + 8);
        if (!v918) {
          goto LABEL_829;
        }
        CFNumberRef v919 = v918;
        CFDictionarySetValue(v6, @"INSTANT_CHANNEL_CNT_6G", v918);
        CFRelease(v919);
        CFNumberRef v920 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[95] + 12);
        if (!v920) {
          goto LABEL_829;
        }
        CFNumberRef v921 = v920;
        CFDictionarySetValue(v6, @"INSTANT_CHANNEL_CNT_SC_2G", v920);
        CFRelease(v921);
        CFNumberRef v922 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[96]);
        if (!v922) {
          goto LABEL_829;
        }
        CFNumberRef v923 = v922;
        CFDictionarySetValue(v6, @"INSTANT_CHANNEL_CNT_SC_5G", v922);
        CFRelease(v923);
        CFNumberRef v924 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[96] + 4);
        if (!v924) {
          goto LABEL_829;
        }
        CFNumberRef v925 = v924;
        CFDictionarySetValue(v6, @"INSTANT_CHANNEL_CNT_SC_6G", v924);
        CFRelease(v925);
        CFNumberRef v926 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[96] + 8);
        if (!v926) {
          goto LABEL_829;
        }
        CFNumberRef v927 = v926;
        CFDictionarySetValue(v6, @"INSTANT_ACTIVE_CHANNEL_CNT", v926);
        CFRelease(v927);
        CFNumberRef v928 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[96] + 12);
        if (!v928) {
          goto LABEL_829;
        }
        CFNumberRef v929 = v928;
        CFDictionarySetValue(v6, @"INSTANT_ACTIVE_PASSIVE_CNT", v928);
        CFRelease(v929);
        CFNumberRef v930 = CFNumberCreate(v253, kCFNumberSInt8Type, &valuePtr[97]);
        if (!v930) {
          goto LABEL_829;
        }
        CFNumberRef v931 = v930;
        CFDictionarySetValue(v6, @"INSTANT_SCAN_CLIENT", v930);
        CFRelease(v931);
        CFNumberRef v932 = CFNumberCreate(v253, kCFNumberSInt8Type, (char *)&valuePtr[97] + 1);
        if (!v932) {
          goto LABEL_829;
        }
        CFNumberRef v933 = v932;
        CFDictionarySetValue(v6, @"INSTANT_SCAN_MODE", v932);
        CFRelease(v933);
        CFNumberRef v934 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[97] + 4);
        if (!v934) {
          goto LABEL_829;
        }
        CFNumberRef v935 = v934;
        CFDictionarySetValue(v6, @"SCANFORWARD_FORWARDED_BSSS_IN_WAKE", v934);
        CFRelease(v935);
        CFNumberRef v936 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[97] + 8);
        if (!v936) {
          goto LABEL_829;
        }
        CFNumberRef v937 = v936;
        CFDictionarySetValue(v6, @"SCANFORWARD_FORWARDED_BSSS_IN_SLEEP", v936);
        CFRelease(v937);
        CFNumberRef v938 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[98] + 12);
        if (!v938) {
          goto LABEL_829;
        }
        CFNumberRef v939 = v938;
        CFDictionarySetValue(v6, @"SCANFORWARD_CURRENT_BSSS_IN_WAKE", v938);
        CFRelease(v939);
        CFNumberRef v940 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[99]);
        if (!v940) {
          goto LABEL_829;
        }
        CFNumberRef v941 = v940;
        CFDictionarySetValue(v6, @"SCANFORWARD_CURRENT_BSSS_IN_SLEEP", v940);
        CFRelease(v941);
        CFNumberRef v942 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[99] + 12);
        if (!v942) {
          goto LABEL_829;
        }
        CFNumberRef v943 = v942;
        CFDictionarySetValue(v6, @"SCANFORWARD_TOTAL_SPMI_MSGS_IN_WAKE", v942);
        CFRelease(v943);
        CFNumberRef v944 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[100]);
        if (!v944) {
          goto LABEL_829;
        }
        uint64_t v37 = v944;
        Boolean v101 = @"SCANFORWARD_TOTAL_SPMI_MSGS_IN_SLEEP";
        goto LABEL_736;
      default:
        if (v4 != 207)
        {
          if (v4 != 216) {
            goto LABEL_10;
          }
          uint64_t RoamProfile = _getRoamProfile(v5, (uint64_t)&v1026, v6);
          goto LABEL_355;
        }
        if (!v8) {
          goto LABEL_741;
        }
        bzero(valuePtr, 0x2720uLL);
        v1028 = (UInt8 *)valuePtr;
        DWORD2(v1027) = 10016;
        if (Apple80211IOCTLGetWrapper()) {
          goto LABEL_711;
        }
        if (!WORD6(valuePtr[0])) {
          goto LABEL_739;
        }
        uint64_t v971 = 0;
        CFAllocatorRef v972 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        v973 = (const void *)*MEMORY[0x263EFFB40];
        v974 = (const void *)*MEMORY[0x263EFFB38];
        while (1)
        {
          *(_DWORD *)buffer = -1431655766;
          CFMutableDictionaryRef v975 = CFDictionaryCreateMutable(v972, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (!v975) {
            return 4294963395;
          }
          __int16 v50 = v975;
          *(_DWORD *)buffer = *((unsigned __int8 *)&valuePtr[50] + v971 + 14);
          CFNumberRef v976 = CFNumberCreate(v972, kCFNumberSInt32Type, buffer);
          if (!v976) {
            goto LABEL_779;
          }
          CFNumberRef v977 = v976;
          CFDictionarySetValue(v50, @"CHANNELINFO_CH_NUM", v976);
          CFRelease(v977);
          if (*((unsigned char *)&valuePtr[426] + v971)) {
            int v1023 = 1;
          }
          else {
            int v1023 = *(_DWORD *)buffer > 0xEu ? 3 : 0;
          }
          CFNumberRef v978 = CFNumberCreate(v972, kCFNumberSInt32Type, &v1023);
          if (!v978) {
            goto LABEL_779;
          }
          CFNumberRef v979 = v978;
          CFDictionarySetValue(v50, @"CHANNELINFO_BAND_NUM", v978);
          CFRelease(v979);
          CFNumberRef v980 = CFNumberCreate(v972, kCFNumberSInt32Type, (char *)&valuePtr[301] + 4 * v971);
          if (!v980) {
            goto LABEL_779;
          }
          CFNumberRef v981 = v980;
          CFDictionarySetValue(v50, @"CHANNELINFO_CH_BITMAP", v980);
          CFRelease(v981);
          v982 = (char *)valuePtr + v971;
          if (*((unsigned char *)&valuePtr[75] + v971 + 14)) {
            v983 = v973;
          }
          else {
            v983 = v974;
          }
          CFDictionarySetValue(v50, @"CHANNELINFO_INDOOR_RESTRICTED", v983);
          if (v982[1614]) {
            v984 = v973;
          }
          else {
            v984 = v974;
          }
          CFDictionarySetValue(v50, @"CHANNELINFO_DFS", v984);
          if (v982[2014]) {
            v985 = v973;
          }
          else {
            v985 = v974;
          }
          CFDictionarySetValue(v50, @"CHANNELINFO_PASSIVE", v985);
          if (v982[2414]) {
            v986 = v973;
          }
          else {
            v986 = v974;
          }
          CFDictionarySetValue(v50, @"CHANNELINFO_40MHZ", v986);
          if (v982[2814]) {
            v987 = v973;
          }
          else {
            v987 = v974;
          }
          CFDictionarySetValue(v50, @"CHANNELINFO_80MHZ", v987);
          CFArrayAppendValue(v6, v50);
          CFRelease(v50);
          if (++v971 >= (unint64_t)WORD6(valuePtr[0])) {
            goto LABEL_739;
          }
        }
    }
    while (1)
    {
      if ((*((unsigned __int8 *)v200 + 4) >> v1004))
      {
        CFNumberRef v1005 = CFNumberCreate(v1001, kCFNumberSInt32Type, valuePtr);
        if (!v1005)
        {
LABEL_824:
          CFRelease(v1003);
          goto LABEL_825;
        }
        CFNumberRef v1006 = v1005;
        CFArrayAppendValue(v1003, v1005);
        CFRelease(v1006);
        unsigned int v1004 = valuePtr[0];
      }
      LODWORD(valuePtr[0]) = ++v1004;
      if (v1004 >= 6)
      {
        CFDictionaryAddValue(v6, @"WOW_WAKE_CONDITIONS", v1003);
        CFRelease(v1003);
        if (!v200[2]) {
          goto LABEL_803;
        }
        CFNumberRef v1007 = CFNumberCreate(v1001, kCFNumberSInt32Type, v200 + 2);
        if (v1007)
        {
          CFNumberRef v1008 = v1007;
          CFDictionaryAddValue(v6, @"WOW_BEACON_LOSS_TIME", v1007);
          CFRelease(v1008);
LABEL_803:
          CFMutableArrayRef v1003 = CFArrayCreateMutable(v1001, 0, MEMORY[0x263EFFF70]);
          unsigned int v1009 = v200[3];
          if (v1009)
          {
            unsigned int v1010 = 0;
            LODWORD(valuePtr[0]) = 0;
            do
            {
              CFIndex v1011 = v200[376 * v1010 + 4];
              if (v1011 <= 0x5DC)
              {
                CFDataRef v1012 = CFDataCreate(v1001, (const UInt8 *)&v200[376 * v1010 + 5], v1011);
                if (!v1012) {
                  goto LABEL_824;
                }
                CFDataRef v1013 = v1012;
                CFArrayAppendValue(v1003, v1012);
                CFRelease(v1013);
                unsigned int v1010 = valuePtr[0];
                unsigned int v1009 = v200[3];
              }
              LODWORD(valuePtr[0]) = ++v1010;
            }
            while (v1010 <= 9 && v1010 < v1009);
          }
          v1014 = (const void *)*MEMORY[0x263EFFB40];
          v1015 = (const void *)*MEMORY[0x263EFFB38];
          if (v200[3764]) {
            v1016 = (const void *)*MEMORY[0x263EFFB40];
          }
          else {
            v1016 = (const void *)*MEMORY[0x263EFFB38];
          }
          CFDictionaryAddValue(v6, @"WOW_ENABLE_LPAS", v1016);
          if (v200[3765]) {
            v1017 = v1014;
          }
          else {
            v1017 = v1015;
          }
          CFDictionaryAddValue(v6, @"WOW_ENABLE_CAPTIVE", v1017);
          CFDictionaryAddValue(v6, @"WOW_PATTERNS", v1003);
          CFRelease(v1003);
          free(v200);
LABEL_739:
          uint64_t v7 = 0;
          goto LABEL_740;
        }
LABEL_825:
        free(v200);
        return 4294963395;
      }
    }
  }
  if (v4 > 358)
  {
    if (v4 <= 405)
    {
      if (v4 > 383)
      {
        switch(v4)
        {
          case 384:
          case 396:
            char v9 = (UInt8 *)malloc_type_malloc(0x18004uLL, 0x100004013E943BCuLL);
            if (!v9) {
              goto LABEL_830;
            }
            unsigned int v10 = v9;
            bzero(v9, 0x18004uLL);
            DWORD2(v1027) = 98308;
            v1028 = v10;
            if (Apple80211RawGet(v5, (uint64_t)&v1026)) {
              goto LABEL_145;
            }
            LODWORD(valuePtr[0]) = 2;
            CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, valuePtr);
            if (v12)
            {
              CFNumberRef v13 = v12;
              CFDataRef v14 = CFDataCreate(v11, v10 + 4, 98304);
              if (v14)
              {
                CFDataRef v15 = v14;
                CFDictionarySetValue(v6, v13, v14);
                CFRelease(v13);
                CFRelease(v15);
                free(v10);
                return 0;
              }
              free(v10);
              CFRelease(v13);
            }
            else
            {
              free(v10);
            }
LABEL_819:
            uint64_t v7 = 4294963396;
            break;
          case 386:
            uint64_t RoamProfile = (uint64_t)_getLQMSummary();
            goto LABEL_355;
          case 387:
            memset(valuePtr, 0, 37);
            DWORD2(v1027) = 37;
            v1028 = (UInt8 *)valuePtr;
            if (Apple80211IOCTLGetWrapper()) {
              goto LABEL_169;
            }
LABEL_350:
            v246 = (const char *)valuePtr;
LABEL_351:
            CFStringAppendCString((CFMutableStringRef)v6, v246, 0x8000100u);
            goto LABEL_739;
          case 390:
            memset(valuePtr, 170, 0x8D8uLL);
            v1028 = (UInt8 *)valuePtr;
            DWORD2(v1027) = 2264;
            CFArrayRef v69 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
            bzero(valuePtr, 0x8D8uLL);
            WORD5(valuePtr[8]) = 2048;
            if (Apple80211IOCTLGetWrapper())
            {
              uint64_t v7 = 4294963394;
            }
            else
            {
              int v945 = -9998;
              do
              {
                uint64_t v7 = _addScanResultToList(v5, (uint64_t)valuePtr, v69, v6, 0, 0, 0, 0, 0, 1, 0, 0);
                bzero(valuePtr, 0x8D8uLL);
                WORD5(valuePtr[8]) = 2048;
                int v946 = Apple80211IOCTLGetWrapper();
                if (!v945) {
                  break;
                }
                ++v945;
              }
              while (!v946);
            }
            if ((*(unsigned char *)(v5 + 99) & 0x40) != 0) {
              _Apple80211AddOriginatingRNRChannelListToScanResults(v69, v6, 0, 0, 0, 0, 0);
            }
            if (v69) {
              CFRelease(v69);
            }
            goto LABEL_740;
          case 393:
          case 397:
            goto LABEL_6;
          default:
            goto LABEL_10;
        }
        return v7;
      }
      if (v4 != 359)
      {
        if (v4 != 369)
        {
          if (v4 == 375)
          {
            *(void *)&valuePtr[0] = 0xAAAAAAAAAAAAAAAALL;
            WORD4(valuePtr[0]) = -21846;
            DWORD2(v1027) = 10;
            v1028 = (UInt8 *)valuePtr;
            if (!Apple80211IOCTLGetWrapper())
            {
              CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFNumberRef v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt8Type, valuePtr);
              if (v18)
              {
                CFNumberRef v19 = v18;
                CFDictionaryAddValue(v6, @"MIMOSTATUS_VERSION", v18);
                CFRelease(v19);
                CFNumberRef v20 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 1);
                if (v20)
                {
                  CFNumberRef v21 = v20;
                  CFDictionaryAddValue(v6, @"MIMOSTATUS_BSSMIMOCAP", v20);
                  CFRelease(v21);
                  CFNumberRef v22 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 6);
                  if (v22)
                  {
                    CFNumberRef v23 = v22;
                    CFDictionaryAddValue(v6, @"MIMOSTATUS_ASSOCMIMOSTATUS", v22);
                    CFRelease(v23);
                    CFNumberRef v24 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 5);
                    if (v24)
                    {
                      CFNumberRef v25 = v24;
                      CFDictionaryAddValue(v6, @"MIMOSTATUS_MRCSTATE", v24);
                      CFRelease(v25);
                      CFNumberRef v26 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 2);
                      if (v26)
                      {
                        CFNumberRef v27 = v26;
                        CFDictionaryAddValue(v6, @"MIMOSTATUS_BSSRXCHAIN", v26);
                        CFRelease(v27);
                        CFNumberRef v28 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 3);
                        if (v28)
                        {
                          CFNumberRef v29 = v28;
                          CFDictionaryAddValue(v6, @"MIMOSTATUS_BSSTXCHAIN", v28);
                          CFRelease(v29);
                          CFNumberRef v30 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 4);
                          if (v30)
                          {
                            CFNumberRef v31 = v30;
                            CFDictionaryAddValue(v6, @"MIMOSTATUS_BSSBW", v30);
                            CFRelease(v31);
                            CFNumberRef v32 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 7);
                            if (v32)
                            {
                              CFNumberRef v33 = v32;
                              CFDictionaryAddValue(v6, @"MIMOSTATUS_ASSOCRXCHAIN", v32);
                              CFRelease(v33);
                              CFNumberRef v34 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 8);
                              if (v34)
                              {
                                CFNumberRef v35 = v34;
                                CFDictionaryAddValue(v6, @"MIMOSTATUS_ASSOCTXCHAIN", v34);
                                CFRelease(v35);
                                CFNumberRef v36 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 9);
                                if (v36)
                                {
                                  uint64_t v37 = v36;
                                  CFDictionaryRef v38 = @"MIMOSTATUS_ASSOCBW";
LABEL_793:
                                  CFDictionaryAddValue(v6, v38, v37);
                                  goto LABEL_737;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_829:
              uint64_t v7 = 4294963395;
              goto LABEL_740;
            }
            goto LABEL_169;
          }
          goto LABEL_10;
        }
        goto LABEL_6;
      }
      *((_DWORD *)v6 + 2) = 0;
      *(void *)CFDictionaryRef v6 = 0;
      int v83 = 12;
LABEL_161:
      DWORD2(v1027) = v83;
      v1028 = (UInt8 *)v6;
      if (Apple80211IOCTLGetWrapper()) {
        goto LABEL_162;
      }
      return 0;
    }
    if (v4 <= 446)
    {
      if (v4 > 420)
      {
        if (v4 != 421)
        {
          if (v4 == 423) {
            goto LABEL_6;
          }
          goto LABEL_10;
        }
        if (v8 != 14728)
        {
          syslog(3, "APPLE80211_IOR_LEGEND::%s(%d) bad valLen %d compared to sizeof apple80211_ior_legend_query_t %lu\n", "Apple80211GetWithIOCTL", 11522, v8, 14728);
          goto LABEL_741;
        }
        DWORD2(v1027) = 14728;
        v1028 = (UInt8 *)v6;
        if (Apple80211IOCTLGetWrapper())
        {
LABEL_162:
          if (*__error() != 102 && *__error() != 6)
          {
            if (*__error() != 22) {
              goto LABEL_716;
            }
            goto LABEL_741;
          }
LABEL_10:
          uint64_t v7 = 4294963393;
          goto LABEL_741;
        }
        if (DWORD1(v1027))
        {
          syslog(3, "APPLE80211_IOR_LEGEND::%s(%d) Command returned error, exiting\n", "Apple80211GetWithIOCTL", 11530);
LABEL_830:
          uint64_t v7 = 4294963395;
          goto LABEL_741;
        }
        return 0;
      }
      if (v4 == 406)
      {
        *(void *)&long long v82 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v82 + 1) = 0xAAAAAAAAAAAAAAAALL;
        valuePtr[14] = v82;
        valuePtr[15] = v82;
        valuePtr[12] = v82;
        valuePtr[13] = v82;
        valuePtr[10] = v82;
        valuePtr[11] = v82;
        valuePtr[8] = v82;
        valuePtr[9] = v82;
        valuePtr[7] = v82;
        valuePtr[5] = v82;
        valuePtr[6] = v82;
        valuePtr[3] = v82;
        valuePtr[4] = v82;
        valuePtr[1] = v82;
        valuePtr[2] = v82;
        valuePtr[0] = v82;
        syslog(3, "[WiFiTimeSync] %s %s:%d APPLE80211_IOC_TIMESYNC_INFO\n", "/Library/Caches/com.apple.xbs/Sources/IO80211/IO80211API/Apple80211API.c", "Apple80211GetWithIOCTL", 11500);
        DWORD2(v1027) = 256;
        v1028 = (UInt8 *)valuePtr;
        if (!Apple80211RawGet(v5, (uint64_t)&v1026))
        {
LABEL_238:
          CFDataAppendBytes(v6, (const UInt8 *)valuePtr, DWORD2(v1027));
          goto LABEL_739;
        }
        goto LABEL_169;
      }
      if (v4 != 407) {
        goto LABEL_10;
      }
    }
    else if (v4 <= 514)
    {
      if (v4 == 447)
      {
        bzero((char *)valuePtr + 8, 0x29CuLL);
        *(void *)&valuePtr[0] = 0x200000001;
        DWORD2(v1027) = 676;
        v1028 = (UInt8 *)valuePtr;
        if (!Apple80211IOCTLGetWrapper()) {
          goto LABEL_739;
        }
        goto LABEL_169;
      }
      if (v4 != 459) {
        goto LABEL_10;
      }
    }
    else
    {
      if (v4 == 515)
      {
        DWORD2(valuePtr[0]) = 0;
        *(void *)&valuePtr[0] = 1;
        DWORD2(v1027) = 12;
        v1028 = (UInt8 *)valuePtr;
        if (!Apple80211IOCTLGetWrapper())
        {
          if (!DWORD1(valuePtr[0])) {
            goto LABEL_739;
          }
          unint64_t v70 = 0;
          CFAllocatorRef v71 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          while (1)
          {
            CFNumberRef v72 = CFNumberCreate(v71, kCFNumberSInt8Type, (char *)valuePtr + v70 + 8);
            if (!v72) {
              goto LABEL_829;
            }
            CFNumberRef v73 = v72;
            CFArrayAppendValue(v6, v72);
            CFRelease(v73);
            uint64_t v7 = 0;
            if (v70 <= 2 && ++v70 < DWORD1(valuePtr[0])) {
              continue;
            }
            goto LABEL_740;
          }
        }
LABEL_169:
        if (*__error() == 102 || *__error() == 6)
        {
LABEL_713:
          uint64_t v7 = 4294963393;
          goto LABEL_740;
        }
        if (*__error() == 22)
        {
LABEL_740:
          if (!v7) {
            return v7;
          }
          goto LABEL_741;
        }
LABEL_716:
        uint64_t v7 = *__error();
        goto LABEL_740;
      }
      if (v4 == 516)
      {
        *(void *)&valuePtr[0] = 0;
        DWORD2(v1027) = 8;
        v1028 = (UInt8 *)valuePtr;
        if (!Apple80211IOCTLGetWrapper())
        {
          *(_DWORD *)buffer = 0;
          int v74 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
          if (BYTE4(valuePtr[0]))
          {
            *(_DWORD *)buffer = 1;
            CFNumberRef v75 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, buffer);
            if (v75)
            {
              CFNumberRef v76 = v75;
              CFArrayAppendValue(v6, v75);
              CFRelease(v76);
            }
          }
          if ((BYTE4(valuePtr[0]) & 2) != 0)
          {
            *(_DWORD *)buffer = 2;
            CFNumberRef v77 = CFNumberCreate(*v74, kCFNumberSInt32Type, buffer);
            if (v77)
            {
              CFNumberRef v78 = v77;
              CFArrayAppendValue(v6, v77);
              CFRelease(v78);
            }
          }
          if ((BYTE4(valuePtr[0]) & 4) != 0)
          {
            *(_DWORD *)buffer = 3;
            CFNumberRef v79 = CFNumberCreate(*v74, kCFNumberSInt32Type, buffer);
            if (v79)
            {
              CFNumberRef v80 = v79;
              CFArrayAppendValue(v6, v79);
              CFRelease(v80);
            }
          }
          if (*(_DWORD *)buffer) {
            goto LABEL_739;
          }
          CFNumberRef v81 = CFNumberCreate(*v74, kCFNumberSInt32Type, buffer);
          if (!v81) {
            goto LABEL_739;
          }
          uint64_t v37 = v81;
          CFArrayAppendValue(v6, v81);
LABEL_737:
          CFNumberRef v66 = v37;
LABEL_738:
          CFRelease(v66);
          goto LABEL_739;
        }
        goto LABEL_169;
      }
      if (v4 != 552) {
        goto LABEL_10;
      }
    }
LABEL_6:
    if (v8 == 4)
    {
      if (!Apple80211IOCTLGetWrapper())
      {
        uint64_t v7 = 0;
        *(_DWORD *)CFDictionaryRef v6 = DWORD1(v1027);
        return v7;
      }
LABEL_8:
      if (*__error() == 102 || *__error() == 6) {
        goto LABEL_10;
      }
      if (*__error() != 22) {
        goto LABEL_716;
      }
    }
    goto LABEL_36;
  }
  switch(v4)
  {
    case 248:
      if (v8 != 0x2000) {
        goto LABEL_741;
      }
      bzero(v6, 0x2000uLL);
      DWORD2(v1027) = 0x2000;
      v1028 = (UInt8 *)v6;
      if (!Apple80211IOCTLGetWrapper()) {
        return 0;
      }
      goto LABEL_8;
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 262:
    case 263:
    case 264:
      goto LABEL_10;
    case 254:
LABEL_71:
      if (!v8) {
        goto LABEL_36;
      }
      bzero(valuePtr, 0x12D8uLL);
      v1028 = (UInt8 *)valuePtr;
      DWORD2(v1027) = 4824;
      if (Apple80211IOCTLGetWrapper()) {
        goto LABEL_711;
      }
      if (!DWORD1(valuePtr[0])) {
        goto LABEL_739;
      }
      unint64_t v44 = 0;
      CFAllocatorRef v45 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      __int16 v46 = &valuePtr[1];
      unsigned int v47 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
      __int16 v48 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
      break;
    case 255:
      uint64_t RoamProfile = _getUCMProfile(v5, (uint64_t)&v1026, v6);
      goto LABEL_355;
    case 256:
    case 258:
    case 259:
    case 261:
    case 265:
      goto LABEL_6;
    case 257:
      bzero(valuePtr, 0x210uLL);
      DWORD2(v1027) = 528;
      v1028 = (UInt8 *)valuePtr;
      CFNumberRef v68 = (const __CFNumber *)CFDictionaryGetValue(v6, @"APPLE80211KEY_AWD_TRAP_TYPE");
      if (!v68 || !CFNumberGetValue(v68, kCFNumberIntType, (char *)&v1027 + 4)) {
        goto LABEL_715;
      }
      if (Apple80211IOCTLGetWrapper())
      {
LABEL_711:
        if (*__error() == 102 || *__error() == 6) {
          goto LABEL_713;
        }
        if (*__error() != 22) {
          goto LABEL_716;
        }
LABEL_715:
        uint64_t v7 = 4294963396;
      }
      else
      {
        uint64_t RoamProfile = _storeTrapInfoDataInDict(v6, (uint64_t)valuePtr);
LABEL_355:
        uint64_t v7 = RoamProfile;
      }
      goto LABEL_740;
    case 260:
      uint64_t RoamProfile = _get2GChainDisable(v5, (uint64_t)&v1026, v6);
      goto LABEL_355;
    default:
      switch(v4)
      {
        case 336:
        case 353:
          goto LABEL_6;
        case 337:
          if (!v8) {
            goto LABEL_741;
          }
          memset(valuePtr, 0, 36);
          v1028 = (UInt8 *)valuePtr;
          DWORD2(v1027) = 36;
          if (Apple80211IOCTLGetWrapper()) {
            goto LABEL_169;
          }
          uint64_t RoamProfile = _setLQMConfigIntoDict((uint64_t)valuePtr, v6);
          goto LABEL_355;
        case 339:
          CFDictionaryRef v84 = (UInt8 *)malloc_type_malloc(0x19004uLL, 0x1000040E60EA1F3uLL);
          if (!v84) {
            goto LABEL_830;
          }
          unsigned int v10 = v84;
          bzero(v84, 0x19004uLL);
          DWORD2(v1027) = 102404;
          v1028 = v10;
          if (Apple80211RawGet(v5, (uint64_t)&v1026))
          {
LABEL_145:
            free(v10);
            goto LABEL_8;
          }
          uint64_t v947 = _storeTrapCrashTracerMiniDumpinDict(v6, (uint64_t)v10);
          free(v10);
          uint64_t v7 = v947;
          break;
        case 346:
          if (v8 != 2056) {
            goto LABEL_741;
          }
          bzero(valuePtr, 0x808uLL);
          DWORD2(v1027) = 2056;
          v1028 = (UInt8 *)valuePtr;
          if (Apple80211IOCTLGetWrapper()) {
            goto LABEL_711;
          }
          memcpy(v6, valuePtr, 0x808uLL);
          goto LABEL_739;
        case 347:
          if (!v8) {
            goto LABEL_741;
          }
          memset(valuePtr, 0, 28);
          DWORD2(v1027) = 28;
          v1028 = (UInt8 *)valuePtr;
          if (Apple80211IOCTLGetWrapper()) {
            goto LABEL_169;
          }
          CFAllocatorRef v85 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFNumberRef v86 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)valuePtr + 4);
          if (!v86) {
            goto LABEL_715;
          }
          CFNumberRef v87 = v86;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_ACTIVE_TO_DYNAMIC_TIMEOUT", v86);
          CFRelease(v87);
          CFNumberRef v88 = CFNumberCreate(v85, kCFNumberSInt32Type, (char *)valuePtr + 8);
          if (!v88) {
            goto LABEL_715;
          }
          CFNumberRef v89 = v88;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_DYNAMIC_TO_LOW_TIMEOUT", v88);
          CFRelease(v89);
          CFNumberRef v90 = CFNumberCreate(v85, kCFNumberSInt32Type, (char *)valuePtr + 12);
          if (!v90) {
            goto LABEL_715;
          }
          CFNumberRef v91 = v90;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_LOW_TO_DISABLE_INTERVAL", v90);
          CFRelease(v91);
          CFNumberRef v92 = CFNumberCreate(v85, kCFNumberSInt32Type, &valuePtr[1]);
          if (!v92) {
            goto LABEL_715;
          }
          CFNumberRef v93 = v92;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_RX_PACKET_THRESHOLD", v92);
          CFRelease(v93);
          CFNumberRef v94 = CFNumberCreate(v85, kCFNumberSInt16Type, (char *)&valuePtr[1] + 4);
          if (!v94) {
            goto LABEL_715;
          }
          CFNumberRef v95 = v94;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_BEACON_INTERVAL", v94);
          CFRelease(v95);
          CFNumberRef v96 = CFNumberCreate(v85, kCFNumberSInt8Type, (char *)&valuePtr[1] + 6);
          if (!v96) {
            goto LABEL_715;
          }
          CFNumberRef v97 = v96;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_PS_STATE", v96);
          CFRelease(v97);
          CFNumberRef v98 = CFNumberCreate(v85, kCFNumberSInt8Type, (char *)&valuePtr[1] + 7);
          if (!v98) {
            goto LABEL_715;
          }
          CFNumberRef v99 = v98;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_PS_ENABLE", v98);
          CFRelease(v99);
          CFNumberRef v100 = CFNumberCreate(v85, kCFNumberSInt8Type, (char *)&valuePtr[1] + 8);
          if (!v100) {
            goto LABEL_715;
          }
          uint64_t v37 = v100;
          Boolean v101 = @"SOFTAP_LOWPOWER_AWAKE_LEVEL";
          goto LABEL_736;
        case 348:
          *((_DWORD *)v6 + 12) = 0;
          *((_OWORD *)v6 + 1) = 0u;
          *((_OWORD *)v6 + 2) = 0u;
          *(_OWORD *)CFDictionaryRef v6 = 0u;
          int v83 = 52;
          goto LABEL_161;
        case 350:
          if (!v8) {
            goto LABEL_741;
          }
          memset(valuePtr, 0, 88);
          DWORD2(v1027) = 88;
          v1028 = (UInt8 *)valuePtr;
          if (Apple80211IOCTLGetWrapper()) {
            goto LABEL_169;
          }
          CFAllocatorRef v948 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFNumberRef v949 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, &valuePtr[1]);
          if (!v949) {
            goto LABEL_715;
          }
          CFNumberRef v950 = v949;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_STATS_TXPACKETS", v949);
          CFRelease(v950);
          CFNumberRef v951 = CFNumberCreate(v948, kCFNumberSInt64Type, (char *)valuePtr + 8);
          if (!v951) {
            goto LABEL_715;
          }
          CFNumberRef v952 = v951;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_STATS_RXPACKETS", v951);
          CFRelease(v952);
          CFNumberRef v953 = CFNumberCreate(v948, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8);
          if (!v953) {
            goto LABEL_715;
          }
          CFNumberRef v954 = v953;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_STATS_OFF_STATE_COUNT", v953);
          CFRelease(v954);
          CFNumberRef v955 = CFNumberCreate(v948, kCFNumberSInt64Type, &valuePtr[2]);
          if (!v955) {
            goto LABEL_715;
          }
          CFNumberRef v956 = v955;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_STATS_OFF_STATE_DURATION", v955);
          CFRelease(v956);
          CFNumberRef v957 = CFNumberCreate(v948, kCFNumberSInt32Type, (char *)&valuePtr[2] + 8);
          if (!v957) {
            goto LABEL_715;
          }
          CFNumberRef v958 = v957;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_STATS_ACTIVE_STATE_COUNT", v957);
          CFRelease(v958);
          CFNumberRef v959 = CFNumberCreate(v948, kCFNumberSInt64Type, &valuePtr[3]);
          if (!v959) {
            goto LABEL_715;
          }
          CFNumberRef v960 = v959;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_STATS_ACTIVE_STATE_DURATION", v959);
          CFRelease(v960);
          CFNumberRef v961 = CFNumberCreate(v948, kCFNumberSInt32Type, (char *)&valuePtr[3] + 8);
          if (!v961) {
            goto LABEL_715;
          }
          CFNumberRef v962 = v961;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_STATS_DYNAMIC_STATE_COUNT", v961);
          CFRelease(v962);
          CFNumberRef v963 = CFNumberCreate(v948, kCFNumberSInt64Type, &valuePtr[4]);
          if (!v963) {
            goto LABEL_715;
          }
          CFNumberRef v964 = v963;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_STATS_DYNAMIC_STATE_DURATION", v963);
          CFRelease(v964);
          CFNumberRef v965 = CFNumberCreate(v948, kCFNumberSInt32Type, (char *)&valuePtr[4] + 8);
          if (!v965) {
            goto LABEL_715;
          }
          CFNumberRef v966 = v965;
          CFDictionarySetValue(v6, @"SOFTAP_LOWPOWER_STATS_LOWPOWER_STATE_COUNT", v965);
          CFRelease(v966);
          CFNumberRef v967 = CFNumberCreate(v948, kCFNumberSInt64Type, &valuePtr[5]);
          if (!v967) {
            goto LABEL_715;
          }
          uint64_t v37 = v967;
          Boolean v101 = @"SOFTAP_LOWPOWER_STATS_LOWPOWER_STATE_DURATION";
LABEL_736:
          CFDictionarySetValue(v6, v101, v37);
          goto LABEL_737;
        default:
          goto LABEL_10;
      }
      goto LABEL_740;
  }
  while (1)
  {
    CFMutableDictionaryRef v49 = CFDictionaryCreateMutable(v45, 0, v47, v48);
    if (!v49) {
      return 4294963395;
    }
    __int16 v50 = v49;
    CFNumberRef v51 = CFNumberCreate(v45, kCFNumberSInt32Type, (char *)v46 - 4);
    if (!v51
      || (CFNumberRef v52 = v51,
          CFDictionarySetValue(v50, @"SUP_CHANNEL", v51),
          CFRelease(v52),
          (CFNumberRef v53 = CFNumberCreate(v45, kCFNumberSInt32Type, v46)) == 0))
    {
LABEL_779:
      CFRelease(v50);
      return 4294963395;
    }
    CFNumberRef v54 = v53;
    CFDictionarySetValue(v50, @"SUP_CHANNEL_FLAGS", v53);
    CFRelease(v54);
    CFArrayAppendValue(v6, v50);
    CFRelease(v50);
    ++v44;
    __int16 v46 = (_OWORD *)((char *)v46 + 12);
    if (v44 >= DWORD1(valuePtr[0])) {
      goto LABEL_739;
    }
  }
}

CFMutableArrayRef _getLQMSummary()
{
  MEMORY[0x270FA5388]();
  int v1 = v0;
  uint64_t v3 = v2;
  v57[673] = *MEMORY[0x263EF8340];
  bzero(&valuePtr, 0x15A0uLL);
  *(_DWORD *)(v3 + 24) = 5536;
  *(void *)(v3 + 32) = &valuePtr;
  if (Apple80211IOCTLGetWrapper()) {
    return (CFMutableArrayRef)*__error();
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt8Type, &valuePtr);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_CCA", v5);
  CFRelease(v5);
  CFNumberRef v6 = CFNumberCreate(v4, kCFNumberSInt8Type, v38);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RSSI", v6);
  CFRelease(v6);
  CFNumberRef v7 = CFNumberCreate(v4, kCFNumberSInt16Type, &v38[1]);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_SNR", v7);
  CFRelease(v7);
  CFNumberRef v8 = CFNumberCreate(v4, kCFNumberSInt64Type, &v40);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_TX_RETRIES", v8);
  CFRelease(v8);
  CFNumberRef v9 = CFNumberCreate(v4, kCFNumberSInt64Type, &v42);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_TX_FRAMES", v9);
  CFRelease(v9);
  CFNumberRef v10 = CFNumberCreate(v4, kCFNumberSInt64Type, &v41);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_TX_FAILS", v10);
  CFRelease(v10);
  CFNumberRef v11 = CFNumberCreate(v4, kCFNumberSInt64Type, &v43);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_FCS", v11);
  CFRelease(v11);
  CFNumberRef v12 = CFNumberCreate(v4, kCFNumberSInt64Type, &v44);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_PLCP", v12);
  CFRelease(v12);
  CFNumberRef v13 = CFNumberCreate(v4, kCFNumberSInt64Type, &v45);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_CRS", v13);
  CFRelease(v13);
  CFNumberRef v14 = CFNumberCreate(v4, kCFNumberSInt64Type, &v46);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_DUP", v14);
  CFRelease(v14);
  CFNumberRef v15 = CFNumberCreate(v4, kCFNumberSInt64Type, &v47);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_AMPDU_DUP", v15);
  CFRelease(v15);
  CFNumberRef v16 = CFNumberCreate(v4, kCFNumberSInt64Type, &v48);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_UCAST_REPLAY", v16);
  CFRelease(v16);
  CFNumberRef v17 = CFNumberCreate(v4, kCFNumberSInt64Type, &v49);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_UCAST_DECRYPT", v17);
  CFRelease(v17);
  CFNumberRef v18 = CFNumberCreate(v4, kCFNumberSInt64Type, &v50);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_MCAST_REPLAY", v18);
  CFRelease(v18);
  CFNumberRef v19 = CFNumberCreate(v4, kCFNumberSInt64Type, &v51);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_MCAST_DECRYPT", v19);
  CFRelease(v19);
  CFNumberRef v20 = CFNumberCreate(v4, kCFNumberSInt64Type, &v52);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_RETRIES", v20);
  CFRelease(v20);
  CFNumberRef v21 = CFNumberCreate(v4, kCFNumberSInt64Type, &v53);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_GOOD_PLCPS", v21);
  CFRelease(v21);
  CFNumberRef v22 = CFNumberCreate(v4, kCFNumberSInt64Type, &v54);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_UCAST_FRAMES", v22);
  CFRelease(v22);
  CFNumberRef v23 = CFNumberCreate(v4, kCFNumberSInt64Type, &v55);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_MCAST_FRAMES", v23);
  CFRelease(v23);
  CFNumberRef v24 = CFNumberCreate(v4, kCFNumberSInt64Type, &v56);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_TOTAL_FRAMES", v24);
  CFRelease(v24);
  CFNumberRef v25 = CFNumberCreate(v4, kCFNumberSInt64Type, v57);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_RTS_UCAST", v25);
  CFRelease(v25);
  CFNumberRef v26 = CFNumberCreate(v4, kCFNumberSInt64Type, v57);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_RX_RTS_UCAST", v26);
  CFRelease(v26);
  CFNumberRef v27 = CFNumberCreate(v4, kCFNumberIntType, &v38[3]);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_DATA_STALL_SCORE", v27);
  CFRelease(v27);
  CFNumberRef v28 = CFNumberCreate(v4, kCFNumberIntType, &v39);
  CFDictionarySetValue(v1, @"LQM_SUMMARY_NET_SCORE", v28);
  CFRelease(v28);
  CFMutableArrayRef result = CFArrayCreateMutable(v4, 0, MEMORY[0x263EFFF70]);
  if (result)
  {
    CFNumberRef v30 = result;
    for (uint64_t i = 0; i != 512; i += 32)
    {
      if (LOBYTE(v57[i + 1]))
      {
        CFStringRef v32 = CFStringCreateWithCString(v4, (const char *)&v57[i + 1], 0x8000100u);
        if (v32)
        {
          CFStringRef v33 = v32;
          CFArrayAppendValue(v30, v32);
          CFRelease(v33);
        }
      }
    }
    for (uint64_t j = 0; j != 160; j += 32)
    {
      if (LOBYTE(v57[j + 513]))
      {
        CFStringRef v35 = CFStringCreateWithCString(v4, (const char *)&v57[j + 513], 0x8000100u);
        if (v35)
        {
          CFStringRef v36 = v35;
          CFArrayAppendValue(v30, v35);
          CFRelease(v36);
        }
      }
    }
    CFDictionarySetValue(v1, @"LQM_SUMMARY_DBG_LOG_LIST", v30);
    CFRelease(v30);
    return 0;
  }
  return result;
}

void _dispatchCCAChangedEvent(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  if (a3 < 0x1C) {
    return;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return;
  }
  CFNumberRef v6 = Mutable;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, a2);
  if (v8)
  {
    CFNumberRef v9 = v8;
    CFDictionaryAddValue(v6, @"TIMESTAMP", v8);
    CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt16Type, a2 + 4);
    if (!v10)
    {
      DictFromCCAStats = v9;
LABEL_17:
      CFRelease(DictFromCCAStats);
      goto LABEL_18;
    }
    CFNumberRef v11 = v10;
    CFDictionaryAddValue(v6, @"CHANNEL", v10);
    CFNumberRef v12 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 6);
    if (v12)
    {
      CFDictionaryAddValue(v6, @"CCA", v12);
      int v14 = a2[8];
      uint64_t v13 = (uint64_t)(a2 + 8);
      if (v14)
      {
        DictFromCCAStats = _createDictFromCCAStats(v13);
        if (!DictFromCCAStats) {
          goto LABEL_14;
        }
        CFDictionaryAddValue(v6, @"CCA_STATS", DictFromCCAStats);
      }
      else
      {
        DictFromCCAStats = 0;
      }
      (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 60, v6, 8, *(void *)(a1 + 80));
    }
    else
    {
      DictFromCCAStats = 0;
    }
LABEL_14:
    CFRelease(v9);
    CFRelease(v11);
    if (v12) {
      CFRelease(v12);
    }
    if (!DictFromCCAStats) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_18:
  CFRelease(v6);
}

void _dispatchlqmChangedEvent(uint64_t a1, unsigned char *a2, unsigned int a3)
{
  if (a3 < 0x14C) {
    return;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return;
  }
  CFNumberRef v6 = Mutable;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (*a2)
  {
    CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, a2 + 4);
    if (!v8)
    {
      DictFromRoamState = v6;
LABEL_123:
      CFRelease(DictFromRoamState);
      return;
    }
    CFNumberRef cf = v8;
    CFDictionaryAddValue(v6, @"RSSI", v8);
  }
  else
  {
    CFNumberRef cf = 0;
  }
  if (!a2[8])
  {
    CFNumberRef v68 = 0;
    CFArrayRef v69 = 0;
    CFNumberRef v13 = 0;
    goto LABEL_19;
  }
  CFNumberRef v9 = a2 + 9;
  int v10 = a2[9];
  if (v10 == 128) {
    LOBYTE(v10) = 0;
  }
  *CFNumberRef v9 = v10;
  CFNumberRef v12 = a2 + 10;
  int v11 = a2[10];
  if (v11 == 128) {
    LOBYTE(v11) = 0;
  }
  unsigned char *v12 = v11;
  CFNumberRef v13 = CFNumberCreate(v7, kCFNumberSInt8Type, v9);
  CFNumberRef v68 = CFNumberCreate(v7, kCFNumberSInt8Type, v12);
  CFArrayRef v69 = CFArrayCreateMutable(v7, 0, MEMORY[0x263EFFF70]);
  if (v69)
  {
    if (v13) {
      CFArrayAppendValue(v69, v13);
    }
    if (v68) {
      CFArrayAppendValue(v69, v68);
    }
    CFDictionaryAddValue(v6, @"PER_CORE_RSSI", v69);
LABEL_19:
    if (a2[11])
    {
      CFNumberRef v14 = CFNumberCreate(v7, kCFNumberSInt16Type, a2 + 12);
      if (!v14)
      {
        CFNumberRef v66 = 0;
        goto LABEL_38;
      }
      CFNumberRef v66 = v14;
      CFDictionaryAddValue(v6, @"SNR", v14);
    }
    else
    {
      CFNumberRef v66 = 0;
    }
    if (!a2[14])
    {
      CFNumberRef v67 = 0;
LABEL_30:
      if (a2[188])
      {
        CFNumberRef v21 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 190);
        CFNumberRef value = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 191);
        CFNumberRef v25 = CFArrayCreateMutable(v7, 0, MEMORY[0x263EFFF70]);
        DictFromCCAStats = v25;
        if (!v25)
        {
          CFNumberRef v63 = 0;
          CFNumberRef v64 = 0;
          CFNumberRef v61 = 0;
          CFNumberRef v62 = 0;
          CFNumberRef v59 = 0;
          CFNumberRef v60 = 0;
          CFNumberRef v56 = 0;
          CFNumberRef v57 = 0;
          CFNumberRef v54 = 0;
          CFNumberRef v55 = 0;
          CFNumberRef v51 = 0;
          CFNumberRef v52 = 0;
          CFNumberRef v58 = 0;
          CFNumberRef v53 = 0;
          CFNumberRef v50 = 0;
          CFNumberRef v17 = 0;
          CFNumberRef v18 = 0;
          CFNumberRef v65 = 0;
LABEL_65:
          DictFromRoamState = 0;
          goto LABEL_66;
        }
        if (v21) {
          CFArrayAppendValue(v25, v21);
        }
        if (value) {
          CFArrayAppendValue(DictFromCCAStats, value);
        }
        CFDictionaryAddValue(v6, @"PER_CORE_NOISE", DictFromCCAStats);
      }
      else
      {
        DictFromCCAStats = 0;
        CFNumberRef v21 = 0;
        CFNumberRef value = 0;
      }
      CFNumberRef v65 = DictFromCCAStats;
      if (a2[18])
      {
        CFNumberRef v26 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 19);
        if (!v26)
        {
          CFNumberRef v64 = 0;
          goto LABEL_56;
        }
        CFNumberRef v64 = v26;
        CFDictionaryAddValue(v6, @"CCA", v26);
      }
      else
      {
        CFNumberRef v64 = 0;
      }
      CFNumberRef v27 = CFNumberCreate(v7, kCFNumberIntType, a2 + 20);
      if (v27)
      {
        CFNumberRef v63 = v27;
        CFDictionaryAddValue(v6, @"TXFAIL", v27);
        CFNumberRef v28 = CFNumberCreate(v7, kCFNumberIntType, a2 + 24);
        if (v28)
        {
          CFNumberRef v62 = v28;
          CFDictionaryAddValue(v6, @"TXRETRANS", v28);
          CFNumberRef v29 = CFNumberCreate(v7, kCFNumberIntType, a2 + 28);
          if (v29)
          {
            CFNumberRef v61 = v29;
            CFDictionaryAddValue(v6, @"TXFRAMES", v29);
            CFNumberRef v30 = CFNumberCreate(v7, kCFNumberIntType, a2 + 64);
            if (v30)
            {
              CFNumberRef v60 = v30;
              CFDictionaryAddValue(v6, @"TXRATE", v30);
              CFNumberRef v31 = CFNumberCreate(v7, kCFNumberIntType, a2 + 68);
              if (v31)
              {
                CFNumberRef v58 = v31;
                CFDictionaryAddValue(v6, @"TXFBRATE", v31);
                if (!a2[49])
                {
                  CFNumberRef v59 = 0;
                  CFNumberRef v57 = 0;
                  CFNumberRef v55 = 0;
LABEL_129:
                  CFNumberRef v35 = CFNumberCreate(v7, kCFNumberIntType, a2 + 36);
                  if (v35)
                  {
                    CFNumberRef v56 = v35;
                    CFDictionaryAddValue(v6, @"RXFRAMES", v35);
                    CFNumberRef v36 = CFNumberCreate(v7, kCFNumberIntType, a2 + 32);
                    if (v36)
                    {
                      CFNumberRef v54 = v36;
                      CFDictionaryAddValue(v6, @"RXRETRYFRMS", v36);
                      CFNumberRef v37 = CFNumberCreate(v7, kCFNumberIntType, a2 + 72);
                      if (v37)
                      {
                        CFNumberRef v53 = v37;
                        CFDictionaryAddValue(v6, @"RXRATE", v37);
                        if (a2[48])
                        {
                          CFNumberRef v38 = CFNumberCreate(v7, kCFNumberIntType, a2 + 40);
                          if (v38)
                          {
                            CFNumberRef v52 = v38;
                            CFDictionaryAddValue(v6, @"RXBEACONFRMS", v38);
                            CFNumberRef v39 = CFNumberCreate(v7, kCFNumberIntType, a2 + 44);
                            if (v39)
                            {
                              CFNumberRef v51 = v39;
                              CFDictionaryAddValue(v6, @"RXBEACONSCHED", v39);
                              goto LABEL_143;
                            }
                          }
                          else
                          {
                            CFNumberRef v52 = 0;
                          }
                          CFNumberRef v51 = 0;
                          goto LABEL_62;
                        }
                        CFNumberRef v51 = 0;
                        CFNumberRef v52 = 0;
LABEL_143:
                        if (!a2[80])
                        {
                          CFNumberRef v50 = 0;
                          CFNumberRef v17 = 0;
                          CFNumberRef v18 = 0;
                          goto LABEL_151;
                        }
                        CFNumberRef v40 = CFNumberCreate(v7, kCFNumberIntType, a2 + 82);
                        if (v40)
                        {
                          CFNumberRef v50 = v40;
                          CFDictionaryAddValue(v6, @"QBSS_STA_COUNT", v40);
                          CFNumberRef v17 = CFNumberCreate(v7, kCFNumberIntType, a2 + 84);
                          if (v17)
                          {
                            CFDictionaryAddValue(v6, @"QBSS_CHAN_UTIL", v17);
                            CFNumberRef v18 = CFNumberCreate(v7, kCFNumberIntType, a2 + 88);
                            if (v18)
                            {
                              CFDictionaryAddValue(v6, @"QBSS_AAC", v18);
LABEL_151:
                              if (a2[94])
                              {
                                DictFromRoamState = _createDictFromRoamState(a2 + 92);
                                if (!DictFromRoamState)
                                {
                                  DictFromCCAStats = 0;
                                  goto LABEL_66;
                                }
                                CFDictionaryAddValue(v6, @"ROAM_STATE", DictFromRoamState);
                                CFRelease(DictFromRoamState);
                              }
                              if (a2[168])
                              {
                                DictFromCCAStats = _createDictFromCCAStats((uint64_t)(a2 + 168));
                                if (DictFromCCAStats) {
                                  CFDictionaryAddValue(v6, @"CCA_STATS", DictFromCCAStats);
                                }
                              }
                              else
                              {
                                DictFromCCAStats = 0;
                              }
                              if (!a2[192])
                              {
                                DictFromRoamState = 0;
LABEL_170:
                                CFNumberRef v24 = v68;
                                if (a2[328])
                                {
                                  uint64_t v43 = (const void **)MEMORY[0x263EFFB40];
                                  if (!a2[329]) {
                                    uint64_t v43 = (const void **)MEMORY[0x263EFFB38];
                                  }
                                  CFDictionaryAddValue(v6, @"TXRX_STATS_VALID", *v43);
                                }
                                (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 39, v6, 8, *(void *)(a1 + 80));
                                CFNumberRef v23 = cf;
                                goto LABEL_67;
                              }
                              uint64_t v46 = a2 + 192;
                              DictFromRoamState = _createDictFromMloOpStats((uint64_t)(a2 + 192));
                              if (DictFromRoamState) {
                                CFDictionaryAddValue(v6, @"MLO_OP_STATS", DictFromRoamState);
                              }
                              if (!*v46) {
                                goto LABEL_170;
                              }
                              CFArrayRef theArray = CFArrayCreateMutable(v7, 0, MEMORY[0x263EFFF70]);
                              if (theArray)
                              {
                                if (*v46)
                                {
                                  unint64_t v47 = 0;
                                  uint64_t v41 = (uint64_t)(a2 + 208);
                                  do
                                  {
                                    DictFromMLOStats = _createDictFromMLOStats(v41);
                                    if (DictFromMLOStats)
                                    {
                                      uint64_t v45 = DictFromMLOStats;
                                      CFArrayAppendValue(theArray, DictFromMLOStats);
                                      CFRelease(v45);
                                    }
                                    v41 += 40;
                                    ++v47;
                                  }
                                  while (v47 < *v46);
                                }
                                CFDictionaryAddValue(v6, @"MLO_LQM_STATS", theArray);
                                CFRelease(theArray);
                                goto LABEL_170;
                              }
LABEL_66:
                              CFNumberRef v23 = cf;
                              CFNumberRef v24 = v68;
LABEL_67:
                              CFNumberRef v22 = value;
LABEL_68:
                              CFNumberRef v19 = v69;
                              if (!v23) {
                                goto LABEL_70;
                              }
                              goto LABEL_69;
                            }
                            goto LABEL_64;
                          }
LABEL_63:
                          CFNumberRef v18 = 0;
LABEL_64:
                          DictFromCCAStats = 0;
                          goto LABEL_65;
                        }
LABEL_62:
                        CFNumberRef v50 = 0;
                        CFNumberRef v17 = 0;
                        goto LABEL_63;
                      }
                      goto LABEL_141;
                    }
LABEL_140:
                    CFNumberRef v54 = 0;
LABEL_141:
                    CFNumberRef v51 = 0;
                    CFNumberRef v52 = 0;
                    goto LABEL_61;
                  }
LABEL_139:
                  CFNumberRef v56 = 0;
                  goto LABEL_140;
                }
                CFNumberRef v32 = CFNumberCreate(v7, kCFNumberIntType, a2 + 52);
                if (v32)
                {
                  CFNumberRef v59 = v32;
                  CFDictionaryAddValue(v6, @"TXFWFAIL", v32);
                  CFNumberRef v33 = CFNumberCreate(v7, kCFNumberIntType, a2 + 56);
                  if (v33)
                  {
                    CFNumberRef v57 = v33;
                    CFDictionaryAddValue(v6, @"TXFWRETRANS", v33);
                    CFNumberRef v34 = CFNumberCreate(v7, kCFNumberIntType, a2 + 60);
                    if (v34)
                    {
                      CFNumberRef v55 = v34;
                      CFDictionaryAddValue(v6, @"TXFWFRAMES", v34);
                      goto LABEL_129;
                    }
LABEL_138:
                    CFNumberRef v55 = 0;
                    goto LABEL_139;
                  }
                }
                else
                {
                  CFNumberRef v59 = 0;
                }
                CFNumberRef v57 = 0;
                goto LABEL_138;
              }
              CFNumberRef v59 = 0;
LABEL_60:
              CFNumberRef v56 = 0;
              CFNumberRef v57 = 0;
              CFNumberRef v54 = 0;
              CFNumberRef v55 = 0;
              CFNumberRef v51 = 0;
              CFNumberRef v52 = 0;
              CFNumberRef v58 = 0;
LABEL_61:
              CFNumberRef v53 = 0;
              goto LABEL_62;
            }
LABEL_59:
            CFNumberRef v59 = 0;
            CFNumberRef v60 = 0;
            goto LABEL_60;
          }
LABEL_58:
          CFNumberRef v61 = 0;
          goto LABEL_59;
        }
LABEL_57:
        CFNumberRef v62 = 0;
        goto LABEL_58;
      }
LABEL_56:
      CFNumberRef v63 = 0;
      goto LABEL_57;
    }
    CFNumberRef v16 = CFNumberCreate(v7, kCFNumberSInt16Type, a2 + 16);
    if (v16)
    {
      CFNumberRef v67 = v16;
      CFDictionaryAddValue(v6, @"NOISE", v16);
      goto LABEL_30;
    }
LABEL_38:
    CFNumberRef v67 = 0;
    CFNumberRef v63 = 0;
    CFNumberRef v64 = 0;
    CFNumberRef v61 = 0;
    CFNumberRef v62 = 0;
    CFNumberRef v59 = 0;
    CFNumberRef v60 = 0;
    CFNumberRef v56 = 0;
    CFNumberRef v57 = 0;
    CFNumberRef v54 = 0;
    CFNumberRef v55 = 0;
    CFNumberRef v51 = 0;
    CFNumberRef v52 = 0;
    CFNumberRef v58 = 0;
    CFNumberRef v53 = 0;
    CFNumberRef v50 = 0;
    CFNumberRef v17 = 0;
    CFNumberRef v18 = 0;
    DictFromCCAStats = 0;
    CFNumberRef v65 = 0;
    CFNumberRef v21 = 0;
    CFNumberRef v22 = 0;
    DictFromRoamState = 0;
    CFNumberRef v23 = cf;
    CFNumberRef v24 = v68;
    goto LABEL_68;
  }
  CFNumberRef v66 = 0;
  CFNumberRef v67 = 0;
  CFNumberRef v63 = 0;
  CFNumberRef v64 = 0;
  CFNumberRef v61 = 0;
  CFNumberRef v62 = 0;
  CFNumberRef v59 = 0;
  CFNumberRef v60 = 0;
  CFNumberRef v56 = 0;
  CFNumberRef v57 = 0;
  CFNumberRef v54 = 0;
  CFNumberRef v55 = 0;
  CFNumberRef v51 = 0;
  CFNumberRef v52 = 0;
  CFNumberRef v58 = 0;
  CFNumberRef v53 = 0;
  CFNumberRef v50 = 0;
  CFNumberRef v17 = 0;
  CFNumberRef v18 = 0;
  CFNumberRef v19 = 0;
  DictFromCCAStats = 0;
  CFNumberRef v65 = 0;
  CFNumberRef v21 = 0;
  CFNumberRef v22 = 0;
  DictFromRoamState = 0;
  CFNumberRef v23 = cf;
  CFNumberRef v24 = v68;
  if (cf) {
LABEL_69:
  }
    CFRelease(v23);
LABEL_70:
  if (v19) {
    CFRelease(v19);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v66) {
    CFRelease(v66);
  }
  if (v67) {
    CFRelease(v67);
  }
  if (v64) {
    CFRelease(v64);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (v62) {
    CFRelease(v62);
  }
  if (v61) {
    CFRelease(v61);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v58) {
    CFRelease(v58);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v53) {
    CFRelease(v53);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (v50) {
    CFRelease(v50);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v18) {
    CFRelease(v18);
  }
  CFRelease(v6);
  if (DictFromCCAStats) {
    CFRelease(DictFromCCAStats);
  }
  if (v65) {
    CFRelease(v65);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (DictFromRoamState) {
    goto LABEL_123;
  }
}

__CFDictionary *_createDictFromCCAStats(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return Mutable;
  }
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberSInt16Type, (const void *)(a1 + 2));
  if (!v4) {
    return Mutable;
  }
  CFNumberRef v5 = v4;
  CFDictionaryAddValue(Mutable, @"CCA_TIMESTAMP_TOTAL", v4);
  CFNumberRef v6 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 4));
  if (!v6)
  {
    CFNumberRef v16 = v5;
LABEL_35:
    CFRelease(v16);
    return Mutable;
  }
  CFNumberRef v20 = v6;
  CFDictionaryAddValue(Mutable, @"CCA_SELF_TOTAL", v6);
  CFNumberRef v7 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 5));
  CFNumberRef cf = v5;
  CFNumberRef v19 = v7;
  if (!v7
    || (CFDictionaryAddValue(Mutable, @"CCA_OTHER_TOTAL", v7),
        (CFNumberRef v8 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 6))) == 0))
  {
    CFNumberRef v18 = 0;
    CFNumberRef v9 = 0;
    goto LABEL_38;
  }
  CFNumberRef v18 = v8;
  CFDictionaryAddValue(Mutable, @"CCA_INTERFERENCE_TOTAL", v8);
  CFNumberRef v9 = CFNumberCreate(v2, kCFNumberSInt16Type, (const void *)(a1 + 8));
  if (!v9)
  {
LABEL_38:
    CFNumberRef v10 = 0;
    goto LABEL_39;
  }
  CFDictionaryAddValue(Mutable, @"CCA_TIMESTAMP_SLEEP", v9);
  CFNumberRef v10 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 10));
  if (!v10)
  {
LABEL_39:
    CFNumberRef v11 = 0;
    goto LABEL_40;
  }
  CFDictionaryAddValue(Mutable, @"CCA_SELF_SLEEP", v10);
  CFNumberRef v11 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 11));
  if (!v11)
  {
LABEL_40:
    CFNumberRef v12 = 0;
    goto LABEL_41;
  }
  CFDictionaryAddValue(Mutable, @"CCA_OTHER_SLEEP", v11);
  CFNumberRef v12 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 12));
  if (!v12)
  {
LABEL_41:
    CFNumberRef v13 = 0;
    goto LABEL_42;
  }
  CFDictionaryAddValue(Mutable, @"CCA_INTERFERENCE_SLEEP", v12);
  CFNumberRef v13 = CFNumberCreate(v2, kCFNumberSInt16Type, (const void *)(a1 + 14));
  if (!v13)
  {
LABEL_42:
    CFNumberRef v14 = 0;
    goto LABEL_43;
  }
  CFDictionaryAddValue(Mutable, @"CCA_TIMESTAMP_WAKE", v13);
  CFNumberRef v14 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 16));
  if (!v14)
  {
LABEL_43:
    CFNumberRef v15 = 0;
    goto LABEL_44;
  }
  CFDictionaryAddValue(Mutable, @"CCA_SELF_WAKE", v14);
  CFNumberRef v15 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 17));
  if (!v15)
  {
LABEL_44:
    CFNumberRef v16 = 0;
    goto LABEL_16;
  }
  CFDictionaryAddValue(Mutable, @"CCA_OTHER_WAKE", v15);
  CFNumberRef v16 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 18));
  if (v16) {
    CFDictionaryAddValue(Mutable, @"CCA_INTERFERENCE_WAKE", v16);
  }
LABEL_16:
  CFRelease(cf);
  CFRelease(v20);
  if (v19) {
    CFRelease(v19);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v16) {
    goto LABEL_35;
  }
  return Mutable;
}

uint64_t Apple80211SetWithIOCTL()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  int v5 = v4;
  uint64_t v6 = v0;
  uint64_t v380 = *MEMORY[0x263EF8340];
  CFNumberRef v379 = 0;
  long long v378 = 0u;
  long long v377 = 0u;
  CFNumberRef value = (void *)0xAAAAAAAAAAAAAAAALL;
  if (!v0 || (*(_DWORD *)v0 & 0x80000000) != 0 || !*(unsigned char *)(v0 + 4))
  {
LABEL_772:
    uint64_t LQMConfigFromDict = 4294963396;
    goto LABEL_848;
  }
  int v7 = v3;
  CFBooleanRef v8 = v2;
  unsigned int v9 = v1;
  CFNumberRef v379 = 0;
  long long v378 = 0uLL;
  long long v377 = 0uLL;
  __strlcpy_chk();
  LODWORD(v378) = v5;
  uint64_t LQMConfigFromDict = 4294963393;
  if (v5 > 336)
  {
    switch(v5)
    {
      case 358:
      case 486:
      case 511:
      case 512:
      case 513:
      case 519:
      case 520:
        if (!v8) {
          goto LABEL_772;
        }
        LOBYTE(valuePtr[0]) = CFBooleanGetValue(v8);
        goto LABEL_89;
      case 359:
      case 360:
      case 361:
      case 362:
      case 364:
      case 366:
      case 367:
      case 369:
      case 370:
      case 371:
      case 373:
      case 374:
      case 375:
      case 376:
      case 377:
      case 378:
      case 379:
      case 383:
      case 384:
      case 385:
      case 386:
      case 387:
      case 389:
      case 390:
      case 391:
      case 393:
      case 395:
      case 396:
      case 397:
      case 398:
      case 400:
      case 401:
      case 402:
      case 406:
      case 410:
      case 411:
      case 414:
      case 415:
      case 416:
      case 417:
      case 418:
      case 419:
      case 421:
      case 423:
      case 424:
      case 425:
      case 426:
      case 427:
      case 428:
      case 429:
      case 430:
      case 431:
      case 432:
      case 433:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 444:
      case 445:
      case 446:
      case 447:
      case 449:
      case 450:
      case 451:
      case 452:
      case 454:
      case 455:
      case 456:
      case 457:
      case 458:
      case 460:
      case 461:
      case 462:
      case 463:
      case 464:
      case 465:
      case 466:
      case 467:
      case 468:
      case 474:
      case 475:
      case 476:
      case 477:
      case 478:
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 502:
      case 504:
      case 505:
      case 506:
      case 515:
      case 517:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 533:
      case 534:
      case 535:
      case 549:
      case 550:
        goto LABEL_848;
      case 363:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || !v7) {
          goto LABEL_848;
        }
        *(_DWORD *)&buffer[12] = 0;
        *(void *)&buffer[4] = 0;
        *(_DWORD *)buffer = 1;
        CFNumberRef v166 = (void *)CFDictionaryGetValue(v8, @"USB_HOST_NOTIFICATION_SEQUENCE_NUM");
        CFNumberRef value = v166;
        if (!v166) {
          goto LABEL_847;
        }
        if (!CFNumberGetValue((CFNumberRef)v166, kCFNumberSInt32Type, &buffer[4])) {
          goto LABEL_814;
        }
        CFNumberRef v167 = (void *)CFDictionaryGetValue(v8, @"USB_HOST_NOTIFICATION_USB_CHANGE");
        CFNumberRef value = v167;
        if (!v167) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v167, kCFNumberSInt32Type, &buffer[8])) {
          goto LABEL_814;
        }
        CFNumberRef v168 = (void *)CFDictionaryGetValue(v8, @"USB_HOST_NOTIFICATION_USB_PRESENCE");
        CFNumberRef value = v168;
        if (!v168 || !CFNumberGetValue((CFNumberRef)v168, kCFNumberSInt32Type, &buffer[12])) {
          goto LABEL_814;
        }
        DWORD2(v378) = 16;
        CFNumberRef v379 = buffer;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(valuePtr[0]) = 136315394;
          *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = 14169;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d APPLE80211_IOC_USB_HOST_NOTIFICATION \n", (uint8_t *)valuePtr, 0x12u);
        }
        goto LABEL_809;
      case 365:
      case 394:
      case 407:
      case 422:
      case 459:
        goto LABEL_10;
      case 368:
        LODWORD(valuePtr[0]) = *(_DWORD *)v8;
        WORD2(valuePtr[0]) = *((_WORD *)v8 + 2);
        int v14 = 6;
        goto LABEL_467;
      case 372:
        if (!v8) {
          goto LABEL_772;
        }
        *(_DWORD *)buffer = 0;
        memset(valuePtr, 0, 43);
        CFAllocatorRef v169 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceBssidBlacklistMode");
        CFNumberRef value = v169;
        if (!v169) {
          goto LABEL_814;
        }
        CFNumberGetValue((CFNumberRef)v169, kCFNumberSInt32Type, buffer);
        CFArrayRef v170 = (const __CFArray *)CFDictionaryGetValue(v8, @"IO80211InterfaceBssidBlacklistBssids");
        if (!v170) {
          goto LABEL_800;
        }
        CFArrayRef v171 = v170;
        if (CFArrayGetCount(v170) >= 7uLL)
        {
          LOBYTE(valuePtr[0]) = 7;
        }
        else
        {
          LOBYTE(valuePtr[0]) = CFArrayGetCount(v171);
          if (!LOBYTE(valuePtr[0])) {
            goto LABEL_800;
          }
        }
        unint64_t v349 = 0;
        CFNumberRef v350 = (UInt8 *)valuePtr + 1;
        do
        {
          CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v171, v349);
          v387.length = CFDataGetLength(ValueAtIndex);
          v387.location = 0;
          CFDataGetBytes(ValueAtIndex, v387, v350);
          ++v349;
          v350 += 6;
        }
        while (v349 < LOBYTE(valuePtr[0]));
LABEL_800:
        int v69 = 43;
        goto LABEL_801;
      case 380:
        *(_DWORD *)buffer = 1;
        *(_DWORD *)&buffer[4] = v9;
        *(void *)&buffer[8] = 0xAAAA000000000000;
        if (v9)
        {
          CFStringRef v172 = (const __CFString *)CFDictionaryGetValue(v8, @"RANGING_TOKEN_ID");
          if (v172)
          {
            CFStringRef v173 = v172;
            CFTypeID v174 = CFGetTypeID(v172);
            if (v174 == CFStringGetTypeID())
            {
              memset(valuePtr, 170, 20);
              CFStringGetCString(v173, (char *)valuePtr, 20, 0x8000100u);
              strlen((const char *)valuePtr);
              __memcpy_chk();
            }
            else
            {
              if (CFDataGetLength((CFDataRef)v173) > 6) {
                v352.length = 6;
              }
              else {
                v352.length = (unsigned __int16)CFDataGetLength((CFDataRef)v173);
              }
              v352.location = 0;
              CFDataGetBytes((CFDataRef)v173, v352, (UInt8 *)&buffer[8]);
            }
          }
        }
        *(_DWORD *)buffer = 1;
        *(_DWORD *)&buffer[4] = v9;
        DWORD2(v378) = 16;
        CFNumberRef v379 = buffer;
        goto LABEL_845;
      case 381:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || !v7) {
          goto LABEL_848;
        }
        *(void *)((char *)valuePtr + 4) = 0;
        LODWORD(valuePtr[0]) = 1;
        CFNumberRef v175 = (void *)CFDictionaryGetValue(v8, @"APPLE80211KEY_RANGING_FOLLOW_MODE");
        CFNumberRef value = v175;
        if (v175 && !CFNumberGetValue((CFNumberRef)v175, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        uint64_t v176 = (void *)CFDictionaryGetValue(v8, @"APPLE80211KEY_RANGING_FOLLOW_MODE_BAND");
        CFNumberRef value = v176;
        if (v176)
        {
          if (!CFNumberGetValue((CFNumberRef)v176, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
            goto LABEL_814;
          }
        }
        DWORD2(v378) = 12;
        CFNumberRef v379 = (char *)valuePtr;
        goto LABEL_845;
      case 382:
        BOOL v177 = 1;
        goto LABEL_415;
      case 388:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || !v7) {
          goto LABEL_848;
        }
        *(_OWORD *)((char *)&valuePtr[2] + 8) = 0u;
        *(_OWORD *)((char *)&valuePtr[1] + 8) = 0u;
        *(_OWORD *)((char *)valuePtr + 8) = 0u;
        LODWORD(valuePtr[0]) = 1;
        DWORD1(valuePtr[0]) = CFArrayGetCount(v8);
        if ((DWORD1(valuePtr[0]) - 1) > 3) {
          return LQMConfigFromDict;
        }
        CFIndex v178 = 0;
        CFAllocatorRef v179 = (char *)valuePtr + 12;
        do
        {
          CFNumberRef v180 = (void *)CFArrayGetValueAtIndex(v8, v178);
          CFNumberRef value = v180;
          if (v180) {
            CFNumberGetValue((CFNumberRef)v180, kCFNumberSInt32Type, v179);
          }
          ++v178;
          v179 += 12;
        }
        while (v178 < SDWORD1(valuePtr[0]));
        int v40 = 56;
        goto LABEL_477;
      case 392:
        *(void *)&valuePtr[0] = 1;
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || v7 != 4) {
          goto LABEL_847;
        }
        DWORD1(valuePtr[0]) = *(_DWORD *)v8;
        goto LABEL_393;
      case 399:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(valuePtr[0]) = 136315394;
          *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = 11858;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d Processing APPLE80211_IOC_REASSOCIATE_WITH_CORECAPTURE\n", (uint8_t *)valuePtr, 0x12u);
        }
        LODWORD(valuePtr[0]) = 1;
        *(_OWORD *)((char *)valuePtr + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[1] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[2] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[3] + 4) = 0u;
        if (!v8) {
          goto LABEL_820;
        }
        CFStringRef v181 = (const __CFString *)CFDictionaryGetValue(v8, @"REASSOC_CC_TRIGGER");
        CFStringRef v182 = v181;
        if (!v181 || CFStringGetLength(v181) >= 65)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buffer = 138412290;
            *(void *)&buffer[4] = v182;
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "APPLE80211_IOC_REASSOCIATE_WITH_CORECAPTURE: Validation failed... triggerString:%@", (uint8_t *)buffer, 0xCu);
          }
          return 4294963396;
        }
        CFStringGetCStringPtr(v182, 0);
        CFStringGetLength(v182);
        __memcpy_chk();
LABEL_820:
        DWORD2(v378) = 68;
        CFNumberRef v379 = (char *)valuePtr;
        if (Apple80211IOCTLSetWrapper()) {
          goto LABEL_810;
        }
        uint64_t LQMConfigFromDict = 0;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_847;
        }
        *(_DWORD *)buffer = 136315394;
        *(void *)&buffer[4] = "Apple80211SetWithIOCTL";
        *(_WORD *)&buffer[12] = 1024;
        *(_DWORD *)&buffer[14] = 0;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Processed APPLE80211_IOC_REASSOCIATE_WITH_CORECAPTURE Ioctl error:%u", (uint8_t *)buffer, 0x12u);
        goto LABEL_846;
      case 403:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || !v7) {
          goto LABEL_848;
        }
        buffer[0] = 0;
        memset(valuePtr, 0, 18);
        CFNumberRef v183 = (void *)CFDictionaryGetValue(v8, @"HostSoftapNanCapabilityFlag");
        CFNumberRef value = v183;
        if (v183)
        {
          CFTypeID v184 = CFGetTypeID(v183);
          if (v184 == CFNumberGetTypeID())
          {
            if (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, buffer)) {
              LOBYTE(valuePtr[0]) = buffer[0];
            }
            if (buffer[0] == 1)
            {
              CFStringRef v185 = (const __CFString *)CFDictionaryGetValue(v8, @"HostSoftapNanServiceName");
              CFStringGetCStringPtr(v185, 0x8000100u);
              CFStringGetLength(v185);
              __memcpy_chk();
            }
          }
        }
        int v53 = 18;
        goto LABEL_373;
      case 404:
        syslog(3, "[WiFiTimeSync] %s %s:%d APPLE80211_IOC_ENABLE_PACKET_TS\n");
        goto LABEL_376;
      case 405:
        syslog(3, "[WiFiTimeSync] %s %s:%d APPLE80211_IOC_DISABLE_PACKET_TS\n");
LABEL_376:
        if (!Apple80211RawSet()) {
          return 0;
        }
        goto LABEL_769;
      case 408:
        *(void *)((char *)valuePtr + 12) = 0;
        *(void *)((char *)valuePtr + 4) = 0;
        *(void *)((char *)&valuePtr[1] + 4) = 0;
        LODWORD(valuePtr[0]) = 1;
        uint64_t SensingRequest = _getSensingRequest(v8, (uint64_t)valuePtr);
        if (SensingRequest) {
          goto LABEL_162;
        }
        DWORD2(v378) = 28;
        CFNumberRef v379 = (char *)valuePtr;
        if (Apple80211IOCTLSetWrapper()) {
          goto LABEL_810;
        }
        unsigned int v186 = (pthread_mutex_t *)(v6 + 1736);
        pthread_mutex_lock((pthread_mutex_t *)(v6 + 1736));
        if (!*(unsigned char *)(v6 + 1800)) {
          *(unsigned char *)(v6 + 1800) = 1;
        }
LABEL_385:
        pthread_mutex_unlock(v186);
        goto LABEL_846;
      case 409:
        *(void *)((char *)valuePtr + 12) = 0;
        *(void *)((char *)valuePtr + 4) = 0;
        *(void *)((char *)&valuePtr[1] + 4) = 0;
        LODWORD(valuePtr[0]) = 1;
        DWORD2(v378) = 28;
        CFNumberRef v379 = (char *)valuePtr;
        if (Apple80211IOCTLSetWrapper()) {
          goto LABEL_735;
        }
        unsigned int v186 = (pthread_mutex_t *)(v6 + 1736);
        pthread_mutex_lock((pthread_mutex_t *)(v6 + 1736));
        if (!*(unsigned char *)(v6 + 1800)) {
          *(unsigned char *)(v6 + 1800) = 0;
        }
        goto LABEL_385;
      case 412:
      case 413:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || !v7) {
          goto LABEL_848;
        }
        memset(buffer, 170, 18);
        memset(valuePtr, 0, 39);
        CFStringRef v36 = (const __CFString *)CFDictionaryGetValue(v8, @"SSID");
        CFStringGetCStringPtr(v36, 0x8000100u);
        CFStringGetLength(v36);
        __memcpy_chk();
        LODWORD(valuePtr[2]) = CFStringGetLength(v36);
        CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(v8, @"BSSID");
        if (!v37) {
          goto LABEL_814;
        }
        if (!CFStringGetCString(v37, buffer, 18, 0x8000100u)) {
          goto LABEL_814;
        }
        CFNumberRef v38 = ether_aton(buffer);
        if (!v38) {
          goto LABEL_814;
        }
        int v39 = *(_DWORD *)v38->octet;
        *(_WORD *)((char *)&valuePtr[2] + 5) = *(_WORD *)&v38->octet[4];
        *(_DWORD *)((char *)&valuePtr[2] + 1) = v39;
        int v40 = 39;
        goto LABEL_477;
      case 420:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || !v7) {
          goto LABEL_848;
        }
        LOBYTE(valuePtr[0]) = 0;
        buffer[0] = 0;
        uint64_t v187 = (void *)CFDictionaryGetValue(v8, @"HostApEnabled");
        CFNumberRef value = v187;
        if (v187)
        {
          CFTypeID v188 = CFGetTypeID(v187);
          if (v188 == CFNumberGetTypeID())
          {
            if (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, buffer)) {
              LOBYTE(valuePtr[0]) = buffer[0];
            }
          }
        }
        DWORD2(v378) = 1;
        CFNumberRef v379 = (char *)valuePtr;
        goto LABEL_393;
      case 448:
        if (!v8) {
          goto LABEL_772;
        }
        CFBooleanRef v189 = v8;
        goto LABEL_438;
      case 453:
        if (!v8) {
          goto LABEL_772;
        }
        LOBYTE(valuePtr[0]) = 0;
        v190 = (void *)CFDictionaryGetValue(v8, @"APPLE80211KEY_REGKEY_WIFI_VOICE_IND_STATE");
        CFNumberRef value = v190;
        if (!v190 || !CFNumberGetValue((CFNumberRef)v190, kCFNumberShortType, valuePtr)) {
          goto LABEL_814;
        }
        int v191 = 1;
        goto LABEL_705;
      case 469:
        if (!v8) {
          goto LABEL_772;
        }
        CFNumberRef value = v8;
        *(void *)&valuePtr[0] = 0;
        if (CFNumberGetValue(v8, kCFNumberSInt64Type, valuePtr)) {
          goto LABEL_406;
        }
        goto LABEL_814;
      case 470:
      case 471:
      case 480:
      case 482:
      case 483:
        if (!v8) {
          goto LABEL_772;
        }
        LOBYTE(valuePtr[0]) = CFBooleanGetValue(v8);
        int v14 = 1;
        goto LABEL_467;
      case 472:
        if (!v8) {
          goto LABEL_772;
        }
        CFNumberRef v192 = @"IO80211InterfaceBatterySaveModeState";
        goto LABEL_413;
      case 473:
        if (!v8) {
          goto LABEL_772;
        }
        CFNumberRef v192 = @"IO80211InterfaceRadioMODE";
LABEL_413:
        CFBooleanRef v193 = (const __CFBoolean *)CFDictionaryGetValue(v8, v192);
        if (!v193) {
          goto LABEL_814;
        }
        BOOL v177 = CFBooleanGetValue(v193) != 0;
LABEL_415:
        LODWORD(valuePtr[0]) = v177;
LABEL_466:
        int v14 = 4;
        goto LABEL_467;
      case 479:
      case 484:
      case 497:
        if (!v8) {
          goto LABEL_772;
        }
        CFNumberRef value = v8;
        LODWORD(valuePtr[0]) = 0;
        if (!CFNumberGetValue(v8, kCFNumberSInt32Type, valuePtr)) {
          goto LABEL_814;
        }
        int v31 = 4;
        goto LABEL_407;
      case 481:
        goto LABEL_768;
      case 485:
        if (!v8) {
          goto LABEL_772;
        }
        CFBooleanRef v194 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"IO80211IsInHomeScreen");
        if (!v194) {
          goto LABEL_814;
        }
        LOBYTE(valuePtr[0]) = CFBooleanGetValue(v194);
        CFBooleanRef v195 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"IO80211IsLatencySensitiveAppActive");
        if (!v195) {
          goto LABEL_814;
        }
        BYTE1(valuePtr[0]) = CFBooleanGetValue(v195);
        int v50 = 2;
        goto LABEL_90;
      case 487:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 32);
        CFAllocatorRef v196 = (void *)CFDictionaryGetValue(v8, @"IO80211DPSSymptomsInputARPFail");
        CFNumberRef value = v196;
        if (!v196) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v196, kCFNumberIntType, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v197 = (void *)CFDictionaryGetValue(v8, @"IO80211DPSSymptomsInputDNSServersTotal");
        CFNumberRef value = v197;
        if (!v197) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v197, kCFNumberIntType, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v198 = (void *)CFDictionaryGetValue(v8, @"IO80211DPSSymptomsInputDNSServersImpacted");
        CFNumberRef value = v198;
        if (!v198) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v198, kCFNumberIntType, (void *)((unint64_t)valuePtr | 0xC))) {
          goto LABEL_814;
        }
        unsigned int v199 = (void *)CFDictionaryGetValue(v8, @"IO80211DPSSymptomsInputUserImpactFlags");
        CFNumberRef value = v199;
        if (!v199) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v199, kCFNumberIntType, &valuePtr[1])) {
          goto LABEL_814;
        }
        int v200 = (void *)CFDictionaryGetValue(v8, @"IO80211DPSSymptomsInputDataStallScore");
        CFNumberRef value = v200;
        if (!v200) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v200, kCFNumberIntType, (char *)&valuePtr[1] + 4)) {
          goto LABEL_814;
        }
        uint64_t v201 = (void *)CFDictionaryGetValue(v8, @"IO80211DPSSymptomsInputAppPolicyScore");
        CFNumberRef value = v201;
        if (!v201) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v201, kCFNumberIntType, (char *)&valuePtr[1] + 8)) {
          goto LABEL_814;
        }
        CFStringRef v202 = (void *)CFDictionaryGetValue(v8, @"IO80211DPSSymptomsInputNetScore");
        CFNumberRef value = v202;
        if (!v202 || !CFNumberGetValue((CFNumberRef)v202, kCFNumberIntType, (char *)&valuePtr[1] + 12)) {
          goto LABEL_814;
        }
        int v203 = 32;
        goto LABEL_505;
      case 488:
        if (!v8) {
          goto LABEL_772;
        }
        CFBooleanRef v189 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"IO80211InterfaceCallStatus");
        if (!v189) {
          goto LABEL_814;
        }
LABEL_438:
        LODWORD(valuePtr[0]) = CFBooleanGetValue(v189) != 0;
        int v50 = 4;
        goto LABEL_90;
      case 489:
        if (!v8) {
          goto LABEL_772;
        }
        *(void *)buffer = 0;
        *(void *)&buffer[8] = 0;
        CFNumberRef v204 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceIPV4Address");
        CFNumberRef value = v204;
        if (!v204) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v204, kCFNumberIntType, buffer)) {
          goto LABEL_814;
        }
        int v205 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceIPV4RouterAddress");
        CFNumberRef value = v205;
        if (!v205) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v205, kCFNumberIntType, &buffer[4])) {
          goto LABEL_814;
        }
        CFDataRef v206 = (const __CFData *)CFDictionaryGetValue(v8, @"IO80211InterfaceRouterMACAddress");
        if (!v206) {
          goto LABEL_814;
        }
        CFDataRef v207 = v206;
        if (CFDataGetLength(v206) < 7)
        {
          v383.length = CFDataGetLength(v207);
          CFNumberRef v12 = buffer;
          v383.location = 0;
          CFDataGetBytes(v207, v383, (UInt8 *)&buffer[8]);
          int v13 = 16;
          goto LABEL_26;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_814;
        }
        int Length = CFDataGetLength(v207);
        LODWORD(valuePtr[0]) = 136315906;
        *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
        WORD6(valuePtr[0]) = 2080;
        *(void *)((char *)valuePtr + 14) = "IO80211InterfaceRouterMACAddress";
        WORD3(valuePtr[1]) = 1024;
        DWORD2(valuePtr[1]) = Length;
        WORD6(valuePtr[1]) = 1024;
        *(_DWORD *)((char *)&valuePtr[1] + 14) = 6;
        CFNumberRef v336 = &_os_log_internal;
        CFNumberRef v337 = "%s: Value size exceeds the limit for key: %s (%u >= %u)\n";
        CFNumberRef v353 = (char *)valuePtr;
        goto LABEL_874;
      case 490:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 300);
        CFStringRef v208 = (const __CFString *)CFDictionaryGetValue(v8, @"IO80211InterfaceProductType");
        if (!v208) {
          goto LABEL_814;
        }
        CFStringRef v209 = v208;
        if (CFStringGetLength(v208) >= 201)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_814;
          }
          *(_DWORD *)buffer = 136315906;
          *(void *)&buffer[4] = "Apple80211SetWithIOCTL";
          *(_WORD *)&buffer[12] = 2080;
          *(void *)&buffer[14] = "IO80211InterfaceProductType";
          *(_WORD *)&buffer[22] = 1024;
          *(_DWORD *)&char buffer[24] = CFStringGetLength(v209);
          *(_WORD *)&buffer[28] = 1024;
          *(_DWORD *)&buffer[30] = 200;
          CFNumberRef v336 = &_os_log_internal;
          CFNumberRef v337 = "%s: Value length exceeds the limit for key: %s (%u >= %u)\n";
        }
        else
        {
          v384.length = CFStringGetLength(v209);
          v384.location = 0;
          CFStringGetBytes(v209, v384, 0x600u, 0, 0, (UInt8 *)valuePtr, 200, 0);
          CFStringRef v210 = (const __CFString *)CFDictionaryGetValue(v8, @"IO80211InterfaceOSVersion");
          if (!v210) {
            goto LABEL_814;
          }
          CFStringRef v211 = v210;
          if (CFStringGetLength(v210) < 101)
          {
            v385.length = CFStringGetLength(v211);
            CFNumberRef v12 = (char *)valuePtr;
            v385.location = 0;
            CFStringGetBytes(v211, v385, 0x600u, 0, 0, (UInt8 *)&valuePtr[12] + 8, 100, 0);
            int v13 = 300;
LABEL_26:
            DWORD2(v378) = v13;
            CFNumberRef v379 = v12;
            goto LABEL_27;
          }
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_814;
          }
          *(_DWORD *)buffer = 136315906;
          *(void *)&buffer[4] = "Apple80211SetWithIOCTL";
          *(_WORD *)&buffer[12] = 2080;
          *(void *)&buffer[14] = "IO80211InterfaceOSVersion";
          *(_WORD *)&buffer[22] = 1024;
          *(_DWORD *)&char buffer[24] = CFStringGetLength(v211);
          *(_WORD *)&buffer[28] = 1024;
          *(_DWORD *)&buffer[30] = 100;
          CFNumberRef v336 = &_os_log_internal;
          CFNumberRef v337 = "%s: Value length exceeds the limit for key: %s (%u >= %u)\n";
        }
        CFNumberRef v353 = buffer;
LABEL_874:
        uint32_t v354 = 34;
        goto LABEL_826;
      case 496:
        if (!v8) {
          goto LABEL_772;
        }
        valuePtr[0] = 0uLL;
        CFNumberRef v212 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceEnableWoW");
        CFNumberRef value = v212;
        if (!v212) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v212, kCFNumberIntType, valuePtr)) {
          goto LABEL_814;
        }
        CFNumberRef v213 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceEnableLowPwrAssocMode");
        CFNumberRef value = v213;
        if (!v213) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v213, kCFNumberIntType, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        CFAllocatorRef v214 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceEnableWoWOnCaptive");
        CFNumberRef value = v214;
        if (!v214) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v214, kCFNumberIntType, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v60 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceNetworkWoWDenyListed");
        CFNumberRef value = v60;
        if (!v60) {
          goto LABEL_814;
        }
        CFNumberType v61 = kCFNumberIntType;
        goto LABEL_462;
      case 498:
        if (!v8) {
          goto LABEL_772;
        }
        LODWORD(valuePtr[0]) = CFBooleanGetValue(v8);
        goto LABEL_466;
      case 499:
        if (!v8) {
          goto LABEL_772;
        }
        DWORD2(valuePtr[0]) = 0;
        *(void *)&valuePtr[0] = 0;
        CFNumberRef v215 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceDualPowerCallInProgress");
        CFNumberRef value = v215;
        if (!v215) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v215, kCFNumberIntType, valuePtr)) {
          goto LABEL_814;
        }
        CFNumberRef v216 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceDualPowerCellularTxStarted");
        CFNumberRef value = v216;
        if (!v216) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v216, kCFNumberIntType, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v63 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceDualPowerCellularTxShort");
        CFNumberRef value = v63;
        if (!v63) {
          goto LABEL_814;
        }
        CFNumberType v64 = kCFNumberIntType;
        goto LABEL_475;
      case 500:
        if (!v8) {
          goto LABEL_772;
        }
        bzero(valuePtr, 0x12F0uLL);
        char v218 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceBGScanFreq");
        CFNumberRef value = v218;
        if (!v218) {
          goto LABEL_482;
        }
        if (!CFNumberGetValue((CFNumberRef)v218, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        LOBYTE(valuePtr[0]) = 1;
LABEL_482:
        unint64_t v219 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceBGScanLostNetTO");
        CFNumberRef value = v219;
        if (!v219) {
          goto LABEL_485;
        }
        if (!CFNumberGetValue((CFNumberRef)v219, kCFNumberSInt32Type, (char *)valuePtr + 12)) {
          goto LABEL_814;
        }
        BYTE8(valuePtr[0]) = 1;
LABEL_485:
        CFAllocatorRef v220 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceBGScanAdaptScan");
        CFNumberRef value = v220;
        if (!v220) {
          goto LABEL_488;
        }
        if (!CFNumberGetValue((CFNumberRef)v220, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4)) {
          goto LABEL_814;
        }
        LOBYTE(valuePtr[1]) = 1;
LABEL_488:
        v221 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceBGScanBestNetScan");
        CFNumberRef value = v221;
        if (!v221) {
          goto LABEL_491;
        }
        if (!CFNumberGetValue((CFNumberRef)v221, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12)) {
          goto LABEL_814;
        }
        BYTE8(valuePtr[1]) = 1;
LABEL_491:
        v222 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceBGScanScanRecord");
        CFNumberRef value = v222;
        if (!v222) {
          goto LABEL_494;
        }
        if (!CFNumberGetValue((CFNumberRef)v222, kCFNumberSInt32Type, (char *)&valuePtr[2] + 4)) {
          goto LABEL_814;
        }
        LOBYTE(valuePtr[2]) = 1;
LABEL_494:
        CFArrayRef v223 = (const __CFArray *)CFDictionaryGetValue(v8, @"IO80211InterfaceBGScanChannels");
        if (!v223) {
          goto LABEL_504;
        }
        CFArrayRef v224 = v223;
        unsigned int Count = CFArrayGetCount(v223);
        if (Count >= 0x190) {
          int v226 = 400;
        }
        else {
          int v226 = Count;
        }
        HIDWORD(valuePtr[2]) = v226;
        if (!v226) {
          goto LABEL_503;
        }
        unint64_t v227 = 0;
        CFNumberRef v228 = (char *)&valuePtr[3] + 4;
        while (1)
        {
          v229 = (void *)CFArrayGetValueAtIndex(v224, v227);
          CFNumberRef value = v229;
          if (!v229 || !CFNumberGetValue((CFNumberRef)v229, kCFNumberSInt32Type, v228)) {
            return 4294963396;
          }
          ++v227;
          v228 += 12;
          if (v227 >= HIDWORD(valuePtr[2]))
          {
LABEL_503:
            BYTE8(valuePtr[2]) = 1;
LABEL_504:
            int v203 = 4848;
LABEL_505:
            DWORD2(v378) = v203;
            CFNumberRef v379 = (char *)valuePtr;
LABEL_27:
            if (!Apple80211IOCTLSetWrapper()) {
              goto LABEL_846;
            }
            if (*__error() == 102 || *__error() == 6) {
              goto LABEL_812;
            }
LABEL_709:
            if (*__error() != 22) {
              goto LABEL_815;
            }
            goto LABEL_814;
          }
        }
      case 501:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 24);
        CFStringRef v230 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceBGScanDynamicProfileStartTime");
        CFNumberRef value = v230;
        if (!v230) {
          goto LABEL_510;
        }
        if (!CFNumberGetValue((CFNumberRef)v230, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        LOBYTE(valuePtr[0]) = 1;
LABEL_510:
        CFStringRef v231 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceBGScanDynamicProfileDuration");
        CFNumberRef value = v231;
        if (!v231) {
          goto LABEL_513;
        }
        if (!CFNumberGetValue((CFNumberRef)v231, kCFNumberSInt32Type, (char *)valuePtr + 12)) {
          goto LABEL_814;
        }
        BYTE8(valuePtr[0]) = 1;
LABEL_513:
        CFAllocatorRef v232 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceBGScanDynamicProfileScanFreq");
        CFNumberRef value = v232;
        if (!v232) {
          goto LABEL_516;
        }
        if (!CFNumberGetValue((CFNumberRef)v232, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4)) {
          goto LABEL_814;
        }
        LOBYTE(valuePtr[1]) = 1;
LABEL_516:
        int v50 = 24;
        goto LABEL_90;
      case 503:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 20);
        CFNumberRef v233 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceVirtualIfStateIsActive");
        CFNumberRef value = v233;
        if (!v233) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v233, kCFNumberIntType, valuePtr)) {
          goto LABEL_814;
        }
        CFNumberRef v234 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceVirtualIfStateIsType");
        CFNumberRef value = v234;
        if (!v234 || !CFNumberGetValue((CFNumberRef)v234, kCFNumberIntType, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        int v235 = 20;
        goto LABEL_564;
      case 507:
      case 509:
        if (!v8) {
          goto LABEL_772;
        }
        LOBYTE(valuePtr[0]) = *MEMORY[0x263EFFB40] == (void)v8;
LABEL_89:
        int v50 = 1;
        goto LABEL_90;
      case 508:
      case 514:
      case 536:
      case 537:
LABEL_23:
        if (!v8) {
          goto LABEL_772;
        }
        CFNumberRef value = v8;
        LODWORD(valuePtr[0]) = 0;
        CFNumberRef v12 = (char *)valuePtr;
        if (!CFNumberGetValue(v8, kCFNumberSInt32Type, valuePtr)) {
          goto LABEL_814;
        }
        int v13 = 4;
        goto LABEL_26;
      case 510:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 164);
        CFArrayRef v236 = (const __CFArray *)CFDictionaryGetValue(v8, @"IO80211InterfaceIPV6Address");
        if (!v236) {
          goto LABEL_814;
        }
        CFArrayRef v237 = v236;
        if (CFArrayGetCount(v236) < 11)
        {
          LODWORD(valuePtr[0]) = CFArrayGetCount(v237);
          if (!LODWORD(valuePtr[0])) {
            goto LABEL_760;
          }
        }
        else
        {
          LODWORD(valuePtr[0]) = 10;
        }
        unint64_t v332 = 0;
        CFNumberRef v333 = (UInt8 *)valuePtr + 4;
        do
        {
          CFDataRef v334 = (const __CFData *)CFArrayGetValueAtIndex(v237, v332);
          if (!v334) {
            goto LABEL_814;
          }
          v386.location = 0;
          v386.length = 16;
          CFDataGetBytes(v334, v386, v333);
          ++v332;
          v333 += 16;
        }
        while (v332 < LODWORD(valuePtr[0]));
LABEL_760:
        int v242 = 164;
LABEL_761:
        DWORD2(v378) = v242;
        CFNumberRef v379 = (char *)valuePtr;
        goto LABEL_27;
      case 516:
        if (!v8) {
          goto LABEL_772;
        }
        *(void *)&valuePtr[0] = 1;
        if (CFArrayGetCount(v8) >= 1)
        {
          CFIndex v238 = 0;
          char v239 = 0;
          do
          {
            CFAllocatorRef v240 = (void *)CFArrayGetValueAtIndex(v8, v238);
            CFNumberRef value = v240;
            if (v240)
            {
              *(_DWORD *)buffer = -1431655766;
              CFNumberGetValue((CFNumberRef)v240, kCFNumberSInt32Type, buffer);
              char v241 = 1;
              switch(*(_DWORD *)buffer)
              {
                case 0:
                  BYTE4(valuePtr[0]) = v239 & 0xF8;
                  goto LABEL_536;
                case 1:
                  goto LABEL_534;
                case 2:
                  char v241 = 2;
                  goto LABEL_534;
                case 3:
                  char v241 = 4;
LABEL_534:
                  v239 |= v241;
                  BYTE4(valuePtr[0]) = v239;
                  break;
                default:
                  break;
              }
            }
            ++v238;
          }
          while (v238 < CFArrayGetCount(v8));
        }
LABEL_536:
        int v242 = 8;
        goto LABEL_761;
      case 518:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || v7 != 8) {
          goto LABEL_848;
        }
        int v58 = 8;
        goto LABEL_748;
      case 521:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 20);
        CFAllocatorRef v243 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFStringRef v244 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], "MWS_LE_SCAN_EN", 0x8000100u);
        CFDataRef v245 = (void *)CFDictionaryGetValue(v8, v244);
        CFNumberRef value = v245;
        if (!v245) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v245, kCFNumberSInt8Type, valuePtr)) {
          goto LABEL_814;
        }
        CFRelease(v244);
        CFStringRef v246 = CFStringCreateWithCString(v243, "MWS_LE_SCAN_PEAK", 0x8000100u);
        CFAllocatorRef v247 = (void *)CFDictionaryGetValue(v8, v246);
        CFNumberRef value = v247;
        if (!v247) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v247, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        CFRelease(v246);
        CFStringRef v248 = CFStringCreateWithCString(v243, "MWS_LE_SCAN_DUR", 0x8000100u);
        CFNumberRef v249 = (void *)CFDictionaryGetValue(v8, v248);
        CFNumberRef value = v249;
        if (!v249) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v249, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        CFRelease(v248);
        CFStringRef v250 = CFStringCreateWithCString(v243, "MWS_LE_SCAN_DC", 0x8000100u);
        CFNumberRef v251 = (void *)CFDictionaryGetValue(v8, v250);
        CFNumberRef value = v251;
        if (!v251) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v251, kCFNumberSInt32Type, (char *)valuePtr + 12)) {
          goto LABEL_814;
        }
        CFRelease(v250);
        CFStringRef v252 = CFStringCreateWithCString(v243, "MWS_LE_SCAN_REASON", 0x8000100u);
        CFAllocatorRef v253 = (void *)CFDictionaryGetValue(v8, v252);
        CFNumberRef value = v253;
        if (!v253 || !CFNumberGetValue((CFNumberRef)v253, kCFNumberSInt32Type, &valuePtr[1])) {
          goto LABEL_814;
        }
        CFRelease(v252);
        DWORD2(v378) = 20;
        CFNumberRef v379 = (char *)valuePtr;
        goto LABEL_27;
      case 531:
        if (!v8) {
          goto LABEL_772;
        }
        WORD2(valuePtr[0]) = 0;
        LODWORD(valuePtr[0]) = 0;
        CFNumberRef v254 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceRoamProfile");
        CFNumberRef value = v254;
        if (!v254 || !CFNumberGetValue((CFNumberRef)v254, kCFNumberIntType, valuePtr)) {
          goto LABEL_814;
        }
        CFBooleanRef v255 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"IO80211InterfaceRoamProfileMotion");
        if (v255) {
          BYTE3(valuePtr[0]) = CFBooleanGetValue(v255);
        }
        CFBooleanRef v256 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"IO80211InterfaceRoamProfilePoorLinkQuality");
        if (v256) {
          BYTE2(valuePtr[0]) = CFBooleanGetValue(v256);
        }
        CFBooleanRef v257 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"IO80211InterfaceRoamMultiAP");
        if (v257) {
          BYTE1(valuePtr[0]) = CFBooleanGetValue(v257);
        }
        CFNumberRef v258 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceRoamProfileMotionRssiDelta");
        CFNumberRef value = v258;
        if (v258) {
          CFNumberGetValue((CFNumberRef)v258, kCFNumberSInt16Type, (char *)valuePtr + 4);
        }
        int v235 = 6;
LABEL_564:
        DWORD2(v378) = v235;
        CFNumberRef v78 = (char *)valuePtr;
        goto LABEL_565;
      case 532:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 128);
        CFArrayRef v259 = (const __CFArray *)CFDictionaryGetValue(v8, @"IO80211InterfaceAdaptiveRoamChanList");
        if (!v259) {
          goto LABEL_577;
        }
        CFArrayRef v260 = v259;
        int v261 = CFArrayGetCount(v259);
        int v262 = v261 >= 10 ? 10 : v261;
        DWORD2(valuePtr[7]) = v262;
        if (v261 < 1) {
          goto LABEL_577;
        }
        CFIndex v263 = 0;
        CFNumberRef v264 = (char *)valuePtr + 8;
        while (1)
        {
          CFDictionaryRef v265 = (const __CFDictionary *)CFArrayGetValueAtIndex(v260, v263);
          if (!v265) {
            goto LABEL_814;
          }
          CFDictionaryRef v266 = v265;
          CFNumberRef v267 = (void *)CFDictionaryGetValue(v265, @"IO80211Channel");
          CFNumberRef value = v267;
          if (!v267) {
            goto LABEL_814;
          }
          CFNumberGetValue((CFNumberRef)v267, kCFNumberSInt32Type, v264 - 4);
          CFNumberRef v268 = (void *)CFDictionaryGetValue(v266, @"IO80211ChannelFlags");
          CFNumberRef value = v268;
          if (!v268) {
            goto LABEL_814;
          }
          CFNumberGetValue((CFNumberRef)v268, kCFNumberSInt32Type, v264);
          ++v263;
          v264 += 12;
          if (v263 >= SDWORD2(valuePtr[7]))
          {
LABEL_577:
            CFNumberRef v269 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceAdaptiveRoamRSSITrigger");
            CFNumberRef value = v269;
            if (v269) {
              CFNumberGetValue((CFNumberRef)v269, kCFNumberSInt16Type, (char *)&valuePtr[7] + 12);
            }
            int v69 = 128;
            goto LABEL_801;
          }
        }
      case 538:
        if (!v8) {
          goto LABEL_772;
        }
        CFNumberRef value = v8;
        *(void *)&valuePtr[0] = 0;
        CFNumberRef v12 = (char *)valuePtr;
        if (!CFNumberGetValue(v8, kCFNumberSInt32Type, valuePtr)) {
          goto LABEL_814;
        }
        int v13 = 8;
        goto LABEL_26;
      case 539:
        if (!v8) {
          goto LABEL_772;
        }
        unsigned int v270 = CFArrayGetCount(v8);
        if (v270 >= 0xF) {
          return 4294963396;
        }
        *(_DWORD *)buffer = 0;
        int v271 = 0;
        if (!v270) {
          goto LABEL_591;
        }
        CFIndex v272 = 0;
        uint64_t v273 = v270;
        while (1)
        {
          LODWORD(valuePtr[0]) = -1431655766;
          CFNumberRef v274 = (void *)CFArrayGetValueAtIndex(v8, v272);
          CFNumberRef value = v274;
          if (!v274 || !CFNumberGetValue((CFNumberRef)v274, kCFNumberSInt32Type, valuePtr)) {
            goto LABEL_772;
          }
          if (LODWORD(valuePtr[0]) > 0xE) {
            return 4294963396;
          }
          v271 |= 1 << (LOBYTE(valuePtr[0]) - 1);
          *(_DWORD *)buffer = v271;
          if (v273 == ++v272)
          {
LABEL_591:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(valuePtr[0]) = 67109120;
              DWORD1(valuePtr[0]) = v271;
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "APPLE80211_IOC_MWS_TIME_SHARING_WIFI_ENH channel_bitmap = 0x%X\n", (uint8_t *)valuePtr, 8u);
            }
            int v157 = 4;
LABEL_807:
            DWORD2(v378) = v157;
            CFNumberRef v217 = buffer;
            goto LABEL_808;
          }
        }
      case 540:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 36);
        CFNumberRef v275 = (void *)CFDictionaryGetValue(v8, @"MWSType72GBITMAPWiFiEnh");
        CFNumberRef value = v275;
        if (!v275) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v275, kCFNumberSInt32Type, valuePtr)) {
          goto LABEL_814;
        }
        CFNumberRef v276 = (void *)CFDictionaryGetValue(v8, @"MWSType75GBITMAPLOWWiFiEnh");
        CFNumberRef value = v276;
        if (!v276) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v276, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v277 = (void *)CFDictionaryGetValue(v8, @"MWSType75GBITMAPMIDWiFiEnh");
        CFNumberRef value = v277;
        if (!v277) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v277, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v278 = (void *)CFDictionaryGetValue(v8, @"MWSType75GBITMAPHIWiFiEnh");
        CFNumberRef value = v278;
        if (!v278) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v278, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC))) {
          goto LABEL_814;
        }
        CFNumberRef v279 = (void *)CFDictionaryGetValue(v8, @"MWSType7U5LowBITMAPWiFiEnh");
        CFNumberRef value = v279;
        if (!v279) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v279, kCFNumberSInt32Type, &valuePtr[1])) {
          goto LABEL_814;
        }
        CFNumberRef v280 = (void *)CFDictionaryGetValue(v8, @"MWSType7U5HighBITMAPWiFiEnh");
        CFNumberRef value = v280;
        if (!v280) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v280, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v281 = (void *)CFDictionaryGetValue(v8, @"MWSType7U6BITMAPWiFiEnh");
        CFNumberRef value = v281;
        if (!v281) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v281, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v282 = (void *)CFDictionaryGetValue(v8, @"MWSType7U7BITMAPWiFiEnh");
        CFNumberRef value = v282;
        if (!v282) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v282, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12)) {
          goto LABEL_814;
        }
        CFNumberRef v283 = (void *)CFDictionaryGetValue(v8, @"MWSType7U8BITMAPWiFiEnh");
        CFNumberRef value = v283;
        if (!v283 || !CFNumberGetValue((CFNumberRef)v283, kCFNumberSInt32Type, &valuePtr[2])) {
          goto LABEL_814;
        }
        goto LABEL_633;
      case 541:
      case 544:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 36);
        uint64_t v41 = (void *)CFDictionaryGetValue(v8, @"MWS2GBITMAPWiFiEnh");
        CFNumberRef value = v41;
        if (!v41) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v41, kCFNumberSInt32Type, valuePtr)) {
          goto LABEL_814;
        }
        uint64_t v42 = (void *)CFDictionaryGetValue(v8, @"MWS5GBITMAPLOWWiFiEnh");
        CFNumberRef value = v42;
        if (!v42) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v42, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        uint64_t v43 = (void *)CFDictionaryGetValue(v8, @"MWS5GBITMAPMIDWiFiEnh");
        CFNumberRef value = v43;
        if (!v43) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v43, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        uint64_t v44 = (void *)CFDictionaryGetValue(v8, @"MWS5GBITMAPHIWiFiEnh");
        CFNumberRef value = v44;
        if (!v44) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v44, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC))) {
          goto LABEL_814;
        }
        uint64_t v45 = (void *)CFDictionaryGetValue(v8, @"MWSU5LowBITMAPWiFiEnh");
        CFNumberRef value = v45;
        if (!v45) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v45, kCFNumberSInt32Type, &valuePtr[1])) {
          goto LABEL_814;
        }
        uint64_t v46 = (void *)CFDictionaryGetValue(v8, @"MWSU5HighBITMAPWiFiEnh");
        CFNumberRef value = v46;
        if (!v46) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v46, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4)) {
          goto LABEL_814;
        }
        unint64_t v47 = (void *)CFDictionaryGetValue(v8, @"MWSU6BITMAPWiFiEnh");
        CFNumberRef value = v47;
        if (!v47) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v47, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8)) {
          goto LABEL_814;
        }
        uint64_t v48 = (void *)CFDictionaryGetValue(v8, @"MWSU7BITMAPWiFiEnh");
        CFNumberRef value = v48;
        if (!v48) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v48, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12)) {
          goto LABEL_814;
        }
        uint64_t v49 = (void *)CFDictionaryGetValue(v8, @"MWSU8BITMAPWiFiEnh");
        CFNumberRef value = v49;
        if (!v49 || !CFNumberGetValue((CFNumberRef)v49, kCFNumberSInt32Type, &valuePtr[2])) {
          goto LABEL_814;
        }
        goto LABEL_633;
      case 542:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 36);
        CFNumberRef v284 = (void *)CFDictionaryGetValue(v8, @"MWSOCL2GBITMAPWiFiEnh");
        CFNumberRef value = v284;
        if (!v284) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v284, kCFNumberSInt32Type, valuePtr)) {
          goto LABEL_814;
        }
        CFNumberRef v285 = (void *)CFDictionaryGetValue(v8, @"MWSOCL5GBITMAPLOWWiFiEnh");
        CFNumberRef value = v285;
        if (!v285) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v285, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v286 = (void *)CFDictionaryGetValue(v8, @"MWSOCL5GBITMAPMIDWiFiEnh");
        CFNumberRef value = v286;
        if (!v286) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v286, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v287 = (void *)CFDictionaryGetValue(v8, @"MWSOCL5GBITMAPHIWiFiEnh");
        CFNumberRef value = v287;
        if (!v287) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v287, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC))) {
          goto LABEL_814;
        }
        CFNumberRef v288 = (void *)CFDictionaryGetValue(v8, @"MWSOCLU5LowBITMAPWiFiEnh");
        CFNumberRef value = v288;
        if (!v288) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v288, kCFNumberSInt32Type, &valuePtr[1])) {
          goto LABEL_814;
        }
        CFNumberRef v289 = (void *)CFDictionaryGetValue(v8, @"MWSOCLU5HighBITMAPWiFiEnh");
        CFNumberRef value = v289;
        if (!v289) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v289, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v290 = (void *)CFDictionaryGetValue(v8, @"MWSOCLU6BITMAPWiFiEnh");
        CFNumberRef value = v290;
        if (!v290) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v290, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v291 = (void *)CFDictionaryGetValue(v8, @"MWSOCLU7BITMAPWiFiEnh");
        CFNumberRef value = v291;
        if (!v291) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v291, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12)) {
          goto LABEL_814;
        }
        CFNumberRef v292 = (void *)CFDictionaryGetValue(v8, @"MWSOCLU8BITMAPWiFiEnh");
        CFNumberRef value = v292;
        if (!v292 || !CFNumberGetValue((CFNumberRef)v292, kCFNumberSInt32Type, &valuePtr[2])) {
          goto LABEL_814;
        }
LABEL_633:
        int v191 = 36;
        goto LABEL_705;
      case 543:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 40);
        if (!CFDictionaryContainsKey(v8, @"MWS2GBITMAPWiFiEnh")) {
          goto LABEL_639;
        }
        CFNumberRef v293 = (void *)CFDictionaryGetValue(v8, @"MWS2GBITMAPWiFiEnh");
        CFNumberRef value = v293;
        if (!v293 || !CFNumberGetValue((CFNumberRef)v293, kCFNumberSInt32Type, valuePtr)) {
          goto LABEL_814;
        }
        DWORD1(valuePtr[2]) |= 1u;
LABEL_639:
        if (!CFDictionaryContainsKey(v8, @"MWS5GBITMAPLOWWiFiEnh")) {
          goto LABEL_643;
        }
        CFNumberRef v294 = (void *)CFDictionaryGetValue(v8, @"MWS5GBITMAPLOWWiFiEnh");
        CFNumberRef value = v294;
        if (!v294 || !CFNumberGetValue((CFNumberRef)v294, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        DWORD1(valuePtr[2]) |= 2u;
LABEL_643:
        if (!CFDictionaryContainsKey(v8, @"MWS5GBITMAPMIDWiFiEnh")) {
          goto LABEL_647;
        }
        CFNumberRef v295 = (void *)CFDictionaryGetValue(v8, @"MWS5GBITMAPMIDWiFiEnh");
        CFNumberRef value = v295;
        if (!v295 || !CFNumberGetValue((CFNumberRef)v295, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        DWORD1(valuePtr[2]) |= 2u;
LABEL_647:
        if (!CFDictionaryContainsKey(v8, @"MWS5GBITMAPHIWiFiEnh")) {
          goto LABEL_651;
        }
        CFNumberRef v296 = (void *)CFDictionaryGetValue(v8, @"MWS5GBITMAPHIWiFiEnh");
        CFNumberRef value = v296;
        if (!v296
          || !CFNumberGetValue((CFNumberRef)v296, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
        {
          goto LABEL_814;
        }
        DWORD1(valuePtr[2]) |= 2u;
LABEL_651:
        if (!CFDictionaryContainsKey(v8, @"MWSU5LowBITMAPWiFiEnh")) {
          goto LABEL_655;
        }
        CFNumberRef v297 = (void *)CFDictionaryGetValue(v8, @"MWSU5LowBITMAPWiFiEnh");
        CFNumberRef value = v297;
        if (!v297 || !CFNumberGetValue((CFNumberRef)v297, kCFNumberSInt32Type, &valuePtr[1])) {
          goto LABEL_814;
        }
        DWORD1(valuePtr[2]) |= 4u;
LABEL_655:
        if (!CFDictionaryContainsKey(v8, @"MWSU5HighBITMAPWiFiEnh")) {
          goto LABEL_659;
        }
        CFNumberRef v298 = (void *)CFDictionaryGetValue(v8, @"MWSU5HighBITMAPWiFiEnh");
        CFNumberRef value = v298;
        if (!v298 || !CFNumberGetValue((CFNumberRef)v298, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4)) {
          goto LABEL_814;
        }
        DWORD1(valuePtr[2]) |= 4u;
LABEL_659:
        if (!CFDictionaryContainsKey(v8, @"MWSU6BITMAPWiFiEnh")) {
          goto LABEL_663;
        }
        CFNumberRef v299 = (void *)CFDictionaryGetValue(v8, @"MWSU6BITMAPWiFiEnh");
        CFNumberRef value = v299;
        if (!v299 || !CFNumberGetValue((CFNumberRef)v299, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8)) {
          goto LABEL_814;
        }
        DWORD1(valuePtr[2]) |= 4u;
LABEL_663:
        if (!CFDictionaryContainsKey(v8, @"MWSU7BITMAPWiFiEnh")) {
          goto LABEL_667;
        }
        CFNumberRef v300 = (void *)CFDictionaryGetValue(v8, @"MWSU7BITMAPWiFiEnh");
        CFNumberRef value = v300;
        if (!v300 || !CFNumberGetValue((CFNumberRef)v300, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12)) {
          goto LABEL_814;
        }
        DWORD1(valuePtr[2]) |= 4u;
LABEL_667:
        if (!CFDictionaryContainsKey(v8, @"MWSU8BITMAPWiFiEnh")) {
          goto LABEL_671;
        }
        CFNumberRef v301 = (void *)CFDictionaryGetValue(v8, @"MWSU8BITMAPWiFiEnh");
        CFNumberRef value = v301;
        if (!v301 || !CFNumberGetValue((CFNumberRef)v301, kCFNumberSInt32Type, &valuePtr[2])) {
          goto LABEL_814;
        }
        DWORD1(valuePtr[2]) |= 4u;
LABEL_671:
        int v50 = 40;
LABEL_90:
        DWORD2(v378) = v50;
        CFNumberRef v379 = (char *)valuePtr;
LABEL_706:
        if (!Apple80211IOCTLSetWrapper()) {
          goto LABEL_846;
        }
        if (*__error() != 102 && *__error() != 6) {
          goto LABEL_709;
        }
        goto LABEL_847;
      case 545:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 40);
        CFNumberRef v302 = (void *)CFDictionaryGetValue(v8, @"MWS_SCAN_FREQ_INDEX_Enh");
        CFNumberRef value = v302;
        if (!v302) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v302, kCFNumberSInt32Type, (char *)&valuePtr[2] + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v303 = (void *)CFDictionaryGetValue(v8, @"MWSType4Blanking2GBITMAPWiFiEnh");
        CFNumberRef value = v303;
        if (!v303) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v303, kCFNumberSInt32Type, valuePtr)) {
          goto LABEL_814;
        }
        CFNumberRef v304 = (void *)CFDictionaryGetValue(v8, @"MWSType4Blanking5GBITMAPLOWWiFiEnh");
        CFNumberRef value = v304;
        if (!v304) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v304, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v305 = (void *)CFDictionaryGetValue(v8, @"MWSType4Blanking5GBITMAPMIDWiFiEnh");
        CFNumberRef value = v305;
        if (!v305) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v305, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v306 = (void *)CFDictionaryGetValue(v8, @"MWSType4Blanking5GBITMAPHIWiFiEnh");
        CFNumberRef value = v306;
        if (!v306) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v306, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC))) {
          goto LABEL_814;
        }
        CFNumberRef v307 = (void *)CFDictionaryGetValue(v8, @"MWSType4BlankingU5LowBITMAPWiFiEnh");
        CFNumberRef value = v307;
        if (!v307) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v307, kCFNumberSInt32Type, &valuePtr[1])) {
          goto LABEL_814;
        }
        CFNumberRef v308 = (void *)CFDictionaryGetValue(v8, @"MWSType4BlankingU5HighBITMAPWiFiEnh");
        CFNumberRef value = v308;
        if (!v308) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v308, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v309 = (void *)CFDictionaryGetValue(v8, @"MWSType4BlankingU6BITMAPWiFiEnh");
        CFNumberRef value = v309;
        if (!v309) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v309, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v310 = (void *)CFDictionaryGetValue(v8, @"MWSType4BlankingU7BITMAPWiFiEnh");
        CFNumberRef value = v310;
        if (!v310) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v310, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12)) {
          goto LABEL_814;
        }
        CFNumberRef v311 = (void *)CFDictionaryGetValue(v8, @"MWSType4BlankingU8BITMAPWiFiEnh");
        CFNumberRef value = v311;
        if (!v311 || !CFNumberGetValue((CFNumberRef)v311, kCFNumberSInt32Type, &valuePtr[2])) {
          goto LABEL_814;
        }
        goto LABEL_704;
      case 546:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 40);
        CFNumberRef v312 = (void *)CFDictionaryGetValue(v8, @"MWS_SCAN_FREQ_INDEX_Enh");
        CFNumberRef value = v312;
        if (!v312) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v312, kCFNumberSInt32Type, (char *)&valuePtr[2] + 4)) {
          goto LABEL_814;
        }
        LODWORD(valuePtr[0]) = 0;
        CFNumberRef v313 = (void *)CFDictionaryGetValue(v8, @"MWSType4Blanking5GBITMAPLOWWiFiEnh");
        CFNumberRef value = v313;
        if (!v313) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v313, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v314 = (void *)CFDictionaryGetValue(v8, @"MWSType4Blanking5GBITMAPMIDWiFiEnh");
        CFNumberRef value = v314;
        if (!v314) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v314, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v315 = (void *)CFDictionaryGetValue(v8, @"MWSType4Blanking5GBITMAPHIWiFiEnh");
        CFNumberRef value = v315;
        if (!v315
          || !CFNumberGetValue((CFNumberRef)v315, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
        {
          goto LABEL_814;
        }
        memset(&valuePtr[1], 0, 20);
LABEL_704:
        int v191 = 40;
LABEL_705:
        DWORD2(v378) = v191;
        CFNumberRef v379 = (char *)valuePtr;
        goto LABEL_706;
      case 547:
        *(_DWORD *)buffer = 0;
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 40);
        CFNumberRef v316 = (void *)CFDictionaryGetValue(v8, @"MWS_CONDITION_ID_Value");
        CFNumberRef value = v316;
        if (!v316) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v316, kCFNumberSInt8Type, buffer)) {
          goto LABEL_814;
        }
        BYTE4(valuePtr[2]) = buffer[0];
        CFNumberRef v317 = (void *)CFDictionaryGetValue(v8, @"MWS2GBITMAPWiFiEnh");
        CFNumberRef value = v317;
        if (!v317) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v317, kCFNumberSInt32Type, valuePtr)) {
          goto LABEL_814;
        }
        CFNumberRef v318 = (void *)CFDictionaryGetValue(v8, @"MWS5GBITMAPLOWWiFiEnh");
        CFNumberRef value = v318;
        if (!v318) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v318, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v319 = (void *)CFDictionaryGetValue(v8, @"MWS5GBITMAPMIDWiFiEnh");
        CFNumberRef value = v319;
        if (!v319) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v319, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v320 = (void *)CFDictionaryGetValue(v8, @"MWS5GBITMAPHIWiFiEnh");
        CFNumberRef value = v320;
        if (!v320) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v320, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC))) {
          goto LABEL_814;
        }
        CFNumberRef v321 = (void *)CFDictionaryGetValue(v8, @"MWSU5LowBITMAPWiFiEnh");
        CFNumberRef value = v321;
        if (!v321) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v321, kCFNumberSInt32Type, &valuePtr[1])) {
          goto LABEL_814;
        }
        CFNumberRef v322 = (void *)CFDictionaryGetValue(v8, @"MWSU5HighBITMAPWiFiEnh");
        CFNumberRef value = v322;
        if (!v322) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v322, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v323 = (void *)CFDictionaryGetValue(v8, @"MWSU6BITMAPWiFiEnh");
        CFNumberRef value = v323;
        if (!v323) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v323, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v324 = (void *)CFDictionaryGetValue(v8, @"MWSU7BITMAPWiFiEnh");
        CFNumberRef value = v324;
        if (!v324) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v324, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12)) {
          goto LABEL_814;
        }
        CFNumberRef v325 = (void *)CFDictionaryGetValue(v8, @"MWSU8BITMAPWiFiEnh");
        CFNumberRef value = v325;
        if (!v325 || !CFNumberGetValue((CFNumberRef)v325, kCFNumberSInt32Type, &valuePtr[2])) {
          goto LABEL_814;
        }
        int v88 = 40;
        goto LABEL_733;
      case 548:
        if (!v8) {
          goto LABEL_772;
        }
        memset(valuePtr, 0, 20);
        if (CFArrayGetCount(v8) != 9) {
          return 4294963396;
        }
        CFNumberRef v326 = valuePtr;
        CFIndex v327 = 1;
        break;
      case 551:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || v7 != 244) {
          goto LABEL_848;
        }
        int v58 = 244;
        goto LABEL_748;
      default:
        switch(v5)
        {
          case 345:
            goto LABEL_23;
          case 346:
          case 348:
          case 350:
          case 351:
            goto LABEL_848;
          case 347:
            uint64_t LQMConfigFromDict = 4294963396;
            if (!v8 || !v7) {
              goto LABEL_848;
            }
            *(_DWORD *)buffer = 0;
            LOBYTE(v373) = 0;
            memset(valuePtr, 0, 28);
            CFNumberRef v133 = (void *)CFDictionaryGetValue(v8, @"SOFTAP_LOWPOWER_ACTIVE_TO_DYNAMIC_TIMEOUT");
            CFNumberRef value = v133;
            if (!v133) {
              goto LABEL_847;
            }
            CFTypeID v134 = CFGetTypeID(v133);
            if (v134 != CFNumberGetTypeID()) {
              goto LABEL_814;
            }
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, buffer)) {
              goto LABEL_814;
            }
            DWORD1(valuePtr[0]) = *(_DWORD *)buffer;
            CFNumberRef v135 = (void *)CFDictionaryGetValue(v8, @"SOFTAP_LOWPOWER_DYNAMIC_TO_LOW_TIMEOUT");
            CFNumberRef value = v135;
            if (!v135) {
              goto LABEL_814;
            }
            CFTypeID v136 = CFGetTypeID(v135);
            if (v136 != CFNumberGetTypeID()) {
              goto LABEL_814;
            }
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, buffer)) {
              goto LABEL_814;
            }
            DWORD2(valuePtr[0]) = *(_DWORD *)buffer;
            CFNumberRef v137 = (void *)CFDictionaryGetValue(v8, @"SOFTAP_LOWPOWER_LOW_TO_DISABLE_INTERVAL");
            CFNumberRef value = v137;
            if (!v137) {
              goto LABEL_814;
            }
            CFTypeID v138 = CFGetTypeID(v137);
            if (v138 != CFNumberGetTypeID()) {
              goto LABEL_814;
            }
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, buffer)) {
              goto LABEL_814;
            }
            HIDWORD(valuePtr[0]) = *(_DWORD *)buffer;
            unint64_t v139 = (void *)CFDictionaryGetValue(v8, @"SOFTAP_LOWPOWER_RX_PACKET_THRESHOLD");
            CFNumberRef value = v139;
            if (!v139) {
              goto LABEL_814;
            }
            CFTypeID v140 = CFGetTypeID(v139);
            if (v140 != CFNumberGetTypeID()) {
              goto LABEL_814;
            }
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, buffer)) {
              goto LABEL_814;
            }
            LODWORD(valuePtr[1]) = *(_DWORD *)buffer;
            CFIndex v141 = (void *)CFDictionaryGetValue(v8, @"SOFTAP_LOWPOWER_BEACON_INTERVAL");
            CFNumberRef value = v141;
            if (!v141) {
              goto LABEL_814;
            }
            CFTypeID v142 = CFGetTypeID(v141);
            if (v142 != CFNumberGetTypeID()) {
              goto LABEL_814;
            }
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, buffer)) {
              goto LABEL_814;
            }
            WORD2(valuePtr[1]) = *(_WORD *)buffer;
            CFMutableDictionaryRef v143 = (void *)CFDictionaryGetValue(v8, @"SOFTAP_LOWPOWER_PS_STATE");
            CFNumberRef value = v143;
            if (!v143) {
              goto LABEL_814;
            }
            CFTypeID v144 = CFGetTypeID(v143);
            if (v144 != CFNumberGetTypeID()) {
              goto LABEL_814;
            }
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v373)) {
              goto LABEL_814;
            }
            BYTE6(valuePtr[1]) = v373;
            CFNumberRef v145 = (void *)CFDictionaryGetValue(v8, @"SOFTAP_LOWPOWER_PS_ENABLE");
            CFNumberRef value = v145;
            if (!v145) {
              goto LABEL_814;
            }
            CFTypeID v146 = CFGetTypeID(v145);
            if (v146 != CFNumberGetTypeID()) {
              goto LABEL_814;
            }
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v373)) {
              goto LABEL_814;
            }
            BYTE7(valuePtr[1]) = v373;
            CFNumberRef v147 = (void *)CFDictionaryGetValue(v8, @"SOFTAP_LOWPOWER_AWAKE_LEVEL");
            CFNumberRef value = v147;
            if (!v147) {
              goto LABEL_814;
            }
            CFTypeID v148 = CFGetTypeID(v147);
            if (v148 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v373)) {
              goto LABEL_814;
            }
            BYTE8(valuePtr[1]) = v373;
            int v69 = 28;
            goto LABEL_801;
          case 349:
            uint64_t LQMConfigFromDict = 4294963396;
            if (!v8) {
              goto LABEL_848;
            }
            if (!v7) {
              goto LABEL_848;
            }
            memset(buffer, 0, 24);
            int v373 = -1431655766;
            unint64_t v149 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceSoftAPCSAChannel");
            CFNumberRef value = v149;
            if (!v149) {
              goto LABEL_848;
            }
            CFNumberGetValue((CFNumberRef)v149, kCFNumberIntType, &v373);
            int v150 = v373;
            *(_DWORD *)&buffer[8] = v373;
            int v372 = -1431655766;
            unint64_t v151 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceSoftAPCSAChannelFlag");
            CFNumberRef value = v151;
            if (!v151) {
              goto LABEL_772;
            }
            CFNumberGetValue((CFNumberRef)v151, kCFNumberIntType, &v372);
            int v152 = v372;
            *(_DWORD *)&buffer[12] = v372;
            int v371 = -1431655766;
            CFIndex v153 = (void *)CFDictionaryGetValue(v8, @"IO80211InterfaceSoftAPCSASwitchCount");
            CFNumberRef value = v153;
            if (!v153) {
              goto LABEL_814;
            }
            CFNumberGetValue((CFNumberRef)v153, kCFNumberIntType, &v371);
            int v154 = v371;
            *(_DWORD *)&buffer[16] = v371;
            CFBooleanRef v155 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"IO80211InterfaceSoftAPCSAForceDisconnect");
            if (!v155) {
              goto LABEL_814;
            }
            int v156 = CFBooleanGetValue(v155);
            buffer[20] = v156 != 0;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(valuePtr[0]) = 136316162;
              *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
              WORD6(valuePtr[0]) = 1024;
              *(_DWORD *)((char *)valuePtr + 14) = v150;
              WORD1(valuePtr[1]) = 1024;
              DWORD1(valuePtr[1]) = v152;
              WORD4(valuePtr[1]) = 1024;
              *(_DWORD *)((char *)&valuePtr[1] + 10) = v154;
              HIWORD(valuePtr[1]) = 1024;
              LODWORD(valuePtr[2]) = v156 != 0;
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: APPLE80211_IOC_SOFTAP_TRIGGER_CSA channel %d, flags 0x%x, count %d, disconnect %d\n", (uint8_t *)valuePtr, 0x24u);
            }
            int v157 = 24;
            goto LABEL_807;
          case 352:
            uint64_t LQMConfigFromDict = 4294963396;
            if (!v8 || !v7) {
              goto LABEL_848;
            }
            LOBYTE(v373) = 0;
            memset(buffer, 0, 36);
            CFStringRef v158 = (void *)CFDictionaryGetValue(v8, @"HostApBatteryLevel");
            CFNumberRef value = v158;
            if (v158)
            {
              CFTypeID v159 = CFGetTypeID(v158);
              if (v159 == CFNumberGetTypeID())
              {
                if (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v373)) {
                  buffer[2] = v373;
                }
              }
            }
            CFNumberRef v160 = (void *)CFDictionaryGetValue(v8, @"HostApWiFiNetworkFlag");
            CFNumberRef value = v160;
            if (v160)
            {
              CFTypeID v161 = CFGetTypeID(v160);
              if (v161 == CFNumberGetTypeID())
              {
                if (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v373)) {
                  *(_WORD *)buffer = 0;
                }
              }
            }
            CFStringRef v162 = (const __CFString *)CFDictionaryGetValue(v8, @"SSID_STR");
            CFStringRef v163 = v162;
            if (!v162) {
              goto LABEL_804;
            }
            CFIndex v164 = CFStringGetLength(v162);
            if ((unint64_t)(v164 - 33) < 0xFFFFFFFFFFFFFFE0) {
              goto LABEL_814;
            }
            CFIndex v165 = v164;
            *(void *)&valuePtr[0] = 0;
            if (CFStringGetLength(v163))
            {
              v382.location = 0;
              v382.length = v165;
              if (!CFStringGetBytes(v163, v382, 0x8000100u, 0, 0, (UInt8 *)&buffer[4], 32, (CFIndex *)valuePtr)) {
                goto LABEL_772;
              }
              LOBYTE(v163) = valuePtr[0];
            }
            else
            {
              LOBYTE(v163) = 0;
            }
            buffer[3] = (char)v163;
LABEL_804:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(valuePtr[0]) = 136316418;
              *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
              WORD6(valuePtr[0]) = 1024;
              *(_DWORD *)((char *)valuePtr + 14) = 13169;
              WORD1(valuePtr[1]) = 1024;
              DWORD1(valuePtr[1]) = buffer[2];
              WORD4(valuePtr[1]) = 1024;
              *(_DWORD *)((char *)&valuePtr[1] + 10) = *(unsigned __int16 *)buffer;
              HIWORD(valuePtr[1]) = 1024;
              LODWORD(valuePtr[2]) = v163;
              WORD2(valuePtr[2]) = 2080;
              *(void *)((char *)&valuePtr[2] + 6) = &buffer[4];
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: %u : battery: %d flags: %d ssid_len: %d ssid: %s \n ", (uint8_t *)valuePtr, 0x2Eu);
            }
            int v157 = 36;
            break;
          default:
            if (v5 != 337) {
              goto LABEL_848;
            }
            *(_OWORD *)((char *)&valuePtr[1] + 4) = 0u;
            *(_OWORD *)((char *)valuePtr + 4) = 0u;
            LODWORD(valuePtr[0]) = 1;
            uint64_t LQMConfigFromDict = _getLQMConfigFromDict(v8, (uint64_t)valuePtr);
            if (LQMConfigFromDict) {
              goto LABEL_847;
            }
            int v54 = 36;
            goto LABEL_109;
        }
        goto LABEL_807;
    }
    while (v327 != 9)
    {
      CFNumberRef v328 = (void *)CFArrayGetValueAtIndex(v8, v327);
      CFNumberRef value = v328;
      if (v328)
      {
        int v329 = CFNumberGetValue((CFNumberRef)v328, kCFNumberSInt16Type, v326);
        ++v327;
        CFNumberRef v326 = (_OWORD *)((char *)v326 + 2);
        if (v329) {
          continue;
        }
      }
      goto LABEL_772;
    }
    *(_DWORD *)buffer = -1431655766;
    CFNumberRef v335 = (void *)CFArrayGetValueAtIndex(v8, 0);
    CFNumberRef value = v335;
    if (!v335 || !CFNumberGetValue((CFNumberRef)v335, kCFNumberSInt32Type, buffer)) {
      goto LABEL_814;
    }
    LODWORD(valuePtr[1]) = *(_DWORD *)buffer;
    int v40 = 20;
LABEL_477:
    DWORD2(v378) = v40;
    CFNumberRef v217 = (char *)valuePtr;
LABEL_808:
    CFNumberRef v379 = v217;
    goto LABEL_809;
  }
  if (v5 <= 238)
  {
    switch(v5)
    {
      case 1:
        if (!v8) {
          goto LABEL_814;
        }
        if (CFStringGetLength((CFStringRef)v8) > 32) {
          goto LABEL_814;
        }
        if (CFStringGetLength((CFStringRef)v8) < 1) {
          goto LABEL_814;
        }
        memset(valuePtr, 0, 33);
        if (!CFStringGetCString((CFStringRef)v8, (char *)valuePtr, 33, 0x8000100u)) {
          goto LABEL_814;
        }
        DWORD2(v378) = strlen((const char *)valuePtr);
        goto LABEL_408;
      case 2:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || !v7) {
          goto LABEL_848;
        }
        valuePtr[0] = xmmword_210754A90;
        CFNumberRef v55 = (void *)CFDictionaryGetValue(v8, @"AUTH_LOWER");
        CFNumberRef value = v55;
        if (!v55) {
          goto LABEL_847;
        }
        if (!CFNumberGetValue((CFNumberRef)v55, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_847;
        }
        CFNumberRef v56 = (void *)CFDictionaryGetValue(v8, @"AUTH_UPPER");
        CFNumberRef value = v56;
        if (v56)
        {
          if (!CFNumberGetValue((CFNumberRef)v56, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
            goto LABEL_847;
          }
        }
        CFNumberRef v57 = (void *)CFDictionaryGetValue(v8, @"AUTH_UPPER_EXT");
        CFNumberRef value = v57;
        if (v57)
        {
          if (!CFNumberGetValue((CFNumberRef)v57, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC))) {
            goto LABEL_847;
          }
        }
        DWORD2(v378) = 16;
        CFNumberRef v379 = (char *)valuePtr;
        goto LABEL_393;
      case 3:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || v7 != 148) {
          goto LABEL_848;
        }
        int v58 = 148;
LABEL_748:
        DWORD2(v378) = v58;
        CFNumberRef v379 = (char *)v8;
        goto LABEL_13;
      case 4:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || !v7) {
          goto LABEL_848;
        }
        CFNumberRef v59 = (void *)CFDictionaryGetValue(v8, @"CHANNEL");
        CFNumberRef value = v59;
        if (!v59) {
          goto LABEL_847;
        }
        valuePtr[0] = 1uLL;
        if (!CFNumberGetValue((CFNumberRef)v59, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v60 = (void *)CFDictionaryGetValue(v8, @"CHANNEL_FLAGS");
        CFNumberRef value = v60;
        if (v60)
        {
          CFNumberType v61 = kCFNumberSInt32Type;
LABEL_462:
          if (!CFNumberGetValue((CFNumberRef)v60, v61, (char *)valuePtr + 12)) {
            goto LABEL_814;
          }
        }
        else
        {
          if (DWORD2(valuePtr[0]) >= 0xF) {
            int v338 = 18;
          }
          else {
            int v338 = 10;
          }
          HIDWORD(valuePtr[0]) = v338;
        }
        int v40 = 16;
        goto LABEL_477;
      case 5:
      case 8:
      case 14:
      case 18:
      case 26:
      case 28:
      case 31:
      case 33:
      case 34:
      case 35:
      case 36:
      case 41:
      case 52:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 63:
      case 64:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 82:
      case 91:
      case 102:
      case 104:
        goto LABEL_10;
      case 6:
        if (!v8) {
          goto LABEL_772;
        }
        DWORD2(valuePtr[0]) = -1431655766;
        *(void *)&valuePtr[0] = 0xAAAAAAAA00000001;
        CFNumberRef v62 = (void *)CFDictionaryGetValue(v8, @"PROTMODE");
        CFNumberRef value = v62;
        if (v62)
        {
          if (CFNumberGetValue((CFNumberRef)v62, kCFNumberSInt32Type, (char *)valuePtr + 4))
          {
            CFNumberRef v63 = (void *)CFDictionaryGetValue(v8, @"PROTMODE_THRESHOLD");
            CFNumberRef value = v63;
            if (v63)
            {
              CFNumberType v64 = kCFNumberSInt32Type;
LABEL_475:
              if (CFNumberGetValue((CFNumberRef)v63, v64, (char *)valuePtr + 8)) {
                goto LABEL_476;
              }
            }
          }
        }
        goto LABEL_814;
      case 7:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || !v7) {
          goto LABEL_848;
        }
        DWORD2(valuePtr[0]) = 0;
        *(void *)&valuePtr[0] = 0;
        if (!CFDictionaryGetValueIfPresent(v8, @"TX_POWER", (const void **)&value)) {
          goto LABEL_847;
        }
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!CFDictionaryGetValueIfPresent(v8, @"TX_POWER_UNIT", (const void **)&value)) {
          goto LABEL_814;
        }
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)valuePtr + 4);
LABEL_476:
        int v40 = 12;
        goto LABEL_477;
      case 9:
        memset(valuePtr, 170, 18);
        if (!v8 || !CFStringGetCString((CFStringRef)v8, (char *)valuePtr, 18, 0x8000100u)) {
          goto LABEL_814;
        }
        CFNumberRef v65 = ether_aton((const char *)valuePtr);
        if (!v65) {
          goto LABEL_866;
        }
        DWORD2(v378) = 6;
        CFNumberRef v379 = (char *)v65;
        goto LABEL_734;
      case 10:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 20:
      case 21:
      case 23:
      case 27:
      case 30:
      case 38:
      case 40:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 48:
      case 49:
      case 50:
      case 53:
      case 54:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 83:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 92:
      case 93:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 103:
      case 105:
      case 106:
        goto LABEL_848;
      case 19:
        *(void *)&valuePtr[1] = 0;
        valuePtr[0] = xmmword_210754878;
        CFIndex v66 = CFArrayGetCount(v8);
        if (v66 > 4) {
          goto LABEL_814;
        }
        CFIndex v32 = v66;
        if (v66 < 1) {
          goto LABEL_152;
        }
        CFIndex v67 = 0;
        CFNumberRef v68 = (char *)valuePtr + 8;
        while (1)
        {
          CFNumberRef value = (void *)CFArrayGetValueAtIndex(v8, v67);
          if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, v68)) {
            goto LABEL_814;
          }
          ++v67;
          v68 += 4;
          if (v32 == v67) {
            goto LABEL_152;
          }
        }
      case 22:
        _WAPIStop(v6 + 4);
        if (!v8) {
          goto LABEL_768;
        }
        if (!v7) {
          goto LABEL_772;
        }
        *(void *)&valuePtr[0] = 0xAAAAAAAAAAAAAAAALL;
        CFNumberRef v70 = (const __CFNumber *)CFDictionaryGetValue(v8, @"DISASSOC_REASON");
        if (!v70) {
          goto LABEL_772;
        }
        CFNumberGetValue(v70, kCFNumberSInt32Type, (char *)valuePtr + 4);
        DWORD2(v378) = 8;
        CFNumberRef v379 = (char *)valuePtr;
        goto LABEL_768;
      case 24:
        if (!v8) {
          goto LABEL_767;
        }
        uint64_t v71 = v6;
        CFDictionaryRef v72 = v8;
        int v73 = 24;
        goto LABEL_161;
      case 25:
        uint64_t v71 = v6;
        if (v8)
        {
          CFDictionaryRef v72 = v8;
          int v73 = 25;
LABEL_161:
          uint64_t SensingRequest = _startAPMode(v71, v72, v73);
          goto LABEL_162;
        }
        _stopHostAPD(v6);
LABEL_767:
        DWORD1(v378) = 2;
LABEL_768:
        if (!Apple80211IOCTLSetWrapper()) {
          return 0;
        }
LABEL_769:
        if (*__error() == 102 || *__error() == 6) {
          goto LABEL_848;
        }
        if (*__error() != 22) {
          goto LABEL_815;
        }
        goto LABEL_772;
      case 29:
        memset(buffer, 170, 16);
        memset(valuePtr, 170, 18);
        int v74 = (void *)CFDictionaryGetValue(v8, @"DEAUTH_REASON");
        CFNumberRef value = v74;
        if (!v74) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v74, kCFNumberSInt32Type, &buffer[4])) {
          goto LABEL_814;
        }
        CFStringRef v75 = (const __CFString *)CFDictionaryGetValue(v8, @"DEAUTH_EA");
        if (!v75 || !CFStringGetCString(v75, (char *)valuePtr, 18, 0x8000100u)) {
          goto LABEL_814;
        }
        CFNumberRef v76 = ether_aton((const char *)valuePtr);
        if (!v76) {
          goto LABEL_866;
        }
        int v77 = *(_DWORD *)v76->octet;
        *(_WORD *)&buffer[12] = *(_WORD *)&v76->octet[4];
        *(_DWORD *)&buffer[8] = v77;
        *(_DWORD *)buffer = 1;
        DWORD2(v378) = 16;
        CFNumberRef v78 = buffer;
LABEL_565:
        CFNumberRef v379 = v78;
        goto LABEL_734;
      case 32:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || !v7) {
          goto LABEL_848;
        }
        CFIndex v79 = CFArrayGetCount(v8);
        *(void *)((char *)&valuePtr[11] + 4) = 0;
        *(_OWORD *)((char *)&valuePtr[10] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[9] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[8] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[7] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[6] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[5] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[4] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[3] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[2] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[1] + 4) = 0u;
        *(_OWORD *)((char *)valuePtr + 4) = 0u;
        LODWORD(valuePtr[0]) = 1;
        if (v79 < 1) {
          goto LABEL_180;
        }
        CFIndex v80 = 0;
        CFNumberRef v81 = &valuePtr[1];
        while (1)
        {
          CFDictionaryRef v82 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, v80);
          if (!v82) {
            goto LABEL_814;
          }
          CFDictionaryRef v83 = v82;
          CFDictionaryRef v84 = (void *)CFDictionaryGetValue(v82, @"RATESET_RATE");
          CFNumberRef value = v84;
          if (!v84) {
            goto LABEL_814;
          }
          if (!CFNumberGetValue((CFNumberRef)v84, kCFNumberSInt32Type, (char *)v81 - 4)) {
            goto LABEL_814;
          }
          CFAllocatorRef v85 = (void *)CFDictionaryGetValue(v83, @"RATESET_FLAGS");
          CFNumberRef value = v85;
          if (!v85 || !CFNumberGetValue((CFNumberRef)v85, kCFNumberSInt32Type, v81)) {
            goto LABEL_814;
          }
          ++v80;
          CFNumberRef v81 = (_OWORD *)((char *)v81 + 12);
          if (v79 == v80)
          {
LABEL_180:
            WORD2(valuePtr[0]) = v79;
            int v69 = 188;
            goto LABEL_801;
          }
        }
      case 37:
      case 39:
        *(void *)&valuePtr[1] = 0;
        valuePtr[0] = xmmword_210754894;
        CFIndex v32 = CFArrayGetCount(v8);
        if (v32 < 1) {
          goto LABEL_152;
        }
        CFIndex v33 = 0;
        CFNumberRef v34 = (char *)valuePtr + 8;
        while (1)
        {
          CFNumberRef v35 = (void *)CFArrayGetValueAtIndex(v8, v33);
          CFNumberRef value = v35;
          if (!v35 || !CFNumberGetValue((CFNumberRef)v35, kCFNumberSInt32Type, v34)) {
            goto LABEL_814;
          }
          ++v33;
          v34 += 4;
          if (v32 == v33)
          {
LABEL_152:
            DWORD1(valuePtr[0]) = v32;
            int v69 = 24;
            goto LABEL_801;
          }
        }
      case 47:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || !v7) {
          goto LABEL_848;
        }
        memset(valuePtr, 170, sizeof(valuePtr));
        uint64_t SensingRequest = _getBGScanData(v8, (char *)valuePtr, v6 + 88);
        if (SensingRequest) {
          goto LABEL_162;
        }
        DWORD2(v378) = 8240;
        CFNumberRef v379 = (char *)valuePtr;
LABEL_393:
        if (!Apple80211IOCTLSetWrapper()) {
          goto LABEL_846;
        }
        if (*__error() == 102 || *__error() == 6) {
          goto LABEL_812;
        }
        if (*__error() == 22) {
          goto LABEL_847;
        }
        goto LABEL_815;
      case 51:
        *(void *)&valuePtr[0] = 0;
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || !v7) {
          goto LABEL_847;
        }
        CFStringGetCString((CFStringRef)v8, (char *)valuePtr + 4, 3, 0x8000100u);
        LODWORD(valuePtr[0]) = 1;
LABEL_406:
        int v31 = 8;
LABEL_407:
        DWORD2(v378) = v31;
LABEL_408:
        CFNumberRef v379 = (char *)valuePtr;
        goto LABEL_809;
      case 61:
        DWORD2(valuePtr[0]) = 0;
        *(void *)&valuePtr[0] = 1;
        CFNumberRef v86 = (void *)CFDictionaryGetValue(v8, @"MAX_FACTOR");
        CFNumberRef value = v86;
        if (!v86) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v86, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v87 = (void *)CFDictionaryGetValue(v8, @"MAX_DENSITY");
        CFNumberRef value = v87;
        if (!v87 || !CFNumberGetValue((CFNumberRef)v87, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        goto LABEL_192;
      case 62:
        *(void *)&valuePtr[0] = 1;
        CFNumberRef v89 = (const __CFNumber *)CFDictionaryGetValue(v8, @"BA");
        CFBooleanRef BoolRef = makeBoolRef(v89);
        if (!BoolRef) {
          goto LABEL_814;
        }
        BYTE4(valuePtr[0]) = CFBooleanGetValue(BoolRef) != 0;
        CFBooleanRef v91 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"IMMEDIATE_BA");
        if (!v91) {
          goto LABEL_814;
        }
        BYTE5(valuePtr[0]) = CFBooleanGetValue(v91) != 0;
        CFBooleanRef v92 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"CCBA");
        if (!v92) {
          goto LABEL_814;
        }
        BYTE6(valuePtr[0]) = CFBooleanGetValue(v92) != 0;
        CFBooleanRef v93 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"IMPLICIT_BA");
        if (!v93) {
          goto LABEL_814;
        }
        BYTE7(valuePtr[0]) = CFBooleanGetValue(v93) != 0;
        int v14 = 8;
LABEL_467:
        DWORD2(v378) = v14;
        CFNumberRef v379 = (char *)valuePtr;
        goto LABEL_734;
      case 65:
        valuePtr[0] = xmmword_210754A90;
        CFNumberRef v94 = (void *)CFDictionaryGetValue(v8, @"MODE");
        CFNumberRef value = v94;
        if (!v94) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v94, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          goto LABEL_814;
        }
        CFNumberRef v95 = (void *)CFDictionaryGetValue(v8, @"SUBMODE");
        CFNumberRef value = v95;
        if (!v95) {
          goto LABEL_814;
        }
        if (!CFNumberGetValue((CFNumberRef)v95, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          goto LABEL_814;
        }
        CFNumberRef v96 = (void *)CFDictionaryGetValue(v8, @"FLAGS");
        CFNumberRef value = v96;
        if (!v96
          || !CFNumberGetValue((CFNumberRef)v96, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
        {
          goto LABEL_814;
        }
        int v88 = 16;
        goto LABEL_733;
      case 66:
        valuePtr[0] = xmmword_210754A90;
        CFIndex v97 = CFArrayGetCount(v8);
        *(_DWORD *)buffer = -1431655766;
        if (v97 < 1) {
          goto LABEL_210;
        }
        CFIndex v98 = v97;
        CFIndex v99 = 0;
        while (1)
        {
          CFNumberRef v100 = (void *)CFArrayGetValueAtIndex(v8, v99);
          CFNumberRef value = v100;
          if (!v100 || !CFNumberGetValue((CFNumberRef)v100, kCFNumberSInt32Type, buffer)) {
            goto LABEL_814;
          }
          *((unsigned char *)valuePtr + *(_DWORD *)buffer / 8 + 4) |= 1 << (buffer[0] & 7);
          if (v98 == ++v99)
          {
LABEL_210:
            int v69 = 16;
LABEL_801:
            DWORD2(v378) = v69;
            CFNumberRef v379 = (char *)valuePtr;
            goto LABEL_809;
          }
        }
      case 69:
        Boolean v101 = malloc_type_malloc(0x3AD8uLL, 0x1000040BBD6A9C0uLL);
        LODWORD(valuePtr[0]) = -1431655766;
        if (!v101) {
          return 4294963395;
        }
        CFAllocatorRef v102 = v101;
        *Boolean v101 = 1;
        CFArrayRef v103 = (const __CFArray *)CFDictionaryGetValue(v8, @"WOW_WAKE_CONDITIONS");
        if (!v103) {
          goto LABEL_219;
        }
        CFArrayRef v104 = v103;
        CFIndex v105 = CFArrayGetCount(v103);
        if (v105 > 6) {
          goto LABEL_223;
        }
        CFIndex v106 = v105;
        if (v105 < 1) {
          goto LABEL_219;
        }
        CFIndex v107 = 0;
        do
        {
          CFNumberRef value = (void *)CFArrayGetValueAtIndex(v104, v107);
          if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, valuePtr) || LODWORD(valuePtr[0]) > 5) {
            goto LABEL_223;
          }
          *((unsigned char *)v102 + 4) |= 1 << SLOBYTE(valuePtr[0]);
          ++v107;
        }
        while (v106 != v107);
LABEL_219:
        CFAllocatorRef v108 = (void *)CFDictionaryGetValue(v8, @"WOW_BEACON_LOSS_TIME");
        CFNumberRef value = v108;
        if (v108 && !CFNumberGetValue((CFNumberRef)v108, kCFNumberSInt32Type, v102 + 2)) {
          goto LABEL_223;
        }
        CFArrayRef v109 = (const __CFArray *)CFDictionaryGetValue(v8, @"WOW_PATTERNS");
        if (!v109) {
          goto LABEL_836;
        }
        CFArrayRef v110 = v109;
        CFIndex v111 = CFArrayGetCount(v109);
        if (v111 > 10) {
          goto LABEL_223;
        }
        CFIndex v356 = v111;
        if (v111 >= 1)
        {
          CFIndex v357 = 0;
          CFNumberRef v358 = v102 + 5;
          while (1)
          {
            CFDataRef v359 = (const __CFData *)CFArrayGetValueAtIndex(v110, v357);
            unsigned int v360 = CFDataGetLength(v359);
            *(v358 - 1) = v360;
            if (v360 > 0x5DC) {
              break;
            }
            BytePtr = CFDataGetBytePtr(v359);
            memcpy(v358, BytePtr, 0x5DCuLL);
            ++v357;
            v358 += 376;
            if (v356 == v357) {
              goto LABEL_835;
            }
          }
LABEL_223:
          free(v102);
          return 4294963396;
        }
LABEL_835:
        v102[3] = v356;
LABEL_836:
        CFBooleanRef v362 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"WOW_ENABLE_LPAS");
        if (v362) {
          LODWORD(v362) = CFBooleanGetValue(v362);
        }
        v102[3764] = v362;
        CFBooleanRef v363 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"WOW_ENABLE_CAPTIVE");
        if (v363) {
          LODWORD(v363) = CFBooleanGetValue(v363);
        }
        v102[3765] = v363;
        DWORD2(v378) = 15064;
        CFNumberRef v379 = (char *)v102;
        int v364 = Apple80211RawSet();
        free(v102);
        if (!v364) {
          goto LABEL_846;
        }
        goto LABEL_810;
      case 80:
        DWORD2(valuePtr[0]) = 0;
        *(void *)&valuePtr[0] = 1;
        CFAllocatorRef v112 = (void *)CFDictionaryGetValue(v8, @"ROAM_THRESH_RSSI");
        CFNumberRef value = v112;
        if (!v112) {
          return 4294963396;
        }
        if (!CFNumberGetValue((CFNumberRef)v112, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          return 4294963396;
        }
        CFNumberRef v113 = (void *)CFDictionaryGetValue(v8, @"ROAM_THRESH_RATE");
        CFNumberRef value = v113;
        if (!v113 || !CFNumberGetValue((CFNumberRef)v113, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          return 4294963396;
        }
LABEL_192:
        int v88 = 12;
        goto LABEL_733;
      case 81:
        LOBYTE(valuePtr[0]) = 0;
        CFBooleanRef v114 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"V_DBG_FLAG_ASSOC");
        if (v114 && CFBooleanGetValue(v114))
        {
          LOBYTE(valuePtr[0]) = 1;
          char v115 = 3;
        }
        else
        {
          char v115 = 2;
        }
        CFBooleanRef v330 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"V_DBG_FLAG_CONNECTION");
        if (v330 && CFBooleanGetValue(v330)) {
          LOBYTE(valuePtr[0]) = v115;
        }
        int v69 = 1;
        goto LABEL_801;
      case 84:
        LODWORD(valuePtr[1]) = 0;
        valuePtr[0] = xmmword_2107548B0;
        CFAllocatorRef v116 = (void *)CFDictionaryGetValue(v8, @"LQ_RSSI_DIVISOR");
        CFNumberRef value = v116;
        if (!v116) {
          return 4294963396;
        }
        if (!CFNumberGetValue((CFNumberRef)v116, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          return 4294963396;
        }
        CFNumberRef v117 = (void *)CFDictionaryGetValue(v8, @"LQ_TX_RATE_DIVISOR");
        CFNumberRef value = v117;
        if (!v117) {
          return 4294963396;
        }
        if (!CFNumberGetValue((CFNumberRef)v117, kCFNumberSInt32Type, (char *)valuePtr + 8)) {
          return 4294963396;
        }
        CFNumberRef v118 = (void *)CFDictionaryGetValue(v8, @"LQ_EVENT_MIN_INTERVAL");
        CFNumberRef value = v118;
        if (!v118
          || !CFNumberGetValue((CFNumberRef)v118, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
        {
          return 4294963396;
        }
        goto LABEL_253;
      case 85:
        bzero((char *)valuePtr + 4, 0x810uLL);
        LODWORD(valuePtr[0]) = 1;
        CFNumberRef v119 = (void *)CFDictionaryGetValue(v8, @"CUSTOM_IE_FRAME_TYPE");
        CFNumberRef value = v119;
        if (!v119) {
          return 4294963396;
        }
        if (!CFNumberGetValue((CFNumberRef)v119, kCFNumberSInt32Type, (char *)valuePtr + 4)) {
          return 4294963396;
        }
        CFBooleanRef v120 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"CUSTOM_IE_ADD");
        if (!v120) {
          return 4294963396;
        }
        DWORD2(valuePtr[0]) = CFBooleanGetValue(v120) != 0;
        CFAllocatorRef v121 = (void *)CFDictionaryGetValue(v8, @"CUSTOM_IE_SIG_LEN");
        CFNumberRef value = v121;
        if (!v121) {
          return 4294963396;
        }
        if (!CFNumberGetValue((CFNumberRef)v121, kCFNumberSInt32Type, (char *)valuePtr + 12)) {
          return 4294963396;
        }
        CFDataRef v122 = (const __CFData *)CFDictionaryGetValue(v8, @"CUSTOM_IE_DATA");
        if (!v122) {
          return 4294963396;
        }
        CFDataRef v123 = v122;
        LODWORD(valuePtr[1]) = CFDataGetLength(v122);
        CFDataGetBytePtr(v123);
        __memcpy_chk();
        int v54 = 2068;
LABEL_109:
        DWORD2(v378) = v54;
        CFNumberRef v379 = (char *)valuePtr;
        goto LABEL_809;
      case 94:
        valuePtr[0] = xmmword_2107548C4;
        valuePtr[1] = *(_OWORD *)algn_2107548D4;
        BOOL v124 = (void *)CFDictionaryGetValue(v8, @"VIRT_IF_ROLE");
        CFNumberRef value = v124;
        if (!v124
          || !CFNumberGetValue((CFNumberRef)v124, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
        {
          CStringPtr = CFStringGetCStringPtr(@"VIRT_IF_ROLE", 0x600u);
          syslog(3, "APPLE80211_IOC_VIRTUAL_IF_CREATE %s is invalid\n", CStringPtr);
          return 4294963396;
        }
        DWORD2(v378) = 32;
        CFNumberRef v379 = (char *)valuePtr;
        int v125 = Apple80211IOCTLSetWrapper();
        syslog(3, "APPLE80211_IOC_VIRTUAL_IF_CREATE bsdErr %d\n", v125);
        if (v125) {
          goto LABEL_810;
        }
        CFStringRef v126 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)&valuePtr[1], 0x8000100u);
        if (v126)
        {
          CFStringRef v127 = v126;
          CFDictionarySetValue(v8, @"VIRT_IF_NAME", v126);
          CFRelease(v127);
          goto LABEL_846;
        }
        return 4294963395;
      case 95:
        LODWORD(valuePtr[1]) = 0;
        valuePtr[0] = xmmword_2107548E4;
        CFStringRef v128 = (const __CFString *)CFDictionaryGetValue(v8, @"VIRT_IF_NAME");
        if (!v128 || !CFStringGetCString(v128, (char *)valuePtr + 4, 16, 0x8000100u)) {
          return 4294963396;
        }
LABEL_253:
        int v88 = 20;
LABEL_733:
        DWORD2(v378) = v88;
        CFNumberRef v379 = (char *)valuePtr;
        goto LABEL_734;
      case 107:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(valuePtr[0]) = 136315394;
          *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = 11888;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : Processing APPLE80211_IOC_ROAM\n", (uint8_t *)valuePtr, 0x12u);
        }
        *(_DWORD *)&buffer[4] = 0;
        *(_DWORD *)buffer = 1;
        *(_DWORD *)&buffer[8] = -1;
        *(void *)&buffer[12] = 0xFFFFLL;
        if (v8)
        {
          CFStringRef v129 = (const __CFString *)CFDictionaryGetValue(v8, @"BSSID");
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(valuePtr[0]) = 136315650;
            *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
            WORD6(valuePtr[0]) = 1024;
            *(_DWORD *)((char *)valuePtr + 14) = 11902;
            WORD1(valuePtr[1]) = 2048;
            *(void *)((char *)&valuePtr[1] + 4) = v129;
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : Processing APPLE80211_IOC_ROAM dataRef:%p\n", (uint8_t *)valuePtr, 0x1Cu);
          }
          if (!v129) {
            goto LABEL_814;
          }
          CFTypeID v130 = CFGetTypeID(v129);
          if (v130 == CFStringGetTypeID())
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(valuePtr[0]) = 136315394;
              *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
              WORD6(valuePtr[0]) = 1024;
              *(_DWORD *)((char *)valuePtr + 14) = 11908;
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : CFType is CFString\n", (uint8_t *)valuePtr, 0x12u);
            }
            memset(valuePtr, 170, 18);
            if (!CFStringGetCString(v129, (char *)valuePtr, 18, 0x8000100u)) {
              goto LABEL_814;
            }
            unsigned int v131 = ether_aton((const char *)valuePtr);
            if (!v131) {
              goto LABEL_814;
            }
            int v132 = *(_DWORD *)v131->octet;
            *(_WORD *)&buffer[12] = *(_WORD *)&v131->octet[4];
            *(_DWORD *)&buffer[8] = v132;
          }
          else
          {
            CFTypeID v339 = CFGetTypeID(v129);
            CFTypeID TypeID = CFDataGetTypeID();
            BOOL v341 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
            if (v339 != TypeID)
            {
              if (!v341) {
                goto LABEL_814;
              }
              LODWORD(valuePtr[0]) = 136315394;
              *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
              WORD6(valuePtr[0]) = 1024;
              *(_DWORD *)((char *)valuePtr + 14) = 11930;
              CFNumberRef v336 = &_os_log_internal;
              CFNumberRef v337 = "%s:%d WiFiRoam : Unexpected CFType\n";
              goto LABEL_825;
            }
            if (v341)
            {
              LODWORD(valuePtr[0]) = 136315394;
              *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
              WORD6(valuePtr[0]) = 1024;
              *(_DWORD *)((char *)valuePtr + 14) = 11923;
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : CFType is CFData\n", (uint8_t *)valuePtr, 0x12u);
            }
            if (CFDataGetLength((CFDataRef)v129) != 6) {
              goto LABEL_814;
            }
            CFNumberRef v342 = CFDataGetBytePtr((CFDataRef)v129);
            __int16 v343 = *((_WORD *)v342 + 2);
            *(_DWORD *)&buffer[8] = *(_DWORD *)v342;
            *(_WORD *)&buffer[12] = v343;
          }
          CFNumberRef v344 = (const __CFNumber *)CFDictionaryGetValue(v8, @"CHANNEL");
          CFNumberRef v345 = (const __CFNumber *)CFDictionaryGetValue(v8, @"BAND_FOR_CHANNEL");
          CFNumberRef v346 = (const __CFNumber *)CFDictionaryGetValue(v8, @"BAND_PREFERENCE");
          CFNumberRef v347 = (const __CFNumber *)CFDictionaryGetValue(v8, @"ROAM_FLAGS");
          LOBYTE(v373) = 0;
          if (!v344)
          {
LABEL_792:
            if (v347)
            {
              CFNumberGetValue(v347, kCFNumberSInt32Type, &buffer[16]);
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(valuePtr[0]) = 136315650;
                *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
                WORD6(valuePtr[0]) = 1024;
                *(_DWORD *)((char *)valuePtr + 14) = 11963;
                WORD1(valuePtr[1]) = 1024;
                DWORD1(valuePtr[1]) = *(_DWORD *)&buffer[16];
                _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : roaming flags present in setRoam :%u \n", (uint8_t *)valuePtr, 0x18u);
              }
            }
            if ((_BYTE)v373) {
              goto LABEL_796;
            }
            if (!v346)
            {
              buffer[6] = 0;
LABEL_796:
              int v157 = 20;
              goto LABEL_807;
            }
            LOBYTE(v372) = 0;
            CFNumberGetValue(v346, kCFNumberCharType, &v372);
            int v355 = v372;
            if (v372 <= 4u)
            {
              buffer[7] = v372;
              buffer[6] = 1;
              buffer[4] = 0;
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(valuePtr[0]) = 136315650;
                *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
                WORD6(valuePtr[0]) = 1024;
                *(_DWORD *)((char *)valuePtr + 14) = 11980;
                WORD1(valuePtr[1]) = 1024;
                DWORD1(valuePtr[1]) = v355;
                _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : Band present in setRoam :%u \n", (uint8_t *)valuePtr, 0x18u);
              }
              goto LABEL_796;
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_814;
            }
            LODWORD(valuePtr[0]) = 136315650;
            *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
            WORD6(valuePtr[0]) = 1024;
            *(_DWORD *)((char *)valuePtr + 14) = 11983;
            WORD1(valuePtr[1]) = 1024;
            DWORD1(valuePtr[1]) = buffer[7];
            CFNumberRef v336 = &_os_log_internal;
            CFNumberRef v337 = "%s:%d WiFiRoam : Invalid band in setRoam :%u \n";
            CFNumberRef v353 = (char *)valuePtr;
            uint32_t v354 = 24;
LABEL_826:
            _os_log_impl(&dword_210714000, v336, OS_LOG_TYPE_DEFAULT, v337, (uint8_t *)v353, v354);
            goto LABEL_814;
          }
          CFNumberGetValue(v344, kCFNumberCharType, &v373);
          int v348 = v373;
          if (!(_BYTE)v373 || !v346)
          {
            buffer[7] = v373;
            buffer[4] = 1;
            buffer[6] = 0;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(valuePtr[0]) = 136315650;
              *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
              WORD6(valuePtr[0]) = 1024;
              *(_DWORD *)((char *)valuePtr + 14) = 11953;
              WORD1(valuePtr[1]) = 1024;
              DWORD1(valuePtr[1]) = v348;
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : Channel present in setRoam :%u \n", (uint8_t *)valuePtr, 0x18u);
            }
            if (v345)
            {
              CFNumberGetValue(v345, kCFNumberCharType, &buffer[5]);
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(valuePtr[0]) = 136315650;
                *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
                WORD6(valuePtr[0]) = 1024;
                *(_DWORD *)((char *)valuePtr + 14) = 11956;
                WORD1(valuePtr[1]) = 1024;
                DWORD1(valuePtr[1]) = buffer[5];
                _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : Band for the channel present in setRoam :%u \n", (uint8_t *)valuePtr, 0x18u);
              }
            }
            goto LABEL_792;
          }
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_814;
          }
          LODWORD(valuePtr[0]) = 136315394;
          *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = 11949;
          CFNumberRef v336 = &_os_log_internal;
          CFNumberRef v337 = "%s:%d WiFiRoam : Invalid config. Contains both channel and band. Exiting!\n";
        }
        else
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_814;
          }
          LODWORD(valuePtr[0]) = 136315394;
          *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = 11993;
          CFNumberRef v336 = &_os_log_internal;
          CFNumberRef v337 = "%s:%d WiFiRoam : Null request dictionary! \n";
        }
LABEL_825:
        CFNumberRef v353 = (char *)valuePtr;
        uint32_t v354 = 18;
        goto LABEL_826;
      default:
        if (v5 != 216) {
          goto LABEL_848;
        }
        uint64_t SensingRequest = (uint64_t)_setRoamProfile(v6, (uint64_t)&v377, v8);
        goto LABEL_162;
    }
  }
  if (v5 > 254)
  {
    switch(v5)
    {
      case 255:
        uint64_t SensingRequest = _setUCMProfile(v6, (uint64_t)&v377, v8);
        goto LABEL_162;
      case 256:
        LODWORD(valuePtr[0]) = -1431655766;
        if (!v8) {
          goto LABEL_814;
        }
        CFNumberRef value = v8;
        if (!CFNumberGetValue(v8, kCFNumberIntType, valuePtr)) {
          goto LABEL_814;
        }
        DWORD1(v378) = valuePtr[0];
LABEL_734:
        if (!Apple80211IOCTLSetWrapper()) {
          goto LABEL_846;
        }
LABEL_735:
        if (*__error() != 102 && *__error() != 6) {
          goto LABEL_813;
        }
        goto LABEL_847;
      case 257:
      case 259:
      case 262:
      case 263:
        goto LABEL_848;
      case 258:
      case 261:
      case 264:
      case 265:
        goto LABEL_10;
      case 260:
        uint64_t SensingRequest = _set2GChainDisable(v6, (uint64_t)&v377, v8);
        goto LABEL_162;
      default:
        if (v5 != 336) {
          goto LABEL_848;
        }
LABEL_10:
        uint64_t LQMConfigFromDict = 4294963396;
        if (!v8 || v7 != 4) {
          goto LABEL_848;
        }
        DWORD1(v378) = *(_DWORD *)v8;
LABEL_13:
        if (!Apple80211IOCTLSetWrapper()) {
          return 0;
        }
        if (*__error() == 102 || *__error() == 6)
        {
          uint64_t LQMConfigFromDict = 4294963393;
          goto LABEL_848;
        }
        if (*__error() != 22) {
          goto LABEL_815;
        }
        goto LABEL_848;
    }
  }
  if (v5 != 239)
  {
    if (v5 == 241)
    {
      memcpy(valuePtr, &unk_210754170, 0x708uLL);
      uint64_t SensingRequest = _getRangingPeerRequest(v8, (char *)valuePtr);
      if (SensingRequest)
      {
LABEL_162:
        uint64_t LQMConfigFromDict = SensingRequest;
        if (!SensingRequest) {
          return LQMConfigFromDict;
        }
        goto LABEL_848;
      }
      *(void *)((char *)&v378 + 4) = v9 | 0x70800000000;
      CFNumberRef v379 = (char *)valuePtr;
LABEL_845:
      if (Apple80211RawSet()) {
        goto LABEL_810;
      }
      goto LABEL_846;
    }
    if (v5 != 245) {
      goto LABEL_848;
    }
    bzero((char *)valuePtr + 4, 0x4D8uLL);
    LODWORD(valuePtr[0]) = 2;
    CFStringRef v15 = (const __CFString *)CFDictionaryGetValue(v8, @"LEAKY_AP_SSID");
    if (!v15) {
      goto LABEL_814;
    }
    CFStringRef v16 = v15;
    if (CFEqual(v15, &stru_26C29D028)
      || CFStringGetLength(v16) > 31
      || !CFStringGetCString(v16, (char *)valuePtr + 8, 32, 0x8000100u))
    {
      goto LABEL_814;
    }
    DWORD1(valuePtr[0]) = CFStringGetLength(v16);
    CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(v8, @"LEAKY_AP_LEARNED_DATA_ARRAY");
    if (v17)
    {
      CFArrayRef v18 = v17;
      CFIndex v19 = CFArrayGetCount(v17);
      memset(buffer, 170, 18);
      unint64_t v20 = v19 - 1;
      if (v19 >= 1)
      {
        CFIndex v21 = 0;
        if (v20 >= 9) {
          unint64_t v20 = 9;
        }
        int v370 = v20;
        unint64_t v22 = v20 + 1;
        CFNumberRef v23 = (UInt8 *)&valuePtr[5] + 12;
        while (1)
        {
          CFDictionaryRef v24 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v21);
          CFStringRef v25 = (const __CFString *)CFDictionaryGetValue(v24, @"LEAKY_AP_BSSID");
          if (!v25 || !CFStringGetCString(v25, buffer, 18, 0x8000100u)) {
            goto LABEL_814;
          }
          CFNumberRef v26 = ether_aton(buffer);
          if (!v26)
          {
LABEL_866:
            uint64_t LQMConfigFromDict = 4294963395;
            goto LABEL_848;
          }
          int v27 = *(_DWORD *)v26->octet;
          *((_WORD *)v23 - 2) = *(_WORD *)&v26->octet[4];
          *((_DWORD *)v23 - 2) = v27;
          CFDataRef v28 = (const __CFData *)CFDictionaryGetValue(v24, @"LEAKY_AP_LEARNED_DATA");
          if (!v28) {
            goto LABEL_814;
          }
          CFDataRef v29 = v28;
          if (CFDataGetLength(v28) != 72) {
            goto LABEL_814;
          }
          v381.location = 0;
          v381.length = 72;
          CFDataGetBytes(v29, v381, v23);
          ++v21;
          v23 += 120;
          if (v22 == v21)
          {
            int v30 = v370 + 1;
            goto LABEL_862;
          }
        }
      }
    }
    int v30 = 0;
LABEL_862:
    DWORD2(valuePtr[2]) = v30;
    int v40 = 1244;
    goto LABEL_477;
  }
  LODWORD(valuePtr[0]) = 1;
  *(_OWORD *)((char *)valuePtr + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[1] + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[2] + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[3] + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[4] + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[5] + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[6] + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[7] + 4) = 0u;
  if (v8)
  {
    CFStringRef v51 = (const __CFString *)CFDictionaryGetValue(v8, @"CHIP_RESET_TRIGGER");
    if (!v51) {
      return 4294963396;
    }
    CFStringRef v52 = v51;
    if (CFStringGetLength(v51) > 128) {
      return 4294963396;
    }
    CFStringGetCStringPtr(v52, 0);
    CFStringGetLength(v52);
    __memcpy_chk();
  }
  int v53 = 132;
LABEL_373:
  DWORD2(v378) = v53;
  CFNumberRef v379 = (char *)valuePtr;
LABEL_809:
  if (Apple80211IOCTLSetWrapper())
  {
LABEL_810:
    if (*__error() == 102 || *__error() == 6)
    {
LABEL_812:
      uint64_t LQMConfigFromDict = 4294963393;
      goto LABEL_848;
    }
LABEL_813:
    if (*__error() != 22)
    {
LABEL_815:
      uint64_t LQMConfigFromDict = *__error();
      if (!LQMConfigFromDict) {
        return LQMConfigFromDict;
      }
      goto LABEL_848;
    }
LABEL_814:
    uint64_t LQMConfigFromDict = 4294963396;
LABEL_848:
    __uint64_t v365 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      CFNumberRef v366 = (const char *)(v6 + 4);
      if (!v6) {
        CFNumberRef v366 = "INVALID";
      }
      if (v5 > 558)
      {
        CFNumberRef v367 = "Error Invalid ioctl";
      }
      else if (v5 == -1)
      {
        CFNumberRef v367 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if (v5 < 0 || (CFNumberRef v367 = (const char *)gAppleIoucIndexToString[v5]) == 0)
      {
        CFNumberRef v367 = "unknown Apple80211_IOC_";
      }
      LODWORD(valuePtr[0]) = 136448258;
      *(void *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
      WORD6(valuePtr[0]) = 1024;
      *(_DWORD *)((char *)valuePtr + 14) = 15231;
      WORD1(valuePtr[1]) = 2048;
      *(void *)((char *)&valuePtr[1] + 4) = v365 / 0x3B9ACA00;
      WORD6(valuePtr[1]) = 2048;
      *(void *)((char *)&valuePtr[1] + 14) = v365 % 0x3B9ACA00 / 0x3E8;
      WORD3(valuePtr[2]) = 2082;
      *((void *)&valuePtr[2] + 1) = v366;
      LOWORD(valuePtr[3]) = 1024;
      *(_DWORD *)((char *)&valuePtr[3] + 2) = v5;
      WORD3(valuePtr[3]) = 2082;
      *((void *)&valuePtr[3] + 1) = v367;
      LOWORD(valuePtr[4]) = 1024;
      *(_DWORD *)((char *)&valuePtr[4] + 2) = LQMConfigFromDict;
      WORD3(valuePtr[4]) = 1024;
      DWORD2(valuePtr[4]) = LQMConfigFromDict;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOCTL type %d/'%{public}s' return %d/0x%08x\n", (uint8_t *)valuePtr, 0x4Cu);
    }
    return LQMConfigFromDict;
  }
LABEL_846:
  uint64_t LQMConfigFromDict = 0;
LABEL_847:
  if (LQMConfigFromDict) {
    goto LABEL_848;
  }
  return LQMConfigFromDict;
}

uint64_t _parseHs20OperatorName(uint64_t a1, __CFDictionary *a2)
{
  int v4 = *(unsigned __int16 *)(a1 + 2);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (!Mutable) {
    return 0;
  }
  CFMutableArrayRef v7 = Mutable;
  CFDictionaryRef theDict = a2;
  int v8 = v4 - 6;
  int v10 = *(unsigned __int8 *)(a1 + 10);
  unsigned int v9 = (unsigned __int8 *)(a1 + 10);
  if (v4 - 6 <= v10)
  {
LABEL_17:
    CFDictionaryAddValue(theDict, @"ANQP_OPERATOR_NAMES_LIST", v7);
    uint64_t v23 = 1;
    goto LABEL_18;
  }
  LOWORD(v11) = 0;
  while (1)
  {
    CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v12) {
      goto LABEL_25;
    }
    int v13 = v12;
    unint64_t v14 = *v9;
    if (v14 < 3 || (CFStringRef v15 = CFStringCreateWithBytes(v5, v9 + 4, v14 - 3, 0x8000100u, 1u)) == 0)
    {
      CFStringRef v16 = (CFStringRef)v7;
LABEL_23:
      CFRelease(v16);
      uint64_t v23 = 0;
      goto LABEL_19;
    }
    CFStringRef v16 = v15;
    CFStringRef v17 = CFStringCreateWithBytes(v5, v9 + 1, 3, 0x8000100u, 1u);
    if (!v17)
    {
      CFRelease(v7);
      goto LABEL_23;
    }
    CFStringRef v18 = v17;
    CFDictionaryAddValue(v13, @"ANQP_LANG_CODE", v17);
    CFDictionaryAddValue(v13, @"ANQP_OPERATOR_NAME", v16);
    CFArrayAppendValue(v7, v13);
    CFRelease(v16);
    CFRelease(v18);
    CFRelease(v13);
    uint64_t v19 = (uint64_t)(__int16)v11 >> 63;
    uint64_t v20 = (__int16)v11 + 1;
    if ((__int16)v11 == -1) {
      ++v19;
    }
    if (v19 != (uint64_t)(__int16)v20 >> 63 || v20 != (__int16)v20)
    {
      syslog(3, "parsedLen %hu increment by value %lu os_add_overflow FAILED\n");
      goto LABEL_25;
    }
    int v22 = *v9;
    int v11 = v22 + (__int16)v20;
    if (v11 != (__int16)(v22 + v20)) {
      break;
    }
    v9 += *v9 + 1;
    if (v8 - (__int16)v11 <= *v9) {
      goto LABEL_17;
    }
  }
  syslog(3, "parsedLen %hu increment by value %hhu os_add_overflow FAILED\n");
LABEL_25:
  uint64_t v23 = 0;
LABEL_18:
  int v13 = v7;
LABEL_19:
  CFRelease(v13);
  return v23;
}

uint64_t Apple80211GetInterfaceNameCopy(uint64_t a1, CFStringRef *a2)
{
  uint64_t result = 4294963396;
  if (a1 && a2)
  {
    int v6 = *(unsigned __int8 *)(a1 + 4);
    CFAllocatorRef v5 = (const char *)(a1 + 4);
    if (v6)
    {
      CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v5, 0x8000100u);
      if (v7)
      {
        CFStringRef v8 = v7;
        uint64_t result = 0;
        *a2 = v8;
      }
      else
      {
        return 4294963395;
      }
    }
    else
    {
      return 4294963368;
    }
  }
  return result;
}

uint64_t Apple80211GetInfoCopy(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  CFArrayRef theArray = 0;
  CFTypeRef v11 = 0;
  CFDataRef data = 0;
  CFNumberRef value = 0;
  CFTypeRef cf = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    *a2 = 0;
    return 4294963395;
  }
  CFMutableDictionaryRef v4 = Mutable;
  uint64_t v5 = Apple80211CopyValue();
  if (v5) {
    goto LABEL_6;
  }
  if (CFDictionaryGetCount(v4) < 1)
  {
    uint64_t v5 = 0;
LABEL_6:
    *a2 = 0;
    CFRelease(v4);
    return v5;
  }
  uint64_t v5 = 0;
  *a2 = v4;
  return v5;
}

uint64_t Apple80211SetPowerState(uint64_t a1, int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int valuePtr = a2;
  uint64_t v2 = Apple80211CopyValue();
  if (v2) {
    return v2;
  }
  syslog(3, "%s:%d: [kA11UnknownErr] Apple80211CopyValue returned %d\n", "Apple80211SetPowerState", 534, 0);
  return 4294963394;
}

uint64_t Apple80211SetPower(uint64_t a1, int a2)
{
  return Apple80211SetPowerState(a1, a2 != 0);
}

uint64_t Apple80211Scan()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  CFDictionaryRef v2 = v1;
  CFMutableDictionaryRef v4 = v3;
  uint64_t v5 = v0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  CFNumberType v61 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v59 = v6;
  long long v60 = v6;
  memset(v58, 170, sizeof(v58));
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v8 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFArrayRef v10 = CFArrayCreateMutable(v7, 0, v8);
  *(_DWORD *)&v55[1] = -1431655766;
  v55[0] = 257;
  char v54 = 0;
  bzero(v56, 0x1598uLL);
  v56[0] = 1;
  int v11 = _openEventSocket();
  int v12 = v11;
  int v53 = -1431655766;
  char v52 = 0;
  if (!v5 || (*(_DWORD *)v5 & 0x80000000) != 0 || !*(unsigned char *)(v5 + 4))
  {
    int v44 = 0;
    unint64_t v14 = 0;
    goto LABEL_80;
  }
  if (Mutable) {
    BOOL v13 = v10 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    int v44 = 0;
    unint64_t v14 = 0;
    uint64_t v40 = 4294963395;
    goto LABEL_56;
  }
  if ((v11 & 0x80000000) == 0)
  {
    if (*(void *)(v5 + 1824) || *(void *)(v5 + 64) || *(void *)(v5 + 56))
    {
      unint64_t v14 = 0;
    }
    else
    {
      unint64_t v14 = dispatch_queue_create("com.apple.wifi.scan-done", 0);
      uint64_t v38 = Apple80211EventMonitoringInit2((_DWORD *)v5, (uint64_t)emptyEventCallback, 0, v14);
      if (v38)
      {
        uint64_t v40 = v38;
        dispatch_release(v14);
        int v44 = 0;
        unint64_t v14 = 0;
        goto LABEL_56;
      }
    }
    if (*(unsigned char *)(v5 + 52) || (*(unsigned char *)(v5 + 21) & 2) != 0)
    {
      int v44 = 0;
      goto LABEL_20;
    }
    if (*(void *)(v5 + 56) || *(void *)(v5 + 64) || *(void *)(v5 + 1824))
    {
      *(unsigned char *)(v5 + 21) |= 2u;
      int v44 = 1;
LABEL_20:
      char v47 = *(unsigned char *)(v5 + 99);
      uint64_t ScanData = _getScanData(v2, (char *)v56, 0, (unsigned char *)v55 + 1, &v53, &v55[1], (Boolean *)v55, (Boolean *)&v54, v5 + 88, (Boolean *)&v52);
      if (ScanData)
      {
        uint64_t v40 = ScanData;
        goto LABEL_56;
      }
      CFArrayRef v49 = Mutable;
      uint64_t v46 = v14;
      unsigned int v45 = v56[1218];
      int v48 = v56[13];
      unint64_t Value = (unint64_t)CFDictionaryGetValue(v2, @"SCAN_SHORT_SSID");
      unint64_t v17 = (unint64_t)CFDictionaryGetValue(v2, @"SSID_STR");
      unint64_t v41 = (unint64_t)CFDictionaryGetValue(v2, @"BSSID");
      unint64_t v42 = v17;
      unint64_t v43 = Value;
      BOOL v18 = (v17 | v41 | Value) != 0;
      if ((*(_DWORD *)&v55[1])--)
      {
        int v50 = (pthread_mutex_t *)(v5 + 160);
        long long v20 = 0uLL;
        do
        {
          CFNumberType v61 = 0;
          long long v59 = v20;
          long long v60 = v20;
          LODWORD(v60) = 10;
          memset(uu, 170, sizeof(uu));
          MEMORY[0x216670B10](uu);
          uuid_unparse(uu, v57);
          __strlcpy_chk();
          DWORD2(v60) = 5528;
          CFNumberType v61 = v56;
          if (Apple80211RawSet())
          {
            int v39 = __error();
            unint64_t v14 = v46;
            CFMutableArrayRef Mutable = v49;
            goto LABEL_86;
          }
          pthread_mutex_lock(v50);
          *(unsigned char *)(v5 + 232) = 0;
          *(void *)(v5 + 224) = pthread_self();
          *(_DWORD *)(v5 + 264) = 0;
          CFIndex v21 = *(__CFRunLoopTimer **)(v5 + 248);
          CFMutableArrayRef Mutable = v49;
          if (v21)
          {
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            CFRunLoopTimerSetNextFireDate(v21, Current + 315360000.0);
          }
          uint64_t v23 = *(NSObject **)(v5 + 256);
          if (v23)
          {
            dispatch_time_t v24 = dispatch_time(0, 315360000000000000);
            dispatch_source_set_timer(v23, v24, 0xFFFFFFFFFFFFFFFFLL, 0);
          }
          CFStringRef v25 = *(const void **)(v5 + 144);
          if (v25)
          {
            CFRelease(v25);
            *(void *)(v5 + 144) = 0;
          }
          CFNumberRef v26 = *(const void **)(v5 + 240);
          if (v26)
          {
            CFRelease(v26);
            *(void *)(v5 + 240) = 0;
          }
          pthread_mutex_unlock(v50);
          if (v48 != 3)
          {
            if ((*(void *)(v5 + 1824) || *(void *)(v5 + 64) || *(void *)(v5 + 56))
              && (*(unsigned char *)(v5 + 52) || (*(unsigned char *)(v5 + 21) & 2) != 0)
              && (*(unsigned char *)(v5 + 93) & 0x40) != 0)
            {
              CFDataRef v28 = dispatch_semaphore_create(0);
              *(void *)(v5 + 152) = v28;
              dispatch_time_t v29 = dispatch_time(0, 20000000000);
              dispatch_semaphore_wait(v28, v29);
              dispatch_release(*(dispatch_object_t *)(v5 + 152));
              *(void *)(v5 + 152) = 0;
            }
            else
            {
              uint64_t v27 = _waitForScanComplete();
              if (v27)
              {
                uint64_t v40 = v27;
LABEL_55:
                unint64_t v14 = v46;
                goto LABEL_56;
              }
            }
          }
          CFNumberType v61 = v58;
          int v30 = -9999;
          LODWORD(v60) = 11;
          DWORD2(v60) = 2264;
          while (1)
          {
            bzero(v58, 0x8D8uLL);
            v58[0] = 1;
            HIWORD(v58[34]) = 2048;
            if (v57[0]) {
              __strlcpy_chk();
            }
            if (Apple80211RawGet(v5, (uint64_t)&v59)) {
              break;
            }
            _addScanResultToList(v5, (uint64_t)v58, v49, v10, 0, HIBYTE(v55[0]), v18, LOBYTE(v55[0]), v54, v52, 0, (v45 >> 9) & ((v47 & 0x40) != 0));
            if (__CFADD__(v30++, 1))
            {
              uint64_t v40 = 4294963394;
              goto LABEL_55;
            }
          }
          if (*__error() != -528350138 && *__error() != 5)
          {
            int v39 = __error();
            unint64_t v14 = v46;
            goto LABEL_86;
          }
          int v32 = (*(_DWORD *)&v55[1])--;
          long long v20 = 0uLL;
        }
        while (v32);
      }
      unint64_t v14 = v46;
      CFMutableArrayRef Mutable = v49;
      if ((v47 & 0x40) != 0 && (v45 & 0x800) != 0)
      {
        CFArrayRef v33 = (const __CFArray *)CFDictionaryGetValue(v2, @"SCAN_SSID_LIST");
        CFArrayRef v34 = (const __CFArray *)CFDictionaryGetValue(v2, @"SCAN_BSSID_LIST");
        _Apple80211AddOriginatingRNRChannelListToScanResults(v49, v10, v43, v42, v41, v33, v34);
      }
      goto LABEL_58;
    }
    int v44 = 0;
LABEL_80:
    uint64_t v40 = 4294963396;
    goto LABEL_56;
  }
  int v39 = __error();
  unint64_t v14 = 0;
  int v44 = 0;
LABEL_86:
  uint64_t v40 = *v39;
  if (!v40)
  {
LABEL_58:
    CFTypeRef v35 = CFRetain(v10);
    uint64_t v40 = 0;
    goto LABEL_59;
  }
LABEL_56:
  if (!v4) {
    goto LABEL_60;
  }
  CFTypeRef v35 = 0;
LABEL_59:
  *CFMutableDictionaryRef v4 = v35;
LABEL_60:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v10) {
    CFRelease(v10);
  }
  if ((v12 & 0x80000000) == 0) {
    close(v12);
  }
  if (v5 && v44 && (*(void *)(v5 + 56) || *(void *)(v5 + 64) || *(void *)(v5 + 1824))) {
    *(unsigned char *)(v5 + 21) &= ~2u;
  }
  if (v14)
  {
    if (v5)
    {
      CFStringRef v36 = dispatch_semaphore_create(0);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = __Apple80211Scan_block_invoke;
      block[3] = &__block_descriptor_tmp_58;
      block[4] = v5;
      block[5] = v36;
      dispatch_async(v14, block);
      dispatch_semaphore_wait(v36, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v36);
    }
    dispatch_release(v14);
  }
  return v40;
}

uint64_t Apple80211EventMonitoringInit2(_DWORD *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "Apple80211EventMonitoringInit2";
    __int16 v30 = 2048;
    int v31 = a1;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: opaque=%p\n", buf, 0x16u);
  }
  if (!a1) {
    return 4294963396;
  }
  if (*((unsigned char *)a1 + 107)) {
    return 0;
  }
  *(_DWORD *)&buf[8] = 1;
  *(void *)buf = 0x600000001;
  if (a2 && (*a1 & 0x80000000) == 0 && *((unsigned char *)a1 + 4))
  {
    if (*((void *)a1 + 228) || *((void *)a1 + 8) || *((void *)a1 + 7)) {
      Apple80211EventMonitoringHalt((uint64_t)a1);
    }
    if (!Apple80211EventMonitoringInitIOUC((uint64_t)a1, a4, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v27 = 136315138;
        CFDataRef v28 = "Apple80211EventMonitoringInit2";
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Using IOUC event pipe\n", v27, 0xCu);
      }
      goto LABEL_22;
    }
    int v9 = socket(32, 3, 1);
    unsigned int v10 = v9;
    if (v9 < 0 || ioctl(v9, 0x800C6502uLL, buf))
    {
      uint64_t v8 = *__error();
      if (!v8) {
        return v8;
      }
    }
    else
    {
      int v11 = dispatch_source_create(MEMORY[0x263EF83E8], v10, 0, a4);
      *((void *)a1 + 8) = v11;
      if (v11)
      {
        handler[0] = MEMORY[0x263EF8330];
        handler[1] = 0x40000000;
        handler[2] = __Apple80211EventMonitoringInit2_block_invoke;
        handler[3] = &__block_descriptor_tmp_84;
        handler[4] = a1;
        unsigned int v26 = v10;
        dispatch_source_set_event_handler(v11, handler);
        int v12 = *((void *)a1 + 8);
        v23[0] = MEMORY[0x263EF8330];
        v23[1] = 0x40000000;
        v23[2] = __Apple80211EventMonitoringInit2_block_invoke_2;
        v23[3] = &__block_descriptor_tmp_85;
        unsigned int v24 = v10;
        dispatch_source_set_cancel_handler(v12, v23);
        BOOL v13 = *((void *)a1 + 8);
        if (v13) {
          dispatch_activate(v13);
        }
LABEL_22:
        unint64_t v14 = (const dispatch_source_type_s *)MEMORY[0x263EF8400];
        CFStringRef v15 = dispatch_source_create(MEMORY[0x263EF8400], 0, 0, a4);
        *((void *)a1 + 197) = v15;
        dispatch_set_context(v15, a1);
        dispatch_source_set_event_handler_f(*((dispatch_source_t *)a1 + 197), (dispatch_function_t)_asyncAssocRetryCallback2);
        CFStringRef v16 = *((void *)a1 + 197);
        dispatch_time_t v17 = dispatch_time(0, 315360000000000000);
        dispatch_source_set_timer(v16, v17, 0xBEBC200uLL, 0);
        dispatch_activate(*((dispatch_object_t *)a1 + 197));
        BOOL v18 = dispatch_source_create(v14, 0, 0, a4);
        *((void *)a1 + 32) = v18;
        dispatch_set_context(v18, a1);
        dispatch_source_set_event_handler_f(*((dispatch_source_t *)a1 + 32), (dispatch_function_t)_asyncScanRetryCallback2);
        uint64_t v19 = *((void *)a1 + 32);
        dispatch_time_t v20 = dispatch_time(0, 315360000000000000);
        dispatch_source_set_timer(v19, v20, 0xBEBC200uLL, 0);
        dispatch_activate(*((dispatch_object_t *)a1 + 32));
        uint64_t v8 = 0;
        *((void *)a1 + 9) = a2;
        *((void *)a1 + 10) = a3;
        return v8;
      }
      uint64_t v8 = 4294963395;
    }
  }
  else
  {
    unsigned int v10 = -1;
    uint64_t v8 = 4294963396;
  }
  int v22 = *((void *)a1 + 8);
  if (v22)
  {
    dispatch_source_cancel(v22);
    dispatch_release(*((dispatch_object_t *)a1 + 8));
    *((void *)a1 + 8) = 0;
  }
  if ((v10 & 0x80000000) == 0) {
    close(v10);
  }
  return v8;
}

uint64_t Apple80211StartMonitoringEvent(void *a1, unsigned int a2)
{
  if (!a1) {
    return 4294963396;
  }
  if (a1[7] || a1[8])
  {
    if (a2 <= 0xF2)
    {
LABEL_5:
      uint64_t result = 0;
      *((unsigned char *)a1 + ((unint64_t)(a2 - 1) >> 3) + 20) |= 1 << ((a2 - 1) & 7);
      return result;
    }
    return 4294963396;
  }
  uint64_t result = 4294963396;
  if (a2 <= 0xF2 && a1[228]) {
    goto LABEL_5;
  }
  return result;
}

void Apple80211GenerateUUIDForScan(char *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  memset(uu, 170, sizeof(uu));
  MEMORY[0x216670B10](uu);
  uuid_unparse(uu, a1);
}

uint64_t _waitForScanComplete()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  unsigned int v2 = v1;
  uint64_t v3 = v0;
  uint64_t v14 = *MEMORY[0x263EF8340];
  memset(__b, 170, sizeof(__b));
  memset(v10, 170, sizeof(v10));
  memset(&v12, 0, sizeof(v12));
  int v4 = 1 << v2;
  uint64_t v5 = v2 >> 5;
  if (__darwin_check_fd_set_overflow(v2, &v12, 0)) {
    v12.fds_bits[v5] |= v4;
  }
  fd_set v11 = v12;
  gettimeofday(&v10[1], 0);
  int v6 = select(v2 + 1, &v11, 0, 0, 0);
  if (!v6) {
    return 4294963391;
  }
  CFAllocatorRef v7 = (const char *)(v3 + 4);
  while (v6 > 0 || *__error() == 4)
  {
    gettimeofday(v10, 0);
    if (__darwin_check_fd_set_overflow(v2, &v11, 0) && (v11.fds_bits[v5] & v4) != 0)
    {
      unsigned int v8 = read(v2, __b, 0x1018uLL);
      if ((v8 & 0x80000000) != 0) {
        return *__error();
      }
      if (v8 >= 0x18
        && (__b[0] - 40) <= 0xFFFFFFEF
        && !strncmp((const char *)&__b[6], v7, 0x10uLL)
        && __b[5] == 10)
      {
        return 0;
      }
    }
    fd_set v11 = v12;
    gettimeofday(&v10[1], 0);
    int v6 = select(v2 + 1, &v11, 0, 0, 0);
    if (!v6) {
      return 4294963391;
    }
  }
  return *__error();
}

uint64_t Apple80211StopMonitoringEvent(void *a1, unsigned int a2)
{
  if (!a1) {
    return 4294963396;
  }
  if (a1[7] || a1[8])
  {
    if (a2 <= 0xF2)
    {
LABEL_5:
      uint64_t result = 0;
      *((unsigned char *)a1 + ((unint64_t)(a2 - 1) >> 3) + 20) &= ~(1 << ((a2 - 1) & 7));
      return result;
    }
    return 4294963396;
  }
  uint64_t result = 4294963396;
  if (a2 <= 0xF2 && a1[228]) {
    goto LABEL_5;
  }
  return result;
}

uint64_t __Apple80211Scan_block_invoke(uint64_t a1)
{
  v3[5] = *MEMORY[0x263EF8340];
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = __Apple80211Scan_block_invoke_2;
  v3[3] = &__block_descriptor_tmp;
  uint64_t v1 = *(void *)(a1 + 32);
  v3[4] = *(void *)(a1 + 40);
  return _Apple80211EventMonitoringHalt2(v1, (uint64_t)v3);
}

uint64_t _Apple80211EventMonitoringHalt2(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a1)
  {
    int v4 = *(__CFSocket **)(a1 + 56);
    if (v4)
    {
      CFSocketInvalidate(v4);
      CFRelease(*(CFTypeRef *)(a1 + 56));
      *(void *)(a1 + 56) = 0;
    }
    uint64_t v5 = *(__CFRunLoopTimer **)(a1 + 1568);
    if (v5)
    {
      CFRunLoopTimerInvalidate(v5);
      CFRelease(*(CFTypeRef *)(a1 + 1568));
      *(void *)(a1 + 1568) = 0;
    }
    int v6 = *(NSObject **)(a1 + 1576);
    if (v6)
    {
      dispatch_source_cancel(v6);
      dispatch_release(*(dispatch_object_t *)(a1 + 1576));
      *(void *)(a1 + 1576) = 0;
    }
    CFAllocatorRef v7 = *(__CFRunLoopTimer **)(a1 + 248);
    if (v7)
    {
      CFRunLoopTimerInvalidate(v7);
      CFRelease(*(CFTypeRef *)(a1 + 248));
      *(void *)(a1 + 248) = 0;
    }
    unsigned int v8 = *(NSObject **)(a1 + 256);
    if (v8)
    {
      dispatch_source_cancel(v8);
      dispatch_release(*(dispatch_object_t *)(a1 + 256));
      *(void *)(a1 + 256) = 0;
    }
    int v9 = *(NSObject **)(a1 + 64);
    if (v9)
    {
      dispatch_source_cancel(v9);
      dispatch_release(*(dispatch_object_t *)(a1 + 64));
      *(void *)(a1 + 64) = 0;
    }
    if (*(unsigned char *)(a1 + 51))
    {
      unsigned int v10 = *(const void **)(a1 + 80);
      if (v10) {
        _Block_release(v10);
      }
    }
    *(_WORD *)(a1 + 51) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 20) = 0;
    *(void *)(a1 + 36) = 0;
    *(void *)(a1 + 28) = 0;
    *(void *)(a1 + 43) = 0;
    if (*(_DWORD *)(a1 + 1804))
    {
      fd_set v11 = *(NSObject **)(a1 + 1816);
      if (v11)
      {
        *(void *)CFStringRef v15 = MEMORY[0x263EF8330];
        *(void *)&v15[8] = 0x40000000;
        *(void *)&v15[16] = __Apple80211EventMonitoringHaltIOUC_block_invoke;
        CFStringRef v16 = &unk_264134D50;
        uint64_t v17 = a2;
        uint64_t v18 = a1;
        dispatch_async(v11, v15);
        *(void *)(a1 + 1816) = 0;
        return 0;
      }
      fd_set v12 = *(__CFRunLoop **)(a1 + 1920);
      if (v12)
      {
        BOOL v13 = (const void *)*MEMORY[0x263EFFE88];
        *(void *)CFStringRef v15 = MEMORY[0x263EF8330];
        *(void *)&v15[8] = 0x40000000;
        *(void *)&v15[16] = __Apple80211EventMonitoringHaltIOUC_block_invoke_2;
        CFStringRef v16 = &unk_264134D78;
        uint64_t v17 = a2;
        uint64_t v18 = a1;
        CFRunLoopPerformBlock(v12, v13, v15);
        CFRunLoopWakeUp(*(CFRunLoopRef *)(a1 + 1920));
        *(void *)(a1 + 1920) = 0;
        return 0;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFStringRef v15 = 136315394;
      *(void *)&v15[4] = "Apple80211EventMonitoringHaltIOUC";
      *(_WORD *)&v15[12] = 2080;
      *(void *)&v15[14] = a1 + 4;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: no user client connected for %s", v15, 0x16u);
    }
    if (a2) {
      (*(void (**)(uint64_t))(a2 + 16))(a2);
    }
    return 0;
  }
  if (a2) {
    (*(void (**)(uint64_t))(a2 + 16))(a2);
  }
  return 4294963396;
}

intptr_t __Apple80211Scan_block_invoke_2(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t Apple80211ScanDynamic()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v36 = v2;
  CFStringRef v37 = v1;
  CFDictionaryRef v4 = v3;
  uint64_t v5 = v0;
  uu[2] = *MEMORY[0x263EF8340];
  unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v53 = v6;
  long long v54 = v6;
  char v52 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
  long long v50 = v6;
  long long v51 = v6;
  bzero(v49, 0x1598uLL);
  v49[0] = 1;
  bzero(v48, 0x14E8uLL);
  v48[0] = 1;
  memset(v47, 170, sizeof(v47));
  *(_DWORD *)&v45[1] = -1431655766;
  v45[0] = 257;
  char v44 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  unsigned int v8 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFArrayRef v10 = CFArrayCreateMutable(v7, 0, v8);
  int v11 = _openEventSocket();
  int v43 = -1431655766;
  char v42 = 0;
  if (!v5 || (*(_DWORD *)v5 & 0x80000000) != 0)
  {
    uint64_t v12 = 4294963396;
    goto LABEL_49;
  }
  uint64_t v12 = 4294963396;
  if (!v37 || !*(unsigned char *)(v5 + 4) || (uint64_t v12 = 4294963395, !Mutable) || !v10)
  {
LABEL_49:
    uint64_t v30 = v12;
    if (!Mutable) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (v11 < 0)
  {
    uint64_t v30 = *__error();
  }
  else
  {
    if (v4 && (CFDictionaryGetValue(v4, @"SCAN_SSID_LIST") || CFDictionaryGetValue(v4, @"SCAN_BSSID_LIST")))
    {
      BOOL v13 = 0;
      uint64_t v14 = v48;
    }
    else
    {
      uint64_t v14 = 0;
      BOOL v13 = (char *)v49;
    }
    int v39 = v13;
    uint64_t ScanData = _getScanData(v4, v13, (uint64_t)v14, (unsigned char *)v45 + 1, &v43, &v45[1], (Boolean *)v45, (Boolean *)&v44, v5 + 88, (Boolean *)&v42);
    if (ScanData)
    {
      uint64_t v30 = ScanData;
    }
    else if (!v14 || v14[128] == 3 || (*(unsigned char *)(v5 + 90) & 0x40) != 0)
    {
      CFStringRef v16 = v39;
      uint64_t v17 = v39 + 68;
      if (!v39) {
        uint64_t v17 = v14 + 132;
      }
      if (*v17)
      {
        int v35 = v11;
        if (v39)
        {
          memcpy(__dst, v39 + 72, sizeof(__dst));
          unsigned int v33 = *((_DWORD *)v39 + 17);
          *((_DWORD *)v39 + 17) = 1;
          uint64_t v18 = (int *)(v39 + 52);
          int v19 = 10;
          int out = 5528;
        }
        else
        {
          memcpy(__dst, v14 + 133, sizeof(__dst));
          unsigned int v33 = v14[132];
          v14[132] = 1;
          uint64_t v18 = v14 + 128;
          int v19 = 86;
          int out = 5352;
          CFStringRef v16 = (char *)v14;
        }
        int v38 = *v18;
        unint64_t Value = (unint64_t)CFDictionaryGetValue(v4, @"SCAN_SHORT_SSID");
        unint64_t v21 = (unint64_t)CFDictionaryGetValue(v4, @"SSID_STR");
        unint64_t v22 = (unint64_t)CFDictionaryGetValue(v4, @"BSSID");
        long long v53 = 0u;
        long long v54 = 0u;
        BOOL v23 = (v21 | v22 | Value) != 0;
        unint64_t v55 = 0;
        LODWORD(v54) = v19;
        __strlcpy_chk();
        DWORD2(v54) = out;
        unint64_t v55 = (unint64_t)v16;
        long long v50 = 0u;
        long long v51 = 0u;
        char v52 = 0;
        LODWORD(v51) = 11;
        __strlcpy_chk();
        DWORD2(v51) = 2264;
        char v52 = v47;
        if (v33)
        {
          uint64_t v24 = 0;
          CFIndex v25 = 0;
          unsigned int v26 = v39;
          uint64_t v32 = v33;
          while (1)
          {
            uint64_t v27 = &__dst[3 * v24];
            uint64_t v28 = v26 ? (uint64_t)(v39 + 72) : (uint64_t)(v14 + 133);
            *(void *)uint64_t v28 = *(void *)v27;
            *(_DWORD *)(v28 + 8) = v27[2];
            uint64_t v34 = v24;
            if (*(_DWORD *)&v45[1]) {
              break;
            }
LABEL_44:
            uint64_t v24 = v34 + 1;
            if (v34 + 1 == v32)
            {
              uint64_t v12 = 0;
              goto LABEL_48;
            }
          }
          int v29 = 0;
          while (1)
          {
            int v41 = v29;
            if (v26)
            {
              uu[0] = 0xAAAAAAAAAAAAAAAALL;
              uu[1] = 0xAAAAAAAAAAAAAAAALL;
              MEMORY[0x216670B10](uu);
              uuid_unparse((const unsigned __int8 *)uu, v39 + 5452);
              if (Apple80211RawSet()) {
                break;
              }
              __strlcpy_chk();
            }
            else if (Apple80211RawSet())
            {
              break;
            }
            if (v38 != 3)
            {
              uint64_t v12 = _waitForScanComplete();
              if (v12) {
                goto LABEL_48;
              }
            }
            while (1)
            {
              bzero(v47, 0x8D8uLL);
              v47[0] = 1;
              HIWORD(v47[34]) = 2048;
              if (*(unsigned char *)(v5 + 1992)) {
                __strlcpy_chk();
              }
              if (Apple80211RawGet(v5, (uint64_t)&v50)) {
                break;
              }
              _addScanResultToList(v5, (uint64_t)v47, Mutable, v10, 0, HIBYTE(v45[0]), v23, LOBYTE(v45[0]), v44, v42, 0, 0);
              if (v25 < CFArrayGetCount(v10))
              {
                v37(0, v5, v10, v36);
                ++v25;
              }
            }
            if (*__error() != 5) {
              break;
            }
            int v29 = v41 + 1;
            unsigned int v26 = v39;
            if ((v41 + 1) >= *(_DWORD *)&v45[1]) {
              goto LABEL_44;
            }
          }
          uint64_t v12 = *__error();
LABEL_48:
          int v11 = v35;
          goto LABEL_49;
        }
        uint64_t v30 = 0;
        int v11 = v35;
      }
      else
      {
        uint64_t v30 = 4294963396;
      }
    }
    else
    {
      uint64_t v30 = 4294963393;
    }
  }
LABEL_50:
  CFRelease(Mutable);
LABEL_51:
  if (v10) {
    CFRelease(v10);
  }
  if ((v11 & 0x80000000) == 0) {
    close(v11);
  }
  *(unsigned char *)(v5 + 1992) = 0;
  return v30;
}

uint64_t Apple80211ParseWPAPassword(char *a1, unsigned char *a2, uint64_t a3, char *a4, void *a5, unint64_t a6)
{
  BOOL v7 = 0;
  v16[1] = *MEMORY[0x263EF8340];
  if (!a1 || !a2)
  {
    char v10 = 0;
    if (!a4) {
      goto LABEL_18;
    }
LABEL_17:
    *a4 = v10;
    goto LABEL_18;
  }
  char v10 = 0;
  if (!a5)
  {
LABEL_16:
    if (!a4) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  size_t v13 = strlen(a1);
  if (v13 - 8 > 0x37)
  {
    if (v13 == 64 && strspn(a1, "0123456789abcdefABCDEF") == 64)
    {
      v16[0] = 0xAAAAAAAAAAAAAAAALL;
      if (_ParseHexEncodedData(a1, 64, 32, a2, v16))
      {
        char v10 = 0;
        BOOL v7 = v16[0] == 32;
        if (!a4) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    BOOL v7 = 0;
    char v10 = 0;
    goto LABEL_16;
  }
  if (a6 >= 0x20) {
    size_t v14 = 32;
  }
  else {
    size_t v14 = a6;
  }
  IEEE80211iPasswordHash((uint64_t)a1, v13, a5, v14, a2);
  BOOL v7 = 1;
  char v10 = 1;
  if (a4) {
    goto LABEL_17;
  }
LABEL_18:
  if (v7) {
    return 0;
  }
  else {
    return 4294967196;
  }
}

uint64_t _ParseHexEncodedData(char *a1, uint64_t a2, uint64_t a3, unsigned char *a4, void *a5)
{
  uint64_t v10 = MEMORY[0x263EF8318];
  while (1)
  {
    unsigned int v11 = *a1;
    if ((v11 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(v10 + 4 * v11 + 60) & 0x4000) == 0) {
        break;
      }
      goto LABEL_6;
    }
    if (!__maskrune(v11, 0x4000uLL)) {
      break;
    }
LABEL_6:
    ++a1;
    if (!--a2)
    {
      uint64_t result = 1;
      size_t v13 = a4;
      if (!a5) {
        return result;
      }
      goto LABEL_29;
    }
  }
  dispatch_time_t v20 = a5;
  uint64_t v14 = 0;
  size_t v13 = a4;
  while (1)
  {
    unsigned int v15 = __tolower(a1[v14]);
    if (v15 > 0xFF) {
      break;
    }
    char v16 = v15;
    if ((*(_DWORD *)(v10 + 4 * v15 + 60) & 0x10000) == 0) {
      break;
    }
    char v17 = v15 <= 0x60 ? -48 : -87;
    if (a2 - 1 == v14) {
      break;
    }
    unsigned int v18 = __tolower(a1[v14 + 1]);
    if (v18 > 0xFF || (*(_DWORD *)(v10 + 4 * v18 + 60) & 0x10000) == 0) {
      break;
    }
    if (v18 <= 0x60) {
      char v19 = -48;
    }
    else {
      char v19 = -87;
    }
    if (a3)
    {
      if (v13) {
        *v13++ = (v19 + v18) | (16 * (v17 + v16));
      }
      --a3;
    }
    v14 += 2;
    if (a2 == v14)
    {
      uint64_t result = 1;
      goto LABEL_28;
    }
  }
  uint64_t result = 0;
LABEL_28:
  a5 = v20;
  if (v20) {
LABEL_29:
  }
    *a5 = v13 - a4;
  return result;
}

uint64_t Apple80211AssociateAsync(uint64_t a1, const __CFDictionary *a2, const __CFString *a3)
{
  return _performAssociation(a1, a2, a3, 1);
}

uint64_t _performAssociation(uint64_t a1, const __CFDictionary *a2, const __CFString *a3, int a4)
{
  uint64_t v266 = *MEMORY[0x263EF8340];
  uint64_t valuePtr = 0;
  uint64_t v202 = 0;
  bzero(v230, 0x380uLL);
  int __src = 1;
  p_src = (int *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v226 = v7;
  long long v227 = v7;
  long long v224 = v7;
  long long v225 = v7;
  long long v222 = v7;
  long long v223 = v7;
  long long v220 = v7;
  long long v221 = v7;
  long long v218 = v7;
  long long v219 = v7;
  long long v216 = v7;
  long long v217 = v7;
  long long v214 = v7;
  long long v215 = v7;
  long long v212 = v7;
  long long v213 = v7;
  *(_OWORD *)__s = v7;
  long long v211 = v7;
  unsigned int v200 = -1431655766;
  char v199 = 0;
  int v198 = 0;
  if (!a1 || (*(_DWORD *)a1 & 0x80000000) != 0) {
    goto LABEL_330;
  }
  uint64_t v8 = 4294963396;
  if (!a2) {
    goto LABEL_474;
  }
  uint64_t v9 = a1 + 4;
  if (!*(unsigned char *)(a1 + 4)) {
    goto LABEL_474;
  }
  if ((byte_26ACCC3B1 & 1) == 0)
  {
    *(void *)buffer = 0;
    os_parse_boot_arg_int();
    _MergedGlobals_0 = 0;
    byte_26ACCC3B1 = 1;
  }
  p_src = 0;
  long long v226 = 0u;
  long long v227 = 0u;
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a2, @"SSID");
  if (!Value) {
    goto LABEL_474;
  }
  CFDataRef v11 = Value;
  unsigned int range = CFDataGetLength(Value);
  if (range - 1 > 0x1F || CFDataGetLength(v11) < 1) {
    goto LABEL_474;
  }
  v267.length = range;
  v267.location = 0;
  CFDataGetBytes(v11, v267, v234);
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a2, @"TRANS_DISABLED_FLAGS_ASSOC");
  if (v12) {
    CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
  }
  int v263 = valuePtr;
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a2, @"SCAN_RESULT_OWE_MULTI_SSID");
  makeBoolRef(v13);
  CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"PRIVATE_MAC_ADDRESS");
  if (v14)
  {
    CFDictionaryRef v15 = v14;
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(v14, @"PRIVATE_MAC_ADDRESS_VALID");
    CFBooleanRef BoolRef = makeBoolRef(v16);
    CFDataRef v18 = (const __CFData *)CFDictionaryGetValue(v15, @"PRIVATE_MAC_ADDRESS_VALUE");
    if (BoolRef && !CFBooleanGetValue(BoolRef))
    {
      v251 |= 0x40u;
      if (v18) {
        goto LABEL_16;
      }
    }
    else if (v18)
    {
LABEL_16:
      v268.location = 0;
      v268.length = 6;
      CFDataGetBytes(v18, v268, (UInt8 *)&v257);
      *(_WORD *)&buffer[4] = 0;
      *(_DWORD *)buffer = 0;
      if (v257 | v258 && (v257 & 3) == 2)
      {
        syslog(3, " WFMacRandomisation : Private mac address being used :  %02x:%02x:%02x:%02x:%02x:%02x\n", v257, BYTE1(v257), BYTE2(v257), HIBYTE(v257), v258, HIBYTE(v258));
        v250 |= 8u;
      }
      else
      {
        syslog(3, " WFMacRandomisation : Private mac address invalid, will not be used :  %02x:%02x:%02x:%02x:%02x:%02x\n");
      }
      goto LABEL_22;
    }
    syslog(3, " WFMacRandomisation : Private mac config specified, but no private mac address value\n");
  }
LABEL_22:
  CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"BSS_BLACKLIST");
  uint64_t v194 = a1;
  if (v19)
  {
    CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(v19, @"BSS_BLACKLIST_BSSIDS");
    if (v20)
    {
      CFArrayRef v21 = v20;
      CFIndex Count = CFArrayGetCount(v20);
      CFIndex v23 = Count;
      if ((unint64_t)(Count - 1) > 9)
      {
        syslog(3, "%s: Invalid bss blacklist count %ld\n");
      }
      else
      {
        CFIndex v24 = 0;
        char v259 = Count;
        CFIndex v25 = v260;
        do
        {
          CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v21, v24);
          v269.location = 0;
          v269.length = 6;
          CFDataGetBytes(ValueAtIndex, v269, v25);
          ++v24;
          v25 += 6;
        }
        while (v23 != v24);
        v250 |= 0x10u;
      }
    }
    else
    {
      syslog(3, "%s: Missing bss blacklist\n");
    }
  }
  CFStringRef v27 = (const __CFString *)CFDictionaryGetValue(a2, @"COLOCATED_NETWORK_SCOPE_ID");
  if (v27)
  {
    CFStringRef v28 = v27;
    if ((unint64_t)(CFStringGetLength(v27) - 1) > 0x23)
    {
      syslog(3, "%s: Invalid length for colocatedNetworkScopeId = %ld. Max allowed = %lu\n");
    }
    else if (CFStringGetCString(v28, v261, 37, 0x8000100u) == 1)
    {
      *(_DWORD *)&v260[61] = strlen(v261);
      v250 |= 0x40u;
    }
    else
    {
      memset(v261, 0, sizeof(v261));
      syslog(3, "%s: Invalid colocatedNetworkScopeId\n");
    }
  }
  CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(a2, @"BAND_PREFERENCE");
  if (v29)
  {
    *(_DWORD *)buffer = -1431655766;
    if (CFNumberGetValue(v29, kCFNumberSInt32Type, buffer)) {
      int v264 = *(_DWORD *)buffer;
    }
  }
  CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(a2, @"FORCE_BSSID");
  CFBooleanRef v31 = makeBoolRef(v30);
  if (v31 && CFBooleanGetValue(v31) == 1)
  {
    CFStringRef v32 = (const __CFString *)CFDictionaryGetValue(a2, @"BSSID");
    if (!v32) {
      goto LABEL_330;
    }
    memset(buffer, 170, 18);
    if (!CFStringGetCString(v32, buffer, 18, 0x8000100u)) {
      goto LABEL_330;
    }
    syslog(3, "%s: ForceBSSID forcing bssid %s\n", "_performAssociation", buffer);
    unsigned int v33 = ether_aton(buffer);
    if (!v33) {
      goto LABEL_330;
    }
    int v34 = *(_DWORD *)v33->octet;
    __int16 v236 = *(_WORD *)&v33->octet[4];
    int v235 = v34;
    v249 |= 0x20u;
  }
  CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(a2, @"CARPLAY_NETWORK");
  CFBooleanRef v36 = makeBoolRef(v35);
  if (v36 && CFBooleanGetValue(v36) == 1)
  {
    int v37 = 0;
    v250 |= 1u;
  }
  else
  {
    int v37 = 1;
  }
  CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(a2, @"INSTANT_HOTSPOT_ASSOC");
  CFBooleanRef v39 = makeBoolRef(v38);
  if (v39 && CFBooleanGetValue(v39) == 1)
  {
    int v37 = 0;
    v250 |= 2u;
  }
  CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue(a2, @"AUTO_INSTANT_HOTSPOT_ASSOC");
  CFBooleanRef v41 = makeBoolRef(v40);
  if (v41 && CFBooleanGetValue(v41) == 1)
  {
    v250 |= 4u;
  }
  else if (v37)
  {
    v251 |= 0x20u;
  }
  CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(a2, @"ASSOC_REASON");
  if (v42)
  {
    char v252 = 0;
    if (CFNumberGetValue(v42, kCFNumberSInt8Type, &v200))
    {
      if ((v200 & 0x80000000) != 0)
      {
        syslog(3, "%s: Invalid assoc reason: %d \n", "_performAssociation", v200);
      }
      else
      {
        if (v200 > 2)
        {
          uint64_t v8 = 4294963365;
          goto LABEL_474;
        }
        char v252 = v200;
      }
    }
  }
  long long v224 = 0u;
  long long v225 = 0u;
  long long v222 = 0u;
  long long v223 = 0u;
  long long v220 = 0u;
  long long v221 = 0u;
  long long v218 = 0u;
  long long v219 = 0u;
  long long v216 = 0u;
  long long v217 = 0u;
  long long v214 = 0u;
  long long v215 = 0u;
  long long v212 = 0u;
  long long v213 = 0u;
  *(_OWORD *)__s = 0u;
  long long v211 = 0u;
  CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(a2, @"WAPI");
  if (v43 && CFNumberGetValue(v43, kCFNumberSInt32Type, (char *)&valuePtr + 4))
  {
    char v44 = 0;
    BOOL v45 = (~HIDWORD(valuePtr) & 0xB) == 0;
    BOOL v46 = (~HIDWORD(valuePtr) & 7) == 0;
  }
  else
  {
    BOOL v45 = 0;
    BOOL v46 = 0;
    char v44 = 1;
  }
  size_t v47 = 0;
  if (a3 && !v45)
  {
    CFIndex Length = CFStringGetLength(a3);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    if (MaximumSizeForEncoding > 255) {
      goto LABEL_330;
    }
    size_t v47 = MaximumSizeForEncoding;
    if (MaximumSizeForEncoding >= 1)
    {
      if (CFStringGetCString(a3, __s, 256, 0x8000100u))
      {
        size_t v47 = strlen(__s);
        goto LABEL_73;
      }
LABEL_330:
      uint64_t v8 = 4294963396;
      goto LABEL_474;
    }
  }
LABEL_73:
  LODWORD(v227) = 20;
  DWORD2(v227) = 900;
  p_src = &__src;
  __strlcpy_chk();
  CFNumberRef v50 = (const __CFNumber *)CFDictionaryGetValue(a2, @"AP_MODE");
  if (!v50 || !CFNumberGetValue(v50, kCFNumberSInt16Type, v230)) {
    v230[0] = 2;
  }
  CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue(a2, @"ASSOC_FLAGS");
  if (v51)
  {
    *(_DWORD *)buffer = 0;
    if (!CFNumberGetValue(v51, kCFNumberSInt32Type, buffer))
    {
      int v59 = 4558;
LABEL_93:
      syslog(3, "%s::%s[%u] Error: Assert failure\n", "/Library/Caches/com.apple.xbs/Sources/IO80211/IO80211API/Apple80211API_iOS.c", "_performAssociation", v59);
      return 0;
    }
    unsigned int v52 = 0;
    int v53 = *(_DWORD *)buffer;
    do
    {
      if (v53) {
        *(&v249 + ((unint64_t)v52 >> 3)) |= 1 << (v52 & 7);
      }
      v53 >>= 1;
      ++v52;
    }
    while (v52 != 24);
  }
  CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(a2, @"WSEC_FLAGS");
  if (!v54) {
    goto LABEL_85;
  }
  *(_DWORD *)buffer = 0;
  if (!CFNumberGetValue(v54, kCFNumberSInt32Type, buffer))
  {
    int v59 = 4578;
    goto LABEL_93;
  }
  int v265 = *(_DWORD *)buffer;
LABEL_85:
  CFStringRef v55 = a3;
  CFDictionaryRef v56 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"FAST_ENTERPRISE_NETWORK");
  CFNumberRef v57 = CFDictionaryGetValue(a2, @"FAST_ENTERPRISE_NETWORK_SUPPORTED_DEVICE");
  int v58 = (CFTypeRef *)MEMORY[0x263EFFB40];
  if (v57)
  {
    BOOL v192 = CFEqual(v57, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    if (!v56) {
      goto LABEL_95;
    }
  }
  else
  {
    BOOL v192 = 0;
    if (!v56) {
      goto LABEL_95;
    }
  }
  long long v60 = CFDictionaryGetValue(v56, @"FT_STATE");
  if (v60) {
    LODWORD(v56) = CFEqual(v60, *v58) != 0;
  }
  else {
    LODWORD(v56) = 0;
  }
LABEL_95:
  if ((v249 & 8) != 0)
  {
    if ((v192 & v56) != 0) {
      int v62 = 128;
    }
    else {
      int v62 = 64;
    }
    int v232 = v62;
  }
  CFNumberRef v63 = (const __CFNumber *)CFDictionaryGetValue(a2, @"SCAN_DIRECTED");
  CFNumberRef v64 = makeBoolRef(v63);
  if (v64 && CFEqual(v64, *v58)) {
    v249 |= 4u;
  }
  if ((v44 & 1) == 0)
  {
    *(_DWORD *)buffer = 0;
    CFAllocatorRef v78 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, a2);
    if (!MutableCopy)
    {
      uint64_t v8 = 4294963395;
      goto LABEL_464;
    }
    CFIndex v80 = MutableCopy;
    if (v55)
    {
      BOOL v82 = (int)CFStringGetLength(v55) >= 256 || !v45 || !v46;
      if (v82 && v45)
      {
        CFDictionaryAddValue(v80, @"CERT", v55);
        BOOL v45 = 1;
      }
      else
      {
        CFNumberRef v86 = CFNumberCreate(v78, kCFNumberIntType, buffer);
        if (!v86)
        {
          uint64_t v8 = 4294963395;
          goto LABEL_470;
        }
        CFNumberRef v87 = v86;
        CFDictionaryAddValue(v80, @"PSK", v55);
        CFDictionaryAddValue(v80, @"PSK_KEY_TYPE", v87);
        CFRelease(v87);
        BOOL v45 = 0;
      }
    }
    int v88 = _WAPIStart_wapistart;
    if (!_WAPIStart_wapistart)
    {
      int v88 = funcAddr("WAPIStart");
      _WAPIStart_wapistart = v88;
      if (!v88)
      {
        uint64_t v8 = 0xFFFFFFFFLL;
        if (!v55) {
          goto LABEL_183;
        }
LABEL_146:
        if (v46 && !v45)
        {
          int v89 = strlen(__s);
          uint64_t v68 = v194;
          if (v89 && v89 == strspn(__s, "0123456789abcdefABCDEF"))
          {
            *(_DWORD *)buffer = 1;
            CFNumberRef v90 = CFNumberCreate(v78, kCFNumberIntType, buffer);
            if (!v90)
            {
              uint64_t v8 = 4294963395;
              goto LABEL_471;
            }
            CFNumberRef v91 = v90;
            CFDictionarySetValue(v80, @"PSK_KEY_TYPE", v90);
            CFRelease(v91);
            CFBooleanRef v92 = (uint64_t (*)(uint64_t, __CFDictionary *))_WAPIStart_wapistart;
            if (_WAPIStart_wapistart
              || (CFBooleanRef v92 = (uint64_t (*)(uint64_t, __CFDictionary *))funcAddr("WAPIStart"),
                  (_WAPIStart_wapistart = v92) != 0))
            {
              uint64_t v8 = v92(v9, v80);
              if (!v8) {
                goto LABEL_471;
              }
            }
            else
            {
              uint64_t v8 = 0xFFFFFFFFLL;
            }
          }
          goto LABEL_184;
        }
LABEL_183:
        uint64_t v68 = v194;
LABEL_184:
        Apple80211SetWithIOCTL();
LABEL_471:
        CFRelease(v80);
        goto LABEL_472;
      }
    }
    uint64_t v8 = ((uint64_t (*)(uint64_t, __CFDictionary *))v88)(v9, v80);
    if (v8)
    {
      if (!v55) {
        goto LABEL_183;
      }
      goto LABEL_146;
    }
LABEL_470:
    uint64_t v68 = v194;
    goto LABEL_471;
  }
  CFDictionaryRef v65 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"WPA_IE");
  CFDictionaryRef v66 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"RSN_IE");
  CFDictionaryRef v67 = v66;
  int v256 = 0;
  uint64_t v68 = v194;
  if (v230[0] == 1 && (unint64_t)v65 | (unint64_t)v66)
  {
    if (v66)
    {
      CFDictionaryRef v69 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"RSN_IE");
      CFNumberRef v70 = (const __CFNumber *)CFDictionaryGetValue(v69, @"IE_KEY_RSN_VERSION");
      if (v70)
      {
        *(_WORD *)buf = -21846;
        *(_DWORD *)buffer = -1431655766;
        uint64_t started = 4294963396;
        if (!CFNumberGetValue(v70, kCFNumberSInt16Type, buf)) {
          return started;
        }
        if (*(unsigned __int16 *)buf != 1) {
          return started;
        }
        CFNumberRef v71 = (const __CFNumber *)CFDictionaryGetValue(v69, @"IE_KEY_RSN_MCIPHER");
        if (!v71) {
          return started;
        }
        if (!CFNumberGetValue(v71, kCFNumberSInt32Type, buffer)) {
          return started;
        }
        if (*(_DWORD *)buffer != 4) {
          return started;
        }
        CFArrayRef v72 = (const __CFArray *)CFDictionaryGetValue(v69, @"IE_KEY_RSN_UCIPHERS");
        if (!v72) {
          return started;
        }
        CFArrayRef v73 = v72;
        CFIndex v74 = CFArrayGetCount(v72);
        if (v74 >= 1)
        {
          CFIndex v75 = v74;
          for (CFIndex i = 0; v75 != i; ++i)
          {
            CFNumberRef v77 = (const __CFNumber *)CFArrayGetValueAtIndex(v73, i);
            if (!CFNumberGetValue(v77, kCFNumberSInt32Type, buffer)) {
              break;
            }
            if (*(_DWORD *)buffer == 4)
            {
              CFArrayRef v109 = (const __CFArray *)CFDictionaryGetValue(v69, @"IE_KEY_RSN_AUTHSELS");
              if (v109)
              {
                CFArrayRef v110 = v109;
                CFIndex v111 = CFArrayGetCount(v109);
                if (v111 >= 1)
                {
                  CFIndex v112 = v111;
                  CFIndex v113 = 0;
                  while (1)
                  {
                    CFNumberRef v114 = (const __CFNumber *)CFArrayGetValueAtIndex(v110, v113);
                    if (!CFNumberGetValue(v114, kCFNumberSInt32Type, buffer)) {
                      break;
                    }
                    if (*(_DWORD *)buffer == 2)
                    {
                      CFDictionaryRef v128 = (const __CFDictionary *)CFDictionaryGetValue(v69, @"IE_KEY_RSN_CAPS");
                      if (!v128) {
                        return 4294963396;
                      }
                      CFDictionaryRef v129 = v128;
                      CFBooleanRef v130 = (const __CFBoolean *)CFDictionaryGetValue(v128, @"PRE_AUTH");
                      if (!v130) {
                        return 4294963396;
                      }
                      if (CFBooleanGetValue(v130)) {
                        return 4294963396;
                      }
                      CFBooleanRef v131 = (const __CFBoolean *)CFDictionaryGetValue(v129, @"NO_PAIRWISE");
                      if (!v131) {
                        return 4294963396;
                      }
                      if (CFBooleanGetValue(v131)) {
                        return 4294963396;
                      }
                      CFNumberRef v132 = (const __CFNumber *)CFDictionaryGetValue(v129, @"PTKSA_REPLAY_COUNTERS");
                      if (!v132) {
                        return 4294963396;
                      }
                      uint64_t started = 4294963396;
                      if (CFNumberGetValue(v132, kCFNumberSInt16Type, buf))
                      {
                        if (*(unsigned __int16 *)buf == 4)
                        {
                          CFNumberRef v133 = (const __CFNumber *)CFDictionaryGetValue(v129, @"GTKSA_REPLAY_COUNTERS");
                          if (v133)
                          {
                            if (CFNumberGetValue(v133, kCFNumberSInt16Type, buf) && *(unsigned __int16 *)buf == 1)
                            {
                              CFAllocatorRef v134 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
                              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                              if (Mutable)
                              {
                                CFTypeID v136 = Mutable;
                                *(_WORD *)buf = 1;
                                CFNumberRef v137 = CFNumberCreate(v134, kCFNumberSInt16Type, buf);
                                if (!v137) {
                                  goto LABEL_492;
                                }
                                CFNumberRef v138 = v137;
                                CFDictionaryAddValue(v136, @"AP_MODE_AUTH_LOWER", v137);
                                CFRelease(v138);
                                strcpy((char *)buf, "\b");
                                CFNumberRef v139 = CFNumberCreate(v134, kCFNumberSInt16Type, buf);
                                if (!v139) {
                                  goto LABEL_492;
                                }
                                CFNumberRef v140 = v139;
                                CFDictionaryAddValue(v136, @"AP_MODE_AUTH_UPPER", v139);
                                CFRelease(v140);
                                *(_DWORD *)buffer = 6;
                                CFNumberRef v141 = CFNumberCreate(v134, kCFNumberSInt32Type, buffer);
                                if (v141)
                                {
                                  CFNumberRef v142 = v141;
                                  CFDictionaryAddValue(v136, @"AP_MODE_CYPHER_TYPE", v141);
                                  CFRelease(v142);
                                  CFMutableDictionaryRef v143 = CFDictionaryGetValue(a2, @"CHANNEL");
                                  if (v143
                                    && (CFDictionaryAddValue(v136, @"CHANNEL", v143),
                                        (CFTypeID v144 = CFDictionaryGetValue(a2, @"CHANNEL_FLAGS")) != 0)
                                    && (CFDictionaryAddValue(v136, @"CHANNEL_FLAGS", v144),
                                        CFNumberRef v145 = CFDictionaryGetValue(a2, @"SSID"),
                                        CFDictionaryAddValue(v136, @"AP_MODE_SSID_BYTES", v145),
                                        v55))
                                  {
                                    CFDictionaryAddValue(v136, @"AP_MODE_KEY", v55);
                                    uint64_t started = _startAPMode(v194, v136, 24);
                                  }
                                  else
                                  {
                                    uint64_t started = 4294963396;
                                  }
                                }
                                else
                                {
LABEL_492:
                                  uint64_t started = 4294963395;
                                }
                                CFRelease(v136);
                              }
                              else
                              {
                                return 4294963395;
                              }
                            }
                          }
                        }
                      }
                      return started;
                    }
                    if (v112 == ++v113) {
                      return 4294963396;
                    }
                  }
                }
              }
              return 4294963396;
            }
          }
        }
      }
    }
    return 4294963396;
  }
  int v191 = (int)v56;
  CFNumberRef v83 = (const __CFNumber *)CFDictionaryGetValue(a2, @"WPS_ASSOCIATE");
  CFBooleanRef v84 = makeBoolRef(v83);
  CFBooleanRef v85 = v84;
  if (!((unint64_t)v65 | (unint64_t)v67) || v84 && CFBooleanGetValue(v84))
  {
    if (v232 > 2047)
    {
      if (v232 != 2048 && v232 != 0x4000 && v232 != 0x8000)
      {
LABEL_158:
        CFNumberRef v93 = (const __CFNumber *)CFDictionaryGetValue(a2, @"WEP");
        if (makeBoolRef(v93) != *v58) {
          goto LABEL_159;
        }
        if (!v55)
        {
          uint64_t v8 = 4294967196;
          goto LABEL_474;
        }
        CFNumberRef v115 = (const __CFNumber *)CFDictionaryGetValue(a2, @"WEP_AUTH_Flags");
        if (v115)
        {
          CFNumberGetValue(v115, kCFNumberSInt32Type, &v202);
          uint64_t v116 = _joinWEPNetwork(v194, (uint64_t)&v226, __s, v202, a4);
          if (v116 != -100)
          {
            uint64_t v8 = v116;
            if (a4)
            {
LABEL_212:
              char v96 = 0;
              goto LABEL_473;
            }
            char v96 = 0;
            if ((v116 + 3912) > 7 || ((1 << (v116 + 72)) & 0x85) == 0) {
              goto LABEL_473;
            }
          }
        }
        uint64_t v202 = 0x100000000;
        uint64_t v8 = _initiateAutoWEPSequence(v194, (uint64_t)&v226, __s, (_DWORD *)&v202 + 1, (int *)&v202, a4);
        goto LABEL_212;
      }
    }
    else if (v232 != 4 && v232 != 64 && v232 != 128)
    {
      goto LABEL_158;
    }
LABEL_159:
    if (v55)
    {
      uint64_t v8 = 4294967195;
      goto LABEL_474;
    }
    int v231 = 1;
    if (v85 && CFBooleanGetValue(v85))
    {
      int v232 = 256;
    }
    else if ((*(unsigned char *)(v194 + 100) & 1) != 0 && v230[0] != 1 && v232 != 64)
    {
      v256 |= 0x20000001u;
      int v262 = 1;
    }
    int v246 = 0;
    long long v245 = 0u;
    long long v244 = 0u;
    long long v243 = 0u;
    long long v242 = 0u;
    long long v241 = 0u;
    long long v240 = 0u;
    long long v239 = 0u;
    long long v238 = 0u;
    long long v237 = 0u;
    int v94 = Apple80211RawSet();
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v95 = *__error();
      *(_DWORD *)buffer = 136315906;
      *(void *)&buffer[4] = "_performAssociation";
      *(_WORD *)&buffer[12] = 1024;
      *(_DWORD *)&buffer[14] = 5357;
      *(_WORD *)&buffer[18] = 1024;
      *(_DWORD *)&buffer[20] = v94;
      *(_WORD *)&char buffer[24] = 1024;
      *(_DWORD *)&buffer[26] = v95;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%u bsdErr:0x%0x  error:0x%0x \n", (uint8_t *)buffer, 0x1Eu);
    }
    if (!v94)
    {
      if (a4)
      {
LABEL_171:
        char v96 = 1;
        goto LABEL_475;
      }
      if (*(void *)(v194 + 56) && (*(unsigned char *)(v194 + 21) & 1) != 0 && (*(unsigned char *)(v194 + 93) & 0x40) != 0)
      {
        CFRunLoopRunInMode((CFRunLoopMode)*MEMORY[0x263EFFE88], 10.0, 0);
        goto LABEL_171;
      }
      uint64_t v102 = _waitForJoinResult(v194);
LABEL_181:
      uint64_t v8 = v102;
      goto LABEL_472;
    }
LABEL_467:
    uint64_t v8 = *__error();
    goto LABEL_472;
  }
  CFNumberRef v97 = (const __CFNumber *)*v58;
  CFNumberRef v98 = (const __CFNumber *)CFDictionaryGetValue(a2, @"ALLOW_WPA2_PSK");
  BOOL v99 = v97 == makeBoolRef(v98);
  CFNumberRef v100 = (const __CFNumber *)CFDictionaryGetValue(a2, @"ALLOW_OWE_TSN");
  CFNumberRef v101 = makeBoolRef(v100);
  LODWORD(v237) = 1;
  int v231 = 1;
  unsigned int v197 = -1431655766;
  if (v67 && (*(unsigned char *)(v194 + 89) & 0x40) != 0)
  {
    CFNumberRef v189 = v101;
    unsigned int v196 = 0;
    CFNumberRef v103 = (const __CFNumber *)CFDictionaryGetValue(a2, @"AUTH_SEL_OVERRIDE");
    CFNumberRef v104 = v103;
    CFStringRef v190 = v55;
    if (v103)
    {
      if (!CFNumberGetValue(v103, kCFNumberSInt32Type, &v196)) {
        goto LABEL_401;
      }
      uint64_t v8 = 4294967196;
      if ((int)v196 <= 7)
      {
        if (v196 != 1)
        {
          if (v196 != 2) {
            goto LABEL_472;
          }
          int v118 = 8;
          BOOL v99 = 1;
LABEL_218:
          int v119 = 8;
LABEL_219:
          CFStringRef v106 = v190;
          int v120 = v256;
          int v232 = v119;
          v256 |= 4u;
          int v121 = 1;
          if ((*(unsigned char *)(v68 + 97) & 8) == 0 || _MergedGlobals_0) {
            goto LABEL_372;
          }
LABEL_350:
          int v121 = 0;
          int v162 = v120 | 0x40000004;
LABEL_371:
          int v256 = v162;
          goto LABEL_372;
        }
        int v118 = 0;
LABEL_329:
        int v158 = 4;
      }
      else
      {
        if (v196 == 24)
        {
          if ((~*(unsigned __int8 *)(v194 + 105) & 0x30) != 0)
          {
            syslog(3, "%s: AUTH override set to WPA3 SAE but AKN24_25 is not supported\n");
            goto LABEL_176;
          }
          int v118 = 0;
LABEL_325:
          int v157 = 0x10000;
LABEL_362:
          int v232 = v157;
          if ((valuePtr & 1) == 0)
          {
            CFStringRef v106 = v190;
            int v121 = 0;
            if (v99)
            {
              v256 |= 0x40000004u;
              BOOL v99 = 1;
              goto LABEL_372;
            }
            BOOL v99 = 0;
            int v162 = v256 | 0x1000000;
            goto LABEL_371;
          }
          int v121 = 0;
          v256 |= 0x41000000u;
LABEL_358:
          CFStringRef v106 = v190;
          goto LABEL_372;
        }
        if (v196 != 12)
        {
          if (v196 != 8) {
            goto LABEL_472;
          }
          if ((*(unsigned char *)(v194 + 97) & 8) == 0)
          {
            syslog(3, "%s: AUTH override set to WPA3 SAE but SAE is not supported\n");
LABEL_176:
            uint64_t v8 = 4294963393;
            goto LABEL_472;
          }
          int v118 = 0;
LABEL_332:
          int v232 = 4096;
          if (valuePtr)
          {
            CFNumberRef v160 = v104;
            int v159 = v256;
            int v161 = 1073742080;
          }
          else
          {
            int v159 = v256;
            CFNumberRef v160 = v104;
            if (!v99)
            {
              int v162 = v256 | 0x100;
LABEL_342:
              CFStringRef v106 = v190;
              int v121 = 0;
              if (v160) {
                int v162 = 256;
              }
              goto LABEL_371;
            }
            int v161 = 1073741828;
          }
          int v162 = v159 | v161;
          goto LABEL_342;
        }
        if ((*(unsigned char *)(v194 + 97) & 0x10) == 0)
        {
          syslog(3, "%s: AUTH override set to WPA3 Enterprise but it is not supported\n");
          goto LABEL_176;
        }
        int v118 = 0;
LABEL_337:
        int v158 = 0x4000;
      }
LABEL_356:
      int v232 = v158;
LABEL_357:
      int v121 = 1;
      goto LABEL_358;
    }
    CFNumberRef v117 = CFDictionaryGetValue(a2, @"FT_ENABLED");
    if (v117) {
      BOOL v187 = CFEqual(v117, v97) != 0;
    }
    else {
      BOOL v187 = 0;
    }
    CFTypeID v146 = CFDictionaryGetValue(a2, @"80211W_ENABLED");
    CFNumberRef v185 = v97;
    if (v146) {
      BOOL v186 = CFEqual(v146, v97) != 0;
    }
    else {
      BOOL v186 = 0;
    }
    _getMFPCaps(a2, &v199, 0);
    _getPhyMode(a2, &v198);
    CFArrayRef v147 = (const __CFArray *)CFDictionaryGetValue(v67, @"IE_KEY_RSN_AUTHSELS");
    if (!v147) {
      goto LABEL_401;
    }
    CFArrayRef v148 = v147;
    CFIndex v149 = CFArrayGetCount(v147);
    if (v149 < 1)
    {
      int v118 = 0;
LABEL_320:
      syslog(3, "authSel %d\n", v196);
      uint64_t v68 = v194;
      CFNumberRef v104 = 0;
      uint64_t v8 = 4294963396;
      switch(v196)
      {
        case 0u:
          goto LABEL_472;
        case 1u:
          goto LABEL_329;
        case 2u:
          if ((v192 & v191 & 1) == 0) {
            goto LABEL_218;
          }
          int v119 = 16;
          goto LABEL_219;
        case 3u:
          int v158 = 128;
          goto LABEL_356;
        case 4u:
          int v163 = 16;
          goto LABEL_348;
        case 5u:
          int v158 = 2048;
          goto LABEL_356;
        case 6u:
          int v163 = 1024;
LABEL_348:
          int v120 = v256;
          int v232 = v163;
          v256 |= 4u;
          int v121 = 1;
          if ((*(unsigned char *)(v194 + 97) & 8) == 0) {
            goto LABEL_358;
          }
          CFStringRef v106 = v190;
          if (!_MergedGlobals_0) {
            goto LABEL_350;
          }
          goto LABEL_372;
        case 8u:
          goto LABEL_332;
        case 9u:
          int v232 = 0x2000;
          if (valuePtr)
          {
            int v164 = v256;
            int v165 = 1073742080;
          }
          else
          {
            int v164 = v256;
            if (!v99)
            {
              int v162 = v256 | 0x100;
LABEL_370:
              CFStringRef v106 = v190;
              int v121 = 0;
              goto LABEL_371;
            }
            int v165 = 1073741828;
          }
          int v162 = v164 | v165;
          goto LABEL_370;
        case 0xCu:
          goto LABEL_337;
        case 0xDu:
          int v158 = 0x8000;
          goto LABEL_356;
        case 0x12u:
          int v262 = 1;
          if (v185 == v189) {
            int v166 = v256 | 0x20000001;
          }
          else {
            int v166 = v256 | 0x40000;
          }
          int v256 = v166;
          goto LABEL_357;
        case 0x18u:
          goto LABEL_325;
        case 0x19u:
          int v157 = 0x20000;
          goto LABEL_362;
        default:
          syslog(3, "******%s: unknown type (%d)\n", "_performAssociation", v196);
          goto LABEL_459;
      }
    }
    CFIndex v150 = v149;
    int v118 = 0;
    CFIndex v151 = 0;
    if ((v192 & v191) != 0) {
      int v152 = 16;
    }
    else {
      int v152 = 8;
    }
    int v188 = v152;
    while (1)
    {
      CFNumberRef v153 = (const __CFNumber *)CFArrayGetValueAtIndex(v148, v151);
      if (v153)
      {
        if (CFNumberGetValue(v153, kCFNumberSInt32Type, &v197)) {
          break;
        }
      }
LABEL_317:
      if (v150 == ++v151) {
        goto LABEL_320;
      }
    }
    unsigned int v154 = v197;
    switch(v197)
    {
      case 6u:
        int v118 = 1024;
        break;
      case 4u:
        int v118 = 16;
        break;
      case 2u:
        BOOL v99 = 1;
        int v118 = v188;
        goto LABEL_276;
      default:
        switch(v197)
        {
          case 1u:
          case 3u:
          case 5u:
            goto LABEL_276;
          case 8u:
          case 9u:
            if (!_MergedGlobals_0 && v199 && (*(unsigned char *)(v194 + 97) & 8) != 0) {
              goto LABEL_276;
            }
            break;
          case 0xCu:
          case 0xDu:
            if (!_MergedGlobals_0 && v199 && (*(unsigned char *)(v194 + 97) & 0x10) != 0) {
              goto LABEL_276;
            }
            break;
          case 0x12u:
            if (!_MergedGlobals_0 && (*(unsigned char *)(v194 + 100) & 1) != 0) {
              goto LABEL_276;
            }
            break;
          case 0x18u:
          case 0x19u:
            if ((~*(unsigned __int8 *)(v194 + 105) & 0x30) == 0 && !_MergedGlobals_0 && v199 && (v198 & 0x200) != 0) {
              goto LABEL_276;
            }
            break;
          default:
            goto LABEL_317;
        }
        goto LABEL_317;
    }
    BOOL v99 = 1;
LABEL_276:
    if (rsnAuthSelectorPriorityMap[v197] > rsnAuthSelectorPriorityMap[v196])
    {
      switch(v197)
      {
        case 1u:
        case 2u:
          BOOL v155 = v192;
          if (v232 != 128) {
            BOOL v155 = 0;
          }
          if ((v155 & v191) == 1) {
            unsigned int v154 = 3;
          }
          goto LABEL_290;
        case 3u:
        case 4u:
          if (!v187) {
            goto LABEL_317;
          }
          goto LABEL_290;
        case 5u:
        case 6u:
          if (v186) {
            goto LABEL_290;
          }
          goto LABEL_317;
        case 8u:
        case 0xCu:
        case 0x18u:
LABEL_290:
          unsigned int v196 = v154;
          goto LABEL_317;
        case 9u:
          if (v187)
          {
            unsigned int v156 = 9;
            goto LABEL_316;
          }
          if (((0x7CFFCCD5uLL >> v196) & 1) == 0) {
            goto LABEL_317;
          }
          unsigned int v156 = 8;
          goto LABEL_316;
        case 0xDu:
          if (v192 & v191)
          {
            unsigned int v156 = 13;
            goto LABEL_316;
          }
          if (((0x7FFFCFF7uLL >> v196) & 1) == 0) {
            goto LABEL_317;
          }
          unsigned int v156 = 12;
          goto LABEL_316;
        case 0x12u:
          unsigned int v156 = 18;
          goto LABEL_316;
        case 0x19u:
          if (v187)
          {
            unsigned int v156 = 25;
          }
          else
          {
            if (((0x7CFFCFD5uLL >> v196) & 1) == 0) {
              goto LABEL_317;
            }
            unsigned int v156 = 24;
          }
LABEL_316:
          unsigned int v196 = v156;
          break;
        default:
          goto LABEL_317;
      }
    }
    goto LABEL_317;
  }
  if (!v65 || (*(unsigned char *)(v194 + 89) & 0x20) == 0) {
    goto LABEL_176;
  }
  CFStringRef v106 = v55;
  unsigned int v196 = 0;
  CFNumberRef v107 = (const __CFNumber *)CFDictionaryGetValue(a2, @"AUTH_SEL_OVERRIDE");
  if (v107)
  {
    if (CFNumberGetValue(v107, kCFNumberSInt32Type, &v196))
    {
      unsigned int v108 = v196;
      if (v196 - 1 >= 2) {
        goto LABEL_459;
      }
      goto LABEL_232;
    }
    goto LABEL_401;
  }
  CFArrayRef v122 = (const __CFArray *)CFDictionaryGetValue(v65, @"IE_KEY_WPA_AUTHSELS");
  if (!v122) {
    goto LABEL_501;
  }
  CFArrayRef v123 = v122;
  CFIndex v124 = CFArrayGetCount(v122);
  if (v124 < 1)
  {
LABEL_231:
    unsigned int v108 = v196;
    uint64_t v68 = v194;
    CFStringRef v106 = v55;
    if (v196)
    {
LABEL_232:
      if (v108 == 2)
      {
        int v118 = 0;
        int v232 = 2;
        int v121 = 1;
        goto LABEL_372;
      }
      if (v108 == 1) {
        goto LABEL_339;
      }
      goto LABEL_459;
    }
LABEL_401:
    uint64_t v8 = 4294963396;
    goto LABEL_472;
  }
  CFIndex v125 = v124;
  CFIndex v126 = 0;
  while (1)
  {
    CFNumberRef v127 = (const __CFNumber *)CFArrayGetValueAtIndex(v123, v126);
    if (v127)
    {
      if (CFNumberGetValue(v127, kCFNumberSInt32Type, &v197)) {
        break;
      }
    }
LABEL_230:
    if (v125 == ++v126) {
      goto LABEL_231;
    }
  }
  if (v197 != 1)
  {
    if (v196 < v197) {
      unsigned int v196 = v197;
    }
    goto LABEL_230;
  }
  unsigned int v196 = 1;
  uint64_t v68 = v194;
  CFStringRef v106 = v55;
LABEL_339:
  int v118 = 0;
  int v121 = 1;
  int v232 = 1;
LABEL_372:
  if (!v106)
  {
    int v170 = v232;
    if (v232 > 4095)
    {
      if (v232 >= 0x10000)
      {
        if (v232 != 0x20000 && v232 != 0x10000) {
          goto LABEL_436;
        }
      }
      else if (v232 != 4096 && v232 != 0x2000)
      {
        goto LABEL_436;
      }
    }
    else if ((v232 > 0x10 || ((1 << v232) & 0x10104) == 0) && v232 != 1024)
    {
      goto LABEL_436;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buffer = 136315394;
      *(void *)&buffer[4] = "_performAssociation";
      *(_WORD *)&buffer[12] = 1024;
      *(_DWORD *)&buffer[14] = v170;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Missing password for upper auth %d\n", (uint8_t *)buffer, 0x12u);
    }
    goto LABEL_401;
  }
  *(void *)&long long v167 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v167 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buffer = v167;
  *(_OWORD *)&buffer[16] = v167;
  uint64_t v102 = Apple80211ParseWPAPassword(__s, buffer, v105, 0, v234, range);
  if (v102) {
    goto LABEL_181;
  }
  if (v47 == 64) {
    int v168 = 1;
  }
  else {
    int v168 = v121;
  }
  if (v168 != 1)
  {
    if (v47 - 1 > 0x3F)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        CFNumberRef v204 = "_performAssociation";
        __int16 v205 = 1024;
        int v206 = v47;
        __int16 v207 = 1024;
        int v208 = 0;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%s: invalid length %d for passphrase, usePMK=%d", buf, 0x18u);
      }
    }
    else
    {
      DWORD2(v237) = 10;
      __memcpy_chk();
      long long v254 = *(_OWORD *)buffer;
      long long v255 = *(_OWORD *)&buffer[16];
      DWORD1(v237) = v47;
      int v253 = 32;
    }
    goto LABEL_413;
  }
  long long v238 = *(_OWORD *)buffer;
  long long v239 = *(_OWORD *)&buffer[16];
  *(void *)((char *)&v237 + 4) = 0x600000020;
  if (v47 != 64) {
    goto LABEL_413;
  }
  int v169 = v232;
  if (v232 <= 4095)
  {
    if (v232 == 8 || v232 == 16 || v232 == 1024) {
      goto LABEL_408;
    }
LABEL_413:
    memset(buffer, 0, sizeof(buffer));
    int v170 = v232;
    if (v232 <= 4095)
    {
      if (v232 == 8 || v232 == 16 || v232 == 1024) {
        goto LABEL_424;
      }
    }
    else
    {
      if (v232 < 0x10000)
      {
        if (v232 != 4096 && v232 != 0x2000) {
          goto LABEL_436;
        }
LABEL_424:
        if (v65)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            CFNumberRef v204 = "_performAssociation";
            __int16 v205 = 1024;
            int v206 = v118;
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: WPA IE present, use WPA2-Personal (%u) only", buf, 0x12u);
          }
          if (!v118) {
            goto LABEL_176;
          }
          goto LABEL_435;
        }
        int v195 = -1431655766;
        CFNumberRef v172 = (const __CFNumber *)CFDictionaryGetValue(v67, @"IE_KEY_RSN_MCIPHER");
        if (v172)
        {
          if (CFNumberGetValue(v172, kCFNumberSInt32Type, &v195))
          {
            if (v195 != 2)
            {
              int v170 = v232;
              goto LABEL_436;
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              CFNumberRef v204 = "_performAssociation";
              __int16 v205 = 1024;
              int v206 = 2;
              __int16 v207 = 1024;
              int v208 = v118;
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: RSN has TKIP groupcipher (%u), use WPA2-Personal (%u) only", buf, 0x18u);
            }
            if (v118)
            {
LABEL_435:
              int v170 = (unsigned __int16)v118;
              int v256 = 0;
              int v232 = (unsigned __int16)v118;
              goto LABEL_436;
            }
            uint64_t v8 = 4294963393;
LABEL_464:
            uint64_t v68 = v194;
            goto LABEL_472;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            CFNumberRef v204 = "_performAssociation";
            CFNumberRef v183 = &_os_log_internal;
            CFTypeID v184 = "%s: failed to get groupcipher";
            goto LABEL_500;
          }
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          CFNumberRef v204 = "_performAssociation";
          CFNumberRef v183 = &_os_log_internal;
          CFTypeID v184 = "%s: no groupcipher";
LABEL_500:
          _os_log_impl(&dword_210714000, v183, OS_LOG_TYPE_DEFAULT, v184, buf, 0xCu);
        }
LABEL_501:
        uint64_t v8 = 4294963396;
        goto LABEL_464;
      }
      if (v232 == 0x20000 || v232 == 0x10000) {
        goto LABEL_424;
      }
    }
LABEL_436:
    if (v170 > 2047)
    {
      if (v170 != 2048 && v170 != 0x8000 && v170 != 0x4000) {
        goto LABEL_445;
      }
    }
    else if (v170 != 1 && v170 != 4 && v170 != 128)
    {
      goto LABEL_445;
    }
    *(void *)((char *)&v237 + 4) = 0;
LABEL_445:
    uint64_t v102 = _buildWPAIEForAssocation(a2, (uint64_t)&v248, &v247, (unsigned char *)(v68 + 88), v196, _MergedGlobals_0);
    if (v102) {
      goto LABEL_181;
    }
    int v173 = Apple80211RawSet();
    long long v237 = 0u;
    long long v238 = 0u;
    long long v239 = 0u;
    long long v240 = 0u;
    long long v241 = 0u;
    long long v242 = 0u;
    long long v243 = 0u;
    long long v244 = 0u;
    long long v245 = 0u;
    int v246 = 0;
    *(_OWORD *)__s = 0u;
    long long v211 = 0u;
    long long v212 = 0u;
    long long v213 = 0u;
    long long v214 = 0u;
    long long v215 = 0u;
    long long v216 = 0u;
    long long v217 = 0u;
    long long v218 = 0u;
    long long v219 = 0u;
    long long v220 = 0u;
    long long v221 = 0u;
    long long v222 = 0u;
    long long v223 = 0u;
    long long v224 = 0u;
    long long v225 = 0u;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v174 = *__error();
      *(_DWORD *)buffer = 136315650;
      *(void *)&buffer[4] = "_performAssociation";
      *(_WORD *)&buffer[12] = 1024;
      *(_DWORD *)&buffer[14] = v173;
      *(_WORD *)&buffer[18] = 1024;
      *(_DWORD *)&buffer[20] = v174;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: bsdErr:0x%0x  error:0x%0x \n", (uint8_t *)buffer, 0x18u);
    }
    if (!v173)
    {
      if (!a4)
      {
        if (!*(void *)(v68 + 56) || (*(unsigned char *)(v68 + 21) & 1) == 0 || (*(unsigned char *)(v68 + 93) & 0x40) == 0)
        {
          uint64_t v8 = _waitForJoinResult(v68);
          if (v8) {
            Apple80211SetWithIOCTL();
          }
          goto LABEL_472;
        }
        CFRunLoopRunInMode((CFRunLoopMode)*MEMORY[0x263EFFE88], 10.0, 0);
      }
      uint64_t v8 = 0;
      goto LABEL_472;
    }
    goto LABEL_467;
  }
  if (v232 >= 0x10000)
  {
    if (v232 == 0x20000 || v232 == 0x10000) {
      goto LABEL_408;
    }
    goto LABEL_413;
  }
  if (v232 != 4096 && v232 != 0x2000) {
    goto LABEL_413;
  }
LABEL_408:
  BOOL v171 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (v118 && v99)
  {
    if (v171)
    {
      *(_DWORD *)buf = 136315394;
      CFNumberRef v204 = "_performAssociation";
      __int16 v205 = 1024;
      int v206 = v118;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: 64-byte password, use WPA2-PSK (%u) only\n", buf, 0x12u);
    }
    int v256 = 0;
    int v232 = v118;
    goto LABEL_413;
  }
  if (v171)
  {
    *(_DWORD *)buf = 136315650;
    CFNumberRef v204 = "_performAssociation";
    __int16 v205 = 1024;
    int v206 = v169;
    __int16 v207 = 1024;
    int v208 = v118;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Cannot connect to authtype (%u) with 64-byte password (WPA2 type %u)\n", buf, 0x18u);
  }
LABEL_459:
  uint64_t v8 = 4294967196;
LABEL_472:
  char v96 = 1;
LABEL_473:
  if (v8)
  {
LABEL_474:
    uint64_t started = convertToApple80211Error(v8);
    goto LABEL_488;
  }
LABEL_475:
  pthread_mutex_lock((pthread_mutex_t *)(v68 + 272));
  *(void *)(v68 + 336) = pthread_self();
  CFNumberRef v175 = *(const void **)(v68 + 344);
  if (v175)
  {
    CFRelease(v175);
    *(void *)(v68 + 344) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buffer = 136315394;
      *(void *)&buffer[4] = "_performAssociation";
      *(_WORD *)&buffer[12] = 2048;
      *(void *)&buffer[14] = 0;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Async assoc record reset to NULL[%p]\n", (uint8_t *)buffer, 0x16u);
    }
  }
  uint64_t v176 = *(__CFRunLoopTimer **)(v68 + 1568);
  if (v176)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFRunLoopTimerSetNextFireDate(v176, Current + 315360000.0);
  }
  CFIndex v178 = *(NSObject **)(v68 + 1576);
  if (v178)
  {
    dispatch_time_t v179 = dispatch_time(0, 315360000000000000);
    dispatch_source_set_timer(v178, v179, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  *(_DWORD *)(v68 + 1584) = 0;
  *(_OWORD *)(v68 + 356) = 0u;
  *(_OWORD *)(v68 + 372) = 0u;
  *(_OWORD *)(v68 + 388) = 0u;
  *(_OWORD *)(v68 + 404) = 0u;
  *(_OWORD *)(v68 + 420) = 0u;
  *(_OWORD *)(v68 + 436) = 0u;
  *(_OWORD *)(v68 + 452) = 0u;
  *(_OWORD *)(v68 + 468) = 0u;
  *(_OWORD *)(v68 + 484) = 0u;
  *(_OWORD *)(v68 + 500) = 0u;
  *(_OWORD *)(v68 + 516) = 0u;
  *(_OWORD *)(v68 + 532) = 0u;
  *(_OWORD *)(v68 + 548) = 0u;
  *(_OWORD *)(v68 + 564) = 0u;
  *(_OWORD *)(v68 + 580) = 0u;
  *(_OWORD *)(v68 + 596) = 0u;
  *(unsigned char *)(v68 + 620) = 0;
  *(_DWORD *)(v68 + 616) = 0;
  *(_DWORD *)(v68 + 352) = 0;
  if (a4)
  {
    CFMutableDictionaryRef v180 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, a2);
    *(void *)(v68 + 344) = v180;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buffer = 136315650;
      *(void *)&buffer[4] = "_performAssociation";
      *(_WORD *)&buffer[12] = 2112;
      *(void *)&buffer[14] = v180;
      *(_WORD *)&buffer[22] = 2048;
      *(void *)&char buffer[24] = v180;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Async assoc record updated %@[%p]\n", (uint8_t *)buffer, 0x20u);
    }
    if ((v96 & 1) == 0)
    {
      *(unsigned char *)(v68 + 620) = 1;
      *(_DWORD *)(v68 + 352) = HIDWORD(v202);
      *(_DWORD *)(v68 + 616) = v202;
      memmove((void *)(v68 + 356), __s, 0x100uLL);
      long long v181 = v227;
      *(_OWORD *)(v68 + 624) = v226;
      *(_OWORD *)(v68 + 640) = v181;
      *(void *)(v68 + 656) = p_src;
      memmove((void *)(v68 + 664), &__src, 0x384uLL);
      *(_DWORD *)(v68 + 648) = 900;
      *(void *)(v68 + 656) = v68 + 664;
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v68 + 272));
  uint64_t started = 0;
LABEL_488:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buffer = 136315394;
    *(void *)&buffer[4] = "_performAssociation";
    *(_WORD *)&buffer[12] = 1024;
    *(_DWORD *)&buffer[14] = started;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: error: (%d)\n", (uint8_t *)buffer, 0x12u);
  }
  return started;
}

uint64_t Apple80211Associate(uint64_t a1, const __CFDictionary *a2, const __CFString *a3)
{
  return _performAssociation(a1, a2, a3, 0);
}

uint64_t Apple80211Associate2(uint64_t a1, const __CFDictionary *a2, const __CFString *a3)
{
  return _performAssociation(a1, a2, a3, 0);
}

uint64_t Apple80211GetAssociationExtendedStatus(uint64_t a1)
{
  if (!a1) {
    return 4294963396;
  }
  uint64_t result = Apple80211GetWithIOCTL();
  if (!result) {
    return _errorForAssociateResult(-1431655766);
  }
  return result;
}

uint64_t _errorForAssociateResult(int a1)
{
  if ((a1 - 1) > 0x49) {
    return 4294963394;
  }
  else {
    return dword_2107548F8[a1 - 1];
  }
}

uint64_t Apple80211Disassociate()
{
  return Apple80211SetWithIOCTL();
}

uint64_t Apple80211ReturnToString(uint64_t a1, unsigned int a2, char *__dst, int a4)
{
  uint64_t v8 = 0;
  uint64_t v17 = *MEMORY[0x263EF8340];
  CFNumberRef v16 = 0;
  long long v15 = 0u;
  long long v14 = 0u;
  int v9 = -3900;
  do
  {
    if (v9 == a2)
    {
      CFDataRef v11 = *(const char **)((char *)&_kApple80211ErrList + v8 + 8);
LABEL_9:
      strlcpy(__dst, v11, a4);
      return 0;
    }
    int v9 = *(_DWORD *)((char *)&_kApple80211ErrList + v8 + 16);
    v8 += 16;
  }
  while (v8 != 1200);
  if (a1)
  {
    uint64_t v10 = 1;
    if (a2 >> 26 != 56) {
      return v10;
    }
    __strlcpy_chk();
    LODWORD(v15) = 209;
    DWORD2(v15) = 216;
    CFNumberRef v16 = v13;
    memset(&v13[2], 0, 208);
    v13[0] = 1;
    v13[1] = a2;
    if (Apple80211RawGet(a1, (uint64_t)&v14)) {
      return 3;
    }
    CFDataRef v11 = (const char *)&v13[3];
    goto LABEL_9;
  }
  return 2;
}

uint64_t convertToApple80211Error(uint64_t a1)
{
  uint64_t result = 4294963349;
  if ((int)a1 <= -528342015)
  {
    if ((int)a1 > -528350143)
    {
      if (a1 == -528350142) {
        return 4294963346;
      }
      if (a1 == -528342015) {
        return 4294963348;
      }
      return a1;
    }
    if (a1 == -536870211) {
      return 4294963395;
    }
    if (a1 != -536870160) {
      return a1;
    }
  }
  else
  {
    if ((int)a1 > 15)
    {
      switch(a1)
      {
        case 0x10:
          return 4294963345;
        case 0x16:
          return 4294963347;
        case 0x25:
          return 4294963344;
      }
      return a1;
    }
    if (a1 != -528342014)
    {
      if (a1 == -528342009) {
        return 4294963351;
      }
      return a1;
    }
  }
  return result;
}

char *Apple80211ErrToStr(int __errnum)
{
  uint64_t result = "Unknown error";
  if (__errnum <= 0xFFFFF0C4 && __errnum >= -3931 && *MEMORY[0x263EF8AA0] > __errnum)
  {
    if (__errnum)
    {
      if (__errnum < 1) {
        return _apple80211ErrList[-3900 - __errnum];
      }
      else {
        return strerror(__errnum);
      }
    }
    else
    {
      return "No Error";
    }
  }
  return result;
}

uint64_t Apple80211MaxLinkSpeed(uint64_t a1, unsigned int *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  CFArrayRef v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = xmmword_210754A90;
  uint64_t result = 4294963396;
  if (a1 && a2)
  {
    __strlcpy_chk();
    LODWORD(v19) = 66;
    DWORD2(v19) = 16;
    CFArrayRef v20 = &v17;
    if (Apple80211RawGet(a1, (uint64_t)&v18))
    {
      uint64_t v16 = 0;
      memset(&v15[4], 0, 176);
      *(_DWORD *)long long v15 = 1;
      LODWORD(v19) = 32;
      DWORD2(v19) = 188;
      CFArrayRef v20 = (long long *)v15;
      if (!Apple80211RawGet(a1, (uint64_t)&v18))
      {
        if (*(unsigned __int16 *)&v15[4] >= 0xFu) {
          uint64_t v5 = 15;
        }
        else {
          uint64_t v5 = *(unsigned __int16 *)&v15[4];
        }
        if (v5)
        {
          unsigned int v6 = 0;
          long long v7 = (unsigned int *)&v15[12];
          do
          {
            unsigned int v9 = *v7;
            v7 += 3;
            unsigned int v8 = v9;
            if (v9 > v6) {
              unsigned int v6 = v8;
            }
            --v5;
          }
          while (v5);
        }
        else
        {
          unsigned int v6 = 0;
        }
LABEL_28:
        uint64_t result = 0;
        *a2 = v6;
        return result;
      }
    }
    else
    {
      *(_OWORD *)long long v15 = xmmword_210754A90;
      LODWORD(v19) = 4;
      DWORD2(v19) = 16;
      CFArrayRef v20 = (long long *)v15;
      if (!Apple80211RawGet(a1, (uint64_t)&v18))
      {
        uint64_t v10 = 0;
        unsigned int v6 = 0;
        if ((v15[12] & 4) != 0) {
          char v11 = 4;
        }
        else {
          char v11 = 8;
        }
        CFNumberRef v12 = (const __int16 *)&MCS_RATE_TABLE_40MHZ;
        if ((v15[12] & 4) == 0) {
          CFNumberRef v12 = MCS_RATE_TABLE_20MHZ;
        }
        do
        {
          if ((*((unsigned __int8 *)&v17 + (v10 >> 3) + 4) >> (v10 & 7)))
          {
            CFNumberRef v13 = v12 + 1;
            if ((v11 & *(unsigned char *)(a1 + 90)) == 0) {
              CFNumberRef v13 = v12;
            }
            int v14 = *v13;
            if ((int)v6 <= v14) {
              unsigned int v6 = v14;
            }
          }
          ++v10;
          v12 += 2;
        }
        while (v10 != 77);
        goto LABEL_28;
      }
    }
    return *__error();
  }
  return result;
}

uint64_t Apple80211CopyLeakyAPStatus(const __CFData *a1, CFNumberRef *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  UInt8 valuePtr = 0;
  if (!a1 || CFDataGetLength(a1) != 72)
  {
    uint64_t v5 = 4294963396;
    if (!a2) {
      return v5;
    }
    goto LABEL_4;
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v10 = v4;
  long long v11 = v4;
  *(_OWORD *)buffer = v4;
  long long v9 = v4;
  v14.length = CFDataGetLength(a1);
  v14.location = 0;
  CFDataGetBytes(a1, v14, buffer);
  uint64_t v5 = 0;
  UInt8 valuePtr = buffer[4];
  if (a2) {
LABEL_4:
  }
    *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt8Type, &valuePtr);
  return v5;
}

uint64_t get_apple80211_log()
{
  if (qword_26ACCC3C0 != -1) {
    dispatch_once(&qword_26ACCC3C0, &__block_literal_global);
  }
  return qword_26ACCC3B8;
}

os_log_t __get_apple80211_log_block_invoke()
{
  os_log_t result = os_log_create("com.apple.lib80211", "signpost");
  qword_26ACCC3B8 = (uint64_t)result;
  return result;
}

uint64_t Apple80211RangeAsync(uint64_t a1, CFArrayRef theArray, double a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1 || (*(_DWORD *)a1 & 0x80000000) != 0) {
    return 4294963396;
  }
  uint64_t result = 4294963396;
  if (!theArray || !*(unsigned char *)(a1 + 4)) {
    return result;
  }
  if (!CFArrayGetCount(theArray)) {
    return 4294963396;
  }
  bzero(v8, 0x708uLL);
  uint64_t result = _getRangingPeerRequest(theArray, v8);
  if (!result)
  {
    long long v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
    LODWORD(v10) = 242;
    __strlcpy_chk();
    unsigned int v7 = (int)a3;
    long long v11 = v8;
    if (!(int)a3) {
      unsigned int v7 = 5;
    }
    *(void *)((char *)&v10 + 4) = v7 | 0x70800000000;
    if (Apple80211RawSet())
    {
      return *__error();
    }
    else
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1664));
      if (!*(unsigned char *)(a1 + 1728)) {
        *(unsigned char *)(a1 + 1728) = 1;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1664));
      return 0;
    }
  }
  return result;
}

uint64_t _getRangingPeerRequest(const __CFArray *a1, char *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 4294963396;
  }
  bzero(a2, 0x708uLL);
  *(void *)a2 = 1;
  if (a1 && CFArrayGetCount(a1) >= 1)
  {
    CFIndex v4 = 0;
    uint64_t v5 = (const void *)*MEMORY[0x263EFFB40];
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v4);
      if (ValueAtIndex)
      {
        CFDictionaryRef v7 = ValueAtIndex;
        CFTypeID v8 = CFGetTypeID(ValueAtIndex);
        if (v8 == CFDictionaryGetTypeID())
        {
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v7, @"STATION_MAC");
          CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(v7, @"RANGING_TOKEN_ID");
          CFDataRef v11 = (const __CFData *)CFDictionaryGetValue(v7, @"RANGING_PMK");
          if (v11)
          {
            CFDataRef v12 = v11;
            if (CFDataGetLength(v11) > 64)
            {
              __int16 v14 = 64;
              unsigned __int16 Length = 64;
            }
            else
            {
              unsigned __int16 Length = CFDataGetLength(v12);
              __int16 v14 = Length;
            }
            long long v17 = &a2[448 * *((unsigned int *)a2 + 1)];
            *((_WORD *)v17 + 56) = v14;
            v39.length = Length;
            v39.location = 0;
            CFDataGetBytes(v12, v39, (UInt8 *)v17 + 48);
          }
          CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(v7, @"RANGING_NUM_MEASUREMENTS");
          if (v18) {
            CFNumberGetValue(v18, kCFNumberSInt8Type, &a2[448 * *((unsigned int *)a2 + 1) + 114]);
          }
          CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v7, @"RANGING_CORE_MASK");
          if (v19) {
            CFNumberGetValue(v19, kCFNumberSInt16Type, &a2[448 * *((unsigned int *)a2 + 1) + 128]);
          }
          CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v7, @"RANGING_MODE");
          if (v20) {
            CFNumberGetValue(v20, kCFNumberSInt8Type, &a2[448 * *((unsigned int *)a2 + 1) + 132]);
          }
          CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(v7, @"RANGING_PEER_FLAGS");
          unint64_t v22 = &a2[448 * *((unsigned int *)a2 + 1) + 44];
          if (v21) {
            CFNumberGetValue(v21, kCFNumberSInt16Type, v22);
          }
          else {
            *(_WORD *)unint64_t v22 = 0;
          }
          CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(v7, @"RANGING_TIMEOUT");
          if (v23) {
            CFNumberGetValue(v23, kCFNumberSInt32Type, &a2[448 * *((unsigned int *)a2 + 1) + 136]);
          }
          CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v7, @"RANGING_INTERVAL");
          if (v24) {
            CFNumberGetValue(v24, kCFNumberSInt16Type, &a2[448 * *((unsigned int *)a2 + 1) + 140]);
          }
          CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(v7, @"RANGING_EGRESS");
          if (v25) {
            CFNumberGetValue(v25, kCFNumberSInt16Type, &a2[448 * *((unsigned int *)a2 + 1) + 144]);
          }
          CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(v7, @"RANGING_INGRESS");
          if (v26) {
            CFNumberGetValue(v26, kCFNumberSInt16Type, &a2[448 * *((unsigned int *)a2 + 1) + 142]);
          }
          CFStringRef v27 = CFDictionaryGetValue(v7, @"RANGING_RETURN_PARTIAL");
          if (v27 && CFEqual(v27, v5)) {
            a2[448 * *((unsigned int *)a2 + 1) + 448] = 1;
          }
          CFDictionaryRef v7 = Value;
          if (!Value) {
            goto LABEL_40;
          }
        }
        else
        {
          CFTypeID v15 = CFGetTypeID(v7);
          if (v15 != CFStringGetTypeID())
          {
            CFTypeID v16 = CFGetTypeID(v7);
            if (v16 != CFDataGetTypeID()) {
              goto LABEL_50;
            }
          }
          CFStringRef v10 = 0;
        }
        CFTypeID v28 = CFGetTypeID(v7);
        if (v28 != CFStringGetTypeID())
        {
          v40.location = 0;
          v40.length = 6;
          CFDataGetBytes(v7, v40, (UInt8 *)&a2[448 * *((unsigned int *)a2 + 1) + 34]);
LABEL_40:
          if (v10)
          {
            CFTypeID v32 = CFGetTypeID(v10);
            if (v32 == CFStringGetTypeID())
            {
              memset(buffer, 170, 20);
              CFStringGetCString(v10, buffer, 20, 0x8000100u);
              unsigned __int16 v33 = strlen(buffer);
              if (v33 >= 6uLL) {
                size_t v34 = 6;
              }
              else {
                size_t v34 = v33;
              }
              memcpy(&a2[448 * *((unsigned int *)a2 + 1) + 28], buffer, v34);
            }
            else
            {
              if (CFDataGetLength((CFDataRef)v10) > 6) {
                unsigned __int16 v35 = 6;
              }
              else {
                unsigned __int16 v35 = CFDataGetLength((CFDataRef)v10);
              }
              v41.length = v35;
              v41.location = 0;
              CFDataGetBytes((CFDataRef)v10, v41, (UInt8 *)&a2[448 * *((unsigned int *)a2 + 1) + 28]);
            }
          }
LABEL_50:
          ++*((_DWORD *)a2 + 1);
          goto LABEL_51;
        }
        memset(buffer, 170, 20);
        CFStringGetCString((CFStringRef)v7, buffer, 20, 0x8000100u);
        CFNumberRef v29 = ether_aton(buffer);
        if (v29)
        {
          CFNumberRef v30 = &a2[448 * *((unsigned int *)a2 + 1)];
          __int16 v31 = *(_WORD *)&v29->octet[4];
          *(_DWORD *)(v30 + 34) = *(_DWORD *)v29->octet;
          *((_WORD *)v30 + 19) = v31;
          goto LABEL_40;
        }
      }
LABEL_51:
      ++v4;
    }
    while (v4 < CFArrayGetCount(a1));
  }
  return 0;
}

uint64_t Apple80211RangingStopAsync(uint64_t a1, const __CFArray *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (!a1 || (*(_DWORD *)a1 & 0x80000000) != 0 || !*(unsigned char *)(a1 + 4)) {
    return 4294963396;
  }
  bzero(v4, 0x708uLL);
  uint64_t result = _getRangingPeerRequest(a2, v4);
  if (!result)
  {
    CFDictionaryRef v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    LODWORD(v6) = 242;
    __strlcpy_chk();
    CFDictionaryRef v7 = v4;
    *(void *)((char *)&v6 + 4) = 0x70800000000;
    uint64_t result = Apple80211RawSet();
    if (result) {
      return *__error();
    }
  }
  return result;
}

uint64_t Apple80211GetRangingPhyErrorString(int a1, char *__str, size_t __size)
{
  uint64_t result = 4294963396;
  if (__str && __size)
  {
    if (!a1)
    {
      snprintf(__str, __size, "no error");
      return 0;
    }
    snprintf(__str, __size, "(");
    if (a1)
    {
      size_t v10 = strlen(__str);
      snprintf(&__str[v10], __size - v10, "correlation/lo,");
      a1 &= ~1u;
      if ((a1 & 2) == 0)
      {
LABEL_6:
        if ((a1 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_27;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_6;
    }
    size_t v11 = strlen(__str);
    snprintf(&__str[v11], __size - v11, "correlation/rx,");
    a1 &= ~2u;
    if ((a1 & 4) == 0)
    {
LABEL_7:
      if ((a1 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_28;
    }
LABEL_27:
    size_t v12 = strlen(__str);
    snprintf(&__str[v12], __size - v12, "peak_power/lo,");
    a1 &= ~4u;
    if ((a1 & 8) == 0)
    {
LABEL_8:
      if ((a1 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
LABEL_28:
    size_t v13 = strlen(__str);
    snprintf(&__str[v13], __size - v13, "peak_power/rx,");
    a1 &= ~8u;
    if ((a1 & 0x10) == 0)
    {
LABEL_9:
      if ((a1 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_30;
    }
LABEL_29:
    size_t v14 = strlen(__str);
    snprintf(&__str[v14], __size - v14, "bit_error,");
    a1 &= ~0x10u;
    if ((a1 & 0x20) == 0)
    {
LABEL_10:
      if ((a1 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_31;
    }
LABEL_30:
    size_t v15 = strlen(__str);
    snprintf(&__str[v15], __size - v15, "snr,");
    a1 &= ~0x20u;
    if ((a1 & 0x40) == 0)
    {
LABEL_11:
      if ((a1 & 0x80) == 0) {
        goto LABEL_12;
      }
      goto LABEL_32;
    }
LABEL_31:
    size_t v16 = strlen(__str);
    snprintf(&__str[v16], __size - v16, "start_win,");
    a1 &= ~0x40u;
    if ((a1 & 0x80) == 0)
    {
LABEL_12:
      if ((a1 & 0x8000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_33;
    }
LABEL_32:
    size_t v17 = strlen(__str);
    snprintf(&__str[v17], __size - v17, "end_win,");
    a1 &= ~0x80u;
    if ((a1 & 0x8000) == 0)
    {
LABEL_13:
      if ((a1 & 0x100) == 0) {
        goto LABEL_14;
      }
      goto LABEL_34;
    }
LABEL_33:
    size_t v18 = strlen(__str);
    snprintf(&__str[v18], __size - v18, "group_delay,");
    a1 &= ~0x8000u;
    if ((a1 & 0x100) == 0)
    {
LABEL_14:
      if ((a1 & 0x200) == 0) {
        goto LABEL_15;
      }
      goto LABEL_35;
    }
LABEL_34:
    size_t v19 = strlen(__str);
    snprintf(&__str[v19], __size - v19, "timing,");
    a1 &= ~0x100u;
    if ((a1 & 0x200) == 0)
    {
LABEL_15:
      if ((a1 & 0x400) == 0) {
        goto LABEL_16;
      }
      goto LABEL_36;
    }
LABEL_35:
    size_t v20 = strlen(__str);
    snprintf(&__str[v20], __size - v20, "EVM,");
    a1 &= ~0x200u;
    if ((a1 & 0x400) == 0)
    {
LABEL_16:
      if ((a1 & 0x800) == 0) {
        goto LABEL_17;
      }
      goto LABEL_37;
    }
LABEL_36:
    size_t v21 = strlen(__str);
    snprintf(&__str[v21], __size - v21, "LTE,");
    a1 &= ~0x400u;
    if ((a1 & 0x800) == 0)
    {
LABEL_17:
      if (!a1)
      {
LABEL_19:
        size_t v8 = strlen(__str) - 1;
        if (__str[v8] == 44) {
          __str[v8] = 0;
        }
        size_t v9 = strlen(__str);
        snprintf(&__str[v9], __size - v9, ")");
        return 0;
      }
LABEL_18:
      size_t v7 = strlen(__str);
      snprintf(&__str[v7], __size - v7, "0x%x", a1);
      goto LABEL_19;
    }
LABEL_37:
    size_t v22 = strlen(__str);
    snprintf(&__str[v22], __size - v22, "throttling,");
    a1 &= ~0x800u;
    if (!a1) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t Apple80211CopyRangingCapabilities(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v2 = a2;
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!a1 || (*(_DWORD *)a1 & 0x80000000) != 0)
  {
    CFMutableDictionaryRef v4 = 0;
    uint64_t v5 = 4294963396;
    if (!a2) {
      return v5;
    }
    goto LABEL_18;
  }
  CFMutableDictionaryRef v4 = 0;
  uint64_t v5 = 4294963396;
  if (a2 && *(unsigned char *)(a1 + 4))
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    LODWORD(v28) = 266;
    __strlcpy_chk();
    DWORD2(v28) = 24;
    CFNumberRef v29 = &v24;
    if (Apple80211RawGet(a1, (uint64_t)&v27))
    {
      CFMutableDictionaryRef v4 = 0;
      uint64_t v5 = *__error();
      goto LABEL_18;
    }
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!Mutable)
    {
      CFMutableDictionaryRef v4 = 0;
      uint64_t v5 = 4294963395;
      goto LABEL_18;
    }
    size_t v8 = Mutable;
    CFMutableArrayRef v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
    if (v9)
    {
      CFMutableArrayRef v10 = v9;
      CFMutableDictionaryRef theDict = v8;
      CFNumberRef v23 = v2;
      if ((_WORD)v25)
      {
        unint64_t v11 = 0;
        size_t v12 = (char *)&v26 + 4;
        size_t v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
        size_t v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
        while (1)
        {
          CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v6, 0, v13, v14);
          if (!v15) {
            break;
          }
          size_t v8 = v15;
          CFNumberRef v16 = CFNumberCreate(v6, kCFNumberSInt32Type, v12 - 4);
          if (!v16
            || (CFNumberRef v17 = v16,
                CFDictionarySetValue(v8, @"RANGING_CHANNEL", v16),
                CFRelease(v17),
                (CFNumberRef v18 = CFNumberCreate(v6, kCFNumberSInt32Type, v12)) == 0))
          {
            CFRelease(theDict);
            CFRelease(v10);
            CFMutableDictionaryRef v4 = 0;
            uint64_t v5 = 4294963395;
            goto LABEL_22;
          }
          CFNumberRef v19 = v18;
          CFDictionarySetValue(v8, @"RANGING_CHANNEL_FLAGS", v18);
          CFRelease(v19);
          CFArrayAppendValue(v10, v8);
          CFRelease(v8);
          ++v11;
          v12 += 12;
          if (v11 >= (unsigned __int16)v25) {
            goto LABEL_14;
          }
        }
        CFRelease(theDict);
        CFMutableDictionaryRef v4 = 0;
        uint64_t v5 = 4294963395;
        size_t v8 = v10;
LABEL_22:
        uint64_t v2 = v23;
        goto LABEL_16;
      }
LABEL_14:
      CFMutableDictionaryRef v4 = theDict;
      CFDictionarySetValue(theDict, @"RANGING_SUPP_CHANNELS", v10);
      CFRelease(v10);
      CFNumberRef v20 = CFNumberCreate(v6, kCFNumberSInt32Type, (char *)&v24 + 4);
      uint64_t v2 = v23;
      if (v20)
      {
        size_t v8 = v20;
        CFDictionarySetValue(theDict, @"RANGING_FEATURES", v20);
        uint64_t v5 = 0;
LABEL_16:
        CFRelease(v8);
        goto LABEL_17;
      }
      uint64_t v5 = 4294963395;
      size_t v8 = theDict;
    }
    else
    {
      uint64_t v5 = 4294963395;
    }
    CFMutableDictionaryRef v4 = 0;
    goto LABEL_16;
  }
LABEL_17:
  if (v2) {
LABEL_18:
  }
    *uint64_t v2 = v4;
  return v5;
}

uint64_t Apple80211CopyAwdlPreferredChannels()
{
  return 4294963393;
}

uint64_t Apple80211GasRequest(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  int valuePtr = -1;
  if (!a1 || (*(_DWORD *)a1 & 0x80000000) != 0 || !*(unsigned char *)(a1 + 4)) {
    return 4294963396;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"GAS_PROTOCOL");
  if (!Value) {
    return 4294963393;
  }
  int v33 = -1431655766;
  if (!CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr)) {
    return 4294963396;
  }
  if (valuePtr) {
    return 4294963393;
  }
  if (!theDict) {
    return 4294963396;
  }
  bzero(v34, 0x510uLL);
  CFArrayRef v6 = (const __CFArray *)CFDictionaryGetValue(theDict, @"GAS_QUERY");
  CFArrayRef v7 = (const __CFArray *)CFDictionaryGetValue(theDict, @"GAS_NETWORKS");
  if (!v6) {
    return 4294963396;
  }
  CFArrayRef v8 = v7;
  uint64_t Count = CFArrayGetCount(v6);
  if (!Count) {
    return 4294963396;
  }
  uint64_t v10 = Count;
  if (Count > 255) {
    return 4294963396;
  }
  v53.location = 0;
  v53.length = Count;
  CFArraySortValues(v6, v53, (CFComparatorFunction)_compareQueries, 0);
  *(_DWORD *)&v34[6] = 256;
  if (v10 <= 0)
  {
    LOWORD(v20) = 8;
LABEL_25:
    *(_WORD *)&v34[4] = v20;
    goto LABEL_26;
  }
  CFIndex v11 = 0;
  unsigned __int16 v12 = 0;
  unsigned __int16 v32 = -21846;
  size_t v13 = v35;
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buffer = v14;
  *(_OWORD *)&UInt8 buffer[16] = v14;
  long long v38 = v14;
  long long v39 = v14;
  long long v40 = v14;
  long long v41 = v14;
  long long v42 = v14;
  long long v43 = v14;
  long long v44 = v14;
  long long v45 = v14;
  long long v46 = v14;
  long long v47 = v14;
  long long v48 = v14;
  long long v49 = v14;
  long long v50 = v14;
  long long v51 = v14;
  do
  {
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, v11);
    if (ValueAtIndex && CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &v32))
    {
      if (v32 > 0xFFu)
      {
        *v13++ = v32;
        *(_WORD *)&v34[8] += 2;
      }
      else
      {
        buffer[v12++] = v32;
      }
    }
    ++v11;
  }
  while (v10 != v11);
  *(_WORD *)&v34[4] = *(_WORD *)&v34[8] + 8;
  if (v12)
  {
    *size_t v13 = -8739;
    v13[1] = v12 + 6;
    v13[2] = 28496;
    *((unsigned char *)v13 + 6) = -102;
    *(unsigned __int16 *)((char *)v13 + 7) = 273;
    uint64_t v16 = v12;
    CFNumberRef v17 = v13 + 5;
    *((unsigned char *)v13 + 9) = 0;
    CFNumberRef v18 = buffer;
    do
    {
      char v19 = *v18++;
      *v17++ = v19;
      --v16;
    }
    while (v16);
    uint64_t v20 = (unsigned __int16)(v12 + *(_WORD *)&v34[4] + 10);
    goto LABEL_25;
  }
LABEL_26:
  memset(buffer, 170, 18);
  CFIndex v21 = CFArrayGetCount(v8);
  if (!v21) {
    return 4294963396;
  }
  CFIndex v22 = v21;
  if (v21 > 63) {
    return 4294963396;
  }
  if (v21 >= 1)
  {
    CFIndex v23 = 0;
    unsigned __int16 v32 = -21846;
    uint64_t v24 = &v36;
    do
    {
      CFDictionaryRef v25 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, v23);
      if (v25)
      {
        CFDictionaryRef v26 = v25;
        CFStringRef v27 = (const __CFString *)CFDictionaryGetValue(v25, @"BSSID");
        if (!v27) {
          return 4294963396;
        }
        if (!CFStringGetCString(v27, buffer, 18, 0x8000100u)) {
          return 4294963396;
        }
        long long v28 = ether_aton(buffer);
        if (!v28) {
          return 4294963396;
        }
        int v29 = *(_DWORD *)v28->octet;
        v24[2] = *(_WORD *)&v28->octet[4];
        *(_DWORD *)uint64_t v24 = v29;
        CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(v26, @"CHANNEL");
        if (!v30 || !CFNumberGetValue(v30, kCFNumberSInt16Type, &v32)) {
          return 4294963396;
        }
        *(v24 - 1) = v32;
      }
      ++v23;
      v24 += 6;
    }
    while (v22 != v23);
  }
  v35[257] = v22;
  memset(buffer, 0, sizeof(buffer));
  *(void *)&long long v38 = 0;
  *(_DWORD *)&UInt8 buffer[16] = 197;
  __strlcpy_chk();
  *(_DWORD *)&char buffer[24] = 1300;
  *(void *)&long long v38 = &v33;
  if (Apple80211RawSet()) {
    return *__error();
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1592));
  if (!*(unsigned char *)(a1 + 1656)) {
    *(unsigned char *)(a1 + 1656) = 1;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1592));
  return 0;
}

uint64_t Apple80211MonitorEventsWithBlock(void *a1, NSObject *a2, const void *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v6 = socket(32, 3, 1);
  if (v6 < 0) {
    return *__error();
  }
  unsigned int v7 = v6;
  int v19 = 1;
  uint64_t v18 = 0x600000001;
  if (ioctl(v6, 0x800C6502uLL, &v18))
  {
    uint64_t v12 = *__error();
    int v11 = -1;
  }
  else
  {
    CFArrayRef v8 = dispatch_source_create(MEMORY[0x263EF83E8], v7, 0, a2);
    if (v8)
    {
      CFMutableArrayRef v9 = v8;
      handler[0] = MEMORY[0x263EF8330];
      handler[1] = 0x40000000;
      handler[2] = __Apple80211MonitorEventsWithBlock_block_invoke;
      handler[3] = &__block_descriptor_tmp_79;
      handler[4] = a1;
      unsigned int v17 = v7;
      dispatch_source_set_event_handler(v8, handler);
      uint64_t v10 = _Block_copy(a3);
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 0x40000000;
      v14[2] = __Apple80211MonitorEventsWithBlock_block_invoke_2;
      v14[3] = &unk_264134A78;
      unsigned int v15 = v7;
      v14[4] = v10;
      dispatch_source_set_cancel_handler(v9, v14);
      a1[9] = _eventBlockCallback;
      a1[10] = v10;
      a1[8] = v9;
      dispatch_activate(v9);
      int v11 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 4294963395;
    }
  }
  if (v12 | v11) {
    close(v7);
  }
  return v12;
}

void __Apple80211MonitorEventsWithBlock_block_invoke()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 32);
  int v2 = *(_DWORD *)(v0 + 40);
  memset(v3, 170, sizeof(v3));
  if (read(v2, v3, 0x1018uLL) >= 24) {
    _eventRead(v1, v3);
  }
}

void __Apple80211MonitorEventsWithBlock_block_invoke_2(uint64_t a1)
{
  close(*(_DWORD *)(a1 + 40));
  int v2 = *(const void **)(a1 + 32);
  _Block_release(v2);
}

uint64_t Apple80211EventMonitoringInit(_DWORD *a1, uint64_t a2, uint64_t a3, __CFRunLoop *a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.version) = 136315394;
    *(CFIndex *)((char *)&buf.version + 4) = (CFIndex)"Apple80211EventMonitoringInit";
    WORD2(buf.info) = 2048;
    *(void **)((char *)&buf.info + 6) = a1;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: opaque=%p\n", (uint8_t *)&buf, 0x16u);
  }
  int v27 = 1;
  uint64_t v26 = 0x600000001;
  buf.version = 0;
  memset(&buf.retain, 0, 24);
  buf.info = a1;
  CFSocketNativeHandle v8 = -1;
  uint64_t v9 = 4294963396;
  if (a1 && a2 && (*a1 & 0x80000000) == 0 && *((unsigned char *)a1 + 4))
  {
    if (*((void *)a1 + 228) || *((void *)a1 + 8) || *((void *)a1 + 7)) {
      Apple80211EventMonitoringHalt((uint64_t)a1);
    }
    int inited = Apple80211EventMonitoringInitIOUC((uint64_t)a1, 0, a4);
    int v11 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
    uint64_t v12 = (CFRunLoopMode *)MEMORY[0x263EFFE88];
    if (!inited)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long v28 = 136315138;
        int v29 = "Apple80211EventMonitoringInit";
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Using IOUC event pipe\n", v28, 0xCu);
      }
      uint64_t v9 = 0;
      goto LABEL_20;
    }
    int v13 = socket(32, 3, 1);
    CFSocketNativeHandle v8 = v13;
    if (v13 < 0 || ioctl(v13, 0x800C6502uLL, &v26))
    {
      uint64_t v9 = *__error();
    }
    else
    {
      context.version = 0;
      memset(&context.retain, 0, 24);
      context.info = a1;
      CFAllocatorRef v14 = *v11;
      unsigned int v15 = CFSocketCreateWithNative(*v11, v8, 1uLL, (CFSocketCallBack)_eventReadCallbackCF, &context);
      *((void *)a1 + 7) = v15;
      if (v15)
      {
        RunLoopSource = CFSocketCreateRunLoopSource(v14, v15, 0);
        if (RunLoopSource)
        {
          uint64_t v9 = (uint64_t)RunLoopSource;
          CFRunLoopAddSource(a4, RunLoopSource, *v12);
LABEL_20:
          CFAllocatorRef v17 = *v11;
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          int v19 = CFRunLoopTimerCreate(v17, Current + 315360000.0, 0.2, 0, 0, (CFRunLoopTimerCallBack)_asyncAssocRetryCallback, &buf);
          *((void *)a1 + 196) = v19;
          CFStringRef v20 = *v12;
          CFRunLoopAddTimer(a4, v19, v20);
          CFAbsoluteTime v21 = CFAbsoluteTimeGetCurrent();
          CFIndex v22 = CFRunLoopTimerCreate(v17, v21 + 315360000.0, 0.2, 0, 0, (CFRunLoopTimerCallBack)_asyncScanRetryCallback, &buf);
          *((void *)a1 + 31) = v22;
          CFRunLoopAddTimer(a4, v22, v20);
          *((void *)a1 + 9) = a2;
          *((void *)a1 + 10) = a3;
          if (v9)
          {
            CFRelease((CFTypeRef)v9);
            return 0;
          }
          return v9;
        }
      }
      uint64_t v9 = 4294963395;
    }
  }
  if (a1)
  {
    if (v9)
    {
      uint64_t v24 = (__CFSocket *)*((void *)a1 + 7);
      if (v24)
      {
        CFSocketInvalidate(v24);
        CFRelease(*((CFTypeRef *)a1 + 7));
        *((void *)a1 + 7) = 0;
      }
    }
  }
  if (v9 && (v8 & 0x80000000) == 0) {
    close(v8);
  }
  return v9;
}

uint64_t Apple80211EventMonitoringHalt(uint64_t a1)
{
  v3[5] = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294963396;
  }
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 2080));
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = __Apple80211EventMonitoringHalt_block_invoke;
  v3[3] = &__block_descriptor_tmp_86;
  v3[4] = a1;
  return _Apple80211EventMonitoringHalt2(a1, (uint64_t)v3);
}

uint64_t Apple80211EventMonitoringInitIOUC(uint64_t a1, NSObject *a2, __CFRunLoop *a3)
{
  kern_return_t v7;
  BOOL v8;
  const char *v9;
  int v10;
  IONotificationPort *v11;
  mach_port_t MachPort;
  mach_port_t v13;
  IONotificationPort *v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  __CFRunLoopSource *RunLoopSource;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  mach_port_t v25;
  int v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint32_t v31;
  int v33;
  NSObject *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  mach_port_t v40;
  int v41;
  size_t outputStructCnt;
  uint64_t v43;
  uint64_t v44;
  uint64_t reference[2];
  long long v46;
  long long v47;
  long long v48;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  mach_port_t v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  uint64_t v67;

  CFDictionaryRef v67 = *MEMORY[0x263EF8340];
  size_t outputStructCnt = 0xAAAAAAAAAAAAAAAALL;
  long long v47 = 0u;
  long long v48 = 0u;
  *(_OWORD *)reference = 0u;
  long long v46 = 0u;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
    long long v50 = "Apple80211EventMonitoringInitIOUC";
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Enter\n", buf, 0xCu);
  }
  if (!a1 || (mach_port_t v6 = *(_DWORD *)(a1 + 1804)) == 0 || !((unint64_t)a2 | (unint64_t)a3))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
      long long v50 = "Apple80211EventMonitoringInitIOUC";
      long long v51 = 2080;
      uint64_t v52 = a1 + 4;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: no user client connected for %s", buf, 0x16u);
    }
    return 4294963396;
  }
  size_t outputStructCnt = 1;
  unsigned int v7 = IOConnectCallStructMethod(v6, 5u, 0, 0, (void *)(a1 + 1808), &outputStructCnt);
  CFSocketNativeHandle v8 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (!v8) {
      return 4294963393;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136315650;
    long long v50 = "Apple80211EventMonitoringInitIOUC";
    long long v51 = 2080;
    uint64_t v52 = a1 + 4;
    CFRange v53 = 1024;
    LODWORD(v54) = v7;
    uint64_t v16 = &_os_log_internal;
    CFAllocatorRef v17 = "%s: useIOUCEventPipe query failed for %s with %d";
    uint64_t v31 = 28;
    goto LABEL_34;
  }
  if (v8)
  {
    uint64_t v9 = "TRUE";
    uint64_t v10 = *(unsigned __int8 *)(a1 + 1808);
    long long v50 = "Apple80211EventMonitoringInitIOUC";
    *(_DWORD *)CFRunLoopTimerContext buf = 136315650;
    long long v51 = 2080;
    if (!v10) {
      uint64_t v9 = "FALSE";
    }
    uint64_t v52 = a1 + 4;
    CFRange v53 = 2080;
    CFNumberRef v54 = v9;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: %s useIOUCEventPipe %s", buf, 0x20u);
  }
  if (!*(unsigned char *)(a1 + 1808)) {
    return 4294963393;
  }
  int v11 = IONotificationPortCreate(*MEMORY[0x263F0EC88]);
  *(void *)(a1 + 1824) = v11;
  if (!v11)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
      long long v50 = "Apple80211EventMonitoringInitIOUC";
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: failed to create port\n", buf, 0xCu);
    }
    return 4294963395;
  }
  MachPort = IONotificationPortGetMachPort(v11);
  if (!MachPort)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
      long long v50 = "Apple80211EventMonitoringInitIOUC";
      long long v51 = 2080;
      uint64_t v52 = a1 + 4;
      uint64_t v16 = &_os_log_internal;
      CFAllocatorRef v17 = "%s: IONotificationPortGetMachPort failed for %s\n";
LABEL_33:
      uint64_t v31 = 22;
LABEL_34:
      _os_log_impl(&dword_210714000, v16, OS_LOG_TYPE_DEFAULT, v17, buf, v31);
    }
    return 4294963393;
  }
  int v13 = MachPort;
  CFAllocatorRef v14 = *(IONotificationPort **)(a1 + 1824);
  if (a2)
  {
    IONotificationPortSetDispatchQueue(v14, a2);
    *(void *)(a1 + 1816) = a2;
    unsigned int v15 = (void *)(a1 + 1920);
  }
  else
  {
    RunLoopSource = IONotificationPortGetRunLoopSource(v14);
    if (!RunLoopSource)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
        long long v50 = "Apple80211EventMonitoringInitIOUC";
        long long v51 = 2080;
        uint64_t v52 = a1 + 4;
        uint64_t v16 = &_os_log_internal;
        CFAllocatorRef v17 = "%s: Failed to create RunLoopSource for %s\n";
        goto LABEL_33;
      }
      return 4294963393;
    }
    CFRunLoopAddSource(a3, RunLoopSource, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
    *(void *)(a1 + 1920) = a3;
    unsigned int v15 = (void *)(a1 + 1816);
  }
  *unsigned int v15 = 0;
  if (IOConnectCallStructMethod(*(_DWORD *)(a1 + 1804), 3u, 0, 0, 0, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
      long long v50 = "Apple80211EventMonitoringInitIOUC";
      long long v51 = 2080;
      uint64_t v52 = a1 + 4;
      uint64_t v16 = &_os_log_internal;
      CFAllocatorRef v17 = "%s: Failed to init event monitoring in IOUC for %s\n";
      goto LABEL_33;
    }
    return 4294963393;
  }
  long long v43 = 0;
  long long v44 = 0;
  int v19 = (_DWORD *)MEMORY[0x263EF8960];
  CFStringRef v20 = MEMORY[0x2166702B0](*(unsigned int *)(a1 + 1804), 1, *MEMORY[0x263EF8960], &v44, &v43, 4097);
  if (v20)
  {
    int v33 = v20;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
      long long v50 = (const char *)(a1 + 4);
      size_t v34 = &_os_log_internal;
      unsigned __int16 v35 = "Failed to get Ring buffer address for %s\n";
LABEL_49:
      _os_log_impl(&dword_210714000, v34, OS_LOG_TYPE_DEFAULT, v35, buf, 0xCu);
    }
LABEL_50:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v36 = *(const char **)(a1 + 1872);
      int v37 = *(void *)(a1 + 1880);
      long long v38 = *(void *)(a1 + 1904);
      long long v39 = *(void *)(a1 + 1912);
      long long v40 = *(_DWORD *)(a1 + 1888);
      long long v41 = *(_DWORD *)(a1 + 1892);
      *(_DWORD *)CFRunLoopTimerContext buf = 136317186;
      long long v50 = "_createMemoryMappings";
      long long v51 = 2080;
      uint64_t v52 = a1 + 4;
      CFRange v53 = 2048;
      CFNumberRef v54 = v36;
      CFStringRef v55 = 2048;
      CFDictionaryRef v56 = v37;
      CFNumberRef v57 = 2048;
      int v58 = v38;
      int v59 = 2048;
      long long v60 = v39;
      CFNumberType v61 = 1024;
      int v62 = v40;
      CFNumberRef v63 = 1024;
      CFNumberRef v64 = v41;
      CFDictionaryRef v65 = 1024;
      CFDictionaryRef v66 = v33;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: %s FAILED: mapped buffer info: ringBuffer: ringBuffer[0x%llx] ringSize[0x%llx], ringState: ringState[0x%llx] ringSize[0x%llx], connect[0x%x] task[0x%x] retVal[0x%08x]\n", buf, 0x50u);
    }
    CFNumberRef v30 = 4294963395;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315650;
      long long v50 = "Apple80211EventMonitoringInitIOUC";
      long long v51 = 2080;
      uint64_t v52 = a1 + 4;
      CFRange v53 = 1024;
      LODWORD(v54) = -3901;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Failed to create memory mappings for %s, err[0x%08x]\n", buf, 0x1Cu);
    }
    return v30;
  }
  CFIndex v22 = v43;
  CFAbsoluteTime v21 = v44;
  *(void *)(a1 + 1832) = v44;
  *(void *)(a1 + 1840) = v22;
  *(_DWORD *)(a1 + 1856) = *(_DWORD *)(a1 + 1804);
  *(_DWORD *)(a1 + 1860) = *v19;
  *(_DWORD *)(a1 + 1864) = 1;
  *(void *)(a1 + 1880) = v22;
  *(void *)(a1 + 1872) = v21;
  CFIndex v23 = MEMORY[0x2166702B0]();
  if (v23)
  {
    int v33 = v23;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
      long long v50 = (const char *)(a1 + 4);
      size_t v34 = &_os_log_internal;
      unsigned __int16 v35 = "Failed to get Ring state address for %s\n";
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  uint64_t v24 = v44;
  *(void *)(a1 + 1848) = v44;
  CFDictionaryRef v25 = *(_DWORD *)(a1 + 1804);
  *(_DWORD *)(a1 + 1888) = v25;
  uint64_t v26 = *v19;
  *(_DWORD *)(a1 + 1892) = v26;
  *(_DWORD *)(a1 + 1896) = 2;
  int v27 = v43;
  *(void *)(a1 + 1912) = v43;
  *(void *)(a1 + 1904) = v24;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    long long v28 = *(const char **)(a1 + 1872);
    int v29 = *(void *)(a1 + 1880);
    *(_DWORD *)CFRunLoopTimerContext buf = 136316930;
    long long v50 = "_createMemoryMappings";
    long long v51 = 2080;
    uint64_t v52 = a1 + 4;
    CFRange v53 = 2048;
    CFNumberRef v54 = v28;
    CFStringRef v55 = 2048;
    CFDictionaryRef v56 = v29;
    CFNumberRef v57 = 2048;
    int v58 = v24;
    int v59 = 2048;
    long long v60 = v27;
    CFNumberType v61 = 1024;
    int v62 = v25;
    CFNumberRef v63 = 1024;
    CFNumberRef v64 = v26;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: %s mapped buffer info: ringBuffer: ringBuffer[0x%llx] ringSize[0x%llx], ringState: ringState[0x%llx] ringSize[0x%llx], connect[0x%x] task[0x%x]\n", buf, 0x4Au);
    CFDictionaryRef v25 = *(_DWORD *)(a1 + 1804);
  }
  reference[0] = v13;
  reference[1] = (uint64_t)Apple80211EventMonitoringHelper;
  *(void *)&long long v46 = a1;
  if (!IOConnectCallAsyncMethod(v25, 2u, v13, reference, 8u, 0, 0, 0, 0, 0, 0, 0, 0)) {
    return 0;
  }
  CFNumberRef v30 = 0;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
    long long v50 = "Apple80211EventMonitoringInitIOUC";
    long long v51 = 2080;
    uint64_t v52 = a1 + 4;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: IOConnectCallAsyncMethod failed for %s\n", buf, 0x16u);
    return 0;
  }
  return v30;
}

void _eventReadCallbackCF()
{
  uint64_t v0 = (__CFSocket *)MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  uint64_t v6 = *MEMORY[0x263EF8340];
  CFSocketNativeHandle Native = CFSocketGetNative(v0);
  if (v2 && *(void *)(v2 + 72))
  {
    int v4 = Native;
    memset(v5, 170, sizeof(v5));
    if ((int)read(v4, v5, 0x1018uLL) >= 24) {
      _eventRead(v2, v5);
    }
  }
}

void _asyncAssocRetryCallback(uint64_t a1, uint64_t a2)
{
}

void _asyncScanRetryCallback(uint64_t a1, uint64_t a2)
{
}

void __Apple80211EventMonitoringInit2_block_invoke()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 32);
  int v2 = *(_DWORD *)(v0 + 40);
  memset(v3, 170, sizeof(v3));
  if ((int)read(v2, v3, 0x1018uLL) >= 24)
  {
    if (*(void *)(v1 + 72)) {
      _eventRead(v1, v3);
    }
  }
}

uint64_t __Apple80211EventMonitoringInit2_block_invoke_2(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void _asyncAssocRetryCallback2(uint64_t a1)
{
}

void _asyncScanRetryCallback2(uint64_t a1)
{
}

uint64_t Apple80211RawEventMonitoringInit(uint64_t a1, NSObject *a2, const void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315394;
    uint64_t v10 = "Apple80211RawEventMonitoringInit";
    __int16 v11 = 2048;
    uint64_t v12 = a1;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: opaque=%p\n", (uint8_t *)&v9, 0x16u);
  }
  uint64_t v6 = _Block_copy(a3);
  uint64_t v7 = Apple80211EventMonitoringInit2((_DWORD *)a1, (uint64_t)_eventBlockCallback, (uint64_t)v6, a2);
  if (v7)
  {
    if (!v6) {
      return v7;
    }
    goto LABEL_6;
  }
  *(unsigned char *)(a1 + 51) = 1;
  if (v6 && *(unsigned char *)(a1 + 107)) {
LABEL_6:
  }
    _Block_release(v6);
  return v7;
}

uint64_t Apple80211RawEventMonitoringInitWithCFRunLoop(uint64_t a1, __CFRunLoop *a2, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = Apple80211EventMonitoringInit((_DWORD *)a1, (uint64_t)_eventBlockCallback, (uint64_t)v5, a2);
  if (v6)
  {
    if (!v5) {
      return v6;
    }
    goto LABEL_4;
  }
  *(unsigned char *)(a1 + 51) = 1;
  if (v5 && *(unsigned char *)(a1 + 107)) {
LABEL_4:
  }
    _Block_release(v5);
  return v6;
}

uint64_t Apple80211RawP2PEventMonitoringInit(uint64_t a1, NSObject *a2, const void *a3)
{
  if (!*(void *)(a1 + 1824) && !*(void *)(a1 + 64) && !*(void *)(a1 + 56)
    || (uint64_t result = Apple80211EventMonitoringHalt(a1), !result))
  {
    uint64_t result = Apple80211EventMonitoringInitIOUC(a1, a2, 0);
    if (!result)
    {
      uint64_t v7 = _Block_copy(a3);
      uint64_t result = 0;
      *(void *)(a1 + 72) = _eventBlockCallback;
      *(void *)(a1 + 80) = v7;
      *(_WORD *)(a1 + 51) = 257;
    }
  }
  return result;
}

uint64_t Apple80211RawStartMonitoringEventAll(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 56) && !*(void *)(a1 + 64) && !*(void *)(a1 + 1824)) {
    return 4294963396;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 52) = 1;
  return result;
}

void __Apple80211EventMonitoringHalt_block_invoke(uint64_t a1)
{
}

uint64_t Apple80211EventSocketRef(uint64_t result)
{
  if (result) {
    return *(void *)(result + 56);
  }
  return result;
}

uint64_t Apple80211Open(void *a1)
{
  if (!a1) {
    return 4294963396;
  }
  int v2 = (char *)malloc_type_malloc(0x828uLL, 0x10E004039282538uLL);
  CFDictionaryRef v3 = v2;
  if (!v2)
  {
    uint64_t v7 = 4294963395;
    goto LABEL_7;
  }
  bzero(v2, 0x828uLL);
  os_parse_boot_arg_int();
  int v4 = socket(2, 2, 0);
  *(_DWORD *)CFDictionaryRef v3 = v4;
  if (v4 < 0)
  {
    uint64_t v7 = *__error();
    if (!v7) {
      return v7;
    }
    goto LABEL_13;
  }
  pthread_mutex_init((pthread_mutex_t *)(v3 + 160), 0);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 272), 0);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 1592), 0);
  pthread_mutex_init((pthread_mutex_t *)v3 + 26, 0);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 1736), 0);
  dispatch_group_t v5 = dispatch_group_create();
  *((void *)v3 + 260) = v5;
  if (!v5
    || (dispatch_queue_t v6 = dispatch_queue_create("com.apple.wifi.apple80211.finalizer", 0), (*((void *)v3 + 259) = v6) == 0))
  {
    uint64_t v7 = 4294963395;
LABEL_13:
    free(v3);
    CFDictionaryRef v3 = 0;
    goto LABEL_7;
  }
  dispatch_group_enter(*((dispatch_group_t *)v3 + 260));
  uint64_t v7 = 0;
LABEL_7:
  *a1 = v3;
  return v7;
}

uint64_t Apple80211GetVirtualIfListCopy(int *a1, const __CFArray **a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  CFArrayRef theArray = 0;
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  uint64_t v5 = 4294963396;
  if (!a1 || !a2 || *a1 < 0) {
    goto LABEL_24;
  }
  __uint64_t v6 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    CFAllocatorRef v17 = "Apple80211GetVirtualIfListCopy";
    *(_DWORD *)CFRunLoopTimerContext buf = 136446722;
    __int16 v18 = 2048;
    unint64_t v19 = v6 / 0x3B9ACA00;
    __int16 v20 = 2048;
    unint64_t v21 = v6 % 0x3B9ACA00 / 0x3E8;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: @[%llu.%06llu] enter\n", buf, 0x20u);
  }
  IfListCFDictionaryRef Copy = _getIfListCopy(a1, &theArray);
  if (IfListCopy)
  {
    uint64_t v5 = IfListCopy;
LABEL_24:
    CFIndex Count = CFArrayGetCount(Mutable);
    goto LABEL_17;
  }
  CFIndex v8 = CFArrayGetCount(theArray);
  if (v8 >= 1)
  {
    CFIndex v9 = v8;
    for (CFIndex i = 0; i != v9; ++i)
    {
      CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, i);
      if (_isVirtualInterface(ValueAtIndex, 0)) {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  CFIndex Count = CFArrayGetCount(Mutable);
  if (CFArrayGetCount(Mutable) >= 1)
  {
    uint64_t v5 = 0;
    *a2 = Mutable;
    goto LABEL_18;
  }
  if (CFArrayGetCount(Mutable)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 4294963393;
  }
LABEL_17:
  CFRelease(Mutable);
LABEL_18:
  if (theArray) {
    CFRelease(theArray);
  }
  __uint64_t v13 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    CFAllocatorRef v17 = "Apple80211GetVirtualIfListCopy";
    *(_DWORD *)CFRunLoopTimerContext buf = 136447490;
    unint64_t v19 = v13 / 0x3B9ACA00;
    __int16 v18 = 2048;
    __int16 v20 = 2048;
    unint64_t v21 = v13 % 0x3B9ACA00 / 0x3E8;
    __int16 v22 = 1024;
    int v23 = v5;
    __int16 v24 = 1024;
    int v25 = v5;
    __int16 v26 = 2048;
    CFIndex v27 = Count;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: @[%llu.%06llu] exit %d/0x%08x, ifCount[%ld]\n", buf, 0x36u);
  }
  return v5;
}

uint64_t _getIfListCopy(int *a1, const __CFArray **a2)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v40 = 0;
  memset(__s1, 170, sizeof(__s1));
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  __uint64_t v5 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    long long v44 = "_getIfListCopy";
    *(_DWORD *)CFRunLoopTimerContext buf = 136315650;
    __int16 v45 = 2048;
    *(void *)long long v46 = v5 / 0x3B9ACA00;
    *(_WORD *)&v46[8] = 2048;
    *(void *)&v46[10] = v5 % 0x3B9ACA00 / 0x3E8;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: enter @[%llu.%06llu]\n", buf, 0x20u);
  }
  int v6 = 0;
  uint64_t v7 = 4294963396;
  if (a1 && a2 && (*a1 & 0x80000000) == 0)
  {
    if (!Mutable)
    {
      uint64_t v7 = 4294963395;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CFRunLoopTimerContext buf = 136315906;
        long long v44 = "_getIfListCopy";
        __int16 v45 = 1024;
        *(_DWORD *)long long v46 = 7335;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = -3901;
        *(_WORD *)&v46[10] = 1024;
        *(_DWORD *)&v46[12] = -3901;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%s/%6u: Failed array allocation, err[%d/0x%08x]\n", buf, 0x1Eu);
      }
      goto LABEL_49;
    }
    int v8 = getifaddrs(&v40);
    if (v8)
    {
      int v35 = v8;
      uint64_t v7 = *__error();
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CFRunLoopTimerContext buf = 136315906;
        long long v44 = "_getIfListCopy";
        __int16 v45 = 1024;
        *(_DWORD *)long long v46 = 7338;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v35;
        *(_WORD *)&v46[10] = 1024;
        *(_DWORD *)&v46[12] = v35;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%s/%6u: Failed getifaddrs(), bsdErr[%d/0x%08x]\n", buf, 0x1Eu);
      }
      goto LABEL_36;
    }
    __uint64_t v38 = v5;
    long long v39 = a1;
    CFIndex v9 = &v40;
    int v10 = -1;
    do
    {
      CFIndex v9 = (ifaddrs **)*v9;
      ++v10;
    }
    while (v9);
    memset(__s1, 0, sizeof(__s1));
    int v37 = a2;
    *a2 = 0;
    __int16 v11 = v40;
    if (v40)
    {
      uint64_t v12 = "gif0";
      __uint64_t v13 = "faith0";
      CFAllocatorRef v14 = "stf0";
      do
      {
        ifa_name = v11->ifa_name;
        if (ifa_name
          && strcmp(__s1, v11->ifa_name)
          && strcmp("lo0", ifa_name)
          && strcmp(v12, ifa_name)
          && strcmp(v13, ifa_name)
          && strcmp(v14, ifa_name))
        {
          uint64_t v16 = Mutable;
          CFAllocatorRef v17 = v12;
          __int16 v18 = v14;
          unint64_t v19 = v13;
          memset(v41, 0, 44);
          __strlcpy_chk();
          __uint64_t v20 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
          int v21 = ioctl(*v39, 0xC02C6938uLL, v41);
          unint64_t v22 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v20;
          if (v22 > 0x3B9AC9FF)
          {
            int v23 = v11->ifa_name;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v24 = "*";
              if (v23) {
                __int16 v24 = v23;
              }
              *(_DWORD *)CFRunLoopTimerContext buf = 136448258;
              long long v44 = "_logTimeIfThresholdExceeded";
              __int16 v45 = 2082;
              *(void *)long long v46 = v24;
              *(_WORD *)&v46[8] = 2080;
              *(void *)&v46[10] = " 'SIOCGIFMEDIA' ";
              *(_WORD *)&v46[18] = 1024;
              *(_DWORD *)&v46[20] = -1070831304;
              *(_WORD *)&unsigned char v46[24] = 1024;
              int v47 = -1070831304;
              __int16 v48 = 2048;
              unint64_t v49 = v22 / 0x3B9ACA00;
              __int16 v50 = 2048;
              unint64_t v51 = v22 % 0x3B9ACA00 / 0x3E8;
              __int16 v52 = 2048;
              uint64_t v53 = 1;
              __int16 v54 = 2048;
              uint64_t v55 = 0;
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
            }
          }
          if (v21)
          {
            __uint64_t v13 = v19;
            CFAllocatorRef v14 = v18;
            uint64_t v12 = v17;
            CFArrayRef Mutable = v16;
            if (v21 == 82 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              int v25 = v11->ifa_name;
              int v26 = *__error();
              *(_DWORD *)CFRunLoopTimerContext buf = 136316162;
              long long v44 = "_getIfListCopy";
              __int16 v45 = 1024;
              *(_DWORD *)long long v46 = 7379;
              *(_WORD *)&v46[4] = 2080;
              *(void *)&v46[6] = v25;
              *(_WORD *)&v46[14] = 1024;
              *(_DWORD *)&v46[16] = 82;
              *(_WORD *)&v46[20] = 1024;
              *(_DWORD *)&v46[22] = v26;
              _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%s/%6u: Skipped interface '%s' EPWROFF, SIOCGIFMEDIA/bsdErr[%d], errno[%d]\n", buf, 0x28u);
            }
          }
          else
          {
            __uint64_t v13 = v19;
            CFAllocatorRef v14 = v18;
            uint64_t v12 = v17;
            CFArrayRef Mutable = v16;
            if ((v41[1] & 0xE0) == 0x80)
            {
              CFStringRef v27 = CFStringCreateWithCString(alloc, v11->ifa_name, 0x8000100u);
              if (!v27)
              {
                int v6 = 0;
                uint64_t v7 = 4294963395;
                goto LABEL_34;
              }
              CFStringRef v28 = v27;
              CFArrayAppendValue(v16, v27);
              CFRelease(v28);
              __strlcpy_chk();
            }
          }
        }
        __int16 v11 = v11->ifa_next;
      }
      while (v11);
    }
    CFIndex Count = CFArrayGetCount(Mutable);
    __uint64_t v30 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136447490;
      long long v44 = "_getIfListCopy";
      *(_DWORD *)long long v46 = 7406;
      __int16 v45 = 1024;
      *(void *)&v46[6] = v30 / 0x3B9ACA00;
      *(_WORD *)&v46[4] = 2048;
      *(_WORD *)&v46[14] = 2048;
      *(void *)&v46[16] = v30 % 0x3B9ACA00 / 0x3E8;
      *(_WORD *)&unsigned char v46[24] = 1024;
      int v47 = v10;
      __int16 v48 = 2048;
      unint64_t v49 = Count;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s/%6u: @[%llu.%06llu] getifaddrs nInterfaces[%3u], count[%3ld]\n", buf, 0x36u);
    }
    uint64_t v7 = 0;
    int v6 = 1;
LABEL_34:
    a2 = v37;
    __uint64_t v5 = v38;
  }
  if (!Mutable)
  {
    if (v6)
    {
      CFIndex v31 = 0;
      if (CFArrayGetCount(0)) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = 4294963393;
      }
      goto LABEL_50;
    }
LABEL_49:
    CFIndex v31 = 0;
    goto LABEL_50;
  }
LABEL_36:
  CFIndex v31 = CFArrayGetCount(Mutable);
  if (v7)
  {
LABEL_37:
    CFRelease(Mutable);
    goto LABEL_50;
  }
  if (CFArrayGetCount(Mutable) < 1)
  {
    if (CFArrayGetCount(Mutable)) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = 4294963393;
    }
    goto LABEL_37;
  }
  uint64_t v7 = 0;
  *a2 = Mutable;
LABEL_50:
  if (v40) {
    MEMORY[0x216670760]();
  }
  __uint64_t v32 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  __uint64_t v33 = v32 - v5;
  if (v32 - v5 >= 0xB2D05E00 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136448258;
    long long v44 = "_logTimeIfThresholdExceeded";
    __int16 v45 = 2082;
    *(void *)long long v46 = "*";
    *(_WORD *)&v46[8] = 2080;
    *(void *)&v46[10] = " total time ";
    *(_WORD *)&v46[18] = 1024;
    *(_DWORD *)&v46[20] = 0;
    *(_WORD *)&unsigned char v46[24] = 1024;
    int v47 = 0;
    __int16 v48 = 2048;
    unint64_t v49 = v33 / 0x3B9ACA00;
    __int16 v50 = 2048;
    unint64_t v51 = (274877907 * (v33 % 0x3B9ACA00)) >> 38;
    __int16 v52 = 2048;
    uint64_t v53 = 3;
    __int16 v54 = 2048;
    uint64_t v55 = 0;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136448002;
    long long v44 = "_getIfListCopy";
    __int16 v45 = 2048;
    *(void *)long long v46 = v32 / 0x3B9ACA00;
    *(_WORD *)&v46[8] = 2048;
    *(void *)&v46[10] = v32 % 0x3B9ACA00 / 0x3E8;
    *(_WORD *)&v46[18] = 1024;
    *(_DWORD *)&v46[20] = v7;
    *(_WORD *)&unsigned char v46[24] = 1024;
    int v47 = v7;
    __int16 v48 = 2048;
    unint64_t v49 = v33 / 0x3B9ACA00;
    __int16 v50 = 2048;
    unint64_t v51 = v33 % 0x3B9ACA00 / 0x3E8;
    __int16 v52 = 2048;
    uint64_t v53 = v31;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: @[%llu.%06llu] exit %d/0x%08x, total time [%llu.%06llu], ifCount[%ld]\n", buf, 0x4Au);
  }
  return v7;
}

BOOL _isVirtualInterface(void *a1, io_registry_entry_t a2)
{
  io_registry_entry_t Service = a2;
  if (!a2)
  {
    io_registry_entry_t Service = _Apple80211FindService(a1);
    if (!Service) {
      return 0;
    }
  }
  CFStringRef v4 = (const __CFString *)_copyStringRegistryPropertyFor(Service, @"IO80211VirtualInterfaceRole");
  CFStringRef v5 = v4;
  if (v4)
  {
    if (CFStringCompare(v4, @"AirLink", 0)
      && CFStringCompare(v5, @"WiFi-Aware Discovery", 0)
      && CFStringCompare(v5, @"WiFi-Aware Discovery+Data", 0)
      && CFStringCompare(v5, @"WiFi-Aware Data", 0))
    {
      BOOL v6 = CFEqual(v5, @"SoftAP");
      if (a2) {
        goto LABEL_12;
      }
    }
    else
    {
      BOOL v6 = 1;
      if (a2) {
        goto LABEL_12;
      }
    }
    goto LABEL_11;
  }
  BOOL v6 = 0;
  if (!a2) {
LABEL_11:
  }
    IOObjectRelease(Service);
LABEL_12:
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t Apple80211GetIfListCopy(int *a1, const __CFArray **a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  CFArrayRef theArray = 0;
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  __uint64_t v5 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136446722;
    CFAllocatorRef v17 = "Apple80211GetIfListCopy";
    __int16 v18 = 2048;
    unint64_t v19 = v5 / 0x3B9ACA00;
    __int16 v20 = 2048;
    unint64_t v21 = v5 % 0x3B9ACA00 / 0x3E8;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: @[%llu.%06llu] enter\n", buf, 0x20u);
  }
  if (!a2)
  {
    uint64_t v12 = 4294963396;
LABEL_23:
    CFIndex Count = CFArrayGetCount(Mutable);
    goto LABEL_15;
  }
  *a2 = 0;
  IfListCFDictionaryRef Copy = _getIfListCopy(a1, &theArray);
  if (IfListCopy)
  {
    uint64_t v12 = IfListCopy;
    goto LABEL_23;
  }
  CFIndex v7 = CFArrayGetCount(theArray);
  if (v7 >= 1)
  {
    CFIndex v8 = v7;
    for (CFIndex i = 0; i != v8; ++i)
    {
      CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, i);
      if (_isInfraInterface(ValueAtIndex, 0)) {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  CFIndex Count = CFArrayGetCount(Mutable);
  if (CFArrayGetCount(Mutable) >= 1)
  {
    uint64_t v12 = 0;
    *a2 = Mutable;
    goto LABEL_16;
  }
  if (CFArrayGetCount(Mutable)) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = 4294963393;
  }
LABEL_15:
  CFRelease(Mutable);
LABEL_16:
  if (theArray) {
    CFRelease(theArray);
  }
  __uint64_t v13 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136447490;
    CFAllocatorRef v17 = "Apple80211GetIfListCopy";
    __int16 v18 = 2048;
    unint64_t v19 = v13 / 0x3B9ACA00;
    __int16 v20 = 2048;
    unint64_t v21 = v13 % 0x3B9ACA00 / 0x3E8;
    __int16 v22 = 1024;
    int v23 = v12;
    __int16 v24 = 1024;
    int v25 = v12;
    __int16 v26 = 2048;
    CFIndex v27 = Count;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: @[%llu.%06llu] exit %d/0x%08x, ifCount[%ld]\n", buf, 0x36u);
  }
  return v12;
}

BOOL _isInfraInterface(void *a1, io_registry_entry_t a2)
{
  io_registry_entry_t Service = a2;
  if (!a2)
  {
    io_registry_entry_t Service = _Apple80211FindService(a1);
    if (!Service) {
      return 0;
    }
  }
  CFStringRef v4 = (const __CFString *)_copyStringRegistryPropertyFor(Service, @"IO80211InterfaceRole");
  CFStringRef v5 = v4;
  if (v4)
  {
    BOOL v6 = CFEqual(v4, @"Infrastructure");
    if (a2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v6 = 0;
  if (!a2) {
LABEL_5:
  }
    IOObjectRelease(Service);
LABEL_6:
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t Apple80211Close(uint64_t a1)
{
  v5[5] = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294963396;
  }
  if (*(void *)(a1 + 1952)) {
    int v2 = *(NSObject **)(a1 + 1952);
  }
  else {
    int v2 = *(NSObject **)(a1 + 2072);
  }
  CFDictionaryRef v3 = *(NSObject **)(a1 + 2080);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = __Apple80211Close_block_invoke;
  v5[3] = &__block_descriptor_tmp_89;
  v5[4] = a1;
  dispatch_group_notify(v3, v2, v5);
  if (*(void *)(a1 + 1824) || *(void *)(a1 + 64) || *(void *)(a1 + 56)) {
    Apple80211EventMonitoringHalt(a1);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 2080));
  return 0;
}

void __Apple80211Close_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    pthread_mutex_destroy((pthread_mutex_t *)(v1 + 272));
    pthread_mutex_destroy((pthread_mutex_t *)(v1 + 160));
    pthread_mutex_destroy((pthread_mutex_t *)(v1 + 1592));
    int v2 = *(NSObject **)(v1 + 1968);
    if (v2)
    {
      dispatch_source_cancel(v2);
      dispatch_release(*(dispatch_object_t *)(v1 + 1968));
      *(void *)(v1 + 1968) = 0;
    }
    CFDictionaryRef v3 = *(IONotificationPort **)(v1 + 1960);
    if (v3)
    {
      IONotificationPortDestroy(v3);
      *(void *)(v1 + 1960) = 0;
    }
    CFStringRef v4 = *(NSObject **)(v1 + 1952);
    if (v4)
    {
      dispatch_release(v4);
      *(void *)(v1 + 1952) = 0;
    }
    CFStringRef v5 = *(const void **)(v1 + 112);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(v1 + 112) = 0;
    }
    pthread_mutex_destroy((pthread_mutex_t *)(v1 + 1664));
    pthread_mutex_destroy((pthread_mutex_t *)(v1 + 1736));
    *(_WORD *)(v1 + 1801) = 0;
    if ((*(_DWORD *)v1 & 0x80000000) == 0) {
      close(*(_DWORD *)v1);
    }
    io_connect_t v6 = *(_DWORD *)(v1 + 1804);
    if (v6)
    {
      IOServiceClose(v6);
      *(_DWORD *)(v1 + 1804) = 0;
    }
    io_object_t v7 = *(_DWORD *)(v1 + 1976);
    if (v7) {
      IOObjectRelease(v7);
    }
    io_object_t v8 = *(_DWORD *)(v1 + 1980);
    if (v8) {
      IOObjectRelease(v8);
    }
    CFIndex v9 = *(NSObject **)(v1 + 2080);
    if (v9)
    {
      dispatch_release(v9);
      *(void *)(v1 + 2080) = 0;
    }
    int v10 = *(NSObject **)(v1 + 2072);
    if (v10) {
      dispatch_release(v10);
    }
    *(void *)(v1 + 12) = 0;
    *(void *)(v1 + 4) = 0;
    free((void *)v1);
  }
}

uint64_t Apple80211BindToInterfaceWithParams(void *a1, __CFString *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315138;
    __uint64_t v13 = "Apple80211BindToInterfaceWithParams";
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Enter:%s: ", (uint8_t *)&v12, 0xCu);
  }
  uint64_t v10 = 4294963396;
  if (a1 && a2)
  {
    a1[242] = a3;
    a1[243] = a4;
    a1[244] = a5;
    if (a5) {
      dispatch_retain(a5);
    }
    uint64_t v10 = Apple80211BindToInterface((uint64_t)a1, a2);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315394;
      __uint64_t v13 = "Apple80211BindToInterfaceWithParams";
      __int16 v14 = 1024;
      int v15 = v10;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Exit: %s err:%d", (uint8_t *)&v12, 0x12u);
    }
  }
  return v10;
}

uint64_t Apple80211BindToInterface(uint64_t a1, __CFString *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = 4294963396;
  if (a1 && a2)
  {
    io_registry_entry_t Service = _Apple80211FindService(a2);
    if (Service)
    {
      io_object_t v6 = Service;
      CFStringRef v7 = (const __CFString *)_copyStringRegistryPropertyFor(Service, @"IO80211VirtualInterfaceRole");
      if (v7 && (CFStringRef v8 = v7, v9 = CFStringCompare(v7, @"AirLink", 0), CFRelease(v8), v9 == kCFCompareEqualTo))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 136446466;
          int v12 = "Apple80211BindToInterface";
          __int16 v13 = 2112;
          __int16 v14 = a2;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: %@ using compatibility mode\n", (uint8_t *)&v11, 0x16u);
        }
        if (CFStringGetCString(a2, (char *)(a1 + 4), 16, 0x8000100u))
        {
          uint64_t result = 0;
          *(unsigned char *)(a1 + 107) = 1;
        }
        else
        {
          return 4294963396;
        }
      }
      else
      {
        uint64_t v10 = Apple80211BindToInterfaceWithService();
        IOObjectRelease(v6);
        return v10;
      }
    }
    else
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 136446466;
        int v12 = "Apple80211BindToInterface";
        __int16 v13 = 2112;
        __int16 v14 = a2;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: %@ Failed to find matching service in IORegistry\n", (uint8_t *)&v11, 0x16u);
      }
      return 4294963393;
    }
  }
  return result;
}

uint64_t Apple80211GetIOReportingService(io_registry_entry_t *a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  io_iterator_t existing = 0;
  mach_port_t mainPort = -1431655766;
  if (MEMORY[0x2166702E0](0, &mainPort))
  {
    io_registry_entry_t v3 = 0;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_57;
    }
    *(_WORD *)CFRunLoopTimerContext buf = 0;
    CFIndex v31 = &_os_log_internal;
    __uint64_t v32 = "IOMainPort failed";
LABEL_72:
    _os_log_impl(&dword_210714000, v31, OS_LOG_TYPE_DEFAULT, v32, buf, 2u);
    io_registry_entry_t v3 = 0;
    goto LABEL_57;
  }
  CFDictionaryRef v1 = IOServiceMatching("IO80211Controller");
  if (IOServiceGetMatchingServices(mainPort, v1, &existing))
  {
    io_registry_entry_t v3 = 0;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_57;
    }
    *(_WORD *)CFRunLoopTimerContext buf = 0;
    CFIndex v31 = &_os_log_internal;
    __uint64_t v32 = "IOServiceGetMatchingServices failed";
    goto LABEL_72;
  }
  if (existing)
  {
    io_object_t v2 = IOIteratorNext(existing);
    if (v2)
    {
      io_registry_entry_t v3 = v2;
      CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      do
      {
        CFStringRef v5 = (const __CFString *)IORegistryEntrySearchCFProperty(v3, "IOService", @"IOClass", v4, 3u);
        if (v5)
        {
          CFStringRef v6 = v5;
          CFTypeID v7 = CFGetTypeID(v5);
          if (v7 == CFStringGetTypeID())
          {
            if (CFEqual(v6, @"ACIWiFiDriver"))
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)CFRunLoopTimerContext buf = 0;
                CFIndex v27 = &_os_log_internal;
                uint64_t v28 = "Found wlan driver ACIWiFiDriver";
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            if (CFEqual(v6, @"AirPort_BrcmNIC"))
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_48;
              }
              *(_WORD *)CFRunLoopTimerContext buf = 0;
              CFIndex v27 = &_os_log_internal;
              uint64_t v28 = "Found wlan driver AirPort_BrcmNIC";
LABEL_47:
              _os_log_impl(&dword_210714000, v27, OS_LOG_TYPE_DEFAULT, v28, buf, 2u);
              goto LABEL_48;
            }
            if (CFEqual(v6, @"AppleBCMWLANCore"))
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_48;
              }
              *(_WORD *)CFRunLoopTimerContext buf = 0;
              CFIndex v27 = &_os_log_internal;
              uint64_t v28 = "Found wlan driver AppleBCMWLANCore (iokit)";
              goto LABEL_47;
            }
          }
          CFRelease(v6);
        }
        CFStringRef v8 = (const __CFString *)IORegistryEntrySearchCFProperty(v3, "IOService", @"IOUserClass", v4, 3u);
        if (v8)
        {
          CFStringRef v6 = v8;
          CFTypeID v9 = CFGetTypeID(v8);
          if (v9 == CFStringGetTypeID() && CFEqual(v6, @"AppleBCMWLANCore"))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)CFRunLoopTimerContext buf = 0;
              CFIndex v27 = &_os_log_internal;
              uint64_t v28 = "Found wlan driver AppleBCMWLANCore";
              goto LABEL_47;
            }
LABEL_48:
            CFRelease(v6);
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)CFRunLoopTimerContext buf = 0;
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Found WLAN", buf, 2u);
            }
            goto LABEL_57;
          }
          CFRelease(v6);
        }
        io_registry_entry_t v3 = IOIteratorNext(existing);
      }
      while (v3);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFRunLoopTimerContext buf = 0;
      uint64_t v10 = &_os_log_internal;
      int v11 = "Zero driver match with nonzero IO80211Controller match";
LABEL_19:
      _os_log_impl(&dword_210714000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 2u);
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFRunLoopTimerContext buf = 0;
    uint64_t v10 = &_os_log_internal;
    int v11 = "No Matches for IO80211Controller, trying dk matching";
    goto LABEL_19;
  }
  int v12 = IOServiceMatching("IOUserService");
  CFDictionaryAddValue(v12, @"IOUserClass", @"AppleBCMWLANCore");
  if (IOServiceGetMatchingServices(mainPort, v12, &existing))
  {
    io_registry_entry_t v3 = 0;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_57;
    }
    *(_WORD *)CFRunLoopTimerContext buf = 0;
    CFIndex v31 = &_os_log_internal;
    __uint64_t v32 = "IOServiceGetMatchingServices failed";
    goto LABEL_72;
  }
  io_object_t v13 = IOIteratorNext(existing);
  if (v13)
  {
    io_registry_entry_t v3 = v13;
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v15 = &_os_log_internal;
    do
    {
      CFStringRef v16 = (const __CFString *)IORegistryEntrySearchCFProperty(v3, "IOService", @"IOUserClass", v14, 3u);
      CFTypeID v17 = CFGetTypeID(v16);
      if (v17 == CFStringGetTypeID() && CFEqual(v16, @"AppleBCMWLANCore"))
      {
        CFTypeRef v18 = IORegistryEntrySearchCFProperty(v3, "IOService", @"IOReportLegend", v14, 0);
        BOOL v19 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        if (v18)
        {
          if (v19)
          {
            *(_WORD *)CFRunLoopTimerContext buf = 0;
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Found wlan driver dk AppleBCMWLANCore", buf, 2u);
          }
          CFRelease(v18);
          CFStringRef v29 = v16;
LABEL_56:
          CFRelease(v29);
          goto LABEL_57;
        }
        if (v19)
        {
          *(_WORD *)CFRunLoopTimerContext buf = 0;
          _os_log_impl(&dword_210714000, v15, OS_LOG_TYPE_DEFAULT, "Property IOReportLegend not found in AppleBCMWLANCore", buf, 2u);
        }
      }
      CFRelease(v16);
      io_registry_entry_t v3 = IOIteratorNext(existing);
    }
    while (v3);
  }
  __int16 v20 = IOServiceMatching("IOUserService");
  CFDictionaryAddValue(v20, @"IOUserClass", @"IO80211ReporterProxy");
  if (IOServiceGetMatchingServices(mainPort, v20, &existing))
  {
    io_registry_entry_t v3 = 0;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_57;
    }
    *(_WORD *)CFRunLoopTimerContext buf = 0;
    CFIndex v31 = &_os_log_internal;
    __uint64_t v32 = "IOServiceGetMatchingServices failed";
    goto LABEL_72;
  }
  io_registry_entry_t v3 = IOIteratorNext(existing);
  if (v3)
  {
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    __int16 v22 = &_os_log_internal;
    do
    {
      CFStringRef v23 = (const __CFString *)IORegistryEntrySearchCFProperty(v3, "IOService", @"IOUserClass", v21, 3u);
      CFTypeID v24 = CFGetTypeID(v23);
      if (v24 == CFStringGetTypeID() && CFEqual(v23, @"IO80211ReporterProxy"))
      {
        CFTypeRef v25 = IORegistryEntrySearchCFProperty(v3, "IOService", @"IOReportLegend", v21, 0);
        BOOL v26 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        if (v25)
        {
          if (v26)
          {
            *(_WORD *)CFRunLoopTimerContext buf = 0;
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Found wlan driver IO80211ReporterProxy", buf, 2u);
          }
          CFRelease(v25);
          CFStringRef v29 = v23;
          goto LABEL_56;
        }
        if (v26)
        {
          *(_WORD *)CFRunLoopTimerContext buf = 0;
          _os_log_impl(&dword_210714000, v22, OS_LOG_TYPE_DEFAULT, "Property IOReportLegend not found in IO80211ReporterProxy", buf, 2u);
        }
      }
      CFRelease(v23);
      io_registry_entry_t v3 = IOIteratorNext(existing);
    }
    while (v3);
  }
LABEL_57:
  if (existing) {
    IOObjectRelease(existing);
  }
  if (!v3) {
    return 4294963396;
  }
  uint64_t result = 0;
  *a1 = v3;
  return result;
}

uint64_t Apple80211BindToInterfaceWithRecoveryOption(uint64_t a1, __CFString *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = 4294963396;
  if (a1 && a2)
  {
    io_registry_entry_t Service = _Apple80211FindService(a2);
    if (Service)
    {
      io_object_t v6 = Service;
      CFStringRef v7 = (const __CFString *)_copyStringRegistryPropertyFor(Service, @"IO80211VirtualInterfaceRole");
      if (v7 && (CFStringRef v8 = v7, v9 = CFStringCompare(v7, @"AirLink", 0), CFRelease(v8), v9 == kCFCompareEqualTo))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 136315394;
          int v12 = "Apple80211BindToInterfaceWithRecoveryOption";
          __int16 v13 = 2112;
          CFAllocatorRef v14 = a2;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: %@ using compatibility mode\n", (uint8_t *)&v11, 0x16u);
        }
        if (CFStringGetCString(a2, (char *)(a1 + 4), 16, 0x8000100u))
        {
          uint64_t result = 0;
          *(unsigned char *)(a1 + 107) = 1;
        }
        else
        {
          return 4294963396;
        }
      }
      else
      {
        uint64_t v10 = Apple80211BindToInterfaceWithService();
        IOObjectRelease(v6);
        return v10;
      }
    }
    else
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 136315394;
        int v12 = "Apple80211BindToInterfaceWithRecoveryOption";
        __int16 v13 = 2112;
        CFAllocatorRef v14 = a2;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: %@ Failed to find matching service in IORegistry\n", (uint8_t *)&v11, 0x16u);
      }
      return 4294963393;
    }
  }
  return result;
}

uint64_t _Apple80211FindService(void *a1)
{
  keys[1] = *(void **)MEMORY[0x263EF8340];
  values = a1;
  keys[0] = @"IOInterfaceName";
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  io_object_t v2 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  io_registry_entry_t v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFTypeRef cf = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)keys, (const void **)&values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  keys[0] = @"IOPropertyMatch";
  CFDictionaryRef v4 = CFDictionaryCreate(v1, (const void **)keys, &cf, 1, v2, v3);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  return IOServiceGetMatchingService(*MEMORY[0x263F0EC88], v4);
}

const void *_copyStringRegistryPropertyFor(io_registry_entry_t a1, const __CFString *a2)
{
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(a1, a2, (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  io_registry_entry_t v3 = CFProperty;
  if (CFProperty)
  {
    CFTypeID v4 = CFGetTypeID(CFProperty);
    if (v4 != CFStringGetTypeID())
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

uint64_t Apple80211BindToInterfaceWithService()
{
  kern_return_t v13;
  kern_return_t v14;
  BOOL v15;
  kern_return_t v16;
  kern_return_t v17;
  NSObject *v18;
  dispatch_queue_t v19;
  IONotificationPort *v20;
  __CFDictionary *Mutable;
  __CFDictionary *v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint32_t KernelRetainCount;
  uint32_t UserRetainCount;
  kern_return_t v34;
  NSObject *v35;
  const char *v36;
  kern_return_t v37;
  kern_return_t v38;
  uint32_t v39;
  IONotificationPort *v40;
  io_connect_t v41;
  NSObject *v42;
  const char *v43;
  size_t outputStructCnt;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  __CFString *v48;
  __int16 v49;
  unsigned char v50[10];
  io_service_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint32_t v65;
  __int16 v66;
  uint32_t v67;
  long long v68;
  long long v69;
  uint64_t v70;
  unsigned char outputStruct[264];
  _DWORD inputStruct[3852];
  uint64_t v73;

  uint64_t v0 = MEMORY[0x270FA5388]();
  io_registry_entry_t v3 = v1;
  io_service_t v5 = v4;
  uint64_t v6 = v0;
  CFStringRef v7 = 0;
  CFArrayRef v73 = *MEMORY[0x263EF8340];
  *(unsigned char *)(v0 + 1992) = 0;
  CFStringRef v8 = 0;
  if (!v0 || !v1) {
    goto LABEL_52;
  }
  int v9 = v2;
  if (_checkEntitlements_onceToken != -1) {
    dispatch_once(&_checkEntitlements_onceToken, &__block_literal_global_1891);
  }
  if ((*(void *)(v6 + 1824) || *(void *)(v6 + 64) || *(void *)(v6 + 56))
    && Apple80211EventMonitoringHalt(v6))
  {
    goto LABEL_51;
  }
  uint64_t v10 = *(IONotificationPort **)(v6 + 1960);
  if (v10)
  {
    IONotificationPortDestroy(v10);
    *(void *)(v6 + 1960) = 0;
  }
  int v11 = (mach_port_t *)(v6 + 1804);
  io_connect_t v12 = *(_DWORD *)(v6 + 1804);
  if (v12)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
      long long v46 = "Apple80211BindToInterfaceWithService";
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Free previous IOUC session\n", buf, 0xCu);
      io_connect_t v12 = *v11;
    }
    *(unsigned char *)(v6 + 1801) = 0;
    IOServiceClose(v12);
    *(_DWORD *)(v6 + 1804) = 0;
  }
  if (!CFStringGetCString(v3, (char *)(v6 + 4), 16, 0x8000100u)) {
    goto LABEL_51;
  }
  __int16 v13 = IOServiceOpen(v5, *MEMORY[0x263EF8960], 0, (io_connect_t *)(v6 + 1804));
  if (v13)
  {
    size_t v34 = v13;
    if (v13 == -536870174 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136446978;
      long long v46 = "Apple80211BindToInterfaceWithService";
      int v47 = 2112;
      __int16 v48 = v3;
      unint64_t v49 = 1024;
      *(_DWORD *)__int16 v50 = -536870174;
      *(_WORD *)&v50[4] = 1024;
      *(_DWORD *)&v50[6] = -536870174;
      _os_log_fault_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_FAULT, "%{public}s: %@ IOServiceOpen failed with %d/0x%08x", buf, 0x22u);
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_51;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136446978;
    long long v46 = "Apple80211BindToInterfaceWithService";
    int v47 = 2112;
    __int16 v48 = v3;
    unint64_t v49 = 1024;
    *(_DWORD *)__int16 v50 = v34;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v34;
    int v35 = &_os_log_internal;
    __int16 v36 = "%{public}s: %@ IOServiceOpen failed with %d/0x%08x";
    goto LABEL_49;
  }
  bzero(inputStruct, 0x3C30uLL);
  inputStruct[0] = -1071093303;
  __strlcpy_chk();
  inputStruct[3846] = 43;
  memset(outputStruct, 0, 257);
  size_t outputStructCnt = 256;
  CFAllocatorRef v14 = IOConnectCallStructMethod(*v11, 0, inputStruct, 0x3C30uLL, outputStruct, &outputStructCnt);
  uint64_t v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (!v15) {
      goto LABEL_51;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136446978;
    long long v46 = "Apple80211BindToInterfaceWithService";
    int v47 = 2112;
    __int16 v48 = v3;
    unint64_t v49 = 1024;
    *(_DWORD *)__int16 v50 = v14;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v14;
    int v35 = &_os_log_internal;
    __int16 v36 = "%{public}s: %@ Driver version query failed with %d/0x%08x";
LABEL_49:
    long long v39 = 34;
LABEL_50:
    _os_log_impl(&dword_210714000, v35, OS_LOG_TYPE_DEFAULT, v36, buf, v39);
    goto LABEL_51;
  }
  if (v15)
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136446722;
    long long v46 = "Apple80211BindToInterfaceWithService";
    int v47 = 2112;
    __int16 v48 = v3;
    unint64_t v49 = 2080;
    *(void *)__int16 v50 = outputStruct;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: %@ Sanity test passed. Version - %s", buf, 0x20u);
  }
  size_t outputStructCnt = 1;
  CFStringRef v16 = IOConnectCallStructMethod(*(_DWORD *)(v6 + 1804), 1u, 0, 0, (void *)(v6 + 1801), &outputStructCnt);
  if (v16)
  {
    uint64_t v37 = v16;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_51;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136446978;
    long long v46 = "Apple80211BindToInterfaceWithService";
    int v47 = 2112;
    __int16 v48 = v3;
    unint64_t v49 = 1024;
    *(_DWORD *)__int16 v50 = v37;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v37;
    int v35 = &_os_log_internal;
    __int16 v36 = "%{public}s: %@ useIOUCWhenPossible query failed with %d/0x%08x";
    goto LABEL_49;
  }
  size_t outputStructCnt = 1;
  CFTypeID v17 = IOConnectCallStructMethod(*(_DWORD *)(v6 + 1804), 7u, 0, 0, (void *)(v6 + 1802), &outputStructCnt);
  if (v17)
  {
    __uint64_t v38 = v17;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_51;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136446978;
    long long v46 = "Apple80211BindToInterfaceWithService";
    int v47 = 2112;
    __int16 v48 = v3;
    unint64_t v49 = 1024;
    *(_DWORD *)__int16 v50 = v38;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v38;
    int v35 = &_os_log_internal;
    __int16 v36 = "%{public}s: %@ isDKSupported query failed with %d/0x%08x";
    goto LABEL_49;
  }
  CFNumberRef v70 = 0;
  CFDictionaryRef v69 = 0u;
  uint64_t v68 = 0u;
  *(void *)(v6 + 96) = 0;
  *(_DWORD *)(v6 + 103) = 0;
  *(void *)(v6 + 88) = 0;
  __strlcpy_chk();
  CFNumberRef v70 = v6 + 88;
  LODWORD(v69) = 12;
  DWORD2(v69) = 19;
  if (Apple80211RawGet(v6, (uint64_t)&v68))
  {
LABEL_51:
    CFStringRef v7 = 0;
    CFStringRef v8 = 0;
    goto LABEL_52;
  }
  if (!v9) {
    goto LABEL_32;
  }
  if (!*(void *)(v6 + 1952))
  {
    CFTypeRef v18 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    BOOL v19 = dispatch_queue_create(0, v18);
    *(void *)(v6 + 1952) = v19;
    if (!v19)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_51;
      }
      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
      long long v46 = "Apple80211BindToInterfaceWithService";
      int v35 = &_os_log_internal;
      __int16 v36 = "%s: failed to create queue\n";
      long long v39 = 12;
      goto LABEL_50;
    }
  }
  __int16 v20 = IONotificationPortCreate(*MEMORY[0x263F0EC88]);
  *(void *)(v6 + 1960) = v20;
  if (!v20)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_51;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136446466;
    long long v46 = "Apple80211BindToInterfaceWithService";
    int v47 = 2112;
    __int16 v48 = v3;
    int v35 = &_os_log_internal;
    __int16 v36 = "%{public}s: %@ IONotificationPortCreate failed!! \n";
    goto LABEL_67;
  }
  IONotificationPortSetDispatchQueue(v20, *(dispatch_queue_t *)(v6 + 1952));
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_51;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136446466;
    long long v46 = "Apple80211BindToInterfaceWithService";
    int v47 = 2112;
    __int16 v48 = v3;
    int v35 = &_os_log_internal;
    __int16 v36 = "%{public}s: %@ propertyDictionaryRef alloc failed!! \n";
LABEL_67:
    long long v39 = 22;
    goto LABEL_50;
  }
  CFStringRef v8 = Mutable;
  CFDictionarySetValue(Mutable, @"IOInterfaceName", v3);
  __int16 v22 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v22)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136446466;
      long long v46 = "Apple80211BindToInterfaceWithService";
      int v47 = 2112;
      __int16 v48 = v3;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: %@ matchingServiceDict alloc failed!! \n", buf, 0x16u);
    }
    CFStringRef v7 = 0;
    goto LABEL_52;
  }
  CFStringRef v7 = v22;
  CFDictionarySetValue(v22, @"IOPropertyMatch", v8);
  CFRetain(v7);
  if (IOServiceAddMatchingNotification(*(IONotificationPortRef *)(v6 + 1960), "IOServiceMatched", v7, (IOServiceMatchingCallback)_Apple80211ServiceMatchedCallback, (void *)v6, (io_iterator_t *)(v6 + 1976)))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136446466;
      long long v46 = "Apple80211BindToInterfaceWithService";
      int v47 = 2112;
      __int16 v48 = v3;
      long long v42 = &_os_log_internal;
      long long v43 = "%{public}s: %@ Failed to add Publish notification!! \n";
LABEL_75:
      _os_log_impl(&dword_210714000, v42, OS_LOG_TYPE_DEFAULT, v43, buf, 0x16u);
    }
  }
  else
  {
    _Apple80211ServiceMatchedCallback(v6, *(_DWORD *)(v6 + 1976));
    if (!IOServiceAddMatchingNotification(*(IONotificationPortRef *)(v6 + 1960), "IOServiceTerminate", v7, (IOServiceMatchingCallback)_Apple80211ServiceTerminatedCallback, (void *)v6, (io_iterator_t *)(v6 + 1980)))
    {
      _Apple80211ServiceTerminatedCallback(v6, *(_DWORD *)(v6 + 1980));
      CFStringRef v23 = dispatch_source_create(MEMORY[0x263EF8400], 0, 0, *(dispatch_queue_t *)(v6 + 1952));
      *(void *)(v6 + 1968) = v23;
      dispatch_set_context(v23, (void *)v6);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v6 + 1968), (dispatch_function_t)_serviceMatchingDelayedCallback);
      dispatch_activate(*(dispatch_object_t *)(v6 + 1968));
      CFRelease(v8);
LABEL_32:
      CFTypeID v24 = 0;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(v6 + 1801)) {
          CFTypeRef v25 = "TRUE";
        }
        else {
          CFTypeRef v25 = "FALSE";
        }
        BOOL v26 = *(void *)(v6 + 1816);
        CFIndex v27 = *(void *)(v6 + 1952);
        uint64_t v28 = *(_DWORD *)(v6 + 1804);
        CFStringRef v29 = *(void *)(v6 + 1824);
        __uint64_t v30 = *(void *)(v6 + 1920);
        KernelRetainCFIndex Count = IOObjectGetKernelRetainCount(v5);
        UserRetainCFIndex Count = IOObjectGetUserRetainCount(v5);
        *(_DWORD *)CFRunLoopTimerContext buf = 136449026;
        long long v46 = "Apple80211BindToInterfaceWithService";
        int v47 = 2112;
        __int16 v48 = v3;
        unint64_t v49 = 2082;
        *(void *)__int16 v50 = v25;
        *(_WORD *)&v50[8] = 1024;
        unint64_t v51 = v5;
        __int16 v52 = 2048;
        uint64_t v53 = v6;
        __int16 v54 = 2048;
        uint64_t v55 = v26;
        uint64_t v56 = 2048;
        CFNumberRef v57 = v27;
        int v58 = 1024;
        int v59 = v28;
        long long v60 = 2048;
        CFNumberType v61 = v29;
        int v62 = 2048;
        CFNumberRef v63 = v30;
        CFNumberRef v64 = 1024;
        CFDictionaryRef v65 = KernelRetainCount;
        CFDictionaryRef v66 = 1024;
        CFDictionaryRef v67 = UserRetainCount;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: %@ useIOUCWhenPossible %{public}s, service:%u opaque:%p, ioucQueue[%p] serviceNotificationQueue[%p] connect[%u] port[%p] runLoop[%p] kretain[%u] uretain[%u]\n", buf, 0x6Au);
        return 0;
      }
      return v24;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136446466;
      long long v46 = "Apple80211BindToInterfaceWithService";
      int v47 = 2112;
      __int16 v48 = v3;
      long long v42 = &_os_log_internal;
      long long v43 = "%{public}s: %@ Failed to add Terminated notification!! \n";
      goto LABEL_75;
    }
  }
LABEL_52:
  long long v40 = *(IONotificationPort **)(v6 + 1960);
  if (v40)
  {
    IONotificationPortDestroy(v40);
    *(void *)(v6 + 1960) = 0;
  }
  long long v41 = *(_DWORD *)(v6 + 1804);
  if (v41)
  {
    IOServiceClose(v41);
    *(_DWORD *)(v6 + 1804) = 0;
  }
  CFTypeID v24 = Apple80211BindToInterfaceWithIOCTL(v6, v3, v5);
  if (v24)
  {
    *(void *)(v6 + 12) = 0;
    *(void *)(v6 + 4) = 0;
    if (v8) {
      CFRelease(v8);
    }
    if (v7) {
      CFRelease(v7);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136446978;
      long long v46 = "Apple80211BindToInterfaceWithService";
      int v47 = 2112;
      __int16 v48 = v3;
      unint64_t v49 = 1024;
      *(_DWORD *)__int16 v50 = v24;
      *(_WORD *)&v50[4] = 1024;
      *(_DWORD *)&v50[6] = v24;
      _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%{public}s: FAILED to bind to interface %@ - %d/0x%08x", buf, 0x22u);
    }
  }
  return v24;
}

void _Apple80211ServiceMatchedCallback(uint64_t a1, io_iterator_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
    CFStringRef v8 = "_Apple80211ServiceMatchedCallback";
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Enter: %s\n", buf, 0xCu);
  }
  if (a1)
  {
    io_object_t v4 = IOIteratorNext(a2);
    if (v4)
    {
      io_object_t v5 = v4;
      uint64_t v6 = &_os_log_internal;
      do
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CFRunLoopTimerContext buf = 136315650;
          CFStringRef v8 = "_Apple80211ServiceMatchedCallback";
          __int16 v9 = 1024;
          io_object_t v10 = v5;
          __int16 v11 = 2048;
          uint64_t v12 = a1;
          _os_log_impl(&dword_210714000, v6, OS_LOG_TYPE_DEFAULT, "%s: service:%u opaque:%p\n", buf, 0x1Cu);
        }
        _Apple80211IOUCResume();
        IOObjectRelease(v5);
        io_object_t v5 = IOIteratorNext(a2);
      }
      while (v5);
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136315650;
    CFStringRef v8 = "_Apple80211ServiceMatchedCallback";
    __int16 v9 = 1024;
    io_object_t v10 = 0;
    __int16 v11 = 2048;
    uint64_t v12 = 0;
    _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%s: service:%u opaque:%p, No opaque, bailing\n", buf, 0x1Cu);
  }
}

void _Apple80211ServiceTerminatedCallback(uint64_t a1, io_iterator_t iterator)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 1952);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 1816);
      if (v5) {
        BOOL v6 = v4 == v5;
      }
      else {
        BOOL v6 = 1;
      }
      int v7 = !v6;
    }
    else
    {
      int v7 = 0;
    }
    io_object_t v8 = IOIteratorNext(iterator);
    if (v8)
    {
      io_object_t v9 = v8;
      io_object_t v10 = 0;
      __int16 v11 = v28;
      uint64_t v12 = &_os_log_internal;
      do
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          BOOL v19 = v11;
          uint64_t v20 = *(void *)(a1 + 1816);
          uint64_t v22 = *(void *)(a1 + 1952);
          int v23 = *(_DWORD *)(a1 + 1804);
          uint64_t v25 = *(void *)(a1 + 1824);
          uint64_t v26 = *(void *)(a1 + 1920);
          KernelRetainCFIndex Count = IOObjectGetKernelRetainCount(v9);
          UserRetainCFIndex Count = IOObjectGetUserRetainCount(v9);
          *(_DWORD *)CFRunLoopTimerContext buf = 136317698;
          __uint64_t v32 = "_Apple80211ServiceTerminatedCallback";
          __int16 v33 = 1024;
          io_object_t v34 = v9;
          __int16 v35 = 2048;
          uint64_t v36 = a1;
          __int16 v37 = 2048;
          uint64_t v38 = v20;
          __int16 v11 = v19;
          __int16 v39 = 2048;
          uint64_t v40 = v22;
          __int16 v41 = 1024;
          int v42 = v23;
          __int16 v43 = 2048;
          uint64_t v44 = v25;
          __int16 v45 = 2048;
          uint64_t v46 = v26;
          __int16 v47 = 1024;
          int v48 = v7;
          __int16 v49 = 1024;
          uint32_t v50 = KernelRetainCount;
          __int16 v51 = 1024;
          uint32_t v52 = UserRetainCount;
          _os_log_error_impl(&dword_210714000, v12, OS_LOG_TYPE_ERROR, "%s: service:%u opaque:%p, ioucQueue[%p] serviceNotificationQueue[%p] connect[%u] port[%p] runLoop[%p] _needSerialization[%u], kretain[%u] uretain[%u]\n", buf, 0x5Cu);
        }
        BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        if (v7)
        {
          if (v13)
          {
            uint64_t v14 = *(void *)(a1 + 1816);
            *(_DWORD *)CFRunLoopTimerContext buf = 136315906;
            __uint64_t v32 = "_Apple80211ServiceTerminatedCallback";
            __int16 v33 = 1024;
            io_object_t v34 = v10;
            __int16 v35 = 2048;
            uint64_t v36 = v14;
            __int16 v37 = 1024;
            LODWORD(v38) = v9;
            _os_log_impl(&dword_210714000, v12, OS_LOG_TYPE_DEFAULT, "%s: [%u] ioucQueue[%p], service:%u, serializing\n", buf, 0x22u);
          }
          uint64_t v15 = *(NSObject **)(a1 + 1816);
          block[0] = MEMORY[0x263EF8330];
          block[1] = 0x40000000;
          v28[0] = ___Apple80211ServiceTerminatedCallback_block_invoke;
          v28[1] = &__block_descriptor_tmp_1905;
          v28[2] = a1;
          io_object_t v29 = v10;
          io_object_t v30 = v9;
          dispatch_sync(v15, block);
        }
        else
        {
          if (v13)
          {
            uint64_t v16 = *(void *)(a1 + 1816);
            *(_DWORD *)CFRunLoopTimerContext buf = 136315906;
            __uint64_t v32 = "_Apple80211ServiceTerminatedCallback";
            __int16 v33 = 1024;
            io_object_t v34 = v10;
            __int16 v35 = 2048;
            uint64_t v36 = v16;
            __int16 v37 = 1024;
            LODWORD(v38) = v9;
            _os_log_impl(&dword_210714000, v12, OS_LOG_TYPE_DEFAULT, "%s: [%u] ioucQueue[%p], service:%u, halting ...\n", buf, 0x22u);
          }
          _Apple80211IOUCHalt(a1);
          CFTypeID v17 = *(void (**)(void, uint64_t, void, void, void))(a1 + 1936);
          if (v17) {
            v17(0, a1, 0, 0, *(void *)(a1 + 1944));
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v18 = *(void *)(a1 + 1816);
            *(_DWORD *)CFRunLoopTimerContext buf = 136315906;
            __uint64_t v32 = "_Apple80211ServiceTerminatedCallback";
            __int16 v33 = 1024;
            io_object_t v34 = v10;
            __int16 v35 = 2048;
            uint64_t v36 = v18;
            __int16 v37 = 1024;
            LODWORD(v38) = v9;
            _os_log_impl(&dword_210714000, v12, OS_LOG_TYPE_DEFAULT, "%s: [%u] ioucQueue[%p], service:%u, ... halted\n", buf, 0x22u);
          }
        }
        IOObjectRelease(v9);
        ++v10;
        io_object_t v9 = IOIteratorNext(iterator);
      }
      while (v9);
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136315906;
    __uint64_t v32 = "_Apple80211ServiceTerminatedCallback";
    __int16 v33 = 1024;
    io_object_t v34 = 0;
    __int16 v35 = 2048;
    uint64_t v36 = 0;
    __int16 v37 = 1024;
    LODWORD(v38) = 0;
    _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%s: service:%u opaque:%p, _needSerialization[%u], No opaque, bailing\n", buf, 0x22u);
  }
}

void _serviceMatchingDelayedCallback(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315394;
    io_registry_entry_t v3 = "_serviceMatchingDelayedCallback";
    __int16 v4 = 2048;
    uint64_t v5 = a1;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Enter opaque:%p \n", (uint8_t *)&v2, 0x16u);
  }
  _Apple80211IOUCResume();
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315394;
    io_registry_entry_t v3 = "_serviceMatchingDelayedCallback";
    __int16 v4 = 2048;
    uint64_t v5 = a1;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Exit opaque:%p \n", (uint8_t *)&v2, 0x16u);
  }
}

uint64_t Apple80211BindToInterfaceWithIOCTL(uint64_t a1, __CFString *theString, io_registry_entry_t a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  memset(buffer, 170, sizeof(buffer));
  if (!a1) {
    return 4294963396;
  }
  uint64_t v4 = 4294963396;
  if (!theString || (*(_DWORD *)a1 & 0x80000000) != 0 || !CFStringGetCString(theString, buffer, 16, 0x8000100u)) {
    return v4;
  }
  CFArrayRef theArray = 0;
  if (!_getIfListCopy((int *)a1, &theArray))
  {
    CFArrayRef v7 = theArray;
    v34.length = CFArrayGetCount(theArray);
    v34.location = 0;
    if (CFArrayContainsValue(v7, v34, theString)
      && (_isVirtualInterface(theString, a3) || _isInfraInterface(theString, a3)))
    {
      CFRelease(theArray);
      goto LABEL_10;
    }
    CFRelease(theArray);
    return 4294963396;
  }
LABEL_10:
  long long v16 = 0u;
  long long v17 = 0u;
  __strlcpy_chk();
  __uint64_t v8 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  ioctl(*(_DWORD *)a1, 0xC0206911uLL, &v16);
  unint64_t v9 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v8;
  if (v9 > 0x3B9AC9FF && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136448258;
    uint64_t v20 = "_logTimeIfThresholdExceeded";
    __int16 v21 = 2082;
    unint64_t v22 = (unint64_t)&v16;
    __int16 v23 = 2080;
    unint64_t v24 = (unint64_t)" 'SIOCGIFFLAGS' ";
    __int16 v25 = 1024;
    *(_WORD *)&v26[4] = 1024;
    *(_DWORD *)uint64_t v26 = -1071617775;
    *(_DWORD *)&v26[6] = -1071617775;
    *(_WORD *)CFIndex v27 = 2048;
    *(void *)&v27[2] = v9 / 0x3B9ACA00;
    *(_WORD *)uint64_t v28 = 2048;
    *(void *)&v28[2] = v9 % 0x3B9ACA00 / 0x3E8;
    __int16 v29 = 2048;
    uint64_t v30 = 1;
    __int16 v31 = 2048;
    uint64_t v32 = 0;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
  }
  __strlcpy_chk();
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 103) = 0;
  *(void *)(a1 + 88) = 0;
  __strlcpy_chk();
  uint64_t v15 = a1 + 88;
  LODWORD(v14) = 12;
  DWORD2(v14) = 19;
  uint64_t v4 = ioctl(*(_DWORD *)a1, 0xC02869C9uLL, &v13);
  __uint64_t v10 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = "Apple80211BindToInterfaceWithIOCTL";
    *(_DWORD *)CFRunLoopTimerContext buf = 136448002;
    __int16 v21 = 2048;
    unint64_t v22 = v10 / 0x3B9ACA00;
    __int16 v23 = 2048;
    unint64_t v24 = v10 % 0x3B9ACA00 / 0x3E8;
    __int16 v25 = 2112;
    *(void *)uint64_t v26 = theString;
    *(_WORD *)&v26[8] = 2082;
    *(void *)CFIndex v27 = a1 + 4;
    *(_WORD *)&v27[8] = 1024;
    *(_DWORD *)uint64_t v28 = (__int16)v17;
    *(_WORD *)&uint8_t v28[4] = 1024;
    *(_DWORD *)&v28[6] = v4;
    __int16 v29 = 1024;
    LODWORD(v30) = v4;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%{public}s: @[%llu.%06llu] WARNING: %@ Falling back to IOCTL path, ifname['%{public}s']/0x%08x err %d/0x%08x\n", buf, 0x46u);
  }
  *(unsigned char *)(a1 + 1801) = 0;
  return v4;
}

uint64_t Apple80211DisassociateExt(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  syslog(3, "%s: disassocReason:%p", "Apple80211DisassociateExt", a2);
  if (a2)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"DISASSOC_REASON");
    int valuePtr = 0;
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      syslog(3, "%s: disassocReason:%u", "Apple80211DisassociateExt", valuePtr);
    }
  }
  return Apple80211SetWithIOCTL();
}

uint64_t _openEventSocket()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = socket(32, 3, 1);
  uint64_t v1 = v0;
  if ((v0 & 0x80000000) != 0)
  {
    __error();
  }
  else
  {
    int v4 = 1;
    uint64_t v3 = 0x600000001;
    if (ioctl(v0, 0x800C6502uLL, &v3) && *__error())
    {
      close(v1);
      return 0xFFFFFFFFLL;
    }
  }
  return v1;
}

uint64_t __getNetworkSecurityParams(const __CFDictionary *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"WPA_IE");
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, @"RSN_IE");
  if (!((unint64_t)Value | result))
  {
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a1, @"WEP");
    uint64_t result = (uint64_t)makeBoolRef(v12);
    uint64_t v13 = *MEMORY[0x263EFFB40];
    *(_DWORD *)(a2 + 40) = 0;
    if (result == v13)
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue(a1, @"WEP_AUTH_Flags");
      if (result)
      {
        unsigned int valuePtr = 0;
        uint64_t result = CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr) {
          int v16 = 1;
        }
        else {
          int v16 = 2;
        }
      }
      else
      {
        int v16 = 1;
      }
LABEL_31:
      *(_DWORD *)(a2 + 44) = v16;
      return result;
    }
    goto LABEL_9;
  }
  CFDictionaryRef v8 = (const __CFDictionary *)result;
  *(_DWORD *)(a2 + 44) = 6;
  unsigned int valuePtr = -1431655766;
  if (result)
  {
    unsigned int v26 = 0;
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a1, @"AUTH_SEL_OVERRIDE");
    if (v9)
    {
      uint64_t result = CFNumberGetValue(v9, kCFNumberSInt32Type, &v26);
      if (result)
      {
        signed int v10 = v26 - 1;
        if (v26 - 1 < 0x19 && ((0x18019BFu >> v10) & 1) != 0)
        {
          unsigned int v11 = dword_210754A20[v10];
LABEL_28:
          unsigned int v20 = v11 - 1;
          int v15 = 4;
          switch(v20)
          {
            case 0u:
              goto LABEL_58;
            case 1u:
              int v21 = 8;
              break;
            case 2u:
              int v15 = 128;
              goto LABEL_58;
            case 3u:
              int v21 = 16;
              break;
            case 4u:
              int v15 = 2048;
              goto LABEL_58;
            case 5u:
              int v21 = 1024;
              break;
            case 7u:
              unint64_t v25 = 0xA00001000;
              goto LABEL_45;
            case 8u:
              unint64_t v25 = 0xA00002000;
              goto LABEL_45;
            case 0xBu:
              int v15 = 0x4000;
              goto LABEL_58;
            case 0xCu:
              int v15 = 0x8000;
              goto LABEL_58;
            case 0x17u:
              unint64_t v25 = 0xA00010000;
              goto LABEL_45;
            case 0x18u:
              unint64_t v25 = 0xA00020000;
              goto LABEL_45;
            default:
              goto LABEL_44;
          }
          *(_DWORD *)(a2 + 40) = v21;
          if ((*(unsigned char *)(a3 + 9) & 8) != 0) {
            int v16 = 10;
          }
          else {
            int v16 = 6;
          }
          goto LABEL_31;
        }
      }
    }
    else
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue(v8, @"IE_KEY_RSN_AUTHSELS");
      if (result)
      {
        CFArrayRef v17 = (const __CFArray *)result;
        uint64_t result = CFArrayGetCount((CFArrayRef)result);
        if (result >= 1)
        {
          uint64_t v18 = result;
          for (CFIndex i = 0; i != v18; ++i)
          {
            uint64_t result = (uint64_t)CFArrayGetValueAtIndex(v17, i);
            if (result)
            {
              uint64_t result = CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr);
              if (result)
              {
                if (v26 < valuePtr) {
                  unsigned int v26 = valuePtr;
                }
              }
            }
          }
          unsigned int v11 = v26;
          if (v26) {
            goto LABEL_28;
          }
        }
      }
    }
    goto LABEL_44;
  }
  if (Value)
  {
    unsigned int v26 = 0;
    CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a1, @"AUTH_SEL_OVERRIDE");
    if (v14)
    {
      uint64_t result = CFNumberGetValue(v14, kCFNumberSInt32Type, &v26);
      if (!result) {
        goto LABEL_44;
      }
      int v15 = v26;
      if (v26 - 1 >= 2) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue(Value, @"IE_KEY_WPA_AUTHSELS");
      if (!result) {
        goto LABEL_44;
      }
      CFArrayRef v22 = (const __CFArray *)result;
      uint64_t result = CFArrayGetCount((CFArrayRef)result);
      if (result < 1) {
        goto LABEL_44;
      }
      uint64_t v23 = result;
      for (CFIndex j = 0; j != v23; ++j)
      {
        uint64_t result = (uint64_t)CFArrayGetValueAtIndex(v22, j);
        if (result)
        {
          uint64_t result = CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr);
          if (result)
          {
            if (v26 < valuePtr) {
              unsigned int v26 = valuePtr;
            }
          }
        }
      }
      int v15 = v26;
      if (!v26) {
        goto LABEL_44;
      }
    }
    if (v15 != 1)
    {
      if (v15 == 2)
      {
        *(_DWORD *)(a2 + 40) = 2;
        return result;
      }
      goto LABEL_44;
    }
LABEL_58:
    *(_DWORD *)(a2 + 40) = v15;
LABEL_9:
    *(_DWORD *)(a2 + 44) = 0;
    return result;
  }
LABEL_44:
  unint64_t v25 = 0xFFFFFFFF0000FFFFLL;
LABEL_45:
  *(void *)(a2 + 40) = v25;
  return result;
}

CFDictionaryRef _getMFPCaps(const __CFDictionary *a1, unsigned char *a2, unsigned char *a3)
{
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(a1, @"RSN_IE");
  CFDictionaryRef v7 = result;
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(a1, @"80211W_ENABLED");
    if (result
      && (CFDictionaryRef result = (const __CFDictionary *)CFEqual(result, (CFTypeRef)*MEMORY[0x263EFFB40]), result)
      && (CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v7, @"IE_KEY_RSN_CAPS")) != 0)
    {
      CFDictionaryRef v8 = result;
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(result, @"MFP_REQUIRED");
      if (Value) {
        LOBYTE(v7) = CFBooleanGetValue(Value);
      }
      else {
        LOBYTE(v7) = 0;
      }
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v8, @"MFP_CAPABLE");
      if (result) {
        CFDictionaryRef result = (const __CFDictionary *)CFBooleanGetValue(result);
      }
    }
    else
    {
      LOBYTE(v7) = 0;
    }
  }
  if (a2) {
    *a2 = (_BYTE)result;
  }
  if (a3) {
    *a3 = (_BYTE)v7;
  }
  return result;
}

CFDictionaryRef _getPhyMode(const __CFDictionary *result, void *a2)
{
  if (a2)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"PHY_MODE");
    if (result)
    {
      return (const __CFDictionary *)CFNumberGetValue(result, kCFNumberSInt32Type, a2);
    }
  }
  return result;
}

uint64_t _buildWPAIEForAssocation(CFDictionaryRef theDict, uint64_t a2, __int16 *a3, unsigned char *a4, int a5, int a6)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t result = 4294963396;
  if (!a2 || !a3) {
    return result;
  }
  if (CFDictionaryGetValue(theDict, @"RSN_IE") && (a4[1] & 0x40) != 0)
  {
    int valuePtr = 0;
    __int16 v45 = 0;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"RSN_IE");
    if (!Value) {
      return 4294963396;
    }
    CFDictionaryRef v14 = Value;
    _getMFPCaps(theDict, (unsigned char *)&v45 + 1, &v45);
    *(unsigned char *)a2 = 48;
    *(_WORD *)(a2 + 2) = 1;
    CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v14, @"IE_KEY_RSN_MCIPHER");
    if (!v15 || !CFNumberGetValue(v15, kCFNumberSInt32Type, &valuePtr)) {
      return 4294963396;
    }
    uint64_t result = 4294963396;
    switch(valuePtr)
    {
      case 1:
        if ((*a4 & 1) == 0) {
          return 4294963393;
        }
        int v16 = &_rsnSuitWEP40;
        goto LABEL_32;
      case 2:
        if ((*a4 & 2) == 0) {
          return 4294963393;
        }
        int v16 = &_rsnSuitTKIP;
        goto LABEL_32;
      case 4:
        if ((*a4 & 8) == 0) {
          return 4294963393;
        }
        int v16 = &_rsnSuitCCMP;
        goto LABEL_32;
      case 5:
        if ((*a4 & 1) == 0) {
          return 4294963393;
        }
        int v16 = &_rsnSuitWEP104;
LABEL_32:
        *(_DWORD *)(a2 + 4) = *v16;
        *(_WORD *)(a2 + 8) = 1;
        CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(v14, @"IE_KEY_RSN_UCIPHERS");
        if (!v21) {
          return 4294963396;
        }
        CFArrayRef v22 = v21;
        CFIndex Count = CFArrayGetCount(v21);
        unsigned int v46 = -1431655766;
        if (Count < 1) {
          return 4294963396;
        }
        CFIndex v24 = Count;
        CFIndex v25 = 0;
        unsigned int v26 = 0;
        break;
      case 8:
        uint64_t result = 4294963393;
        if (a6 || (a4[9] & 0x10) == 0) {
          return result;
        }
        int v16 = &_rsnSuitGCMP;
        goto LABEL_32;
      case 9:
        uint64_t result = 4294963393;
        if (a6 || (a4[9] & 0x10) == 0) {
          return result;
        }
        int v16 = &_rsnSuitGCMP256;
        goto LABEL_32;
      default:
        return result;
    }
    while (1)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v22, v25);
      if (!ValueAtIndex || !CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &v46) || v46 <= v26) {
        goto LABEL_46;
      }
      if (v46 - 8 < 2)
      {
        if (a6 || (a4[9] & 0x10) == 0) {
          goto LABEL_46;
        }
      }
      else if (v46 == 4)
      {
        if ((*a4 & 8) == 0) {
          goto LABEL_46;
        }
      }
      else if (v46 != 2 || (*a4 & 2) == 0)
      {
        goto LABEL_46;
      }
      unsigned int v26 = v46;
LABEL_46:
      if (v24 == ++v25)
      {
        unsigned int v28 = v26 - 2;
        if (v26 - 2 > 7) {
          return 4294963396;
        }
        if (((0xC5u >> v28) & 1) == 0) {
          return 4294963396;
        }
        *(_DWORD *)(a2 + 10) = *off_264134E18[v28];
        *(_WORD *)(a2 + 14) = 1;
        int v29 = a5 - 1;
        if ((a5 - 1) > 0x18 || ((0x18219BFu >> v29) & 1) == 0) {
          return 4294963396;
        }
        *(_DWORD *)(a2 + 16) = *(_DWORD *)*(&off_264134E58 + v29);
        if ((a4[6] & 0x10) != 0)
        {
          if (HIBYTE(v45))
          {
            if ((_BYTE)v45) {
              __int16 v30 = 192;
            }
            else {
              __int16 v30 = 128;
            }
          }
          else
          {
            __int16 v30 = (16 * a4[9]) & 0x80;
          }
        }
        else
        {
          __int16 v30 = 0;
        }
        *(_WORD *)(a2 + 20) = v30;
        uint64_t v41 = a2 + 22;
        CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(v14, @"IE_KEY_RSN_BCIPHER");
        if (v42)
        {
          if (!CFNumberGetValue(v42, kCFNumberSInt32Type, &v46)) {
            return 4294963396;
          }
          unsigned int v43 = v46;
          if (v46)
          {
            *(_WORD *)(a2 + 22) = 0;
            switch(v43)
            {
              case 6u:
                int v44 = 111939328;
                goto LABEL_101;
              case 0xBu:
                int v44 = 195825408;
                goto LABEL_101;
              case 0xCu:
                int v44 = 212602624;
                goto LABEL_101;
              case 0xDu:
                int v44 = 229379840;
LABEL_101:
                *(_DWORD *)(a2 + 24) = v44;
                uint64_t v41 = a2 + 28;
                break;
              default:
                uint64_t v41 = a2 + 24;
                syslog(3, "%s: unknown BIP type %d\n", "_buildRSNIE", v43);
                break;
            }
          }
        }
        if (v41 - a2 > 258) {
          return 4294963395;
        }
        uint64_t result = 0;
        *(unsigned char *)(a2 + 1) = v41 - a2 - 2;
        __int16 v40 = (v41 - a2 - 2) + 2;
LABEL_86:
        *a3 = v40;
        return result;
      }
    }
  }
  if (!CFDictionaryGetValue(theDict, @"WPA_IE")) {
    return 4294963396;
  }
  if ((a4[1] & 0x20) == 0) {
    return 4294963396;
  }
  int valuePtr = 0;
  CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"WPA_IE");
  if (!v17) {
    return 4294963396;
  }
  CFDictionaryRef v18 = v17;
  *(unsigned char *)a2 = -35;
  *(_WORD *)(a2 + 2) = 20480;
  *(_DWORD *)(a2 + 4) = 66034;
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v17, @"IE_KEY_WPA_MCIPHER");
  if (!v19 || !CFNumberGetValue(v19, kCFNumberSInt32Type, &valuePtr)) {
    return 4294963396;
  }
  uint64_t result = 4294963396;
  switch(valuePtr)
  {
    case 1:
      if ((*a4 & 1) == 0) {
        return 4294963393;
      }
      unsigned int v20 = &_wpaSuitWEP40;
      goto LABEL_64;
    case 2:
      if ((*a4 & 2) == 0) {
        return 4294963393;
      }
      unsigned int v20 = &_wpaSuitTKIP;
      goto LABEL_64;
    case 4:
      if ((*a4 & 8) == 0) {
        return 4294963393;
      }
      unsigned int v20 = &_wpaSuitCCMP;
      goto LABEL_64;
    case 5:
      if ((*a4 & 1) == 0) {
        return 4294963393;
      }
      unsigned int v20 = &_wpaSuitWEP104;
LABEL_64:
      *(_DWORD *)(a2 + 8) = *v20;
      *(_WORD *)(a2 + 12) = 1;
      CFArrayRef v31 = (const __CFArray *)CFDictionaryGetValue(v18, @"IE_KEY_WPA_UCIPHERS");
      if (!v31) {
        return 4294963396;
      }
      CFArrayRef v32 = v31;
      CFIndex v33 = CFArrayGetCount(v31);
      unsigned int v46 = -1431655766;
      if (v33 < 1) {
        return 4294963396;
      }
      CFIndex v34 = v33;
      CFIndex v35 = 0;
      unsigned int v36 = 0;
      break;
    default:
      return result;
  }
  do
  {
    CFNumberRef v37 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, v35);
    if (v37 && CFNumberGetValue(v37, kCFNumberSInt32Type, &v46) && v46 > v36)
    {
      if (v46 == 4)
      {
        if ((*a4 & 8) == 0) {
          goto LABEL_76;
        }
LABEL_75:
        unsigned int v36 = v46;
        goto LABEL_76;
      }
      if (v46 == 2 && (*a4 & 2) != 0) {
        goto LABEL_75;
      }
    }
LABEL_76:
    ++v35;
  }
  while (v34 != v35);
  if (v36 == 2)
  {
    uint64_t v38 = &_wpaSuitTKIP;
LABEL_81:
    *(_DWORD *)(a2 + 14) = *v38;
    *(_WORD *)(a2 + 18) = 1;
    if (a5 == 1)
    {
      __int16 v39 = &_wpaAuth8021xUnspec;
    }
    else
    {
      if (a5 != 2) {
        return 4294963396;
      }
      __int16 v39 = &_wpaAuthPSK;
    }
    uint64_t result = 0;
    *(_DWORD *)(a2 + 20) = *v39;
    *(unsigned char *)(a2 + 1) = 22;
    __int16 v40 = 24;
    goto LABEL_86;
  }
  if (v36 == 4)
  {
    uint64_t v38 = &_wpaSuitCCMP;
    goto LABEL_81;
  }
  return 4294963396;
}

uint64_t _waitForJoinResult(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294963396;
  }
  uint64_t v6 = 0;
  long long v4 = 0u;
  long long v5 = 0u;
  __strlcpy_chk();
  LODWORD(v5) = 21;
  int v2 = 400;
  while (1)
  {
    usleep(0x4E20u);
    if (Apple80211RawGet(a1, (uint64_t)&v4)) {
      break;
    }
    if (DWORD1(v5)) {
      return _errorForAssociateResult(SDWORD1(v5));
    }
    *(void *)((char *)&v5 + 4) = 0;
    if (!--v2) {
      return 4294963391;
    }
  }
  return *__error();
}

uint64_t _joinWEPNetwork(uint64_t a1, uint64_t a2, char *__s, char a4, int a5)
{
  uint64_t v8 = *(void *)(a2 + 32);
  if (a4) {
    int v9 = 1;
  }
  else {
    int v9 = 2;
  }
  uint64_t result = _parsePassword(__s, v9, v8 + 76, 0, (a4 & 2) == 0);
  if (!result)
  {
    if ((a4 & 4) != 0) {
      int v11 = 1;
    }
    else {
      int v11 = 2;
    }
    *(_DWORD *)(v8 + 8) = v11;
    if (a4) {
      int v12 = 5;
    }
    else {
      int v12 = 13;
    }
    *(_DWORD *)(v8 + 64) = v12;
    *(_DWORD *)(v8 + 68) = v9;
    *(_WORD *)(v8 + 72) = 15;
    if (Apple80211RawSet()) {
      return 4294963394;
    }
    if (a5) {
      return 0;
    }
    if (*(void *)(a1 + 56) && (*(unsigned char *)(a1 + 21) & 1) != 0 && (*(unsigned char *)(a1 + 93) & 0x40) != 0)
    {
      CFRunLoopRunInMode((CFRunLoopMode)*MEMORY[0x263EFFE88], 10.0, 0);
      return 0;
    }
    return _waitForJoinResult(a1);
  }
  return result;
}

uint64_t _initiateAutoWEPSequence(uint64_t a1, uint64_t a2, char *__s, _DWORD *a4, int *a5, int a6)
{
  uint64_t v6 = 4294967196;
  switch(*a4)
  {
    case 0:
    case 1:
      if (_wepPasswordIs104BitHex((uint64_t)__s))
      {
        *a5 = 0;
        uint64_t v6 = _joinWEPNetwork(a1, a2, __s, 0, a6);
        if ((v6 + 3912) > 7) {
          return v6;
        }
        int v13 = 1 << (v6 + 72);
      }
      else
      {
        if (!_wepPasswordIs40BitHex((uint64_t)__s))
        {
          *a4 = 2;
          goto LABEL_11;
        }
        *a5 = 1;
        uint64_t v6 = _joinWEPNetwork(a1, a2, __s, 1, a6);
        if ((v6 + 3912) > 7) {
          return v6;
        }
        int v13 = 1 << (v6 + 72);
      }
      if ((v13 & 0x85) == 0) {
        return v6;
      }
      goto LABEL_11;
    case 2:
LABEL_11:
      *a5 = 2;
      uint64_t v15 = _joinWEPNetwork(a1, a2, __s, 2, a6);
      int v14 = v15;
      if (a6) {
        return v15;
      }
      if ((v15 + 3912) > 7 || ((1 << (v15 + 72)) & 0x85) == 0) {
        return v15;
      }
      *a5 = 3;
      uint64_t v6 = _joinWEPNetwork(a1, a2, __s, 3, 0);
LABEL_19:
      if ((v6 + 3912) > 7 || ((1 << (v6 + 72)) & 0x85) == 0) {
        return v6;
      }
      if (v6 == -3910 && v14 == -3910)
      {
        uint64_t v6 = 4294963386;
      }
      else
      {
        if (v6 != -3905 || v14 != -3905) {
          return v6;
        }
        uint64_t v6 = 4294963391;
      }
LABEL_27:
      if (!_wepPasswordIs104BitHex((uint64_t)__s))
      {
        if (_wepPasswordIs40BitHex((uint64_t)__s))
        {
          int v18 = 5;
          goto LABEL_31;
        }
        return v6;
      }
      int v18 = 4;
LABEL_31:
      *a5 = v18;
      return _joinWEPNetwork(a1, a2, __s, v18, a6);
    case 3:
      *a5 = 3;
      uint64_t v6 = _joinWEPNetwork(a1, a2, __s, 3, a6);
      if (a6) {
        return v6;
      }
      int v14 = -100;
      goto LABEL_19;
    case 4:
      goto LABEL_27;
    default:
      return v6;
  }
}

uint64_t _startAPMode(uint64_t a1, const __CFDictionary *a2, int a3)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  bzero(&v65, 0x6DCuLL);
  int v64 = 1;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"AP_MODE_AUTH_LOWER");
  if (!Value) {
    return 4294963396;
  }
  CFNumberRef v87 = (int *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v86 = v7;
  long long v85 = v7;
  *(_OWORD *)__s = v7;
  long long v57 = v7;
  long long v58 = v7;
  long long v59 = v7;
  long long v60 = v7;
  long long v61 = v7;
  long long v62 = v7;
  long long v63 = v7;
  if (!CFNumberGetValue(Value, kCFNumberSInt16Type, v67)) {
    return 4294963396;
  }
  CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(a2, @"AP_MODE_AUTH_UPPER");
  if (v8)
  {
    if (!CFNumberGetValue(v8, kCFNumberSInt16Type, &v67[4])) {
      return 4294963396;
    }
  }
  int v9 = CFDictionaryGetValue(a2, @"AP_MODE_MOVETOIOS_MIGRATION");
  signed int v10 = (const void *)*MEMORY[0x263EFFB40];
  if (v9 && v9 == v10) {
    char v66 = 1;
  }
  *(_DWORD *)&v67[8] = 1;
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a2, @"CHANNEL");
  if (!v11 || !CFNumberGetValue(v11, kCFNumberSInt32Type, &v68)) {
    return 4294963396;
  }
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a2, @"CHANNEL_FLAGS");
  if (!v12 || !CFNumberGetValue(v12, kCFNumberSInt32Type, &v69))
  {
    if (v68 >= 0xF) {
      int v13 = 1040;
    }
    else {
      int v13 = 10;
    }
    v69 |= v13;
  }
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a2, @"AP_MODE_CYPHER_TYPE");
  if (!v14 || !CFNumberGetValue(v14, kCFNumberSInt32Type, (char *)&v72 + 4)) {
    return 4294963396;
  }
  CFDataRef v15 = (const __CFData *)CFDictionaryGetValue(a2, @"AP_MODE_SSID_BYTES");
  if (v15)
  {
    CFDataRef v16 = v15;
    CFIndex Length = CFDataGetLength(v15);
    if ((unint64_t)(Length - 33) < 0xFFFFFFFFFFFFFFE0) {
      return 4294963396;
    }
    unsigned int v70 = Length;
    CFDataGetBytePtr(v16);
  }
  else
  {
    CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(a2, @"SSID");
    if (!v18) {
      return 4294963396;
    }
    char buffer[32] = -86;
    *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)buffer = v19;
    *(_OWORD *)&char buffer[16] = v19;
    if (!CFStringGetCString(v18, buffer, 33, 0x8000100u)) {
      return 4294963396;
    }
    unsigned int v70 = strlen(buffer);
  }
  __memcpy_chk();
  if (HIDWORD(v72))
  {
    CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(a2, @"AP_MODE_KEY");
    if (!v21) {
      return 4294963396;
    }
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    *(_OWORD *)__s = 0u;
    long long v57 = 0u;
    if (!CFStringGetCString(v21, __s, 128, 0x8000100u)) {
      return 4294963396;
    }
    int v22 = *(_DWORD *)&v67[4];
    if ((*(_WORD *)&v67[4] & 0x1000) != 0)
    {
      if ((*(unsigned char *)(a1 + 97) & 8) != 0)
      {
        HIDWORD(v72) = 10;
      }
      else
      {
        *(_DWORD *)&v67[4] &= ~0x1000u;
        if ((v22 & 0xFFFFEFFF) == 0)
        {
          syslog(3, "%s: SAE-only mode but device not supporting SAE", "_startAPMode");
          return 4294963393;
        }
      }
    }
  }
  if (!v70)
  {
    CFNumberRef v87 = 0;
    long long v86 = 0u;
    long long v85 = 0u;
    __strlcpy_chk();
    *(void *)&long long v86 = 0x200000019;
    if (Apple80211RawSet())
    {
      if (*__error() == 6) {
        return 4294963393;
      }
      if (*__error() != 22) {
        return *__error();
      }
    }
    return 4294963396;
  }
  uint64_t v23 = 4294963393;
  switch(HIDWORD(v72))
  {
    case 0:
      goto LABEL_51;
    case 1:
    case 2:
      uint64_t v24 = _parsePassword(__s, SHIDWORD(v72), (uint64_t)v74, 0, 0);
      if (v24) {
        return v24;
      }
      if (HIDWORD(v72) == 2) {
        int v25 = 13;
      }
      else {
        int v25 = 5;
      }
      LODWORD(v72) = v25;
      __int16 v73 = 15;
      goto LABEL_51;
    case 3:
    case 5:
      uint64_t v24 = _parsePassword(__s, SHIDWORD(v72), (uint64_t)v74, v71, 0);
      if (v24) {
        return v24;
      }
      LODWORD(v72) = 32;
      goto LABEL_51;
    case 6:
      uint64_t v24 = Apple80211ParseWPAPassword(__s, v74, v20, 0, v71, v70);
      if (v24) {
        return v24;
      }
      uint64_t v72 = 0x600000020;
      goto LABEL_51;
    case 0xA:
      HIDWORD(v72) = 10;
      size_t v26 = strlen(__s);
      int v27 = v26;
      if (v26 - 64 <= 0xFFFFFFFFFFFFFFC7)
      {
        syslog(3, "%s: invalid key length %zd\n", "_startAPMode", v26);
        return 4294963396;
      }
      __strlcpy_chk();
      LODWORD(v72) = v27;
LABEL_51:
      if (a3 == 24)
      {
        __int16 v65 = 1;
        if ((v67[4] & 8) != 0)
        {
          uint64_t v24 = Apple80211ParseWPAPassword(__s, v74, v20, 0, v71, v70);
          if (v24) {
            return v24;
          }
          uint64_t v72 = 0x600000020;
          uint64_t v76 = 0x4AC0F0000011430;
          char v77 = 1;
          int v78 = 78384896;
          char v79 = 1;
          int v80 = 44830464;
          __int16 v81 = 8;
        }
      }
      else
      {
        __int16 v65 = 2;
        unsigned int v28 = CFDictionaryGetValue(a2, @"AP_MODE_FORCE_BI_100");
        if (v28 && v28 == v10) {
          v65 |= 0x100u;
        }
        int v29 = CFDictionaryGetValue(a2, @"SOFTAP_SOFTAP_HIDDEN_NETWORK");
        if (v29 && v29 == v10) {
          v65 |= 0x200u;
        }
      }
      CFDataRef v30 = (const __CFData *)CFDictionaryGetValue(a2, @"AP_MODE_IE_LIST");
      if (v30)
      {
        CFDataRef v31 = v30;
        unsigned int v32 = CFDataGetLength(v30);
        int v82 = v32;
        if (v32 > 0x400) {
          return 4294963396;
        }
        v99.length = v32;
        v99.location = 0;
        CFDataGetBytes(v31, v99, (UInt8 *)&v83);
      }
      CFIndex v33 = CFDictionaryGetValue(a2, @"AP_MODE_CARPLAY");
      if (v33 && v33 == v10)
      {
        if (v82) {
          return 4294963396;
        }
        __int16 v84 = 0x2000;
        uint64_t v83 = 0x2000040A00008DDLL;
        int v82 = 10;
      }
      CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(a2, @"AP_MODE_PHY_MODE");
      if (!v34 || !CFNumberGetValue(v34, kCFNumberSInt32Type, &v75)) {
        int v75 = 1;
      }
      CFNumberRef v87 = 0;
      long long v86 = 0u;
      long long v85 = 0u;
      __strlcpy_chk();
      LODWORD(v86) = a3;
      *(void *)((char *)&v86 + 4) = 0x6E000000001;
      CFNumberRef v87 = &v64;
      if (!Apple80211RawSet()) {
        goto LABEL_76;
      }
      if (*__error() == 6) {
        return v23;
      }
      if (*__error() == 22) {
        return 4294963396;
      }
      uint64_t v23 = *__error();
      if (v23) {
        return v23;
      }
LABEL_76:
      if ((*(_WORD *)&v67[4] & 0x140A) == 0 || (*(unsigned char *)(a1 + 95) & 0x20) != 0) {
        return 0;
      }
      char v96 = -86;
      *(void *)&long long v35 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v95[0] = v35;
      v95[1] = v35;
      int valuePtr = 0;
      v94[14] = v35;
      v94[15] = v35;
      v94[12] = v35;
      v94[13] = v35;
      v94[10] = v35;
      v94[11] = v35;
      v94[8] = v35;
      v94[9] = v35;
      v94[6] = v35;
      v94[7] = v35;
      v94[4] = v35;
      v94[5] = v35;
      v94[2] = v35;
      v94[3] = v35;
      v94[0] = v35;
      v94[1] = v35;
      CFNumberRef v93 = 0;
      long long v91 = 0u;
      long long v92 = 0u;
      memset(v90, 0, 19);
      uint64_t v36 = v70;
      __memcpy_chk();
      *((unsigned char *)v95 + v36) = 0;
      if (v68 >= 0xF) {
        CFNumberRef v37 = "a";
      }
      else {
        CFNumberRef v37 = "g";
      }
      __strlcpy_chk();
      CFNumberRef v93 = v90;
      LODWORD(v92) = 12;
      DWORD2(v92) = 19;
      if (Apple80211RawGet(a1, (uint64_t)&v91))
      {
        uint64_t v23 = *__error();
        if (!v23) {
          return v23;
        }
      }
      else
      {
        if ((*(_WORD *)&v67[4] & 0x408) != 0) {
          int v38 = (*(_DWORD *)&v67[4] >> 1) & 1 | 2;
        }
        else {
          int v38 = (*(_DWORD *)&v67[4] >> 1) & 1;
        }
        if ((*(_WORD *)&v67[4] & 0x40A) != 0) {
          __int16 v39 = "WPA-PSK";
        }
        else {
          __int16 v39 = " ";
        }
        if ((*(_WORD *)&v67[4] & 0x1000) != 0)
        {
          if ((v67[4] & 8) != 0) {
            int v40 = 1;
          }
          else {
            int v40 = 2;
          }
          if ((v67[4] & 8) != 0) {
            __int16 v39 = "WPA-PSK WPA3-SAE";
          }
          else {
            __int16 v39 = "WPA3-SAE";
          }
          int v54 = (v90[12] >> 3) & 1;
          int v38 = (*(_DWORD *)&v67[4] >> 1) & 1 | 2;
        }
        else
        {
          int v54 = 0;
          int v40 = (*(_DWORD *)&v67[4] >> 10) & 1;
        }
        unsigned int v41 = v90[2];
        CFStringRef v42 = (const __CFString *)CFDictionaryGetValue(a2, @"AP_MODE_KEY");
        if (v42)
        {
          CFStringRef v43 = v42;
          int v53 = v40;
          CFIndex v44 = CFStringGetLength(v42);
          uint64_t v23 = 4294963396;
          if (v44 && v44 <= 255 && CFStringGetCString(v43, (char *)v94, 256, 0x8000100u))
          {
            __int16 v45 = "CCMP";
            if ((*(_WORD *)&v67[4] & 0x1008) == 0) {
              __int16 v45 = "TKIP";
            }
            if ((~*(_DWORD *)&v67[4] & 0xA) != 0) {
              unsigned int v46 = v45;
            }
            else {
              unsigned int v46 = "TKIP CCMP";
            }
            CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(a2, @"AP_MODE_TRANS_DISABLED_FLAGS");
            if (v47)
            {
              CFNumberGetValue(v47, kCFNumberSInt32Type, &valuePtr);
              int v48 = valuePtr;
            }
            else
            {
              int v48 = 0;
            }
            memset(buffer, 170, 0x400uLL);
            if (snprintf(buffer, 0x400uLL, "interface=%s\nssid=%s\nhw_mode=%s\nchannel=%u\nmacaddr_acl=0\nauth_algs=1\nwme_enabled=%u\neapol_key_index_workaround=0\nown_ip_addr=127.0.0.1\nwpa=%u\nwpa_passphrase=%s\nwpa_key_mgmt=%s\nwpa_pairwise=%s\nwpa_group_rekey=3600\nieee80211w=%u\nh2e=%u\ntsn_disabled_flags=%u\n",
                                 "ap1",
                                 (const char *)v95,
                                 v37,
                                 v68,
                                 (v41 >> 1) & 1,
                                 v38,
                                 (const char *)v94,
                                 v39,
                                 v46,
                                 v53,
                                 v54,
                                 v48) <= 0x3FF)
            {
              __int16 v49 = fopen("/var/run/hostapd.conf", "w");
              fputs(buffer, v49);
              fclose(v49);
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                int v89 = "_startHostAPD";
                _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s Trying to launch hostapd process\n", buf, 0xCu);
              }
              mach_service = xpc_connection_create_mach_service("com.apple.wifi.hostapd", 0, 2uLL);
              *(void *)(a1 + 2056) = mach_service;
              if (mach_service)
              {
                xpc_connection_set_event_handler(mach_service, &__block_literal_global_422);
                xpc_connection_activate(*(xpc_connection_t *)(a1 + 2056));
                xpc_object_t v51 = xpc_dictionary_create(0, 0, 0);
                xpc_connection_send_message_with_reply(*(xpc_connection_t *)(a1 + 2056), v51, 0, &__block_literal_global_425);
                xpc_release(v51);
                return 0;
              }
              syslog(3, "%s: failed to start hostapd\n", "_startHostAPD");
              uint64_t v23 = 4294963367;
            }
            else
            {
              uint64_t v23 = 4294963394;
            }
          }
        }
        else
        {
          uint64_t v23 = 4294963396;
        }
      }
      CFNumberRef v87 = 0;
      long long v85 = 0u;
      long long v86 = 0u;
      __strlcpy_chk();
      *(void *)&long long v86 = 0x200000019;
      Apple80211RawSet();
      break;
    default:
      return v23;
  }
  return v23;
}

uint64_t _parsePassword(char *__s, int a2, uint64_t a3, char *a4, int a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t result = 4294963396;
  if (!__s || !a3) {
    return result;
  }
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if ((a2 - 1) > 1)
  {
    if (a2 != 3) {
      return 4294963393;
    }
    if (a4)
    {
      size_t v18 = strlen(a4);
      return Apple80211ParseWPAPassword(__s, (unsigned char *)a3, v17, 0, a4, v18);
    }
    return result;
  }
  size_t v10 = strlen(__s);
  if (!v10) {
    return 4294967196;
  }
  unint64_t v11 = v10;
  if (a2 == 2) {
    size_t v12 = 13;
  }
  else {
    size_t v12 = 5;
  }
  if (a5 && v10 == v12)
  {
    int v13 = (void *)a3;
    CFNumberRef v14 = __s;
    size_t v15 = v11;
LABEL_11:
    memcpy(v13, v14, v15);
    return 0;
  }
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v19 = 10;
  if (a2 == 2) {
    uint64_t v19 = 26;
  }
  if (v10 == v19 && strspn(__s, "0123456789abcdefABCDEF") == v10)
  {
    if (v11 == 10) {
      uint64_t v20 = 5;
    }
    else {
      uint64_t v20 = 13;
    }
    CFStringRef v21 = __s;
    uint64_t v22 = v11;
    goto LABEL_52;
  }
  uint64_t v23 = 7;
  if (a2 == 2) {
    uint64_t v23 = 15;
  }
  if (v11 == v23 && *__s == 34 && __s[v11 - 1] == 34)
  {
    CFNumberRef v14 = __s + 1;
    size_t v15 = v11 - 2;
    int v13 = (void *)a3;
    goto LABEL_11;
  }
  uint64_t v24 = 11;
  if (a2 == 2) {
    uint64_t v24 = 27;
  }
  if (v11 == v24 && *__s == 36)
  {
    size_t v25 = strspn(__s + 1, "0123456789abcdefABCDEF");
    uint64_t v22 = v11 - 1;
    if (v25 == v11 - 1)
    {
      if (v11 == 11) {
        uint64_t v20 = 5;
      }
      else {
        uint64_t v20 = 13;
      }
      CFStringRef v21 = __s + 1;
      goto LABEL_52;
    }
  }
  uint64_t v26 = 12;
  if (a2 == 2) {
    uint64_t v26 = 28;
  }
  if (v11 != v26
    || *__s != 48
    || (__s[1] | 0x20) != 0x78
    || (size_t v27 = strspn(__s + 2, "0123456789abcdefABCDEF"), v27 != v11 - 2))
  {
    if (!a5)
    {
      strcpy(__source, "\x16\xEB\xAD\x57\x0F\xF4\xE3\xDE\x7Dtr\xE8\xD2\xAB\xA6\xA7");
      memset(md, 170, sizeof(md));
      if (v11 <= 0x3A)
      {
        size_t v29 = v11 + 17;
        CFDataRef v30 = (char *)malloc_type_malloc(v29, 0x94D1A2E2uLL);
        if (v30)
        {
          CFDataRef v31 = v30;
          *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&c.data[13] = v32;
          *(_OWORD *)&c.data[6] = v32;
          *(_OWORD *)&c.data[10] = v32;
          *(_OWORD *)&c.Nl = v32;
          *(_OWORD *)&c.data[2] = v32;
          *(_OWORD *)&c.A = v32;
          strlcpy(v30, __s, v29);
          strlcat(v31, __source, v29);
          CC_MD5_Init(&c);
          CC_LONG v33 = strlen(v31);
          CC_MD5_Update(&c, v31, v33);
          CC_MD5_Final(md, &c);
          memset(&c, 0, sizeof(c));
          CC_MD5_Update(&c, md, 0x10u);
          CC_MD5_Final(md, &c);
          memset(&c, 0, sizeof(c));
          CC_MD5_Update(&c, md, 0x10u);
          CC_MD5_Final(md, &c);
          memcpy((void *)a3, md, v12);
          bzero(v31, v29);
          free(v31);
          return 0;
        }
      }
    }
    return 4294967196;
  }
  uint64_t v22 = v27;
  if (v11 == 12) {
    uint64_t v20 = 5;
  }
  else {
    uint64_t v20 = 13;
  }
  CFStringRef v21 = __s + 2;
LABEL_52:
  int v28 = _ParseHexEncodedData(v21, v22, v20, (unsigned char *)a3, &v34);
  uint64_t result = 4294967196;
  if (v28 && v34 == v20) {
    return 0;
  }
  return result;
}

uint64_t _wepPasswordIs104BitHex(uint64_t a1)
{
  int64_t v2 = strlen((const char *)a1);
  if (v2 <= 25)
  {
    if (v2 == 13 || v2 == 15 && *(unsigned char *)a1 == 34 && *(unsigned char *)(a1 + 14) == 34) {
      return 1;
    }
  }
  else
  {
    switch(v2)
    {
      case 28:
        if (*(unsigned char *)a1 != 48 || (*(unsigned __int8 *)(a1 + 1) | 0x20) != 0x78) {
          return 0;
        }
        uint64_t v3 = (const char *)(a1 + 2);
        break;
      case 27:
        if (*(unsigned char *)a1 != 36) {
          return 0;
        }
        uint64_t v3 = (const char *)(a1 + 1);
        break;
      case 26:
        uint64_t v3 = (const char *)a1;
        break;
      default:
        return 0;
    }
    if (strspn(v3, "0123456789abcdefABCDEF") == 26) {
      return 1;
    }
  }
  return 0;
}

BOOL _wepPasswordIs40BitHex(uint64_t a1)
{
  size_t v2 = strlen((const char *)a1) - 5;
  BOOL result = 1;
  switch(v2)
  {
    case 0uLL:
      return result;
    case 2uLL:
      if (*(unsigned char *)a1 != 34 || *(unsigned char *)(a1 + 6) != 34) {
        return 0;
      }
      return result;
    case 5uLL:
      long long v4 = (const char *)a1;
      return strspn(v4, "0123456789abcdefABCDEF") == 10;
    case 6uLL:
      if (*(unsigned char *)a1 != 36) {
        return 0;
      }
      long long v4 = (const char *)(a1 + 1);
      break;
    case 7uLL:
      if (*(unsigned char *)a1 != 48 || (*(unsigned __int8 *)(a1 + 1) | 0x20) != 0x78) {
        return 0;
      }
      long long v4 = (const char *)(a1 + 2);
      break;
    default:
      return 0;
  }
  return strspn(v4, "0123456789abcdefABCDEF") == 10;
}

uint64_t _compareQueries(const __CFNumber *a1, const __CFNumber *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unsigned __int16 valuePtr = -21846;
  unsigned __int16 v4 = -21846;
  if (!CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr)) {
    return 1;
  }
  if (!CFNumberGetValue(a2, kCFNumberSInt16Type, &v4)) {
    return -1;
  }
  if (valuePtr <= v4) {
    return 0;
  }
  return -1;
}

uint64_t _dispatchLeakyStatsEvent(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 4294963396;
  }
  uint64_t v4 = 4294963396;
  if (a2 && a3 == 120)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFMutableDictionaryRef v7 = Mutable;
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)a2);
      if (!v9)
      {
        uint64_t v4 = 4294963395;
LABEL_20:
        CFRelease(v7);
        return v4;
      }
      CFDataRef v10 = v9;
      CFDictionaryAddValue(v7, @"LEAKY_AP_STATS_VER", v9);
      CFStringRef v11 = CFStringCreateWithBytes(v8, (const UInt8 *)(a2 + 8), *(unsigned int *)(a2 + 4), 0x8000100u, 0);
      if (!v11)
      {
        uint64_t v4 = 4294963395;
        CFDataRef v15 = v10;
LABEL_19:
        CFRelease(v15);
        goto LABEL_20;
      }
      CFStringRef v12 = v11;
      CFDictionaryAddValue(v7, @"LEAKY_AP_SSID", v11);
      int v13 = ether_ntoa((const ether_addr *)(a2 + 40));
      if (v13)
      {
        CFStringRef v14 = CFStringCreateWithCString(v8, v13, 0x8000100u);
        if (v14)
        {
          CFDictionaryAddValue(v7, @"LEAKY_AP_BSSID", v14);
          CFDataRef v15 = CFDataCreate(v8, (const UInt8 *)(a2 + 48), 72);
          if (v15)
          {
            CFDictionaryAddValue(v7, @"LEAKY_AP_LEARNED_DATA", v15);
            (*(void (**)(void, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, void))(a1 + 72))(0, a1, 81, v7, 8, *(void *)(a1 + 80));
            uint64_t v4 = 0;
            goto LABEL_16;
          }
        }
        else
        {
          CFDataRef v15 = 0;
        }
      }
      else
      {
        CFDataRef v15 = 0;
        CFStringRef v14 = 0;
      }
      uint64_t v4 = 4294963395;
LABEL_16:
      CFRelease(v10);
      CFRelease(v12);
      if (v14) {
        CFRelease(v14);
      }
      if (!v15) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    return 4294963395;
  }
  return v4;
}

void _dispatchBGScanNetworkDiscoveredEvent(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    if (a3 < 8) {
      return;
    }
    if (56 * *(unsigned int *)(a2 + 4) + 8 != a3) {
      return;
    }
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    if (!Mutable) {
      return;
    }
    CFMutableDictionaryRef v7 = Mutable;
    if (*(int *)(a2 + 4) >= 1)
    {
      uint64_t v22 = a1;
      uint64_t v8 = 0;
      CFNumberRef v9 = (const ether_addr *)(a2 + 48);
      while (1)
      {
        CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (!v10) {
          goto LABEL_35;
        }
        CFStringRef v11 = v10;
        CFIndex v12 = *(unsigned int *)v9[-6].octet;
        if (v12 && v9[-6].octet[4])
        {
          CFStringRef v13 = CFStringCreateWithBytes(v5, &v9[-6].octet[4], v12, 0x8000100u, 0);
          CFDataRef v14 = CFDataCreate(v5, &v9[-6].octet[4], *(unsigned int *)v9[-6].octet);
        }
        else
        {
          CFStringRef v13 = 0;
          CFDataRef v14 = 0;
        }
        CFDataRef v15 = ether_ntoa(v9);
        if (v15)
        {
          CFStringRef v16 = CFStringCreateWithCString(v5, v15, 0x8000100u);
          if (v16)
          {
            CFNumberRef v17 = CFNumberCreate(v5, kCFNumberSInt16Type, &v9[1].octet[2]);
            if (v17)
            {
              CFNumberRef v18 = v17;
              CFDictionarySetValue(v11, @"RSSI", v17);
              CFRelease(v18);
              CFNumberRef v19 = CFNumberCreate(v5, kCFNumberSInt32Type, &v9[2]);
              if (v19)
              {
                CFNumberRef v20 = v19;
                CFDictionarySetValue(v11, @"AGE", v19);
                CFRelease(v20);
                CFDictionarySetValue(v11, @"BSSID", v16);
                if (v14) {
                  CFDictionarySetValue(v11, @"SSID", v14);
                }
                if (v13) {
                  CFDictionarySetValue(v11, @"SSID_STR", v13);
                }
                CFArrayAppendValue(v7, v11);
              }
            }
            char v21 = 1;
          }
          else
          {
            char v21 = 0;
          }
        }
        else
        {
          char v21 = 0;
          CFStringRef v16 = 0;
        }
        CFRelease(v11);
        if (v14) {
          CFRelease(v14);
        }
        if (v16) {
          CFRelease(v16);
        }
        if (v13) {
          CFRelease(v13);
        }
        if ((v21 & 1) == 0) {
          goto LABEL_35;
        }
        ++v8;
        CFNumberRef v9 = (const ether_addr *)((char *)v9 + 56);
        if (v8 >= *(int *)(a2 + 4))
        {
          a1 = v22;
          break;
        }
      }
    }
  }
  else
  {
    CFMutableDictionaryRef v7 = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t, __CFArray *, uint64_t, void))(a1 + 72))(0, a1, 31, v7, 8, *(void *)(a1 + 80));
LABEL_35:
  if (v7)
  {
    CFRelease(v7);
  }
}

void _dispatchSIBEvent(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  int valuePtr = 0;
  uint64_t v88 = 0;
  if (a2)
  {
    if (a3 == 176)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        uint64_t v6 = Mutable;
        CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (v7)
        {
          uint64_t v8 = v7;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
          {
            int v84 = *a2;
            *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
            long long v91 = "_dispatchSIBEvent";
            __int16 v92 = 1024;
            int v93 = v84;
            _os_log_debug_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%s: processing SIB event of type: %d\n", buf, 0x12u);
          }
          int v9 = *a2;
          switch(*a2)
          {
            case 1:
              int valuePtr = 11;
              goto LABEL_19;
            case 2:
              int valuePtr = 12;
              CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
              if (!v11) {
                goto LABEL_63;
              }
              CFNumberRef v12 = v11;
              uint64_t v88 = a2[1];
              CFNumberRef v13 = CFNumberCreate(v10, kCFNumberLongLongType, &v88);
              if (!v13) {
                goto LABEL_62;
              }
              CFNumberRef v14 = v13;
              CFDictionarySetValue(v8, @"BSP_CoexMode", v13);
              CFRelease(v14);
              uint64_t v88 = a2[3];
              CFNumberRef v15 = CFNumberCreate(v10, kCFNumberLongLongType, &v88);
              if (!v15) {
                goto LABEL_62;
              }
              CFNumberRef v16 = v15;
              CFDictionarySetValue(v8, @"BSP_BTSubband", v15);
              CFRelease(v16);
              uint64_t v88 = a2[4];
              CFNumberRef v17 = CFNumberCreate(v10, kCFNumberLongLongType, &v88);
              if (!v17) {
                goto LABEL_62;
              }
              CFNumberRef v18 = v17;
              CFDictionarySetValue(v8, @"BSP_SuccessCount", v17);
              CFRelease(v18);
              uint64_t v88 = a2[6];
              CFNumberRef v19 = CFNumberCreate(v10, kCFNumberLongLongType, &v88);
              if (!v19) {
                goto LABEL_62;
              }
              CFNumberRef v20 = v19;
              CFDictionarySetValue(v8, @"BSP_RejectCount", v19);
              CFRelease(v20);
              uint64_t v88 = a2[5];
              CFNumberRef v21 = CFNumberCreate(v10, kCFNumberLongLongType, &v88);
              if (!v21) {
                goto LABEL_62;
              }
              CFNumberRef v22 = v21;
              CFDictionarySetValue(v8, @"BSP_FailCount", v21);
              CFRelease(v22);
              uint64_t v88 = a2[2];
              CFAllocatorRef v23 = v10;
              goto LABEL_43;
            case 3:
              int valuePtr = 13;
LABEL_19:
              CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFNumberRef v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
              if (!v25) {
                goto LABEL_63;
              }
              CFNumberRef v12 = v25;
              uint64_t v88 = 0;
              CFAllocatorRef v26 = v24;
              goto LABEL_21;
            case 4:
              int valuePtr = 14;
              CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFNumberRef v31 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
              if (!v31) {
                goto LABEL_63;
              }
              CFNumberRef v12 = v31;
              if (a2[1])
              {
                uint64_t v85 = a1;
                CFNumberRef v86 = v31;
                CFNumberRef v87 = v6;
                unint64_t v32 = 0;
                CC_LONG v33 = a2 + 4;
                while (1)
                {
                  CFMutableDictionaryRef v34 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                  if (!v34) {
                    goto LABEL_69;
                  }
                  long long v35 = v34;
                  CFStringRef v36 = CFStringCreateWithFormat(v30, 0, @"%u", *(v33 - 2));
                  if (!v36) {
                    goto LABEL_68;
                  }
                  CFStringRef v37 = v36;
                  uint64_t v88 = *(v33 - 1);
                  CFNumberRef v38 = CFNumberCreate(v30, kCFNumberLongLongType, &v88);
                  if (!v38) {
                    break;
                  }
                  CFNumberRef v39 = v38;
                  CFDictionarySetValue(v35, @"BSP_ChqHealth", v38);
                  CFRelease(v39);
                  uint64_t v88 = *v33;
                  CFNumberRef v40 = CFNumberCreate(v30, kCFNumberLongLongType, &v88);
                  if (!v40) {
                    break;
                  }
                  CFNumberRef v41 = v40;
                  CFDictionarySetValue(v35, @"BSP_ChqAgeMs", v40);
                  CFRelease(v41);
                  CFDictionarySetValue(v8, v37, v35);
                  CFRelease(v37);
                  CFRelease(v35);
                  ++v32;
                  v33 += 3;
                  if (v32 >= a2[1])
                  {
                    CFNumberRef v12 = v86;
                    uint64_t v6 = v87;
                    a1 = v85;
LABEL_61:
                    CFDictionarySetValue(v6, @"BSP_EventType", v12);
                    CFDictionarySetValue(v6, @"BSP_EventParams", v8);
                    (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 192, v6, 8, *(void *)(a1 + 80));
                    goto LABEL_62;
                  }
                }
                CFRelease(v37);
LABEL_68:
                CFRelease(v35);
LABEL_69:
                CFNumberRef v12 = v86;
                uint64_t v6 = v87;
              }
              else
              {
                uint64_t v88 = 0;
                CFAllocatorRef v26 = v30;
LABEL_21:
                CFNumberRef v27 = CFNumberCreate(v26, kCFNumberLongLongType, &v88);
                if (v27)
                {
                  CFNumberRef v28 = v27;
                  size_t v29 = @"dummy";
LABEL_60:
                  CFDictionarySetValue(v8, v29, v28);
                  CFRelease(v28);
                  goto LABEL_61;
                }
              }
LABEL_62:
              CFRelease(v12);
LABEL_63:
              CFRelease(v8);
              break;
            case 5:
              int valuePtr = 15;
              CFAllocatorRef v42 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFNumberRef v43 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
              if (!v43) {
                goto LABEL_63;
              }
              CFNumberRef v12 = v43;
              uint64_t v88 = a2[2];
              CFNumberRef v44 = CFNumberCreate(v42, kCFNumberLongLongType, &v88);
              if (!v44) {
                goto LABEL_62;
              }
              CFNumberRef v45 = v44;
              CFDictionarySetValue(v8, @"BSP_ReasonCode", v44);
              CFRelease(v45);
              uint64_t v88 = a2[1];
              CFNumberRef v46 = CFNumberCreate(v42, kCFNumberLongLongType, &v88);
              if (!v46) {
                goto LABEL_62;
              }
              CFNumberRef v28 = v46;
              size_t v29 = @"BSP_BTSubband";
              goto LABEL_60;
            case 6:
              int valuePtr = 16;
              CFAllocatorRef v47 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFNumberRef v48 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
              if (!v48) {
                goto LABEL_63;
              }
              CFNumberRef v12 = v48;
              uint64_t v88 = a2[2];
              CFNumberRef v49 = CFNumberCreate(v47, kCFNumberLongLongType, &v88);
              if (!v49) {
                goto LABEL_62;
              }
              CFNumberRef v50 = v49;
              CFDictionarySetValue(v8, @"BSP_ReasonCode", v49);
              CFRelease(v50);
              uint64_t v88 = a2[1];
              CFNumberRef v51 = CFNumberCreate(v47, kCFNumberLongLongType, &v88);
              if (!v51) {
                goto LABEL_62;
              }
              CFNumberRef v28 = v51;
              size_t v29 = @"BSP_TargetBand";
              goto LABEL_60;
            case 7:
              int valuePtr = 18;
              CFAllocatorRef v52 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFNumberRef v53 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
              if (!v53) {
                goto LABEL_63;
              }
              CFNumberRef v12 = v53;
              uint64_t v88 = a2[1];
              CFNumberRef v54 = CFNumberCreate(v52, kCFNumberLongLongType, &v88);
              if (!v54) {
                goto LABEL_62;
              }
              CFNumberRef v55 = v54;
              CFDictionarySetValue(v8, @"BSP_CoexMode", v54);
              CFRelease(v55);
              uint64_t v88 = a2[2];
              CFAllocatorRef v23 = v52;
LABEL_43:
              CFNumberRef v56 = CFNumberCreate(v23, kCFNumberLongLongType, &v88);
              if (!v56) {
                goto LABEL_62;
              }
              CFNumberRef v28 = v56;
              size_t v29 = @"BSP_SIB_TimeToTST";
              goto LABEL_60;
            case 8:
              int valuePtr = 19;
              CFAllocatorRef v57 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFNumberRef v58 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
              if (!v58) {
                goto LABEL_63;
              }
              CFNumberRef v12 = v58;
              uint64_t v88 = *((unsigned __int8 *)a2 + 4);
              CFNumberRef v59 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v59) {
                goto LABEL_62;
              }
              CFNumberRef v60 = v59;
              CFDictionarySetValue(v8, @"BSP_LQM_Overflowed", v59);
              CFRelease(v60);
              uint64_t v88 = a2[2];
              CFNumberRef v61 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v61) {
                goto LABEL_62;
              }
              CFNumberRef v62 = v61;
              CFDictionarySetValue(v8, @"BSP_LQM_TimeToTST", v61);
              CFRelease(v62);
              uint64_t v88 = a2[3];
              CFNumberRef v63 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v63) {
                goto LABEL_62;
              }
              CFNumberRef v64 = v63;
              CFDictionarySetValue(v8, @"BSP_LQM_SampleDurationMS", v63);
              CFRelease(v64);
              uint64_t v88 = a2[4];
              CFNumberRef v65 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v65) {
                goto LABEL_62;
              }
              CFNumberRef v66 = v65;
              CFDictionarySetValue(v8, @"BSP_LQM_IsScanActive", v65);
              CFRelease(v66);
              uint64_t v88 = a2[5];
              CFNumberRef v67 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v67) {
                goto LABEL_62;
              }
              CFNumberRef v68 = v67;
              CFDictionarySetValue(v8, @"BSP_LQM_IsP2PActive", v67);
              CFRelease(v68);
              uint64_t v88 = a2[6];
              CFNumberRef v69 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v69) {
                goto LABEL_62;
              }
              CFNumberRef v70 = v69;
              CFDictionarySetValue(v8, @"BSP_LQM_TriggerCount", v69);
              CFRelease(v70);
              uint64_t v88 = a2[7];
              CFNumberRef v71 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v71) {
                goto LABEL_62;
              }
              CFNumberRef v72 = v71;
              CFDictionarySetValue(v8, @"BSP_LQM_MutePercentage", v71);
              CFRelease(v72);
              uint64_t v88 = a2[8];
              CFNumberRef v73 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v73) {
                goto LABEL_62;
              }
              CFNumberRef v74 = v73;
              CFDictionarySetValue(v8, @"BSP_LQM_MaxMuteMS", v73);
              CFRelease(v74);
              uint64_t v88 = a2[9];
              CFNumberRef v75 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v75) {
                goto LABEL_62;
              }
              CFNumberRef v76 = v75;
              CFDictionarySetValue(v8, @"BSP_LQM_AvgMuteMS", v75);
              CFRelease(v76);
              uint64_t v88 = a2[10];
              CFNumberRef v77 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v77) {
                goto LABEL_62;
              }
              CFNumberRef v78 = v77;
              CFDictionarySetValue(v8, @"BSP_LQM_ErrorPercentage", v77);
              CFRelease(v78);
              uint64_t v88 = a2[11];
              CFNumberRef v79 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v79) {
                goto LABEL_62;
              }
              CFNumberRef v80 = v79;
              CFDictionarySetValue(v8, @"BSP_LQM_TimeoutPercentageOfTriggers", v79);
              CFRelease(v80);
              uint64_t v88 = a2[12];
              CFNumberRef v81 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v81) {
                goto LABEL_62;
              }
              CFNumberRef v82 = v81;
              CFDictionarySetValue(v8, @"BSP_LQM_RejectOrFailPercentageOfTriggers", v81);
              CFRelease(v82);
              uint64_t v88 = a2[13];
              CFNumberRef v83 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v83) {
                goto LABEL_62;
              }
              CFNumberRef v28 = v83;
              size_t v29 = @"BSP_LQM_MaxConsecutiveFails";
              goto LABEL_60;
            default:
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
                long long v91 = "_dispatchSIBEvent";
                __int16 v92 = 1024;
                int v93 = v9;
                _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%s - : Unhandled apple80211_bsp_event_type event from WiFi Driver. Event type: %d", buf, 0x12u);
              }
              goto LABEL_63;
          }
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchLinkChangedEvent(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 0x20) {
    return;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return;
  }
  uint64_t v6 = Mutable;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt8Type, (const void *)a2);
  if (v8)
  {
    CFNumberRef v9 = v8;
    CFDictionaryAddValue(v6, @"LINK_CHANGED_IS_LINKDOWN", v8);
    CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
    if (!v10)
    {
      CFNumberRef v15 = v9;
LABEL_28:
      CFRelease(v15);
      goto LABEL_29;
    }
    CFNumberRef v11 = v10;
    CFDictionaryAddValue(v6, @"RSSI", v10);
    if (*(unsigned char *)a2)
    {
      CFNumberRef v12 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 16));
      if (v12)
      {
        CFDictionaryAddValue(v6, @"LINKDOWN_IS_INVOL", v12);
        CFNumberRef v13 = CFNumberCreate(v7, kCFNumberIntType, (const void *)(a2 + 20));
        if (v13)
        {
          CFDictionaryAddValue(v6, @"LINKDOWN_REASON_CODE", v13);
          CFNumberRef v14 = CFNumberCreate(v7, kCFNumberIntType, (const void *)(a2 + 24));
          if (v14)
          {
            CFDictionaryAddValue(v6, @"LINKDOWN_SUBREASON_CODE", v14);
            goto LABEL_38;
          }
LABEL_17:
          CFNumberRef v16 = 0;
          goto LABEL_18;
        }
LABEL_16:
        CFNumberRef v14 = 0;
        goto LABEL_17;
      }
LABEL_15:
      CFNumberRef v13 = 0;
      goto LABEL_16;
    }
    if (*(_WORD *)(a2 + 8))
    {
      CFNumberRef v12 = CFNumberCreate(v7, kCFNumberSInt16Type, (const void *)(a2 + 8));
      if (!v12) {
        goto LABEL_15;
      }
      CFDictionaryAddValue(v6, @"SNR", v12);
    }
    else
    {
      CFNumberRef v12 = 0;
    }
    if (*(_WORD *)(a2 + 10))
    {
      CFNumberRef v13 = CFNumberCreate(v7, kCFNumberSInt16Type, (const void *)(a2 + 10));
      if (!v13) {
        goto LABEL_16;
      }
      CFDictionaryAddValue(v6, @"NOISE", v13);
    }
    else
    {
      CFNumberRef v13 = 0;
    }
    CFNumberRef v14 = 0;
LABEL_38:
    CFNumberRef v16 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 28));
    if (v16)
    {
      CFDictionaryAddValue(v6, @"LINK_DEBOUNCE_STATE", v16);
      CFNumberRef v15 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 29));
      if (v15)
      {
        CFDictionaryAddValue(v6, @"LINK_DEBOUNCE_RESULT", v15);
        (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 4, v6, 8, *(void *)(a1 + 80));
      }
LABEL_19:
      CFRelease(v9);
      CFRelease(v11);
      if (v12) {
        CFRelease(v12);
      }
      if (v13) {
        CFRelease(v13);
      }
      if (v14) {
        CFRelease(v14);
      }
      if (v16) {
        CFRelease(v16);
      }
      if (!v15) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
LABEL_18:
    CFNumberRef v15 = 0;
    goto LABEL_19;
  }
LABEL_29:
  CFRelease(v6);
}

void _dispatchTxFailureHistoryEvent(uint64_t a1, int *a2, unsigned int a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!a1) {
    return;
  }
  uint64_t v3 = a2;
  if (!a2) {
    return;
  }
  if (a3 <= 0x3B)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
    CFMutableDictionaryRef v34 = "_dispatchTxFailureHistoryEvent";
    __int16 v35 = 1024;
    unsigned int v36 = a3;
    CFNumberRef v28 = &_os_log_internal;
    size_t v29 = "%s:TxFailEvent with Insufficient DataLen:%u\n";
    uint32_t v30 = 18;
LABEL_55:
    _os_log_impl(&dword_210714000, v28, OS_LOG_TYPE_DEFAULT, v29, buf, v30);
    return;
  }
  unsigned int v5 = a3 - 8;
  unsigned int v31 = (a3 - 8) / 0x34;
  if ((a3 - 8) % 0x34)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 67109120;
    LODWORD(v34) = v5;
    CFNumberRef v28 = &_os_log_internal;
    size_t v29 = "Invalid phyRateSeriesLen:%u \n";
LABEL_49:
    uint32_t v30 = 8;
    goto LABEL_55;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
    CFMutableDictionaryRef v34 = "_dispatchTxFailureHistoryEvent";
    CFNumberRef v28 = &_os_log_internal;
    size_t v29 = "%s:Failed to Allocate Memory for TxFail Dictionary\n";
    goto LABEL_54;
  }
  if (v31 != *v3)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 67109120;
    LODWORD(v34) = v5;
    CFNumberRef v28 = &_os_log_internal;
    size_t v29 = "Invalid phyRateSeriesLen:%u \n";
    goto LABEL_49;
  }
  CFNumberRef v9 = Mutable;
  CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, v3);
  if (!v10)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
    CFMutableDictionaryRef v34 = "_dispatchTxFailureHistoryEvent";
    CFNumberRef v28 = &_os_log_internal;
    size_t v29 = "%s:numRef allocation Failed!\n";
LABEL_54:
    uint32_t v30 = 12;
    goto LABEL_55;
  }
  CFNumberRef v11 = v10;
  CFDictionarySetValue(v9, @"TX_FAILURE_PHYRATE_SERIES_COUNT", v10);
  CFRelease(v11);
  CFNumberRef v12 = CFNumberCreate(v7, kCFNumberSInt32Type, v3 + 1);
  if (v12)
  {
    CFNumberRef v13 = v12;
    CFDictionarySetValue(v9, @"TX_FAILURE_EVENT_SEQUENCE_NUMBER", v12);
    CFRelease(v13);
    int v14 = 0;
    CFNumberRef v15 = v3 + 2;
    while (2)
    {
      int v16 = *v15;
      int valuePtr = BYTE1(*v15);
      CFMutableArrayRef v17 = CFArrayCreateMutable(v7, 0, MEMORY[0x263EFFF70]);
      if (v17)
      {
        CFNumberRef v18 = v17;
        for (uint64_t i = 3; i != 15; ++i)
        {
          CFNumberRef v20 = CFNumberCreate(v7, kCFNumberSInt32Type, &v3[i]);
          if (!v20)
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_35;
            }
            *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
            CFMutableDictionaryRef v34 = "_dispatchTxFailureHistoryEvent";
            CFAllocatorRef v26 = &_os_log_internal;
            CFNumberRef v27 = "%s:failCount allocation Failed!\n";
            goto LABEL_34;
          }
          CFNumberRef v21 = v20;
          CFArrayAppendValue(v18, v20);
          CFRelease(v21);
        }
        switch(v16)
        {
          case 4u:
            CFNumberRef v22 = v9;
            if (BYTE2(v16) == 1) {
              CFAllocatorRef v23 = @"TX_FAILURE_PHYRATE_SERIES_11AC_1SS";
            }
            else {
              CFAllocatorRef v23 = @"TX_FAILURE_PHYRATE_SERIES_11AC_2SS";
            }
            break;
          case 2u:
            CFNumberRef v22 = v9;
            if (BYTE2(v16) == 1) {
              CFAllocatorRef v23 = @"TX_FAILURE_PHYRATE_SERIES_11N_1SS";
            }
            else {
              CFAllocatorRef v23 = @"TX_FAILURE_PHYRATE_SERIES_11N_2SS";
            }
            break;
          case 1u:
            CFNumberRef v22 = v9;
            CFAllocatorRef v23 = @"TX_FAILURE_PHYRATE_SERIES_LEGACY_RATES";
            break;
          default:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CFRunLoopTimerContext buf = 67109120;
              LODWORD(v34) = v16;
              _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Invalid RateIndexType:%u", buf, 8u);
            }
LABEL_27:
            CFRelease(v18);
            if (!valuePtr)
            {
LABEL_30:
              v15 += 13;
              ++v14;
              v3 += 13;
              if (v14 != v31) {
                continue;
              }
              goto LABEL_35;
            }
            CFNumberRef v24 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr);
            if (v24)
            {
              CFNumberRef v25 = v24;
              CFDictionarySetValue(v9, @"TX_FAILURE_PHYRATE_AMPDU_FRAMES", v24);
              CFRelease(v25);
              goto LABEL_30;
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_35;
            }
            *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
            CFMutableDictionaryRef v34 = "_dispatchTxFailureHistoryEvent";
            CFAllocatorRef v26 = &_os_log_internal;
            CFNumberRef v27 = "%s:ampduNumRef allocation Failed!\n";
LABEL_34:
            _os_log_impl(&dword_210714000, v26, OS_LOG_TYPE_DEFAULT, v27, buf, 0xCu);
            goto LABEL_35;
        }
        CFDictionarySetValue(v22, v23, v18);
        goto LABEL_27;
      }
      break;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
      CFMutableDictionaryRef v34 = "_dispatchTxFailureHistoryEvent";
      CFAllocatorRef v26 = &_os_log_internal;
      CFNumberRef v27 = "%s:array allocation Failed!\n";
      goto LABEL_34;
    }
LABEL_35:
    (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 89, v9, 8, *(void *)(a1 + 80));
    CFRelease(v9);
    return;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
    CFMutableDictionaryRef v34 = "_dispatchTxFailureHistoryEvent";
    CFNumberRef v28 = &_os_log_internal;
    size_t v29 = "%s:numRef allocation Failed!\n";
    goto LABEL_54;
  }
}

void _dispatchObssMitInfoEvent(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    return;
  }
  if (a3 != 44) {
    return;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return;
  }
  uint64_t v6 = Mutable;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)(a2 + 20));
  if (v8)
  {
    CFNumberRef v9 = v8;
    CFDictionaryAddValue(v6, @"LAST_OBSS_STATS_TIME", v8);
    CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)a2);
    if (!v10)
    {
      CFNumberRef v25 = v9;
LABEL_46:
      CFRelease(v25);
      goto LABEL_47;
    }
    CFNumberRef v11 = v10;
    CFDictionaryAddValue(v6, @"SHOULD_APPLY_OBSS_MIT", v10);
    CFNumberRef v12 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 1));
    CFNumberRef cf = v12;
    if (v12
      && (CFDictionaryAddValue(v6, @"IS_OBSS_MIT_APPLIED", v12),
          (CFNumberRef v13 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 2))) != 0))
    {
      CFNumberRef v36 = v13;
      CFDictionaryAddValue(v6, @"CURRENT_OP_BW", v13);
      CFNumberRef v14 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 3));
      if (v14)
      {
        CFNumberRef v34 = v14;
        CFDictionaryAddValue(v6, @"RECOMM_OBSS_MIT_BW", v14);
        CFNumberRef v15 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
        if (v15)
        {
          CFNumberRef v33 = v15;
          CFDictionaryAddValue(v6, @"OBSS_RX_PLCP_ERR", v15);
          CFNumberRef v16 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 8));
          if (v16)
          {
            CFNumberRef v35 = v16;
            CFDictionaryAddValue(v6, @"OBSS_RX_BAD_FCS_ERR", v16);
            CFNumberRef v17 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 12));
            if (v17)
            {
              CFNumberRef v32 = v17;
              CFDictionaryAddValue(v6, @"OBSS_RX_FRAMES", v17);
              CFNumberRef v18 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 16));
              if (v18)
              {
                CFDictionaryAddValue(v6, @"OBSS_RX_PER_PCT", v18);
                CFNumberRef v19 = CFArrayCreateMutable(v7, 0, MEMORY[0x263EFFF70]);
                if (v19)
                {
                  uint64_t v20 = 0;
                  char v21 = 1;
                  while (1)
                  {
                    char v22 = v21;
                    CFNumberRef v23 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + v20 + 40));
                    if (!v23) {
                      break;
                    }
                    CFArrayAppendValue(v19, v23);
                    CFRelease(v23);
                    char v21 = 0;
                    uint64_t v20 = 1;
                    if ((v22 & 1) == 0)
                    {
                      CFDictionaryAddValue(v6, @"OBSS_MIT_SOI", v19);
                      CFNumberRef v23 = CFArrayCreateMutable(v7, 0, MEMORY[0x263EFFF70]);
                      if (!v23) {
                        break;
                      }
                      CFNumberRef v30 = v11;
                      CFNumberRef v31 = v9;
                      uint64_t v24 = 0;
                      while (1)
                      {
                        CFNumberRef v25 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 24 + v24));
                        if (!v25) {
                          break;
                        }
                        CFArrayAppendValue(v23, v25);
                        CFRelease(v25);
                        if (++v24 == 8)
                        {
                          CFDictionaryAddValue(v6, @"OBSS_PWREST_CORE0", v23);
                          CFNumberRef v25 = CFArrayCreateMutable(v7, 0, MEMORY[0x263EFFF70]);
                          if (v25)
                          {
                            uint64_t v26 = 0;
                            uint64_t v27 = a2 + 32;
                            while (1)
                            {
                              CFNumberRef v28 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(v27 + v26));
                              if (!v28) {
                                break;
                              }
                              CFNumberRef v29 = v28;
                              CFArrayAppendValue(v25, v28);
                              CFRelease(v29);
                              if (++v26 == 8)
                              {
                                CFDictionaryAddValue(v6, @"OBSS_PWREST_CORE1", v25);
                                (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 218, v6, 8, *(void *)(a1 + 80));
                                goto LABEL_26;
                              }
                            }
                          }
                          break;
                        }
                      }
LABEL_26:
                      CFNumberRef v11 = v30;
                      CFNumberRef v9 = v31;
                      goto LABEL_27;
                    }
                  }
LABEL_58:
                  CFNumberRef v25 = 0;
LABEL_27:
                  CFRelease(v9);
                  CFRelease(v11);
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (v36) {
                    CFRelease(v36);
                  }
                  if (v34) {
                    CFRelease(v34);
                  }
                  if (v33) {
                    CFRelease(v33);
                  }
                  if (v35) {
                    CFRelease(v35);
                  }
                  if (v32) {
                    CFRelease(v32);
                  }
                  if (v18) {
                    CFRelease(v18);
                  }
                  if (v19) {
                    CFRelease(v19);
                  }
                  if (v23) {
                    CFRelease(v23);
                  }
                  if (!v25) {
                    goto LABEL_47;
                  }
                  goto LABEL_46;
                }
LABEL_57:
                CFNumberRef v23 = 0;
                goto LABEL_58;
              }
LABEL_56:
              CFNumberRef v19 = 0;
              goto LABEL_57;
            }
LABEL_55:
            CFNumberRef v32 = 0;
            CFNumberRef v18 = 0;
            goto LABEL_56;
          }
LABEL_54:
          CFNumberRef v35 = 0;
          goto LABEL_55;
        }
LABEL_53:
        CFNumberRef v33 = 0;
        goto LABEL_54;
      }
    }
    else
    {
      CFNumberRef v36 = 0;
    }
    CFNumberRef v34 = 0;
    goto LABEL_53;
  }
LABEL_47:
  CFRelease(v6);
}

void _dispatchBTCoexStatsUpdateEvent(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    return;
  }
  if (a3 != 28) {
    return;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return;
  }
  uint64_t v6 = Mutable;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)(a2 + 8));
  if (v8)
  {
    CFNumberRef v9 = v8;
    CFDictionaryAddValue(v6, @"BTC_STATS_TOT_DUR_MS", v8);
    CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 12));
    if (!v10)
    {
      CFNumberRef v17 = v9;
LABEL_31:
      CFRelease(v17);
      goto LABEL_32;
    }
    CFNumberRef v11 = v10;
    CFDictionaryAddValue(v6, @"BTC_STATS_BT_DUR_MS", v10);
    CFNumberRef v12 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)a2);
    if (v12)
    {
      CFDictionaryAddValue(v6, @"BTC_STATS_HYBRID_CNT", v12);
      CFNumberRef v13 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
      if (v13)
      {
        CFDictionaryAddValue(v6, @"BTC_STATS_TDD_CNT", v13);
        CFNumberRef v14 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 16));
        if (v14)
        {
          CFNumberRef v19 = v14;
          CFDictionaryAddValue(v6, @"BTC_STATS_PARALLEL_CNT", v14);
          CFNumberRef v15 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 20));
          if (v15)
          {
            CFDictionaryAddValue(v6, @"BTC_STATS_BT_DUR_AIR_MS", v15);
            CFNumberRef v16 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 24));
            if (v16)
            {
              CFDictionaryAddValue(v6, @"BTC_STATS_WLRSSI_COEX", v16);
              CFNumberRef v17 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 25));
              if (v17)
              {
                CFDictionaryAddValue(v6, @"BTC_STATS_BTRSSI_COEX", v17);
                (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 190, v6, 8, *(void *)(a1 + 80));
              }
              goto LABEL_19;
            }
          }
          else
          {
            CFNumberRef v16 = 0;
          }
          CFNumberRef v17 = 0;
LABEL_19:
          CFNumberRef v18 = v19;
LABEL_20:
          CFRelease(v9);
          CFRelease(v11);
          if (v12) {
            CFRelease(v12);
          }
          if (v13) {
            CFRelease(v13);
          }
          if (v18) {
            CFRelease(v18);
          }
          if (v15) {
            CFRelease(v15);
          }
          if (v16) {
            CFRelease(v16);
          }
          if (!v17) {
            goto LABEL_32;
          }
          goto LABEL_31;
        }
      }
    }
    else
    {
      CFNumberRef v13 = 0;
    }
    CFNumberRef v18 = 0;
    CFNumberRef v15 = 0;
    CFNumberRef v16 = 0;
    CFNumberRef v17 = 0;
    goto LABEL_20;
  }
LABEL_32:
  CFRelease(v6);
}

void _dispatchAsyncAssocEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  unint64_t v85 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v83 = v7;
  long long v84 = v7;
  if (!a4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
      CFNumberRef v74 = "_dispatchAsyncAssocEvent";
      CFNumberRef v44 = &_os_log_internal;
      CFNumberRef v45 = "%s:join status is nil!\n";
      uint32_t v46 = 12;
      goto LABEL_22;
    }
LABEL_23:
    if (!*(unsigned char *)(a1 + 4) || (*(_DWORD *)a1 & 0x80000000) != 0 || !*(void *)(a1 + 344)) {
      return;
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 272));
    if (!a2)
    {
      unint64_t v85 = 0;
      long long v83 = 0u;
      long long v84 = 0u;
      __strlcpy_chk();
      LODWORD(v84) = 21;
      uint64_t v47 = Apple80211RawGet(a1, (uint64_t)&v83);
      if (v47)
      {
        a3 = v47;
        goto LABEL_71;
      }
      if (DWORD1(v84) == 0xFFFF)
      {
        unsigned int v48 = *(_DWORD *)(a1 + 1584);
        if (v48 <= 0x27)
        {
          if (!v48)
          {
            CFNumberRef v49 = *(__CFRunLoopTimer **)(a1 + 1568);
            if (v49)
            {
              CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
              CFRunLoopTimerSetNextFireDate(v49, Current + 0.2);
            }
            CFNumberRef v51 = *(NSObject **)(a1 + 1576);
            if (v51)
            {
              dispatch_time_t v52 = dispatch_time(0, 200000000);
              dispatch_source_set_timer(v51, v52, 0xBEBC200uLL, 0);
            }
          }
          ++*(_DWORD *)(a1 + 1584);
          goto LABEL_73;
        }
        a3 = 4294963391;
      }
      else
      {
        a3 = _errorForAssociateResult(SDWORD1(v84));
      }
    }
    CFNumberRef v53 = *(__CFRunLoopTimer **)(a1 + 1568);
    if (v53)
    {
      CFAbsoluteTime v54 = CFAbsoluteTimeGetCurrent();
      CFRunLoopTimerSetNextFireDate(v53, v54 + 315360000.0);
    }
    CFNumberRef v55 = *(NSObject **)(a1 + 1576);
    if (v55)
    {
      dispatch_time_t v56 = dispatch_time(0, 315360000000000000);
      dispatch_source_set_timer(v55, v56, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    if (!*(unsigned char *)(a1 + 620)) {
      goto LABEL_71;
    }
    if (!a3)
    {
      CFNumberRef v62 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)(a1 + 616));
      if (v62)
      {
        CFNumberRef v63 = v62;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 344), @"WEP_AUTH_Flags", v62);
        CFRelease(v63);
      }
      a3 = 0;
      goto LABEL_71;
    }
    if ((a3 + 3912) <= 7 && ((1 << (a3 + 72)) & 0x85) != 0)
    {
      int v57 = *(_DWORD *)(a1 + 352);
      if (v57 == 2)
      {
        *(_DWORD *)(a1 + 612) = a3;
      }
      else if (v57 == 3)
      {
        int v58 = *(_DWORD *)(a1 + 612);
        BOOL v59 = a3 == -3905 && v58 == -3905;
        BOOL v60 = v59;
        BOOL v61 = v58 == -3910 && a3 == -3910;
        if (!v61 && !v60) {
          goto LABEL_71;
        }
      }
      if (a3 != -3910 || (v57 + 1) >= 4) {
        int v65 = v57 + 1;
      }
      else {
        int v65 = 4;
      }
      *(_DWORD *)(a1 + 352) = v65;
      a3 = _initiateAutoWEPSequence(a1, a1 + 624, (char *)(a1 + 356), (_DWORD *)(a1 + 352), (int *)(a1 + 616), 1);
      if (!a3)
      {
LABEL_73:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 272));
        return;
      }
    }
LABEL_71:
    CFNumberRef v66 = *(const void **)(a1 + 344);
    *(void *)(a1 + 336) = 0;
    *(void *)(a1 + 344) = 0;
    *(_OWORD *)(a1 + 356) = 0u;
    *(_OWORD *)(a1 + 372) = 0u;
    *(_OWORD *)(a1 + 388) = 0u;
    *(_OWORD *)(a1 + 404) = 0u;
    *(_OWORD *)(a1 + 420) = 0u;
    *(_OWORD *)(a1 + 436) = 0u;
    *(_OWORD *)(a1 + 452) = 0u;
    *(_OWORD *)(a1 + 468) = 0u;
    *(_OWORD *)(a1 + 484) = 0u;
    *(_OWORD *)(a1 + 500) = 0u;
    *(_OWORD *)(a1 + 516) = 0u;
    *(_OWORD *)(a1 + 532) = 0u;
    *(_OWORD *)(a1 + 548) = 0u;
    *(_OWORD *)(a1 + 564) = 0u;
    *(_OWORD *)(a1 + 580) = 0u;
    *(_OWORD *)(a1 + 596) = 0u;
    *(unsigned char *)(a1 + 620) = 0;
    *(_DWORD *)(a1 + 616) = 0;
    *(_DWORD *)(a1 + 352) = 0;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 272));
    (*(void (**)(uint64_t, uint64_t, uint64_t, const void *, uint64_t, void))(a1 + 72))(a3, a1, 9, v66, 8, *(void *)(a1 + 80));
    if (v66) {
      CFRelease(v66);
    }
    return;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (Mutable)
  {
    CFNumberRef v11 = Mutable;
    int v70 = a2;
    uint64_t v71 = a1;
    uint64_t v12 = 0;
    int v13 = 0;
    do
    {
      CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (!v14)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
        CFNumberRef v74 = "_dispatchAsyncAssocEvent";
        CFNumberRef v67 = &_os_log_internal;
        CFNumberRef v68 = "%s:innerDict allocation Failed!\n";
        goto LABEL_76;
      }
      CFNumberRef v15 = v14;
      CFDataRef v16 = CFDataCreate(v9, (const UInt8 *)(a4 + v12 + 16), 6);
      if (!v16)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
        CFNumberRef v74 = "_dispatchAsyncAssocEvent";
        __int16 v75 = 1024;
        int v76 = v13;
        CFNumberRef v67 = &_os_log_internal;
        CFNumberRef v68 = "%s:bssid at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      CFDataRef v17 = v16;
      CFDictionaryAddValue(v15, @"BSSID", v16);
      CFRelease(v17);
      CFNumberRef v18 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 28));
      if (!v18)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
        CFNumberRef v74 = "_dispatchAsyncAssocEvent";
        __int16 v75 = 1024;
        int v76 = v13;
        CFNumberRef v67 = &_os_log_internal;
        CFNumberRef v68 = "%s:authStatus at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      CFNumberRef v19 = v18;
      CFDictionaryAddValue(v15, @"AUTHEVENT_STATUS", v18);
      CFRelease(v19);
      CFNumberRef v20 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 32));
      if (!v20)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
        CFNumberRef v74 = "_dispatchAsyncAssocEvent";
        __int16 v75 = 1024;
        int v76 = v13;
        CFNumberRef v67 = &_os_log_internal;
        CFNumberRef v68 = "%s:authReason at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      CFNumberRef v21 = v20;
      CFDictionaryAddValue(v15, @"AUTHEVENT_REASON", v20);
      CFRelease(v21);
      CFNumberRef v22 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 36));
      if (!v22)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
        CFNumberRef v74 = "_dispatchAsyncAssocEvent";
        __int16 v75 = 1024;
        int v76 = v13;
        CFNumberRef v67 = &_os_log_internal;
        CFNumberRef v68 = "%s:assocStatus at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      CFNumberRef v23 = v22;
      CFDictionaryAddValue(v15, @"ASSOCEVENT_STATUS", v22);
      CFRelease(v23);
      CFNumberRef v24 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 40));
      if (!v24)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
        CFNumberRef v74 = "_dispatchAsyncAssocEvent";
        __int16 v75 = 1024;
        int v76 = v13;
        CFNumberRef v67 = &_os_log_internal;
        CFNumberRef v68 = "%s:assocReason at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      CFNumberRef v25 = v24;
      CFDictionaryAddValue(v15, @"ASSOCEVENT_REASON", v24);
      CFRelease(v25);
      CFNumberRef v26 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 44));
      if (!v26)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
        CFNumberRef v74 = "_dispatchAsyncAssocEvent";
        __int16 v75 = 1024;
        int v76 = v13;
        CFNumberRef v67 = &_os_log_internal;
        CFNumberRef v68 = "%s:setSsidStatus at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      CFNumberRef v27 = v26;
      CFDictionaryAddValue(v15, @"SETSSID_STATUS", v26);
      CFRelease(v27);
      CFNumberRef v28 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 48));
      if (!v28)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
        CFNumberRef v74 = "_dispatchAsyncAssocEvent";
        __int16 v75 = 1024;
        int v76 = v13;
        CFNumberRef v67 = &_os_log_internal;
        CFNumberRef v68 = "%s:setSsidReason at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      CFNumberRef v29 = v28;
      CFDictionaryAddValue(v15, @"SETSSID_REASON", v28);
      CFRelease(v29);
      CFNumberRef v30 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 52));
      if (!v30)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
        CFNumberRef v74 = "_dispatchAsyncAssocEvent";
        __int16 v75 = 1024;
        int v76 = v13;
        CFNumberRef v67 = &_os_log_internal;
        CFNumberRef v68 = "%s:supplEvStatus at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      CFNumberRef v31 = v30;
      CFDictionaryAddValue(v15, @"SUPPLICANTEVENT_STATUS", v30);
      CFRelease(v31);
      CFNumberRef v32 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 56));
      if (!v32)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
        CFNumberRef v74 = "_dispatchAsyncAssocEvent";
        __int16 v75 = 1024;
        int v76 = v13;
        CFNumberRef v67 = &_os_log_internal;
        CFNumberRef v68 = "%s:supplEvReason at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      CFNumberRef v33 = v32;
      CFDictionaryAddValue(v15, @"SUPPLICANTEVENT_REASON", v32);
      CFRelease(v33);
      CFNumberRef v34 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 24));
      if (!v34)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
        CFNumberRef v74 = "_dispatchAsyncAssocEvent";
        __int16 v75 = 1024;
        int v76 = v13;
        CFNumberRef v67 = &_os_log_internal;
        CFNumberRef v68 = "%s:flags at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      CFNumberRef v35 = v34;
      CFDictionaryAddValue(v15, @"JOIN_STATUS_SUBSTATE_FLAGS", v34);
      CFRelease(v35);
      CFArrayAppendValue(v11, v15);
      CFRelease(v15);
      ++v13;
      v12 += 44;
    }
    while (v12 != 440);
    a1 = v71;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v71 + 344), @"JOIN_STATUS_SUBSTATE_INFO", v11);
    CFRelease(v11);
    int v36 = *(_DWORD *)(a4 + 456);
    unsigned int v37 = v36 - 1000;
    int v38 = v36 - 975;
    if (v37 >= 0xB) {
      int v39 = 0xFFFF;
    }
    else {
      int v39 = v38;
    }
    int valuePtr = _errorForAssociateResult(v39);
    CFNumberRef v40 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
    if (v40)
    {
      CFNumberRef v41 = v40;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v71 + 344), @"JOIN_EXTENDED_STATUS", v40);
      CFRelease(v41);
      a2 = v70;
      a3 = a3;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      int v42 = *(_DWORD *)(a4 + 8);
      int v43 = *(_DWORD *)(a4 + 456);
      *(_DWORD *)CFRunLoopTimerContext buf = 136316162;
      CFNumberRef v74 = "_dispatchAsyncAssocEvent";
      __int16 v75 = 1024;
      int v76 = 6616;
      __int16 v77 = 1024;
      int v78 = valuePtr;
      __int16 v79 = 1024;
      int v80 = v42;
      __int16 v81 = 1024;
      int v82 = v43;
      CFNumberRef v44 = &_os_log_internal;
      CFNumberRef v45 = "TRACER:%s@%d:%d join_status:%d/%d\n";
      uint32_t v46 = 36;
LABEL_22:
      _os_log_impl(&dword_210714000, v44, OS_LOG_TYPE_DEFAULT, v45, buf, v46);
      goto LABEL_23;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
      CFNumberRef v74 = "_dispatchAsyncAssocEvent";
      __int16 v75 = 1024;
      int v76 = 6611;
      CFNumberRef v67 = &_os_log_internal;
      CFNumberRef v68 = "%s@%d:nRef allocation Failed!\n";
LABEL_97:
      uint32_t v69 = 18;
      goto LABEL_98;
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
    CFNumberRef v74 = "_dispatchAsyncAssocEvent";
    CFNumberRef v67 = &_os_log_internal;
    CFNumberRef v68 = "%s:array allocation Failed!\n";
LABEL_76:
    uint32_t v69 = 12;
LABEL_98:
    _os_log_impl(&dword_210714000, v67, OS_LOG_TYPE_DEFAULT, v68, buf, v69);
  }
}

void _dispatchGasResults()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v111 = *MEMORY[0x263EF8340];
  if (v0)
  {
    size_t v2 = v1;
    uint64_t v3 = v0;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    if (Mutable)
    {
      uint64_t v6 = Mutable;
      CFNumberRef v97 = (pthread_mutex_t *)(v3 + 1592);
      pthread_mutex_lock((pthread_mutex_t *)(v3 + 1592));
      uint64_t v7 = 4294963390;
      switch(v2[2])
      {
        case 0:
          if ((*v2 - 6145) >= 0xFFFFE800)
          {
            int v100 = v2[1];
            if (!v100) {
              goto LABEL_146;
            }
            memset(__b, 170, sizeof(__b));
            int v8 = 0;
            CFArrayRef theArray = v6;
            uint64_t v99 = v3;
            while (1)
            {
              CFArrayRef v109 = 0;
              long long v107 = 0u;
              long long v108 = 0u;
              __strlcpy_chk();
              LODWORD(v108) = 200;
              DWORD2(v108) = 6168;
              CFArrayRef v109 = __b;
              if (Apple80211RawGet(v3, (uint64_t)&v107))
              {
LABEL_143:
                uint64_t v7 = 4294963394;
                goto LABEL_147;
              }
              uint64_t v105 = 0;
              if (HIWORD(__b[0]) < 4u) {
                goto LABEL_138;
              }
              CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              if (!v9) {
                goto LABEL_138;
              }
              CFNumberRef v10 = v9;
              CFNumberRef v11 = CFNumberCreate(v4, kCFNumberSInt16Type, (char *)__b + 4);
              if (!v11) {
                goto LABEL_137;
              }
              CFNumberRef v12 = v11;
              CFDictionaryAddValue(v10, @"ANQP_STATUS", v11);
              CFRelease(v12);
              LODWORD(v105) = LOWORD(__b[0]);
              CFNumberRef v13 = CFNumberCreate(v4, kCFNumberSInt32Type, &v105);
              if (!v13) {
                goto LABEL_137;
              }
              CFNumberRef v14 = v13;
              CFDictionarySetValue(v10, @"CHANNEL", v13);
              CFRelease(v14);
              CFNumberRef v15 = CFNumberCreate(v4, kCFNumberSInt32Type, (char *)&v105 + 4);
              if (!v15) {
                goto LABEL_137;
              }
              CFNumberRef v16 = v15;
              CFDictionarySetValue(v10, @"CHANNEL_FLAGS", v15);
              CFRelease(v16);
              CFDataRef v17 = ether_ntoa((const ether_addr *)&__b[1]);
              if (!v17) {
                goto LABEL_137;
              }
              CFStringRef v18 = CFStringCreateWithCString(v4, v17, 0x8000100u);
              if (!v18) {
                goto LABEL_137;
              }
              CFStringRef v19 = v18;
              CFDictionarySetValue(v10, @"BSSID", v18);
              CFRelease(v19);
              CFNumberRef v20 = CFNumberCreate(v4, kCFNumberSInt64Type, &__b[770]);
              if (!v20) {
                goto LABEL_137;
              }
              CFNumberRef v21 = v20;
              int v101 = v8;
              CFMutableDictionaryRef v103 = v10;
              CFDictionarySetValue(v10, @"TIMESTAMP", v20);
              CFRelease(v21);
              if (WORD2(__b[0]) || !HIWORD(__b[0]))
              {
LABEL_136:
                uint64_t v6 = theArray;
                CFNumberRef v10 = v103;
                CFArrayAppendValue(theArray, v103);
                uint64_t v3 = v99;
                int v8 = v101;
                goto LABEL_137;
              }
              unsigned __int16 v22 = 0;
              CFNumberRef v23 = (char *)&__b[1] + 6;
              while (2)
              {
                unsigned __int16 v104 = v22;
                switch(*(_WORD *)v23)
                {
                  case 0x101:
                    CFMutableArrayRef v24 = CFArrayCreateMutable(v4, 0, MEMORY[0x263EFFF70]);
                    if (v24)
                    {
                      CFNumberRef v25 = v24;
                      if (*((_WORD *)v23 + 1))
                      {
                        unint64_t v26 = 0;
                        CFNumberRef v27 = v23 + 4;
                        do
                        {
                          CFNumberRef v28 = CFNumberCreate(v4, kCFNumberSInt16Type, v27);
                          if (!v28) {
                            goto LABEL_107;
                          }
                          CFNumberRef v29 = v28;
                          CFArrayAppendValue(v25, v28);
                          CFRelease(v29);
                          ++v26;
                          v27 += 2;
                        }
                        while (v26 < *((unsigned __int16 *)v23 + 1));
                      }
                      CFNumberRef v30 = v103;
                      CFNumberRef v31 = @"ANQP_CAPABILITY_LIST";
                      goto LABEL_99;
                    }
                    goto LABEL_109;
                  case 0x102:
                    CFMutableDictionaryRef v32 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                    if (!v32) {
                      goto LABEL_109;
                    }
                    CFNumberRef v33 = v32;
                    CFNumberRef v34 = CFNumberCreate(v4, kCFNumberSInt8Type, v23 + 4);
                    if (!v34) {
                      goto LABEL_120;
                    }
                    CFNumberRef v35 = v34;
                    CFDictionaryAddValue(v33, @"ANQP_VENUE_GROUP", v34);
                    CFRelease(v35);
                    CFNumberRef v36 = CFNumberCreate(v4, kCFNumberSInt8Type, v23 + 5);
                    if (!v36) {
                      goto LABEL_120;
                    }
                    CFNumberRef v37 = v36;
                    CFDictionaryAddValue(v33, @"ANQP_VENUE_TYPE", v36);
                    CFRelease(v37);
                    unsigned int v38 = *((unsigned __int16 *)v23 + 1);
                    unsigned __int16 v39 = v38 - 2;
                    if (v38 < 2) {
                      goto LABEL_120;
                    }
                    if ((_WORD)v38 == 2)
                    {
                      CFNumberRef v41 = 0;
LABEL_114:
                      CFDictionaryAddValue(v103, @"ANQP_VENUE_NAME_INFO", v33);
                      uint64_t v94 = v33;
                      CFNumberRef v33 = 0;
                      CFStringRef v45 = 0;
                    }
                    else
                    {
                      CFMutableArrayRef v40 = CFArrayCreateMutable(v4, 0, MEMORY[0x263EFFF70]);
                      if (!v40) {
                        goto LABEL_120;
                      }
                      CFNumberRef v41 = v40;
                      CFMutableDictionaryRef theDict = v33;
                      unsigned __int16 v42 = 0;
                      int v43 = (unsigned __int8 *)(v23 + 6);
                      while (1)
                      {
                        CFNumberRef v33 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                        if (!v33) {
                          break;
                        }
                        unint64_t v44 = *v43;
                        if (v44 < 3) {
                          break;
                        }
                        CFStringRef v45 = CFStringCreateWithBytes(v4, v43 + 4, v44 - 3, 0x8000100u, 1u);
                        if (!v45) {
                          goto LABEL_134;
                        }
                        CFStringRef v46 = CFStringCreateWithBytes(v4, v43 + 1, 3, 0x8000100u, 1u);
                        if (!v46) {
                          goto LABEL_134;
                        }
                        CFStringRef v47 = v46;
                        CFDictionaryAddValue(v33, @"ANQP_LANG_CODE", v46);
                        CFDictionaryAddValue(v33, @"ANQP_VENUE_OPERATOR_NAME", v45);
                        CFArrayAppendValue(v41, v33);
                        CFRelease(v45);
                        CFRelease(v47);
                        CFRelease(v33);
                        int v48 = *v43;
                        int v49 = (unsigned __int16)(v48 + v42);
                        if (v49 != v48 + v42)
                        {
                          syslog(3, "parsedLen %hu increment by value %d os_add_overflow FAILED\n", (unsigned __int16)(v48 + v42), v48);
LABEL_132:
                          CFNumberRef v33 = 0;
                          break;
                        }
                        unsigned __int16 v42 = v49 + 1;
                        if (v49 == 0xFFFF)
                        {
                          syslog(3, "parsedLen %hu increment by value %d os_add_overflow FAILED\n", 0, 1);
                          goto LABEL_132;
                        }
                        v43 += *v43 + 1;
                        if (v39 <= v42)
                        {
                          CFNumberRef v33 = theDict;
                          CFDictionaryAddValue(theDict, @"ANQP_VENUE_NAMES", v41);
                          goto LABEL_114;
                        }
                      }
                      CFStringRef v45 = 0;
LABEL_134:
                      uint64_t v94 = theDict;
                    }
                    CFRelease(v94);
                    if (v41) {
                      CFRelease(v41);
                    }
                    if (v45) {
                      CFRelease(v45);
                    }
                    if (v33)
                    {
LABEL_120:
                      __int16 v92 = v33;
                      goto LABEL_108;
                    }
LABEL_109:
                    int v93 = *((unsigned __int16 *)v23 + 1) + v104;
                    if ((v93 & 0x10000) != 0)
                    {
                      syslog(3, "parsedLen %hu increment by value %hu os_add_overflow FAILED\n");
                      goto LABEL_142;
                    }
                    unsigned __int16 v22 = v93 + 4;
                    if ((unsigned __int16)v93 < 0xFFFCu)
                    {
                      CFNumberRef v23 = (char *)&__b[1] + v22 + 6;
                      if (HIWORD(__b[0]) <= v22) {
                        goto LABEL_136;
                      }
                      continue;
                    }
                    syslog(3, "parsedLen %hu increment by value %lu os_add_overflow FAILED\n");
LABEL_142:
                    uint64_t v6 = theArray;
                    uint64_t v3 = v99;
                    int v8 = v101;
                    CFNumberRef v10 = v103;
LABEL_137:
                    CFRelease(v10);
LABEL_138:
                    if (++v8 == v100)
                    {
LABEL_146:
                      uint64_t v7 = 0;
                      goto LABEL_147;
                    }
                    break;
                  case 0x103:
                  case 0x106:
                  case 0x109:
                  case 0x10A:
                  case 0x10B:
                    goto LABEL_109;
                  case 0x104:
                    CFMutableArrayRef v50 = CFArrayCreateMutable(v4, 0, MEMORY[0x263EFFF70]);
                    if (!v50) {
                      goto LABEL_109;
                    }
                    CFNumberRef v51 = v50;
                    if (!*((_WORD *)v23 + 1)) {
                      goto LABEL_60;
                    }
                    LOWORD(v52) = 0;
                    CFNumberRef v53 = v23 + 4;
                    while (2)
                    {
                      CFMutableDictionaryRef v54 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                      if (v54)
                      {
                        CFNumberRef v55 = v54;
                        CFNumberRef v56 = CFNumberCreate(v4, kCFNumberSInt8Type, v53);
                        if (v56)
                        {
                          CFNumberRef v57 = v56;
                          CFDictionaryAddValue(v55, @"ANQP_NET_AUTH_TYPE_INDICATOR", v56);
                          CFRelease(v57);
                          if (*(_WORD *)(v53 + 1))
                          {
                            CFStringRef v58 = CFStringCreateWithBytes(v4, (const UInt8 *)v53 + 3, *(unsigned __int16 *)(v53 + 1), 0x8000100u, 1u);
                            if (!v58) {
                              goto LABEL_90;
                            }
                            CFStringRef v59 = v58;
                            CFDictionaryAddValue(v55, @"ANQP_NET_AUTH_TYPE_REDIRECT_URL", v58);
                            CFRelease(v59);
                          }
                          CFArrayAppendValue(v51, v55);
                          CFRelease(v55);
                          if ((unsigned __int16)v52 >= 0xFFFDu)
                          {
                            syslog(3, "parsedLen %hu increment by value %lu os_add_overflow FAILED\n");
                          }
                          else
                          {
                            int v52 = *(unsigned __int16 *)(v53 + 1) + (unsigned __int16)(v52 + 3);
                            if ((v52 & 0x10000) == 0)
                            {
                              v53 += *(unsigned __int16 *)(v53 + 1) + 3;
                              if (*((unsigned __int16 *)v23 + 1) <= (unsigned __int16)v52)
                              {
LABEL_60:
                                CFDictionaryAddValue(v103, @"ANQP_NET_AUTH_TYPE", v51);
                                goto LABEL_90;
                              }
                              continue;
                            }
                            syslog(3, "parsedLen %hu increment by value %hu os_add_overflow FAILED\n");
                          }
                        }
                      }
                      goto LABEL_90;
                    }
                  case 0x105:
                    CFMutableArrayRef v60 = CFArrayCreateMutable(v4, 0, MEMORY[0x263EFFF70]);
                    if (!v60) {
                      goto LABEL_109;
                    }
                    CFNumberRef v25 = v60;
                    if (!*((_WORD *)v23 + 1)) {
                      goto LABEL_79;
                    }
                    LOWORD(v61) = 0;
                    CFNumberRef v62 = (unsigned __int8 *)(v23 + 4);
                    do
                    {
                      memset(cStr, 0, 11);
                      unsigned int v63 = *v62;
                      if (v63 - 1 > 4)
                      {
                        LOWORD(v69) = v61 + 1;
                      }
                      else
                      {
                        unint64_t v64 = 0;
                        int v65 = 0;
                        do
                        {
                          if (v65 >= 0xBu) {
                            size_t v66 = 0;
                          }
                          else {
                            size_t v66 = 11 - v65;
                          }
                          v65 += snprintf(&cStr[v65], v66, "%02X", v62[++v64]);
                        }
                        while (v64 < *v62);
                        if ((_BYTE)v65)
                        {
                          CFStringRef v67 = CFStringCreateWithCString(v4, cStr, 0x8000100u);
                          if (v67)
                          {
                            CFStringRef v68 = v67;
                            CFArrayAppendValue(v25, v67);
                            CFRelease(v68);
                          }
                        }
                        int v69 = (unsigned __int16)v61 + 1;
                        if ((v69 & 0x10000) != 0)
                        {
                          syslog(3, "parsedLen %hu increment by value %lu os_add_overflow FAILED\n");
                          goto LABEL_107;
                        }
                        unsigned int v63 = *v62;
                      }
                      unsigned int v61 = v63 + (unsigned __int16)v69;
                      if ((v61 & 0x10000) != 0) {
                        goto LABEL_124;
                      }
                      v62 += v63 + 1;
                    }
                    while (*((unsigned __int16 *)v23 + 1) > (unsigned __int16)v61);
LABEL_79:
                    CFNumberRef v30 = v103;
                    CFNumberRef v31 = @"ANQP_ROAMING_CONSORTIUM_OI_LIST";
LABEL_99:
                    CFDictionaryAddValue(v30, v31, v25);
                    goto LABEL_107;
                  case 0x107:
                    CFMutableArrayRef v70 = CFArrayCreateMutable(v4, 0, MEMORY[0x263EFFF70]);
                    if (!v70) {
                      goto LABEL_109;
                    }
                    CFNumberRef v51 = v70;
                    if (!*((_WORD *)v23 + 2)) {
                      goto LABEL_89;
                    }
                    unsigned __int16 v71 = 0;
                    int v72 = 0;
                    while (2)
                    {
                      CFMutableDictionaryRef v73 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                      if (v73)
                      {
                        CFNumberRef v74 = v73;
                        __int16 v75 = (const UInt8 *)&v23[v71 + 6];
                        CFNumberRef v76 = CFNumberCreate(v4, kCFNumberSInt8Type, v75 + 2);
                        if (v76)
                        {
                          CFNumberRef v77 = v76;
                          CFDictionaryAddValue(v74, @"ANQP_NAI_REALM_ENCODING_TYPE", v76);
                          CFRelease(v77);
                          CFStringRef v78 = CFStringCreateWithBytes(v4, v75 + 4, v75[3], 0x8000100u, 1u);
                          if (v78)
                          {
                            CFStringRef v79 = v78;
                            CFDictionaryAddValue(v74, @"ANQP_NAI_REALM_NAME", v78);
                            CFRelease(v79);
                            CFArrayAppendValue(v51, v74);
                            CFRelease(v74);
                            int v80 = *(unsigned __int16 *)v75;
                            unsigned int v81 = (unsigned __int16)(v80 + v71);
                            if (v81 == v80 + v71)
                            {
                              unsigned __int16 v71 = v81 + 2;
                              if (v81 < 0xFFFE)
                              {
                                if (++v72 >= *((unsigned __int16 *)v23 + 2))
                                {
LABEL_89:
                                  CFDictionaryAddValue(v103, @"ANQP_NAI_REALM_LIST", v51);
                                  break;
                                }
                                continue;
                              }
                            }
                            syslog(3, "parsedLen %hu increment by value %d os_add_overflow FAILED\n");
                          }
                          else
                          {
                            syslog(3, "%s: error creating domainNameStr");
                          }
                        }
                      }
                      break;
                    }
LABEL_90:
                    CFRelease(v51);
                    goto LABEL_109;
                  case 0x108:
                    CFMutableArrayRef v82 = CFArrayCreateMutable(v4, 0, MEMORY[0x263EFFF70]);
                    if (!v82) {
                      goto LABEL_109;
                    }
                    CFNumberRef v25 = v82;
                    if (!v23[8]) {
                      goto LABEL_107;
                    }
                    unint64_t v83 = 0;
                    long long v84 = v23 + 11;
                    do
                    {
                      memset(cStr, 170, 7);
                      unsigned int v85 = *(v84 - 1);
                      if (v85 >> 4 == 15) {
                        snprintf(cStr, 7uLL, "%01X%01X%01X%01X%01X%01X", *(v84 - 2) & 0xF, *(v84 - 2) >> 4, v85 & 0xF, 15, *v84 & 0xF, *v84 >> 4);
                      }
                      else {
                        snprintf(cStr, 7uLL, "%01X%01X%01X%01X%01X%01X", *(v84 - 2) & 0xF, *(v84 - 2) >> 4, v85 & 0xF, *v84 & 0xF, *v84 >> 4, v85 >> 4);
                      }
                      CFStringRef v86 = CFStringCreateWithCString(v4, cStr, 0x8000100u);
                      CFArrayAppendValue(v25, v86);
                      CFRelease(v86);
                      ++v83;
                      v84 += 3;
                    }
                    while (v83 < v23[8]);
                    CFNumberRef v30 = v103;
                    CFNumberRef v31 = @"ANQP_CELL_NETWORK_INFO";
                    goto LABEL_99;
                  case 0x10C:
                    CFMutableArrayRef v87 = CFArrayCreateMutable(v4, 0, MEMORY[0x263EFFF70]);
                    if (!v87) {
                      goto LABEL_109;
                    }
                    CFNumberRef v25 = v87;
                    if (!*((_WORD *)v23 + 1)) {
                      goto LABEL_106;
                    }
                    LOWORD(v88) = 0;
                    int v89 = (unsigned __int8 *)(v23 + 4);
                    while (2)
                    {
                      CFStringRef v90 = CFStringCreateWithBytes(v4, v89 + 1, *v89, 0x8000100u, 1u);
                      if (v90)
                      {
                        CFStringRef v91 = v90;
                        CFArrayAppendValue(v25, v90);
                        CFRelease(v91);
                        int v88 = *v89 + (unsigned __int16)(v88 + 1);
                        if ((v88 & 0x10000) == 0)
                        {
                          v89 += *v89 + 1;
                          if (*((unsigned __int16 *)v23 + 1) <= (unsigned __int16)v88)
                          {
LABEL_106:
                            CFDictionaryAddValue(v103, @"ANQP_DOMAIN_NAME_LIST", v25);
                            break;
                          }
                          continue;
                        }
LABEL_124:
                        syslog(3, "parsedLen %hu increment by value %hhu os_add_overflow FAILED\n");
                      }
                      else
                      {
                        syslog(3, "%s: error creating domainNameStr");
                      }
                      break;
                    }
LABEL_107:
                    __int16 v92 = v25;
LABEL_108:
                    CFRelease(v92);
                    goto LABEL_109;
                  default:
                    if (*(unsigned __int16 *)v23 == 56797
                      && *((unsigned __int16 *)v23 + 1) >= 0xAu
                      && v23[4] == 80
                      && v23[5] == 111
                      && v23[6] == 154
                      && v23[7] == 17)
                    {
                      if (v23[8] == 3) {
                        _parseHs20OperatorName((uint64_t)v23, v103);
                      }
                      else {
                        syslog(3, "%s: HS20 subtype %d is not implemented yet", "_parseVendorSpecific", v23[8]);
                      }
                    }
                    goto LABEL_109;
                }
                break;
              }
            }
          }
          uint64_t v7 = 4294963396;
LABEL_147:
          *(unsigned char *)(v3 + 1656) = 0;
          pthread_mutex_unlock(v97);
          (*(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, uint64_t, void))(v3 + 72))(v7, v3, 57, v6, 8, *(void *)(v3 + 80));
          CFRelease(v6);
          break;
        case 1:
          goto LABEL_147;
        case 2:
          uint64_t v7 = 4294963391;
          goto LABEL_147;
        case 4:
          uint64_t v7 = 82;
          goto LABEL_147;
        default:
          goto LABEL_143;
      }
    }
    else
    {
      char v96 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v3 + 72);
      uint64_t v95 = *(void *)(v3 + 80);
      v96(4294963395, v3, 57, 0, 8, v95);
    }
  }
}

void _dispatchRangingResults(uint64_t a1, uint64_t a2)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v3 = a1;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    if (Mutable)
    {
      uint64_t v6 = Mutable;
      uint64_t v7 = (pthread_mutex_t *)(v3 + 1664);
      pthread_mutex_lock((pthread_mutex_t *)(v3 + 1664));
      int v8 = *(_DWORD *)(a2 + 8);
      uint64_t v9 = 4294963371;
      switch(v8)
      {
        case 0:
        case 4:
          unsigned int v10 = *(_DWORD *)(a2 + 4);
          int v100 = 0;
          int v101 = 0;
          unsigned __int16 v102 = 0;
          uint64_t v96 = v3;
          CFNumberRef v97 = (pthread_mutex_t *)(v3 + 1664);
          if (v10)
          {
            int v95 = v8;
            BOOL v11 = v8 == 4;
            memcpy(__dst, &unk_210754170, sizeof(__dst));
            long long v104 = 0u;
            long long v105 = 0u;
            CFStringRef v106 = 0;
            __strlcpy_chk();
            *(void *)((char *)&v105 + 4) = v11 | 0x70800000000;
            CFStringRef v106 = __dst;
            LODWORD(v105) = 242;
            if (v10 >= 4) {
              int v12 = 4;
            }
            else {
              int v12 = v10;
            }
            *(_DWORD *)__dst = 1;
            *(_DWORD *)&__dst[4] = v12;
            int v13 = Apple80211RawGet(v3, (uint64_t)&v104);
            if (v13)
            {
              int v90 = v13;
              CFStringRef v91 = __error();
              syslog(3, "%s:%d: [kA11UnknownErr] APPLE80211_IOC_RANGING_START returned %d (errno:%d)\n", "_getAsyncRangingResults", 570, v90, *v91);
              int v87 = -3902;
            }
            else
            {
              if (*(_DWORD *)&__dst[4])
              {
                unint64_t v14 = 0;
                CFNumberRef v15 = &__dst[88];
                unsigned int v98 = -3906;
                CFNumberRef v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
                CFNumberRef value = (void *)*MEMORY[0x263EFFB40];
                int v17 = v95;
                while (1)
                {
                  CFMutableDictionaryRef v18 = CFDictionaryCreateMutable(v4, 0, v16, MEMORY[0x263EFFF90]);
                  if (v18) {
                    break;
                  }
LABEL_61:
                  ++v14;
                  v15 += 448;
                  if (v14 >= *(unsigned int *)&__dst[4]) {
                    goto LABEL_69;
                  }
                }
                CFMutableDictionaryRef v19 = v18;
                CFNumberRef v20 = ether_ntoa((const ether_addr *)&__dst[448 * v14 + 34]);
                if (!v20)
                {
LABEL_60:
                  CFRelease(v19);
                  goto LABEL_61;
                }
                CFNumberRef v21 = v16;
                CFStringRef v22 = CFStringCreateWithCString(v4, v20, 0x8000100u);
                if (v22)
                {
                  CFStringRef v23 = v22;
                  CFDictionarySetValue(v19, @"STATION_MAC", v22);
                  CFRelease(v23);
                  CFMutableArrayRef v24 = &__dst[448 * v14];
                  int v26 = *((_DWORD *)v24 + 7);
                  CFNumberRef v25 = v24 + 28;
                  BOOL v27 = v26 == v101 && *((unsigned __int16 *)v25 + 2) == v102;
                  if (v27) {
                    goto LABEL_20;
                  }
                  CFDataRef v28 = CFDataCreate(v4, v25, 6);
                  if (v28)
                  {
                    CFDataRef v29 = v28;
                    CFDictionarySetValue(v19, @"RANGING_TOKEN_ID", v28);
                    CFRelease(v29);
LABEL_20:
                    CFNumberRef v30 = &__dst[448 * v14];
                    CFNumberRef v31 = (__int16 *)(v30 + 432);
                    CFNumberRef v32 = CFNumberCreate(v4, kCFNumberSInt16Type, v30 + 432);
                    if (v32)
                    {
                      CFNumberRef v33 = v32;
                      CFDictionarySetValue(v19, @"RANGING_FLAGS", v32);
                      CFRelease(v33);
                      __int16 v34 = *v31;
                      if ((*v31 & 0x10) != 0)
                      {
                        CFDictionarySetValue(v19, @"RANGING_INITIATOR", value);
                        __int16 v34 = *v31;
                      }
                      CFNumberRef v35 = v30 + 48;
                      BOOL v27 = (v34 & 0x40) == 0;
                      int v36 = v98;
                      if (v27) {
                        int v36 = -3933;
                      }
                      unsigned int v98 = v36;
                      if (v17 == 4 && !*((_WORD *)v35 + 193)) {
                        *((_WORD *)v35 + 193) = 4;
                      }
                      CFNumberRef v37 = CFNumberCreate(v4, kCFNumberSInt16Type, v35 + 386);
                      if (v37)
                      {
                        CFNumberRef v38 = v37;
                        CFDictionarySetValue(v19, @"RANGING_STATUS", v37);
                        CFRelease(v38);
                        float valuePtr = *((float *)v35 + 97) / 1000.0;
                        CFNumberRef v39 = CFNumberCreate(v4, kCFNumberFloatType, &valuePtr);
                        if (v39)
                        {
                          CFNumberRef v40 = v39;
                          CFDictionarySetValue(v19, @"RANGING_DISTANCE", v39);
                          CFRelease(v40);
                          CFNumberRef v41 = CFNumberCreate(v4, kCFNumberSInt16Type, v35 + 392);
                          if (v41)
                          {
                            CFNumberRef v42 = v41;
                            CFDictionarySetValue(v19, @"RANGING_SD", v41);
                            CFRelease(v42);
                            CFNumberRef v43 = CFNumberCreate(v4, kCFNumberSInt8Type, v35 + 394);
                            if (v43)
                            {
                              CFNumberRef v44 = v43;
                              CFDictionarySetValue(v19, @"RANGING_VALID_COUNT", v43);
                              CFRelease(v44);
                              CFMutableArrayRef v45 = CFArrayCreateMutable(v4, 0, MEMORY[0x263EFFF70]);
                              CFNumberRef v16 = v21;
                              if (v45)
                              {
                                __int16 v92 = v6;
                                CFArrayRef theArray = v45;
                                if (v35[395])
                                {
                                  unint64_t v46 = 0;
                                  CFStringRef v47 = v15;
                                  do
                                  {
                                    CFMutableDictionaryRef v48 = CFDictionaryCreateMutable(v4, 0, v16, MEMORY[0x263EFFF90]);
                                    if (v48)
                                    {
                                      int v49 = v48;
                                      CFNumberRef v50 = CFNumberCreate(v4, kCFNumberSInt32Type, v47 - 16);
                                      if (v50)
                                      {
                                        CFNumberRef v51 = v50;
                                        CFDictionarySetValue(v49, @"RANGING_RTT", v50);
                                        CFRelease(v51);
                                        CFNumberRef v52 = CFNumberCreate(v4, kCFNumberSInt16Type, v47 - 34);
                                        if (v52)
                                        {
                                          CFNumberRef v53 = v52;
                                          CFDictionarySetValue(v49, @"RANGING_RSSI", v52);
                                          CFRelease(v53);
                                          CFNumberRef v54 = CFNumberCreate(v4, kCFNumberSInt16Type, v47 - 20);
                                          if (v54)
                                          {
                                            CFNumberRef v55 = v54;
                                            CFDictionarySetValue(v49, @"RANGING_RTT_FLAGS", v54);
                                            CFRelease(v55);
                                            CFNumberRef v56 = CFNumberCreate(v4, kCFNumberSInt16Type, v47 - 18);
                                            if (v56)
                                            {
                                              CFNumberRef v57 = v56;
                                              CFDictionarySetValue(v49, @"RANGING_RTT_STATUS", v56);
                                              CFRelease(v57);
                                              CFNumberRef v58 = CFNumberCreate(v4, kCFNumberSInt16Type, v47 - 32);
                                              if (v58)
                                              {
                                                CFNumberRef v59 = v58;
                                                CFDictionarySetValue(v49, @"RANGING_SNR", v58);
                                                CFRelease(v59);
                                                CFNumberRef v60 = CFNumberCreate(v4, kCFNumberSInt16Type, v47 - 30);
                                                if (v60)
                                                {
                                                  CFNumberRef v61 = v60;
                                                  CFDictionarySetValue(v49, @"RANGING_PEER_SNR", v60);
                                                  CFRelease(v61);
                                                  CFNumberRef v62 = CFNumberCreate(v4, kCFNumberSInt8Type, v47 - 40);
                                                  if (v62)
                                                  {
                                                    CFNumberRef v63 = v62;
                                                    CFDictionarySetValue(v49, @"RANGING_BER", v62);
                                                    CFRelease(v63);
                                                    CFNumberRef v64 = CFNumberCreate(v4, kCFNumberSInt8Type, v47 - 39);
                                                    if (v64)
                                                    {
                                                      CFNumberRef v65 = v64;
                                                      CFDictionarySetValue(v49, @"RANGING_PEER_BER", v64);
                                                      CFRelease(v65);
                                                      LOBYTE(v66) = *(v47 - 36);
                                                      *(float *)&unint64_t v66 = (double)v66 / 100.0;
                                                      int v100 = v66;
                                                      CFNumberRef v67 = CFNumberCreate(v4, kCFNumberFloatType, &v100);
                                                      if (v67)
                                                      {
                                                        CFNumberRef v68 = v67;
                                                        CFDictionarySetValue(v49, @"RANGING_PEAK_RATIO", v67);
                                                        CFRelease(v68);
                                                        LOBYTE(v69) = *(v47 - 35);
                                                        *(float *)&unint64_t v69 = (double)v69 / 100.0;
                                                        int v100 = v69;
                                                        CFNumberRef v70 = CFNumberCreate(v4, kCFNumberFloatType, &v100);
                                                        if (v70)
                                                        {
                                                          CFNumberRef v71 = v70;
                                                          CFDictionarySetValue(v49, @"RANGING_PEER_PEAK_RATIO", v70);
                                                          CFRelease(v71);
                                                          CFNumberRef v72 = CFNumberCreate(v4, kCFNumberSInt8Type, v47 - 38);
                                                          if (v72)
                                                          {
                                                            CFNumberRef v73 = v72;
                                                            CFDictionarySetValue(v49, @"RANGING_CORE_ID", v72);
                                                            CFRelease(v73);
                                                            CFNumberRef v74 = CFNumberCreate(v4, kCFNumberSInt8Type, v47 - 37);
                                                            if (v74)
                                                            {
                                                              CFNumberRef v75 = v74;
                                                              CFDictionarySetValue(v49, @"RANGING_PEER_CORE_ID", v74);
                                                              CFRelease(v75);
                                                              CFNumberRef v76 = CFNumberCreate(v4, kCFNumberSInt32Type, v47 - 28);
                                                              if (v76)
                                                              {
                                                                CFNumberRef v77 = v76;
                                                                CFDictionarySetValue(v49, @"RANGING_PHY_ERROR", v76);
                                                                CFRelease(v77);
                                                                CFNumberRef v78 = CFNumberCreate(v4, kCFNumberSInt32Type, v47 - 24);
                                                                if (v78)
                                                                {
                                                                  CFNumberRef v79 = v78;
                                                                  CFDictionarySetValue(v49, @"RANGING_PEER_PHY_ERROR", v78);
                                                                  CFRelease(v79);
                                                                  CFNumberRef v80 = CFNumberCreate(v4, kCFNumberSInt16Type, v47 - 12);
                                                                  if (v80)
                                                                  {
                                                                    CFNumberRef v81 = v80;
                                                                    CFDictionarySetValue(v49, @"RANGING_CHANNEL", v80);
                                                                    CFRelease(v81);
                                                                    CFNumberRef v82 = CFNumberCreate(v4, kCFNumberSInt64Type, v47 - 8);
                                                                    if (v82)
                                                                    {
                                                                      CFNumberRef v83 = v82;
                                                                      CFDictionaryAddValue(v49, @"RANGING_RESULT_TIMESTAMP", v82);
                                                                      CFRelease(v83);
                                                                      CFNumberRef v84 = CFNumberCreate(v4, kCFNumberSInt32Type, v47);
                                                                      if (v84)
                                                                      {
                                                                        CFNumberRef v85 = v84;
                                                                        CFDictionarySetValue(v49, @"RANGING_GROUPDELAY_VARIANCE", v84);
                                                                        CFRelease(v85);
                                                                        CFArrayAppendValue(theArray, v49);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      CFRelease(v49);
                                      CFNumberRef v16 = v21;
                                    }
                                    ++v46;
                                    v47 += 48;
                                  }
                                  while (v46 < v35[395]);
                                }
                                unsigned int v86 = v98;
                                if (v35[394]) {
                                  unsigned int v86 = 0;
                                }
                                unsigned int v98 = v86;
                                CFDictionarySetValue(v19, @"RANGING_RESULTS", theArray);
                                CFRelease(theArray);
                                uint64_t v6 = v92;
                                CFArrayAppendValue(v92, v19);
                                int v17 = v95;
                              }
                              goto LABEL_60;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                CFNumberRef v16 = v21;
                goto LABEL_60;
              }
              int v87 = -3906;
            }
          }
          else
          {
            int v87 = -3900;
          }
          unsigned int v98 = v87;
LABEL_69:
          uint64_t v3 = v96;
          uint64_t v7 = v97;
          uint64_t v9 = v98;
LABEL_70:
          *(unsigned char *)(v3 + 1728) = 0;
          pthread_mutex_unlock(v7);
          (*(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, uint64_t, void))(v3 + 72))(v9, v3, 83, v6, 8, *(void *)(v3 + 80));
          CFRelease(v6);
          break;
        case 1:
          syslog(3, "%s:%d: [kA11UnspecifiedFailureErr] rangingEventData->status: APPLE80211_RANGING_STATUS_FAILED\n", "_dispatchRangingResults", 866);
          uint64_t v9 = 4294963390;
          goto LABEL_70;
        case 2:
          syslog(3, "%s:%d: [kA11TimeoutErr] rangingEventData->status: APPLE80211_RANGING_STATUS_ABORTED\n", "_dispatchRangingResults", 870);
          uint64_t v9 = 4294963391;
          goto LABEL_70;
        case 3:
          goto LABEL_70;
        case 5:
          uint64_t v9 = 4294963364;
          goto LABEL_70;
        default:
          syslog(3, "%s:%d: [kA11UnknownErr] unexpected rangingEventData->status: %d\n", "_dispatchRangingResults", 880, *(_DWORD *)(a2 + 8));
          uint64_t v9 = 4294963394;
          goto LABEL_70;
      }
    }
    else
    {
      int v89 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v3 + 72);
      uint64_t v88 = *(void *)(v3 + 80);
      v89(4294963395, v3, 83, 0, 8, v88);
    }
  }
}

void _dispatchDriverAvailable(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2) {
    return;
  }
  syslog(3, "%s: available %d, reason %d, subreason %d\n", "_dispatchDriverAvailable", *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    uint64_t v6 = Mutable;
    uint64_t v7 = (const void **)MEMORY[0x263EFFB40];
    if (!*(_DWORD *)(a2 + 8)) {
      uint64_t v7 = (const void **)MEMORY[0x263EFFB38];
    }
    CFDictionarySetValue(Mutable, @"DRIVER_AVAILABLE", *v7);
    uint64_t v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 16));
    if (!v8) {
      goto LABEL_20;
    }
    uint64_t v9 = (const void *)v8;
    CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_REASON", (const void *)v8);
    CFRelease(v9);
    uint64_t v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 20));
    if (!v8) {
      goto LABEL_20;
    }
    unsigned int v10 = (const void *)v8;
    CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_SUBREASON", (const void *)v8);
    CFRelease(v10);
    uint64_t v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 24));
    if (!v8) {
      goto LABEL_20;
    }
    BOOL v11 = (const void *)v8;
    CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_MINORREASON", (const void *)v8);
    CFRelease(v11);
    uint64_t v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)a2);
    if (!v8) {
      goto LABEL_20;
    }
    int v12 = (const void *)v8;
    CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_VERSION", (const void *)v8);
    CFRelease(v12);
    uint64_t v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 4));
    if (!v8) {
      goto LABEL_20;
    }
    int v13 = (const void *)v8;
    CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_FLAGS", (const void *)v8);
    CFRelease(v13);
    uint64_t v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 12));
    if (!v8) {
      goto LABEL_20;
    }
    unint64_t v14 = (const void *)v8;
    CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_EVENTID", (const void *)v8);
    CFRelease(v14);
    CFStringRef v15 = CFStringCreateWithCString(v4, (const char *)(a2 + 28), 0x8000100u);
    if (v15)
    {
      CFStringRef v16 = v15;
      CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_REASON_STRING", v15);
      CFRelease(v16);
      uint64_t v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt64Type, (const void *)(a2 + 96));
      if (!v8) {
        goto LABEL_20;
      }
      int v17 = (const void *)v8;
      CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_PROGRAM_COUNTER", (const void *)v8);
      CFRelease(v17);
      uint64_t v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt64Type, (const void *)(a2 + 104));
      if (!v8) {
        goto LABEL_20;
      }
      CFMutableDictionaryRef v18 = (const void *)v8;
      CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_LINK_REGISTER", (const void *)v8);
      CFRelease(v18);
      CFStringRef v19 = CFStringCreateWithCString(v4, (const char *)(a2 + 112), 0x8000100u);
      if (v19)
      {
        CFStringRef v20 = v19;
        CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_FILENAME", v19);
        CFRelease(v20);
        uint64_t v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 144));
        if (v8)
        {
          CFNumberRef v21 = (const void *)v8;
          CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_LINENUMBER", (const void *)v8);
          CFRelease(v21);
          CFStringRef v22 = CFStringCreateWithCString(v4, (const char *)(a2 + 148), 0x8000100u);
          if (v22)
          {
            CFStringRef v23 = v22;
            CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_FUNCTION ", v22);
            CFRelease(v23);
            uint64_t v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 180));
            if (v8)
            {
              CFMutableArrayRef v24 = (const void *)v8;
              CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_TRAP_SEQUENCE", (const void *)v8);
              CFRelease(v24);
              uint64_t v8 = 0;
            }
            goto LABEL_20;
          }
          goto LABEL_23;
        }
LABEL_20:
        (*(void (**)(uint64_t, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(v8, a1, 55, v6, 8, *(void *)(a1 + 80));
        CFRelease(v6);
        return;
      }
    }
LABEL_23:
    uint64_t v8 = 4294963395;
    goto LABEL_20;
  }
  int v26 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(a1 + 72);
  uint64_t v25 = *(void *)(a1 + 80);
  v26(4294963395, a1, 55, 0, 8, v25);
}

void _dispatchPowerStatsUpdateEvent(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      uint64_t v6 = Mutable;
      CFNumberRef v7 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)a2);
      if (v7)
      {
        CFNumberRef v8 = v7;
        CFDictionarySetValue(v6, @"POWER_STATS_TYPE", v7);
        CFRelease(v8);
        CFNumberRef v9 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 4));
        if (v9)
        {
          CFNumberRef v10 = v9;
          CFDictionarySetValue(v6, @"POWER_STATS_UNASSOCIATED_SLEEP_DURATION", v9);
          CFRelease(v10);
          CFNumberRef v11 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 8));
          if (v11)
          {
            CFNumberRef v12 = v11;
            CFDictionarySetValue(v6, @"POWER_STATS_ASSOCIATED_SLEEP_DURATION", v11);
            CFRelease(v12);
            CFNumberRef v13 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 16));
            if (v13)
            {
              CFNumberRef v14 = v13;
              CFDictionarySetValue(v6, @"POWER_STATS_TOTAL_DURATION", v13);
              CFRelease(v14);
              CFNumberRef v15 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 12));
              if (v15)
              {
                CFNumberRef v16 = v15;
                CFDictionarySetValue(v6, @"POWER_STATS_ROAM_DURATION", v15);
                CFRelease(v16);
                CFNumberRef v17 = CFNumberCreate(v4, kCFNumberFloat32Type, (const void *)(a2 + 20));
                if (v17)
                {
                  CFNumberRef v18 = v17;
                  CFDictionarySetValue(v6, @"POWER_STATS_DUTY_CYCLE", v17);
                  CFRelease(v18);
                }
              }
            }
          }
        }
      }
      (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 61, v6, 8, *(void *)(a1 + 80));
      CFRelease(v6);
    }
    else
    {
      CFStringRef v20 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(a1 + 72);
      uint64_t v19 = *(void *)(a1 + 80);
      v20(4294963395, a1, 61, 0, 8, v19);
    }
  }
}

void _dispatchBGScanCachedNetworks(uint64_t a1, int a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if (a2 >= 1)
  {
    int v2 = a2;
    CFAllocatorRef v4 = malloc_type_malloc(0x1910uLL, 0x1000040378CD1B4uLL);
    if (v4)
    {
      unsigned int v5 = v4;
      *CFAllocatorRef v4 = v2;
      long long v39 = 0u;
      long long v40 = 0u;
      __strlcpy_chk();
      LODWORD(v40) = 215;
      DWORD2(v40) = 6416;
      CFNumberRef v41 = v5;
      Apple80211IOCTLGetWrapper(a1, &v39);
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
      if (Mutable)
      {
        CFNumberRef v8 = Mutable;
        uint64_t v35 = a1;
        CFNumberRef v9 = (const ether_addr *)((char *)v5 + 4);
        int v36 = v5;
        uint64_t v10 = v5[801];
        CFNumberRef v11 = (const void *)*MEMORY[0x263EFFB40];
        CFNumberRef v12 = (const void *)*MEMORY[0x263EFFB38];
        int v34 = v2;
        while (1)
        {
          CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (!v13) {
            break;
          }
          CFNumberRef v14 = v13;
          CFNumberRef v15 = ether_ntoa(v9);
          if (!v15) {
            break;
          }
          CFStringRef v16 = CFStringCreateWithCString(v6, v15, 0x8000100u);
          if (!v16) {
            break;
          }
          CFStringRef v17 = v16;
          CFDictionarySetValue(v14, @"BSSID", v16);
          CFRelease(v17);
          CFNumberRef v18 = v9 + 2;
          CFNumberRef v19 = CFNumberCreate(v6, kCFNumberSInt32Type, &v9[2]);
          if (v19)
          {
            CFNumberRef v20 = v19;
            CFDictionaryAddValue(v14, @"CHANNEL", v19);
            CFRelease(v20);
            CFNumberRef v21 = &v18->octet[4];
            CFNumberRef v22 = CFNumberCreate(v6, kCFNumberSInt32Type, v21);
            if (v22)
            {
              CFNumberRef v23 = v22;
              CFDictionarySetValue(v14, @"RSSI", v22);
              CFRelease(v23);
              CFMutableArrayRef v24 = (*(v21 - 10) & 1) != 0 ? v11 : v12;
              CFDictionaryAddValue(v14, @"CONNECTED_BSSID", v24);
              uint64_t v25 = (const ether_addr *)(v21 - 8);
              CFNumberRef v26 = CFNumberCreate(v6, kCFNumberSInt32Type, v21 - 8);
              if (v26)
              {
                CFNumberRef v27 = v26;
                CFDictionarySetValue(v14, @"AGE", v26);
                CFRelease(v27);
                uint64_t valuePtr = v10 + 1000000000 * *(unsigned int *)v25->octet;
                CFNumberRef v28 = CFNumberCreate(v6, kCFNumberSInt64Type, &valuePtr);
                if (v28)
                {
                  CFNumberRef v29 = v28;
                  CFDictionarySetValue(v14, @"TIMESTAMP", v28);
                  CFRelease(v29);
                  CFMutableArrayRef v30 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
                  if (v30)
                  {
                    CFNumberRef v31 = v30;
                    int v37 = 5;
                    CFNumberRef v32 = CFNumberCreate(v6, kCFNumberSInt32Type, &v37);
                    if (v32)
                    {
                      CFNumberRef v33 = v32;
                      CFArrayAppendValue(v31, v32);
                      CFRelease(v33);
                      CFDictionarySetValue(v14, @"SCAN_RESULT_NET_FLAGS", v31);
                      CFRelease(v31);
                      CFDictionarySetValue(v14, @"SCAN_RESULT_FROM_BG_SCAN", v11);
                      CFArrayAppendValue(v8, v14);
                      CFRelease(v14);
                      CFNumberRef v9 = v25 + 2;
                      if (--v2) {
                        continue;
                      }
                    }
                  }
                }
              }
            }
          }
          (*(void (**)(void, uint64_t, uint64_t, __CFArray *, void, void))(v35 + 72))(0, v35, 63, v8, (20 * v34), *(void *)(v35 + 80));
          break;
        }
        CFRelease(v8);
        unsigned int v5 = v36;
      }
      free(v5);
    }
  }
}

void _dispatchScanBackoffReport(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    if (a2)
    {
      if (a3 == 16)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (Mutable)
        {
          CFAllocatorRef v6 = Mutable;
          CFNumberRef v7 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
          if (v7)
          {
            CFNumberRef v8 = v7;
            int v9 = *(_DWORD *)(a2 + 8);
            if (v9)
            {
              CFStringAppend(v7, @"SSID_GROUP");
              int v9 = *(_DWORD *)(a2 + 8);
            }
            if ((v9 & 2) != 0) {
              CFStringAppend(v8, @"BSSID_GROUP");
            }
            CFDictionaryAddValue(v6, @"SCAN_BACKOFF_REPORT_SCANGROUP", v8);
            int v10 = *(_DWORD *)(a2 + 12);
            CFNumberRef v11 = @"BACKOFF_RESET";
            if (v10 != 1) {
              CFNumberRef v11 = 0;
            }
            if (v10) {
              CFNumberRef v12 = v11;
            }
            else {
              CFNumberRef v12 = @"BACKOFF_APPLIED";
            }
            CFDictionaryAddValue(v6, @"SCAN_BACKOFF_REPORT_REASON", v12);
            (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 90, v6, 8, *(void *)(a1 + 80));
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

void _dispatchSSIDChanged(uint64_t a1, uint64_t a2, int a3)
{
  CFAllocatorRef v4 = 0;
  CFNumberRef v5 = 0;
  CFNumberRef v6 = 0;
  if (!a2 || a3 != 8) {
    goto LABEL_7;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return;
  }
  CFAllocatorRef v4 = Mutable;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)a2);
  if (v10)
  {
    CFNumberRef v5 = v10;
    CFDictionaryAddValue(v4, @"SETSSID_STATUS", v10);
    CFNumberRef v11 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a2 + 4));
    if (!v11) {
      goto LABEL_10;
    }
    CFNumberRef v6 = v11;
    CFDictionaryAddValue(v4, @"SETSSID_REASON", v11);
LABEL_7:
    (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, void, void))(a1 + 72))(0, a1, 2, v4, 8 * (v4 != 0), *(void *)(a1 + 80));
    if (v6) {
      CFRelease(v6);
    }
    if (!v5)
    {
LABEL_11:
      if (!v4) {
        return;
      }
      goto LABEL_12;
    }
LABEL_10:
    CFRelease(v5);
    goto LABEL_11;
  }
LABEL_12:
  CFRelease(v4);
}

void _dispatchDeauthReceived(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a3 == 8)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFNumberRef v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"DEAUTHRX_STATUS", v8);
          CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFDictionaryAddValue(v6, @"DEAUTHRX_REASON", v10);
            (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 34, v6, 8, *(void *)(a1 + 80));
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchDissasocReceived(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a3 == 8)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFNumberRef v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"DISASSOCRX_STATUS", v8);
          CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFDictionaryAddValue(v6, @"DISASSOCRX_REASON", v10);
            (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 72, v6, 8, *(void *)(a1 + 80));
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchDecryptionFailure(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a3 == 8)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFNumberRef v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"DECRYPTIONFAILURE_STATUS", v8);
          CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFDictionaryAddValue(v6, @"DECRPYTIONFAILURE_REASON", v10);
            (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 14, v6, 8, *(void *)(a1 + 80));
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchTxInhibitEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    if (a3)
    {
      if (v6)
      {
        int v7 = 136315394;
        CFNumberRef v8 = "_dispatchTxInhibitEvent";
        __int16 v9 = 1024;
        int v10 = a3;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Processing TX Inhibit event with DataLen: %u\n", (uint8_t *)&v7, 0x12u);
      }
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 72))(0, a1, 92, a2, a3, *(void *)(a1 + 80));
    }
    else if (v6)
    {
      int v7 = 136315394;
      CFNumberRef v8 = "_dispatchTxInhibitEvent";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: TX Inhibit event with Insufficient DataLen: %u\n", (uint8_t *)&v7, 0x12u);
    }
  }
}

void _dispatchLocalMitigationEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    if (a3 <= 0xF)
    {
      if (v6)
      {
        int v7 = 136315394;
        CFNumberRef v8 = "_dispatchLocalMitigationEvent";
        __int16 v9 = 1024;
        int v10 = a3;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Local thermal mitigation event with insufficient DataLen: %u\n", (uint8_t *)&v7, 0x12u);
      }
    }
    else
    {
      if (v6)
      {
        int v7 = 136315394;
        CFNumberRef v8 = "_dispatchLocalMitigationEvent";
        __int16 v9 = 1024;
        int v10 = a3;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Processing local thermal mitigation event with DataLen: %u\n", (uint8_t *)&v7, 0x12u);
      }
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 72))(0, a1, 93, a2, a3, *(void *)(a1 + 80));
    }
  }
}

void _dispatchPrune(uint64_t a1, const UInt8 *a2, int a3)
{
  if (a2)
  {
    if (a3 == 16)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        BOOL v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"PRUNEEVENT_STATUS", v8);
          CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 4);
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFDictionaryAddValue(v6, @"PRUNEEVENT_REASON", v10);
            CFDataRef v12 = CFDataCreate(v7, a2 + 8, 6);
            if (v12)
            {
              CFDataRef v13 = v12;
              CFDictionaryAddValue(v6, @"BSSID", v12);
              (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 75, v6, 8, *(void *)(a1 + 80));
              CFRelease(v11);
              CFNumberRef v11 = v9;
              CFNumberRef v9 = v13;
            }
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchSupplicant(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(valuePtr, 170, sizeof(valuePtr));
  if (a2)
  {
    if (a3 == 40)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        BOOL v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"SUPPLICANTEVENT_STATUS", v8);
          CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFDictionaryAddValue(v6, @"SUPPLICANTEVENT_REASON", v10);
            CFNumberRef v12 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 12));
            if (v12)
            {
              CFDictionaryAddValue(v6, @"APPLE80211KEY_SUPPLICANTEVENT_TSN_DISABLED_FLAGS", v12);
              *(_OWORD *)uint64_t valuePtr = *(_OWORD *)(a2 + 16);
              *(_DWORD *)&valuePtr[16] = *(_DWORD *)(a2 + 32);
              CFNumberRef v13 = CFNumberCreate(v7, kCFNumberSInt32Type, valuePtr);
              CFNumberRef v22 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr[4]);
              CFNumberRef v14 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr[8]);
              CFNumberRef v15 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr[12]);
              CFNumberRef v16 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr[16]);
              CFStringRef v17 = (const void **)MEMORY[0x263EFFB40];
              if (!*(unsigned char *)(a2 + 36)) {
                CFStringRef v17 = (const void **)MEMORY[0x263EFFB38];
              }
              CFNumberRef v18 = *v17;
              CFNumberRef cf = v13;
              CFNumberRef v19 = v13;
              CFNumberRef v20 = v22;
              CFDictionaryAddValue(v6, @"APPLE80211KEY_SUPPLICANTEVENT_EAPOL_START_M1_DURATION", v19);
              CFDictionaryAddValue(v6, @"APPLE80211KEY_SUPPLICANTEVENT_M1_M2_DURATION", v22);
              CFDictionaryAddValue(v6, @"APPLE80211KEY_SUPPLICANTEVENT_M2_M3_DURATION", v14);
              CFDictionaryAddValue(v6, @"APPLE80211KEY_SUPPLICANTEVENT_M3_M4_DURATION", v15);
              CFDictionaryAddValue(v6, @"APPLE80211KEY_SUPPLICANTEVENT_TOTAL_4WAY_DURATION", v16);
              CFDictionaryAddValue(v6, @"APPLE80211KEY_SUPPLICANTEVENT_JOINING_NEW_NETWORK", v18);
              (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 76, v6, 8, *(void *)(a1 + 80));
            }
            else
            {
              CFNumberRef cf = 0;
              CFNumberRef v20 = 0;
              CFNumberRef v14 = 0;
              CFNumberRef v15 = 0;
              CFNumberRef v16 = 0;
            }
            CFRelease(v11);
            CFRelease(v9);
            if (v12) {
              CFRelease(v12);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (v20) {
              CFRelease(v20);
            }
            if (v14) {
              CFRelease(v14);
            }
            if (v15) {
              CFRelease(v15);
            }
            if (!v16) {
              goto LABEL_25;
            }
            CFNumberRef v21 = v16;
          }
          else
          {
            CFNumberRef v21 = v9;
          }
          CFRelease(v21);
        }
LABEL_25:
        CFRelease(v6);
      }
    }
  }
}

void _dispatchReassoc(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a3 == 8)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        BOOL v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"REASSOCEVENT_STATUS", v8);
          CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFDictionaryAddValue(v6, @"REASSOCEVENT_REASON", v10);
            (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 73, v6, 8, *(void *)(a1 + 80));
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchAuth(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a3 == 104)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        BOOL v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"AUTHEVENT_STATUS", v8);
          CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFDictionaryAddValue(v6, @"AUTHEVENT_REASON", v10);
            (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 74, v6, 8, *(void *)(a1 + 80));
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchRoamStatus(uint64_t a1, const UInt8 *a2, int a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a3 == 168)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFMutableDictionaryRef v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, a2);
        if (!v8)
        {
LABEL_82:
          CFRelease(v6);
          return;
        }
        CFNumberRef v9 = v8;
        CFDictionaryAddValue(v6, @"ROAMEDEVENT_STATUS", v8);
        CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 4);
        if (!v10)
        {
          CFNumberRef v45 = v9;
LABEL_81:
          CFRelease(v45);
          goto LABEL_82;
        }
        CFNumberRef v11 = v10;
        CFDictionaryAddValue(v6, @"ROAMEDEVENT_REASON", v10);
        CFNumberRef v12 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 24);
        if (v12)
        {
          CFDictionaryAddValue(v6, @"ROAMEDEVENT_FLAGS", v12);
          CFNumberRef v13 = CFNumberCreate(v7, kCFNumberSInt64Type, a2 + 8);
          if (v13)
          {
            CFDictionaryAddValue(v6, @"ROAMEDEVENT_TIME_STARTED", v13);
            CFNumberRef v14 = CFNumberCreate(v7, kCFNumberSInt64Type, a2 + 16);
            if (v14)
            {
              CFDictionaryAddValue(v6, @"ROAMEDEVENT_TIME_ENDED", v14);
              CFNumberRef v15 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 28);
              if (v15)
              {
                CFNumberRef v74 = v15;
                CFDictionaryAddValue(v6, @"ROAMEDEVENT_PROFILE_TYPE", v15);
                CFNumberRef v16 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 32);
                if (v16)
                {
                  CFNumberRef v73 = v16;
                  CFDictionaryAddValue(v6, @"ROAMEDEVENT_ORIGIN_RSSI", v16);
                  CFNumberRef v17 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 36);
                  if (v17)
                  {
                    CFNumberRef v72 = v17;
                    CFDictionaryAddValue(v6, @"ROAMEDEVENT_TARGET_RSSI", v17);
                    CFNumberRef v18 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 40);
                    if (v18)
                    {
                      CFNumberRef v80 = v18;
                      CFDictionaryAddValue(v6, @"ROAMEDEVENT_ORIGIN_CHANNEL", v18);
                      CFNumberRef v19 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 44);
                      if (v19)
                      {
                        CFNumberRef v79 = v19;
                        CFDictionaryAddValue(v6, @"ROAMEDEVENT_TARGET_CHANNEL", v19);
                        CFNumberRef v20 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 48);
                        if (v20)
                        {
                          CFNumberRef v78 = v20;
                          CFDictionaryAddValue(v6, @"ROAMEDEVENT_ORIGIN_CHANNEL_FLAGS", v20);
                          CFNumberRef v21 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 52);
                          if (v21)
                          {
                            CFNumberRef v77 = v21;
                            CFDictionaryAddValue(v6, @"ROAMEDEVENT_TARGET_CHANNEL_FLAGS", v21);
                            CFDataRef v22 = CFDataCreate(v7, a2 + 56, 3);
                            if (v22)
                            {
                              CFDataRef v76 = v22;
                              CFDictionaryAddValue(v6, @"ROAMEDEVENT_ORIGIN_OUI", v22);
                              CFDataRef v23 = CFDataCreate(v7, a2 + 59, 3);
                              if (v23)
                              {
                                CFDataRef v75 = v23;
                                CFDictionaryAddValue(v6, @"ROAMEDEVENT_TARGET_OUI", v23);
                                CFNumberRef v24 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 64);
                                if (!v24) {
                                  goto LABEL_94;
                                }
                                CFDictionaryAddValue(v6, @"ROAMEDEVENT_ORIGIN_AUTHTYPE", v24);
                                CFRelease(v24);
                                CFNumberRef v24 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 68);
                                if (!v24) {
                                  goto LABEL_94;
                                }
                                CFDictionaryAddValue(v6, @"ROAMEDEVENT_TARGET_AUTHTYPE", v24);
                                CFRelease(v24);
                                CFNumberRef v24 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 72);
                                if (!v24) {
                                  goto LABEL_94;
                                }
                                CFDictionaryAddValue(v6, @"ROAMEDEVENT_ORIGIN_AKMS", v24);
                                CFRelease(v24);
                                CFNumberRef v24 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 76);
                                if (!v24
                                  || (CFDictionaryAddValue(v6, @"ROAMEDEVENT_TARGET_AKMS", v24),
                                      CFRelease(v24),
                                      (CFNumberRef v24 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 80)) == 0)
                                  || (CFDictionaryAddValue(v6, @"ROAMEDEVENT_ORIGIN_PHYMODE", v24),
                                      CFRelease(v24),
                                      (CFNumberRef v24 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 84)) == 0))
                                {
LABEL_94:
                                  CFDataRef value = 0;
                                  goto LABEL_93;
                                }
                                CFDictionaryAddValue(v6, @"ROAMEDEVENT_TARGET_PHYMODE", v24);
                                CFRelease(v24);
                                CFDataRef value = CFDataCreate(v7, a2 + 88, 6);
                                if (value)
                                {
                                  CFDictionaryAddValue(v6, @"ROAMEDEVENT_ORIGIN_ADDR", value);
                                  CFNumberRef v24 = CFDataCreate(v7, a2 + 94, 6);
                                  if (!v24) {
                                    goto LABEL_93;
                                  }
                                  CFDictionaryAddValue(v6, @"ROAMEDEVENT_TARGET_ADDR", v24);
                                  CFNumberRef v25 = CFNumberCreate(v7, kCFNumberSInt16Type, a2 + 106);
                                  if (!v25) {
                                    goto LABEL_93;
                                  }
                                  cfCC_MD5_CTX c = v25;
                                  CFDictionaryAddValue(v6, @"ROAMEDEVENT_CHANNELS_SCANNED_COUNT", v25);
                                  CFRelease(cfc);
                                  CFNumberRef cf = CFDictionaryCreateMutable(v7, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                                  if (cf)
                                  {
                                    CFDataRef v26 = CFDataCreate(v7, a2 + 108, 6);
                                    if (v26)
                                    {
                                      CFDataRef v51 = v26;
                                      CFDictionaryAddValue(cf, @"BSSID", v26);
                                      CFRelease(v51);
                                      CFNumberRef v27 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 120);
                                      if (v27)
                                      {
                                        CFNumberRef v52 = v27;
                                        CFDictionaryAddValue(cf, @"AUTHEVENT_STATUS", v27);
                                        CFRelease(v52);
                                        CFNumberRef v28 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 124);
                                        if (v28)
                                        {
                                          CFNumberRef v53 = v28;
                                          CFDictionaryAddValue(cf, @"AUTHEVENT_REASON", v28);
                                          CFRelease(v53);
                                          CFNumberRef v29 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 128);
                                          if (v29)
                                          {
                                            CFNumberRef v54 = v29;
                                            CFDictionaryAddValue(cf, @"REASSOCEVENT_STATUS", v29);
                                            CFRelease(v54);
                                            CFNumberRef v30 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 132);
                                            if (v30)
                                            {
                                              CFNumberRef v55 = v30;
                                              CFDictionaryAddValue(cf, @"REASSOCEVENT_REASON", v30);
                                              CFRelease(v55);
                                              CFNumberRef v31 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 136);
                                              if (v31)
                                              {
                                                CFNumberRef v56 = v31;
                                                CFDictionaryAddValue(cf, @"SUPPLICANTEVENT_STATUS", v31);
                                                CFRelease(v56);
                                                CFNumberRef v32 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 140);
                                                if (v32)
                                                {
                                                  CFNumberRef v57 = v32;
                                                  CFDictionaryAddValue(cf, @"SUPPLICANTEVENT_REASON", v32);
                                                  CFRelease(v57);
                                                  CFNumberRef v33 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 116);
                                                  if (v33)
                                                  {
                                                    CFNumberRef v58 = v33;
                                                    CFDictionaryAddValue(cf, @"ROAM_STATUS_SUBSTATE_FLAGS", v33);
                                                    CFRelease(v58);
                                                    CFDictionarySetValue(v6, @"ROAM_STATUS_SUBSTATE_INFO", cf);
                                                    CFRelease(cf);
                                                    CFNumberRef cfa = CFDictionaryCreateMutable(v7, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                                                    if (cfa)
                                                    {
                                                      CFNumberRef v34 = CFNumberCreate(v7, kCFNumberSInt64Type, a2 + 144);
                                                      if (v34)
                                                      {
                                                        CFNumberRef v59 = v34;
                                                        CFDictionaryAddValue(cfa, @"ROAM_SCAN_DURATION", v34);
                                                        CFRelease(v59);
                                                        CFNumberRef v35 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 152);
                                                        if (v35)
                                                        {
                                                          CFNumberRef v60 = v35;
                                                          CFDictionaryAddValue(cfa, @"ROAM_FAILED_SCAN_COUNT", v35);
                                                          CFRelease(v60);
                                                          CFNumberRef v36 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 153);
                                                          if (v36)
                                                          {
                                                            CFNumberRef v61 = v36;
                                                            CFDictionaryAddValue(cfa, @"ROAM_NUM_FULL_BAND_SCANS", v36);
                                                            CFRelease(v61);
                                                            CFNumberRef v37 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 155);
                                                            if (v37)
                                                            {
                                                              CFNumberRef v62 = v37;
                                                              CFDictionaryAddValue(cfa, @"ROAM_NUM_PARTIAL_SCANS", v37);
                                                              CFRelease(v62);
                                                              CFNumberRef v38 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 154);
                                                              if (v38)
                                                              {
                                                                CFNumberRef v63 = v38;
                                                                CFDictionaryAddValue(cfa, @"ROAM_NUM_ROAM_ATTEMPTS", v38);
                                                                CFRelease(v63);
                                                                CFNumberRef v39 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 156);
                                                                if (v39)
                                                                {
                                                                  CFNumberRef v64 = v39;
                                                                  CFDictionaryAddValue(cfa, @"ROAM_NUM_ROAM_ABORTS", v39);
                                                                  CFRelease(v64);
                                                                  CFNumberRef v40 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 157);
                                                                  if (v40)
                                                                  {
                                                                    CFNumberRef v65 = v40;
                                                                    CFDictionaryAddValue(cfa, @"ROAM_NUM_ROAM_OP_TIMEOUTS", v40);
                                                                    CFRelease(v65);
                                                                    CFNumberRef v41 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 158);
                                                                    if (v41)
                                                                    {
                                                                      CFNumberRef v66 = v41;
                                                                      CFDictionaryAddValue(cfa, @"ROAM_NUM_ROAM_OP_FAILURES", v41);
                                                                      CFRelease(v66);
                                                                      CFDictionarySetValue(v6, @"ROAM_SCAN_SUMMARY", cfa);
                                                                      CFRelease(cfa);
                                                                      cfb = CFDictionaryCreateMutable(v7, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                                                                      if (cfb)
                                                                      {
                                                                        CFNumberRef v42 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 160);
                                                                        if (v42)
                                                                        {
                                                                          CFNumberRef v67 = v42;
                                                                          CFDictionaryAddValue(cfb, @"ROAM_PKTS_PENDING_AQM", v42);
                                                                          CFRelease(v67);
                                                                          CFNumberRef v43 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 161);
                                                                          if (v43)
                                                                          {
                                                                            CFNumberRef v44 = v43;
                                                                            CFDictionaryAddValue(cfb, @"ROAM_PKTS_PENDING_TXSUBQ", v43);
                                                                            CFRelease(v44);
                                                                            CFDictionarySetValue(v6, @"ROAM_PKT_LOSS_INFO", cfb);
                                                                            CFRelease(cfb);
                                                                            (*(void (**)(void, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, void))(a1 + 72))(0, a1, 80, v6, 8, *(void *)(a1 + 80));
LABEL_93:
                                                                            CFNumberRef v47 = v73;
                                                                            CFNumberRef v46 = v74;
                                                                            CFNumberRef v48 = v72;
                                                                            goto LABEL_53;
                                                                          }
                                                                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))goto LABEL_93; {
                                                                          *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                                          }
                                                                          CFNumberRef v83 = "_dispatchRoamStatus";
                                                                          int v49 = &_os_log_internal;
                                                                          CFNumberRef v50 = "%s:Pkt Loss PendingInTxSubQ allocation Failed!\n";
                                                                        }
                                                                        else
                                                                        {
                                                                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))goto LABEL_93; {
                                                                          *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                                          }
                                                                          CFNumberRef v83 = "_dispatchRoamStatus";
                                                                          int v49 = &_os_log_internal;
                                                                          CFNumberRef v50 = "%s:Pkt Loss PendingInAQM allocation Failed!\n";
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))goto LABEL_93; {
                                                                        *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                                        }
                                                                        CFNumberRef v83 = "_dispatchRoamStatus";
                                                                        int v49 = &_os_log_internal;
                                                                        CFNumberRef v50 = "%s:array allocation Failed!\n";
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))goto LABEL_93; {
                                                                      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                                      }
                                                                      CFNumberRef v83 = "_dispatchRoamStatus";
                                                                      int v49 = &_os_log_internal;
                                                                      CFNumberRef v50 = "%s:Roam OP Failure Duration allocation Failed!\n";
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))goto LABEL_93; {
                                                                    *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                                    }
                                                                    CFNumberRef v83 = "_dispatchRoamStatus";
                                                                    int v49 = &_os_log_internal;
                                                                    CFNumberRef v50 = "%s:Roam Scan Op Timeout allocation Failed!\n";
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))goto LABEL_93; {
                                                                  *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                                  }
                                                                  CFNumberRef v83 = "_dispatchRoamStatus";
                                                                  int v49 = &_os_log_internal;
                                                                  CFNumberRef v50 = "%s:Num Roam aborts allocation Failed!\n";
                                                                }
                                                              }
                                                              else
                                                              {
                                                                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))goto LABEL_93; {
                                                                *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                                }
                                                                CFNumberRef v83 = "_dispatchRoamStatus";
                                                                int v49 = &_os_log_internal;
                                                                CFNumberRef v50 = "%s:Roam Attempts allocation Failed!\n";
                                                              }
                                                            }
                                                            else
                                                            {
                                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))goto LABEL_93; {
                                                              *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                              }
                                                              CFNumberRef v83 = "_dispatchRoamStatus";
                                                              int v49 = &_os_log_internal;
                                                              CFNumberRef v50 = "%s:Partial Scan Num allocation Failed!\n";
                                                            }
                                                          }
                                                          else
                                                          {
                                                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))goto LABEL_93; {
                                                            *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                            }
                                                            CFNumberRef v83 = "_dispatchRoamStatus";
                                                            int v49 = &_os_log_internal;
                                                            CFNumberRef v50 = "%s:Full band scan count allocation Failed!\n";
                                                          }
                                                        }
                                                        else
                                                        {
                                                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))goto LABEL_93; {
                                                          *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                          }
                                                          CFNumberRef v83 = "_dispatchRoamStatus";
                                                          int v49 = &_os_log_internal;
                                                          CFNumberRef v50 = "%s:Failed Scan Count allocation Failed!\n";
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))goto LABEL_93; {
                                                        *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                        }
                                                        CFNumberRef v83 = "_dispatchRoamStatus";
                                                        int v49 = &_os_log_internal;
                                                        CFNumberRef v50 = "%s:Roam Scan Duration allocation Failed!\n";
                                                      }
                                                    }
                                                    else
                                                    {
                                                      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))goto LABEL_93; {
                                                      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                      }
                                                      CFNumberRef v83 = "_dispatchRoamStatus";
                                                      int v49 = &_os_log_internal;
                                                      CFNumberRef v50 = "%s:array allocation Failed!\n";
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                                      goto LABEL_93;
                                                    }
                                                    *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                    CFNumberRef v83 = "_dispatchRoamStatus";
                                                    int v49 = &_os_log_internal;
                                                    CFNumberRef v50 = "%s:flags allocation Failed!\n";
                                                  }
                                                }
                                                else
                                                {
                                                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                                    goto LABEL_93;
                                                  }
                                                  *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                  CFNumberRef v83 = "_dispatchRoamStatus";
                                                  int v49 = &_os_log_internal;
                                                  CFNumberRef v50 = "%s:supplEvReason allocation Failed!\n";
                                                }
                                              }
                                              else
                                              {
                                                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                                  goto LABEL_93;
                                                }
                                                *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                                CFNumberRef v83 = "_dispatchRoamStatus";
                                                int v49 = &_os_log_internal;
                                                CFNumberRef v50 = "%s:supplEvStatus allocation Failed!\n";
                                              }
                                            }
                                            else
                                            {
                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                                goto LABEL_93;
                                              }
                                              *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                              CFNumberRef v83 = "_dispatchRoamStatus";
                                              int v49 = &_os_log_internal;
                                              CFNumberRef v50 = "%s:assocReason allocation Failed!\n";
                                            }
                                          }
                                          else
                                          {
                                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                              goto LABEL_93;
                                            }
                                            *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                            CFNumberRef v83 = "_dispatchRoamStatus";
                                            int v49 = &_os_log_internal;
                                            CFNumberRef v50 = "%s:assocStatus allocation Failed!\n";
                                          }
                                        }
                                        else
                                        {
                                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                            goto LABEL_93;
                                          }
                                          *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                          CFNumberRef v83 = "_dispatchRoamStatus";
                                          int v49 = &_os_log_internal;
                                          CFNumberRef v50 = "%s:authReason allocation Failed!\n";
                                        }
                                      }
                                      else
                                      {
                                        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                          goto LABEL_93;
                                        }
                                        *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                        CFNumberRef v83 = "_dispatchRoamStatus";
                                        int v49 = &_os_log_internal;
                                        CFNumberRef v50 = "%s:authStatus allocation Failed!\n";
                                      }
                                    }
                                    else
                                    {
                                      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                        goto LABEL_93;
                                      }
                                      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                      CFNumberRef v83 = "_dispatchRoamStatus";
                                      int v49 = &_os_log_internal;
                                      CFNumberRef v50 = "%s:bssid allocation Failed!\n";
                                    }
                                  }
                                  else
                                  {
                                    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                      goto LABEL_93;
                                    }
                                    *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
                                    CFNumberRef v83 = "_dispatchRoamStatus";
                                    int v49 = &_os_log_internal;
                                    CFNumberRef v50 = "%s:array allocation Failed!\n";
                                  }
                                  _os_log_impl(&dword_210714000, v49, OS_LOG_TYPE_DEFAULT, v50, buf, 0xCu);
                                  goto LABEL_93;
                                }
LABEL_92:
                                CFDataRef value = 0;
                                CFNumberRef v24 = 0;
                                goto LABEL_93;
                              }
LABEL_91:
                              CFDataRef v75 = 0;
                              goto LABEL_92;
                            }
LABEL_90:
                            CFDataRef v76 = 0;
                            goto LABEL_91;
                          }
LABEL_89:
                          CFNumberRef v77 = 0;
                          goto LABEL_90;
                        }
LABEL_88:
                        CFNumberRef v78 = 0;
                        goto LABEL_89;
                      }
                    }
                    else
                    {
                      CFNumberRef v80 = 0;
                    }
                    CFNumberRef v79 = 0;
                    goto LABEL_88;
                  }
                  CFNumberRef v48 = 0;
                  CFNumberRef v79 = 0;
                  CFNumberRef v80 = 0;
                  CFNumberRef v77 = 0;
                  CFNumberRef v78 = 0;
                  CFDataRef v75 = 0;
                  CFDataRef v76 = 0;
                  CFDataRef value = 0;
                  CFNumberRef v24 = 0;
                  CFNumberRef v47 = v73;
                  CFNumberRef v46 = v74;
                }
                else
                {
                  CFNumberRef v47 = 0;
                  CFNumberRef v48 = 0;
                  CFNumberRef v79 = 0;
                  CFNumberRef v80 = 0;
                  CFNumberRef v77 = 0;
                  CFNumberRef v78 = 0;
                  CFDataRef v75 = 0;
                  CFDataRef v76 = 0;
                  CFDataRef value = 0;
                  CFNumberRef v24 = 0;
                  CFNumberRef v46 = v74;
                }
LABEL_53:
                CFRelease(v11);
                CFRelease(v9);
                if (v12) {
                  CFRelease(v12);
                }
                if (v13) {
                  CFRelease(v13);
                }
                if (v14) {
                  CFRelease(v14);
                }
                if (v46) {
                  CFRelease(v46);
                }
                if (v47) {
                  CFRelease(v47);
                }
                if (v48) {
                  CFRelease(v48);
                }
                if (v76) {
                  CFRelease(v76);
                }
                if (v75) {
                  CFRelease(v75);
                }
                if (v80) {
                  CFRelease(v80);
                }
                if (v79) {
                  CFRelease(v79);
                }
                if (v77) {
                  CFRelease(v77);
                }
                if (v78) {
                  CFRelease(v78);
                }
                if (value) {
                  CFRelease(value);
                }
                if (!v24) {
                  goto LABEL_82;
                }
                CFNumberRef v45 = v24;
                goto LABEL_81;
              }
            }
LABEL_52:
            CFNumberRef v46 = 0;
            CFNumberRef v47 = 0;
            CFNumberRef v48 = 0;
            CFNumberRef v79 = 0;
            CFNumberRef v80 = 0;
            CFNumberRef v77 = 0;
            CFNumberRef v78 = 0;
            CFDataRef v75 = 0;
            CFDataRef v76 = 0;
            CFDataRef value = 0;
            CFNumberRef v24 = 0;
            goto LABEL_53;
          }
        }
        else
        {
          CFNumberRef v13 = 0;
        }
        CFNumberRef v14 = 0;
        goto LABEL_52;
      }
    }
  }
}

void _dispatchAssoc(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a3 == 8)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFMutableDictionaryRef v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"ASSOCEVENT_STATUS", v8);
          CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFDictionaryAddValue(v6, @"ASSOCEVENT_REASON", v10);
            (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 78, v6, 8, *(void *)(a1 + 80));
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchRoamScanStart(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a3 == 12)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFMutableDictionaryRef v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, (const void *)a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"ROAM_LAST_STATUS", v8);
          CFRelease(v9);
          CFNumberRef v10 = CFNumberCreate(v7, kCFNumberIntType, (const void *)(a2 + 4));
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFDictionaryAddValue(v6, @"ROAM_SCAN_REASON", v10);
            CFRelease(v11);
            (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 137, v6, 8, *(void *)(a1 + 80));
          }
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchRoamScanEnd(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a2)
  {
    if (a3 == 76)
    {
      DictFromRoamState = _createDictFromRoamState(a2);
      if (DictFromRoamState)
      {
        CFNumberRef v5 = DictFromRoamState;
        (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 138, DictFromRoamState, 8, *(void *)(a1 + 80));
        CFRelease(v5);
      }
    }
  }
}

void _dispatchRoamPrep(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a3 == 12)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFMutableDictionaryRef v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, (const void *)a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"ROAM_SCAN_REASON", v8);
          CFRelease(v9);
          CFNumberRef v10 = ether_ntoa((const ether_addr *)(a2 + 4));
          if (v10)
          {
            CFStringRef v11 = CFStringCreateWithCString(v7, v10, 0x8000100u);
            if (v11)
            {
              CFStringRef v12 = v11;
              CFDictionaryAddValue(v6, @"BSSID", v11);
              CFRelease(v12);
              (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 139, v6, 8, *(void *)(a1 + 80));
            }
          }
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchBeaconCacheUpdate(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a3 == 12)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFMutableDictionaryRef v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, (const void *)a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"BEACON_CACHE_UPDATED_EVENT_STATUS", v8);
          CFRelease(v9);
          CFNumberRef v10 = CFNumberCreate(v7, kCFNumberIntType, (const void *)(a2 + 4));
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFDictionaryAddValue(v6, @"BEACON_CACHE_UPDATED_EVENT_REASON", v10);
            CFRelease(v11);
            CFNumberRef v12 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 8));
            if (v12)
            {
              CFNumberRef v13 = v12;
              CFDictionaryAddValue(v6, @"BEACON_CACHE_UPDATED_EVENT_NUM_CHAN", v12);
              CFRelease(v13);
              (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 180, v6, 8, *(void *)(a1 + 80));
            }
          }
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchBssSteeringRequest(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
    CFNumberRef v41 = "_dispatchBssSteeringRequest";
    __int16 v42 = 1024;
    LODWORD(v43) = 6203;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s:%d Processing _dispatchBssSteeringRequest\n", buf, 0x12u);
  }
  if (!a2 || a3 <= 0x4B)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
    CFNumberRef v41 = "_dispatchBssSteeringRequest";
    __int16 v42 = 1024;
    LODWORD(v43) = 6206;
    CFNumberRef v32 = &_os_log_internal;
    CFNumberRef v33 = "%s:%d Invalid event data args !\n";
    uint32_t v34 = 18;
    goto LABEL_37;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    CFNumberRef v8 = Mutable;
    CFNumberRef v9 = CFNumberCreate(v6, kCFNumberIntType, (const void *)a2);
    if (!v9)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
      CFNumberRef v41 = "_dispatchBssSteeringRequest";
      CFNumberRef v35 = &_os_log_internal;
      CFNumberRef v36 = "%s: Failed to allocate memory for Steering Request Type \n";
      goto LABEL_61;
    }
    CFNumberRef v10 = v9;
    CFDictionaryAddValue(v8, @"P2P_BSS_STEERING_REQUEST_TYPE", v9);
    CFRelease(v10);
    char valuePtr = *(_DWORD *)(a2 + 16);
    CFNumberRef v11 = CFNumberCreate(v6, kCFNumberSInt8Type, &valuePtr);
    if (!v11)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
      CFNumberRef v41 = "_dispatchBssSteeringRequest";
      CFNumberRef v35 = &_os_log_internal;
      CFNumberRef v36 = "%s: Failed to allocate memory for requestedChannel\n";
      goto LABEL_61;
    }
    CFNumberRef v12 = v11;
    CFDictionaryAddValue(v8, @"CHANNEL", v11);
    CFRelease(v12);
    CFNumberRef v13 = CFNumberCreate(v6, kCFNumberIntType, (const void *)(a2 + 20));
    if (!v13)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
      CFNumberRef v41 = "_dispatchBssSteeringRequest";
      CFNumberRef v35 = &_os_log_internal;
      CFNumberRef v36 = "%s: Failed to allocate memory for requestedChannel flags\n";
      goto LABEL_61;
    }
    CFNumberRef v14 = v13;
    CFDictionaryAddValue(v8, @"CHANNEL_FLAGS", v13);
    CFRelease(v14);
    if (*(_DWORD *)(a2 + 64) == 1)
    {
      char v38 = 4;
      CFNumberRef v15 = CFNumberCreate(v6, kCFNumberCharType, &v38);
      if (!v15)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_34;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
        CFNumberRef v41 = "_dispatchBssSteeringRequest";
        CFNumberRef v35 = &_os_log_internal;
        CFNumberRef v36 = "%s: Failed to allocate memory for steering band\n";
        goto LABEL_61;
      }
      CFNumberRef v16 = v15;
      CFDictionaryAddValue(v8, @"BAND_PREFERENCE", v15);
      CFRelease(v16);
    }
    CFNumberRef v17 = CFNumberCreate(v6, kCFNumberIntType, (const void *)(a2 + 60));
    if (v17)
    {
      CFNumberRef v18 = v17;
      CFDictionaryAddValue(v8, @"P2P_BSS_STEERING_JOIN_TIMEOUT_IN_MS", v17);
      CFRelease(v18);
      CFNumberRef v19 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a2 + 68));
      if (v19)
      {
        CFNumberRef v20 = v19;
        CFDictionaryAddValue(v8, @"ROAM_FLAGS", v19);
        CFRelease(v20);
        unsigned int v21 = *(_DWORD *)(a2 + 24);
        if (v21 >= 0x20)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_34;
          }
          *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
          CFNumberRef v41 = "_dispatchBssSteeringRequest";
          __int16 v42 = 1024;
          LODWORD(v43) = v21;
          CFNumberRef v35 = &_os_log_internal;
          CFNumberRef v36 = "%s: ssid length is invalid:%u\n";
          uint32_t v37 = 18;
LABEL_62:
          _os_log_impl(&dword_210714000, v35, OS_LOG_TYPE_DEFAULT, v36, buf, v37);
          goto LABEL_34;
        }
        if (!v21) {
          goto LABEL_31;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
          CFNumberRef v41 = "_dispatchBssSteeringRequest";
          __int16 v42 = 1024;
          LODWORD(v43) = v21;
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: ssid length is :%u\n", buf, 0x12u);
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
          CFNumberRef v41 = "_dispatchBssSteeringRequest";
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: ssid buffer = ", buf, 0xCu);
        }
        unsigned int v22 = *(_DWORD *)(a2 + 24);
        if (v22)
        {
          unsigned __int8 v23 = 0;
          CFNumberRef v24 = &_os_log_internal;
          do
          {
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              int v25 = *(unsigned __int8 *)(a2 + v23 + 28);
              *(_DWORD *)CFRunLoopTimerContext buf = 67109120;
              LODWORD(v41) = v25;
              _os_log_impl(&dword_210714000, v24, OS_LOG_TYPE_DEFAULT, "0x%0x ", buf, 8u);
              unsigned int v22 = *(_DWORD *)(a2 + 24);
            }
            ++v23;
          }
          while (v22 > v23);
        }
        CFStringRef v26 = CFStringCreateWithBytes(v6, (const UInt8 *)(a2 + 28), v22, 0x8000100u, 0);
        BOOL v27 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        if (v26)
        {
          if (v27)
          {
            int v28 = *(_DWORD *)(a2 + 24);
            *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
            CFNumberRef v41 = "_dispatchBssSteeringRequest";
            __int16 v42 = 1024;
            LODWORD(v43) = v28;
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: SSID is of length :%u\n", buf, 0x12u);
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
            CFNumberRef v41 = "_dispatchBssSteeringRequest";
            __int16 v42 = 2080;
            uint64_t v43 = a2 + 28;
            _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: SSID is :%s \n", buf, 0x16u);
          }
          CFDictionaryAddValue(v8, @"SSID_STR", v26);
          CFRelease(v26);
LABEL_31:
          CFNumberRef v29 = ether_ntoa((const ether_addr *)(a2 + 4));
          if (v29)
          {
            CFStringRef v30 = CFStringCreateWithCString(v6, v29, 0x8000100u);
            if (v30)
            {
              CFStringRef v31 = v30;
              CFDictionaryAddValue(v8, @"BSSID", v30);
              CFRelease(v31);
              (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 140, v8, 8, *(void *)(a1 + 80));
LABEL_34:
              CFRelease(v8);
              return;
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_34;
            }
            *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
            CFNumberRef v41 = "_dispatchBssSteeringRequest";
            CFNumberRef v35 = &_os_log_internal;
            CFNumberRef v36 = "%s: Failed to create bssid string \n";
          }
          else
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_34;
            }
            *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
            CFNumberRef v41 = "_dispatchBssSteeringRequest";
            CFNumberRef v35 = &_os_log_internal;
            CFNumberRef v36 = "%s: Failed to convert BSSID to Ascii format\n";
          }
          goto LABEL_61;
        }
        if (!v27) {
          goto LABEL_34;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
        CFNumberRef v41 = "_dispatchBssSteeringRequest";
        CFNumberRef v35 = &_os_log_internal;
        CFNumberRef v36 = "%s: Failed to create SSID string[kCFStringEncodingUTF8]\n";
      }
      else
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_34;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
        CFNumberRef v41 = "_dispatchBssSteeringRequest";
        CFNumberRef v35 = &_os_log_internal;
        CFNumberRef v36 = "%s: Failed to allocate memory for steering flag\n";
      }
    }
    else
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
      CFNumberRef v41 = "_dispatchBssSteeringRequest";
      CFNumberRef v35 = &_os_log_internal;
      CFNumberRef v36 = "%s: Failed to allocate memory for join timeout\n";
    }
LABEL_61:
    uint32_t v37 = 12;
    goto LABEL_62;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
    CFNumberRef v41 = "_dispatchBssSteeringRequest";
    CFNumberRef v32 = &_os_log_internal;
    CFNumberRef v33 = "%s: Failed to allocate memory for BSS-Steering Dictionary\n";
    uint32_t v34 = 12;
LABEL_37:
    _os_log_impl(&dword_210714000, v32, OS_LOG_TYPE_DEFAULT, v33, buf, v34);
  }
}

void _dispatchSoftAPLPMEvent(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a1 || !a2) {
    return;
  }
  if (a3 != 4)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v13 = 136315394;
    CFNumberRef v14 = "_dispatchSoftAPLPMEvent";
    __int16 v15 = 1024;
    int v16 = a3;
    CFNumberRef v10 = &_os_log_internal;
    CFNumberRef v11 = "%s:SoftAP LPM event with insufficient DataLen:%u\n";
    uint32_t v12 = 18;
LABEL_14:
    _os_log_impl(&dword_210714000, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v13, v12);
    return;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v13 = 136315138;
    CFNumberRef v14 = "_dispatchSoftAPLPMEvent";
    CFNumberRef v10 = &_os_log_internal;
    CFNumberRef v11 = "%s: SoftAP LPM Dictionary has NULL Data, Bail out\n";
    uint32_t v12 = 12;
    goto LABEL_14;
  }
  CFAllocatorRef v7 = Mutable;
  CFNumberRef v8 = (const void **)MEMORY[0x263EFFB40];
  if (!*a2) {
    CFNumberRef v8 = (const void **)MEMORY[0x263EFFB38];
  }
  CFNumberRef v9 = *v8;
  CFDictionaryAddValue(Mutable, @"SOFTAP_LPM", *v8);
  CFRelease(v9);
  (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 141, v7, 8, *(void *)(a1 + 80));
  CFRelease(v7);
}

void _dispatchActionFrameEvent(uint64_t a1, unsigned char *a2, unsigned int a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    if (a3 <= 2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int valuePtr = 136315394;
        CFNumberRef v32 = "_dispatchActionFrameEvent";
        __int16 v33 = 1024;
        int v34 = a3;
        CFNumberRef v24 = &_os_log_internal;
        int v25 = "%s:Action Frame Event data is insuffcient :%u\n";
        uint32_t v26 = 18;
LABEL_23:
        _os_log_impl(&dword_210714000, v24, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&valuePtr, v26);
      }
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFMutableDictionaryRef v7 = Mutable;
        if (*a2 != 10)
        {
LABEL_13:
          (*(void (**)(void, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, void))(a1 + 72))(0, a1, 143, v7, 8, *(void *)(a1 + 80));
LABEL_14:
          CFRelease(v7);
          return;
        }
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt8Type, a2);
        CFDictionaryAddValue(v7, @"CATEGORY_CODE", v9);
        CFRelease(v9);
        CFNumberRef v10 = CFNumberCreate(v8, kCFNumberSInt8Type, a2 + 1);
        CFDictionaryAddValue(v7, @"ACTION_CODE", v10);
        CFRelease(v10);
        CFNumberRef v11 = CFNumberCreate(v8, kCFNumberSInt8Type, a2 + 2);
        CFDictionaryAddValue(v7, @"DIALOG_TOKEN", v11);
        CFRelease(v11);
        int v12 = a2[1];
        if (v12 == 8)
        {
          if (a3 > 3)
          {
            CFNumberRef v21 = CFNumberCreate(v8, kCFNumberSInt8Type, a2 + 3);
            CFDictionaryAddValue(v7, @"BTM_RSP_STATUS", v21);
            CFRelease(v21);
            CFNumberRef v19 = CFNumberCreate(v8, kCFNumberSInt8Type, a2 + 4);
            CFNumberRef v20 = @"BSS_TERM_DELAY";
            goto LABEL_12;
          }
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_14;
          }
          int valuePtr = 136315394;
          CFNumberRef v32 = "_dispatchActionFrameEvent";
          __int16 v33 = 1024;
          int v34 = 3;
          unsigned int v22 = &_os_log_internal;
          unsigned __int8 v23 = "%s:BTM Response Frame Event data is insuffcient :%u\n";
        }
        else if (v12 == 7)
        {
          if (a3 > 5)
          {
            LOBYTE(valuePtr) = a2[3] & 1;
            CFNumberRef v13 = CFNumberCreate(v8, kCFNumberSInt8Type, &valuePtr);
            CFDictionaryAddValue(v7, @"PREF_CANDIDATE_INCLUDED", v13);
            CFRelease(v13);
            BOOL v30 = (a2[3] & 2) != 0;
            CFNumberRef v14 = CFNumberCreate(v8, kCFNumberSInt8Type, &v30);
            CFDictionaryAddValue(v7, @"ABRIDGED", v14);
            CFRelease(v14);
            BOOL v29 = (a2[3] & 4) != 0;
            CFNumberRef v15 = CFNumberCreate(v8, kCFNumberSInt8Type, &v29);
            CFDictionaryAddValue(v7, @"DISASSOC_IMMINENT", v15);
            CFRelease(v15);
            BOOL v28 = (a2[3] & 8) != 0;
            CFNumberRef v16 = CFNumberCreate(v8, kCFNumberSInt8Type, &v28);
            CFDictionaryAddValue(v7, @"BSS_TERM_INCLUDED", v16);
            CFRelease(v16);
            BOOL v27 = (a2[3] & 0x10) != 0;
            CFNumberRef v17 = CFNumberCreate(v8, kCFNumberSInt8Type, &v27);
            CFDictionaryAddValue(v7, @"ESS_TERM_INCLUDED", v17);
            CFRelease(v17);
            CFNumberRef v18 = CFNumberCreate(v8, kCFNumberSInt16Type, a2 + 4);
            CFDictionaryAddValue(v7, @"DISASSOC_TIMEOUT", v18);
            CFRelease(v18);
            CFNumberRef v19 = CFNumberCreate(v8, kCFNumberSInt8Type, a2 + 6);
            CFNumberRef v20 = @"VALIDITY_INTERVAL";
LABEL_12:
            CFDictionaryAddValue(v7, v20, v19);
            CFRelease(v19);
            goto LABEL_13;
          }
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_14;
          }
          int valuePtr = 136315394;
          CFNumberRef v32 = "_dispatchActionFrameEvent";
          __int16 v33 = 1024;
          int v34 = a3;
          unsigned int v22 = &_os_log_internal;
          unsigned __int8 v23 = "%s:BTM Req Frame Event data is insuffcient :%u\n";
        }
        else
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_14;
          }
          int valuePtr = 136315394;
          CFNumberRef v32 = "_dispatchActionFrameEvent";
          __int16 v33 = 1024;
          int v34 = v12;
          unsigned int v22 = &_os_log_internal;
          unsigned __int8 v23 = "%s:Invalid Action Frame Event:%u\n";
        }
        _os_log_impl(&dword_210714000, v22, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&valuePtr, 0x12u);
        goto LABEL_14;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int valuePtr = 136315138;
        CFNumberRef v32 = "_dispatchActionFrameEvent";
        CFNumberRef v24 = &_os_log_internal;
        int v25 = "%s: Could not create Action Frame Event Dictionary, Bail out\n";
        uint32_t v26 = 12;
        goto LABEL_23;
      }
    }
  }
}

void _dispatchDPS(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!a1 || !a2) {
    return;
  }
  if (a3 != 24)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v16 = 136315394;
    CFNumberRef v17 = "_dispatchDPS";
    __int16 v18 = 1024;
    int v19 = a3;
    CFNumberRef v13 = &_os_log_internal;
    CFNumberRef v14 = "%s:DPS notification with insufficient DataLen:%u\n";
    uint32_t v15 = 18;
LABEL_14:
    _os_log_impl(&dword_210714000, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v16, v15);
    return;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v16 = 136315138;
    CFNumberRef v17 = "_dispatchDPS";
    CFNumberRef v13 = &_os_log_internal;
    CFNumberRef v14 = "%s: DPS Notification Dictionary has NULL Data, Bail out\n";
    uint32_t v15 = 12;
    goto LABEL_14;
  }
  CFMutableDictionaryRef v7 = Mutable;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, a2);
  CFDictionaryAddValue(v7, @"DPS_AC", v9);
  CFRelease(v9);
  CFNumberRef v10 = CFNumberCreate(v8, kCFNumberSInt32Type, a2 + 2);
  CFDictionaryAddValue(v7, @"DPS_CCA", v10);
  CFRelease(v10);
  CFNumberRef v11 = CFNumberCreate(v8, kCFNumberLongLongType, a2 + 4);
  CFDictionaryAddValue(v7, @"DPS_TIMESTAMP", v11);
  CFRelease(v11);
  int v12 = (const void **)MEMORY[0x263EFFB40];
  if (!a2[1]) {
    int v12 = (const void **)MEMORY[0x263EFFB38];
  }
  CFDictionaryAddValue(v7, @"DPS_SYMPTOMS_TRIGGER", *v12);
  (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 150, v7, 8, *(void *)(a1 + 80));
  CFRelease(v7);
}

void _dispatchP2PCountryCodeChange(uint64_t a1, const char *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315394;
      CFNumberRef v13 = "_dispatchP2PCountryCodeChange";
      __int16 v14 = 2080;
      uint32_t v15 = a2 + 4;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: CountryCode : %s \n", (uint8_t *)&v12, 0x16u);
    }
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFAllocatorRef v6 = Mutable;
      uint64_t v7 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, a2);
      if (v7)
      {
        CFAllocatorRef v8 = (const void *)v7;
        CFDictionarySetValue(v6, @"P2P_CC_VERSION", (const void *)v7);
        CFRelease(v8);
        CFStringRef v9 = CFStringCreateWithCString(v4, a2 + 4, 0x8000100u);
        if (v9)
        {
          CFStringRef v10 = v9;
          CFDictionarySetValue(v6, @"P2P_CC_COUNTRY", v9);
          CFRelease(v10);
          uint64_t v7 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, a2 + 8);
          if (v7)
          {
            CFNumberRef v11 = (const void *)v7;
            CFDictionarySetValue(v6, @"P2P_CC_FLAGS", (const void *)v7);
            CFRelease(v11);
            uint64_t v7 = 0;
          }
        }
        else
        {
          uint64_t v7 = 4294963395;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(v7, a1, 210, v6, 8, *(void *)(a1 + 80));
      CFRelease(v6);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(a1 + 72))(4294963395, a1, 210, 0, 8, *(void *)(a1 + 80));
    }
  }
}

void _dispatchSlowWiFi(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    if (a3 == 24)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        uint64_t v7 = Mutable;
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)(a2 + 8));
        if (v9)
        {
          CFNumberRef v10 = v9;
          CFDictionaryAddValue(v7, @"SLOWWIFI_ACTION_STAGE", v9);
          CFRelease(v10);
          CFNumberRef v11 = CFNumberCreate(v8, kCFNumberSInt32Type, (const void *)(a2 + 12));
          if (v11)
          {
            CFNumberRef v12 = v11;
            CFDictionaryAddValue(v7, @"SLOWWIFI_ACTION_TYPE", v11);
            CFRelease(v12);
            CFNumberRef v13 = CFNumberCreate(v8, kCFNumberSInt32Type, (const void *)(a2 + 16));
            if (v13)
            {
              CFNumberRef v14 = v13;
              CFDictionaryAddValue(v7, @"SLOWWIFI_ACTION_REASON", v13);
              CFRelease(v14);
              uint32_t v15 = (const void *)*MEMORY[0x263EFFB40];
              uint64_t v16 = (const void *)*MEMORY[0x263EFFB38];
              if ((*(unsigned char *)a2 & 2) != 0) {
                CFNumberRef v17 = (const void *)*MEMORY[0x263EFFB40];
              }
              else {
                CFNumberRef v17 = (const void *)*MEMORY[0x263EFFB38];
              }
              CFDictionaryAddValue(v7, @"SLOWWIFI_IS_BAP_AP", v17);
              if (*(unsigned char *)a2) {
                __int16 v18 = v15;
              }
              else {
                __int16 v18 = v16;
              }
              CFDictionaryAddValue(v7, @"SLOWWIFI_RECOVERY_ENABLED", v18);
              CFNumberRef v19 = CFNumberCreate(v8, kCFNumberSInt32Type, (const void *)(a2 + 20));
              if (v19)
              {
                CFNumberRef v20 = v19;
                CFDictionaryAddValue(v7, @"SLOWWIFI_USER_INPUT", v19);
                CFRelease(v20);
                CFNumberRef v21 = ether_ntoa((const ether_addr *)(a2 + 1));
                if (v21)
                {
                  CFStringRef v22 = CFStringCreateWithCString(v8, v21, 0x8000100u);
                  if (v22)
                  {
                    CFStringRef v23 = v22;
                    CFDictionaryAddValue(v7, @"SLOWWIFI_BSSID", v22);
                    CFRelease(v23);
                    (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 151, v7, 8, *(void *)(a1 + 80));
LABEL_18:
                    CFRelease(v7);
                    return;
                  }
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_18;
                  }
                  LOWORD(v29) = 0;
                  BOOL v27 = &_os_log_internal;
                  BOOL v28 = "Failed to get bssid ref";
                }
                else
                {
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_18;
                  }
                  LOWORD(v29) = 0;
                  BOOL v27 = &_os_log_internal;
                  BOOL v28 = "Failed to get bssid string";
                }
              }
              else
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_18;
                }
                LOWORD(v29) = 0;
                BOOL v27 = &_os_log_internal;
                BOOL v28 = "Failed to allocation userInput ref";
              }
            }
            else
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_18;
              }
              LOWORD(v29) = 0;
              BOOL v27 = &_os_log_internal;
              BOOL v28 = "Failed to allocate actionReason ref";
            }
          }
          else
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_18;
            }
            LOWORD(v29) = 0;
            BOOL v27 = &_os_log_internal;
            BOOL v28 = "Failed to allocate actionType ref";
          }
        }
        else
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_18;
          }
          LOWORD(v29) = 0;
          BOOL v27 = &_os_log_internal;
          BOOL v28 = "Failed to allocate actionStage ref";
        }
        _os_log_impl(&dword_210714000, v27, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&v29, 2u);
        goto LABEL_18;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = 136315138;
        BOOL v30 = "_dispatchSlowWiFi";
        CFNumberRef v24 = &_os_log_internal;
        int v25 = "%s: SlowWiFi Notification Dictionary has NULL Data, Bail out\n";
        uint32_t v26 = 12;
        goto LABEL_24;
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = 136315394;
      BOOL v30 = "_dispatchSlowWiFi";
      __int16 v31 = 1024;
      int v32 = a3;
      CFNumberRef v24 = &_os_log_internal;
      int v25 = "%s:SlowWiFi notification with insufficient DataLen:%u\n";
      uint32_t v26 = 18;
LABEL_24:
      _os_log_impl(&dword_210714000, v24, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v29, v26);
    }
  }
}

void _dispatchSlowWiFiLinkProbeTrigger(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!a1) {
    return;
  }
  int v3 = a2;
  if (!a2) {
    return;
  }
  if (a3 != 4)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
    uint32_t v15 = "_dispatchSlowWiFiLinkProbeTrigger";
    __int16 v16 = 1024;
    int v17 = a3;
    CFNumberRef v10 = &_os_log_internal;
    CFNumberRef v11 = "%s:SlowWiFi probe trigger with insufficient DataLen:%u\n";
    uint32_t v12 = 18;
    goto LABEL_13;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
    uint32_t v15 = "_dispatchSlowWiFiLinkProbeTrigger";
    CFNumberRef v10 = &_os_log_internal;
    CFNumberRef v11 = "%s: SlowWiFi probe trigger Dictionary has NULL Data, Bail out\n";
    uint32_t v12 = 12;
LABEL_13:
    _os_log_impl(&dword_210714000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, v12);
    return;
  }
  uint64_t v7 = Mutable;
  int valuePtr = v3;
  CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  if (v8)
  {
    CFNumberRef v9 = v8;
    CFDictionaryAddValue(v7, @"SLOWWIFI_DOWNLOAD_SIZE", v8);
    CFRelease(v9);
    (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 164, v7, 8, *(void *)(a1 + 80));
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFRunLoopTimerContext buf = 0;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Failed to allocate downloadSizeRef", buf, 2u);
  }
  CFRelease(v7);
}

void _dispatchSlowWiFiUserInputTrigger(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1 || !a2) {
    return;
  }
  if (a3 != 4)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v10 = 136315394;
    CFNumberRef v11 = "_dispatchSlowWiFiUserInputTrigger";
    __int16 v12 = 1024;
    int v13 = a3;
    uint64_t v7 = &_os_log_internal;
    CFNumberRef v8 = "%s:SlowWiFi user input trigger with insufficient DataLen:%u\n";
    uint32_t v9 = 18;
LABEL_12:
    _os_log_impl(&dword_210714000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v10, v9);
    return;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v10 = 136315138;
    CFNumberRef v11 = "_dispatchSlowWiFiUserInputTrigger";
    uint64_t v7 = &_os_log_internal;
    CFNumberRef v8 = "%s: SlowWiFi user input trigger Dictionary has NULL Data, Bail out\n";
    uint32_t v9 = 12;
    goto LABEL_12;
  }
  CFMutableDictionaryRef v6 = Mutable;
  (*(void (**)(void, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, void))(a1 + 72))(0, a1, 165, Mutable, 8, *(void *)(a1 + 80));
  CFRelease(v6);
}

void _dispatchLqmCrashTracer(uint64_t a1, const void *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a1 || !a2) {
    return;
  }
  if (a3 != 4)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v13 = 136315394;
    uint64_t v14 = "_dispatchLqmCrashTracer";
    __int16 v15 = 1024;
    int v16 = a3;
    int v10 = &_os_log_internal;
    CFNumberRef v11 = "%s:LQM CrashTracer Event with insufficient DataLen:%u\n";
    uint32_t v12 = 18;
    goto LABEL_13;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v13 = 136315138;
    uint64_t v14 = "_dispatchLqmCrashTracer";
    int v10 = &_os_log_internal;
    CFNumberRef v11 = "%s: LQM CrashTracer Dictionary has NULL Data, Bail out\n";
    uint32_t v12 = 12;
LABEL_13:
    _os_log_impl(&dword_210714000, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v13, v12);
    return;
  }
  uint64_t v7 = Mutable;
  CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, a2);
  if (v8)
  {
    CFNumberRef v9 = v8;
    CFDictionaryAddValue(v7, @"LQM_CRASHTRACER_CAPTURE_REASON", v8);
    CFRelease(v9);
    (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 176, v7, 8, *(void *)(a1 + 80));
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Failed to allocate captureReasonRef\n", (uint8_t *)&v13, 2u);
  }
  CFRelease(v7);
}

void _dispatchTrafficInfoEvent(uint64_t a1, unsigned char *a2, int a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!a1 || !a2) {
    return;
  }
  if (a3 != 2)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v15 = 136315394;
    int v16 = "_dispatchTrafficInfoEvent";
    __int16 v17 = 1024;
    int v18 = a3;
    uint32_t v12 = &_os_log_internal;
    int v13 = "%s:Traffic Info event with insufficient DataLen:%u\n";
    uint32_t v14 = 18;
LABEL_18:
    _os_log_impl(&dword_210714000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v15, v14);
    return;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v15 = 136315138;
    int v16 = "_dispatchTrafficInfoEvent";
    uint32_t v12 = &_os_log_internal;
    int v13 = "%s: Traffic InfoDictionary has NULL Data, Bail out\n";
    uint32_t v14 = 12;
    goto LABEL_18;
  }
  uint64_t v7 = Mutable;
  CFNumberRef v8 = (const void *)*MEMORY[0x263EFFB40];
  CFNumberRef v9 = (const void *)*MEMORY[0x263EFFB38];
  if (*a2) {
    int v10 = (const void *)*MEMORY[0x263EFFB40];
  }
  else {
    int v10 = (const void *)*MEMORY[0x263EFFB38];
  }
  CFDictionaryAddValue(Mutable, @"CRITICAL_TRAFFIC_STATE", v10);
  CFRelease(v10);
  if (a2[1]) {
    CFNumberRef v11 = v8;
  }
  else {
    CFNumberRef v11 = v9;
  }
  CFDictionaryAddValue(v7, @"NON_CRITICAL_TRAFFIC_STATE", v11);
  CFRelease(v11);
  (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 189, v7, 8, *(void *)(a1 + 80));
  CFRelease(v7);
}

void _dispatchSensingResults(uint64_t a1, unsigned char *a2, int a3)
{
  CFAllocatorRef v4 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v5 = 4294963396;
  CFMutableDictionaryRef Mutable = 0;
  if (a2 && a3 == 4)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      CFAllocatorRef v4 = 0;
LABEL_7:
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_8;
    }
    CFAllocatorRef v4 = (char *)malloc_type_malloc(0x1054uLL, 0x1000040727A5468uLL);
    bzero(v4, 0x1054uLL);
    long long v57 = 0u;
    long long v58 = 0u;
    __strlcpy_chk();
    LODWORD(v58) = 410;
    DWORD2(v58) = 4180;
    CFNumberRef v59 = v4;
    uint64_t v7 = Apple80211RawGet(a1, (uint64_t)&v57);
    if (v7)
    {
      uint64_t v5 = v7;
      goto LABEL_7;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFNumberRef v8 = ether_ntoa((const ether_addr *)(v4 + 4));
      if (v8)
      {
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFStringRef v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v8, 0x8000100u);
        if (v10)
        {
          CFStringRef v11 = v10;
          CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_TA", v10);
          CFRelease(v11);
          uint32_t v12 = ether_ntoa((const ether_addr *)(v4 + 10));
          if (v12)
          {
            CFStringRef v13 = CFStringCreateWithCString(v9, v12, 0x8000100u);
            if (v13)
            {
              CFStringRef v14 = v13;
              CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_RA", v13);
              CFRelease(v14);
              int v15 = ether_ntoa((const ether_addr *)(v4 + 16));
              if (v15)
              {
                CFStringRef v16 = CFStringCreateWithCString(v9, v15, 0x8000100u);
                if (v16)
                {
                  CFStringRef v17 = v16;
                  CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_BSSID", v16);
                  CFRelease(v17);
                  CFNumberRef v18 = CFNumberCreate(v9, kCFNumberIntType, v4 + 24);
                  if (v18)
                  {
                    CFNumberRef v19 = v18;
                    CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_NUM_TONES", v18);
                    CFRelease(v19);
                    CFNumberRef v20 = CFNumberCreate(v9, kCFNumberIntType, v4 + 28);
                    if (v20)
                    {
                      CFNumberRef v21 = v20;
                      CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_CHANNEL", v20);
                      CFRelease(v21);
                      CFNumberRef v22 = CFNumberCreate(v9, kCFNumberIntType, v4 + 32);
                      if (v22)
                      {
                        CFNumberRef v23 = v22;
                        CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_BW", v22);
                        CFRelease(v23);
                        CFNumberRef v24 = CFNumberCreate(v9, kCFNumberIntType, v4 + 36);
                        if (v24)
                        {
                          CFNumberRef v25 = v24;
                          CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_FRAME_TYPE", v24);
                          CFRelease(v25);
                          CFNumberRef v26 = CFNumberCreate(v9, kCFNumberIntType, v4 + 40);
                          if (v26)
                          {
                            CFNumberRef v27 = v26;
                            CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_NSTS", v26);
                            CFRelease(v27);
                            CFNumberRef v28 = CFNumberCreate(v9, kCFNumberIntType, v4 + 44);
                            if (v28)
                            {
                              CFNumberRef v29 = v28;
                              CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_SLICE", v28);
                              CFRelease(v29);
                              CFNumberRef v30 = CFNumberCreate(v9, kCFNumberIntType, v4 + 48);
                              if (v30)
                              {
                                CFNumberRef v31 = v30;
                                CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_NUM_RX_CORES", v30);
                                CFRelease(v31);
                                CFNumberRef v32 = CFNumberCreate(v9, kCFNumberIntType, v4 + 52);
                                if (v32)
                                {
                                  CFNumberRef v33 = v32;
                                  CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_NUM_STREAMS", v32);
                                  CFRelease(v33);
                                  CFNumberRef v34 = CFNumberCreate(v9, kCFNumberIntType, v4 + 56);
                                  if (v34)
                                  {
                                    CFNumberRef v35 = v34;
                                    CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_AGC_GAIN", v34);
                                    CFRelease(v35);
                                    CFNumberRef v36 = v4 + 60;
                                    CFNumberRef v37 = CFNumberCreate(v9, kCFNumberIntType, v4 + 60);
                                    if (v37)
                                    {
                                      CFNumberRef v38 = v37;
                                      CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_NUM_RSSI", v37);
                                      CFRelease(v38);
                                      CFMutableArrayRef v39 = CFArrayCreateMutable(v9, 0, MEMORY[0x263EFFF70]);
                                      if (v39)
                                      {
                                        CFNumberRef v40 = v39;
                                        if (*v36)
                                        {
                                          unint64_t v41 = 0;
                                          __int16 v42 = v4 + 64;
                                          while (1)
                                          {
                                            CFNumberRef v43 = CFNumberCreate(v9, kCFNumberIntType, v42);
                                            if (!v43) {
                                              break;
                                            }
                                            CFNumberRef v44 = v43;
                                            CFArrayAppendValue(v40, v43);
                                            CFRelease(v44);
                                            ++v41;
                                            v42 += 4;
                                            if (v41 >= *v36) {
                                              goto LABEL_35;
                                            }
                                          }
                                          CFNumberRef v55 = v40;
                                          goto LABEL_44;
                                        }
LABEL_35:
                                        CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_INFO_RSSI", v40);
                                        CFRelease(v40);
                                        CFMutableArrayRef v45 = CFArrayCreateMutable(v9, 0, MEMORY[0x263EFFF70]);
                                        if (v45)
                                        {
                                          CFMutableArrayRef v46 = v45;
                                          if (*((_DWORD *)v4 + 1044) < 4u)
                                          {
LABEL_40:
                                            CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_BUFFER", v46);
                                            CFRelease(v46);
                                            CFNumberRef v51 = CFNumberCreate(v9, kCFNumberIntType, v4 + 4176);
                                            if (v51)
                                            {
                                              CFNumberRef v52 = v51;
                                              CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_BUFFER_LEN", v51);
                                              CFRelease(v52);
                                              CFAbsoluteTime valuePtr = CFAbsoluteTimeGetCurrent();
                                              CFNumberRef v53 = CFNumberCreate(v9, kCFNumberDoubleType, &valuePtr);
                                              if (v53)
                                              {
                                                CFNumberRef v54 = v53;
                                                CFDictionarySetValue(Mutable, @"SENSING_RESULTS_DATA_TIMESTAMP", v53);
                                                CFNumberRef v55 = v54;
LABEL_44:
                                                CFRelease(v55);
                                                uint64_t v5 = 0;
                                                goto LABEL_8;
                                              }
                                            }
                                          }
                                          else
                                          {
                                            unint64_t v47 = 0;
                                            CFNumberRef v48 = v4 + 80;
                                            while (1)
                                            {
                                              CFNumberRef v49 = CFNumberCreate(v9, kCFNumberIntType, v48);
                                              if (!v49) {
                                                break;
                                              }
                                              CFNumberRef v50 = v49;
                                              CFArrayAppendValue(v46, v49);
                                              CFRelease(v50);
                                              ++v47;
                                              v48 += 4;
                                              if (v47 >= (unint64_t)*((unsigned int *)v4 + 1044) >> 2) {
                                                goto LABEL_40;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v5 = 4294963396;
  }
LABEL_8:
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1736));
  *(unsigned char *)(a1 + 1800) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1736));
  (*(void (**)(uint64_t, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(v5, a1, 193, Mutable, 8, *(void *)(a1 + 80));
  if (v4) {
    free(v4);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void _dispatchTTRFromDriver(uint64_t a1, const char *a2, int a3)
{
  if (a2)
  {
    if (a3 == 260)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFMutableDictionaryRef v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"DRIVER_TTR_Reason", v8);
          CFRelease(v9);
          CFStringRef v10 = CFStringCreateWithCString(v7, a2 + 4, 0x600u);
          if (v10)
          {
            CFStringRef v11 = v10;
            CFDictionaryAddValue(v6, @"DRIVER_TTR_Reason_String", v10);
            CFRelease(v11);
            (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 196, v6, 8, *(void *)(a1 + 80));
          }
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchColocatedCacheEvent(uint64_t a1, int *a2, int a3)
{
  if (!a1 || (*(unsigned char *)(a1 + 99) & 0x40) == 0) {
    return;
  }
  if (!a3)
  {
    CFMutableArrayRef v5 = 0;
    goto LABEL_34;
  }
  if (!a2)
  {
    syslog(3, " netList is NULL \n");
    return;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (Mutable)
  {
    CFMutableArrayRef v5 = Mutable;
    if (*a2 >= 1)
    {
      CFArrayRef theArray = Mutable;
      uint64_t v8 = 0;
      CFNumberRef v9 = (const UInt8 *)(a2 + 14);
      while (1)
      {
        CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (!v10) {
          break;
        }
        CFStringRef v11 = v10;
        if (*(v9 - 20))
        {
          CFStringRef v12 = CFStringCreateWithBytes(v6, v9 - 52, *(v9 - 20), 0x8000100u, 0);
          CFDataRef v13 = CFDataCreate(v6, v9 - 52, *(v9 - 20));
        }
        else
        {
          CFStringRef v12 = 0;
          CFDataRef v13 = 0;
        }
        CFStringRef v14 = ether_ntoa((const ether_addr *)(v9 - 19));
        if (v14)
        {
          CFStringRef v15 = CFStringCreateWithCString(v6, v14, 0x8000100u);
          if (v15)
          {
            CFDictionarySetValue(v11, @"BSSID", v15);
            CFNumberRef v16 = CFNumberCreate(v6, kCFNumberSInt16Type, v9);
            if (v16)
            {
              CFNumberRef v17 = v16;
              CFDictionarySetValue(v11, @"RSSI", v16);
              CFRelease(v17);
              if (v13) {
                CFDictionarySetValue(v11, @"SSID", v13);
              }
              if (v12) {
                CFDictionarySetValue(v11, @"SSID_STR", v12);
              }
              CFArrayAppendValue(theArray, v11);
            }
            char v18 = 1;
          }
          else
          {
            char v18 = 0;
          }
        }
        else
        {
          char v18 = 0;
          CFStringRef v15 = 0;
        }
        if (v13) {
          CFRelease(v13);
        }
        if (v12) {
          CFRelease(v12);
        }
        if (v15) {
          CFRelease(v15);
        }
        CFRelease(v11);
        if ((v18 & 1) == 0) {
          break;
        }
        ++v8;
        v9 += 56;
        if (v8 >= *a2)
        {
          CFMutableArrayRef v5 = theArray;
          goto LABEL_34;
        }
      }
      CFMutableArrayRef v5 = theArray;
LABEL_35:
      CFRelease(v5);
      return;
    }
LABEL_34:
    (*(void (**)(void, uint64_t, uint64_t, CFMutableArrayRef, uint64_t, void))(a1 + 72))(0, a1, 199, v5, 8, *(void *)(a1 + 80));
    if (!v5) {
      return;
    }
    goto LABEL_35;
  }
}

void _dispatchScanForwardStatsUpdateEvent(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a3 == 64)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFAllocatorRef v6 = Mutable;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_BSS_AWAKE_CNT", v8);
          CFRelease(v9);
          CFNumberRef v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_BSS_SLEEP_CNT", v10);
            CFRelease(v11);
            CFNumberRef v12 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 8));
            if (v12)
            {
              CFNumberRef v13 = v12;
              CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_HOST_SCAN_CNT", v12);
              CFRelease(v13);
              CFNumberRef v14 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 12));
              if (v14)
              {
                CFNumberRef v15 = v14;
                CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_ROAM_SCAN_CNT", v14);
                CFRelease(v15);
                CFNumberRef v16 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 16));
                if (v16)
                {
                  CFNumberRef v17 = v16;
                  CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_PNO_SCAN_CNT", v16);
                  CFRelease(v17);
                  CFNumberRef v18 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 20));
                  if (v18)
                  {
                    CFNumberRef v19 = v18;
                    CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_EPNO_SCAN_CNT", v18);
                    CFRelease(v19);
                    CFNumberRef v20 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 24));
                    if (v20)
                    {
                      CFNumberRef v21 = v20;
                      CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_CUR_BSS_AWAKE_CNT", v20);
                      CFRelease(v21);
                      CFNumberRef v22 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 28));
                      if (v22)
                      {
                        CFNumberRef v23 = v22;
                        CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_CUR_BSS_SLEEP_CNT", v22);
                        CFRelease(v23);
                        CFNumberRef v24 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 32));
                        if (v24)
                        {
                          CFNumberRef v25 = v24;
                          CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_SCAN_DATA_AWAKE_CNT", v24);
                          CFRelease(v25);
                          CFNumberRef v26 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 36));
                          if (v26)
                          {
                            CFNumberRef v27 = v26;
                            CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_SCAN_DATA_SLEEP_CNT", v26);
                            CFRelease(v27);
                            CFNumberRef v28 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 40));
                            if (v28)
                            {
                              CFNumberRef v29 = v28;
                              CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_SPMI_MSG_AWAKE_CNT", v28);
                              CFRelease(v29);
                              CFNumberRef v30 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 44));
                              if (v30)
                              {
                                CFNumberRef v31 = v30;
                                CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_SPMI_MSG_SLEEP_CNT", v30);
                                CFRelease(v31);
                                CFNumberRef v32 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 48));
                                if (v32)
                                {
                                  CFNumberRef v33 = v32;
                                  CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_SPMI_MSG_DROP_RSSI_CNT", v32);
                                  CFRelease(v33);
                                  CFNumberRef v34 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 52));
                                  if (v34)
                                  {
                                    CFNumberRef v35 = v34;
                                    CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_SPMI_MSG_DROP_MAX_CNT", v34);
                                    CFRelease(v35);
                                    CFNumberRef v36 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 56));
                                    if (v36)
                                    {
                                      CFNumberRef v37 = v36;
                                      CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_SPMI_MSG_DROP_FAIL_CNT", v36);
                                      CFRelease(v37);
                                      CFNumberRef v38 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 60));
                                      if (v38)
                                      {
                                        CFNumberRef v39 = v38;
                                        CFDictionaryAddValue(v6, @"SCAN_FWD_STATS_BSS_DROP_LOW_MEM_CNT", v38);
                                        CFRelease(v39);
                                        (*(void (**)(void, uint64_t, uint64_t, __CFDictionary *, uint64_t, void))(a1 + 72))(0, a1, 240, v6, 8, *(void *)(a1 + 80));
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        CFRelease(v6);
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFNumberRef v40 = 0;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Invalid length in stat event", v40, 2u);
    }
  }
}

__CFDictionary *_createDictFromRoamState(unsigned __int8 *a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    int valuePtr = (char)*a1;
    CFNumberRef v4 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
    if (v4)
    {
      CFNumberRef v5 = v4;
      CFDictionaryAddValue(Mutable, @"RSSI", v4);
      CFRelease(v5);
      CFNumberRef v6 = CFNumberCreate(v2, kCFNumberIntType, a1 + 4);
      if (v6)
      {
        CFNumberRef v7 = v6;
        CFDictionaryAddValue(Mutable, @"ROAM_SCAN_REASON", v6);
        CFRelease(v7);
        CFNumberRef v8 = CFNumberCreate(v2, kCFNumberIntType, a1 + 12);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionaryAddValue(Mutable, @"ROAM_SCAN_AGE", v8);
          CFRelease(v9);
          CFNumberRef v10 = CFNumberCreate(v2, kCFNumberIntType, a1 + 8);
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFDictionaryAddValue(Mutable, @"ROAM_LAST_STATUS", v10);
            CFRelease(v11);
            int valuePtr = a1[3];
            CFNumberRef v12 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
            if (v12)
            {
              CFNumberRef v13 = v12;
              CFDictionaryAddValue(Mutable, @"ROAM_SCAN_COUNT", v12);
              CFRelease(v13);
              if (a1[1])
              {
                CFMutableArrayRef v14 = CFArrayCreateMutable(v2, 0, MEMORY[0x263EFFF70]);
                if (v14)
                {
                  CFMutableArrayRef v15 = v14;
                  if (a1[1])
                  {
                    unint64_t v16 = 0;
                    CFNumberRef v17 = a1 + 16;
                    CFNumberRef v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
                    CFNumberRef v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
                    while (1)
                    {
                      CFMutableDictionaryRef v20 = CFDictionaryCreateMutable(v2, 0, v18, v19);
                      if (!v20) {
                        break;
                      }
                      CFNumberRef v21 = v20;
                      CFNumberRef v22 = CFNumberCreate(v2, kCFNumberIntType, v17 + 8);
                      if (!v22) {
                        goto LABEL_22;
                      }
                      CFNumberRef v23 = v22;
                      CFDictionaryAddValue(v21, @"AGE", v22);
                      CFRelease(v23);
                      CFNumberRef v24 = CFNumberCreate(v2, kCFNumberSInt16Type, v17 + 12);
                      if (!v24) {
                        goto LABEL_22;
                      }
                      CFNumberRef v25 = v24;
                      CFDictionaryAddValue(v21, @"QBSS_CHAN_UTIL", v24);
                      CFRelease(v25);
                      int valuePtr = v17[6];
                      CFNumberRef v26 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
                      if (!v26) {
                        goto LABEL_22;
                      }
                      CFNumberRef v27 = v26;
                      CFDictionaryAddValue(v21, @"CHANNEL", v26);
                      CFRelease(v27);
                      int valuePtr = *((unsigned __int16 *)v17 + 8);
                      CFNumberRef v28 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
                      if (!v28) {
                        goto LABEL_22;
                      }
                      CFNumberRef v29 = v28;
                      CFDictionaryAddValue(v21, @"CHANNEL_FLAGS", v28);
                      CFRelease(v29);
                      int valuePtr = (char)v17[7];
                      CFNumberRef v30 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
                      if (!v30
                        || (CFNumberRef v31 = v30,
                            CFDictionaryAddValue(v21, @"RSSI", v30),
                            CFRelease(v31),
                            (CFNumberRef v32 = ether_ntoa((const ether_addr *)v17)) == 0)
                        || (CFStringRef v33 = CFStringCreateWithCString(v2, v32, 0x8000100u)) == 0)
                      {
LABEL_22:
                        CFRelease(v15);
                        goto LABEL_23;
                      }
                      CFStringRef v34 = v33;
                      CFDictionaryAddValue(v21, @"BSSID", v33);
                      CFRelease(v34);
                      CFArrayAppendValue(v15, v21);
                      CFRelease(v21);
                      ++v16;
                      v17 += 20;
                      if (v16 >= a1[1]) {
                        goto LABEL_20;
                      }
                    }
                  }
                  else
                  {
LABEL_20:
                    CFDictionaryAddValue(Mutable, @"ROAM_CACHE", v15);
                  }
                  CFNumberRef v21 = v15;
LABEL_23:
                  CFRelease(v21);
                }
              }
            }
          }
        }
      }
    }
  }
  return Mutable;
}

__CFDictionary *_createDictFromMloOpStats(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return Mutable;
  }
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)a1);
  if (!v4) {
    return Mutable;
  }
  CFNumberRef v5 = v4;
  CFDictionaryAddValue(Mutable, @"MLO_NUM_LINKS", v4);
  CFNumberRef v6 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 1));
  if (!v6)
  {
    CFNumberRef v10 = v5;
LABEL_14:
    CFRelease(v10);
    return Mutable;
  }
  CFNumberRef v7 = v6;
  CFDictionaryAddValue(Mutable, @"MLO_TRAF_SWITCH_ENABLED", v6);
  CFNumberRef v8 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 8));
  if (!v8)
  {
    CFNumberRef v9 = 0;
    goto LABEL_19;
  }
  CFDictionaryAddValue(Mutable, @"MLO_LINK_ADD_CNT", v8);
  CFNumberRef v9 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 4));
  if (!v9)
  {
LABEL_19:
    CFNumberRef v10 = 0;
    goto LABEL_9;
  }
  CFDictionaryAddValue(Mutable, @"MLO_LINK_DELETE_CNT", v9);
  CFNumberRef v10 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 12));
  if (v10) {
    CFDictionaryAddValue(Mutable, @"MLO_PREF_BAND_CHANGE_CNT", v10);
  }
LABEL_9:
  CFRelease(v5);
  CFRelease(v7);
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v10) {
    goto LABEL_14;
  }
  return Mutable;
}

__CFDictionary *_createDictFromMLOStats(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 0;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 1);
  __int16 valuePtr = *(_WORD *)(a1 + 1);
  __int16 v35 = v2 >> 14;
  __int16 v34 = (v2 >> 11) & 7;
  int v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 == 128) {
    LOBYTE(v3) = 0;
  }
  char v33 = v3;
  int v4 = *(unsigned __int8 *)(a1 + 10);
  if (v4 == 128) {
    LOBYTE(v4) = 0;
  }
  char v32 = v4;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return Mutable;
  }
  CFNumberRef v7 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)a1);
  if (!v7) {
    return Mutable;
  }
  CFStringRef v8 = (const __CFString *)v7;
  CFDictionaryAddValue(Mutable, @"MLO_IS_PREF_LINK", v7);
  CFNumberRef v9 = CFNumberCreate(v5, kCFNumberSInt16Type, &valuePtr);
  if (!v9)
  {
    CFStringRef v23 = v8;
LABEL_49:
    CFRelease(v23);
    return Mutable;
  }
  CFNumberRef v10 = v9;
  CFDictionaryAddValue(Mutable, @"MLO_LINK_PRI_CHANNEL", v9);
  CFNumberRef v11 = CFNumberCreate(v5, kCFNumberSInt16Type, &v35);
  CFNumberRef v30 = v10;
  CFStringRef cf = v8;
  CFNumberRef v29 = v11;
  if (!v11
    || (CFDictionaryAddValue(Mutable, @"MLO_LINK_FREQ_BAND", v11),
        (CFNumberRef v12 = CFNumberCreate(v5, kCFNumberSInt16Type, &v34)) == 0))
  {
    CFNumberRef v27 = 0;
    CFNumberRef v28 = 0;
    CFNumberRef v26 = 0;
    unint64_t v16 = 0;
LABEL_52:
    CFNumberRef v25 = 0;
    CFNumberRef v18 = 0;
    goto LABEL_53;
  }
  CFNumberRef v28 = v12;
  CFDictionaryAddValue(Mutable, @"MLO_LINK_BW", v12);
  CFNumberRef v13 = CFNumberCreate(v5, kCFNumberSInt8Type, &v33);
  if (!v13)
  {
    CFNumberRef v26 = 0;
    CFNumberRef v27 = 0;
    unint64_t v16 = 0;
    CFNumberRef v25 = 0;
    CFNumberRef v18 = 0;
    CFNumberRef v19 = 0;
    CFNumberRef v20 = 0;
    goto LABEL_56;
  }
  CFNumberRef v14 = CFNumberCreate(v5, kCFNumberSInt8Type, &v32);
  CFNumberRef v27 = v13;
  if (!v14)
  {
    CFNumberRef v25 = 0;
    CFNumberRef v26 = 0;
    unint64_t v16 = 0;
    CFNumberRef v18 = 0;
    CFNumberRef v19 = 0;
    CFNumberRef v20 = 0;
    CFNumberRef v13 = 0;
    goto LABEL_57;
  }
  CFMutableArrayRef v15 = CFArrayCreateMutable(v5, 0, MEMORY[0x263EFFF70]);
  unint64_t v16 = v15;
  CFNumberRef v26 = v14;
  if (!v15) {
    goto LABEL_52;
  }
  CFArrayAppendValue(v15, v13);
  CFArrayAppendValue(v16, v14);
  CFDictionaryAddValue(Mutable, @"PER_CORE_RSSI", v16);
  CFNumberRef v17 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 16));
  if (!v17) {
    goto LABEL_52;
  }
  CFNumberRef v25 = v17;
  CFDictionaryAddValue(Mutable, @"MLO_LINK_TX_CNT", v17);
  CFNumberRef v18 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 24));
  if (!v18)
  {
LABEL_53:
    CFNumberRef v19 = 0;
    goto LABEL_54;
  }
  CFDictionaryAddValue(Mutable, @"MLO_LINK_RX_CNT", v18);
  CFNumberRef v19 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 32));
  if (!v19)
  {
LABEL_54:
    CFNumberRef v20 = 0;
    goto LABEL_55;
  }
  CFDictionaryAddValue(Mutable, @"MLO_LINK_TX_RATE", v19);
  CFNumberRef v20 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 36));
  if (!v20)
  {
LABEL_55:
    CFNumberRef v13 = 0;
    goto LABEL_56;
  }
  CFDictionaryAddValue(Mutable, @"MLO_LINK_RX_RATE", v20);
  CFNumberRef v13 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 20));
  if (!v13)
  {
LABEL_56:
    CFNumberRef v14 = 0;
    goto LABEL_57;
  }
  CFDictionaryAddValue(Mutable, @"MLO_LINK_TX_FAIL", v13);
  CFNumberRef v14 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 28));
  if (!v14)
  {
LABEL_57:
    CFNumberRef v21 = 0;
LABEL_58:
    CFStringRef v23 = 0;
    goto LABEL_24;
  }
  CFDictionaryAddValue(Mutable, @"MLO_LINK_TX_EX_RETRY", v14);
  CFNumberRef v21 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 12));
  if (!v21) {
    goto LABEL_58;
  }
  CFDictionaryAddValue(Mutable, @"MLO_LINK_IDLE_TIME", v21);
  CFNumberRef v22 = ether_ntoa((const ether_addr *)(a1 + 3));
  if (!v22) {
    goto LABEL_58;
  }
  CFStringRef v23 = CFStringCreateWithCString(v5, v22, 0x8000100u);
  if (v23) {
    CFDictionaryAddValue(Mutable, @"BSSID", v23);
  }
LABEL_24:
  CFRelease(cf);
  CFRelease(v30);
  if (v29) {
    CFRelease(v29);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v23) {
    goto LABEL_49;
  }
  return Mutable;
}

uint64_t __Apple80211EventMonitoringHaltIOUC_block_invoke(uint64_t a1)
{
  _performEventMonitoringHaltIOUC(*(void *)(a1 + 40));
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

IONotificationPort *_performEventMonitoringHaltIOUC(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v2 = *(void *)(a1 + 1824);
    BOOL v3 = *(void *)(a1 + 1816) != 0;
    BOOL v4 = *(void *)(a1 + 1920) != 0;
    int v16 = 136315906;
    CFNumberRef v17 = "_performEventMonitoringHaltIOUC";
    __int16 v18 = 2048;
    uint64_t v19 = v2;
    __int16 v20 = 1024;
    *(_DWORD *)CFNumberRef v21 = v3;
    *(_WORD *)&v21[4] = 1024;
    *(_DWORD *)&v21[6] = v4;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: Enter, ioucPort[%p], dispatch[%u] runloop[%u]\n", (uint8_t *)&v16, 0x22u);
  }
  uint64_t result = *(IONotificationPort **)(a1 + 1824);
  if (result)
  {
    IONotificationPortDestroy(result);
    *(void *)(a1 + 1824) = 0;
    *(unsigned char *)(a1 + 1928) = 0;
    if (*(void *)(a1 + 1872))
    {
      int v6 = MEMORY[0x2166702C0](*(unsigned int *)(a1 + 1856), 1, *(unsigned int *)(a1 + 1860));
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 1872);
        uint64_t v8 = *(void *)(a1 + 1880);
        int v9 = *(_DWORD *)(a1 + 1856);
        int v10 = *(_DWORD *)(a1 + 1860);
        int v16 = 136316674;
        CFNumberRef v17 = "_destroyMemoryMappings";
        __int16 v18 = 2080;
        uint64_t v19 = a1 + 4;
        __int16 v20 = 2048;
        *(void *)CFNumberRef v21 = v7;
        *(_WORD *)&v21[8] = 2048;
        uint64_t v22 = v8;
        __int16 v23 = 1024;
        int v24 = v9;
        __int16 v25 = 1024;
        int v26 = v10;
        __int16 v27 = 1024;
        int v28 = v6;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: %s unmapped buffer info: ringBuffer: ringBuffer[0x%llx] ringSize[0x%llx], connect[0x%x] task[0x%x] retVal[0x%08x]\n", (uint8_t *)&v16, 0x3Cu);
      }
      *(_OWORD *)(a1 + 1856) = 0u;
      *(_OWORD *)(a1 + 1872) = 0u;
    }
    if (*(void *)(a1 + 1904))
    {
      int v11 = MEMORY[0x2166702C0](*(unsigned int *)(a1 + 1888), 2, *(unsigned int *)(a1 + 1892));
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 1904);
        uint64_t v13 = *(void *)(a1 + 1912);
        int v14 = *(_DWORD *)(a1 + 1888);
        int v15 = *(_DWORD *)(a1 + 1892);
        int v16 = 136316674;
        CFNumberRef v17 = "_destroyMemoryMappings";
        __int16 v18 = 2080;
        uint64_t v19 = a1 + 4;
        __int16 v20 = 2048;
        *(void *)CFNumberRef v21 = v12;
        *(_WORD *)&v21[8] = 2048;
        uint64_t v22 = v13;
        __int16 v23 = 1024;
        int v24 = v14;
        __int16 v25 = 1024;
        int v26 = v15;
        __int16 v27 = 1024;
        int v28 = v11;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: %s unmapped buffer info: ringState: ringState[0x%llx] ringSize[0x%llx], connect[0x%x] task[0x%x] retVal[0x%08x]\n", (uint8_t *)&v16, 0x3Cu);
      }
      *(_OWORD *)(a1 + 1888) = 0u;
      *(_OWORD *)(a1 + 1904) = 0u;
    }
    uint64_t result = (IONotificationPort *)IOConnectCallStructMethod(*(_DWORD *)(a1 + 1804), 4u, 0, 0, 0, 0);
    *(void *)(a1 + 1832) = 0;
    *(void *)(a1 + 1848) = 0;
    *(void *)(a1 + 1840) = 0;
  }
  return result;
}

uint64_t __Apple80211EventMonitoringHaltIOUC_block_invoke_2(uint64_t a1)
{
  _performEventMonitoringHaltIOUC(*(void *)(a1 + 40));
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    BOOL v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t __Apple80211EventMonitoringHelper_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(unsigned char *)(*(void *)(a1 + 32) + 1928) = 0;
  return Apple80211EventMonitoringHelper(v1, *(unsigned int *)(a1 + 56), *(void *)(a1 + 48), *(unsigned int *)(a1 + 60));
}

void ___checkEntitlements_block_invoke()
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v0 = SecTaskCreateFromSelf(0);
  *(void *)&long long v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  buffer[0] = v1;
  buffer[1] = v1;
  pid_t v2 = getpid();
  proc_name(v2, buffer, 0x20u);
  if (v0)
  {
    CFArrayRef v3 = (const __CFArray *)SecTaskCopyValueForEntitlement(v0, @"com.apple.private.driverkit.driver-access", 0);
    if (v3)
    {
      CFArrayRef v4 = v3;
      CFTypeID v5 = CFGetTypeID(v3);
      if (v5 == CFArrayGetTypeID())
      {
        v19.length = CFArrayGetCount(v4);
        v19.location = 0;
        int v6 = CFArrayContainsValue(v4, v19, @"com.apple.private.wifi.driverkit");
      }
      else
      {
        CFTypeID v7 = CFGetTypeID(v4);
        int v6 = v7 == CFStringGetTypeID()
          && CFEqual((CFStringRef)v4, @"com.apple.private.wifi.driverkit");
      }
      CFRelease(v4);
    }
    else
    {
      int v6 = 0;
    }
    CFArrayRef v8 = (const __CFArray *)SecTaskCopyValueForEntitlement(v0, @"com.apple.developer.driverkit.userclient-access", 0);
    if (v8)
    {
      CFArrayRef v9 = v8;
      CFTypeID v10 = CFGetTypeID(v8);
      if (v10 == CFArrayGetTypeID())
      {
        v20.length = CFArrayGetCount(v9);
        v20.location = 0;
        int v11 = CFArrayContainsValue(v9, v20, @"com.apple.DriverKit-AppleBCMWLAN");
      }
      else
      {
        CFTypeID v12 = CFGetTypeID(v9);
        int v11 = v12 == CFStringGetTypeID()
           && CFEqual((CFStringRef)v9, @"com.apple.DriverKit-AppleBCMWLAN");
      }
      CFRelease(v9);
    }
    else
    {
      int v11 = 0;
    }
    if (v6 | v11)
    {
      if (!v6 || !v11)
      {
        if (v6 || !v11 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_FAULT)) {
          goto LABEL_29;
        }
        int v15 = 136446210;
        int v16 = buffer;
        uint64_t v13 = &_os_log_internal;
        int v14 = "Process %{public}s has a deprecated entitlement for Wi-Fi user client access, please replace: \"<key>com.a"
              "pple.developer.driverkit.userclient-access</key> <string>com.apple.DriverKit-AppleBCMWLAN</string>\" with:"
              " \"<key>com.apple.private.driverkit.driver-access</key> <string>com.apple.private.wifi.driverkit</string>\"";
        goto LABEL_25;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_FAULT))
      {
        int v15 = 136446210;
        int v16 = buffer;
        uint64_t v13 = &_os_log_internal;
        int v14 = "Process %{public}s has a deprecated entitlement for Wi-Fi user client access: <key>com.apple.developer.dri"
              "verkit.userclient-access</key> <string>com.apple.DriverKit-AppleBCMWLAN</string>";
LABEL_25:
        _os_log_fault_impl(&dword_210714000, v13, OS_LOG_TYPE_FAULT, v14, (uint8_t *)&v15, 0xCu);
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_FAULT))
    {
      int v15 = 136446210;
      int v16 = buffer;
      uint64_t v13 = &_os_log_internal;
      int v14 = "Process %{public}s is missing entitlement required for Wi-Fi user-client access: <key>com.apple.private.driv"
            "erkit.driver-access</key> <string>com.apple.private.wifi.driverkit</string>";
      goto LABEL_25;
    }
LABEL_29:
    CFRelease(v0);
  }
}

void _Apple80211IOUCResume()
{
  kern_return_t v11;
  kern_return_t v12;
  BOOL v13;
  kern_return_t v14;
  int inited;
  kern_return_t v16;
  NSObject *v17;
  const char *v18;
  kern_return_t v19;
  int v20;
  size_t outputStructCnt;
  long long v22;
  long long v23;
  uint64_t v24;
  _OWORD outputStruct[16];
  char v26;
  _DWORD inputStruct[3852];
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  __CFString *v31;
  __int16 v32;
  unsigned char v33[10];
  int v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v37 = *MEMORY[0x263EF8340];
  *(unsigned char *)(v0 + 1992) = 0;
  int v1 = *(_DWORD *)(v0 + 1804);
  BOOL v2 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (v1)
  {
    if (v2)
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
      uint64_t v29 = "_Apple80211IOUCResume";
      CFNumberRef v30 = 2048;
      CFNumberRef v31 = (__CFString *)v0;
      CFArrayRef v3 = &_os_log_internal;
      CFArrayRef v4 = "%s: IOUC already opened for opaque:%p \n";
      uint32_t v5 = 22;
LABEL_4:
      _os_log_impl(&dword_210714000, v3, OS_LOG_TYPE_DEFAULT, v4, buf, v5);
      return;
    }
    return;
  }
  if (v2)
  {
    uint64_t v6 = *(void *)(v0 + 1824);
    *(_DWORD *)CFRunLoopTimerContext buf = 136316162;
    uint64_t v29 = "_Apple80211IOUCResume";
    CFNumberRef v30 = 2080;
    CFNumberRef v31 = (__CFString *)(v0 + 4);
    char v32 = 2048;
    *(_WORD *)&v33[8] = 1024;
    __int16 v34 = 0;
    __int16 v35 = 2048;
    *(void *)char v33 = v0;
    CFNumberRef v36 = v6;
    _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: ifname:%s opaque:%p, connect[%u] port[%p]\n", buf, 0x30u);
  }
  CFTypeID v7 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)(v0 + 4), 0x8000100u);
  if (v7)
  {
    CFArrayRef v8 = v7;
    io_service_t Service = _Apple80211FindService(v7);
    if (!Service)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CFRunLoopTimerContext buf = 136315394;
        uint64_t v29 = "_Apple80211IOUCResume";
        CFNumberRef v30 = 2112;
        CFNumberRef v31 = v8;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: %@ Not able to find DK Service! \n", buf, 0x16u);
      }
      goto LABEL_18;
    }
    io_object_t v10 = Service;
    int v11 = IOServiceOpen(Service, *MEMORY[0x263EF8960], 0, (io_connect_t *)(v0 + 1804));
    if (v11)
    {
      int v16 = v11;
      if (v11 == -536870174 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CFRunLoopTimerContext buf = 136315906;
        uint64_t v29 = "_Apple80211IOUCResume";
        CFNumberRef v30 = 2112;
        CFNumberRef v31 = v8;
        char v32 = 1024;
        *(_DWORD *)char v33 = -536870174;
        *(_WORD *)&v33[4] = 1024;
        *(_DWORD *)&v33[6] = -536870174;
        _os_log_fault_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_FAULT, "%s: %@ IOServiceOpen failed with %d/0x%08x", buf, 0x22u);
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)CFRunLoopTimerContext buf = 136315650;
      uint64_t v29 = "_Apple80211IOUCResume";
      CFNumberRef v30 = 2112;
      CFNumberRef v31 = v8;
      char v32 = 1024;
      *(_DWORD *)char v33 = v16;
      CFNumberRef v17 = &_os_log_internal;
      uint64_t v18 = "%s: %@ IOServiceOpen failed with %d";
      goto LABEL_35;
    }
    bzero(inputStruct, 0x3C30uLL);
    inputStruct[0] = -1071093303;
    __strlcpy_chk();
    inputStruct[3846] = 43;
    memset(outputStruct, 0, sizeof(outputStruct));
    int v26 = 0;
    size_t outputStructCnt = 256;
    CFTypeID v12 = IOConnectCallStructMethod(*(_DWORD *)(v0 + 1804), 0, inputStruct, 0x3C30uLL, outputStruct, &outputStructCnt);
    uint64_t v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (v13)
      {
        *(_DWORD *)CFRunLoopTimerContext buf = 136315650;
        uint64_t v29 = "_Apple80211IOUCResume";
        CFNumberRef v30 = 2112;
        CFNumberRef v31 = v8;
        char v32 = 1024;
        *(_DWORD *)char v33 = v12;
        CFNumberRef v17 = &_os_log_internal;
        uint64_t v18 = "%s: %@ Driver version query failed with %d";
LABEL_35:
        _os_log_impl(&dword_210714000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, 0x1Cu);
      }
    }
    else
    {
      if (v13)
      {
        *(_DWORD *)CFRunLoopTimerContext buf = 136315650;
        uint64_t v29 = "_Apple80211IOUCResume";
        CFNumberRef v30 = 2112;
        CFNumberRef v31 = v8;
        char v32 = 2080;
        *(void *)char v33 = outputStruct;
        _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: %@ Sanity test passed. Version - %s", buf, 0x20u);
      }
      size_t outputStructCnt = 1;
      int v14 = IOConnectCallStructMethod(*(_DWORD *)(v0 + 1804), 1u, 0, 0, (void *)(v0 + 1801), &outputStructCnt);
      if (!v14)
      {
        int v24 = 0;
        uint64_t v22 = 0u;
        __int16 v23 = 0u;
        *(void *)(v0 + 96) = 0;
        *(_DWORD *)(v0 + 103) = 0;
        *(void *)(v0 + 88) = 0;
        __strlcpy_chk();
        int v24 = v0 + 88;
        LODWORD(v23) = 12;
        DWORD2(v23) = 19;
        if (Apple80211RawGet(v0, (uint64_t)&v22)) {
          goto LABEL_17;
        }
        if (!*(void *)(v0 + 72)) {
          goto LABEL_17;
        }
        int inited = Apple80211EventMonitoringInitIOUC(v0, *(NSObject **)(v0 + 1816), *(__CFRunLoop **)(v0 + 1920));
        if (!inited) {
          goto LABEL_17;
        }
        CFRange v20 = inited;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        *(_DWORD *)CFRunLoopTimerContext buf = 136315650;
        uint64_t v29 = "_Apple80211IOUCResume";
        CFNumberRef v30 = 2112;
        CFNumberRef v31 = v8;
        char v32 = 1024;
        *(_DWORD *)char v33 = v20;
        CFNumberRef v17 = &_os_log_internal;
        uint64_t v18 = "%s: %@ IOUC event pipe creation failed! %d";
        goto LABEL_35;
      }
      CFRange v19 = v14;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CFRunLoopTimerContext buf = 136315650;
        uint64_t v29 = "_Apple80211IOUCResume";
        CFNumberRef v30 = 2112;
        CFNumberRef v31 = v8;
        char v32 = 1024;
        *(_DWORD *)char v33 = v19;
        CFNumberRef v17 = &_os_log_internal;
        uint64_t v18 = "%s: %@ useIOUCWhenPossible query failed with %d";
        goto LABEL_35;
      }
    }
LABEL_17:
    IOObjectRelease(v10);
LABEL_18:
    CFRelease(v8);
    return;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
    uint64_t v29 = "_Apple80211IOUCResume";
    CFArrayRef v3 = &_os_log_internal;
    CFArrayRef v4 = "%s: ifNameRef Null \n";
    uint32_t v5 = 12;
    goto LABEL_4;
  }
}

uint64_t _Apple80211IOUCHalt(uint64_t result)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v1 = result;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v2 = *(_DWORD *)(v1 + 1804);
      uint64_t v3 = *(void *)(v1 + 1824);
      int v5 = 136315906;
      uint64_t v6 = "_Apple80211IOUCHalt";
      __int16 v7 = 2048;
      uint64_t v8 = v1;
      __int16 v9 = 1024;
      int v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = v3;
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s: opaque:%p, connect[%u] port[%p]\n", (uint8_t *)&v5, 0x26u);
    }
    CFArrayRef v4 = *(IONotificationPort **)(v1 + 1824);
    if (v4)
    {
      IONotificationPortDestroy(v4);
      *(void *)(v1 + 1824) = 0;
    }
    else if (!*(void *)(v1 + 64) && !*(void *)(v1 + 56))
    {
      goto LABEL_9;
    }
    *(void *)(v1 + 1848) = 0;
    *(_OWORD *)(v1 + 1832) = 0u;
LABEL_9:
    uint64_t result = *(unsigned int *)(v1 + 1804);
    if (result)
    {
      uint64_t result = IOServiceClose(result);
      *(_DWORD *)(v1 + 1804) = 0;
    }
  }
  return result;
}

uint64_t _getRoamProfile(uint64_t a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  unsigned int v4 = *(unsigned __int8 *)(a1 + 99);
  *(_DWORD *)(a2 + 24) = 384;
  *(void *)(a2 + 32) = v14;
  if (Apple80211RawGet(a1, a2)) {
    return *__error();
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 4294963395;
  }
  __int16 v7 = Mutable;
  if (!HIDWORD(v14[0])) {
    goto LABEL_13;
  }
  int v8 = (v4 >> 6) & 1;
  _getRoamProfilePerBand(v8, v14, Mutable);
  CFDictionarySetValue(a3, @"APPLE80211KEY_ROAM_PROF_2G", v7);
  CFRelease(v7);
  __int16 v9 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v9) {
    return 4294963395;
  }
  __int16 v7 = v9;
  if (!HIDWORD(v15[0]))
  {
LABEL_13:
    uint64_t v12 = v7;
    goto LABEL_9;
  }
  _getRoamProfilePerBand(v8, v15, v9);
  CFDictionarySetValue(a3, @"APPLE80211KEY_ROAM_PROF_5G", v7);
  CFRelease(v7);
  if (HIDWORD(v16[0]))
  {
    int v10 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v10)
    {
      __int16 v11 = v10;
      _getRoamProfilePerBand(v8, v16, v10);
      CFDictionarySetValue(a3, @"APPLE80211KEY_ROAM_PROF_6G", v11);
      uint64_t v12 = v11;
LABEL_9:
      CFRelease(v12);
      return 0;
    }
    return 4294963395;
  }
  return 0;
}

uint64_t _getUCMProfile(int a1, uint64_t a2, CFDictionaryRef theDict)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v42 = 0;
  memset(v41, 0, sizeof(v41));
  long long v40 = 0u;
  CFDataRef value = 0;
  if (!CFDictionaryGetValueIfPresent(theDict, @"UCM_PROFILE_INDEX", (const void **)&value)) {
    return 4294963396;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
  BYTE4(v40) = valuePtr;
  if (valuePtr > 9u) {
    return 4294963396;
  }
  *(_DWORD *)(a2 + 24) = 56;
  *(void *)(a2 + 32) = &v40;
  if (Apple80211IOCTLGetWrapper()) {
    return *__error();
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt16Type, &v40);
  CFDictionarySetValue(theDict, @"UCM_VERSION", v6);
  CFRelease(v6);
  CFNumberRef v7 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)&v40 + 4);
  CFDictionarySetValue(theDict, @"UCM_PROFILE_INDEX", v7);
  CFRelease(v7);
  CFNumberRef v8 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)&v40 + 5);
  CFDictionarySetValue(theDict, @"UCM_MODE_STRONG_WL_BT", v8);
  CFRelease(v8);
  CFNumberRef v9 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)&v40 + 6);
  CFDictionarySetValue(theDict, @"UCM_MODE_WEAK_WL", v9);
  CFRelease(v9);
  CFNumberRef v10 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)&v40 + 7);
  CFDictionarySetValue(theDict, @"UCM_MODE_WEAK_BT", v10);
  CFRelease(v10);
  CFNumberRef v11 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)&v40 + 8);
  CFDictionarySetValue(theDict, @"UCM_MODE_WEAK_WL_BT", v11);
  CFRelease(v11);
  CFNumberRef v12 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 9));
  CFDictionarySetValue(theDict, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", v12);
  CFRelease(v12);
  CFNumberRef v13 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 0xA));
  CFDictionarySetValue(theDict, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", v13);
  CFRelease(v13);
  CFNumberRef v14 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 0xB));
  CFDictionarySetValue(theDict, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", v14);
  CFRelease(v14);
  CFNumberRef v15 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 0xC));
  CFDictionarySetValue(theDict, @"UCM_MODE_BT_LO_HI_RSSI_THRESH", v15);
  CFRelease(v15);
  CFNumberRef v16 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 0xD));
  CFDictionarySetValue(theDict, @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH", v16);
  CFRelease(v16);
  CFNumberRef v17 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 0xE));
  CFDictionarySetValue(theDict, @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH", v17);
  CFRelease(v17);
  CFNumberRef v18 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 0xF));
  CFDictionarySetValue(theDict, @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH", v18);
  CFRelease(v18);
  CFNumberRef v19 = CFNumberCreate(v5, kCFNumberSInt8Type, v41);
  CFDictionarySetValue(theDict, @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH", v19);
  CFRelease(v19);
  CFNumberRef v20 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + 1);
  CFDictionarySetValue(theDict, @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH", v20);
  CFRelease(v20);
  CFNumberRef v21 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + 2);
  CFDictionarySetValue(theDict, @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH", v21);
  CFRelease(v21);
  if ((v40 & 0xFFFE) == 2)
  {
    CFNumberRef v22 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + 3);
    CFDictionarySetValue(theDict, @"UCM_HYBRID_ANT_CORE_CONFIG", v22);
    CFRelease(v22);
  }
  if (!BYTE3(v40)) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x263EFFF70]);
  if (!Mutable) {
    return 4294963395;
  }
  CFMutableArrayRef v24 = Mutable;
  if (!BYTE3(v40))
  {
LABEL_18:
    CFDictionarySetValue(theDict, @"UCM_CHAIN_ATTR", v24);
    CFRelease(v24);
    return 0;
  }
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  while (1)
  {
    CFMutableDictionaryRef v27 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v27) {
      break;
    }
    int v28 = v27;
    if ((unsigned __int16)v40 - 1 > 1)
    {
      if ((unsigned __int16)v40 != 3) {
        goto LABEL_16;
      }
      CFNumberRef v32 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 5);
      CFDictionarySetValue(v28, @"UCM_DESENSE_STRONG_RSSI", v32);
      CFRelease(v32);
      CFNumberRef v29 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 6);
      CFNumberRef v30 = v28;
      CFNumberRef v31 = @"UCM_DESENSE_WEAK_RSSI";
    }
    else
    {
      CFNumberRef v29 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 4);
      CFNumberRef v30 = v28;
      CFNumberRef v31 = @"UCM_DESENSE_LEVEL";
    }
    CFDictionarySetValue(v30, v31, v29);
    CFRelease(v29);
LABEL_16:
    CFNumberRef v33 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 7);
    CFDictionarySetValue(v28, @"UCM_ACK_PWR_STRONG_RSSI", v33);
    CFRelease(v33);
    CFNumberRef v34 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 8);
    CFDictionarySetValue(v28, @"UCM_ACK_PWR_WEAK_RSSI", v34);
    CFRelease(v34);
    CFNumberRef v35 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 9);
    CFDictionarySetValue(v28, @"UCM_TX_PWR_STRONG_RSSI", v35);
    CFRelease(v35);
    CFNumberRef v36 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 10);
    CFDictionarySetValue(v28, @"UCM_TX_PWR_WEAK_RSSI", v36);
    CFRelease(v36);
    CFArrayAppendValue(v24, v28);
    CFRelease(v28);
    if (v26 <= 3)
    {
      ++v26;
      v25 += 7;
      if (v26 < BYTE3(v40)) {
        continue;
      }
    }
    goto LABEL_18;
  }
  CFRelease(v24);
  return 4294963395;
}

uint64_t _get2GChainDisable(uint64_t a1, uint64_t a2, __CFDictionary *a3)
{
  v8[1] = *MEMORY[0x263EF8340];
  v8[0] = 1;
  *(_DWORD *)(a2 + 24) = 8;
  *(void *)(a2 + 32) = v8;
  if (Apple80211IOCTLGetWrapper()) {
    return *__error();
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt8Type, (char *)v8 + 4);
  CFDictionarySetValue(a3, @"BTCOEX_2G_CHAIN_DISABLE", v5);
  CFRelease(v5);
  CFNumberRef v6 = CFNumberCreate(v4, kCFNumberSInt8Type, (char *)v8 + 5);
  CFDictionarySetValue(a3, @"BTCOEX_2G_CHAIN_DISABLE_REASSOC", v6);
  CFRelease(v6);
  return 0;
}

uint64_t _storeTrapInfoDataInDict(__CFDictionary *a1, uint64_t a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)(a2 + 8));
  CFDictionarySetValue(a1, @"TRAP_SEQUENECE_NUM", v5);
  CFRelease(v5);
  unsigned int v6 = *(unsigned __int16 *)(a2 + 14);
  if (v6 <= 0x200)
  {
    if (v6 < 2) {
      return 0;
    }
    CFNumberRef v7 = (unsigned __int8 *)(a2 + 16);
    CFNumberRef v8 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    while (1)
    {
      unint64_t v9 = v7[1];
      __int16 v10 = v9 + 2;
      if (v9 + 2 > (unsigned __int16)v6 || (v9 & 3) != 0) {
        break;
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(v4, 0, v8);
      CFNumberRef v13 = CFNumberCreate(v4, kCFNumberSInt8Type, v7);
      v7 += 2;
      for (unint64_t i = v9 >> 2; i; LODWORD(i) = i - 1)
      {
        CFNumberRef v15 = CFNumberCreate(v4, kCFNumberSInt8Type, v7);
        CFArrayAppendValue(Mutable, v15);
        CFRelease(v15);
        v7 += 4;
      }
      CFDictionarySetValue(a1, v13, Mutable);
      CFRelease(Mutable);
      CFRelease(v13);
      LOWORD(v6) = v6 - v10;
      if ((unsigned __int16)v6 <= 1u) {
        return 0;
      }
    }
  }
  return 4294963396;
}

uint64_t _setLQMConfigIntoDict(uint64_t a1, __CFDictionary *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, (const void *)(a1 + 4));
  if (!v5) {
    goto LABEL_18;
  }
  CFNumberRef v6 = v5;
  CFDictionarySetValue(a2, @"LQM_UPDATE_INTERVAL", v5);
  CFRelease(v6);
  CFNumberRef v7 = CFNumberCreate(v4, kCFNumberIntType, (const void *)(a1 + 8));
  if (!v7) {
    goto LABEL_18;
  }
  CFNumberRef v8 = v7;
  CFDictionarySetValue(a2, @"LQM_RSSI_UPDATE_INTERVAL", v7);
  CFRelease(v8);
  CFNumberRef v9 = CFNumberCreate(v4, kCFNumberIntType, (const void *)(a1 + 12));
  if (!v9) {
    goto LABEL_18;
  }
  CFNumberRef v10 = v9;
  CFDictionarySetValue(a2, @"LQM_CHAN_QUAL_UPDATE_INTERVAL", v9);
  CFRelease(v10);
  CFNumberRef v11 = CFNumberCreate(v4, kCFNumberSInt8Type, (const void *)(a1 + 16));
  if (!v11) {
    goto LABEL_18;
  }
  CFNumberRef v12 = v11;
  CFDictionarySetValue(a2, @"LQM_GOOD_RSSI_THRESH", v11);
  CFRelease(v12);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x263EFFF70]);
  if (Mutable)
  {
    CFNumberRef v14 = Mutable;
    uint64_t v15 = 0;
    while (1)
    {
      CFNumberRef v16 = CFNumberCreate(v4, kCFNumberSInt8Type, (const void *)(a1 + 17 + v15));
      if (!v16) {
        break;
      }
      CFNumberRef v17 = v16;
      CFArrayAppendValue(v14, v16);
      CFRelease(v17);
      if (++v15 == 7)
      {
        CFDictionarySetValue(a2, @"LQM_RSSI_LEVELS", v14);
        CFRelease(v14);
        CFNumberRef v18 = CFNumberCreate(v4, kCFNumberCharType, (const void *)(a1 + 24));
        if (v18)
        {
          CFNumberRef v19 = v18;
          CFDictionarySetValue(a2, @"LQM_CCA_HYSTERISIS", v18);
          CFRelease(v19);
          CFMutableArrayRef v20 = CFArrayCreateMutable(v4, 0, MEMORY[0x263EFFF70]);
          if (!v20) {
            goto LABEL_18;
          }
          CFNumberRef v14 = v20;
          uint64_t v21 = 0;
          uint64_t v22 = a1 + 25;
          while (1)
          {
            CFNumberRef v23 = CFNumberCreate(v4, kCFNumberCharType, (const void *)(v22 + v21));
            if (!v23) {
              break;
            }
            CFNumberRef v24 = v23;
            CFArrayAppendValue(v14, v23);
            CFRelease(v24);
            if (++v21 == 8)
            {
              CFDictionarySetValue(a2, @"LQM_CCA_BOUNDS", v14);
              uint64_t v25 = 0;
              goto LABEL_15;
            }
          }
        }
        break;
      }
    }
    CFRelease(a2);
    uint64_t v25 = 4294963395;
LABEL_15:
    a2 = v14;
  }
  else
  {
LABEL_18:
    uint64_t v25 = 4294963395;
  }
  CFRelease(a2);
  return v25;
}

uint64_t _storeTrapCrashTracerMiniDumpinDict(__CFDictionary *a1, uint64_t a2)
{
  uint64_t v3 = (unsigned int *)(a2 + 4);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  unint64_t v5 = 102400;
  while (1)
  {
    CFIndex v6 = v3[1];
    if (!v6) {
      return 0;
    }
    if (v5 < v6 + 8) {
      return 4294963396;
    }
    if (*v3 == 1)
    {
      if (v6 > 0x18028) {
        return 4294963396;
      }
      goto LABEL_9;
    }
    if (*v3 || v6 > 0xFC8) {
      return 4294963396;
    }
LABEL_9:
    CFDataRef v7 = CFDataCreate(v4, (const UInt8 *)v3 + 8, v6);
    CFNumberRef v8 = CFNumberCreate(v4, kCFNumberSInt32Type, v3);
    CFDictionarySetValue(a1, v8, v7);
    CFRelease(v8);
    CFRelease(v7);
    uint64_t v9 = v3[1];
    uint64_t v3 = (unsigned int *)((char *)v3 + v9 + 8);
    unint64_t v5 = (v5 - v9 - 8);
    if (v5 <= 8) {
      return 0;
    }
  }
}

void _getRoamProfilePerBand(int a1, _DWORD *a2, __CFDictionary *a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDataRef v7 = a2 + 1;
  CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, a2 + 1);
  CFDictionarySetValue(a3, @"ROAM_PROF_BAND", v8);
  CFRelease(v8);
  uint64_t v9 = a2 + 2;
  CFNumberRef v10 = CFNumberCreate(v6, kCFNumberSInt32Type, a2 + 2);
  CFDictionarySetValue(a3, @"ROAM_PROF_NUM", v10);
  CFRelease(v10);
  if (a2[2])
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
    if (Mutable)
    {
      CFNumberRef v12 = Mutable;
      CFMutableDictionaryRef theDict = a3;
      if (*v9)
      {
        unint64_t v13 = 0;
        CFNumberRef v14 = (char *)(a2 + 10);
        while (1)
        {
          CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (!v15) {
            break;
          }
          CFNumberRef v16 = v15;
          CFNumberRef v17 = CFNumberCreate(v6, kCFNumberSInt32Type, v14 - 24);
          CFDictionarySetValue(v16, @"ROAM_PROF_ROAM_FLAGS", v17);
          CFRelease(v17);
          CFNumberRef v18 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 20);
          CFDictionarySetValue(v16, @"ROAM_PROF_ROAM_TRIGGER", v18);
          CFRelease(v18);
          CFNumberRef v19 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 19);
          CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_LOWER", v19);
          CFRelease(v19);
          CFNumberRef v20 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 18);
          CFDictionarySetValue(v16, @"ROAM_PROF_ROAM_DELTA", v20);
          CFRelease(v20);
          CFNumberRef v21 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 15);
          CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_BOOST_THRESH_2G", v21);
          CFRelease(v21);
          CFNumberRef v22 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 14);
          CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_BOOST_DELTA_2G", v22);
          CFRelease(v22);
          CFNumberRef v23 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 13);
          CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_BOOST_THRESH_5G", v23);
          CFRelease(v23);
          CFNumberRef v24 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 12);
          CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_BOOST_DELTA_5G", v24);
          CFRelease(v24);
          if (a1)
          {
            CFNumberRef v25 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 11);
            CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_BOOST_THRESH_6G", v25);
            CFRelease(v25);
            CFNumberRef v26 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 10);
            CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_BOOST_DELTA_6G", v26);
            CFRelease(v26);
          }
          int v27 = *v7;
          if (*v7 == 2)
          {
            if (*(v14 - 17) != 127)
            {
              CFNumberRef v28 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 17);
              CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_BOOST_THRESH_2G", v28);
              CFRelease(v28);
            }
            if (*(v14 - 16) != 127)
            {
              CFNumberRef v29 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 16);
              CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_BOOST_DELTA_2G", v29);
              CFRelease(v29);
            }
            int v27 = *v7;
          }
          if (v27 == 8 || v27 == 4)
          {
            if (*(v14 - 17) != 127)
            {
              CFNumberRef v30 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 17);
              CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_BOOST_THRESH_5G", v30);
              CFRelease(v30);
            }
            if (*(v14 - 16) != 127)
            {
              CFNumberRef v31 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 16);
              CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_BOOST_DELTA_5G", v31);
              CFRelease(v31);
            }
          }
          CFNumberRef v32 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 17);
          CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_BOOST_THRESH", v32);
          CFRelease(v32);
          CFNumberRef v33 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 16);
          CFDictionarySetValue(v16, @"ROAM_PROF_RSSI_BOOST_DELTA", v33);
          CFRelease(v33);
          CFNumberRef v34 = CFNumberCreate(v6, kCFNumberSInt16Type, v14 - 8);
          CFDictionarySetValue(v16, @"ROAM_PROF_NFSCAN", v34);
          CFRelease(v34);
          CFNumberRef v35 = CFNumberCreate(v6, kCFNumberSInt16Type, v14 - 6);
          CFDictionarySetValue(v16, @"ROAM_PROF_FULLSCAN_PERIOD", v35);
          CFRelease(v35);
          CFNumberRef v36 = CFNumberCreate(v6, kCFNumberSInt16Type, v14 - 4);
          CFDictionarySetValue(v16, @"ROAM_PROF_INIT_SCAN_PERIOD", v36);
          CFRelease(v36);
          CFNumberRef v37 = CFNumberCreate(v6, kCFNumberSInt16Type, v14 - 2);
          CFDictionarySetValue(v16, @"ROAM_PROF_BACKOFF_MULTIPLIER", v37);
          CFRelease(v37);
          CFNumberRef v38 = CFNumberCreate(v6, kCFNumberSInt16Type, v14);
          CFDictionarySetValue(v16, @"ROAM_PROF_MAX_SCAN_PERIOD", v38);
          CFRelease(v38);
          CFArrayAppendValue(v12, v16);
          CFRelease(v16);
          if (v13 <= 2)
          {
            ++v13;
            v14 += 28;
            if (v13 < *v9) {
              continue;
            }
          }
          goto LABEL_22;
        }
      }
      else
      {
LABEL_22:
        CFDictionarySetValue(theDict, @"ROAM_PROF", v12);
      }
      CFRelease(v12);
    }
  }
}

void _stopHostAPD(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 2056))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
      CFMutableDictionaryRef v15 = "_stopHostAPD";
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s Trying to terminate hostapd process\n", buf, 0xCu);
    }
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFAllocatorRef v4 = Mutable;
      int valuePtr = 1;
      CFNumberRef v5 = CFNumberCreate(v2, kCFNumberSInt8Type, &valuePtr);
      CFDictionarySetValue(v4, @"Terminate", v5);
      CFRelease(v5);
      uint64_t v6 = _CFXPCCreateXPCObjectFromCFObject();
      if (v6)
      {
        CFDataRef v7 = (void *)v6;
        CFNumberRef v8 = dispatch_semaphore_create(0);
        uint64_t v9 = *(_xpc_connection_s **)(a1 + 2056);
        v12[0] = MEMORY[0x263EF8330];
        v12[1] = 0x40000000;
        v12[2] = ___stopHostAPD_block_invoke;
        v12[3] = &__block_descriptor_tmp_3862;
        v12[4] = v8;
        xpc_connection_send_message_with_reply(v9, v7, 0, v12);
        dispatch_time_t v10 = dispatch_time(0, 1000000000);
        if (dispatch_semaphore_wait(v8, v10) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CFRunLoopTimerContext buf = 136315138;
          CFMutableDictionaryRef v15 = "_stopHostAPD";
          _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s Timeout waiting to terminate hostapd process\n", buf, 0xCu);
        }
        CFRelease(v4);
        xpc_release(v7);
        if (v8) {
          dispatch_release(v8);
        }
      }
      else
      {
        CFRelease(v4);
      }
    }
    CFNumberRef v11 = *(_xpc_connection_s **)(a1 + 2056);
    if (v11)
    {
      xpc_connection_cancel(v11);
      xpc_release(*(xpc_object_t *)(a1 + 2056));
      *(void *)(a1 + 2056) = 0;
    }
  }
}

uint64_t _getBGScanData(const __CFDictionary *a1, char *a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 4294963396;
  }
  bzero(a2, 0x2030uLL);
  *(_DWORD *)a2 = 1;
  CFArrayRef v5 = (const __CFArray *)CFDictionaryGetValue(a1, @"SCAN_SSID_LIST");
  CFDictionaryRef v55 = a1;
  if (v5)
  {
    CFArrayRef v6 = v5;
    memset(buffer, 170, 18);
    CFDataRef value = 0;
    int valuePtr = 0;
    CFBooleanRef v59 = 0;
    CFBooleanRef BOOLean = 0;
    CFIndex Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      CFDataRef cf2 = (const void *)*MEMORY[0x263EFFB40];
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v9);
        if (!ValueAtIndex) {
          return 4294963396;
        }
        CFDictionaryRef v13 = ValueAtIndex;
        CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"SSID_STR");
        if (!v14 || (CFStringRef v15 = v14, CFEqual(v14, &stru_26C29D028)) || v11 > 15)
        {
          if (v10 <= 359)
          {
            CFStringRef v23 = (const __CFString *)CFDictionaryGetValue(v13, @"BSSID");
            if (!v23) {
              return 4294963396;
            }
            if (!CFStringGetCString(v23, buffer, 18, 0x8000100u)) {
              return 4294963396;
            }
            CFNumberRef v24 = ether_aton(buffer);
            if (!v24) {
              return 4294963396;
            }
            int v25 = *(_DWORD *)v24->octet;
            CFNumberRef v26 = &a2[8 * v10 - v10];
            *((_WORD *)v26 + 456) = *(_WORD *)&v24->octet[4];
            *((_DWORD *)v26 + 227) = v25;
            CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(v13, @"ENTRY_NETWORK");
            CFNumberRef BoolRef = makeBoolRef(v27);
            CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v13, @"EXIT_NETWORK");
            CFNumberRef v30 = makeBoolRef(v29);
            if (!BoolRef) {
              goto LABEL_91;
            }
            if (CFEqual(BoolRef, cf2) && v30 && CFEqual(v30, cf2))
            {
              char v31 = 3;
LABEL_40:
              a2[8 * v10 - v10 + 914] |= v31;
              ++v10;
              goto LABEL_41;
            }
            if (!CFEqual(BoolRef, cf2))
            {
LABEL_91:
              if (v30 && CFEqual(v30, cf2))
              {
                char v31 = 2;
                goto LABEL_40;
              }
            }
            char v31 = 1;
            goto LABEL_40;
          }
        }
        else
        {
          CFIndex Length = CFStringGetLength(v15);
          if (Length > 32) {
            return 4294963396;
          }
          CFIndex v17 = Length;
          CFNumberRef v18 = &a2[56 * v11];
          *((_DWORD *)v18 + 2) = 1;
          uint64_t v19 = (uint64_t)(v18 + 8);
          CFIndex usedBufLen = 0;
          if (CFStringGetLength(v15))
          {
            v65.location = 0;
            v65.length = v17;
            if (!CFStringGetBytes(v15, v65, 0x8000100u, 0, 0, (UInt8 *)(v19 + 8), 32, &usedBufLen)) {
              return 4294963396;
            }
          }
          *(_DWORD *)(v19 + 4) = usedBufLen;
          __getNetworkSecurityParams(v13, v19, a3);
          CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v13, @"HIDDEN_NETWORK");
          CFNumberRef v21 = makeBoolRef(v20);
          BOOL v22 = v21 && CFEqual(v21, cf2);
          a2[56 * v11 + 57] = v22;
          if (CFDictionaryGetValueIfPresent(v13, @"BGSCANRSSITHRES", (const void **)&value) && value)
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
            *(_DWORD *)&a2[56 * v11 + 60] = valuePtr;
          }
          if (CFDictionaryGetValueIfPresent(v13, @"HOTSPOT", (const void **)&BOOLean) && BOOLean) {
            a2[56 * v11 + 56] = a2[56 * v11 + 56] & 0xFB | (4 * (CFBooleanGetValue(BOOLean) & 1));
          }
          if (CFDictionaryGetValueIfPresent(v13, @"DISALLOW_PNO", (const void **)&v59) && v59) {
            a2[56 * v11 + 56] = a2[56 * v11 + 56] & 0xF7 | (8 * (CFBooleanGetValue(v59) & 1));
          }
          ++v11;
        }
LABEL_41:
        if (v8 == ++v9) {
          goto LABEL_44;
        }
      }
    }
    uint64_t v11 = 0;
    uint64_t v10 = 0;
LABEL_44:
    int v32 = 16;
    if (v11 < 16) {
      int v32 = v11;
    }
    *((_DWORD *)a2 + 1) = v32;
    int v33 = 360;
    if (v10 < 360) {
      int v33 = v10;
    }
    *((_DWORD *)a2 + 226) = v33;
    a1 = v55;
  }
  CFArrayRef v34 = (const __CFArray *)CFDictionaryGetValue(a1, @"SCAN_CHANNELS");
  if (v34)
  {
    CFArrayRef v35 = v34;
    LODWORD(value) = -1431655766;
    LODWORD(BOOLean) = -1431655766;
    CFIndex v36 = CFArrayGetCount(v34);
    uint64_t v37 = 0;
    if (v36 >= 1)
    {
      CFIndex v38 = 0;
      if ((unint64_t)(v36 - 1) >= 0x18F) {
        uint64_t v39 = 399;
      }
      else {
        uint64_t v39 = v36 - 1;
      }
      while (1)
      {
        CFDictionaryRef v40 = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, v38);
        if (!v40) {
          return 4294963396;
        }
        CFDictionaryRef v41 = v40;
        CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(v40, @"CHANNEL");
        if (!v42 || !CFNumberGetValue(v42, kCFNumberSInt32Type, &value)) {
          return 4294963396;
        }
        CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v41, @"CHANNEL_FLAGS");
        if (v43)
        {
          if (!CFNumberGetValue(v43, kCFNumberSInt32Type, &BOOLean)) {
            return 4294963396;
          }
        }
        else
        {
          LODWORD(BOOLean) = 0;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buffer = 67109120;
            *(_DWORD *)&buffer[4] = value;
            _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Missing channel flags for background scan channel (%u)", (uint8_t *)buffer, 8u);
          }
        }
        int v44 = (int)BOOLean;
        if (((unsigned __int16)BOOLean & 0x2000) == 0) {
          break;
        }
        if ((_os_feature_enabled_impl() & 1) == 0)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            goto LABEL_72;
          }
          *(_DWORD *)buffer = 67109120;
          *(_DWORD *)&buffer[4] = value;
          CFNumberRef v51 = &_os_log_internal;
          CFNumberRef v52 = "Excluding 6GHz scan channel (%u)";
          goto LABEL_77;
        }
        char v46 = _os_feature_enabled_impl();
        int v45 = (int)value;
        int v44 = (int)BOOLean;
        if (v46) {
          goto LABEL_71;
        }
        if ((~BOOLean & 0x2002) == 0)
        {
          unint64_t v47 = 0;
          do
          {
            int v48 = k6GHzPSC[v47];
            if (v47 > 0xD) {
              break;
            }
            ++v47;
          }
          while (v48 != value);
          if (v48 == value) {
            goto LABEL_71;
          }
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buffer = 67109120;
          *(_DWORD *)&buffer[4] = v45;
          CFNumberRef v51 = &_os_log_internal;
          CFNumberRef v52 = "Excluding 6GHz non-PSC scan channel (%u)";
LABEL_77:
          _os_log_error_impl(&dword_210714000, v51, OS_LOG_TYPE_ERROR, v52, (uint8_t *)buffer, 8u);
        }
LABEL_72:
        if (v38++ == v39) {
          goto LABEL_80;
        }
      }
      int v45 = (int)value;
LABEL_71:
      CFNumberRef v49 = &a2[12 * v37];
      *((_DWORD *)v49 + 858) = 1;
      *((_DWORD *)v49 + 859) = v45;
      *((_DWORD *)v49 + 860) = v44;
      ++v37;
      goto LABEL_72;
    }
LABEL_80:
    *((_DWORD *)a2 + 857) = v37;
    a1 = v55;
  }
  CFNumberRef v53 = (const __CFNumber *)CFDictionaryGetValue(a1, @"BGSCAN_CACHE");
  if (v53)
  {
    buffer[0] = 0;
    if (!CFNumberGetValue(v53, kCFNumberSInt32Type, buffer)) {
      return 4294963396;
    }
    *((_DWORD *)a2 + 2058) = buffer[0];
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, @"BGSCAN_CACHE_WSB_ROLLOVER");
  if (!result) {
    return result;
  }
  buffer[0] = 0;
  if (!CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, buffer)) {
    return 4294963396;
  }
  uint64_t result = 0;
  a2[8236] = a2[8236] & 0xFE | buffer[0] & 1;
  return result;
}

CFDictionaryRef _setRoamProfile(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  unsigned int v5 = *(unsigned __int8 *)(a1 + 99);
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_ROAM_PROF_2G");
  if (result)
  {
    int v7 = (v5 >> 6) & 1;
    _setRoamProfilePerBand(v7, (unsigned int *)v9, result);
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_ROAM_PROF_5G");
    if (result)
    {
      _setRoamProfilePerBand(v7, (unsigned int *)v10, result);
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_ROAM_PROF_6G");
      if (Value) {
        _setRoamProfilePerBand(v7, (unsigned int *)v11, Value);
      }
      *(_DWORD *)(a2 + 24) = 384;
      *(void *)(a2 + 32) = v9;
      CFDictionaryRef result = (const __CFDictionary *)Apple80211RawSet();
      if (result) {
        return (const __CFDictionary *)*__error();
      }
    }
  }
  return result;
}

uint64_t _setUCMProfile(int a1, uint64_t a2, CFDictionaryRef theDict)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v41 = 0;
  memset(v40, 0, sizeof(v40));
  long long valuePtr = 0u;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_VERSION");
  if (!Value) {
    return 4294963396;
  }
  if (!CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr)) {
    return 4294963396;
  }
  CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_PROFILE_INDEX");
  if (!v6) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v6, kCFNumberSInt8Type, (char *)&valuePtr + 4)) {
    return 4294963396;
  }
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_MODE_STRONG_WL_BT");
  if (!v7) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v7, kCFNumberSInt8Type, (char *)&valuePtr + 5)) {
    return 4294963396;
  }
  CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_MODE_WEAK_WL");
  if (!v8) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v8, kCFNumberSInt8Type, (char *)&valuePtr + 6)) {
    return 4294963396;
  }
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_MODE_WEAK_BT");
  if (!v9) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v9, kCFNumberSInt8Type, (char *)&valuePtr + 7)) {
    return 4294963396;
  }
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_MODE_WEAK_WL_BT");
  if (!v10) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v10, kCFNumberSInt8Type, (char *)&valuePtr + 8)) {
    return 4294963396;
  }
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_MODE_WL_HI_LO_RSSI_THRESH");
  if (!v11) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v11, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 9))) {
    return 4294963396;
  }
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_MODE_WL_LO_HI_RSSI_THRESH");
  if (!v12) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v12, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 0xA))) {
    return 4294963396;
  }
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_MODE_BT_HI_LO_RSSI_THRESH");
  if (!v13) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v13, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 0xB))) {
    return 4294963396;
  }
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_MODE_BT_LO_HI_RSSI_THRESH");
  if (!v14) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v14, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 0xC))) {
    return 4294963396;
  }
  CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH");
  if (!v15) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v15, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 0xD))) {
    return 4294963396;
  }
  CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH");
  if (!v16) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v16, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 0xE))) {
    return 4294963396;
  }
  CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH");
  if (!v17) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v17, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 0xF))) {
    return 4294963396;
  }
  CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH");
  if (!v18) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v18, kCFNumberSInt8Type, v40)) {
    return 4294963396;
  }
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH");
  if (!v19) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v19, kCFNumberSInt8Type, (char *)v40 + 1)) {
    return 4294963396;
  }
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH");
  if (!v20) {
    return 4294963396;
  }
  if (!CFNumberGetValue(v20, kCFNumberSInt8Type, (char *)v40 + 2)) {
    return 4294963396;
  }
  if ((unsigned __int16)valuePtr == 2)
  {
    CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UCM_HYBRID_ANT_CORE_CONFIG");
    if (!v21 || !CFNumberGetValue(v21, kCFNumberSInt8Type, (char *)v40 + 3)) {
      return 4294963396;
    }
  }
  uint64_t v38 = a2;
  CFArrayRef v22 = (const __CFArray *)CFDictionaryGetValue(theDict, @"UCM_CHAIN_ATTR");
  BYTE3(valuePtr) = 0;
  if (!v22) {
    goto LABEL_59;
  }
  CFArrayRef v23 = v22;
  CFIndex Count = CFArrayGetCount(v22);
  if (Count > 5) {
    return 4294963396;
  }
  CFIndex v25 = Count;
  if (Count >= 1)
  {
    uint64_t v26 = 0;
    for (CFIndex i = 0; v25 != i; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v23, i);
      if (!ValueAtIndex) {
        return 4294963395;
      }
      CFDictionaryRef v29 = ValueAtIndex;
      if ((unsigned __int16)valuePtr - 1 > 1)
      {
        if ((unsigned __int16)valuePtr != 3) {
          goto LABEL_50;
        }
        CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"UCM_DESENSE_STRONG_RSSI");
        if (!v32) {
          return 4294963396;
        }
        if (!CFNumberGetValue(v32, kCFNumberSInt8Type, (char *)v40 + v26 + 5)) {
          return 4294963396;
        }
        CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(v29, @"UCM_DESENSE_WEAK_RSSI");
        if (!v30) {
          return 4294963396;
        }
        char v31 = (char *)v40 + v26 + 6;
      }
      else
      {
        CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"UCM_DESENSE_LEVEL");
        if (!v30) {
          return 4294963396;
        }
        char v31 = (char *)v40 + v26 + 4;
      }
      if (!CFNumberGetValue(v30, kCFNumberSInt8Type, v31)) {
        return 4294963396;
      }
LABEL_50:
      CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(v29, @"UCM_ACK_PWR_STRONG_RSSI");
      if (!v33) {
        return 4294963396;
      }
      if (!CFNumberGetValue(v33, kCFNumberSInt8Type, (char *)v40 + v26 + 7)) {
        return 4294963396;
      }
      CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(v29, @"UCM_ACK_PWR_WEAK_RSSI");
      if (!v34) {
        return 4294963396;
      }
      if (!CFNumberGetValue(v34, kCFNumberSInt8Type, (char *)v40 + v26 + 8)) {
        return 4294963396;
      }
      CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(v29, @"UCM_TX_PWR_STRONG_RSSI");
      if (!v35) {
        return 4294963396;
      }
      if (!CFNumberGetValue(v35, kCFNumberSInt8Type, (char *)v40 + v26 + 9)) {
        return 4294963396;
      }
      CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(v29, @"UCM_TX_PWR_WEAK_RSSI");
      if (!v36 || !CFNumberGetValue(v36, kCFNumberSInt8Type, (char *)v40 + v26 + 10)) {
        return 4294963396;
      }
      ++BYTE3(valuePtr);
      v26 += 7;
    }
  }
LABEL_59:
  *(_DWORD *)(v38 + 24) = 56;
  *(void *)(v38 + 32) = &valuePtr;
  uint64_t result = Apple80211IOCTLSetWrapper();
  if (result) {
    return *__error();
  }
  return result;
}

uint64_t _set2GChainDisable(int a1, uint64_t a2, CFDictionaryRef theDict)
{
  v8[1] = *MEMORY[0x263EF8340];
  v8[0] = 1;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"BTCOEX_2G_CHAIN_DISABLE");
  if (!Value) {
    return 4294963396;
  }
  if (!CFNumberGetValue(Value, kCFNumberSInt8Type, (char *)v8 + 4)) {
    return 4294963396;
  }
  CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"BTCOEX_2G_CHAIN_DISABLE_REASSOC");
  if (!v6 || !CFNumberGetValue(v6, kCFNumberSInt8Type, (char *)v8 + 5)) {
    return 4294963396;
  }
  *(_DWORD *)(a2 + 24) = 8;
  *(void *)(a2 + 32) = v8;
  uint64_t result = Apple80211IOCTLSetWrapper();
  if (result) {
    return *__error();
  }
  return result;
}

uint64_t _getLQMConfigFromDict(CFDictionaryRef theDict, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  char v42 = 0;
  int valuePtr = 0;
  char v40 = 0;
  uint64_t result = 4294963396;
  if (theDict && a2)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LQM_UPDATE_INTERVAL");
    if (Value)
    {
      CFNumberRef v6 = Value;
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 == CFNumberGetTypeID())
      {
        if (CFNumberGetValue(v6, kCFNumberIntType, &valuePtr))
        {
          *(_DWORD *)(a2 + 4) = valuePtr;
          CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LQM_RSSI_UPDATE_INTERVAL");
          if (v8)
          {
            CFNumberRef v9 = v8;
            CFTypeID v10 = CFGetTypeID(v8);
            if (v10 == CFNumberGetTypeID())
            {
              if (CFNumberGetValue(v9, kCFNumberIntType, &valuePtr))
              {
                *(_DWORD *)(a2 + 8) = valuePtr;
                CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LQM_CHAN_QUAL_UPDATE_INTERVAL");
                if (v11)
                {
                  CFNumberRef v12 = v11;
                  CFTypeID v13 = CFGetTypeID(v11);
                  if (v13 == CFNumberGetTypeID())
                  {
                    if (CFNumberGetValue(v12, kCFNumberIntType, &valuePtr))
                    {
                      *(_DWORD *)(a2 + 12) = valuePtr;
                      CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LQM_GOOD_RSSI_THRESH");
                      if (v14)
                      {
                        CFNumberRef v15 = v14;
                        CFTypeID v16 = CFGetTypeID(v14);
                        if (v16 == CFNumberGetTypeID())
                        {
                          if (CFNumberGetValue(v15, kCFNumberSInt8Type, &v42))
                          {
                            *(unsigned char *)(a2 + 16) = v42;
                            CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(theDict, @"LQM_RSSI_LEVELS");
                            if (v17)
                            {
                              CFArrayRef v18 = v17;
                              CFIndex Count = CFArrayGetCount(v17);
                              unint64_t v20 = Count - 1;
                              if (Count < 1)
                              {
LABEL_25:
                                CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LQM_CCA_HYSTERISIS");
                                if (v26)
                                {
                                  CFNumberRef v27 = v26;
                                  CFTypeID v28 = CFGetTypeID(v26);
                                  if (v28 == CFNumberGetTypeID())
                                  {
                                    if (CFNumberGetValue(v27, kCFNumberCharType, &v40))
                                    {
                                      *(unsigned char *)(a2 + 24) = v40;
                                      CFArrayRef v29 = (const __CFArray *)CFDictionaryGetValue(theDict, @"LQM_CCA_BOUNDS");
                                      if (v29)
                                      {
                                        CFArrayRef v30 = v29;
                                        CFIndex v31 = CFArrayGetCount(v29);
                                        unint64_t v32 = v31 - 1;
                                        if (v31 < 1) {
                                          return 0;
                                        }
                                        CFIndex v33 = 0;
                                        if (v32 >= 7) {
                                          unint64_t v32 = 7;
                                        }
                                        unint64_t v34 = v32 + 1;
                                        uint64_t v35 = a2 + 25;
                                        while (1)
                                        {
                                          char v39 = 0;
                                          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v30, v33);
                                          if (!ValueAtIndex) {
                                            break;
                                          }
                                          CFNumberRef v37 = ValueAtIndex;
                                          CFTypeID v38 = CFGetTypeID(ValueAtIndex);
                                          if (v38 != CFNumberGetTypeID()
                                            || !CFNumberGetValue(v37, kCFNumberCharType, &v39))
                                          {
                                            break;
                                          }
                                          uint64_t result = 0;
                                          *(unsigned char *)(v35 + v33++) = v39;
                                          if (v34 == v33) {
                                            return result;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              else
                              {
                                CFIndex v21 = 0;
                                if (v20 >= 6) {
                                  unint64_t v20 = 6;
                                }
                                unint64_t v22 = v20 + 1;
                                while (1)
                                {
                                  char v39 = 0;
                                  CFNumberRef v23 = (const __CFNumber *)CFArrayGetValueAtIndex(v18, v21);
                                  if (!v23) {
                                    break;
                                  }
                                  CFNumberRef v24 = v23;
                                  CFTypeID v25 = CFGetTypeID(v23);
                                  if (v25 == CFNumberGetTypeID() && CFNumberGetValue(v24, kCFNumberSInt8Type, &v39)) {
                                    *(unsigned char *)(a2 + 17 + v21) = v39;
                                  }
                                  if (v22 == ++v21) {
                                    goto LABEL_25;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 4294963396;
  }
  return result;
}

uint64_t _getSensingRequest(CFTypeRef cf, uint64_t a2)
{
  v12[3] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 4294963396;
  }
  *(_DWORD *)(a2 + 16) = 1;
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"SENSING_PARAMS_TIMEOUT");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberIntType, (void *)(a2 + 4));
  }
  CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"SENSING_PARAMS_NUMBER_OF_REPORTS");
  if (v6) {
    CFNumberGetValue(v6, kCFNumberIntType, (void *)(a2 + 8));
  }
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"SENSING_PARAMS_MATCH_FRAME_TYPE");
  if (v7) {
    CFNumberGetValue(v7, kCFNumberIntType, (void *)(a2 + 12));
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)cf, @"SENSING_PARAMS_MATCH_MAC_ADDRESS");
  if (result)
  {
    CFStringRef v9 = (const __CFString *)result;
    memset(v12, 170, 20);
    CFStringGetCString((CFStringRef)result, (char *)v12, 20, 0x8000100u);
    CFTypeID v10 = ether_aton((const char *)v12);
    if (v10)
    {
      int v11 = *(_DWORD *)v10->octet;
      *(_WORD *)(a2 + 24) = *(_WORD *)&v10->octet[4];
      *(_DWORD *)(a2 + 20) = v11;
    }
    if (CFEqual(v9, @"00:00:00:00:00:00")) {
      *(_DWORD *)(a2 + 16) = 0;
    }
    return 0;
  }
  return result;
}

void ___stopHostAPD_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a2 == MEMORY[0x263EF86A8])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      CFTypeID v4 = "_stopHostAPD_block_invoke";
      _os_log_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s : XPC_ERROR_CONNECTION_INVALID\n", (uint8_t *)&v3, 0xCu);
    }
  }
  else
  {
    CFAllocatorRef v2 = *(NSObject **)(a1 + 32);
    dispatch_semaphore_signal(v2);
  }
}

CFNumberRef _setRoamProfilePerBand(int a1, unsigned int *a2, CFDictionaryRef theDict)
{
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ROAM_PROF_BAND");
  if (result)
  {
    CFNumberRef v6 = a2 + 1;
    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, a2 + 1);
    if (result)
    {
      uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*v6);
      v7.i16[0] = vaddlv_u8(v7);
      if (*v6 && v7.i32[0] == 1)
      {
        CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ROAM_PROF_NUM");
        if (result)
        {
          CFStringRef v9 = a2 + 2;
          CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, a2 + 2);
          if (result)
          {
            if ((*v9 - 1) <= 3)
            {
              CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ROAM_PROF");
              if (result)
              {
                if (*v9)
                {
                  CFArrayRef v10 = result;
                  unint64_t v11 = 0;
                  CFNumberRef v12 = (char *)(a2 + 10);
                  while (1)
                  {
                    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v11);
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_ROAM_FLAGS");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, v12 - 24);
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_ROAM_TRIGGER");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 20);
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_RSSI_LOWER");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 19);
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_ROAM_DELTA");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 18);
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_RSSI_BOOST_THRESH_2G");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 15);
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_RSSI_BOOST_DELTA_2G");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 14);
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_RSSI_BOOST_THRESH_5G");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 13);
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_RSSI_BOOST_DELTA_5G");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 12);
                    if (!result) {
                      return result;
                    }
                    if (a1)
                    {
                      CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_RSSI_BOOST_THRESH_6G");
                      if (!result) {
                        return result;
                      }
                      CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 11);
                      if (!result) {
                        return result;
                      }
                      CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_RSSI_BOOST_DELTA_6G");
                      if (!result) {
                        return result;
                      }
                      CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 10);
                      if (!result) {
                        return result;
                      }
                    }
                    int v14 = *v6;
                    if (*v6 == 8 || v14 == 4)
                    {
                      CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_RSSI_BOOST_THRESH_5G");
                      if (!result) {
                        return result;
                      }
                      CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 17);
                      if (!result) {
                        return result;
                      }
                      CFDictionaryRef v15 = ValueAtIndex;
                      CFTypeID v16 = @"ROAM_PROF_RSSI_BOOST_DELTA_5G";
                    }
                    else
                    {
                      if (v14 != 2) {
                        goto LABEL_46;
                      }
                      CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_RSSI_BOOST_THRESH_2G");
                      if (!result) {
                        return result;
                      }
                      CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 17);
                      if (!result) {
                        return result;
                      }
                      CFDictionaryRef v15 = ValueAtIndex;
                      CFTypeID v16 = @"ROAM_PROF_RSSI_BOOST_DELTA_2G";
                    }
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(v15, v16);
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 16);
                    if (!result) {
                      return result;
                    }
LABEL_46:
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_NFSCAN");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt16Type, v12 - 8);
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_FULLSCAN_PERIOD");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt16Type, v12 - 6);
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_INIT_SCAN_PERIOD");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt16Type, v12 - 4);
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_BACKOFF_MULTIPLIER");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt16Type, v12 - 2);
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ROAM_PROF_MAX_SCAN_PERIOD");
                    if (!result) {
                      return result;
                    }
                    CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt16Type, v12);
                    if (!result) {
                      return result;
                    }
                    if (v11 <= 2)
                    {
                      ++v11;
                      v12 += 28;
                      if (v11 < *v9) {
                        continue;
                      }
                    }
                    break;
                  }
                }
                a2[3] = 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL _containsNonHiddenRNRChannels(const __CFArray *a1)
{
  if (!a1 || !CFArrayGetCount(a1) || CFArrayGetCount(a1) < 1) {
    return 0;
  }
  CFAllocatorRef v2 = (const void *)*MEMORY[0x263EFFB40];
  CFIndex v3 = 1;
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v3 - 1);
    if (ValueAtIndex) {
      BOOL v5 = CFDictionaryGetValue(ValueAtIndex, @"ORIG_RNR_CHANNEL_FROM_HIDDEN_BSS") != v2;
    }
    else {
      BOOL v5 = 0;
    }
    if (CFArrayGetCount(a1) <= v3) {
      break;
    }
    ++v3;
  }
  while (!v5);
  return v5;
}

uint64_t _channelFlagsFromIEEEOperatingClass(int a1)
{
  int v1 = a1 - 81;
  uint64_t result = 0;
  switch(v1)
  {
    case 0:
    case 1:
      uint64_t result = 10;
      break;
    case 2:
      uint64_t result = 524;
      break;
    case 3:
      uint64_t result = 12;
      break;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 46:
      return result;
    case 34:
    case 43:
    case 44:
      uint64_t result = 18;
      break;
    case 35:
    case 45:
      uint64_t result = 532;
      break;
    case 36:
      uint64_t result = 20;
      break;
    case 37:
    case 40:
      uint64_t result = 274;
      break;
    case 38:
    case 41:
      uint64_t result = 788;
      break;
    case 39:
    case 42:
      uint64_t result = 276;
      break;
    case 47:
      uint64_t result = 1040;
      break;
    case 48:
    case 49:
      uint64_t result = 2064;
      break;
    case 50:
    case 55:
      uint64_t result = 8194;
      break;
    case 51:
      uint64_t result = 8196;
      break;
    case 52:
      uint64_t result = 9216;
      break;
    case 53:
    case 54:
      uint64_t result = 10240;
      break;
    case 56:
      uint64_t result = 24576;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t Apple80211ParseFILSDiscoveryFrame(uint64_t a1, int a2, __CFDictionary *a3)
{
  valuePtr[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = 4294963396;
  if (a1 && a3)
  {
    int v6 = a2 - 14;
    if (a2 < 0xE || *(unsigned char *)a1 != 4 || *(unsigned char *)(a1 + 1) != 34) {
      return 0;
    }
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!Mutable) {
      return 4294963395;
    }
    CFArrayRef v10 = Mutable;
    __int16 v11 = *(_WORD *)(a1 + 2);
    valuePtr[0] = *(void *)(a1 + 4);
    CFNumberRef v12 = CFNumberCreate(v8, kCFNumberSInt64Type, valuePtr);
    if (!v12) {
      goto LABEL_117;
    }
    CFNumberRef v13 = v12;
    CFDictionarySetValue(v10, @"TIMESTAMP", v12);
    CFRelease(v13);
    __int16 v104 = *(_WORD *)(a1 + 12);
    CFNumberRef v14 = CFNumberCreate(v8, kCFNumberSInt16Type, &v104);
    if (!v14) {
      goto LABEL_117;
    }
    CFNumberRef v15 = v14;
    uint64_t v16 = (v11 & 0xFu) + 1;
    CFDictionarySetValue(v10, @"BEACON_INTERVAL", v14);
    CFRelease(v15);
    if (v6 < (int)v16) {
      goto LABEL_118;
    }
    int v96 = a2;
    CFMutableDictionaryRef theDict = a3;
    CFArrayRef v17 = (int *)(a1 + 14);
    if ((v11 & 0x40) != 0)
    {
      int v103 = *v17;
      CFNumberRef v21 = CFNumberCreate(v8, kCFNumberSInt32Type, &v103);
      if (!v21) {
        goto LABEL_117;
      }
      CFNumberRef v19 = v21;
      unint64_t v20 = @"SHORT_SSID";
    }
    else
    {
      CFDataRef v18 = CFDataCreate(v8, (const UInt8 *)(a1 + 14), (v11 & 0xFu) + 1);
      if (!v18) {
        goto LABEL_117;
      }
      CFNumberRef v19 = v18;
      unint64_t v20 = @"SSID";
    }
    CFDictionarySetValue(v10, v20, v19);
    CFRelease(v19);
    unint64_t v22 = (UInt8 *)v17 + v16;
    int v23 = v6 - v16;
    if ((v11 & 0x1000) != 0)
    {
      if (a2 < 1) {
        goto LABEL_118;
      }
      int v94 = *v22;
      if (v23 < v94) {
        goto LABEL_118;
      }
      ++v22;
      --v23;
      if ((v11 & 0x20) == 0)
      {
LABEL_17:
        if ((v11 & 0x400) == 0) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
    }
    else
    {
      int v94 = 0;
      if ((v11 & 0x20) == 0) {
        goto LABEL_17;
      }
    }
    BOOL v24 = __OFSUB__(v23, 2);
    v23 -= 2;
    if (v23 < 0 != v24) {
      goto LABEL_118;
    }
    unsigned int v25 = *(unsigned __int16 *)v22;
    CFNumberRef v26 = (const void *)*MEMORY[0x263EFFB40];
    CFNumberRef v27 = (const void *)*MEMORY[0x263EFFB38];
    if (v25) {
      CFTypeID v28 = (const void *)*MEMORY[0x263EFFB40];
    }
    else {
      CFTypeID v28 = (const void *)*MEMORY[0x263EFFB38];
    }
    CFDictionarySetValue(v10, @"FD_CAP_ESS", v28);
    if ((v25 & 2) != 0) {
      CFArrayRef v29 = v26;
    }
    else {
      CFArrayRef v29 = v27;
    }
    CFDictionarySetValue(v10, @"FD_CAP_PRIVACY", v29);
    LOBYTE(v103) = (v25 >> 2) & 7;
    CFNumberRef v30 = CFNumberCreate(v8, kCFNumberSInt8Type, &v103);
    if (!v30) {
      goto LABEL_117;
    }
    CFNumberRef v31 = v30;
    CFDictionarySetValue(v10, @"FD_CAP_BSS_CH_WIDTH", v30);
    CFRelease(v31);
    UInt8 v102 = v25 >> 5;
    CFNumberRef v32 = CFNumberCreate(v8, kCFNumberSInt8Type, &v102);
    if (!v32) {
      goto LABEL_117;
    }
    CFNumberRef v33 = v32;
    CFDictionarySetValue(v10, @"FD_CAP_MAX_NSS", v32);
    CFRelease(v33);
    unint64_t v34 = (v25 & 0x200) != 0 ? v26 : v27;
    CFDictionarySetValue(v10, @"FD_CAP_MULTI_BSSID_PRESENCE_IND", v34);
    unsigned __int8 v101 = (v25 >> 10) & 7;
    CFNumberRef v35 = CFNumberCreate(v8, kCFNumberSInt8Type, &v101);
    if (!v35) {
      goto LABEL_117;
    }
    CFNumberRef v36 = v35;
    CFDictionarySetValue(v10, @"FD_CAP_PHY_INDEX", v35);
    CFRelease(v36);
    char v100 = v25 >> 13;
    CFNumberRef v37 = CFNumberCreate(v8, kCFNumberSInt8Type, &v100);
    if (!v37) {
      goto LABEL_117;
    }
    CFNumberRef v38 = v37;
    CFDictionarySetValue(v10, @"FD_CAP_FILS_MIN_RATE", v37);
    CFRelease(v38);
    v22 += 2;
    if ((v11 & 0x400) == 0)
    {
LABEL_18:
      if ((v11 & 0x80) == 0) {
        goto LABEL_19;
      }
      goto LABEL_47;
    }
LABEL_42:
    BOOL v24 = __OFSUB__(v23, 2);
    v23 -= 2;
    if (v23 < 0 != v24) {
      goto LABEL_118;
    }
    UInt8 v102 = -86;
    UInt8 v102 = *v22;
    CFNumberRef v39 = CFNumberCreate(v8, kCFNumberSInt8Type, &v102);
    if (!v39) {
      goto LABEL_117;
    }
    CFNumberRef v40 = v39;
    CFDictionarySetValue(v10, @"OPERATING_CLASS", v39);
    CFRelease(v40);
    unsigned __int8 v101 = v22[1];
    CFNumberRef v41 = CFNumberCreate(v8, kCFNumberSInt8Type, &v101);
    if (!v41) {
      goto LABEL_117;
    }
    CFNumberRef v42 = v41;
    CFDictionarySetValue(v10, @"PRIMARY_CHANNEL", v41);
    CFRelease(v42);
    int v103 = _channelFlagsFromIEEEOperatingClass(v102);
    CFNumberRef v43 = CFNumberCreate(v8, kCFNumberSInt32Type, &v103);
    if (!v43) {
      goto LABEL_117;
    }
    CFNumberRef v44 = v43;
    v22 += 2;
    CFDictionarySetValue(v10, @"CHANNEL_FLAGS", v43);
    CFRelease(v44);
    if ((v11 & 0x80) == 0)
    {
LABEL_19:
      if ((v11 & 0x100) == 0) {
        goto LABEL_20;
      }
      goto LABEL_50;
    }
LABEL_47:
    BOOL v24 = __OFSUB__(v23--, 1);
    if (v23 < 0 != v24) {
      goto LABEL_118;
    }
    LOBYTE(v103) = -86;
    LOBYTE(v103) = *v22;
    CFNumberRef v45 = CFNumberCreate(v8, kCFNumberSInt8Type, &v103);
    if (!v45) {
      goto LABEL_117;
    }
    CFNumberRef v46 = v45;
    CFDictionarySetValue(v10, @"AP_CONFIG_SEQ_NUM", v45);
    CFRelease(v46);
    ++v22;
    if ((v11 & 0x100) == 0)
    {
LABEL_20:
      if ((v11 & 0x800) == 0)
      {
LABEL_21:
        if ((v11 & 0x200) == 0) {
          goto LABEL_22;
        }
LABEL_99:
        BOOL v24 = __OFSUB__(v23--, 1);
        if (v23 < 0 != v24) {
          goto LABEL_118;
        }
        LOBYTE(v103) = -86;
        LOBYTE(v103) = *v22;
        CFNumberRef v82 = CFNumberCreate(v8, kCFNumberSInt8Type, &v103);
        if (v82)
        {
          CFNumberRef v83 = v82;
          CFDictionarySetValue(v10, @"CHANNEL_CENTER_FREQ_SEG_1", v82);
          CFRelease(v83);
          ++v22;
          if ((v11 & 0x2000) == 0) {
            goto LABEL_112;
          }
LABEL_102:
          if (v23 >= 3)
          {
            CFDataRef v84 = CFDataCreate(v8, v22, 2);
            if (v84)
            {
              CFDataRef v85 = v84;
              CFDictionarySetValue(v10, @"MOBILITY_DOMAIN_IDENTIFIER", v84);
              CFRelease(v85);
              LOBYTE(v103) = -86;
              LOBYTE(v103) = *v22;
              CFNumberRef v86 = CFNumberCreate(v8, kCFNumberSInt8Type, &v103);
              if (v86)
              {
                CFNumberRef v87 = v86;
                CFDictionarySetValue(v10, @"MOBILITY_DOMAIN_FT_CAP", v86);
                CFRelease(v87);
                uint64_t v88 = (const void *)*MEMORY[0x263EFFB40];
                int v89 = (const void *)*MEMORY[0x263EFFB38];
                if (v22[2]) {
                  int v90 = (const void *)*MEMORY[0x263EFFB40];
                }
                else {
                  int v90 = (const void *)*MEMORY[0x263EFFB38];
                }
                CFDictionarySetValue(v10, @"MOBILITY_DOMAIN_FT_OVER_DS", v90);
                if ((v22[2] & 2) != 0) {
                  CFStringRef v91 = v88;
                }
                else {
                  CFStringRef v91 = v89;
                }
                CFDictionarySetValue(v10, @"MOBILITY_DOMAIN_RESOURCE_REQ_PROTO", v91);
LABEL_112:
                CFDictionarySetValue(theDict, @"FILS_DISC_INFO", v10);
                unint64_t v92 = (v11 & 0xFu) + 15 + (unint64_t)v94;
                if (v96 - (int)v92 >= 1) {
                  Apple80211ParseRNRIE((unsigned __int8 *)(a1 + v92), v96 - v92, theDict);
                }
                uint64_t v3 = 0;
                goto LABEL_115;
              }
            }
            goto LABEL_117;
          }
LABEL_118:
          uint64_t v3 = 4294963392;
          goto LABEL_115;
        }
LABEL_117:
        uint64_t v3 = 4294963395;
LABEL_115:
        CFRelease(v10);
        return v3;
      }
LABEL_65:
      BOOL v24 = __OFSUB__(v23, 5);
      v23 -= 5;
      if (v23 < 0 != v24) {
        goto LABEL_118;
      }
      uint64_t v56 = v22[4];
      uint64_t v57 = *(unsigned int *)v22;
      LOWORD(v103) = *(_DWORD *)v22;
      CFNumberRef v58 = CFNumberCreate(v8, kCFNumberSInt16Type, &v103);
      if (!v58) {
        goto LABEL_117;
      }
      CFNumberRef v59 = v58;
      unint64_t v60 = v57 | (v56 << 32);
      CFDictionarySetValue(v10, @"RSN_CAPABILITIES", v58);
      CFRelease(v59);
      uint64_t v61 = *MEMORY[0x263EFFB40];
      uint64_t v62 = *MEMORY[0x263EFFB38];
      CFNumberRef v63 = (const void *)((v103 & 1) != 0 ? *MEMORY[0x263EFFB40] : *MEMORY[0x263EFFB38]);
      CFDictionarySetValue(v10, @"PRE_AUTH", v63);
      switch(((unsigned __int16)v103 >> 2) & 3)
      {
        case 1:
          char v64 = 2;
          break;
        case 2:
          char v64 = 4;
          break;
        case 3:
          char v64 = 16;
          break;
        default:
          char v64 = 1;
          break;
      }
      UInt8 v102 = v64;
      CFNumberRef v65 = CFNumberCreate(v8, kCFNumberSInt8Type, &v102);
      if (!v65) {
        goto LABEL_117;
      }
      CFNumberRef v66 = v65;
      CFDictionarySetValue(v10, @"PTKSA_REPLAY_COUNTERS", v65);
      CFRelease(v66);
      switch(((unsigned __int16)v103 >> 4) & 3)
      {
        case 1:
          char v67 = 2;
          break;
        case 2:
          char v67 = 4;
          break;
        case 3:
          char v67 = 16;
          break;
        default:
          char v67 = 1;
          break;
      }
      unsigned __int8 v101 = v67;
      CFNumberRef v68 = CFNumberCreate(v8, kCFNumberSInt8Type, &v101);
      if (!v68) {
        goto LABEL_117;
      }
      CFNumberRef v69 = v68;
      CFDictionarySetValue(v10, @"GTKSA_REPLAY_COUNTERS", v68);
      CFRelease(v69);
      CFNumberRef v70 = (const void *)((v103 & 1) != 0 ? v61 : v62);
      CFDictionarySetValue(v10, @"PRE_AUTH", v70);
      CFNumberRef v71 = (const void *)((v103 & 0x80) != 0 ? v61 : v62);
      CFDictionarySetValue(v10, @"MFP_CAPABLE", v71);
      CFNumberRef v72 = (const void *)((v103 & 0x40) != 0 ? v61 : v62);
      CFDictionarySetValue(v10, @"MFP_REQUIRED", v72);
      CFNumberRef v73 = (const void *)((v103 & 0x4000) != 0 ? v61 : v62);
      CFDictionarySetValue(v10, @"OCV", v73);
      char v100 = BYTE2(v60) & 0x3F;
      CFNumberRef v74 = CFNumberCreate(v8, kCFNumberSInt8Type, &v100);
      if (!v74) {
        goto LABEL_117;
      }
      CFNumberRef v75 = v74;
      CFDictionarySetValue(v10, @"RSN_MCIPHER", v74);
      CFRelease(v75);
      char v99 = (v60 >> 22) & 0x3F;
      CFNumberRef v76 = CFNumberCreate(v8, kCFNumberSInt8Type, &v99);
      if (!v76) {
        goto LABEL_117;
      }
      CFNumberRef v77 = v76;
      CFDictionarySetValue(v10, @"RSN_BCIPHER", v76);
      CFRelease(v77);
      char v98 = (v60 >> 28) & 0x3F;
      CFNumberRef v78 = CFNumberCreate(v8, kCFNumberSInt8Type, &v98);
      if (!v78) {
        goto LABEL_117;
      }
      CFNumberRef v79 = v78;
      CFDictionarySetValue(v10, @"RSN_UCIPHER", v78);
      CFRelease(v79);
      char v97 = v60 >> 34;
      CFNumberRef v80 = CFNumberCreate(v8, kCFNumberSInt8Type, &v97);
      if (!v80) {
        goto LABEL_117;
      }
      CFNumberRef v81 = v80;
      CFDictionarySetValue(v10, @"RSN_AUTHSEL", v80);
      CFRelease(v81);
      v22 += 5;
      if ((v11 & 0x200) == 0)
      {
LABEL_22:
        if ((v11 & 0x2000) == 0) {
          goto LABEL_112;
        }
        goto LABEL_102;
      }
      goto LABEL_99;
    }
LABEL_50:
    BOOL v24 = __OFSUB__(v23--, 1);
    if (v23 < 0 != v24) {
      goto LABEL_118;
    }
    signed __int8 v47 = *v22;
    LOBYTE(v103) = *v22 & 0xF;
    CFNumberRef v48 = CFNumberCreate(v8, kCFNumberSInt8Type, &v103);
    if (!v48) {
      goto LABEL_117;
    }
    CFNumberRef v49 = v48;
    CFDictionarySetValue(v10, @"INTERWORKING_ACCESS_NETWORK_TYPE", v48);
    CFRelease(v49);
    CFNumberRef v50 = (const void *)*MEMORY[0x263EFFB40];
    CFNumberRef v51 = (const void *)*MEMORY[0x263EFFB38];
    if ((v47 & 0x10) != 0) {
      CFNumberRef v52 = (const void *)*MEMORY[0x263EFFB40];
    }
    else {
      CFNumberRef v52 = (const void *)*MEMORY[0x263EFFB38];
    }
    CFDictionarySetValue(v10, @"INTERWORKING_ACCESS_INTERNET", v52);
    if ((v47 & 0x20) != 0) {
      CFNumberRef v53 = v50;
    }
    else {
      CFNumberRef v53 = v51;
    }
    CFDictionarySetValue(v10, @"INTERWORKING_ACCESS_ASRA", v53);
    if ((v47 & 0x40) != 0) {
      CFNumberRef v54 = v50;
    }
    else {
      CFNumberRef v54 = v51;
    }
    CFDictionarySetValue(v10, @"INTERWORKING_ACCESS_ESR", v54);
    if (v47 >= 0) {
      CFDictionaryRef v55 = v51;
    }
    else {
      CFDictionaryRef v55 = v50;
    }
    CFDictionarySetValue(v10, @"INTERWORKING_ACCESS_UESA", v55);
    ++v22;
    if ((v11 & 0x800) == 0) {
      goto LABEL_21;
    }
    goto LABEL_65;
  }
  return v3;
}

const char *convertApple80211ReturnToString(int a1)
{
  if ((a1 & 0x3E00) != 0x1000)
  {
    if ((a1 & 0x3E00) == 0x3000)
    {
      uint64_t v2 = 0;
      int v3 = a1 & 0x1FF;
      int v4 = 1;
      BOOL v5 = (int *)&unk_2641359D0;
      uint64_t result = "unknown IEEE reason";
      while (v4 != v3)
      {
        int v4 = *(_DWORD *)((char *)&unk_2641359D0 + v2 * 4 + 16);
        v2 += 4;
        if (v2 == 132) {
          return result;
        }
      }
    }
    else
    {
      uint64_t v2 = 0;
      BOOL v5 = kMapping;
      uint64_t result = "unknown Apple80211 ReturnToString";
      while (kMapping[v2] != a1)
      {
        v2 += 4;
        if (v2 == 684) {
          return result;
        }
      }
    }
    __int16 v11 = &v5[v2];
    return (const char *)*((void *)v11 + 1);
  }
  int v7 = a1 & 0x1FF;
  if ((a1 & 0x1FF) == 0)
  {
    uint64_t v10 = 0;
LABEL_18:
    __int16 v11 = &k80211StatusDescList[4 * v10];
    return (const char *)*((void *)v11 + 1);
  }
  unsigned int v8 = 1;
  uint64_t result = "unknown IEEE status";
  while (1)
  {
    int v9 = k80211StatusDescList[4 * v8];
    if (v9 == -1) {
      return result;
    }
    uint64_t v10 = v8++;
    if (v9 == v7) {
      goto LABEL_18;
    }
  }
}

const char *convertIEEEStatusToString(int a1)
{
  if (a1)
  {
    unsigned int v2 = 1;
    uint64_t result = "unknown IEEE status";
    while (1)
    {
      int v4 = k80211StatusDescList[4 * v2];
      if (v4 == -1) {
        break;
      }
      uint64_t v5 = v2++;
      if (v4 == a1) {
        return *(const char **)&k80211StatusDescList[4 * v5 + 2];
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    return *(const char **)&k80211StatusDescList[4 * v5 + 2];
  }
  return result;
}

const char *convertIEEEReasonToString(int a1)
{
  uint64_t v2 = 0;
  int v3 = 1;
  uint64_t result = "unknown IEEE reason";
  while (v3 != a1)
  {
    int v3 = *(_DWORD *)((char *)&unk_2641359D0 + v2 + 16);
    v2 += 16;
    if (v2 == 528) {
      return result;
    }
  }
  return *(const char **)((char *)&unk_2641359D0 + v2 + 8);
}

uint64_t convertApple80211ReturnToErrno(int a1)
{
  if ((a1 & 0x1E00 | 0x2000) == 0x3000) {
    return a1 & 0x1FF;
  }
  uint64_t v2 = 0;
  while (kMapping[v2] != a1)
  {
    v2 += 4;
    if (v2 == 684) {
      return 0;
    }
  }
  return kMapping[v2 + 1];
}

const char *convertLinkStateReasonToString(int a1)
{
  if (a1 == 1)
  {
    uint64_t v1 = 0;
    return (const char *)*((void *)&unk_264136420 + 2 * v1 + 1);
  }
  if (a1 == 2)
  {
    uint64_t v1 = 1;
    return (const char *)*((void *)&unk_264136420 + 2 * v1 + 1);
  }
  return "unknown reason";
}

const char *convertApple80211IOCTLToString(int a1)
{
  if (a1 > 558) {
    return "Error Invalid ioctl";
  }
  if (a1 == -1) {
    return "APPLE80211_IOC_CARD_SPECIFIC";
  }
  if (a1 < 0) {
    return "unknown Apple80211_IOC_";
  }
  uint64_t result = (const char *)gAppleIoucIndexToString[a1];
  if (!result) {
    return "unknown Apple80211_IOC_";
  }
  return result;
}

const char *convertApple80211EventToString(int a1)
{
  if ((a1 - 242) >= 0xFFFFFF0F) {
    return (const char *)gAppleMIndexToString[a1];
  }
  else {
    return "unknown APPLE80211_M_";
  }
}

const char *awdlStringForState(unsigned int a1)
{
  if (a1 > 0x35) {
    return "unknown";
  }
  else {
    return off_264137D58[a1];
  }
}

const char *convertBssidChangedReasonToString(int a1)
{
  if ((a1 - 1) > 4) {
    return "BSSID_CHANGE_REASON_INVALID";
  }
  else {
    return off_264137F08[a1 - 1];
  }
}

void IEEE80211iPasswordHash(uint64_t a1, unint64_t a2, void *a3, size_t a4, _OWORD *a5)
{
  int v5 = a2;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2 >= 0x40)
  {
    printf("%s[%u] Error: Assert failure\n", "IEEE80211iPasswordHash", 774);
  }
  else
  {
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[2] = v9;
    v14[3] = v9;
    v14[0] = v9;
    v14[1] = v9;
    long long v11 = v9;
    long long v12 = v9;
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    __memcpy_chk();
    F((int)v14, v5, a3, a4, 1, (uint64_t)&v11);
    F((int)v14, v5, a3, a4, 2, (uint64_t)&v12 + 4);
    long long v10 = v12;
    *a5 = v11;
    a5[1] = v10;
  }
}

void F(int a1, int a2, void *__src, size_t __n, char a5, uint64_t a6)
{
  int v8 = __n;
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v16 = -1431655766;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long __dst = v9;
  long long v15 = v9;
  memset(v13, 170, 20);
  if (__n)
  {
    uint64_t v10 = __n;
    memcpy(&__dst, __src, __n);
  }
  else
  {
    uint64_t v10 = 0;
  }
  *((unsigned char *)&__dst + v10) = 0;
  *((unsigned char *)&__dst + (v8 + 1)) = 0;
  *((unsigned char *)&__dst + (v8 + 2)) = 0;
  *((unsigned char *)&__dst + (v8 + 3)) = a5;
  hmac_sha1();
  int v11 = 0;
  *(_OWORD *)a6 = v13[0];
  *(_DWORD *)(a6 + 16) = v13[1];
  do
  {
    hmac_sha1();
    uint64_t v12 = 0;
    v13[0] = __dst;
    LODWORD(v13[1]) = v15;
    do
    {
      *(unsigned char *)(a6 + v12) ^= *((unsigned char *)&__dst + v12);
      ++v12;
    }
    while (v12 != 20);
    ++v11;
  }
  while (v11 != 4095);
}

__n128 hmac_sha1()
{
  uint64_t v0 = (const void *)MEMORY[0x270FA5388]();
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  uint64_t v34 = *MEMORY[0x263EF8340];
  memset(__dst, 0, sizeof(__dst));
  if (v1) {
    memcpy(__dst, v0, v1);
  }
  uint64_t v8 = 0;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v31 = v9;
  long long v32 = v9;
  long long v29 = v9;
  long long v30 = v9;
  v10.i64[0] = 0x3636363636363636;
  v10.i64[1] = 0x3636363636363636;
  do
  {
    *(long long *)((char *)&v29 + v8 * 16) = (__int128)veorq_s8((int8x16_t)__dst[v8], v10);
    ++v8;
  }
  while (v8 != 4);
  memset(&v24[4], 170, 0x1040uLL);
  v24[0] = v29;
  v24[1] = v30;
  v24[2] = v31;
  v24[3] = v32;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
      *((unsigned char *)v24 + (i + 64)) = *(unsigned char *)(v7 + i);
  }
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v12;
  long long v28 = v12;
  long long v25 = v12;
  long long v26 = v12;
  sha1((uint64_t)v24, v5 + 64, v3);
  uint64_t v13 = 0;
  v14.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
  v14.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
  do
  {
    *(long long *)((char *)&v25 + v13 * 16) = (__int128)veorq_s8((int8x16_t)__dst[v13], v14);
    ++v13;
  }
  while (v13 != 4);
  char v23 = -86;
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v22 = v15;
  long long v21 = v15;
  long long v20 = v15;
  long long v19 = v15;
  v17[0] = v25;
  v17[1] = v26;
  v17[2] = v27;
  v17[3] = v28;
  v17[4] = *(_OWORD *)v3;
  int v18 = *(_DWORD *)(v3 + 16);
  sha1((uint64_t)v17, 0x54u, v3);
  return result;
}

void sha1(uint64_t a1, unsigned int a2, uint64_t a3)
{
  __b[80] = *MEMORY[0x263EF8340];
  memset(__b, 170, 0x280uLL);
  int v6 = 8 * a2;
  unsigned int v7 = (a2 + 9) >> 6;
  if (((a2 + 9) & 0x3F) != 0) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = (v8 << 6);
  if (v9 > a2) {
    bzero((void *)(a1 + a2), v9 - a2);
  }
  uint64_t v10 = 4023233417;
  *(unsigned char *)(a1 + a2) = 0x80;
  *(unsigned char *)(a1 + (v9 - 1)) = v6;
  *(unsigned char *)(a1 + (v9 - 2)) = BYTE1(v6);
  uint64_t v11 = 3285377520;
  uint64_t v12 = 2562383102;
  uint64_t v13 = 1732584193;
  uint64_t v14 = 271733878;
  *(unsigned char *)(a1 + (v9 - 3)) = BYTE2(v6);
  *(unsigned char *)(a1 + (v9 - 4)) = HIBYTE(v6);
  if (v8)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a1 + 3;
    do
    {
      unint64_t v17 = 0;
      int v18 = __b;
      uint64_t v19 = v16;
      do
      {
        if (v17 > 0xF)
        {
          unint64_t v21 = *(v18 - 8) ^ *(v18 - 3) ^ *(v18 - 14) ^ *(v18 - 16);
          uint64_t v20 = (v21 >> 31) | (2 * v21);
        }
        else
        {
          uint64_t v20 = bswap32(*(_DWORD *)(v19 - 3));
        }
        *v18++ = v20;
        ++v17;
        v19 += 4;
      }
      while (v17 != 80);
      unint64_t v22 = 0;
      uint64_t v23 = v11;
      uint64_t v24 = v14;
      uint64_t v25 = v12;
      unint64_t v26 = v10;
      unint64_t v27 = v13;
      do
      {
        unint64_t v28 = v27;
        uint64_t v29 = v25;
        uint64_t v30 = v24;
        uint64_t v31 = (32 * v27) | (v27 >> 27);
        unint64_t v32 = v24 & ~v26 | v26 & v25;
        uint64_t v33 = v25 ^ v24;
        unint64_t v34 = v33 ^ v26;
        unint64_t v35 = v33 & v26 ^ v29 & v24;
        if (v22 < 0x3C)
        {
          uint64_t v36 = 2400959708;
        }
        else
        {
          unint64_t v35 = v34;
          uint64_t v36 = 3395469782;
        }
        if (v22 >= 0x28)
        {
          uint64_t v37 = v36;
        }
        else
        {
          unint64_t v35 = v34;
          uint64_t v37 = 1859775393;
        }
        if (v22 < 0x14)
        {
          uint64_t v38 = 1518500249;
        }
        else
        {
          unint64_t v32 = v35;
          uint64_t v38 = v37;
        }
        uint64_t v39 = v31 + v23 + v32 + v38 + __b[v22];
        unint64_t v27 = v39;
        unint64_t v40 = (v26 << 30) | (v26 >> 2);
        uint64_t v25 = (v26 << 30) | (v26 >> 2);
        ++v22;
        uint64_t v23 = v30;
        uint64_t v24 = v29;
        unint64_t v26 = v28;
      }
      while (v22 != 80);
      uint64_t v13 = (v39 + v13);
      uint64_t v10 = (v28 + v10);
      uint64_t v12 = (v40 + v12);
      uint64_t v14 = (v29 + v14);
      uint64_t v11 = (v30 + v11);
      ++v15;
      v16 += 64;
    }
    while (v15 != v8);
  }
  *(_WORD *)(a3 + 2) = bswap32(v13) >> 16;
  *(unsigned char *)(a3 + 1) = BYTE2(v13);
  *(unsigned char *)a3 = BYTE3(v13);
  *(unsigned char *)(a3 + 7) = v10;
  *(unsigned char *)(a3 + 6) = BYTE1(v10);
  *(unsigned char *)(a3 + 5) = BYTE2(v10);
  *(unsigned char *)(a3 + 4) = BYTE3(v10);
  *(unsigned char *)(a3 + 11) = v12;
  *(unsigned char *)(a3 + 10) = BYTE1(v12);
  *(unsigned char *)(a3 + 9) = BYTE2(v12);
  *(unsigned char *)(a3 + 8) = BYTE3(v12);
  *(unsigned char *)(a3 + 15) = v14;
  *(unsigned char *)(a3 + 14) = BYTE1(v14);
  *(unsigned char *)(a3 + 13) = BYTE2(v14);
  *(unsigned char *)(a3 + 12) = BYTE3(v14);
  *(unsigned char *)(a3 + 19) = v11;
  *(unsigned char *)(a3 + 18) = BYTE1(v11);
  *(unsigned char *)(a3 + 17) = BYTE2(v11);
  *(unsigned char *)(a3 + 16) = BYTE3(v11);
}

uint64_t nan_crc32(uint64_t result, char *a2, uint64_t a3)
{
  for (; a3; --a3)
  {
    char v3 = *a2++;
    __n128 result = crc32_tab[(v3 ^ result)] ^ (result >> 8);
  }
  return result;
}

uint64_t _Apple80211AWDLCompatibilityCall(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v208 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  if ((int)v6 <= 154)
  {
    if ((int)v6 > 115)
    {
      switch((int)v6)
      {
        case 116:
        case 118:
        case 121:
        case 122:
        case 124:
        case 126:
        case 127:
        case 134:
        case 135:
        case 136:
          goto LABEL_4;
        case 117:
          if (a3) {
            goto LABEL_172;
          }
          uint64_t v127 = *(void *)(a2 + 32);
          if (!v127 || *(_DWORD *)(a2 + 24) != 12) {
            goto LABEL_181;
          }
          CFArrayRef v123 = [(objc_class *)off_26ACCC390() currentState];
          int v128 = [v123 isEnabled];
          goto LABEL_130;
        case 129:
          if (a3) {
            goto LABEL_172;
          }
          uint64_t v129 = *(void *)(a2 + 32);
          if (!v129 || *(_DWORD *)(a2 + 24) != 400) {
            goto LABEL_181;
          }
          *(_OWORD *)(v129 + 368) = 0u;
          *(_OWORD *)(v129 + 384) = 0u;
          *(_OWORD *)(v129 + 336) = 0u;
          *(_OWORD *)(v129 + 352) = 0u;
          *(_OWORD *)(v129 + 304) = 0u;
          *(_OWORD *)(v129 + 320) = 0u;
          *(_OWORD *)(v129 + 272) = 0u;
          *(_OWORD *)(v129 + 288) = 0u;
          *(_OWORD *)(v129 + 240) = 0u;
          *(_OWORD *)(v129 + 256) = 0u;
          *(_OWORD *)(v129 + 208) = 0u;
          *(_OWORD *)(v129 + 224) = 0u;
          *(_OWORD *)(v129 + 176) = 0u;
          *(_OWORD *)(v129 + 192) = 0u;
          *(_OWORD *)(v129 + 144) = 0u;
          *(_OWORD *)(v129 + 160) = 0u;
          *(_OWORD *)(v129 + 112) = 0u;
          *(_OWORD *)(v129 + 128) = 0u;
          *(_OWORD *)(v129 + 80) = 0u;
          *(_OWORD *)(v129 + 96) = 0u;
          *(_OWORD *)(v129 + 48) = 0u;
          *(_OWORD *)(v129 + 64) = 0u;
          *(_OWORD *)(v129 + 16) = 0u;
          *(_OWORD *)(v129 + 32) = 0u;
          *(_OWORD *)uint64_t v129 = 0u;
          CFBooleanRef v130 = [(objc_class *)off_26ACCC390() currentState];
          CFBooleanRef v131 = [v130 channelSequence];

          *(unsigned char *)(v129 + 5) = [v131 count];
          long long v204 = 0u;
          long long v205 = 0u;
          long long v206 = 0u;
          long long v207 = 0u;
          id obja = v131;
          uint64_t v132 = [obja countByEnumeratingWithState:&v204 objects:v203 count:16];
          if (v132)
          {
            int v133 = 0;
            uint64_t v134 = *(void *)v205;
            do
            {
              for (uint64_t i = 0; i != v132; ++i)
              {
                if (*(void *)v205 != v134) {
                  objc_enumerationMutation(obja);
                }
                CFTypeID v136 = *(void **)(*((void *)&v204 + 1) + 8 * i);
                if (objc_msgSend(v136, "is2_4GHz")) {
                  int v137 = 8;
                }
                else {
                  int v137 = 0;
                }
                if ([v136 is5GHz]) {
                  v137 |= 0x10u;
                }
                if ([v136 isDFS]) {
                  int v138 = v137 | 0x100;
                }
                else {
                  int v138 = v137;
                }
                switch([v136 bandwidth])
                {
                  case 0:
                    v138 |= 1u;
                    break;
                  case 1:
                    v138 |= 2u;
                    break;
                  case 2:
                    v138 |= 4u;
                    break;
                  case 3:
                    v138 |= 0x400u;
                    break;
                  case 4:
                    v138 |= 0x800u;
                    break;
                  default:
                    break;
                }
                *(_DWORD *)(v129 + 12 * (v133 + i) + 20) = v138;
                *(_DWORD *)(v129 + 12 * (v133 + i) + 16) = [v136 channelNumber];
              }
              uint64_t v132 = [obja countByEnumeratingWithState:&v204 objects:v203 count:16];
              v133 += i;
            }
            while (v132);
          }

          return 0;
        case 132:
          if (a3) {
            goto LABEL_172;
          }
          uint64_t v139 = *(void *)(a2 + 32);
          if (!v139 || *(_DWORD *)(a2 + 24) != 8) {
            goto LABEL_181;
          }
          CFArrayRef v123 = [(objc_class *)off_26ACCC390() currentState];
          CFNumberRef v140 = [v123 peerMasterChannel];
          goto LABEL_162;
        case 148:
          if (a3) {
            goto LABEL_172;
          }
          uint64_t v127 = *(void *)(a2 + 32);
          if (!v127 || *(_DWORD *)(a2 + 24) != 24) {
            goto LABEL_181;
          }
          CFArrayRef v123 = [(objc_class *)off_26ACCC390() currentState];
          int v128 = [v123 substate];
LABEL_130:
          *(_DWORD *)(v127 + 8) = v128;
          break;
        default:
          goto LABEL_171;
      }
      goto LABEL_168;
    }
    if (v6 <= 0x1B && ((1 << v6) & 0x8089000) != 0)
    {
      if ((a3 & 1) == 0)
      {
        *(void *)char v199 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v7 = Apple80211Open(v199);
        if (!v7)
        {
          CFArrayRef theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
          LODWORD(v7) = Apple80211GetIfListCopy(*(int **)v199, &theArray);
          CFArrayRef v12 = theArray;
          if (!v7 && theArray && (CFIndex Count = CFArrayGetCount(theArray), v12 = theArray, Count))
          {
            CFDictionaryRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(theArray, 0);
            uint64_t v7 = Apple80211BindToInterface(*(uint64_t *)v199, ValueAtIndex);
            if (theArray) {
              CFRelease(theArray);
            }
            if (!v7)
            {
              CFStringGetCString(ValueAtIndex, (char *)a2, 16, 0x8000100u);
              uint64_t v7 = Apple80211RawGet(*(uint64_t *)v199, a2);
            }
            Apple80211Close(*(uint64_t *)v199);
          }
          else
          {
            if (v12) {
              CFRelease(v12);
            }
            Apple80211Close(*(uint64_t *)v199);
            if (v7) {
              uint64_t v7 = v7;
            }
            else {
              uint64_t v7 = 4294963396;
            }
          }
        }
        goto LABEL_214;
      }
LABEL_172:
      uint64_t v7 = 4294963393;
      goto LABEL_215;
    }
    if (v6 == 96)
    {
      if ((a3 & 1) == 0)
      {
        *(_DWORD *)(a2 + 20) = 6;
        return 0;
      }
      goto LABEL_172;
    }
    if (v6 == 97)
    {
      if (a3) {
        goto LABEL_172;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)char v199 = 0xAAAAAAAAAAAAAAAALL;
        Apple80211GetIfListCopy((int *)a1, (const __CFArray **)v199);
        if (*(void *)v199)
        {
          if (CFArrayGetCount(*(CFArrayRef *)v199)
            && (CFStringRef v124 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)v199, 0), (v125 = v124) != 0)
            && (CFTypeID v126 = CFGetTypeID(v124), v126 == CFStringGetTypeID()))
          {
            if (CFStringGetCString(v125, *(char **)(a2 + 32), *(unsigned int *)(a2 + 24), 0x8000100u)) {
              uint64_t v7 = 0;
            }
            else {
              uint64_t v7 = 4294963395;
            }
          }
          else
          {
            uint64_t v7 = 4294963396;
          }
          if (*(void *)v199) {
            CFRelease(*(CFTypeRef *)v199);
          }
        }
        else
        {
          uint64_t v7 = 4294963396;
        }
        goto LABEL_214;
      }
      goto LABEL_181;
    }
    goto LABEL_171;
  }
  if ((int)v6 <= 216)
  {
    if ((int)v6 <= 202)
    {
      if (v6 != 155)
      {
        if (v6 != 163)
        {
          if (v6 == 164)
          {
            uint64_t v8 = *(void *)(a2 + 32);
            if (a3)
            {
              if (v8 && *(_DWORD *)(a2 + 24) == 184)
              {
                uint64_t v9 = *(void **)(a1 + 112);
                if (v9)
                {
                  id v10 = v9;
                }
                else
                {
                  id v10 = objc_alloc_init(off_26ACCC378());
                  *(void *)(a1 + 112) = v10;
                }
                unsigned int v177 = *(_DWORD *)(v8 + 12);
                if (v177 >= 0x7F) {
                  unsigned int v177 = 127;
                }
                *(unsigned char *)(v8 + 16 + v177) = 0;
                CFStringRef v178 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)(v8 + 16), 0x8000100u);
                id v179 = objc_alloc(off_26ACCC380());
                CFMutableDictionaryRef v180 = (void *)[objc_alloc(off_26ACCC388()) initWithAddress:*(unsigned int *)(v8 + 4) | ((unint64_t)*(unsigned __int16 *)(v8 + 8) << 32)];
                long long v181 = (void *)[v179 initWithUniqueIdentifier:v178 peerAddress:v180];

                CFRelease(v178);
                int v182 = *(_DWORD *)(v8 + 172);
                if ((v182 & 2) != 0)
                {
                  objc_msgSend(v181, "setOptions:", objc_msgSend(v181, "options") | 1);
                  int v182 = *(_DWORD *)(v8 + 172);
                }
                if ((v182 & 8) != 0) {
                  objc_msgSend(v181, "setOptions:", objc_msgSend(v181, "options") | 2);
                }
                if (*(_DWORD *)(v8 + 168))
                {
                  uint64_t v198 = 0;
                  [v10 setTrafficRegistration:v181 error:&v198];
                  CFNumberRef v183 = (id *)&v198;
                }
                else
                {
                  uint64_t v197 = 0;
                  [v10 clearTrafficRegistration:v181 error:&v197];
                  CFNumberRef v183 = (id *)&v197;
                }
                id v184 = *v183;
                CFNumberRef v185 = v184;
                if (v184) {
                  uint64_t v7 = [v184 code];
                }
                else {
                  uint64_t v7 = 0;
                }

LABEL_214:
                if (!v7) {
                  return v7;
                }
LABEL_215:
                *__error() = v7;
                return v7;
              }
            }
            else if (v8 && *(_DWORD *)(a2 + 24) == 184)
            {
              id v172 = objc_alloc_init(_MergedGlobals());
              int v173 = (void *)[v172 copyActiveServiceUniqueIdentifiers];
              *(_DWORD *)(*(void *)(a2 + 32) + 168) = [v173 count];

              return 0;
            }
LABEL_181:
            uint64_t v7 = 4294963396;
            goto LABEL_215;
          }
LABEL_171:
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_FAULT))
          {
            BOOL v187 = "get";
            if (a3) {
              BOOL v187 = "set";
            }
            if ((int)v6 > 558)
            {
              int v188 = "Error Invalid ioctl";
            }
            else if (v6 == -1)
            {
              int v188 = "APPLE80211_IOC_CARD_SPECIFIC";
            }
            else if ((v6 & 0x80000000) != 0 || (int v188 = (const char *)gAppleIoucIndexToString[v6]) == 0)
            {
              int v188 = "unknown Apple80211_IOC_";
            }
            *(_DWORD *)char v199 = 136315906;
            *(void *)&v199[4] = "_Apple80211AWDLCompatibilityInternal";
            *(_WORD *)&v199[12] = 2080;
            *(void *)&v199[14] = v187;
            *(_WORD *)&v199[22] = 2080;
            unsigned int v200 = v188;
            __int16 v201 = 1024;
            int v202 = v6;
            _os_log_fault_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_FAULT, "%s: unsupported %s ioctl on awdl0 for %s[%d]", v199, 0x26u);
          }
          goto LABEL_172;
        }
        uint64_t v141 = *(void *)(a2 + 32);
        if (!v141 || *(_DWORD *)(a2 + 24) != 8) {
          goto LABEL_181;
        }
        if (a3)
        {
          *(void *)char v199 = 0;
          *(void *)&v199[8] = v199;
          *(void *)&v199[16] = 0x2020000000;
          LODWORD(v200) = 0;
          dispatch_semaphore_t v142 = dispatch_semaphore_create(0);
          if (*(unsigned char *)(v141 + 4))
          {
            CFMutableDictionaryRef v143 = [(objc_class *)off_26ACCC398() shared];
            CFTypeID v144 = v196;
            v196[0] = MEMORY[0x263EF8330];
            v196[1] = 3221225472;
            v196[2] = ___Apple80211AWDLCompatibilityInternal_block_invoke;
            v196[3] = &unk_264137F38;
            v196[5] = v199;
            v196[4] = v142;
            [v143 beginTransaction:9 completionHandler:v196];
          }
          else
          {
            CFMutableDictionaryRef v143 = [(objc_class *)off_26ACCC398() shared];
            CFTypeID v144 = v195;
            v195[0] = MEMORY[0x263EF8330];
            v195[1] = 3221225472;
            v195[2] = ___Apple80211AWDLCompatibilityInternal_block_invoke_2;
            v195[3] = &unk_264137F38;
            v195[5] = v199;
            v195[4] = v142;
            [v143 endTransaction:9 completionHandler:v195];
          }

          dispatch_semaphore_wait(v142, 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v7 = *(unsigned int *)(*(void *)&v199[8] + 24);

          _Block_object_dispose(v199, 8);
          goto LABEL_214;
        }
        *(void *)uint64_t v141 = 0;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        uint64_t v176 = *(unsigned int *)(a2 + 16);
        if ((int)v176 > 558)
        {
          CFNumberRef v175 = "Error Invalid ioctl";
        }
        else if (v176 == -1)
        {
          CFNumberRef v175 = "APPLE80211_IOC_CARD_SPECIFIC";
        }
        else if ((v176 & 0x80000000) != 0 || (CFNumberRef v175 = (const char *)gAppleIoucIndexToString[v176]) == 0)
        {
          CFNumberRef v175 = "unknown Apple80211_IOC_";
        }
LABEL_197:
        *(_DWORD *)char v199 = 136315394;
        *(void *)&v199[4] = "_Apple80211AWDLCompatibilityInternal";
        *(_WORD *)&v199[12] = 2080;
        *(void *)&v199[14] = v175;
        _os_log_error_impl(&dword_210714000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%s: unsupported get for %s on awdl0", v199, 0x16u);
        return 0;
      }
      goto LABEL_4;
    }
    if (v6 == 203)
    {
      if (a3) {
        goto LABEL_172;
      }
      uint64_t v146 = *(void *)(a2 + 32);
      if (v146 && *(_DWORD *)(a2 + 24) == 208480)
      {
        id v147 = objc_alloc_init(_MergedGlobals());
        id objb = [v147 queryPeerDatabase];

        unint64_t v148 = [objb count];
        uint64_t v149 = 100;
        if (v148 < 0x64) {
          uint64_t v149 = v148;
        }
        *(_DWORD *)(v146 + 4) = v149;
        if (v149)
        {
          unint64_t v150 = 0;
          CFIndex v151 = (char *)(v146 + 1413);
          do
          {
            int v152 = [objb objectAtIndexedSubscript:v150];
            _copyMACAddress((void *)(v146 + 2064 * v150 + 40), v152);
            CFNumberRef v153 = [v152 valueForKey:@"STATION_RSSI"];
            *(_DWORD *)(v146 + 2064 * v150 + 100) = [v153 intValue];

            unsigned int v154 = [v152 valueForKey:@"STATION_AWDL_ELECTION_METRIC"];
            *(_DWORD *)(v146 + 2064 * v150 + 88) = [v154 unsignedIntValue];

            id v155 = [v152 valueForKey:@"STATION_HOSTNAME"];
            [v155 cStringUsingEncoding:4];
            [v155 length];
            __strncpy_chk();
            uint64_t v156 = v146 + 2064 * v150;
            _copyMACAddress((void *)(v156 + 52), v152);
            _copyMACAddress((void *)(v156 + 46), v152);
            int v157 = [v152 valueForKey:@"STATION_AWDL_DISTANCE_TOP"];
            *(unsigned char *)(v146 + 2064 * v150 + 96) = [v157 unsignedCharValue];

            int v158 = [v152 valueForKey:@"STATION_AWDL_PLATFORM"];
            *(unsigned char *)(v146 + 2064 * v150 + 505) = [v158 unsignedCharValue];

            int v159 = [v152 valueForKey:@"STATION_AWDL_VERSION"];
            *(unsigned char *)(v146 + 2064 * v150 + 506) = [v159 unsignedCharValue];

            CFNumberRef v160 = [v152 valueForKey:@"STATION_AWDL_SERVICES"];
            unint64_t v161 = [v160 count];
            if (v161 >= 0xA) {
              uint64_t v162 = 10;
            }
            else {
              uint64_t v162 = v161;
            }
            if (v162)
            {
              unint64_t v163 = 0;
              int v164 = v151;
              do
              {
                id v165 = [v160 objectAtIndexedSubscript:v163];
                strncpy(v164, (const char *)[v165 cStringUsingEncoding:4], 0x3FuLL);

                ++v163;
                unint64_t v166 = [v160 count];
                if (v166 >= 0xA) {
                  unint64_t v167 = 10;
                }
                else {
                  unint64_t v167 = v166;
                }
                v164 += 64;
              }
              while (v163 < v167);
            }

            ++v150;
            v151 += 2064;
          }
          while (v150 < *(unsigned int *)(v146 + 4));
        }

        return 0;
      }
      goto LABEL_181;
    }
    if (v6 != 205)
    {
      if (v6 != 208) {
        goto LABEL_171;
      }
      goto LABEL_4;
    }
    if (a3) {
      goto LABEL_172;
    }
    uint64_t v139 = *(void *)(a2 + 32);
    if (!v139 || *(_DWORD *)(a2 + 24) != 8) {
      goto LABEL_181;
    }
    CFArrayRef v123 = [(objc_class *)off_26ACCC390() currentState];
    CFNumberRef v140 = [v123 peerSecondaryPreferredChannel];
LABEL_162:
    int v168 = v140;
    *(_DWORD *)(v139 + 4) = [v140 channelNumber];
LABEL_167:

LABEL_168:
    return 0;
  }
  if ((int)v6 > 243)
  {
    if (v6 == 244)
    {
      if (a3) {
        goto LABEL_172;
      }
      int v169 = *(_WORD **)(a2 + 32);
      if (!v169 || *(_DWORD *)(a2 + 24) != 12) {
        goto LABEL_181;
      }
      CFArrayRef v123 = [(objc_class *)off_26ACCC390() currentState];
      int v170 = [v123 peerMasterChannel];
      v169[3] = [v170 channelNumber];

      BOOL v171 = [v123 peerPrimaryPreferredChannel];
      v169[2] = [v171 channelNumber];

      int v168 = [v123 peerSecondaryPreferredChannel];
      v169[4] = [v168 channelNumber];
      goto LABEL_167;
    }
    if (v6 != 351 && v6 != 557) {
      goto LABEL_171;
    }
  }
  else
  {
    if (v6 == 217)
    {
      if (a3) {
        goto LABEL_172;
      }
      uint64_t v145 = *(void *)(a2 + 32);
      if (!v145 || *(_DWORD *)(a2 + 24) != 8) {
        goto LABEL_181;
      }
      *(_DWORD *)(v145 + 4) = 0;
      return 0;
    }
    if (v6 != 220)
    {
      if (v6 == 223)
      {
        if (a3) {
          goto LABEL_172;
        }
        obCFIndex j = *(char **)(a2 + 32);
        if (obj && *(_DWORD *)(a2 + 24) == 3712)
        {
          id v15 = objc_alloc_init(_MergedGlobals());
          uint64_t v16 = (void *)[v15 copyStatistics];

          id v190 = v16;
          unint64_t v17 = [v190 valueForKey:@"AWDL_STATS_FLAGS"];
          *((_DWORD *)obj + 1) = [v17 unsignedIntValue];

          int v18 = [v190 valueForKey:@"AWDL_STATS_RXBYTES"];
          *((_DWORD *)obj + 2) = [v18 unsignedIntValue];

          uint64_t v19 = [v190 valueForKey:@"AWDL_STATS_TXBYTES"];
          *((_DWORD *)obj + 3) = [v19 unsignedIntValue];

          uint64_t v20 = [v190 valueForKey:@"AWDL_STATS_PACKET_FAILURES"];
          *((_DWORD *)obj + 4) = [v20 unsignedIntValue];

          unint64_t v21 = [v190 valueForKey:@"AWDL_STATS_SELF_INFRA_CHANNEL"];
          *((_DWORD *)obj + 5) = [v21 unsignedIntValue];

          unint64_t v22 = [v190 valueForKey:@"AWDL_STATS_SELF_INFRA_CHANNEL_FLAGS"];
          *((_DWORD *)obj + 904) = [v22 unsignedIntValue];

          uint64_t v23 = [v190 valueForKey:@"AWDL_STATS_PEER_INFRA_CHANNEL"];
          obj[24] = [v23 unsignedCharValue];

          uint64_t v24 = [v190 valueForKey:@"AWDL_STATS_PEER_INFRA_CHANNEL_FLAGS"];
          *((_DWORD *)obj + 905) = [v24 unsignedIntValue];

          uint64_t v25 = [v190 valueForKey:@"AWDL_STATS_NUM_PEERS"];
          obj[25] = [v25 unsignedCharValue];

          unint64_t v26 = [v190 valueForKey:@"AWDL_STATS_NUM_CACHED_PEERS"];
          obj[26] = [v26 unsignedCharValue];

          unint64_t v27 = [v190 valueForKey:@"AWDL_STATS_NUM_CACHED_PEERS_2GHZ"];
          obj[27] = [v27 unsignedCharValue];

          unint64_t v28 = [v190 valueForKey:@"AWDL_STATS_NUM_CACHED_PEERS_5GHZ"];
          obj[28] = [v28 unsignedCharValue];

          uint64_t v29 = [v190 valueForKey:@"AWDL_STATS_NUM_CACHED_PEERS_DFS"];
          obj[29] = [v29 unsignedCharValue];

          uint64_t v30 = [v190 valueForKey:@"AWDL_STATS_NUM_CACHED_PEERS_UNASSOC"];
          obj[30] = [v30 unsignedCharValue];

          uint64_t v31 = [v190 valueForKey:@"AWDL_STATS_NUM_SYNC_CHANGES"];
          *((void *)obj + 11) = [v31 unsignedIntegerValue];

          unint64_t v32 = [v190 valueForKey:@"AWDL_STATS_HOPCOUNT"];
          unint64_t v33 = [v32 count];
          uint64_t v34 = 6;
          if (v33 < 6) {
            uint64_t v34 = v33;
          }
          if (v34)
          {
            unint64_t v35 = 0;
            uint64_t v36 = (double *)(obj + 112);
            do
            {
              uint64_t v37 = [v32 objectAtIndexedSubscript:v35];
              uint64_t v38 = [v37 valueForKey:@"AWDL_STATS_HISTOGRAM_BIN_START"];
              *(v36 - 2) = (double)(unint64_t)[v38 unsignedIntegerValue];

              uint64_t v39 = [v32 objectAtIndexedSubscript:v35];
              unint64_t v40 = [v39 valueForKey:@"AWDL_STATS_HISTOGRAM_BIN_END"];
              *(v36 - 1) = (double)(unint64_t)[v40 unsignedIntegerValue];

              CFNumberRef v41 = [v32 objectAtIndexedSubscript:v35];
              CFNumberRef v42 = [v41 valueForKey:@"AWDL_STATS_HISTOGRAM_BIN_VALUE"];
              double *v36 = (double)(unint64_t)[v42 unsignedIntegerValue];
              v36 += 3;

              ++v35;
              unint64_t v43 = [v32 count];
              if (v43 >= 6) {
                unint64_t v44 = 6;
              }
              else {
                unint64_t v44 = v43;
              }
            }
            while (v35 < v44);
          }
          CFNumberRef v45 = [v190 valueForKey:@"AWDL_STATS_PARENTRSSI"];
          unint64_t v46 = [v45 count];
          uint64_t v47 = 3;
          if (v46 < 3) {
            uint64_t v47 = v46;
          }
          if (v47)
          {
            unint64_t v48 = 0;
            CFNumberRef v49 = (double *)(obj + 256);
            do
            {
              CFNumberRef v50 = [v45 objectAtIndexedSubscript:v48];
              CFNumberRef v51 = [v50 valueForKey:@"AWDL_STATS_HISTOGRAM_BIN_START"];
              *(v49 - 2) = (double)(unint64_t)[v51 unsignedIntegerValue];

              CFNumberRef v52 = [v45 objectAtIndexedSubscript:v48];
              CFNumberRef v53 = [v52 valueForKey:@"AWDL_STATS_HISTOGRAM_BIN_END"];
              *(v49 - 1) = (double)(unint64_t)[v53 unsignedIntegerValue];

              CFNumberRef v54 = [v45 objectAtIndexedSubscript:v48];
              CFDictionaryRef v55 = [v54 valueForKey:@"AWDL_STATS_HISTOGRAM_BIN_VALUE"];
              *CFNumberRef v49 = (double)(unint64_t)[v55 unsignedIntegerValue];
              v49 += 3;

              ++v48;
              unint64_t v56 = [v45 count];
              if (v56 >= 3) {
                unint64_t v57 = 3;
              }
              else {
                unint64_t v57 = v56;
              }
            }
            while (v48 < v57);
          }
          CFNumberRef v58 = [v190 valueForKey:@"AWDL_STATS_SESSION_DURATION"];
          *((void *)obj + 6) = [v58 unsignedIntegerValue];

          CFNumberRef v59 = [v190 valueForKey:@"AWDL_STATS_SUSPEND_DURATION"];
          *((void *)obj + 7) = [v59 unsignedIntegerValue];

          unint64_t v60 = [v190 valueForKey:@"AWDL_STATS_SUSPEND_COUNT"];
          *((_DWORD *)obj + 16) = [v60 unsignedIntValue];

          uint64_t v61 = [v190 valueForKey:@"AWDL_STATS_PEER_VERSION_BITMAP"];
          *((_WORD *)obj + 34) = [v61 unsignedShortValue];

          uint64_t v62 = [v190 valueForKey:@"AWDL_STATS_MCAST_RXBYTES"];
          *((_DWORD *)obj + 18) = [v62 unsignedIntValue];

          CFNumberRef v63 = [v190 valueForKey:@"AWDL_STATS_MCAST_TXBYTES"];
          *((_DWORD *)obj + 19) = [v63 unsignedIntValue];

          char v64 = [v190 valueForKey:@"AWDL_STATS_AF_RXBYTES"];
          *((_DWORD *)obj + 20) = [v64 unsignedIntValue];

          CFNumberRef v65 = [v190 valueForKey:@"AWDL_STATS_DFSPAIRPLAY_CONNECTED"];
          *((_DWORD *)obj + 84) = [v65 unsignedIntValue];

          CFNumberRef v66 = [v190 valueForKey:@"AWDL_STATS_DFSPAIRPLAY_FAILED"];
          *((_DWORD *)obj + 85) = [v66 unsignedIntValue];

          char v67 = [v190 valueForKey:@"AWDL_STATS_DFSP_CSA_PEER"];
          *((_DWORD *)obj + 86) = [v67 unsignedIntValue];

          CFNumberRef v68 = [v190 valueForKey:@"AWDL_STATS_DFSP_CSA_AP"];
          *((_DWORD *)obj + 87) = [v68 unsignedIntValue];

          CFNumberRef v69 = [v190 valueForKey:@"AWDL_STATS_DFSP_CSA_SUSPECT"];
          *((_DWORD *)obj + 88) = [v69 unsignedIntValue];

          CFNumberRef v70 = [v190 valueForKey:@"AWDL_STATS_DFSP_CSA_RESUME"];
          *((_DWORD *)obj + 89) = [v70 unsignedIntValue];

          CFNumberRef v71 = [v190 valueForKey:@"AWDL_STATS_NUM_RT_SESSION"];
          *((_WORD *)obj + 1781) = [v71 unsignedShortValue];

          CFNumberRef v72 = [v190 valueForKey:@"AWDL_STATS_DYNSDB_ALLOWED"];
          *((_WORD *)obj + 1782) = [v72 unsignedShortValue];

          CFNumberRef v73 = [v190 valueForKey:@"AWDL_STATS_DYNSDB_ENTRY_OK"];
          *((_WORD *)obj + 1783) = [v73 unsignedShortValue];

          CFNumberRef v74 = [v190 valueForKey:@"AWDL_STATS_DYNSDB_RATE_EXIT"];
          *((_WORD *)obj + 1784) = [v74 unsignedShortValue];

          CFNumberRef v75 = [v190 valueForKey:@"AWDL_STATS_DYNSDB_ALLOWED"];
          *((_WORD *)obj + 1785) = [v75 unsignedShortValue];

          CFNumberRef v76 = [v190 valueForKey:@"AWDL_STATS_PEER_CHANNEL_STEER_COUNT_2G"];
          *((_DWORD *)obj + 913) = [v76 unsignedIntValue];

          CFNumberRef v77 = [v190 valueForKey:@"AWDL_STATS_PEER_CHANNEL_STEER_COUNT_5G"];
          *((_DWORD *)obj + 914) = [v77 unsignedIntValue];

          CFNumberRef v78 = [v190 valueForKey:@"AWDL_STATS_PEER_CHANNEL_STEER_BEFORE"];
          *((_DWORD *)obj + 915) = [v78 unsignedIntValue];

          CFNumberRef v79 = [v190 valueForKey:@"AWDL_STATS_PEER_CHANNEL_STEER_AFTER"];
          *((_DWORD *)obj + 916) = [v79 unsignedIntValue];

          CFNumberRef v80 = [v190 valueForKey:@"AWDL_STATS_STATS_DWELL_SESSION_COUNT"];
          *((_DWORD *)obj + 917) = [v80 unsignedIntValue];

          CFNumberRef v81 = [v190 valueForKey:@"AWDL_STATS_TOTAL_DURATION"];
          *((_DWORD *)obj + 919) = [v81 unsignedIntValue];

          CFNumberRef v82 = [v190 valueForKey:@"AWDL_STATS_STATS_INACTIVITY_DURATION"];
          *((_DWORD *)obj + 920) = [v82 unsignedIntValue];

          CFNumberRef v83 = [v190 valueForKey:@"AWDL_STATS_STATS_ACTIVITY_DURATION"];
          *((_DWORD *)obj + 921) = [v83 unsignedIntValue];

          CFDataRef v84 = [v190 valueForKey:@"AWDL_STATS_PERCENTAGE_INACTIVITY"];
          *((_DWORD *)obj + 922) = [v84 unsignedIntValue];

          CFDataRef v85 = [v190 valueForKey:@"AWDL_STATS_TIME_TO_SERVICE"];
          *((_DWORD *)obj + 923) = [v85 unsignedIntValue];

          CFNumberRef v86 = [v190 valueForKey:@"AWDL_STATS_PERCENTAGE_INFRA_IDLE"];
          *((_DWORD *)obj + 924) = [v86 unsignedIntValue];

          CFNumberRef v87 = [v190 valueForKey:@"AWDL_STATS_PERCENTAGE_INFRA_REAL"];
          *((_DWORD *)obj + 925) = [v87 unsignedIntValue];

          uint64_t v88 = [v190 valueForKey:@"AWDL_STATS_PERCENTAGE_INFRA_NONREAL"];
          *((_DWORD *)obj + 926) = [v88 unsignedIntValue];

          id v89 = [v190 objectForKey:@"AWDL_STATS_OUI"];
          int v90 = (const void *)[v89 bytes];
          CFNumberRef v189 = v89;
          unint64_t v91 = [v89 length];
          if (v91 >= 3) {
            size_t v92 = 3;
          }
          else {
            size_t v92 = v91;
          }
          memcpy(obj + 3708, v90, v92);
          int v93 = [v190 valueForKey:@"AWDL_STATS_STATES"];
          unint64_t v94 = [v93 count];
          uint64_t v95 = 54;
          if (v94 < 0x36) {
            uint64_t v95 = v94;
          }
          if (v95)
          {
            unint64_t v96 = 0;
            char v97 = obj + 368;
            do
            {
              char v98 = [v93 objectAtIndexedSubscript:v96];
              char v99 = [v98 valueForKey:@"AWDL_STATS_STATE_COUNT"];
              *((_DWORD *)v97 - 2) = [v99 unsignedIntValue];

              char v100 = [v93 objectAtIndexedSubscript:v96];
              unsigned __int8 v101 = [v100 valueForKey:@"AWDL_STATS_STATE_DURATION"];
              *char v97 = [v101 unsignedIntegerValue];
              v97 += 2;

              ++v96;
              unint64_t v102 = [v93 count];
              if (v102 >= 0x36) {
                unint64_t v103 = 54;
              }
              else {
                unint64_t v103 = v102;
              }
            }
            while (v96 < v103);
          }
          __int16 v104 = [v190 valueForKey:@"AWDL_STATS_SERVICES"];
          unint64_t v105 = [v104 count];
          uint64_t v106 = 16;
          if (v105 < 0x10) {
            uint64_t v106 = v105;
          }
          if (v106)
          {
            unint64_t v107 = 0;
            long long v108 = obj + 2808;
            do
            {
              CFArrayRef v109 = [v104 objectAtIndexedSubscript:v107];
              CFArrayRef v110 = [v109 valueForKey:@"AWDL_STATS_SERVICE_DURATION"];
              *((void *)v108 - 1) = [v110 unsignedLongValue];

              uint64_t v111 = [v104 objectAtIndexedSubscript:v107];
              CFIndex v112 = [v111 valueForKey:@"AWDL_STATS_SERVICE_ID"];
              *((_DWORD *)v108 - 3) = [v112 unsignedIntValue];

              CFIndex v113 = [v104 objectAtIndexedSubscript:v107];
              CFNumberRef v114 = [v113 valueForKey:@"AWDL_STATS_SERVICE_TYPE"];
              *(v108 - 15) = [v114 unsignedCharValue];

              CFNumberRef v115 = [v104 objectAtIndexedSubscript:v107];
              uint64_t v116 = [v115 valueForKey:@"AWDL_STATS_SERVICE_KEY"];

              id v117 = v116;
              strncpy(v108, (const char *)[v117 cStringUsingEncoding:4], 0x1FuLL);

              ++v107;
              unint64_t v118 = [v104 count];
              if (v118 >= 0x10) {
                unint64_t v119 = 16;
              }
              else {
                unint64_t v119 = v118;
              }
              v108 += 48;
            }
            while (v107 < v119);
          }
          int v120 = [v190 valueForKey:@"AWDL_STATS_NUM_CACHED_PEERS_6GHZ"];
          obj[3624] = [v120 unsignedCharValue];

          int v121 = [v190 valueForKey:@"APPLE80211KEY_AWDL_STATS_SELF_6E_CAPABLE"];
          obj[3625] = [v121 unsignedCharValue];

          CFArrayRef v122 = [v190 valueForKey:@"APPLE80211KEY_AWDL_STATS_PEER_6E_CAP_COUNT"];
          obj[3626] = [v122 unsignedCharValue];

          CFArrayRef v123 = v190;
          goto LABEL_168;
        }
        goto LABEL_181;
      }
      goto LABEL_171;
    }
  }
LABEL_4:
  if (a3) {
    goto LABEL_172;
  }
  bzero(*(void **)(a2 + 32), *(unsigned int *)(a2 + 24));
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    uint64_t v174 = *(unsigned int *)(a2 + 16);
    if ((int)v174 > 558)
    {
      CFNumberRef v175 = "Error Invalid ioctl";
    }
    else if (v174 == -1)
    {
      CFNumberRef v175 = "APPLE80211_IOC_CARD_SPECIFIC";
    }
    else if ((v174 & 0x80000000) != 0 || (CFNumberRef v175 = (const char *)gAppleIoucIndexToString[v174]) == 0)
    {
      CFNumberRef v175 = "unknown Apple80211_IOC_";
    }
    goto LABEL_197;
  }
  return 0;
}

void sub_210752954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

Class initWiFiP2PAWDLStateMonitor()
{
  if (qword_26774FF00 != -1) {
    dispatch_once(&qword_26774FF00, &__block_literal_global_0);
  }
  Class result = objc_getClass("WiFiP2PAWDLStateMonitor");
  _MergedGlobals_7 = (uint64_t)result;
  _MergedGlobals = (uint64_t (*)())WiFiP2PAWDLStateMonitorFunction;
  return result;
}

id WiFiP2PAWDLStateMonitorFunction()
{
  return (id)_MergedGlobals_7;
}

void *__WiFiPeerToPeerLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/WiFiPeerToPeer.framework/WiFiPeerToPeer", 2);
  WiFiPeerToPeerLibrary_sLib = (uint64_t)result;
  return result;
}

Class initAWDLServiceDiscoveryManager()
{
  if (qword_26774FF00 != -1) {
    dispatch_once(&qword_26774FF00, &__block_literal_global_0);
  }
  Class result = objc_getClass("AWDLServiceDiscoveryManager");
  qword_26774FF08 = (uint64_t)result;
  off_26ACCC378 = (uint64_t (*)())AWDLServiceDiscoveryManagerFunction;
  return result;
}

id AWDLServiceDiscoveryManagerFunction()
{
  return (id)qword_26774FF08;
}

Class initAWDLTrafficRegistrationConfiguration()
{
  if (qword_26774FF00 != -1) {
    dispatch_once(&qword_26774FF00, &__block_literal_global_0);
  }
  Class result = objc_getClass("AWDLTrafficRegistrationConfiguration");
  qword_26774FF10 = (uint64_t)result;
  off_26ACCC380 = (uint64_t (*)())AWDLTrafficRegistrationConfigurationFunction;
  return result;
}

id AWDLTrafficRegistrationConfigurationFunction()
{
  return (id)qword_26774FF10;
}

Class initWiFiMACAddress()
{
  if (qword_26774FF00 != -1) {
    dispatch_once(&qword_26774FF00, &__block_literal_global_0);
  }
  Class result = objc_getClass("WiFiMACAddress");
  qword_26774FF18 = (uint64_t)result;
  off_26ACCC388 = (uint64_t (*)())WiFiMACAddressFunction;
  return result;
}

id WiFiMACAddressFunction()
{
  return (id)qword_26774FF18;
}

Class initWiFiP2PAWDLState()
{
  if (qword_26774FF00 != -1) {
    dispatch_once(&qword_26774FF00, &__block_literal_global_0);
  }
  Class result = objc_getClass("WiFiP2PAWDLState");
  qword_26774FF20 = (uint64_t)result;
  off_26ACCC390 = (uint64_t (*)())WiFiP2PAWDLStateFunction;
  return result;
}

id WiFiP2PAWDLStateFunction()
{
  return (id)qword_26774FF20;
}

Class initWiFiP2PSPITransactionRequestor()
{
  if (qword_26774FF00 != -1) {
    dispatch_once(&qword_26774FF00, &__block_literal_global_0);
  }
  Class result = objc_getClass("WiFiP2PSPITransactionRequestor");
  qword_26774FF28 = (uint64_t)result;
  off_26ACCC398 = (uint64_t (*)())WiFiP2PSPITransactionRequestorFunction;
  return result;
}

id WiFiP2PSPITransactionRequestorFunction()
{
  return (id)qword_26774FF28;
}

void _copyMACAddress(void *a1, void *a2)
{
  objc_msgSend(a2, "objectForKey:");
  id v6 = objc_claimAutoreleasedReturnValue();
  char v3 = (const void *)[v6 bytes];
  unint64_t v4 = [v6 length];
  if (v4 >= 6) {
    size_t v5 = 6;
  }
  else {
    size_t v5 = v4;
  }
  memcpy(a1, v3, v5);
}

void *funcAddr(char *__symbol)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  Class result = (void *)image;
  if (image) {
    return dlsym(result, __symbol);
  }
  char v3 = getenv("DYLD_IMAGE_SUFFIX");
  v4.tv_seCC_MD5_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nseCC_MD5_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v7.st_blksize = v4;
  *(timespec *)v7.st_qspare = v4;
  v7.st_birthtimespeCC_MD5_CTX c = v4;
  *(timespec *)&v7.st_size = v4;
  v7.st_mtimespeCC_MD5_CTX c = v4;
  v7.st_ctimespeCC_MD5_CTX c = v4;
  *(timespec *)&v7.st_uid = v4;
  v7.st_atimespeCC_MD5_CTX c = v4;
  *(timespec *)&v7.st_dev = v4;
  memset(v6, 170, sizeof(v6));
  __strlcpy_chk();
  if (v3) {
    __strlcat_chk();
  }
  size_t v5 = stat(v6, &v7) < 0 ? "/usr/lib/libWAPI.dylib" : v6;
  Class result = dlopen(v5, 6);
  image = (uint64_t)result;
  if (result) {
    return dlsym(result, __symbol);
  }
  return result;
}

uint64_t _WAPIStop(uint64_t a1)
{
  if (!image) {
    return 0;
  }
  uint64_t v2 = _WAPIStop_wapistop;
  if (!_WAPIStop_wapistop)
  {
    uint64_t v2 = funcAddr("WAPIStop");
    _WAPIStop_wapistop = v2;
    if (!v2) {
      return 0xFFFFFFFFLL;
    }
  }
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

int CC_MD5_Final(unsigned __int8 *md, CC_MD5_CTX *c)
{
  return MEMORY[0x270ED7AD8](md, c);
}

int CC_MD5_Init(CC_MD5_CTX *c)
{
  return MEMORY[0x270ED7AE0](c);
}

int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x270ED7AE8](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x270EE4278]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x270EE42E8](theArray, range.location, range.length, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4310](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x270EE4348]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x270EE4838]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE48F0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x270EE4910](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4928](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x270EE4930](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x270EE4968](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x270EE4D10](allocator, propertyList, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x270EE4ED0](mode, returnAfterSourceHandled, seconds);
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x270EE4F00](allocator, flags, order, callout, context, fireDate, interval);
}

void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer)
{
}

void CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer, CFAbsoluteTime fireDate)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

CFRunLoopSourceRef CFSocketCreateRunLoopSource(CFAllocatorRef allocator, CFSocketRef s, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x270EE4FC8](allocator, s, order);
}

CFSocketRef CFSocketCreateWithNative(CFAllocatorRef allocator, CFSocketNativeHandle sock, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context)
{
  return (CFSocketRef)MEMORY[0x270EE4FD0](allocator, *(void *)&sock, callBackTypes, callout, context);
}

CFSocketNativeHandle CFSocketGetNative(CFSocketRef s)
{
  return MEMORY[0x270EE4FE8](s);
}

void CFSocketInvalidate(CFSocketRef s)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5048](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50A8](alloc, data, *(void *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B0](alloc, maxLength);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x270EE50D0](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x270EE5170](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x270EE5178](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x270EE51E0](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

uint64_t CNCRC()
{
  return MEMORY[0x270ED7B88]();
}

kern_return_t IOConnectCallAsyncMethod(mach_port_t connection, uint32_t selector, mach_port_t wake_port, uint64_t *reference, uint32_t referenceCnt, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x270EF3F18](*(void *)&connection, *(void *)&selector, *(void *)&wake_port, reference, *(void *)&referenceCnt, input, *(void *)&inputCnt, inputStruct);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x270EF3F40](*(void *)&connection, *(void *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOConnectMapMemory(io_connect_t connect, uint32_t memoryType, task_port_t intoTask, mach_vm_address_t *atAddress, mach_vm_size_t *ofSize, IOOptionBits options)
{
  return MEMORY[0x270EF3F50](*(void *)&connect, *(void *)&memoryType, *(void *)&intoTask, atAddress, ofSize, *(void *)&options);
}

kern_return_t IOConnectUnmapMemory(io_connect_t connect, uint32_t memoryType, task_port_t fromTask, mach_vm_address_t atAddress)
{
  return MEMORY[0x270EF3FB8](*(void *)&connect, *(void *)&memoryType, *(void *)&fromTask, atAddress);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x270EF4790](*(void *)&iterator);
}

kern_return_t IOMainPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return MEMORY[0x270EF47A8](*(void *)&bootstrapPort, mainPort);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x270EF47B8](*(void *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

mach_port_t IONotificationPortGetMachPort(IONotificationPortRef notify)
{
  return MEMORY[0x270EF47C8](notify);
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return (CFRunLoopSourceRef)MEMORY[0x270EF47D0](notify);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

uint32_t IOObjectGetKernelRetainCount(io_object_t object)
{
  return MEMORY[0x270EF4808](*(void *)&object);
}

uint32_t IOObjectGetUserRetainCount(io_object_t object)
{
  return MEMORY[0x270EF4810](*(void *)&object);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x270EF4820](*(void *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x270EF49D8](*(void *)&entry, key, allocator, *(void *)&options);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x270EF4A50](*(void *)&entry, plane, key, allocator, *(void *)&options);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return MEMORY[0x270EF4A88](notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x270EF4A98](*(void *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x270EF4AB0](*(void *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x270EF4AB8](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EF4AD0](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x270EF4AE0](*(void *)&service, *(void *)&owningTask, *(void *)&type, connect);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x270EFDCB0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x270EFDCD0](allocator);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x270EE57A8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x270ED7DA8](*(void *)&a1, a2, *(void *)&a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x270ED7E38]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x270ED7ED8]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x270ED7EE0]();
}

uint64_t __strncpy_chk()
{
  return MEMORY[0x270ED7EF0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x270ED8070]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void bzero(void *a1, size_t a2)
{
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x270ED8EF8](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9448](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

ether_addr *__cdecl ether_aton(const char *a1)
{
  return (ether_addr *)MEMORY[0x270ED97B0](a1);
}

char *__cdecl ether_ntoa(const ether_addr *a1)
{
  return (char *)MEMORY[0x270ED97C0](a1);
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x270ED9A20](a1, a2);
}

void free(void *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x270ED9C68](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x270ED9D98](a1, a2);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x270ED9ED8](*(void *)&a1, a2);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x270F9A658](name);
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t os_parse_boot_arg_int()
{
  return MEMORY[0x270EDAA30]();
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x270EDAD60](*(void *)&pid, buffer, *(void *)&buffersize);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x270EDB120](*(void *)&a1, a2, a3);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x270EDB328](*(void *)&a1, a2, a3, a4, a5);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x270EDB520](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB5F8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB600](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

size_t strspn(const char *__s, const char *__charset)
{
  return MEMORY[0x270EDB698](__s, __charset);
}

void syslog(int a1, const char *a2, ...)
{
}

int usleep(useconds_t a1)
{
  return MEMORY[0x270EDB9E8](*(void *)&a1);
}

void uuid_generate(uuid_t out)
{
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x270EDBE58](name, targetq, flags);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDC008](keys, values, count);
}

void xpc_release(xpc_object_t object)
{
}