__CFString *PFStoryValidatedTitleCategory(uint64_t a1)
{
  uint64_t v1;
  __CFString *v2;

  if ((unint64_t)(a1 - 7) >= 0xFFFFFFFFFFFFFFFALL)
  {
    v2 = Vertices[a1 - 1];
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void PFMutableArrayShuffleWithRandomNumberGenerator(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  PFMutableArrayShuffleRangeWithRandomNumberGenerator(v4, 0, [v4 count], v3);
}

void PFMutableArrayShuffleRangeWithRandomNumberGenerator(void *a1, uint64_t a2, int a3, void *a4)
{
  id v8 = a1;
  if (a3 >= 2)
  {
    unint64_t v7 = a3 + 1;
    do
    {
      objc_msgSend(v8, "exchangeObjectAtIndex:withObjectAtIndex:", a2 + (v7 - 2), a2 + (int)objc_msgSend(a4, "nextUnsignedIntegerLessThan:", (v7 - 2)));
      --v7;
    }
    while (v7 > 2);
  }
}

uint64_t PFSharedFigDecodeSession()
{
  if (PFSharedFigDecodeSession_s_onceToken != -1) {
    dispatch_once(&PFSharedFigDecodeSession_s_onceToken, &__block_literal_global_1253);
  }
  return PFSharedFigDecodeSession_s_decodeSession;
}

void __PFSharedFigDecodeSession_block_invoke()
{
  v0 = (void *)MEMORY[0x1A6259880]();
  CMPhotoDecompressionSessionCreate();
  if (PFSharedFigDecodeSession_s_decodeSession)
  {
    v1 = dispatch_get_global_queue(0, 0);
    dispatch_source_t v2 = dispatch_source_create(MEMORY[0x1E4F14468], 0, 2uLL, v1);
    id v3 = (void *)PFSharedFigDecodeSession_s_memoryEventSource;
    PFSharedFigDecodeSession_s_memoryEventSource = (uint64_t)v2;

    dispatch_source_set_event_handler((dispatch_source_t)PFSharedFigDecodeSession_s_memoryEventSource, &__block_literal_global_2);
    dispatch_resume((dispatch_object_t)PFSharedFigDecodeSession_s_memoryEventSource);
    uint64_t v4 = objc_opt_new();
    v5 = (void *)PFSharedFigDecodeSession_s_memoryQueue;
    PFSharedFigDecodeSession_s_memoryQueue = v4;

    v6 = [MEMORY[0x1E4F28EB8] defaultCenter];
    id v7 = (id)[v6 addObserverForName:@"UIApplicationDidEnterBackgroundNotification" object:0 queue:PFSharedFigDecodeSession_s_memoryQueue usingBlock:&__block_literal_global_7];
  }
}

id PFUnderlyingErrorThatMatchesCodesByDomain(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v3;
  v6 = [v4 objectForKeyedSubscript:@"*"];
  v17 = v5;
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *MEMORY[0x1E4F28A50];
    do
    {
      v9 = [v5 domain];
      v10 = [v4 objectForKeyedSubscript:v9];

      v11 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v5, "code"));
      if (([v6 containsObject:v11] & 1) != 0
        || [v10 containsObject:v11])
      {
        id v5 = v5;
        v12 = v5;
      }
      else
      {
        v13 = [v5 userInfo];
        uint64_t v14 = [v13 objectForKeyedSubscript:v8];

        v12 = 0;
        ++v7;
        id v5 = (id)v14;
      }
    }
    while (v5 && !v12 && v7 < 10);
  }
  else
  {
    v12 = 0;
  }
  id v15 = v12;

  return v15;
}

__CFString *PFStoryTitleCategoryNamed(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int VertexIndexForTitleCategory = _GetVertexIndexForTitleCategory(v1);
  if (VertexIndexForTitleCategory < 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      int v5 = 138412290;
      id v6 = v1;
      _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "unsupported title category '%@'", (uint8_t *)&v5, 0xCu);
    }
    id v3 = @"undefined";
  }
  else
  {
    id v3 = Vertices[VertexIndexForTitleCategory];
  }

  return v3;
}

uint64_t _GetVertexIndexForTitleCategory(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0;
  while (1)
  {
    id v3 = Vertices[v2];
    if (v3 == v1 || ([(__CFString *)v3 isEqualToString:v1] & 1) != 0) {
      break;
    }
    if (++v2 == 6)
    {
      uint64_t v2 = 0xFFFFFFFFLL;
      break;
    }
  }

  return v2;
}

id PFStoryTitleSupportedCategories()
{
  if (PFStoryTitleSupportedCategories_onceToken[0] != -1) {
    dispatch_once(PFStoryTitleSupportedCategories_onceToken, &__block_literal_global);
  }
  v0 = (void *)PFStoryTitleSupportedCategories_supportedCategories;

  return v0;
}

void __PFStoryTitleSupportedCategories_block_invoke()
{
  id v3 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:6];
  for (uint64_t i = 0; i != 6; ++i)
    [v3 addObject:Vertices[i]];
  uint64_t v1 = [v3 copy];
  uint64_t v2 = (void *)PFStoryTitleSupportedCategories_supportedCategories;
  PFStoryTitleSupportedCategories_supportedCategories = v1;
}

__CFString *PFStoryTitleCategoryGenerateWithWrappedIndex(uint64_t a1)
{
  return Vertices[a1 % 6];
}

void *PFStoryTitleCategoryGetSerializedTitleCategory(void *result)
{
  if (result) {
    return (void *)((int)_GetVertexIndexForTitleCategory(result) + 1);
  }
  return result;
}

double progressOfSampleBufferInTimeRange(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  memset(&v10, 0, sizeof(v10));
  CMSampleBufferGetPresentationTimeStamp(&v10, a1);
  CMTime lhs = v10;
  CMTime rhs = *a2;
  CMTimeSubtract(&v9, &lhs, &rhs);
  CMTime v10 = v9;
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetDuration(&v9, a1);
  if ((v9.flags & 0x1D) == 1)
  {
    CMTime rhs = v10;
    CMTime v6 = v9;
    CMTimeAdd(&lhs, &rhs, &v6);
    CMTime v10 = lhs;
  }
  CMTime lhs = v10;
  double Seconds = CMTimeGetSeconds(&lhs);
  CMTime lhs = a2[1];
  return Seconds / CMTimeGetSeconds(&lhs);
}

CMSampleBufferRef StolenFigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer(uint64_t a1, int32_t a2)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  CMSampleBufferRef v21 = 0;
  CMMetadataFormatDescriptionRef formatDescriptionOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v4 = *MEMORY[0x1E4F218A0];
  uint64_t v5 = *MEMORY[0x1E4F1F0F8];
  v23[0] = *MEMORY[0x1E4F1F108];
  v23[1] = v5;
  uint64_t v6 = *MEMORY[0x1E4F1F048];
  v24[0] = v4;
  v24[1] = v6;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:2];
  v25[0] = v7;
  CFArrayRef v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v25 count:1];

  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMMetadataFormatDescriptionCreateWithMetadataSpecifications((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0x6D656278u, v8, &formatDescriptionOut);
  LODWORD(v4) = bswap32(FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors());
  CMBlockBufferCreateWithMemoryBlock(v9, 0, 9uLL, v9, 0, 0, 9uLL, 1u, &blockBufferOut);
  dataPointerOut = 0;
  CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &dataPointerOut);
  CMTime v10 = dataPointerOut;
  *(_DWORD *)dataPointerOut = 150994944;
  v10[8] = -1;
  dataPointerOut = v10 + 8;
  *((_DWORD *)v10 + 1) = v4;
  if (a2) {
    int32_t v11 = a2;
  }
  else {
    int32_t v11 = 600;
  }
  memset(&v18, 0, sizeof(v18));
  CMTimeMake(&v18, 1, v11);
  long long v12 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
  *(_OWORD *)&sampleTimingArray.duration.epoch = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.timescale = v12;
  *(_OWORD *)&sampleTimingArray.decodeTimeStamp.value = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value = *(_OWORD *)a1;
  CMTimeEpoch v13 = *(void *)(a1 + 16);
  sampleTimingArray.decodeTimeStamp.epoch = *(void *)(MEMORY[0x1E4F1FA70] + 64);
  sampleTimingArray.presentationTimeStamp.epoch = v13;
  sampleTimingArray.duration = v18;
  size_t sampleSizeArray = CMBlockBufferGetDataLength(blockBufferOut);
  CMSampleBufferCreate(v9, blockBufferOut, 1u, 0, 0, formatDescriptionOut, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v21);
  CFRelease(formatDescriptionOut);
  CFRelease(blockBufferOut);
  CMSampleBufferRef v14 = v21;

  return v14;
}

void sub_1A4209EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v17 - 136), 8);
  _Unwind_Resume(a1);
}

__CFString *PFPosterConfigurationTypeStringWithType(uint64_t a1)
{
  uint64_t v1 = @"??";
  if (a1 == 1) {
    uint64_t v1 = @"Shuffle";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"Photo";
  }
}

__CFString *PFPosterShuffleTypeStringWithType(unint64_t a1)
{
  if (a1 > 2) {
    return @"??";
  }
  else {
    return off_1E5B2D030[a1];
  }
}

__CFString *PFPosterShuffleFrequencyStringWithFrequency(unint64_t a1)
{
  if (a1 > 4) {
    return @"??";
  }
  else {
    return off_1E5B2D048[a1];
  }
}

BOOL PFCameraAdjustmentsCropIsValid(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  if (CGRectIsEmpty(*(CGRect *)&a1)) {
    return 0;
  }
  v9.origin.x = a1;
  v9.origin.y = a2;
  v9.size.width = a3;
  v9.size.height = a4;
  if (CGRectIsNull(v9)) {
    return 0;
  }
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  return !CGRectIsInfinite(v10);
}

void PFImageMetricComputeSSIMForCIImage(void *a1, void *a2, double *a3, double *a4, double *a5)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  id v8 = a1;
  id v9 = a2;
  os_signpost_id_t v10 = os_signpost_id_make_with_pointer(MEMORY[0x1E4F14500], v8);
  unint64_t v11 = v10 - 1;
  if (v10 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    id v16 = MEMORY[0x1E4F14500];
  }
  else
  {
    long long v12 = a3;
    if (os_signpost_enabled(MEMORY[0x1E4F14500]))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_SIGNPOST_INTERVAL_BEGIN, v10, "com.apple.mediaconversion.ssim", (const char *)&unk_1A42E5DAB, buf, 2u);
    }
    CMTimeEpoch v13 = MEMORY[0x1E4F14500];
    id v14 = MEMORY[0x1E4F14500];
    BOOL v15 = os_signpost_enabled(v13);
    a3 = v12;
    if (v15)
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_SIGNPOST_INTERVAL_BEGIN, v10, "com.apple.mediaconversion.ssim.decode-to-pixelbuffer", (const char *)&unk_1A42E5DAB, buf, 2u);
    }
  }

  CVPixelBufferRef pixelBufferOut = 0;
  [v9 extent];
  if (!CVPixelBufferCreate(0, (unint64_t)v17, (unint64_t)v18, 0x34323066u, 0, &pixelBufferOut))
  {
    [v8 extent];
    CVPixelBufferRef texture = 0;
    if (CVPixelBufferCreate(0, (unint64_t)v19, (unint64_t)v20, 0x34323066u, 0, &texture))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&buf[4] = v8;
        _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Unable to create pixel buffer for image %@", buf, 0xCu);
      }
LABEL_116:
      CVPixelBufferRelease(pixelBufferOut);
      goto LABEL_117;
    }
    CMSampleBufferRef v21 = [MEMORY[0x1E4F1E018] context];
    [v21 render:v9 toCVPixelBuffer:pixelBufferOut];
    [v21 render:v8 toCVPixelBuffer:texture];
    if (v11 >= 0xFFFFFFFFFFFFFFFELL)
    {
      id v26 = MEMORY[0x1E4F14500];
    }
    else
    {
      v22 = a3;
      if (os_signpost_enabled(MEMORY[0x1E4F14500]))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_SIGNPOST_INTERVAL_END, v10, "com.apple.mediaconversion.ssim.decode-to-pixelbuffer", (const char *)&unk_1A42E5DAB, buf, 2u);
      }
      v23 = MEMORY[0x1E4F14500];
      id v24 = MEMORY[0x1E4F14500];
      BOOL v25 = os_signpost_enabled(v23);
      a3 = v22;
      if (v25)
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_SIGNPOST_INTERVAL_BEGIN, v10, "com.apple.mediaconversion.ssim.compute-ssim", (const char *)&unk_1A42E5DAB, buf, 2u);
      }
    }

    v81 = v21;
    v82 = a3;
    v86 = pixelBufferOut;
    double v137 = 0.0;
    float64x2_t v136 = 0u;
    memset(v135, 0, sizeof(v135));
    v104[0] = 0;
    v104[1] = v104;
    v104[2] = 0x2020000000;
    v104[3] = v135;
    pixelBuffer = texture;
    signed int PixelFormatType = CVPixelBufferGetPixelFormatType(texture);
    signed int v28 = PixelFormatType;
    int v29 = 0;
    if (PixelFormatType > 1278226735)
    {
      if (PixelFormatType > 2016686639)
      {
        if (PixelFormatType == 2016686640) {
          goto LABEL_33;
        }
        int v30 = 2019963440;
LABEL_32:
        if (PixelFormatType == v30)
        {
LABEL_33:
          CVReturn v32 = CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
          if (v32)
          {
LABEL_100:
            if (v82)
            {
              double v69 = v135[0].f64[0];
              if (v32) {
                double v69 = 0.0;
              }
              double *v82 = v69;
            }
            if (a4)
            {
              double v70 = v135[0].f64[1];
              if (v32) {
                double v70 = 0.0;
              }
              *a4 = v70;
            }
            if (a5)
            {
              double v71 = v135[1].f64[0];
              if (v32) {
                double v71 = 0.0;
              }
              *a5 = v71;
            }
            _Block_object_dispose(v104, 8);
            id v72 = MEMORY[0x1E4F14500];
            if (v11 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(MEMORY[0x1E4F14500]))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_SIGNPOST_INTERVAL_END, v10, "com.apple.mediaconversion.ssim.compute-ssim", (const char *)&unk_1A42E5DAB, buf, 2u);
            }

            CVPixelBufferRelease(texture);
            goto LABEL_116;
          }
          CVReturn v80 = CVPixelBufferLockBaseAddress(v86, 1uLL);
          CVReturn v32 = v80;
          if (v80)
          {
LABEL_98:
            CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
            if (!v80) {
              CVPixelBufferUnlockBaseAddress(v86, 1uLL);
            }
            goto LABEL_100;
          }
          double v34 = *MEMORY[0x1E4F1DB20];
          double v33 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
          CGFloat v36 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
          CGFloat v35 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
          v139.origin.x = *(CGFloat *)MEMORY[0x1E4F1DB20];
          v139.origin.y = v33;
          v139.size.width = v36;
          v139.size.height = v35;
          BOOL IsNull = CGRectIsNull(v139);
          if (IsNull) {
            double v38 = v34;
          }
          else {
            double v38 = 0.0;
          }
          if (IsNull) {
            double v39 = v33;
          }
          else {
            double v39 = 0.0;
          }
          if (v29)
          {
            _computeSSIMForPlane(pixelBuffer, v86, 0, 0, (uint64_t)v135, v38, v39, v36, v35, v34, v33, v36, v35);
            CVReturn v32 = 0;
            goto LABEL_98;
          }
          if (v28 != 1111970369)
          {
            v46 = PFImageMetricComputeSSIMForPixelBuffer_queue;
            if (!PFImageMetricComputeSSIMForPixelBuffer_queue)
            {
              dispatch_queue_t v47 = dispatch_queue_create("com.apple.coremedia.psnr", MEMORY[0x1E4F14430]);
              v48 = (void *)PFImageMetricComputeSSIMForPixelBuffer_queue;
              PFImageMetricComputeSSIMForPixelBuffer_queue = (uint64_t)v47;

              v46 = PFImageMetricComputeSSIMForPixelBuffer_queue;
              if (!PFImageMetricComputeSSIMForPixelBuffer_queue)
              {
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315138;
                  *(void *)&buf[4] = "void PFImageMetricComputeSSIMForPixelBuffer(CVPixelBufferRef, CVPixelBufferRef, C"
                                       "GRect, CVPixelBufferRef, _Bool, double *, double *, double *)";
                  _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed condition 'queue', bailing from %s", buf, 0xCu);
                }
                CVReturn v32 = -16991;
                goto LABEL_98;
              }
            }
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3221225472;
            *(void *)&long long v122 = __PFImageMetricComputeSSIMForPixelBuffer_block_invoke;
            *((void *)&v122 + 1) = &unk_1E5B2D0E0;
            double v125 = v38;
            double v126 = v39;
            CGFloat v127 = v36;
            CGFloat v128 = v35;
            v129 = v86;
            double v130 = v34;
            double v131 = v33;
            CGFloat v132 = v36;
            CGFloat v133 = v35;
            uint64_t v134 = 0;
            v123 = v104;
            v124 = pixelBuffer;
            dispatch_async(v46, buf);
            *(void *)&blocsize_t k = MEMORY[0x1E4F143A8];
            *((void *)&block + 1) = 3221225472;
            *(void *)&long long v91 = __PFImageMetricComputeSSIMForPixelBuffer_block_invoke_2;
            *((void *)&v91 + 1) = &unk_1E5B2D0E0;
            double v94 = v38;
            double v95 = v39;
            CGFloat v96 = v36;
            CGFloat v97 = v35;
            v98 = v86;
            double v99 = v34;
            double v100 = v33;
            CGFloat v101 = v36;
            CGFloat v102 = v35;
            uint64_t v103 = 0;
            v92 = v104;
            v93 = pixelBuffer;
            dispatch_async((dispatch_queue_t)PFImageMetricComputeSSIMForPixelBuffer_queue, &block);
            *(void *)v107 = MEMORY[0x1E4F143A8];
            *(void *)&v107[8] = 3221225472;
            *(void *)&v107[16] = __PFImageMetricComputeSSIMForPixelBuffer_block_invoke_3;
            v108 = &unk_1E5B2D0E0;
            double v111 = v38;
            double v112 = v39;
            CGFloat v113 = v36;
            CGFloat v114 = v35;
            v115 = v86;
            double v116 = v34;
            double v117 = v33;
            CGFloat v118 = v36;
            CGFloat v119 = v35;
            uint64_t v120 = 0;
            v109 = v104;
            v110 = pixelBuffer;
            dispatch_async((dispatch_queue_t)PFImageMetricComputeSSIMForPixelBuffer_queue, v107);
            dispatch_barrier_sync((dispatch_queue_t)PFImageMetricComputeSSIMForPixelBuffer_queue, &__block_literal_global_685);
            CVReturn v32 = 0;
            __asm
            {
              FMOV            V2.2D, #6.0
              FMOV            V1.2D, #0.125
            }
            v135[0] = vmulq_f64(vaddq_f64(vmlaq_f64(*(float64x2_t *)((char *)&v135[1] + 8), _Q2, v135[0]), v136), _Q1);
            double v55 = (v135[2].f64[1] + v135[1].f64[0] * 6.0 + v137) * 0.125;
            goto LABEL_97;
          }
          CVPixelBufferRef v105 = 0;
          CVPixelBufferRef v106 = 0;
          *(_OWORD *)buf = 0u;
          long long v122 = 0u;
          _computeCropRectForPixelBuffer(buf, pixelBuffer, v38, v39, v36, v35);
          blocsize_t k = 0u;
          long long v91 = 0u;
          _computeCropRectForPixelBuffer(&block, v86, v34, v33, v36, v35);
          unint64_t v40 = v122;
          if (v122 == v91)
          {
            unint64_t v83 = *((void *)&v122 + 1);
            size_t Width = CVPixelBufferGetWidth(pixelBuffer);
            if (Width == CVPixelBufferGetWidth(v86))
            {
              size_t Height = CVPixelBufferGetHeight(pixelBuffer);
              if (Height == CVPixelBufferGetHeight(v86))
              {
                CVPixelBufferGetWidth(pixelBuffer);
                CVPixelBufferGetHeight(pixelBuffer);
                int v43 = CMPhotoSurfacePoolCreatePixelBuffer();
                if (v43)
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v107 = 134218242;
                    *(void *)&v107[4] = v43;
                    *(_WORD *)&v107[12] = 2080;
                    *(void *)&v107[14] = "OSStatus _computeSSIMForBGRA(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRe"
                                           "ct, CVPixelBufferRef, int, double *)";
                    v44 = MEMORY[0x1E4F14500];
                    v45 = "Unexpected error %ld, bailing from %s";
LABEL_82:
                    uint32_t v56 = 22;
                    goto LABEL_72;
                  }
LABEL_92:
                  if (v106) {
                    CFRelease(v106);
                  }
                  if (v105) {
                    CFRelease(v105);
                  }
                  CVReturn v32 = 0;
                  __asm { FMOV            V1.2D, #3.0 }
                  v135[0] = vdivq_f64(vaddq_f64(vaddq_f64(v135[0], *(float64x2_t *)((char *)&v135[1] + 8)), v136), _Q1);
                  double v55 = (v135[1].f64[0] + v135[2].f64[1] + v137) / 3.0;
LABEL_97:
                  v135[1].f64[0] = v55;
                  goto LABEL_98;
                }
                CVPixelBufferGetWidth(pixelBuffer);
                CVPixelBufferGetHeight(pixelBuffer);
                int v57 = CMPhotoSurfacePoolCreatePixelBuffer();
                if (v57)
                {
                  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                    goto LABEL_92;
                  }
                }
                else
                {
                  unint64_t v58 = *(void *)buf;
                  unint64_t v59 = *(void *)&buf[8];
                  FigPhotoSetPixelBufferCLAP(v106, *(unint64_t *)buf, *(unint64_t *)&buf[8], v40, v83);
                  FigPhotoSetPixelBufferCLAP(v105, v58, v59, v40, v83);
                  int v57 = CVPixelBufferLockBaseAddress(v106, 1uLL);
                  if (v57)
                  {
                    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                      goto LABEL_92;
                    }
                  }
                  else
                  {
                    int v57 = CVPixelBufferLockBaseAddress(v105, 1uLL);
                    v74 = a5;
                    if (!v57)
                    {
                      for (uint64_t i = 0; i != 3; ++i)
                      {
                        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
                        size_t v77 = CVPixelBufferGetBytesPerRow(v86);
                        BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
                        v61 = CVPixelBufferGetBaseAddress(v86);
                        size_t v76 = CVPixelBufferGetBytesPerRow(v106);
                        size_t v75 = CVPixelBufferGetBytesPerRow(v105);
                        v62 = CVPixelBufferGetBaseAddress(v106);
                        v63 = CVPixelBufferGetBaseAddress(v105);
                        for (size_t j = 0; CVPixelBufferGetHeight(pixelBuffer) > j; size_t j = v79 + 1)
                        {
                          size_t v79 = j;
                          uint64_t v65 = 0;
                          for (size_t k = 0; CVPixelBufferGetWidth(v86) > k; ++k)
                          {
                            uint64_t v67 = (v65 & 0xFFFFFFFC) + i;
                            v62[k] = BaseAddress[v67];
                            v63[k] = v61[v67];
                            v65 += 4;
                          }
                          BaseAddress += BytesPerRow;
                          v61 += v77;
                          v62 += v76;
                          v63 += v75;
                        }
                        _computeSSIMForPlane(v106, v105, 0, 0, (uint64_t)v135 + 24 * i, v34, v33, v36, v35, v34, v33, v36, v35);
                      }
                      CVPixelBufferUnlockBaseAddress(v106, 1uLL);
                      a5 = v74;
                      CVPixelBufferUnlockBaseAddress(v105, 1uLL);
                      goto LABEL_92;
                    }
                    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                      goto LABEL_92;
                    }
                  }
                }
                *(_DWORD *)v107 = 134218242;
                *(void *)&v107[4] = v57;
                *(_WORD *)&v107[12] = 2080;
                *(void *)&v107[14] = "OSStatus _computeSSIMForBGRA(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRect, "
                                       "CVPixelBufferRef, int, double *)";
                v44 = MEMORY[0x1E4F14500];
                v45 = "Unexpected error %ld, bailing from %s";
                goto LABEL_82;
              }
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v107 = 136315138;
                *(void *)&v107[4] = "OSStatus _computeSSIMForBGRA(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRect, C"
                                      "VPixelBufferRef, int, double *)";
                _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed condition 'CVPixelBufferGetHeight(pbufA) == CVPixelBufferGetHeight(pbufB)', bailing from %s", v107, 0xCu);
              }
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_92;
              }
              *(_WORD *)v107 = 0;
              v44 = MEMORY[0x1E4F14500];
              v45 = "_computeSSIMForBGRA - heightA and heightB not the same";
            }
            else
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v107 = 136315138;
                *(void *)&v107[4] = "OSStatus _computeSSIMForBGRA(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRect, C"
                                      "VPixelBufferRef, int, double *)";
                _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed condition 'CVPixelBufferGetWidth(pbufA) == CVPixelBufferGetWidth(pbufB)', bailing from %s", v107, 0xCu);
              }
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_92;
              }
              *(_WORD *)v107 = 0;
              v44 = MEMORY[0x1E4F14500];
              v45 = "_computeSSIMForBGRA - widthA and widthB not the same";
            }
          }
          else
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v107 = 136315138;
              *(void *)&v107[4] = "OSStatus _computeSSIMForBGRA(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRect, CVP"
                                    "ixelBufferRef, int, double *)";
              _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed condition 'FigPhotoSizeIsEqual(clapA.size, clapB.size)', bailing from %s", v107, 0xCu);
            }
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_92;
            }
            *(_WORD *)v107 = 0;
            v44 = MEMORY[0x1E4F14500];
            v45 = "_computeSSIMForBGRA - clapA and clapB not the same";
          }
          uint32_t v56 = 2;
LABEL_72:
          _os_log_error_impl(&dword_1A41FE000, v44, OS_LOG_TYPE_ERROR, v45, v107, v56);
          goto LABEL_92;
        }
LABEL_43:
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Unsupported pixel format for SSIM computation", buf, 2u);
        }
        CVReturn v32 = 0;
        goto LABEL_100;
      }
      if (PixelFormatType == 1278226736)
      {
LABEL_29:
        int v29 = 1;
        goto LABEL_33;
      }
      unsigned __int16 v31 = 12598;
    }
    else
    {
      if (PixelFormatType <= 1111970368)
      {
        if (PixelFormatType == 875704422) {
          goto LABEL_33;
        }
        int v30 = 875704438;
        goto LABEL_32;
      }
      if (PixelFormatType == 1111970369) {
        goto LABEL_33;
      }
      unsigned __int16 v31 = 12344;
    }
    if (PixelFormatType != (v31 | 0x4C300000)) {
      goto LABEL_43;
    }
    goto LABEL_29;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)&buf[4] = v9;
    _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Unable to create pixel buffer for reference image %@", buf, 0xCu);
  }
LABEL_117:
  id v73 = MEMORY[0x1E4F14500];
  if (v11 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(MEMORY[0x1E4F14500]))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_SIGNPOST_INTERVAL_END, v10, "com.apple.mediaconversion.ssim", (const char *)&unk_1A42E5DAB, buf, 2u);
  }
}

void sub_1A421136C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void _computeSSIMForPlane(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, unsigned int a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  uint64_t BitDepthForPixelFormat = PFImageMetricGetBitDepthForPixelFormat(PixelFormatType);
  size_t v28 = a4 != 0;
  if (a4) {
    uint64_t v29 = 2;
  }
  else {
    uint64_t v29 = 1;
  }
  BOOL v109 = a4 > 1;
  unint64_t v110 = BitDepthForPixelFormat;
  int64x2_t v113 = 0u;
  long long v114 = 0u;
  _computeCropRectForPixelBuffer(&v113, a1, a6, a7, a8, a9);
  int64x2_t v111 = 0u;
  long long v112 = 0u;
  _computeCropRectForPixelBuffer(&v111, a2, a10, a11, a12, a13);
  unint64_t v30 = v114;
  if ((void)v114 != (void)v112 || (unint64_t v31 = *((void *)&v114 + 1), *((void *)&v114 + 1) != *((void *)&v112 + 1)))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = "void _computeSSIMForPlane(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRect, CVPixelBufferRe"
                           "f, int, double *)";
      double v33 = MEMORY[0x1E4F14500];
      double v34 = "Failed condition 'FigPhotoSizeIsEqual(clapA.size, clapB.size)', bailing from %s";
      CGFloat v35 = buf;
      goto LABEL_12;
    }
LABEL_114:
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    double v98 = 0.0;
    goto LABEL_115;
  }
  pixelBuffer = a2;
  if (a3)
  {
    BaseAddressOfPlane = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(a3, 0);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
    *(_OWORD *)buf = 0u;
    long long v120 = 0u;
    _computeCropRectForPixelBuffer(buf, a3, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24));
    if (v120 != __PAIR128__(v31, v30))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v117 = 136315138;
        CGFloat v118 = "void _computeSSIMForPlane(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRect, CVPixelBufferRef, int, double *)";
        double v33 = MEMORY[0x1E4F14500];
        double v34 = "Failed condition 'FigPhotoSizeIsEqual(clapW.size, clapA.size)', bailing from %s";
        CGFloat v35 = (uint8_t *)&v117;
LABEL_12:
        _os_log_error_impl(&dword_1A41FE000, v33, OS_LOG_TYPE_ERROR, v34, v35, 0xCu);
        goto LABEL_114;
      }
      goto LABEL_114;
    }
  }
  else
  {
    BaseAddressOfPlane = 0;
    size_t BytesPerRowOfPlane = 0;
  }
  if (a4)
  {
    unint64_t v30 = (v30 + 1) >> 1;
    unint64_t v31 = (v31 + 1) >> 1;
    *(void *)&long long v114 = v30;
    *((void *)&v114 + 1) = v31;
    int64x2_t v36 = vdupq_n_s64(1uLL);
    int64x2_t v113 = (int64x2_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v113, v36), 1uLL);
    int64x2_t v111 = (int64x2_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v111, v36), 1uLL);
  }
  size_t v105 = CVPixelBufferGetBytesPerRowOfPlane(a1, a4 != 0);
  size_t v106 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, a4 != 0);
  v37 = (char *)malloc_type_calloc(180 * v30 + 1440, 1uLL, 0xCEC6451EuLL);
  uint64_t v38 = 0;
  memset(v115, 0, sizeof(v115));
  uint64_t v116 = 0;
  double v39 = v37 + 160;
  do
  {
    *(void *)((char *)v115 + v38) = v39;
    v38 += 8;
    v39 += 20 * v30 + 160;
  }
  while (v38 != 72);
  signed int v40 = CVPixelBufferGetPixelFormatType(a1);
  CGFloat v102 = v37;
  uint64_t v103 = a5;
  unint64_t v107 = v31;
  if (v40 > 1380401728)
  {
    if (v40 > 1919378231)
    {
      if (v40 > 2016687155)
      {
        if (v40 > 2019963955)
        {
          if (v40 == 2019963956 || v40 == 2037741158) {
            goto LABEL_80;
          }
          int v42 = 2037741171;
        }
        else
        {
          if (v40 == 2016687156 || v40 == 2019963440) {
            goto LABEL_80;
          }
          int v42 = 2019963442;
        }
        goto LABEL_79;
      }
      if (v40 > 1932996148)
      {
        if (v40 == 1932996149 || v40 == 2016686640) {
          goto LABEL_80;
        }
        int v42 = 2016686642;
        goto LABEL_79;
      }
      if (v40 == 1919378232) {
        goto LABEL_67;
      }
      if (v40 == 1919379252)
      {
LABEL_80:
        uint64_t v41 = 2;
        goto LABEL_81;
      }
      if (v40 != 1919381552) {
        goto LABEL_67;
      }
    }
    else
    {
      uint64_t v41 = 8;
      if (v40 <= 1751411058)
      {
        if (v40 > 1717855599)
        {
          if (v40 == 1717855600 || v40 == 1717856627) {
            goto LABEL_72;
          }
          int v42 = 1751410032;
        }
        else
        {
          if (v40 == 1380401729) {
            goto LABEL_72;
          }
          if (v40 == 1380411457) {
            goto LABEL_81;
          }
          int v42 = 1650943796;
        }
LABEL_79:
        if (v40 != v42) {
          goto LABEL_67;
        }
        goto LABEL_80;
      }
      if (v40 <= 1882468911)
      {
        if (v40 != 1751411059 && v40 != 1751527984)
        {
          if (v40 == 1815491698) {
            goto LABEL_81;
          }
          goto LABEL_67;
        }
        goto LABEL_80;
      }
      if (v40 != 1882468912 && v40 != 1885745712)
      {
        int v43 = 1919365990;
        goto LABEL_71;
      }
    }
    uint64_t v41 = 0;
    goto LABEL_81;
  }
  if (v40 > 875704437)
  {
    if (v40 <= 1278226487)
    {
      if (v40 <= 875836518 || v40 == 875836534) {
        goto LABEL_67;
      }
      int v43 = 1111970369;
LABEL_71:
      if (v40 == v43) {
        goto LABEL_72;
      }
LABEL_67:
      uint64_t v41 = 1;
      goto LABEL_81;
    }
    if (v40 > 1278226735)
    {
      if (v40 == 1278226736 || v40 == 1278226742) {
        goto LABEL_80;
      }
      int v42 = 1278555701;
      goto LABEL_79;
    }
    if (v40 == 1278226488) {
      goto LABEL_67;
    }
    if (v40 != 1278226534)
    {
      int v42 = 1278226536;
      goto LABEL_79;
    }
LABEL_72:
    uint64_t v41 = 4;
    goto LABEL_81;
  }
  if (v40 > 641234479)
  {
    if (v40 <= 825306676 || v40 != 825306677 && v40 != 825437747) {
      goto LABEL_67;
    }
    goto LABEL_80;
  }
  if (v40 > 641230383) {
    goto LABEL_67;
  }
  if (v40 == 16) {
    goto LABEL_80;
  }
  if (v40 != 24)
  {
    if (v40 != 32) {
      goto LABEL_67;
    }
    goto LABEL_72;
  }
  uint64_t v41 = 3;
LABEL_81:
  unint64_t v44 = v41;
  OSType v101 = CVPixelBufferGetPixelFormatType(a1);
  int64x2_t v100 = v113;
  int64x2_t v45 = v111;
  char v46 = v28;
  double v99 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v28);
  dispatch_queue_t v47 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v28);
  v48 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v28);
  v49 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v28);
  if (!v107)
  {
    free(v37);
    a5 = v103;
    goto LABEL_114;
  }
  size_t v50 = (v45.i64[0] << v28) + v109 + v45.i64[1] * v106 / v44;
  v51 = &v49[2 * v50];
  size_t v52 = (v100.i64[0] << v28) + v109 + v100.i64[1] * v105 / v44;
  v53 = &v48[2 * v52];
  v54 = &v47[v50];
  double v55 = &v99[v52];
  char v56 = PFImageMetricGetBitDepthForPixelFormat(v101);
  unint64_t v57 = 0;
  unint64_t v58 = 0;
  char v59 = 16 - v56;
  size_t v60 = v105 / v44;
  double v61 = 0.0;
  size_t v62 = v106 / v44;
  double v63 = 0.0;
  do
  {
    unsigned int v64 = ((int)v57 + 8) % 9u;
    unsigned int v65 = v57 % 9;
    if (v110 < 9)
    {
      if (v30)
      {
        id v73 = (_DWORD *)*((void *)v115 + v65);
        v74 = (_DWORD *)*((void *)v115 + v64);
        unint64_t v75 = v30;
        size_t v76 = v55;
        size_t v77 = v54;
        do
        {
          int v78 = *v76;
          int v79 = *v77;
          *id v73 = *v74 + v78;
          v73[1] = v74[1] + v79;
          v73[2] = v74[2] + v78 * v78;
          v73[3] = v74[3] + v79 * v79;
          v76 += v29;
          v73[4] = v74[4] + v79 * v78;
          v77 += v29;
          v74 += 5;
          v73 += 5;
          --v75;
        }
        while (v75);
      }
    }
    else if (v30)
    {
      v66 = (_DWORD *)*((void *)v115 + v65);
      uint64_t v67 = (_DWORD *)*((void *)v115 + v64);
      unint64_t v68 = v30;
      double v69 = v53;
      double v70 = v51;
      do
      {
        int v71 = *(unsigned __int16 *)v69 >> v59;
        int v72 = *(unsigned __int16 *)v70 >> v59;
        _DWORD *v66 = *v67 + v71;
        v66[1] = v67[1] + v72;
        v66[2] = v67[2] + v71 * v71;
        v66[3] = v67[3] + v72 * v72;
        v66[4] = v67[4] + v72 * v71;
        v69 += 2 * v29;
        v70 += 2 * v29;
        v67 += 5;
        v66 += 5;
        --v68;
      }
      while (v68);
    }
    unint64_t v80 = v57 + 1;
    if (v57 >= 7)
    {
      if (v30)
      {
        uint64_t v81 = *((void *)v115 + v80 % 9);
        v82 = (int32x4_t *)*((void *)v115 + v65);
        unint64_t v83 = v30;
        v84 = (int32x4_t *)v81;
        do
        {
          int32x4_t *v84 = vsubq_s32(*v82, *v84);
          v84[1].i32[0] = v82[1].i32[0] - v84[1].i32[0];
          v82 = (int32x4_t *)((char *)v82 + 20);
          v84 = (int32x4_t *)((char *)v84 + 20);
          --v83;
        }
        while (v83);
        LODWORD(v85) = 0;
        int v86 = 0;
        v87 = (int32x4_t *)(v81 + 4);
        int32x4_t v88 = 0uLL;
        double v89 = 0.0;
        double v90 = 0.0;
        long long v91 = BaseAddressOfPlane;
        do
        {
          v86 += v87[-1].i32[3] - v87[-11].i32[3];
          int32x4_t v88 = vaddq_s32(vsubq_s32(*v87, v87[-10]), v88);
          if (v83 >= 7)
          {
            int v92 = v86 * v86 + v88.i32[0] * v88.i32[0];
            double v93 = ((double)(2 * v86 * v88.i32[0]) + 26634.24) / ((double)v92 + 26634.24);
            double v94 = ((double)((v88.i32[3] << 7) - 2 * v86 * v88.i32[0]) + 239708.16)
                / ((double)((v88.i32[1] << 6) - v92 + (v88.i32[2] << 6)) + 239708.16);
            if (v91)
            {
              unsigned int v95 = *v91;
              double v90 = v90 + (double)v95 * v93;
              double v89 = v89 + (double)v95 * v94;
              LODWORD(v85) = v85 + v95;
              v91 += v29;
            }
            else
            {
              double v90 = v90 + v93;
              double v89 = v89 + v94;
            }
          }
          ++v83;
          v87 = (int32x4_t *)((char *)v87 + 20);
        }
        while (v30 != v83);
      }
      else
      {
        LODWORD(v85) = 0;
        double v90 = 0.0;
        long long v91 = BaseAddressOfPlane;
        double v89 = 0.0;
      }
      if (v91) {
        uint64_t v85 = v85;
      }
      else {
        uint64_t v85 = (v30 - 7);
      }
      v58 += v85;
      double v63 = v63 + v90;
      double v61 = v61 + v89;
    }
    v55 += v60;
    v54 += v62;
    v53 += 2 * v60;
    v51 += 2 * v62;
    if (BaseAddressOfPlane) {
      BaseAddressOfPlane += BytesPerRowOfPlane << v46;
    }
    else {
      BaseAddressOfPlane = 0;
    }
    unint64_t v57 = v80;
  }
  while (v80 != v107);
  free(v102);
  a5 = v103;
  if (!v58) {
    goto LABEL_114;
  }
  double v96 = v63 / (double)v58;
  double v97 = v61 / (double)v58;
  *(double *)(v103 + 8) = v96;
  *(double *)(v103 + 16) = v97;
  double v98 = v96 * v97;
LABEL_115:
  *(double *)a5 = v98;
}

void _computeCropRectForPixelBuffer(void *a1, CVPixelBufferRef pixelBuffer, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  double PixelBufferCLAPAsRect = FigPhotoGetPixelBufferCLAPAsRect(pixelBuffer);
  double v13 = v12;
  double v15 = v14;
  double v17 = v16;
  v25.origin.x = a3;
  v25.origin.y = a4;
  v25.size.width = a5;
  v25.size.height = a6;
  if (!CGRectIsNull(v25))
  {
    if (a5 >= v15 - a3) {
      double v18 = v15 - a3;
    }
    else {
      double v18 = a5;
    }
    if (a6 >= v17 - a4) {
      double v19 = v17 - a4;
    }
    else {
      double v19 = a6;
    }
    if (a3 >= v15)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v22 = 136315138;
        v23 = "OSStatus FigPhotoApplyCropRectToRect(CGRect *, CGRect)";
        double v20 = MEMORY[0x1E4F14500];
        CMSampleBufferRef v21 = "Failed condition 'cropRect.origin.x < rect->size.width', bailing from %s";
        goto LABEL_17;
      }
    }
    else if (a4 >= v17)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v22 = 136315138;
        v23 = "OSStatus FigPhotoApplyCropRectToRect(CGRect *, CGRect)";
        double v20 = MEMORY[0x1E4F14500];
        CMSampleBufferRef v21 = "Failed condition 'cropRect.origin.y < rect->size.height', bailing from %s";
        goto LABEL_17;
      }
    }
    else if (v18 <= v15 - a3)
    {
      if (v19 <= v17 - a4)
      {
        double PixelBufferCLAPAsRect = a3 + PixelBufferCLAPAsRect;
        double v13 = a4 + v13;
        double v15 = v18;
        double v17 = v19;
        goto LABEL_22;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v22 = 136315138;
        v23 = "OSStatus FigPhotoApplyCropRectToRect(CGRect *, CGRect)";
        double v20 = MEMORY[0x1E4F14500];
        CMSampleBufferRef v21 = "Failed condition 'cropRect.size.height <= rect->size.height - cropRect.origin.y', bailing from %s";
        goto LABEL_17;
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315138;
      v23 = "OSStatus FigPhotoApplyCropRectToRect(CGRect *, CGRect)";
      double v20 = MEMORY[0x1E4F14500];
      CMSampleBufferRef v21 = "Failed condition 'cropRect.size.width <= rect->size.width - cropRect.origin.x', bailing from %s";
LABEL_17:
      _os_log_error_impl(&dword_1A41FE000, v20, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&v22, 0xCu);
    }
  }
LABEL_22:
  v26.origin.x = PixelBufferCLAPAsRect;
  v26.origin.y = v13;
  v26.size.width = v15;
  v26.size.height = v17;
  CGRect v27 = CGRectIntegral(v26);
  *a1 = (unint64_t)v27.origin.x;
  a1[1] = (unint64_t)v27.origin.y;
  a1[2] = (unint64_t)v27.size.width;
  a1[3] = (unint64_t)v27.size.height;
}

void FigPhotoSetPixelBufferCLAP(__CVBuffer *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v31 = 136315138;
      CVReturn v32 = "OSStatus FigPhotoSetPixelBufferCLAPFromRect(CVPixelBufferRef, CGRect, Boolean, Boolean)";
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed condition 'pixelBuffer != NULL', bailing from %s", (uint8_t *)&v31, 0xCu);
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(v31) = 0;
    int v22 = MEMORY[0x1E4F14500];
    v23 = "pixelBuffer not specified";
LABEL_16:
    uint32_t v24 = 2;
    goto LABEL_17;
  }
  double v6 = (double)a2;
  double v7 = (double)a3;
  double v8 = (double)a4;
  double v9 = (double)a5;
  v37.origin.CGFloat x = FigPhotoGetPixelBufferCLAPAsRect(a1);
  CGFloat x = v37.origin.x;
  CGFloat y = v37.origin.y;
  CGFloat width = v37.size.width;
  CGFloat height = v37.size.height;
  v39.origin.CGFloat x = v6;
  v39.origin.CGFloat y = v7;
  v39.size.CGFloat width = v8;
  v39.size.CGFloat height = v9;
  if (!CGRectContainsRect(v37, v39))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v31 = 136315138;
      CVReturn v32 = "OSStatus FigPhotoSetPixelBufferCLAPFromRect(CVPixelBufferRef, CGRect, Boolean, Boolean)";
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed condition 'CGRectContainsRect(currentTopLeftRect, topLeftRect)', bailing from %s", (uint8_t *)&v31, 0xCu);
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(v31) = 0;
    int v22 = MEMORY[0x1E4F14500];
    v23 = "new top-left CLAP rect is too big to fit in existing rect";
    goto LABEL_16;
  }
  v38.origin.CGFloat x = x;
  v38.origin.CGFloat y = y;
  v38.size.CGFloat width = width;
  v38.size.CGFloat height = height;
  v40.origin.CGFloat x = v6;
  v40.origin.CGFloat y = v7;
  v40.size.CGFloat width = v8;
  v40.size.CGFloat height = v9;
  if (CGRectEqualToRect(v38, v40)) {
    return;
  }
  CFAllocatorRef v14 = CFGetAllocator(a1);
  size_t v15 = CVPixelBufferGetWidth(a1);
  size_t v16 = CVPixelBufferGetHeight(a1);
  Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v31 = 136315138;
      CVReturn v32 = "OSStatus FigPhotoCreatePixelBufferCLAPDictionaryFromRect(CFAllocatorRef, CGSize, CGRect, CFDictionaryRef *)";
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed condition 'dict', bailing from %s", (uint8_t *)&v31, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v31) = 0;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "failed to create clap dictionary", (uint8_t *)&v31, 2u);
    }
    int v21 = -16991;
    goto LABEL_33;
  }
  double v18 = Mutable;
  float v19 = v8 * 0.5 + v6 - (double)v15 * 0.5;
  int v20 = FigPhotoCFDictionarySetFloat(Mutable, (const void *)*MEMORY[0x1E4F24A70], v19);
  if (v20)
  {
    int v21 = v20;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  float v25 = v9 * 0.5 + v7 - (double)v16 * 0.5;
  int v26 = FigPhotoCFDictionarySetFloat(v18, (const void *)*MEMORY[0x1E4F24A80], v25);
  if (v26)
  {
    int v21 = v26;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  float v27 = v8;
  int v28 = FigPhotoCFDictionarySetFloat(v18, (const void *)*MEMORY[0x1E4F24A88], v27);
  if (v28)
  {
    int v21 = v28;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  float v29 = v9;
  int v30 = FigPhotoCFDictionarySetFloat(v18, (const void *)*MEMORY[0x1E4F24A68], v29);
  if (v30)
  {
    int v21 = v30;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_31:
      int v31 = 134218242;
      CVReturn v32 = (const char *)v21;
      __int16 v33 = 2080;
      double v34 = "OSStatus FigPhotoCreatePixelBufferCLAPDictionaryFromRect(CFAllocatorRef, CGSize, CGRect, CFDictionaryRef *)";
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Unexpected error %ld, bailing from %s", (uint8_t *)&v31, 0x16u);
    }
LABEL_32:
    CFRelease(v18);
LABEL_33:
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v31 = 134218242;
    CVReturn v32 = (const char *)v21;
    __int16 v33 = 2080;
    double v34 = "OSStatus FigPhotoSetPixelBufferCLAPFromRect(CVPixelBufferRef, CGRect, Boolean, Boolean)";
    int v22 = MEMORY[0x1E4F14500];
    v23 = "Unexpected error %ld, bailing from %s";
    uint32_t v24 = 22;
LABEL_17:
    _os_log_error_impl(&dword_1A41FE000, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&v31, v24);
    return;
  }
  CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A78], v18, kCVAttachmentMode_ShouldPropagate);

  CFRelease(v18);
}

void __PFImageMetricComputeSSIMForPixelBuffer_block_invoke(uint64_t a1)
{
}

void __PFImageMetricComputeSSIMForPixelBuffer_block_invoke_2(uint64_t a1)
{
}

void __PFImageMetricComputeSSIMForPixelBuffer_block_invoke_3(uint64_t a1)
{
}

double FigPhotoGetPixelBufferCLAPAsRect(CVPixelBufferRef pixelBuffer)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (pixelBuffer)
  {
    double Width = (double)CVPixelBufferGetWidth(pixelBuffer);
    double Height = (double)CVPixelBufferGetHeight(pixelBuffer);
  }
  else
  {
    double Width = 0.0;
    double Height = 0.0;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
  double v23 = 0.0;
  uint64_t v24 = 0;
  double v21 = Width;
  double v22 = Height;
  if (!v4)
  {
    double v15 = 0.0;
    double v16 = Width;
    return round(v15 + (Width - v16) * 0.5);
  }
  CFDictionaryRef v5 = v4;
  double v6 = (const void *)*MEMORY[0x1E4F1EED8];
  if (CFDictionaryContainsKey(v4, (const void *)*MEMORY[0x1E4F1EED8])
    && CFDictionaryContainsKey(v5, (const void *)*MEMORY[0x1E4F1EEA8])
    && CFDictionaryContainsKey(v5, (const void *)*MEMORY[0x1E4F1EEB8])
    && CFDictionaryContainsKey(v5, (const void *)*MEMORY[0x1E4F1EEC8]))
  {
    Value = CFDictionaryGetValue(v5, v6);
    if (Value && (double v8 = Value, v9 = CFGetTypeID(Value), v9 == CFArrayGetTypeID()))
    {
      if (CFArrayGetCount((CFArrayRef)v8) == 2)
      {
        CFTypeID v10 = CFGetTypeID(v8);
        CFTypeID TypeID = CFArrayGetTypeID();
        BOOL v12 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (v10 == TypeID)
        {
          if (!v12) {
            goto LABEL_26;
          }
          *(_WORD *)buf = 0;
          double v13 = MEMORY[0x1E4F14500];
          CFAllocatorRef v14 = "invalid index";
        }
        else
        {
          if (!v12) {
            goto LABEL_26;
          }
          *(_WORD *)buf = 0;
          double v13 = MEMORY[0x1E4F14500];
          CFAllocatorRef v14 = "not an array";
        }
        _os_log_error_impl(&dword_1A41FE000, v13, OS_LOG_TYPE_ERROR, v14, buf, 2u);
LABEL_26:
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          double v18 = MEMORY[0x1E4F14500];
          float v19 = "ERROR: Unable to read num/den from rational array";
          uint32_t v20 = 2;
LABEL_30:
          _os_log_error_impl(&dword_1A41FE000, v18, OS_LOG_TYPE_ERROR, v19, buf, v20);
        }
LABEL_20:
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Warning: Unable to convert rational values from CLAP dictionary to floating point", buf, 2u);
        }
        double v16 = Width;
        double v15 = 0.0;
        goto LABEL_16;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136315138;
      int v26 = "Boolean _floatFromRational(CFArrayRef, CGFloat *)";
      double v18 = MEMORY[0x1E4F14500];
      float v19 = "Failed condition 'CFArrayGetCount(ratArray) == 2', bailing from %s";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136315138;
      int v26 = "Boolean _floatFromRational(CFArrayRef, CGFloat *)";
      double v18 = MEMORY[0x1E4F14500];
      float v19 = "Failed condition 'FigCFIsTypeOf(ratArray, CFArray)', bailing from %s";
    }
    uint32_t v20 = 12;
    goto LABEL_30;
  }
  _cfDictionaryGetNumberIfPresent((CFTypeID)v5, (const void *)*MEMORY[0x1E4F24A88], &v21);
  _cfDictionaryGetNumberIfPresent((CFTypeID)v5, (const void *)*MEMORY[0x1E4F24A68], &v22);
  _cfDictionaryGetNumberIfPresent((CFTypeID)v5, (const void *)*MEMORY[0x1E4F24A70], &v23);
  _cfDictionaryGetNumberIfPresent((CFTypeID)v5, (const void *)*MEMORY[0x1E4F24A80], &v24);
  double v15 = v23;
  double v16 = v21;
LABEL_16:
  CFRelease(v5);
  return round(v15 + (Width - v16) * 0.5);
}

uint64_t FigPhotoCFDictionarySetFloat(__CFDictionary *a1, const void *a2, float a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  float valuePtr = a3;
  if (a2)
  {
    CFNumberRef v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      CFDictionarySetValue(a1, a2, v5);
      CFRelease(v6);
      return 0;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        CFTypeID v10 = "OSStatus _cfDictionarySetNumber(CFMutableDictionaryRef, CFStringRef, CFNumberType, void *)";
        _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed condition 'number', bailing from %s", buf, 0xCu);
      }
      return 4294950305;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      CFTypeID v10 = "OSStatus _cfDictionarySetNumber(CFMutableDictionaryRef, CFStringRef, CFNumberType, void *)";
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed condition 'key', bailing from %s", buf, 0xCu);
    }
    return 4294950306;
  }
}

CFTypeID _cfDictionaryGetNumberIfPresent(CFTypeID result, const void *a2, void *a3)
{
  value = 0;
  if (a2)
  {
    if (a3)
    {
      result = CFDictionaryGetValueIfPresent((CFDictionaryRef)result, a2, (const void **)&value);
      if (result)
      {
        CFTypeID TypeID = CFNumberGetTypeID();
        result = CFGetTypeID(value);
        if (TypeID == result) {
          return CFNumberGetValue((CFNumberRef)value, kCFNumberDoubleType, a3);
        }
      }
    }
  }
  return result;
}

uint64_t PFImageMetricGetBitDepthForPixelFormat(int a1)
{
  uint64_t v1 = 32;
  if (a1 <= 1380401728)
  {
    if (a1 <= 875704933)
    {
      if (a1 <= 825306676 || a1 > 875704421) {
        return 8;
      }
      if (a1 == 825306677) {
        return 16;
      }
      int v2 = 825437747;
      goto LABEL_37;
    }
    if (a1 <= 1278226533) {
      return 8;
    }
    if (a1 > 1278226741)
    {
      if (a1 == 1278226742) {
        return 16;
      }
      if (a1 == 1278555445) {
        return 5;
      }
      int v3 = 1378955371;
    }
    else
    {
      if (a1 == 1278226534) {
        return v1;
      }
      if (a1 == 1278226536) {
        return 16;
      }
      int v3 = 1278226736;
    }
    goto LABEL_48;
  }
  if (a1 > 1919379251)
  {
    if (a1 > 2016687155)
    {
      if (a1 > 2019963955)
      {
        if (a1 != 2019963956) {
          return 8;
        }
        return 10;
      }
      if (a1 == 2016687156 || a1 == 2019963440) {
        return 10;
      }
      int v3 = 2019963442;
    }
    else
    {
      if (a1 <= 1999843441)
      {
        if (a1 == 1919379252) {
          return 14;
        }
        if (a1 != 1919381552)
        {
          int v2 = 1932996149;
          goto LABEL_37;
        }
        return 10;
      }
      if (a1 == 1999843442 || a1 == 2016686640) {
        return 10;
      }
      int v3 = 2016686642;
    }
LABEL_48:
    if (a1 != v3) {
      return 8;
    }
    return 10;
  }
  if (a1 > 1751411058)
  {
    if (a1 <= 1882468911)
    {
      if (a1 == 1751411059 || a1 == 1751527984) {
        return 16;
      }
      int v2 = 1815491698;
      goto LABEL_37;
    }
    if (a1 != 1882468912 && a1 != 1885745712) {
      return 8;
    }
    return 10;
  }
  if (a1 <= 1717855599)
  {
    if (a1 != 1380401729)
    {
      if (a1 != 1380411457)
      {
        if (a1 != 1650943796) {
          return 8;
        }
        return 14;
      }
      return 16;
    }
    return 8;
  }
  if (a1 != 1717855600 && a1 != 1717856627)
  {
    int v2 = 1751410032;
LABEL_37:
    if (a1 != v2) {
      return 8;
    }
    return 16;
  }
  return v1;
}

__CFString *PFParallaxAssetResourceTypeName(unint64_t a1)
{
  if (a1 > 6) {
    return @"???";
  }
  else {
    return off_1E5B2D100[a1];
  }
}

__CFString *PFPosterMediaTypeDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"Undefined";
  }
  else {
    return off_1E5B2D138[a1 - 1];
  }
}

__CFString *PFPosterMediaTypeStringWithType(unint64_t a1)
{
  if (a1 > 3) {
    return @"??";
  }
  else {
    return off_1E5B2D150[a1];
  }
}

void sub_1A4217788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

id _PFExportGIFRequestError(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double v7 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:2];
  double v8 = v7;
  if (v5) {
    [v7 setObject:v5 forKeyedSubscript:*MEMORY[0x1E4F28A50]];
  }
  if (v6)
  {
    CFTypeID v9 = (void *)[v6 copy];
    [v8 setObject:v9 forKeyedSubscript:*MEMORY[0x1E4F28228]];
  }
  CFTypeID v10 = [MEMORY[0x1E4F28C58] errorWithDomain:@"PFExportGIFRequestErrorDomain" code:a1 userInfo:v8];

  return v10;
}

uint64_t LayerIDMatchesOptions(void *a1, unint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (([v3 isEqualToString:@"background"] & 1) == 0
    && ([v3 isEqualToString:@"foreground"] & 1) == 0
    && ([v3 isEqualToString:@"background-landscape"] & 1) == 0
    && ([v3 isEqualToString:@"foreground-landscape"] & 1) == 0)
  {
    if ([v3 hasSuffix:@"backfill"])
    {
      uint64_t v4 = (a2 >> 1) & 1;
      goto LABEL_6;
    }
    if ([v3 hasPrefix:@"inactive"])
    {
      uint64_t v4 = (a2 >> 2) & 1;
      goto LABEL_6;
    }
    if ([v3 isEqualToString:@"settling-video"])
    {
      uint64_t v4 = (a2 >> 6) & 1;
      goto LABEL_6;
    }
    if ([v3 hasPrefix:@"debug"])
    {
      uint64_t v4 = (a2 >> 4) & 1;
      goto LABEL_6;
    }
    if ((_WORD)a2 != 0xFFFF)
    {
      uint64_t v4 = 0;
      goto LABEL_6;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
    {
      int v6 = 138412290;
      id v7 = v3;
      _os_log_debug_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "Allowing unexpected layer ID: %@", (uint8_t *)&v6, 0xCu);
    }
  }
  uint64_t v4 = 1;
LABEL_6:

  return v4;
}

BOOL ReadImageFromURL(uint64_t a1, void *a2, int a3, void *a4)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v8 = v7;
  if (a3) {
    [v7 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F562C8]];
  }
  uint64_t ImageFromImageSource = _PLFigCreateImageFromImageSource((uint64_t)v6, 0, 2, v8);
  int v10 = ImageFromImageSource;
  if (a4 && ImageFromImageSource)
  {
    uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
    BOOL v12 = [NSString stringWithFormat:@"Error reading image from disk, code: %d", ImageFromImageSource, *MEMORY[0x1E4F28228]];
    v16[0] = v12;
    double v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:&v15 count:1];
    *a4 = [v11 errorWithDomain:@"com.apple.PhotosFormats" code:3 userInfo:v13];
  }
  return v10 == 0;
}

void PFCreateGIFFromVideoURL(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = a2;
  id v10 = a1;
  uint64_t v11 = [[PFExportGIFRequest alloc] initWithVideoURL:v10];

  [(PFExportGIFRequest *)v11 setSynchronous:1];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = __PFCreateGIFFromVideoURL_block_invoke;
  v16[3] = &unk_1E5B2D218;
  id v17 = v7;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __PFCreateGIFFromVideoURL_block_invoke_2;
  v14[3] = &unk_1E5B2D240;
  id v15 = v8;
  id v12 = v8;
  id v13 = v7;
  +[PFExportGIFRequest runExport:v11 toURL:v9 progress:v16 completion:v14];
}

uint64_t __PFCreateGIFFromVideoURL_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __PFCreateGIFFromVideoURL_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if ((a2 & 1) == 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v7 = 138412290;
    id v8 = v5;
    _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "GIF export error: %@", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, a2);
  }
}

uint64_t __PFSharedFigDecodeSession_block_invoke_3()
{
  return MEMORY[0x1F410D980](PFSharedFigDecodeSession_s_decodeSession, 0, 0);
}

uint64_t __PFSharedFigDecodeSession_block_invoke_2()
{
  return MEMORY[0x1F410D980](PFSharedFigDecodeSession_s_decodeSession, 0, 1);
}

uint64_t PFSharedFigDecodeSessionDiscardCachedBuffers()
{
  if (PFSharedFigDecodeSession_s_onceToken != -1) {
    dispatch_once(&PFSharedFigDecodeSession_s_onceToken, &__block_literal_global_1253);
  }
  uint64_t v0 = PFSharedFigDecodeSession_s_decodeSession;

  return MEMORY[0x1F410D980](v0, 0, 1);
}

uint64_t _PLFigCreateImageFromImageSource(uint64_t a1, int a2, int a3, void *a4)
{
  id v6 = a4;
  int v7 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v8 = *MEMORY[0x1E4F562D8];
  uint64_t v9 = [v6 objectForKeyedSubscript:*MEMORY[0x1E4F562D8]];

  if (!v9) {
    [v7 setObject:&unk_1EF7CA4F0 forKey:v8];
  }
  if (a3 == 4)
  {
    [v7 setObject:MEMORY[0x1E4F1CC38] forKey:*MEMORY[0x1E4F56298]];
    id v10 = [NSNumber numberWithInt:1111970369];
    [v7 setObject:v10 forKey:*MEMORY[0x1E4F562B0]];
  }
  if (a2) {
    [v7 setObject:MEMORY[0x1E4F1CC28] forKey:*MEMORY[0x1E4F56290]];
  }
  [v7 addEntriesFromDictionary:v6];
  if (PFSharedFigDecodeSession_s_onceToken != -1) {
    dispatch_once(&PFSharedFigDecodeSession_s_onceToken, &__block_literal_global_1253);
  }
  uint64_t Container = CMPhotoDecompressionSessionCreateContainer();

  return Container;
}

uint64_t PFFigCreateCGImageFromImageData(uint64_t a1, int a2, void *a3)
{
  return _PLFigCreateImageFromImageSource(a1, a2, 4, a3);
}

uint64_t PFFigCreateCVPixelBufferFromImageData(uint64_t a1, void *a2)
{
  return _PLFigCreateImageFromImageSource(a1, 0, 2, a2);
}

uint64_t PFFigCreateCVPixelBufferFromURL(uint64_t a1, void *a2)
{
  return _PLFigCreateImageFromImageSource(a1, 0, 2, a2);
}

BOOL PFFigGetImageSourceImageIndexForContainerItemID(CGImageSource *a1, void *a2, void *a3, size_t *a4)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v7 = a2;
  id v8 = a3;
  uint64_t v9 = v8;
  if (!v7)
  {
    uint64_t v20 = *MEMORY[0x1E4F2FDE8];
    v21[0] = MEMORY[0x1E4F1CC38];
    CFDictionaryRef v7 = CGImageSourceCopyProperties(a1, (CFDictionaryRef)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:&v20 count:1]);
    if (v9) {
      goto LABEL_3;
    }
LABEL_6:
    *a4 = CGImageSourceGetPrimaryImageIndex(a1);
    BOOL v12 = 1;
    goto LABEL_11;
  }
  if (!v8) {
    goto LABEL_6;
  }
LABEL_3:
  id v10 = [(__CFDictionary *)v7 objectForKeyedSubscript:*MEMORY[0x1E4F2F978]];
  uint64_t v11 = [v10 objectForKeyedSubscript:*MEMORY[0x1E4F2FBD8]];

  if (v11)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000;
    char v19 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __PFFigGetImageSourceImageIndexForContainerItemID_block_invoke;
    v14[3] = &unk_1E5B2D288;
    double v16 = buf;
    id v17 = a4;
    id v15 = v9;
    [v11 enumerateObjectsUsingBlock:v14];
    BOOL v12 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v7;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Multi-image image source properties for source %@ do not contain file contents > images list, unable to map from CMPhoto to ImageIO indexes: %@", buf, 0x16u);
    }
    BOOL v12 = 0;
  }

LABEL_11:
  return v12;
}

void sub_1A421C200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __PFFigGetImageSourceImageIndexForContainerItemID_block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  CFDictionaryRef v7 = [a2 objectForKeyedSubscript:*MEMORY[0x1E4F2FB30]];
  if (!v7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v8 = 0;
    _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Image source image entries do not contain container item IDs, ensure the image source properties were copied with the kCGImageSourceAddHEIFContainerItemID option", v8, 2u);
  }
  if ([v7 isEqual:*(void *)(a1 + 32)])
  {
    **(void **)(a1 + 48) = a3;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

uint64_t PFFigJPEGDataFromImage(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v23[3] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = 0;
  uint64_t v9 = 0xFFFFFFFFLL;
  id v10 = 0;
  if (a1 && a2)
  {
    if (!a4)
    {
      uint64_t v13 = CMPhotoCompressionSessionCreate();
      if (v13)
      {
        uint64_t v9 = v13;
        id v8 = 0;
        goto LABEL_8;
      }
    }
    uint64_t v11 = *MEMORY[0x1E4F56060];
    v22[0] = *MEMORY[0x1E4F56058];
    v22[1] = v11;
    v23[0] = &unk_1EF7CA508;
    v23[1] = &unk_1EF7CA508;
    v22[2] = *MEMORY[0x1E4F56048];
    void v23[2] = &unk_1EF7CA508;
    id v8 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v23, v22, 3, 0);
    uint64_t v12 = CMPhotoCompressionSessionOpenEmptyContainer();
    if (v12)
    {
      uint64_t v9 = v12;
LABEL_8:
      id v10 = 0;
      goto LABEL_14;
    }
    CFAllocatorRef v14 = (void *)MEMORY[0x1E4F1CA60];
    uint64_t v15 = *MEMORY[0x1E4F560E8];
    v20[0] = *MEMORY[0x1E4F560B8];
    v20[1] = v15;
    v21[0] = &unk_1EF7CA520;
    v21[1] = MEMORY[0x1E4F1CC38];
    uint64_t v16 = *MEMORY[0x1E4F56150];
    v20[2] = *MEMORY[0x1E4F56158];
    v20[3] = v16;
    void v21[2] = &unk_1EF7CA538;
    v21[3] = &unk_1EF7CA508;
    id v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:v20 count:4];
    id v10 = [v14 dictionaryWithDictionary:v17];

    [v10 addEntriesFromDictionary:v7];
    uint64_t v18 = CMPhotoCompressionSessionAddImage();
    if (v18)
    {
      uint64_t v9 = v18;
    }
    else
    {
      uint64_t v9 = CMPhotoCompressionSessionCloseContainerAndCopyBacking();
      if (!v9) {
        *a1 = 0;
      }
    }
  }
LABEL_14:

  return v9;
}

uint64_t PFFigCopyImageDataToURLWithUpdatedProperties(void *a1, void *a2, uint64_t a3, void *a4)
{
  v16[3] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  uint64_t v9 = 0xFFFFFFFFLL;
  if (a1 && v7)
  {
    uint64_t v10 = *MEMORY[0x1E4F56048];
    v15[0] = @"IgnoreUnsupportedJPEGAuxiliaryImages";
    v15[1] = v10;
    v16[0] = MEMORY[0x1E4F1CC38];
    v16[1] = &unk_1EF7CA568;
    v15[2] = *MEMORY[0x1E4F56038];
    void v16[2] = v7;
    uint64_t v11 = (void *)MEMORY[0x1E4F1C9E8];
    id v12 = a1;
    uint64_t v13 = [v11 dictionaryWithObjects:v16 forKeys:v15 count:3];
    uint64_t v9 = _PFFigCopyImageWithPropertiesAndContainerOptions((uint64_t)v12, v13, v8, a3, &__block_literal_global_1433);
  }
  return v9;
}

uint64_t _PFFigCopyImageWithPropertiesAndContainerOptions(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  uint64_t v11 = a5;
  if (!a4)
  {
    uint64_t v13 = CMPhotoCompressionSessionCreate();
    if (v13) {
      goto LABEL_9;
    }
    a4 = 0;
  }
  id v15 = v10;
  uint64_t v12 = CMPhotoCompressionSessionOpenExistingContainerForModification();
  if (v12)
  {
    uint64_t v13 = v12;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v17 = a1;
      __int16 v18 = 1024;
      int v19 = v13;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "CMPhotoCompressionSessionOpenExistingContainerForModification failed for %@ with code %d", buf, 0x12u);
    }
  }
  else
  {
    uint64_t v13 = v11[2](v11, a4);
  }

LABEL_9:
  return v13;
}

uint64_t PFFigCopyImageFileWithPropertiesToData(void *a1, void *a2, uint64_t a3, void *a4)
{
  void v21[2] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a4;
  id v9 = v8;
  uint64_t v10 = 0xFFFFFFFFLL;
  if (v7 && a2)
  {
    id v11 = v8;
    uint64_t v12 = *MEMORY[0x1E4F56048];
    v20[0] = @"IgnoreUnsupportedJPEGAuxiliaryImages";
    v20[1] = v12;
    v21[0] = MEMORY[0x1E4F1CC38];
    v21[1] = &unk_1EF7CA508;
    uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:v20 count:2];
    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x2020000000;
    uint64_t v19 = 0;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = ___PFFigCopyImageWithPropertiesToData_block_invoke;
    void v15[3] = &unk_1E5B2D2F8;
    v15[4] = &v16;
    uint64_t v10 = _PFFigCopyImageWithPropertiesAndContainerOptions((uint64_t)v7, v13, v11, a3, v15);
    if (!v10) {
      *a2 = (id)v17[3];
    }
    _Block_object_dispose(&v16, 8);
  }
  return v10;
}

void sub_1A421CCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _PFFigTranscodeImageToJPEG(float a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  id v9 = a5;
  if (PFSharedFigDecodeSession_s_onceToken != -1) {
    dispatch_once(&PFSharedFigDecodeSession_s_onceToken, &__block_literal_global_1253);
  }
  uint64_t v10 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t Container = CMPhotoDecompressionSessionCreateContainer();
  if (!Container)
  {
    [v10 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F56298]];
    [v10 addEntriesFromDictionary:v8];
    if (v9) {
      [v10 setObject:v9 forKeyedSubscript:*MEMORY[0x1E4F563B0]];
    }
    if (a1 > 0.0)
    {
      [v10 setObject:&unk_1EF7CA568 forKeyedSubscript:*MEMORY[0x1E4F56158]];
      uint64_t v16 = *MEMORY[0x1E4F56358];
      *(float *)&double v12 = a1;
      uint64_t v13 = [NSNumber numberWithFloat:v12];
      v17[0] = v13;
      CFAllocatorRef v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:&v16 count:1];
      [v10 setObject:v14 forKeyedSubscript:*MEMORY[0x1E4F56150]];
    }
    [v10 setObject:&unk_1EF7CA508 forKeyedSubscript:*MEMORY[0x1E4F562D8]];
    uint64_t Container = CMPhotoDecompressionContainerJFIFTranscode();
    if (!Container) {
      *a3 = 0;
    }
  }

  return Container;
}

uint64_t PFFigEncodeCVPixelBufferToURL(uint64_t a1, void *a2, int a3)
{
  v13[3] = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  uint64_t v5 = *MEMORY[0x1E4F56048];
  v12[0] = *MEMORY[0x1E4F56058];
  v12[1] = v5;
  v13[0] = &unk_1EF7CA550;
  v13[1] = &unk_1EF7CA568;
  v12[2] = *MEMORY[0x1E4F56038];
  v13[2] = v4;
  id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:3];
  uint64_t v10 = *MEMORY[0x1E4F560B8];
  id v11 = &unk_1EF7CA580;
  id v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  uint64_t v8 = CMPhotoCompressionSessionCreate();
  if (!v8)
  {
    uint64_t v8 = CMPhotoCompressionSessionOpenEmptyContainer();
    if (!v8)
    {
      uint64_t v8 = CMPhotoCompressionSessionAddImage();
      if (!v8)
      {
        if (!a3 || (uint64_t v8 = CMPhotoCompressionSessionAddAuxiliaryImage(), !v8))
        {
          uint64_t v8 = CMPhotoCompressionSessionCloseContainer();
          if (!v8) {
            uint64_t v8 = CMPhotoCompressionSessionInvalidate();
          }
        }
      }
    }
  }

  return v8;
}

uint64_t PFFigEncodeCVPixelBufferToData(uint64_t a1, void *a2, int a3)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    uint64_t v6 = *MEMORY[0x1E4F56048];
    v12[0] = *MEMORY[0x1E4F56058];
    v12[1] = v6;
    v13[0] = &unk_1EF7CA550;
    v13[1] = &unk_1EF7CA508;
    id v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:2];
    uint64_t v10 = *MEMORY[0x1E4F560B8];
    id v11 = &unk_1EF7CA580;
    uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v11 forKeys:&v10 count:1];
    uint64_t v3 = CMPhotoCompressionSessionCreate();
    if (!v3)
    {
      uint64_t v3 = CMPhotoCompressionSessionOpenEmptyContainer();
      if (!v3)
      {
        uint64_t v3 = CMPhotoCompressionSessionAddImage();
        if (!v3)
        {
          if (!a3 || (uint64_t v3 = CMPhotoCompressionSessionAddAuxiliaryImage(), !v3))
          {
            uint64_t v3 = CMPhotoCompressionSessionCloseContainerAndCopyBacking();
            if (!v3) {
              *a2 = 0;
            }
          }
        }
      }
    }
  }
  return v3;
}

id PFShuffledArrayWithRandomNumberGenerator(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  if ((unint64_t)[v4 count] >= 2)
  {
    uint64_t v5 = (void *)[v4 mutableCopy];

    PFMutableArrayShuffleWithRandomNumberGenerator(v5, v3);
    id v4 = v5;
  }
  uint64_t v6 = (void *)[v4 copy];

  return v6;
}

id PFArrayRandomObjectWithRandomNumberGenerator(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = [v3 count];
  if (v5 > 1) {
    objc_msgSend(v3, "objectAtIndexedSubscript:", objc_msgSend(v4, "nextUnsignedIntegerLessThan:", v5));
  }
  else {
  uint64_t v6 = [v3 firstObject];
  }

  return v6;
}

__CFString *PFPosterShuffleFrequencyDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"None";
  }
  else {
    return off_1E5B2D348[a1 - 1];
  }
}

__CFString *PFPosterShuffleTypeDescription(uint64_t a1)
{
  uint64_t v1 = @"Manual";
  if (!a1) {
    uint64_t v1 = @"Smart Albums";
  }
  if (a1 == 2) {
    return @"User Album";
  }
  else {
    return v1;
  }
}

__CFString *PFPosterShuffleSmartAlbumsDescription(uint64_t a1)
{
  return PFBitmaskDescription(a1, &unk_1EF7CACE8, &unk_1EF7CAD00);
}

uint64_t *std::unique_ptr<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)(v1 + 8));
    *(void *)uint64_t v1 = 0;
    JUMPOUT(0x1A6259210);
  }
  return result;
}

char **boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl(char **a1)
{
  int v2 = *a1;
  if (v2)
  {
    if (*((unsigned char *)a1 + 28))
    {
      if (shmdt(v2)) {
        __assert_rtn("priv_close", "mapped_region.hpp", 836, "ret == 0");
      }
    }
    else
    {
      munmap((void *)(v2 - a1[2]), (size_t)&a1[2][(void)a1[1]]);
      *a1 = 0;
    }
  }
  return a1;
}

void __clang_call_terminate(void *a1)
{
}

void sub_1A421E2C4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  std::unique_ptr<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::reset[abi:ne180100]((uint64_t *)&buf);
  if (a2 == 1)
  {
    id v15 = __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v15 + 16))(v15);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v16;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Error reading scene geography index: %s.", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1A421DF1CLL);
  }
  _Unwind_Resume(a1);
}

void *boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_mapped_file(void *a1, const char *a2)
{
  uint64_t v6 = a2;
  *a1 = 0;
  id v4 = a1;
  int v5 = 1;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::managed_open_or_create_impl<char const*,boost::interprocess::ipcdetail::create_open_func<boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>>>((uint64_t)(a1 + 1), &v6, 0, (uint64_t)&v4);
  return a1;
}

void sub_1A421E40C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  _Unwind_Resume(a1);
}

void sub_1A421E59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_find_impl<int>(uint64_t a1, char *a2)
{
  if (!a2) {
    __assert_rtn("priv_find_impl", "segment_manager.hpp", 731, "name != 0");
  }
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA3A8] + 8) & 0x7FFFFFFFFFFFFFFFLL;
  int64x2_t v7 = vdupq_n_s64(4uLL);
  uint64_t v8 = v2;
  uint64_t v6 = &unk_1EF7A9C78;
  if (a2 == (char *)-1)
  {
    uint64_t v3 = a1 + 88;
    a2 = (char *)v2;
  }
  else
  {
    uint64_t v3 = a1 + 56;
  }
  return boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_find<char>(a1, a2, v3, (uint64_t)&v6, &v5);
}

unint64_t boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_find<char>(int a1, char *__s, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  size_t v7 = strlen(__s);
  uint64_t v8 = (char *)(a3 + 8);
  uint64_t v41 = a3 + 8 - (void)&v41;
  uint64_t v42 = a3 + 8 - (void)&v42;
  uint64_t v44 = a3 + 8 - (void)&v44;
  unint64_t v9 = *(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFFDLL;
  uint64_t v10 = a3 + 8 - (void)&v46;
  if (v9 == 1) {
    uint64_t v10 = 0;
  }
  unint64_t v11 = v10 + v9;
  unint64_t v12 = v8 - (char *)&v45;
  unint64_t v45 = v8 - (char *)&v45;
  unint64_t v46 = v10 + v9;
  if (v10 + v9 != 1)
  {
    while (1)
    {
      int64_t v47 = (char *)&v46 + v11 - (char *)&v47;
      if (v47 == 1) {
        break;
      }
      if (boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::intrusive_key_value_less::operator()((uint64_t)&v46 + v11, __s, v7))
      {
        if (v11 == 1) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = (char *)&v46 + v11;
        }
        uint64_t v16 = *((void *)v13 + 2);
        CFAllocatorRef v14 = v13 + 16;
        uint64_t v15 = v16;
      }
      else
      {
        if (v11 == 1) {
          int64_t v17 = 0;
        }
        else {
          int64_t v17 = (char *)&v46 - (char *)&v45;
        }
        unint64_t v12 = v17 + v11;
        unint64_t v45 = v17 + v11;
        if (v11 == 1) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = (char *)&v46 + v11;
        }
        uint64_t v19 = *((void *)v18 + 1);
        CFAllocatorRef v14 = v18 + 8;
        uint64_t v15 = v19;
      }
      int64_t v20 = v14 - (char *)&v47;
      if (v15 == 1) {
        int64_t v20 = 0;
      }
      uint64_t v21 = v20 + v15;
      if (v21 == 1) {
        int64_t v22 = 0;
      }
      else {
        int64_t v22 = (char *)&v47 - (char *)&v46;
      }
      unint64_t v11 = v22 + v21;
      unint64_t v46 = v22 + v21;
      if (v22 + v21 == 1) {
        goto LABEL_23;
      }
    }
LABEL_51:
    __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
  }
LABEL_23:
  int64_t v23 = (char *)&v45 - (char *)&v43;
  if (v12 == 1) {
    int64_t v23 = 0;
  }
  unint64_t v43 = v23 + v12;
  if (v23 + v12 == 1) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = (char *)&v43 + v23 + v12;
  }
  if (v8 == v24)
  {
    int v26 = &v44;
    uint64_t v27 = a3 + 8 - (void)&v44;
  }
  else
  {
    int64_t v47 = v24 - (char *)&v47;
    if (v24 - (char *)&v47 == 1) {
      goto LABEL_51;
    }
    int v25 = boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::intrusive_key_value_less::operator()(__s, v7, (uint64_t)v24);
    int v26 = &v44;
    if (!v25) {
      int v26 = (uint64_t *)&v43;
    }
    uint64_t v27 = *v26;
  }
  int64_t v28 = (char *)v26 - (char *)&v47;
  if (v27 == 1) {
    int64_t v28 = 0;
  }
  int64_t v29 = v28 + v27;
  int64_t v30 = (char *)&v47 - (char *)&v46;
  if (v29 == 1) {
    int64_t v30 = 0;
  }
  unint64_t v31 = v30 + v29;
  unint64_t v46 = v31;
  *a5 = 0;
  int64_t v32 = (char *)&v46 - (char *)&v47;
  if (v31 == 1) {
    int64_t v32 = 0;
  }
  unint64_t v33 = v32 + v31;
  if (v33 == 1) {
    double v34 = 0;
  }
  else {
    double v34 = (char *)&v47 + v33;
  }
  if (v8 == v34) {
    return 0;
  }
  uint64_t v35 = (char *)&v46 + v31;
  if (v31 == 1) {
    uint64_t v35 = 0;
  }
  int64_t v47 = v35 - (char *)&v47;
  if (v35 - (char *)&v47 == 1) {
    goto LABEL_51;
  }
  unint64_t v36 = *((void *)v35 + 3);
  unint64_t v37 = *(void *)(a4 + 16);
  if (v36 != v36 / v37 * v37) {
    __assert_rtn("priv_generic_find", "segment_manager.hpp", 877, "(ctrl_data->m_value_bytes % table.size) == 0");
  }
  if ((v35[35] & 0x1F) != 1) {
    __assert_rtn("priv_generic_find", "segment_manager.hpp", 878, "ctrl_data->sizeof_char() == sizeof(CharT)");
  }
  unint64_t result = (unint64_t)&v35[v35[34] * (unint64_t)(0xFu / v35[34] + 1)
                                + 24];
  *a5 = v36 / v37;
  return result;
}

uint64_t boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::intrusive_key_value_less::operator()(const void *a1, size_t __n, uint64_t a3)
{
  size_t v3 = *(unsigned __int16 *)(a3 + 32);
  if (v3 > __n) {
    return 1;
  }
  if (v3 != __n) {
    return 0;
  }
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v5 = a3 + 24;
  return memcmp(a1, (const void *)(v5+ (*(unsigned char *)(v5 + 11) & 0x1F)+ (*(unsigned char *)(v5 + 11) & 0x1F)* ((v6 - 1)/ (unint64_t)(*(unsigned char *)(v5 + 11) & 0x1F))+ *(unsigned __int8 *)(v5 + 10)* (unint64_t)(0xFu / *(unsigned __int8 *)(v5 + 10) + 1)), __n) >> 31;
}

uint64_t boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::intrusive_key_value_less::operator()(uint64_t a1, const void *a2, size_t a3)
{
  size_t v3 = *(unsigned __int16 *)(a1 + 32);
  if (v3 < a3) {
    return 1;
  }
  if (v3 != a3) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v5 = a1 + 24;
  return memcmp((const void *)(v5+ (*(unsigned char *)(v5 + 11) & 0x1F)+ (*(unsigned char *)(v5 + 11) & 0x1F)* ((v6 - 1)/ (unint64_t)(*(unsigned char *)(v5 + 11) & 0x1F))+ *(unsigned __int8 *)(v5 + 10)* (unint64_t)(0xFu / *(unsigned __int8 *)(v5 + 10) + 1)), a2, a3) >> 31;
}

void boost::interprocess::interprocess_exception::~interprocess_exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1EF7A9AD8;
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }

  std::exception::~exception(this);
}

{
  uint64_t vars8;

  boost::interprocess::interprocess_exception::~interprocess_exception(this);

  JUMPOUT(0x1A6259210);
}

uint64_t boost::interprocess::interprocess_exception::what(boost::interprocess::interprocess_exception *this)
{
  uint64_t result = (uint64_t)this + 16;
  if (*((char *)this + 39) < 0) {
    return *(void *)result;
  }
  return result;
}

void *boost::interprocess::interprocess_exception::interprocess_exception(void *a1, uint64_t *a2)
{
  *a1 = &unk_1EF7A9AD8;
  uint64_t v3 = *a2;
  a1[2] = 0;
  a1[1] = v3;
  a1[3] = 0;
  a1[4] = 0;
  if (v3)
  {
    id v4 = strerror(v3);
    MEMORY[0x1A62591D0](a1 + 2, v4);
  }
  else
  {
    MEMORY[0x1A62591D0](a1 + 2, "boost::interprocess_exception::library_error");
  }
  return a1;
}

void sub_1A421EB60(void *a1)
{
}

void sub_1A421EB6C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

void boost::interprocess::ipcdetail::placement_destroy<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::~placement_destroy()
{
}

unsigned char *boost::interprocess::ipcdetail::placement_destroy<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::destroy_n(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    int64_t v7 = (char *)&v30 - (char *)&v26;
    do
    {
      if (*(void *)(a2 + 56) != 1)
      {
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v29, a2, *(void *)(a2 + 24));
        if (v29 == 1) {
          uint64_t v8 = 0;
        }
        else {
          uint64_t v8 = (char *)&v29 + v29;
        }
        uint64_t v9 = *(void *)v8;
        int64_t v10 = v8 - (char *)&v30;
        if (v9 == 1) {
          int64_t v10 = 0;
        }
        uint64_t v11 = v10 + v9;
        int64_t v12 = (char *)&v30 - (char *)&v28;
        if (v11 == 1) {
          int64_t v12 = 0;
        }
        uint64_t v13 = v12 + v11;
        uint64_t v28 = v13;
        if (v11 == 1) {
          int64_t v14 = 0;
        }
        else {
          int64_t v14 = (char *)&v30 - (char *)&v27;
        }
        if (v13 == 1) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = (char *)&v28 + v13;
        }
        uint64_t v16 = *((void *)v15 + 10);
        uint64_t v17 = v15 + 80 - (char *)&v29;
        if (v16 == 1) {
          uint64_t v17 = 0;
        }
        uint64_t v29 = v17 + v16;
        uint64_t v30 = v11;
        uint64_t v27 = v14 + v11;
        std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a2 + 16), &v27);
        while (1)
        {
          int64_t v18 = v29 == 1 ? 0 : (char *)&v29 - (char *)&v30;
          uint64_t v19 = v18 + v29;
          uint64_t v30 = v18 + v29;
          if (v18 + v29 == 1) {
            break;
          }
          uint64_t v26 = v19 + v7;
          if (v19 + v7 == 1) {
            int64_t v20 = 0;
          }
          else {
            int64_t v20 = (char *)&v30 + v19;
          }
          uint64_t v21 = *((void *)v20 + 10);
          uint64_t v22 = v20 + 80 - (char *)&v29;
          if (v21 == 1) {
            uint64_t v22 = 0;
          }
          uint64_t v29 = v22 + v21;
          uint64_t v25 = (char *)&v30 - (char *)&v25 + v19;
          boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_node(a2, (char *)&v25);
        }
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_buckets((void *)a2);
        *(_OWORD *)(a2 + 48) = xmmword_1A42D3510;
        *(void *)(a2 + 32) = 0;
      }
      uint64_t result = boost::unordered::detail::functions<boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>::~functions((unsigned char *)a2);
      unint64_t v24 = *a4 + 1;
      *a4 = v24;
      a2 += 64;
    }
    while (v24 < a3);
  }
  return result;
}

unsigned char *boost::unordered::detail::functions<boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>::~functions(unsigned char *result)
{
  if ((*result & 2) != 0) {
    __assert_rtn("~functions", "implementation.hpp", 2781, "!(current_ & 2)");
  }
  return result;
}

void *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v3 = a2 + 56;
  uint64_t v4 = v5;
  if (v5 == 1) {
    __assert_rtn("get_bucket_pointer", "implementation.hpp", 3025, "buckets_");
  }
  uint64_t v6 = v3 + 8 * a3 - (void)v8 + v4;
  int64_t v7 = (unsigned char *)(v8 - (unsigned char *)result);
  if (v6 == 1) {
    int64_t v7 = 0;
  }
  *uint64_t result = &v7[v6];
  return result;
}

char *std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](char *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (uint64_t)a2 + *a2;
  if (v2 != 1 && v3 != 0)
  {
    if (*(void *)result == 1) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = &result[*(void *)result];
    }
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v5, v3);
  }
  return result;
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_node(uint64_t a1, char *a2)
{
  if (*(void *)a2 == 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (uint64_t)&a2[*(void *)a2];
  }
  boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector((char *)(v4 + 48));
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(v4);
  int64_t v5 = a2 - (char *)&v7;
  if (*(void *)a2 == 1) {
    int64_t v5 = 0;
  }
  uint64_t v7 = v5 + *(void *)a2;
  return std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a1 + 16), &v7);
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_buckets(void *a1)
{
  uint64_t result = (char *)boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v10, (uint64_t)a1, a1[3] + 1);
  uint64_t v3 = a1[7];
  uint64_t v4 = (char *)(a1 + 7) - (char *)&v9;
  if (v3 == 1) {
    uint64_t v4 = 0;
  }
  uint64_t v9 = v4 + v3;
  int64_t v5 = (char *)&v9 + v4 + v3;
  if (v4 + v3 != 1 && v5 != 0)
  {
    uint64_t v7 = a1[1];
    if (v7 == 1) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = (char *)a1 + v7 + 8;
    }
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v8, (uint64_t)v5);
  }
  return result;
}

char *boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(char *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = (char *)(a2 - 16);
    unint64_t v4 = *(void *)(a2 - 8);
    unint64_t v5 = (unint64_t)&result[*((void *)result + 4) + 55] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v6 = (char *)(v5 + 8);
    unint64_t v7 = ((unint64_t)&result[*((void *)result + 6) - v5 - 8] & 0xFFFFFFFFFFFFFFF8) + v5 + 8;
    if (v7 != a2 && ((*(void *)&v3[8 * v4 + 8] & 0x4000000000000000) != 0) != v4 >> 63) {
      goto LABEL_104;
    }
    if ((v4 & 0x8000000000000000) == 0) {
      __assert_rtn("priv_deallocate", "rbtree_best_fit.hpp", 1335, "priv_is_allocated_block(block)");
    }
    if ((a2 & 7) != 0) {
      __assert_rtn("assert_alignment", "mem_algo_common.hpp", 106, "uint_ptr % Alignment == 0");
    }
    unint64_t v8 = *((void *)result + 5);
    if (v8 < 8 * v4) {
      __assert_rtn("priv_deallocate", "rbtree_best_fit.hpp", 1341, "m_header.m_allocated >= block_old_size");
    }
    *((void *)result + 5) = v8 - 8 * v4;
    uint64_t v9 = *(void *)(a2 - 8);
    if (v6 != v3 && (v9 & 0x4000000000000000) == 0)
    {
      uint64_t v11 = *(void *)&v3[-8 * *(void *)v3 + 8];
      if (v11 < 0) {
        __assert_rtn("priv_is_prev_allocated", "rbtree_best_fit.hpp", 1218, "!prev->m_allocated");
      }
      if ((v11 & 0x3FFFFFFFFFFFFFFFLL) != *(void *)v3) {
        __assert_rtn("priv_is_prev_allocated", "rbtree_best_fit.hpp", 1219, "prev->m_size == block->m_prev_size");
      }
    }
    unint64_t v12 = v7 - 16;
    uint64_t v13 = &v3[8 * v9];
    unint64_t v14 = *((void *)v13 + 1);
    if ((char *)v12 != v13 && ((*(void *)&v13[8 * v14 + 8] & 0x4000000000000000) != 0) != v14 >> 63) {
LABEL_104:
    }
      __assert_rtn("priv_is_allocated_block", "rbtree_best_fit.hpp", 1200, "allocated == next_block_prev_allocated");
    if ((v9 & 0x4000000000000000) != 0 && (v14 & 0x8000000000000000) != 0)
    {
      int64_t v15 = (char *)&v84 - (char *)&v85;
      if (result - (char *)&v84 == -7) {
        int64_t v15 = 0;
      }
      int64_t v16 = v15 + result - (char *)&v84 + 8;
      if (v16 == 1) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = (char *)&v85 + v16;
      }
      uint64_t v18 = *((void *)v17 + 1);
      uint64_t v19 = v17 + 8 - (char *)&v86;
      if (v18 == 1) {
        uint64_t v19 = 0;
      }
      uint64_t v20 = v19 + v18;
      int64_t v21 = (char *)&v86 - (char *)&v81;
      if (v20 == 1) {
        int64_t v21 = 0;
      }
      uint64_t v22 = v21 + v20;
      uint64_t v81 = v22;
      int64_t v23 = (char *)&v81 - (char *)&v86;
      if (v22 == 1) {
        int64_t v23 = 0;
      }
      int64_t v24 = v23 + v22;
      int64_t v25 = (char *)&v86 - (char *)&v76;
      if (v24 == 1) {
        int64_t v25 = 0;
      }
      int64_t v26 = v25 + v24;
      uint64_t v76 = v26;
      int64_t v27 = (char *)&v76 - (char *)&v86;
      if (v26 == 1) {
        int64_t v27 = 0;
      }
      int64_t v28 = v27 + v26;
      int64_t v29 = (char *)&v86 - (char *)&v85;
    }
    else
    {
      if ((v9 & 0x4000000000000000) == 0)
      {
        v3 -= 8 * *(void *)v3;
        uint64_t v30 = *((void *)v3 + 1);
        *((void *)v3 + 1) = v30 & 0xC000000000000000 | (v30 + v9) & 0x3FFFFFFFFFFFFFFFLL;
        if (((v30 + v9) & 0x3FFFFFFFFFFFFFFFuLL) <= 4) {
          __assert_rtn("priv_deallocate", "rbtree_best_fit.hpp", 1361, "block_to_insert->m_size >= BlockCtrlUnits");
        }
      }
      if ((v14 & 0x8000000000000000) == 0)
      {
        uint64_t v31 = *((void *)v3 + 1);
        unint64_t v32 = (*((void *)v13 + 1) + v31) & 0x3FFFFFFFFFFFFFFFLL;
        *((void *)v3 + 1) = v31 & 0xC000000000000000 | v32;
        if (v32 <= 4) {
          __assert_rtn("priv_deallocate", "rbtree_best_fit.hpp", 1366, "block_to_insert->m_size >= BlockCtrlUnits");
        }
        uint64_t v33 = v13 - (char *)&v85 + 16;
        uint64_t v85 = v33;
        if ((v9 & 0x4000000000000000) != 0)
        {
          uint64_t v34 = (uint64_t)(result + 8);
          int64_t v35 = (char *)&v85 - (char *)&v86;
          if (v33 == 1) {
            int64_t v35 = 0;
          }
          int64_t v36 = v35 + v33;
          int64_t v37 = (char *)&v86 - (char *)&v82;
          if (v36 == 1) {
            int64_t v37 = 0;
          }
          int64_t v82 = v37 + v36;
          boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::replace_node(v34, &v82, (uint64_t)v3);
        }
        else
        {
          int64_t v38 = (char *)&v85 - (char *)&v86;
          if (v33 == 1) {
            int64_t v38 = 0;
          }
          int64_t v39 = v38 + v33;
          int64_t v40 = (char *)&v86 - v83;
          if (v39 == 1) {
            int64_t v40 = 0;
          }
          *(void *)unint64_t v83 = v40 + v39;
          boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v86, result, v83);
        }
      }
      uint64_t v41 = v3 - (char *)&v81 + 16;
      int64_t v42 = (char *)&v81 - (char *)&v86;
      if (v3 - (char *)&v81 == -15) {
        int64_t v42 = 0;
      }
      int64_t v43 = v42 + v41;
      if (v43 == 1) {
        int64_t v44 = 0;
      }
      else {
        int64_t v44 = (char *)&v86 - (char *)&v80;
      }
      int64_t v80 = v44 + v43;
      uint64_t v81 = v3 - (char *)&v81 + 16;
      if (v2 - (char *)&v84 == -7) {
        int64_t v45 = 0;
      }
      else {
        int64_t v45 = (char *)&v84 - (char *)&v85;
      }
      int64_t v46 = v45 + v2 - (char *)&v84 + 8;
      if (v46 == 1) {
        uint64_t v47 = 1;
      }
      else {
        uint64_t v47 = (char *)&v85 - (char *)&v86 + v46;
      }
      int64_t v48 = (char *)&v86 - &v79;
      if (v47 == 1) {
        int64_t v48 = 0;
      }
      int64_t v49 = v48 + v47;
      int64_t v50 = &v79 - (char *)&v86;
      if (v49 == 1) {
        int64_t v50 = 0;
      }
      int64_t v51 = v50 + v49;
      int64_t v52 = (char *)&v86 - (char *)&v84;
      if (v51 == 1) {
        int64_t v52 = 0;
      }
      int64_t v53 = v52 + v51;
      int64_t v84 = v52 + v51;
      uint64_t result = boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::next_node((char *)&v86, (char *)&v80);
      if (v86 == 1) {
        int64_t v54 = 0;
      }
      else {
        int64_t v54 = (char *)&v86 - (char *)&v80;
      }
      int64_t v55 = v54 + v86;
      int64_t v80 = v55;
      int64_t v56 = (char *)&v80 - (char *)&v86;
      if (v55 == 1) {
        int64_t v56 = 0;
      }
      int64_t v57 = v56 + v55;
      if (v53 == 1) {
        int64_t v58 = 0;
      }
      else {
        int64_t v58 = (char *)&v84 - (char *)&v85;
      }
      uint64_t v59 = v58 + v53;
      if (v57 == 1) {
        size_t v60 = 0;
      }
      else {
        size_t v60 = (char *)&v86 + v57;
      }
      if (v59 == 1) {
        double v61 = 0;
      }
      else {
        double v61 = (char *)&v85 + v59;
      }
      if (v60 == v61) {
        goto LABEL_102;
      }
      uint64_t v62 = *((void *)v3 + 1);
      if (v55 == 1) {
        double v63 = 0;
      }
      else {
        double v63 = (char *)&v80 + v55;
      }
      unsigned int v64 = v63 - 16;
      uint64_t v65 = v63 - 16 - (char *)&v86;
      uint64_t v86 = v65;
      if (v65 == 1) {
        __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
      }
      unint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFFLL;
      if (v65 + (char *)&v86 - (char *)&v85 == 1) {
        unsigned int v64 = 0;
      }
      if (v66 <= (*((void *)v64 + 1) & 0x3FFFFFFFFFFFFFFFuLL)) {
        goto LABEL_102;
      }
      int64_t v67 = (char *)&v81 - (char *)&v86;
      if (v3 - (char *)&v81 == -15) {
        int64_t v67 = 0;
      }
      int64_t v68 = v67 + v41;
      int64_t v69 = (char *)&v86 - (char *)&v78;
      if (v68 == 1) {
        int64_t v69 = 0;
      }
      int64_t v78 = v69 + v68;
      boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v86, v2, (char *)&v78);
      int64_t v70 = (char *)&v84 - (char *)&v86;
      if (v84 == 1) {
        int64_t v70 = 0;
      }
      int64_t v71 = (char *)&v86 - (char *)&v77;
      if (v70 + v84 == 1) {
        int64_t v71 = 0;
      }
      int64_t v72 = v71 + v70 + v84;
      int64_t v77 = v72;
      int64_t v73 = (char *)&v77 - (char *)&v86;
      if (v72 == 1) {
        int64_t v73 = 0;
      }
      int64_t v28 = v73 + v72;
      int64_t v29 = (char *)&v86 - (char *)&v85;
    }
    if (v28 == 1) {
      int64_t v29 = 0;
    }
    uint64_t v85 = v29 + v28;
    uint64_t result = boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::insert_equal((char *)&v86, v2, (char *)&v85, (uint64_t)v3);
LABEL_102:
    uint64_t v74 = *((void *)v3 + 1);
    *((void *)v3 + 1) = v74 & 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v75 = (uint64_t *)&v3[8 * v74];
    v75[1] &= ~0x4000000000000000uLL;
    *unint64_t v75 = *((void *)v3 + 1) & 0x3FFFFFFFFFFFFFFFLL;
  }
  return result;
}

char *boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase(char *a1, char *a2, char *a3)
{
  uint64_t v5 = *(void *)a3;
  int64_t v6 = a3 - (char *)&v20;
  if (*(void *)a3 == 1) {
    int64_t v6 = 0;
  }
  uint64_t v7 = v6 + v5;
  if (*(void *)a3 == 1) {
    int64_t v8 = 0;
  }
  else {
    int64_t v8 = a3 - (char *)&v18;
  }
  if (v7 == 1) {
    int64_t v9 = 0;
  }
  else {
    int64_t v9 = (char *)&v20 - (char *)&v19;
  }
  uint64_t v19 = v9 + v7;
  boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::next_node((char *)&v20, (char *)&v19);
  if (v20 == 1) {
    int64_t v10 = 0;
  }
  else {
    int64_t v10 = (char *)&v20 - (char *)&v19;
  }
  uint64_t v19 = v10 + v20;
  uint64_t v17 = a2 - (char *)&v17 + 8;
  uint64_t v18 = v8 + v5;
  int64_t v11 = (char *)&v18 - (char *)&v16;
  if (v8 + v5 == 1) {
    int64_t v11 = 0;
  }
  int64_t v16 = v11 + v8 + v5;
  uint64_t result = boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::erase((char *)&v20, (char *)&v17, (char *)&v16);
  --*(void *)a2;
  int64_t v13 = (char *)&v19 - (char *)&v20;
  if (v19 == 1) {
    int64_t v13 = 0;
  }
  uint64_t v14 = v13 + v19;
  int64_t v15 = (char *)((char *)&v20 - a1);
  if (v14 == 1) {
    int64_t v15 = 0;
  }
  *(void *)a1 = &v15[v14];
  return result;
}

char *boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::replace_node(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = (char *)a2 + *a2;
  if (*a2 == 1) {
    uint64_t v3 = 0;
  }
  uint64_t v132 = v3 - (char *)&v132 - 16;
  if (v3 - (char *)&v132 == 17) {
    __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
  }
  uint64_t v4 = v3 - (char *)&v108;
  uint64_t v5 = a1 - (void)&v107;
  uint64_t v107 = a1 - (void)&v107;
  uint64_t v108 = v3 - (char *)&v108;
  uint64_t result = (char *)(a3 + 16);
  uint64_t v7 = a3 + 16 - (void)&v106;
  uint64_t v106 = v7;
  int64_t v8 = (char *)&v108 - (char *)&v111;
  if (v3 - (char *)&v108 == 1) {
    int64_t v8 = 0;
  }
  uint64_t v9 = v8 + v4;
  int64_t v10 = (char *)&v107 - (char *)&v110;
  if (v5 == 1) {
    int64_t v10 = 0;
  }
  uint64_t v11 = v10 + v5;
  uint64_t v110 = v10 + v5;
  uint64_t v111 = v9;
  uint64_t v12 = result - (char *)&v109;
  uint64_t v109 = result - (char *)&v109;
  int64_t v13 = &v112[v9 - 8];
  if (v9 == 1) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = &v112[v9 - 8];
  }
  if (result != v14)
  {
    int64_t v15 = (char *)&v110 + v11;
    if (v11 == 1) {
      int64_t v15 = 0;
    }
    uint64_t v16 = *((void *)v15 + 1);
    uint64_t v17 = v15 + 8 - (char *)&v132;
    if (v16 == 1) {
      uint64_t v17 = 0;
    }
    uint64_t v18 = v17 + v16;
    if (v18 == 1) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = (char *)&v132 + v18;
    }
    if (v14 == v19)
    {
      int64_t v20 = (char *)&v110 - (char *)&v132;
      if (v11 == 1) {
        int64_t v20 = 0;
      }
      uint64_t v131 = (char *)&v109 - (char *)&v131 + v12;
      uint64_t v132 = v20 + v11;
      int64_t v21 = (char *)&v132 + v20 + v11;
      if (v20 + v11 == 1) {
        int64_t v21 = 0;
      }
      *((void *)v21 + 1) = (char *)&v109 + v12 - (v21 + 8);
    }
    uint64_t v22 = *((void *)v15 + 2);
    uint64_t v23 = v15 + 16 - (char *)&v130;
    if (v22 == 1) {
      uint64_t v23 = 0;
    }
    uint64_t v24 = v23 + v22;
    if (v24 == 1) {
      int64_t v25 = 0;
    }
    else {
      int64_t v25 = (char *)&v130 + v24;
    }
    if (v14 == v25)
    {
      int64_t v26 = (char *)&v110 - (char *)&v130;
      if (v11 == 1) {
        int64_t v26 = 0;
      }
      uint64_t v129 = (char *)&v109 - (char *)&v129 + v12;
      uint64_t v130 = v26 + v11;
      int64_t v27 = (char *)&v130 + v26 + v11;
      if (v26 + v11 == 1) {
        int64_t v27 = 0;
      }
      *((void *)v27 + 2) = (char *)&v109 + v12 - (v27 + 16);
    }
    unint64_t v28 = *(void *)v15 & 0xFFFFFFFFFFFFFFFDLL;
    int64_t v29 = v15 - (char *)&v128;
    if (v28 == 1) {
      int64_t v29 = 0;
    }
    unint64_t v30 = v29 + v28;
    if (v30 == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = (char *)&v128 + v30;
    }
    if (v14 == v31)
    {
      int64_t v32 = (char *)&v110 - (char *)&v128;
      if (v11 == 1) {
        int64_t v32 = 0;
      }
      uint64_t v33 = v32 + v11;
      uint64_t v34 = (char *)&v109 - (char *)&v127 + v12;
      uint64_t v127 = v34;
      uint64_t v128 = v33;
      if (v33 == 1) {
        int64_t v35 = 0;
      }
      else {
        int64_t v35 = (uint64_t *)((char *)&v128 + v33);
      }
      *int64_t v35 = *v35 & 2 | ((char *)&v127 - (char *)v35 + v34);
      uint64_t v12 = v109;
      uint64_t v9 = v111;
      int64_t v13 = &v112[v111 - 8];
    }
    int64_t v36 = (char *)&v109 - (char *)&v121;
    if (v12 == 1) {
      int64_t v36 = 0;
    }
    int64_t v37 = (char *)&v109 - (char *)&v123;
    if (v12 == 1) {
      int64_t v37 = 0;
    }
    int64_t v38 = (char *)&v109 - (char *)&v125;
    if (v12 == 1) {
      int64_t v38 = 0;
    }
    uint64_t v39 = v38 + v12;
    uint64_t v125 = v39;
    uint64_t v126 = 1;
    if (v9 == 1) {
      int64_t v13 = 0;
    }
    uint64_t v40 = *((void *)v13 + 1);
    uint64_t v41 = v13 + 8 - (char *)&v124;
    if (v40 == 1) {
      uint64_t v41 = 0;
    }
    uint64_t v42 = v41 + v40;
    uint64_t v124 = v42;
    int64_t v43 = (char *)&v125 + v39;
    if (v39 == 1) {
      int64_t v43 = 0;
    }
    int64_t v44 = (char *)((char *)&v124 - (v43 + 8));
    if (v42 == 1) {
      int64_t v44 = 0;
    }
    *((void *)v43 + 1) = &v44[v42];
    uint64_t v45 = v37 + v12;
    uint64_t result = (char *)*((void *)v13 + 2);
    uint64_t v46 = v13 + 16 - (char *)&v122;
    if (result == (char *)1) {
      uint64_t v46 = 0;
    }
    uint64_t v47 = &result[v46];
    long long v122 = v47;
    uint64_t v123 = v45;
    if (v45 == 1) {
      int64_t v48 = 0;
    }
    else {
      int64_t v48 = (char *)&v123 + v45;
    }
    int64_t v49 = (char *)&v122 - (v48 + 16);
    if (v47 == (char *)1) {
      int64_t v49 = 0;
    }
    *((void *)v48 + 2) = &v47[v49];
    uint64_t v50 = v36 + v12;
    uint64_t v121 = v36 + v12;
    unint64_t v51 = *(void *)v13 & 0xFFFFFFFFFFFFFFFDLL;
    int64_t v52 = v13 - (char *)&v120;
    if (v51 == 1) {
      int64_t v52 = 0;
    }
    unint64_t v53 = v52 + v51;
    unint64_t v120 = v53;
    if ((v53 & 2) != 0) {
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    }
    if (v50 == 1) {
      int64_t v54 = 0;
    }
    else {
      int64_t v54 = (unint64_t *)((char *)&v121 + v50);
    }
    int64_t v55 = (char *)((char *)&v120 - (char *)v54);
    if (v53 == 1) {
      int64_t v55 = 0;
    }
    unint64_t *v54 = *v54 & 2 | (unint64_t)&v55[v53];
    uint64_t v56 = v109;
    int64_t v57 = (char *)&v109 + v109;
    if (v109 == 1) {
      int64_t v58 = 0;
    }
    else {
      int64_t v58 = (char *)&v109 + v109;
    }
    uint64_t v59 = *((void *)v58 + 1);
    uint64_t v60 = v58 + 8 - (char *)&v119;
    if (v59 == 1) {
      uint64_t v60 = 0;
    }
    uint64_t v61 = v60 + v59;
    int64_t v62 = (char *)&v119 - (char *)&v126;
    if (v61 == 1) {
      int64_t v62 = 0;
    }
    uint64_t v63 = v62 + v61;
    uint64_t v126 = v63;
    if (v63 != 1)
    {
      int64_t v64 = (char *)&v109 - (char *)&v118;
      if (v109 == 1) {
        int64_t v64 = 0;
      }
      uint64_t v65 = v64 + v109;
      uint64_t v118 = v65;
      uint64_t v119 = v63 + (char *)&v126 - (char *)&v119;
      if ((v109 & 2) != 0) {
        __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
      }
      unint64_t v66 = (unint64_t *)((char *)&v126 + v63);
      if (v63 + (char *)&v126 - (char *)&v119 == 1) {
        unint64_t v66 = 0;
      }
      int64_t v67 = (char *)((char *)&v118 - (char *)v66);
      if (v65 == 1) {
        int64_t v67 = 0;
      }
      unint64_t *v66 = *v66 & 2 | (unint64_t)&v67[v65];
      uint64_t v56 = v109;
      int64_t v57 = (char *)&v109 + v109;
    }
    if (v56 == 1) {
      int64_t v68 = 0;
    }
    else {
      int64_t v68 = v57;
    }
    uint64_t v69 = *((void *)v68 + 2);
    uint64_t v70 = v68 + 16 - (char *)&v117;
    if (v69 == 1) {
      uint64_t v70 = 0;
    }
    uint64_t v71 = v70 + v69;
    int64_t v72 = (char *)&v117 - (char *)&v126;
    if (v71 == 1) {
      int64_t v72 = 0;
    }
    uint64_t v73 = v72 + v71;
    uint64_t v126 = v73;
    if (v73 != 1)
    {
      int64_t v74 = (char *)&v109 - (char *)&v116;
      if (v56 == 1) {
        int64_t v74 = 0;
      }
      uint64_t v75 = v74 + v56;
      uint64_t v116 = v75;
      uint64_t v117 = v73 + (char *)&v126 - (char *)&v117;
      if ((v56 & 2) != 0) {
        __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
      }
      uint64_t v76 = (unint64_t *)((char *)&v126 + v73);
      if (v73 + (char *)&v126 - (char *)&v117 == 1) {
        uint64_t v76 = 0;
      }
      int64_t v77 = (char *)((char *)&v116 - (char *)v76);
      if (v75 == 1) {
        int64_t v77 = 0;
      }
      *uint64_t v76 = *v76 & 2 | (unint64_t)&v77[v75];
      uint64_t v56 = v109;
      int64_t v57 = (char *)&v109 + v109;
    }
    if (v56 == 1) {
      int64_t v78 = 0;
    }
    else {
      int64_t v78 = v57;
    }
    unint64_t v79 = *(void *)v78 & 0xFFFFFFFFFFFFFFFDLL;
    int64_t v80 = v78 - v115;
    if (v79 == 1) {
      int64_t v80 = 0;
    }
    unint64_t v81 = v80 + v79;
    int64_t v82 = v115 - (unsigned char *)&v126;
    if (v81 == 1) {
      int64_t v82 = 0;
    }
    unint64_t v83 = v82 + v81;
    if (v83 != 1)
    {
      int64_t v84 = (char *)&v126 + v83;
      uint64_t v85 = v110 == 1 ? 0 : (char *)&v110 + v110;
      if (v84 != v85)
      {
        uint64_t v86 = *((void *)v84 + 1);
        uint64_t v87 = v84 + 8 - v115;
        if (v86 == 1) {
          uint64_t v87 = 0;
        }
        uint64_t v88 = v87 + v86;
        double v89 = &v115[v88];
        if (v88 == 1) {
          double v89 = 0;
        }
        if (v111 == 1) {
          double v90 = 0;
        }
        else {
          double v90 = &v112[v111 - 8];
        }
        if (v89 == v90)
        {
          int64_t v91 = (char *)&v109 - v114;
          if (v56 == 1) {
            int64_t v91 = 0;
          }
          uint64_t v92 = v91 + v56;
          if (v83 + (char *)&v126 - v115 == 1) {
            double v93 = 0;
          }
          else {
            double v93 = (char *)&v126 + v83;
          }
          double v94 = (unsigned char *)(v114 - (v93 + 8));
          if (v92 == 1) {
            double v94 = 0;
          }
          *((void *)v93 + 1) = &v94[v92];
        }
        uint64_t v95 = *((void *)v84 + 2);
        uint64_t v96 = v84 + 16 - v113;
        if (v95 == 1) {
          uint64_t v96 = 0;
        }
        uint64_t v97 = v96 + v95;
        if (v97 == 1) {
          double v98 = 0;
        }
        else {
          double v98 = &v113[v97];
        }
        if (v98 == v90)
        {
          unint64_t v99 = v83 + (char *)&v126 - v113;
          int64_t v100 = (char *)&v109 - v112;
          if (v56 == 1) {
            int64_t v100 = 0;
          }
          uint64_t v101 = v100 + v56;
          if (v99 == 1) {
            int64_t v84 = 0;
          }
          CGFloat v102 = (unsigned char *)(v112 - (v84 + 16));
          if (v101 == 1) {
            CGFloat v102 = 0;
          }
          *((void *)v84 + 2) = &v102[v101];
        }
      }
    }
    uint64_t v4 = v108;
    uint64_t v7 = v106;
  }
  uint64_t v103 = (unint64_t *)((char *)&v108 + v4);
  if (v4 == 1) {
    uint64_t v103 = 0;
  }
  unint64_t v104 = *v103;
  size_t v105 = (unint64_t *)((char *)&v106 + v7);
  if (v7 == 1) {
    size_t v105 = 0;
  }
  *size_t v105 = *v105 & 0xFFFFFFFFFFFFFFFDLL | (2 * ((v104 >> 1) & 1));
  return result;
}

char *boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::next_node(char *result, char *a2)
{
  uint64_t v2 = *(void *)a2;
  if (*(void *)a2 == 1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = &a2[*(void *)a2];
  }
  uint64_t v4 = *((void *)v3 + 2);
  uint64_t v5 = v3 + 16 - (char *)&v40;
  if (v4 == 1) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 + v4;
  uint64_t v40 = v6;
  if (v6 == 1)
  {
    uint64_t v7 = (char *)&v38;
    int64_t v8 = a2 - (char *)&v38;
    if (v2 == 1) {
      int64_t v8 = 0;
    }
    uint64_t v9 = v8 + v2;
    uint64_t v38 = v9;
    if (v9 == 1) {
      int64_t v10 = 0;
    }
    else {
      int64_t v10 = (char *)&v38 + v9;
    }
    unint64_t v11 = *(void *)v10 & 0xFFFFFFFFFFFFFFFDLL;
    uint64_t v12 = v10 - (char *)&v37;
    if (v11 == 1) {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v12 + v11;
    uint64_t v37 = v12 + v11;
    BOOL v14 = v12 + v11 == 1;
    int64_t v15 = (char *)&v37 + v12 + v11;
    if (v13 == 1) {
      int64_t v15 = 0;
    }
    uint64_t v16 = *((void *)v15 + 2);
    uint64_t v17 = v15 + 16 - v36;
    if (v16 == 1) {
      uint64_t v17 = 0;
    }
    uint64_t v18 = v17 + v16;
    if (v18 == 1) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = &v36[v18];
    }
    if (v10 == v19)
    {
      do
      {
        if (v14) {
          int64_t v20 = 0;
        }
        else {
          int64_t v20 = (char *)&v37 - (char *)&v38;
        }
        uint64_t v21 = v20 + v13;
        uint64_t v38 = v21;
        unint64_t v22 = *(void *)v15 & 0xFFFFFFFFFFFFFFFDLL;
        uint64_t v23 = v15 - v36;
        if (v22 == 1) {
          uint64_t v23 = 0;
        }
        uint64_t v24 = v23 + v22;
        if (v24 == 1) {
          int64_t v25 = 0;
        }
        else {
          int64_t v25 = v36 - (unsigned char *)&v37;
        }
        uint64_t v13 = v25 + v24;
        uint64_t v37 = v13;
        int64_t v15 = (char *)&v37 + v13;
        if (v13 == 1) {
          int64_t v15 = 0;
        }
        uint64_t v26 = *((void *)v15 + 2);
        BOOL v14 = v13 == 1;
        uint64_t v27 = v15 + 16 - v36;
        if (v26 == 1) {
          uint64_t v27 = 0;
        }
        uint64_t v28 = v27 + v26;
        if (v21 == 1) {
          int64_t v10 = 0;
        }
        else {
          int64_t v10 = (char *)&v38 + v21;
        }
        if (v28 == 1) {
          int64_t v29 = 0;
        }
        else {
          int64_t v29 = &v36[v28];
        }
      }
      while (v10 == v29);
    }
    uint64_t v30 = *((void *)v10 + 2);
    uint64_t v31 = v10 + 16 - v36;
    if (v30 == 1) {
      uint64_t v31 = 0;
    }
    uint64_t v32 = v31 + v30;
    uint64_t v33 = &v36[v32];
    if (v32 == 1) {
      uint64_t v33 = 0;
    }
    if (v15 != v33) {
      uint64_t v7 = (char *)&v37;
    }
    uint64_t v34 = *(void *)v7;
    int64_t v35 = v7 - result;
    if (v34 == 1) {
      int64_t v35 = 0;
    }
    *(void *)uint64_t result = v35 + v34;
  }
  else
  {
    uint64_t v39 = (char *)&v40 - (char *)&v39 + v6;
    return boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::minimum(result, &v39);
  }
  return result;
}

char *boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::insert_equal(char *a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v7 = a4 + 16;
  uint64_t v77 = a4 + 16 - (void)&v77;
  int64_t v8 = a3 - (char *)&v75;
  if (*(void *)a3 == 1) {
    int64_t v8 = 0;
  }
  int64_t v9 = v8 + *(void *)a3;
  int64_t v75 = v9;
  uint64_t v76 = a2 - (char *)&v76 + 8;
  uint64_t v74 = v7 - (void)&v74;
  int64_t v10 = (char *)&v76 - (char *)&v80;
  if (a2 - (char *)&v76 == -7) {
    int64_t v10 = 0;
  }
  int64_t v11 = v10 + a2 - (char *)&v76 + 8;
  int64_t v12 = (char *)&v75 - (char *)&v79;
  if (v9 == 1) {
    int64_t v12 = 0;
  }
  int64_t v13 = v12 + v9;
  uint64_t v79 = v13;
  int64_t v80 = v10 + a2 - (char *)&v76 + 8;
  uint64_t v14 = v7 - (void)&v78;
  uint64_t v78 = v7 - (void)&v78;
  LOBYTE(v84) = 0;
  uint64_t v85 = 1;
  int64_t v15 = (char *)&v80 - (char *)&v83;
  if (v11 == 1) {
    int64_t v15 = 0;
  }
  int64_t v16 = v15 + v11;
  int64_t v17 = (char *)&v79 - (char *)&v82;
  if (v13 == 1) {
    int64_t v17 = 0;
  }
  unint64_t v18 = v17 + v13;
  unint64_t v82 = v18;
  int64_t v83 = v15 + v11;
  uint64_t v19 = v7 - (void)&v81;
  uint64_t v81 = v7 - (void)&v81;
  int64_t v20 = (char *)&v82 + v18;
  if (v18 == 1) {
    int64_t v20 = 0;
  }
  uint64_t v21 = (char *)&v83 + v16;
  if (v16 == 1) {
    uint64_t v21 = 0;
  }
  if (v20 != v21)
  {
    *(void *)uint64_t v92 = v20 - v92 - 16;
    if (v20 - v92 == 17) {
      goto LABEL_109;
    }
    uint64_t v91 = a4 - (void)&v91;
    if ((*((void *)v20 - 1) & 0x3FFFFFFFFFFFFFFFuLL) < (*(void *)(a4 + 8) & 0x3FFFFFFFFFFFFFFFuLL))
    {
      int64_t v22 = (char *)&v83 - (char *)&v87;
      if (v16 == 1) {
        int64_t v22 = 0;
      }
      int64_t v23 = v22 + v16;
      uint64_t v24 = (char *)&v81 - (char *)&v86 + v19;
      uint64_t v86 = v24;
      uint64_t v87 = v23;
      int64_t v25 = (char *)&v87 - (char *)&v90;
      if (v23 == 1) {
        int64_t v25 = 0;
      }
      unint64_t v26 = v25 + v23;
      unint64_t v90 = v26;
      uint64_t v27 = (char *)&v90 + v26;
      if (v26 == 1) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = (char *)&v90 + v26;
      }
      unint64_t v29 = *(void *)v28 & 0xFFFFFFFFFFFFFFFDLL;
      int64_t v30 = v28 - (char *)&v89;
      if (v29 == 1) {
        int64_t v30 = 0;
      }
      unint64_t v31 = v30 + v29;
      unint64_t v89 = v30 + v29;
      if (v30 + v29 != 1)
      {
        int64_t v32 = (char *)&v89 - (char *)&v90;
        if (v24 == 1) {
          uint64_t v33 = 0;
        }
        else {
          uint64_t v33 = a4 + 16;
        }
        while (1)
        {
          unint64_t v26 = v32 + v31;
          unint64_t v90 = v32 + v31;
          uint64_t v27 = (char *)&v89 + v31;
          *(void *)uint64_t v92 = (char *)&v89 + v31 - v92 - 16;
          if ((char *)&v89 + v31 - v92 == 17) {
            break;
          }
          uint64_t v91 = v33 - (void)&v91 - 16;
          if (v33 - (void)&v91 == 17) {
            break;
          }
          unint64_t v34 = *((void *)v27 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          unint64_t v35 = *(void *)(v33 - 8) & 0x3FFFFFFFFFFFFFFFLL;
          BOOL v36 = v34 >= v35;
          if (v34 >= v35) {
            uint64_t v37 = 8;
          }
          else {
            uint64_t v37 = 16;
          }
          if (v36) {
            uint64_t v38 = v27 + 8;
          }
          else {
            uint64_t v38 = v27 + 16;
          }
          uint64_t v39 = *(void *)&v27[v37];
          int64_t v40 = v38 - (char *)&v88;
          if (v39 == 1) {
            int64_t v40 = 0;
          }
          uint64_t v41 = v40 + v39;
          if (v41 == 1) {
            int64_t v42 = 0;
          }
          else {
            int64_t v42 = (char *)&v88 - (char *)&v89;
          }
          unint64_t v31 = v42 + v41;
          unint64_t v89 = v31;
          if (v31 == 1) {
            goto LABEL_45;
          }
        }
LABEL_109:
        __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
      }
LABEL_45:
      if (v26 == 1) {
        int64_t v43 = 0;
      }
      else {
        int64_t v43 = v27;
      }
      int64_t v44 = (char *)&v87 + v23;
      if (v23 == 1) {
        int64_t v44 = 0;
      }
      if (v43 == v44)
      {
        BOOL v45 = 1;
      }
      else
      {
        *(void *)uint64_t v92 = v43 - v92 - 16;
        if (v43 - v92 == 17) {
          goto LABEL_109;
        }
        if (v24 == 1) {
          uint64_t v7 = 0;
        }
        uint64_t v91 = v7 - (void)&v91 - 16;
        if (v7 - (void)&v91 == 17) {
          goto LABEL_109;
        }
        BOOL v45 = (*((void *)v43 - 1) & 0x3FFFFFFFFFFFFFFFuLL) >= (*(void *)(v7 - 8) & 0x3FFFFFFFFFFFFFFFuLL);
      }
      LOBYTE(v84) = v45;
      int64_t v65 = (char *)&v90 - (char *)&v85;
      if (v26 == 1) {
        int64_t v65 = 0;
      }
      uint64_t v64 = v65 + v26;
      goto LABEL_95;
    }
  }
  int64_t v46 = (char *)&v82 - (char *)&v90;
  if (v18 == 1) {
    int64_t v46 = 0;
  }
  unint64_t v47 = v46 + v18;
  unint64_t v90 = v47;
  uint64_t v48 = *((void *)v21 + 1);
  uint64_t v49 = v21 + 8 - (char *)&v89;
  if (v48 == 1) {
    uint64_t v49 = 0;
  }
  unint64_t v89 = v49 + v48;
  if (v49 + v48 == 1) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = (char *)&v89 + v49 + v48;
  }
  if (v20 == v50) {
    goto LABEL_73;
  }
  boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node((char *)&v88, (char *)&v82);
  int64_t v51 = (char *)&v88 - (char *)&v90;
  if (v88 == 1) {
    int64_t v51 = 0;
  }
  unint64_t v47 = v51 + v88;
  *(void *)uint64_t v92 = a4 - (void)v92;
  int64_t v52 = (char *)&v90 + v51 + v88;
  if (v47 == 1) {
    int64_t v52 = 0;
  }
  unint64_t v90 = v47;
  uint64_t v91 = v52 - (char *)&v91 - 16;
  if (v52 - (char *)&v91 == 17) {
    goto LABEL_109;
  }
  if ((*(void *)(a4 + 8) & 0x3FFFFFFFFFFFFFFFuLL) >= (*((void *)v52 - 1) & 0x3FFFFFFFFFFFFFFFuLL))
  {
LABEL_73:
    int64_t v54 = (char *)&v83 - (char *)&v91;
    if (v16 == 1) {
      int64_t v54 = 0;
    }
    uint64_t v91 = v54 + v16;
    int64_t v55 = &v92[v54 - 8 + v16];
    if (v54 + v16 == 1) {
      int64_t v55 = 0;
    }
    unint64_t v56 = *(void *)v55 & 0xFFFFFFFFFFFFFFFDLL;
    int64_t v57 = v55 - v92;
    if (v56 == 1) {
      int64_t v57 = 0;
    }
    if (v57 + v56 == 1)
    {
      LOBYTE(v84) = 1;
      unint64_t v58 = v82;
    }
    else
    {
      unint64_t v58 = v82;
      uint64_t v59 = (char *)&v82 + v82;
      if (v82 == 1) {
        uint64_t v59 = 0;
      }
      uint64_t v60 = *((void *)v59 + 1);
      uint64_t v61 = v59 + 8 - v92;
      if (v60 == 1) {
        uint64_t v61 = 0;
      }
      LOBYTE(v84) = v61 + v60 == 1;
      if (v61 + v60 != 1)
      {
        int64_t v62 = (char *)&v90;
LABEL_88:
        int64_t v63 = v62 - (char *)&v85;
        if (v47 == 1) {
          int64_t v63 = 0;
        }
        uint64_t v64 = v63 + v47;
LABEL_95:
        uint64_t v85 = v64;
        goto LABEL_96;
      }
    }
    int64_t v62 = (char *)&v82;
    unint64_t v47 = v58;
    goto LABEL_88;
  }
  int64_t v53 = (char *)&v83 - v92;
  if (v16 == 1) {
    int64_t v53 = 0;
  }
  *(void *)uint64_t v92 = v53 + v16;
  uint64_t v91 = (char *)&v81 - (char *)&v91 + v19;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_equal_upper_bound_check<boost::intrusive::detail::key_nodeptr_comp<std::less<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl>,boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,boost::move_detail::identity<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl>>>(v92, &v91, (uint64_t)&v84);
  int64_t v11 = v80;
  uint64_t v14 = v78;
LABEL_96:
  int64_t v66 = (char *)&v80 - v92;
  if (v11 == 1) {
    int64_t v66 = 0;
  }
  *(void *)uint64_t v92 = v66 + v11;
  int64_t v67 = (char *)&v78 - (char *)&v91;
  if (v14 == 1) {
    int64_t v67 = 0;
  }
  uint64_t v91 = v67 + v14;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_commit(v92, (char *)&v91, (uint64_t)&v84);
  int64_t v68 = (char *)&v76 - (char *)&v84;
  if (v76 == 1) {
    int64_t v68 = 0;
  }
  int64_t v84 = v68 + v76;
  int64_t v69 = (char *)&v74 - v92;
  if (v74 == 1) {
    int64_t v69 = 0;
  }
  *(void *)uint64_t v92 = v69 + v74;
  uint64_t result = boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rebalance_after_insertion((char *)&v84, v92);
  int64_t v71 = (char *)&v74 - (char *)&v91;
  if (v74 == 1) {
    int64_t v71 = 0;
  }
  uint64_t v72 = v71 + v74;
  uint64_t v73 = (char *)((char *)&v91 - a1);
  if (v72 == 1) {
    uint64_t v73 = 0;
  }
  *(void *)a1 = &v73[v72];
  ++*(void *)a2;
  return result;
}

char *boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rebalance_after_insertion(char *a1, char *a2)
{
  if (*(void *)a2 == 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = &a2[*(void *)a2];
  }
  *(void *)v4 &= ~2uLL;
  uint64_t v5 = (char *)((char *)&v78 - a2);
  uint64_t v6 = *(char **)a2;
  while (1)
  {
    if (v6 == (char *)1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = &a2[(void)v6];
    }
    unint64_t v8 = *(void *)v7 & 0xFFFFFFFFFFFFFFFDLL;
    int64_t v9 = v7 - (char *)&v79;
    if (v8 == 1) {
      int64_t v9 = 0;
    }
    unint64_t v10 = v9 + v8;
    int64_t v79 = v10;
    if (v10 == 1) {
      int64_t v11 = 0;
    }
    else {
      int64_t v11 = (char *)&v79 + v10;
    }
    unint64_t v12 = *(void *)v11 & 0xFFFFFFFFFFFFFFFDLL;
    int64_t v13 = v11 - (char *)&v78;
    if (v12 == 1) {
      int64_t v13 = 0;
    }
    unint64_t v14 = v13 + v12;
    unint64_t v78 = v13 + v12;
    uint64_t v15 = *(void *)a1;
    int64_t v16 = &a1[*(void *)a1];
    uint64_t result = *(void *)a1 == 1 ? 0 : &a1[*(void *)a1];
    if (v11 == result || (*v11 & 2) != 0) {
      break;
    }
    unint64_t v18 = (char *)&v78 + v14;
    if (v14 == 1) {
      unint64_t v18 = 0;
    }
    if (v18 == result) {
      break;
    }
    *(void *)v18 &= ~2uLL;
    unint64_t v19 = v78;
    int64_t v20 = (char *)&v78 + v78;
    if (v78 == 1) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = (char *)&v78 + v78;
    }
    uint64_t v22 = *((void *)v21 + 1);
    uint64_t v23 = v21 + 8 - (char *)&v77;
    if (v22 == 1) {
      uint64_t v23 = 0;
    }
    uint64_t v24 = v23 + v22;
    uint64_t v77 = v23 + v22;
    int64_t v25 = v79;
    unint64_t v26 = (char *)&v79 + v79;
    if (v79 == 1) {
      unint64_t v26 = 0;
    }
    uint64_t v27 = (char *)&v77 + v24;
    if (v24 == 1) {
      uint64_t v27 = 0;
    }
    if (v26 == v27)
    {
      uint64_t v24 = *((void *)v21 + 2);
      uint64_t v28 = v21 + 16 - (char *)&v76;
      if (v24 == 1) {
        uint64_t v28 = 0;
      }
    }
    else if (v24 == 1)
    {
      uint64_t v28 = 0;
    }
    else
    {
      uint64_t v28 = 8;
    }
    uint64_t v29 = v28 + v24;
    uint64_t v76 = v29;
    if (v29 == 1 || (uint64_t v30 = *(uint64_t *)((char *)&v76 + v29), (v30 & 2) != 0))
    {
      uint64_t v33 = *((void *)v26 + 1);
      uint64_t v34 = v26 + 8 - v75;
      if (v33 == 1) {
        uint64_t v34 = 0;
      }
      uint64_t v35 = v34 + v33;
      BOOL v36 = &v75[v35];
      if (v35 == 1) {
        BOOL v36 = 0;
      }
      uint64_t v37 = *(char **)a2;
      uint64_t v38 = &a2[*(void *)a2];
      if (*(void *)a2 == 1) {
        uint64_t v38 = 0;
      }
      if (v26 == v27)
      {
        if (v36 != v38)
        {
          uint64_t v48 = 40;
          if (v79 == 1) {
            uint64_t v48 = 0;
          }
          uint64_t v74 = v48 + v79;
          int64_t v49 = a2 - (char *)&v73;
          if (v37 == (char *)1) {
            int64_t v49 = 0;
          }
          uint64_t v73 = &v37[v49];
          boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left_no_parent_fix((char *)&v74, (char *)&v73);
          int64_t v50 = a2 - (char *)&v79;
          if (*(void *)a2 == 1) {
            int64_t v50 = 0;
          }
          int64_t v25 = v50 + *(void *)a2;
          int64_t v79 = v25;
          unint64_t v19 = v78;
          int64_t v20 = (char *)&v78 + v78;
        }
        int64_t v51 = (char *)&v78 - (char *)&v72;
        int64_t v52 = (char *)&v79 - (char *)&v71;
        if (v25 == 1) {
          int64_t v52 = 0;
        }
        if (v19 == 1) {
          int64_t v51 = 0;
        }
        int64_t v71 = v52 + v25;
        unint64_t v72 = v51 + v19;
        if (v19 == 1) {
          int64_t v53 = 0;
        }
        else {
          int64_t v53 = v20;
        }
        unint64_t v54 = *(void *)v53 & 0xFFFFFFFFFFFFFFFDLL;
        int64_t v55 = v53 - (char *)&v70;
        if (v54 == 1) {
          int64_t v55 = 0;
        }
        unint64_t v70 = v55 + v54;
        int64_t v56 = a1 - (char *)&v69;
        if (*(void *)a1 == 1) {
          int64_t v56 = 0;
        }
        int64_t v69 = v56 + *(void *)a1;
        uint64_t result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right((char *)&v72, (char *)&v71, (char *)&v70, (char *)&v69);
      }
      else
      {
        if (v36 == v38)
        {
          int64_t v39 = (char *)&v79 - (char *)&v68;
          if (v79 == 1) {
            int64_t v39 = 0;
          }
          uint64_t v68 = v39 + v79;
          int64_t v40 = a2 - (char *)&v67;
          if (v37 == (char *)1) {
            int64_t v40 = 0;
          }
          int64_t v67 = &v37[v40];
          boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right_no_parent_fix((char *)&v68, (char *)&v67);
          int64_t v41 = a2 - (char *)&v79;
          if (*(void *)a2 == 1) {
            int64_t v41 = 0;
          }
          int64_t v25 = v41 + *(void *)a2;
          int64_t v79 = v25;
          unint64_t v19 = v78;
          int64_t v20 = (char *)&v78 + v78;
        }
        int64_t v42 = (char *)&v78 - (char *)&v66;
        int64_t v43 = (char *)&v79 - (char *)&v65;
        if (v25 == 1) {
          int64_t v43 = 0;
        }
        if (v19 == 1) {
          int64_t v42 = 0;
        }
        int64_t v65 = v43 + v25;
        unint64_t v66 = v42 + v19;
        if (v19 == 1) {
          int64_t v44 = 0;
        }
        else {
          int64_t v44 = v20;
        }
        unint64_t v45 = *(void *)v44 & 0xFFFFFFFFFFFFFFFDLL;
        int64_t v46 = v44 - (char *)&v64;
        if (v45 == 1) {
          int64_t v46 = 0;
        }
        unint64_t v64 = v46 + v45;
        int64_t v47 = a1 - (char *)&v63;
        if (*(void *)a1 == 1) {
          int64_t v47 = 0;
        }
        int64_t v63 = v47 + *(void *)a1;
        uint64_t result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left((char *)&v66, (char *)&v65, (char *)&v64, (char *)&v63);
      }
      if (v79 == 1) {
        int64_t v57 = 0;
      }
      else {
        int64_t v57 = (int64_t *)((char *)&v79 + v79);
      }
      *v57 |= 2uLL;
      uint64_t v15 = *(void *)a1;
      int64_t v16 = &a1[*(void *)a1];
      break;
    }
    *(uint64_t *)((char *)&v76 + v29) = v30 | 2;
    if (v79 == 1) {
      unint64_t v31 = 0;
    }
    else {
      unint64_t v31 = (int64_t *)((char *)&v79 + v79);
    }
    *v31 |= 2uLL;
    if (v78 == 1) {
      int64_t v32 = 0;
    }
    else {
      int64_t v32 = v5;
    }
    uint64_t v6 = &v32[v78];
    *(void *)a2 = &v32[v78];
  }
  if (v15 == 1) {
    unint64_t v58 = 0;
  }
  else {
    unint64_t v58 = v16;
  }
  unint64_t v59 = *(void *)v58 & 0xFFFFFFFFFFFFFFFDLL;
  int64_t v60 = v58 - (char *)&v79;
  if (v59 == 1) {
    int64_t v60 = 0;
  }
  unint64_t v61 = v60 + v59;
  int64_t v79 = v61;
  if (v61 == 1) {
    int64_t v62 = 0;
  }
  else {
    int64_t v62 = (int64_t *)((char *)&v79 + v61);
  }
  *v62 |= 2uLL;
  return result;
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left_no_parent_fix(char *result, char *a2)
{
  if (*(void *)a2 == 1) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = &a2[*(void *)a2];
  }
  uint64_t v3 = *((void *)v2 + 1);
  uint64_t v4 = v2 + 8 - (char *)&v36;
  if (v3 == 1) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4 + v3;
  int64_t v6 = result - (char *)&v35;
  if (*(void *)result == 1) {
    int64_t v6 = 0;
  }
  int64_t v7 = v6 + *(void *)result;
  int64_t v8 = (char *)&v36 - (char *)&v34;
  if (v5 == 1) {
    int64_t v8 = 0;
  }
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (char *)&v35 + v7;
  if (v7 == 1) {
    unint64_t v10 = 0;
  }
  int64_t v11 = (char *)((char *)&v34 - (v10 + 16));
  if (v9 == 1) {
    int64_t v11 = 0;
  }
  int64_t v35 = v7;
  uint64_t v36 = v5;
  uint64_t v34 = v9;
  *((void *)v10 + 2) = &v11[v9];
  if (v5 != 1)
  {
    uint64_t v12 = v5 + 24;
    v33[1] = v5 + 24;
    int64_t v13 = result - (char *)v33;
    if (*(void *)result == 1) {
      int64_t v13 = 0;
    }
    int64_t v14 = v13 + *(void *)result;
    v33[0] = v14;
    if ((v14 & 2) != 0) {
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    }
    uint64_t v15 = (unint64_t *)((char *)&v36 + v5);
    if (v12 == 1) {
      uint64_t v15 = 0;
    }
    int64_t v16 = (char *)((char *)v33 - (char *)v15);
    if (v14 == 1) {
      int64_t v16 = 0;
    }
    *uint64_t v15 = *v15 & 2 | (unint64_t)&v16[v14];
  }
  int64_t v17 = a2 - (char *)&v32;
  if (*(void *)a2 == 1) {
    int64_t v17 = 0;
  }
  int64_t v18 = v17 + *(void *)a2;
  int64_t v19 = result - (char *)&v31;
  if (*(void *)result == 1) {
    int64_t v19 = 0;
  }
  int64_t v20 = v19 + *(void *)result;
  int64_t v31 = v20;
  int64_t v32 = v18;
  if (v18 == 1) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = (char *)&v33[-1] + v18;
  }
  uint64_t v22 = (char *)((char *)&v31 - (v21 + 8));
  if (v20 == 1) {
    uint64_t v22 = 0;
  }
  *((void *)v21 + 1) = &v22[v20];
  int64_t v23 = result - (char *)&v30;
  if (*(void *)result == 1) {
    int64_t v23 = 0;
  }
  int64_t v24 = v23 + *(void *)result;
  int64_t v25 = a2 - (char *)&v29;
  if (*(void *)a2 == 1) {
    int64_t v25 = 0;
  }
  int64_t v26 = v25 + *(void *)a2;
  int64_t v29 = v26;
  int64_t v30 = v24;
  if ((v26 & 2) != 0) {
    __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
  }
  uint64_t v27 = (unint64_t *)((char *)&v30 + v24);
  if (v24 == 1) {
    uint64_t v27 = 0;
  }
  uint64_t v28 = (char *)((char *)&v29 - (char *)v27);
  if (v26 == 1) {
    uint64_t v28 = 0;
  }
  *uint64_t v27 = *v27 & 2 | (unint64_t)&v28[v26];
  return result;
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right(char *a1, char *a2, char *a3, char *a4)
{
  if (*(void *)a3 == 1) {
    int64_t v8 = 0;
  }
  else {
    int64_t v8 = &a3[*(void *)a3];
  }
  uint64_t v11 = *((void *)v8 + 1);
  unint64_t v10 = v8 + 8;
  uint64_t v9 = v11;
  uint64_t v12 = *(void *)a1;
  int64_t v13 = a1 - (char *)&v35;
  if (*(void *)a1 == 1) {
    int64_t v13 = 0;
  }
  uint64_t v35 = v13 + v12;
  int64_t v14 = a2 - (char *)&v34;
  if (*(void *)a2 == 1) {
    int64_t v14 = 0;
  }
  int64_t v34 = v14 + *(void *)a2;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right_no_parent_fix((char *)&v35, (char *)&v34);
  int64_t v15 = a2 - (char *)&v33;
  if (*(void *)a2 == 1) {
    int64_t v15 = 0;
  }
  int64_t v16 = v15 + *(void *)a2;
  int64_t v17 = a3 - (char *)&v32;
  if (*(void *)a3 == 1) {
    int64_t v17 = 0;
  }
  int64_t v18 = v17 + *(void *)a3;
  int64_t v32 = v18;
  int64_t v33 = v16;
  if ((v18 & 2) != 0) {
    __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
  }
  int64_t v19 = v10 - v36;
  if (v9 == 1) {
    int64_t v19 = 0;
  }
  uint64_t v20 = v19 + v9;
  uint64_t v21 = &v36[v20];
  if (v20 == 1) {
    uint64_t v21 = 0;
  }
  uint64_t v22 = &a1[v12];
  if (v12 == 1) {
    uint64_t v22 = 0;
  }
  int64_t v23 = (unint64_t *)((char *)&v33 + v16);
  if (v16 == 1) {
    int64_t v23 = 0;
  }
  int64_t v24 = (char *)((char *)&v32 - (char *)v23);
  if (v18 == 1) {
    int64_t v24 = 0;
  }
  unint64_t *v23 = *v23 & 2 | (unint64_t)&v24[v18];
  int64_t v25 = a4 - (char *)&v31;
  if (*(void *)a4 == 1) {
    int64_t v25 = 0;
  }
  int64_t v31 = v25 + *(void *)a4;
  int64_t v26 = a2 - (char *)&v30;
  if (*(void *)a2 == 1) {
    int64_t v26 = 0;
  }
  int64_t v30 = v26 + *(void *)a2;
  int64_t v27 = a3 - (char *)&v29;
  if (*(void *)a3 == 1) {
    int64_t v27 = 0;
  }
  int64_t v29 = v27 + *(void *)a3;
  return boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::set_child((char *)&v31, (char *)&v30, (char *)&v29, v21 == v22);
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right_no_parent_fix(char *result, char *a2)
{
  if (*(void *)a2 == 1) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = &a2[*(void *)a2];
  }
  uint64_t v3 = *((void *)v2 + 2);
  uint64_t v4 = v2 + 16 - (char *)&v36;
  if (v3 == 1) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4 + v3;
  int64_t v6 = result - (char *)&v35;
  if (*(void *)result == 1) {
    int64_t v6 = 0;
  }
  int64_t v7 = v6 + *(void *)result;
  int64_t v8 = (char *)&v36 - (char *)&v34;
  if (v5 == 1) {
    int64_t v8 = 0;
  }
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (char *)&v35 + v7;
  if (v7 == 1) {
    unint64_t v10 = 0;
  }
  uint64_t v11 = (char *)((char *)&v34 - (v10 + 8));
  if (v9 == 1) {
    uint64_t v11 = 0;
  }
  int64_t v35 = v7;
  uint64_t v36 = v5;
  uint64_t v34 = v9;
  *((void *)v10 + 1) = &v11[v9];
  if (v5 != 1)
  {
    uint64_t v12 = v5 + 24;
    v33[1] = v5 + 24;
    int64_t v13 = result - (char *)v33;
    if (*(void *)result == 1) {
      int64_t v13 = 0;
    }
    int64_t v14 = v13 + *(void *)result;
    v33[0] = v14;
    if ((v14 & 2) != 0) {
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    }
    int64_t v15 = (unint64_t *)((char *)&v36 + v5);
    if (v12 == 1) {
      int64_t v15 = 0;
    }
    int64_t v16 = (char *)((char *)v33 - (char *)v15);
    if (v14 == 1) {
      int64_t v16 = 0;
    }
    *int64_t v15 = *v15 & 2 | (unint64_t)&v16[v14];
  }
  int64_t v17 = a2 - (char *)&v32;
  if (*(void *)a2 == 1) {
    int64_t v17 = 0;
  }
  int64_t v18 = v17 + *(void *)a2;
  int64_t v19 = result - (char *)&v31;
  if (*(void *)result == 1) {
    int64_t v19 = 0;
  }
  int64_t v20 = v19 + *(void *)result;
  int64_t v31 = v20;
  int64_t v32 = v18;
  if (v18 == 1) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = (char *)&v33[-1] + v18;
  }
  uint64_t v22 = (char *)((char *)&v31 - (v21 + 16));
  if (v20 == 1) {
    uint64_t v22 = 0;
  }
  *((void *)v21 + 2) = &v22[v20];
  int64_t v23 = result - (char *)&v30;
  if (*(void *)result == 1) {
    int64_t v23 = 0;
  }
  int64_t v24 = v23 + *(void *)result;
  int64_t v25 = a2 - (char *)&v29;
  if (*(void *)a2 == 1) {
    int64_t v25 = 0;
  }
  int64_t v26 = v25 + *(void *)a2;
  int64_t v29 = v26;
  int64_t v30 = v24;
  if ((v26 & 2) != 0) {
    __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
  }
  int64_t v27 = (unint64_t *)((char *)&v30 + v24);
  if (v24 == 1) {
    int64_t v27 = 0;
  }
  uint64_t v28 = (char *)((char *)&v29 - (char *)v27);
  if (v26 == 1) {
    uint64_t v28 = 0;
  }
  *int64_t v27 = *v27 & 2 | (unint64_t)&v28[v26];
  return result;
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left(char *a1, char *a2, char *a3, char *a4)
{
  if (*(void *)a3 == 1) {
    int64_t v8 = 0;
  }
  else {
    int64_t v8 = &a3[*(void *)a3];
  }
  uint64_t v11 = *((void *)v8 + 1);
  unint64_t v10 = v8 + 8;
  uint64_t v9 = v11;
  uint64_t v12 = *(void *)a1;
  int64_t v13 = a1 - (char *)&v35;
  if (*(void *)a1 == 1) {
    int64_t v13 = 0;
  }
  uint64_t v35 = v13 + v12;
  int64_t v14 = a2 - (char *)&v34;
  if (*(void *)a2 == 1) {
    int64_t v14 = 0;
  }
  int64_t v34 = v14 + *(void *)a2;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left_no_parent_fix((char *)&v35, (char *)&v34);
  int64_t v15 = a2 - (char *)&v33;
  if (*(void *)a2 == 1) {
    int64_t v15 = 0;
  }
  int64_t v16 = v15 + *(void *)a2;
  int64_t v17 = a3 - (char *)&v32;
  if (*(void *)a3 == 1) {
    int64_t v17 = 0;
  }
  int64_t v18 = v17 + *(void *)a3;
  int64_t v32 = v18;
  int64_t v33 = v16;
  if ((v18 & 2) != 0) {
    __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
  }
  int64_t v19 = v10 - v36;
  if (v9 == 1) {
    int64_t v19 = 0;
  }
  uint64_t v20 = v19 + v9;
  uint64_t v21 = &v36[v20];
  if (v20 == 1) {
    uint64_t v21 = 0;
  }
  uint64_t v22 = &a1[v12];
  if (v12 == 1) {
    uint64_t v22 = 0;
  }
  int64_t v23 = (unint64_t *)((char *)&v33 + v16);
  if (v16 == 1) {
    int64_t v23 = 0;
  }
  int64_t v24 = (char *)((char *)&v32 - (char *)v23);
  if (v18 == 1) {
    int64_t v24 = 0;
  }
  unint64_t *v23 = *v23 & 2 | (unint64_t)&v24[v18];
  int64_t v25 = a4 - (char *)&v31;
  if (*(void *)a4 == 1) {
    int64_t v25 = 0;
  }
  int64_t v31 = v25 + *(void *)a4;
  int64_t v26 = a2 - (char *)&v30;
  if (*(void *)a2 == 1) {
    int64_t v26 = 0;
  }
  int64_t v30 = v26 + *(void *)a2;
  int64_t v27 = a3 - (char *)&v29;
  if (*(void *)a3 == 1) {
    int64_t v27 = 0;
  }
  int64_t v29 = v27 + *(void *)a3;
  return boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::set_child((char *)&v31, (char *)&v30, (char *)&v29, v21 == v22);
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::set_child(char *result, char *a2, char *a3, int a4)
{
  uint64_t v4 = *(void *)a3;
  if (*(void *)a3 == 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = &a3[*(void *)a3];
  }
  uint64_t v6 = *(void *)result;
  int64_t v7 = &result[*(void *)result];
  if (*(void *)result == 1) {
    int64_t v7 = 0;
  }
  if (v5 == v7)
  {
    int64_t v15 = result - (char *)&v32;
    if (v6 == 1) {
      int64_t v15 = 0;
    }
    uint64_t v16 = v15 + v6;
    int64_t v17 = a2 - (char *)&v31;
    if (*(void *)a2 == 1) {
      int64_t v17 = 0;
    }
    int64_t v18 = v17 + *(void *)a2;
    uint64_t v31 = v18;
    uint64_t v32 = v16;
    if ((v18 & 2) != 0) {
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    }
    int64_t v19 = (unint64_t *)((char *)&v32 + v16);
    if (v16 == 1) {
      int64_t v19 = 0;
    }
    uint64_t v20 = (char *)((char *)&v31 - (char *)v19);
    if (v18 == 1) {
      uint64_t v20 = 0;
    }
    *int64_t v19 = *v19 & 2 | (unint64_t)&v20[v18];
  }
  else
  {
    uint64_t v8 = *(void *)a2;
    if (a4)
    {
      int64_t v9 = a3 - v30;
      if (v4 == 1) {
        int64_t v9 = 0;
      }
      uint64_t v10 = v9 + v4;
      int64_t v11 = a2 - v29;
      if (v8 == 1) {
        int64_t v11 = 0;
      }
      uint64_t v12 = v11 + v8;
      if (v10 == 1) {
        int64_t v13 = 0;
      }
      else {
        int64_t v13 = &v30[v10];
      }
      int64_t v14 = (unsigned char *)(v29 - (v13 + 8));
      if (v12 == 1) {
        int64_t v14 = 0;
      }
      *((void *)v13 + 1) = &v14[v12];
    }
    else
    {
      int64_t v21 = a3 - v28;
      if (v4 == 1) {
        int64_t v21 = 0;
      }
      uint64_t v22 = v21 + v4;
      int64_t v23 = a2 - (char *)&v27;
      if (v8 == 1) {
        int64_t v23 = 0;
      }
      uint64_t v24 = v23 + v8;
      if (v22 == 1) {
        int64_t v25 = 0;
      }
      else {
        int64_t v25 = &v28[v22];
      }
      int64_t v26 = (char *)((char *)&v27 - (v25 + 16));
      if (v24 == 1) {
        int64_t v26 = 0;
      }
      *((void *)v25 + 2) = &v26[v24];
    }
  }
  return result;
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_commit(char *result, char *a2, uint64_t a3)
{
  uint64_t v3 = a3 + 8;
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4 == 1 || v4 == -(a3 + 8)) {
    __assert_rtn("insert_commit", "bstree_algorithms.hpp", 1774, "commit_data.node != node_ptr()");
  }
  uint64_t v6 = v4 + v3 - (void)&v95;
  uint64_t v95 = v6;
  int64_t v7 = (char *)(v4 + v3);
  if (v6 == 1) {
    int64_t v7 = 0;
  }
  uint64_t v8 = *(void *)result;
  int64_t v9 = &result[*(void *)result];
  if (*(void *)result == 1) {
    int64_t v9 = 0;
  }
  if (v7 == v9)
  {
    int64_t v28 = result - (char *)&v94;
    if (v8 == 1) {
      int64_t v28 = 0;
    }
    uint64_t v29 = v28 + v8;
    int64_t v30 = a2 - (char *)&v93;
    if (*(void *)a2 == 1) {
      int64_t v30 = 0;
    }
    int64_t v31 = v30 + *(void *)a2;
    int64_t v93 = v31;
    uint64_t v94 = v29;
    if ((v31 & 2) != 0) {
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    }
    uint64_t v32 = (unint64_t *)((char *)&v94 + v29);
    if (v29 == 1) {
      uint64_t v32 = 0;
    }
    int64_t v33 = (char *)((char *)&v93 - (char *)v32);
    if (v31 == 1) {
      int64_t v33 = 0;
    }
    *uint64_t v32 = *v32 & 2 | (unint64_t)&v33[v31];
    int64_t v34 = result - (char *)&v92;
    if (*(void *)result == 1) {
      int64_t v34 = 0;
    }
    int64_t v35 = v34 + *(void *)result;
    int64_t v36 = a2 - (char *)&v91;
    if (*(void *)a2 == 1) {
      int64_t v36 = 0;
    }
    int64_t v37 = v36 + *(void *)a2;
    int64_t v91 = v37;
    int64_t v92 = v35;
    if (v35 == 1) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = (char *)&v92 + v35;
    }
    int64_t v39 = (char *)((char *)&v91 - (v38 + 16));
    if (v37 == 1) {
      int64_t v39 = 0;
    }
    *((void *)v38 + 2) = &v39[v37];
    int64_t v40 = result - (char *)&v90;
    if (*(void *)result == 1) {
      int64_t v40 = 0;
    }
    int64_t v41 = v40 + *(void *)result;
    int64_t v42 = a2 - (char *)&v89;
    if (*(void *)a2 == 1) {
      int64_t v42 = 0;
    }
    int64_t v43 = v42 + *(void *)a2;
    int64_t v89 = v43;
    int64_t v90 = v41;
    if (v41 == 1) {
      int64_t v44 = 0;
    }
    else {
      int64_t v44 = (char *)&v90 + v41;
    }
    unint64_t v45 = (char *)((char *)&v89 - (v44 + 8));
    if (v43 == 1) {
      unint64_t v45 = 0;
    }
    *((void *)v44 + 1) = &v45[v43];
    uint64_t v6 = v95;
  }
  else if (*(unsigned char *)a3)
  {
    uint64_t v10 = 56;
    if (v6 == 1) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = v10 + v6;
    int64_t v12 = a2 - (char *)&v87;
    if (*(void *)a2 == 1) {
      int64_t v12 = 0;
    }
    int64_t v13 = v12 + *(void *)a2;
    int64_t v87 = v13;
    uint64_t v88 = v11;
    int64_t v14 = (char *)&v88 + v11;
    if (v11 == 1) {
      int64_t v14 = 0;
    }
    int64_t v15 = (char *)((char *)&v87 - (v14 + 8));
    if (v13 == 1) {
      int64_t v15 = 0;
    }
    *((void *)v14 + 1) = &v15[v13];
    uint64_t v16 = *(void *)result;
    int64_t v17 = &result[*(void *)result];
    if (*(void *)result == 1) {
      int64_t v17 = 0;
    }
    uint64_t v18 = *((void *)v17 + 1);
    uint64_t v19 = v17 + 8 - v86;
    if (v18 == 1) {
      uint64_t v19 = 0;
    }
    uint64_t v20 = v19 + v18;
    if (v20 == 1) {
      int64_t v21 = 0;
    }
    else {
      int64_t v21 = &v86[v20];
    }
    if (v7 == v21)
    {
      int64_t v22 = result - (char *)&v85;
      if (v16 == 1) {
        int64_t v22 = 0;
      }
      uint64_t v23 = v22 + v16;
      int64_t v24 = a2 - (char *)&v84;
      if (*(void *)a2 == 1) {
        int64_t v24 = 0;
      }
      int64_t v25 = v24 + *(void *)a2;
      int64_t v84 = v25;
      uint64_t v85 = v23;
      int64_t v26 = &v86[v23 - 8];
      if (v23 == 1) {
        int64_t v26 = 0;
      }
      uint64_t v27 = (char *)((char *)&v84 - (v26 + 8));
      if (v25 == 1) {
        uint64_t v27 = 0;
      }
      *((void *)v26 + 1) = &v27[v25];
    }
  }
  else
  {
    int64_t v46 = (char *)&v95 - (char *)&v83;
    if (v6 == 1) {
      int64_t v46 = 0;
    }
    uint64_t v47 = v46 + v6;
    int64_t v48 = a2 - (char *)&v82;
    if (*(void *)a2 == 1) {
      int64_t v48 = 0;
    }
    int64_t v49 = v48 + *(void *)a2;
    int64_t v82 = v49;
    uint64_t v83 = v47;
    int64_t v50 = (char *)&v83 + v47;
    if (v47 == 1) {
      int64_t v50 = 0;
    }
    int64_t v51 = (char *)((char *)&v82 - (v50 + 16));
    if (v49 == 1) {
      int64_t v51 = 0;
    }
    *((void *)v50 + 2) = &v51[v49];
    uint64_t v52 = *(void *)result;
    int64_t v53 = &result[*(void *)result];
    if (*(void *)result == 1) {
      int64_t v53 = 0;
    }
    uint64_t v54 = *((void *)v53 + 2);
    uint64_t v55 = v53 + 16 - v86;
    if (v54 == 1) {
      uint64_t v55 = 0;
    }
    uint64_t v56 = v55 + v54;
    if (v56 == 1) {
      int64_t v57 = 0;
    }
    else {
      int64_t v57 = &v86[v56];
    }
    if (v7 == v57)
    {
      int64_t v58 = result - (char *)&v81;
      if (v52 == 1) {
        int64_t v58 = 0;
      }
      uint64_t v59 = v58 + v52;
      int64_t v60 = a2 - (char *)&v80;
      if (*(void *)a2 == 1) {
        int64_t v60 = 0;
      }
      int64_t v61 = v60 + *(void *)a2;
      int64_t v80 = v61;
      uint64_t v81 = v59;
      int64_t v62 = (char *)&v81 + v59;
      if (v59 == 1) {
        int64_t v62 = 0;
      }
      int64_t v63 = (char *)((char *)&v80 - (v62 + 16));
      if (v61 == 1) {
        int64_t v63 = 0;
      }
      *((void *)v62 + 2) = &v63[v61];
    }
  }
  int64_t v64 = a2 - (char *)&v79;
  if (*(void *)a2 == 1) {
    int64_t v64 = 0;
  }
  int64_t v65 = v64 + *(void *)a2;
  int64_t v66 = (char *)&v95 - (char *)&v78;
  if (v6 == 1) {
    int64_t v66 = 0;
  }
  uint64_t v67 = v66 + v6;
  uint64_t v78 = v67;
  int64_t v79 = v65;
  if ((v6 & 2) != 0) {
    __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
  }
  uint64_t v68 = (unint64_t *)((char *)&v79 + v65);
  if (v65 == 1) {
    uint64_t v68 = 0;
  }
  int64_t v69 = (char *)((char *)&v78 - (char *)v68);
  if (v67 == 1) {
    int64_t v69 = 0;
  }
  *uint64_t v68 = *v68 & 2 | (unint64_t)&v69[v67];
  int64_t v70 = a2 - v77;
  if (*(void *)a2 == 1) {
    int64_t v70 = 0;
  }
  int64_t v71 = v70 + *(void *)a2;
  if (v71 == 1) {
    unint64_t v72 = 0;
  }
  else {
    unint64_t v72 = &v77[v71];
  }
  *((void *)v72 + 2) = 1;
  int64_t v73 = a2 - v76;
  if (*(void *)a2 == 1) {
    int64_t v73 = 0;
  }
  int64_t v74 = v73 + *(void *)a2;
  if (v74 == 1) {
    int64_t v75 = 0;
  }
  else {
    int64_t v75 = &v76[v74];
  }
  *((void *)v75 + 1) = 1;
  return result;
}

char *boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node(char *result, char *a2)
{
  uint64_t v2 = *(void *)a2;
  int64_t v3 = a2 - (char *)&v61;
  if (*(void *)a2 == 1) {
    int64_t v3 = 0;
  }
  uint64_t v61 = v3 + v2;
  uint64_t v4 = (char *)&v61 + v3 + v2;
  if (v3 + v2 == 1) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *((void *)v4 + 1);
  uint64_t v6 = v4 + 8 - (char *)&v68;
  if (v5 == 1) {
    uint64_t v6 = 0;
  }
  int64_t v7 = (char *)(v6 + v5);
  uint64_t v8 = *((void *)v4 + 2);
  uint64_t v9 = v4 + 16 - (char *)&v67;
  if (v8 == 1) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v9 + v8;
  uint64_t v67 = v10;
  uint64_t v68 = v7;
  unint64_t v11 = *(void *)v4 & 0xFFFFFFFFFFFFFFFDLL;
  int64_t v12 = v4 - (char *)&v66;
  if (v11 == 1) {
    int64_t v12 = 0;
  }
  unint64_t v66 = v12 + v11;
  if (v12 + v11 == 1) {
    goto LABEL_12;
  }
  if (v7 == (char *)1 || v10 == 1) {
    goto LABEL_24;
  }
  unint64_t v45 = (char *)&v68 + (void)v7;
  int64_t v46 = (char *)&v67 + v10;
  if (v45 == (char *)&v67 + v10) {
    goto LABEL_12;
  }
  unint64_t v47 = *(void *)v45 & 0xFFFFFFFFFFFFFFFDLL;
  int64_t v48 = v45 - &v64;
  if (v47 == 1) {
    int64_t v48 = 0;
  }
  unint64_t v49 = v48 + v47;
  int64_t v50 = &v64 - v65;
  if (v49 == 1) {
    int64_t v50 = 0;
  }
  unint64_t v51 = v50 + v49;
  uint64_t v52 = v51 == 1 ? 0 : &v65[v51];
  if (v52 != v4) {
    goto LABEL_12;
  }
  unint64_t v53 = *(void *)v46 & 0xFFFFFFFFFFFFFFFDLL;
  int64_t v54 = v46 - &v62;
  if (v53 == 1) {
    int64_t v54 = 0;
  }
  unint64_t v55 = v54 + v53;
  int64_t v56 = &v62 - v63;
  if (v55 == 1) {
    int64_t v56 = 0;
  }
  unint64_t v57 = v56 + v55;
  int64_t v58 = v57 == 1 ? 0 : &v63[v57];
  if (v58 == v4)
  {
LABEL_24:
    if (v2 == 1) {
      int64_t v17 = 0;
    }
    else {
      int64_t v17 = &a2[v2];
    }
    uint64_t v20 = *((void *)v17 + 1);
    uint64_t v19 = v17 + 8;
    uint64_t v18 = v20;
    int64_t v21 = v19 - (char *)&v68;
    if (v20 == 1) {
      int64_t v21 = 0;
    }
    if (v21 + v18 == 1)
    {
      int64_t v22 = a2 - (char *)&v68;
      if (v2 == 1) {
        int64_t v22 = 0;
      }
      uint64_t v23 = (char *)(v22 + v2);
      uint64_t v68 = v23;
      if (v23 == (char *)1) {
        int64_t v24 = 0;
      }
      else {
        int64_t v24 = (char *)&v68 + (void)v23;
      }
      unint64_t v25 = *(void *)v24 & 0xFFFFFFFFFFFFFFFDLL;
      int64_t v26 = v24 - result;
      if (v25 == 1) {
        int64_t v26 = 0;
      }
      uint64_t v27 = (char *)(v26 + v25);
      *(void *)uint64_t result = v27;
      BOOL v28 = v27 == (char *)1;
      uint64_t v29 = &result[(void)v27];
      if (v27 == (char *)1) {
        uint64_t v29 = 0;
      }
      uint64_t v30 = *((void *)v29 + 1);
      uint64_t v31 = v29 + 8 - (char *)&v67;
      if (v30 == 1) {
        uint64_t v31 = 0;
      }
      uint64_t v32 = v31 + v30;
      if (v32 == 1) {
        int64_t v33 = 0;
      }
      else {
        int64_t v33 = (char *)&v67 + v32;
      }
      if (v24 == v33)
      {
        do
        {
          if (v28) {
            int64_t v34 = 0;
          }
          else {
            int64_t v34 = result - (char *)&v68;
          }
          int64_t v35 = &v27[v34];
          uint64_t v68 = &v27[v34];
          unint64_t v36 = *(void *)v29 & 0xFFFFFFFFFFFFFFFDLL;
          int64_t v37 = v29 - (char *)&v67;
          if (v36 == 1) {
            int64_t v37 = 0;
          }
          unint64_t v38 = v37 + v36;
          if (v38 == 1) {
            int64_t v39 = 0;
          }
          else {
            int64_t v39 = (char *)((char *)&v67 - result);
          }
          uint64_t v27 = &v39[v38];
          *(void *)uint64_t result = v27;
          uint64_t v29 = &result[(void)v27];
          if (v27 == (char *)1) {
            uint64_t v29 = 0;
          }
          uint64_t v40 = *((void *)v29 + 1);
          BOOL v28 = v27 == (char *)1;
          uint64_t v41 = v29 + 8 - (char *)&v67;
          if (v40 == 1) {
            uint64_t v41 = 0;
          }
          uint64_t v42 = v41 + v40;
          if (v35 == (char *)1) {
            int64_t v43 = 0;
          }
          else {
            int64_t v43 = (char *)&v68 + (void)v35;
          }
          if (v42 == 1) {
            int64_t v44 = 0;
          }
          else {
            int64_t v44 = (char *)&v67 + v42;
          }
        }
        while (v43 == v44);
      }
    }
    else
    {
      int64_t v59 = v19 - (char *)&v60;
      if (v18 == 1) {
        int64_t v59 = 0;
      }
      uint64_t v60 = v59 + v18;
      return boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::maximum(result, &v60);
    }
  }
  else
  {
LABEL_12:
    if (v2 == 1) {
      int64_t v13 = 0;
    }
    else {
      int64_t v13 = &a2[v2];
    }
    uint64_t v14 = *((void *)v13 + 2);
    uint64_t v15 = v13 + 16 - result;
    if (v14 == 1) {
      uint64_t v15 = 0;
    }
    *(void *)uint64_t result = v15 + v14;
  }
  return result;
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_equal_upper_bound_check<boost::intrusive::detail::key_nodeptr_comp<std::less<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl>,boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,boost::move_detail::identity<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl>>>(char *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)result;
  int64_t v4 = result - (char *)&v29;
  if (*(void *)result == 1) {
    int64_t v4 = 0;
  }
  unint64_t v5 = v4 + v3;
  unint64_t v29 = v5;
  uint64_t v6 = (char *)&v29 + v5;
  if (v5 == 1) {
    int64_t v7 = 0;
  }
  else {
    int64_t v7 = (char *)&v29 + v5;
  }
  unint64_t v8 = *(void *)v7 & 0xFFFFFFFFFFFFFFFDLL;
  int64_t v9 = v7 - (char *)&v28;
  if (v8 == 1) {
    int64_t v9 = 0;
  }
  unint64_t v10 = v9 + v8;
  unint64_t v28 = v9 + v8;
  if (v9 + v8 != 1)
  {
    int64_t v11 = (char *)&v28 - (char *)&v29;
    if (*a2 == 1) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = (char *)a2 + *a2;
    }
    while (1)
    {
      unint64_t v5 = v11 + v10;
      unint64_t v29 = v11 + v10;
      uint64_t v31 = v12 - (char *)&v31 - 16;
      if (v12 - (char *)&v31 == 17) {
        break;
      }
      uint64_t v6 = (char *)&v28 + v10;
      uint64_t v30 = (char *)&v28 + v10 - (char *)&v30 - 16;
      if ((char *)&v28 + v10 - (char *)&v30 == 17) {
        break;
      }
      unint64_t v13 = *((void *)v12 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      unint64_t v14 = *((void *)v6 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      BOOL v15 = v13 >= v14;
      if (v13 >= v14) {
        uint64_t v16 = 16;
      }
      else {
        uint64_t v16 = 8;
      }
      if (v15) {
        int64_t v17 = v6 + 16;
      }
      else {
        int64_t v17 = v6 + 8;
      }
      uint64_t v18 = *(void *)&v6[v16];
      int64_t v19 = v17 - &v27;
      if (v18 == 1) {
        int64_t v19 = 0;
      }
      uint64_t v20 = v19 + v18;
      if (v20 == 1) {
        int64_t v21 = 0;
      }
      else {
        int64_t v21 = &v27 - (char *)&v28;
      }
      unint64_t v10 = v21 + v20;
      unint64_t v28 = v10;
      if (v10 == 1) {
        goto LABEL_26;
      }
    }
LABEL_43:
    __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
  }
LABEL_26:
  if (v5 == 1) {
    int64_t v22 = 0;
  }
  else {
    int64_t v22 = v6;
  }
  if (v3 == 1) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = &result[v3];
  }
  if (v22 == v23)
  {
    BOOL v25 = 1;
  }
  else
  {
    if (*a2 == 1) {
      int64_t v24 = 0;
    }
    else {
      int64_t v24 = (char *)a2 + *a2;
    }
    uint64_t v31 = v24 - (char *)&v31 - 16;
    if (v24 - (char *)&v31 == 17) {
      goto LABEL_43;
    }
    uint64_t v30 = v22 - (char *)&v30 - 16;
    if (v22 - (char *)&v30 == 17) {
      goto LABEL_43;
    }
    BOOL v25 = (*((void *)v24 - 1) & 0x3FFFFFFFFFFFFFFFuLL) < (*((void *)v22 - 1) & 0x3FFFFFFFFFFFFFFFuLL);
  }
  *(unsigned char *)a3 = v25;
  int64_t v26 = (char *)&v29 - a3 - 8;
  if (v5 == 1) {
    int64_t v26 = 0;
  }
  *(void *)(a3 + 8) = &v26[v5];
  return result;
}

char *boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::maximum(char *result, void *a2)
{
  uint64_t v2 = (unsigned char *)*a2;
  if (*a2 == 1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = (char *)a2 + *a2;
  }
  uint64_t v4 = *((void *)v3 + 2);
  uint64_t v5 = v3 + 16 - v15;
  if (v4 == 1) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 + v4;
  if (v5 + v4 != 1)
  {
    int64_t v7 = (unsigned char *)(v15 - (unsigned char *)a2);
    do
    {
      uint64_t v2 = &v7[v6];
      *a2 = &v7[v6];
      unint64_t v8 = &v15[v6];
      if (v2 == (unsigned char *)1) {
        unint64_t v8 = 0;
      }
      uint64_t v9 = *((void *)v8 + 2);
      uint64_t v10 = v8 + 16 - (unsigned char *)&v14;
      if (v9 == 1) {
        uint64_t v10 = 0;
      }
      uint64_t v11 = v10 + v9;
      if (v11 == 1) {
        int64_t v12 = 0;
      }
      else {
        int64_t v12 = (char *)&v14 - v15;
      }
      uint64_t v6 = v12 + v11;
    }
    while (v6 != 1);
  }
  int64_t v13 = (char *)a2 - result;
  if (v2 == (unsigned char *)1) {
    int64_t v13 = 0;
  }
  *(void *)uint64_t result = &v2[v13];
  return result;
}

char *boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::minimum(char *result, void *a2)
{
  uint64_t v2 = (unsigned char *)*a2;
  if (*a2 == 1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = (char *)a2 + *a2;
  }
  uint64_t v4 = *((void *)v3 + 1);
  uint64_t v5 = v3 - (char *)&v14;
  if (v4 == 1) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 + v4;
  if (v5 + v4 != 1)
  {
    int64_t v7 = (unsigned char *)(v15 - (unsigned char *)a2);
    do
    {
      uint64_t v2 = &v7[v6];
      *a2 = &v7[v6];
      unint64_t v8 = &v15[v6];
      if (v2 == (unsigned char *)1) {
        unint64_t v8 = 0;
      }
      uint64_t v9 = *((void *)v8 + 1);
      uint64_t v10 = v8 + 8 - (unsigned char *)&v14;
      if (v9 == 1) {
        uint64_t v10 = 0;
      }
      uint64_t v11 = v10 + v9;
      if (v11 == 1) {
        int64_t v12 = 0;
      }
      else {
        int64_t v12 = (char *)&v14 - v15;
      }
      uint64_t v6 = v12 + v11;
    }
    while (v6 != 1);
  }
  int64_t v13 = (char *)a2 - result;
  if (v2 == (unsigned char *)1) {
    int64_t v13 = 0;
  }
  *(void *)uint64_t result = &v2[v13];
  return result;
}

char *boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::erase(char *a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  int64x2_t v279 = vdupq_n_s64(1uLL);
  v280[0] = 1;
  int64_t v6 = a2 - (char *)&v278;
  if (*(void *)a2 == 1) {
    int64_t v6 = 0;
  }
  int64_t v7 = v6 + *(void *)a2;
  int64_t v8 = a3 - (char *)&v277;
  if (*(void *)a3 == 1) {
    int64_t v8 = 0;
  }
  int64_t v9 = v8 + *(void *)a3;
  int64_t v277 = v9;
  int64_t v278 = v7;
  int64_t v10 = (char *)&v277 - (char *)v305;
  if (v9 == 1) {
    int64_t v10 = 0;
  }
  uint64_t v11 = v10 + v9;
  uint64_t v304 = 1;
  v305[0] = v11;
  if (v9 == 1) {
    int64_t v12 = 0;
  }
  else {
    int64_t v12 = (char *)&v277 + v9;
  }
  uint64_t v13 = *((void *)v12 + 1);
  uint64_t v14 = v12 + 8 - (char *)&v303;
  if (v13 == 1) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v14 + v13;
  uint64_t v16 = *((void *)v12 + 2);
  uint64_t v17 = v12 + 16 - (char *)&v302;
  if (v16 == 1) {
    uint64_t v17 = 0;
  }
  uint64_t v18 = v17 + v16;
  uint64_t v302 = v18;
  int64_t v303 = v15;
  if (v15 == 1)
  {
    uint64_t v19 = -16;
LABEL_26:
    if (v18 == 1) {
      uint64_t v19 = 0;
    }
    uint64_t v20 = v19 + v18;
    uint64_t v304 = v19 + v18;
    goto LABEL_29;
  }
  if (v18 != 1)
  {
    uint64_t v300 = (char *)&v302 - (char *)&v300 + v18;
    boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::minimum((char *)&v301, &v300);
    uint64_t v23 = -32;
    if (v301 == 1) {
      uint64_t v23 = 0;
    }
    uint64_t v11 = v23 + v301;
    v305[0] = v11;
    int64_t v24 = (char *)v305 + v11;
    if (v11 == 1) {
      int64_t v24 = 0;
    }
    uint64_t v25 = *((void *)v24 + 2);
    uint64_t v26 = v24 + 16 - (char *)&v301;
    if (v25 == 1) {
      uint64_t v26 = 0;
    }
    uint64_t v18 = v26 + v25;
    uint64_t v19 = -24;
    goto LABEL_26;
  }
  uint64_t v20 = v15 - 8;
  uint64_t v304 = v15 - 8;
  if (v15 == 9)
  {
    int64_t v21 = "x";
    int v22 = 1521;
    goto LABEL_450;
  }
LABEL_29:
  uint64_t v301 = 1;
  unint64_t v27 = *(void *)v12 & 0xFFFFFFFFFFFFFFFDLL;
  int64_t v28 = v12 - (char *)&v299;
  if (v27 == 1) {
    int64_t v28 = 0;
  }
  unint64_t v29 = v28 + v27;
  unint64_t v299 = v29;
  uint64_t v30 = (char *)&v299 + v29;
  if (v29 == 1) {
    uint64_t v30 = 0;
  }
  uint64_t v31 = *((void *)v30 + 1);
  uint64_t v32 = v30 + 8 - (char *)&v298;
  if (v31 == 1) {
    uint64_t v32 = 0;
  }
  uint64_t v33 = v32 + v31;
  if (v33 == 1) {
    int64_t v34 = 0;
  }
  else {
    int64_t v34 = (char *)&v298 + v33;
  }
  int64_t v35 = (char *)v305 + v11;
  if (v11 == 1) {
    int64_t v35 = 0;
  }
  if (v35 != v12)
  {
    uint64_t v36 = 40;
    if (v15 == 1) {
      uint64_t v36 = 0;
    }
    uint64_t v37 = v36 + v15;
    int64_t v38 = (char *)v305 - (char *)&v297;
    if (v11 == 1) {
      int64_t v38 = 0;
    }
    uint64_t v39 = v38 + v11;
    uint64_t v297 = v39;
    uint64_t v298 = v36 + v15;
    if ((v11 & 2) != 0) {
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    }
    uint64_t v40 = (unint64_t *)((char *)&v298 + v37);
    if (v37 == 1) {
      uint64_t v40 = 0;
    }
    uint64_t v41 = (char *)((char *)&v297 - (char *)v40);
    if (v39 == 1) {
      uint64_t v41 = 0;
    }
    *uint64_t v40 = *v40 & 2 | (unint64_t)&v41[v39];
    uint64_t v42 = v305[0];
    uint64_t v43 = 72;
    int64_t v44 = (char *)&v303 - (char *)&v295;
    if (v303 == 1) {
      int64_t v44 = 0;
    }
    if (v305[0] == 1) {
      uint64_t v43 = 0;
    }
    uint64_t v45 = v43 + v305[0];
    uint64_t v46 = v44 + v303;
    uint64_t v295 = v46;
    uint64_t v296 = v45;
    unint64_t v47 = (char *)&v296 + v45;
    int64_t v48 = (char *)v305 + v305[0];
    if (v305[0] == 1) {
      int64_t v48 = 0;
    }
    if (v45 == 1) {
      unint64_t v47 = 0;
    }
    unint64_t v49 = (char *)((char *)&v295 - (v47 + 8));
    if (v46 == 1) {
      unint64_t v49 = 0;
    }
    *((void *)v47 + 1) = &v49[v46];
    uint64_t v50 = v302;
    unint64_t v51 = (char *)&v302 + v302;
    if (v302 == 1) {
      unint64_t v51 = 0;
    }
    if (v48 == v51)
    {
      uint64_t v77 = 32;
      if (v42 == 1) {
        uint64_t v77 = 0;
      }
      uint64_t v301 = v77 + v42;
      goto LABEL_123;
    }
    uint64_t v52 = 88;
    if (v42 == 1) {
      uint64_t v52 = 0;
    }
    unint64_t v53 = v52 + v42;
    unint64_t v294 = v53;
    int64_t v54 = (char *)&v294 + v53;
    if (v42 == 1) {
      int64_t v55 = 0;
    }
    else {
      int64_t v55 = (char *)v305 - (char *)&v291;
    }
    if (v53 == 1) {
      int64_t v54 = 0;
    }
    int64_t v56 = (char *)((char *)&v293 - (v54 + 16));
    uint64_t v57 = 80;
    if (v302 == 1) {
      int64_t v58 = 0;
    }
    else {
      int64_t v58 = (char *)&v302 - (char *)&v293;
    }
    int64_t v59 = v58 + v302;
    if (v302 == 1) {
      uint64_t v57 = 0;
    }
    if (v59 == 1) {
      int64_t v56 = 0;
    }
    *((void *)v54 + 2) = &v56[v59];
    uint64_t v60 = v57 + v50;
    int64_t v292 = v60;
    uint64_t v293 = v59;
    uint64_t v61 = v55 + v42;
    int64_t v291 = v55 + v42;
    if ((v42 & 2) != 0) {
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    }
    char v62 = (unint64_t *)((char *)&v292 + v60);
    if (v60 == 1) {
      char v62 = 0;
    }
    int64_t v63 = (char *)((char *)&v291 - (char *)v62);
    if (v61 == 1) {
      int64_t v63 = 0;
    }
    unint64_t *v62 = *v62 & 2 | (unint64_t)&v63[v61];
    uint64_t v42 = v305[0];
    if (v305[0] == 1) {
      char v64 = 0;
    }
    else {
      char v64 = (char *)v305 + v305[0];
    }
    unint64_t v65 = *(void *)v64 & 0xFFFFFFFFFFFFFFFDLL;
    int64_t v66 = v64 - (char *)&v290;
    if (v65 == 1) {
      int64_t v66 = 0;
    }
    unint64_t v67 = v66 + v65;
    int64_t v68 = (char *)&v290 - (char *)&v301;
    if (v67 == 1) {
      int64_t v68 = 0;
    }
    uint64_t v69 = v68 + v67;
    uint64_t v301 = v69;
    int64_t v70 = (char *)&v301 + v69;
    if (v69 == 1) {
      int64_t v70 = 0;
    }
    uint64_t v71 = *((void *)v70 + 1);
    uint64_t v72 = v70 + 8 - (char *)&v290;
    if (v71 == 1) {
      uint64_t v72 = 0;
    }
    uint64_t v290 = v72 + v71;
    int64_t v73 = (char *)&v290 + v72 + v71;
    if (v72 + v71 == 1) {
      int64_t v73 = 0;
    }
    if (v73 == v64)
    {
      if (v304 == 1)
      {
        uint64_t v74 = 1;
      }
      else
      {
        int64_t v78 = (char *)&v301 - (char *)&v289;
        if (v69 == 1) {
          int64_t v78 = 0;
        }
        int64_t v79 = v78 + v69;
        int64_t v289 = v79;
        uint64_t v290 = v304 + (char *)&v304 - (char *)&v290;
        if ((v67 & 2) != 0) {
          __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
        }
        int64_t v80 = (void *)((char *)&v305[-1] + v304);
        if (v304 + (char *)&v304 - (char *)&v290 == 1) {
          int64_t v80 = 0;
        }
        uint64_t v81 = (char *)((char *)&v289 - (char *)v80);
        if (v79 == 1) {
          uint64_t v81 = 0;
        }
        *int64_t v80 = *v80 & 2 | (unint64_t)&v81[v79];
        uint64_t v69 = v301;
        uint64_t v74 = v304;
        uint64_t v42 = v305[0];
      }
      int64_t v82 = (char *)&v301 - (char *)&v288;
      if (v69 == 1) {
        int64_t v82 = 0;
      }
      int64_t v83 = v82 + v69;
      int64_t v84 = (char *)&v304 - (char *)&v287;
      if (v74 == 1) {
        int64_t v84 = 0;
      }
      int64_t v85 = v84 + v74;
      int64_t v287 = v85;
      int64_t v288 = v83;
      if (v83 == 1) {
        uint64_t v86 = 0;
      }
      else {
        uint64_t v86 = (char *)&v288 + v83;
      }
      int64_t v87 = (char *)((char *)&v287 - (v86 + 8));
      if (v85 == 1) {
        int64_t v87 = 0;
      }
      *((void *)v86 + 1) = &v87[v85];
LABEL_123:
      int64_t v88 = (char *)v305 - (char *)&v286;
      if (v42 == 1) {
        int64_t v88 = 0;
      }
      uint64_t v89 = v88 + v42;
      int64_t v90 = (char *)&v299 - (char *)&v285;
      if (v299 == 1) {
        int64_t v90 = 0;
      }
      unint64_t v91 = v90 + v299;
      unint64_t v285 = v91;
      unint64_t v286 = v88 + v42;
      if ((v299 & 2) != 0) {
        __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
      }
      BOOL v92 = v34 == v12;
      int64_t v93 = (unint64_t *)((char *)&v286 + v89);
      if (v89 == 1) {
        int64_t v93 = 0;
      }
      uint64_t v94 = (char *)((char *)&v285 - (char *)v93);
      if (v91 == 1) {
        uint64_t v94 = 0;
      }
      unint64_t *v93 = *v93 & 2 | (unint64_t)&v94[v91];
      int64_t v95 = (char *)&v278 - (char *)&v284;
      if (v278 == 1) {
        int64_t v95 = 0;
      }
      uint64_t v284 = v95 + v278;
      int64_t v96 = (char *)v305 - (char *)&v283;
      if (v305[0] == 1) {
        int64_t v96 = 0;
      }
      int64_t v283 = v96 + v305[0];
      int64_t v97 = (char *)&v299 - (char *)&v282;
      if (v299 == 1) {
        int64_t v97 = 0;
      }
      int64_t v282 = v97 + v299;
      uint64_t result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::set_child((char *)&v284, (char *)&v283, (char *)&v282, v92);
      goto LABEL_184;
    }
    int64_t v21 = "NodeTraits::get_left(x_parent) == y";
    int v22 = 1545;
LABEL_450:
    __assert_rtn("erase", "bstree_algorithms.hpp", v22, v21);
  }
  uint64_t v75 = -16;
  if (v29 == 1) {
    uint64_t v75 = 0;
  }
  uint64_t v301 = v75 + v29;
  if (v20 == 1)
  {
    uint64_t v76 = 1;
  }
  else
  {
    uint64_t v99 = 16;
    if (v29 == 1) {
      uint64_t v99 = 0;
    }
    uint64_t v100 = v99 + v29;
    uint64_t v297 = v100;
    uint64_t v298 = v20 + 48;
    if ((v29 & 2) != 0) {
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    }
    uint64_t v101 = (void *)((char *)&v305[-1] + v20);
    if (v20 == -47) {
      uint64_t v101 = 0;
    }
    CGFloat v102 = (char *)((char *)&v297 - (char *)v101);
    if (v100 == 1) {
      CGFloat v102 = 0;
    }
    *uint64_t v101 = *v101 & 2 | (unint64_t)&v102[v100];
    uint64_t v76 = v304;
    unint64_t v29 = v299;
    int64_t v7 = v278;
  }
  BOOL v103 = v34 == v12;
  int64_t v104 = (char *)&v278 - (char *)&v296;
  if (v7 == 1) {
    int64_t v104 = 0;
  }
  uint64_t v296 = v104 + v7;
  uint64_t v105 = 72;
  if (v76 == 1) {
    uint64_t v105 = 0;
  }
  uint64_t v295 = v105 + v76;
  uint64_t v106 = 40;
  if (v29 == 1) {
    uint64_t v106 = 0;
  }
  unint64_t v294 = v106 + v29;
  uint64_t result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::set_child((char *)&v296, (char *)&v295, (char *)&v294, v103);
  uint64_t v107 = v278;
  if (v278 == 1) {
    uint64_t v108 = 0;
  }
  else {
    uint64_t v108 = (char *)&v278 + v278;
  }
  uint64_t v109 = *((void *)v108 + 1);
  uint64_t v110 = v108 + 8 - (char *)&v293;
  if (v109 == 1) {
    uint64_t v110 = 0;
  }
  uint64_t v111 = v110 + v109;
  if (v111 == 1) {
    long long v112 = 0;
  }
  else {
    long long v112 = (char *)&v293 + v111;
  }
  if (v277 == 1) {
    int64x2_t v113 = 0;
  }
  else {
    int64x2_t v113 = (char *)&v277 + v277;
  }
  if (v112 == v113)
  {
    if (v303 != 1)
    {
      int64_t v21 = "!z_left";
      int v22 = 1567;
      goto LABEL_450;
    }
    int64_t v114 = (char *)&v278 - (char *)&v293;
    if (v278 == 1) {
      int64_t v114 = 0;
    }
    uint64_t v115 = v114 + v278;
    uint64_t v293 = v114 + v278;
    if (v302 == 1)
    {
      uint64_t v116 = 56;
      if (v299 == 1) {
        uint64_t v116 = 0;
      }
      uint64_t v117 = v116 + v299;
      int64_t v292 = v116 + v299;
    }
    else
    {
      int64_t v291 = (char *)&v302 - (char *)&v291 + v302;
      uint64_t result = boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::minimum((char *)&v292, &v291);
      uint64_t v117 = v292;
    }
    uint64_t v118 = (char *)&v293 + v115;
    if (v115 == 1) {
      uint64_t v118 = 0;
    }
    uint64_t v119 = (char *)((char *)&v292 - (v118 + 8));
    if (v117 == 1) {
      uint64_t v119 = 0;
    }
    *((void *)v118 + 1) = &v119[v117];
  }
  uint64_t v120 = *((void *)v108 + 2);
  uint64_t v121 = v108 + 16 - (char *)&v290;
  if (v120 == 1) {
    uint64_t v121 = 0;
  }
  uint64_t v122 = v121 + v120;
  if (v122 == 1) {
    uint64_t v123 = 0;
  }
  else {
    uint64_t v123 = (char *)&v290 + v122;
  }
  if (v123 == v113)
  {
    if (v302 != 1)
    {
      int64_t v21 = "!z_right";
      int v22 = 1574;
      goto LABEL_450;
    }
    int64_t v205 = (char *)&v278 - (char *)&v290;
    if (v107 == 1) {
      int64_t v205 = 0;
    }
    uint64_t v206 = v205 + v107;
    uint64_t v290 = v206;
    if (v303 == 1)
    {
      int64_t v207 = (char *)&v299 - (char *)&v289;
      if (v299 == 1) {
        int64_t v207 = 0;
      }
      uint64_t v208 = v207 + v299;
      int64_t v289 = v207 + v299;
    }
    else
    {
      int64_t v288 = (char *)&v303 - (char *)&v288 + v303;
      uint64_t result = boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::maximum((char *)&v289, &v288);
      uint64_t v208 = v289;
    }
    v209 = (char *)&v290 + v206;
    if (v206 == 1) {
      v209 = 0;
    }
    v210 = (char *)((char *)&v289 - (v209 + 16));
    if (v208 == 1) {
      v210 = 0;
    }
    *((void *)v209 + 2) = &v210[v208];
  }
LABEL_184:
  int64_t v124 = (char *)&v304 - (char *)&v279;
  int64_t v125 = (char *)v305 - (char *)v280;
  if (v305[0] == 1) {
    int64_t v125 = 0;
  }
  int64_t v126 = v125 + v305[0];
  if (v304 == 1) {
    int64_t v124 = 0;
  }
  v279.i64[0] = v124 + v304;
  v280[0] = v125 + v305[0];
  if (v304 != 1)
  {
    unint64_t v127 = *(void *)((char *)&v305[-1] + v304) & 0xFFFFFFFFFFFFFFFDLL;
    int64_t v128 = (char *)&v305[-1] + v304 - (char *)&v281;
    if (v127 == 1) {
      int64_t v128 = 0;
    }
    unint64_t v129 = v128 + v127;
    unint64_t v281 = v129;
    if (v129 == 1) {
      uint64_t v130 = 0;
    }
    else {
      uint64_t v130 = (char *)&v281 + v129;
    }
    uint64_t v131 = (char *)&v301 + v301;
    if (v301 == 1) {
      uint64_t v131 = 0;
    }
    if (v130 != v131)
    {
      int64_t v21 = "!x || NodeTraits::get_parent(x) == x_parent";
      int v22 = 1587;
      goto LABEL_450;
    }
  }
  int64_t v132 = (char *)&v301 - (char *)&v279.u64[1];
  if (v301 == 1) {
    int64_t v132 = 0;
  }
  v279.i64[1] = v132 + v301;
  int64_t v133 = a2 - (char *)&v276;
  if (*(void *)a2 == 1) {
    int64_t v133 = 0;
  }
  int64_t v276 = v133 + *(void *)a2;
  int64_t v134 = v3 - (char *)&v275;
  if (*(void *)v3 == 1) {
    int64_t v134 = 0;
  }
  int64_t v135 = v134 + *(void *)v3;
  int64_t v275 = v135;
  float64x2_t v136 = (void *)((char *)v280 + v126);
  if (v126 == 1) {
    float64x2_t v136 = 0;
  }
  if (v135 == 1) {
    double v137 = 0;
  }
  else {
    double v137 = (unint64_t *)((char *)&v275 + v135);
  }
  unint64_t v138 = *v136;
  if (v136 != v137) {
    *float64x2_t v136 = v138 & 0xFFFFFFFFFFFFFFFDLL | (2 * ((*v137 >> 1) & 1));
  }
  if ((v138 & 2) == 0) {
    goto LABEL_434;
  }
  v267 = v3;
  int64_t v139 = (char *)&v276 - (char *)&v284;
  if (v276 == 1) {
    int64_t v139 = 0;
  }
  int64_t v140 = v139 + v276;
  int64_t v141 = (char *)&v279 - (char *)&v283;
  if (v279.i64[0] == 1) {
    int64_t v141 = 0;
  }
  int64_t v142 = v141 + v279.i64[0];
  int64_t v283 = v141 + v279.i64[0];
  uint64_t v284 = v140;
  int64_t v143 = (char *)&v279.u64[1] - (char *)&v282;
  if (v279.i64[1] == 1) {
    int64_t v143 = 0;
  }
  int64_t v144 = v143 + v279.i64[1];
  int64_t v282 = v144;
  v145 = (char *)&v282 + v144;
  if (v144 == 1) {
    v145 = 0;
  }
  if (v140 == 1) {
    v146 = 0;
  }
  else {
    v146 = (char *)&v284 + v140;
  }
  v268 = a1;
  if (v145 == v146) {
    goto LABEL_431;
  }
  int64_t v274 = (char *)&v282 - (char *)&v288;
  int64_t v273 = (char *)&v304 - (char *)&v287;
  int64_t v272 = (char *)&v284 - (char *)&v285;
  int64_t v271 = (char *)&v282 - (char *)&v303;
  uint64_t v270 = 16;
  int64_t v269 = (char *)&v284 - (char *)&v300;
  while (1)
  {
    if (v142 == 1)
    {
      v147 = 0;
    }
    else
    {
      v147 = (char *)&v283 + v142;
      if ((*((unsigned char *)&v283 + v142) & 2) == 0) {
        goto LABEL_432;
      }
    }
    uint64_t v148 = *((void *)v145 + 1);
    uint64_t v149 = v145 + 8 - (char *)v305;
    if (v148 == 1) {
      uint64_t v149 = 0;
    }
    uint64_t v150 = v149 + v148;
    v305[0] = v150;
    v151 = (char *)v305 + v150;
    if (v150 == 1) {
      v151 = 0;
    }
    if (v147 == v151)
    {
      uint64_t v175 = *((void *)v145 + 2);
      uint64_t v176 = v145 + 16 - (char *)&v304;
      if (v175 == 1) {
        uint64_t v176 = 0;
      }
      uint64_t v177 = v176 + v175;
      uint64_t v304 = v177;
      if (v177 == 1)
      {
        int v266 = 475;
        goto LABEL_440;
      }
      v154 = (char *)&v305[-1] + v177;
      if ((*(void *)v154 & 2) == 0)
      {
        *(void *)v154 |= 2uLL;
        if (v282 == 1) {
          v178 = 0;
        }
        else {
          v178 = (int64_t *)((char *)&v282 + v282);
        }
        *v178 &= ~2uLL;
        uint64_t v179 = v270;
        int64_t v180 = v271;
        if (v304 == 1) {
          uint64_t v179 = 0;
        }
        if (v282 == 1) {
          int64_t v180 = 0;
        }
        uint64_t v302 = v179 + v304;
        int64_t v303 = v180 + v282;
        v181 = (char *)&v282 + v282;
        if (v282 == 1) {
          v181 = 0;
        }
        unint64_t v182 = *(void *)v181 & 0xFFFFFFFFFFFFFFFDLL;
        int64_t v183 = v181 - (char *)&v301;
        if (v182 == 1) {
          int64_t v183 = 0;
        }
        uint64_t v301 = v183 + v182;
        int64_t v184 = v269;
        if (v284 == 1) {
          int64_t v184 = 0;
        }
        uint64_t v300 = v184 + v284;
        uint64_t result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left((char *)&v303, (char *)&v302, (char *)&v301, (char *)&v300);
        int64_t v144 = v282;
        v185 = (char *)&v282 + v282;
        if (v282 == 1) {
          v185 = 0;
        }
        uint64_t v186 = *((void *)v185 + 2);
        uint64_t v187 = v185 + 16 - (char *)&v299;
        if (v186 == 1) {
          uint64_t v187 = 0;
        }
        uint64_t v188 = v187 + v186;
        if (v188 == 1) {
          uint64_t v189 = 0;
        }
        else {
          uint64_t v189 = -40;
        }
        uint64_t v190 = v189 + v188;
        uint64_t v304 = v190;
        if (v190 == 1)
        {
          int v266 = 481;
          goto LABEL_440;
        }
        v154 = (char *)&v305[-1] + v190;
      }
      uint64_t v191 = *((void *)v154 + 1);
      uint64_t v192 = v154 + 8 - (char *)&v299;
      if (v191 == 1) {
        uint64_t v192 = 0;
      }
      unint64_t v193 = v192 + v191;
      uint64_t v194 = *((void *)v154 + 2);
      uint64_t v195 = v154 + 16 - (char *)&v298;
      if (v194 == 1) {
        uint64_t v195 = 0;
      }
      uint64_t v196 = v195 + v194;
      uint64_t v298 = v196;
      unint64_t v299 = v193;
      if (v193 == 1 || (uint64_t v197 = *(unint64_t *)((char *)&v299 + v193), (v197 & 2) != 0))
      {
        if (v196 != 1 && (*((unsigned char *)&v298 + v196) & 2) == 0) {
          goto LABEL_384;
        }
        goto LABEL_304;
      }
      if (v196 == 1 || (*((unsigned char *)&v298 + v196) & 2) != 0)
      {
        *(unint64_t *)((char *)&v299 + v193) = v197 | 2;
        if (v304 == 1) {
          v239 = 0;
        }
        else {
          v239 = (void *)((char *)&v305[-1] + v304);
        }
        *v239 &= ~2uLL;
        uint64_t v240 = 56;
        int64_t v241 = (char *)&v299 - (char *)&v296;
        if (v299 == 1) {
          int64_t v241 = 0;
        }
        if (v304 == 1) {
          uint64_t v240 = 0;
        }
        uint64_t v296 = v241 + v299;
        uint64_t v297 = v240 + v304;
        v242 = (char *)&v305[-1] + v304;
        if (v304 == 1) {
          v242 = 0;
        }
        unint64_t v243 = *(void *)v242 & 0xFFFFFFFFFFFFFFFDLL;
        int64_t v244 = v242 - (char *)&v295;
        if (v243 == 1) {
          int64_t v244 = 0;
        }
        uint64_t v295 = v244 + v243;
        int64_t v245 = (char *)&v284 - (char *)&v294;
        if (v284 == 1) {
          int64_t v245 = 0;
        }
        unint64_t v294 = v245 + v284;
        boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right((char *)&v297, (char *)&v296, (char *)&v295, (char *)&v294);
        int64_t v144 = v282;
        v238 = (char *)&v282 + v282;
        if (v282 == 1) {
          v246 = 0;
        }
        else {
          v246 = (char *)&v282 + v282;
        }
        uint64_t v247 = *((void *)v246 + 2);
        uint64_t v248 = v246 + 16 - (char *)&v293;
        if (v247 == 1) {
          uint64_t v248 = 0;
        }
        uint64_t v249 = v248 + v247;
        uint64_t v250 = -88;
        if (v249 == 1) {
          uint64_t v250 = 0;
        }
        uint64_t v251 = v250 + v249;
        uint64_t v304 = v251;
        if (v251 == 1)
        {
          int v266 = 497;
LABEL_440:
          __assert_rtn("rebalance_after_erasure_restore_invariants", "rbtree_algorithms.hpp", v266, "w");
        }
        v154 = (char *)&v305[-1] + v251;
      }
      else
      {
LABEL_384:
        v238 = (char *)&v282 + v144;
      }
      if (v144 == 1) {
        v252 = 0;
      }
      else {
        v252 = v238;
      }
      *(void *)v154 = *(void *)v154 & 0xFFFFFFFFFFFFFFFDLL | (2 * ((*v252 >> 1) & 1));
      if (v282 == 1) {
        v253 = 0;
      }
      else {
        v253 = (int64_t *)((char *)&v282 + v282);
      }
      *v253 |= 2uLL;
      v254 = (char *)&v305[-1] + v304;
      if (v304 == 1) {
        v254 = 0;
      }
      uint64_t v255 = *((void *)v254 + 2);
      uint64_t v256 = v254 + 16 - (char *)&v293;
      if (v255 == 1) {
        uint64_t v256 = 0;
      }
      uint64_t v257 = v256 + v255;
      uint64_t v293 = v257;
      if (v257 != 1) {
        *(uint64_t *)((char *)&v293 + v257) |= 2uLL;
      }
      int64_t v258 = (char *)&v282 - (char *)&v292;
      if (v282 == 1) {
        int64_t v258 = 0;
      }
      int64_t v292 = v258 + v282;
      v259 = (char *)&v282 + v282;
      if (v282 == 1) {
        v259 = 0;
      }
      uint64_t v260 = *((void *)v259 + 2);
      uint64_t v261 = v259 + 16 - (char *)&v291;
      if (v260 == 1) {
        uint64_t v261 = 0;
      }
      int64_t v291 = v261 + v260;
      unint64_t v262 = *(void *)v259 & 0xFFFFFFFFFFFFFFFDLL;
      int64_t v263 = v259 - (char *)&v290;
      if (v262 == 1) {
        int64_t v263 = 0;
      }
      uint64_t v290 = v263 + v262;
      int64_t v264 = (char *)&v284 - (char *)&v289;
      if (v284 == 1) {
        int64_t v264 = 0;
      }
      int64_t v289 = v264 + v284;
      uint64_t result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left((char *)&v292, (char *)&v291, (char *)&v290, (char *)&v289);
      goto LABEL_430;
    }
    if (v150 == 1) {
      uint64_t v152 = 0;
    }
    else {
      uint64_t v152 = 8;
    }
    uint64_t v153 = v152 + v150;
    uint64_t v304 = v153;
    if (v153 == 1) {
      v154 = 0;
    }
    else {
      v154 = (char *)&v305[-1] + v153;
    }
    if ((*(void *)v154 & 2) == 0)
    {
      *(void *)v154 |= 2uLL;
      if (v282 == 1) {
        v155 = 0;
      }
      else {
        v155 = (int64_t *)((char *)&v282 + v282);
      }
      *v155 &= ~2uLL;
      int64_t v156 = v273;
      int64_t v157 = v274;
      if (v304 == 1) {
        int64_t v156 = 0;
      }
      if (v282 == 1) {
        int64_t v157 = 0;
      }
      int64_t v287 = v156 + v304;
      int64_t v288 = v157 + v282;
      v158 = (char *)&v282 + v282;
      if (v282 == 1) {
        v158 = 0;
      }
      unint64_t v159 = *(void *)v158 & 0xFFFFFFFFFFFFFFFDLL;
      int64_t v160 = v158 - (char *)&v286;
      if (v159 == 1) {
        int64_t v160 = 0;
      }
      unint64_t v286 = v160 + v159;
      int64_t v161 = v272;
      if (v284 == 1) {
        int64_t v161 = 0;
      }
      unint64_t v285 = v161 + v284;
      uint64_t result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right((char *)&v288, (char *)&v287, (char *)&v286, (char *)&v285);
      int64_t v144 = v282;
      v162 = (char *)&v282 + v282;
      if (v282 == 1) {
        v162 = 0;
      }
      uint64_t v163 = *((void *)v162 + 1);
      uint64_t v164 = v162 + 8 - (char *)&v299;
      if (v163 == 1) {
        uint64_t v164 = 0;
      }
      uint64_t v165 = v164 + v163;
      if (v165 == 1) {
        uint64_t v166 = 0;
      }
      else {
        uint64_t v166 = -40;
      }
      uint64_t v167 = v166 + v165;
      uint64_t v304 = v167;
      if (v167 == 1)
      {
        int v266 = 516;
        goto LABEL_440;
      }
      v154 = (char *)&v305[-1] + v167;
    }
    uint64_t v168 = *((void *)v154 + 1);
    uint64_t v169 = v154 + 8 - (char *)&v299;
    if (v168 == 1) {
      uint64_t v169 = 0;
    }
    unint64_t v170 = v169 + v168;
    uint64_t v171 = *((void *)v154 + 2);
    uint64_t v172 = v154 + 16 - (char *)&v298;
    if (v171 == 1) {
      uint64_t v172 = 0;
    }
    uint64_t v173 = v172 + v171;
    uint64_t v298 = v173;
    unint64_t v299 = v170;
    if (v173 != 1)
    {
      uint64_t v174 = *(uint64_t *)((char *)&v298 + v173);
      if ((v174 & 2) == 0) {
        break;
      }
    }
    if (v170 != 1 && (*((unsigned char *)&v299 + v170) & 2) == 0) {
      goto LABEL_336;
    }
LABEL_304:
    *(void *)v154 &= ~2uLL;
    if (v282 == 1) {
      int64_t v198 = 0;
    }
    else {
      int64_t v198 = (char *)&v282 - (char *)&v283;
    }
    int64_t v142 = v198 + v282;
    int64_t v283 = v142;
    v199 = (char *)&v282 + v282;
    if (v282 == 1) {
      v199 = 0;
    }
    unint64_t v200 = *(void *)v199 & 0xFFFFFFFFFFFFFFFDLL;
    int64_t v201 = v199 - (char *)&v297;
    if (v200 == 1) {
      int64_t v201 = 0;
    }
    unint64_t v202 = v201 + v200;
    if (v202 == 1) {
      int64_t v203 = 0;
    }
    else {
      int64_t v203 = (char *)&v297 - (char *)&v282;
    }
    int64_t v144 = v203 + v202;
    int64_t v282 = v144;
    v145 = (char *)&v282 + v144;
    if (v144 == 1) {
      v145 = 0;
    }
    if (v284 == 1) {
      v204 = 0;
    }
    else {
      v204 = (char *)&v284 + v284;
    }
    if (v145 == v204) {
      goto LABEL_431;
    }
  }
  if (v170 != 1 && (*((unsigned char *)&v299 + v170) & 2) == 0)
  {
LABEL_336:
    v211 = (char *)&v282 + v144;
    goto LABEL_359;
  }
  *(uint64_t *)((char *)&v298 + v173) = v174 | 2;
  if (v304 == 1) {
    v212 = 0;
  }
  else {
    v212 = (void *)((char *)&v305[-1] + v304);
  }
  *v212 &= ~2uLL;
  uint64_t v213 = 56;
  int64_t v214 = (char *)&v298 - (char *)&v296;
  if (v298 == 1) {
    int64_t v214 = 0;
  }
  if (v304 == 1) {
    uint64_t v213 = 0;
  }
  uint64_t v296 = v214 + v298;
  uint64_t v297 = v213 + v304;
  v215 = (char *)&v305[-1] + v304;
  if (v304 == 1) {
    v215 = 0;
  }
  unint64_t v216 = *(void *)v215 & 0xFFFFFFFFFFFFFFFDLL;
  int64_t v217 = v215 - (char *)&v295;
  if (v216 == 1) {
    int64_t v217 = 0;
  }
  uint64_t v295 = v217 + v216;
  int64_t v218 = (char *)&v284 - (char *)&v294;
  if (v284 == 1) {
    int64_t v218 = 0;
  }
  unint64_t v294 = v218 + v284;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left((char *)&v297, (char *)&v296, (char *)&v295, (char *)&v294);
  int64_t v144 = v282;
  v211 = (char *)&v282 + v282;
  if (v282 == 1) {
    v219 = 0;
  }
  else {
    v219 = (char *)&v282 + v282;
  }
  uint64_t v220 = *((void *)v219 + 1);
  uint64_t v221 = v219 + 8 - (char *)&v293;
  if (v220 == 1) {
    uint64_t v221 = 0;
  }
  uint64_t v222 = v221 + v220;
  uint64_t v223 = -88;
  if (v222 == 1) {
    uint64_t v223 = 0;
  }
  uint64_t v224 = v223 + v222;
  uint64_t v304 = v224;
  if (v224 == 1)
  {
    int v266 = 532;
    goto LABEL_440;
  }
  v154 = (char *)&v305[-1] + v224;
LABEL_359:
  if (v144 == 1) {
    v225 = 0;
  }
  else {
    v225 = v211;
  }
  *(void *)v154 = *(void *)v154 & 0xFFFFFFFFFFFFFFFDLL | (2 * ((*v225 >> 1) & 1));
  if (v282 == 1) {
    v226 = 0;
  }
  else {
    v226 = (int64_t *)((char *)&v282 + v282);
  }
  *v226 |= 2uLL;
  v227 = (char *)&v305[-1] + v304;
  if (v304 == 1) {
    v227 = 0;
  }
  uint64_t v228 = *((void *)v227 + 1);
  uint64_t v229 = v227 + 8 - (char *)&v293;
  if (v228 == 1) {
    uint64_t v229 = 0;
  }
  uint64_t v230 = v229 + v228;
  uint64_t v293 = v230;
  if (v230 != 1) {
    *(uint64_t *)((char *)&v293 + v230) |= 2uLL;
  }
  int64_t v231 = (char *)&v282 - (char *)&v292;
  if (v282 == 1) {
    int64_t v231 = 0;
  }
  int64_t v292 = v231 + v282;
  v232 = (char *)&v282 + v282;
  if (v282 == 1) {
    v232 = 0;
  }
  uint64_t v233 = *((void *)v232 + 1);
  uint64_t v234 = v232 + 8 - (char *)&v291;
  if (v233 == 1) {
    uint64_t v234 = 0;
  }
  int64_t v291 = v234 + v233;
  unint64_t v235 = *(void *)v232 & 0xFFFFFFFFFFFFFFFDLL;
  int64_t v236 = v232 - (char *)&v290;
  if (v235 == 1) {
    int64_t v236 = 0;
  }
  uint64_t v290 = v236 + v235;
  int64_t v237 = (char *)&v284 - (char *)&v289;
  if (v284 == 1) {
    int64_t v237 = 0;
  }
  int64_t v289 = v237 + v284;
  uint64_t result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right((char *)&v292, (char *)&v291, (char *)&v290, (char *)&v289);
LABEL_430:
  int64_t v142 = v283;
LABEL_431:
  if (v142 != 1) {
LABEL_432:
  }
    *(int64_t *)((char *)&v283 + v142) |= 2uLL;
  uint64_t v3 = v267;
  a1 = v268;
LABEL_434:
  int64_t v265 = v3 - a1;
  if (*(void *)v3 == 1) {
    int64_t v265 = 0;
  }
  *(void *)a1 = v265 + *(void *)v3;
  return result;
}

char *boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector(char *a1)
{
  if (*((void *)a1 + 3))
  {
    uint64_t v2 = *((void *)a1 + 1);
    int64_t v3 = a1 - (char *)&v8;
    if (v2 == 1) {
      int64_t v3 = 0;
    }
    uint64_t v9 = v3 + v2;
    uint64_t v4 = (char *)&v9 + v3 + v2;
    if (v3 + v2 != 1 && v4 != 0)
    {
      if (*(void *)a1 == 1) {
        int64_t v6 = 0;
      }
      else {
        int64_t v6 = &a1[*(void *)a1];
      }
      boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v6, (uint64_t)v4);
    }
  }
  return a1;
}

uint64_t boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    uint64_t v3 = a1 + 24 - (void)&v5;
    if (v2 == 1) {
      uint64_t v3 = 0;
    }
    uint64_t v5 = v3 + v2;
    boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate((char *)a1, &v5, *(void *)(a1 + 16));
  }
  return a1;
}

char *boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate(char *result, void *a2, unint64_t a3)
{
  if (a3 >= 0x18)
  {
    BOOL v4 = *a2 == 1;
    uint64_t v3 = (uint64_t)a2 + *a2;
    BOOL v4 = v4 || v3 == 0;
    if (!v4)
    {
      if (*(void *)result == 1) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = &result[*(void *)result];
      }
      return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v5, v3);
    }
  }
  return result;
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::vector<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>>::~placement_destroy()
{
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::vector<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>>::destroy_n(uint64_t a1, void *a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    do
    {
      int64_t v7 = (char *)(a2 + 1);
      uint64_t v8 = a2[2];
      if (v8)
      {
        if (*(void *)v7 == 1) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = &v7[*(void *)v7];
        }
        uint64_t v10 = v9 - (char *)&v17;
        do
        {
          if (v9) {
            uint64_t v11 = v10;
          }
          else {
            uint64_t v11 = 1;
          }
          uint64_t v17 = v11;
          boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v17);
          v9 += 32;
          v10 += 32;
          --v8;
        }
        while (v8);
      }
      if (a2[3])
      {
        int64_t v12 = v7 - (char *)&v17;
        if (*(void *)v7 == 1) {
          int64_t v12 = 0;
        }
        uint64_t v17 = v12 + *(void *)v7;
        uint64_t v13 = (char *)&v17 + v17;
        if (v17 != 1 && v13 != 0)
        {
          if (*a2 == 1) {
            uint64_t v15 = 0;
          }
          else {
            uint64_t v15 = (char *)a2 + *a2;
          }
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v15, (uint64_t)v13);
        }
      }
      a2 += 4;
      unint64_t v16 = *a4 + 1;
      *a4 = v16;
    }
    while (v16 < a3);
  }
}

char *boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)a1 + *a1;
  if (v1 == 1 || v2 == 0) {
    __assert_rtn("destroy", "allocator.hpp", 269, "ptr != 0");
  }

  return boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector(v2);
}

char *boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector(char *a1)
{
  if (*((void *)a1 + 3))
  {
    uint64_t v2 = *((void *)a1 + 1);
    int64_t v3 = a1 - (char *)&v8;
    if (v2 == 1) {
      int64_t v3 = 0;
    }
    uint64_t v9 = v3 + v2;
    BOOL v4 = (char *)&v9 + v3 + v2;
    if (v3 + v2 != 1 && v4 != 0)
    {
      if (*(void *)a1 == 1) {
        int64_t v6 = 0;
      }
      else {
        int64_t v6 = &a1[*(void *)a1];
      }
      boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v6, (uint64_t)v4);
    }
  }
  return a1;
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::vector<double,boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>>::~placement_destroy()
{
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::vector<double,boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>>::destroy_n(uint64_t a1, void *a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    int64_t v6 = a2;
    unint64_t v7 = 0;
    uint64_t v8 = (char *)a2;
    do
    {
      if (v6[3])
      {
        uint64_t v9 = v6[1];
        int64_t v10 = v8 - (char *)&v14;
        if (v9 == 1) {
          int64_t v10 = 0;
        }
        uint64_t v15 = v10 + v9;
        uint64_t v11 = (char *)&v15 + v10 + v9;
        if (v10 + v9 != 1 && v11 != 0)
        {
          if (*v6 == 1) {
            uint64_t v13 = 0;
          }
          else {
            uint64_t v13 = &v8[*v6];
          }
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v13, (uint64_t)v11);
          unint64_t v7 = *a4;
        }
      }
      v6 += 4;
      *a4 = ++v7;
      v8 += 32;
    }
    while (v7 < a3);
  }
}

void boost::interprocess::ipcdetail::placement_destroy<int>::~placement_destroy()
{
}

void boost::interprocess::ipcdetail::placement_destroy<int>::destroy_n(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = a3;
}

uint64_t boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::managed_open_or_create_impl<char const*,boost::interprocess::ipcdetail::create_open_func<boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>>>(uint64_t a1, const char **a2, int a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 21) = 0;
  *(void *)(a1 + 16) = 0;
  mode_t v6 = 420;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::priv_open_or_create<char const*,boost::interprocess::ipcdetail::create_open_func<boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>>>((char **)a1, 1, a2, 0, a3, &v6, *(uint64_t **)a4, *(void *)(a4 + 8));
  return a1;
}

void sub_1A422356C(_Unwind_Exception *a1)
{
  boost::interprocess::mapped_region::~mapped_region(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::priv_open_or_create<char const*,boost::interprocess::ipcdetail::create_open_func<boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>>>(char **a1, int a2, const char **a3, unint64_t a4, int a5, mode_t *a6, uint64_t *a7, int a8)
{
  if (a2 == 1)
  {
    *(void *)unint64_t v65 = 0xFFFFFFFFLL;
    int64_t v12 = (char *)*a3;
    *(_WORD *)unint64_t v67 = 420;
    boost::interprocess::ipcdetail::file_wrapper::priv_open_or_create<char>(&v72.st_dev, 1, v12, 2 * (a5 == 2), (mode_t *)v67);
    *(void *)unint64_t v65 = *(void *)&v72.st_dev;
    BOOL v13 = a5 == 0;
    dev_t st_dev = v72.st_dev;
    memset(v67, 0, 20);
    gettimeofday((timeval *)&v72, 0);
    uint64_t v15 = *(void *)&v72.st_dev;
    uint64_t v16 = -(uint64_t)SLODWORD(v72.st_ino);
    while (1)
    {
      if (fstat(st_dev, &v72))
      {
        unint64_t v53 = __error();
        uint64_t v54 = 0;
        dev_t v55 = *v53;
        v72.dev_t st_dev = *v53;
        while (*(_DWORD *)((char *)&boost::interprocess::ec_table + v54) != v55)
        {
          v54 += 8;
          if (v54 == 128)
          {
            int v56 = 1;
            goto LABEL_68;
          }
        }
        int v56 = *(_DWORD *)((char *)&boost::interprocess::ec_table + v54 + 4);
LABEL_68:
        *(_DWORD *)&v72.st_mode = v56;
        exception = __cxa_allocate_exception(0x28uLL);
        boost::interprocess::interprocess_exception::interprocess_exception(exception, (uint64_t *)&v72.st_dev);
      }
      if (v72.st_size) {
        break;
      }
      gettimeofday((timeval *)&v72, 0);
      if ((unint64_t)(v16 + 1000000 * (*(void *)&v72.st_dev - v15) + SLODWORD(v72.st_ino)) > 0x11E1A300)
      {
        uint64_t v57 = __cxa_allocate_exception(0x28uLL);
        *(void *)&v72.dev_t st_dev = 0x1300000000;
        boost::interprocess::interprocess_exception::interprocess_exception(v57, (uint64_t *)&v72.st_dev);
      }
      boost::interprocess::spin_wait::yield((boost::interprocess::spin_wait *)v67);
    }
    if (v72.st_size == 1)
    {
      int64_t v58 = __cxa_allocate_exception(0x28uLL);
      *(void *)&v72.dev_t st_dev = 0x1300000000;
      boost::interprocess::interprocess_exception::interprocess_exception(v58, (uint64_t *)&v72.st_dev);
    }
    if (v13) {
      int v29 = 0;
    }
    else {
      int v29 = 2;
    }
    boost::interprocess::mapped_region::mapped_region<boost::interprocess::ipcdetail::file_wrapper>((uint64_t)&v72, v65, v29);
    uint64_t v30 = *(int **)&v72.st_dev;
    int v31 = **(_DWORD **)&v72.st_dev;
    __dmb(0xBu);
    if (v31 != 2)
    {
      gettimeofday((timeval *)v67, 0);
      uint64_t v32 = *(void *)v67;
      v70[0] = 0;
      v70[1] = 0;
      int v71 = 0;
      uint64_t v33 = -(uint64_t)*(int *)&v67[8];
      while (1)
      {
        int v34 = *v30;
        __dmb(0xBu);
        if (v34 == 2) {
          break;
        }
        if (v34 == 3)
        {
          int64_t v59 = __cxa_allocate_exception(0x28uLL);
          *(void *)unint64_t v67 = 0x1300000000;
          boost::interprocess::interprocess_exception::interprocess_exception(v59, (uint64_t *)v67);
        }
        gettimeofday((timeval *)v67, 0);
        if ((unint64_t)(v33 + 1000000 * (*(void *)v67 - v32) + *(int *)&v67[8]) > 0x11E1A300)
        {
          uint64_t v60 = __cxa_allocate_exception(0x28uLL);
          *(void *)unint64_t v67 = 0x1300000000;
          boost::interprocess::interprocess_exception::interprocess_exception(v60, (uint64_t *)v67);
        }
        boost::interprocess::spin_wait::yield((boost::interprocess::spin_wait *)v70);
      }
      int64_t v35 = *(char **)&v72.st_dev;
      __darwin_ino64_t st_ino = v72.st_ino;
      uint64_t v37 = *(void *)&v72.st_uid;
      memset(&v72, 0, 29);
      if (v35)
      {
        if (*((unsigned char *)&v72.st_rdev + 4))
        {
          if (shmdt(v35)) {
            __assert_rtn("priv_close", "mapped_region.hpp", 836, "ret == 0");
          }
        }
        else
        {
          munmap(&v35[-v37], v37 + st_ino);
        }
      }
      boost::interprocess::mapped_region::mapped_region<boost::interprocess::ipcdetail::file_wrapper>((uint64_t)v67, v65, v29);
      int64_t v38 = *(char **)&v72.st_dev;
      __darwin_ino64_t v39 = v72.st_ino;
      *(void *)&v72.dev_t st_dev = *(void *)v67;
      uint64_t v40 = *(void *)&v72.st_uid;
      long long v41 = *(_OWORD *)&v67[8];
      *(void *)unint64_t v67 = v38;
      *(void *)&v67[8] = v72.st_ino;
      *(void *)&v67[16] = *(void *)&v72.st_uid;
      *(_OWORD *)&v72.__darwin_ino64_t st_ino = v41;
      dev_t v42 = st_rdev;
      dev_t st_rdev = v72.st_rdev;
      v72.dev_t st_rdev = v42;
      char v43 = v69;
      int v44 = *((unsigned __int8 *)&v72.st_rdev + 4);
      char v69 = *((unsigned char *)&v72.st_rdev + 4);
      *((unsigned char *)&v72.st_rdev + 4) = v43;
      if (v38)
      {
        if (v44)
        {
          if (shmdt(v38)) {
            __assert_rtn("priv_close", "mapped_region.hpp", 836, "ret == 0");
          }
        }
        else
        {
          munmap(&v38[-v40], v40 + v39);
        }
      }
    }
    uint64_t v45 = *(char **)&v72.st_dev;
    __darwin_ino64_t v46 = v72.st_ino;
    if (a8 && !*a7) {
      *a7 = *(void *)&v72.st_dev + 8;
    }
    unint64_t v47 = *a1;
    __darwin_ino64_t v48 = (__darwin_ino64_t)a1[1];
    *a1 = v45;
    a1[1] = (char *)v46;
    *(void *)&v72.dev_t st_dev = v47;
    v72.__darwin_ino64_t st_ino = v48;
    unint64_t v49 = a1[2];
    a1[2] = *(char **)&v72.st_uid;
    *(void *)&v72.st_uid = v49;
    dev_t v50 = *((_DWORD *)a1 + 6);
    *((_DWORD *)a1 + 6) = v72.st_rdev;
    v72.dev_t st_rdev = v50;
    int v51 = *((unsigned __int8 *)a1 + 28);
    *((unsigned char *)a1 + 28) = *((unsigned char *)&v72.st_rdev + 4);
    *((unsigned char *)&v72.st_rdev + 4) = v51;
    if (v47)
    {
      if (v51)
      {
        if (shmdt(v47)) {
          __assert_rtn("priv_close", "mapped_region.hpp", 836, "ret == 0");
        }
      }
      else
      {
        munmap((void *)(v47 - v49), (size_t)&v49[v48]);
      }
    }
  }
  else
  {
    if (a4 <= 0xB7)
    {
      char v62 = __cxa_allocate_exception(0x28uLL);
      *(void *)&v72.dev_t st_dev = 0x1200000000;
      boost::interprocess::interprocess_exception::interprocess_exception(v62, (uint64_t *)&v72.st_dev);
    }
    *(void *)unint64_t v65 = 0xFFFFFFFFLL;
    memset(&v72, 0, 20);
    int v19 = open(*a3, 2562, *a6);
    int v20 = v19;
    if (v19 < 0)
    {
      if (v19 == -1)
      {
        int64_t v21 = __error();
        uint64_t v22 = 0;
        int v23 = *v21;
        LODWORD(v66) = *v21;
        while (*(_DWORD *)((char *)&boost::interprocess::ec_table + v22) != v23)
        {
          v22 += 8;
          if (v22 == 128)
          {
            int v24 = 1;
            goto LABEL_16;
          }
        }
        int v24 = *(_DWORD *)((char *)&boost::interprocess::ec_table + v22 + 4);
LABEL_16:
        HIDWORD(v66) = v24;
        char v64 = __cxa_allocate_exception(0x28uLL);
        boost::interprocess::interprocess_exception::interprocess_exception(v64, &v66);
      }
    }
    else
    {
      fchmod(v19, *a6);
    }
    v65[0] = v20;
    v65[1] = 2;
    boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::truncate_device<true>(v20, a4);
    boost::interprocess::mapped_region::mapped_region<boost::interprocess::ipcdetail::file_wrapper>((uint64_t)&v72, v65, 2);
    int v25 = 0;
    uint64_t v26 = *(_DWORD **)&v72.st_dev;
    atomic_compare_exchange_strong(*(atomic_uint *volatile *)&v72.st_dev, (unsigned int *)&v25, 1u);
    if (v25)
    {
      __dmb(0xBu);
      *uint64_t v26 = 3;
      int64_t v63 = __cxa_allocate_exception(0x28uLL);
      *(void *)unint64_t v67 = 0x1300000000;
      boost::interprocess::interprocess_exception::interprocess_exception(v63, (uint64_t *)v67);
    }
    if (a8 != 1 && !*a7)
    {
      if (((*(void *)&v72.st_dev + 8) & 7) != 0) {
        __assert_rtn("create_impl", "managed_memory_impl.hpp", 180, "(0 == (std::size_t)addr % boost::move_detail::alignment_of<segment_manager>::value)");
      }
      *a7 = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::segment_manager(*(void *)&v72.st_dev + 8, a4 - 8);
    }
    unint64_t v27 = *a1;
    *a1 = *(char **)&v72.st_dev;
    *(void *)&v72.dev_t st_dev = v27;
    long long v28 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = *(_OWORD *)&v72.st_ino;
    *(_OWORD *)&v72.__darwin_ino64_t st_ino = v28;
    LODWORD(v27) = *((_DWORD *)a1 + 6);
    *((_DWORD *)a1 + 6) = v72.st_rdev;
    v72.dev_t st_rdev = (int)v27;
    LOBYTE(v27) = *((unsigned char *)a1 + 28);
    *((unsigned char *)a1 + 28) = *((unsigned char *)&v72.st_rdev + 4);
    *((unsigned char *)&v72.st_rdev + 4) = (_BYTE)v27;
    __dmb(0xBu);
    *uint64_t v26 = 2;
    if (*(void *)&v72.st_dev)
    {
      if (*((unsigned char *)&v72.st_rdev + 4))
      {
        if (shmdt(*(const void **)&v72.st_dev)) {
          __assert_rtn("priv_close", "mapped_region.hpp", 836, "ret == 0");
        }
      }
      else
      {
        munmap((void *)(*(void *)&v72.st_dev - *(void *)&v72.st_uid), v72.st_ino + *(void *)&v72.st_uid);
      }
    }
  }
  uint64_t result = v65[0];
  if (v65[0] != -1) {
    return close(v65[0]);
  }
  return result;
}

void sub_1A4223E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  __cxa_end_catch();
  boost::interprocess::ipcdetail::file_wrapper::~file_wrapper((boost::interprocess::ipcdetail::file_wrapper *)va);
  _Unwind_Resume(a1);
}

void sub_1A4223F60(void *a1)
{
  __cxa_begin_catch(a1);
  __dmb(0xBu);
  _DWORD *v1 = 3;
  __cxa_rethrow();
}

void sub_1A4223F78()
{
}

void boost::interprocess::mapped_region::~mapped_region(boost::interprocess::mapped_region *this)
{
  uint64_t v2 = *(char **)this;
  if (v2)
  {
    if (*((unsigned char *)this + 28))
    {
      if (shmdt(v2)) {
        __assert_rtn("priv_close", "mapped_region.hpp", 836, "ret == 0");
      }
    }
    else
    {
      munmap(&v2[-*((void *)this + 2)], *((void *)this + 1) + *((void *)this + 2));
      *(void *)this = 0;
    }
  }
}

int *boost::interprocess::ipcdetail::file_wrapper::priv_open_or_create<char>(int *a1, int a2, char *a3, int a4, mode_t *a5)
{
  if ((a4 & 0xFFFFFFFD) != 0)
  {
    uint64_t v17 = 0x1100000000;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v17);
    goto LABEL_22;
  }
  if (a2 == 2)
  {
    while (1)
    {
      int v15 = open(a3, a4 | 0xA00, *a5);
      int v9 = v15;
      if ((v15 & 0x80000000) == 0) {
        break;
      }
      uint64_t result = __error();
      if (*result != 17) {
        goto LABEL_5;
      }
      uint64_t result = (int *)open(a3, a4);
      int v9 = (int)result;
      if ((result & 0x80000000) == 0) {
        goto LABEL_16;
      }
      uint64_t result = __error();
      if (*result != 2) {
        goto LABEL_5;
      }
    }
    uint64_t result = (int *)fchmod(v15, *a5);
LABEL_16:
    *a1 = v9;
  }
  else
  {
    if (a2 != 1)
    {
      uint64_t v17 = 0x200000000;
      exception = __cxa_allocate_exception(0x28uLL);
      boost::interprocess::interprocess_exception::interprocess_exception(exception, &v17);
      goto LABEL_22;
    }
    uint64_t result = (int *)open(a3, a4);
    int v9 = (int)result;
LABEL_5:
    *a1 = v9;
    if (v9 == -1)
    {
      int64_t v10 = __error();
      uint64_t v11 = 0;
      int v12 = *v10;
      LODWORD(v17) = *v10;
      while (*(_DWORD *)((char *)&boost::interprocess::ec_table + v11) != v12)
      {
        v11 += 8;
        if (v11 == 128)
        {
          int v13 = 1;
          goto LABEL_21;
        }
      }
      int v13 = *(_DWORD *)((char *)&boost::interprocess::ec_table + v11 + 4);
LABEL_21:
      HIDWORD(v17) = v13;
      exception = __cxa_allocate_exception(0x28uLL);
      boost::interprocess::interprocess_exception::interprocess_exception(exception, &v17);
LABEL_22:
    }
  }
  a1[1] = a4;
  return result;
}

void sub_1A42241B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::interprocess::ipcdetail::file_wrapper::~file_wrapper(boost::interprocess::ipcdetail::file_wrapper *this)
{
  int v2 = *(_DWORD *)this;
  if (v2 != -1)
  {
    close(v2);
    *(_DWORD *)this = -1;
  }
}

void boost::interprocess::spin_wait::yield(boost::interprocess::spin_wait *this)
{
  unsigned int v2 = *((_DWORD *)this + 4);
  if (!v2)
  {
    {
      uint64_t v9 = sysconf(58);
      if ((unint64_t)v9 > 0xFFFFFFFE) {
        int v10 = -1;
      }
      else {
        int v10 = v9;
      }
      if (v9 < 1) {
        int v10 = 1;
      }
      boost::interprocess::spin_wait::init_limits(void)::num_cores = v10;
    }
    unsigned int v2 = 32 * (boost::interprocess::spin_wait::init_limits(void)::num_cores < 2);
    *((_DWORD *)this + 4) = v2;
  }
  if (v2 >= 8)
  {
    if (v2 == 32)
    {
      mach_timebase_info((mach_timebase_info_t)&v11);
      uint64_t v3 = sysconf(3);
      unint64_t v6 = 100;
      if (v3 >= 1) {
        unint64_t v6 = v3;
      }
      LODWORD(v5) = HIDWORD(v11.tv_sec);
      LODWORD(v4) = v11.tv_sec;
      *((void *)this + 1) = (unint64_t)((double)(0x3B9AC9FF / v6 + 1) / ((double)v4 / (double)v5));
      *(void *)this = mach_absolute_time();
      goto LABEL_17;
    }
    if (*((void *)this + 1))
    {
      if (mach_absolute_time() - *(void *)this >= *((void *)this + 1))
      {
        *((void *)this + 1) = 0;
LABEL_13:
        v11.tv_sec = 0;
        uint64_t v7 = sysconf(3);
        unint64_t v8 = 100;
        if (v7 >= 1) {
          unint64_t v8 = v7;
        }
        v11.tv_nsec = (0x3B9AC9FF / v8 + 1) >> 1;
        nanosleep(&v11, 0);
        goto LABEL_17;
      }
    }
    else if ((v2 & 1) == 0)
    {
      goto LABEL_13;
    }
    sched_yield();
  }
LABEL_17:
  ++*((_DWORD *)this + 4);
}

void sub_1A4224390(_Unwind_Exception *a1)
{
}

uint64_t boost::interprocess::mapped_region::mapped_region<boost::interprocess::ipcdetail::file_wrapper>(uint64_t a1, int *a2, int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(unsigned char *)(a1 + 28) = 0;
  int v6 = *a2;
  {
    sysconf(29);
  }
  if (fstat(v6, &v19))
  {
    int v10 = __error();
    uint64_t v11 = 0;
    int v12 = *v10;
    LODWORD(v20) = *v10;
    while (*(_DWORD *)((char *)&boost::interprocess::ec_table + v11) != v12)
    {
      v11 += 8;
      if (v11 == 128)
      {
        int v13 = 1;
        goto LABEL_20;
      }
    }
    int v13 = *(_DWORD *)((char *)&boost::interprocess::ec_table + v11 + 4);
LABEL_20:
    HIDWORD(v20) = v13;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v20);
LABEL_23:
  }
  off_t st_size = v19.st_size;
  if (v19.st_size < 0)
  {
    uint64_t v20 = 0x1200000000;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v20);
    goto LABEL_23;
  }
  if (((0x1Du >> a3) & 1) == 0)
  {
    *(void *)&v19.dev_t st_dev = 0x1100000000;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v19);
    goto LABEL_23;
  }
  unint64_t v8 = mmap(0, v19.st_size, dword_1A42D3774[a3], dword_1A42D3760[a3], *a2, 0);
  if (v8 == (void *)-1)
  {
    int v15 = __error();
    uint64_t v16 = 0;
    dev_t v17 = *v15;
    v19.dev_t st_dev = *v15;
    while (*(_DWORD *)((char *)&boost::interprocess::ec_table + v16) != v17)
    {
      v16 += 8;
      if (v16 == 128)
      {
        int v18 = 1;
        goto LABEL_22;
      }
    }
    int v18 = *(_DWORD *)((char *)&boost::interprocess::ec_table + v16 + 4);
LABEL_22:
    *(_DWORD *)&v19.st_mode = v18;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v19);
    goto LABEL_23;
  }
  *(void *)(a1 + 8) = st_size;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v8;
  return a1;
}

void sub_1A42245AC(_Unwind_Exception *a1)
{
}

uint64_t boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::truncate_device<true>(int a1, off_t a2)
{
  uint64_t result = ftruncate(a1, a2);
  if (result)
  {
    uint64_t v3 = __error();
    uint64_t v4 = 0;
    int v5 = *v3;
    v8[0] = *v3;
    while (*(_DWORD *)((char *)&boost::interprocess::ec_table + v4) != v5)
    {
      v4 += 8;
      if (v4 == 128)
      {
        int v6 = 1;
        goto LABEL_7;
      }
    }
    int v6 = *(_DWORD *)((char *)&boost::interprocess::ec_table + v4 + 4);
LABEL_7:
    v8[1] = v6;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, v8);
  }
  return result;
}

void sub_1A4224684(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::segment_manager(uint64_t a1, uint64_t a2)
{
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(1uLL);
  *(void *)(a1 + 24) = 1;
  uint64_t v3 = a1 + 8 - (void)&v46;
  uint64_t v46 = v3;
  int64_t v4 = (char *)&v46 - (char *)&v47;
  if (v3 == 1) {
    int64_t v4 = 0;
  }
  int64_t v5 = v4 + v3;
  int64_t v47 = v5;
  int64_t v6 = (char *)&v47 - (char *)v52;
  if (v5 == 1) {
    int64_t v6 = 0;
  }
  v52[0] = v6 + v5;
  if (v6 + v5 == 1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (void *)((char *)v52 + v6 + v5);
  }
  *uint64_t v7 = *v7 & 2 | 1;
  int64_t v8 = v47;
  int64_t v9 = (char *)&v47 - (char *)&v48;
  if (v47 == 1) {
    int64_t v9 = 0;
  }
  int64_t v10 = (char *)&v47 - (char *)&v49;
  if (v47 == 1) {
    int64_t v10 = 0;
  }
  int64_t v11 = (char *)&v47 - (char *)&v50;
  if (v47 == 1) {
    int64_t v11 = 0;
  }
  int64_t v12 = (char *)&v47 - (char *)&v51;
  if (v47 == 1) {
    int64_t v12 = 0;
  }
  int64_t v13 = v12 + v47;
  int64_t v14 = v11 + v47;
  if (v13 == 1) {
    int v15 = 0;
  }
  else {
    int v15 = (char *)&v52[-1] + v13;
  }
  uint64_t v16 = (char *)((char *)&v50 - (v15 + 8));
  if (v14 == 1) {
    uint64_t v16 = 0;
  }
  *((void *)v15 + 1) = &v16[v14];
  uint64_t v17 = v10 + v8;
  uint64_t v18 = v9 + v8;
  if (v17 == 1) {
    stat v19 = 0;
  }
  else {
    stat v19 = (char *)&v49 + v17;
  }
  uint64_t v20 = (char *)((char *)&v48 - (v19 + 16));
  if (v18 == 1) {
    uint64_t v20 = 0;
  }
  *((void *)v19 + 2) = &v20[v18];
  int64_t v21 = (uint64_t *)((char *)&v46 + v46);
  if (v46 == 1) {
    int64_t v21 = 0;
  }
  *v21 &= ~2uLL;
  *(void *)a1 = 0;
  *(void *)(a1 + 48) = a2;
  *(_OWORD *)(a1 + 32) = xmmword_1A42D3520;
  unint64_t v22 = (a1 + 119) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = v22 - a1 + 8;
  if ((unint64_t)(a2 - v23) <= 0x37) {
    __assert_rtn("priv_add_segment", "rbtree_best_fit.hpp", 385, "segment_size >= (BlockCtrlBytes + EndCtrlBlockBytes)");
  }
  int v24 = (uint64_t *)(v22 + 8);
  *(int64x2_t *)(v22 + 24) = vdupq_n_s64(1uLL);
  unint64_t v25 = v22 + 24;
  *(void *)(v22 + 40) = 1;
  uint64_t v26 = ((unint64_t)(a2 - v23) >> 3) + 0x3FFFFFFFFFFFFFFELL;
  *(void *)(v22 + 16) = v26 & 0x3FFFFFFFFFFFFFFFLL;
  if ((v26 & 0x3FFFFFFFFFFFFFFFuLL) <= 4) {
    __assert_rtn("priv_add_segment", "rbtree_best_fit.hpp", 390, "first_big_block->m_size >= BlockCtrlUnits");
  }
  uint64_t v27 = 8 * v26;
  long long v28 = &v24[v26];
  v28[1] &= ~0x4000000000000000uLL;
  *long long v28 = *(void *)(v22 + 16) & 0x3FFFFFFFFFFFFFFFLL;
  v28[1] = v28[1] & 0xC000000000000000 | v26 & 0x1FFFFFFFFFFFFFFFLL;
  *int v24 = v26 & 0x1FFFFFFFFFFFFFFFLL;
  v28[1] |= 0x8000000000000000;
  uint64_t v29 = *(void *)(v22 + 16);
  *(void *)(v22 + 16) = v29 | 0x4000000000000000;
  if (v27 != 8 * v29) {
    __assert_rtn("priv_add_segment", "rbtree_best_fit.hpp", 408, "priv_next_block(first_big_block) == end_block");
  }
  if ((*((unsigned char *)v28 + 15) & 0x40) != 0) {
    __assert_rtn("priv_prev_block", "rbtree_best_fit.hpp", 1138, "!ptr->m_prev_allocated");
  }
  if (&v28[-*v28] != v24) {
    __assert_rtn("priv_add_segment", "rbtree_best_fit.hpp", 409, "priv_prev_block(end_block) == first_big_block");
  }
  if (((a1 + *(void *)(a1 + 32) + 55) & 0xFFFFFFFFFFFFFFF8) != v22) {
    __assert_rtn("priv_add_segment", "rbtree_best_fit.hpp", 410, "priv_first_block() == first_big_block");
  }
  if (((*(void *)(a1 + 48) - v23) & 0xFFFFFFFFFFFFFFF8) - 16 != v27) {
    __assert_rtn("priv_add_segment", "rbtree_best_fit.hpp", 411, "priv_end_block() == end_block");
  }
  uint64_t v30 = a1 + 8 - (void)&v44;
  uint64_t v44 = v30;
  unint64_t v45 = v25 - (void)&v45;
  unint64_t v31 = v25 - (void)&v43;
  unint64_t v43 = v31;
  int64_t v32 = (char *)&v44 - (char *)&v47;
  if (v30 == 1) {
    int64_t v32 = 0;
  }
  int64_t v33 = v32 + v30;
  int64_t v34 = (char *)&v43 - (char *)&v46;
  if (v31 == 1) {
    int64_t v34 = 0;
  }
  uint64_t v35 = v34 + v31;
  uint64_t v46 = v35;
  int64_t v47 = v33;
  LOBYTE(v52[0]) = 0;
  v52[1] = 1;
  int64_t v36 = (char *)&v47 - (char *)&v51;
  if (v33 == 1) {
    int64_t v36 = 0;
  }
  int64_t v51 = v36 + v33;
  int64_t v37 = (char *)&v46 - (char *)&v50;
  if (v35 == 1) {
    int64_t v37 = 0;
  }
  int64_t v50 = v37 + v35;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_equal_upper_bound_check<boost::intrusive::detail::key_nodeptr_comp<std::less<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl>,boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,boost::move_detail::identity<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl>>>((char *)&v51, &v50, (uint64_t)v52);
  int64_t v38 = (char *)&v47 - (char *)&v49;
  if (v47 == 1) {
    int64_t v38 = 0;
  }
  int64_t v49 = v38 + v47;
  int64_t v39 = (char *)&v46 - (char *)&v48;
  if (v46 == 1) {
    int64_t v39 = 0;
  }
  int64_t v48 = v39 + v46;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_commit((char *)&v49, (char *)&v48, (uint64_t)v52);
  int64_t v40 = (char *)&v44 - (char *)v52;
  if (v44 == 1) {
    int64_t v40 = 0;
  }
  v52[0] = v40 + v44;
  int64_t v41 = (char *)&v43 - (char *)&v51;
  if (v43 == 1) {
    int64_t v41 = 0;
  }
  int64_t v51 = v41 + v43;
  boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rebalance_after_insertion((char *)v52, (char *)&v51);
  ++*(void *)a1;
  boost::intrusive::bstbase2<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,(boost::intrusive::algo_types)5,void>::bstbase2((int64x2_t *)(a1 + 64));
  *(void *)(a1 + 56) = 0;
  boost::intrusive::bstbase2<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,(boost::intrusive::algo_types)5,void>::bstbase2((int64x2_t *)(a1 + 96));
  *(void *)(a1 + 88) = 0;
  if ((a1 & 7) != 0) {
    __assert_rtn("segment_manager", "segment_manager.hpp", 442, "(0 == (std::size_t)this_addr % boost::move_detail::alignment_of<segment_manager>::value)");
  }
  return a1;
}

void sub_1A4224B60(_Unwind_Exception *a1)
{
  boost::intrusive::bstbase<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,true,unsigned long,(boost::intrusive::algo_types)5,void>::~bstbase(v2);
  boost::intrusive::bstbase<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,true,unsigned long,(boost::intrusive::algo_types)5,void>::~bstbase(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::intrusive::bstbase<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,true,unsigned long,(boost::intrusive::algo_types)5,void>::~bstbase(uint64_t result)
{
  uint64_t v1 = result + 8 - (void)&v78;
  uint64_t v78 = v1;
  if (v1 == 1) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = (char *)(result + 8);
  }
  unint64_t v3 = *(void *)v2 & 0xFFFFFFFFFFFFFFFDLL;
  int64_t v4 = v2 - (char *)&v80;
  if (v3 == 1) {
    int64_t v4 = 0;
  }
  unint64_t v5 = v4 + v3;
  unint64_t v80 = v5;
  if (v5 != 1)
  {
    unint64_t v6 = (char *)&v80 - (char *)&v79 + v5;
    unint64_t v79 = v6;
    if (v6 != 1)
    {
      int64_t v7 = (char *)&v86 - (char *)&v83;
      int64_t v8 = (char *)&v79 - (char *)&v81;
      do
      {
        int64_t v9 = (char *)&v79 + v6;
        uint64_t v10 = *(unint64_t *)((char *)&v79 + v6 + 8);
        int64_t v11 = (char *)&v79 + v6 + 8 - (char *)&v86;
        if (v10 == 1) {
          int64_t v11 = 0;
        }
        uint64_t v12 = v11 + v10;
        if (v12 == 1)
        {
          uint64_t v13 = *((void *)v9 + 2);
          uint64_t v14 = v9 + 16 - (char *)&v90;
          if (v13 == 1) {
            uint64_t v14 = 0;
          }
          uint64_t v15 = v14 + v13;
          if (v15 == 1) {
            int64_t v16 = 0;
          }
          else {
            int64_t v16 = (char *)&v90 - (char *)&v86;
          }
          uint64_t v86 = v16 + v15;
          unint64_t v17 = v6 + v8;
          unint64_t v81 = v6 + v8;
          if (v6 + v8 == 1) {
            int64_t v18 = 0;
          }
          else {
            int64_t v18 = (char *)&v81 - (char *)&v90;
          }
          int64_t v19 = v18 + v17;
          int64_t v90 = v19;
          if (v19 == 1) {
            uint64_t v20 = 0;
          }
          else {
            uint64_t v20 = (int64_t *)((char *)&v90 + v19);
          }
          *uint64_t v20 = *v20 & 2 | 1;
          unint64_t v21 = v81;
          if (v81 == 1) {
            int64_t v22 = 0;
          }
          else {
            int64_t v22 = (char *)&v81 - v89;
          }
          unint64_t v23 = v22 + v81;
          if (v81 == 1) {
            int64_t v24 = 0;
          }
          else {
            int64_t v24 = (char *)&v81 - v88;
          }
          if (v23 == 1) {
            unint64_t v25 = 0;
          }
          else {
            unint64_t v25 = &v89[v23];
          }
          *((void *)v25 + 1) = 1;
          unint64_t v26 = v24 + v21;
          if (v26 == 1) {
            uint64_t v27 = 0;
          }
          else {
            uint64_t v27 = &v88[v26];
          }
          *((void *)v27 + 2) = 1;
          if (v79 == 1) {
            int64_t v28 = 0;
          }
          else {
            int64_t v28 = (char *)&v79 - (char *)&v87;
          }
          unint64_t v29 = v28 + v79;
          unint64_t v87 = v28 + v79;
          if (v28 + v79 == 1) {
            int64_t v30 = 0;
          }
          else {
            int64_t v30 = (char *)&v87 - (char *)&v90;
          }
          int64_t v31 = v30 + v29;
          int64_t v90 = v31;
          if (v31 == 1) {
            int64_t v32 = 0;
          }
          else {
            int64_t v32 = (int64_t *)((char *)&v90 + v31);
          }
          *int64_t v32 = *v32 & 2 | 1;
          unint64_t v33 = v87;
          if (v87 == 1) {
            int64_t v34 = 0;
          }
          else {
            int64_t v34 = (char *)&v87 - v89;
          }
          unint64_t v35 = v34 + v87;
          if (v87 == 1) {
            int64_t v36 = 0;
          }
          else {
            int64_t v36 = (char *)&v87 - v88;
          }
          if (v35 == 1) {
            int64_t v37 = 0;
          }
          else {
            int64_t v37 = &v89[v35];
          }
          *((void *)v37 + 1) = 1;
          unint64_t v38 = v36 + v33;
          if (v38 == 1) {
            int64_t v39 = 0;
          }
          else {
            int64_t v39 = &v88[v38];
          }
          *((void *)v39 + 2) = 1;
          if (v79 == 1) {
            int64_t v40 = 0;
          }
          else {
            int64_t v40 = (char *)&v79 + v79;
          }
          int64_t v90 = v40 - (char *)&v90;
          if (v40 - (char *)&v90 == 1) {
            __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
          }
          uint64_t v12 = v86;
        }
        else
        {
          uint64_t v41 = *(uint64_t *)((char *)&v86 + v12 + 16);
          int64_t v42 = (char *)&v86 + v12 + 16 - (char *)&v84;
          if (v41 == 1) {
            int64_t v42 = 0;
          }
          uint64_t v43 = v42 + v41;
          uint64_t v84 = v43;
          int64_t v85 = v6 + (char *)&v79 - (char *)&v85;
          if (v85 == 1) {
            int64_t v9 = 0;
          }
          uint64_t v44 = (char *)((char *)&v84 - (v9 + 8));
          if (v43 == 1) {
            uint64_t v44 = 0;
          }
          *((void *)v9 + 1) = &v44[v43];
          if (v6 == 1) {
            int64_t v45 = 0;
          }
          else {
            int64_t v45 = (char *)&v79 - (char *)&v82;
          }
          unint64_t v46 = v45 + v6;
          unint64_t v82 = v46;
          uint64_t v83 = v12 + v7;
          if (v12 + v7 == 1) {
            int64_t v47 = 0;
          }
          else {
            int64_t v47 = (char *)&v86 + v12;
          }
          int64_t v48 = (char *)((char *)&v82 - (v47 + 16));
          if (v46 == 1) {
            int64_t v48 = 0;
          }
          *((void *)v47 + 2) = &v48[v46];
        }
        if (v12 == 1) {
          int64_t v49 = 0;
        }
        else {
          int64_t v49 = (char *)&v86 - (char *)&v79;
        }
        unint64_t v6 = v49 + v12;
        unint64_t v79 = v49 + v12;
      }
      while (v49 + v12 != 1);
      uint64_t v1 = v78;
    }
    int64_t v50 = (char *)&v78 - (char *)&v85;
    if (v1 == 1) {
      int64_t v50 = 0;
    }
    int64_t v51 = v50 + v1;
    int64_t v85 = v51;
    int64_t v52 = (char *)&v85 - (char *)&v90;
    if (v51 == 1) {
      int64_t v52 = 0;
    }
    int64_t v90 = v52 + v51;
    if (v52 + v51 == 1) {
      unint64_t v53 = 0;
    }
    else {
      unint64_t v53 = (int64_t *)((char *)&v90 + v52 + v51);
    }
    uint64_t *v53 = *v53 & 2 | 1;
    int64_t v54 = v85;
    int64_t v55 = (char *)&v85 - (char *)&v86;
    if (v85 == 1) {
      int64_t v55 = 0;
    }
    int64_t v56 = (char *)&v85 - (char *)&v87;
    if (v85 == 1) {
      int64_t v56 = 0;
    }
    int64_t v57 = (char *)&v85 - v88;
    if (v85 == 1) {
      int64_t v57 = 0;
    }
    int64_t v58 = (char *)&v85 - v89;
    if (v85 == 1) {
      int64_t v58 = 0;
    }
    int64_t v59 = v58 + v85;
    int64_t v60 = v57 + v85;
    if (v59 == 1) {
      uint64_t v61 = 0;
    }
    else {
      uint64_t v61 = &v89[v59];
    }
    char v62 = (unsigned char *)(v88 - (v61 + 8));
    if (v60 == 1) {
      char v62 = 0;
    }
    *((void *)v61 + 1) = &v62[v60];
    uint64_t v63 = v56 + v54;
    uint64_t v64 = v55 + v54;
    if (v63 == 1) {
      unint64_t v65 = 0;
    }
    else {
      unint64_t v65 = &v88[v63 - 8];
    }
    uint64_t v66 = (char *)((char *)&v86 - (v65 + 16));
    if (v64 == 1) {
      uint64_t v66 = 0;
    }
    *((void *)v65 + 2) = &v66[v64];
  }
  uint64_t v67 = result + 8 - (void)&v77;
  uint64_t v77 = v67;
  int64_t v68 = (char *)&v77 - (char *)&v90;
  if (v67 == 1) {
    int64_t v68 = 0;
  }
  int64_t v90 = v68 + v67;
  if (v68 + v67 == 1) {
    char v69 = 0;
  }
  else {
    char v69 = (int64_t *)((char *)&v90 + v68 + v67);
  }
  *char v69 = *v69 & 2 | 1;
  uint64_t v70 = v77;
  int64_t v71 = (char *)&v77 - v89;
  int64_t v72 = (char *)&v77 - v88;
  if (v77 == 1) {
    int64_t v71 = 0;
  }
  int64_t v73 = v71 + v77;
  uint64_t v74 = &v89[v73];
  if (v77 == 1) {
    int64_t v72 = 0;
  }
  if (v73 == 1) {
    uint64_t v74 = 0;
  }
  *((void *)v74 + 1) = 1;
  int64_t v75 = v72 + v70;
  if (v75 == 1) {
    uint64_t v76 = 0;
  }
  else {
    uint64_t v76 = &v88[v75];
  }
  *((void *)v76 + 2) = 1;
  return result;
}

int64x2_t *boost::intrusive::bstbase2<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,(boost::intrusive::algo_types)5,void>::bstbase2(int64x2_t *result)
{
  *uint64_t result = vdupq_n_s64(1uLL);
  result[1].i64[0] = 1;
  int64_t v19 = (char *)result - (char *)&v19;
  int64_t v1 = (char *)&v19 - (char *)&v20;
  if ((char *)result - (char *)&v19 == 1) {
    int64_t v1 = 0;
  }
  int64_t v2 = v1 + (char *)result - (char *)&v19;
  int64_t v20 = v2;
  int64_t v3 = (char *)&v20 - (char *)&v25;
  if (v2 == 1) {
    int64_t v3 = 0;
  }
  int64_t v25 = v3 + v2;
  if (v3 + v2 == 1) {
    int64_t v4 = 0;
  }
  else {
    int64_t v4 = (int64_t *)((char *)&v25 + v3 + v2);
  }
  *int64_t v4 = *v4 & 2 | 1;
  uint64_t v5 = v20;
  int64_t v6 = (char *)&v20 - v21;
  if (v20 == 1) {
    int64_t v6 = 0;
  }
  int64_t v7 = (char *)&v20 - v22;
  if (v20 == 1) {
    int64_t v7 = 0;
  }
  int64_t v8 = (char *)&v20 - v23;
  if (v20 == 1) {
    int64_t v8 = 0;
  }
  int64_t v9 = (char *)&v20 - v24;
  if (v20 == 1) {
    int64_t v9 = 0;
  }
  uint64_t v10 = v9 + v20;
  uint64_t v11 = v8 + v20;
  if (v10 == 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = &v24[v10];
  }
  uint64_t v13 = (unsigned char *)(v23 - (v12 + 8));
  if (v11 == 1) {
    uint64_t v13 = 0;
  }
  *((void *)v12 + 1) = &v13[v11];
  uint64_t v14 = v7 + v5;
  uint64_t v15 = v6 + v5;
  if (v14 == 1) {
    int64_t v16 = 0;
  }
  else {
    int64_t v16 = &v22[v14];
  }
  unint64_t v17 = (unsigned char *)(v21 - (v16 + 16));
  if (v15 == 1) {
    unint64_t v17 = 0;
  }
  *((void *)v16 + 2) = &v17[v15];
  int64_t v18 = (int64_t *)((char *)&v19 + v19);
  if (v19 == 1) {
    int64_t v18 = 0;
  }
  *v18 &= ~2uLL;
  return result;
}

void sub_1A42251A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A4225270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A42253E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)va1);
  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::~basic_managed_heap_memory((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_heap_memory(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v2 = (uint64_t)operator new(0x400uLL);
  uint64_t v3 = 0;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v2 + 1024;
  do
  {
    *(_OWORD *)(v2 + v3) = 0uLL;
    v3 += 16;
  }
  while (v3 != 1024);
  *(void *)(a1 + 16) = v2 + 1024;
  if ((v2 & 7) != 0) {
    __assert_rtn("create_impl", "managed_memory_impl.hpp", 180, "(0 == (std::size_t)addr % boost::move_detail::alignment_of<segment_manager>::value)");
  }
  *(void *)a1 = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::segment_manager(v2, 1024);
  return a1;
}

void sub_1A42254B0()
{
}

void sub_1A4225504(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  void *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(uint64_t a1, char *__s, void *a3)
{
  if (*a3 == 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (char *)a3 + *a3;
  }
  if (v5) {
    uint64_t v6 = (uint64_t)&v5[-a1];
  }
  else {
    uint64_t v6 = 1;
  }
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v7 = a1 + 9;
  uint64_t v8 = a1 + 9 - (void)&v94;
  int64_t v9 = (char *)&v94 - (char *)&v92;
  if (v8 == 1) {
    int64_t v9 = 0;
  }
  int64_t v10 = v9 + v8;
  int64_t v11 = (char *)&v92 - (char *)&v93;
  if (v10 == 1) {
    int64_t v11 = 0;
  }
  int64_t v12 = v11 + v10;
  if (v12 == 1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = (char *)&v93 + v12;
  }
  if (v13) {
    uint64_t v14 = v13 - (char *)&v94;
  }
  else {
    uint64_t v14 = 1;
  }
  uint64_t v15 = (char *)&v94 + v14;
  if (v14 == 1) {
    uint64_t v15 = 0;
  }
  *uint64_t v15 = 0;
  size_t v16 = strlen(__s);
  if (*(void *)a1 == 1) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *(void *)a1 + a1;
  }
  unint64_t v19 = *(void *)(v18 + 48);
  if (v19 - 1 < v16) {
    boost::container::throw_length_error((boost::container *)"basic_string::reserve max_size() exceeded", v17);
  }
  size_t v20 = v16;
  unint64_t v21 = *(unsigned __int8 *)(a1 + 8);
  if (v21)
  {
    if (v16 < 0x17) {
      goto LABEL_112;
    }
    unint64_t v26 = v21 >> 1;
    if (v21 >> 1 <= v16) {
      unint64_t v26 = v16;
    }
    unint64_t v24 = v26 + 1;
    uint64_t v22 = 23;
    unint64_t v25 = 46;
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    if (v22 - 1 >= v16) {
      goto LABEL_112;
    }
    size_t v23 = *(void *)(a1 + 8) >> 1;
    if (v23 <= v16) {
      size_t v23 = v16;
    }
    unint64_t v24 = v23 + 1;
    if (v22 < 0) {
      unint64_t v25 = -1;
    }
    else {
      unint64_t v25 = 2 * v22;
    }
  }
  unint64_t v27 = v24 + v22;
  if (v25 < v19) {
    unint64_t v19 = v25;
  }
  if (v27 <= v19) {
    unint64_t v28 = v19;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v90 = 1;
  unint64_t v91 = v28;
  boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command((char *)&v89, (void *)a1, 1, v24, &v91, &v90);
  unint64_t v29 = *(unsigned __int8 *)(a1 + 8);
  if (v29)
  {
    uint64_t v32 = v7 - (void)&v88;
  }
  else
  {
    uint64_t v30 = *(void *)(a1 + 24);
    uint64_t v31 = a1 + 24 - (void)&v88;
    if (v30 == 1) {
      uint64_t v31 = 0;
    }
    uint64_t v32 = v31 + v30;
  }
  int64_t v33 = (char *)&v88 - (char *)&v87;
  int64_t v34 = (char *)&v88 - (char *)&v85;
  if (v32 == 1) {
    int64_t v33 = 0;
  }
  uint64_t v35 = v33 + v32;
  uint64_t v87 = v33 + v32;
  uint64_t v88 = v32;
  if (v32 == 1) {
    int64_t v34 = 0;
  }
  uint64_t v36 = v34 + v32;
  if ((v29 & 1) == 0) {
    unint64_t v29 = *(void *)(a1 + 8);
  }
  uint64_t v37 = (v29 >> 1) + v36;
  int64_t v38 = (char *)&v85 - (char *)&v86;
  if (v37 == 1) {
    int64_t v38 = 0;
  }
  uint64_t v39 = v38 + v37;
  uint64_t v85 = v37;
  uint64_t v86 = v38 + v37;
  uint64_t v40 = v89;
  int64_t v41 = (char *)&v89 - (char *)&v84;
  if (v89 == 1) {
    int64_t v41 = 0;
  }
  uint64_t v42 = v41 + v89;
  uint64_t v84 = v41 + v89;
  int64_t v43 = (char *)&v84 - (char *)&v93;
  if (v41 + v89 == 1) {
    int64_t v43 = 0;
  }
  uint64_t v93 = v43 + v42;
  uint64_t v44 = (char *)&v87 + v35;
  if (v35 == 1) {
    uint64_t v44 = 0;
  }
  int64_t v45 = (char *)&v86 + v39;
  if (v39 == 1) {
    int64_t v45 = 0;
  }
  if (v44 == v45)
  {
    uint64_t v46 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    do
    {
      if (v42 == 1) {
        int64_t v47 = 0;
      }
      else {
        int64_t v47 = (char *)&v84 - (char *)&v92;
      }
      uint64_t v48 = v47 + v42;
      uint64_t v92 = v48;
      if (v48 == 1) {
        int64_t v49 = 0;
      }
      else {
        int64_t v49 = (char *)&v92 + v48;
      }
      if (v49) {
        uint64_t v50 = v49 - (char *)&v94;
      }
      else {
        uint64_t v50 = 1;
      }
      if (v50 == 1) {
        int64_t v51 = 0;
      }
      else {
        int64_t v51 = (char *)&v94 + v50;
      }
      char *v51 = *v44;
      uint64_t v42 = ++v84;
      uint64_t v52 = v87++;
      ++v46;
      if (v52) {
        uint64_t v44 = (char *)&v87 + v87;
      }
      else {
        uint64_t v44 = 0;
      }
      if (v86 == 1) {
        unint64_t v53 = 0;
      }
      else {
        unint64_t v53 = (char *)&v86 + v86;
      }
    }
    while (v44 != v53);
    uint64_t v40 = v89;
  }
  int64_t v54 = (char *)&v89 - (char *)&v83;
  if (v40 == 1) {
    int64_t v54 = 0;
  }
  int64_t v55 = v40 + v46 + v54;
  int64_t v83 = v55;
  int64_t v56 = (char *)&v83 - (char *)&v92;
  if (v55 == 1) {
    int64_t v56 = 0;
  }
  uint64_t v57 = v56 + v55;
  uint64_t v92 = v57;
  int64_t v58 = (char *)&v92 - (char *)&v93;
  if (v57 == 1) {
    int64_t v58 = 0;
  }
  int64_t v59 = v58 + v57;
  if (v59 == 1) {
    int64_t v60 = 0;
  }
  else {
    int64_t v60 = (char *)&v93 + v59;
  }
  if (v60) {
    uint64_t v61 = v60 - (char *)&v94;
  }
  else {
    uint64_t v61 = 1;
  }
  if (v61 == 1) {
    char v62 = 0;
  }
  else {
    char v62 = (char *)&v94 + v61;
  }
  unsigned char *v62 = 0;
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v65 = v7 - (void)&v94;
    unint64_t v66 = 23;
  }
  else
  {
    uint64_t v63 = *(void *)(a1 + 24);
    uint64_t v64 = a1 + 24 - (void)&v94;
    if (v63 == 1) {
      uint64_t v64 = 0;
    }
    uint64_t v65 = v64 + v63;
    unint64_t v66 = *(void *)(a1 + 16);
  }
  uint64_t v94 = v65;
  boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate((char *)a1, &v94, v66);
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)(a1 + 8) &= ~1uLL;
  }
  int64_t v67 = (char *)&v89 - (char *)&v94;
  if (v89 == 1) {
    int64_t v67 = 0;
  }
  uint64_t v94 = v67 + v89;
  int64_t v68 = (char *)&v94 - a1 - 24;
  if (v67 + v89 == 1) {
    int64_t v68 = 0;
  }
  *(void *)(a1 + 24) = &v68[v67 + v89];
  if (v46 < 0) {
    goto LABEL_141;
  }
  uint64_t v69 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v69 & 1 | (2 * v46);
  LOBYTE(v21) = v69 & 1 | (2 * v46);
  if ((v69 & 1) == 0) {
    *(void *)(a1 + 16) = v91;
  }
LABEL_112:
  if (v21)
  {
    uint64_t v72 = v7 - (void)&v94;
  }
  else
  {
    uint64_t v70 = *(void *)(a1 + 24);
    uint64_t v71 = a1 + 24 - (void)&v94;
    if (v70 == 1) {
      uint64_t v71 = 0;
    }
    uint64_t v72 = v71 + v70;
  }
  if (v72 == 1) {
    int64_t v73 = 0;
  }
  else {
    int64_t v73 = (char *)&v94 + v72;
  }
  if (v20) {
    memmove(v73, __s, v20);
  }
  uint64_t v74 = &v73[v20] - (char *)&v92;
  if (!v73) {
    uint64_t v74 = 1;
  }
  uint64_t v92 = v74;
  int64_t v75 = (char *)&v92 - (char *)&v93;
  if (v74 == 1) {
    int64_t v75 = 0;
  }
  int64_t v76 = v75 + v74;
  if (v76 == 1) {
    uint64_t v77 = 0;
  }
  else {
    uint64_t v77 = (char *)&v93 + v76;
  }
  if (v77) {
    uint64_t v78 = v77 - (char *)&v94;
  }
  else {
    uint64_t v78 = 1;
  }
  if (v78 == 1) {
    unint64_t v79 = 0;
  }
  else {
    unint64_t v79 = (char *)&v94 + v78;
  }
  *unint64_t v79 = 0;
  if (*(unsigned char *)(a1 + 8))
  {
    if (v20 <= 0x7F)
    {
      *(unsigned char *)(a1 + 8) = (2 * v20) | 1;
      return a1;
    }
    int v81 = 468;
    unint64_t v82 = "priv_short_size";
LABEL_143:
    __assert_rtn(v82, "string.hpp", v81, "sz <= mask");
  }
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_141:
    int v81 = 476;
    unint64_t v82 = "priv_long_size";
    goto LABEL_143;
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 1 | (2 * v20);
  return a1;
}

void sub_1A4225A58(_Unwind_Exception *a1)
{
  boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string_base(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::~basic_managed_heap_memory(uint64_t *a1)
{
  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_close(a1);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = (uint64_t)v2;
    operator delete(v2);
  }
  *a1 = 0;
  return a1;
}

void boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_close(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = v2 + 56;
    boost::intrusive::bstbase<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,true,unsigned long,(boost::intrusive::algo_types)5,void>::~bstbase(v2 + 88);
    boost::intrusive::bstbase<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,true,unsigned long,(boost::intrusive::algo_types)5,void>::~bstbase(v3);
    *a1 = 0;
  }
  int64_t v4 = (void *)a1[1];
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::find_node_impl<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4 = result;
  if (!*(void *)(a2 + 32)) {
    goto LABEL_45;
  }
  uint64_t v6 = (*(void *)(a2 + 24) - 1) & a3;
  uint64_t result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v39, a2, v6);
  uint64_t v7 = (char *)&v39 + v39;
  if (v39 == 1) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)v7;
  int64_t v9 = v7 - v38;
  if (v8 == 1) {
    int64_t v9 = 0;
  }
  uint64_t v10 = v9 + v8;
  if (v10 == 1) {
    goto LABEL_45;
  }
  int64_t v11 = &v38[v10];
  if (v10 + v38 - v37 == 1) {
    int64_t v11 = 0;
  }
  uint64_t v12 = *((void *)v11 + 10);
  uint64_t v13 = v11 + 80 - (unsigned char *)&v36;
  if (v12 == 1) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = v13 + v12;
  uint64_t v36 = v13 + v12;
  if (v13 + v12 == 1)
  {
LABEL_45:
    uint64_t v31 = 1;
  }
  else
  {
    int64_t v15 = (char *)&v36 - (char *)&v35;
    while (1)
    {
      uint64_t v35 = v14 + v15;
      size_t v16 = v14 + v15 == 1 ? 0 : &v37[v14 - 8];
      uint64_t result = (uint64_t *)std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()[abi:ne180100](a4, (uint64_t)v16);
      if (result) {
        break;
      }
      int64_t v17 = (char *)&v36 - (char *)&v34;
      if (v14 == 1) {
        int64_t v17 = 0;
      }
      uint64_t v34 = v17 + v14;
      if (v17 + v14 == 1) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = (char *)&v34 + v17 + v14;
      }
      if ((*((void *)v18 + 11) & 0x7FFFFFFFFFFFFFFFLL) == v6)
      {
        int64_t v19 = (char *)&v36 - (char *)&v33;
        if (v14 == 1) {
          int64_t v19 = 0;
        }
        uint64_t v20 = v19 + v14;
        uint64_t v33 = v20;
        int64_t v21 = v20 == 1 ? 0 : (char *)&v33 - v37;
        uint64_t v22 = v21 + v20;
        while (1)
        {
          if (v22 == 1) {
            int64_t v23 = 0;
          }
          else {
            int64_t v23 = v37 - v38;
          }
          uint64_t v24 = v23 + v22;
          if (v24 == 1) {
            unint64_t v25 = 0;
          }
          else {
            unint64_t v25 = &v38[v24];
          }
          uint64_t v26 = *((void *)v25 + 10);
          uint64_t v27 = v25 + 80 - (unsigned char *)&v39;
          if (v26 == 1) {
            uint64_t v27 = 0;
          }
          uint64_t v28 = v27 + v26;
          int64_t v29 = v28 == 1 ? 0 : (char *)&v39 - v37;
          uint64_t v22 = v29 + v28;
          if (v22 == 1) {
            break;
          }
          if ((*(void *)&v37[v22 + 88] & 0x8000000000000000) == 0)
          {
            int64_t v30 = v37 - (unsigned char *)&v36;
            goto LABEL_44;
          }
        }
        int64_t v30 = 0;
LABEL_44:
        uint64_t v14 = v30 + v22;
        uint64_t v36 = v30 + v22;
        if (v30 + v22 != 1) {
          continue;
        }
      }
      goto LABEL_45;
    }
    uint64_t v32 = (unsigned char *)((char *)&v36 - (char *)v4);
    if (v14 == 1) {
      uint64_t v32 = 0;
    }
    uint64_t v31 = (uint64_t)&v32[v14];
  }
  *int64_t v4 = v31;
  return result;
}

BOOL std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2) {
    size_t v3 = v2 >> 1;
  }
  else {
    size_t v3 = *(void *)(a1 + 8) >> 1;
  }
  unint64_t v4 = *(unsigned __int8 *)(a2 + 8);
  unint64_t v5 = v4 >> 1;
  if ((v4 & 1) == 0) {
    unint64_t v5 = *(void *)(a2 + 8) >> 1;
  }
  if (v3 != v5) {
    return 0;
  }
  if (v2)
  {
    uint64_t v8 = a1 - (void)v15 + 9;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = a1 + 24 - (void)v15;
    if (v6 == 1) {
      uint64_t v7 = 0;
    }
    uint64_t v8 = v7 + v6;
  }
  if (v8 == 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = &v15[v8];
  }
  if (v4)
  {
    uint64_t v13 = a2 - (void)v15 + 9;
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 24);
    uint64_t v12 = a2 + 24 - (void)v15;
    if (v11 == 1) {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v12 + v11;
  }
  if (v13 == 1) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = &v15[v13];
  }
  return memcmp(v10, v14, v3) == 0;
}

unint64_t boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()(uint64_t a1)
{
  unint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1)
  {
    uint64_t v7 = (char *)(a1 + 9);
    if (a1 + 9 - (void)v11 == 1) {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v2 = a1 + 24;
    uint64_t v3 = v4;
    uint64_t v5 = v2 - (void)v11;
    if (v4 == 1) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = v5 + v3;
    if (v6 == 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = &v11[v6];
    }
    unint64_t v1 = *(void *)(v2 - 16);
  }
  unint64_t result = 0;
  for (unint64_t i = v1 >> 1; i; --i)
  {
    uint64_t v10 = *v7++;
    result ^= (result << 6) + (result >> 2) + 2654435769u + v10;
  }
  return result;
}

uint64_t boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string_base(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    uint64_t v3 = a1 + 24 - (void)&v5;
    if (v2 == 1) {
      uint64_t v3 = 0;
    }
    uint64_t v5 = v3 + v2;
    boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate((char *)a1, &v5, *(void *)(a1 + 16));
  }
  return a1;
}

void boost::container::throw_length_error(boost::container *this, const char *a2)
{
  exception = __cxa_allocate_exception(0x10uLL);
  void *exception = &unk_1EF7A9E80;
  exception[1] = this;
}

char *boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(char *a1, void *a2, char a3, unint64_t a4, unint64_t *a5, uint64_t *a6)
{
  if (*a6 == 1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (uint64_t)a6 + *a6;
  }
  if (*a2 == 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (uint64_t)a2 + *a2;
  }
  uint64_t v18 = v7;
  unint64_t v9 = *(void *)(v8 + 48);
  BOOL v10 = v9 < a4 || *a5 > v9;
  if (v10
    || (unint64_t v19 = *a5,
        unint64_t result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v8, a3 | 0x10u, a4, &v19, &v18, 1uLL), *a5 = v19, !result))
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    int64_t v17 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(void *)int64_t v17 = &unk_1EF7A9B00;
  }
  uint64_t v14 = v18;
  *(void *)a1 = result - a1;
  if (v14) {
    uint64_t v15 = v14 - (void)a6;
  }
  else {
    uint64_t v15 = 1;
  }
  *a6 = v15;
  return result;
}

char *boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(uint64_t a1, char a2, unint64_t a3, unint64_t *a4, uint64_t *a5, unint64_t a6)
{
  unint64_t v10 = *a4;
  if ((a2 & 8) != 0)
  {
    uint64_t v12 = *a5;
    if (!*a5) {
      return 0;
    }
    uint64_t v13 = v12 - 16;
    unint64_t v14 = *(void *)(v12 - 8);
    unint64_t v15 = (a1 + *(void *)(a1 + 32) + 55) & 0xFFFFFFFFFFFFFFF8;
    if (v15 + ((*(void *)(a1 + 48) + a1 - v15 - 8) & 0xFFFFFFFFFFFFFFF8) + 8 != v12
      && ((*(void *)(v13 + 8 * v14 + 8) & 0x4000000000000000) != 0) != v14 >> 63)
    {
      __assert_rtn("priv_is_allocated_block", "rbtree_best_fit.hpp", 1200, "allocated == next_block_prev_allocated");
    }
    if ((v14 & 0x8000000000000000) == 0) {
      __assert_rtn("try_shrink", "mem_algo_common.hpp", 378, "memory_algo->priv_is_allocated_block(block)");
    }
    if ((v12 & 7) != 0) {
      __assert_rtn("assert_alignment", "mem_algo_common.hpp", 106, "uint_ptr % Alignment == 0");
    }
    unint64_t result = 0;
    unint64_t v16 = (v14 & 0x3FFFFFFFFFFFFFFFLL) - 2;
    *a4 = 8 * v16 + 8;
    unint64_t v17 = (a3 - 8) >> 3;
    if (v17 >= (v10 - 1) >> 3)
    {
      unint64_t v18 = (v10 - 1) >> 3;
      if (v16 >= v18)
      {
        if (v16 != v18)
        {
          unint64_t result = 0;
          if (v18 <= 3) {
            unint64_t v18 = 3;
          }
          if (v17 < v18 || v16 - v18 < 5) {
            return result;
          }
          *a4 = 8 * v18 + 8;
          uint64_t v19 = (v18 & 0x1FFFFFFFFFFFFFFFLL) + 2;
          *(void *)(v12 - 8) = v19 | *(void *)(v12 - 8) & 0xC000000000000000;
          if (8 * v18 <= 0x17) {
            __assert_rtn("shrink", "mem_algo_common.hpp", 442, "block->m_size >= BlockCtrlUnits");
          }
          uint64_t v20 = v13 + 8 * v19;
          unint64_t v21 = (v14 - v19) & 0x3FFFFFFFFFFFFFFFLL;
          *(void *)(v20 + 8) = *(void *)(v20 + 8) & 0xC000000000000000 | v21;
          if (v21 <= 4) {
            __assert_rtn("shrink", "mem_algo_common.hpp", 450, "new_block->m_size >= BlockCtrlUnits");
          }
          uint64_t v22 = *(void *)(v12 - 8);
          *(void *)(v12 - 8) = v22 | 0x8000000000000000;
          *(void *)(v13 + 8 * v22 + 8) |= 0x4000000000000000uLL;
          uint64_t v23 = *(void *)(v20 + 8);
          *(void *)(v20 + 8) = v23 | 0x8000000000000000;
          *(void *)(v20 + 8 * v23 + 8) |= 0x4000000000000000uLL;
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate((char *)a1, v20 + 16);
        }
        return (char *)*a5;
      }
    }
  }
  else
  {
    *a4 = 0;
    if (v10 < a3)
    {
LABEL_3:
      unint64_t result = 0;
      *a5 = 0;
      return result;
    }
    uint64_t v26 = 8;
    if (v10 <= 8) {
      uint64_t v27 = 8;
    }
    else {
      uint64_t v27 = v10;
    }
    unint64_t v28 = (unint64_t)(v27 - 1) >> 3;
    if (v28 <= 3) {
      uint64_t v29 = 3;
    }
    else {
      uint64_t v29 = v28;
    }
    if (a3 > 8) {
      uint64_t v26 = a3;
    }
    unint64_t v30 = (unint64_t)(v26 - 1) >> 3;
    if (v30 <= 3) {
      uint64_t v31 = 3;
    }
    else {
      uint64_t v31 = v30;
    }
    *a4 = v10;
    int v32 = a2 & 6;
    if ((a2 & 6) == 0
      || (uint64_t v33 = *a5) == 0
      || (unint64_t result = (char *)boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_expand_both_sides(a1, a2, a3, a4, v33, 1, a6)) == 0)
    {
      if ((a2 & 1) == 0) {
        goto LABEL_35;
      }
      unint64_t v35 = v29 + 2;
      uint64_t v36 = a1 + 8;
      int64_t v37 = (char *)&v93 - (char *)&v94;
      if (a1 - (void)&v92 == 1) {
        int64_t v37 = 0;
      }
      int64_t v38 = v37 + a1 - (void)&v92;
      uint64_t v93 = a1 - (void)&v92;
      int64_t v94 = v38;
      BOOL v39 = v38 == 1;
      if (v38 == 1) {
        uint64_t v40 = 0;
      }
      else {
        uint64_t v40 = (char *)&v94 + v38;
      }
      unint64_t v41 = *(void *)v40 & 0xFFFFFFFFFFFFFFFDLL;
      uint64_t v42 = (char *)&v94 - (char *)&v95 + v38;
      if (v39) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v42;
      }
      int64_t v44 = v40 - (char *)&v96;
      if (v41 == 1) {
        int64_t v44 = 0;
      }
      uint64_t v45 = v44 + v41;
      uint64_t v95 = v43;
      uint64_t v96 = v44 + v41;
      if (v44 + v41 != 1)
      {
        int64_t v46 = (char *)&v96 - (char *)&v95;
        do
        {
          int64_t v47 = (char *)&v96 + v45;
          uint64_t v97 = (char *)&v96 + v45 - (char *)&v97 - 16;
          if ((char *)&v96 + v45 - (char *)&v97 == 17) {
            goto LABEL_125;
          }
          if ((*((void *)v47 - 1) & 0x3FFFFFFFFFFFFFFFuLL) >= v35)
          {
            uint64_t v43 = v46 + v45;
            uint64_t v95 = v46 + v45;
            if (v45 == 1) {
              int64_t v51 = 0;
            }
            else {
              int64_t v51 = (char *)&v96 + v45;
            }
            uint64_t v52 = *((void *)v51 + 1);
            uint64_t v53 = v51 + 8 - (char *)&v97;
            if (v52 == 1) {
              uint64_t v53 = 0;
            }
            uint64_t v50 = v53 + v52;
          }
          else
          {
            uint64_t v48 = *((void *)v47 + 2);
            uint64_t v49 = v47 + 16 - (char *)&v97;
            if (v48 == 1) {
              uint64_t v49 = 0;
            }
            uint64_t v50 = v49 + v48;
          }
          if (v50 == 1) {
            int64_t v54 = 0;
          }
          else {
            int64_t v54 = (char *)&v97 - (char *)&v96;
          }
          uint64_t v45 = v54 + v50;
          uint64_t v96 = v45;
        }
        while (v45 != 1);
      }
      int64_t v55 = (char *)&v95 - (char *)&v97;
      if (v43 == 1) {
        int64_t v55 = 0;
      }
      int64_t v56 = v55 + v43;
      int64_t v57 = (char *)&v97 - (char *)&v92;
      if (v56 == 1) {
        int64_t v57 = 0;
      }
      int64_t v58 = v57 + v56;
      int64_t v92 = v58;
      int64_t v59 = (char *)&v95 - (char *)&v96;
      if (v36 - (void)&v95 == 1) {
        int64_t v59 = 0;
      }
      int64_t v60 = v59 + v36 - (void)&v95;
      if (v60 == 1) {
        uint64_t v61 = 1;
      }
      else {
        uint64_t v61 = (char *)&v96 - (char *)&v97 + v60;
      }
      int64_t v62 = (char *)&v97 - (char *)&v94;
      if (v61 == 1) {
        int64_t v62 = 0;
      }
      int64_t v63 = v62 + v61;
      if (v58 == 1) {
        int64_t v64 = 0;
      }
      else {
        int64_t v64 = (char *)&v92 - (char *)&v97;
      }
      int64_t v65 = v64 + v58;
      int64_t v66 = (char *)&v94 - (char *)&v96;
      if (v63 == 1) {
        int64_t v66 = 0;
      }
      int64_t v67 = v66 + v63;
      int64_t v68 = (char *)&v97 + v65;
      if (v65 == 1) {
        int64_t v68 = 0;
      }
      if (v67 == 1) {
        uint64_t v69 = 0;
      }
      else {
        uint64_t v69 = (char *)&v96 + v67;
      }
      if (v68 == v69)
      {
        uint64_t v73 = v36 - (void)&v95;
        int64_t v74 = (char *)&v95 - (char *)&v96;
        if (v73 == 1) {
          int64_t v74 = 0;
        }
        int64_t v75 = v74 + v73;
        if (v75 == 1) {
          int64_t v76 = 0;
        }
        else {
          int64_t v76 = (char *)&v96 + v75;
        }
        uint64_t v77 = *((void *)v76 + 1);
        uint64_t v78 = v76 + 8 - (char *)&v97;
        if (v77 == 1) {
          uint64_t v78 = 0;
        }
        uint64_t v79 = v78 + v77;
        int64_t v80 = (char *)&v97 - (char *)&v94;
        if (v79 == 1) {
          int64_t v80 = 0;
        }
        int64_t v81 = v80 + v79;
        int64_t v94 = v81;
        if (v58 == 1) {
          int64_t v82 = 0;
        }
        else {
          int64_t v82 = (char *)&v92 - (char *)&v97;
        }
        int64_t v83 = v82 + v58;
        int64_t v84 = (char *)&v94 - (char *)&v96;
        if (v81 == 1) {
          int64_t v84 = 0;
        }
        uint64_t v85 = v84 + v81;
        uint64_t v86 = (char *)&v97 + v83;
        if (v83 == 1) {
          uint64_t v86 = 0;
        }
        if (v85 == 1) {
          uint64_t v87 = 0;
        }
        else {
          uint64_t v87 = (char *)&v96 + v85;
        }
        if (v86 == v87) {
          goto LABEL_35;
        }
        boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node((char *)&v97, (char *)&v92);
        int64_t v88 = (char *)&v97 - (char *)&v92;
        if (v97 == 1) {
          int64_t v88 = 0;
        }
        int64_t v92 = v88 + v97;
        if (v88 + v97 == 1) {
          uint64_t v89 = 0;
        }
        else {
          uint64_t v89 = (char *)&v92 + v88 + v97;
        }
        uint64_t v96 = v89 - (char *)&v96 - 16;
        if (v89 - (char *)&v96 == 17) {
LABEL_125:
        }
          __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
        if ((*((void *)v89 - 1) & 0x3FFFFFFFFFFFFFFFuLL) < v31 + 2)
        {
LABEL_35:
          if (!v32) {
            goto LABEL_3;
          }
          uint64_t v34 = *a5;
          if (!*a5) {
            goto LABEL_3;
          }
          *a4 = v10;
          return (char *)boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_expand_both_sides(a1, a2, a3, a4, v34, 0, a6);
        }
        *a5 = 0;
        boost::intrusive::tree_iterator<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,false>::operator->(&v97, &v92);
        if (v97 == 1) {
          uint64_t v90 = 0;
        }
        else {
          uint64_t v90 = (char *)&v97 + v97;
        }
        uint64_t v91 = *((void *)v90 + 1) & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v71 = boost::intrusive::tree_iterator<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,false>::operator*(&v92);
        uint64_t v72 = a1;
        unint64_t v35 = v91;
      }
      else
      {
        *a5 = 0;
        uint64_t v70 = (char *)&v92 + v58;
        if (v58 == 1) {
          uint64_t v70 = 0;
        }
        uint64_t v71 = v70 - 16;
        uint64_t v97 = v70 - 16 - (char *)&v97;
        if (v97 == 1) {
          goto LABEL_125;
        }
        uint64_t v72 = a1;
      }
      return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_check_and_allocate(v72, v35, (uint64_t)v71, a4);
    }
  }
  return result;
}

boost::interprocess::interprocess_exception *boost::interprocess::interprocess_exception::interprocess_exception(boost::interprocess::interprocess_exception *this, const char *a2)
{
  *(void *)this = &unk_1EF7A9AD8;
  *((void *)this + 1) = 0x200000000;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  MEMORY[0x1A62591D0]((char *)this + 16, a2);
  return this;
}

void sub_1A42266EC(void *a1)
{
}

const char *boost::interprocess::bad_alloc::what(boost::interprocess::bad_alloc *this)
{
  return "boost::interprocess::bad_alloc";
}

void boost::interprocess::bad_alloc::~bad_alloc(std::exception *this)
{
  boost::interprocess::interprocess_exception::~interprocess_exception(this);

  JUMPOUT(0x1A6259210);
}

uint64_t boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_expand_both_sides(uint64_t a1, char a2, unint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t a7)
{
  if ((a5 & 7) != 0) {
    goto LABEL_102;
  }
  uint64_t v9 = a5;
  unint64_t v14 = *a4;
  if ((a2 & 2) != 0)
  {
    if (boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_expand(a1, a5, a3, a4))return v9; {
  }
    }
  else
  {
    unint64_t v15 = 8 * *(void *)(a5 - 8) - 8;
    *a4 = v15;
    if (v15 >= v14 || v15 >= a3) {
      return v9;
    }
  }
  if (a3 % a7) {
    __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 808, "0 == (min_size % backwards_multiple)");
  }
  if (v14 % a7) {
    __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 809, "0 == (preferred_size % backwards_multiple)");
  }
  if ((a2 & 4) == 0) {
    return 0;
  }
  unint64_t v17 = (uint64_t *)(v9 - 16);
  if (((v9 - 16) & 7) != 0) {
    goto LABEL_102;
  }
  if ((*(unsigned char *)(v9 - 1) & 0x40) != 0) {
    return 0;
  }
  unint64_t v18 = (a1 + *(void *)(a1 + 32) + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *v17;
  uint64_t v20 = (uint64_t)&v17[-*v17];
  unint64_t v21 = *(void *)(v20 + 8);
  if ((uint64_t *)(v18 + 8) != v17)
  {
    if ((v21 & 0x8000000000000000) != 0) {
      __assert_rtn("priv_is_prev_allocated", "rbtree_best_fit.hpp", 1218, "!prev->m_allocated");
    }
    if ((v21 & 0x3FFFFFFFFFFFFFFFLL) != v19) {
      __assert_rtn("priv_is_prev_allocated", "rbtree_best_fit.hpp", 1219, "prev->m_size == block->m_prev_size");
    }
  }
  if (((*(void *)(a1 + 48) - (v18 - a1 + 8)) & 0xFFFFFFFFFFFFFFF8) + v18 + 8 - 16 != v20
    && ((*(void *)(v20 + 8 * v21 + 8) & 0x4000000000000000) != 0) != v21 >> 63)
  {
    __assert_rtn("priv_is_allocated_block", "rbtree_best_fit.hpp", 1200, "allocated == next_block_prev_allocated");
  }
  if ((v21 & 0x8000000000000000) != 0) {
    __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 827, "!priv_is_allocated_block(prev_block)");
  }
  unint64_t v22 = v21 & 0x3FFFFFFFFFFFFFFFLL;
  if ((v21 & 0x3FFFFFFFFFFFFFFFLL) != v19) {
    __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 830, "prev_block->m_size == reuse->m_prev_size");
  }
  if ((v20 & 7) != 0) {
    goto LABEL_102;
  }
  unint64_t v23 = *a4;
  if (a6) {
    unint64_t v24 = v14;
  }
  else {
    unint64_t v24 = a3;
  }
  uint64_t v25 = 8;
  if (a7 <= 8) {
    unint64_t v26 = 8;
  }
  else {
    unint64_t v26 = a7;
  }
  if (a7 < 8) {
    uint64_t v25 = a7;
  }
  if ((a7 & (a7 - 1)) == 0)
  {
    if (((a7 - 1) & v24) == 0)
    {
      unint64_t v27 = v24 - (v23 & -(uint64_t)a7);
      if (v27 % a7) {
        __assert_rtn("calculate_lcm_and_needs_backwards_lcmed", "mem_algo_common.hpp", 161, "(needs_backwards % backwards_multiple) == 0");
      }
      unint64_t v28 = ((v27 - 1) & -(uint64_t)v26) + v26;
      goto LABEL_55;
    }
    return 0;
  }
  if ((a7 & 7) != 0)
  {
    if ((a7 & 3) != 0)
    {
      if (a7)
      {
        unint64_t v34 = v25;
        unint64_t v35 = v26;
        do
        {
          unint64_t v36 = v35;
          unint64_t v35 = v34;
          unint64_t v34 = v36 % v34;
        }
        while (v34);
        unint64_t v37 = v23 % a7 - v23 + v24;
        if (v37 % a7) {
          __assert_rtn("calculate_lcm_and_needs_backwards_lcmed", "mem_algo_common.hpp", 220, "(needs_backwards % backwards_multiple) == 0");
        }
        unint64_t v26 = v26 / v35 * v25;
        unint64_t v28 = v26 + v26 * ((v37 - 1) / v26);
      }
      else
      {
        unint64_t v26 = 4 * a7;
        unint64_t v28 = v23 % a7 - v23 + v24;
        uint64_t v29 = (v28 >> 1) & 3;
        if (v29)
        {
          unint64_t v30 = v28 + (4 - v29) * a7;
          unint64_t v31 = v28 + v29 * a7;
          if ((a7 & 4) != 0) {
            unint64_t v28 = v31;
          }
          else {
            unint64_t v28 = v30;
          }
        }
        if (v28 % v26) {
          __assert_rtn("calculate_lcm_and_needs_backwards_lcmed", "mem_algo_common.hpp", 207, "(needs_backwards_lcmed % lcm_val) == 0");
        }
      }
    }
    else
    {
      unint64_t v26 = 2 * a7;
      unint64_t v32 = v23 % a7 - v23 + v24;
      if ((v32 & 7) != 0) {
        unint64_t v33 = a7;
      }
      else {
        unint64_t v33 = 0;
      }
      unint64_t v28 = v33 + v32;
      if ((v33 + v32) % v26) {
        __assert_rtn("calculate_lcm_and_needs_backwards_lcmed", "mem_algo_common.hpp", 186, "(needs_backwards_lcmed % lcm_val) == 0");
      }
    }
  }
  else
  {
    unint64_t v28 = v23 % a7 - v23 + v24;
    unint64_t v26 = a7;
    if ((v28 & 7) != 0) {
      __assert_rtn("calculate_lcm_and_needs_backwards_lcmed", "mem_algo_common.hpp", 173, "(needs_backwards_lcmed & (Alignment - 1u)) == 0");
    }
  }
LABEL_55:
  if (v28 > 8 * v21) {
    return 0;
  }
  if ((a2 & 2) != 0)
  {
    unint64_t v72 = *a4;
    if ((boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_expand(a1, v9, v23, &v72) & 1) == 0)__assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 849, "0"); {
    unint64_t v23 = *a4;
    }
    if (*a4 != v72) {
      __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 851, "prefer_in_recvd_out_size == received_size2");
    }
    unint64_t v21 = *(void *)(v20 + 8);
    unint64_t v22 = v21 & 0x3FFFFFFFFFFFFFFFLL;
  }
  if (v22 >= (v28 >> 3) + 5)
  {
    int64_t v47 = (char *)v17 - v28;
    unint64_t v48 = v28 + v23 - 8;
    uint64_t v49 = (v48 >> 3) + 2;
    unint64_t v50 = v49 | *(uint64_t *)((char *)v17 - v28 + 8) & 0xC000000000000000;
    *(uint64_t *)((char *)v17 - v28 + 8) = v50;
    if (v48 <= 0x17) {
      __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 861, "new_block->m_size >= BlockCtrlUnits");
    }
    *((void *)v47 + 1) = v50 | 0x8000000000000000;
    *(void *)&v47[8 * v49 + 8] |= 0x4000000000000000uLL;
    unint64_t v51 = *(void *)(v20 + 8) & 0xC000000000000000 | ((unint64_t)&v47[-v20] >> 3);
    *(void *)(v20 + 8) = v51;
    if ((unint64_t)&v47[-v20] <= 0x27) {
      __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 866, "prev_block->m_size >= BlockCtrlUnits");
    }
    *(void *)(v20 + 8) = v51 & 0x5FFFFFFFFFFFFFFFLL;
    uint64_t v52 = (uint64_t *)(v20 + ((unint64_t)&v47[-v20] & 0xFFFFFFFFFFFFFFF8));
    v52[1] &= ~0x4000000000000000uLL;
    *uint64_t v52 = *(void *)(v20 + 8) & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v53 = v20 - (void)v71 + 16;
    int64_t v54 = v71 - (char *)&v72;
    if (v20 - (void)v71 == -15) {
      int64_t v54 = 0;
    }
    int64_t v55 = v54 + v53;
    if (v55 == 1) {
      int64_t v56 = 0;
    }
    else {
      int64_t v56 = (char *)&v72 - (char *)&v70;
    }
    int64_t v70 = v56 + v55;
    *(void *)uint64_t v71 = v20 - (void)v71 + 16;
    boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::begin((char *)&v69, a1 + 8);
    if (boost::intrusive::operator!=(v71, (char *)&v69))
    {
      int64_t v57 = v71 - (char *)&v70;
      if (v20 - (void)v71 == -15) {
        int64_t v57 = 0;
      }
      int64_t v70 = v57 + v53;
      boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node((char *)&v72, (char *)&v70);
      if (v72 == 1) {
        int64_t v58 = 0;
      }
      else {
        int64_t v58 = (char *)&v72 - (char *)&v70;
      }
      int64_t v70 = v58 + v72;
      boost::intrusive::tree_iterator<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,false>::operator->(&v68, &v70);
      if (v68 == 1) {
        int64_t v59 = 0;
      }
      else {
        int64_t v59 = (char *)&v68 + v68;
      }
      if ((*((void *)v59 + 1) & 0x3FFFFFFFFFFFFFFFuLL) > (*(void *)(v20 + 8) & 0x3FFFFFFFFFFFFFFFuLL))
      {
        int64_t v60 = v71 - (char *)&v72;
        if (*(void *)v71 == 1) {
          int64_t v60 = 0;
        }
        int64_t v61 = (char *)&v72 - (char *)&v67;
        if (v60 + *(void *)v71 == 1) {
          int64_t v61 = 0;
        }
        int64_t v67 = v61 + v60 + *(void *)v71;
        boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v72, (char *)a1, (char *)&v67);
        boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::begin((char *)&v69, a1 + 8);
        int64_t v62 = (char *)&v69 - (char *)&v72;
        if (v69 == 1) {
          int64_t v62 = 0;
        }
        uint64_t v63 = v62 + v69;
        int64_t v64 = (char *)&v72 - (char *)&v66;
        if (v63 == 1) {
          int64_t v64 = 0;
        }
        uint64_t v66 = v64 + v63;
        boost::intrusive::multiset_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,void>::insert((char *)&v72, (char *)a1, (char *)&v66, v20);
      }
    }
    *a4 += v28;
    *(void *)(a1 + 40) += v28;
    if ((v47 & 7) != 0) {
      goto LABEL_102;
    }
    if ((v9 - (uint64_t)(v47 + 16)) % a7) {
      __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 892, "size_type(static_cast<char*>(reuse_ptr) - static_cast<char*>(user_ptr)) % backwards_multiple == 0");
    }
    uint64_t v9 = (uint64_t)(v47 + 16);
    if ((((_BYTE)v47 + 16) & 7) != 0) {
      goto LABEL_102;
    }
  }
  else
  {
    if (v22 < v28 >> 3 || 8 * v21 % v26) {
      return 0;
    }
    uint64_t v39 = v20 + 16;
    uint64_t v40 = v20 + 16 - (void)v71;
    *(void *)uint64_t v71 = v40;
    int64_t v41 = v71 - (char *)&v72;
    if (v40 == 1) {
      int64_t v41 = 0;
    }
    int64_t v42 = v41 + v40;
    int64_t v43 = (char *)&v72 - (char *)&v65;
    if (v42 == 1) {
      int64_t v43 = 0;
    }
    int64_t v65 = v43 + v42;
    boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v72, (char *)a1, (char *)&v65);
    *a4 += 8 * *(void *)(v20 + 8);
    *(void *)(a1 + 40) += 8 * *(void *)(v20 + 8);
    uint64_t v44 = *(void *)(v20 + 8);
    uint64_t v45 = *(void *)(v9 - 8) + v44;
    unint64_t v46 = v44 & 0xC000000000000000 | v45 & 0x3FFFFFFFFFFFFFFFLL;
    *(void *)(v20 + 8) = v46;
    if ((v45 & 0x3FFFFFFFFFFFFFFFuLL) <= 4) {
      __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 910, "prev_block->m_size >= BlockCtrlUnits");
    }
    *(void *)(v20 + 8) = v46 | 0x8000000000000000;
    *(void *)(v20 + 8 * v45 + 8) |= 0x4000000000000000uLL;
    if ((v9 - v39) % a7) {
      __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 916, "size_type(static_cast<char*>(reuse_ptr) - static_cast<char*>(user_ptr)) % backwards_multiple == 0");
    }
    uint64_t v9 = v20 + 16;
    if ((v39 & 7) != 0) {
LABEL_102:
    }
      __assert_rtn("assert_alignment", "mem_algo_common.hpp", 106, "uint_ptr % Alignment == 0");
  }
  return v9;
}

char *boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_check_and_allocate(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = (char *)(a3 + 16);
  uint64_t v5 = a3 + 16 - (void)v63;
  v63[0] = v5;
  if ((a3 & 7) != 0) {
    goto LABEL_72;
  }
  uint64_t v9 = *(void *)(a3 + 8);
  if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < a2 + 5)
  {
    if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < a2) {
      __assert_rtn("priv_check_and_allocate", "rbtree_best_fit.hpp", 1293, "0");
    }
    int64_t v10 = (char *)v63 - (char *)&v66;
    if (v5 == 1) {
      int64_t v10 = 0;
    }
    int64_t v11 = v10 + v5;
    int64_t v12 = (char *)&v66 - (char *)&v58;
    if (v11 == 1) {
      int64_t v12 = 0;
    }
    int64_t v58 = v12 + v11;
    boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v66, (char *)a1, (char *)&v58);
    goto LABEL_71;
  }
  *(void *)(a3 + 8) = v9 & 0xC000000000000000 | a2 & 0x3FFFFFFFFFFFFFFFLL;
  if ((a2 & 0x3FFFFFFFFFFFFFFFLL) <= 4) {
    __assert_rtn("priv_check_and_allocate", "rbtree_best_fit.hpp", 1261, "block->m_size >= BlockCtrlUnits");
  }
  uint64_t v13 = a3 + 8 * a2;
  *(int64x2_t *)(v13 + 24) = vdupq_n_s64(1uLL);
  *(_OWORD *)(v13 + 8) = xmmword_1A42D3510;
  if ((v13 & 7) != 0) {
LABEL_72:
  }
    __assert_rtn("assert_alignment", "mem_algo_common.hpp", 106, "uint_ptr % Alignment == 0");
  uint64_t v14 = v9 - a2;
  *(void *)(v13 + 8) = v14 & 0x3FFFFFFFFFFFFFFFLL;
  if ((v14 & 0x3FFFFFFFFFFFFFFFuLL) <= 4) {
    __assert_rtn("priv_check_and_allocate", "rbtree_best_fit.hpp", 1268, "rem_block->m_size >= BlockCtrlUnits");
  }
  unint64_t v15 = (uint64_t *)(v13 + 8 * v14);
  v15[1] &= ~0x4000000000000000uLL;
  *unint64_t v15 = *(void *)(v13 + 8) & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v16 = a1 + 8;
  uint64_t v17 = a1 + 8 - (void)&v64;
  int64_t v18 = (char *)&v64 - (char *)&v65;
  if (v17 == 1) {
    int64_t v18 = 0;
  }
  int64_t v19 = v18 + v17;
  uint64_t v20 = (char *)&v65 + v19;
  if (v19 == 1) {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *((void *)v20 + 1);
  uint64_t v22 = v20 + 8 - (char *)&v66;
  if (v21 == 1) {
    uint64_t v22 = 0;
  }
  uint64_t v23 = v22 + v21;
  int64_t v24 = (char *)&v66 - (char *)&v62;
  if (v23 == 1) {
    int64_t v24 = 0;
  }
  uint64_t v25 = v24 + v23;
  uint64_t v62 = v25;
  int64_t v26 = (char *)v63 - (char *)&v66;
  if (v5 == 1) {
    int64_t v27 = 0;
  }
  else {
    int64_t v27 = (char *)v63 - (char *)&v66;
  }
  int64_t v28 = v27 + v5;
  int64_t v29 = (char *)&v62 - (char *)&v65;
  if (v25 == 1) {
    int64_t v29 = 0;
  }
  uint64_t v30 = v29 + v25;
  unint64_t v31 = (char *)&v66 + v28;
  if (v28 == 1) {
    unint64_t v31 = 0;
  }
  if (v30 == 1) {
    unint64_t v32 = 0;
  }
  else {
    unint64_t v32 = (char *)&v65 + v30;
  }
  if (v31 == v32) {
    goto LABEL_66;
  }
  if (v5 == 1) {
    int64_t v26 = 0;
  }
  int64_t v33 = v26 + v5;
  if (v33 == 1) {
    int64_t v34 = 0;
  }
  else {
    int64_t v34 = (char *)&v66 - (char *)&v64;
  }
  int64_t v64 = v34 + v33;
  boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node((char *)&v66, (char *)&v64);
  if (v66 == 1) {
    int64_t v35 = 0;
  }
  else {
    int64_t v35 = (char *)&v66 - (char *)&v64;
  }
  int64_t v64 = v35 + v66;
  if (v35 + v66 == 1) {
    unint64_t v36 = 0;
  }
  else {
    unint64_t v36 = (char *)&v64 + v35 + v66;
  }
  uint64_t v65 = v36 - (char *)&v65 - 16;
  if (v36 - (char *)&v65 == 17) {
    goto LABEL_73;
  }
  if ((*((void *)v36 - 1) & 0x3FFFFFFFFFFFFFFFuLL) <= (*(void *)(v13 + 8) & 0x3FFFFFFFFFFFFFFFuLL))
  {
LABEL_66:
    if (v5 == 1) {
      int64_t v55 = 0;
    }
    else {
      int64_t v55 = v4;
    }
    uint64_t v66 = v55 - (char *)&v66 - 16;
    if (v55 - (char *)&v66 != 17)
    {
      int64_t v61 = v55 - (char *)&v61;
      boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::replace_node(a1 + 8, &v61, v13);
      goto LABEL_71;
    }
LABEL_73:
    __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
  }
  int64_t v37 = (char *)v63 - (char *)&v66;
  if (v5 == 1) {
    int64_t v37 = 0;
  }
  int64_t v38 = v37 + v5;
  int64_t v39 = (char *)&v66 - (char *)&v60;
  if (v38 == 1) {
    int64_t v39 = 0;
  }
  int64_t v60 = v39 + v38;
  boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v66, (char *)a1, (char *)&v60);
  int64_t v40 = (char *)&v64 - (char *)&v65;
  if (v16 - (void)&v64 == 1) {
    int64_t v40 = 0;
  }
  int64_t v41 = v40 + v16 - (void)&v64;
  if (v41 == 1) {
    int64_t v42 = 0;
  }
  else {
    int64_t v42 = (char *)&v65 + v41;
  }
  uint64_t v43 = *((void *)v42 + 1);
  uint64_t v44 = v42 + 8 - (char *)&v66;
  if (v43 == 1) {
    uint64_t v44 = 0;
  }
  uint64_t v45 = v44 + v43;
  int64_t v46 = (char *)&v66 - (char *)&v62;
  if (v45 == 1) {
    int64_t v46 = 0;
  }
  uint64_t v47 = v46 + v45;
  uint64_t v62 = v47;
  int64_t v48 = (char *)&v62 - (char *)&v66;
  if (v47 == 1) {
    int64_t v48 = 0;
  }
  uint64_t v49 = v48 + v47;
  int64_t v50 = (char *)&v66 - (char *)&v59;
  if (v49 == 1) {
    int64_t v50 = 0;
  }
  uint64_t v51 = v50 + v49;
  uint64_t v59 = v51;
  int64_t v52 = (char *)&v59 - (char *)&v66;
  if (v51 == 1) {
    int64_t v52 = 0;
  }
  uint64_t v53 = v52 + v51;
  int64_t v54 = (char *)&v66 - (char *)&v65;
  if (v53 == 1) {
    int64_t v54 = 0;
  }
  uint64_t v65 = v54 + v53;
  boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::insert_equal((char *)&v66, (char *)a1, (char *)&v65, v13);
LABEL_71:
  *(void *)(a1 + 40) += 8 * *(void *)(a3 + 8);
  *a4 = 8 * *(void *)(a3 + 8) - 8;
  uint64_t v56 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = v56 | 0x8000000000000000;
  *(void *)(a3 + 8 * v56 + 8) |= 0x4000000000000000uLL;
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)(a3 + 8 * *(void *)(a3 + 8)) = 0;
  return v4;
}

uint64_t *boost::intrusive::tree_iterator<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,false>::operator->(uint64_t *result, void *a2)
{
  if (*a2 == 1) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = (char *)a2 + *a2;
  }
  uint64_t v3 = v2 - (char *)result - 16;
  *unint64_t result = v3;
  if (v3 == 1) {
    __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
  }
  return result;
}

char *boost::intrusive::tree_iterator<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,false>::operator*(void *a1)
{
  if (*a1 == 1) {
    unint64_t v1 = 0;
  }
  else {
    unint64_t v1 = (char *)a1 + *a1;
  }
  unint64_t result = v1 - 16;
  uint64_t v3 = v1 - 16 - (char *)&v3;
  if (v3 == 1) {
    __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
  }
  return result;
}

uint64_t boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_expand(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v7 = *a4;
  uint64_t v8 = a2 - 16;
  unint64_t v9 = *(void *)(a2 - 8);
  unint64_t v10 = (*(void *)(a1 + 32) + a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  if (v10 + ((*(void *)(a1 + 48) + a1 - v10 - 8) & 0xFFFFFFFFFFFFFFF8) + 8 != a2
    && ((*(void *)(v8 + 8 * v9 + 8) & 0x4000000000000000) != 0) != v9 >> 63)
  {
    goto LABEL_99;
  }
  if ((v9 & 0x8000000000000000) == 0) {
    __assert_rtn("priv_expand", "rbtree_best_fit.hpp", 1037, "priv_is_allocated_block(block)");
  }
  unint64_t v11 = 8 * v9 - 8;
  *a4 = v11;
  if (v11 >= v7 || v11 >= a3) {
    return 1;
  }
  unint64_t v14 = (a3 - 1) >> 3;
  unint64_t v15 = v7 - 1;
  if (v14 > (v7 - 1) >> 3) {
    __assert_rtn("priv_expand", "rbtree_best_fit.hpp", 1049, "min_user_units <= preferred_user_units");
  }
  uint64_t v16 = v8 + 8 * *(void *)(a2 - 8);
  unint64_t v17 = *(void *)(v16 + 8);
  unint64_t v18 = (*(void *)(a1 + 32) + a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  if (v18 + ((*(void *)(a1 + 48) + a1 - v18 - 8) & 0xFFFFFFFFFFFFFFF8) - 8 != v16
    && ((*(void *)(v16 + 8 * v17 + 8) & 0x4000000000000000) != 0) != v17 >> 63)
  {
LABEL_99:
    __assert_rtn("priv_is_allocated_block", "rbtree_best_fit.hpp", 1200, "allocated == next_block_prev_allocated");
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    if ((v16 & 7) == 0)
    {
      uint64_t v19 = v17 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v20 = (v17 & 0x3FFFFFFFFFFFFFFFLL) + (v9 & 0x3FFFFFFFFFFFFFFFLL);
      BOOL v13 = v20 - 2 >= v14;
      if (v20 - 2 < v14)
      {
LABEL_96:
        *a4 = 8 * v20 - 8;
        return v13;
      }
      unint64_t v21 = v15 >> 3;
      if (v20 - 2 >= v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = v20 - 2;
      }
      uint64_t v23 = v22 + 2;
      unint64_t v24 = v20 - (v22 + 2);
      if (v24 < 5)
      {
        uint64_t v50 = v16 - (void)v86 + 16;
        *(void *)uint64_t v86 = v50;
        int64_t v51 = v86 - (char *)&v87;
        if (v50 == 1) {
          int64_t v51 = 0;
        }
        int64_t v52 = v51 + v50;
        int64_t v53 = (char *)&v87 - (char *)&v77;
        if (v52 == 1) {
          int64_t v53 = 0;
        }
        int64_t v77 = v53 + v52;
        boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v87, (char *)a1, (char *)&v77);
        *(void *)(a2 - 8) = *(void *)(a2 - 8) & 0xC000000000000000 | v20 & 0x3FFFFFFFFFFFFFFFLL;
        if ((v20 & 0x3FFFFFFFFFFFFFFFuLL) <= 4) {
          __assert_rtn("priv_expand", "rbtree_best_fit.hpp", 1125, "block->m_size >= BlockCtrlUnits");
        }
        uint64_t v54 = *(void *)(a1 + 40) + 8 * v17;
        goto LABEL_95;
      }
      if (v19 != *(void *)(v16 + 8 * v17)) {
        __assert_rtn("priv_expand", "rbtree_best_fit.hpp", 1081, "next_block->m_size == priv_next_block(next_block)->m_prev_size");
      }
      uint64_t v25 = v16 - (void)v84 + 16;
      v84[0] = v25;
      unint64_t v76 = v22;
      if (v19 - v24 <= 4) {
        goto LABEL_54;
      }
      int64_t v26 = &v85 - v86;
      if (a1 - (void)&v85 == -7) {
        int64_t v26 = 0;
      }
      int64_t v27 = v26 + a1 - (void)&v85 + 8;
      int64_t v28 = &v86[v27];
      if (v27 == 1) {
        int64_t v28 = 0;
      }
      uint64_t v29 = *((void *)v28 + 1);
      uint64_t v30 = v28 + 8 - (char *)&v87;
      if (v29 == 1) {
        uint64_t v30 = 0;
      }
      uint64_t v31 = v30 + v29;
      int64_t v32 = (char *)&v87 - (char *)&v83;
      if (v31 == 1) {
        int64_t v32 = 0;
      }
      uint64_t v33 = v32 + v31;
      uint64_t v83 = v33;
      int64_t v34 = (char *)v84 - (char *)&v87;
      if (v25 == 1) {
        int64_t v34 = 0;
      }
      int64_t v35 = v34 + v25;
      int64_t v36 = (char *)&v83 - v86;
      if (v33 == 1) {
        int64_t v36 = 0;
      }
      uint64_t v37 = v36 + v33;
      int64_t v38 = v35 == 1 ? 0 : (char *)&v87 + v35;
      int64_t v39 = v37 == 1 ? 0 : &v86[v37];
      if (v38 == v39) {
        goto LABEL_66;
      }
      int64_t v40 = (char *)v84 - (char *)&v87;
      if (v25 == 1) {
        int64_t v40 = 0;
      }
      int64_t v41 = v40 + v25;
      if (v41 == 1) {
        int64_t v42 = 0;
      }
      else {
        int64_t v42 = (char *)&v87 - (char *)&v81;
      }
      int64_t v81 = v42 + v41;
      boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node((char *)&v87, (char *)&v81);
      if (v87 == 1) {
        int64_t v43 = 0;
      }
      else {
        int64_t v43 = (char *)&v87 - (char *)&v81;
      }
      int64_t v81 = v43 + v87;
      uint64_t v44 = (char *)&v81 + v43 + v87;
      if (v81 == 1) {
        uint64_t v45 = 0;
      }
      else {
        uint64_t v45 = v44;
      }
      uint64_t v82 = v45 - (char *)&v82 - 16;
      if (v45 - (char *)&v82 == 17) {
        __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
      }
      if ((*((void *)v45 - 1) & 0x3FFFFFFFFFFFFFFFuLL) <= v24)
      {
LABEL_66:
        int v49 = 0;
      }
      else
      {
LABEL_54:
        int64_t v46 = (char *)v84 - (char *)&v87;
        if (v25 == 1) {
          int64_t v46 = 0;
        }
        int64_t v47 = v46 + v25;
        int64_t v48 = (char *)&v87 - (char *)&v80;
        if (v47 == 1) {
          int64_t v48 = 0;
        }
        int64_t v80 = v48 + v47;
        boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v87, (char *)a1, (char *)&v80);
        int v49 = 1;
      }
      int64_t v55 = (int64x2_t *)(v8 + 8 * v23);
      v55[1] = vdupq_n_s64(1uLL);
      v55[2].i64[0] = 1;
      v55->i64[1] = v24 & 0x3FFFFFFFFFFFFFFFLL;
      if ((v55 & 7) == 0)
      {
        if ((v24 & 0x3FFFFFFFFFFFFFFFLL) <= 4) {
          __assert_rtn("priv_expand", "rbtree_best_fit.hpp", 1104, "rem_block->m_size >= BlockCtrlUnits");
        }
        uint64_t v56 = &v55->i64[v24];
        v56[1] &= ~0x4000000000000000uLL;
        *uint64_t v56 = v55->i64[1] & 0x3FFFFFFFFFFFFFFFLL;
        if (v49)
        {
          int64_t v57 = &v85 - v86;
          if (a1 - (void)&v85 == -7) {
            int64_t v57 = 0;
          }
          int64_t v58 = v57 + a1 - (void)&v85 + 8;
          if (v58 == 1) {
            uint64_t v59 = 0;
          }
          else {
            uint64_t v59 = &v86[v58];
          }
          uint64_t v60 = *((void *)v59 + 1);
          uint64_t v61 = v59 + 8 - (char *)&v87;
          if (v60 == 1) {
            uint64_t v61 = 0;
          }
          uint64_t v62 = v61 + v60;
          int64_t v63 = (char *)&v87 - (char *)&v83;
          if (v62 == 1) {
            int64_t v63 = 0;
          }
          uint64_t v64 = v63 + v62;
          uint64_t v83 = v64;
          int64_t v65 = (char *)&v83 - (char *)&v87;
          if (v64 == 1) {
            int64_t v65 = 0;
          }
          uint64_t v66 = v65 + v64;
          int64_t v67 = (char *)&v87 - (char *)&v79;
          if (v66 == 1) {
            int64_t v67 = 0;
          }
          uint64_t v68 = v67 + v66;
          uint64_t v79 = v68;
          int64_t v69 = (char *)&v79 - (char *)&v87;
          if (v68 == 1) {
            int64_t v69 = 0;
          }
          uint64_t v70 = v69 + v68;
          int64_t v71 = (char *)&v87 - v86;
          if (v70 == 1) {
            int64_t v71 = 0;
          }
          *(void *)uint64_t v86 = v71 + v70;
          boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::insert_equal((char *)&v87, (char *)a1, v86, (uint64_t)v55);
        }
        else
        {
          int64_t v72 = (char *)v84 - (char *)&v87;
          if (v84[0] == 1) {
            int64_t v72 = 0;
          }
          int64_t v73 = (char *)&v87 - (char *)&v78;
          if (v72 + v84[0] == 1) {
            int64_t v73 = 0;
          }
          int64_t v78 = v73 + v72 + v84[0];
          boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::replace_node(a1 + 8, &v78, v8 + 8 * v23);
        }
        *(void *)(a2 - 8) = *(void *)(a2 - 8) & 0xC000000000000000 | v23;
        if (v76 <= 2) {
          __assert_rtn("priv_expand", "rbtree_best_fit.hpp", 1115, "block->m_size >= BlockCtrlUnits");
        }
        uint64_t v54 = *(void *)(a1 + 40) + 8 * (v23 - v9);
LABEL_95:
        *(void *)(a1 + 40) = v54;
        uint64_t v74 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v74 | 0x8000000000000000;
        *(void *)(v8 + 8 * v74 + 8) |= 0x4000000000000000uLL;
        uint64_t v20 = *(void *)(a2 - 8);
        goto LABEL_96;
      }
    }
    __assert_rtn("assert_alignment", "mem_algo_common.hpp", 106, "uint_ptr % Alignment == 0");
  }
  return 0;
}

char *boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::begin(char *result, uint64_t a2)
{
  int64_t v2 = &v9 - v10;
  if (a2 - (void)&v9 == 1) {
    int64_t v2 = 0;
  }
  int64_t v3 = v2 + a2 - (void)&v9;
  if (v3 == 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = &v10[v3];
  }
  uint64_t v5 = *((void *)v4 + 1);
  uint64_t v6 = v4 + 8 - &v11;
  if (v5 == 1) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = v6 + v5;
  uint64_t v8 = (unsigned char *)(&v11 - result);
  if (v7 == 1) {
    uint64_t v8 = 0;
  }
  *(void *)unint64_t result = &v8[v7];
  return result;
}

BOOL boost::intrusive::operator!=(char *a1, char *a2)
{
  int64_t v2 = a1 - v10;
  if (*(void *)a1 == 1) {
    int64_t v2 = 0;
  }
  int64_t v3 = v2 + *(void *)a1;
  int64_t v4 = a2 - v9;
  if (*(void *)a2 == 1) {
    int64_t v4 = 0;
  }
  int64_t v5 = v4 + *(void *)a2;
  if (v3 == 1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = &v10[v3];
  }
  uint64_t v7 = &v9[v5];
  if (v5 == 1) {
    uint64_t v7 = 0;
  }
  return v6 != v7;
}

char *boost::intrusive::multiset_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,void>::insert(char *a1, char *a2, char *a3, uint64_t a4)
{
  int64_t v4 = a3 - &v9;
  if (*(void *)a3 == 1) {
    int64_t v4 = 0;
  }
  int64_t v5 = v4 + *(void *)a3;
  int64_t v6 = &v9 - (char *)&v8;
  if (v5 == 1) {
    int64_t v6 = 0;
  }
  int64_t v8 = v6 + v5;
  return boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::insert_equal(a1, a2, (char *)&v8, a4);
}

const char *boost::container::exception::what(boost::container::exception *this)
{
  if (*((void *)this + 1)) {
    return (const char *)*((void *)this + 1);
  }
  else {
    return "unknown boost::container exception";
  }
}

void boost::container::out_of_range::~out_of_range(std::exception *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x1A6259210);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5B2C4A8, MEMORY[0x1E4FBA1C8]);
}

void sub_1A4227CF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void sub_1A422816C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A4228268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A422882C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _PFStoryRecipeDisplayAssetNormalizationDataFromMediaAnalysisDictionaryRev0(void *a1)
{
  id v1 = a1;
  id v2 = (id) [objc_alloc(MEMORY[0x1E4F1CA58]) initWithLength:12];
  uint64_t v3 = [v2 mutableBytes];
  *(_WORD *)uint64_t v3 = -32766;
  int64_t v4 = [v1 objectForKeyedSubscript:@"ColorCastCI"];
  int64_t v5 = v4;
  if (v4)
  {
    int64_t v6 = [v4 objectAtIndexedSubscript:0];
    int v7 = llround((_objectToDouble(v6) + 0.1) / 0.4 * 255.0);
    if (v7 >= 255) {
      int v7 = 255;
    }
    *(unsigned char *)(v3 + 10) = v7 & ~(v7 >> 31);
  }
  int64_t v8 = [v1 objectForKeyedSubscript:@"ContrastCI"];
  char v9 = v8;
  if (v8)
  {
    unint64_t v10 = [v8 objectAtIndexedSubscript:0];
    int v11 = llround((_objectToDouble(v10) + 0.15) / 0.55 * 255.0);
    if (v11 >= 255) {
      int v11 = 255;
    }
    *(unsigned char *)(v3 + 4) = v11 & ~(v11 >> 31);
  }
  int64_t v12 = [v1 objectForKeyedSubscript:@"ExposureAndBlackPointCI"];
  BOOL v13 = v12;
  if (v12)
  {
    unint64_t v14 = [v12 objectAtIndexedSubscript:0];
    int v15 = llround((_objectToDouble(v14) + 0.01) / 0.02 * 255.0);
    if (v15 >= 255) {
      int v15 = 255;
    }
    *(unsigned char *)(v3 + 6) = v15 & ~(v15 >> 31);

    uint64_t v16 = [v13 objectAtIndexedSubscript:1];
    int v17 = llround((_objectToDouble(v16) + 0.01) / 0.02 * 255.0);
    if (v17 >= 255) {
      int v17 = 255;
    }
    *(unsigned char *)(v3 + 5) = v17 & ~(v17 >> 31);
  }
  unint64_t v18 = [v1 objectForKeyedSubscript:@"HighKeyCI"];
  uint64_t v19 = v18;
  if (v18)
  {
    uint64_t v20 = [v18 objectAtIndexedSubscript:0];
    int v21 = llround((_objectToDouble(v20) + 0.2) / 1.5 * 255.0);
    if (v21 >= 255) {
      int v21 = 255;
    }
    *(unsigned char *)(v3 + 8) = v21 & ~(v21 >> 31);
  }
  uint64_t v22 = [v1 objectForKeyedSubscript:@"HighlightsCI"];
  uint64_t v23 = v22;
  if (v22)
  {
    unint64_t v24 = [v22 objectAtIndexedSubscript:0];
    int v25 = llround((_objectToDouble(v24) + 0.4) / 0.42 * 255.0);
    if (v25 >= 255) {
      int v25 = 255;
    }
    *(unsigned char *)(v3 + 7) = v25 & ~(v25 >> 31);
  }
  int64_t v26 = [v1 objectForKeyedSubscript:@"VibrancyCI"];
  int64_t v27 = v26;
  if (v26)
  {
    int64_t v28 = [v26 objectAtIndexedSubscript:0];
    int v29 = llround((_objectToDouble(v28) + 0.075) / 0.225 * 255.0);
    if (v29 >= 255) {
      int v29 = 255;
    }
    *(unsigned char *)(v3 + 9) = v29 & ~(v29 >> 31);
  }
  uint64_t v30 = [v1 objectForKeyedSubscript:@"WhiteBalanceTempTintCI"];
  uint64_t v31 = v30;
  if (v30)
  {
    int64_t v32 = [v30 objectAtIndexedSubscript:0];
    int v33 = llround((_objectToDouble(v32) + -4200.0) / 2000.0 * 255.0);
    if (v33 >= 255) {
      int v33 = 255;
    }
    *(unsigned char *)(v3 + 2) = v33 & ~(v33 >> 31);

    int64_t v34 = [v31 objectAtIndexedSubscript:1];
    int v35 = llround((_objectToDouble(v34) + 20.0) / 40.0 * 255.0);
    if (v35 >= 255) {
      int v35 = 255;
    }
    *(unsigned char *)(v3 + 3) = v35 & ~(v35 >> 31);
  }

  return v2;
}

double _objectToDouble(void *a1)
{
  id v1 = a1;
  double v2 = 0.0;
  if (v1 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    [v1 doubleValue];
    double v2 = v3;
  }

  return v2;
}

id PFStoryRecipeDisplayAssetNormalizationDataFromMediaAnalysisDictionaryAndRevision(void *a1, uint64_t a2)
{
  id v3 = a1;
  int64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = [v3 count];
    int64_t v6 = 0;
    if (!a2 && v5)
    {
      int64_t v6 = _PFStoryRecipeDisplayAssetNormalizationDataFromMediaAnalysisDictionaryRev0(v4);
    }
  }
  else
  {
    int64_t v6 = 0;
  }

  return v6;
}

id PFMap(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int64_t v4 = a2;
  if (v3)
  {
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v6 = v3;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v6);
          }
          int v11 = v4[2](v4, *(void *)(*((void *)&v13 + 1) + 8 * i));
          if (v11) {
            objc_msgSend(v5, "addObject:", v11, (void)v13);
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v8);
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id PFMapDictionary(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int64_t v4 = (objc_class *)MEMORY[0x1E4F1CA60];
    id v5 = a1;
    id v6 = objc_msgSend([v4 alloc], "initWithCapacity:", objc_msgSend(v5, "count"));
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __PFMapDictionary_block_invoke;
    v10[3] = &unk_1E5B2D380;
    id v7 = v6;
    id v11 = v7;
    id v12 = v3;
    [v5 enumerateKeysAndObjectsUsingBlock:v10];

    uint64_t v8 = v12;
    a1 = v7;
  }

  return a1;
}

void __PFMapDictionary_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void (**)(uint64_t, id, uint64_t))(v5 + 16);
  id v7 = a2;
  v6(v5, v7, a3);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v7];
}

uint64_t PFCount(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int64_t v4 = a2;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v3);
        }
        v7 += v4[2](v4, *(void *)(*((void *)&v11 + 1) + 8 * i));
      }
      uint64_t v6 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

__CFString *PFMetadataStringForMetadataLoadOptions(__int16 a1)
{
  if ((a1 & 2) != 0)
  {
    double v2 = [&stru_1EF7AE1F8 stringByAppendingString:@"lookforxmpsidecar|"];
    if ((a1 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  double v2 = &stru_1EF7AE1F8;
  if (a1)
  {
LABEL_5:
    uint64_t v3 = [(__CFString *)v2 stringByAppendingString:@"usejpegfastpath|"];

    double v2 = (__CFString *)v3;
  }
LABEL_6:
  if ((a1 & 0x10) != 0)
  {
    uint64_t v6 = [(__CFString *)v2 stringByAppendingString:@"createproxy|"];

    double v2 = (__CFString *)v6;
    if ((a1 & 0x20) == 0)
    {
LABEL_8:
      if ((a1 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((a1 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = [(__CFString *)v2 stringByAppendingString:@"allowexportforproxy|"];

  double v2 = (__CFString *)v7;
  if ((a1 & 0x80) == 0)
  {
LABEL_9:
    if ((a1 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v8 = [(__CFString *)v2 stringByAppendingString:@"nofileaccess|"];

  double v2 = (__CFString *)v8;
  if ((a1 & 0x100) == 0)
  {
LABEL_10:
    if ((a1 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_20:
  uint64_t v9 = [(__CFString *)v2 stringByAppendingString:@"nooutofprocess"];

  double v2 = (__CFString *)v9;
  if ((a1 & 0x40) != 0)
  {
LABEL_11:
    uint64_t v4 = [(__CFString *)v2 stringByAppendingString:@"loadvalues"];

    double v2 = (__CFString *)v4;
  }
LABEL_12:
  if (![(__CFString *)v2 length])
  {

    double v2 = @"none";
  }

  return v2;
}

void cleanJSON(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      double v2 = [v1 allKeys];
      uint64_t v3 = [v2 countByEnumeratingWithState:&v19 objects:v25 count:16];
      if (!v3) {
        goto LABEL_26;
      }
      uint64_t v5 = v3;
      uint64_t v6 = *(void *)v20;
      *(void *)&long long v4 = 138412290;
      long long v18 = v4;
      while (1)
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v20 != v6) {
            objc_enumerationMutation(v2);
          }
          uint64_t v8 = *(void *)(*((void *)&v19 + 1) + 8 * v7);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            uint64_t v9 = metadataLog;
            if (os_log_type_enabled((os_log_t)metadataLog, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v18;
              uint64_t v24 = v8;
              _os_log_error_impl(&dword_1A41FE000, v9, OS_LOG_TYPE_ERROR, "Invalid key: %@", buf, 0xCu);
            }
            objc_msgSend(v1, "removeObjectForKey:", v8, v18);
          }
          unint64_t v10 = objc_msgSend(v1, "objectForKeyedSubscript:", v8, v18);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            long long v11 = v10;
            if (!strcmp((const char *)[(__CFString *)v11 objCType], "d"))
            {
              [(__CFString *)v11 doubleValue];
              if ((__fpclassifyd(v12) - 1) <= 1)
              {
                long long v13 = v1;
                long long v14 = @"null";
                goto LABEL_22;
              }
            }
            goto LABEL_23;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
          {
            cleanJSON(v10);
            goto LABEL_24;
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              long long v11 = [v10 description];
              long long v13 = v1;
              long long v14 = v11;
LABEL_22:
              [v13 setObject:v14 forKeyedSubscript:v8];
LABEL_23:
            }
          }
LABEL_24:

          ++v7;
        }
        while (v5 != v7);
        uint64_t v5 = [v2 countByEnumeratingWithState:&v19 objects:v25 count:16];
        if (!v5)
        {
LABEL_26:

          goto LABEL_41;
        }
      }
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v1 count])
    {
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = [v1 objectAtIndexedSubscript:v15];
        objc_opt_class();
        if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
        {
          cleanJSON(v16);
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                {
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0)
                  {
                    int v17 = [v16 description];
                    [v1 setObject:v17 atIndexedSubscript:v15];
                  }
                }
              }
            }
          }
        }

        ++v15;
      }
      while ([v1 count] > v15);
    }
  }
LABEL_41:
}

void PFGetDimensionsFromImageProperties(void *a1, void *a2, void *a3, void *a4)
{
  id v14 = a1;
  uint64_t v7 = [v14 objectForKey:*MEMORY[0x1E4F2FCA0]];
  if (!v7)
  {
    uint64_t v8 = [v14 objectForKey:*MEMORY[0x1E4F2FD40]];
    if (!v8
      || (uint64_t v9 = v8,
          [v8 objectForKey:*MEMORY[0x1E4F2FD70]],
          uint64_t v7 = objc_claimAutoreleasedReturnValue(),
          v9,
          !v7))
    {
      uint64_t v7 = &unk_1EF7CA820;
    }
  }
  if (a2) {
    *a2 = v7;
  }
  unint64_t v10 = [v14 objectForKey:@"RawPixelWidth"];
  if (!v10)
  {
    unint64_t v10 = [v14 objectForKey:*MEMORY[0x1E4F2FD00]];
    if (!v10)
    {
      long long v11 = [v14 objectForKey:*MEMORY[0x1E4F2F800]];
      unint64_t v10 = [v11 objectForKey:*MEMORY[0x1E4F2F8D8]];
    }
  }
  if (a3) {
    *a3 = v10;
  }
  double v12 = [v14 objectForKey:@"RawPixelHeight"];
  if (!v12)
  {
    double v12 = [v14 objectForKey:*MEMORY[0x1E4F2FCE8]];
    if (!v12)
    {
      long long v13 = [v14 objectForKey:*MEMORY[0x1E4F2F800]];
      double v12 = [v13 objectForKey:*MEMORY[0x1E4F2F8E0]];
    }
  }
  if (a4) {
    *a4 = v12;
  }
}

__CFString *PFDisplayAssetPlaybackStyleDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return @"unsupported";
  }
  else {
    return off_1E5B2D540[a1 - 1];
  }
}

__CFString *PFStoryRecipeClipMotionStyleDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"none";
  }
  else {
    return off_1E5B2D570[a1 - 1];
  }
}

__CFString *PFStoryRecipeClipTransitionKindDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8) {
    return @"none";
  }
  else {
    return off_1E5B2D590[a1 - 1];
  }
}

id PFPosterSettlingEffectGatingStatisticsAnalyticsPayload(unsigned int *a1, uint64_t a2)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v5 = @"Default";
  if (a2 == 1) {
    uint64_t v5 = @"Interactive";
  }
  if (a2 == 2) {
    uint64_t v5 = @"Overnight";
  }
  uint64_t v6 = v5;
  [v4 setObject:v6 forKeyedSubscript:@"GatingLevel"];

  uint64_t v7 = [NSNumber numberWithInt:*a1];
  [v4 setObject:v7 forKeyedSubscript:@"FailedFeatureDisabled"];

  uint64_t v8 = [NSNumber numberWithInt:a1[1]];
  [v4 setObject:v8 forKeyedSubscript:@"FailedHardwareUnsupported"];

  uint64_t v9 = [NSNumber numberWithInt:a1[2]];
  [v4 setObject:v9 forKeyedSubscript:@"FailedResourceAvailability"];

  unint64_t v10 = [NSNumber numberWithInt:a1[3]];
  [v4 setObject:v10 forKeyedSubscript:@"FailedUnsupportedAdjustments"];

  long long v11 = [NSNumber numberWithInt:a1[4]];
  [v4 setObject:v11 forKeyedSubscript:@"FailedGenericError"];

  double v12 = [NSNumber numberWithInt:a1[5]];
  [v4 setObject:v12 forKeyedSubscript:@"FailedMetadataCheck"];

  long long v13 = [NSNumber numberWithInt:a1[6]];
  [v4 setObject:v13 forKeyedSubscript:@"FailedStabilization"];

  id v14 = [NSNumber numberWithInt:a1[7]];
  [v4 setObject:v14 forKeyedSubscript:@"FailedVideoQuality"];

  unint64_t v15 = [NSNumber numberWithInt:a1[8]];
  [v4 setObject:v15 forKeyedSubscript:@"FailedMetadataIntegrity"];

  uint64_t v16 = [NSNumber numberWithInt:a1[9]];
  [v4 setObject:v16 forKeyedSubscript:@"FailedFRC"];

  int v17 = [NSNumber numberWithInt:a1[10]];
  [v4 setObject:v17 forKeyedSubscript:@"FailedVideoDecision"];

  long long v18 = [NSNumber numberWithInt:a1[11]];
  [v4 setObject:v18 forKeyedSubscript:@"FailedLayoutDecision"];

  long long v19 = [NSNumber numberWithInt:a1[12]];
  [v4 setObject:v19 forKeyedSubscript:@"FailedStillTransition"];

  return v4;
}

void sub_1A4237D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A42380AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A42381D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *convertTypeToKey(int a1, int a2)
{
  if (convertTypeToKey_onceToken[0] != -1) {
    dispatch_once(convertTypeToKey_onceToken, &__block_literal_global_3195);
  }
  switch(a1)
  {
    case 0:
      __assert_rtn("convertTypeToKey", "PFMediaMetadata.m", 70, "false");
    case 1:
      id v4 = (__CFString **)MEMORY[0x1E4F15530];
      uint64_t v5 = (__CFString **)MEMORY[0x1E4F15E60];
      goto LABEL_19;
    case 2:
      uint64_t v6 = (__CFString *)*MEMORY[0x1E4F15588];
      uint64_t v7 = @"com.apple.photos.originating.signature";
      goto LABEL_8;
    case 3:
      uint64_t v6 = (__CFString *)*MEMORY[0x1E4F15598];
      uint64_t v7 = @"com.apple.photos.render.originating.signature";
      goto LABEL_8;
    case 4:
      uint64_t v6 = (__CFString *)*MEMORY[0x1E4F15590];
      uint64_t v7 = @"com.apple.photos.variation-identifier";
LABEL_8:
      if (a2) {
        uint64_t v6 = v7;
      }
      goto LABEL_45;
    case 5:
      uint64_t v6 = @"com.apple.photos.live-photo.minimum-client-version";
      goto LABEL_36;
    case 6:
      uint64_t v8 = (__CFString **)MEMORY[0x1E4F15550];
      goto LABEL_33;
    case 7:
      uint64_t v8 = (__CFString **)MEMORY[0x1E4F15578];
      goto LABEL_33;
    case 8:
      uint64_t v6 = (__CFString *)convertTypeToKey_quicktimeAutoLivePhotoKey;
      goto LABEL_36;
    case 9:
      uint64_t v6 = (__CFString *)convertTypeToKey_quicktimeVitalityScoreKey;
      goto LABEL_36;
    case 10:
      uint64_t v8 = (__CFString **)MEMORY[0x1E4F51098];
      goto LABEL_33;
    case 11:
      uint64_t v8 = (__CFString **)MEMORY[0x1E4F15580];
      goto LABEL_33;
    case 12:
      id v4 = (__CFString **)MEMORY[0x1E4F15608];
      uint64_t v5 = (__CFString **)MEMORY[0x1E4F15EB8];
LABEL_19:
      if (a2) {
        id v4 = v5;
      }
      goto LABEL_44;
    case 13:
      uint64_t v8 = (__CFString **)MEMORY[0x1E4F51078];
      goto LABEL_33;
    case 14:
      uint64_t v8 = (__CFString **)MEMORY[0x1E4F510D0];
      goto LABEL_33;
    case 15:
      uint64_t v6 = @"20";
      goto LABEL_34;
    case 16:
      uint64_t v6 = (__CFString *)*MEMORY[0x1E4F15E58];
      if (!a2) {
        uint64_t v6 = 0;
      }
      goto LABEL_45;
    case 17:
      uint64_t v6 = (__CFString *)*MEMORY[0x1E4F15E98];
      goto LABEL_36;
    case 18:
      uint64_t v8 = (__CFString **)MEMORY[0x1E4F2F3C0];
      goto LABEL_33;
    case 19:
      uint64_t v8 = (__CFString **)MEMORY[0x1E4F510A0];
      goto LABEL_33;
    case 20:
      uint64_t v8 = (__CFString **)MEMORY[0x1E4F15538];
      goto LABEL_33;
    case 21:
      uint64_t v8 = (__CFString **)MEMORY[0x1E4F15540];
LABEL_33:
      uint64_t v6 = *v8;
LABEL_34:
      BOOL v9 = a2 == 0;
      goto LABEL_37;
    case 22:
      uint64_t v6 = @"com.apple.quicktime.limit-still-image-transform";
LABEL_36:
      BOOL v9 = a2 == 1;
LABEL_37:
      if (!v9) {
        uint64_t v6 = 0;
      }
      goto LABEL_45;
    case 23:
      unint64_t v10 = @"58";
      break;
    case 24:
      unint64_t v10 = @"com.apple.quicktime.live-photo.transition-vitality-score.v1";
      break;
    case 25:
      id v4 = (__CFString **)MEMORY[0x1E4F15EA8];
      goto LABEL_44;
    case 26:
      id v4 = (__CFString **)MEMORY[0x1E4F15EB0];
LABEL_44:
      uint64_t v6 = *v4;
LABEL_45:
      unint64_t v10 = v6;
      break;
    default:
      unint64_t v10 = 0;
      break;
  }

  return v10;
}

uint64_t __convertTypeToKey_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F16558] keyForIdentifier:*MEMORY[0x1E4F15D50]];
  id v1 = (void *)convertTypeToKey_quicktimeAutoLivePhotoKey;
  convertTypeToKey_quicktimeAutoLivePhotoKeCGFloat y = v0;

  convertTypeToKey_quicktimeVitalityScoreKeCGFloat y = [MEMORY[0x1E4F16558] keyForIdentifier:*MEMORY[0x1E4F15D88]];

  return MEMORY[0x1F41817F8]();
}

void _AuxiliaryImageCVPixelBufferReleaseBytesCallback(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1A423A040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A423AD54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

float64x2_t lhc_to_srgb(float64x2_t *a1, float64x2_t a2, double a3)
{
  __double2 v4 = __sincos_stret(a2.f64[1]);
  v5.f64[0] = v4.__cosval * a3;
  v6.f64[0] = v4.__sinval * a3;
  if (matrix_ipt_to_lms_once != -1)
  {
    float64x2_t v37 = v5;
    float64x2_t v41 = v6;
    dispatch_once(&matrix_ipt_to_lms_once, &__block_literal_global_3345);
    float64x2_t v5 = v37;
    float64x2_t v6 = v41;
  }
  int8x16_t v7 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)matrix_ipt_to_lms_IPTToLMS, a2.f64[0]), (float64x2_t)xmmword_1E9645B20, v5.f64[0]), (float64x2_t)xmmword_1E9645B40, v6.f64[0]);
  uint64_t v35 = vextq_s8(v7, v7, 8uLL).u64[0];
  uint64_t v39 = v7.i64[0];
  float64x2_t v43 = vmlaq_f64(vmlaq_f64(vmulq_f64(a2, *(float64x2_t *)algn_1E9645B10), v5, unk_1E9645B30), v6, unk_1E9645B50);
  float64x2_t v34 = (float64x2_t)_simd_pow_d2((simd_double2)vandq_s8(v7, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL)), (simd_double2)vdupq_n_s64(0x40029ACA6B29ACA7uLL));
  float64x2_t v8 = (float64x2_t)_simd_pow_d2((simd_double2)(unint64_t)*(_OWORD *)&vabsq_f64(v43), (simd_double2)xmmword_1A42D3550);
  if (matrix_lms_to_rgb_once != -1)
  {
    simd_double2 x = (simd_double2)v8;
    dispatch_once(&matrix_lms_to_rgb_once, &__block_literal_global_101);
    float64x2_t v8 = (float64x2_t)x;
  }
  v10.i64[0] = v39;
  *(void *)&v11.f64[0] = v39;
  *(void *)&v11.f64[1] = v35;
  v10.i64[1] = v35;
  int8x16_t v12 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
  v9.i64[0] = 0x8000000000000000;
  __asm { FMOV            V7.2D, #1.0 }
  float64x2_t v18 = vmulq_f64(v8, (float64x2_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f64(v43), (int8x16_t)vcgtzq_f64(v43)), vorrq_s8(vandq_s8((int8x16_t)v43, v9), _Q7), (int8x16_t)0));
  float64x2_t v19 = vmulq_f64(v34, (float64x2_t)vandq_s8(vorrq_s8(vandq_s8(v10, v12), _Q7), vorrq_s8((int8x16_t)vcltzq_f64(v11), (int8x16_t)vcgtzq_f64(v11))));
  float64x2_t v20 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v19, *(float64x2_t *)algn_1E9645B90), unk_1E9645BB0, v19, 1), v18, unk_1E9645BD0);
  float64x2_t v21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)matrix_lms_to_rgb_LMSToRGB, v19.f64[0]), (float64x2_t)xmmword_1E9645BA0, v19, 1), (float64x2_t)xmmword_1E9645BC0, v18.f64[0]);
  float64x2_t v22 = (float64x2_t)vorrq_s8(vandq_s8((int8x16_t)v20, v9), _Q7);
  float64x2_t v40 = (float64x2_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f64(v20), (int8x16_t)vcgtzq_f64(v20)), (int8x16_t)v22, (int8x16_t)0);
  float64x2_t v44 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v21, v12), _Q7), vorrq_s8((int8x16_t)vcltzq_f64(v21), (int8x16_t)vcgtzq_f64(v21)));
  float64x2_t v31 = vabsq_f64(v20);
  simd_double2 xa = (simd_double2)vabsq_f64(v21);
  v22.f64[0] = 12.92;
  int8x16_t v36 = (int8x16_t)vmulq_f64(v31, v22);
  simd_double2 v30 = _simd_pow_d2((simd_double2)vandq_s8((int8x16_t)v21, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL)), (simd_double2)vdupq_n_s64(0x3FDAAAAACE754379uLL));
  float64x2_t v23 = (float64x2_t)_simd_pow_d2((simd_double2)*(unint64_t *)&v31.f64[0], (simd_double2)xmmword_1A42D3560);
  v24.f64[0] = 1.055;
  v25.f64[0] = -0.055;
  int8x16_t v26 = (int8x16_t)vmlaq_f64(v25, v24, v23);
  float64x2_t v27 = (float64x2_t)vdupq_n_s64(0x3FF0E147AE147AE1uLL);
  int8x16_t v28 = (int8x16_t)vmlaq_f64((float64x2_t)vdupq_n_s64(0xBFAC28F5C28F5C29), v27, (float64x2_t)v30);
  v27.f64[0] = 0.0031308;
  float64x2_t result = vmulq_f64(v40, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64((int64x2_t)vcgtq_f64(v31, v27).u64[0]), v26, v36));
  *a1 = vmulq_f64(v44, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vcgtq_f64((float64x2_t)xa, (float64x2_t)vdupq_n_s64(0x3F69A5C37387B719uLL))), v28, (int8x16_t)vmulq_f64((float64x2_t)xa, (float64x2_t)vdupq_n_s64(0x4029D70A3D70A3D7uLL))));
  a1[1] = result;
  return result;
}

double __matrix_lms_to_rgb_block_invoke()
{
  __invert_d3();
  xmmword_1E9645BA0 = v3;
  unk_1E9645BB0 = v4;
  xmmword_1E9645BC0 = v5;
  unk_1E9645BD0 = v6;
  double result = *(double *)&v1;
  matrix_lms_to_rgb_LMSToRGB = v1;
  *(_OWORD *)algn_1E9645B90 = v2;
  return result;
}

double __matrix_ipt_to_lms_block_invoke()
{
  __invert_d3();
  xmmword_1E9645B20 = v3;
  unk_1E9645B30 = v4;
  xmmword_1E9645B40 = v5;
  unk_1E9645B50 = v6;
  double result = *(double *)&v1;
  matrix_ipt_to_lms_IPTToLMS = v1;
  *(_OWORD *)algn_1E9645B10 = v2;
  return result;
}

void _AuxiliaryImageCVPixelBufferReleaseBytesCallback_3487(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t ImageIOLibraryCore()
{
  if (!ImageIOLibraryCore_frameworkLibrary) {
    ImageIOLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  return ImageIOLibraryCore_frameworkLibrary;
}

uint64_t getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc()
{
  uint64_t v3 = 0;
  long long v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_ptr;
  uint64_t v6 = getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_ptr;
  if (!getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_ptr)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_block_invoke;
    v2[3] = &unk_1E5B2E0D8;
    v2[4] = &v3;
    __getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A423FA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_block_invoke(uint64_t a1)
{
  long long v2 = (void *)ImageIOLibraryCore();
  if (!v2)
  {
    long long v4 = (void *)abort_report_np();
    free(v4);
  }
  double result = dlsym(v2, "kCGImageAuxiliaryDataInfoPixelBuffer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ImageIOLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ImageIOLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void sub_1A4240B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void PFCGImageApplyTemporaryAVAssetImageGeneratorColorSpaceWorkaround(CGImageRef *a1)
{
  ColorSpace = CGImageGetColorSpace(*a1);
  if (CGColorSpaceUsesITUR_2100TF(ColorSpace))
  {
    uint64_t v3 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DB90]);
    if (v3)
    {
      long long v4 = v3;
      CGImageRef CopyWithColorSpace = CGImageCreateCopyWithColorSpace(*a1, v3);
      CFRelease(*a1);
      *a1 = CopyWithColorSpace;
      CFRelease(v4);
    }
  }
}

id PFStoryColorGradeKindToString(uint64_t a1)
{
  uint64_t v1 = 0;
  long long v2 = ColorGradeKindInfos;
  while (1)
  {
    uint64_t v3 = *v2;
    v2 += 2;
    if (v3 == a1) {
      break;
    }
    if (++v1 == 13)
    {
      id v4 = 0;
      goto LABEL_6;
    }
  }
  id v4 = (id)ColorGradeKindInfos[2 * v1 + 1];
LABEL_6:

  return v4;
}

uint64_t PFStoryColorGradeKindNamed(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = 0;
  uint64_t v3 = (id *)&qword_1E5B2D7B0;
  do
  {
    id v4 = *v3;
    if (v4 == v1)
    {

LABEL_9:
      uint64_t v7 = ColorGradeKindInfos[2 * v2];
      goto LABEL_10;
    }
    uint64_t v5 = v4;
    char v6 = [v4 isEqualToString:v1];

    if (v6) {
      goto LABEL_9;
    }
    ++v2;
    v3 += 2;
  }
  while (v2 != 13);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v9 = 138412290;
    id v10 = v1;
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "unsupported color grade kind '%@'", (uint8_t *)&v9, 0xCu);
  }
  uint64_t v7 = 0;
LABEL_10:

  return v7;
}

uint64_t PFStoryColorGradeKindGetTier(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 0xA) {
    return 0;
  }
  else {
    return qword_1A42D37B8[a1 - 2];
  }
}

uint64_t PFStoryColorGradeKindGetEnergy(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 0xA) {
    return 0;
  }
  else {
    return qword_1A42D3810[a1 - 2];
  }
}

uint64_t PFStoryColorGradeKindDefaultForColorGradeCategory(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 isEqualToString:@"silly"]) {
      goto LABEL_3;
    }
    if ([v2 isEqualToString:@"extreme"])
    {
      uint64_t v3 = 9;
      goto LABEL_10;
    }
    if (([v2 isEqualToString:@"energetic"] & 1) != 0
      || ([v2 isEqualToString:@"motivational"] & 1) != 0)
    {
      uint64_t v3 = 8;
      goto LABEL_10;
    }
    if (([v2 isEqualToString:@"inspirational"] & 1) != 0
      || ([v2 isEqualToString:@"playful"] & 1) != 0)
    {
LABEL_3:
      uint64_t v3 = 7;
    }
    else if ([v2 isEqualToString:@"epic"])
    {
      uint64_t v3 = 6;
    }
    else
    {
      if ([v2 isEqualToString:@"hopeful"]) {
        goto LABEL_19;
      }
      if ([v2 isEqualToString:@"sentimental"])
      {
        uint64_t v3 = 5;
        goto LABEL_10;
      }
      if ([v2 isEqualToString:@"romantic"])
      {
LABEL_19:
        uint64_t v3 = 4;
        goto LABEL_10;
      }
      if ([v2 isEqualToString:@"peaceful"])
      {
        uint64_t v3 = 10;
      }
      else if ([v2 isEqualToString:@"nostalgic"])
      {
        uint64_t v3 = 11;
      }
      else if ([v2 isEqualToString:@"reflective"])
      {
        uint64_t v3 = 12;
      }
      else
      {
        uint64_t v3 = 0;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_10:

  return v3;
}

void sub_1A424217C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 216), 8);
  _Block_object_dispose((const void *)(v33 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__81(uint64_t a1)
{
}

void sub_1A4243738(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1A4243AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x1A6259AE0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_1A42464DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4016(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4017(uint64_t a1)
{
}

void sub_1A4246624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4246CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A424D0E4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x1A424D034);
  }
  _Unwind_Resume(a1);
}

void sub_1A424D57C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x1A424D4CCLL);
  }
  _Unwind_Resume(a1);
}

BOOL PFPosterWantsLowLuminanceContent()
{
  uint64_t v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  char v1 = [v0 BOOLForKey:@"PI_PARALLAX_FORCE_ENABLE_LOW_LUMINANCE"];

  if (v1) {
    return 1;
  }
  if (PFPosterDeviceSupportsLowLuminance_onceToken != -1) {
    dispatch_once(&PFPosterDeviceSupportsLowLuminance_onceToken, &__block_literal_global_4177);
  }
  return PFPosterDeviceSupportsLowLuminance_supportsLowLuminance != 0;
}

uint64_t __PFPosterDeviceSupportsLowLuminance_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  PFPosterDeviceSupportsLowLuminance_supportsLowLuminance = result;
  return result;
}

uint64_t PFPosterDeviceSupportsSegmentation()
{
  return MGGetBoolAnswer();
}

uint64_t PFPosterEnableSettlingEffect()
{
  return _os_feature_enabled_impl();
}

uint64_t PFPosterEnableHeadroom()
{
  uint64_t v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  int v1 = [v0 BOOLForKey:@"PI_DISABLE_HEADROOM"];

  return _os_feature_enabled_impl() & (v1 ^ 1);
}

uint64_t PFPosterEnableSmartTextColor()
{
  return _os_feature_enabled_impl();
}

uint64_t PFPosterEnableCropVariant()
{
  uint64_t v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  int v1 = [v0 BOOLForKey:@"PI_POSTER_DISABLE_CROP_VARIANT"];

  return _os_feature_enabled_impl() & (v1 ^ 1);
}

void sub_1A424DEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4434(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4435(uint64_t a1)
{
}

void sub_1A424EF58(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1A4250428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4250AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4251060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4251854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4252320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4252500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4252A34(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A4256DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double PFDeviceScreenSize()
{
  uint64_t v0 = [MEMORY[0x1E4F39B60] mainDisplay];
  uint64_t v1 = v0;
  if (v0)
  {
    [v0 bounds];
    double v3 = v2;
  }
  else
  {
    double v3 = -1.0;
  }

  return v3;
}

double PFDeviceNativeScreenSize()
{
  uint64_t v0 = [MEMORY[0x1E4F39B60] mainDisplay];
  uint64_t v1 = v0;
  if (v0)
  {
    [v0 nativeSize];
    double v3 = v2;
  }
  else
  {
    double v3 = -1.0;
  }

  return v3;
}

double PFDeviceScreenScale()
{
  uint64_t v0 = [MEMORY[0x1E4F39B60] mainDisplay];
  uint64_t v1 = v0;
  if (v0)
  {
    double v2 = [v0 currentMode];
    double v3 = (double)(unint64_t)[v2 preferredScale];
  }
  else
  {
    double v3 = 1.0;
  }

  return v3;
}

double PFDeviceLockScreenFocusAreaRectNormalized()
{
  if (PFDeviceLockScreenFocusAreaRectNormalized_onceToken != -1) {
    dispatch_once(&PFDeviceLockScreenFocusAreaRectNormalized_onceToken, &__block_literal_global_4750);
  }
  return *(double *)&PFDeviceLockScreenFocusAreaRectNormalized_sDeviceLockScreenFocusAreaRect_0;
}

void __PFDeviceLockScreenFocusAreaRectNormalized_block_invoke()
{
  PFDeviceLockScreenFocusAreaRectNormalized_sDeviceLockScreenFocusAreaRect_0 = 0;
  PFDeviceLockScreenFocusAreaRectNormalized_sDeviceLockScreenFocusAreaRect_1 = 0;
  PFDeviceLockScreenFocusAreaRectNormalized_sDeviceLockScreenFocusAreaRect_2 = 0x3FF0000000000000;
  PFDeviceLockScreenFocusAreaRectNormalized_sDeviceLockScreenFocusAreaRect_3 = 0x3FF0000000000000;
  dispatch_block_t v0 = dispatch_block_create((dispatch_block_flags_t)0, &__block_literal_global_2_4752);
  id v1 = objc_alloc_init((Class)getSBSWallpaperServiceClass());
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __PFDeviceLockScreenFocusAreaRectNormalized_block_invoke_3;
  v5[3] = &unk_1E5B2DD60;
  id v2 = v0;
  id v6 = v2;
  [v1 fetchContentCutoutBoundsForVariant:0 orientation:1 completionHandler:v5];
  dispatch_time_t v3 = dispatch_time(0, 3000000000);
  if (dispatch_block_wait(v2, v3) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v4 = 0;
    _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "[PFDeviceLockScreenFocusAreaRectNormalized] timeout while requesting lockscreen focus area", v4, 2u);
  }
  [v1 invalidate];
}

id getSBSWallpaperServiceClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  dispatch_block_t v0 = (void *)getSBSWallpaperServiceClass_softClass;
  uint64_t v7 = getSBSWallpaperServiceClass_softClass;
  if (!getSBSWallpaperServiceClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSBSWallpaperServiceClass_block_invoke;
    v3[3] = &unk_1E5B2E0D8;
    v3[4] = &v4;
    __getSBSWallpaperServiceClass_block_invoke((uint64_t)v3);
    dispatch_block_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1A4257CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __PFDeviceLockScreenFocusAreaRectNormalized_block_invoke_3(uint64_t a1, double a2, double a3, double a4, double a5)
{
  PFDeviceLockScreenFocusAreaRectNormalized_sDeviceLockScreenFocusAreaRect_0 = *(void *)&a2;
  PFDeviceLockScreenFocusAreaRectNormalized_sDeviceLockScreenFocusAreaRect_1 = *(void *)&a3;
  PFDeviceLockScreenFocusAreaRectNormalized_sDeviceLockScreenFocusAreaRect_2 = *(void *)&a4;
  PFDeviceLockScreenFocusAreaRectNormalized_sDeviceLockScreenFocusAreaRect_3 = *(void *)&a5;
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

Class __getSBSWallpaperServiceClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = __SpringBoardServicesLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E5B2DDA8;
    uint64_t v6 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
    id v2 = (void *)v4[0];
    if (!SpringBoardServicesLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("SBSWallpaperService");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    id v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getSBSWallpaperServiceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

double PFDeviceLockScreenApproximateTimeRectNormalized_SBS(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a1 != 1)
  {
    if (a1 == 2)
    {
      uint64_t v1 = 4;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)float64x2_t v24 = 0;
        _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "interface orientation is unknown", v24, 2u);
      }
      uint64_t v1 = 0;
    }
  }
  *(void *)float64x2_t v24 = 0;
  float64x2_t v25 = (double *)v24;
  uint64_t v26 = 0x4010000000;
  float64x2_t v27 = &unk_1A42EF38E;
  long long v2 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  long long v28 = *MEMORY[0x1E4F1DB28];
  long long v29 = v2;
  dispatch_time_t v3 = dispatch_group_create();
  id v4 = objc_alloc_init((Class)getSBSWallpaperServiceClass());
  dispatch_group_enter(v3);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __PFDeviceLockScreenApproximateTimeRectNormalized_SBS_block_invoke;
  void v21[3] = &unk_1E5B2DD88;
  float64x2_t v23 = v24;
  long long v5 = v3;
  float64x2_t v22 = v5;
  [v4 fetchLimitedOcclusionBoundsForOrientation:v1 completionHandler:v21];
  dispatch_time_t v6 = dispatch_time(0, 3000000000);
  dispatch_group_wait(v5, v6);
  double v8 = v25[6];
  double v7 = v25[7];
  double v9 = v25[4] + v8 * 0.0;
  double v10 = v25[5] + v7 * 0.0;
  double v11 = v7 * 1.33333333;
  int8x16_t v12 = MEMORY[0x1E4F14500];
  id v13 = MEMORY[0x1E4F14500];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(double *)float64x2_t v20 = v9;
    *(double *)&v20[1] = v10;
    *(double *)&void v20[2] = v8;
    *(double *)&v20[3] = v11;
    id v14 = [MEMORY[0x1E4F29238] valueWithBytes:v20 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
    *(_DWORD *)buf = 138412290;
    float64x2_t v31 = v14;
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "[PFDeviceLockScreenApproximateTimeRectNormalized_SBS] Time rect from limited occlusion bounds: %@", buf, 0xCu);
  }
  [v4 invalidate];
  unint64_t v15 = MEMORY[0x1E4F14500];
  id v16 = MEMORY[0x1E4F14500];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(double *)float64x2_t v19 = v9;
    *(double *)&v19[1] = v10;
    *(double *)&v19[2] = v8;
    *(double *)&v19[3] = v11;
    int v17 = [MEMORY[0x1E4F29238] valueWithBytes:v19 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
    *(_DWORD *)buf = 138412290;
    float64x2_t v31 = v17;
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "[PFDeviceLockScreenApproximateTimeRectNormalized_SBS] Returning: %@", buf, 0xCu);
  }
  _Block_object_dispose(v24, 8);
  return v9;
}

void sub_1A4258214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double PFDeviceLockScreenApproximateTimeRectNormalized(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  float64x2_t v25 = &v24;
  uint64_t v26 = 0x2050000000;
  long long v2 = (void *)getPRUISPosterLayoutUtilitiesClass_softClass;
  uint64_t v27 = getPRUISPosterLayoutUtilitiesClass_softClass;
  if (!getPRUISPosterLayoutUtilitiesClass_softClass)
  {
    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 3221225472;
    long long v29 = __getPRUISPosterLayoutUtilitiesClass_block_invoke;
    simd_double2 v30 = &unk_1E5B2E0D8;
    float64x2_t v31 = &v24;
    __getPRUISPosterLayoutUtilitiesClass_block_invoke((uint64_t)&buf);
    long long v2 = (void *)v25[3];
  }
  double v3 = *MEMORY[0x1E4F1DB28];
  CGFloat v4 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
  CGFloat v5 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
  CGFloat v6 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  id v7 = v2;
  _Block_object_dispose(&v24, 8);
  if (v7 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    if (a1 == 2) {
      uint64_t v8 = 4;
    }
    else {
      uint64_t v8 = 1;
    }
    uint64_t v24 = 0;
    float64x2_t v25 = &v24;
    uint64_t v26 = 0x2020000000;
    double v9 = (id *)getPRPosterRoleLockScreenSymbolLoc_ptr;
    uint64_t v27 = getPRPosterRoleLockScreenSymbolLoc_ptr;
    if (!getPRPosterRoleLockScreenSymbolLoc_ptr)
    {
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 3221225472;
      long long v29 = __getPRPosterRoleLockScreenSymbolLoc_block_invoke;
      simd_double2 v30 = &unk_1E5B2E0D8;
      float64x2_t v31 = &v24;
      __getPRPosterRoleLockScreenSymbolLoc_block_invoke((uint64_t)&buf);
      double v9 = (id *)v25[3];
    }
    _Block_object_dispose(&v24, 8);
    if (!v9)
    {
      dlerror();
      abort_report_np();
      __break(1u);
    }
    id v10 = *v9;
    id v23 = 0;
    double v11 = [v7 titleBoundsForLayout:0 orientation:v8 role:v10 error:&v23];
    id v12 = v23;
    if (v11)
    {
      [v11 rectValue];
      double v3 = v13;
      CGFloat v4 = v14;
      CGFloat v5 = v15;
      CGFloat v6 = v16;
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v12;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "PFDeviceLockScreenApproximateTimeRect: PRUISPosterLayoutUtilities.getTitleBounds returned an error: %{public}@", (uint8_t *)&buf, 0xCu);
    }
  }
  v33.origin.simd_double2 x = v3;
  v33.origin.CGFloat y = v4;
  v33.size.CGFloat width = v5;
  v33.size.CGFloat height = v6;
  if (CGRectIsEmpty(v33))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "PFDeviceLockScreenApproximateTimeRect: Falling back to SBS", (uint8_t *)&buf, 2u);
    }
    double v3 = PFDeviceLockScreenApproximateTimeRectNormalized_SBS(a1);
    CGFloat v4 = v17;
    CGFloat v5 = v18;
    CGFloat v6 = v19;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    *(double *)float64x2_t v22 = v3;
    *(CGFloat *)&v22[1] = v4;
    *(CGFloat *)&v22[2] = v5;
    *(CGFloat *)&void v22[3] = v6;
    float64x2_t v20 = [MEMORY[0x1E4F29238] valueWithBytes:v22 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v20;
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "[PFDeviceLockScreenApproximateTimeRectNormalized] Returning: %@", (uint8_t *)&buf, 0xCu);
  }
  return v3;
}

void sub_1A42586D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPRUISPosterLayoutUtilitiesClass_block_invoke(uint64_t a1)
{
  if (!PosterBoardUIServicesLibraryCore_frameworkLibrary) {
    PosterBoardUIServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  Class result = objc_getClass("PRUISPosterLayoutUtilities");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPRUISPosterLayoutUtilitiesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPRPosterRoleLockScreenSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!PosterKitLibraryCore_frameworkLibrary)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = __PosterKitLibraryCore_block_invoke;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E5B2DDD8;
    uint64_t v7 = 0;
    PosterKitLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
    double v3 = (void *)v5[0];
    long long v2 = (void *)PosterKitLibraryCore_frameworkLibrary;
    if (PosterKitLibraryCore_frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      double v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  long long v2 = (void *)PosterKitLibraryCore_frameworkLibrary;
LABEL_5:
  Class result = dlsym(v2, "PRPosterRoleLockScreen");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPRPosterRoleLockScreenSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PosterKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PosterKitLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

uint64_t __PosterBoardUIServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PosterBoardUIServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void PFFrameApplyingContentsRectInBounds(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  if (a9 > 0.0
    && a7 != 0.0
    && a8 != 0.0
    && (a7 != *MEMORY[0x1E4F8A250] || a8 != *(double *)(MEMORY[0x1E4F8A250] + 8)))
  {
    double v34 = *MEMORY[0x1E4F8A250];
    double v31 = *(double *)(MEMORY[0x1E4F8A250] + 8);
    if (!CGRectIsEmpty(*(CGRect *)&a1))
    {
      double v25 = a3 * a9;
      if (a3 * a9 != 0.0 && a4 != 0.0 && (v25 != v34 || a4 != v31))
      {
        double v32 = a2 + 0.0 + a4 * 0.5;
        double v35 = a1 * a9 + 0.0 + v25 * 0.5;
        PFSizeWithAspectRatioFittingSize();
        CGFloat v28 = v27;
        CGFloat v30 = v29;
        CGFloat v33 = v32 + v29 * -0.5;
        CGFloat v36 = v35 + v27 * -0.5;
        v38.origin.simd_double2 x = a5;
        v38.origin.CGFloat y = a6;
        v38.size.CGFloat width = a7;
        v38.size.CGFloat height = a8;
        CGRectGetWidth(v38);
        v39.origin.simd_double2 x = v36;
        v39.origin.CGFloat y = v33;
        v39.size.CGFloat width = v28;
        v39.size.CGFloat height = v30;
        CGRectGetWidth(v39);
      }
    }
  }
}

void PFStoryRecipeLibraryKindEnumerateSupportedValuesUsingBlock(void *a1)
{
  id v1 = a1;
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2020000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __PFStoryRecipeLibraryKindEnumerateSupportedValuesUsingBlock_block_invoke;
  v4[3] = &unk_1E5B2DDF8;
  long long v6 = v7;
  id v2 = v1;
  id v5 = v2;
  double v3 = (void (**)(void, void))MEMORY[0x1A6259AE0](v4);
  v3[2](v3, 1);

  _Block_object_dispose(v7, 8);
}

void sub_1A4258F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __PFStoryRecipeLibraryKindEnumerateSupportedValuesUsingBlock_block_invoke(uint64_t result)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24)) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

uint64_t __Block_byref_object_copy__4910(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4911(uint64_t a1)
{
}

void sub_1A425B48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose((const void *)(v71 - 256), 8);
  _Block_object_dispose((const void *)(v71 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1A425BD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Block_object_dispose((const void *)(v15 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5023(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5024(uint64_t a1)
{
}

void sub_1A425C708(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

size_t pf_estimateFullAnimatedImageMemoryCost(CGImageSource *a1)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  size_t Count = CGImageSourceGetCount(a1);
  uint64_t v9 = *MEMORY[0x1E4F2FF08];
  v10[0] = MEMORY[0x1E4F1CC28];
  CFDictionaryRef v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];
  ImageAtIndesimd_double2 x = CGImageSourceCreateImageAtIndex(a1, 0, v3);
  if (ImageAtIndex)
  {
    id v5 = ImageAtIndex;
    size_t Height = CGImageGetHeight(ImageAtIndex);
    size_t v7 = Height * Count * CGImageGetBytesPerRow(v5);
    CGImageRelease(v5);
  }
  else
  {
    size_t v7 = 20971521;
  }

  return v7;
}

void sub_1A425D878(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1A425DC90(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1A425E1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void PIImageMedataSetValueMatchingImageProperty(CGImageMetadata *a1, const __CFString *a2, const __CFString *a3, void *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  if (!CGImageMetadataSetValueMatchingImageProperty(a1, a2, a3, v7))
  {
    char v8 = PFMetadataBuilderLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 138543875;
      CFStringRef v10 = a2;
      __int16 v11 = 2114;
      CFStringRef v12 = a3;
      __int16 v13 = 2113;
      id v14 = v7;
      _os_log_error_impl(&dword_1A41FE000, v8, OS_LOG_TYPE_ERROR, "[XMP metadata builder] Failed to set value for dictionary name %{public}@ key %{public}@ value %{private}@", (uint8_t *)&v9, 0x20u);
    }
  }
}

void __PIUpdateMetadataValuesFromDicationary_block_invoke(uint64_t a1, const __CFString *a2, void *a3)
{
}

id PFMetadataBuilderLog()
{
  if (PFMetadataBuilderLog_onceToken[0] != -1) {
    dispatch_once(PFMetadataBuilderLog_onceToken, &__block_literal_global_5421);
  }
  dispatch_block_t v0 = (void *)PFMetadataBuilderLog_log;

  return v0;
}

uint64_t __PFMetadataBuilderLog_block_invoke()
{
  PFMetadataBuilderLog_log = (uint64_t)os_log_create("com.apple.photos.PFMetadataBuilder", "Default");

  return MEMORY[0x1F41817F8]();
}

id PFStoryDurationInfoDescription(uint64_t a1)
{
  id v2 = [NSString alloc];
  CMTime v8 = *(CMTime *)(a1 + 24);
  CFDictionaryRef v3 = __PFStoryDurationInfoDescription_block_invoke(&v8);
  CMTime v8 = *(CMTime *)a1;
  CGFloat v4 = __PFStoryDurationInfoDescription_block_invoke(&v8);
  CMTime v8 = *(CMTime *)(a1 + 48);
  id v5 = __PFStoryDurationInfoDescription_block_invoke(&v8);
  long long v6 = (void *)[v2 initWithFormat:@"{ pref: %@, min: %@, max: %@ }", v3, v4, v5];

  return v6;
}

id __PFStoryDurationInfoDescription_block_invoke(CMTime *a1)
{
  id v2 = [NSString alloc];
  CMTime time = *a1;
  CFDictionaryRef v3 = objc_msgSend(v2, "initWithFormat:", @"%0.1f", CMTimeGetSeconds(&time));

  return v3;
}

__CFString *PFStringFromPFAdjustmentStyleCast(int a1)
{
  if (a1 < 16)
  {
    if (a1 <= 0xF) {
      return off_1E5B2E020[(unsigned __int16)a1];
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Invalid type %d: %s", (unsigned __int16)a1, "NSString *PFStringFromPFAdjustmentStyleCast(PFAdjustmentStyleCast)");
  }
  return @"PFAdjustmentStyleCastLAST";
}

id PFStringFromPFAdjustmentStyleCastShort(int a1)
{
  if (a1 < 16)
  {
    if (a1 <= 0xF)
    {
      uint64_t v1 = off_1E5B2E020[(unsigned __int16)a1];
      goto LABEL_6;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Invalid type %d: %s", (unsigned __int16)a1, "NSString *PFStringFromPFAdjustmentStyleCast(PFAdjustmentStyleCast)");
  }
  uint64_t v1 = @"PFAdjustmentStyleCastLAST";
LABEL_6:
  id v2 = v1;
  CFDictionaryRef v3 = -[__CFString substringFromIndex:](v2, "substringFromIndex:", [@"PFAdjustmentStyleCast" length]);
  CGFloat v4 = [v3 lowercaseString];

  return v4;
}

uint64_t PFAdjustmentStyleCastFromString(void *a1)
{
  uint64_t v1 = [a1 lowercaseString];
  unsigned __int16 v2 = 0;
  while (1)
  {
    CFDictionaryRef v3 = PFStringFromPFAdjustmentStyleCastShort((__int16)v2);
    char v4 = [v1 isEqualToString:v3];

    if (v4) {
      break;
    }
    unsigned int v5 = v2++;
    if (v5 >= 0xF)
    {
      unsigned __int16 v2 = 0;
      break;
    }
  }

  return (__int16)v2;
}

id PFGMTTimeZone()
{
  if (PFGMTTimeZone_onceToken[0] != -1) {
    dispatch_once(PFGMTTimeZone_onceToken, &__block_literal_global_5644);
  }
  dispatch_block_t v0 = (void *)PFGMTTimeZone_gmtTimeZone;

  return v0;
}

uint64_t __PFGMTTimeZone_block_invoke()
{
  PFGMTTimeZone_gmtTimeZone = [MEMORY[0x1E4F1CAF0] timeZoneForSecondsFromGMT:0];

  return MEMORY[0x1F41817F8]();
}

id PFDateFormatterForTimeZone(void *a1)
{
  return PFDateFormatterForTimeZoneAndFormat(a1, @"yyyy:MM:dd HH:mm:ss");
}

id PFDateFormatterForTimeZoneAndFormat(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (PFDateFormatterForTimeZoneAndFormat_onceToken != -1) {
    dispatch_once(&PFDateFormatterForTimeZoneAndFormat_onceToken, &__block_literal_global_3);
  }
  unsigned int v5 = [(id)PFDateFormatterForTimeZoneAndFormat_dateFormattersByTimeZone objectForKeyedSubscript:v3];
  if (!v5)
  {
    unsigned int v5 = objc_opt_new();
    [(id)PFDateFormatterForTimeZoneAndFormat_dateFormattersByTimeZone setObject:v5 forKeyedSubscript:v3];
  }
  long long v6 = (__CFString *)v4;
  id v7 = v6;
  if (v6) {
    CMTime v8 = v6;
  }
  else {
    CMTime v8 = @"yyyy:MM:dd HH:mm:ss";
  }
  int v9 = [v5 objectForKeyedSubscript:v8];
  if (!v9)
  {
    int v9 = objc_opt_new();
    [v9 setCalendar:PFDateFormatterForTimeZoneAndFormat_calendar];
    [v9 setDateFormat:v8];
    [v9 setTimeZone:v3];
    [v5 setObject:v9 forKeyedSubscript:v8];
  }

  return v9;
}

uint64_t __PFDateFormatterForTimeZoneAndFormat_block_invoke()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = (void *)PFDateFormatterForTimeZoneAndFormat_dateFormattersByTimeZone;
  PFDateFormatterForTimeZoneAndFormat_dateFormattersByTimeZone = v0;

  id v2 = objc_alloc(MEMORY[0x1E4F1C9A8]);
  PFDateFormatterForTimeZoneAndFormat_calendar = [v2 initWithCalendarIdentifier:*MEMORY[0x1E4F1C318]];

  return MEMORY[0x1F41817F8]();
}

id PFLocalDateFromGMTDate(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1CAF0];
  id v2 = a1;
  id v3 = [v1 localTimeZone];
  id v4 = PFDateFromGMTDateTimeZone(v2, v3);

  return v4;
}

id PFDateFromGMTDateTimeZone(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = objc_msgSend(v3, "dateByAddingTimeInterval:", (double)objc_msgSend(a2, "secondsFromGMTForDate:", v3));

  return v4;
}

id PFGMTDateFromLocalDate(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1CAF0];
  id v2 = a1;
  id v3 = [v1 localTimeZone];
  id v4 = PFGMTDateFromDateTimeZone(v2, v3);

  return v4;
}

id PFGMTDateFromDateTimeZone(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = objc_msgSend(v3, "dateByAddingTimeInterval:", (double)-objc_msgSend(a2, "secondsFromGMTForDate:", v3));

  return v4;
}

id PFTimeZoneDateFromGMTDate(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = objc_msgSend(v3, "dateByAddingTimeInterval:", (double)objc_msgSend(a2, "secondsFromGMTForDate:", v3));

  return v4;
}

id PFDateFromStringTimeZoneFormat(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (onceToken[0] != -1) {
    dispatch_once(onceToken, &__block_literal_global_8);
  }
  uint64_t v19 = 0;
  float64x2_t v20 = &v19;
  uint64_t v21 = 0x3032000000;
  float64x2_t v22 = __Block_byref_object_copy__5652;
  id v23 = __Block_byref_object_dispose__5653;
  id v24 = 0;
  CMTime v8 = dateQueue;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __PFDateFromStringTimeZoneFormat_block_invoke_10;
  v14[3] = &unk_1E5B2F180;
  id v15 = v6;
  id v16 = v7;
  id v17 = v5;
  double v18 = &v19;
  id v9 = v5;
  id v10 = v7;
  id v11 = v6;
  dispatch_sync(v8, v14);
  id v12 = (id)v20[5];

  _Block_object_dispose(&v19, 8);

  return v12;
}

uint64_t __Block_byref_object_copy__5652(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5653(uint64_t a1)
{
}

void __PFDateFromStringTimeZoneFormat_block_invoke_10(uint64_t a1)
{
  PFDateFormatterForTimeZoneAndFormat(*(void **)(a1 + 32), *(void **)(a1 + 40));
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [v5 dateFromString:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t __PFDateFromStringTimeZoneFormat_block_invoke()
{
  dateQueue = (uint64_t)dispatch_queue_create("DateFormattersPropertyQueue", 0);

  return MEMORY[0x1F41817F8]();
}

id PFDateFromString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = PFGMTTimeZone();
  uint64_t v3 = PFDateFromStringTimeZoneFormat(v1, v2, 0);

  return v3;
}

id PFStringFromDate(void *a1)
{
  id v1 = a1;
  uint64_t v2 = PFGMTTimeZone();
  uint64_t v3 = PFStringFromDateTimeZoneFormat(v1, v2, 0);

  return v3;
}

id PFStringFromDateTimeZoneFormat(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (onceToken[0] != -1) {
    dispatch_once(onceToken, &__block_literal_global_12_5662);
  }
  uint64_t v19 = 0;
  float64x2_t v20 = &v19;
  uint64_t v21 = 0x3032000000;
  float64x2_t v22 = __Block_byref_object_copy__5652;
  id v23 = __Block_byref_object_dispose__5653;
  id v24 = 0;
  CMTime v8 = dateQueue;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __PFStringFromDateTimeZoneFormat_block_invoke_2;
  v14[3] = &unk_1E5B2F180;
  id v15 = v6;
  id v16 = v7;
  id v17 = v5;
  double v18 = &v19;
  id v9 = v5;
  id v10 = v7;
  id v11 = v6;
  dispatch_sync(v8, v14);
  id v12 = (id)v20[5];

  _Block_object_dispose(&v19, 8);

  return v12;
}

void __PFStringFromDateTimeZoneFormat_block_invoke_2(uint64_t a1)
{
  PFDateFormatterForTimeZoneAndFormat(*(void **)(a1 + 32), *(void **)(a1 + 40));
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [v5 stringFromDate:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t __PFStringFromDateTimeZoneFormat_block_invoke()
{
  dateQueue = (uint64_t)dispatch_queue_create("DateFormattersPropertyQueue", 0);

  return MEMORY[0x1F41817F8]();
}

id getVNObservationClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getVNObservationClass_softClass;
  uint64_t v7 = getVNObservationClass_softClass;
  if (!getVNObservationClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getVNObservationClass_block_invoke;
    v3[3] = &unk_1E5B2E0D8;
    v3[4] = &v4;
    __getVNObservationClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1A4262EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getVNEspressoModelImageprintClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getVNEspressoModelImageprintClass_softClass;
  uint64_t v7 = getVNEspressoModelImageprintClass_softClass;
  if (!getVNEspressoModelImageprintClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getVNEspressoModelImageprintClass_block_invoke;
    v3[3] = &unk_1E5B2E0D8;
    v3[4] = &v4;
    __getVNEspressoModelImageprintClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1A4262FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getVNEspressoModelImageprintClass_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VNEspressoModelImageprint");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNEspressoModelImageprintClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    VisionLibrary();
  }
}

void VisionLibrary()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!VisionLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __VisionLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E5B2E0F8;
    uint64_t v3 = 0;
    VisionLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
    uint64_t v0 = (void *)v1[0];
    if (VisionLibraryCore_frameworkLibrary)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      uint64_t v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

uint64_t __VisionLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  VisionLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getVNObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VNObservation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    long long v2 = (PFCameraMetadataJSONDebugSerialization *)abort_report_np();
    [(PFCameraMetadataJSONDebugSerialization *)v2 addObject:v4 forKey:v5];
  }
}

void sub_1A4263F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

Class __getVNFeaturePrintObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNFeaturePrintObservation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNFeaturePrintObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)getVNSceneObservationClass(v3);
  }
  return result;
}

id getVNSceneObservationClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getVNSceneObservationClass_softClass;
  uint64_t v7 = getVNSceneObservationClass_softClass;
  if (!getVNSceneObservationClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getVNSceneObservationClass_block_invoke;
    v3[3] = &unk_1E5B2E0D8;
    v3[4] = &v4;
    __getVNSceneObservationClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1A42640A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getVNClassificationObservationClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getVNClassificationObservationClass_softClass;
  uint64_t v7 = getVNClassificationObservationClass_softClass;
  if (!getVNClassificationObservationClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getVNClassificationObservationClass_block_invoke;
    v3[3] = &unk_1E5B2E0D8;
    v3[4] = &v4;
    __getVNClassificationObservationClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1A426418C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNPixelBufferObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNPixelBufferObservation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNPixelBufferObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)getVNSaliencyImageObservationClass(v3);
  }
  return result;
}

id getVNSaliencyImageObservationClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getVNSaliencyImageObservationClass_softClass;
  uint64_t v7 = getVNSaliencyImageObservationClass_softClass;
  if (!getVNSaliencyImageObservationClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getVNSaliencyImageObservationClass_block_invoke;
    v3[3] = &unk_1E5B2E0D8;
    v3[4] = &v4;
    __getVNSaliencyImageObservationClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1A42642E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNDetectedObjectObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNDetectedObjectObservation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNDetectedObjectObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__getVNRectangleObservationClass_block_invoke(v3);
  }
  return result;
}

Class __getVNRectangleObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNRectangleObservation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNRectangleObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)getVNRecognizedObjectObservationClass(v3);
  }
  return result;
}

id getVNRecognizedObjectObservationClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getVNRecognizedObjectObservationClass_softClass;
  uint64_t v7 = getVNRecognizedObjectObservationClass_softClass;
  if (!getVNRecognizedObjectObservationClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getVNRecognizedObjectObservationClass_block_invoke;
    v3[3] = &unk_1E5B2E0D8;
    v3[4] = &v4;
    __getVNRecognizedObjectObservationClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1A42644A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getVNRecognizedObjectObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VNRecognizedObjectObservation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNRecognizedObjectObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = abort_report_np();
    __getVNSaliencyImageObservationClass_block_invoke(v2);
  }
}

void __getVNSaliencyImageObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VNSaliencyImageObservation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNSaliencyImageObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = abort_report_np();
    __getVNClassificationObservationClass_block_invoke(v2);
  }
}

void __getVNClassificationObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VNClassificationObservation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNClassificationObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = abort_report_np();
    __getVNSceneObservationClass_block_invoke(v2);
  }
}

void __getVNSceneObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VNSceneObservation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNSceneObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = (_PFCameraMetadataAVMetadataObject *)abort_report_np();
    [(_PFCameraMetadataAVMetadataObject *)v2 .cxx_destruct];
  }
}

id getVNFaceObservationClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getVNFaceObservationClass_softClass;
  uint64_t v7 = getVNFaceObservationClass_softClass;
  if (!getVNFaceObservationClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getVNFaceObservationClass_block_invoke;
    v3[3] = &unk_1E5B2E0D8;
    v3[4] = &v4;
    __getVNFaceObservationClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1A4264CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getVNFaceObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VNFaceObservation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNFaceObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = (PFCameraMetadata *)abort_report_np();
    [(PFCameraMetadata *)v2 encodeWithCoder:v4];
  }
}

void sub_1A4266634(_Unwind_Exception *a1)
{
}

Class __getVNImageAestheticsObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNImageAestheticsObservation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNImageAestheticsObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__84__PFCameraMetadataSerialization_deserializedMetadataFromCameraClientMetadata_error___block_invoke(v3);
  }
  return result;
}

void sub_1A4266928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNFaceprintClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNFaceprint");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNFaceprintClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__getVNFaceTorsoprintClass_block_invoke(v3);
  }
  return result;
}

Class __getVNFaceTorsoprintClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNFaceTorsoprint");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNFaceTorsoprintClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = (void *)abort_report_np();
    return (Class)+[PFCameraMetadataSerialization deserializedMetadataFromPrivateClientMetadata:v5 error:v6];
  }
  return result;
}

void sub_1A426D648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6379(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6380(uint64_t a1)
{
}

__CFString *operator||(uint64_t a1, int a2)
{
  switch(a1)
  {
    case 3:
      uint64_t v3 = @"headroom";
      SEL v4 = @"h";
      goto LABEL_7;
    case 2:
      uint64_t v3 = @"target";
      SEL v4 = @"t";
      goto LABEL_7;
    case 1:
      uint64_t v3 = @"none";
      SEL v4 = @"n";
LABEL_7:
      if (a2) {
        uint64_t v3 = v4;
      }
      id v5 = v3;
      return v5;
  }
  id v5 = @"-";
  return v5;
}

__CFString *OverlapStrategyDescription(uint64_t a1, int a2)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = @"none";
      SEL v4 = @"n";
      goto LABEL_9;
    case 2:
      uint64_t v3 = @"target";
      SEL v4 = @"t";
      goto LABEL_9;
    case 3:
      uint64_t v3 = @"avoid";
      SEL v4 = @"a";
      goto LABEL_9;
    case 4:
      uint64_t v3 = @"fmdavoid";
      SEL v4 = @"m";
LABEL_9:
      if (a2) {
        uint64_t v3 = v4;
      }
      id v5 = v3;
      break;
    default:
      id v5 = @"-";
      break;
  }
  return v5;
}

__CFString *ParallaxStrategyDescription(uint64_t a1, int a2)
{
  if (a1 == 1)
  {
    uint64_t v3 = @"off";
    SEL v4 = @"n";
    goto LABEL_5;
  }
  if (a1 == 2)
  {
    uint64_t v3 = @"on";
    SEL v4 = @"p";
LABEL_5:
    if (a2) {
      uint64_t v3 = v4;
    }
    id v5 = v3;
    return v5;
  }
  id v5 = @"-";
  return v5;
}

__CFString *InactiveStrategyDescription(uint64_t a1, int a2)
{
  if (a1 == 2)
  {
    uint64_t v3 = @"avoid";
    SEL v4 = @"i";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v3 = @"none";
    SEL v4 = @"n";
LABEL_5:
    if (a2) {
      uint64_t v3 = v4;
    }
    id v5 = v3;
    return v5;
  }
  id v5 = @"-";
  return v5;
}

__CFString *PFPosterClassificationName(unint64_t a1)
{
  if (a1 > 5) {
    return @"person";
  }
  else {
    return off_1E5B2E1E8[a1];
  }
}

uint64_t PFPosterClassificationNamed(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"person"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"pet"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"nature"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"cityscape"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"other"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__CFString *PFParallaxLayoutClockLayerOrderNamed(void *a1)
{
  id v1 = a1;
  uint64_t v2 = @"ClockAboveForeground";
  if (([v1 isEqualToString:@"ClockAboveForeground"] & 1) == 0
    && [v1 isEqualToString:@"ClockAboveBackground"])
  {
    uint64_t v2 = @"ClockAboveBackground";
  }

  return v2;
}

void sub_1A4275A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A427744C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  std::unique_ptr<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::reset[abi:ne180100]((uint64_t *)&buf);
  if (a2 == 1)
  {
    id v15 = __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v15 + 16))(v15);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v16;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Error reading SceneTaxonomy index: %s.", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1A4277370);
  }
  _Unwind_Resume(a1);
}

void sub_1A42776C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::interprocess::ipcdetail::placement_destroy<boost::unordered::unordered_map<unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>,boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::~placement_destroy()
{
}

char *boost::interprocess::ipcdetail::placement_destroy<boost::unordered::unordered_map<unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>,boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::destroy_n(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    int64_t v7 = (char *)&v33 - (char *)&v29;
    do
    {
      if (*(void *)(a2 + 56) != 1)
      {
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v34, a2, *(void *)(a2 + 24));
        if (v34 == 1) {
          CMTime v8 = 0;
        }
        else {
          CMTime v8 = (char *)&v34 + v34;
        }
        uint64_t v9 = *(void *)v8;
        int64_t v10 = v8 - (char *)&v33;
        if (v9 == 1) {
          int64_t v10 = 0;
        }
        uint64_t v11 = v10 + v9;
        int64_t v13 = (char *)&v33 - (char *)&v31;
        int64_t v12 = (char *)&v33 - (char *)&v32;
        if (v11 == 1) {
          int64_t v12 = 0;
        }
        uint64_t v14 = v12 + v11;
        uint64_t v32 = v14;
        int64_t v33 = v11;
        if (v11 == 1) {
          int64_t v13 = 0;
        }
        if (v14 == 1) {
          id v15 = 0;
        }
        else {
          id v15 = (char *)&v32 + v14;
        }
        uint64_t v16 = *((void *)v15 + 2);
        uint64_t v17 = v15 + 16 - (char *)&v34;
        if (v16 == 1) {
          uint64_t v17 = 0;
        }
        uint64_t v34 = v17 + v16;
        uint64_t v31 = v13 + v11;
        std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a2 + 16), &v31);
        uint64_t v18 = v34;
        int64_t v19 = (char *)&v34 - (char *)&v33;
        if (v34 == 1) {
          int64_t v19 = 0;
        }
        while (1)
        {
          int64_t v20 = v19 + v18;
          int64_t v33 = v20;
          if (v20 == 1) {
            break;
          }
          uint64_t v21 = (char *)&v33 + v20;
          if (v20 + v7 == 1) {
            uint64_t v21 = 0;
          }
          uint64_t v22 = *((void *)v21 + 2);
          int64_t v29 = v20 + v7;
          uint64_t v23 = v21 + 16 - (char *)&v30;
          if (v22 == 1) {
            uint64_t v23 = 0;
          }
          uint64_t v30 = v23 + v22;
          int64_t v24 = v20 + (char *)&v33 - (char *)&v28;
          int64_t v28 = v24;
          if (v24 == 1) {
            int64_t v25 = 0;
          }
          else {
            int64_t v25 = (char *)&v28 - (char *)&v34;
          }
          uint64_t v34 = v25 + v24;
          std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a2 + 16), &v34);
          uint64_t v18 = v30;
          if (v30 == 1) {
            int64_t v19 = 0;
          }
          else {
            int64_t v19 = (char *)&v30 - (char *)&v33;
          }
        }
        Class result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::destroy_buckets((void *)a2);
        *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x360], 8) = xmmword_1A42D3510;
        *(void *)(a2 + 32) = 0;
      }
      if ((*(unsigned char *)a2 & 2) != 0) {
        __assert_rtn("~functions", "implementation.hpp", 2781, "!(current_ & 2)");
      }
      a2 += 64;
      unint64_t v27 = *a4 + 1;
      *a4 = v27;
    }
    while (v27 < a3);
  }
  return result;
}

char *std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](char *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (uint64_t)a2 + *a2;
  if (v2 != 1 && v3 != 0)
  {
    if (*(void *)result == 1) {
      id v5 = 0;
    }
    else {
      id v5 = &result[*(void *)result];
    }
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v5, v3);
  }
  return result;
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::destroy_buckets(void *a1)
{
  Class result = (char *)boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v10, (uint64_t)a1, a1[3] + 1);
  uint64_t v3 = a1[7];
  uint64_t v4 = (char *)(a1 + 7) - (char *)&v9;
  if (v3 == 1) {
    uint64_t v4 = 0;
  }
  uint64_t v9 = v4 + v3;
  id v5 = (char *)&v9 + v4 + v3;
  if (v4 + v3 != 1 && v5 != 0)
  {
    uint64_t v7 = a1[1];
    if (v7 == 1) {
      CMTime v8 = 0;
    }
    else {
      CMTime v8 = (char *)a1 + v7 + 8;
    }
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v8, (uint64_t)v5);
  }
  return result;
}

void boost::interprocess::ipcdetail::placement_destroy<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::~placement_destroy()
{
}

unsigned char *boost::interprocess::ipcdetail::placement_destroy<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::destroy_n(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    int64_t v7 = (char *)&v32 - (char *)&v28;
    do
    {
      if (*(void *)(a2 + 56) != 1)
      {
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v31, a2, *(void *)(a2 + 24));
        if (v31 == 1) {
          CMTime v8 = 0;
        }
        else {
          CMTime v8 = (char *)&v31 + v31;
        }
        uint64_t v9 = *(void *)v8;
        int64_t v10 = v8 - (char *)&v32;
        if (v9 == 1) {
          int64_t v10 = 0;
        }
        uint64_t v11 = v10 + v9;
        int64_t v12 = (char *)&v32 - (char *)&v30;
        if (v11 == 1) {
          int64_t v12 = 0;
        }
        uint64_t v13 = v12 + v11;
        uint64_t v30 = v13;
        if (v11 == 1) {
          int64_t v14 = 0;
        }
        else {
          int64_t v14 = (char *)&v32 - (char *)&v29;
        }
        if (v13 == 1) {
          id v15 = 0;
        }
        else {
          id v15 = (char *)&v30 + v13;
        }
        uint64_t v16 = v15 + 304;
        uint64_t v17 = *((void *)v15 + 38);
        int64_t v18 = v16 - (char *)&v31;
        if (v17 == 1) {
          int64_t v18 = 0;
        }
        uint64_t v31 = v18 + v17;
        uint64_t v32 = v11;
        uint64_t v29 = v14 + v11;
        std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a2 + 16), &v29);
        while (1)
        {
          int64_t v19 = v31 == 1 ? 0 : (char *)&v31 - (char *)&v32;
          uint64_t v20 = v19 + v31;
          uint64_t v32 = v19 + v31;
          if (v19 + v31 == 1) {
            break;
          }
          uint64_t v28 = v20 + v7;
          if (v20 + v7 == 1) {
            uint64_t v21 = 0;
          }
          else {
            uint64_t v21 = (char *)&v32 + v20;
          }
          uint64_t v22 = v21 + 304;
          uint64_t v23 = *((void *)v21 + 38);
          int64_t v24 = v22 - (char *)&v31;
          if (v23 == 1) {
            int64_t v24 = 0;
          }
          uint64_t v31 = v24 + v23;
          uint64_t v27 = (char *)&v32 - (char *)&v27 + v20;
          boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_node(a2, (char *)&v27);
        }
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_buckets((void *)a2);
        *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x360], 8) = xmmword_1A42D3510;
        *(void *)(a2 + 32) = 0;
      }
      Class result = boost::unordered::detail::functions<boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>::~functions((unsigned char *)a2);
      unint64_t v26 = *a4 + 1;
      *a4 = v26;
      a2 += 64;
    }
    while (v26 < a3);
  }
  return result;
}

char *std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](char *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (uint64_t)a2 + *a2;
  if (v2 != 1 && v3 != 0)
  {
    if (*(void *)result == 1) {
      id v5 = 0;
    }
    else {
      id v5 = &result[*(void *)result];
    }
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v5, v3);
  }
  return result;
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_node(uint64_t a1, char *a2)
{
  if (*(void *)a2 == 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (uint64_t)&a2[*(void *)a2];
  }
  std::__destroy_at[abi:ne180100]<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,0>(v4);
  int64_t v5 = a2 - (char *)&v7;
  if (*(void *)a2 == 1) {
    int64_t v5 = 0;
  }
  uint64_t v7 = v5 + *(void *)a2;
  return std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a1 + 16), &v7);
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_buckets(void *a1)
{
  Class result = (char *)boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v10, (uint64_t)a1, a1[3] + 1);
  uint64_t v3 = a1[7];
  uint64_t v4 = (char *)(a1 + 7) - (char *)&v9;
  if (v3 == 1) {
    uint64_t v4 = 0;
  }
  uint64_t v9 = v4 + v3;
  int64_t v5 = (char *)&v9 + v4 + v3;
  if (v4 + v3 != 1 && v5 != 0)
  {
    uint64_t v7 = a1[1];
    if (v7 == 1) {
      CMTime v8 = 0;
    }
    else {
      CMTime v8 = (char *)a1 + v7 + 8;
    }
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v8, (uint64_t)v5);
  }
  return result;
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,0>(uint64_t a1)
{
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table(a1 + 240);
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table(a1 + 176);
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table(a1 + 112);

  return boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(a1);
}

unsigned char *boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table(uint64_t a1)
{
  if (*(void *)(a1 + 56) != 1)
  {
    boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v28, a1, *(void *)(a1 + 24));
    if (v28 == 1) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = (char *)&v28 + v28;
    }
    uint64_t v3 = *(void *)v2;
    int64_t v4 = v2 - (char *)&v27;
    if (v3 == 1) {
      int64_t v4 = 0;
    }
    uint64_t v5 = v4 + v3;
    int64_t v6 = (char *)&v27 - (char *)&v26;
    int64_t v7 = (char *)&v27 - (char *)&v25;
    if (v5 == 1) {
      int64_t v6 = 0;
    }
    uint64_t v8 = v6 + v5;
    uint64_t v26 = v8;
    uint64_t v27 = v5;
    uint64_t v9 = (char *)&v26 + v8;
    if (v5 == 1) {
      int64_t v7 = 0;
    }
    if (v8 == 1) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *((void *)v9 + 1);
    uint64_t v11 = v9 + 8 - (char *)&v28;
    if (v10 == 1) {
      uint64_t v11 = 0;
    }
    uint64_t v28 = v11 + v10;
    uint64_t v25 = v7 + v5;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a1 + 16), &v25);
    int64_t v12 = (char *)&v28 - (char *)&v27;
    if (v28 == 1) {
      int64_t v12 = 0;
    }
    uint64_t v13 = v12 + v28;
    uint64_t v27 = v12 + v28;
    if (v12 + v28 != 1)
    {
      int64_t v14 = (char *)&v27 - (char *)&v23;
      do
      {
        id v15 = (char *)&v27 + v13;
        if (v13 + v14 == 1) {
          id v15 = 0;
        }
        uint64_t v16 = *((void *)v15 + 1);
        uint64_t v23 = v13 + v14;
        uint64_t v17 = v15 + 8 - (char *)&v24;
        if (v16 == 1) {
          uint64_t v17 = 0;
        }
        uint64_t v24 = v17 + v16;
        uint64_t v18 = v13 + (char *)&v27 - (char *)&v22;
        uint64_t v22 = v18;
        if (v18 == 1) {
          int64_t v19 = 0;
        }
        else {
          int64_t v19 = (char *)&v22 - (char *)&v28;
        }
        uint64_t v28 = v19 + v18;
        std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a1 + 16), &v28);
        if (v24 == 1) {
          int64_t v20 = 0;
        }
        else {
          int64_t v20 = (char *)&v24 - (char *)&v27;
        }
        uint64_t v13 = v20 + v24;
        uint64_t v27 = v20 + v24;
      }
      while (v20 + v24 != 1);
    }
    boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::destroy_buckets((void *)a1);
    *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x360], 8) = xmmword_1A42D3510;
    *(void *)(a1 + 32) = 0;
  }

  return boost::unordered::detail::functions<pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>::~functions((unsigned char *)a1);
}

unsigned char *boost::unordered::detail::functions<pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>::~functions(unsigned char *result)
{
  if ((*result & 2) != 0) {
    __assert_rtn("~functions", "implementation.hpp", 2781, "!(current_ & 2)");
  }
  return result;
}

char *std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](char *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (uint64_t)a2 + *a2;
  if (v2 != 1 && v3 != 0)
  {
    if (*(void *)result == 1) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = &result[*(void *)result];
    }
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v5, v3);
  }
  return result;
}

char *boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::destroy_buckets(void *a1)
{
  Class result = (char *)boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v10, (uint64_t)a1, a1[3] + 1);
  uint64_t v3 = a1[7];
  uint64_t v4 = (char *)(a1 + 7) - (char *)&v9;
  if (v3 == 1) {
    uint64_t v4 = 0;
  }
  uint64_t v9 = v4 + v3;
  uint64_t v5 = (char *)&v9 + v4 + v3;
  if (v4 + v3 != 1 && v5 != 0)
  {
    uint64_t v7 = a1[1];
    if (v7 == 1) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = (char *)a1 + v7 + 8;
    }
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v8, (uint64_t)v5);
  }
  return result;
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::~placement_destroy()
{
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::destroy_n(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    do
    {
      uint64_t v7 = a2 + 32;
      boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(a2);
      unint64_t v8 = *a4 + 1;
      *a4 = v8;
      a2 = v7;
    }
    while (v8 < a3);
  }
}

void sub_1A42781FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A42782E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A42783B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A427849C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A427859C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A4278694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A4278798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A42789EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)va1);
  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::~basic_managed_heap_memory((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::find_node_impl<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = result;
  if (!*(void *)(a2 + 32)) {
    goto LABEL_45;
  }
  uint64_t v6 = (*(void *)(a2 + 24) - 1) & a3;
  Class result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v41, a2, v6);
  uint64_t v7 = (char *)&v41 + v41;
  if (v41 == 1) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)v7;
  int64_t v9 = v7 - v40;
  if (v8 == 1) {
    int64_t v9 = 0;
  }
  uint64_t v10 = v9 + v8;
  if (v10 == 1) {
    goto LABEL_45;
  }
  uint64_t v11 = &v40[v10];
  if (v10 + v40 - v39 == 1) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v11 + 304;
  uint64_t v13 = *((void *)v11 + 38);
  uint64_t v14 = v12 - (unsigned char *)&v38;
  if (v13 == 1) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v14 + v13;
  uint64_t v38 = v14 + v13;
  if (v14 + v13 == 1)
  {
LABEL_45:
    uint64_t v33 = 1;
  }
  else
  {
    int64_t v16 = (char *)&v38 - (char *)&v37;
    while (1)
    {
      uint64_t v37 = v15 + v16;
      uint64_t v17 = v15 + v16 == 1 ? 0 : &v39[v15 - 8];
      Class result = (uint64_t *)std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()[abi:ne180100](a4, (uint64_t)v17);
      if (result) {
        break;
      }
      int64_t v18 = (char *)&v38 - (char *)&v36;
      if (v15 == 1) {
        int64_t v18 = 0;
      }
      uint64_t v36 = v18 + v15;
      if (v18 + v15 == 1) {
        int64_t v19 = 0;
      }
      else {
        int64_t v19 = (char *)&v36 + v18 + v15;
      }
      if ((*((void *)v19 + 39) & 0x7FFFFFFFFFFFFFFFLL) == v6)
      {
        int64_t v20 = (char *)&v38 - (char *)&v35;
        if (v15 == 1) {
          int64_t v20 = 0;
        }
        uint64_t v21 = v20 + v15;
        uint64_t v35 = v21;
        int64_t v22 = v21 == 1 ? 0 : (char *)&v35 - v39;
        uint64_t v23 = v22 + v21;
        while (1)
        {
          if (v23 == 1) {
            int64_t v24 = 0;
          }
          else {
            int64_t v24 = v39 - v40;
          }
          uint64_t v25 = v24 + v23;
          if (v25 == 1) {
            uint64_t v26 = 0;
          }
          else {
            uint64_t v26 = &v40[v25];
          }
          uint64_t v27 = v26 + 304;
          uint64_t v28 = *((void *)v26 + 38);
          uint64_t v29 = v27 - (unsigned char *)&v41;
          if (v28 == 1) {
            uint64_t v29 = 0;
          }
          uint64_t v30 = v29 + v28;
          int64_t v31 = v30 == 1 ? 0 : (char *)&v41 - v39;
          uint64_t v23 = v31 + v30;
          if (v23 == 1) {
            break;
          }
          if ((*(void *)&v39[v23 + 312] & 0x8000000000000000) == 0)
          {
            int64_t v32 = v39 - (unsigned char *)&v38;
            goto LABEL_44;
          }
        }
        int64_t v32 = 0;
LABEL_44:
        uint64_t v15 = v32 + v23;
        uint64_t v38 = v32 + v23;
        if (v32 + v23 != 1) {
          continue;
        }
      }
      goto LABEL_45;
    }
    uint64_t v34 = (unsigned char *)((char *)&v38 - (char *)v4);
    if (v15 == 1) {
      uint64_t v34 = 0;
    }
    uint64_t v33 = (uint64_t)&v34[v15];
  }
  *uint64_t v4 = v33;
  return result;
}

uint64_t *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::find_node_impl<unsigned long long,std::equal_to<unsigned long long>>(uint64_t *result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4 = result;
  if (!*(void *)(a2 + 32)) {
    goto LABEL_13;
  }
  uint64_t v6 = a3 % *(void *)(a2 + 24);
  Class result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v38, a2, v6);
  if (v38 == 1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (char *)&v38 + v38;
  }
  uint64_t v8 = *(void *)v7;
  int64_t v9 = v7 - v37;
  if (v8 == 1) {
    int64_t v9 = 0;
  }
  uint64_t v10 = v9 + v8;
  if (v10 == 1) {
    goto LABEL_13;
  }
  uint64_t v11 = &v37[v10];
  if (v10 + v37 - v36 == 1) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *((void *)v11 + 2);
  uint64_t v13 = v11 + 16 - (unsigned char *)&v35;
  if (v12 == 1) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = v13 + v12;
  uint64_t v35 = v13 + v12;
  if (v13 + v12 == 1)
  {
LABEL_13:
    uint64_t v15 = 1;
  }
  else
  {
    int64_t v16 = (char *)&v35 - (char *)&v34;
    int64_t v17 = (char *)&v35 - (char *)&v33;
    uint64_t v18 = *a4;
    Class result = (uint64_t *)(v36 - v37);
    uint64_t v15 = 1;
    while (1)
    {
      uint64_t v34 = v14 + v16;
      int64_t v19 = &v36[v14 - 8];
      int64_t v20 = v14 + v16 == 1 ? 0 : &v36[v14 - 8];
      if (v18 == *v20) {
        break;
      }
      uint64_t v33 = v14 + v17;
      if (v14 + v17 == 1) {
        int64_t v19 = 0;
      }
      if ((*((void *)v19 + 3) & 0x7FFFFFFFFFFFFFFFLL) == v6)
      {
        uint64_t v21 = (char *)&v35 - (char *)&v32 + v14;
        uint64_t v32 = v21;
        int64_t v22 = v21 == 1 ? 0 : (char *)&v32 - v36;
        uint64_t v23 = v22 + v21;
        while (1)
        {
          if (v23 == 1) {
            int64_t v24 = 0;
          }
          else {
            int64_t v24 = v36 - v37;
          }
          uint64_t v25 = v24 + v23;
          if (v25 == 1) {
            uint64_t v26 = 0;
          }
          else {
            uint64_t v26 = &v37[v25];
          }
          uint64_t v27 = *((void *)v26 + 2);
          uint64_t v28 = v26 + 16 - (unsigned char *)&v38;
          if (v27 == 1) {
            uint64_t v28 = 0;
          }
          uint64_t v29 = v28 + v27;
          int64_t v30 = v29 == 1 ? 0 : (char *)&v38 - v36;
          uint64_t v23 = v30 + v29;
          if (v23 == 1) {
            break;
          }
          if ((*(void *)&v36[v23 + 24] & 0x8000000000000000) == 0)
          {
            int64_t v31 = v36 - (unsigned char *)&v35;
            goto LABEL_42;
          }
        }
        int64_t v31 = 0;
LABEL_42:
        uint64_t v14 = v31 + v23;
        uint64_t v35 = v14;
        if (v14 != 1) {
          continue;
        }
      }
      goto LABEL_14;
    }
    uint64_t v15 = (char *)&v35 - (char *)v4 + v14;
  }
LABEL_14:
  *uint64_t v4 = v15;
  return result;
}

void sub_1A4279220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A42794CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A4279684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL PFSceneTaxonomyNodeEqual(uint64_t a1, uint64_t a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  return !v2 && a1 == a2;
}

BOOL PFSceneTaxonomyNodeSceneIdEqual(void *a1, void *a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (a2) {
      return *a1 == *a2;
    }
  }
  return result;
}

unint64_t PFSceneTaxonomyNodeHash(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[9];
  if (v2 == 1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = (uint64_t)a1 + v2 + 72;
  }
  return boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()(v3) ^ v1;
}

id PFSceneTaxonomyNodeDescription(uint64_t *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = a1[9];
    uint64_t v5 = (uint64_t)a1 + v4 + 72;
    if (v4 == 1) {
      uint64_t v5 = 0;
    }
    if (*(unsigned char *)(v5 + 8))
    {
      uint64_t v8 = v5 - (void)buf + 9;
    }
    else
    {
      uint64_t v6 = *(void *)(v5 + 24);
      uint64_t v7 = v5 + 24 - (void)buf;
      if (v6 == 1) {
        uint64_t v7 = 0;
      }
      uint64_t v8 = v7 + v6;
    }
    uint64_t v10 = NSString;
    uint64_t v11 = *a1;
    uint64_t v12 = *((unsigned __int8 *)a1 + 12);
    uint64_t v13 = a1[2];
    uint64_t v14 = PFSceneTaxonomyNodeLocalizedLabel((pf::SceneTaxonomyNode *)a1, a2);
    uint64_t v15 = PFSceneTaxonomyNodeLocalizedSynonyms((pf::SceneTaxonomyNode *)a1, a2);
    int64_t v16 = (void *)v15;
    int64_t v17 = &buf[v8];
    if (v8 == 1) {
      int64_t v17 = 0;
    }
    int64_t v9 = [v10 stringWithFormat:@"<PFSceneTaxonomyNodeRef: %p> sceneClassId:%lu name:%s indexed:%d searchThreshold:%f label:%@ synonyms:%@, parents:%lu, children:%lu", a1, v11, v17, v12, v13, v14, v15, a1[14], a1[22]];
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int64_t v20 = "NSString * _Nullable PFSceneTaxonomyNodeDescription(PFSceneTaxonomyNodeRef _Nonnull, PFSceneTaxonomy *const "
            "__strong _Nonnull)";
      _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", buf, 0xCu);
    }
    int64_t v9 = 0;
  }

  return v9;
}

void sub_1A42798D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PFSceneTaxonomyNodeLocalizedLabel(pf::SceneTaxonomyNode *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      int v17 = 136446210;
      uint64_t v18 = "NSString * _Nullable PFSceneTaxonomyNodeLocalizedLabel(PFSceneTaxonomyNodeRef _Nonnull, PFSceneTaxonomy *con"
            "st __strong _Nonnull)";
      _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v17, 0xCu);
    }
    goto LABEL_15;
  }
  if (pf::SceneTaxonomyNode::isRoot(a1))
  {
LABEL_15:
    uint64_t v14 = 0;
    goto LABEL_20;
  }
  uint64_t v4 = *((void *)a1 + 9);
  if (v4 == 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (char *)a1 + v4 + 72;
  }
  id v6 = [NSString alloc];
  unint64_t v7 = v5[8];
  if (v7)
  {
    if (v5 + 9 - (char *)&v17 == 1) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v5 + 9;
    }
  }
  else
  {
    uint64_t v10 = *((void *)v5 + 3);
    int64_t v9 = v5 + 24;
    uint64_t v8 = v10;
    int64_t v11 = v9 - (char *)&v17;
    if (v10 == 1) {
      int64_t v11 = 0;
    }
    uint64_t v12 = v11 + v8;
    if (v12 == 1) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (char *)&v17 + v12;
    }
    unint64_t v7 = *((void *)v9 - 2);
  }
  uint64_t v15 = (void *)[v6 initWithBytesNoCopy:v13 length:v7 >> 1 encoding:4 freeWhenDone:0];
  uint64_t v14 = [a2 localizedStringForKey:v15];

LABEL_20:

  return v14;
}

void sub_1A4279A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PFSceneTaxonomyNodeLocalizedSynonyms(pf::SceneTaxonomyNode *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (!pf::SceneTaxonomyNode::isRoot(a1))
    {
      uint64_t v4 = PFSceneTaxonomyNodeNameInternal((uint64_t)a1);
      uint64_t v5 = [v4 stringByAppendingString:@"-synonyms"];
      id v6 = [a2 localizedStringForKey:v5];
      unint64_t v7 = v6;
      if (v6)
      {
        uint64_t v8 = [v6 componentsSeparatedByString:@"|"];
      }
      else
      {
        uint64_t v8 = 0;
      }

      goto LABEL_10;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v10 = 136446210;
    int64_t v11 = "NSArray<NSString *> * _Nullable PFSceneTaxonomyNodeLocalizedSynonyms(PFSceneTaxonomyNodeRef _Nonnull, PFSceneT"
          "axonomy *const __strong _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v10, 0xCu);
  }
  uint64_t v8 = 0;
LABEL_10:

  return v8;
}

void sub_1A4279BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL pf::SceneTaxonomyNode::isRoot(pf::SceneTaxonomyNode *this)
{
  if (*(void *)this) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 9);
  if (v2 == 1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = (char *)this + v2 + 72;
  }
  if ((v3[8] & 1) == 0)
  {
    if ((*((void *)v3 + 1) & 0xFFFFFFFFFFFFFFFELL) == 0x10)
    {
      uint64_t v4 = *((void *)v3 + 3);
      uint64_t v5 = v3 + 24 - v8;
      if (v4 == 1) {
        uint64_t v5 = 0;
      }
      uint64_t v6 = v5 + v4;
      goto LABEL_13;
    }
    return 0;
  }
  if ((v3[8] & 0xFE) != 0x10) {
    return 0;
  }
  uint64_t v6 = v3 - v8 + 9;
LABEL_13:
  if (v6 == 1) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = &v8[v6];
  }
  return *v7 == 0x7C5F544F4F525F7CLL;
}

id PFSceneTaxonomyNodeNameInternal(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 72);
    if (v1 == 1) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = v1 + a1 + 72;
    }
    id v3 = [NSString alloc];
    unint64_t v4 = *(unsigned __int8 *)(v2 + 8);
    if (v4)
    {
      if (v2 + 9 - (void)&v13 == 1) {
        int v10 = 0;
      }
      else {
        int v10 = (char *)(v2 + 9);
      }
    }
    else
    {
      uint64_t v7 = *(void *)(v2 + 24);
      uint64_t v6 = v2 + 24;
      uint64_t v5 = v7;
      uint64_t v8 = v6 - (void)&v13;
      if (v7 == 1) {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v8 + v5;
      if (v9 == 1) {
        int v10 = 0;
      }
      else {
        int v10 = (char *)&v13 + v9;
      }
      unint64_t v4 = *(void *)(v6 - 16);
    }
    int64_t v11 = (void *)[v3 initWithBytesNoCopy:v10 length:v4 >> 1 encoding:4 freeWhenDone:0];
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      int v13 = 136446210;
      uint64_t v14 = "NSString * _Nullable PFSceneTaxonomyNodeNameInternal(PFSceneTaxonomyNodeRef _Nonnull)";
      _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v13, 0xCu);
    }
    int64_t v11 = 0;
  }

  return v11;
}

void PFSceneTaxonomyFillNodeData(pf::SceneTaxonomyNode *this, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    unint64_t v4 = *(void *)this;
    uint64_t v5 = *((void *)this + 9);
    if (v5 == 1) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = (char *)this + v5 + 72;
    }
    if (v6[8])
    {
      uint64_t v9 = v6 - (char *)&v22 + 9;
    }
    else
    {
      uint64_t v7 = *((void *)v6 + 3);
      uint64_t v8 = v6 + 24 - (char *)&v22;
      if (v7 == 1) {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v8 + v7;
    }
    if (v9 == 1) {
      int v10 = 0;
    }
    else {
      int v10 = (char *)&v22 + v9;
    }
    if (v4 >= 0x100000000) {
      LODWORD(v11) = 0;
    }
    else {
      unint64_t v11 = *(void *)this;
    }
    uint64_t v12 = *((unsigned int *)this + 2);
    char v13 = *((unsigned char *)this + 12);
    BOOL isRoot = pf::SceneTaxonomyNode::isRoot(this);
    double v15 = *((double *)this + 2);
    double v16 = *((double *)this + 3);
    uint64_t v17 = *((void *)this + 8);
    if (v16 >= v15) {
      double v18 = *((double *)this + 2);
    }
    else {
      double v18 = *((double *)this + 3);
    }
    long long v19 = *((_OWORD *)this + 2);
    long long v20 = *((_OWORD *)this + 3);
    if (*(double *)&v19 >= v18) {
      double v21 = v18;
    }
    else {
      double v21 = *((double *)this + 4);
    }
    *(void *)a2 = v10;
    *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = v11;
    *(_DWORD *)(a2 + 12) = 0;
    *(void *)(a2 + 16) = v4;
    *(void *)(a2 + 24) = v12;
    *(unsigned char *)(a2 + 32) = v13;
    *(unsigned char *)(a2 + 33) = isRoot;
    *(_WORD *)(a2 + 3_Block_object_dispose(&STACK[0x360], 8) = 0;
    *(_DWORD *)(a2 + 34) = 0;
    *(double *)(a2 + 40) = v15;
    *(double *)(a2 + 4_Block_object_dispose(&STACK[0x360], 8) = v16;
    *(_OWORD *)(a2 + 56) = v19;
    *(_OWORD *)(a2 + 72) = v20;
    *(void *)(a2 + 8_Block_object_dispose(&STACK[0x360], 8) = v17;
    *(double *)(a2 + 96) = v18;
    *(double *)(a2 + 104) = v21;
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v22 = 136446210;
    uint64_t v23 = "void PFSceneTaxonomyFillNodeData(PFSceneTaxonomyNodeRef _Nonnull, PFSceneTaxonomyNodeData * _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v22, 0xCu);
  }
}

uint64_t PFSceneTaxonomyNodeExtendedSceneClassId(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)a1;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v2 = 136446210;
    id v3 = "PFExtendedSceneClassId PFSceneTaxonomyNodeExtendedSceneClassId(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
  }
  return -1;
}

uint64_t PFSceneTaxonomyNodeNetworkId(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(unsigned int *)(a1 + 8);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v2 = 136446210;
    id v3 = "PFSceneTaxonomyNetworkId PFSceneTaxonomyNodeNetworkId(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

id PFSceneTaxonomyNodeName(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 72);
    if (v1 == 1) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = v1 + a1 + 72;
    }
    id v3 = [NSString alloc];
    unint64_t v4 = *(unsigned __int8 *)(v2 + 8);
    if (v4)
    {
      if (v2 + 9 - (void)&v13 == 1) {
        int v10 = 0;
      }
      else {
        int v10 = (char *)(v2 + 9);
      }
    }
    else
    {
      uint64_t v7 = *(void *)(v2 + 24);
      uint64_t v6 = v2 + 24;
      uint64_t v5 = v7;
      uint64_t v8 = v6 - (void)&v13;
      if (v7 == 1) {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v8 + v5;
      if (v9 == 1) {
        int v10 = 0;
      }
      else {
        int v10 = (char *)&v13 + v9;
      }
      unint64_t v4 = *(void *)(v6 - 16);
    }
    unint64_t v11 = (void *)[v3 initWithBytes:v10 length:v4 >> 1 encoding:4];
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      int v13 = 136446210;
      uint64_t v14 = "NSString * _Nullable PFSceneTaxonomyNodeName(PFSceneTaxonomyNodeRef _Nonnull)";
      _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v13, 0xCu);
    }
    unint64_t v11 = 0;
  }

  return v11;
}

char *PFSceneTaxonomyNodeString(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 72);
    uint64_t v2 = v1 + a1 + 72;
    if (v1 == 1) {
      uint64_t v2 = 0;
    }
    if (*(unsigned char *)(v2 + 8))
    {
      uint64_t v5 = v2 - (void)&v7 + 9;
    }
    else
    {
      uint64_t v3 = *(void *)(v2 + 24);
      uint64_t v4 = v2 + 24 - (void)&v7;
      if (v3 == 1) {
        uint64_t v4 = 0;
      }
      uint64_t v5 = v4 + v3;
    }
    if (v5 == 1) {
      return 0;
    }
    else {
      return (char *)&v7 + v5;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      int v7 = 136446210;
      uint64_t v8 = "const char *PFSceneTaxonomyNodeString(PFSceneTaxonomyNodeRef _Nonnull)";
      _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v7, 0xCu);
    }
    return 0;
  }
}

BOOL PFSceneTaxonomyNodeIsIndexed(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(unsigned char *)(a1 + 12) != 0;
  }
  BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO);
  if (result)
  {
    int v2 = 136446210;
    uint64_t v3 = "BOOL PFSceneTaxonomyNodeIsIndexed(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
    return 0;
  }
  return result;
}

BOOL PFSceneTaxonomyNodeIsRoot(pf::SceneTaxonomyNode *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    return pf::SceneTaxonomyNode::isRoot(a1);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      int v2 = 136446210;
      uint64_t v3 = "BOOL PFSceneTaxonomyNodeIsRoot(PFSceneTaxonomyNodeRef _Nonnull)";
      _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
    }
    return 0;
  }
}

double PFSceneTaxonomyNodeSearchThreshold(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(double *)(a1 + 16);
  }
  double v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v3 = 136446210;
    uint64_t v4 = "double PFSceneTaxonomyNodeSearchThreshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodeHighRecallThreshold(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(double *)(a1 + 32);
  }
  double v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v3 = 136446210;
    uint64_t v4 = "double PFSceneTaxonomyNodeHighRecallThreshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodeHighPrecisionThreshold(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(double *)(a1 + 24);
  }
  double v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v3 = 136446210;
    uint64_t v4 = "double PFSceneTaxonomyNodeHighPrecisionThreshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodePrecision0Point6Threshold(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(double *)(a1 + 40);
  }
  double v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v3 = 136446210;
    uint64_t v4 = "double PFSceneTaxonomyNodePrecision0Point6Threshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodeF0Point5Threshold(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(double *)(a1 + 48);
  }
  double v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v3 = 136446210;
    uint64_t v4 = "double PFSceneTaxonomyNodeF0Point5Threshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodeF1Threshold(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(double *)(a1 + 56);
  }
  double v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v3 = 136446210;
    uint64_t v4 = "double PFSceneTaxonomyNodeF1Threshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodeF2Threshold(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(double *)(a1 + 64);
  }
  double v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v3 = 136446210;
    uint64_t v4 = "double PFSceneTaxonomyNodeF2Threshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodeGraphHighPrecisionThreshold(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(double *)(a1 + 24) >= *(double *)(a1 + 16)) {
      return *(double *)(a1 + 16);
    }
    else {
      return *(double *)(a1 + 24);
    }
  }
  else
  {
    double v1 = 0.0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      int v3 = 136446210;
      uint64_t v4 = "double PFSceneTaxonomyNodeGraphHighPrecisionThreshold(PFSceneTaxonomyNodeRef _Nonnull)";
      _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
    }
  }
  return v1;
}

double PFSceneTaxonomyNodeGraphHighRecallThreshold(double *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    double v1 = a1[3];
    if (v1 >= a1[2]) {
      double v1 = a1[2];
    }
    if (a1[4] >= v1) {
      return v1;
    }
    else {
      return a1[4];
    }
  }
  else
  {
    double v2 = 0.0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      int v4 = 136446210;
      uint64_t v5 = "double PFSceneTaxonomyNodeGraphHighRecallThreshold(PFSceneTaxonomyNodeRef _Nonnull)";
      _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v4, 0xCu);
    }
  }
  return v2;
}

uint64_t PFSceneTaxonomyNodeParentsCount(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 112);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v2 = 136446210;
    int v3 = "size_t PFSceneTaxonomyNodeParentsCount(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

uint64_t PFSceneTaxonomyNodeChildrenCount(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 176);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v2 = 136446210;
    int v3 = "size_t PFSceneTaxonomyNodeChildrenCount(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

uint64_t PFSceneTaxonomyNodeDetectorsCount(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 240);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v2 = 136446210;
    int v3 = "size_t PFSceneTaxonomyNodeDetectorsCount(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

void PFSceneTaxonomyNodeTraverseParents(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = v3;
    uint64_t v6 = operator new(8uLL);
    void *v6 = a1;
    int v7 = v6 + 1;
    *(void *)&long long v12 = v6;
    int v13 = v6 + 1;
    do
    {
      uint64_t v8 = (void *)MEMORY[0x1A6259880]();
      uint64_t v9 = *(v7 - 1);
      *((void *)&v12 + 1) = v7 - 1;
      pf::back_insert_node_set(v9 + 80, (void **)&v12);
      char v10 = PFSceneTaxonomyVisitNode(v5, v9);
      int v7 = (void *)*((void *)&v12 + 1);
      if ((void)v12 == *((void *)&v12 + 1)) {
        char v11 = 1;
      }
      else {
        char v11 = v10;
      }
    }
    while ((v11 & 1) == 0);
    if ((void)v12) {
      operator delete((void *)v12);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    LODWORD(v12) = 136446210;
    *(void *)((char *)&v12 + 4) = "void PFSceneTaxonomyNodeTraverseParents(PFSceneTaxonomyNodeRef _Nonnull, __strong PF"
                                    "SceneTaxonomyNodeRefVisitor _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v12, 0xCu);
  }
}

void sub_1A427AE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  _Unwind_Resume(a1);
}

void pf::back_insert_node_set(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v5 = (unsigned char *)a2[1] - (unsigned char *)*a2;
    unint64_t v6 = v2 + (v5 >> 3);
    if (v6 > ((unsigned char *)a2[2] - (unsigned char *)*a2) >> 3)
    {
      if (v6 >> 61) {
LABEL_49:
      }
        std::vector<pf::SceneTaxonomyNode const*>::__throw_length_error[abi:ne180100]();
      uint64_t v7 = v5 >> 3;
      uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v6);
      uint64_t v9 = &v8[8 * v7];
      char v11 = &v8[8 * v10];
      int v13 = (char *)*a2;
      long long v12 = (char *)a2[1];
      uint64_t v14 = v9;
      if (v12 != *a2)
      {
        do
        {
          uint64_t v15 = *((void *)v12 - 1);
          v12 -= 8;
          *((void *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v12 != v13);
        long long v12 = (char *)*a2;
      }
      *a2 = v14;
      a2[1] = v9;
      a2[2] = v11;
      if (v12) {
        operator delete(v12);
      }
    }
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::begin((char *)&v40, a1);
    uint64_t v39 = 1;
    double v16 = (char *)&v40 + v40;
    if (v40 != 1 && v16 != 0)
    {
      double v18 = (char *)a2[1];
      do
      {
        uint64_t v19 = *(void *)v16;
        long long v20 = &v16[*(void *)v16];
        if (v19 == 1) {
          double v21 = 0;
        }
        else {
          double v21 = v20;
        }
        unint64_t v22 = (unint64_t)a2[2];
        if ((unint64_t)v18 >= v22)
        {
          uint64_t v23 = (v18 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v23 + 1) >> 61) {
            goto LABEL_49;
          }
          uint64_t v24 = v22 - (void)*a2;
          uint64_t v25 = v24 >> 2;
          if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
            uint64_t v25 = v23 + 1;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26) {
            unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v26);
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v28 = (char *)(v26 + 8 * v23);
          *(void *)uint64_t v28 = v21;
          double v18 = v28 + 8;
          int64_t v30 = (char *)*a2;
          uint64_t v29 = (char *)a2[1];
          if (v29 != *a2)
          {
            do
            {
              uint64_t v31 = *((void *)v29 - 1);
              v29 -= 8;
              *((void *)v28 - 1) = v31;
              v28 -= 8;
            }
            while (v29 != v30);
            uint64_t v29 = (char *)*a2;
          }
          *a2 = v28;
          a2[1] = v18;
          a2[2] = (void *)(v26 + 8 * v27);
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)double v18 = v21;
          v18 += 8;
        }
        a2[1] = v18;
        if (v40 == 1) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = (char *)&v40 + v40;
        }
        uint64_t v33 = *((void *)v32 + 1);
        uint64_t v34 = v32 + 8 - &v41;
        if (v33 == 1) {
          uint64_t v34 = 0;
        }
        uint64_t v35 = v34 + v33;
        if (v35 == 1) {
          int64_t v36 = 0;
        }
        else {
          int64_t v36 = &v41 - (char *)&v40;
        }
        uint64_t v37 = v36 + v35;
        uint64_t v40 = v37;
        if (v37 == 1) {
          double v16 = 0;
        }
        else {
          double v16 = (char *)&v40 + v37;
        }
        if (v39 == 1) {
          uint64_t v38 = 0;
        }
        else {
          uint64_t v38 = (char *)&v39 + v39;
        }
      }
      while (v16 != v38);
    }
  }
}

uint64_t PFSceneTaxonomyVisitNode(void *a1, uint64_t a2)
{
  id v3 = a1;
  unint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 72);
  if (v5 == 1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5 + a2 + 72;
  }
  if (*(unsigned char *)(v6 + 8))
  {
    uint64_t v9 = v6 - (void)v29 + 9;
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 24);
    uint64_t v8 = v6 + 24 - (void)v29;
    if (v7 == 1) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v8 + v7;
  }
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v10 = &v29[v9];
  if (v9 == 1) {
    uint64_t v10 = 0;
  }
  uint64_t v19 = v10;
  int v11 = 0;
  if (v4 < 0x100000000) {
    int v11 = v4;
  }
  LODWORD(v20) = v11;
  uint64_t v12 = *(unsigned int *)(a2 + 8);
  *((void *)&v20 + 1) = v4;
  *(void *)&long long v21 = v12;
  BYTE8(v21) = *(unsigned char *)(a2 + 12);
  BYTE9(v21) = pf::SceneTaxonomyNode::isRoot((pf::SceneTaxonomyNode *)a2);
  double v13 = *(double *)(a2 + 16);
  double v14 = *(double *)(a2 + 24);
  double v22 = v13;
  double v23 = v14;
  long long v15 = *(_OWORD *)(a2 + 32);
  long long v16 = *(_OWORD *)(a2 + 48);
  long long v24 = v15;
  long long v25 = v16;
  if (v14 < v13) {
    double v13 = v14;
  }
  uint64_t v26 = *(void *)(a2 + 64);
  double v27 = v13;
  if (*(double *)&v15 < v13) {
    double v13 = *(double *)&v15;
  }
  double v28 = v13;
  uint64_t v17 = v3[2](v3, a2, &v19);

  return v17;
}

void sub_1A427B174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::begin(char *a1, uint64_t a2)
{
  BOOL result = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::begin(&v5, a2);
  unint64_t v4 = (char *)((char *)&v5 - a1);
  if (v5 == 1) {
    unint64_t v4 = 0;
  }
  *(void *)a1 = &v4[v5];
  return result;
}

void std::vector<pf::SceneTaxonomyNode const*>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  double v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

uint64_t *boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::begin(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(void *)(a2 + 32))
  {
    BOOL result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v12, a2, *(void *)(a2 + 24));
    if (v12 == 1) {
      id v3 = 0;
    }
    else {
      id v3 = (char *)&v12 + v12;
    }
    uint64_t v4 = *(void *)v3;
    int64_t v5 = v3 - v11;
    if (v4 == 1) {
      int64_t v5 = 0;
    }
    uint64_t v6 = v5 + v4;
    if (v6 == 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = &v11[v6];
    }
    uint64_t v8 = *((void *)v7 + 1);
    int64_t v9 = v7 + 8 - (unsigned char *)v2;
    if (v8 == 1) {
      int64_t v9 = 0;
    }
    uint64_t v10 = v9 + v8;
  }
  else
  {
    uint64_t v10 = 1;
  }
  *uint64_t v2 = v10;
  return result;
}

void PFSceneTaxonomyNodeTraverseChildren(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = v3;
    uint64_t v6 = operator new(8uLL);
    void *v6 = a1;
    uint64_t v7 = v6 + 1;
    *(void *)&long long v12 = v6;
    double v13 = v6 + 1;
    do
    {
      uint64_t v8 = (void *)MEMORY[0x1A6259880]();
      uint64_t v9 = *(v7 - 1);
      *((void *)&v12 + 1) = v7 - 1;
      pf::back_insert_node_set(v9 + 144, (void **)&v12);
      char v10 = PFSceneTaxonomyVisitNode(v5, v9);
      uint64_t v7 = (void *)*((void *)&v12 + 1);
      if ((void)v12 == *((void *)&v12 + 1)) {
        char v11 = 1;
      }
      else {
        char v11 = v10;
      }
    }
    while ((v11 & 1) == 0);
    if ((void)v12) {
      operator delete((void *)v12);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    LODWORD(v12) = 136446210;
    *(void *)((char *)&v12 + 4) = "void PFSceneTaxonomyNodeTraverseChildren(PFSceneTaxonomyNodeRef _Nonnull, __strong P"
                                    "FSceneTaxonomyNodeRefVisitor _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v12, 0xCu);
  }
}

void sub_1A427B428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  _Unwind_Resume(a1);
}

void PFSceneTaxonomyNodeVisitParents(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = v3;
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::begin((char *)&v19, a1 + 80);
    uint64_t v18 = 1;
    uint64_t v6 = &buf[v19 - 8];
    if (v19 != 1 && v6 != 0)
    {
      do
      {
        uint64_t v8 = *(void *)v6;
        uint64_t v9 = &v6[*(void *)v6];
        if (v8 == 1) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = (uint64_t)v9;
        }
        if (PFSceneTaxonomyVisitNode(v5, v10)) {
          break;
        }
        if (v19 == 1) {
          char v11 = 0;
        }
        else {
          char v11 = &buf[v19 - 8];
        }
        uint64_t v12 = *((void *)v11 + 1);
        uint64_t v13 = v11 + 8 - buf;
        if (v12 == 1) {
          uint64_t v13 = 0;
        }
        uint64_t v14 = v13 + v12;
        int64_t v15 = v14 == 1 ? 0 : buf - (uint8_t *)&v19;
        uint64_t v16 = v15 + v14;
        uint64_t v19 = v16;
        uint64_t v6 = v16 == 1 ? 0 : &buf[v16 - 8];
        uint64_t v17 = v18 == 1 ? 0 : (char *)&v18 + v18;
      }
      while (v6 != (uint8_t *)v17);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136446210;
    long long v21 = "void PFSceneTaxonomyNodeVisitParents(PFSceneTaxonomyNodeRef _Nonnull, __strong PFSceneTaxonomyNodeRefVisitor _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", buf, 0xCu);
  }
}

void sub_1A427B5E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PFSceneTaxonomyNodeVisitChildren(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = v3;
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::begin((char *)&v19, a1 + 144);
    uint64_t v18 = 1;
    uint64_t v6 = &buf[v19 - 8];
    if (v19 != 1 && v6 != 0)
    {
      do
      {
        uint64_t v8 = *(void *)v6;
        uint64_t v9 = &v6[*(void *)v6];
        if (v8 == 1) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = (uint64_t)v9;
        }
        if (PFSceneTaxonomyVisitNode(v5, v10)) {
          break;
        }
        if (v19 == 1) {
          char v11 = 0;
        }
        else {
          char v11 = &buf[v19 - 8];
        }
        uint64_t v12 = *((void *)v11 + 1);
        uint64_t v13 = v11 + 8 - buf;
        if (v12 == 1) {
          uint64_t v13 = 0;
        }
        uint64_t v14 = v13 + v12;
        int64_t v15 = v14 == 1 ? 0 : buf - (uint8_t *)&v19;
        uint64_t v16 = v15 + v14;
        uint64_t v19 = v16;
        uint64_t v6 = v16 == 1 ? 0 : &buf[v16 - 8];
        uint64_t v17 = v18 == 1 ? 0 : (char *)&v18 + v18;
      }
      while (v6 != (uint8_t *)v17);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136446210;
    long long v21 = "void PFSceneTaxonomyNodeVisitChildren(PFSceneTaxonomyNodeRef _Nonnull, __strong PFSceneTaxonomyNodeRefVisitor _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", buf, 0xCu);
  }
}

void sub_1A427B780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PFSceneTaxonomyNodeVisitDetectors(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = v3;
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::begin((char *)&v19, a1 + 208);
    uint64_t v18 = 1;
    uint64_t v6 = &buf[v19 - 8];
    if (v19 != 1 && v6 != 0)
    {
      do
      {
        uint64_t v8 = *(void *)v6;
        uint64_t v9 = &v6[*(void *)v6];
        if (v8 == 1) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = (uint64_t)v9;
        }
        if (PFSceneTaxonomyVisitNode(v5, v10)) {
          break;
        }
        if (v19 == 1) {
          char v11 = 0;
        }
        else {
          char v11 = &buf[v19 - 8];
        }
        uint64_t v12 = *((void *)v11 + 1);
        uint64_t v13 = v11 + 8 - buf;
        if (v12 == 1) {
          uint64_t v13 = 0;
        }
        uint64_t v14 = v13 + v12;
        int64_t v15 = v14 == 1 ? 0 : buf - (uint8_t *)&v19;
        uint64_t v16 = v15 + v14;
        uint64_t v19 = v16;
        uint64_t v6 = v16 == 1 ? 0 : &buf[v16 - 8];
        uint64_t v17 = v18 == 1 ? 0 : (char *)&v18 + v18;
      }
      while (v6 != (uint8_t *)v17);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136446210;
    long long v21 = "void PFSceneTaxonomyNodeVisitDetectors(PFSceneTaxonomyNodeRef _Nonnull, __strong PFSceneTaxonomyNodeRefVisitor _Nonnull)";
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", buf, 0xCu);
  }
}

void sub_1A427B920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PFSceneTaxonomyEnumerateTopologicallyOrderedNodes(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  uint64_t v22 = 0;
  double v23 = &v22;
  uint64_t v24 = 0x6012000000;
  long long v25 = __Block_byref_object_copy__7359;
  uint64_t v26 = __Block_byref_object_dispose__7360;
  double v27 = &unk_1A42EF38E;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v18 = v3;
  uint64_t v5 = [v3 rootNodeRef];
  uint64_t v6 = *((void *)&v28 + 1);
  if ((void)v29 == *((void *)&v28 + 1)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (((void)v29 - *((void *)&v28 + 1)) << 6) - 1;
  }
  uint64_t v8 = *((void *)&v30 + 1);
  unint64_t v9 = *((void *)&v30 + 1) + v30;
  if (v7 == *((void *)&v30 + 1) + (void)v30)
  {
    std::deque<void const*>::__add_back_capacity(&v28);
    uint64_t v8 = *((void *)&v30 + 1);
    uint64_t v6 = *((void *)&v28 + 1);
    unint64_t v9 = v30 + *((void *)&v30 + 1);
  }
  *(void *)(*(void *)(v6 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = v5;
  *((void *)&v30 + 1) = v8 + 1;
  v20[0] = 0;
  v20[1] = v20;
  void v20[2] = 0x5812000000;
  v20[3] = __Block_byref_object_copy__167;
  void v20[4] = __Block_byref_object_dispose__168;
  memset(&v20[5], 0, 40);
  int v21 = 1065353216;
  while (1)
  {
    uint64_t v10 = v23;
    uint64_t v11 = v23[11];
    if (!v11) {
      break;
    }
    uint64_t v13 = v23[7];
    uint64_t v12 = v23[8];
    uint64_t v14 = ((v12 - v13) << 6) - 1;
    if (v12 == v13) {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v11 - 1;
    unint64_t v16 = v23[10] + v15;
    uint64_t v17 = *(void *)(*(void *)(v13 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v16 & 0x1FF));
    v23[11] = v15;
    if (v14 - v16 >= 0x400)
    {
      operator delete(*(void **)(v12 - 8));
      v10[8] -= 8;
    }
    if (v4[2](v4, v17)) {
      break;
    }
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __PFSceneTaxonomyEnumerateTopologicallyOrderedNodes_block_invoke;
    v19[3] = &unk_1E5B2E2C8;
    void v19[4] = &v22;
    v19[5] = v20;
    PFSceneTaxonomyNodeVisitChildren(v17, v19);
  }
  _Block_object_dispose(v20, 8);
  std::__hash_table<std::__hash_value_type<void const*,unsigned long>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,unsigned long>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,unsigned long>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,unsigned long>>>::~__hash_table((uint64_t)&v20[6]);
  _Block_object_dispose(&v22, 8);
  std::deque<void const*>::~deque[abi:ne180100]((uint64_t)&v28);
}

void sub_1A427BBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  std::deque<void const*>::~deque[abi:ne180100](a9);

  _Unwind_Resume(a1);
}

double __Block_byref_object_copy__7359(void *a1, void *a2)
{
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  double result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__7360(uint64_t a1)
{
  return std::deque<void const*>::~deque[abi:ne180100](a1 + 48);
}

uint64_t __Block_byref_object_copy__167(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 4_Block_object_dispose(&STACK[0x360], 8) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  id v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *id v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__168(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<void const*,unsigned long>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,unsigned long>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,unsigned long>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,unsigned long>>>::~__hash_table(a1 + 48);
}

uint64_t std::__hash_table<std::__hash_value_type<void const*,unsigned long>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,unsigned long>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,unsigned long>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,unsigned long>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t __PFSceneTaxonomyEnumerateTopologicallyOrderedNodes_block_invoke(uint64_t a1, unint64_t a2)
{
  unint64_t v43 = a2;
  uint64_t v5 = PFSceneTaxonomyNodeParentsCount(a2);
  if (v5 == 1) {
    goto LABEL_2;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(v6 + 56);
  if (!v10)
  {
LABEL_35:
    uint64_t v17 = operator new(0x20uLL);
    void *v17 = 0;
    v17[1] = v9;
    void v17[2] = a2;
    v17[3] = 0;
    float v19 = (float)(unint64_t)(*(void *)(v6 + 72) + 1);
    float v20 = *(float *)(v6 + 80);
    if (v10 && (float)(v20 * (float)v10) >= v19)
    {
LABEL_81:
      uint64_t v37 = *(void *)(v6 + 48);
      uint64_t v38 = *(void **)(v37 + 8 * v2);
      if (v38)
      {
        void *v17 = *v38;
      }
      else
      {
        void *v17 = *(void *)(v6 + 64);
        *(void *)(v6 + 64) = v17;
        *(void *)(v37 + 8 * v2) = v6 + 64;
        if (!*v17) {
          goto LABEL_90;
        }
        unint64_t v39 = *(void *)(*v17 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v39 >= v10) {
            v39 %= v10;
          }
        }
        else
        {
          v39 &= v10 - 1;
        }
        uint64_t v38 = (void *)(*(void *)(v6 + 48) + 8 * v39);
      }
      *uint64_t v38 = v17;
LABEL_90:
      ++*(void *)(v6 + 72);
LABEL_91:
      v17[3] = 1;
      return 0;
    }
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *(void *)(v6 + 56);
    if (*(void *)&prime > v10) {
      goto LABEL_47;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 72) / *(float *)(v6 + 80));
      if (v10 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(v6 + 56);
      }
      else
      {
        if (prime)
        {
LABEL_47:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v25 = operator new(8 * *(void *)&prime);
          uint64_t v26 = *(void **)(v6 + 48);
          *(void *)(v6 + 4_Block_object_dispose(&STACK[0x360], 8) = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          *(int8x8_t *)(v6 + 56) = prime;
          do
            *(void *)(*(void *)(v6 + 48) + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          long long v28 = *(void **)(v6 + 64);
          if (v28)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(v6 + 48) + 8 * v29) = v6 + 64;
            uint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  uint64_t v36 = *(void *)(v6 + 48);
                  if (!*(void *)(v36 + 8 * v35))
                  {
                    *(void *)(v36 + 8 * v35) = v28;
                    goto LABEL_72;
                  }
                  *long long v28 = *v34;
                  *uint64_t v34 = **(void **)(*(void *)(v6 + 48) + 8 * v35);
                  **(void **)(*(void *)(v6 + 48) + 8 * v35) = v34;
                  uint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_72:
                long long v28 = v34;
                uint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_76;
        }
        int64_t v42 = *(void **)(v6 + 48);
        *(void *)(v6 + 4_Block_object_dispose(&STACK[0x360], 8) = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v10 = 0;
        *(void *)(v6 + 56) = 0;
      }
    }
LABEL_76:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v2 = v9 % v10;
      }
      else {
        unint64_t v2 = v9;
      }
    }
    else
    {
      unint64_t v2 = (v10 - 1) & v9;
    }
    goto LABEL_81;
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    unint64_t v12 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
    if (v9 >= v10) {
      unint64_t v12 = v9 % v10;
    }
  }
  else
  {
    unint64_t v12 = v9 & (v10 - 1);
  }
  uint64_t v13 = *(void **)(*(void *)(v6 + 48) + 8 * v12);
  if (!v13 || (uint64_t v14 = (void *)*v13) == 0)
  {
LABEL_20:
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v2 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v2 = v9 % v10;
      }
    }
    else
    {
      unint64_t v2 = v9 & (v10 - 1);
    }
    unint64_t v16 = *(void ***)(*(void *)(v6 + 48) + 8 * v2);
    if (v16)
    {
      uint64_t v17 = *v16;
      if (*v16)
      {
        while (1)
        {
          unint64_t v18 = v17[1];
          if (v18 == v9)
          {
            if (v17[2] == a2) {
              goto LABEL_91;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v18 >= v10) {
                v18 %= v10;
              }
            }
            else
            {
              v18 &= v10 - 1;
            }
            if (v18 != v2) {
              goto LABEL_35;
            }
          }
          uint64_t v17 = (void *)*v17;
          if (!v17) {
            goto LABEL_35;
          }
        }
      }
    }
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 == v9) {
      break;
    }
    if (v11.u32[0] > 1uLL)
    {
      if (v15 >= v10) {
        v15 %= v10;
      }
    }
    else
    {
      v15 &= v10 - 1;
    }
    if (v15 != v12) {
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      goto LABEL_20;
    }
  }
  if (v14[2] != a2) {
    goto LABEL_19;
  }
  uint64_t v41 = v14[3] + 1;
  v14[3] = v41;
  if (v41 != v5) {
    return 0;
  }
LABEL_2:
  std::deque<void const*>::push_back((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), &v43);
  return 0;
}

void sub_1A427C20C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<void const*>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  id v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      id v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::deque<void const*>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<void const*>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<void const*>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v40 = 1;
      }
      else {
        unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v40);
      int64_t v42 = &v41[8 * (v40 >> 2)];
      float64x2_t v44 = &v41[8 * v43];
      uint64_t v45 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v46 = a1[2] - (void)v45;
      if (v46)
      {
        uint64_t v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v47 = 8 * (v46 >> 3);
        int64_t v48 = &v41[8 * (v40 >> 2)];
        do
        {
          uint64_t v49 = *v45++;
          *(void *)int64_t v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  float v20 = (char *)a1[2];
  float v19 = (char *)a1[3];
  BOOL v21 = (char *)*a1;
  unint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    long long v25 = operator new(0x1000uLL);
    uint64_t v26 = v25;
    if (v19 != v20)
    {
      *(void *)float v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = (v19 - v22) >> 2;
      }
      uint64_t v52 = 2 * v51;
      int64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v51);
      unint64_t v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v55 = (uint64_t *)a1[1];
      uint64_t v56 = v22;
      uint64_t v57 = a1[2] - (void)v55;
      if (v57)
      {
        uint64_t v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v58 = 8 * (v57 >> 3);
        uint64_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v60 = *v55++;
          *(void *)uint64_t v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      uint64_t v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        unint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v85 = 1;
      }
      else {
        unint64_t v85 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v85);
      int64_t v42 = &v41[8 * (v85 >> 2)];
      float64x2_t v44 = &v41[8 * v86];
      uint64_t v87 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v88 = a1[2] - (void)v87;
      if (v88)
      {
        uint64_t v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v89 = 8 * (v88 >> 3);
        uint64_t v90 = &v41[8 * (v85 >> 2)];
        do
        {
          uint64_t v91 = *v87++;
          *(void *)uint64_t v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      uint64_t v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v28);
  uint64_t v31 = v30;
  uint8x8_t v32 = &v29[8 * v23];
  *(void *)&long long v33 = v29;
  *((void *)&v33 + 1) = v32;
  long long v95 = v33;
  uint64_t v34 = operator new(0x1000uLL);
  *(void *)&long long v35 = v32;
  *((void *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v36 = 8 * v23;
    *(void *)&long long v37 = v95;
    if (v20 - v22 >= 1)
    {
      uint64_t v38 = v36 >> 3;
      if (v38 >= -1) {
        unint64_t v39 = v38 + 1;
      }
      else {
        unint64_t v39 = v38 + 2;
      }
      v32 -= 8 * (v39 >> 1);
      *(void *)&long long v35 = v32;
      *((void *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    uint64_t v62 = v36 >> 2;
    if (v20 == v22) {
      unint64_t v63 = 1;
    }
    else {
      unint64_t v63 = v62;
    }
    uint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v63);
    uint8x8_t v32 = &v64[8 * (v63 >> 2)];
    *(void *)&long long v37 = v64;
    *((void *)&v37 + 1) = v32;
    *(void *)&long long v35 = v32;
    *((void *)&v35 + 1) = &v64[8 * v65];
    if (!v29) {
      goto LABEL_50;
    }
    long long v92 = v35;
    long long v95 = v37;
    operator delete(v29);
    long long v35 = v92;
  }
  long long v37 = v95;
LABEL_50:
  *(void *)uint8x8_t v32 = v34;
  *(void *)&long long v35 = v35 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    int64_t v67 = (void *)*((void *)&v37 + 1);
    if (*((void *)&v37 + 1) == (void)v37)
    {
      int64_t v69 = (unsigned char *)v35;
      if ((unint64_t)v35 >= *((void *)&v35 + 1))
      {
        if (*((void *)&v35 + 1) == *((void *)&v37 + 1)) {
          unint64_t v74 = 1;
        }
        else {
          unint64_t v74 = (uint64_t)(*((void *)&v35 + 1) - *((void *)&v37 + 1)) >> 2;
        }
        int64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v74);
        uint64_t v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        int64_t v77 = v68;
        uint64_t v78 = v69 - (unsigned char *)v67;
        if (v69 != (unsigned char *)v67)
        {
          int64_t v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          int64_t v80 = v68;
          int64_t v81 = v67;
          do
          {
            uint64_t v82 = *v81++;
            *(void *)int64_t v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(void *)&long long v37 = v75;
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = v77;
        *((void *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          long long v93 = v35;
          long long v97 = v37;
          operator delete(v67);
          long long v35 = v93;
          long long v37 = v97;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)(*((void *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1) {
          uint64_t v71 = v70 + 1;
        }
        else {
          uint64_t v71 = v70 + 2;
        }
        uint64_t v72 = v71 >> 1;
        uint64_t v73 = v35 + 8 * (v71 >> 1);
        uint64_t v68 = (char *)(v73 - (v35 - *((void *)&v37 + 1)));
        if ((void)v35 == *((void *)&v37 + 1))
        {
          int64_t v69 = (unsigned char *)*((void *)&v37 + 1);
        }
        else
        {
          uint64_t v94 = *((void *)&v35 + 1);
          uint64_t v96 = v37;
          memmove((void *)(v73 - (v35 - *((void *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((void *)&v37 + 1));
          *((void *)&v35 + 1) = v94;
          *(void *)&long long v37 = v96;
        }
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = &v69[8 * v72];
      }
    }
    else
    {
      uint64_t v68 = (char *)*((void *)&v37 + 1);
    }
    uint64_t v83 = *(void *)(i - 8);
    *((void *)v68 - 1) = v83;
    *((void *)&v37 + 1) -= 8;
  }
  int64_t v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
  {
    operator delete(v84);
  }
}

void sub_1A427C830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

__CFString *PFPosterSettlingEffectGatingLevelDescription(uint64_t a1)
{
  double v1 = @"Default";
  if (a1 == 1) {
    double v1 = @"Interactive";
  }
  if (a1 == 2) {
    return @"Overnight";
  }
  else {
    return v1;
  }
}

void sub_1A427F684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  __destructor_8_s0_sb8_s16((uint64_t)va);
  _Unwind_Resume(a1);
}

void __destructor_8_s0_sb8_s16(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
}

uint64_t PFAppleArchiveEntryMessageProc(uint64_t a1, uint64_t a2, const char *a3)
{
  if (*a3)
  {
    uint64_t v5 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v6 = [v5 stringWithFileSystemRepresentation:a3 length:strlen(a3)];

    id v7 = [*(id *)(a1 + 16) URLByAppendingPathComponent:v6];
  }
  else
  {
    id v7 = *(id *)(a1 + 16);
  }
  char v11 = 0;
  unsigned int v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))() ^ 1;
  if (v11) {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v9 = v8;
  }

  return v9;
}

unsigned char *pf::SceneTaxonomyLineParser::finalize(pf::SceneTaxonomyLineParser *this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  pf::SceneTaxonomyNode::SceneTaxonomyNode((uint64_t)v31, 0, 0, 0, (void *)this + 15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  uint64_t v2 = *((void *)this + 20);
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)&buf, "|_ROOT_|", (void *)this + 12);
  boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::emplace_unique<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode&>((uint64_t)v30, v2, (uint64_t)&buf, (uint64_t)&buf, (uint64_t)v31);
  BOOL v3 = (void *)boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)&buf);
  if (v30[0] == 1) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = (char *)v30 + v30[0];
  }
  *((void *)v4 + 13) = -104;
  uint64_t v5 = *((void *)this + 20);
  if (!*(void *)(v5 + 32))
  {
    uint64_t v14 = 1;
LABEL_18:
    int64_t v15 = 0;
    goto LABEL_19;
  }
  boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(v3, v5, *(void *)(v5 + 24));
  if ((void)buf == 1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (char *)&buf + buf;
  }
  uint64_t v7 = *(void *)v6;
  int64_t v8 = v6 - (char *)&v35;
  if (v7 == 1) {
    int64_t v8 = 0;
  }
  uint64_t v9 = v8 + v7;
  if (v9 == 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (char *)&v35 + v9;
  }
  char v11 = v10 + 304;
  uint64_t v12 = *((void *)v10 + 38);
  int64_t v13 = v11 - (char *)&buf;
  if (v12 == 1) {
    int64_t v13 = 0;
  }
  uint64_t v14 = v13 + v12;
  if (v14 == 1) {
    goto LABEL_18;
  }
  int64_t v15 = (char *)&buf - (char *)&v29;
LABEL_19:
  int64_t v16 = v15 + v14;
  int64_t v29 = v16;
  uint64_t v35 = 1;
  if (v16 != 1)
  {
    uint64_t v17 = (char *)&v30[-1] + v16;
    if ((void *)((char *)&v30[-1] + v16))
    {
      uint64_t v18 = 1;
      do
      {
        if (v17 != v4 && !*((void *)v17 + 18))
        {
          pf::SceneTaxonomyNode::addChild((pf::SceneTaxonomyNode *)(v4 + 32), (pf::SceneTaxonomyNode *)(v17 + 32));
          int64_t v16 = v29;
          uint64_t v18 = v35;
        }
        if (v16 == 1) {
          float v19 = 0;
        }
        else {
          float v19 = (char *)&v30[-1] + v16;
        }
        float v20 = v19 + 304;
        uint64_t v21 = *((void *)v19 + 38);
        int64_t v22 = v20 - (char *)&buf;
        if (v21 == 1) {
          int64_t v22 = 0;
        }
        uint64_t v23 = v22 + v21;
        if (v23 == 1) {
          int64_t v24 = 0;
        }
        else {
          int64_t v24 = (char *)&buf - (char *)&v29;
        }
        int64_t v16 = v24 + v23;
        int64_t v29 = v16;
        uint64_t v17 = (char *)&v30[-1] + v16;
        if (v16 == 1) {
          uint64_t v17 = 0;
        }
        long long v25 = (char *)&v35 + v18;
        if (v18 == 1) {
          long long v25 = 0;
        }
      }
      while (v17 != v25);
    }
  }
  uint64_t v26 = *((void *)this + 7);
  *(void *)&long long buf = "version";
  *((void *)&buf + 1) = v26;
  uint64_t v37 = 1;
  __int16 v38 = 256;
  boost::interprocess::ipcdetail::named_proxy<boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>,int,false>::operator()<int const&>((uint64_t)&buf, (uint64_t)&PF_SCENE_TAXONOMY_VERSION);
  boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>::shrink_to_fit<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>,char>(*((char **)this + 1));
  unint64_t v27 = PFChecksumArchiveData((char *)(*((void *)this + 7) - 8), *(void *)(*((void *)this + 7) + 48) + 8, *((char **)this + 3), *((void *)this + 4));
  **((void **)this + 5) = v27;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v27;
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneTaxonomy checksum %016llx", (uint8_t *)&buf, 0xCu);
  }
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)&v34);
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)&v33);
  return boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)&v32);
}

void sub_1A4281FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pf::SceneTaxonomyNode::SceneTaxonomyNode(uint64_t a1, uint64_t a2, int a3, char a4, void *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = a3;
  *(unsigned char *)(a1 + 12) = a4;
  *(double *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a7;
  *(double *)(a1 + 32) = a8;
  *(double *)(a1 + 40) = a9;
  *(double *)(a1 + 4_Block_object_dispose(&STACK[0x360], 8) = a10;
  *(double *)(a1 + 56) = a11;
  *(double *)(a1 + 64) = a12;
  *(void *)(a1 + 72) = 1;
  uint64_t v14 = a1 + 80;
  if (*a5 == 1) {
    int64_t v15 = 0;
  }
  else {
    int64_t v15 = (char *)a5 + *a5;
  }
  if (v15) {
    uint64_t v16 = v15 - (char *)&v22;
  }
  else {
    uint64_t v16 = 1;
  }
  uint64_t v22 = v16;
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::table(v14, &v22);
  if (*a5 == 1) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = (char *)a5 + *a5;
  }
  if (v17) {
    uint64_t v18 = v17 - (char *)&v22;
  }
  else {
    uint64_t v18 = 1;
  }
  uint64_t v22 = v18;
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::table(a1 + 144, &v22);
  if (*a5 == 1) {
    float v19 = 0;
  }
  else {
    float v19 = (char *)a5 + *a5;
  }
  if (v19) {
    uint64_t v20 = v19 - (char *)&v22;
  }
  else {
    uint64_t v20 = 1;
  }
  uint64_t v22 = v20;
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::table(a1 + 208, &v22);
  return a1;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::emplace_unique<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()(a3);
  unint64_t v11 = 265 * ((~v10 + (v10 << 21)) ^ ((~v10 + (v10 << 21)) >> 24));
  uint64_t v12 = 2147483649u * ((21 * (v11 ^ (v11 >> 14))) ^ ((21 * (v11 ^ (v11 >> 14))) >> 28));
  uint64_t result = (uint64_t)boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::find_node_impl<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(&v129, a2, v12, a3);
  if (v129 == 1)
  {
    uint64_t v131 = (uint64_t *)(a2 + 16);
    v132[0] = 1;
    boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(&v131);
    if (v132[0] == 1) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = (char *)v132 + v132[0];
    }
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v14, a4);
    *((_OWORD *)v14 + 2) = *(_OWORD *)a5;
    long long v15 = *(_OWORD *)(a5 + 16);
    long long v16 = *(_OWORD *)(a5 + 32);
    long long v17 = *(_OWORD *)(a5 + 48);
    *((void *)v14 + 12) = *(void *)(a5 + 64);
    *((_OWORD *)v14 + 4) = v16;
    *((_OWORD *)v14 + 5) = v17;
    *((_OWORD *)v14 + 3) = v15;
    uint64_t v18 = *(void *)(a5 + 72);
    uint64_t v19 = a5 + 72 - (void)(v14 + 104);
    if (v18 == 1) {
      uint64_t v19 = 0;
    }
    *((void *)v14 + 13) = v19 + v18;
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::unordered_set((uint64_t)(v14 + 112), a5 + 80);
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::unordered_set((uint64_t)(v14 + 176), a5 + 144);
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::unordered_set((uint64_t)(v14 + 240), a5 + 208);
    if (v132[0] == 1) {
      __assert_rtn("release", "implementation.hpp", 1955, "node_");
    }
    int64_t v20 = (char *)v132 - (char *)&v126 + v132[0];
    int64_t v126 = v20;
    int64_t v21 = (char *)&v126 - (char *)&v130;
    if (v20 == 1) {
      int64_t v21 = 0;
    }
    int64_t v22 = v21 + v20;
    int64_t v130 = v22;
    uint64_t v131 = (uint64_t *)(a2 + 16);
    int64_t v23 = (char *)&v130 - (char *)v132;
    if (v22 == 1) {
      int64_t v23 = 0;
    }
    v132[0] = v23 + v22;
    unint64_t v24 = *(void *)(a2 + 32);
    unint64_t v25 = v24 + 1;
    if (*(void *)(a2 + 56) == 1)
    {
      unint64_t v26 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(v25, *(float *)(a2 + 40));
      if (*(void *)(a2 + 24) <= v26) {
        unint64_t v27 = v26;
      }
      else {
        unint64_t v27 = *(void *)(a2 + 24);
      }
      boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::create_buckets(a2, v27);
    }
    else if (*(void *)(a2 + 48) < v25)
    {
      unint64_t v32 = v24 + (v24 >> 1);
      if (v32 > v25) {
        unint64_t v25 = v32;
      }
      unint64_t v33 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(v25, *(float *)(a2 + 40));
      if (v33 != *(void *)(a2 + 24))
      {
        if (*(void *)(a2 + 56) == 1) {
          __assert_rtn("rehash_impl", "implementation.hpp", 4578, "this->buckets_");
        }
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::create_buckets(a2, v33);
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(v139, a2, *(void *)(a2 + 24));
        uint64_t v125 = v12;
        if (v139[0] == 1) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = (char *)v139 + v139[0];
        }
        uint64_t v35 = *(void *)v34;
        int64_t v36 = v34 - (char *)&v138;
        if (v35 == 1) {
          int64_t v36 = 0;
        }
        uint64_t v37 = v36 + v35;
        uint64_t v138 = v37;
        BOOL v38 = v37 == 1;
        uint64_t v39 = (char *)&v139[-1] + v37;
        if (v37 == 1) {
          uint64_t v39 = 0;
        }
        if (*((void *)v39 + 38) != 1)
        {
          int64_t v40 = (char *)&v135 - (char *)v139;
          do
          {
            BOOL v48 = !v38;
            uint64_t v41 = 8;
            if (!v48) {
              uint64_t v41 = 0;
            }
            uint64_t v42 = v41 + v37;
            uint64_t v137 = v42;
            if (v42 == 1) {
              uint64_t v43 = 0;
            }
            else {
              uint64_t v43 = (char *)&v137 + v42;
            }
            float64x2_t v44 = v43 + 304;
            uint64_t v45 = *((void *)v43 + 38);
            int64_t v46 = v44 - (char *)v139;
            if (v45 == 1) {
              int64_t v46 = 0;
            }
            uint64_t v47 = v46 + v45;
            v139[0] = v46 + v45;
            BOOL v48 = v46 + v45 == 1;
            uint64_t v49 = 24;
            if (v48) {
              uint64_t v49 = 0;
            }
            uint64_t v50 = v49 + v47;
            uint64_t v136 = v50;
            if (v48) {
              unint64_t v51 = 0;
            }
            else {
              unint64_t v51 = (char *)v139 + v47;
            }
            if (v48) {
              int64_t v52 = 0;
            }
            else {
              int64_t v52 = (char *)v139 - (char *)&v134;
            }
            if (v50 == 1) {
              int64_t v53 = 0;
            }
            else {
              int64_t v53 = (char *)&v136 + v50;
            }
            unint64_t v54 = boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()((uint64_t)v53);
            unint64_t v55 = 265 * ((~v54 + (v54 << 21)) ^ ((~v54 + (v54 << 21)) >> 24));
            unint64_t v56 = (*(void *)(a2 + 24) - 1) & (2147483649u
                                                * ((21 * (v55 ^ (v55 >> 14))) ^ ((21 * (v55 ^ (v55 >> 14))) >> 28)));
            *((void *)v51 + 39) = v56 & 0x7FFFFFFFFFFFFFFFLL;
            int64_t v57 = v52 + v47;
            uint64_t v58 = (char *)&v134 + v52 + v47;
            if (v52 + v47 == 1) {
              uint64_t v58 = 0;
            }
            uint64_t v59 = v58 + 304;
            uint64_t v60 = *((void *)v58 + 38);
            int64_t v61 = v59 - (char *)&v135;
            if (v60 == 1) {
              int64_t v61 = 0;
            }
            uint64_t v62 = v61 + v60;
            if (v62 != 1)
            {
              unint64_t v63 = (char *)&v135 + v62;
              if (*(uint64_t *)((char *)&v135 + v62 + 312) < 0)
              {
                do
                {
                  uint64_t v64 = v62 + v40;
                  if (v62 + v40 == 1) {
                    uint64_t v65 = 0;
                  }
                  else {
                    uint64_t v65 = v63;
                  }
                  *((void *)v65 + 39) = v56 | 0x8000000000000000;
                  if (v62 + v40 == 1) {
                    int64_t v66 = 0;
                  }
                  else {
                    int64_t v66 = (char *)v139 - (char *)&v134;
                  }
                  int64_t v57 = v66 + v64;
                  int64_t v67 = (char *)&v134 + v57;
                  if (v57 == 1) {
                    int64_t v67 = 0;
                  }
                  uint64_t v68 = v67 + 304;
                  uint64_t v69 = *((void *)v67 + 38);
                  int64_t v70 = v68 - (char *)&v135;
                  if (v69 == 1) {
                    int64_t v70 = 0;
                  }
                  uint64_t v62 = v70 + v69;
                  if (v62 == 1) {
                    break;
                  }
                  unint64_t v63 = (char *)&v135 + v62;
                }
                while (*(uint64_t *)((char *)&v135 + v62 + 312) < 0);
                v139[0] = v64;
              }
            }
            int64_t v134 = v57;
            boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v135, a2, v56);
            uint64_t v71 = (char *)&v135 + v135;
            if (v135 == 1) {
              uint64_t v71 = 0;
            }
            if (*(void *)v71 == 1)
            {
              uint64_t v72 = (char *)((char *)&v138 - v71);
              if (v138 == 1) {
                uint64_t v72 = 0;
              }
              *(void *)uint64_t v71 = &v72[v138];
              uint64_t v73 = 1;
              if (v139[0] == 1) {
                uint64_t v73 = 0;
              }
              uint64_t v37 = v73 * 8 + v139[0];
              uint64_t v138 = v73 * 8 + v139[0];
              unint64_t v74 = (char *)&v139[v73 - 1] + v139[0];
            }
            else
            {
              if (v139[0] == 1) {
                int64_t v75 = 0;
              }
              else {
                int64_t v75 = (char *)v139 + v139[0];
              }
              uint64_t v76 = *((void *)v75 + 38);
              uint64_t v77 = v75 + 304 - (char *)&v133;
              if (v76 == 1) {
                uint64_t v77 = 0;
              }
              uint64_t v78 = v77 + v76;
              uint64_t v133 = v78;
              if (*(void *)v71 == 1) {
                uint64_t v79 = 0;
              }
              else {
                uint64_t v79 = &v71[*(void *)v71];
              }
              int64_t v80 = v79 + 304;
              uint64_t v81 = *((void *)v79 + 38);
              int64_t v82 = v80 - (v75 + 304);
              if (v81 == 1) {
                int64_t v82 = 0;
              }
              *((void *)v75 + 3_Block_object_dispose(&STACK[0x360], 8) = v82 + v81;
              uint64_t v37 = v138;
              unint64_t v74 = (char *)&v139[-1] + v138;
              if (v138 == 1) {
                uint64_t v83 = 0;
              }
              else {
                uint64_t v83 = (char *)&v139[-1] + v138;
              }
              uint64_t v84 = *(void *)v71;
              unint64_t v85 = &v71[*(void *)v71];
              if (v84 == 1) {
                unint64_t v85 = 0;
              }
              uint64_t v86 = *((void *)v83 + 38);
              uint64_t v87 = (char *)(v83 - v85);
              if (v86 == 1) {
                uint64_t v87 = 0;
              }
              *((void *)v85 + 3_Block_object_dispose(&STACK[0x360], 8) = &v87[v86];
              uint64_t v88 = (char *)((char *)&v133 - (v83 + 304));
              if (v78 == 1) {
                uint64_t v88 = 0;
              }
              *((void *)v83 + 3_Block_object_dispose(&STACK[0x360], 8) = &v88[v78];
            }
            BOOL v38 = v37 == 1;
            if (v37 == 1) {
              unint64_t v74 = 0;
            }
          }
          while (*((void *)v74 + 38) != 1);
        }
        uint64_t v12 = v125;
      }
    }
    int64_t v89 = (char *)v132 - (char *)&v134;
    if (v132[0] == 1) {
      int64_t v89 = 0;
    }
    int64_t v134 = v89 + v132[0];
    v132[0] = 1;
    uint64_t v90 = (*(void *)(a2 + 24) - 1) & v12;
    boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v138, a2, v90);
    int64_t v91 = v134;
    long long v92 = (char *)&v134 + v134;
    if (v134 == 1) {
      long long v92 = 0;
    }
    *((void *)v92 + 39) = v90 & 0x7FFFFFFFFFFFFFFFLL;
    if (v138 == 1) {
      long long v93 = 0;
    }
    else {
      long long v93 = (void *)((char *)&v139[-1] + v138);
    }
    if (*v93 == 1)
    {
      boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(v139, a2, *(void *)(a2 + 24));
      if (v139[0] == 1) {
        uint64_t v94 = 0;
      }
      else {
        uint64_t v94 = (char *)v139 + v139[0];
      }
      uint64_t v95 = *(void *)v94;
      int64_t v96 = v94 - (char *)&v137;
      if (v95 == 1) {
        int64_t v96 = 0;
      }
      uint64_t v97 = v96 + v95;
      uint64_t v137 = v97;
      double v98 = (char *)&v137 + v97;
      if (v97 == 1) {
        double v98 = 0;
      }
      if (*((void *)v98 + 38) != 1)
      {
        int64_t v99 = (char *)&v137 - (char *)&v135;
        if (v97 == 1) {
          int64_t v99 = 0;
        }
        uint64_t v135 = v99 + v97;
        if (v99 + v97 == 1) {
          uint64_t v100 = 0;
        }
        else {
          uint64_t v100 = (char *)&v135 + v99 + v97;
        }
        uint64_t v101 = v100 + 304;
        uint64_t v102 = *((void *)v100 + 38);
        int64_t v103 = v101 - (char *)&v136;
        if (v102 == 1) {
          int64_t v103 = 0;
        }
        uint64_t v104 = v103 + v102;
        uint64_t v136 = v104;
        if (v104 == 1) {
          uint64_t v105 = 0;
        }
        else {
          uint64_t v105 = (char *)&v136 + v104;
        }
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(v139, a2, *((void *)v105 + 39) & 0x7FFFFFFFFFFFFFFFLL);
        if (v139[0] == 1) {
          uint64_t v106 = 0;
        }
        else {
          uint64_t v106 = (char *)v139 + v139[0];
        }
        uint64_t v107 = (char *)((char *)&v134 - v106);
        if (v134 == 1) {
          uint64_t v107 = 0;
        }
        *(void *)uint64_t v106 = &v107[v134];
        uint64_t v97 = v137;
      }
      if (v138 == 1) {
        uint64_t v108 = 0;
      }
      else {
        uint64_t v108 = (char *)&v139[-1] + v138;
      }
      uint64_t v109 = (char *)((char *)&v137 - v108);
      if (v97 == 1) {
        uint64_t v109 = 0;
      }
      *(void *)uint64_t v108 = &v109[v97];
      uint64_t v110 = (char *)&v137 + v137;
      if (v137 == 1) {
        uint64_t v110 = 0;
      }
      int64_t v91 = v134;
      uint64_t v111 = (char *)&v134 + v134;
      long long v112 = (char *)((char *)&v134 - (v110 + 304));
      if (v134 == 1) {
        uint64_t v111 = 0;
      }
      uint64_t v113 = *((void *)v110 + 38);
      if (v134 == 1) {
        long long v112 = 0;
      }
      uint64_t v114 = v110 - v111;
      if (v113 == 1) {
        uint64_t v114 = 0;
      }
      *((void *)v111 + 3_Block_object_dispose(&STACK[0x360], 8) = v114 + v113;
      uint64_t v115 = &v112[v91];
    }
    else
    {
      uint64_t v116 = *(uint64_t *)((char *)v93 + *v93 + 304);
      uint64_t v117 = (char *)v93 + *v93 - v92;
      if (v116 == 1) {
        uint64_t v117 = 0;
      }
      *((void *)v92 + 3_Block_object_dispose(&STACK[0x360], 8) = v117 + v116;
      uint64_t v118 = *v93;
      uint64_t v119 = (char *)v93 + *v93;
      if (v118 == 1) {
        uint64_t v110 = 0;
      }
      else {
        uint64_t v110 = v119;
      }
      uint64_t v120 = (char *)((char *)&v134 - (v110 + 304));
      if (v91 == 1) {
        uint64_t v120 = 0;
      }
      uint64_t v115 = &v120[v91];
    }
    *((void *)v110 + 3_Block_object_dispose(&STACK[0x360], 8) = v115;
    ++*(void *)(a2 + 32);
    int64_t v121 = (char *)&v134 - (char *)&v127;
    if (v91 == 1) {
      int64_t v121 = 0;
    }
    int64_t v127 = v121 + v91;
    uint64_t result = boost::unordered::detail::node_tmp<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_tmp((uint64_t)&v131);
    int64_t v122 = (char *)&v127 - (char *)&v131;
    if (v127 == 1) {
      int64_t v122 = 0;
    }
    uint64_t v123 = v122 + v127;
    int64_t v124 = (char *)&v132[-1] - a1;
    if (v123 == 1) {
      int64_t v124 = 0;
    }
    *(void *)a1 = &v124[v123];
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = 1;
  }
  else
  {
    uint64_t v28 = v129 + (char *)&v129 - &v128;
    int64_t v29 = &v128 - (char *)&v131;
    if (v28 == 1) {
      int64_t v29 = 0;
    }
    uint64_t v30 = v29 + v28;
    uint64_t v31 = (char *)&v132[-1] - a1;
    if (v30 == 1) {
      uint64_t v31 = 0;
    }
    *(void *)a1 = &v31[v30];
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = 0;
  }
  return result;
}

void sub_1A4282950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table(v13);
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table(v12);
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(v11);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A4282980(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  __cxa_begin_catch(a1);
  uint64_t v27 = *(void *)(v26 - 104);
  uint64_t v28 = v26 - 104 - (void)&a25;
  BOOL v29 = v27 == 1;
  if (v27 == 1) {
    uint64_t v28 = 0;
  }
  uint64_t v30 = v28 + v27;
  a25 = v30;
  uint64_t v31 = v27 + v26 - 104;
  if (v29) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v31;
  }
  if (v30 == 1) {
    unint64_t v33 = 0;
  }
  else {
    unint64_t v33 = (char *)&a25 + v30;
  }
  uint64_t v34 = v33 + 304;
  uint64_t v35 = *((void *)v33 + 38);
  uint64_t v36 = v26 - 96;
  uint64_t v37 = &v34[-v26 + 96];
  if (v35 == 1) {
    uint64_t v37 = 0;
  }
  BOOL v38 = &v37[v35];
  *(void *)(v26 - 96) = v38;
  *(void *)(v32 + 304) = 1;
  if (v38 != (char *)1)
  {
    uint64_t v39 = v36 - (void)&a22;
    do
    {
      a22 = &v38[v39];
      if (&v38[v39] == (char *)1) {
        int64_t v40 = 0;
      }
      else {
        int64_t v40 = &v38[v36];
      }
      uint64_t v41 = v40 + 304;
      uint64_t v42 = *((void *)v40 + 38);
      uint64_t v43 = v41 - (char *)&a23;
      if (v42 == 1) {
        uint64_t v43 = 0;
      }
      a23 = v43 + v42;
      a21 = &v38[v36 - (void)&a21];
      boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_node(v25, (char *)&a21);
      --*(void *)(v25 + 32);
      if (a23 == 1) {
        float64x2_t v44 = 0;
      }
      else {
        float64x2_t v44 = (char *)&a23 - v36;
      }
      BOOL v38 = &v44[a23];
      *(void *)(v26 - 96) = &v44[a23];
    }
    while (v38 != (char *)1);
  }
  __cxa_rethrow();
}

void sub_1A4282A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  __cxa_end_catch();
  boost::unordered::detail::node_tmp<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_tmp((uint64_t)va);
  JUMPOUT(0x1A4282AA0);
}

char *pf::SceneTaxonomyNode::addChild(pf::SceneTaxonomyNode *this, pf::SceneTaxonomyNode *a2)
{
  uint64_t v6 = a2;
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::emplace_unique<pf::SceneTaxonomyNode*>((uint64_t)v5, (uint64_t)this + 144, &v6);
  uint64_t v6 = this;
  return boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::emplace_unique<pf::SceneTaxonomyNode*>((uint64_t)v5, (uint64_t)a2 + 80, &v6);
}

unint64_t boost::interprocess::ipcdetail::named_proxy<boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>,int,false>::operator()<int const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA3A8] + 8) & 0x7FFFFFFFFFFFFFFFLL;
  int64x2_t v5 = vdupq_n_s64(4uLL);
  uint64_t v6 = v2;
  uint64_t v7 = a2;
  unint64_t v4 = &unk_1EF7A9DF8;
  return boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(*(void *)(a1 + 8), *(char **)a1, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25), (uint64_t)&v4);
}

uint64_t boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>::shrink_to_fit<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>,char>(char *a1)
{
  v38[0] = a1;
  uint64_t v33 = 0;
  *(void *)uint64_t v35 = &v33;
  int v36 = 1;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::managed_open_or_create_impl<char const*,boost::interprocess::ipcdetail::create_open_func<boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>>>((uint64_t)v34, v38, 2, (uint64_t)v35);
  uint64_t v2 = v33;
  uint64_t v3 = v33 + 55;
  unint64_t v4 = (*(void *)(v33 + 32) + v33 + 55) & 0xFFFFFFFFFFFFFFF8;
  int64x2_t v5 = (char *)(v4 + 8);
  unint64_t v6 = ((*(void *)(v33 + 48) - (v4 - v33 + 8)) & 0xFFFFFFFFFFFFFFF8) - 16;
  uint64_t v7 = &v5[v6];
  if (((unint64_t)&v5[v6] & 7) != 0) {
    goto LABEL_33;
  }
  uint64_t v8 = *((void *)v7 + 1);
  if (v6 != 8 * *((void *)v5 + 1))
  {
    if ((v8 & 0x4000000000000000) != 0) {
      goto LABEL_28;
    }
    uint64_t v14 = &v7[-8 * *(void *)v7];
    unint64_t v15 = *((void *)v14 + 1);
    if (!v6) {
      goto LABEL_18;
    }
    if ((v15 & 0x8000000000000000) != 0)
    {
      unint64_t v24 = "!prev->m_allocated";
      int v25 = 1218;
    }
    else
    {
      if ((v15 & 0x3FFFFFFFFFFFFFFFLL) == *(void *)v7)
      {
LABEL_18:
        uint64_t v10 = 0;
        goto LABEL_19;
      }
      unint64_t v24 = "prev->m_size == block->m_prev_size";
      int v25 = 1219;
    }
    uint64_t v26 = "rbtree_best_fit.hpp";
    uint64_t v27 = "priv_is_prev_allocated";
LABEL_40:
    __assert_rtn(v27, v26, v25, v24);
  }
  *(void *)uint64_t v35 = 0;
  v38[0] = 0;
  uint64_t v9 = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v33, 1, 0, (unint64_t *)v35, (uint64_t *)v38, 1uLL);
  uint64_t v10 = (uint64_t)v9;
  if (!v9) {
    goto LABEL_28;
  }
  if ((v9 & 7) != 0) {
    goto LABEL_33;
  }
  uint64_t v11 = v9 - 16;
  unint64_t v12 = *((void *)v9 - 1);
  unint64_t v13 = ((*(void *)(v2 + 32) + v3) & 0xFFFFFFFFFFFFFFF8)
      + ((*(void *)(v2 + 48) + v2 - ((*(void *)(v2 + 32) + v3) & 0xFFFFFFFFFFFFFFF8) - 8) & 0xFFFFFFFFFFFFFFF8);
  if ((char *)(v13 + 8) != v9 && ((*(void *)&v11[8 * v12 + 8] & 0x4000000000000000) != 0) != v12 >> 63) {
    goto LABEL_36;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    unint64_t v24 = "priv_is_allocated_block(unique_block)";
    int v25 = 545;
    goto LABEL_39;
  }
  if ((v11 & 7) != 0)
  {
LABEL_33:
    unint64_t v24 = "uint_ptr % Alignment == 0";
    int v25 = 106;
    uint64_t v26 = "mem_algo_common.hpp";
    uint64_t v27 = "assert_alignment";
    goto LABEL_40;
  }
  uint64_t v14 = &v11[8 * v12];
  unint64_t v15 = *((void *)v14 + 1);
  if ((char *)(v13 - 8) != v14 && ((*(void *)&v14[8 * v15 + 8] & 0x4000000000000000) != 0) != v15 >> 63)
  {
LABEL_36:
    unint64_t v24 = "allocated == next_block_prev_allocated";
    int v25 = 1200;
    uint64_t v26 = "rbtree_best_fit.hpp";
    uint64_t v27 = "priv_is_allocated_block";
    goto LABEL_40;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
    unint64_t v24 = "!priv_is_allocated_block(last_block)";
    int v25 = 548;
    goto LABEL_39;
  }
  if ((v14 & 7) != 0) {
    goto LABEL_33;
  }
LABEL_19:
  uint64_t v37 = v14 - (char *)&v37 + 16;
  int64_t v16 = (char *)&v37 - (char *)v35;
  if (v14 - (char *)&v37 == -15) {
    int64_t v16 = 0;
  }
  int64_t v17 = v16 + v14 - (char *)&v37 + 16;
  int64_t v18 = (char *)v35 - (char *)v38;
  if (v17 == 1) {
    int64_t v18 = 0;
  }
  v38[0] = (const char *)(v18 + v17);
  boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)v35, (char *)v2, (char *)v38);
  if ((v14 & 7) != 0) {
    goto LABEL_33;
  }
  *((void *)v14 + 1) = *((void *)v14 + 1) & 0xC000000000000000 | ((unint64_t)(v14 - v5) >> 3);
  *(void *)int64x2_t v5 = (unint64_t)(v14 - v5) >> 3;
  uint64_t v19 = *((void *)v14 + 1);
  *((void *)v14 + 1) = v19 | 0x8000000000000000;
  if ((v19 & 0x3FFFFFFFFFFFFFFFLL) != (v8 & 0x3FFFFFFFFFFFFFFFLL) - (v15 & 0x3FFFFFFFFFFFFFFFLL))
  {
    unint64_t v24 = "new_end_block->m_size == (old_end_block_size - last_block_size)";
    int v25 = 584;
LABEL_39:
    uint64_t v26 = "rbtree_best_fit.hpp";
    uint64_t v27 = "shrink_to_fit";
    goto LABEL_40;
  }
  uint64_t v20 = (unint64_t)&v14[-v2 + 16] & 0x3FFFFFFFFFFFFFFFLL;
  *(void *)(v2 + 4_Block_object_dispose(&STACK[0x360], 8) = v20;
  if ((char *)(((*(void *)(v2 + 32) + v3) & 0xFFFFFFFFFFFFFFF8)
              + ((v20 + v2 - ((*(void *)(v2 + 32) + v3) & 0xFFFFFFFFFFFFFFF8) - 8) & 0xFFFFFFFFFFFFFFF8)
              - 8) != v14)
  {
    unint64_t v24 = "priv_end_block() == new_end_block";
    int v25 = 588;
    goto LABEL_39;
  }
  if (v10) {
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate((char *)v2, v10);
  }
LABEL_28:
  off_t v21 = *(void *)(v33 + 48) + 8;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl(v34);
  LOWORD(v33) = 420;
  boost::interprocess::ipcdetail::file_wrapper::priv_open_or_create<char>(v35, 2, a1, 2, (mode_t *)&v33);
  if (v21 < 0)
  {
    *__error() = 22;
    goto LABEL_45;
  }
  int v22 = v35[0];
  uint64_t result = ftruncate(v35[0], v21);
  if (result)
  {
LABEL_45:
    uint64_t v28 = __error();
    uint64_t v29 = 0;
    int v30 = *v28;
    LODWORD(v33) = *v28;
    while (*(_DWORD *)&boost::interprocess::ec_table[v29] != v30)
    {
      v29 += 8;
      if (v29 == 128)
      {
        int v31 = 1;
        goto LABEL_50;
      }
    }
    int v31 = *(_DWORD *)&boost::interprocess::ec_table[v29 + 4];
LABEL_50:
    HIDWORD(v33) = v31;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v33);
  }
  if (v22 != -1) {
    return close(v22);
  }
  return result;
}

void sub_1A4282FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  __cxa_free_exception(v14);
  boost::interprocess::ipcdetail::file_wrapper::~file_wrapper((boost::interprocess::ipcdetail::file_wrapper *)&a14);
  _Unwind_Resume(a1);
}

void sub_1A4282FE8()
{
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl(v0);
  JUMPOUT(0x1A4282FF4);
}

void pf::SceneTaxonomyNode::~SceneTaxonomyNode(pf::SceneTaxonomyNode *this)
{
}

unint64_t boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(uint64_t a1, char *__s, unint64_t a3, int a4, int a5, uint64_t a6)
{
  unint64_t v8 = *(void *)(a6 + 16);
  if (!is_mul_ok(v8, a3)) {
    goto LABEL_2;
  }
  unint64_t v12 = __s;
  if (__s == (char *)-1)
  {
    unint64_t v12 = *(char **)(a6 + 24);
    int64_t v18 = (void *)(a1 + 88);
    int v19 = 2;
  }
  else
  {
    if (!__s)
    {
      unint64_t v14 = v8 * a3;
      unsigned int v15 = *(void *)(a6 + 8);
      unsigned int v16 = 0xF / v15 + 1;
      v22[0] = v8 * a3 + *(void *)(a6 + 8) * (unint64_t)v16;
      uint64_t v23 = 0;
      int64_t v17 = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(a1, 1, v22[0], v22, &v23, 1uLL);
      if (v17)
      {
        v22[0] = (unint64_t)v17;
        v22[1] = a1;
        *(void *)int64_t v17 = v14;
        *((_WORD *)v17 + 4) = 0;
        v17[10] = v15;
        v17[11] = 1;
        uint64_t v9 = &v17[v15 * (unint64_t)v16];
        uint64_t v23 = 0;
        (**(void (***)(uint64_t, char *, unint64_t, uint64_t *))a6)(a6, v9, a3, &v23);
        v22[0] = 0;
        boost::interprocess::ipcdetail::mem_algo_deallocator<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::~mem_algo_deallocator((uint64_t)v22);
        return (unint64_t)v9;
      }
LABEL_2:
      if (a5)
      {
        exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
        off_t v21 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
        *(void *)off_t v21 = &unk_1EF7A9B00;
      }
      return 0;
    }
    int64_t v18 = (void *)(a1 + 56);
    int v19 = 1;
  }

  return boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_named_construct<char>(a1, v19, v12, a3, a4, a5, a6, v18);
}

void sub_1A428321C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __cxa_begin_catch(a1);
  a11 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v12 + 8))(v12, v13, a12, &a11);
  __cxa_rethrow();
}

void sub_1A4283260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_named_construct<char>(uint64_t a1, int a2, char *__s, uint64_t a4, int a5, int a6, uint64_t a7, void *a8)
{
  int v123 = a5;
  int v124 = a6;
  __src = __s;
  size_t v131 = strlen(__s);
  uint64_t v122 = *(void *)(a7 + 16);
  uint64_t v128 = *(unsigned __int8 *)(a7 + 8);
  uint64_t v139 = 1;
  uint64_t v140 = 1;
  char v141 = 0;
  v138[0] = 0;
  uint64_t v129 = &v139;
  uint64_t v13 = (char *)(a8 + 1);
  uint64_t v142 = (char *)(a8 + 1) - (char *)&v142;
  uint64_t v143 = (char *)(a8 + 1) - (char *)&v143;
  v147[0] = (char *)(a8 + 1) - (char *)v147;
  uint64_t v14 = (char *)(a8 + 1) - (char *)&v146;
  uint64_t v146 = v14;
  uint64_t v125 = a8;
  int64_t v126 = (char *)(a8 + 1);
  if (v14 == 1) {
    uint64_t v13 = 0;
  }
  unint64_t v15 = *(void *)v13 & 0xFFFFFFFFFFFFFFFDLL;
  int64_t v16 = v13 - (char *)v145;
  if (v15 == 1) {
    int64_t v16 = 0;
  }
  unint64_t v17 = v16 + v15;
  uint64_t v144 = 1;
  v145[0] = v16 + v15;
  uint64_t v127 = a1;
  int v121 = a2;
  if (v16 + v15 == 1)
  {
    uint64_t v18 = 1;
    char v19 = 1;
  }
  else
  {
    uint64_t v119 = a4;
    uint64_t v120 = a7;
    int64_t v20 = (char *)v145 - (char *)&v146;
    uint64_t v18 = 1;
    do
    {
      uint64_t v14 = v20 + v17;
      uint64_t v146 = v20 + v17;
      unint64_t v133 = (char *)v145 + v17 - (char *)&v133;
      if (v133 == 1) {
        goto LABEL_146;
      }
      int v21 = boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::intrusive_key_value_less::operator()(__src, v131, (uint64_t)v145 + v17);
      char v19 = v21;
      if (v21)
      {
        if (v17 == 1) {
          int v22 = 0;
        }
        else {
          int v22 = (char *)v145 + v17;
        }
        uint64_t v23 = v22 + 8;
      }
      else
      {
        if (v14 == 1) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = 40;
        }
        uint64_t v18 = v24 + v14;
        uint64_t v144 = v24 + v14;
        if (v17 == 1) {
          int v25 = 0;
        }
        else {
          int v25 = (char *)v145 + v17;
        }
        uint64_t v23 = v25 + 16;
      }
      uint64_t v26 = *(void *)v23;
      int64_t v27 = v23 - (char *)&v133;
      if (v26 == 1) {
        int64_t v27 = 0;
      }
      uint64_t v28 = v27 + v26;
      if (v28 == 1) {
        int64_t v29 = 0;
      }
      else {
        int64_t v29 = (char *)&v133 - (char *)v145;
      }
      unint64_t v17 = v29 + v28;
      v145[0] = v29 + v28;
    }
    while (v29 + v28 != 1);
    if (v18 == 1)
    {
      a4 = v119;
      a7 = v120;
      a1 = v127;
    }
    else
    {
      unint64_t v133 = (char *)&v145[-1] + v18 - (char *)&v133;
      if (v133 == 1) {
LABEL_146:
      }
        __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
      a7 = v120;
      a1 = v127;
      if (!boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::intrusive_key_value_less::operator()((uint64_t)&v145[-1] + v18, __src, v131))
      {
        char v32 = 0;
        int v30 = 1;
        a4 = v119;
        goto LABEL_35;
      }
      a4 = v119;
    }
  }
  int v30 = 0;
  v138[0] = v19;
  int v31 = (char *)((char *)&v146 - (char *)v129);
  if (v14 == 1) {
    int v31 = 0;
  }
  uint64_t v139 = (uint64_t)&v31[v14];
  char v32 = 1;
LABEL_35:
  int64_t v33 = (char *)&v144 - (char *)&v133;
  if (v18 == 1) {
    int64_t v33 = 0;
  }
  int64_t v34 = v33 + v18;
  int64_t v35 = (char *)&v133 - (char *)&v146;
  if (v34 == 1) {
    int64_t v35 = 0;
  }
  int64_t v36 = v35 + v34;
  int64_t v37 = (char *)&v146 - (char *)v147;
  if (v36 == 1) {
    int64_t v37 = 0;
  }
  int64_t v38 = v37 + v36;
  int64_t v39 = (char *)v147 - (char *)v137;
  if (v38 == 1) {
    int64_t v39 = 0;
  }
  uint64_t v40 = v39 + v38;
  int64_t v41 = (char *)v137 - (char *)&v140;
  if (v40 == 1) {
    int64_t v41 = 0;
  }
  uint64_t v42 = v41 + v40;
  uint64_t v140 = v42;
  char v141 = v32;
  int64_t v43 = (char *)&v140 - (char *)&v133;
  if (v42 == 1) {
    int64_t v43 = 0;
  }
  int64_t v44 = v43 + v42;
  int64_t v45 = (char *)&v133 - (char *)&v136;
  if (v44 == 1) {
    int64_t v45 = 0;
  }
  int64_t v46 = v45 + v44;
  int64_t v136 = v46;
  if (v30)
  {
    if (v123)
    {
      uint64_t v47 = (char *)&v137[-1] + v46;
      if (v46 == 1) {
        uint64_t v47 = 0;
      }
      unint64_t v133 = v47 - (char *)&v133;
      if (v47 - (char *)&v133 == 1) {
        __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
      }
      return (unint64_t)&v47[v47[34] * (unint64_t)(0xFu / v47[34] + 1)
                                  + 24];
    }
    if (v124)
    {
      exception = __cxa_allocate_exception(0x28uLL);
      unint64_t v133 = 0x900000000;
      boost::interprocess::interprocess_exception::interprocess_exception(exception, (uint64_t *)&v133);
    }
    return 0;
  }
  uint64_t v49 = v122 * a4;
  unsigned int v50 = 0xF / v128 + 1;
  if (v124)
  {
    unint64_t v51 = (int64x2_t *)boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(a1, v122 * a4 + (unsigned __int16)v131 + v128 * (unint64_t)v50 + 25);
  }
  else
  {
    unint64_t v133 = v122 * a4 + (unsigned __int16)v131 + v128 * (unint64_t)v50 + 25;
    v137[0] = 0;
    unint64_t v51 = (int64x2_t *)boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(a1, 1, v133, &v133, v137, 1uLL);
    if (!v51) {
      return 0;
    }
  }
  int64x2_t *v51 = vdupq_n_s64(1uLL);
  v51[1].i64[0] = 1;
  uint64_t v146 = (char *)v51 - (char *)&v146;
  int64_t v53 = (char *)&v146 - (char *)&v133;
  if ((char *)v51 - (char *)&v146 == 1) {
    int64_t v53 = 0;
  }
  unint64_t v54 = v53 + (char *)v51 - (char *)&v146;
  unint64_t v133 = v54;
  if (v54 == 1) {
    unint64_t v55 = 0;
  }
  else {
    unint64_t v55 = (uint64_t *)((char *)&v133 + v54);
  }
  *unint64_t v55 = *v55 & 2 | 1;
  uint64_t v56 = v146;
  int64_t v57 = (char *)&v146 - (char *)v137;
  uint64_t v58 = -8;
  if (v146 == 1) {
    int64_t v57 = 0;
  }
  int64_t v59 = v57 + v146;
  if (v146 == 1) {
    uint64_t v58 = 0;
  }
  BOOL v60 = v59 == 1;
  int64_t v61 = (char *)v137 + v59;
  if (v60) {
    int64_t v61 = 0;
  }
  *((void *)v61 + 1) = 1;
  uint64_t v62 = v58 + v56;
  if (v62 == 1) {
    unint64_t v63 = 0;
  }
  else {
    unint64_t v63 = (char *)v147 + v62;
  }
  *((void *)v63 + 2) = 1;
  v51[1].i64[1] = v49;
  uint64_t v64 = &v51[1].i8[8];
  __int8 v65 = (32 * v121) | 1;
  size_t v66 = v131;
  v51[2].i16[0] = v131;
  unint64_t v67 = v128 * (unint64_t)v50;
  v51[2].i8[2] = v128;
  v51[2].i8[3] = v65;
  if (v66 != -1) {
    memmove(&v64[v49 + v67], __src, v66 + 1);
  }
  int64_t v68 = (char *)v51 - (char *)v145;
  v145[0] = (char *)v51 - (char *)v145;
  v137[0] = (char *)v51 - (char *)v137;
  unint64_t v69 = v51->i64[0] & 0xFFFFFFFFFFFFFFFDLL;
  int64_t v70 = (char *)v51 - (char *)&v133;
  if (v69 == 1) {
    int64_t v70 = 0;
  }
  if (v70 + v69 != 1)
  {
    uint64_t v114 = "!safemode_or_autounlink || node_algorithms::unique(to_insert)";
    int v115 = 1318;
LABEL_151:
    uint64_t v116 = "bstree.hpp";
    uint64_t v117 = "insert_unique_commit";
LABEL_152:
    __assert_rtn(v117, v116, v115, v114);
  }
  int64_t v71 = (char *)v129 - (char *)&v144;
  if (v139 == 1) {
    int64_t v71 = 0;
  }
  unint64_t v72 = v71 + v139;
  uint64_t v144 = v71 + v139;
  if (!v138[0])
  {
    boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::next_node((char *)&v133, (char *)&v144);
    int64_t v73 = (char *)&v133 - (char *)&v144;
    if (v133 == 1) {
      int64_t v73 = 0;
    }
    unint64_t v72 = v73 + v133;
    uint64_t v144 = v73 + v133;
  }
  int64_t v74 = v126 - (char *)v147;
  v147[0] = v126 - (char *)v147;
  int64_t v75 = (char *)&v144 - (char *)&v133;
  if (v72 == 1) {
    int64_t v75 = 0;
  }
  unint64_t v76 = v75 + v72;
  int64_t v77 = (char *)v147 - (char *)v137;
  if (v74 == 1) {
    int64_t v78 = 0;
  }
  else {
    int64_t v78 = (char *)v147 - (char *)v137;
  }
  uint64_t v79 = v78 + v74;
  if (v76 == 1) {
    int64_t v80 = 0;
  }
  else {
    int64_t v80 = (char *)&v133 + v76;
  }
  if (v79 == 1) {
    uint64_t v81 = 0;
  }
  else {
    uint64_t v81 = (char *)v137 + v79;
  }
  if (v80 != v81)
  {
    int64_t v82 = (char *)&v145[-1] + v72;
    if (v72 == 1) {
      int64_t v82 = 0;
    }
    unint64_t v133 = v82 - (char *)&v133;
    if (v82 - (char *)&v133 == 1)
    {
LABEL_147:
      uint64_t v114 = "!!p";
      int v115 = 62;
      uint64_t v116 = "hook_traits.hpp";
      uint64_t v117 = "to_value_ptr";
      goto LABEL_152;
    }
    if (*((unsigned __int16 *)v82 + 16) < v51[2].u16[0])
    {
      uint64_t v114 = "( p == this->end() || !this->comp()(*p, value))";
      int v115 = 1328;
      goto LABEL_151;
    }
  }
  uint64_t v83 = v125[2];
  uint64_t v84 = (char *)(v125 + 2) - (char *)&v133;
  if (v83 == 1) {
    uint64_t v84 = 0;
  }
  uint64_t v85 = v84 + v83;
  int64_t v86 = (char *)&v133 - (char *)v147;
  if (v85 == 1) {
    int64_t v86 = 0;
  }
  uint64_t v87 = v86 + v85;
  v147[0] = v87;
  int64_t v88 = (char *)&v144 - (char *)&v133;
  if (v72 == 1) {
    int64_t v88 = 0;
  }
  unint64_t v89 = v88 + v72;
  if (v87 == 1) {
    int64_t v77 = 0;
  }
  uint64_t v90 = v77 + v87;
  if (v89 == 1) {
    int64_t v91 = 0;
  }
  else {
    int64_t v91 = (char *)&v133 + v89;
  }
  long long v92 = (char *)v137 + v90;
  if (v90 == 1) {
    long long v92 = 0;
  }
  if (v91 == v92) {
    goto LABEL_122;
  }
  boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node((char *)&v133, (char *)&v144);
  int64_t v93 = (char *)&v133 - (char *)&v144;
  if (v133 == 1) {
    int64_t v93 = 0;
  }
  uint64_t v144 = v93 + v133;
  if (v93 + v133 == 1) {
    uint64_t v94 = 0;
  }
  else {
    uint64_t v94 = (char *)&v145[-1] + v93 + v133;
  }
  unint64_t v133 = v94 - (char *)&v133;
  if (v94 - (char *)&v133 == 1) {
    goto LABEL_147;
  }
  if (v51[2].u16[0] < *((unsigned __int16 *)v94 + 16))
  {
    uint64_t v114 = "( p == this->begin() || !this->comp()(value, *--p))";
    int v115 = 1329;
    goto LABEL_151;
  }
LABEL_122:
  uint64_t v95 = a4;
  BOOL v48 = &v64[v67];
  uint64_t v143 = v126 - (char *)&v143;
  uint64_t v96 = 24;
  if (v68 == 1) {
    uint64_t v96 = 0;
  }
  uint64_t v97 = v96 + v68;
  uint64_t v142 = v97;
  v147[0] = v126 - (char *)v147;
  uint64_t v98 = -56;
  if (v97 == 1) {
    uint64_t v98 = 0;
  }
  uint64_t v99 = v98 + v97;
  uint64_t v146 = v99;
  unint64_t v133 = v126 - (char *)&v133;
  int64_t v100 = (char *)&v146 - (char *)v137;
  if (v99 == 1) {
    int64_t v100 = 0;
  }
  v137[0] = v100 + v99;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_commit((char *)&v133, (char *)v137, (uint64_t)v138);
  int64_t v101 = (char *)&v143 - (char *)&v133;
  if (v143 == 1) {
    int64_t v101 = 0;
  }
  unint64_t v133 = v101 + v143;
  int64_t v102 = (char *)&v142 - (char *)v137;
  if (v142 == 1) {
    int64_t v102 = 0;
  }
  v137[0] = v102 + v142;
  boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rebalance_after_insertion((char *)&v133, (char *)v137);
  unint64_t v103 = (unint64_t)v125;
  ++*v125;
  int64_t v104 = (char *)v145 - (char *)&v133;
  if (v145[0] == 1) {
    int64_t v104 = 0;
  }
  int64_t v105 = (char *)&v133 - (char *)&v136;
  if (v104 + v145[0] == 1) {
    int64_t v105 = 0;
  }
  int64_t v106 = v105 + v104 + v145[0];
  int64_t v136 = v106;
  v137[0] = (uint64_t)v51;
  v137[1] = v127;
  int64_t v107 = (char *)&v136 - (char *)v147;
  if (v106 == 1) {
    int64_t v107 = 0;
  }
  int64_t v108 = v107 + v106;
  int64_t v109 = (char *)v147 - (char *)&v132;
  if (v108 == 1) {
    int64_t v109 = 0;
  }
  int64_t v110 = v109 + v108;
  uint64_t v132 = v110;
  unint64_t v133 = v103;
  int64_t v111 = (char *)&v132 - (char *)v147;
  if (v110 == 1) {
    int64_t v111 = 0;
  }
  uint64_t v112 = v111 + v110;
  int64_t v113 = (char *)v147 - (char *)&v134;
  if (v112 == 1) {
    int64_t v113 = 0;
  }
  uint64_t v134 = v113 + v112;
  char v135 = 1;
  v147[0] = 0;
  (**(void (***)(uint64_t, char *, uint64_t, void *))a7)(a7, v48, v95, v147);
  char v135 = 0;
  v137[0] = 0;
  boost::interprocess::value_eraser<boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>>::~value_eraser((uint64_t)&v133);
  boost::interprocess::ipcdetail::mem_algo_deallocator<boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::~mem_algo_deallocator((uint64_t)v137);
  return (unint64_t)v48;
}

void sub_1A4283C18()
{
}

char *boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = 0;
  unint64_t v6 = a2;
  uint64_t result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(a1, 1, a2, &v6, &v5, 1uLL);
  if (!result)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    unint64_t v4 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(void *)unint64_t v4 = &unk_1EF7A9B00;
  }
  return result;
}

uint64_t boost::interprocess::value_eraser<boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>>::~value_eraser(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = *(char **)a1;
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = a1 + 8 - (void)&v41;
    if (v3 == 1) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = v4 + v3;
    int64_t v6 = (char *)&v41 - (char *)&v33;
    if (v5 == 1) {
      int64_t v6 = 0;
    }
    uint64_t v7 = v6 + v5;
    uint64_t v33 = v7;
    int64_t v8 = (char *)&v33 - (char *)&v41;
    if (v7 == 1) {
      int64_t v8 = 0;
    }
    uint64_t v9 = v8 + v7;
    if (v7 == 1) {
      int64_t v10 = 0;
    }
    else {
      int64_t v10 = (char *)&v33 - (char *)&v37;
    }
    if (v9 == 1) {
      int64_t v11 = 0;
    }
    else {
      int64_t v11 = (char *)&v41 - (char *)&v38;
    }
    uint64_t v38 = v11 + v9;
    boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::next_node((char *)&v41, (char *)&v38);
    if (v41 == 1) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = (char *)&v41 - (char *)&v38;
    }
    uint64_t v38 = v12 + v41;
    uint64_t v13 = v10 + v7;
    uint64_t v37 = v10 + v7;
    int64_t v14 = (char *)&v37 - (char *)&v40;
    if (v10 + v7 == 1) {
      int64_t v14 = 0;
    }
    uint64_t v15 = v14 + v13;
    uint64_t v40 = v15;
    if (v15 == 1) {
      int64_t v16 = 0;
    }
    else {
      int64_t v16 = (char *)&v40 + v15;
    }
    unint64_t v17 = *(void *)v16 & 0xFFFFFFFFFFFFFFFDLL;
    int64_t v18 = v16 - (char *)&v41;
    if (v17 == 1) {
      int64_t v18 = 0;
    }
    if (v18 + v17 == 1) {
      __assert_rtn("erase", "bstree.hpp", 1418, "!safemode_or_autounlink || !node_algorithms::unique(to_erase)");
    }
    int64_t v19 = (char *)&v37 - (char *)&v35;
    if (v13 == 1) {
      int64_t v19 = 0;
    }
    uint64_t v35 = v19 + v13;
    uint64_t v36 = v2 - (char *)&v36 + 8;
    boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::erase((char *)&v41, (char *)&v36, (char *)&v35);
    --*(void *)v2;
    int64_t v20 = (char *)&v37 - (char *)&v34;
    if (v37 == 1) {
      int64_t v20 = 0;
    }
    uint64_t v21 = v20 + v37;
    uint64_t v34 = v21;
    int64_t v22 = (char *)&v34 - (char *)&v41;
    if (v21 == 1) {
      int64_t v22 = 0;
    }
    uint64_t v23 = v22 + v21;
    uint64_t v41 = v23;
    if (v23 == 1) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = (uint64_t *)((char *)&v41 + v23);
    }
    *uint64_t v24 = *v24 & 2 | 1;
    uint64_t v25 = v34;
    int64_t v26 = (char *)&v34 - (char *)&v40;
    int64_t v27 = (char *)&v34 - v39;
    if (v34 == 1) {
      int64_t v26 = 0;
    }
    uint64_t v28 = v26 + v34;
    if (v34 == 1) {
      int64_t v27 = 0;
    }
    if (v28 == 1) {
      int64_t v29 = 0;
    }
    else {
      int64_t v29 = (char *)&v40 + v28;
    }
    *((void *)v29 + 1) = 1;
    uint64_t v30 = v27 + v25;
    if (v30 == 1) {
      int v31 = 0;
    }
    else {
      int v31 = &v39[v30];
    }
    *((void *)v31 + 2) = 1;
  }
  return a1;
}

uint64_t boost::interprocess::ipcdetail::mem_algo_deallocator<boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::~mem_algo_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(*(char **)(a1 + 8), *(void *)a1);
  }
  return a1;
}

uint64_t boost::interprocess::ipcdetail::mem_algo_deallocator<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::~mem_algo_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(*(char **)(a1 + 8), *(void *)a1);
  }
  return a1;
}

void boost::interprocess::ipcdetail::CtorArgN<int,false,int const&>::~CtorArgN()
{
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<int,false,int const&>::construct_n(uint64_t result, _DWORD *a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    uint64_t v4 = *(_DWORD **)(result + 32);
    uint64_t v5 = a3;
    do
    {
      *a2++ = *v4;
      --v5;
    }
    while (v5);
  }
  *a4 = a3;
  return result;
}

char *boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::emplace_unique<pf::SceneTaxonomyNode*>(uint64_t a1, uint64_t a2, void *a3)
{
  int64_t v6 = (char *)(a2 + 16);
  v147 = (char *)(a2 + 16);
  v148[0] = 1;
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node((uint64_t **)&v147);
  if (v148[0] == 1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (void *)((char *)v148 + v148[0]);
  }
  if (*a3) {
    uint64_t v8 = *a3 - (void)v7;
  }
  else {
    uint64_t v8 = 1;
  }
  *uint64_t v7 = v8;
  if (v148[0] == 1) {
    __assert_rtn("release", "implementation.hpp", 1955, "node_");
  }
  int64_t v9 = (char *)v148 - (char *)&v143 + v148[0];
  int64_t v143 = v9;
  uint64_t v144 = v6;
  int64_t v10 = (char *)&v143 - (char *)&v145;
  if (v9 == 1) {
    int64_t v10 = 0;
  }
  uint64_t v11 = v10 + v9;
  uint64_t v145 = v11;
  int64_t v12 = (char *)&v145 - (char *)&v142;
  if (v11 == 1) {
    int64_t v12 = 0;
  }
  int64_t v13 = v12 + v11;
  uint64_t v142 = v13;
  if (v13 == 1) {
    int64_t v14 = 0;
  }
  else {
    int64_t v14 = (uint64_t *)((char *)&v142 + v13);
  }
  uint64_t v15 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::hash(v14);
  uint64_t v136 = v15;
  if (!*(void *)(a2 + 32)) {
    goto LABEL_96;
  }
  uint64_t v16 = (*(void *)(a2 + 24) - 1) & v15;
  boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v147, a2, v16);
  unint64_t v17 = (char *)&v148[-1] + (void)v147;
  if (v147 == (char *)1) {
    unint64_t v17 = 0;
  }
  uint64_t v18 = *(void *)v17;
  int64_t v19 = v17 - (char *)v155;
  if (v18 == 1) {
    int64_t v19 = 0;
  }
  uint64_t v20 = v19 + v18;
  if (v20 == 1) {
    goto LABEL_96;
  }
  uint64_t v21 = (char *)v155 + v20;
  if (v20 == -7) {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)v21 + 1);
  uint64_t v23 = v21 + 8 - (char *)&v153;
  if (v22 == 1) {
    uint64_t v23 = 0;
  }
  uint64_t v24 = v23 + v22;
  uint64_t v153 = v23 + v22;
  if (v23 + v22 == 1)
  {
LABEL_96:
    uint64_t v141 = 1;
    goto LABEL_97;
  }
  int64_t v25 = (char *)&v154 - (char *)&v153;
  while (1)
  {
    uint64_t v152 = v24 + 8;
    if (v24 == -7) {
      int64_t v26 = 0;
    }
    else {
      int64_t v26 = (uint64_t *)((char *)&v153 + v24);
    }
    if (*v14 == 1) {
      int64_t v27 = 0;
    }
    else {
      int64_t v27 = (void *)((char *)v14 + *v14);
    }
    uint64_t v28 = *v26;
    int64_t v29 = (uint64_t *)((char *)v26 + *v26);
    if (v28 == 1) {
      int64_t v29 = 0;
    }
    if (*v27 != *v29) {
      goto LABEL_51;
    }
    uint64_t v30 = v27[9];
    int v31 = (char *)v27 + v30 + 72;
    if (v30 == 1) {
      char v32 = 0;
    }
    else {
      char v32 = v31;
    }
    uint64_t v33 = v29[9];
    uint64_t v34 = (char *)v29 + v33 + 72;
    if (v33 == 1) {
      uint64_t v34 = 0;
    }
    unint64_t v35 = v32[8];
    if (v35) {
      size_t v36 = v35 >> 1;
    }
    else {
      size_t v36 = *((void *)v32 + 1) >> 1;
    }
    unint64_t v37 = v34[8];
    unint64_t v38 = v37 >> 1;
    if ((v37 & 1) == 0) {
      unint64_t v38 = *((void *)v34 + 1) >> 1;
    }
    if (v36 != v38)
    {
LABEL_51:
      BOOL v42 = v24 == 1;
      goto LABEL_66;
    }
    if (v35)
    {
      uint64_t v41 = v32 - (char *)&v147 + 9;
    }
    else
    {
      uint64_t v39 = *((void *)v32 + 3);
      uint64_t v40 = v32 + 24 - (char *)&v147;
      if (v39 == 1) {
        uint64_t v40 = 0;
      }
      uint64_t v41 = v40 + v39;
    }
    int64_t v43 = v41 == 1 ? 0 : (char *)&v148[-1] + v41;
    if (v37)
    {
      uint64_t v46 = v34 - (char *)&v147 + 9;
    }
    else
    {
      uint64_t v44 = *((void *)v34 + 3);
      uint64_t v45 = v34 + 24 - (char *)&v147;
      if (v44 == 1) {
        uint64_t v45 = 0;
      }
      uint64_t v46 = v45 + v44;
    }
    uint64_t v47 = v46 == 1 ? 0 : (char *)&v148[-1] + v46;
    uint64_t result = (char *)memcmp(v43, v47, v36);
    BOOL v42 = v24 == 1;
    if (!result) {
      break;
    }
    int64_t v25 = (char *)&v154 - (char *)&v153;
LABEL_66:
    if (v42) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = 16;
    }
    uint64_t v50 = v49 + v24;
    uint64_t v151 = v50;
    if (v50 == 1) {
      unint64_t v51 = 0;
    }
    else {
      unint64_t v51 = (char *)&v151 + v50;
    }
    if ((*((void *)v51 + 2) & 0x7FFFFFFFFFFFFFFFLL) == v16)
    {
      uint64_t v52 = v42 ? 0 : 24;
      uint64_t v53 = v52 + v24;
      uint64_t v150 = v53;
      uint64_t v54 = v53 == 1 ? 0 : -32;
      uint64_t v55 = v54 + v53;
      while (1)
      {
        if (v55 == 1) {
          uint64_t v56 = 0;
        }
        else {
          uint64_t v56 = -8;
        }
        uint64_t v57 = v56 + v55;
        if (v57 == 1) {
          uint64_t v58 = 0;
        }
        else {
          uint64_t v58 = (char *)v155 + v57;
        }
        uint64_t v59 = *((void *)v58 + 1);
        uint64_t v60 = v58 + 8 - (char *)&v147;
        if (v59 == 1) {
          uint64_t v60 = 0;
        }
        uint64_t v61 = v60 + v59;
        int64_t v62 = v61 == 1 ? 0 : (char *)&v147 - (char *)&v154;
        uint64_t v55 = v62 + v61;
        if (v55 == 1) {
          break;
        }
        if ((*(uint64_t *)((char *)&v155[1] + v55) & 0x8000000000000000) == 0)
        {
          int64_t v63 = v25;
          goto LABEL_95;
        }
      }
      int64_t v63 = 0;
LABEL_95:
      uint64_t v24 = v63 + v55;
      uint64_t v153 = v63 + v55;
      if (v63 + v55 != 1) {
        continue;
      }
    }
    goto LABEL_96;
  }
  int64_t v130 = (char *)&v153 - (char *)&v141;
  if (v24 == 1) {
    int64_t v130 = 0;
  }
  uint64_t v131 = v130 + v24;
  uint64_t v141 = v131;
  if (v131 == 1)
  {
LABEL_97:
    int64_t v64 = (char *)&v145 - (char *)&v137;
    if (v145 == 1) {
      int64_t v64 = 0;
    }
    int64_t v65 = v64 + v145;
    int64_t v137 = v65;
    uint64_t v145 = 1;
    int64_t v66 = (char *)&v137 - (char *)&v146;
    if (v65 == 1) {
      int64_t v66 = 0;
    }
    int64_t v67 = v66 + v65;
    uint64_t v146 = v67;
    int64_t v68 = (char *)&v146 - (char *)v148;
    if (v67 == 1) {
      int64_t v68 = 0;
    }
    v147 = v6;
    v148[0] = v68 + v67;
    unint64_t v69 = *(void *)(a2 + 32);
    unint64_t v70 = v69 + 1;
    if (*(void *)(a2 + 56) == 1)
    {
      unint64_t v71 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(v70, *(float *)(a2 + 40));
      if (*(void *)(a2 + 24) <= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = *(void *)(a2 + 24);
      }
      boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::create_buckets(a2, v72);
    }
    else if (*(void *)(a2 + 48) < v70)
    {
      unint64_t v73 = v69 + (v69 >> 1);
      if (v73 > v70) {
        unint64_t v70 = v73;
      }
      unint64_t v74 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(v70, *(float *)(a2 + 40));
      if (v74 != *(void *)(a2 + 24))
      {
        if (*(void *)(a2 + 56) == 1) {
          __assert_rtn("rehash_impl", "implementation.hpp", 4578, "this->buckets_");
        }
        boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::create_buckets(a2, v74);
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(v155, a2, *(void *)(a2 + 24));
        if (v155[0] == 1) {
          int64_t v75 = 0;
        }
        else {
          int64_t v75 = (char *)v155 + v155[0];
        }
        uint64_t v76 = *(void *)v75;
        int64_t v77 = v75 - (char *)&v154;
        if (v76 == 1) {
          int64_t v77 = 0;
        }
        uint64_t v78 = v77 + v76;
        uint64_t v154 = v78;
        BOOL v79 = v78 == 1;
        int64_t v80 = (char *)&v155[-1] + v78;
        if (v78 == 1) {
          int64_t v80 = 0;
        }
        if (*((void *)v80 + 1) != 1)
        {
          do
          {
            BOOL v87 = !v79;
            uint64_t v81 = 8;
            if (!v87) {
              uint64_t v81 = 0;
            }
            uint64_t v82 = v81 + v78;
            uint64_t v153 = v82;
            if (v82 == 1) {
              uint64_t v83 = 0;
            }
            else {
              uint64_t v83 = (char *)&v153 + v82;
            }
            uint64_t v84 = *((void *)v83 + 1);
            uint64_t v85 = v83 + 8 - (char *)v155;
            if (v84 == 1) {
              uint64_t v85 = 0;
            }
            uint64_t v86 = v85 + v84;
            v155[0] = v85 + v84;
            BOOL v87 = v85 + v84 == 1;
            uint64_t v88 = 24;
            if (v87) {
              uint64_t v88 = 0;
            }
            uint64_t v89 = v88 + v86;
            uint64_t v152 = v89;
            if (v87) {
              uint64_t v90 = 0;
            }
            else {
              uint64_t v90 = (char *)v155 + v86;
            }
            if (v87) {
              uint64_t v91 = 0;
            }
            else {
              uint64_t v91 = 40;
            }
            if (v89 == 1) {
              long long v92 = 0;
            }
            else {
              long long v92 = (uint64_t *)((char *)&v152 + v89);
            }
            uint64_t v93 = (*(void *)(a2 + 24) - 1) & boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::hash(v92);
            *((void *)v90 + 2) = v93 & 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v94 = v91 + v86;
            uint64_t v95 = (char *)&v150 + v91 + v86;
            if (v91 + v86 == 1) {
              uint64_t v95 = 0;
            }
            uint64_t v96 = *((void *)v95 + 1);
            uint64_t v97 = v95 + 8 - (char *)&v151;
            if (v96 == 1) {
              uint64_t v97 = 0;
            }
            uint64_t v98 = v97 + v96;
            if (v98 != 1)
            {
              uint64_t v99 = (char *)&v151 + v98;
              if (*(uint64_t *)((char *)&v151 + v98 + 16) < 0)
              {
                do
                {
                  uint64_t v100 = v98 - 32;
                  if (v98 == 33) {
                    int64_t v101 = 0;
                  }
                  else {
                    int64_t v101 = v99;
                  }
                  *((void *)v101 + 2) = v93 | 0x8000000000000000;
                  if (v98 == 33) {
                    uint64_t v102 = 0;
                  }
                  else {
                    uint64_t v102 = 40;
                  }
                  uint64_t v94 = v102 + v100;
                  unint64_t v103 = (char *)&v150 + v94;
                  if (v94 == 1) {
                    unint64_t v103 = 0;
                  }
                  uint64_t v104 = *((void *)v103 + 1);
                  uint64_t v105 = v103 + 8 - (char *)&v151;
                  if (v104 == 1) {
                    uint64_t v105 = 0;
                  }
                  uint64_t v98 = v105 + v104;
                  if (v98 == 1) {
                    break;
                  }
                  uint64_t v99 = (char *)&v151 + v98;
                }
                while (*(uint64_t *)((char *)&v151 + v98 + 16) < 0);
                v155[0] = v100;
              }
            }
            uint64_t v150 = v94;
            boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v151, a2, v93);
            int64_t v106 = (char *)&v151 + v151;
            if (v151 == 1) {
              int64_t v106 = 0;
            }
            if (*(void *)v106 == 1)
            {
              int64_t v107 = (char *)((char *)&v154 - v106);
              if (v154 == 1) {
                int64_t v107 = 0;
              }
              *(void *)int64_t v106 = &v107[v154];
              uint64_t v108 = 1;
              if (v155[0] == 1) {
                uint64_t v108 = 0;
              }
              uint64_t v78 = v108 * 8 + v155[0];
              uint64_t v154 = v108 * 8 + v155[0];
              int64_t v109 = (char *)&v155[v108 - 1] + v155[0];
            }
            else
            {
              if (v155[0] == 1) {
                int64_t v110 = 0;
              }
              else {
                int64_t v110 = (char *)v155 + v155[0];
              }
              uint64_t v113 = *((void *)v110 + 1);
              int64_t v111 = v110 + 8;
              uint64_t v112 = v113;
              int64_t v114 = v111 - (char *)&v149;
              if (v113 == 1) {
                int64_t v114 = 0;
              }
              uint64_t v115 = v114 + v112;
              uint64_t v149 = v115;
              if (*(void *)v106 == 1) {
                uint64_t v116 = 0;
              }
              else {
                uint64_t v116 = &v106[*(void *)v106];
              }
              uint64_t v117 = *((void *)v116 + 1);
              uint64_t v118 = v116 + 8 - v111;
              if (v117 == 1) {
                uint64_t v118 = 0;
              }
              *(void *)int64_t v111 = v118 + v117;
              uint64_t v78 = v154;
              int64_t v109 = (char *)&v155[-1] + v154;
              if (v154 == 1) {
                uint64_t v119 = 0;
              }
              else {
                uint64_t v119 = (char *)&v155[-1] + v154;
              }
              uint64_t v120 = *(void *)v106;
              int v121 = &v106[*(void *)v106];
              if (v120 == 1) {
                int v121 = 0;
              }
              uint64_t v124 = *((void *)v119 + 1);
              uint64_t v122 = v119 + 8;
              uint64_t v123 = v124;
              uint64_t v125 = (char *)(v122 - (v121 + 8));
              if (v124 == 1) {
                uint64_t v125 = 0;
              }
              *((void *)v121 + 1) = &v125[v123];
              int64_t v126 = (char *)((char *)&v149 - v122);
              if (v115 == 1) {
                int64_t v126 = 0;
              }
              *(void *)uint64_t v122 = &v126[v115];
            }
            BOOL v79 = v78 == 1;
            if (v78 == 1) {
              int64_t v109 = 0;
            }
          }
          while (*((void *)v109 + 1) != 1);
        }
      }
    }
    int64_t v127 = (char *)v148 - (char *)&v154;
    if (v148[0] == 1) {
      int64_t v127 = 0;
    }
    uint64_t v154 = v127 + v148[0];
    v148[0] = 1;
    uint64_t result = (char *)boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::add_node_unique((char *)&v138, a2, (char *)&v154, v136);
    if (v148[0] != 1)
    {
      v155[0] = (char *)v148 - (char *)v155 + v148[0];
      uint64_t result = std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v147, v155);
    }
    int64_t v128 = (char *)&v138 - v139;
    if (v138 == 1) {
      int64_t v128 = 0;
    }
    uint64_t v129 = &v139[-a1];
    if (v128 + v138 == 1) {
      uint64_t v129 = 0;
    }
    *(void *)a1 = &v129[v128 + v138];
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = 1;
    goto LABEL_198;
  }
  uint64_t v132 = v131 + (char *)&v141 - (char *)&v140;
  uint64_t v140 = v132;
  int64_t v133 = (char *)&v140 - (char *)&v147;
  if (v132 == 1) {
    int64_t v133 = 0;
  }
  uint64_t v134 = v133 + v132;
  char v135 = (char *)&v148[-1] - a1;
  if (v134 == 1) {
    char v135 = 0;
  }
  *(void *)a1 = &v135[v134];
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = 0;
LABEL_198:
  if (v145 != 1)
  {
    v147 = (char *)((char *)&v145 - (char *)&v147 + v145);
    return std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v144, (uint64_t *)&v147);
  }
  return result;
}

void sub_1A428485C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A4284864(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __cxa_begin_catch(a1);
  uint64_t v32 = *(void *)(v31 - 104);
  uint64_t v33 = 40;
  BOOL v34 = v32 == 1;
  if (v32 == 1) {
    uint64_t v33 = 0;
  }
  uint64_t v35 = v33 + v32;
  *(void *)(v31 - boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)this + 144) = v35;
  uint64_t v36 = v32 + v31 - 104;
  if (v34) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = v36;
  }
  if (v35 == 1) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = v35 + v31 - 144;
  }
  uint64_t v39 = *(void *)(v38 + 8);
  uint64_t v40 = v31 - 128;
  uint64_t v41 = v38 + 8 - (v31 - 128);
  if (v39 == 1) {
    uint64_t v41 = 0;
  }
  uint64_t v42 = v41 + v39;
  *(void *)(v31 - 12_Block_object_dispose(&STACK[0x360], 8) = v42;
  for (*(void *)(v37 + _Block_object_dispose(&STACK[0x360], 8) = 1; v42 != 1; *(void *)(v31 - 12_Block_object_dispose(&STACK[0x360], 8) = v42)
  {
    uint64_t v43 = v42 + v40;
    if (v42 == -31) {
      uint64_t v43 = 0;
    }
    uint64_t v44 = *(void *)(v43 + 8);
    *(void *)(v31 - 160) = v42 + 32;
    uint64_t v45 = v43 + 8 - (v31 - 152);
    if (v44 == 1) {
      uint64_t v45 = 0;
    }
    *(void *)(v31 - 152) = v45 + v44;
    uint64_t v46 = v42 + v40 - (void)&a30;
    a30 = v46;
    if (v46 == 1) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = (char *)&a30 - v31 + 96;
    }
    *(void *)(v31 - 96) = &v47[v46];
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](a13, (uint64_t *)(v31 - 96));
    --*(void *)(v30 + 32);
    uint64_t v48 = *(void *)(v31 - 152);
    if (v48 == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = -24;
    }
    uint64_t v42 = v49 + v48;
  }
  __cxa_rethrow();
}

void sub_1A428496C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1A4284994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

char *boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(uint64_t **a1)
{
  double v1 = a1 + 1;
  if (a1[1] != (uint64_t *)1) {
    __assert_rtn("create_node", "implementation.hpp", 1984, "!node_");
  }
  uint64_t v3 = **a1;
  if (v3 == 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (uint64_t)*a1 + v3;
  }
  uint64_t result = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v4, 0x18uLL);
  int64_t v6 = (unsigned char *)(v9 - (unsigned char *)v1);
  if (result - v9 == 1) {
    int64_t v6 = 0;
  }
  uint64_t v7 = (uint64_t *)&v6[result - v9];
  a1[1] = v7;
  if (v7 == (uint64_t *)1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (char *)v1 + (void)v7;
  }
  *(_OWORD *)uint64_t v8 = xmmword_1A42D3510;
  *((void *)v8 + 2) = 0;
  return result;
}

uint64_t boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 != 1)
  {
    uint64_t v4 = *(char **)a1;
    uint64_t v6 = v2 - (void)&v6 + v3;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v4, &v6);
  }
  return a1;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::hash(void *a1)
{
  if (*a1 == 1) {
    double v1 = 0;
  }
  else {
    double v1 = (void *)((char *)a1 + *a1);
  }
  uint64_t v2 = *v1;
  uint64_t v3 = v1[9];
  uint64_t v4 = (char *)v1 + v3 + 72;
  if (v3 == 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (uint64_t)v4;
  }
  unint64_t v6 = boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()(v5);
  unint64_t v7 = (v6 ^ ~v2) + ((v6 ^ v2) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  return 2147483649u * (v8 ^ (v8 >> 28));
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(unint64_t a1, float a2)
{
  if (a2 < 0.001) {
    __assert_rtn("min_buckets_for_size", "implementation.hpp", 3096, "mlf_ >= minimum_max_load_factor");
  }
  double v2 = floor((double)a1 / a2) + 1.0;
  unint64_t v3 = (unint64_t)v2;
  if (v2 >= 1.84467441e19) {
    unint64_t v3 = -1;
  }
  if (v3 < 5) {
    return 4;
  }
  unint64_t v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unint64_t v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  return (v6 | (v6 >> 16) | ((v6 | (v6 >> 16)) >> 32)) + 1;
}

char *boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::create_buckets(uint64_t a1, unint64_t a2)
{
  uint64_t v37 = 1;
  unint64_t v5 = (char *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 == 1)
  {
    BOOL v34 = (uint64_t *)(a1 + 16);
    uint64_t v35 = 1;
    boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(&v34);
    uint64_t result = boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v33, (void *)(a1 + 8), a2 + 1);
    int64_t v7 = (char *)&v33 - v5;
    if (v33 == (char *)1) {
      int64_t v7 = 0;
    }
    unint64_t v8 = &v33[v7];
    *(void *)unint64_t v5 = &v33[v7];
    if (v35 == 1) {
      __assert_rtn("release", "implementation.hpp", 1955, "node_");
    }
    uint64_t v9 = v35 + (char *)&v35 - (char *)&v33;
    int64_t v10 = (char *)&v33 - (char *)&v37;
    if (v9 == 1) {
      int64_t v10 = 0;
    }
    uint64_t v37 = v10 + v9;
  }
  else
  {
    uint64_t v11 = v4 + v5 - (char *)&v36 + 8 * *(void *)(a1 + 24);
    uint64_t v36 = v11;
    int64_t v12 = (char *)&v36 - (char *)&v34;
    if (v11 == 1) {
      int64_t v12 = 0;
    }
    int64_t v13 = (uint64_t *)(v12 + v11);
    BOOL v34 = v13;
    if (v13 == (uint64_t *)1) {
      int64_t v14 = 0;
    }
    else {
      int64_t v14 = (char *)&v34 + (void)v13;
    }
    uint64_t v15 = *(void *)v14;
    int64_t v16 = v14 - (char *)&v37;
    if (v15 == 1) {
      int64_t v16 = 0;
    }
    uint64_t v37 = v16 + v15;
    boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v34, (void *)(a1 + 8), a2 + 1);
    uint64_t result = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::destroy_buckets((void *)a1);
    unint64_t v17 = (char *)((char *)&v34 - v5);
    if (v34 == (uint64_t *)1) {
      unint64_t v17 = 0;
    }
    unint64_t v8 = (char *)v34 + (void)v17;
    *(void *)(a1 + 56) = (char *)v34 + (void)v17;
  }
  *(void *)(a1 + 24) = a2;
  if (v8 == (char *)1)
  {
    unint64_t v18 = 0;
  }
  else
  {
    double v19 = (double)a2 * *(float *)(a1 + 40);
    unint64_t v18 = vcvtpd_u64_f64(v19);
    if (ceil(v19) >= 1.84467441e19) {
      unint64_t v18 = -1;
    }
  }
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x360], 8) = v18;
  int64_t v20 = v5 - &v32;
  int64_t v21 = &v32 - (char *)&v34;
  int64_t v22 = v5 - (char *)&v33;
  if (v8 == (char *)1) {
    int64_t v20 = 0;
  }
  uint64_t v23 = &v8[8 * a2 + v20];
  if (v8 == (char *)1) {
    int64_t v22 = 0;
  }
  if (v23 == (char *)1) {
    int64_t v21 = 0;
  }
  uint64_t v24 = (uint64_t *)&v23[v21];
  int64_t v25 = &v8[v22];
  uint64_t v33 = v25;
  BOOL v34 = v24;
  if (v25 == (char *)1) {
    int64_t v26 = 0;
  }
  else {
    int64_t v26 = (char *)&v33 + (void)v25;
  }
  if (v24 == (uint64_t *)1) {
    int64_t v27 = 0;
  }
  else {
    int64_t v27 = (char *)&v34 + (void)v24;
  }
  while (v26 != v27)
  {
    *(void *)int64_t v26 = 1;
    uint64_t v28 = v33 + 8;
    uint64_t v33 = v28;
    if (v28 == (char *)1) {
      int64_t v26 = 0;
    }
    else {
      int64_t v26 = (char *)&v33 + (void)v28;
    }
    if (v34 == (uint64_t *)1) {
      int64_t v27 = 0;
    }
    else {
      int64_t v27 = (char *)&v34 + (void)v34;
    }
  }
  int64_t v29 = (char *)&v37 - v31;
  if (v37 == 1) {
    int64_t v29 = 0;
  }
  uint64_t v30 = (unsigned char *)(v31 - v27);
  if (v29 + v37 == 1) {
    uint64_t v30 = 0;
  }
  *(void *)int64_t v26 = &v30[v29 + v37];
  return result;
}

void sub_1A4284E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)va);
  _Unwind_Resume(a1);
}

void *boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::add_node_unique(char *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v7 = (*(void *)(a2 + 24) - 1) & a4;
  uint64_t result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v45, a2, v7);
  if (*(void *)a3 == 1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = &a3[*(void *)a3];
  }
  *((void *)v9 + 2) = v7;
  if (*(void *)a3 == 1) {
    int64_t v10 = 0;
  }
  else {
    int64_t v10 = &a3[*(void *)a3];
  }
  *((void *)v10 + 2) &= ~0x8000000000000000;
  if (v45 == 1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = (uint64_t *)((char *)&v45 + v45);
  }
  if (*v11 == 1)
  {
    uint64_t result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v46, a2, *(void *)(a2 + 24));
    if (v46 == 1) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = (char *)&v46 + v46;
    }
    uint64_t v13 = *(void *)v12;
    int64_t v14 = v12 - (char *)&v44;
    if (v13 == 1) {
      int64_t v14 = 0;
    }
    uint64_t v15 = v14 + v13;
    uint64_t v44 = v15;
    int64_t v16 = (char *)&v44 + v15;
    if (v15 == 1) {
      int64_t v16 = 0;
    }
    if (*((void *)v16 + 1) != 1)
    {
      int64_t v17 = (char *)&v44 - (char *)&v42;
      if (v15 == 1) {
        int64_t v17 = 0;
      }
      uint64_t v18 = v17 + v15;
      double v19 = (char *)&v42 + v18;
      if (v18 == 1) {
        double v19 = 0;
      }
      uint64_t v20 = *((void *)v19 + 1);
      uint64_t v42 = v18;
      uint64_t v21 = v19 + 8 - (char *)&v43;
      if (v20 == 1) {
        uint64_t v21 = 0;
      }
      uint64_t v43 = v21 + v20;
      int64_t v22 = (char *)&v43 + v21 + v20;
      if (v21 + v20 == 1) {
        int64_t v22 = 0;
      }
      uint64_t result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v46, a2, *((void *)v22 + 2) & 0x7FFFFFFFFFFFFFFFLL);
      if (v46 == 1) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = (char *)&v46 + v46;
      }
      int64_t v24 = a3 - v23;
      if (*(void *)a3 == 1) {
        int64_t v24 = 0;
      }
      *(void *)uint64_t v23 = v24 + *(void *)a3;
      uint64_t v15 = v44;
    }
    if (v45 == 1) {
      int64_t v25 = 0;
    }
    else {
      int64_t v25 = (char *)&v45 + v45;
    }
    int64_t v26 = (char *)((char *)&v44 - v25);
    if (v15 == 1) {
      int64_t v26 = 0;
    }
    *(void *)int64_t v25 = &v26[v15];
    if (v44 == 1) {
      int64_t v27 = 0;
    }
    else {
      int64_t v27 = (char *)&v44 + v44;
    }
    if (*(void *)a3 == 1) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = &a3[*(void *)a3];
    }
    uint64_t v31 = *((void *)v27 + 1);
    int64_t v29 = v27 + 8;
    uint64_t v30 = v31;
    char v32 = (char *)(v29 - (v28 + 8));
    if (v31 == 1) {
      char v32 = 0;
    }
    *((void *)v28 + 1) = &v32[v30];
    int64_t v33 = a3 - v29;
    if (*(void *)a3 == 1) {
      int64_t v33 = 0;
    }
    *(void *)int64_t v29 = v33 + *(void *)a3;
  }
  else
  {
    BOOL v34 = (char *)v11 + *v11;
    if (*(void *)a3 == 1) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = &a3[*(void *)a3];
    }
    uint64_t v36 = *((void *)v34 + 1);
    uint64_t v37 = v34 - v35;
    if (v36 == 1) {
      uint64_t v37 = 0;
    }
    *((void *)v35 + 1) = v37 + v36;
    uint64_t v38 = *v11;
    uint64_t v39 = (char *)v11 + *v11;
    if (v38 == 1) {
      uint64_t v39 = 0;
    }
    uint64_t v40 = (char *)(a3 - (v39 + 8));
    if (*(void *)a3 == 1) {
      uint64_t v40 = 0;
    }
    *((void *)v39 + 1) = &v40[*(void *)a3];
  }
  ++*(void *)(a2 + 32);
  int64_t v41 = a3 - a1;
  if (*(void *)a3 == 1) {
    int64_t v41 = 0;
  }
  *(void *)a1 = v41 + *(void *)a3;
  return result;
}

char *boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate(char *a1, void *a2, unint64_t a3)
{
  if (a3 >> 61)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    uint64_t v7 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(void *)uint64_t v7 = &unk_1EF7A9B00;
  }
  if (*a2 == 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (uint64_t)a2 + *a2;
  }
  uint64_t result = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v4, 8 * a3);
  *(void *)a1 = result - a1;
  return result;
}

double boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(uint64_t **a1)
{
  double v1 = a1 + 1;
  if (a1[1] != (uint64_t *)1) {
    __assert_rtn("create_node", "implementation.hpp", 1984, "!node_");
  }
  uint64_t v3 = **a1;
  if (v3 == 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (uint64_t)*a1 + v3;
  }
  unint64_t v5 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v4, 0x140uLL);
  unint64_t v6 = (unsigned char *)(v10 - (unsigned char *)v1);
  if (v5 - v10 == 1) {
    unint64_t v6 = 0;
  }
  uint64_t v7 = (uint64_t *)&v6[v5 - v10];
  a1[1] = v7;
  if (v7 == (uint64_t *)1) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = (_OWORD *)((char *)v1 + (void)v7);
  }
  double result = 0.0;
  uint8_t v8[16] = 0u;
  v8[17] = 0u;
  v8[14] = 0u;
  v8[15] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  unsigned char v8[8] = 0u;
  v8[9] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  _DWORD v8[2] = 0u;
  v8[3] = 0u;
  *unint64_t v8 = 0u;
  v8[1] = 0u;
  v8[18] = 0u;
  v8[19] = xmmword_1A42D3640;
  return result;
}

uint64_t boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 != 1)
  {
    uint64_t v4 = *(char **)a1;
    uint64_t v6 = v2 - (void)&v6 + v3;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v4, &v6);
  }
  return a1;
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::create_buckets(uint64_t a1, unint64_t a2)
{
  uint64_t v37 = 1;
  unint64_t v5 = (char *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 == 1)
  {
    BOOL v34 = (uint64_t *)(a1 + 16);
    uint64_t v35 = 1;
    boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(&v34);
    double result = boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v33, (void *)(a1 + 8), a2 + 1);
    int64_t v7 = (char *)&v33 - v5;
    if (v33 == (char *)1) {
      int64_t v7 = 0;
    }
    unint64_t v8 = &v33[v7];
    *(void *)unint64_t v5 = &v33[v7];
    if (v35 == 1) {
      __assert_rtn("release", "implementation.hpp", 1955, "node_");
    }
    uint64_t v9 = v35 + (char *)&v35 - (char *)&v33;
    int64_t v10 = (char *)&v33 - (char *)&v37;
    if (v9 == 1) {
      int64_t v10 = 0;
    }
    uint64_t v37 = v10 + v9;
  }
  else
  {
    uint64_t v11 = v4 + v5 - (char *)&v36 + 8 * *(void *)(a1 + 24);
    uint64_t v36 = v11;
    int64_t v12 = (char *)&v36 - (char *)&v34;
    if (v11 == 1) {
      int64_t v12 = 0;
    }
    uint64_t v13 = (uint64_t *)(v12 + v11);
    BOOL v34 = v13;
    if (v13 == (uint64_t *)1) {
      int64_t v14 = 0;
    }
    else {
      int64_t v14 = (char *)&v34 + (void)v13;
    }
    uint64_t v15 = *(void *)v14;
    int64_t v16 = v14 - (char *)&v37;
    if (v15 == 1) {
      int64_t v16 = 0;
    }
    uint64_t v37 = v16 + v15;
    boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v34, (void *)(a1 + 8), a2 + 1);
    double result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_buckets((void *)a1);
    int64_t v17 = (char *)((char *)&v34 - v5);
    if (v34 == (uint64_t *)1) {
      int64_t v17 = 0;
    }
    unint64_t v8 = (char *)v34 + (void)v17;
    *(void *)(a1 + 56) = (char *)v34 + (void)v17;
  }
  *(void *)(a1 + 24) = a2;
  if (v8 == (char *)1)
  {
    unint64_t v18 = 0;
  }
  else
  {
    double v19 = (double)a2 * *(float *)(a1 + 40);
    unint64_t v18 = vcvtpd_u64_f64(v19);
    if (ceil(v19) >= 1.84467441e19) {
      unint64_t v18 = -1;
    }
  }
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x360], 8) = v18;
  int64_t v20 = v5 - &v32;
  int64_t v21 = &v32 - (char *)&v34;
  int64_t v22 = v5 - (char *)&v33;
  if (v8 == (char *)1) {
    int64_t v20 = 0;
  }
  uint64_t v23 = &v8[8 * a2 + v20];
  if (v8 == (char *)1) {
    int64_t v22 = 0;
  }
  if (v23 == (char *)1) {
    int64_t v21 = 0;
  }
  int64_t v24 = (uint64_t *)&v23[v21];
  int64_t v25 = &v8[v22];
  int64_t v33 = v25;
  BOOL v34 = v24;
  if (v25 == (char *)1) {
    int64_t v26 = 0;
  }
  else {
    int64_t v26 = (char *)&v33 + (void)v25;
  }
  if (v24 == (uint64_t *)1) {
    int64_t v27 = 0;
  }
  else {
    int64_t v27 = (char *)&v34 + (void)v24;
  }
  while (v26 != v27)
  {
    *(void *)int64_t v26 = 1;
    uint64_t v28 = v33 + 8;
    int64_t v33 = v28;
    if (v28 == (char *)1) {
      int64_t v26 = 0;
    }
    else {
      int64_t v26 = (char *)&v33 + (void)v28;
    }
    if (v34 == (uint64_t *)1) {
      int64_t v27 = 0;
    }
    else {
      int64_t v27 = (char *)&v34 + (void)v34;
    }
  }
  int64_t v29 = (char *)&v37 - v31;
  if (v37 == 1) {
    int64_t v29 = 0;
  }
  uint64_t v30 = (unsigned char *)(v31 - v27);
  if (v29 + v37 == 1) {
    uint64_t v30 = 0;
  }
  *(void *)int64_t v26 = &v30[v29 + v37];
  return result;
}

void sub_1A4285528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::unordered::detail::node_tmp<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_tmp(uint64_t a1)
{
  uint64_t v3 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != 1)
  {
    std::__destroy_at[abi:ne180100]<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,0>(v2 + v3);
    uint64_t v4 = *(char **)a1;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = v3 - (void)&v8;
    if (v5 == 1) {
      uint64_t v6 = 0;
    }
    uint64_t v8 = v6 + v5;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v4, &v8);
  }
  return a1;
}

char *boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(char *a1, uint64_t a2)
{
  if (*(void *)a2 == 1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(void *)a2 + a2;
  }
  if (v3) {
    uint64_t v4 = v3 - (void)a1;
  }
  else {
    uint64_t v4 = 1;
  }
  *(void *)a1 = v4;
  a1[8] = 1;
  if (*(void *)a2 == 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (char *)(*(void *)a2 + a2);
  }
  if (v4 == 1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = &a1[v4];
  }
  if (v5 == v6)
  {
    boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::swap_data(a1, (void *)a2);
  }
  else
  {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 8);
    if (v7)
    {
      uint64_t v15 = a2 + 9 - (void)&v20;
      int64_t v12 = &v22;
      uint64_t v16 = a2 + 9 - (void)&v22 + (v7 >> 1);
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 24);
      uint64_t v8 = a2 + 24;
      uint64_t v9 = v10;
      uint64_t v11 = v8 - (void)&v20;
      int64_t v12 = &v21;
      uint64_t v13 = v8 - (void)&v21;
      BOOL v14 = v10 == 1;
      if (v10 == 1) {
        uint64_t v11 = 0;
      }
      uint64_t v15 = v11 + v9;
      if (v14) {
        uint64_t v13 = 0;
      }
      uint64_t v16 = v13 + v9 + (*(void *)(v8 - 16) >> 1);
    }
    uint64_t v20 = v15;
    uint64_t v17 = v12 - (char *)&v19;
    if (v16 == 1) {
      uint64_t v17 = 0;
    }
    uint64_t v19 = v17 + v16;
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::assign<boost::interprocess::offset_ptr<char,long,unsigned long,0ul>>((uint64_t)a1, &v20, (char *)&v19);
  }
  return a1;
}

uint64_t boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::unordered_set(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4 == 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4 + a2 + 16;
  }
  if (v5) {
    uint64_t v6 = v5 - (void)&v37;
  }
  else {
    uint64_t v6 = 1;
  }
  uint64_t v37 = v6;
  if (v6 == 1) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (char *)&v37 + v6;
  }
  if (v7) {
    uint64_t v8 = v7 - (char *)&v38;
  }
  else {
    uint64_t v8 = 1;
  }
  uint64_t v38 = v8;
  if (v8 == 1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (char *)&v38 + v8;
  }
  if (v9) {
    uint64_t v10 = v9 - (char *)&v39;
  }
  else {
    uint64_t v10 = 1;
  }
  uint64_t v39 = v10;
  *(unsigned char *)a1 = 0;
  if (v10 == 1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = (char *)&v39 + v10;
  }
  int64_t v12 = (uint64_t *)(a1 + 16);
  uint64_t v13 = &v11[-a1 - 16];
  BOOL v14 = v11 == 0;
  if (v11) {
    uint64_t v15 = v11 - (char *)&v40;
  }
  else {
    uint64_t v15 = 1;
  }
  if (v14) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = (uint64_t)v13;
  }
  if (v15 == 1) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = (char *)&v40 + v15;
  }
  if (v17) {
    uint64_t v18 = (uint64_t)&v17[-a1 - 8];
  }
  else {
    uint64_t v18 = 1;
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = v18;
  *(void *)(a1 + 16) = v16;
  unint64_t v19 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(*(void *)(a2 + 32), *(float *)(a2 + 40));
  *(void *)(a1 + 24) = v19;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x360], 8) = xmmword_1A42D3510;
  if (*(void *)(a2 + 32))
  {
    boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::create_buckets(a1, v19);
    boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::begin(&v39, a2);
    uint64_t v20 = v39;
    if (v39 != 1)
    {
      int64_t v21 = (char *)&v39 - (char *)&v38;
      do
      {
        uint64_t v38 = v20 + v21;
        if (v20 + v21 == 1) {
          char v22 = 0;
        }
        else {
          char v22 = (uint64_t *)((char *)&v39 + v20);
        }
        uint64_t v23 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::hash(v22);
        uint64_t v40 = v12;
        uint64_t v41 = 1;
        boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(&v40);
        if (v20 == 1) {
          int64_t v24 = 0;
        }
        else {
          int64_t v24 = (char *)&v39 + v20;
        }
        if (v41 == 1) {
          int64_t v25 = 0;
        }
        else {
          int64_t v25 = (char *)&v41 + v41;
        }
        uint64_t v26 = *(void *)v24;
        int64_t v27 = v24 - v25;
        if (v26 == 1) {
          int64_t v27 = 0;
        }
        *(void *)int64_t v25 = v27 + v26;
        if (v41 == 1) {
          __assert_rtn("release", "implementation.hpp", 1955, "node_");
        }
        uint64_t v37 = (char *)&v41 - (char *)&v37 + v41;
        boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::add_node_unique((char *)&v40, a1, (char *)&v37, v23);
        if (v39 == 1) {
          uint64_t v28 = 0;
        }
        else {
          uint64_t v28 = 24;
        }
        uint64_t v36 = v28 + v39;
        int64_t v29 = (char *)&v36 + v28 + v39;
        if (v36 == 1) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = v29;
        }
        uint64_t v31 = *((void *)v30 + 1);
        uint64_t v32 = v30 + 8 - (char *)&v40;
        if (v31 == 1) {
          uint64_t v32 = 0;
        }
        uint64_t v33 = v32 + v31;
        if (v33 == 1) {
          int64_t v34 = 0;
        }
        else {
          int64_t v34 = (char *)&v40 - (char *)&v39;
        }
        uint64_t v20 = v34 + v33;
        uint64_t v39 = v34 + v33;
      }
      while (v34 + v33 != 1);
    }
  }
  return a1;
}

void sub_1A4285930(_Unwind_Exception *a1)
{
  boost::unordered::detail::functions<pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>::~functions(v1);
  _Unwind_Resume(a1);
}

char *boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::swap_data(char *result, void *a2)
{
  v25[12] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = result + 8;
  uint64_t v3 = a2 + 1;
  if (result[8])
  {
    if (a2[1])
    {
      uint64_t v14 = *((void *)result + 3);
      long long v15 = *(_OWORD *)v2;
      uint64_t v24 = a2[3];
      *(_OWORD *)uint64_t v2 = *v3;
      *((void *)result + 3) = v24;
    }
    else
    {
      uint64_t v14 = *((void *)result + 3);
      *((void *)result + 3) = 1;
      result += 24;
      long long v15 = *(_OWORD *)v2;
      *((void *)result - 2) &= ~1uLL;
      *((void *)result - 2) = a2[1] & 0xFFFFFFFFFFFFFFFELL;
      *((void *)result - 1) = a2[2];
      uint64_t v16 = a2[3];
      int64_t v17 = (char *)(a2 + 3) - result;
      if (v16 == 1) {
        int64_t v17 = 0;
      }
      *(void *)double result = v17 + v16;
    }
    *uint64_t v3 = v15;
    a2[3] = v14;
  }
  else if (a2[1])
  {
    uint64_t v18 = a2[3];
    a2[3] = 1;
    unint64_t v19 = (char *)(a2 + 3);
    long long v20 = *v3;
    *((void *)v19 - 2) &= ~1uLL;
    *((void *)v19 - 2) = *((void *)result + 1) & 0xFFFFFFFFFFFFFFFELL;
    *((void *)v19 - 1) = *((void *)result + 2);
    uint64_t v22 = *((void *)result + 3);
    result += 24;
    uint64_t v21 = v22;
    int64_t v23 = result - v19;
    if (v22 == 1) {
      int64_t v23 = 0;
    }
    *(void *)unint64_t v19 = v23 + v21;
    *(_OWORD *)uint64_t v2 = v20;
    v2[2] = v18;
  }
  else
  {
    uint64_t v5 = *((void *)result + 3);
    result += 24;
    uint64_t v4 = v5;
    uint64_t v6 = *((void *)result - 2);
    uint64_t v7 = *((void *)result - 1);
    int64_t v8 = result - (char *)v25;
    if (v5 == 1) {
      int64_t v8 = 0;
    }
    uint64_t v9 = v8 + v4;
    *((void *)result - 2) = a2[1] & 0xFFFFFFFFFFFFFFFELL | *((void *)result - 2) & 1;
    *((void *)result - 1) = a2[2];
    uint64_t v10 = (char *)(a2 + 3);
    uint64_t v11 = a2[3];
    int64_t v12 = (char *)(a2 + 3) - result;
    if (v11 == 1) {
      int64_t v12 = 0;
    }
    *(void *)double result = v12 + v11;
    a2[1] = v6 & 0xFFFFFFFFFFFFFFFELL | a2[1] & 1;
    a2[2] = v7;
    uint64_t v13 = (char *)((char *)v25 - v10);
    if (v9 == 1) {
      uint64_t v13 = 0;
    }
    *(void *)uint64_t v10 = &v13[v9];
  }
  return result;
}

uint64_t boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::assign<boost::interprocess::offset_ptr<char,long,unsigned long,0ul>>(uint64_t a1, uint64_t *a2, char *a3)
{
  unint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4)
  {
    int64_t v8 = (char *)(a1 + 9);
    uint64_t v7 = a1 + 9 - (void)&v300;
    if (v7 == 1) {
      int64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = a1 + 24 - (void)&v300;
    if (v5 == 1) {
      uint64_t v6 = 0;
    }
    uint64_t v7 = v6 + v5;
    int64_t v8 = (char *)&v300 + v7;
    if (v7 == 1) {
      int64_t v8 = 0;
    }
    unint64_t v4 = *(void *)(a1 + 8);
  }
  unint64_t v9 = v4 >> 1;
  uint64_t v300 = v7;
  uint64_t v10 = *a2;
  BOOL v11 = *a2 == 1;
  if (*a2 == 1) {
    int64_t v12 = 0;
  }
  else {
    int64_t v12 = (char *)a2 + v10;
  }
  uint64_t v13 = *(void *)a3;
  BOOL v14 = *(void *)a3 == 1;
  if (*(void *)a3 == 1) {
    long long v15 = 0;
  }
  else {
    long long v15 = &a3[v13];
  }
  uint64_t v16 = 0;
  BOOL v17 = v12 == v15 || v9 == 0;
  if (!v17)
  {
    do
    {
      v8[v16] = *v12;
      uint64_t v18 = *a2;
      uint64_t v10 = *a2 + 1;
      *a2 = v10;
      BOOL v17 = v18 == 0;
      BOOL v11 = v18 == 0;
      if (v17) {
        int64_t v12 = 0;
      }
      else {
        int64_t v12 = (char *)a2 + v10;
      }
      uint64_t v13 = *(void *)a3;
      BOOL v14 = *(void *)a3 == 1;
      long long v15 = &a3[*(void *)a3];
      if (*(void *)a3 == 1) {
        long long v15 = 0;
      }
    }
    while (v12 != v15 && v9 - 1 != v16++);
  }
  if (v12 == v15)
  {
    int64_t v28 = (char *)&v300 - (char *)&v298;
    int64_t v29 = (char *)&v298 - (char *)&v325;
    int64_t v30 = (char *)&v300 - (char *)&v296;
    if (v300 == 1) {
      int64_t v28 = 0;
    }
    int64_t v31 = v300 + v16 + v28;
    int64_t v298 = v31;
    if (v300 == 1) {
      int64_t v30 = 0;
    }
    if (v31 == 1) {
      int64_t v29 = 0;
    }
    int64_t v32 = v29 + v31;
    int64_t v325 = v32;
    int64_t v33 = (char *)&v325 - (char *)&v299;
    if (v32 == 1) {
      int64_t v33 = 0;
    }
    int64_t v34 = v33 + v32;
    uint64_t v299 = v34;
    int64_t v35 = v300 + v9 + v30;
    int64_t v296 = v35;
    int64_t v36 = (char *)&v296 - (char *)&v324;
    if (v35 == 1) {
      int64_t v36 = 0;
    }
    int64_t v37 = v36 + v35;
    int64_t v324 = v37;
    int64_t v38 = (char *)&v324 - (char *)&v297;
    if (v37 == 1) {
      int64_t v38 = 0;
    }
    int64_t v39 = v38 + v37;
    uint64_t v297 = v39;
    if (v34 == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = (char *)&v299 + v34;
    }
    if (v39 == 1) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = (char *)&v297 + v39;
    }
    uint64_t v42 = v40 - v41;
    if (v40 != v41)
    {
      unint64_t v43 = *(unsigned __int8 *)(a1 + 8);
      if (v43)
      {
        unint64_t v44 = v43 >> 1;
        uint64_t v47 = a1 - (void)&v326 + 9;
      }
      else
      {
        unint64_t v43 = *(void *)(a1 + 8);
        unint64_t v44 = v43 >> 1;
        uint64_t v45 = *(void *)(a1 + 24);
        uint64_t v46 = a1 + 24 - (void)&v326;
        if (v45 == 1) {
          uint64_t v46 = 0;
        }
        uint64_t v47 = v46 + v45;
      }
      int64_t v81 = (char *)&v326 - (char *)&v327;
      if (v47 == 1) {
        int64_t v81 = 0;
      }
      int64_t v82 = v81 + v47;
      if (v82 == 1) {
        uint64_t v83 = 0;
      }
      else {
        uint64_t v83 = (char *)&v327 + v82;
      }
      unint64_t v84 = v44 + v83 - v41;
      if (v84 != -1)
      {
        memmove(v40, v41, v84 + 1);
        LOBYTE(v43) = *(unsigned char *)(a1 + 8);
      }
      unint64_t v85 = v44 + v42;
      if (v43)
      {
        if (v85 <= 0x7F)
        {
          *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = (2 * v85) | 1;
          return a1;
        }
        int v292 = 468;
        uint64_t v293 = "priv_short_size";
      }
      else
      {
        if ((v85 & 0x8000000000000000) == 0)
        {
          *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = *(void *)(a1 + 8) & 1 | (2 * v85);
          return a1;
        }
        int v292 = 476;
        uint64_t v293 = "priv_long_size";
      }
      __assert_rtn(v293, "string.hpp", v292, "sz <= mask");
    }
  }
  else
  {
    int64_t v20 = (char *)a2 - (char *)&v295;
    if (v11) {
      int64_t v20 = 0;
    }
    int64_t v21 = v20 + v10;
    int64_t v22 = a3 - (char *)&v294;
    if (v14) {
      int64_t v22 = 0;
    }
    uint64_t v23 = v22 + v13;
    uint64_t v294 = v22 + v13;
    int64_t v295 = v21;
    unint64_t v24 = *(unsigned __int8 *)(a1 + 8);
    if (v24)
    {
      uint64_t v27 = a1 - (void)&v327 + (v24 >> 1) + 9;
    }
    else
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = a1 + 24 - (void)&v327;
      if (v25 == 1) {
        uint64_t v26 = 0;
      }
      uint64_t v27 = v26 + v25 + (*(void *)(a1 + 8) >> 1);
      LODWORD(v24) = *(void *)(a1 + 8);
    }
    int64_t v48 = (char *)&v327 - (char *)&v303;
    if (v27 == 1) {
      int64_t v48 = 0;
    }
    int64_t v49 = v48 + v27;
    int64_t v303 = v49;
    int64_t v50 = (char *)&v303 - (char *)&v304;
    if (v49 == 1) {
      int64_t v50 = 0;
    }
    int64_t v304 = v50 + v49;
    int64_t v51 = (char *)&v295 - (char *)&v302;
    if (v21 == 1) {
      int64_t v51 = 0;
    }
    int64_t v52 = v51 + v21;
    uint64_t v53 = -56;
    if (v23 == 1) {
      uint64_t v53 = 0;
    }
    uint64_t v54 = v53 + v23;
    uint64_t v301 = v54;
    uint64_t v302 = v52;
    uint64_t v55 = (char *)&v302 + v52;
    if (v52 == 1) {
      uint64_t v55 = 0;
    }
    uint64_t v56 = (char *)&v301 + v54;
    if (v54 == 1) {
      uint64_t v56 = 0;
    }
    if (v55 != v56)
    {
      int64_t v57 = (char *)&v302 - (char *)&v324;
      if (v52 == 1) {
        int64_t v57 = 0;
      }
      uint64_t v58 = v57 + v52;
      int64_t v59 = (char *)&v301 - (char *)&v323;
      if (v54 == 1) {
        int64_t v59 = 0;
      }
      uint64_t v60 = v59 + v54;
      uint64_t v323 = v60;
      int64_t v324 = v58;
      int64_t v61 = (char *)&v324 - (char *)&v327;
      if (v58 == 1) {
        int64_t v61 = 0;
      }
      uint64_t v62 = v61 + v58;
      int64_t v63 = (char *)&v323 - (char *)&v326;
      if (v60 == 1) {
        int64_t v63 = 0;
      }
      uint64_t v64 = v63 + v60;
      if (v64 == 1) {
        int64_t v65 = 0;
      }
      else {
        int64_t v65 = (char *)&v326 + v64;
      }
      int64_t v66 = (char *)&v327 + v62;
      if (v62 == 1) {
        int64_t v66 = 0;
      }
      unint64_t v67 = v65 - v66;
      if (v24)
      {
        unint64_t v70 = v24 >> 1;
        uint64_t v73 = a1 - (void)&v322 + 9;
        unint64_t v321 = 0;
        uint64_t v322 = v73;
        uint64_t v319 = 1;
        uint64_t v320 = 1;
        if (22 - v70 >= v67) {
          goto LABEL_169;
        }
        uint64_t v68 = 23;
      }
      else
      {
        unint64_t v69 = *(void *)(a1 + 8);
        uint64_t v68 = *(void *)(a1 + 16);
        unint64_t v70 = v69 >> 1;
        uint64_t v71 = *(void *)(a1 + 24);
        uint64_t v72 = a1 + 24 - (void)&v322;
        if (v71 == 1) {
          uint64_t v72 = 0;
        }
        uint64_t v73 = v72 + v71;
        uint64_t v322 = v73;
        uint64_t v319 = 1;
        uint64_t v320 = 1;
        if (v68 + ~(v69 >> 1) >= v67)
        {
          LOBYTE(v24) = v69;
          goto LABEL_169;
        }
      }
      if (*(void *)a1 == 1) {
        uint64_t v74 = 0;
      }
      else {
        uint64_t v74 = *(void *)a1 + a1;
      }
      unint64_t v75 = *(void *)(v74 + 48);
      unint64_t v76 = 2 * v68;
      if (v68 < 0) {
        unint64_t v76 = -1;
      }
      unint64_t v77 = v68 + v67;
      if (v76 < v75) {
        unint64_t v75 = v76;
      }
      if (v77 <= v75) {
        unint64_t v77 = v75;
      }
      unint64_t v321 = v77;
      int64_t v78 = (char *)&v322 - (char *)&v320;
      if (v73 == 1) {
        int64_t v78 = 0;
      }
      uint64_t v320 = v78 + v73;
      unint64_t v79 = v70 + v67;
      if (v24)
      {
        char v80 = 1;
        uint64_t v320 = 1;
      }
      else
      {
        char v80 = 7;
      }
      boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command((char *)&v327, (void *)a1, v80, v70 + v67 + 1, &v321, &v320);
      int64_t v86 = (char *)&v327 - (char *)&v319;
      if (v327 == 1) {
        int64_t v86 = 0;
      }
      uint64_t v87 = v86 + v327;
      uint64_t v319 = v87;
      uint64_t v73 = v322;
      if (v322 == 1) {
        uint64_t v88 = 0;
      }
      else {
        uint64_t v88 = (char *)&v322 + v322;
      }
      uint64_t v89 = (char *)&v319 + v87;
      if (v87 == 1) {
        uint64_t v89 = 0;
      }
      if (v88 != v89)
      {
        uint64_t v90 = 8;
        if (v87 == 1) {
          uint64_t v90 = 0;
        }
        uint64_t v91 = v90 + v87;
        uint64_t v318 = v91;
        if (v320 == 1)
        {
          int64_t v92 = (char *)&v322 - (char *)&v317;
          if (v322 == 1) {
            int64_t v92 = 0;
          }
          int64_t v93 = v92 + v322;
          int64_t v94 = (char *)&v304 - (char *)&v316;
          if (v304 == 1) {
            int64_t v94 = 0;
          }
          int64_t v95 = v94 + v304;
          int64_t v316 = v94 + v304;
          uint64_t v317 = v92 + v322;
          int64_t v96 = (char *)&v318 - (char *)&v315;
          if (v91 == 1) {
            int64_t v96 = 0;
          }
          int64_t v97 = v96 + v91;
          uint64_t v315 = v96 + v91;
          int64_t v98 = (char *)&v315 - (char *)&v326;
          if (v96 + v91 == 1) {
            int64_t v98 = 0;
          }
          uint64_t v326 = v98 + v97;
          uint64_t v99 = (char *)&v317 + v93;
          if (v93 == 1) {
            uint64_t v99 = 0;
          }
          uint64_t v100 = (char *)&v316 + v95;
          if (v95 == 1) {
            uint64_t v100 = 0;
          }
          if (v99 == v100)
          {
            uint64_t v101 = 0;
          }
          else
          {
            uint64_t v101 = 0;
            do
            {
              if (v97 == 1) {
                int64_t v102 = 0;
              }
              else {
                int64_t v102 = (char *)&v315 - (char *)&v325;
              }
              int64_t v103 = v102 + v97;
              int64_t v325 = v103;
              if (v103 == 1) {
                uint64_t v104 = 0;
              }
              else {
                uint64_t v104 = (char *)&v325 + v103;
              }
              if (v104) {
                uint64_t v105 = v104 - (char *)&v327;
              }
              else {
                uint64_t v105 = 1;
              }
              if (v105 == 1) {
                int64_t v106 = 0;
              }
              else {
                int64_t v106 = (char *)&v327 + v105;
              }
              *int64_t v106 = *v99;
              int64_t v97 = ++v315;
              uint64_t v107 = v317++;
              ++v101;
              if (v107) {
                uint64_t v99 = (char *)&v317 + v107 + 1;
              }
              else {
                uint64_t v99 = 0;
              }
              if (v316 == 1) {
                uint64_t v108 = 0;
              }
              else {
                uint64_t v108 = (char *)&v316 + v316;
              }
            }
            while (v99 != v108);
            uint64_t v91 = v318;
          }
          int64_t v231 = (char *)&v302 - (char *)&v314;
          if (v302 == 1) {
            int64_t v231 = 0;
          }
          uint64_t v232 = v231 + v302;
          int64_t v233 = (char *)&v301 - (char *)&v313;
          if (v301 == 1) {
            int64_t v233 = 0;
          }
          uint64_t v234 = v233 + v301;
          int64_t v313 = v233 + v301;
          uint64_t v314 = v231 + v302;
          int64_t v235 = (char *)&v318 - (char *)&v311;
          if (v91 == 1) {
            int64_t v235 = 0;
          }
          int64_t v236 = v91 + v101 + v235;
          int64_t v237 = (char *)&v311 - (char *)&v312;
          if (v236 == 1) {
            int64_t v237 = 0;
          }
          int64_t v238 = v237 + v236;
          int64_t v311 = v91 + v101 + v235;
          int64_t v312 = v238;
          int64_t v239 = (char *)&v312 - (char *)&v326;
          if (v238 == 1) {
            int64_t v239 = 0;
          }
          uint64_t v326 = v239 + v238;
          if (v232 == 1) {
            uint64_t v240 = 0;
          }
          else {
            uint64_t v240 = (char *)&v314 + v232;
          }
          int64_t v241 = (char *)&v313 + v234;
          if (v234 == 1) {
            int64_t v241 = 0;
          }
          if (v240 == v241)
          {
            uint64_t v242 = 0;
          }
          else
          {
            uint64_t v242 = 0;
            do
            {
              if (v238 == 1) {
                int64_t v243 = 0;
              }
              else {
                int64_t v243 = (char *)&v312 - (char *)&v325;
              }
              int64_t v244 = v243 + v238;
              int64_t v325 = v244;
              if (v244 == 1) {
                int64_t v245 = 0;
              }
              else {
                int64_t v245 = (char *)&v325 + v244;
              }
              if (v245) {
                uint64_t v246 = v245 - (char *)&v327;
              }
              else {
                uint64_t v246 = 1;
              }
              if (v246 == 1) {
                uint64_t v247 = 0;
              }
              else {
                uint64_t v247 = (char *)&v327 + v246;
              }
              *uint64_t v247 = *v240;
              int64_t v238 = ++v312;
              uint64_t v248 = v314++;
              ++v242;
              if (v248) {
                uint64_t v240 = (char *)&v314 + v314;
              }
              else {
                uint64_t v240 = 0;
              }
              if (v313 == 1) {
                uint64_t v249 = 0;
              }
              else {
                uint64_t v249 = (char *)&v313 + v313;
              }
            }
            while (v240 != v249);
            uint64_t v91 = v318;
          }
          uint64_t v250 = v242 + v101;
          int64_t v251 = (char *)&v304 - (char *)&v310;
          if (v304 == 1) {
            int64_t v251 = 0;
          }
          uint64_t v252 = v251 + v304;
          int64_t v253 = (char *)&v322 - (char *)&v307;
          if (v322 == 1) {
            int64_t v253 = 0;
          }
          int64_t v254 = v322 + v70 + v253;
          int64_t v307 = v254;
          int64_t v255 = (char *)&v307 - (char *)&v308;
          if (v254 == 1) {
            int64_t v255 = 0;
          }
          int64_t v256 = v255 + v254;
          unint64_t v308 = v256;
          int64_t v257 = (char *)&v308 - (char *)&v309;
          if (v256 == 1) {
            int64_t v257 = 0;
          }
          int64_t v258 = v257 + v256;
          unint64_t v309 = v257 + v256;
          uint64_t v310 = v252;
          int64_t v259 = (char *)&v318 - (char *)&v305;
          if (v91 == 1) {
            int64_t v259 = 0;
          }
          int64_t v260 = v91 + v250 + v259;
          int64_t v261 = (char *)&v305 - (char *)&v306;
          if (v260 == 1) {
            int64_t v261 = 0;
          }
          int64_t v262 = v261 + v260;
          int64_t v305 = v260;
          int64_t v306 = v262;
          int64_t v263 = (char *)&v306 - (char *)&v326;
          if (v262 == 1) {
            int64_t v263 = 0;
          }
          uint64_t v326 = v263 + v262;
          int64_t v264 = (char *)&v310 + v252;
          if (v252 == 1) {
            int64_t v264 = 0;
          }
          int64_t v265 = (char *)&v309 + v258;
          if (v258 == 1) {
            int64_t v265 = 0;
          }
          if (v264 == v265)
          {
            uint64_t v266 = 0;
          }
          else
          {
            uint64_t v266 = 0;
            do
            {
              if (v262 == 1) {
                int64_t v267 = 0;
              }
              else {
                int64_t v267 = (char *)&v306 - (char *)&v325;
              }
              int64_t v268 = v267 + v262;
              int64_t v325 = v268;
              if (v268 == 1) {
                int64_t v269 = 0;
              }
              else {
                int64_t v269 = (char *)&v325 + v268;
              }
              if (v269) {
                uint64_t v270 = v269 - (char *)&v327;
              }
              else {
                uint64_t v270 = 1;
              }
              if (v270 == 1) {
                int64_t v271 = 0;
              }
              else {
                int64_t v271 = (char *)&v327 + v270;
              }
              *int64_t v271 = *v264;
              int64_t v262 = ++v306;
              uint64_t v272 = v310++;
              ++v266;
              if (v272) {
                int64_t v264 = (char *)&v310 + v310;
              }
              else {
                int64_t v264 = 0;
              }
              if (v309 == 1) {
                int64_t v273 = 0;
              }
              else {
                int64_t v273 = (char *)&v309 + v309;
              }
            }
            while (v264 != v273);
            uint64_t v91 = v318;
          }
          unint64_t v79 = v266 + v250;
          int64_t v274 = (char *)&v318 - (char *)&v308;
          if (v91 == 1) {
            int64_t v274 = 0;
          }
          int64_t v275 = v91 + v79 + v274;
          unint64_t v308 = v275;
          int64_t v276 = (char *)&v308 - (char *)&v325;
          if (v275 == 1) {
            int64_t v276 = 0;
          }
          int64_t v277 = v276 + v275;
          int64_t v325 = v277;
          uint64_t v278 = -8;
          if (v277 == 1) {
            uint64_t v278 = 0;
          }
          uint64_t v279 = v278 + v277;
          v280 = (char *)&v326 + v279;
          if (v279 == 1) {
            v280 = 0;
          }
          if (v280) {
            uint64_t v281 = v280 - (char *)&v327;
          }
          else {
            uint64_t v281 = 1;
          }
          if (v281 == 1) {
            int64_t v282 = 0;
          }
          else {
            int64_t v282 = (char *)&v327 + v281;
          }
          *int64_t v282 = 0;
          if (*(unsigned char *)(a1 + 8))
          {
            uint64_t v285 = a1 - (void)&v327 + 9;
            unint64_t v286 = 23;
          }
          else
          {
            uint64_t v283 = *(void *)(a1 + 24);
            uint64_t v284 = a1 + 24 - (void)&v327;
            if (v283 == 1) {
              uint64_t v284 = 0;
            }
            uint64_t v285 = v284 + v283;
            unint64_t v286 = *(void *)(a1 + 16);
          }
          uint64_t v327 = v285;
          boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate((char *)a1, &v327, v286);
          if (*(unsigned char *)(a1 + 8)) {
            *(void *)(a1 + 8) &= ~1uLL;
          }
          uint64_t v287 = -72;
          if (v318 == 1) {
            uint64_t v287 = 0;
          }
          uint64_t v288 = v287 + v318;
          uint64_t v327 = v288;
          int64_t v289 = (char *)&v327 - a1 - 24;
          if (v288 == 1) {
            int64_t v289 = 0;
          }
          uint64_t v230 = &v289[v288];
        }
        else
        {
          if (v91 == 1) {
            uint64_t v197 = 0;
          }
          else {
            uint64_t v197 = (char *)&v318 + v91;
          }
          if (v304 == 1) {
            int64_t v198 = 0;
          }
          else {
            int64_t v198 = (char *)&v304 + v304;
          }
          uint64_t v199 = v198 - v88;
          if (v198 != v88) {
            memmove(v197, v88, v198 - v88);
          }
          if (v70 != v199) {
            memmove(&v197[v199 + v67], v198, v70 - v199);
          }
          int64_t v200 = (char *)&v302 - (char *)&v317;
          if (v302 == 1) {
            int64_t v200 = 0;
          }
          uint64_t v201 = v200 + v302;
          int64_t v202 = (char *)&v301 - (char *)&v316;
          if (v301 == 1) {
            int64_t v202 = 0;
          }
          uint64_t v203 = v202 + v301;
          int64_t v316 = v202 + v301;
          uint64_t v317 = v201;
          uint64_t v204 = v318;
          int64_t v205 = (char *)&v318 - (char *)&v314;
          if (v318 == 1) {
            int64_t v205 = 0;
          }
          uint64_t v206 = v318 + v205 + v199;
          uint64_t v314 = v206;
          int64_t v207 = (char *)&v314 - (char *)&v315;
          if (v206 == 1) {
            int64_t v207 = 0;
          }
          uint64_t v208 = v207 + v206;
          uint64_t v315 = v208;
          int64_t v209 = (char *)&v315 - (char *)&v326;
          if (v208 == 1) {
            int64_t v209 = 0;
          }
          uint64_t v326 = v209 + v208;
          if (v201 == 1) {
            v210 = 0;
          }
          else {
            v210 = (char *)&v317 + v201;
          }
          if (v203 == 1) {
            v211 = 0;
          }
          else {
            v211 = (char *)&v316 + v203;
          }
          if (v210 != v211)
          {
            do
            {
              if (v208 == 1) {
                int64_t v212 = 0;
              }
              else {
                int64_t v212 = (char *)&v315 - (char *)&v325;
              }
              int64_t v213 = v212 + v208;
              int64_t v325 = v213;
              if (v213 == 1) {
                int64_t v214 = 0;
              }
              else {
                int64_t v214 = (char *)&v325 + v213;
              }
              if (v214) {
                uint64_t v215 = v214 - (char *)&v327;
              }
              else {
                uint64_t v215 = 1;
              }
              if (v215 == 1) {
                unint64_t v216 = 0;
              }
              else {
                unint64_t v216 = (char *)&v327 + v215;
              }
              *unint64_t v216 = *v210;
              uint64_t v208 = ++v315;
              uint64_t v217 = v317++;
              if (v217) {
                v210 = (char *)&v317 + v217 + 1;
              }
              else {
                v210 = 0;
              }
              if (v316 == 1) {
                int64_t v218 = 0;
              }
              else {
                int64_t v218 = (char *)&v316 + v316;
              }
            }
            while (v210 != v218);
            uint64_t v204 = v318;
          }
          int64_t v219 = (char *)&v318 - (char *)&v313;
          if (v204 == 1) {
            int64_t v219 = 0;
          }
          int64_t v220 = v204 + v79 + v219;
          int64_t v313 = v220;
          int64_t v221 = (char *)&v313 - (char *)&v325;
          if (v220 == 1) {
            int64_t v221 = 0;
          }
          int64_t v222 = v221 + v220;
          int64_t v325 = v222;
          uint64_t v223 = -8;
          if (v222 == 1) {
            uint64_t v223 = 0;
          }
          uint64_t v224 = v223 + v222;
          v225 = (char *)&v326 + v224;
          if (v224 == 1) {
            v225 = 0;
          }
          if (v225) {
            uint64_t v226 = v225 - (char *)&v327;
          }
          else {
            uint64_t v226 = 1;
          }
          if (v226 == 1) {
            v227 = 0;
          }
          else {
            v227 = (char *)&v327 + v226;
          }
          unsigned char *v227 = 0;
          if (*(unsigned char *)(a1 + 8)) {
            *(void *)(a1 + 8) &= ~1uLL;
          }
          uint64_t v228 = -72;
          if (v318 == 1) {
            uint64_t v228 = 0;
          }
          uint64_t v327 = v228 + v318;
          uint64_t v229 = (char *)&v327 - a1 - 24;
          if (v228 + v318 == 1) {
            uint64_t v229 = 0;
          }
          uint64_t v230 = &v229[v228 + v318];
        }
        *(void *)(a1 + 24) = v230;
        if ((v79 & 0x8000000000000000) == 0)
        {
          unint64_t v290 = v321;
          *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = *(void *)(a1 + 8) & 1 | (2 * v79);
          *(void *)(a1 + 16) = v290;
          return a1;
        }
        goto LABEL_517;
      }
      LOBYTE(v24) = *(unsigned char *)(a1 + 8);
      if ((v24 & 1) == 0) {
        *(void *)(a1 + 16) = v321;
      }
LABEL_169:
      int64_t v109 = (char *)&v322 - (char *)&v327;
      if (v73 == 1) {
        int64_t v109 = 0;
      }
      int64_t v110 = v109 + v73;
      if (v304 == 1) {
        int64_t v111 = 0;
      }
      else {
        int64_t v111 = (char *)&v304 + v304;
      }
      uint64_t v112 = (char *)&v327 + v110;
      if (v110 == 1) {
        uint64_t v112 = 0;
      }
      unint64_t v113 = v112 - v111 + v70;
      uint64_t v114 = v113 - v67;
      if (v113 < v67)
      {
        int64_t v115 = (char *)&v302 - (char *)&v318;
        if (v302 == 1) {
          int64_t v115 = 0;
        }
        uint64_t v116 = v113 + v302 + v115 + 1;
        int64_t v117 = (char *)&v318 - (char *)&v317;
        if (!(v113 + v302 + v115)) {
          int64_t v117 = 0;
        }
        int64_t v118 = v117 + v116;
        uint64_t v317 = v117 + v116;
        uint64_t v318 = v113 + v302 + v115 + 1;
        int64_t v119 = (char *)&v301 - (char *)&v316;
        if (v301 == 1) {
          int64_t v119 = 0;
        }
        uint64_t v120 = v119 + v301;
        int64_t v316 = v119 + v301;
        if (v73 == 1) {
          int64_t v121 = 0;
        }
        else {
          int64_t v121 = (char *)&v322 - (char *)&v314;
        }
        uint64_t v122 = v73 + v121 + v70 + 1;
        uint64_t v314 = v122;
        int64_t v123 = (char *)&v314 - (char *)&v315;
        if (v122 == 1) {
          int64_t v123 = 0;
        }
        int64_t v124 = v123 + v122;
        uint64_t v315 = v124;
        int64_t v125 = (char *)&v315 - (char *)&v326;
        if (v124 == 1) {
          int64_t v125 = 0;
        }
        uint64_t v326 = v125 + v124;
        if (v118 == 1) {
          int64_t v126 = 0;
        }
        else {
          int64_t v126 = (char *)&v317 + v118;
        }
        if (v120 == 1) {
          int64_t v127 = 0;
        }
        else {
          int64_t v127 = (char *)&v316 + v120;
        }
        if (v126 != v127)
        {
          do
          {
            if (v124 == 1) {
              int64_t v128 = 0;
            }
            else {
              int64_t v128 = (char *)&v315 - (char *)&v325;
            }
            int64_t v129 = v128 + v124;
            int64_t v325 = v129;
            if (v129 == 1) {
              int64_t v130 = 0;
            }
            else {
              int64_t v130 = (char *)&v325 + v129;
            }
            if (v130) {
              uint64_t v131 = v130 - (char *)&v327;
            }
            else {
              uint64_t v131 = 1;
            }
            if (v131 == 1) {
              uint64_t v132 = 0;
            }
            else {
              uint64_t v132 = (char *)&v327 + v131;
            }
            *uint64_t v132 = *v126;
            int64_t v124 = ++v315;
            uint64_t v133 = v317++;
            if (v133) {
              int64_t v126 = (char *)&v317 + v133 + 1;
            }
            else {
              int64_t v126 = 0;
            }
            if (v316 == 1) {
              uint64_t v134 = 0;
            }
            else {
              uint64_t v134 = (char *)&v316 + v316;
            }
          }
          while (v126 != v134);
          LOBYTE(v24) = *(unsigned char *)(a1 + 8);
        }
        unint64_t v135 = v67 - v113 + v70;
        if (v24)
        {
          if (v135 >= 0x80) {
            goto LABEL_518;
          }
          char v137 = (2 * v135) | 1;
          *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = v137;
        }
        else
        {
          if ((v135 & 0x8000000000000000) != 0) {
            goto LABEL_517;
          }
          uint64_t v136 = *(void *)(a1 + 8) & 1 | (2 * v135);
          *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = v136;
          char v137 = v136;
        }
        int64_t v161 = (char *)&v304 - (char *)&v313;
        if (v304 == 1) {
          int64_t v161 = 0;
        }
        int64_t v162 = v161 + v304;
        int64_t v313 = v161 + v304;
        int64_t v163 = (char *)&v322 - (char *)&v310;
        int64_t v164 = (char *)&v310 - (char *)&v311;
        if (v322 == 1) {
          int64_t v163 = 0;
        }
        uint64_t v165 = v322 + v70 + 1 + v163;
        uint64_t v310 = v165;
        if (v322 == 1) {
          int64_t v166 = 0;
        }
        else {
          int64_t v166 = (char *)&v322 - (char *)&v308;
        }
        if (v165 == 1) {
          int64_t v164 = 0;
        }
        int64_t v167 = v164 + v165;
        int64_t v168 = (char *)&v311 - (char *)&v312;
        if (v167 == 1) {
          int64_t v168 = 0;
        }
        int64_t v169 = v168 + v167;
        int64_t v311 = v167;
        int64_t v312 = v169;
        unint64_t v170 = v322 + v135 + v166;
        unint64_t v308 = v170;
        int64_t v171 = (char *)&v308 - (char *)&v309;
        if (v170 == 1) {
          int64_t v171 = 0;
        }
        unint64_t v172 = v171 + v170;
        unint64_t v309 = v172;
        int64_t v173 = (char *)&v309 - (char *)&v326;
        if (v172 == 1) {
          int64_t v173 = 0;
        }
        uint64_t v326 = v173 + v172;
        uint64_t v174 = (char *)&v313 + v162;
        if (v162 == 1) {
          uint64_t v174 = 0;
        }
        uint64_t v175 = (char *)&v312 + v169;
        if (v169 == 1) {
          uint64_t v175 = 0;
        }
        if (v174 != v175)
        {
          do
          {
            if (v172 == 1) {
              int64_t v176 = 0;
            }
            else {
              int64_t v176 = (char *)&v309 - (char *)&v325;
            }
            unint64_t v177 = v176 + v172;
            int64_t v325 = v177;
            if (v177 == 1) {
              v178 = 0;
            }
            else {
              v178 = (char *)&v325 + v177;
            }
            if (v178) {
              uint64_t v179 = v178 - (char *)&v327;
            }
            else {
              uint64_t v179 = 1;
            }
            if (v179 == 1) {
              int64_t v180 = 0;
            }
            else {
              int64_t v180 = (char *)&v327 + v179;
            }
            *int64_t v180 = *v174;
            unint64_t v172 = ++v309;
            if (v313++) {
              uint64_t v174 = (char *)&v313 + v313;
            }
            else {
              uint64_t v174 = 0;
            }
            if (v312 == 1) {
              unint64_t v182 = 0;
            }
            else {
              unint64_t v182 = (char *)&v312 + v312;
            }
          }
          while (v174 != v182);
          char v137 = *(unsigned char *)(a1 + 8);
        }
        unint64_t v183 = v70 + v67;
        if ((v137 & 1) == 0)
        {
          if ((v183 & 0x8000000000000000) == 0)
          {
            *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = *(void *)(a1 + 8) & 1 | (2 * v183);
LABEL_331:
            int64_t v195 = (char *)&v302 - (char *)&v327;
            if (v302 == 1) {
              int64_t v195 = 0;
            }
            uint64_t v327 = v195 + v302;
            uint64_t v196 = -64;
            if (v318 == 1) {
              uint64_t v196 = 0;
            }
            uint64_t v326 = v196 + v318;
            if (v304 == 1) {
              unint64_t v193 = 0;
            }
            else {
              unint64_t v193 = (char *)&v304 + v304;
            }
            uint64_t v194 = &v326;
LABEL_339:
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::priv_copy<boost::interprocess::offset_ptr<char,long,unsigned long,0ul>,char *>(&v327, v194, v193);
            return a1;
          }
LABEL_517:
          __assert_rtn("priv_long_size", "string.hpp", 476, "sz <= mask");
        }
        if (v183 < 0x80)
        {
          *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = (2 * v183) | 1;
          goto LABEL_331;
        }
LABEL_518:
        __assert_rtn("priv_short_size", "string.hpp", 468, "sz <= mask");
      }
      int64_t v138 = (char *)&v322 - (char *)&v317;
      uint64_t v139 = -8;
      int64_t v140 = (char *)&v322 - (char *)&v315;
      if (v73 == 1) {
        int64_t v138 = 0;
      }
      uint64_t v141 = v70 + v73 + v138 + 1;
      uint64_t v317 = v141;
      if (v73 == 1) {
        int64_t v140 = 0;
      }
      if (v141 == 1) {
        uint64_t v139 = 0;
      }
      uint64_t v142 = v139 + v141;
      uint64_t v318 = v142;
      uint64_t v143 = v70 - v67 + v73 + v140 + 1;
      uint64_t v315 = v143;
      int64_t v144 = (char *)&v315 - (char *)&v316;
      if (!(v70 - v67 + v73 + v140)) {
        int64_t v144 = 0;
      }
      int64_t v145 = v144 + v143;
      int64_t v316 = v144 + v143;
      int64_t v146 = (char *)&v318 - (char *)&v314;
      int64_t v147 = (char *)&v318 - (char *)&v313;
      if (v142 == 1) {
        int64_t v146 = 0;
      }
      uint64_t v148 = v146 + v142;
      if (v142 == 1) {
        int64_t v147 = 0;
      }
      int64_t v149 = v147 + v142;
      int64_t v313 = v149;
      uint64_t v314 = v148;
      int64_t v150 = (char *)&v313 - (char *)&v326;
      if (v149 == 1) {
        int64_t v150 = 0;
      }
      uint64_t v326 = v150 + v149;
      uint64_t v151 = (char *)&v316 + v145;
      if (v145 == 1) {
        uint64_t v151 = 0;
      }
      uint64_t v152 = (char *)&v314 + v148;
      if (v148 == 1) {
        uint64_t v152 = 0;
      }
      if (v151 != v152)
      {
        do
        {
          if (v149 == 1) {
            int64_t v153 = 0;
          }
          else {
            int64_t v153 = (char *)&v313 - (char *)&v325;
          }
          int64_t v154 = v153 + v149;
          int64_t v325 = v154;
          if (v154 == 1) {
            v155 = 0;
          }
          else {
            v155 = (char *)&v325 + v154;
          }
          if (v155) {
            uint64_t v156 = v155 - (char *)&v327;
          }
          else {
            uint64_t v156 = 1;
          }
          if (v156 == 1) {
            int64_t v157 = 0;
          }
          else {
            int64_t v157 = (char *)&v327 + v156;
          }
          *int64_t v157 = *v151;
          int64_t v149 = ++v313;
          int64_t v158 = v316++;
          if (v158) {
            uint64_t v151 = (char *)&v316 + v158 + 1;
          }
          else {
            uint64_t v151 = 0;
          }
          if (v314 == 1) {
            unint64_t v159 = 0;
          }
          else {
            unint64_t v159 = (char *)&v314 + v314;
          }
        }
        while (v151 != v159);
        LOBYTE(v24) = *(unsigned char *)(a1 + 8);
      }
      unint64_t v160 = v70 + v67;
      if (v24)
      {
        if (v160 >= 0x80) {
          goto LABEL_518;
        }
        *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = (2 * v160) | 1;
      }
      else
      {
        if ((v160 & 0x8000000000000000) != 0) {
          goto LABEL_517;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = *(void *)(a1 + 8) & 1 | (2 * v160);
      }
      int64_t v184 = v304;
      int64_t v185 = (char *)&v304 - (char *)&v326;
      if (v304 == 1) {
        int64_t v185 = 0;
      }
      unint64_t v186 = v304 + v67 + v185;
      int64_t v187 = (char *)&v326 - (char *)&v327;
      if (v186 == 1) {
        int64_t v187 = 0;
      }
      uint64_t v188 = v187 + v186;
      uint64_t v326 = v186;
      uint64_t v327 = v188;
      if (v114 != -1)
      {
        if (v304 == 1) {
          uint64_t v189 = 0;
        }
        else {
          uint64_t v189 = (char *)&v304 + v304;
        }
        if (v188 == 1) {
          uint64_t v190 = 0;
        }
        else {
          uint64_t v190 = (char *)&v327 + v188;
        }
        memmove(v190, v189, v114 + 1);
        int64_t v184 = v304;
      }
      int64_t v191 = (char *)&v302 - (char *)&v327;
      if (v302 == 1) {
        int64_t v191 = 0;
      }
      uint64_t v327 = v191 + v302;
      int64_t v192 = (char *)&v301 - (char *)&v325;
      if (v301 == 1) {
        int64_t v192 = 0;
      }
      int64_t v325 = v192 + v301;
      if (v184 == 1) {
        unint64_t v193 = 0;
      }
      else {
        unint64_t v193 = (char *)&v304 + v184;
      }
      uint64_t v194 = &v325;
      goto LABEL_339;
    }
  }
  return a1;
}

uint64_t *boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::priv_copy<boost::interprocess::offset_ptr<char,long,unsigned long,0ul>,char *>(uint64_t *result, void *a2, char *a3)
{
  uint64_t v3 = (char *)result + *result;
  for (BOOL i = *result == 1; ; BOOL i = v7 == 0)
  {
    uint64_t v5 = i ? 0 : v3;
    uint64_t v6 = *a2 == 1 ? 0 : (char *)a2 + *a2;
    if (v5 == v6) {
      break;
    }
    *a3++ = *v5;
    uint64_t v7 = *result;
    uint64_t v8 = *result + 1;
    *double result = v8;
    uint64_t v3 = (char *)result + v8;
  }
  return result;
}

double boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::table(uint64_t a1, void *a2)
{
  *(unsigned char *)a1 = 0;
  if (*a2 == 1) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = (char *)a2 + *a2;
  }
  if (v2) {
    uint64_t v3 = v2 - v9;
  }
  else {
    uint64_t v3 = 1;
  }
  if (v3 == 1) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = &v9[v3];
  }
  uint64_t v5 = (uint64_t)&v4[-a1 - 8];
  if (!v4) {
    uint64_t v5 = 1;
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = v5;
  if (*a2 == 1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (char *)a2 + *a2;
  }
  uint64_t v7 = (uint64_t)&v6[-a1 - 16];
  if (!v6) {
    uint64_t v7 = 1;
  }
  *(void *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 24) = xmmword_1A42D3650;
  *(_DWORD *)(a1 + 40) = 1065353216;
  double result = 0.0;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x360], 8) = xmmword_1A42D3510;
  return result;
}

uint64_t pf::SceneTaxonomyLineParser::parseLine(pf::SceneTaxonomyLineParser *this, char *a2, unint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a3 > 1)
  {
    int v7 = a2[1];
    if (v7 == 58)
    {
      int v10 = *a2;
      uint64_t v8 = a2 + 2;
      int v9 = v10;
      if (v10 <= 100)
      {
        if (v9 == 99) {
          return 1;
        }
        if (v9 == 100)
        {
          return pf::SceneTaxonomyLineParser::parseDetectors(this, v8);
        }
      }
      else
      {
        switch(v9)
        {
          case 'e':
            return (uint64_t)pf::SceneTaxonomyLineParser::parseEdge(this, v8);
          case 'n':
            return pf::SceneTaxonomyLineParser::parseNode(this, v8);
          case 's':
            return pf::SceneTaxonomyLineParser::parseSHA(this, v8);
        }
      }
      uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      int v11 = 67109120;
      int v12 = v9;
      unint64_t v4 = MEMORY[0x1E4F14500];
      uint64_t v5 = "unexpected line type, first character: %c";
    }
    else
    {
      uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      int v11 = 67109120;
      int v12 = v7;
      unint64_t v4 = MEMORY[0x1E4F14500];
      uint64_t v5 = "unexpected second character: %c (expected ':')";
    }
    uint32_t v6 = 8;
    goto LABEL_30;
  }
  uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  if (result)
  {
    LOWORD(v11) = 0;
    unint64_t v4 = MEMORY[0x1E4F14500];
    uint64_t v5 = "short line: expected 2 characters or longer";
    uint32_t v6 = 2;
LABEL_30:
    _os_log_error_impl(&dword_1A41FE000, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v11, v6);
    return 0;
  }
  return result;
}

BOOL pf::SceneTaxonomyLineParser::parseSHA(pf::SceneTaxonomyLineParser *this, char *a2)
{
  uint64_t v5 = a2;
  int v2 = *((unsigned __int8 *)this + 48);
  if (*((unsigned char *)this + 48))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "only one SHA line allowed", buf, 2u);
    }
  }
  else
  {
    *((unsigned char *)this + 4_Block_object_dispose(&STACK[0x360], 8) = 1;
    uint64_t v3 = *((void *)this + 7);
    long long v7 = xmmword_1A42D34F0;
    unint64_t v8 = 0x80000001A42D4571 & 0x7FFFFFFFFFFFFFFFLL;
    int v9 = (char *)this + 96;
    *(void *)long long buf = &unk_1EF7A9CD8;
    int v10 = &v5;
    boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v3, "digest", 1uLL, 0, 1, (uint64_t)buf);
  }
  return v2 == 0;
}

uint64_t pf::SceneTaxonomyLineParser::parseNode(pf::SceneTaxonomyLineParser *this, char *__s)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 49))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "all node lines must come before any edges", buf, 2u);
    }
    return 0;
  }
  uint32_t v6 = strrchr(__s, 44);
  if (v6)
  {
    long long v7 = v6;
    uint64_t v149 = 0;
    uint64_t v150 = 0;
    int v148 = 0;
    double v146 = 0.0;
    double v147 = 0.0;
    double v144 = 0.0;
    double v145 = 0.0;
    double v142 = 0.0;
    double v143 = 0.0;
    int v8 = sscanf(__s, "%ld,%ld,%d,%lf,%lf,%lf,%lf,%lf,%lf", &v150, &v149, &v148, &v147, &v146, &v145, &v144, &v143, &v142);
    uint64_t v2 = 0;
    if (v8 != 9) {
      return v2;
    }
    int v9 = v7 + 1;
    int v10 = *((unsigned __int8 *)this + 16);
    BOOL v11 = v10 == 0;
    BOOL v12 = v10 != 0;
    if (v11) {
      char v13 = v148 != 0;
    }
    else {
      char v13 = v12;
    }
    pf::SceneTaxonomyNode::SceneTaxonomyNode((uint64_t)buf, v150, v149, v13, (void *)this + 15, v147, v144, v145, v146, v143, v142, v144);
    uint64_t v14 = *((void *)this + 20);
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)v166, v9, (void *)this + 12);
    boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::emplace_unique<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode&>((uint64_t)&v136, v14, (uint64_t)v166, (uint64_t)v166, (uint64_t)buf);
    long long v15 = (uint64_t **)boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)v166);
    if (v137)
    {
      if (v136 == 1) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = (char *)&v136 + v136;
      }
      *((void *)v16 + 13) = -104;
      if (v150 < 1) {
        goto LABEL_186;
      }
      uint64_t v17 = *((void *)this + 21);
      *(void *)&v166[0] = v17 + 16;
      *((void *)&v166[0] + 1) = 1;
      boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(v15);
      if (*((void *)&v166[0] + 1) == 1) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = (uint64_t *)((char *)v166 + *((void *)&v166[0] + 1) + 8);
      }
      *uint64_t v18 = v150;
      v18[1] = v16 - (char *)(v18 + 1) + 32;
      if (*((void *)&v166[0] + 1) == 1) {
        __assert_rtn("release", "implementation.hpp", 1955, "node_");
      }
      int64_t v19 = (char *)v166 + 8 - (char *)&v155 + *((void *)&v166[0] + 1);
      int64_t v155 = v19;
      uint64_t v156 = (char *)(v17 + 16);
      uint64_t v20 = -16;
      if (v19 == 1) {
        uint64_t v20 = 0;
      }
      uint64_t v21 = v20 + v19;
      uint64_t v157 = v21;
      int64_t v22 = (char *)&v157 - (char *)&v154;
      if (v21 == 1) {
        int64_t v22 = 0;
      }
      int64_t v23 = v22 + v21;
      int64_t v154 = v23;
      unint64_t v24 = v23 == 1 ? 0 : (unint64_t *)((char *)&v154 + v23);
      unint64_t v25 = *v24;
      boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::find_node_impl<unsigned long long,std::equal_to<unsigned long long>>(&v153, v17, *v24, (uint64_t *)v24);
      if (v153 == 1)
      {
        int64_t v26 = (char *)&v157 - (char *)&v151;
        if (v157 == 1) {
          int64_t v26 = 0;
        }
        int64_t v27 = v26 + v157;
        int64_t v151 = v27;
        uint64_t v157 = 1;
        int64_t v28 = (char *)&v151 - (char *)v158;
        if (v27 == 1) {
          int64_t v28 = 0;
        }
        int64_t v29 = v28 + v27;
        v158[0] = v29;
        int64_t v30 = (char *)v158 - ((char *)v166 + 8);
        if (v29 == 1) {
          int64_t v30 = 0;
        }
        *(void *)&v166[0] = v17 + 16;
        *((void *)&v166[0] + 1) = v30 + v29;
        unint64_t v31 = *(void *)(v17 + 32);
        unint64_t v32 = v31 + 1;
        if (*(void *)(v17 + 56) == 1)
        {
          unint64_t v33 = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::min_buckets_for_size(v32, *(float *)(v17 + 40));
          unint64_t v34 = *(void *)(v17 + 24) <= v33 ? v33 : *(void *)(v17 + 24);
          boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::create_buckets(v17, v34);
        }
        else if (*(void *)(v17 + 48) < v32)
        {
          unint64_t v42 = v31 + (v31 >> 1);
          if (v42 > v32) {
            unint64_t v32 = v42;
          }
          unint64_t v43 = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::min_buckets_for_size(v32, *(float *)(v17 + 40));
          if (v43 != *(void *)(v17 + 24))
          {
            if (*(void *)(v17 + 56) == 1) {
              __assert_rtn("rehash_impl", "implementation.hpp", 4578, "this->buckets_");
            }
            boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::create_buckets(v17, v43);
            boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v165, v17, *(void *)(v17 + 24));
            if (v165 == 1) {
              unint64_t v44 = 0;
            }
            else {
              unint64_t v44 = (char *)&v165 + v165;
            }
            uint64_t v45 = *(void *)v44;
            int64_t v46 = v44 - (char *)&v164;
            if (v45 == 1) {
              int64_t v46 = 0;
            }
            uint64_t v47 = v46 + v45;
            uint64_t v164 = v47;
            BOOL v48 = v47 == 1;
            int64_t v49 = (char *)&v164 + v47;
            if (v47 == 1) {
              int64_t v49 = 0;
            }
            if (*((void *)v49 + 2) != 1)
            {
              do
              {
                BOOL v11 = !v48;
                uint64_t v50 = 8;
                if (!v11) {
                  uint64_t v50 = 0;
                }
                uint64_t v51 = v50 + v47;
                uint64_t v163 = v51;
                if (v51 == 1) {
                  int64_t v52 = 0;
                }
                else {
                  int64_t v52 = (char *)&v163 + v51;
                }
                uint64_t v53 = *((void *)v52 + 2);
                uint64_t v54 = v52 + 16 - (char *)&v165;
                if (v53 == 1) {
                  uint64_t v54 = 0;
                }
                uint64_t v55 = v54 + v53;
                uint64_t v165 = v55;
                uint64_t v56 = 24;
                if (v55 == 1) {
                  uint64_t v56 = 0;
                }
                uint64_t v57 = v56 + v55;
                uint64_t v162 = v57;
                uint64_t v58 = (char *)&v165 + v55;
                if (v55 == 1)
                {
                  uint64_t v58 = 0;
                  uint64_t v59 = 0;
                }
                else
                {
                  uint64_t v59 = 40;
                }
                if (v57 == 1) {
                  uint64_t v60 = 0;
                }
                else {
                  uint64_t v60 = (uint64_t *)((char *)&v162 + v57);
                }
                uint64_t v61 = *v60 % *(void *)(v17 + 24);
                *((void *)v58 + 3) = v61 & 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v62 = v59 + v55;
                int64_t v63 = (char *)&v160 + v62;
                if (v62 == 1) {
                  int64_t v63 = 0;
                }
                uint64_t v64 = *((void *)v63 + 2);
                uint64_t v65 = v63 + 16 - (char *)&v161;
                if (v64 == 1) {
                  uint64_t v65 = 0;
                }
                uint64_t v66 = v65 + v64;
                if (v66 != 1)
                {
                  unint64_t v67 = (char *)&v161 + v66;
                  if (*(uint64_t *)((char *)&v161 + v66 + 24) < 0)
                  {
                    do
                    {
                      uint64_t v68 = v66 - 32;
                      if (v66 == 33) {
                        unint64_t v69 = 0;
                      }
                      else {
                        unint64_t v69 = v67;
                      }
                      *((void *)v69 + 3) = v61 | 0x8000000000000000;
                      if (v66 == 33) {
                        uint64_t v70 = 0;
                      }
                      else {
                        uint64_t v70 = 40;
                      }
                      uint64_t v62 = v70 + v68;
                      uint64_t v71 = (char *)&v160 + v62;
                      if (v62 == 1) {
                        uint64_t v71 = 0;
                      }
                      uint64_t v72 = *((void *)v71 + 2);
                      uint64_t v73 = v71 + 16 - (char *)&v161;
                      if (v72 == 1) {
                        uint64_t v73 = 0;
                      }
                      uint64_t v66 = v73 + v72;
                      if (v66 == 1) {
                        break;
                      }
                      unint64_t v67 = (char *)&v161 + v66;
                    }
                    while (*(uint64_t *)((char *)&v161 + v66 + 24) < 0);
                    uint64_t v165 = v68;
                  }
                }
                int64_t v160 = v62;
                boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v161, v17, v61);
                uint64_t v74 = (char *)&v161 + v161;
                if (v161 == 1) {
                  uint64_t v74 = 0;
                }
                if (*(void *)v74 == 1)
                {
                  unint64_t v75 = (char *)((char *)&v164 - v74);
                  if (v164 == 1) {
                    unint64_t v75 = 0;
                  }
                  *(void *)uint64_t v74 = &v75[v164];
                  uint64_t v76 = 8;
                  if (v165 == 1) {
                    uint64_t v76 = 0;
                  }
                  uint64_t v47 = v76 + v165;
                  uint64_t v164 = v76 + v165;
                  unint64_t v77 = (char *)&v164 + v76 + v165;
                }
                else
                {
                  if (v165 == 1) {
                    int64_t v78 = 0;
                  }
                  else {
                    int64_t v78 = (char *)&v165 + v165;
                  }
                  uint64_t v81 = *((void *)v78 + 2);
                  unint64_t v79 = v78 + 16;
                  uint64_t v80 = v81;
                  int64_t v82 = v79 - (char *)&v159;
                  if (v81 == 1) {
                    int64_t v82 = 0;
                  }
                  uint64_t v83 = v82 + v80;
                  uint64_t v159 = v83;
                  if (*(void *)v74 == 1) {
                    unint64_t v84 = 0;
                  }
                  else {
                    unint64_t v84 = &v74[*(void *)v74];
                  }
                  uint64_t v85 = *((void *)v84 + 2);
                  uint64_t v86 = v84 + 16 - v79;
                  if (v85 == 1) {
                    uint64_t v86 = 0;
                  }
                  *(void *)unint64_t v79 = v86 + v85;
                  uint64_t v47 = v164;
                  unint64_t v77 = (char *)&v164 + v164;
                  if (v164 == 1) {
                    uint64_t v87 = 0;
                  }
                  else {
                    uint64_t v87 = (char *)&v164 + v164;
                  }
                  uint64_t v88 = *(void *)v74;
                  uint64_t v89 = &v74[*(void *)v74];
                  if (v88 == 1) {
                    uint64_t v89 = 0;
                  }
                  uint64_t v92 = *((void *)v87 + 2);
                  uint64_t v90 = v87 + 16;
                  uint64_t v91 = v92;
                  int64_t v93 = (char *)(v90 - (v89 + 16));
                  if (v92 == 1) {
                    int64_t v93 = 0;
                  }
                  *((void *)v89 + 2) = &v93[v91];
                  int64_t v94 = (char *)((char *)&v159 - v90);
                  if (v83 == 1) {
                    int64_t v94 = 0;
                  }
                  *(void *)uint64_t v90 = &v94[v83];
                }
                BOOL v48 = v47 == 1;
                if (v47 == 1) {
                  unint64_t v77 = 0;
                }
              }
              while (*((void *)v77 + 2) != 1);
            }
          }
        }
        int64_t v95 = (char *)v166 + 8 - (char *)&v160;
        if (*((void *)&v166[0] + 1) == 1) {
          int64_t v95 = 0;
        }
        int64_t v160 = v95 + *((void *)&v166[0] + 1);
        *((void *)&v166[0] + 1) = 1;
        uint64_t v96 = v25 % *(void *)(v17 + 24);
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v164, v17, v96);
        int64_t v97 = v160;
        int64_t v98 = (char *)&v160 + v160;
        if (v160 == 1) {
          int64_t v98 = 0;
        }
        *((void *)v98 + 3) = v96 & 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v99 = v164 == 1 ? 0 : (char *)&v164 + v164;
        if (*(void *)v99 == 1)
        {
          boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v165, v17, *(void *)(v17 + 24));
          if (v165 == 1) {
            uint64_t v100 = 0;
          }
          else {
            uint64_t v100 = (char *)&v165 + v165;
          }
          uint64_t v101 = *(void *)v100;
          int64_t v102 = v100 - (char *)&v163;
          if (v101 == 1) {
            int64_t v102 = 0;
          }
          uint64_t v103 = v102 + v101;
          uint64_t v163 = v103;
          uint64_t v104 = (char *)&v163 + v103;
          if (v103 == 1) {
            uint64_t v104 = 0;
          }
          if (*((void *)v104 + 2) != 1)
          {
            uint64_t v105 = 16;
            if (v103 == 1) {
              uint64_t v105 = 0;
            }
            uint64_t v106 = v105 + v103;
            uint64_t v107 = (char *)&v161 + v106;
            if (v106 == 1) {
              uint64_t v107 = 0;
            }
            uint64_t v108 = *((void *)v107 + 2);
            uint64_t v161 = v106;
            uint64_t v109 = v107 + 16 - (char *)&v162;
            if (v108 == 1) {
              uint64_t v109 = 0;
            }
            uint64_t v162 = v109 + v108;
            int64_t v110 = (char *)&v162 + v109 + v108;
            if (v109 + v108 == 1) {
              int64_t v110 = 0;
            }
            boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v165, v17, *((void *)v110 + 3) & 0x7FFFFFFFFFFFFFFFLL);
            if (v165 == 1) {
              int64_t v111 = 0;
            }
            else {
              int64_t v111 = (char *)&v165 + v165;
            }
            uint64_t v112 = (char *)((char *)&v160 - v111);
            if (v160 == 1) {
              uint64_t v112 = 0;
            }
            *(void *)int64_t v111 = &v112[v160];
            uint64_t v103 = v163;
          }
          if (v164 == 1) {
            unint64_t v113 = 0;
          }
          else {
            unint64_t v113 = (char *)&v164 + v164;
          }
          uint64_t v114 = (char *)((char *)&v163 - v113);
          if (v103 == 1) {
            uint64_t v114 = 0;
          }
          *(void *)unint64_t v113 = &v114[v103];
          int64_t v115 = (char *)&v163 + v163;
          if (v163 == 1) {
            int64_t v115 = 0;
          }
          int64_t v97 = v160;
          uint64_t v116 = (char *)&v160 + v160;
          uint64_t v119 = *((void *)v115 + 2);
          int64_t v117 = v115 + 16;
          uint64_t v118 = v119;
          uint64_t v120 = (char *)((char *)&v160 - v117);
          if (v160 == 1)
          {
            uint64_t v116 = 0;
            uint64_t v120 = 0;
          }
          int64_t v121 = v117 - (v116 + 16);
          if (v118 == 1) {
            int64_t v121 = 0;
          }
          *((void *)v116 + 2) = v121 + v118;
          *(void *)int64_t v117 = &v120[v97];
        }
        else
        {
          uint64_t v122 = &v99[*(void *)v99];
          uint64_t v123 = *((void *)v122 + 2);
          uint64_t v124 = v122 - v98;
          if (v123 == 1) {
            uint64_t v124 = 0;
          }
          *((void *)v98 + 2) = v124 + v123;
          uint64_t v125 = *(void *)v99;
          int64_t v126 = &v99[*(void *)v99];
          if (v125 == 1) {
            int64_t v127 = 0;
          }
          else {
            int64_t v127 = v126;
          }
          int64_t v128 = (char *)((char *)&v160 - (v127 + 16));
          if (v97 == 1) {
            int64_t v128 = 0;
          }
          *((void *)v127 + 2) = &v128[v97];
        }
        ++*(void *)(v17 + 32);
        uint64_t v129 = -24;
        if (v97 == 1) {
          uint64_t v129 = 0;
        }
        uint64_t v130 = v129 + v97;
        uint64_t v163 = v130;
        if (*((void *)&v166[0] + 1) != 1)
        {
          uint64_t v165 = (char *)v166 + 8 - (char *)&v165 + *((void *)&v166[0] + 1);
          std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](*(char **)&v166[0], &v165);
          uint64_t v130 = v163;
        }
        int64_t v131 = (char *)&v163 - &v152;
        if (v130 == 1) {
          int64_t v131 = 0;
        }
        uint64_t v132 = v131 + v130;
        int64_t v133 = &v152 - (char *)&v134;
        if (v132 == 1) {
          int64_t v133 = 0;
        }
        int64_t v134 = v133 + v132;
        int v37 = 1;
        unsigned __int8 v135 = 1;
      }
      else
      {
        int v37 = 0;
        uint64_t v38 = v153 + (char *)&v153 - (char *)&v165;
        uint64_t v165 = v38;
        uint64_t v39 = -8;
        if (v38 == 1) {
          uint64_t v39 = 0;
        }
        uint64_t v40 = v39 + v38;
        int64_t v41 = (char *)v166 - (char *)&v134;
        if (v40 == 1) {
          int64_t v41 = 0;
        }
        int64_t v134 = v41 + v40;
        unsigned __int8 v135 = 0;
      }
      if (v157 != 1)
      {
        *(void *)&v166[0] = v157 - 96;
        std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v156, (uint64_t *)v166);
        int v37 = v135;
      }
      if (v37)
      {
LABEL_186:
        uint64_t v2 = 1;
LABEL_189:
        boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)&v141);
        boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)&v140);
        boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)&v139);
        return v2;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_188:
        uint64_t v2 = 0;
        goto LABEL_189;
      }
      LODWORD(v166[0]) = 136446210;
      *(void *)((char *)v166 + 4) = v9;
      int64_t v35 = MEMORY[0x1E4F14500];
      int64_t v36 = "scene already in the index: %{public}s";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_188;
      }
      LODWORD(v166[0]) = 136446210;
      *(void *)((char *)v166 + 4) = v9;
      int64_t v35 = MEMORY[0x1E4F14500];
      int64_t v36 = "name already in the index: %{public}s";
    }
    _os_log_error_impl(&dword_1A41FE000, v35, OS_LOG_TYPE_ERROR, v36, (uint8_t *)v166, 0xCu);
    goto LABEL_188;
  }
  return 0;
}

void sub_1A4287CB4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    uint64_t v5 = *(void *)(v4 - 160);
    uint64_t v6 = 40;
    BOOL v7 = v5 == 1;
    if (v5 == 1) {
      uint64_t v6 = 0;
    }
    uint64_t v8 = v6 + v5;
    *(void *)(v4 - 200) = v8;
    uint64_t v9 = v5 + v4 - 160;
    if (v7) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v9;
    }
    if (v8 == 1) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v8 + v4 - 200;
    }
    uint64_t v12 = *(void *)(v11 + 16);
    uint64_t v13 = v11 + 16 - (v4 - 184);
    if (v12 == 1) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13 + v12;
    *(void *)(v4 - 184) = v14;
    for (*(void *)(v10 + 16) = 1; v14 != 1; *(void *)(v4 - 184) = v14)
    {
      uint64_t v15 = v14 + v4 - 184;
      if (v14 == -31) {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(void *)(v15 + 16);
      *(void *)(v4 - 216) = v14 + 32;
      uint64_t v17 = v15 + 16 - (v4 - 208);
      if (v16 == 1) {
        uint64_t v17 = 0;
      }
      *(void *)(v4 - 20_Block_object_dispose(&STACK[0x360], 8) = v17 + v16;
      uint64_t v18 = v14 + 40;
      *(void *)(v4 - 224) = v18;
      if (v18 == 1) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = -72;
      }
      *(void *)(v4 - 152) = v19 + v18;
      std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v3, (uint64_t *)(v4 - 152));
      --*(void *)(v2 + 32);
      uint64_t v20 = *(void *)(v4 - 208);
      if (v20 == 1) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = -24;
      }
      uint64_t v14 = v21 + v20;
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1A4287DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  __cxa_end_catch();
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor(v27 - 144);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor(v27 - 248);
  pf::SceneTaxonomyNode::~SceneTaxonomyNode((pf::SceneTaxonomyNode *)&a27);
  _Unwind_Resume(a1);
}

char *pf::SceneTaxonomyLineParser::parseEdge(pf::SceneTaxonomyLineParser *this, char *__s)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 49)) {
    *((unsigned char *)this + 49) = 1;
  }
  uint64_t result = strrchr(__s, 44);
  if (result)
  {
    *uint64_t result = 0;
    uint64_t v5 = result + 1;
    uint64_t v6 = *((void *)this + 20);
    uint64_t v7 = *((void *)this + 16);
    if (v7) {
      uint64_t v8 = v7 - (void)&v14;
    }
    else {
      uint64_t v8 = 1;
    }
    uint64_t v14 = v8;
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)buf, __s, &v14);
    boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::find((char *)&v15, v6, (uint64_t)buf);
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)buf);
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = *((void *)this + 16);
    if (v10) {
      uint64_t v11 = v10 - (void)&v13;
    }
    else {
      uint64_t v11 = 1;
    }
    uint64_t v13 = v11;
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)buf, v5, &v13);
    boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::find((char *)&v14, v9, (uint64_t)buf);
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)buf);
    if (v15 == 1) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = &buf[v15 - 8];
    }
    if (v12 && v14 != 1 && (uint64_t *)((char *)&v14 + v14))
    {
      pf::SceneTaxonomyNode::addChild((pf::SceneTaxonomyNode *)(v12 + 32), (pf::SceneTaxonomyNode *)((char *)&v14 + v14 + 32));
      return (char *)1;
    }
    else
    {
      uint64_t result = (char *)os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)long long buf = 136315394;
        uint64_t v17 = __s;
        __int16 v18 = 2080;
        uint64_t v19 = v5;
        _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "failed to find edge in name map: %s -> %s", buf, 0x16u);
        return 0;
      }
    }
  }
  return result;
}

void sub_1A4287FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pf::SceneTaxonomyLineParser::parseDetectors(pf::SceneTaxonomyLineParser *this, char *__s)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 49)) {
    *((unsigned char *)this + 49) = 1;
  }
  uint64_t result = (uint64_t)strrchr(__s, 58);
  if (result)
  {
    *(unsigned char *)uint64_t result = 0;
    uint64_t v5 = (char *)(result + 1);
    uint64_t v24 = 1;
    uint64_t v6 = *((void *)this + 20);
    uint64_t v7 = *((void *)this + 16);
    if (v7) {
      uint64_t v8 = v7 - (void)&v25;
    }
    else {
      uint64_t v8 = 1;
    }
    unint64_t v25 = (char *)v8;
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)buf, __s, &v25);
    boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::find((char *)&v23, v6, (uint64_t)buf);
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)buf);
    if (v23 == 1) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = (char *)&v23 + v23;
    }
    if (v9)
    {
      __lasts = 0;
      uint64_t v10 = strtok_r(v5, ",", &__lasts);
      if (!v10) {
        return 1;
      }
      uint64_t v11 = v10;
      uint64_t v12 = (uint64_t)(v9 + 240);
      while (1)
      {
        uint64_t v13 = *((void *)this + 20);
        uint64_t v14 = *((void *)this + 16);
        uint64_t v15 = (char *)(v14 ? v14 - (void)&v25 : 1);
        unint64_t v25 = v15;
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)buf, v11, &v25);
        boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::find((char *)&v21, v13, (uint64_t)buf);
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)buf);
        uint64_t v16 = v21 == 1 ? 0 : (char *)&v21 + v21;
        uint64_t v17 = v24 == 1 ? 0 : (char *)&v24 + v24;
        if (v16 == v17) {
          break;
        }
        unint64_t v25 = v16 + 32;
        boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::emplace_unique<pf::SceneTaxonomyNode*>((uint64_t)buf, v12, &v25);
        uint64_t v11 = strtok_r(0, ",", &__lasts);
        if (!v11) {
          return 1;
        }
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v27 = __s;
      __int16 v28 = 2082;
      int64_t v29 = v11;
      __int16 v18 = MEMORY[0x1E4F14500];
      uint64_t v19 = "failed to find detector for key '%{public}s' in name map: %{public}s";
      uint32_t v20 = 22;
    }
    else
    {
      uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v27 = __s;
      __int16 v18 = MEMORY[0x1E4F14500];
      uint64_t v19 = "failed to find detector key in name map: %{public}s";
      uint32_t v20 = 12;
    }
    _os_log_error_impl(&dword_1A41FE000, v18, OS_LOG_TYPE_ERROR, v19, buf, v20);
    return 0;
  }
  return result;
}

void sub_1A4288290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::find(char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()(a3);
  unint64_t v7 = 265 * ((~v6 + (v6 << 21)) ^ ((~v6 + (v6 << 21)) >> 24));
  uint64_t result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::find_node_impl<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(&v10, a2, 2147483649u * ((21 * (v7 ^ (v7 >> 14))) ^ ((21 * (v7 ^ (v7 >> 14))) >> 28)), a3);
  uint64_t v9 = (char *)((char *)&v10 - a1);
  if (v10 == 1) {
    uint64_t v9 = 0;
  }
  *(void *)a1 = &v9[v10];
  return result;
}

double boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(uint64_t **a1)
{
  double v1 = a1 + 1;
  if (a1[1] != (uint64_t *)1) {
    __assert_rtn("create_node", "implementation.hpp", 1984, "!node_");
  }
  uint64_t v3 = **a1;
  if (v3 == 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (uint64_t)*a1 + v3;
  }
  uint64_t v5 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v4, 0x20uLL);
  unint64_t v6 = (unsigned char *)(v10 - (unsigned char *)v1);
  if (v5 - v10 == 1) {
    unint64_t v6 = 0;
  }
  unint64_t v7 = (uint64_t *)&v6[v5 - v10];
  a1[1] = v7;
  if (v7 == (uint64_t *)1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (char *)v1 + (void)v7;
  }
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *(void *)&double result = 1;
  *((_OWORD *)v8 + 1) = xmmword_1A42D3640;
  return result;
}

uint64_t boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 != 1)
  {
    uint64_t v4 = *(char **)a1;
    uint64_t v6 = v2 - (void)&v6 + v3;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v4, &v6);
  }
  return a1;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::min_buckets_for_size(unint64_t a1, float a2)
{
  if (a2 < 0.001) {
    __assert_rtn("min_buckets_for_size", "implementation.hpp", 3096, "mlf_ >= minimum_max_load_factor");
  }
  double v2 = floor((double)a1 / a2) + 1.0;
  if (v2 >= 1.84467441e19) {
    unint64_t v3 = -1;
  }
  else {
    unint64_t v3 = (unint64_t)v2;
  }
  unint64_t v4 = 38;
  uint64_t v5 = (char *)&boost::unordered::detail::prime_list_template<unsigned long>::value;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[8 * (v4 >> 1)];
    unint64_t v9 = *(void *)v7;
    uint64_t v8 = v7 + 8;
    v4 += ~(v4 >> 1);
    if (v9 < v3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = (char *)&unk_1A42D4378;
  if (v5 != "N5boost12interprocess9ipcdetail8CtorArgNINS_9container12basic_stringIcNSt3__111char_traitsIcEENS0_9allocato"
             "rIcNS0_15segment_managerIcNS0_15rbtree_best_fitINS0_17null_mutex_familyENS0_10offset_ptrIvlmLm0EEELm0EEENS0"
             "_10iset_indexEEEEEEELb0EJRPcRSH_EEE")
    uint64_t v10 = v5;
  return *(void *)v10;
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::create_buckets(uint64_t a1, unint64_t a2)
{
  uint64_t v37 = 1;
  uint64_t v5 = (char *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 == 1)
  {
    unint64_t v34 = (uint64_t *)(a1 + 16);
    uint64_t v35 = 1;
    boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(&v34);
    double result = boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v33, (void *)(a1 + 8), a2 + 1);
    int64_t v7 = (char *)&v33 - v5;
    if (v33 == (char *)1) {
      int64_t v7 = 0;
    }
    uint64_t v8 = &v33[v7];
    *(void *)uint64_t v5 = &v33[v7];
    if (v35 == 1) {
      __assert_rtn("release", "implementation.hpp", 1955, "node_");
    }
    uint64_t v9 = v35 + (char *)&v35 - (char *)&v33;
    int64_t v10 = (char *)&v33 - (char *)&v37;
    if (v9 == 1) {
      int64_t v10 = 0;
    }
    uint64_t v37 = v10 + v9;
  }
  else
  {
    uint64_t v11 = v4 + v5 - (char *)&v36 + 8 * *(void *)(a1 + 24);
    uint64_t v36 = v11;
    int64_t v12 = (char *)&v36 - (char *)&v34;
    if (v11 == 1) {
      int64_t v12 = 0;
    }
    uint64_t v13 = (uint64_t *)(v12 + v11);
    unint64_t v34 = v13;
    if (v13 == (uint64_t *)1) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = (char *)&v34 + (void)v13;
    }
    uint64_t v15 = *(void *)v14;
    int64_t v16 = v14 - (char *)&v37;
    if (v15 == 1) {
      int64_t v16 = 0;
    }
    uint64_t v37 = v16 + v15;
    boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v34, (void *)(a1 + 8), a2 + 1);
    double result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::destroy_buckets((void *)a1);
    uint64_t v17 = (char *)((char *)&v34 - v5);
    if (v34 == (uint64_t *)1) {
      uint64_t v17 = 0;
    }
    uint64_t v8 = (char *)v34 + (void)v17;
    *(void *)(a1 + 56) = (char *)v34 + (void)v17;
  }
  *(void *)(a1 + 24) = a2;
  if (v8 == (char *)1)
  {
    unint64_t v18 = 0;
  }
  else
  {
    double v19 = (double)a2 * *(float *)(a1 + 40);
    unint64_t v18 = vcvtpd_u64_f64(v19);
    if (ceil(v19) >= 1.84467441e19) {
      unint64_t v18 = -1;
    }
  }
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x360], 8) = v18;
  int64_t v20 = v5 - &v32;
  int64_t v21 = &v32 - (char *)&v34;
  int64_t v22 = v5 - (char *)&v33;
  if (v8 == (char *)1) {
    int64_t v20 = 0;
  }
  uint64_t v23 = &v8[8 * a2 + v20];
  if (v8 == (char *)1) {
    int64_t v22 = 0;
  }
  if (v23 == (char *)1) {
    int64_t v21 = 0;
  }
  uint64_t v24 = (uint64_t *)&v23[v21];
  unint64_t v25 = &v8[v22];
  unint64_t v33 = v25;
  unint64_t v34 = v24;
  if (v25 == (char *)1) {
    int64_t v26 = 0;
  }
  else {
    int64_t v26 = (char *)&v33 + (void)v25;
  }
  if (v24 == (uint64_t *)1) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = (char *)&v34 + (void)v24;
  }
  while (v26 != v27)
  {
    *(void *)int64_t v26 = 1;
    __int16 v28 = v33 + 8;
    unint64_t v33 = v28;
    if (v28 == (char *)1) {
      int64_t v26 = 0;
    }
    else {
      int64_t v26 = (char *)&v33 + (void)v28;
    }
    if (v34 == (uint64_t *)1) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = (char *)&v34 + (void)v34;
    }
  }
  int64_t v29 = (char *)&v37 - v31;
  if (v37 == 1) {
    int64_t v29 = 0;
  }
  uint64_t v30 = (unsigned char *)(v31 - v27);
  if (v29 + v37 == 1) {
    uint64_t v30 = 0;
  }
  *(void *)int64_t v26 = &v30[v29 + v37];
  return result;
}

void sub_1A4288788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::interprocess::ipcdetail::CtorArgN<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,char *&,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::~CtorArgN()
{
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,char *&,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::construct_n(uint64_t result, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = a2 + 32;
      double result = boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(a2, **(char ***)(v7 + 40), *(void **)(v7 + 32));
      unint64_t v9 = *a4 + 1;
      *a4 = v9;
      a2 = v8;
    }
    while (v9 < a3);
  }
  return result;
}

void pf::SceneTaxonomyLineParser::~SceneTaxonomyLineParser(pf::SceneTaxonomyLineParser *this)
{
  *(void *)this = &unk_1EF7A9958;
  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::~basic_managed_heap_memory((uint64_t *)this + 16);
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)this + 8);
  *((void *)this + 7) = 0;

  JUMPOUT(0x1A6259210);
}

{
  *(void *)this = &unk_1EF7A9958;
  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::~basic_managed_heap_memory((uint64_t *)this + 16);
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)this + 8);
  *((void *)this + 7) = 0;
}

pf::SceneTaxonomyLineParser *pf::SceneTaxonomyLineParser::SceneTaxonomyLineParser(pf::SceneTaxonomyLineParser *this, const char *a2, const char *a3, size_t a4, char a5)
{
  *(void *)this = &unk_1EF7A9958;
  *((void *)this + 1) = a2;
  *((unsigned char *)this + 16) = a5;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = a4;
  *((void *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  uint64_t v8 = (uint64_t *)((char *)this + 56);
  LOWORD(v21) = 420;
  boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_mapped_file((uint64_t)this + 56, a2, 0x300000uLL, (mode_t *)&v21);
  uint64_t v9 = *((void *)this + 7);
  uint64_t v10 = v9 - ((void)this + 96);
  uint64_t v11 = v9 - ((void)this + 112);
  uint64_t v12 = v9 - ((void)this + 120);
  BOOL v13 = v9 == 0;
  if (v9)
  {
    uint64_t v14 = v9 - ((void)this + 104);
  }
  else
  {
    uint64_t v10 = 1;
    uint64_t v14 = 1;
  }
  *((void *)this + 12) = v10;
  *((void *)this + 13) = v14;
  if (v13) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v11;
  }
  if (v13) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = v12;
  }
  *((void *)this + 14) = v15;
  *((void *)this + 15) = v16;
  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_heap_memory((uint64_t)this + 128);
  uint64_t v17 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(*v8, a4 + 8);
  *((void *)this + 3) = v17;
  memcpy(v17, a3, a4);
  *((void *)this + 5) = *((void *)this + 3) + a4;
  uint64_t v18 = *((void *)this + 7);
  long long v22 = xmmword_1A42D3500;
  unint64_t v23 = 0x80000001A42D3D88 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v24 = (char *)this + 104;
  int64_t v21 = &unk_1EF7A9D98;
  *((void *)this + 20) = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v18, "names", 1uLL, 0, 1, (uint64_t)&v21);
  uint64_t v19 = *((void *)this + 7);
  long long v22 = xmmword_1A42D3500;
  unint64_t v23 = 0x80000001A42D413ALL & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v24 = (char *)this + 112;
  int64_t v21 = &unk_1EF7A92F8;
  *((void *)this + 21) = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v19, "scenes", 1uLL, 0, 1, (uint64_t)&v21);
  return this;
}

void sub_1A4288AB4(_Unwind_Exception *a1)
{
  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::~basic_managed_heap_memory(v2);
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)(v1 + 64));
  *(void *)(v1 + 56) = 0;
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_mapped_file(uint64_t a1, const char *a2, unint64_t a3, mode_t *a4)
{
  unint64_t v6 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 29) = 0;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::priv_open_or_create<char const*,boost::interprocess::ipcdetail::create_open_func<boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>>>((char **)(a1 + 8), 2, &v6, a3, 2, a4, (uint64_t *)a1, 2);
  return a1;
}

void sub_1A4288B50(_Unwind_Exception *a1)
{
  boost::interprocess::mapped_region::~mapped_region(v2);
  void *v1 = 0;
  _Unwind_Resume(a1);
}

void boost::interprocess::ipcdetail::CtorArgN<boost::unordered::unordered_map<unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>,boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::~CtorArgN()
{
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::unordered::unordered_map<unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>,boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::construct_n(uint64_t result, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    do
    {
      uint64_t v4 = *(uint64_t **)(result + 32);
      uint64_t v5 = *v4;
      unint64_t v6 = (char *)v4 + *v4;
      if (v5 == 1) {
        unint64_t v6 = 0;
      }
      if (v6) {
        uint64_t v7 = v6 - v21;
      }
      else {
        uint64_t v7 = 1;
      }
      *(unsigned char *)a2 = 0;
      if (v7 == 1) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = &v21[v7];
      }
      uint64_t v9 = (uint64_t)&v8[-a2 - 16];
      BOOL v10 = v8 == 0;
      if (v8) {
        uint64_t v11 = v8 - v22;
      }
      else {
        uint64_t v11 = 1;
      }
      if (v10) {
        uint64_t v9 = 1;
      }
      if (v11 == 1) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = &v22[v11];
      }
      if (v12) {
        uint64_t v13 = (uint64_t)&v12[-a2 - 8];
      }
      else {
        uint64_t v13 = 1;
      }
      *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = v13;
      *(void *)(a2 + 16) = v9;
      uint64_t v14 = (char *)&boost::unordered::detail::prime_list_template<unsigned long>::value;
      unint64_t v15 = 38;
      do
      {
        unint64_t v16 = v15 >> 1;
        uint64_t v17 = (unint64_t *)&v14[8 * (v15 >> 1)];
        unint64_t v19 = *v17;
        uint64_t v18 = (char *)(v17 + 1);
        v15 += ~(v15 >> 1);
        if (v19 < 0xB) {
          uint64_t v14 = v18;
        }
        else {
          unint64_t v15 = v16;
        }
      }
      while (v15);
      if (v14 == "N5boost12interprocess9ipcdetail8CtorArgNINS_9container12basic_stringIcNSt3__111char_traitsIcEENS0_9all"
                  "ocatorIcNS0_15segment_managerIcNS0_15rbtree_best_fitINS0_17null_mutex_familyENS0_10offset_ptrIvlmLm0EE"
                  "ELm0EEENS0_10iset_indexEEEEEEELb0EJRPcRSH_EEE")
        uint64_t v14 = (char *)&unk_1A42D4378;
      *(void *)(a2 + 24) = *(void *)v14;
      *(void *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 40) = 1065353216;
      *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x360], 8) = xmmword_1A42D3510;
      a2 += 64;
      unint64_t v20 = *a4 + 1;
      *a4 = v20;
    }
    while (v20 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::CtorArgN<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::~CtorArgN()
{
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::construct_n(uint64_t result, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    uint64_t v4 = -16 - a2;
    do
    {
      uint64_t v5 = *(uint64_t **)(result + 32);
      uint64_t v6 = *v5;
      uint64_t v7 = (char *)v5 + *v5;
      if (v6 == 1) {
        uint64_t v7 = 0;
      }
      if (v7) {
        uint64_t v8 = v7 - v16;
      }
      else {
        uint64_t v8 = 1;
      }
      *(unsigned char *)a2 = 0;
      if (v8 == 1) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = &v16[v8];
      }
      uint64_t v10 = v9 - v17;
      BOOL v11 = v9 == 0;
      if (!v9) {
        uint64_t v10 = 1;
      }
      uint64_t v12 = (uint64_t)&v9[v4];
      if (v11) {
        uint64_t v12 = 1;
      }
      if (v10 == 1) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = &v17[v10];
      }
      if (v13) {
        uint64_t v14 = (uint64_t)&v13[v4 + 8];
      }
      else {
        uint64_t v14 = 1;
      }
      *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = v14;
      *(void *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 24) = xmmword_1A42D3650;
      *(_DWORD *)(a2 + 40) = 1065353216;
      *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x360], 8) = xmmword_1A42D3510;
      unint64_t v15 = *a4 + 1;
      *a4 = v15;
      v4 -= 64;
      a2 += 64;
    }
    while (v15 < a3);
  }
  return result;
}

void sub_1A4289FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

__CFString *PFStoryOverallDurationKindLocalizationKey(unint64_t a1)
{
  if (a1 > 5) {
    return @"??";
  }
  else {
    return off_1E5B2E5F0[a1];
  }
}

__CFString *PFStoryOverallDurationKindDescription(unint64_t a1)
{
  if (a1 > 5) {
    return @"??";
  }
  else {
    return off_1E5B2E5F0[a1];
  }
}

id PFStoryOverallDurationInfoDescription(uint64_t a1)
{
  double v2 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithString:@"{ "];
  if (*(void *)a1 > 5uLL) {
    unint64_t v3 = @"??";
  }
  else {
    unint64_t v3 = off_1E5B2E5F0[*(void *)a1];
  }
  uint64_t v4 = v3;
  [v2 appendString:v4];

  if (*(void *)a1 == 2)
  {
    long long v5 = *(_OWORD *)(a1 + 24);
    long long v6 = *(_OWORD *)(a1 + 56);
    void v10[2] = *(_OWORD *)(a1 + 40);
    v10[3] = v6;
    uint64_t v11 = *(void *)(a1 + 72);
    v10[0] = *(_OWORD *)(a1 + 8);
    v10[1] = v5;
    uint64_t v7 = PFStoryDurationInfoDescription((uint64_t)v10);
    [v2 appendFormat:@" %@", v7];
  }
  [v2 appendString:@" }"];
  uint64_t v8 = (void *)[v2 copy];

  return v8;
}

__CFString *PFBitmaskDescription(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v18 = 0;
    unint64_t v19 = &v18;
    uint64_t v20 = 0x2020000000;
    uint64_t v21 = 0;
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __PFBitmaskDescription_block_invoke;
    void v13[3] = &unk_1E5B2E628;
    uint64_t v17 = a1;
    id v8 = v7;
    id v14 = v8;
    id v15 = v6;
    unint64_t v16 = &v18;
    [v5 enumerateObjectsUsingBlock:v13];
    uint64_t v9 = a1 & ~v19[3];
    if (v9)
    {
      uint64_t v12 = objc_msgSend([NSString alloc], "initWithFormat:", @"UNKNOWN(%lu)", v9);
      [v8 addObject:v12];

      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v23 = v9;
        _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Unknown bitmask description (%lu)", buf, 0xCu);
      }
    }
    uint64_t v10 = [v8 componentsJoinedByString:@"|"];

    _Block_object_dispose(&v18, 8);
  }
  else
  {
    uint64_t v10 = @"None";
  }

  return v10;
}

void sub_1A428C950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __PFBitmaskDescription_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = [a2 unsignedIntegerValue];
  if ((v5 & ~*(void *)(a1 + 56)) == 0)
  {
    uint64_t v6 = v5;
    id v7 = *(void **)(a1 + 32);
    id v8 = [*(id *)(a1 + 40) objectAtIndexedSubscript:a3];
    [v7 addObject:v8];

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) |= v6;
  }
}

void sub_1A428D3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8297(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8298(uint64_t a1)
{
}

void sub_1A428D788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1A428DCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v11 = objc_begin_catch(exception_object);
      uint64_t v12 = (void *)MEMORY[0x1E4F28C58];
      a10 = *MEMORY[0x1E4F28588];
      uint64_t v13 = [v11 description];
      a11 = (uint64_t)v13;
      id v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a11 forKeys:&a10 count:1];
      [v12 errorWithDomain:@"PFStoryRecipeErrorDomain" code:1 userInfo:v14];
      objc_claimAutoreleasedReturnValue();

      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x1A428DC3CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A428E428(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v2 = objc_begin_catch(a1);
      unint64_t v3 = (void *)MEMORY[0x1E4F28C58];
      STACK[0x240] = *MEMORY[0x1E4F28568];
      id v4 = [NSString alloc];
      uint64_t v9 = [v2 description];
      uint64_t v5 = (void *)[v4 initWithFormat:@"Malformed recipe: %@"];
      STACK[0x248] = (unint64_t)v5;
      uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&STACK[0x248] forKeys:&STACK[0x240] count:1];
      uint64_t v7 = [v3 errorWithDomain:@"PFStoryRecipeErrorDomain" code:1 userInfo:v6];
      id v8 = *(void **)(STACK[0x218] + 40);
      *(void *)(STACK[0x218] + 40) = v7;

      objc_end_catch();
    }
    else
    {
      objc_begin_catch(a1);
    }
    JUMPOUT(0x1A428E388);
  }
  _Unwind_Resume(a1);
}

uint64_t PFSharedLibraryModeIsOn(unint64_t a1)
{
  return (a1 < 5) & (0x16u >> a1);
}

uint64_t PFSharedLibraryModeCanBeAutoUpdated(unint64_t a1)
{
  return (a1 < 6) & (0x31u >> a1);
}

BOOL PFSharedLibraryModeIsAutoState(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 4;
}

__CFString *PFSharedLibraryModeDescription(unint64_t a1)
{
  if (a1 > 5) {
    return @"unknown";
  }
  else {
    return off_1E5B2E850[a1];
  }
}

BOOL PFLocationAccessUnknownWithAuthorizationStatus(int a1)
{
  return (a1 + 1) < 2;
}

BOOL PFCanAccessLocationWithAuthorizationStatus(int a1)
{
  return (a1 - 3) < 2;
}

BOOL PFDeviceSupportsSmartStyles()
{
  return AVGestaltGetIntegerAnswerWithDefault() != 0;
}

BOOL PFUserHasSetSmartStyle()
{
  uint64_t v0 = AVSmartStyleSettingsGetSystemStyle();
  BOOL v1 = v0 != 0;

  return v1;
}

__CFString *PFStoryRecipeSongCategoryDescription(unint64_t a1)
{
  if (a1 > 2) {
    return @"??";
  }
  else {
    return off_1E5B2E8D0[a1];
  }
}

__CFString *PFStoryRecipeSongSubcategoryDescription(unint64_t a1)
{
  if (a1 > 5) {
    return @"??";
  }
  else {
    return off_1E5B2E8E8[a1];
  }
}

__CFString *PFStoryRecipeSongPaceDescription(unint64_t a1)
{
  if (a1 > 4) {
    return @"??";
  }
  else {
    return off_1E5B2E8A8[a1];
  }
}

uint64_t PFStoryRecipeSongPaceFromVisualTempo(void *a1, double a2)
{
  id v3 = a1;
  [v3 slowVisualTempoTarget];
  double v5 = v4;
  [v3 mediumVisualTempoTarget];
  double v7 = (v5 + v6) * 0.5;
  [v3 mediumVisualTempoTarget];
  double v9 = v8;
  [v3 fastVisualTempoTarget];
  double v11 = v10;

  uint64_t v12 = 3;
  if ((v9 + v11) * 0.5 > a2) {
    uint64_t v12 = 2;
  }
  if (v7 > a2) {
    return 1;
  }
  else {
    return v12;
  }
}

uint64_t PFParallaxStyleCategoryBlackWhite_block_invoke_6(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

uint64_t PFParallaxStyleCategoryBlackWhite_block_invoke_5(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

uint64_t PFParallaxStyleCategoryBlackWhite_block_invoke_7(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_1A428FF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8807(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8808(uint64_t a1)
{
}

void *PFParallaxStyleCategoryBlackWhite_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    a3 = +[PFParallaxColor colorWithRGBValues:v4 error:a3];
  }
  else if (a3)
  {
    double v5 = (void *)MEMORY[0x1E4F28C58];
    double v6 = [NSString stringWithFormat:@"Invalid color values: %@", v4, *MEMORY[0x1E4F28228]];
    v10[0] = v6;
    double v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];
    *a3 = [v5 errorWithDomain:@"com.apple.PhotosFormats" code:7 userInfo:v7];

    a3 = 0;
  }

  return a3;
}

id PFParallaxStyleCategoryBlackWhite_block_invoke_4(int a1, id a2)
{
  return a2;
}

void sub_1A42907DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t PFParallaxStyleCategoryBlackWhite_block_invoke(uint64_t a1, void *a2)
{
  return [a2 RGBValues];
}

id PFParallaxStyleCategoryBlackWhite_block_invoke_2(int a1, id a2)
{
  return a2;
}

id PFParallaxLayerStyleSupportedKinds()
{
  if (PFParallaxLayerStyleSupportedKinds_onceToken != -1) {
    dispatch_once(&PFParallaxLayerStyleSupportedKinds_onceToken, &__block_literal_global_8858);
  }
  uint64_t v0 = (void *)PFParallaxLayerStyleSupportedKinds_supportedKinds;

  return v0;
}

void __PFParallaxLayerStyleSupportedKinds_block_invoke()
{
  v2[11] = *MEMORY[0x1E4F143B8];
  v2[0] = @"Original";
  v2[1] = @"Studio";
  v2[2] = @"BlackWhite";
  v2[3] = @"BlackWhiteMono";
  v2[4] = @"ColorBGStandard";
  void v2[5] = @"ColorWashSingle";
  v2[6] = @"ColorWashDuotone";
  v2[7] = @"GreenScreen";
  v2[8] = @"GreenScreenMono";
  v2[9] = @"GreenScreenBlur";
  v2[10] = @"GreenScreenGraphic";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:11];
  BOOL v1 = (void *)PFParallaxLayerStyleSupportedKinds_supportedKinds;
  PFParallaxLayerStyleSupportedKinds_supportedKinds = v0;
}

id PFParallaxStyleFrequencyTable()
{
  if (PFParallaxStyleFrequencyTable_onceToken != -1) {
    dispatch_once(&PFParallaxStyleFrequencyTable_onceToken, &__block_literal_global_48);
  }
  uint64_t v0 = (void *)PFParallaxStyleFrequencyTable_frequencyTable;

  return v0;
}

void __PFParallaxStyleFrequencyTable_block_invoke()
{
  v2[7] = *MEMORY[0x1E4F143B8];
  v2[0] = @"TrueColors";
  v2[1] = @"TrueColors";
  v2[2] = @"TrueColors";
  v2[3] = @"TrueColors";
  v2[4] = @"BlackWhite";
  void v2[5] = @"WarmColors";
  v2[6] = @"CoolColors";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:7];
  BOOL v1 = (void *)PFParallaxStyleFrequencyTable_frequencyTable;
  PFParallaxStyleFrequencyTable_frequencyTable = v0;
}

__CFString *PFDefaultParallaxStyleKindForCategory(void *a1)
{
  id v1 = a1;
  id v2 = @"Original";
  if (([v1 isEqualToString:@"TrueColors"] & 1) == 0)
  {
    if ([v1 isEqualToString:@"WarmColors"])
    {
      id v2 = @"ColorWashDuotone";
    }
    else if ([v1 isEqualToString:@"CoolColors"])
    {
      id v2 = @"ColorWashSingle";
    }
    else if ([v1 isEqualToString:@"BlackWhite"])
    {
      id v2 = @"BlackWhiteMono";
    }
  }

  return v2;
}

uint64_t PFMetadataImageSourceIsSpatialMedia(uint64_t a1)
{
  id v1 = [[PFMetadata alloc] initWithImageSource:a1 contentType:0 options:13 timeZoneLookup:0 cacheImageSource:1];
  uint64_t v2 = [(PFMetadata *)v1 isSpatialMedia];

  return v2;
}

void sub_1A4295D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

uint64_t __Block_byref_object_copy__9136(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9137(uint64_t a1)
{
}

double PFMessagesStackLayoutGeometryGetScale(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

void sub_1A4298094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A4298284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A4298BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9545(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9546(uint64_t a1)
{
}

void sub_1A4299A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PFVideoComplementMetadataForVideoAtPath(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E4F16330];
  id v4 = [MEMORY[0x1E4F1CB10] fileURLWithPath:a1];
  double v5 = [v3 assetWithURL:v4];

  double v6 = PFVideoComplementMetadataForVideoAVAsset(v5, a2);

  return v6;
}

id PFVideoComplementMetadataForVideoAVAsset(void *a1, void *a2)
{
  long long v6 = *MEMORY[0x1E4F1F9F8];
  uint64_t v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v4 = v6;
  uint64_t v5 = v7;
  uint64_t v2 = PFVideoComplementMetadataForVideoAVAssetWithKnownValues(a1, 0, &v6, &v4, a2);

  return v2;
}

id PFVideoComplementMetadataForVideoAVAssetWithKnownValues(void *a1, void *a2, long long *a3, long long *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  uint64_t v11 = v10;
  long long v26 = *a3;
  uint64_t v27 = *((void *)a3 + 2);
  long long v24 = *a4;
  uint64_t v25 = *((void *)a4 + 2);
  if (BYTE12(v26)) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = &v26;
  }
  if (BYTE12(v24)) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = &v24;
  }
  if (v10)
  {
    BOOL v14 = _PFReadMetadataFromVideoAVAsset(v9, 0, (uint64_t)v12, (uint64_t)v13, a5);
    id v15 = 0;
    id v16 = v11;
    if (!v14) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  id v23 = 0;
  BOOL v18 = _PFReadMetadataFromVideoAVAsset(v9, &v23, (uint64_t)v12, (uint64_t)v13, a5);
  id v16 = v23;
  id v15 = 0;
  if (v18)
  {
LABEL_9:
    id v15 = objc_opt_new();
    [v15 setPairingIdentifier:v16];
    long long v21 = v24;
    uint64_t v22 = v25;
    [v15 setImageDisplayTime:&v21];
    long long v19 = v26;
    uint64_t v20 = v27;
    [v15 setVideoDuration:&v19];
  }
LABEL_10:

  return v15;
}

BOOL _PFReadMetadataFromVideoAVAsset(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  id v8 = a1;
  long long v79 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTimeEpoch v80 = epoch;
  CMTimeValue v9 = *MEMORY[0x1E4F1F9F8];
  CMTimeValue v89 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v10 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeScale v90 = v10;
  uint64_t v73 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v11 = os_log_create("com.apple.photos.backend", "PhotosFormats");
  os_signpost_id_t v12 = os_signpost_id_make_with_pointer(v11, v8);
  uint64_t v13 = v11;
  BOOL v14 = v13;
  os_signpost_id_t spid = v12;
  unint64_t v15 = v12 - 1;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A41FE000, v14, OS_SIGNPOST_INTERVAL_BEGIN, spid, "com.apple.photos.photosformats.videometadata", (const char *)&unk_1A42E5DAB, buf, 2u);
  }

  if (!v8)
  {
    int64_t v29 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v87 = *MEMORY[0x1E4F28228];
    uint64_t v88 = @"nil avasset";
    uint64_t v30 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v88 forKeys:&v87 count:1];
    id v31 = [v29 errorWithDomain:@"com.apple.PhotosFormats" code:-1 userInfo:v30];

    BOOL v32 = 0;
    id v33 = 0;
    goto LABEL_58;
  }
  context = (void *)MEMORY[0x1A6259880]();
  if (a3) {
    [v8 duration];
  }
  uint64_t v70 = a4;
  uint64_t v71 = a2;
  if (!a4)
  {
    id v31 = 0;
    int v28 = 1;
    goto LABEL_45;
  }
  id v16 = v14;
  uint64_t v17 = v16;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A41FE000, v17, OS_SIGNPOST_INTERVAL_BEGIN, spid, "com.apple.photos.photosformats.videometadata.displaytime", (const char *)&unk_1A42E5DAB, buf, 2u);
  }
  unint64_t v67 = v17;

  id v18 = v8;
  CMTimeValue value = v9;
  CMTimeScale timescale = v10;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  id v68 = v18;
  long long v19 = +[PFMediaUtilities tracksWithMediaType:forAsset:](PFMediaUtilities, "tracksWithMediaType:forAsset:", *MEMORY[0x1E4F15BE0]);
  uint64_t v20 = (void *)[v19 countByEnumeratingWithState:&v83 objects:buf count:16];
  if (!v20)
  {
    uint64_t v66 = 0;
    int v28 = 1;
    goto LABEL_40;
  }
  uint64_t v64 = a5;
  id v65 = v8;
  uint64_t v21 = *(void *)v84;
  uint64_t v22 = *MEMORY[0x1E4F218A0];
LABEL_13:
  uint64_t v23 = 0;
  while (1)
  {
    if (*(void *)v84 != v21) {
      objc_enumerationMutation(v19);
    }
    long long v24 = *(void **)(*((void *)&v83 + 1) + 8 * v23);
    uint64_t v25 = [v24 formatDescriptions];
    long long v26 = (const opaqueCMFormatDescription *)[v25 firstObject];

    if (!v26) {
      goto LABEL_19;
    }
    uint64_t v27 = CMMetadataFormatDescriptionGetIdentifiers(v26);
    if ([v27 containsObject:v22]) {
      break;
    }

LABEL_19:
    if (v20 == (void *)++v23)
    {
      uint64_t v20 = (void *)[v19 countByEnumeratingWithState:&v83 objects:buf count:16];
      if (v20) {
        goto LABEL_13;
      }
      uint64_t v66 = 0;
      int v28 = 1;
      a5 = v64;
      id v8 = v65;
      goto LABEL_40;
    }
  }
  id v34 = v24;

  if (!v34)
  {
    uint64_t v66 = 0;
    uint64_t v20 = 0;
    int v28 = 1;
    a5 = v64;
    id v8 = v65;
    goto LABEL_41;
  }
  uint64_t v66 = v34;
  long long v19 = [MEMORY[0x1E4F163A0] assetReaderTrackOutputWithTrack:v34 outputSettings:0];
  id v82 = 0;
  uint64_t v35 = [MEMORY[0x1E4F16378] assetReaderWithAsset:v68 error:&v82];
  id v36 = v82;
  id v37 = v36;
  id v8 = v65;
  int64_t v63 = v35;
  if (v35)
  {
    id v62 = v36;
    [v35 addOutput:v19];
    [v35 startReading];
    do
    {
      uint64_t v38 = (opaqueCMSampleBuffer *)[v19 copyNextSampleBuffer];
      if (!v38) {
        break;
      }
      uint64_t v39 = v38;
      if (CMSampleBufferGetNumSamples(v38))
      {
        uint64_t v40 = (void *)[objc_alloc(MEMORY[0x1E4F166C0]) initWithSampleBuffer:v39];
        int64_t v41 = (void *)MEMORY[0x1E4F16558];
        unint64_t v42 = [v40 items];
        unint64_t v43 = [v41 metadataItemsFromArray:v42 filteredByIdentifier:v22];
        unint64_t v44 = [v43 firstObject];

        if (v44)
        {
          CMSampleBufferGetOutputPresentationTimeStamp(&v81, v39);
          CMTimeValue value = v81.value;
          CMTimeFlags flags = v81.flags;
          CMTimeScale timescale = v81.timescale;
          CMTimeEpoch epoch = v81.epoch;
        }
      }
      CFRelease(v39);
    }
    while ((flags & 1) == 0);
    [v63 cancelReading];
    id v37 = v62;
  }
  int v28 = flags & 1;
  a5 = v64;
  if (flags)
  {
    uint64_t v45 = v37;
    uint64_t v20 = 0;
  }
  else
  {
    id v46 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    [v46 setObject:@"Invalid still image display time" forKeyedSubscript:*MEMORY[0x1E4F28228]];
    [v46 setObject:v37 forKeyedSubscript:*MEMORY[0x1E4F28A50]];
    [MEMORY[0x1E4F28C58] errorWithDomain:@"com.apple.PhotosFormats" code:-1 userInfo:v46];
    uint64_t v20 = v45 = v37;
  }
LABEL_40:

LABEL_41:
  CMTimeValue v89 = value;
  CMTimeScale v90 = timescale;
  id v47 = v20;

  id v31 = v47;
  BOOL v48 = v67;
  int64_t v49 = v48;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v48))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A41FE000, v49, OS_SIGNPOST_INTERVAL_END, spid, "com.apple.photos.photosformats.videometadata.displaytime", (const char *)&unk_1A42E5DAB, buf, 2u);
  }

LABEL_45:
  if (v71)
  {
    uint64_t v50 = v14;
    uint64_t v51 = v50;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v50))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A41FE000, v51, OS_SIGNPOST_INTERVAL_BEGIN, spid, "com.apple.photos.photosformats.videometadata.assetid", (const char *)&unk_1A42E5DAB, buf, 2u);
    }

    id v77 = v31;
    id v78 = 0;
    BOOL v52 = +[PFVideoMetadata readMetadataType:1 fromAVAsset:v8 value:&v78 error:&v77];
    id v33 = v78;
    id v53 = v77;

    if (v28) {
      int v28 = v52;
    }
    else {
      int v28 = 0;
    }
    uint64_t v54 = v51;
    uint64_t v55 = v54;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v54))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A41FE000, v55, OS_SIGNPOST_INTERVAL_END, spid, "com.apple.photos.photosformats.videometadata.assetid", (const char *)&unk_1A42E5DAB, buf, 2u);
    }

    id v31 = v53;
  }
  else
  {
    id v33 = 0;
  }
  BOOL v32 = v28 != 0;
  a4 = v70;
  a2 = v71;
LABEL_58:
  uint64_t v56 = v14;
  uint64_t v57 = v56;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v56))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A41FE000, v57, OS_SIGNPOST_INTERVAL_END, spid, "com.apple.photos.photosformats.videometadata", (const char *)&unk_1A42E5DAB, buf, 2u);
  }

  uint64_t v58 = [MEMORY[0x1E4F1C9C8] date];
  [v58 timeIntervalSinceDate:v73];
  double v60 = v59;

  if (v60 > 3.0 && os_log_type_enabled(v57, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v92 = v8;
    __int16 v93 = 2048;
    double v94 = v60;
    _os_log_fault_impl(&dword_1A41FE000, v57, OS_LOG_TYPE_FAULT, "Slow metadata read for AVAsset %@: %.3fs", buf, 0x16u);
  }
  if (a3)
  {
    *(_OWORD *)a3 = v79;
    *(void *)(a3 + 16) = v80;
  }
  if (a4)
  {
    *(void *)a4 = v89;
    *(_DWORD *)(a4 + _Block_object_dispose(&STACK[0x360], 8) = v90;
    *(_DWORD *)(a4 + 12) = flags;
    *(void *)(a4 + 16) = epoch;
  }
  if (a2) {
    *a2 = v33;
  }
  if (a5) {
    *a5 = v31;
  }

  return v32;
}

void sub_1A429AFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A429B144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t PFIsLivePhotoBundleType(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = +[PFUniformTypeUtilities livePhotoBundleType];
    id v3 = +[PFUniformTypeUtilities livePhotoBundlePrivateType];
    if (v2 && ([v1 conformsToType:v2] & 1) != 0)
    {
      uint64_t v4 = 1;
    }
    else if (v3)
    {
      uint64_t v4 = [v1 conformsToType:v3];
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

UTType *PFCurrentPlatformLivePhotoBundleType()
{
  return +[PFUniformTypeUtilities livePhotoBundleType];
}

id PFAllPlatformsLivePhotoBundleTypes()
{
  if (PFAllPlatformsLivePhotoBundleTypes_onceToken[0] != -1) {
    dispatch_once(PFAllPlatformsLivePhotoBundleTypes_onceToken, &__block_literal_global_9662);
  }
  uint64_t v0 = (void *)PFAllPlatformsLivePhotoBundleTypes_typeIdentifiers;

  return v0;
}

void __PFAllPlatformsLivePhotoBundleTypes_block_invoke()
{
  v4[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[PFUniformTypeUtilities livePhotoBundleType];
  v4[0] = v0;
  id v1 = +[PFUniformTypeUtilities livePhotoBundlePrivateType];
  v4[1] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:2];
  id v3 = (void *)PFAllPlatformsLivePhotoBundleTypes_typeIdentifiers;
  PFAllPlatformsLivePhotoBundleTypes_typeIdentifiers = v2;
}

BOOL _PFReadLivePhotoMetadataFromMetadata(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  CMTimeScale v10 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v11 = os_log_create("com.apple.photos.backend", "PhotosFormats");
  os_signpost_id_t v12 = os_signpost_id_make_with_pointer(v11, v9);
  uint64_t v13 = v11;
  BOOL v14 = v13;
  unint64_t v15 = v12 - 1;
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A41FE000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v12, "com.apple.photos.photosformats.videometadata", (const char *)&unk_1A42E5DAB, buf, 2u);
  }

  if (v9)
  {
    if (a3)
    {
      [v9 duration];
      *(_OWORD *)a3 = *(_OWORD *)buf;
      *(void *)(a3 + 16) = *(void *)&buf[16];
    }
    if (a4)
    {
      id v16 = v14;
      uint64_t v17 = v16;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      {

        [v9 stillImageDisplayTime];
        *(_OWORD *)a4 = *(_OWORD *)buf;
        *(void *)(a4 + 16) = *(void *)&buf[16];
        uint64_t v21 = v17;
      }
      else
      {
        if (os_signpost_enabled(v16))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1A41FE000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v12, "com.apple.photos.photosformats.videometadata.displaytime", (const char *)&unk_1A42E5DAB, buf, 2u);
        }

        [v9 stillImageDisplayTime];
        *(_OWORD *)a4 = *(_OWORD *)buf;
        *(void *)(a4 + 16) = *(void *)&buf[16];
        id v18 = v17;
        if (os_signpost_enabled(v18))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1A41FE000, v18, OS_SIGNPOST_INTERVAL_END, v12, "com.apple.photos.photosformats.videometadata.displaytime", (const char *)&unk_1A42E5DAB, buf, 2u);
        }
      }
    }
    if (a2)
    {
      uint64_t v22 = v14;
      uint64_t v23 = v22;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      {

        *a2 = [v9 livePhotoPairingIdentifier];
        uint64_t v20 = v23;
      }
      else
      {
        if (os_signpost_enabled(v22))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1A41FE000, v23, OS_SIGNPOST_INTERVAL_BEGIN, v12, "com.apple.photos.photosformats.videometadata.assetid", (const char *)&unk_1A42E5DAB, buf, 2u);
        }

        *a2 = [v9 livePhotoPairingIdentifier];
        uint64_t v20 = v23;
        if (os_signpost_enabled(v20))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1A41FE000, v20, OS_SIGNPOST_INTERVAL_END, v12, "com.apple.photos.photosformats.videometadata.assetid", (const char *)&unk_1A42E5DAB, buf, 2u);
        }
      }
      goto LABEL_24;
    }
  }
  else if (a5)
  {
    long long v19 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v32 = *MEMORY[0x1E4F28228];
    id v33 = @"nil metadata";
    uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v33 forKeys:&v32 count:1];
    *a5 = [v19 errorWithDomain:@"com.apple.PhotosFormats" code:-1 userInfo:v20];
LABEL_24:
  }
  long long v24 = v14;
  uint64_t v25 = v24;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A41FE000, v25, OS_SIGNPOST_INTERVAL_END, v12, "com.apple.photos.photosformats.videometadata", (const char *)&unk_1A42E5DAB, buf, 2u);
  }

  long long v26 = [MEMORY[0x1E4F1C9C8] date];
  [v26 timeIntervalSinceDate:v10];
  double v28 = v27;

  if (v28 > 3.0)
  {
    int64_t v29 = v25;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
    {
      id v31 = [v9 fileURL];
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v28;
      _os_log_fault_impl(&dword_1A41FE000, v29, OS_LOG_TYPE_FAULT, "Slow metadata read for AVAsset %@: %.3fs", buf, 0x16u);
    }
  }

  return v9 != 0;
}

void PFReadImageDisplayTimeFromVideoFileAtPath(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = (long long *)MEMORY[0x1E4F1F9F8];
  long long v9 = *MEMORY[0x1E4F1F9F8];
  uint64_t v10 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  id v4 = a1;
  uint64_t v5 = [PFMetadata alloc];
  long long v6 = objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:", v4, v9, v10);

  uint64_t v7 = [(PFMetadata *)v5 initWithAVURL:v6 timeZoneLookup:0];
  if (_PFReadLivePhotoMetadataFromMetadata(v7, 0, 0, (uint64_t)&v9, 0)) {
    id v8 = &v9;
  }
  else {
    id v8 = v3;
  }
  *(_OWORD *)a2 = *v8;
  *(void *)(a2 + 16) = *((void *)v8 + 2);
}

id PFReadPairingIdentifierFromVideoAtPath(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [PFMetadata alloc];
  id v3 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v1];

  id v4 = [(PFMetadata *)v2 initWithAVURL:v3 timeZoneLookup:0];
  id v10 = 0;
  BOOL v5 = _PFReadLivePhotoMetadataFromMetadata(v4, &v10, 0, 0, 0);
  id v6 = v10;
  uint64_t v7 = v6;
  id v8 = 0;
  if (v5) {
    id v8 = v6;
  }

  return v8;
}

id PFVideoComplementMetadataForVideoAVAssetPreloadingValues(void *a1, void *a2)
{
  long long v16 = *MEMORY[0x1E4F1F9F8];
  uint64_t v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v14 = v16;
  uint64_t v15 = v17;
  id v3 = a1;
  id v4 = [[PFMetadata alloc] initWithAVAsset:v3 timeZoneLookup:0];

  id v13 = 0;
  BOOL v5 = _PFReadLivePhotoMetadataFromMetadata(v4, &v13, (uint64_t)&v16, (uint64_t)&v14, a2);
  id v6 = v13;
  uint64_t v7 = 0;
  if (v5)
  {
    uint64_t v7 = objc_opt_new();
    [v7 setPairingIdentifier:v6];
    long long v11 = v14;
    uint64_t v12 = v15;
    [v7 setImageDisplayTime:&v11];
    long long v9 = v16;
    uint64_t v10 = v17;
    [v7 setVideoDuration:&v9];
  }

  return v7;
}

id PFReadPairingIdentifierFromImageAtPath(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F1CB10] fileURLWithPath:a1];
  id v4 = 0;
  +[PFImageMetadata readMetadataType:1 fromFileURL:v1 value:&v4 error:0];
  id v2 = v4;

  return v2;
}

id PFReadPairingIdentifierFromCGImageProperties(uint64_t a1)
{
  id v3 = 0;
  +[PFImageMetadata readMetadataType:1 fromCGImageProperties:a1 value:&v3 error:0];
  id v1 = v3;

  return v1;
}

id PFRemovePairingIdentifierFromCGImageProperties(uint64_t a1)
{
  return +[PFImageMetadata imagePropertiesByRemovingKey:*MEMORY[0x1E4F15530] dictionaryKey:*MEMORY[0x1E4F2FC20] fromImageProperties:a1];
}

uint64_t PFParallaxLayerIDIsForeground(void *a1, const char *a2)
{
  return [a1 containsString:@"foreground"];
}

uint64_t PFParallaxLayerIDIsBackground(void *a1, const char *a2)
{
  return [a1 containsString:@"background"];
}

uint64_t PFParallaxLayerIDIsBackfill(void *a1, const char *a2)
{
  return [a1 hasSuffix:@"backfill"];
}

uint64_t PFParallaxLayerIDIsBackgroundLandscape(void *a1, const char *a2)
{
  return [a1 containsString:@"background-landscape"];
}

uint64_t PFParallaxLayerIDIsForegroundLandscape(void *a1, const char *a2)
{
  return [a1 hasSuffix:@"foreground-landscape"];
}

uint64_t PFParallaxLayerIDIsInactive(void *a1, const char *a2)
{
  return [a1 hasPrefix:@"inactive"];
}

uint64_t PFParallaxLayerIDIsSettlingVideo(void *a1, const char *a2)
{
  return [a1 isEqualToString:@"settling-video"];
}

uint64_t PFParallaxLayerIDIsDebug(void *a1, const char *a2)
{
  return [a1 hasPrefix:@"debug"];
}

double PFOrientationTransformImageSize(uint64_t a1, double a2, double a3)
{
  if ((unint64_t)(a1 - 5) >= 4) {
    return a2;
  }
  return a3;
}

__CFString *PFOrientationName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 8) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = a1;
  }
  return PFOrientationName_names[v1];
}

BOOL PFOrientationIsValid(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

uint64_t PFOrientationInverse(unint64_t a1)
{
  if (a1 > 8) {
    return 8;
  }
  else {
    return qword_1A42D46C8[a1];
  }
}

void sub_1A42A5594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A42A578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A42A5D08(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1A42A607C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10866(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10867(uint64_t a1)
{
}

void sub_1A42A6318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _PFStoryRecipeAssetEnumerationIsConsistentForAssetKind(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v5 = [v3 numberOfAssets];
  if (v5 >= 1)
  {
    uint64_t v6 = v5;
    for (uint64_t i = 0; i != v6; ++i)
    {
      id v8 = [v3 assetAtIndex:i];
      if ([v8 kind] == a2) {
        [v4 addObject:v8];
      }
    }
  }
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  char v23 = 1;
  long long v9 = [v4 objectEnumerator];
  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = 3221225472;
  long long v16 = ___PFStoryRecipeAssetEnumerationIsConsistentForAssetKind_block_invoke;
  uint64_t v17 = &unk_1E5B2ECD8;
  id v10 = v9;
  id v18 = v10;
  long long v19 = &v20;
  [v3 enumerateAssetsWithKind:a2 usingBlock:&v14];
  if (*((unsigned char *)v21 + 24))
  {
    long long v11 = objc_msgSend(v10, "nextObject", v14, v15, v16, v17);
    *((unsigned char *)v21 + 24) = v11 == 0;

    BOOL v12 = *((unsigned char *)v21 + 24) != 0;
  }
  else
  {
    BOOL v12 = 0;
    *((unsigned char *)v21 + 24) = 0;
  }

  _Block_object_dispose(&v20, 8);
  return v12;
}

void sub_1A42A6A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _PFStoryRecipeAssetIdentifiersAreUnique(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 numberOfAssets];
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  if (v2 < 1)
  {
LABEL_9:
    BOOL v6 = 1;
    goto LABEL_10;
  }
  id v4 = [v1 assetAtIndex:0];
  uint64_t v5 = [v4 identifier];

  if (([v3 containsObject:v5] & 1) == 0)
  {
    uint64_t v7 = 1;
    while (1)
    {
      uint64_t v8 = v7;
      [v3 addObject:v5];

      if (v2 == v8) {
        goto LABEL_9;
      }
      long long v9 = [v1 assetAtIndex:v8];
      uint64_t v5 = [v9 identifier];

      char v10 = [v3 containsObject:v5];
      uint64_t v7 = v8 + 1;
      if (v10)
      {
        BOOL v6 = v8 >= v2;
        goto LABEL_8;
      }
    }
  }
  BOOL v6 = 0;
LABEL_8:

LABEL_10:
  return v6;
}

BOOL _PFStoryRecipeCurrentStyleRefersToExistingSongAsset(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 currentStyle];
  if (v2)
  {
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _DWORD v8[2] = ___PFStoryRecipeCurrentStyleRefersToExistingSongAsset_block_invoke;
    v8[3] = &unk_1E5B2ED00;
    id v4 = v3;
    id v9 = v4;
    [v1 enumerateAssetsWithKind:2 usingBlock:v8];
    uint64_t v5 = [v2 songAssetIdentifier];
    BOOL v6 = !v5 || [v4 containsObject:v5];
  }
  else
  {
    BOOL v6 = 1;
  }

  return v6;
}

BOOL PFStoryRecipeIsConsistent(void *a1)
{
  id v1 = a1;
  BOOL v2 = _PFStoryRecipeAssetEnumerationIsConsistentForAssetKind(v1, 1)
    && _PFStoryRecipeAssetEnumerationIsConsistentForAssetKind(v1, 2)
    && _PFStoryRecipeAssetIdentifiersAreUnique(v1)
    && _PFStoryRecipeCurrentStyleRefersToExistingSongAsset(v1);

  return v2;
}

void pf::TimezoneArchiveLineParser::finalize(pf::TimezoneArchiveLineParser *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = (char *)this + 40;
  uint64_t v2 = *((void *)this + 5);
  *(void *)long long buf = "version";
  *(void *)&uint8_t buf[8] = v2;
  *(void *)&uint8_t buf[16] = 1;
  LOWORD(v15) = 256;
  boost::interprocess::ipcdetail::named_proxy<boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>,int,false>::operator()<int const&>((uint64_t)buf, (uint64_t)&TIMEZONE_RTREE_MAP_VERSION);
  uint64_t v4 = *(void *)v3;
  if (*(void *)v3) {
    uint64_t v5 = *(void *)v3 - (void)&v13;
  }
  else {
    uint64_t v5 = 1;
  }
  uint64_t v6 = *((void *)this + 12);
  uint64_t v12 = *((void *)this + 11);
  uint64_t v13 = v5;
  uint64_t v11 = v6;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1A42D34F0;
  unint64_t v15 = 0x80000001A42D4D86 & 0x7FFFFFFFFFFFFFFFLL;
  long long v16 = &v13;
  *(void *)long long buf = &unk_1EF7A9CA8;
  uint64_t v17 = &v8;
  id v18 = &v9;
  long long v19 = &v10;
  uint64_t v20 = &v11;
  uint64_t v21 = &v12;
  boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v4, "rtree", 1uLL, 0, 1, (uint64_t)buf);
  boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>::shrink_to_fit<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>,char>(*((char **)this + 1));
  unint64_t v7 = PFChecksumArchiveData((char *)(*(void *)v3 - 8), *(void *)(*(void *)v3 + 48) + 8, *((char **)this + 2), *((void *)this + 3));
  **((void **)this + 4) = v7;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFTimeZoneLookup checksum %016llx", buf, 0xCu);
  }
}

void boost::interprocess::ipcdetail::CtorArgN<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::~CtorArgN()
{
}

void boost::interprocess::ipcdetail::placement_destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::destroy_n(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2 - (void)&v21;
    do
    {
      char v9 = (void *)(a2 + v7);
      uint64_t v10 = *(void *)(a2 + v7 + 24);
      if (v10 != 1)
      {
        uint64_t v11 = v8 + v7;
        uint64_t v12 = v8 + v7 + v10;
        BOOL v13 = v12 == -23;
        uint64_t v21 = v12 + 24;
        if (v12 == -23) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = -8;
        }
        uint64_t v15 = v12 + v14;
        uint64_t v16 = v14 + v10;
        uint64_t v17 = (uint64_t)v9 + v10 + 24;
        if (v13) {
          id v18 = 0;
        }
        else {
          id v18 = (_DWORD *)v17;
        }
        if (v15 == -23) {
          int64_t v19 = 0;
        }
        else {
          int64_t v19 = (char *)&v22 - (char *)v23;
        }
        uint64_t v22 = v11 + v16 + 24;
        v23[0] = v11 + v16 + v19 + 24;
        v23[1] = a2 + v7;
        boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>>(v18, (char *)v23);
        v9[3] = 1;
      }
      v9[1] = 0;
      v9[2] = 0;
      unint64_t v20 = *a4 + 1;
      *a4 = v20;
      v7 += 32;
    }
    while (v20 < a3);
  }
}

void *boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>>(_DWORD *a1, char *a2)
{
  id v3 = (char *)(a1 + 2);
  int v2 = *a1;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      if (v2 < 0) {
        id v3 = *(char **)v3;
      }
      if (*(void *)a2 == 1) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = &a2[*(void *)a2];
      }
      uint64_t v6 = (char *)boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::detail::variant::get_visitor<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(v5);
      if (!v6)
      {
        uint64_t v22 = &unk_1EF7A9E58;
        boost::throw_exception<boost::bad_get>();
      }
      if (v6 != v3) {
        __assert_rtn("operator()", "destroy.hpp", 62, "(&l == &rtree::get<leaf>(*m_current_node))&&(\"invalid pointers\")");
      }
      uint64_t v7 = (void *)*((void *)a2 + 1);
      int64_t v8 = a2 - (char *)&v20;
      if (*(void *)a2 == 1) {
        int64_t v8 = 0;
      }
      int64_t v9 = v8 + *(void *)a2;
      int64_t v20 = v9;
      int64_t v10 = (char *)&v20 - (char *)&v21;
      if (v9 == 1) {
        int64_t v10 = 0;
      }
      int64_t v11 = v10 + v9;
      uint64_t v21 = v11;
      if (v11 == 1) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = (char *)&v21 + v11;
      }
      if (v12) {
        uint64_t v13 = v12 - (char *)&v22;
      }
      else {
        uint64_t v13 = 1;
      }
      uint64_t v22 = (void *)v13;
      double result = boost::interprocess::allocator<boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v22);
      int64_t v15 = (char *)&v21 - (char *)&v22;
      if (v21 == 1) {
        int64_t v15 = 0;
      }
      uint64_t v16 = v15 + v21;
      uint64_t v22 = (void *)(v15 + v21);
      if (v15 + v21 != 1 && (void **)((char *)&v22 + v16))
      {
        if (*v7 == 1) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = (char *)v7 + *v7;
        }
        double result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v17, (uint64_t)&v22 + v16);
      }
      break;
    case 1:
      if (v2 < 0)
      {
        int64_t v19 = *(char **)v3;
        id v18 = a2;
      }
      else
      {
        id v18 = a2;
        int64_t v19 = v3;
      }
      double result = boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::operator()(v18, v19);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

void sub_1A42A7278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

char *boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::operator()(char *a1, char *a2)
{
  if (*(void *)a1 == 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = &a1[*(void *)a1];
  }
  uint64_t v5 = (char *)boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::detail::variant::get_visitor<boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(v4);
  if (!v5)
  {
    double v27 = &unk_1EF7A9E58;
    boost::throw_exception<boost::bad_get>();
  }
  if (v5 != a2) {
    __assert_rtn("operator()", "destroy.hpp", 41, "(&n == &rtree::get<internal_node>(*m_current_node))&&(\"invalid pointers\")");
  }
  int64_t v6 = a1 - (char *)&v25;
  if (*(void *)a1 == 1) {
    int64_t v6 = 0;
  }
  int64_t v7 = v6 + *(void *)a1;
  int64_t v25 = v7;
  if (*(void *)a2)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)&a2[v8 + 24];
      int64_t v10 = a2 - a1 + 24 + v8;
      if (v9 == 1) {
        int64_t v10 = 0;
      }
      uint64_t v11 = v10 + v9;
      *(void *)a1 = v11;
      if (v11 == 1) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = &a1[v11];
      }
      boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>>(v12, a1);
      *(void *)&a2[v8 + 24] = 1;
      v8 += 24;
    }
    while (&a2[v8 + 8] != &a2[24 * *(void *)a2 + 8]);
    int64_t v7 = v25;
  }
  uint64_t v13 = (void *)*((void *)a1 + 1);
  int64_t v14 = (char *)&v25 - (char *)&v24;
  if (v7 == 1) {
    int64_t v14 = 0;
  }
  int64_t v15 = v14 + v7;
  uint64_t v24 = v15;
  int64_t v16 = (char *)&v24 - (char *)&v26;
  if (v15 == 1) {
    int64_t v16 = 0;
  }
  uint64_t v17 = v16 + v15;
  uint64_t v26 = v17;
  if (v17 == 1) {
    id v18 = 0;
  }
  else {
    id v18 = (char *)&v26 + v17;
  }
  if (v18) {
    uint64_t v19 = v18 - (char *)&v27;
  }
  else {
    uint64_t v19 = 1;
  }
  double v27 = (void *)v19;
  double result = (char *)boost::interprocess::allocator<boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v27);
  int64_t v21 = (char *)&v26 - (char *)&v27;
  if (v26 == 1) {
    int64_t v21 = 0;
  }
  uint64_t v22 = v21 + v26;
  double v27 = (void *)(v21 + v26);
  if (v21 + v26 != 1 && (void **)((char *)&v27 + v22))
  {
    if (*v13 == 1) {
      char v23 = 0;
    }
    else {
      char v23 = (char *)v13 + *v13;
    }
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v23, (uint64_t)&v27 + v22);
  }
  return result;
}

void sub_1A42A74C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void boost::detail::variant::forced_return<void>()
{
  __assert_rtn("forced_return", "forced_return.hpp", 38, "false");
}

void *boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::detail::variant::get_visitor<boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(_DWORD *a1)
{
  int v3 = *a1;
  id v1 = a1 + 2;
  int v2 = v3;
  uint64_t v4 = 0;
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
      return v4;
    case 1:
      if (v2 < 0) {
        uint64_t v4 = (void *)*v1;
      }
      else {
        uint64_t v4 = v1;
      }
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return v4;
}

void boost::throw_exception<boost::bad_get>()
{
  exception = __cxa_allocate_exception(0x38uLL);
  exception[4] = 0;
  exception[5] = 0;
  *((_DWORD *)exception + 12) = -1;
  void *exception = &unk_1EF7A99E8;
  exception[1] = &unk_1EF7A9A18;
  exception[2] = &unk_1EF7A9A40;
  exception[3] = 0;
}

void *boost::interprocess::allocator<boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(void *result)
{
  id v1 = (char *)result + *result;
  if (*result == 1 || v1 == 0) {
    __assert_rtn("destroy", "allocator.hpp", 269, "ptr != 0");
  }
  int v3 = *(_DWORD *)v1;
  int v4 = v3 ^ (v3 >> 31);
  if (v4 == 1)
  {
    if (v3 < 0)
    {
      double result = (void *)*((void *)v1 + 1);
      if (result) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (v4) {
      boost::detail::variant::forced_return<void>();
    }
    if (v3 < 0)
    {
      double result = (void *)*((void *)v1 + 1);
      if (result)
      {
LABEL_13:
        JUMPOUT(0x1A6259210);
      }
    }
  }
  return result;
}

uint64_t boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EF7A9EA8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_get>::~wrapexcept(void *a1)
{
  *a1 = &unk_1EF7A9EA8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);

  JUMPOUT(0x1A6259210);
}

{
  uint64_t vars8;

  *a1 = &unk_1EF7A9EA8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::exception::~exception((std::exception *)a1 - 1);
}

const char *boost::bad_get::what(boost::bad_get *this)
{
  return "boost::bad_get: failed value get using boost::get";
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = &unk_1EF7A9EA8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);

  JUMPOUT(0x1A6259210);
}

{
  uint64_t vars8;

  *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = &unk_1EF7A9EA8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));

  std::exception::~exception((std::exception *)a1);
}

void boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EF7A9EA8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));

  JUMPOUT(0x1A6259210);
}

void boost::wrapexcept<boost::bad_get>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x38uLL);
  boost::wrapexcept<boost::bad_get>::wrapexcept((uint64_t)exception, a1);
}

void sub_1A42A7A18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_get>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EF7A9E28;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = &unk_1EF7A9E58;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_1EF7A9EA8;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x360], 8) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_1EF7A99E8;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = &unk_1EF7A9A18;
  *(void *)(a1 + 16) = &unk_1EF7A9A40;
  return a1;
}

void sub_1A42A7B48(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_get>::clone()
{
}

void sub_1A42A7D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

void boost::bad_get::~bad_get(std::exception *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x1A6259210);
}

void *boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::detail::variant::get_visitor<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(_DWORD *a1)
{
  int v3 = *a1;
  id v1 = a1 + 2;
  int v2 = v3;
  uint64_t v4 = 0;
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
      if (v2 < 0) {
        uint64_t v4 = (void *)*v1;
      }
      else {
        uint64_t v4 = v1;
      }
      break;
    case 1:
      return v4;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return v4;
}

void boost::interprocess::ipcdetail::CtorArgN<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::construct_n(uint64_t a1, const char *a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    unint64_t v6 = a3;
    int64_t v7 = (char *)a2;
    do
    {
      uint64_t v9 = **(float ***)(a1 + 72);
      uint64_t v10 = **(float ***)(a1 + 64);
      uint64_t v11 = *(uint64_t **)(a1 + 32);
      uint64_t v12 = *v11;
      uint64_t v13 = (char *)v11 + *v11;
      if (v12 == 1) {
        uint64_t v13 = 0;
      }
      *((void *)v7 + 3) = 1;
      if (v13) {
        uint64_t v14 = v13 - v7;
      }
      else {
        uint64_t v14 = 1;
      }
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
      *(void *)int64_t v7 = v14;
      if ((char *)v10 - (char *)v9 > 11)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9);
        id v47 = 0;
        uint64_t v48 = 0;
        unint64_t v49 = 0;
        if (v16 >> 59) {
          boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
        }
        id v47 = (uint64_t *)operator new(0xAAAAAAAAAAAAAAB0 * (v10 - v9));
        unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9);
        char v46 = 0;
        if (v9 != v10)
        {
          int v18 = 0;
          float v20 = v43;
          float v19 = v44;
          uint64_t v21 = (uint64_t)v9;
          uint64_t v22 = v9;
          float v23 = v45;
          do
          {
            float v24 = *v22;
            if (v18)
            {
              if (v24 < v4) {
                float v4 = *v22;
              }
              if (v24 > v19) {
                float v19 = *v22;
              }
              float v25 = v22[1];
              if (v25 < v20) {
                float v20 = v22[1];
              }
              if (v25 > v23) {
                float v23 = v22[1];
              }
            }
            else
            {
              float v23 = v22[1];
              int v18 = 1;
              float v20 = v23;
              float v19 = *v22;
              float v4 = *v22;
            }
            v39.i64[0] = *(void *)v22;
            v39.i64[1] = v21;
            uint64_t v26 = v48;
            double v27 = (int8x16_t *)&v47[2 * v48];
            if (v48 == v49)
            {
              boost::container::vector<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>,boost::container::new_allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>*,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>>>(&v41, (char *)&v47, v27, &v39);
              if (!v41.i64[0])
              {
                char v46 = v18;
                float v42 = v4;
                float v43 = v20;
                float v44 = v19;
                float v45 = v23;
                __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
              }
            }
            else
            {
              *double v27 = v39;
              uint64_t v48 = v26 + 1;
            }
            v22 += 3;
            v21 += 12;
          }
          while (v22 != v10);
          char v46 = v18;
          float v42 = v4;
          float v43 = v20;
          float v44 = v19;
          float v45 = v23;
          unint64_t v6 = a3;
        }
        if (v16 < 0x21)
        {
          uint64_t v15 = 0;
          unint64_t v29 = 1;
        }
        else
        {
          uint64_t v15 = 0;
          for (unint64_t i = 32; i < v16; i *= 32)
          {
            unint64_t v29 = i;
            ++v15;
          }
        }
        v41.i64[0] = v29;
        v41.i64[1] = v29 >> 2;
        uint64_t v30 = v47;
        id v37 = v47;
        uint64_t v38 = v47;
        if (v47) {
          BOOL v31 = 1;
        }
        else {
          BOOL v31 = v48 == 0;
        }
        if (!v31) {
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        }
        id v37 = &v47[2 * v48];
        if (v9 == v10) {
          __assert_rtn("get", "pack_create.hpp", 273, "(m_initialized)&&(\"uninitialized envelope accessed\")");
        }
        boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>>(&v39, &v38, &v37, &v42, 0xAAAAAAAAAAAAAAABLL * (v10 - v9), &v41, v7);
        int64_t v32 = (char *)&v39 - (char *)&v36 + 16;
        if (v40 == 1) {
          int64_t v32 = 0;
        }
        uint64_t v17 = v32 + v40;
        uint64_t v36 = v32 + v40;
        if (v49)
        {
          operator delete(v30);
          uint64_t v17 = v36;
        }
        if (v17 != 1)
        {
          id v33 = (char *)((char *)&v36 - (v7 + 24));
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        uint64_t v17 = 1;
      }
      id v33 = 0;
LABEL_48:
      *((void *)v7 + 2) = v15;
      *((void *)v7 + 3) = &v33[v17];
      *((void *)v7 + 1) = v16;
      v7 += 32;
      unint64_t v34 = *a4 + 1;
      *a4 = v34;
    }
    while (v34 < v6);
  }
}

void sub_1A42A8268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25)
{
  if (a25) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::vector<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>,boost::container::new_allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>*,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>>>(void *a1, char *a2, unsigned char *a3, _OWORD *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  if (v4 != *((void *)a2 + 1)) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  unint64_t v5 = 0x7FFFFFFFFFFFFFFLL;
  if (v4 == 0x7FFFFFFFFFFFFFFLL) {
    goto LABEL_25;
  }
  if (v4 >> 61 > 4) {
    uint64_t v6 = -1;
  }
  else {
    uint64_t v6 = 8 * v4;
  }
  if (v4 >> 61) {
    unint64_t v7 = v6;
  }
  else {
    unint64_t v7 = 8 * v4 / 5;
  }
  if (v7 < 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v5 = v7;
  }
  unint64_t v8 = v4 + 1 > v5 ? v4 + 1 : v5;
  if (v8 >> 59) {
LABEL_25:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v13 = *(unsigned char **)a2;
  uint64_t v14 = operator new(16 * v8);
  uint64_t v15 = v14;
  unint64_t v16 = *(unsigned char **)a2;
  uint64_t v17 = *((void *)a2 + 1);
  int v18 = v14;
  if (*(void *)a2)
  {
    int v18 = v14;
    if (v16 != a3)
    {
      memmove(v14, *(const void **)a2, a3 - v16);
      int v18 = (_OWORD *)((char *)v15 + a3 - v16);
    }
  }
  *int v18 = *a4;
  if (a3)
  {
    float v19 = &v16[16 * v17];
    if (v19 != a3) {
      memmove(v18 + 1, a3, v19 - a3);
    }
  }
  if (v16)
  {
    operator delete(v16);
    uint64_t v17 = *((void *)a2 + 1);
  }
  *(void *)a2 = v15;
  *((void *)a2 + 1) = v17 + 1;
  *((void *)a2 + 2) = v8;
  *a1 = (char *)v15 + a3 - v13;
}

char *boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>>(int8x16_t *a1, uint64_t **a2, uint64_t **a3, float *a4, unint64_t a5, uint64x2_t *a6, void *a7)
{
  uint64_t v7 = (char *)*a3 - (char *)*a2;
  if (v7 < 1 || v7 >> 4 != a5) {
    __assert_rtn("per_level", "pack_create.hpp", 300, "(0 < std::distance(first, last) && static_cast<size_type>(std::distance(first, last)) == values_count)&&(\"unexpected parameters\")");
  }
  if (a6->i64[0] > 1uLL)
  {
    uint64x2_t v70 = vshrq_n_u64(*a6, 5uLL);
    if (*a7 == 1) {
      uint64_t v37 = 0;
    }
    else {
      uint64_t v37 = (uint64_t)a7 + *a7;
    }
    uint64_t v38 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v37, 0x328uLL);
    int64_t v69 = v38 - (char *)&v69;
    if (v38 - (char *)&v69 == 1 || v38 == 0)
    {
      double v59 = (const std::runtime_error *)MEMORY[0x1A6259170](v75, "boost::geometry::index::rtree node creation failed");
      v73.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/c5bedca9-a1c5-11ef-a576-f22f22d1b522/Applications/Xcode.ap"
                            "p/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/us"
                            "r/local/include/boost/geometry/index/detail/exception.hpp";
      v73.i64[1] = (uint64_t)"void boost::geometry::index::detail::throw_runtime_error(const char *)";
      uint64_t v74 = 28;
      boost::throw_exception<std::runtime_error>(v59, &v73);
    }
    if (v38 - (char *)&v73 == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = v38;
    }
    *((void *)v40 + 1) = 0;
    *(_DWORD *)uint64_t v40 = 1;
    int64_t v41 = (char *)&v69 - (char *)&v68;
    if (v69 == 1) {
      int64_t v41 = 0;
    }
    int64_t v42 = v41 + v69;
    int64_t v68 = v42;
    if (v69 == 1) {
      float v43 = 0;
    }
    else {
      float v43 = (_DWORD *)((char *)&v69 + v69);
    }
    if (v42 == 1) {
      int64_t v44 = 0;
    }
    else {
      int64_t v44 = (char *)&v68 - (char *)v75;
    }
    v75[0] = v44 + v42;
    v75[1] = a7;
    float v45 = boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::detail::variant::get_visitor<boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(v43);
    if (!v45)
    {
      v73.i64[0] = (uint64_t)&unk_1EF7A9E58;
      boost::throw_exception<boost::bad_get>();
    }
    unint64_t v46 = a6->i64[0];
    unint64_t v47 = a5 / a6->i64[0];
    unint64_t v48 = a5 % a6->i64[0];
    if (v48)
    {
      unint64_t v49 = a6->u64[1];
      if (v48 >= v49 || (unint64_t v47 = (a5 - v49) / v46, a5 - v49 == v47 * v46)) {
        ++v47;
      }
      else {
        v47 += 2;
      }
    }
    if (v47 >= 0x22) {
      __assert_rtn("check_capacity", "varray.hpp", 79, "(s <= v.capacity())&&(\"size too big\")");
    }
    BYTE1(v74) = 0;
    uint64_t v54 = *a2;
    uint64_t v66 = *a3;
    unint64_t v67 = v54;
    boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level_packets<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>,boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::expandable_box<boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::default_strategy>>(&v67, &v66, a4, a5, (unint64_t *)a6, (uint64_t)&v70, v45, (uint64_t)&v73, (uint64_t)a7);
    v75[0] = 1;
    if (!BYTE1(v74)) {
      __assert_rtn("get", "pack_create.hpp", 273, "(m_initialized)&&(\"uninitialized envelope accessed\")");
    }
    int64_t v55 = (char *)&v69 - (char *)&v65;
    if (v69 == 1) {
      int64_t v55 = 0;
    }
    int64_t v56 = v55 + v69;
    int64_t v65 = v55 + v69;
    *a1 = v73;
    uint64_t v57 = (char *)((char *)&v65 - (char *)&a1[1]);
    if (v56 == 1) {
      uint64_t v57 = 0;
    }
    a1[1].i64[0] = (uint64_t)&v57[v56];
    id v53 = (int8x16_t *)v75;
  }
  else
  {
    if (a5 >= 0x21) {
      __assert_rtn("per_level", "pack_create.hpp", 306, "(values_count <= parameters.get_max_elements())&&(\"too big number of elements\")");
    }
    if (*a7 == 1) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = (uint64_t)a7 + *a7;
    }
    unint64_t v16 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v15, 0x328uLL);
    v70.i64[0] = v16 - (char *)&v70;
    if (v16 - (char *)&v70 == 1 || v16 == 0)
    {
      double v60 = (const std::runtime_error *)MEMORY[0x1A6259170](v75, "boost::geometry::index::rtree node creation failed");
      v73.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/c5bedca9-a1c5-11ef-a576-f22f22d1b522/Applications/Xcode.ap"
                            "p/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/us"
                            "r/local/include/boost/geometry/index/detail/exception.hpp";
      v73.i64[1] = (uint64_t)"void boost::geometry::index::detail::throw_runtime_error(const char *)";
      uint64_t v74 = 28;
      boost::throw_exception<std::runtime_error>(v60, &v73);
    }
    if (v16 - (char *)&v73 == 1) {
      int v18 = 0;
    }
    else {
      int v18 = v16;
    }
    *((void *)v18 + 1) = 0;
    *(_DWORD *)int v18 = 0;
    if (v70.i64[0] == 1) {
      int64_t v19 = 0;
    }
    else {
      int64_t v19 = (char *)&v70 - (char *)&v72;
    }
    int64_t v20 = v19 + v70.i64[0];
    if (v70.i64[0] == 1) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = (__int32 *)((char *)v70.i32 + v70.i64[0]);
    }
    if (v20 == 1) {
      int64_t v22 = 0;
    }
    else {
      int64_t v22 = (char *)&v72 - (char *)&v73;
    }
    int64_t v72 = v20;
    v73.i64[0] = v22 + v20;
    v73.i64[1] = (uint64_t)a7;
    float v23 = boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::detail::variant::get_visitor<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(v21);
    float v24 = v23;
    if (!v23)
    {
      v75[0] = &unk_1EF7A9E58;
      boost::throw_exception<boost::bad_get>();
    }
    float v25 = (uint64_t *)(*a2)[1];
    uint64_t v63 = *v25;
    boost::geometry::index::detail::varray<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,33ul>::push_back(v23, v25);
    uint64_t v26 = *a2;
    if (!*a2) {
      __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
    }
    v27.i64[0] = v63;
    v27.i64[1] = v63;
    while (1)
    {
      *a2 = v26 + 2;
      if (v26 + 2 == *a3) {
        break;
      }
      float32x4_t v64 = (float32x4_t)v27;
      uint64_t v28 = v26[3];
      v27.i32[0] = *(_DWORD *)v28;
      float32x4_t v61 = (float32x4_t)v27;
      v27.i32[0] = *(_DWORD *)(v28 + 4);
      float32x4_t v62 = (float32x4_t)v27;
      boost::geometry::index::detail::varray<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,33ul>::push_back(v24, (uint64_t *)v28);
      int8x16_t v29 = (int8x16_t)v64;
      v29.i32[0] = v61.i32[0];
      int32x4_t v30 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v64, v61), 0), v29, (int8x16_t)v64);
      int8x16_t v31 = (int8x16_t)v30;
      v31.i32[2] = v61.i32[0];
      int8x16_t v32 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v61, (float32x4_t)vdupq_laneq_s32(v30, 2)), 0), v31, (int8x16_t)v30);
      int8x16_t v33 = v32;
      v33.i32[1] = v62.i32[0];
      int32x4_t v34 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 1), v62), 0), v33, v32);
      int8x16_t v35 = (int8x16_t)v34;
      v35.i32[3] = v62.i32[0];
      int8x16_t v27 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v62, (float32x4_t)vdupq_laneq_s32(v34, 3)), 0), v35, (int8x16_t)v34);
      uint64_t v26 = *a2;
      if (!*a2) {
        __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
      }
    }
    v73.i64[0] = 1;
    int64_t v50 = (char *)&v70 - (char *)&v71;
    if (v70.i64[0] == 1) {
      int64_t v50 = 0;
    }
    int64_t v51 = v50 + v70.i64[0];
    int64_t v71 = v50 + v70.i64[0];
    *a1 = v27;
    BOOL v52 = (char *)((char *)&v71 - (char *)&a1[1]);
    if (v51 == 1) {
      BOOL v52 = 0;
    }
    a1[1].i64[0] = (uint64_t)&v52[v51];
    id v53 = &v73;
  }
  return boost::geometry::index::detail::rtree::subtree_destroyer<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::~subtree_destroyer(v53->i8);
}

void sub_1A42A8934(_Unwind_Exception *a1)
{
  boost::geometry::index::detail::rtree::subtree_destroyer<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::~subtree_destroyer((char *)(v1 - 104));
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::runtime_error>(const std::runtime_error *a1, int8x16_t *a2)
{
  exception = (char *)__cxa_allocate_exception(0x40uLL);
  *(void *)exception = &unk_1EF7A9E28;
  std::runtime_error::runtime_error((std::runtime_error *)(exception + 8), a1);
  *((void *)exception + 5) = 0;
  *((void *)exception + 6) = 0;
  *(void *)exception = &unk_1EF7A9A60;
  *((void *)exception + 1) = &unk_1EF7A9A90;
  *((void *)exception + 3) = &unk_1EF7A9AB8;
  *((void *)exception + 4) = 0;
  *((_DWORD *)exception + 14) = a2[1].i32[0];
  *(int8x16_t *)(exception + 40) = vextq_s8(*a2, *a2, 8uLL);
}

void *boost::geometry::index::detail::varray<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,33ul>::push_back(void *result, uint64_t *a2)
{
  if ((unint64_t)(*result - 33) <= 0xFFFFFFFFFFFFFFDDLL) {
    __assert_rtn("check_capacity", "varray.hpp", 79, "(s <= v.capacity())&&(\"size too big\")");
  }
  int v2 = (char *)result + 12 * *result;
  uint64_t v3 = *a2;
  *((_DWORD *)v2 + 4) = *((_DWORD *)a2 + 2);
  *((void *)v2 + 1) = v3;
  ++*result;
  return result;
}

char *boost::geometry::index::detail::rtree::subtree_destroyer<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::~subtree_destroyer(char *a1)
{
  int v2 = &a1[*(void *)a1];
  if (*(void *)a1 != 1 && v2 != 0)
  {
    int64_t v4 = a1 - (char *)&v12 + *(void *)a1;
    int64_t v12 = v4;
    uint64_t v5 = *((void *)a1 + 1);
    int64_t v6 = (char *)&v12 - (char *)&v13;
    BOOL v7 = v4 == 1;
    if (v4 == 1) {
      int64_t v6 = 0;
    }
    int64_t v8 = v6 + v4;
    if (v7) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v2;
    }
    if (v8 == 1) {
      int64_t v10 = 0;
    }
    else {
      int64_t v10 = (char *)&v13 - (char *)v14;
    }
    int64_t v13 = v8;
    v14[0] = v10 + v8;
    v14[1] = v5;
    boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>>(v9, (char *)v14);
  }
  *(void *)a1 = 1;
  return a1;
}

char *boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level_packets<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>,boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::expandable_box<boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::default_strategy>>(uint64_t **a1, uint64_t **a2, float *a3, unint64_t a4, unint64_t *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v132 = *a1;
  if ((char *)*a2 - (char *)*a1 < 16 || ((char *)*a2 - (char *)*a1) >> 4 != a4) {
    __assert_rtn("per_level_packets", "pack_create.hpp", 389, "(0 < std::distance(first, last) && static_cast<size_type>(std::distance(first, last)) == values_count)&&(\"unexpected parameters\")");
  }
  uint64_t v11 = a5;
  unint64_t v13 = a5[1];
  unint64_t v14 = a4 - v13;
  if (a4 < v13) {
    __assert_rtn("per_level_packets", "pack_create.hpp", 392, "(subtree_counts.minc <= values_count)&&(\"too small number of elements\")");
  }
  uint64_t v15 = a8;
  unint64_t v16 = a7;
  uint64_t v17 = a6;
  uint64_t v19 = a9;
  unint64_t v20 = *a5;
  if (*a5 >= a4)
  {
    uint64_t v139 = *a2;
    uint64_t v140 = v132;
    boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>>(&v141, &v140, &v139, a3, a4, a6, a9);
    uint64_t v64 = v142;
    int64_t v65 = (char *)&v142 - (char *)&v137;
    if (v142 == 1) {
      int64_t v65 = 0;
    }
    uint64_t v66 = v65 + v142;
    int64_t v67 = (char *)&v137 - (char *)&v138;
    if (v66 == 1) {
      int64_t v67 = 0;
    }
    uint64_t v137 = v66;
    *(void *)&long long v138 = v67 + v66;
    *((void *)&v138 + 1) = a9;
    if ((unint64_t)(*v16 - 33) <= 0xFFFFFFFFFFFFFFDDLL) {
      __assert_rtn("check_capacity", "varray.hpp", 79, "(s <= v.capacity())&&(\"size too big\")");
    }
    int64_t v68 = &v16[3 * *v16];
    *(_OWORD *)(v68 + 1) = v141;
    int64_t v69 = (char *)((char *)&v142 - (char *)(v68 + 3));
    if (v64 == 1) {
      int64_t v69 = 0;
    }
    v68[3] = &v69[v64];
    ++*v16;
    *(void *)&long long v138 = 1;
    if (*(unsigned char *)(v15 + 17))
    {
      float v70 = *(float *)&v141;
      float v71 = *(float *)v15;
      if (*(float *)&v141 < *(float *)v15)
      {
        *(_DWORD *)uint64_t v15 = v141;
        float v71 = v70;
      }
      float v72 = *(float *)(v15 + 8);
      if (v70 > v72)
      {
        *(float *)(v15 + _Block_object_dispose(&STACK[0x360], 8) = v70;
        float v72 = v70;
      }
      float v73 = *((float *)&v141 + 1);
      float v74 = *(float *)(v15 + 4);
      if (*((float *)&v141 + 1) < v74)
      {
        *(_DWORD *)(v15 + 4) = DWORD1(v141);
        float v74 = v73;
      }
      float v75 = *(float *)(v15 + 12);
      if (v73 > v75)
      {
        *(float *)(v15 + 12) = v73;
        float v75 = v73;
      }
      float v76 = *((float *)&v141 + 2);
      if (*((float *)&v141 + 2) < v71) {
        *(_DWORD *)uint64_t v15 = DWORD2(v141);
      }
      if (v76 > v72) {
        *(float *)(v15 + _Block_object_dispose(&STACK[0x360], 8) = v76;
      }
      float v77 = *((float *)&v141 + 3);
      if (*((float *)&v141 + 3) < v74) {
        *(_DWORD *)(v15 + 4) = HIDWORD(v141);
      }
      if (v77 > v75) {
        *(float *)(v15 + 12) = v77;
      }
    }
    else
    {
      *(_OWORD *)uint64_t v15 = v141;
      *(unsigned char *)(v15 + 17) = 1;
    }
    return boost::geometry::index::detail::rtree::subtree_destroyer<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::~subtree_destroyer((char *)&v138);
  }
  uint64_t v21 = a2;
  unint64_t v22 = a4 / v20 * v20;
  unint64_t v23 = ((a4 / v20) >> 1) * v20;
  unint64_t v24 = a4 % v20;
  unint64_t v25 = v14 / v20;
  unint64_t v26 = v14 % v20;
  BOOL v27 = v20 > v14;
  unint64_t v28 = ((v14 / v20 + 2) >> 1) * v20;
  if (v27) {
    unint64_t v28 = v26;
  }
  unint64_t v29 = ((v25 + 1) >> 1) * v20;
  if (!v26) {
    unint64_t v28 = v29;
  }
  unint64_t v30 = ((a4 / v20 + 1) >> 1) * v20;
  if (v13 <= v24) {
    unint64_t v31 = v30;
  }
  else {
    unint64_t v31 = v28;
  }
  if (a4 == v22) {
    unint64_t v32 = v23;
  }
  else {
    unint64_t v32 = v31;
  }
  if (!v132 && v32) {
    __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
  }
  int8x16_t v33 = (float *)&v132[2 * v32];
  float v35 = *a3;
  float v34 = a3[1];
  float v36 = a3[2] - *a3;
  float v37 = a3[3] - v34;
  int64_t v131 = v33;
  if (v36 >= v37)
  {
    if (v33 != (float *)v9)
    {
      unint64_t v118 = v32;
      uint64_t v120 = a1;
      id v78 = *a1;
      long long v79 = v33;
      while (1)
      {
        unint64_t v80 = ((char *)v9 - (char *)v78) >> 4;
        if (v80 < 2) {
          goto LABEL_184;
        }
        if (v80 == 3) {
          break;
        }
        if (v80 == 2)
        {
          if (!v9) {
            __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
          }
          if (!v78) {
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          }
          if (*((float *)v9 - 4) < *(float *)v78) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v78, v9 - 2);
          }
          goto LABEL_184;
        }
        if ((char *)v9 - (char *)v78 <= 127)
        {
          if (!v9) {
            __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
          }
          while (2)
          {
            if (v78 == v9 - 2) {
              goto LABEL_184;
            }
            uint64_t v109 = v9;
            if (v78 == v9)
            {
LABEL_207:
              if (v109 != v78) {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v78, v109);
              }
              if (!v78) {
                __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
              }
            }
            else
            {
              if (!v78) {
                __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
              }
              int64_t v110 = v78 + 2;
              if (v78 + 2 != v9)
              {
                float v111 = *(float *)v78;
                uint64_t v109 = v78;
                uint64_t v112 = (float *)(v78 + 2);
                do
                {
                  float v113 = *v112;
                  v112 += 4;
                  float v114 = v113;
                  if (v113 < v111)
                  {
                    float v111 = v114;
                    uint64_t v109 = v110;
                  }
                  int64_t v110 = (uint64_t *)v112;
                }
                while (v112 != (float *)v9);
                goto LABEL_207;
              }
            }
            v78 += 2;
            continue;
          }
        }
        if (!v78) {
          __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
        }
        CMTime v81 = &v78[2 * (v80 >> 1)];
        double v144 = v81;
        double v145 = v78;
        if (!v9) {
          __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
        }
        id v82 = v9 - 2;
        double v143 = v9 - 2;
        int v83 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::pack_utils::point_entries_comparer<0ul> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false>>(&v145, &v144, &v143);
        float v84 = *(float *)v78;
        if (*(float *)v78 < *(float *)v81)
        {
LABEL_124:
          uint64_t v88 = (float *)(v78 + 2);
          uint64_t v89 = 1;
          if (v78 + 2 < v82)
          {
            while (1)
            {
              float v90 = *(float *)v81;
              if (*(float *)&v78[2 * v89] < *(float *)v81)
              {
                uint64_t v91 = &v88[4 * v89];
                do
                {
                  ++v89;
                  float v92 = *v91;
                  v91 += 4;
                }
                while (v92 < v90);
              }
              __int16 v93 = &v78[2 * v89];
              do
              {
                float v94 = *((float *)v82 - 4);
                v82 -= 2;
              }
              while (v94 >= v90);
              if (v93 >= v82) {
                break;
              }
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(&v78[2 * v89], v82);
              ++v83;
              if (v81 == v93) {
                CMTime v81 = v82;
              }
              ++v89;
            }
            long long v79 = v131;
          }
          int64_t v95 = (float *)&v78[2 * v89];
          if (v95 != (float *)v81 && *(float *)v81 < *v95)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(&v78[2 * v89], v81);
            ++v83;
          }
          if (v79 == v95) {
            goto LABEL_184;
          }
          if (!v83)
          {
            if (v79 >= v95)
            {
              uint64_t v100 = v95 + 4;
              if (v95 + 4 == (float *)v9) {
                goto LABEL_184;
              }
              float v101 = *v95;
              while (1)
              {
                float v102 = v101;
                float v101 = *v100;
                if (*v100 < v102) {
                  break;
                }
                v100 += 4;
                if (v100 == (float *)v9) {
                  goto LABEL_184;
                }
              }
            }
            else
            {
              if (v89 == 1) {
                goto LABEL_184;
              }
              float v97 = *(float *)v78;
              uint64_t v98 = 16 * v89 - 16;
              while (1)
              {
                float v99 = v97;
                float v97 = *v88;
                if (*v88 < v99) {
                  break;
                }
                v88 += 4;
                v98 -= 16;
                if (!v98) {
                  goto LABEL_184;
                }
              }
            }
          }
          if (v79 >= v95) {
            uint64_t v96 = (uint64_t *)(v95 + 4);
          }
          else {
            uint64_t v96 = v78;
          }
          if (v79 < v95) {
            uint64_t v9 = &v78[2 * v89];
          }
        }
        else
        {
          long long v85 = (float *)(v9 - 4);
          while (v85 != (float *)v78)
          {
            long long v86 = (uint64_t *)v85;
            float v87 = *v85;
            v85 -= 4;
            if (v87 < *(float *)v81)
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v78, v86);
              ++v83;
              id v82 = v86;
              long long v79 = v131;
              goto LABEL_124;
            }
          }
          uint64_t v96 = v78 + 2;
          if (v84 >= *(float *)v82)
          {
            long long v79 = v131;
            if (v96 == v82) {
              goto LABEL_184;
            }
            while (v84 >= *(float *)v96)
            {
              v96 += 2;
              if (v96 == v82) {
                goto LABEL_184;
              }
            }
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v96, v9 - 2);
            v96 += 2;
          }
          else
          {
            long long v79 = v131;
          }
          if (v96 == v82) {
            goto LABEL_184;
          }
          while (1)
          {
            float v103 = *(float *)v78;
            for (float i = *(float *)v96; v103 >= i; float i = v105)
            {
              float v105 = *((float *)v96 + 4);
              v96 += 2;
            }
            do
            {
              float v106 = *((float *)v82 - 4);
              v82 -= 2;
            }
            while (v103 < v106);
            if (v96 >= v82) {
              break;
            }
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v96, v82);
            v96 += 2;
          }
          if (v79 < (float *)v96) {
            goto LABEL_184;
          }
        }
        id v78 = v96;
        if (v79 == (float *)v9) {
          goto LABEL_184;
        }
      }
      *(void *)&long long v141 = v78;
      if (!v78) {
        __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
      }
      *(void *)&long long v138 = v78 + 2;
      if (!v9) {
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      }
      v146[0] = v9 - 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::pack_utils::point_entries_comparer<0ul> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false>>((uint64_t **)&v141, (uint64_t **)&v138, v146);
LABEL_184:
      if (!v132) {
        __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
      }
      float v35 = *a3;
      float v36 = a3[2] - *a3;
      unint64_t v16 = a7;
      uint64_t v15 = a8;
      uint64_t v19 = a9;
      uint64_t v17 = a6;
      uint64_t v21 = a2;
      uint64_t v11 = a5;
      unint64_t v32 = v118;
      a1 = v120;
    }
    long long v141 = *(_OWORD *)a3;
    long long v138 = v141;
    *((float *)&v141 + 2) = v35 + (float)(v36 * 0.5);
    *(float *)&long long v138 = *((float *)&v141 + 2);
    goto LABEL_197;
  }
  if (v33 == (float *)v9) {
    goto LABEL_196;
  }
  unint64_t v117 = v32;
  uint64_t v119 = a1;
  uint64_t v38 = *a1;
  unint64_t v39 = (unint64_t)v33;
  while (1)
  {
    unint64_t v40 = ((char *)v9 - (char *)v38) >> 4;
    if (v40 < 2) {
      goto LABEL_194;
    }
    if (v40 == 3)
    {
      *(void *)&long long v141 = v38;
      if (!v38) {
        __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
      }
      *(void *)&long long v138 = v38 + 2;
      if (!v9) {
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      }
      v146[0] = v9 - 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::pack_utils::point_entries_comparer<1ul> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false>>((uint64_t *)&v141, (uint64_t *)&v138, (uint64_t *)v146);
      goto LABEL_194;
    }
    if (v40 == 2)
    {
      if (!v9) {
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      }
      if (!v38) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      if (*((float *)v9 - 3) < *((float *)v38 + 1)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v38, v9 - 2);
      }
      goto LABEL_194;
    }
    if ((char *)v9 - (char *)v38 <= 127)
    {
      if (!v9) {
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      }
      while (2)
      {
        if (v38 == v9 - 2) {
          goto LABEL_194;
        }
        int64_t v115 = v9;
        if (v38 == v9)
        {
LABEL_219:
          if (v115 != v38) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v38, v115);
          }
          if (!v38) {
            __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
          }
        }
        else
        {
          if (!v38) {
            __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
          }
          uint64_t v116 = v38 + 2;
          int64_t v115 = v38;
          if (v38 + 2 != v9)
          {
            do
            {
              if (*((float *)v116 + 1) < *((float *)v115 + 1)) {
                int64_t v115 = v116;
              }
              v116 += 2;
            }
            while (v116 != v9);
            goto LABEL_219;
          }
        }
        v38 += 2;
        continue;
      }
    }
    if (!v38) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
    int64_t v41 = &v38[2 * (v40 >> 1)];
    double v144 = v41;
    double v145 = v38;
    if (!v9) {
      __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
    }
    int64_t v42 = v9 - 2;
    double v143 = v9 - 2;
    int v43 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::pack_utils::point_entries_comparer<1ul> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false>>((uint64_t *)&v145, (uint64_t *)&v144, (uint64_t *)&v143);
    float v44 = *((float *)v38 + 1);
    float v45 = *((float *)v41 + 1);
    if (v44 < v45) {
      break;
    }
    unint64_t v46 = v9 - 4;
    while (v46 != v38)
    {
      unint64_t v47 = v46;
      float v48 = *((float *)v46 + 1);
      v46 -= 2;
      if (v48 < v45)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v38, v47);
        ++v43;
        int64_t v42 = v47;
        unint64_t v39 = (unint64_t)v131;
        goto LABEL_34;
      }
    }
    double v59 = v38 + 2;
    if (v44 >= *((float *)v9 - 3))
    {
      unint64_t v39 = (unint64_t)v131;
      if (v59 == v42) {
        goto LABEL_194;
      }
      while (v44 >= *((float *)v59 + 1))
      {
        v59 += 2;
        if (v59 == v42) {
          goto LABEL_194;
        }
      }
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v59, v9 - 2);
      v59 += 2;
    }
    else
    {
      unint64_t v39 = (unint64_t)v131;
    }
    if (v59 == v42) {
      goto LABEL_194;
    }
    while (1)
    {
      float v61 = *((float *)v38 + 1);
      if (v61 >= *((float *)v59 + 1))
      {
        do
        {
          int64_t v56 = v59 + 2;
          float v62 = *((float *)v59 + 5);
          v59 += 2;
        }
        while (v61 >= v62);
      }
      else
      {
        int64_t v56 = v59;
      }
      do
      {
        float v63 = *((float *)v42 - 3);
        v42 -= 2;
      }
      while (v61 < v63);
      if (v56 >= v42) {
        break;
      }
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v56, v42);
      double v59 = v56 + 2;
    }
    if (v39 < (unint64_t)v56) {
      goto LABEL_194;
    }
LABEL_85:
    uint64_t v38 = v56;
    if ((uint64_t *)v39 == v9) {
      goto LABEL_194;
    }
  }
LABEL_34:
  if (v38 + 2 >= v42)
  {
    uint64_t j = 1;
  }
  else
  {
    for (uint64_t j = 1; ; ++j)
    {
      float v50 = *((float *)v41 + 1);
      if (*((float *)&v38[2 * j] + 1) < v50)
      {
        int64_t v51 = (float *)&v38[2 * j + 2] + 1;
        do
        {
          ++j;
          float v52 = *v51;
          v51 += 4;
        }
        while (v52 < v50);
      }
      unint64_t v53 = (unint64_t)&v38[2 * j];
      do
      {
        float v54 = *((float *)v42 - 3);
        v42 -= 2;
      }
      while (v54 >= v50);
      if (v53 >= (unint64_t)v42) {
        break;
      }
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(&v38[2 * j], v42);
      ++v43;
      if (v41 == (uint64_t *)v53) {
        int64_t v41 = v42;
      }
      if (!v41) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
    }
    unint64_t v39 = (unint64_t)v131;
  }
  int64_t v55 = &v38[2 * j];
  if (v55 != v41)
  {
    if (!v41) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*((float *)v41 + 1) < *((float *)v55 + 1))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(&v38[2 * j], v41);
      ++v43;
    }
  }
  if ((uint64_t *)v39 == v55) {
    goto LABEL_194;
  }
  if (v43)
  {
LABEL_54:
    if (v39 >= (unint64_t)v55) {
      int64_t v56 = v55 + 2;
    }
    else {
      int64_t v56 = v38;
    }
    if (v39 < (unint64_t)v55) {
      uint64_t v9 = &v38[2 * j];
    }
    goto LABEL_85;
  }
  if (v39 < (unint64_t)v55)
  {
    if (j == 1) {
      goto LABEL_194;
    }
    uint64_t v57 = (float *)v38 + 5;
    uint64_t v58 = 16 * j - 16;
    while (*v57 >= *(v57 - 4))
    {
      v57 += 4;
      v58 -= 16;
      if (!v58) {
        goto LABEL_194;
      }
    }
    goto LABEL_54;
  }
  for (size_t k = v55 + 2; k != v9; k += 2)
  {
    if (*((float *)k + 1) < *((float *)k - 3)) {
      goto LABEL_54;
    }
  }
LABEL_194:
  if (!v132) {
    __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
  }
  float v34 = a3[1];
  float v37 = a3[3] - v34;
  unint64_t v16 = a7;
  uint64_t v15 = a8;
  uint64_t v19 = a9;
  uint64_t v17 = a6;
  uint64_t v21 = a2;
  uint64_t v11 = a5;
  unint64_t v32 = v117;
  a1 = v119;
LABEL_196:
  *(void *)&long long v141 = *(void *)a3;
  *((float *)&v141 + 2) = a3[2];
  long long v138 = *(_OWORD *)a3;
  *((float *)&v141 + 3) = v34 + (float)(v37 * 0.5);
  *((float *)&v138 + 1) = *((float *)&v141 + 3);
LABEL_197:
  uint64_t v108 = *a1;
  unsigned __int8 v135 = v131;
  uint64_t v136 = v108;
  boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level_packets<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>,boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::expandable_box<boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::default_strategy>>(&v136, &v135, &v141, v32, v11, v17, v16, v15, v19);
  int64_t v133 = *v21;
  int64_t v134 = v131;
  return (char *)boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level_packets<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>,boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::expandable_box<boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::default_strategy>>(&v134, &v133, &v138, a4 - v32, v11, v17, v16, v15, v19);
}

void sub_1A42A99D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  boost::geometry::index::detail::rtree::subtree_destroyer<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::~subtree_destroyer(va);
  _Unwind_Resume(a1);
}

uint64_t *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(uint64_t *result, uint64_t *a2)
{
  if (!result) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if (!a2) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  uint64_t v2 = *result;
  *uint64_t result = *a2;
  *a2 = v2;
  uint64_t v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::pack_utils::point_entries_comparer<1ul> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (!*a2) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  uint64_t v5 = *a1;
  if (!v5) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  float v8 = *(float *)(v3 + 4);
  uint64_t v9 = *a3;
  if (v8 < *(float *)(v5 + 4))
  {
    if (!v9) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*(float *)(v9 + 4) < v8)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>((uint64_t *)v5, (uint64_t *)v9);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>((uint64_t *)v5, (uint64_t *)v3);
    uint64_t v10 = *a3;
    if (!*a3) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    uint64_t v11 = *a2;
    if (!*a2) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
LABEL_14:
    if (*(float *)(v10 + 4) < *(float *)(v11 + 4))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>((uint64_t *)v11, (uint64_t *)v10);
      return 2;
    }
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if (*(float *)(v9 + 4) < v8)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>((uint64_t *)v3, (uint64_t *)v9);
    uint64_t v10 = *a2;
    if (!*a2) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    uint64_t v11 = *a1;
    if (!*a1) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    goto LABEL_14;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::pack_utils::point_entries_comparer<0ul> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false>>(uint64_t **a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3 = *a2;
  if (!*a2) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  uint64_t v5 = *a1;
  if (!v5) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  float v8 = *(float *)v3;
  uint64_t v9 = *a3;
  if (*(float *)v3 < *(float *)v5)
  {
    if (!v9) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*(float *)v9 < v8)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v5, v9);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v5, v3);
    uint64_t v10 = *a3;
    if (!*a3) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    uint64_t v11 = *a2;
    if (!*a2) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
LABEL_14:
    if (*(float *)v10 < *(float *)v11)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v11, v10);
      return 2;
    }
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if (*(float *)v9 < v8)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v3, v9);
    uint64_t v10 = *a2;
    if (!*a2) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    uint64_t v11 = *a1;
    if (!*a1) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    goto LABEL_14;
  }
  return 0;
}

uint64_t boost::wrapexcept<std::runtime_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EF7A9EA8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void non-virtual thunk to'boost::wrapexcept<std::runtime_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1EF7A9EA8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);

  JUMPOUT(0x1A6259210);
}

{
  uint64_t vars8;

  *a1 = &unk_1EF7A9EA8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void non-virtual thunk to'boost::wrapexcept<std::runtime_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EF7A9EA8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  JUMPOUT(0x1A6259210);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1EF7A9EA8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void boost::wrapexcept<std::runtime_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EF7A9EA8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  JUMPOUT(0x1A6259210);
}

void boost::wrapexcept<std::runtime_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::runtime_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1A42AA154(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<std::runtime_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EF7A9E28;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1EF7A9EA8;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1EF7A9A60;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = &unk_1EF7A9A90;
  *(void *)(a1 + 24) = &unk_1EF7A9AB8;
  return a1;
}

void sub_1A42AA274(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::runtime_error>::clone()
{
}

void sub_1A42AA438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

BOOL pf::TimezoneArchiveLineParser::parseLine(pf::TimezoneArchiveLineParser *this, char *__s)
{
  uint64_t v4 = strrchr(__s, 44);
  if (!v4) {
    return 0;
  }
  long long v5 = v4;
  uint64_t v28 = 0;
  int v6 = sscanf(__s, "%f,%f", (char *)&v28 + 4, &v28);
  BOOL v7 = v6 == 2;
  if (v6 == 2)
  {
    __int16 v8 = pf::TimezoneArchiveLineParser::timeZoneNameIndex(this, v5 + 1);
    __int16 v9 = v8;
    uint64_t v10 = v28;
    unint64_t v12 = *((void *)this + 12);
    unint64_t v11 = *((void *)this + 13);
    if (v12 >= v11)
    {
      uint64_t v14 = *((void *)this + 11);
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 2);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0x1555555555555555) {
        std::vector<pf::SceneTaxonomyNode const*>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 2);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x1555555555555555;
      }
      else {
        unint64_t v18 = v16;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>>(v18);
      unint64_t v20 = &v19[12 * v15];
      unint64_t v22 = &v19[12 * v21];
      *(_DWORD *)unint64_t v20 = HIDWORD(v10);
      *((_DWORD *)v20 + 1) = v10;
      *((_WORD *)v20 + 4) = v9;
      unint64_t v13 = v20 + 12;
      unint64_t v24 = (_DWORD *)*((void *)this + 11);
      unint64_t v23 = (_DWORD *)*((void *)this + 12);
      if (v23 != v24)
      {
        do
        {
          uint64_t v25 = *(void *)(v23 - 3);
          v23 -= 3;
          int v26 = v23[2];
          *(void *)(v20 - 12) = v25;
          v20 -= 12;
          *((_DWORD *)v20 + 2) = v26;
        }
        while (v23 != v24);
        unint64_t v23 = (_DWORD *)*((void *)this + 11);
      }
      *((void *)this + 11) = v20;
      *((void *)this + 12) = v13;
      *((void *)this + 13) = v22;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v12 = HIDWORD(v28);
      *(_DWORD *)(v12 + 4) = v10;
      unint64_t v13 = (char *)(v12 + 12);
      *(_WORD *)(v12 + _Block_object_dispose(&STACK[0x360], 8) = v8;
    }
    *((void *)this + 12) = v13;
  }
  return v7;
}

uint64_t pf::TimezoneArchiveLineParser::timeZoneNameIndex(pf::TimezoneArchiveLineParser *this, char *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v55, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
  int8x8_t v6 = *(int8x8_t *)((char *)this + 120);
  if (!*(void *)&v6) {
    goto LABEL_18;
  }
  unint64_t v7 = v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v2 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v5;
    if (v5 >= *(void *)&v6) {
      unint64_t v9 = v5 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v6 - 1) & v5;
  }
  uint64_t v10 = *(uint64_t ***)(*((void *)this + 14) + 8 * v9);
  if (v10)
  {
    for (float i = *v10; i; float i = (uint64_t *)*i)
    {
      unint64_t v12 = i[1];
      if (v12 == v7)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)__p)) {
          break;
        }
      }
      else
      {
        if (v2 > 1)
        {
          if (v12 >= *(void *)&v6) {
            v12 %= *(void *)&v6;
          }
        }
        else
        {
          v12 &= *(void *)&v6 - 1;
        }
        if (v12 != v9) {
          goto LABEL_18;
        }
      }
    }
  }
  else
  {
LABEL_18:
    float i = 0;
  }
  if (v59 < 0)
  {
    operator delete(__p[0]);
    if (i) {
      goto LABEL_21;
    }
  }
  else if (i)
  {
LABEL_21:
    unsigned __int16 v13 = *((_WORD *)i + 20);
    goto LABEL_111;
  }
  uint64_t v14 = *((void *)this + 10);
  unsigned __int16 v13 = *(_WORD *)(v14 + 16);
  unint64_t v15 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v55);
  unint64_t v16 = v15;
  unint64_t v17 = *((void *)this + 15);
  if (v17)
  {
    uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v18.i16[0] = vaddlv_u8(v18);
    unint64_t v19 = v18.u32[0];
    if (v18.u32[0] > 1uLL)
    {
      unint64_t v2 = v15;
      if (v15 >= v17) {
        unint64_t v2 = v15 % v17;
      }
    }
    else
    {
      unint64_t v2 = (v17 - 1) & v15;
    }
    unint64_t v20 = *(unsigned __int8 ***)(*((void *)this + 14) + 8 * v2);
    if (v20)
    {
      for (uint64_t j = *v20; j; uint64_t j = *(unsigned __int8 **)j)
      {
        unint64_t v22 = *((void *)j + 1);
        if (v22 == v16)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, (unsigned __int8 *)v55)) {
            goto LABEL_99;
          }
        }
        else
        {
          if (v19 > 1)
          {
            if (v22 >= v17) {
              v22 %= v17;
            }
          }
          else
          {
            v22 &= v17 - 1;
          }
          if (v22 != v2) {
            break;
          }
        }
      }
    }
  }
  unint64_t v23 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v23 = 0;
  *((void *)v23 + 1) = v16;
  unint64_t v24 = (std::string *)(v23 + 16);
  if (SHIBYTE(v56) < 0)
  {
    std::string::__init_copy_ctor_external(v24, (const std::string::value_type *)v55[0], (std::string::size_type)v55[1]);
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)v55;
    *((void *)v23 + 4) = v56;
  }
  uint64_t v25 = (void *)((char *)this + 128);
  *((_WORD *)v23 + 20) = v13;
  float v26 = (float)(unint64_t)(*((void *)this + 17) + 1);
  float v27 = *((float *)this + 36);
  if (!v17 || (float)(v27 * (float)v17) < v26)
  {
    BOOL v28 = 1;
    if (v17 >= 3) {
      BOOL v28 = (v17 & (v17 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v17);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      int8x8_t prime = (int8x8_t)v30;
    }
    else {
      int8x8_t prime = (int8x8_t)v29;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v17 = *((void *)this + 15);
    if (*(void *)&prime > v17) {
      goto LABEL_55;
    }
    if (*(void *)&prime < v17)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*((unint64_t *)this + 17) / *((float *)this + 36));
      if (v17 < 3 || (uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (*(void *)&prime <= v38) {
        int8x8_t prime = (int8x8_t)v38;
      }
      if (*(void *)&prime >= v17)
      {
        unint64_t v17 = *((void *)this + 15);
      }
      else
      {
        if (prime)
        {
LABEL_55:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v32 = operator new(8 * *(void *)&prime);
          int8x16_t v33 = (void *)*((void *)this + 14);
          *((void *)this + 14) = v32;
          if (v33) {
            operator delete(v33);
          }
          uint64_t v34 = 0;
          *((int8x8_t *)this + 15) = prime;
          do
            *(void *)(*((void *)this + 14) + 8 * v34++) = 0;
          while (*(void *)&prime != v34);
          float v35 = (void *)*v25;
          if (*v25)
          {
            unint64_t v36 = v35[1];
            uint8x8_t v37 = (uint8x8_t)vcnt_s8(prime);
            v37.i16[0] = vaddlv_u8(v37);
            if (v37.u32[0] > 1uLL)
            {
              if (v36 >= *(void *)&prime) {
                v36 %= *(void *)&prime;
              }
            }
            else
            {
              v36 &= *(void *)&prime - 1;
            }
            *(void *)(*((void *)this + 14) + 8 * v36) = v25;
            int64_t v41 = (void *)*v35;
            if (*v35)
            {
              do
              {
                unint64_t v42 = v41[1];
                if (v37.u32[0] > 1uLL)
                {
                  if (v42 >= *(void *)&prime) {
                    v42 %= *(void *)&prime;
                  }
                }
                else
                {
                  v42 &= *(void *)&prime - 1;
                }
                if (v42 != v36)
                {
                  uint64_t v43 = *((void *)this + 14);
                  if (!*(void *)(v43 + 8 * v42))
                  {
                    *(void *)(v43 + 8 * v42) = v35;
                    goto LABEL_80;
                  }
                  *float v35 = *v41;
                  *int64_t v41 = **(void **)(*((void *)this + 14) + 8 * v42);
                  **(void **)(*((void *)this + 14) + 8 * v42) = v41;
                  int64_t v41 = v35;
                }
                unint64_t v42 = v36;
LABEL_80:
                float v35 = v41;
                int64_t v41 = (void *)*v41;
                unint64_t v36 = v42;
              }
              while (v41);
            }
          }
          unint64_t v17 = (unint64_t)prime;
          goto LABEL_84;
        }
        float v54 = (void *)*((void *)this + 14);
        *((void *)this + 14) = 0;
        if (v54) {
          operator delete(v54);
        }
        unint64_t v17 = 0;
        *((void *)this + 15) = 0;
      }
    }
LABEL_84:
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v16 >= v17) {
        unint64_t v2 = v16 % v17;
      }
      else {
        unint64_t v2 = v16;
      }
    }
    else
    {
      unint64_t v2 = (v17 - 1) & v16;
    }
  }
  uint64_t v44 = *((void *)this + 14);
  float v45 = *(void **)(v44 + 8 * v2);
  if (v45)
  {
    *(void *)unint64_t v23 = *v45;
  }
  else
  {
    *(void *)unint64_t v23 = *v25;
    *uint64_t v25 = v23;
    *(void *)(v44 + 8 * v2) = v25;
    if (!*(void *)v23) {
      goto LABEL_98;
    }
    unint64_t v46 = *(void *)(*(void *)v23 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v46 >= v17) {
        v46 %= v17;
      }
    }
    else
    {
      v46 &= v17 - 1;
    }
    float v45 = (void *)(*((void *)this + 14) + 8 * v46);
  }
  void *v45 = v23;
LABEL_98:
  ++*((void *)this + 17);
  uint64_t v14 = *((void *)this + 10);
LABEL_99:
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)__p, a2, (void *)this + 19);
  uint64_t v47 = *(void *)(v14 + 8);
  if (v47 == 1) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = v47 + v14 + 8;
  }
  uint64_t v49 = *(void *)(v14 + 16);
  uint64_t v50 = v48 + 32 * v49;
  if (v49 == *(void *)(v14 + 24))
  {
    boost::container::vector<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>*,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(&v57, v14, v50, (uint64_t)__p);
    boost::container::vec_iterator<boost::interprocess::offset_ptr<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,long,unsigned long,0ul>,false>::operator*(v57);
  }
  else
  {
    if (v48) {
      uint64_t v51 = v50 - (void)&v57;
    }
    else {
      uint64_t v51 = 1;
    }
    uint64_t v57 = v51;
    if (v51 == 1) {
      float v52 = 0;
    }
    else {
      float v52 = (char *)&__p[-1] + v51;
    }
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v52, (uint64_t)__p);
    ++*(void *)(v14 + 16);
  }
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)__p);
LABEL_111:
  if (SHIBYTE(v56) < 0) {
    operator delete(v55[0]);
  }
  return v13;
}

void sub_1A42AABF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int8x8_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int8x8_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t boost::container::vector<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>*,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v5 = (char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 24);
  if (v6 != *(void *)(a2 + 16)) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  if (*(void *)a2 == 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)a2 + a2;
  }
  unint64_t v9 = *(void *)(v8 + 48) >> 5;
  if (v9 == v6) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
  }
  if (v6 >> 61 > 4) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = 8 * v6;
  }
  if (v6 >> 61) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = 8 * v6 / 5;
  }
  unint64_t v15 = v6 + 1;
  if (v14 < v9) {
    unint64_t v9 = v14;
  }
  if (v15 > v9) {
    unint64_t v16 = v6 + 1;
  }
  else {
    unint64_t v16 = v9;
  }
  int64_t v17 = v5 - (char *)&v166;
  if (v4 == 1) {
    int64_t v17 = 0;
  }
  uint64_t v166 = v17 + v4;
  unint64_t v167 = v16;
  boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command((char *)&v165, (void *)a2, v15, &v167, &v166);
  if (v166 == 1)
  {
    uint64_t v161 = v4;
    if (v165 == 1) {
      uint8x8_t v18 = 0;
    }
    else {
      uint8x8_t v18 = (char *)&v165 + v165;
    }
    uint64_t v19 = v18 - (char *)&v174;
    if (!v18) {
      uint64_t v19 = 1;
    }
    uint64_t v20 = v18 - (char *)&v175;
    if (!v18) {
      uint64_t v20 = 1;
    }
    uint64_t v21 = v18 - (char *)&v168;
    if (!v18) {
      uint64_t v21 = 1;
    }
    int64_t v22 = (char *)&v168 - (char *)&v169;
    uint64_t v23 = *(void *)(a2 + 8);
    uint64_t v24 = *(void *)(a2 + 16);
    BOOL v64 = v23 == 1;
    uint64_t v159 = v5;
    uint64_t v25 = &v5[v23];
    if (v64) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = (uint64_t)v25;
    }
    if (v21 == 1) {
      int64_t v22 = 0;
    }
    uint64_t v168 = v21;
    uint64_t v169 = v22 + v21;
    uint64_t v170 = a2;
    uint64_t v171 = v167;
    unint64_t v155 = v167;
    uint64_t v27 = v26 + 32 * v24;
    uint64_t v174 = v19;
    uint64_t v175 = v20;
    int64_t v28 = (char *)&v175 - (char *)&v176;
    if (v20 == 1) {
      int64_t v28 = 0;
    }
    int64_t v29 = v28 + v20;
    int64_t v30 = (char *)&v174 - (char *)&v176.u64[1];
    if (v19 == 1) {
      int64_t v30 = 0;
    }
    v176.i64[0] = v29;
    v176.i64[1] = v30 + v19;
    uint64_t v177 = a2;
    if (v26 == a3)
    {
      int8x16_t v33 = v18;
    }
    else
    {
      uint64_t v153 = a1;
      uint64_t v31 = v18 - (char *)v178;
      uint64_t v32 = v26;
      int8x16_t v33 = v18;
      do
      {
        if (v33) {
          uint64_t v34 = v31;
        }
        else {
          uint64_t v34 = 1;
        }
        v178[0] = v34;
        if (v34 == 1) {
          float v35 = 0;
        }
        else {
          float v35 = (char *)v178 + v34;
        }
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v35, v32);
        v32 += 32;
        v33 += 32;
        v31 += 32;
      }
      while (v32 != a3);
      a1 = v153;
    }
    uint64_t v53 = v33 - (char *)&v173;
    int64_t v54 = (char *)&v173 - (char *)&v176.u64[1];
    uint64_t v55 = v33 - (char *)v178;
    if (!v33) {
      uint64_t v53 = 1;
    }
    uint64_t v173 = v53;
    if (!v33) {
      uint64_t v55 = 1;
    }
    if (v53 == 1) {
      int64_t v54 = 0;
    }
    v176.i64[1] = v54 + v53;
    v178[0] = v55;
    if (v55 == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = (char *)v178 + v55;
    }
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v56, a4);
    uint64_t v172 = v33 - (char *)&v172 + 32;
    int64_t v57 = (char *)&v172 - (char *)&v176.u64[1];
    if (v33 - (char *)&v172 == -31) {
      int64_t v57 = 0;
    }
    v176.i64[1] = v57 + v33 - (char *)&v172 + 32;
    if (v27 != a3)
    {
      uint64_t v58 = v33 + 32;
      uint64_t v59 = 96 - (void)&vars0;
      uint64_t v60 = a3;
      do
      {
        v178[0] = &v58[v59];
        if (&v58[v59] == (char *)1) {
          float v61 = 0;
        }
        else {
          float v61 = v58;
        }
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v61, v60);
        v60 += 32;
        v58 += 32;
      }
      while (v60 != v27);
    }
    int64x2_t v176 = vdupq_n_s64(1uLL);
    boost::container::dtl::scoped_destructor_range<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_range(v176.i64);
    uint64_t v169 = 1;
    size_t v5 = v159;
    if (v26)
    {
      int64_t v62 = v159 - (char *)&v176;
      if (*(void *)v159 == 1) {
        int64_t v62 = 0;
      }
      v176.i64[0] = v62 + *(void *)v159;
      float v63 = &v176.i8[v176.i64[0]];
      BOOL v64 = v176.i64[0] == 1 || v63 == 0;
      if (!v64)
      {
        if (*(void *)a2 == 1) {
          int64_t v65 = 0;
        }
        else {
          int64_t v65 = (char *)(*(void *)a2 + a2);
        }
        boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v65, (uint64_t)v63);
      }
    }
    uint64_t v66 = v18 - (char *)&v176;
    if (!v18) {
      uint64_t v66 = 1;
    }
    int64_t v67 = (char *)((char *)&v176 - v159);
    if (v66 == 1) {
      int64_t v67 = 0;
    }
    int64_t v68 = &v67[v66];
    uint64_t v69 = *(void *)(a2 + 16) + 1;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = v68;
    *(void *)(a2 + 16) = v69;
    *(void *)(a2 + 24) = v155;
    uint64_t result = (uint64_t)boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(&v169);
    uint64_t v4 = v161;
    goto LABEL_233;
  }
  if (*(void *)v5 == 1) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = (uint64_t)&v5[*(void *)v5];
  }
  if (v165 == 1) {
    uint8x8_t v37 = 0;
  }
  else {
    uint8x8_t v37 = (char *)&v165 + v165;
  }
  unint64_t v38 = v167;
  uint64_t v39 = v36 - (void)v37;
  if ((char *)v36 != v37)
  {
    uint64_t v40 = *(void *)(a2 + 16);
    uint64_t v41 = v36 + 32 * v40;
    uint64_t v42 = v37 - (char *)&v176;
    if (!v37) {
      uint64_t v42 = 1;
    }
    uint64_t v43 = (char *)((char *)&v176 - v5);
    if (v42 == 1) {
      uint64_t v43 = 0;
    }
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v38;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = &v43[v42];
    unint64_t v44 = (a3 - v36) >> 5;
    unint64_t v45 = v39 >> 5;
    uint64_t v46 = v36 - (void)&v175;
    if (!v36) {
      uint64_t v46 = 1;
    }
    uint64_t v47 = -8;
    if (v46 == 1) {
      uint64_t v47 = 0;
    }
    uint64_t v175 = v46;
    v176.i64[0] = v47 + v46;
    v176.i64[1] = a2;
    uint64_t v177 = v40;
    unint64_t v156 = v39 >> 5;
    uint64_t v157 = a4;
    int64_t v160 = v5;
    uint64_t v162 = v4;
    uint64_t v151 = v40;
    if (v45 >= v44 + 1)
    {
      unint64_t v147 = v44 + 1;
      uint64_t v150 = (a3 - v36) >> 5;
      if (v36 == a3)
      {
        long long v79 = v37;
      }
      else
      {
        uint64_t v77 = v37 - (char *)&v169;
        uint64_t v78 = v36;
        long long v79 = v37;
        do
        {
          if (v79) {
            uint64_t v80 = v77;
          }
          else {
            uint64_t v80 = 1;
          }
          uint64_t v169 = v80;
          if (v80 == 1) {
            CMTime v81 = 0;
          }
          else {
            CMTime v81 = (char *)&v169 + v80;
          }
          boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v81, v78);
          v78 += 32;
          v79 += 32;
          v77 += 32;
        }
        while (v78 != a3);
      }
      *(void *)(a2 + 16) = v150;
      uint64_t v95 = v79 - (char *)&v169;
      if (!v79) {
        uint64_t v95 = 1;
      }
      uint64_t v169 = v95;
      if (v95 == 1) {
        uint64_t v96 = 0;
      }
      else {
        uint64_t v96 = (char *)&v169 + v95;
      }
      boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v96, v157);
      *(void *)(a2 + 16) = v147;
      uint64_t v97 = v151 + 1;
      if (v151 + 1 <= v156)
      {
        if (v151 != v150)
        {
          if (v41 != a3)
          {
            float v106 = &v37[32 * v147];
            uint64_t v107 = &v37[32 * v150] - (char *)&v169 + 32;
            uint64_t v108 = a3;
            do
            {
              if (v106) {
                uint64_t v109 = v107;
              }
              else {
                uint64_t v109 = 1;
              }
              uint64_t v169 = v109;
              if (v109 == 1) {
                int64_t v110 = 0;
              }
              else {
                int64_t v110 = (char *)&v169 + v109;
              }
              boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v110, v108);
              v108 += 32;
              v106 += 32;
              v107 += 32;
            }
            while (v108 != v41);
          }
          *(void *)(a2 + 16) = v97;
        }
        v176.i64[0] = 1;
        uint64_t v177 = 0;
        uint64_t v4 = v162;
      }
      else
      {
        unint64_t v152 = v151 + 1 - v156;
        uint64_t v158 = v97;
        if (v156 != v147)
        {
          uint64_t v98 = &v37[32 * v147];
          uint64_t v99 = v150 - v156 + 1;
          uint64_t v100 = &v37[32 * v150] - (char *)&v169 + 32;
          uint64_t v101 = a3;
          do
          {
            if (v98) {
              uint64_t v102 = v100;
            }
            else {
              uint64_t v102 = 1;
            }
            uint64_t v169 = v102;
            if (v102 == 1) {
              float v103 = 0;
            }
            else {
              float v103 = (char *)&v169 + v102;
            }
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v103, v101);
            v101 += 32;
            v98 += 32;
            v100 += 32;
          }
          while (!__CFADD__(v99++, 1));
        }
        v177 -= v152;
        v176.i64[0] += 32 * v152;
        size_t v5 = v160;
        *(void *)(a2 + 16) = v158;
        uint64_t v105 = a3 + 32 * (v156 - v147);
        uint64_t v4 = v162;
        if (v105 != v36)
        {
          while (v105 != v41)
          {
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v36, v105);
            v105 += 32;
            v36 += 32;
          }
        }
        v176.i64[0] = 1;
        uint64_t v177 = 0;
      }
      goto LABEL_232;
    }
    int64_t v154 = a1;
    uint64_t v145 = v36 - (void)v37;
    if (v45 <= v44)
    {
      if ((char *)v36 != v37)
      {
        uint64_t v82 = v37 - (char *)&v169;
        uint64_t v83 = v39 >> 5;
        uint64_t v84 = v36;
        long long v85 = v37;
        do
        {
          --v83;
          if (v85) {
            uint64_t v86 = v82;
          }
          else {
            uint64_t v86 = 1;
          }
          uint64_t v169 = v86;
          if (v86 == 1) {
            float v87 = 0;
          }
          else {
            float v87 = (char *)&v169 + v86;
          }
          boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v87, v84);
          v84 += 32;
          v85 += 32;
          v82 += 32;
        }
        while (v83);
      }
      v176.i64[0] = 1;
      uint64_t v177 = 0;
      uint64_t v88 = v151;
      if ((char *)v36 != v37) {
        uint64_t v88 = v151 + 1;
      }
      *(void *)(a2 + 16) = v88;
      if (v36 + 32 * v156 == a3)
      {
        uint64_t v90 = v36;
        a1 = v154;
        uint64_t v91 = v157;
        unint64_t v92 = v36 - (void)v37;
      }
      else
      {
        uint64_t v89 = 32 * v156;
        uint64_t v90 = v36;
        a1 = v154;
        uint64_t v91 = v157;
        unint64_t v92 = v36 - (void)v37;
        do
          uint64_t v90 = boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v90, v90 + v89)+ 32;
        while (v90 + v89 != a3);
      }
      size_t v5 = v160;
      if ((char *)v36 == v37) {
        __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 215, "n == 1");
      }
      uint64_t v130 = boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v90, v91);
      if (v92 >= 0x40 && v41 != a3)
      {
        uint64_t v131 = v130 + 32;
        uint64_t v132 = a3;
        do
        {
          uint64_t v133 = boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v131, v132);
          v132 += 32;
          uint64_t v131 = v133 + 32;
        }
        while (v132 != v41);
      }
      goto LABEL_232;
    }
    unint64_t v146 = v45 - v44;
    uint64_t v149 = (a3 - v36) >> 5;
    if (v36 == a3)
    {
      uint64_t v50 = v37;
    }
    else
    {
      uint64_t v48 = v37 - (char *)&v169;
      uint64_t v49 = v36;
      uint64_t v50 = v37;
      do
      {
        if (v50) {
          uint64_t v51 = v48;
        }
        else {
          uint64_t v51 = 1;
        }
        uint64_t v169 = v51;
        if (v51 == 1) {
          float v52 = 0;
        }
        else {
          float v52 = (char *)&v169 + v51;
        }
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v52, v49);
        v49 += 32;
        v50 += 32;
        v48 += 32;
      }
      while (v49 != a3);
    }
    *(void *)(a2 + 16) = v149;
    if (v146 == 1)
    {
      uint64_t v111 = v50 - (char *)&v169;
      if (!v50) {
        uint64_t v111 = 1;
      }
      uint64_t v169 = v111;
      if (v111 == 1) {
        uint64_t v112 = 0;
      }
      else {
        uint64_t v112 = (char *)&v169 + v111;
      }
      boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v112, v157);
      *(void *)(a2 + 16) = v156 + v151;
      v176.i64[0] = 1;
      uint64_t v177 = 0;
      if ((char *)v36 != v37) {
        __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 215, "n == 1");
      }
      if (a3 - v36 == 32)
      {
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v36, v157);
        unint64_t v148 = 1 - v156;
        uint64_t v113 = 1 - v156 - (v151 - v149);
        if (1 - v156 > v151 - v149)
        {
          if (v41 != a3)
          {
            uint64_t v114 = v41 + 32 * v113;
            uint64_t v115 = v36 + 32 * v149 - (void)&v169 - 32 * v156 + 32;
            uint64_t v116 = a3;
            do
            {
              if (v114) {
                uint64_t v117 = v115;
              }
              else {
                uint64_t v117 = 1;
              }
              uint64_t v169 = v117;
              if (v117 == 1) {
                unint64_t v118 = 0;
              }
              else {
                unint64_t v118 = (char *)&v169 + v117;
              }
              boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v118, v116);
              v116 += 32;
              v114 += 32;
              v115 += 32;
            }
            while (v116 != v41);
          }
          a1 = v154;
          uint64_t v119 = v41 + 32 * v113 - (void)&v174;
          if (!v36) {
            uint64_t v119 = 1;
          }
          uint64_t v174 = v119;
          int64_t v120 = (char *)&v174 - (char *)&v169;
          if (v119 == 1) {
            int64_t v120 = 0;
          }
          uint64_t v169 = v120 + v119;
          uint64_t v170 = a2;
          uint64_t v171 = (v41 - a3) >> 5;
          if (v151 - v149 == 1)
          {
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(a3, v157);
            uint64_t v4 = v162;
            if (v113 == 1)
            {
              uint64_t v121 = v41 - (void)v178;
              if (!v36) {
                uint64_t v121 = 1;
              }
              v178[0] = v121;
              if (v121 == 1) {
                uint64_t v122 = 0;
              }
              else {
                uint64_t v122 = (char *)v178 + v121;
              }
              boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v122, v157);
              *(void *)(a2 + 16) += v148;
              uint64_t v169 = 1;
              uint64_t v171 = 0;
              boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(&v169);
              size_t v5 = v160;
LABEL_232:
              uint64_t result = (uint64_t)boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(&v176);
              goto LABEL_233;
            }
            int v143 = 209;
            double v144 = "uninitialized_copy_n_and_update";
          }
          else
          {
            int v143 = 215;
            double v144 = "copy_n_and_update";
          }
          __assert_rtn(v144, "advanced_insert_int.hpp", v143, "n == 1");
        }
        unint64_t v123 = v41 + 32 * v156;
        unint64_t v124 = v123 - 32;
        if (v145 != 32)
        {
          uint64_t v125 = 0;
          do
          {
            uint64_t v126 = v36 + 32 * v151 - (void)&v169 + v125;
            if (!(v41 + v125)) {
              uint64_t v126 = 1;
            }
            uint64_t v169 = v126;
            if (v126 == 1) {
              int64_t v127 = 0;
            }
            else {
              int64_t v127 = (char *)&v169 + v126;
            }
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v127, v123 + v125 - 32);
            v125 += 32;
          }
          while (32 * v156 + v125 != 32);
        }
        *(void *)(a2 + 16) += v148;
        size_t v5 = v160;
        uint64_t v4 = v162;
        if (v124 != a3)
        {
          uint64_t v128 = v36 + 32 * v151 - 32;
          uint64_t v129 = 32 * v156;
          do
            uint64_t v128 = boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v128, v128 + v129 - 32)- 32;
          while (v128 + v129 != a3);
        }
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(a3, v157);
        goto LABEL_232;
      }
      int v141 = 215;
      uint64_t v142 = "copy_n_and_update";
    }
    else
    {
      int v141 = 209;
      uint64_t v142 = "uninitialized_copy_n_and_update";
    }
    __assert_rtn(v142, "advanced_insert_int.hpp", v141, "n == 1");
  }
  *(void *)(a2 + 24) = v167;
  uint64_t v71 = *(void *)(a2 + 16);
  if (v71 == v38) {
    __assert_rtn("priv_insert_forward_range_expand_forward", "vector.hpp", 2966, "this->room_enough()");
  }
  uint64_t v72 = v36 + 32 * v71;
  if (v72 == a3)
  {
    uint64_t v93 = a3 - (void)&v176;
    if (!v36) {
      uint64_t v93 = 1;
    }
    v176.i64[0] = v93;
    if (v93 == 1) {
      float v94 = 0;
    }
    else {
      float v94 = &v176.i8[v93];
    }
    uint64_t result = (uint64_t)boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v94, a4);
    ++*(void *)(a2 + 16);
  }
  else
  {
    uint64_t v73 = a4;
    uint64_t v74 = v72 - 32;
    uint64_t v75 = v72 - (void)&v176;
    if (!v36) {
      uint64_t v75 = 1;
    }
    v176.i64[0] = v75;
    if (v75 == 1) {
      float v76 = 0;
    }
    else {
      float v76 = &v176.i8[v75];
    }
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v76, v74);
    ++*(void *)(a2 + 16);
    for (; v74 != a3; v74 -= 32)
      boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v74, v74 - 32);
    uint64_t result = boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(a3, v73);
  }
LABEL_233:
  int64_t v134 = &v5[v4];
  if (v4 == 1) {
    int64_t v134 = 0;
  }
  uint64_t v135 = a3 - (void)v134;
  int64_t v136 = v5 - &v163;
  if (*(void *)v5 == 1) {
    int64_t v136 = 0;
  }
  uint64_t v137 = *(void *)v5 + v135 + v136;
  int64_t v138 = &v163 - v164;
  if (v137 == 1) {
    int64_t v138 = 0;
  }
  uint64_t v139 = v138 + v137;
  uint64_t v140 = (unsigned char *)(v164 - (unsigned char *)a1);
  if (v139 == 1) {
    uint64_t v140 = 0;
  }
  *a1 = &v140[v139];
  return result;
}

void sub_1A42AB94C(_Unwind_Exception *a1)
{
  boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t boost::container::vec_iterator<boost::interprocess::offset_ptr<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,long,unsigned long,0ul>,false>::operator*(uint64_t result)
{
  if (result == 1) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return result;
}

char *boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(char *a1, void *a2, unint64_t a3, unint64_t *a4, uint64_t *a5)
{
  if (*a5 == 1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (uint64_t)a5 + *a5;
  }
  if (*a2 == 1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (uint64_t)a2 + *a2;
  }
  uint64_t v18 = v6;
  unint64_t v8 = *a4;
  unint64_t v9 = *(void *)(v7 + 48) >> 5;
  if (v9 < a3 || v8 > v9) {
    goto LABEL_18;
  }
  unint64_t v19 = 32 * v8;
  uint64_t result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v7, 23, 32 * a3, &v19, &v18, 0x20uLL);
  *a4 = v19 >> 5;
  if ((result & 7) != 0) {
    __assert_rtn("allocation_command", "rbtree_best_fit.hpp", 698, "0 == ((std::size_t)ret % ::boost::container::dtl::alignment_of<T>::value)");
  }
  if (!result)
  {
LABEL_18:
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    int64_t v17 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(void *)int64_t v17 = &unk_1EF7A9B00;
  }
  uint64_t v14 = v18;
  *(void *)a1 = result - a1;
  if (v14) {
    uint64_t v15 = v14 - (void)a5;
  }
  else {
    uint64_t v15 = 1;
  }
  *a5 = v15;
  return result;
}

void *boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(void *a1)
{
  uint64_t v2 = (uint64_t)a1 + *a1;
  if (*a1 != 1 && v2 != 0)
  {
    uint64_t v4 = (uint64_t *)a1[1];
    uint64_t v5 = *v4;
    uint64_t v6 = (char *)v4 + *v4;
    if (v5 == 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v7, v2);
  }
  return a1;
}

uint64_t *boost::container::dtl::scoped_destructor_range<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if (*a1 == 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (char *)a1 + *a1;
  }
  if (v2 == 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (char *)v3 + v2;
  }
  if (v4 != v5)
  {
    do
    {
      if (v4) {
        uint64_t v6 = v4 - (char *)&v11;
      }
      else {
        uint64_t v6 = 1;
      }
      uint64_t v11 = v6;
      boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v11);
      uint64_t v7 = a1[1];
      uint64_t v8 = *a1 + 32;
      *a1 = v8;
      if (v8 == 1) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = (char *)a1 + v8;
      }
      if (v7 == 1) {
        unint64_t v9 = 0;
      }
      else {
        unint64_t v9 = (char *)v3 + v7;
      }
    }
    while (v4 != v9);
  }
  return a1;
}

uint64_t boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t)a1 + *a1;
  if (v1 == 1 || v2 == 0) {
    __assert_rtn("destroy", "allocator.hpp", 269, "ptr != 0");
  }

  return boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(v2);
}

uint64_t boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    if (*(void *)a1 == 1) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = *(void *)a1 + a1;
    }
    if (*(void *)a2 == 1) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = *(void *)a2 + a2;
    }
    if (v3 == v4)
    {
      if (*(unsigned char *)(a1 + 8))
      {
        uint64_t v20 = (unsigned char *)(a1 + 9);
        if (a1 + 9 - (void)v25 == 1) {
          uint64_t v20 = 0;
        }
        *uint64_t v20 = 0;
        *(unsigned char *)(a1 + 8) &= 1u;
      }
      else
      {
        uint64_t v15 = *(void *)(a1 + 24);
        uint64_t v16 = a1 - (void)&v22;
        if (v15 == 1) {
          uint64_t v16 = 0;
        }
        uint64_t v17 = v16 + v15;
        if (v17 == 1) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = &v25[v17];
        }
        *uint64_t v18 = 0;
        *(void *)(a1 + 8) &= 1uLL;
      }
      boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::swap_data((char *)a1, (void *)a2);
    }
    else
    {
      unint64_t v5 = *(unsigned __int8 *)(a2 + 8);
      if (v5)
      {
        uint64_t v13 = a2 + 9 - (void)&v23;
        uint64_t v10 = v25;
        uint64_t v14 = a2 + 9 - (void)v25 + (v5 >> 1);
      }
      else
      {
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v6 = a2 + 24;
        uint64_t v7 = v8;
        uint64_t v9 = v6 - (void)&v23;
        uint64_t v10 = &v24;
        uint64_t v11 = v6 - (void)&v24;
        BOOL v12 = v8 == 1;
        if (v8 == 1) {
          uint64_t v9 = 0;
        }
        uint64_t v13 = v9 + v7;
        if (v12) {
          uint64_t v11 = 0;
        }
        uint64_t v14 = v11 + v7 + (*(void *)(v6 - 16) >> 1);
      }
      uint64_t v23 = v13;
      uint64_t v19 = v10 - (char *)&v22;
      if (v14 == 1) {
        uint64_t v19 = 0;
      }
      uint64_t v22 = v19 + v14;
      boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::assign<boost::interprocess::offset_ptr<char,long,unsigned long,0ul>>(a1, &v23, (char *)&v22);
    }
  }
  return a1;
}

void *boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    if (*a1 == 1) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = (char *)a1 + *a1;
    }
    uint64_t v4 = v3 - (char *)&v7;
    do
    {
      a1[2] = v2 - 1;
      if (v3) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 1;
      }
      uint64_t v7 = v5;
      boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v7);
      v3 += 32;
      uint64_t v2 = a1[2];
      v4 += 32;
    }
    while (v2);
  }
  return a1;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    uint64_t v4 = (uint64_t *)a1;
  }
  else {
    uint64_t v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v47 + v2 + v46 + v44;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v56 + v45 + v48;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      float v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v78 + v69 + v67 + v68;
        uint64_t v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      uint64_t v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      uint64_t v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned short>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  int v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    int v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void pf::TimezoneArchiveLineParser::~TimezoneArchiveLineParser(pf::TimezoneArchiveLineParser *this)
{
  *(void *)this = &unk_1EF7A99B8;
  std::__hash_table<std::__hash_value_type<std::string,unsigned short>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned short>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned short>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned short>>>::~__hash_table((uint64_t)this + 112);
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)this + 6);
  *((void *)this + 5) = 0;

  JUMPOUT(0x1A6259210);
}

{
  void *v2;

  *(void *)this = &unk_1EF7A99B8;
  std::__hash_table<std::__hash_value_type<std::string,unsigned short>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned short>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned short>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned short>>>::~__hash_table((uint64_t)this + 112);
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)this + 6);
  *((void *)this + 5) = 0;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned short>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned short>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned short>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned short>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_1A42ACA14(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  std::unique_ptr<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::reset[abi:ne180100]((uint64_t *)&buf);
  if (a2 == 1)
  {
    uint64_t v15 = __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v15 + 16))(v15);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v16;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Error reading timezone index: %s.", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1A42AC7B0);
  }
  _Unwind_Resume(a1);
}

void boost::interprocess::ipcdetail::placement_destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::~placement_destroy()
{
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::vector<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>>::~placement_destroy()
{
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::vector<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>>::destroy_n(uint64_t a1, void *a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    do
    {
      std::string::size_type v7 = (char *)(a2 + 1);
      uint64_t v8 = a2[2];
      if (v8)
      {
        if (*(void *)v7 == 1) {
          int v9 = 0;
        }
        else {
          int v9 = &v7[*(void *)v7];
        }
        uint64_t v10 = v9 - (char *)&v17;
        do
        {
          if (v9) {
            uint64_t v11 = v10;
          }
          else {
            uint64_t v11 = 1;
          }
          uint64_t v17 = v11;
          boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v17);
          v9 += 32;
          v10 += 32;
          --v8;
        }
        while (v8);
      }
      if (a2[3])
      {
        int64_t v12 = v7 - (char *)&v17;
        if (*(void *)v7 == 1) {
          int64_t v12 = 0;
        }
        uint64_t v17 = v12 + *(void *)v7;
        BOOL v13 = (char *)&v17 + v17;
        if (v17 != 1 && v13 != 0)
        {
          if (*a2 == 1) {
            uint64_t v15 = 0;
          }
          else {
            uint64_t v15 = (char *)a2 + *a2;
          }
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v15, (uint64_t)v13);
        }
      }
      a2 += 4;
      unint64_t v16 = *a4 + 1;
      *a4 = v16;
    }
    while (v16 < a3);
  }
}

void sub_1A42ACD84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

pf::TimezoneArchiveLineParser *pf::TimezoneArchiveLineParser::TimezoneArchiveLineParser(pf::TimezoneArchiveLineParser *this, const char *a2, const char *a3, size_t a4)
{
  *(void *)this = &unk_1EF7A99B8;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a4;
  *((void *)this + 4) = 0;
  std::string::size_type v7 = (uint64_t *)((char *)this + 40);
  *(_WORD *)uint64_t v86 = 420;
  boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_mapped_file((uint64_t)this + 40, a2, 0xA00000uLL, (mode_t *)v86);
  *(_OWORD *)((char *)this + 8_Block_object_dispose(&STACK[0x360], 8) = 0u;
  *((void *)this + 17) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 36) = 1065353216;
  uint64_t v8 = *((void *)this + 5);
  uint64_t v9 = v8 - ((void)this + 152);
  if (!v8) {
    uint64_t v9 = 1;
  }
  *((void *)this + 19) = v9;
  uint64_t v10 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v8, a4 + 8);
  *((void *)this + 2) = v10;
  *((void *)this + 4) = &v10[a4];
  memcpy(v10, a3, a4);
  uint64_t v11 = (char *)*((void *)this + 11);
  if ((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 13) - (void)v11) >> 2)) >> 5 <= 0x36A)
  {
    int64_t v12 = (char *)*((void *)this + 12);
    BOOL v13 = (char *)operator new(0x52080uLL);
    BOOL v14 = &v13[12 * ((v12 - v11) / 12)];
    uint64_t v15 = v14;
    if (v12 != v11)
    {
      uint64_t v15 = &v13[12 * ((v12 - v11) / 12)];
      do
      {
        uint64_t v16 = *(void *)(v12 - 12);
        v12 -= 12;
        int v17 = *((_DWORD *)v12 + 2);
        *(void *)(v15 - 12) = v16;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v17;
      }
      while (v12 != v11);
    }
    *((void *)this + 11) = v15;
    *((void *)this + 12) = v14;
    *((void *)this + 13) = v13 + 336000;
    if (v11) {
      operator delete(v11);
    }
  }
  uint64_t v18 = *v7;
  if (*v7) {
    uint64_t v19 = *v7 - (void)&v85;
  }
  else {
    uint64_t v19 = 1;
  }
  *(_OWORD *)&unsigned char v86[8] = xmmword_1A42D34F0;
  unint64_t v87 = 0x80000001A42D49C3 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v88 = &v85;
  uint64_t v85 = v19;
  *(void *)uint64_t v86 = &unk_1EF7A9D08;
  uint64_t v20 = (void *)boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v18, "timezones", 1uLL, 0, 1, (uint64_t)v86);
  uint64_t v21 = v20;
  *((void *)this + 10) = v20;
  if (v20[3] <= 0x16BuLL)
  {
    uint64_t v23 = (char *)(v20 + 1);
    uint64_t v22 = v20[1];
    uint64_t v24 = (char *)(v20 + 1) - (char *)&v90;
    if (v22 == 1) {
      uint64_t v24 = 0;
    }
    uint64_t v90 = v24 + v22;
    unint64_t v91 = 364;
    boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command((char *)&v89, v20, 0x16CuLL, &v91, &v90);
    uint64_t v25 = *(void *)v23;
    if (v90 == 1)
    {
      if (v89 == 1) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = (char *)&v89 + v89;
      }
      uint64_t v27 = v26 - (char *)&v95;
      if (!v26) {
        uint64_t v27 = 1;
      }
      uint64_t v28 = v26 - (char *)&v96;
      if (!v26) {
        uint64_t v28 = 1;
      }
      uint64_t v29 = v26 - (char *)&v92;
      if (!v26) {
        uint64_t v29 = 1;
      }
      if (v25 == 1) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = (uint64_t)&v23[v25];
      }
      uint64_t v31 = v21[2];
      unint64_t v32 = v91;
      int64_t v33 = (char *)&v92 - (char *)v93;
      if (v29 == 1) {
        int64_t v33 = 0;
      }
      uint64_t v92 = v29;
      v93[0] = v33 + v29;
      v93[1] = v21;
      v93[2] = v91;
      uint64_t v95 = v27;
      uint64_t v96 = v28;
      int64_t v34 = (char *)&v96 - v86;
      if (v28 == 1) {
        int64_t v34 = 0;
      }
      int64_t v35 = v34 + v28;
      int64_t v36 = (char *)&v95 - &v86[8];
      if (v27 == 1) {
        int64_t v36 = 0;
      }
      *(void *)uint64_t v86 = v35;
      *(void *)&unsigned char v86[8] = v36 + v27;
      *(void *)&char v86[16] = v21;
      uint64_t v83 = v30;
      if (v31)
      {
        unint64_t v81 = v91;
        uint64_t v37 = 32 * v31;
        uint64_t v38 = v26 - (char *)v97;
        uint64_t v39 = v26;
        do
        {
          if (v39) {
            uint64_t v40 = v38;
          }
          else {
            uint64_t v40 = 1;
          }
          v97[0] = v40;
          if (v40 == 1) {
            unint64_t v41 = 0;
          }
          else {
            unint64_t v41 = (char *)v97 + v40;
          }
          boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v41, v30);
          v30 += 32;
          v39 += 32;
          v38 += 32;
          v37 -= 32;
        }
        while (v37);
        v97[0] = v39 - (char *)v97;
        uint64_t v42 = v39 - (char *)&v94;
        unint64_t v32 = v81;
      }
      else
      {
        if (!v26)
        {
          v97[0] = 1;
          uint64_t v94 = 1;
          goto LABEL_107;
        }
        v97[0] = v26 - (char *)v97;
        uint64_t v42 = v26 - (char *)&v94;
      }
      uint64_t v94 = v42;
LABEL_107:
      *(int64x2_t *)uint64_t v86 = vdupq_n_s64(1uLL);
      boost::container::dtl::scoped_destructor_range<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_range((uint64_t *)v86);
      v93[0] = 1;
      if (v83)
      {
        int64_t v72 = v23 - v86;
        if (*(void *)v23 == 1) {
          int64_t v72 = 0;
        }
        int64_t v73 = v72 + *(void *)v23;
        *(void *)uint64_t v86 = v73;
        if (v73 != 1 && &v86[v73])
        {
          if (*v21 == 1) {
            uint64_t v74 = 0;
          }
          else {
            uint64_t v74 = (char *)v21 + *v21;
          }
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v74, (uint64_t)&v86[v73]);
        }
      }
      uint64_t v75 = v26 - v86;
      if (!v26) {
        uint64_t v75 = 1;
      }
      uint64_t v76 = (unsigned char *)(v86 - v23);
      if (v75 == 1) {
        uint64_t v76 = 0;
      }
      v21[1] = &v76[v75];
      void v21[3] = v32;
      boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(v93);
      return this;
    }
    if (v25 == 1) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = (uint64_t)&v23[v25];
    }
    if (v89 == 1) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = (char *)&v89 + v89;
    }
    if ((char *)v43 == v44)
    {
      void v21[3] = v91;
    }
    else
    {
      unint64_t v45 = v21[2];
      uint64_t v46 = 32 * v45;
      unint64_t v47 = v91;
      uint64_t v48 = v44 - v86;
      if (!v44) {
        uint64_t v48 = 1;
      }
      uint64_t v49 = (unsigned char *)(v86 - v23);
      if (v48 == 1) {
        uint64_t v49 = 0;
      }
      void v21[2] = 0;
      void v21[3] = v47;
      v21[1] = &v49[v48];
      uint64_t v50 = v43 - (void)v97;
      if (!v43) {
        uint64_t v50 = 1;
      }
      v97[0] = v50;
      int64_t v51 = (char *)v97 - v86;
      if (v50 == 1) {
        int64_t v51 = 0;
      }
      *(void *)uint64_t v86 = v51 + v50;
      *(void *)&unsigned char v86[8] = v21;
      *(void *)&char v86[16] = v45;
      unint64_t v82 = v45;
      unint64_t v84 = (v43 - (uint64_t)v44) >> 5;
      if (v84 >= v46 >> 5)
      {
        uint64_t v80 = (uint64_t)(32 * v45) >> 5;
        if (v45)
        {
          uint64_t v58 = v44 - (char *)v93;
          uint64_t v59 = 32 * v45;
          uint64_t v60 = v43;
          float v61 = v44;
          do
          {
            if (v61) {
              uint64_t v62 = v58;
            }
            else {
              uint64_t v62 = 1;
            }
            v93[0] = v62;
            if (v62 == 1) {
              unint64_t v63 = 0;
            }
            else {
              unint64_t v63 = (char *)v93 + v62;
            }
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v63, v60);
            v60 += 32;
            v61 += 32;
            v58 += 32;
            v59 -= 32;
          }
          while (v59);
        }
        void v21[2] = v80;
        if (v82 <= v84)
        {
          if (v80 != v82) {
            void v21[2] = v82;
          }
        }
        else
        {
          uint64_t v78 = v82 - v84;
          unint64_t v79 = v84 - v80;
          if (v84 != v80)
          {
            uint64_t v64 = v43 + 32 * v82;
            uint64_t v65 = &v44[32 * v80];
            unint64_t v66 = v80 - v84;
            uint64_t v67 = v65 - (char *)v93;
            do
            {
              if (v65) {
                uint64_t v68 = v67;
              }
              else {
                uint64_t v68 = 1;
              }
              v93[0] = v68;
              if (v68 == 1) {
                uint64_t v69 = 0;
              }
              else {
                uint64_t v69 = (char *)v93 + v68;
              }
              boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v69, v64);
              v64 += 32;
              v65 += 32;
              v67 += 32;
            }
            while (!__CFADD__(v66++, 1));
          }
          *(void *)&v86[16] -= v78;
          *(void *)v86 += 32 * v78;
          void v21[2] = v82;
          if (v43 + 32 * v82 + 32 * v79 != v43 && v79)
          {
            uint64_t v71 = 32 * v80 - 32 * v84;
            do
            {
              boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v43, v43 + v46 + 32 * v84 - 32 * v80);
              v43 += 32;
              v71 -= 32;
            }
            while (v71);
          }
        }
        *(void *)uint64_t v86 = 1;
        *(void *)&char v86[16] = 0;
      }
      else
      {
        if ((char *)v43 != v44)
        {
          uint64_t v52 = v44 - (char *)v93;
          uint64_t v53 = (v43 - (uint64_t)v44) >> 5;
          uint64_t v54 = v43;
          do
          {
            --v53;
            if (v44) {
              uint64_t v55 = v52;
            }
            else {
              uint64_t v55 = 1;
            }
            v93[0] = v55;
            if (v55 == 1) {
              uint64_t v56 = 0;
            }
            else {
              uint64_t v56 = (char *)v93 + v55;
            }
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v56, v54);
            v54 += 32;
            v44 += 32;
            v52 += 32;
          }
          while (v53);
        }
        *(void *)uint64_t v86 = 1;
        *(void *)&char v86[16] = 0;
        void v21[2] = v82;
        if (v82 != v84)
        {
          uint64_t v57 = 32 * v84;
          do
          {
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v43, v43 + v57);
            v43 += 32;
            v46 -= 32;
          }
          while (v57 != v46);
        }
      }
      boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(v86);
    }
  }
  return this;
}

void sub_1A42AD478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(&a27);
  std::__hash_table<std::__hash_value_type<std::string,unsigned short>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned short>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned short>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned short>>>::~__hash_table((uint64_t)(v28 + 3));
  uint64_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v27 + 96) = v30;
    operator delete(v30);
  }
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)(v27 + 48));
  *(void *)(v27 + 40) = 0;
  _Unwind_Resume(a1);
}

void boost::interprocess::ipcdetail::CtorArgN<boost::container::vector<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,false,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::~CtorArgN()
{
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::container::vector<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,false,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::construct_n(uint64_t result, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    uint64_t v4 = -(uint64_t)a2;
    do
    {
      int v5 = *(uint64_t **)(result + 32);
      uint64_t v6 = *v5;
      std::string::size_type v7 = (char *)v5 + *v5;
      if (v6 == 1) {
        std::string::size_type v7 = 0;
      }
      if (v7) {
        uint64_t v8 = (uint64_t)&v7[v4];
      }
      else {
        uint64_t v8 = 1;
      }
      *a2 = v8;
      a2[1] = 1;
      a2[2] = 0;
      a2[3] = 0;
      unint64_t v9 = *a4 + 1;
      *a4 = v9;
      v4 -= 32;
      a2 += 4;
    }
    while (v9 < a3);
  }
  return result;
}

void sub_1A42ADA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }

  _Unwind_Resume(a1);
}

void boost::geometry::index::detail::rtree::visitors::iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::detail::rtree::options<boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::detail::rtree::insert_default_tag,boost::geometry::index::detail::rtree::choose_by_content_diff_tag,boost::geometry::index::detail::rtree::split_default_tag,boost::geometry::index::detail::rtree::quadratic_tag,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::translator<boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::search_value(uint64_t a1)
{
  while (1)
  {
    while (1)
    {
      uint64_t v2 = *(void **)(a1 + 24);
      if (!v2) {
        break;
      }
      if (*(void **)(a1 + 32) != (void *)((char *)v2 + 12 * *v2 + 8)) {
        return;
      }
      *(void *)(a1 + 24) = 0;
    }
    uint64_t v3 = *(void *)(a1 + 8);
    if (*(void *)a1 == v3) {
      break;
    }
    uint64_t v5 = *(void *)(v3 - 16);
    uint64_t v6 = *(void *)(v3 - 8);
    uint64_t v4 = (void *)(v3 - 16);
    if (v5 == v6)
    {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = v4;
    }
    else
    {
      *uint64_t v4 = v5 + 24;
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = (_DWORD *)(v7 + v5 + 16);
      if (v7 == 1) {
        unint64_t v9 = 0;
      }
      else {
        unint64_t v9 = v8;
      }
      boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::geometry::index::detail::rtree::visitors::iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::detail::rtree::options<boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::detail::rtree::insert_default_tag,boost::geometry::index::detail::rtree::choose_by_content_diff_tag,boost::geometry::index::detail::rtree::split_default_tag,boost::geometry::index::detail::rtree::quadratic_tag,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::translator<boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(v9, (char **)a1);
    }
  }
}

void boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::geometry::index::detail::rtree::visitors::iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::detail::rtree::options<boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::detail::rtree::insert_default_tag,boost::geometry::index::detail::rtree::choose_by_content_diff_tag,boost::geometry::index::detail::rtree::split_default_tag,boost::geometry::index::detail::rtree::quadratic_tag,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::translator<boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(_DWORD *a1, char **a2)
{
  uint64_t v3 = (char *)(a1 + 2);
  int v2 = *a1;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      if (v2 < 0) {
        uint64_t v3 = *(char **)v3;
      }
      a2[3] = v3;
      a2[4] = v3 + 8;
      break;
    case 1:
      if (v2 < 0) {
        uint64_t v3 = *(char **)v3;
      }
      uint64_t v6 = *(char **)v3;
      uint64_t v5 = v3 + 8;
      uint64_t v7 = &v5[3 * (void)v6];
      unint64_t v9 = a2[1];
      unint64_t v8 = (unint64_t)a2[2];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = *a2;
        uint64_t v12 = (v9 - *a2) >> 4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60) {
          std::vector<pf::SceneTaxonomyNode const*>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v8 - (void)v11;
        if (v14 >> 3 > v13) {
          unint64_t v13 = v14 >> 3;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          if (v15 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v16 = (char *)operator new(16 * v15);
        }
        else
        {
          uint64_t v16 = 0;
        }
        int v17 = &v16[16 * v12];
        *(void *)int v17 = v5;
        *((void *)v17 + 1) = v7;
        uint64_t v10 = v17 + 16;
        if (v9 != v11)
        {
          do
          {
            *((_OWORD *)v17 - 1) = *((_OWORD *)v9 - 1);
            v17 -= 16;
            v9 -= 16;
          }
          while (v9 != v11);
          unint64_t v9 = *a2;
        }
        *a2 = v17;
        a2[1] = v10;
        a2[2] = &v16[16 * v15];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *(void *)unint64_t v9 = v5;
        *((void *)v9 + 1) = v7;
        uint64_t v10 = v9 + 16;
      }
      a2[1] = v10;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void sub_1A42AE930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::exception a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  operator delete(v23);
  _Unwind_Resume(a1);
}

void boost::container::throw_out_of_range(boost::container *this, const char *a2)
{
  exception = __cxa_allocate_exception(0x10uLL);
  void *exception = &unk_1EF7A9E80;
  exception[1] = "vector::at out of range";
}

void *boost::geometry::index::detail::rtree::visitors::distance_query<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder,boost::geometry::index::detail::predicates::nearest<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>>::~distance_query(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::visitors::branch_data_comp &,std::__wrap_iter<boost::geometry::index::detail::rtree::visitors::distance_query<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder,boost::geometry::index::detail::predicates::nearest<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>>::branch_data *>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v4 = v3 >> 1;
    uint64_t v5 = result + 24 * (v3 >> 1);
    uint64_t v6 = (long long *)(a2 - 24);
    double v7 = *(double *)(a2 - 24);
    if (*(double *)v5 > v7 || *(double *)v5 == v7 && *(void *)(result + 24 * v4 + 8) > *(void *)(a2 - 16))
    {
      long long v24 = *v6;
      uint64_t v10 = *(void *)(a2 - 8);
      unint64_t v8 = (char *)(a2 - 8);
      uint64_t v9 = v10;
      int64_t v11 = v8 - (char *)v25;
      if (v10 == 1) {
        int64_t v11 = 0;
      }
      v25[0] = v11 + v9;
      long long *v6 = *(_OWORD *)v5;
      uint64_t v12 = result + 24 * v4;
      uint64_t v15 = *(void *)(v12 + 16);
      unint64_t v13 = (char *)(v12 + 16);
      uint64_t v14 = v15;
      int64_t v16 = v13 - v8;
      if (v15 == 1) {
        int64_t v16 = 0;
      }
      *(void *)unint64_t v8 = v16 + v14;
      if (v3 >= 2)
      {
        while (1)
        {
          unint64_t v18 = v4 - 1;
          unint64_t v4 = (v4 - 1) >> 1;
          int v17 = (double *)(result + 24 * v4);
          if (*v17 <= *(double *)&v24
            && (*v17 != *(double *)&v24 || *(void *)(result + 24 * v4 + 8) <= *((void *)&v24 + 1)))
          {
            break;
          }
          *(_OWORD *)uint64_t v5 = *(_OWORD *)v17;
          uint64_t v19 = result + 24 * v4;
          uint64_t v21 = *(void *)(v19 + 16);
          unint64_t v13 = (char *)(v19 + 16);
          uint64_t v20 = v21;
          uint64_t v22 = &v13[-v5 - 16];
          if (v21 == 1) {
            uint64_t v22 = 0;
          }
          *(void *)(v5 + 16) = &v22[v20];
          uint64_t v5 = result + 24 * v4;
          if (v18 <= 1) {
            goto LABEL_17;
          }
        }
      }
      int v17 = (double *)v5;
LABEL_17:
      *(_OWORD *)int v17 = v24;
      uint64_t v23 = (char *)((char *)v25 - v13);
      if (v25[0] == 1) {
        uint64_t v23 = 0;
      }
      *(void *)unint64_t v13 = &v23[v25[0]];
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<double,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> const*>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::visitors::pair_first_less &,std::__wrap_iter<std::pair<double,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> const*> *>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v4 = v3 >> 1;
    uint64_t v5 = (double *)(result + 16 * (v3 >> 1));
    uint64_t v6 = (double *)(a2 - 16);
    double v7 = *(double *)(a2 - 16);
    double v8 = *v5;
    if (*v5 < v7)
    {
      uint64_t v9 = *(void *)(a2 - 8);
      do
      {
        uint64_t v10 = v6;
        uint64_t v6 = v5;
        double *v10 = v8;
        v10[1] = v5[1];
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (double *)(result + 16 * v4);
        double v8 = *v5;
      }
      while (*v5 < v7);
      double *v6 = v7;
      *((void *)v6 + 1) = v9;
    }
  }
  return result;
}

void pf::SceneGeographyLineParser::finalize(pf::SceneGeographyLineParser *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v2 = (char *)*((void *)this + 14);
  unint64_t v3 = *((void *)v2 + 3);
  if (v3)
  {
    if (*((void *)v2 + 2))
    {
      *(void *)&long long buf = *((void *)v2 + 2);
      uint64_t v4 = *((void *)v2 + 1);
      int64_t v5 = v2 - (char *)&v22;
      if (v4 == 1) {
        int64_t v5 = 0;
      }
      uint64_t v23 = v5 + v4;
      boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v22, v2, 24, v3, (unint64_t *)&buf, &v23);
      if (v22 != 1) {
        *((void *)v2 + 3) = buf;
      }
    }
    else
    {
      uint64_t v6 = v2 + 8;
      uint64_t v7 = *((void *)v2 + 1);
      if (v7 != 1)
      {
        *(void *)&long long buf = v7 + v6 - (char *)&buf;
        uint64_t v8 = (uint64_t)&v6[v7];
        if ((void)buf != 1 && v8 != 0)
        {
          if (*(void *)v2 == 1) {
            uint64_t v10 = 0;
          }
          else {
            uint64_t v10 = &v2[*(void *)v2];
          }
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v10, v8);
        }
      }
      *((void *)v2 + 1) = 1;
      *((void *)v2 + 3) = 0;
    }
  }
  int64_t v11 = (char *)*((void *)this + 15);
  unint64_t v12 = *((void *)v11 + 3);
  if (v12)
  {
    if (*((void *)v11 + 2))
    {
      *(void *)&long long buf = *((void *)v11 + 2);
      uint64_t v13 = *((void *)v11 + 1);
      int64_t v14 = v11 - (char *)&v22;
      if (v13 == 1) {
        int64_t v14 = 0;
      }
      uint64_t v23 = v14 + v13;
      boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v22, v11, 24, v12, (unint64_t *)&buf, &v23);
      if (v22 != 1) {
        *((void *)v11 + 3) = buf;
      }
    }
    else
    {
      uint64_t v15 = v11 + 8;
      uint64_t v16 = *((void *)v11 + 1);
      if (v16 != 1)
      {
        *(void *)&long long buf = v16 + v15 - (char *)&buf;
        uint64_t v17 = (uint64_t)&v15[v16];
        if ((void)buf != 1 && v17 != 0)
        {
          if (*(void *)v11 == 1) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = &v11[*(void *)v11];
          }
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v19, v17);
        }
      }
      *((void *)v11 + 1) = 1;
      *((void *)v11 + 3) = 0;
    }
  }
  uint64_t v20 = *((void *)this + 6);
  *(void *)&long long buf = "version";
  *((void *)&buf + 1) = v20;
  uint64_t v25 = 1;
  __int16 v26 = 256;
  boost::interprocess::ipcdetail::named_proxy<boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>,int,false>::operator()<int const&>((uint64_t)&buf, (uint64_t)&PF_SCENE_GEOGRAPHY_VERSION);
  boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>::shrink_to_fit<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>,char>(*((char **)this + 1));
  unint64_t v21 = PFChecksumArchiveData((char *)(*((void *)this + 6) - 8), *(void *)(*((void *)this + 6) + 48) + 8, *((char **)this + 2), *((void *)this + 3));
  **((void **)this + 4) = v21;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v21;
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFSceneGeography checksum %016llx", (uint8_t *)&buf, 0xCu);
  }
}

void sub_1A42AEE98(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

char *boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(uint64_t *a1, void *a2, char a3, unint64_t a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v9 = 0;
  unint64_t result = 0;
  uint64_t v11 = (uint64_t)a6 + *a6;
  if (*a6 == 1) {
    uint64_t v11 = 0;
  }
  if (*a2 == 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = (uint64_t)a2 + *a2;
  }
  uint64_t v21 = v11;
  unint64_t v13 = *a5;
  unint64_t v14 = *(void *)(v12 + 48) >> 5;
  if (v14 >= a4 && v13 <= v14)
  {
    unint64_t v22 = 32 * v13;
    unint64_t result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v12, a3 | 0x10u, 32 * a4, &v22, &v21, 0x20uLL);
    uint64_t v9 = v21;
    *a5 = v22 >> 5;
  }
  if ((result & 7) != 0) {
    __assert_rtn("allocation_command", "rbtree_best_fit.hpp", 698, "0 == ((std::size_t)ret % ::boost::container::dtl::alignment_of<T>::value)");
  }
  if ((a3 & 0x10) == 0 && !result)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    uint64_t v20 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(void *)uint64_t v20 = &unk_1EF7A9B00;
  }
  uint64_t v17 = result - (char *)a1;
  if (!result) {
    uint64_t v17 = 1;
  }
  *a1 = v17;
  uint64_t v18 = v9 - (void)a6;
  if (!v9) {
    uint64_t v18 = 1;
  }
  *a6 = v18;
  return result;
}

char *boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(uint64_t *a1, void *a2, char a3, unint64_t a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v9 = 0;
  unint64_t result = 0;
  uint64_t v11 = (uint64_t)a6 + *a6;
  if (*a6 == 1) {
    uint64_t v11 = 0;
  }
  if (*a2 == 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = (uint64_t)a2 + *a2;
  }
  uint64_t v21 = v11;
  unint64_t v13 = *a5;
  unint64_t v14 = *(void *)(v12 + 48) >> 3;
  if (v14 >= a4 && v13 <= v14)
  {
    unint64_t v22 = 8 * v13;
    unint64_t result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v12, a3 | 0x10u, 8 * a4, &v22, &v21, 8uLL);
    uint64_t v9 = v21;
    *a5 = v22 >> 3;
  }
  if ((result & 7) != 0) {
    __assert_rtn("allocation_command", "rbtree_best_fit.hpp", 698, "0 == ((std::size_t)ret % ::boost::container::dtl::alignment_of<T>::value)");
  }
  if ((a3 & 0x10) == 0 && !result)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    uint64_t v20 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(void *)uint64_t v20 = &unk_1EF7A9B00;
  }
  uint64_t v17 = result - (char *)a1;
  if (!result) {
    uint64_t v17 = 1;
  }
  *a1 = v17;
  uint64_t v18 = v9 - (void)a6;
  if (!v9) {
    uint64_t v18 = 1;
  }
  *a6 = v18;
  return result;
}

uint64_t pf::SceneGeographyLineParser::parseLine(pf::SceneGeographyLineParser *this, char *__str, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a3 > 1)
  {
    int v7 = __str[1];
    if (v7 == 58)
    {
      int v11 = *__str;
      uint64_t v9 = __str + 2;
      int v10 = v11;
      if (v11 <= 111)
      {
        if (v10 == 99) {
          return 1;
        }
        if (v10 == 102)
        {
          return pf::SceneGeographyLineParser::parseFloatMap(this, v9);
        }
      }
      else
      {
        switch(v10)
        {
          case 'p':
            return pf::SceneGeographyLineParser::parsePOI(this, v9);
          case 's':
            return pf::SceneGeographyLineParser::parseScenes(this, v9);
          case 'v':
            uint64_t v12 = strtol(v9, 0, 10);
            uint64_t result = 1;
            if (v12 >= 2) {
              *((unsigned char *)this + 41) = 1;
            }
            return result;
        }
      }
      uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      int v13 = 67109120;
      int v14 = v10;
      uint64_t v4 = MEMORY[0x1E4F14500];
      int64_t v5 = "unexpected line type, first character: %c";
    }
    else
    {
      uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      int v13 = 67109120;
      int v14 = v7;
      uint64_t v4 = MEMORY[0x1E4F14500];
      int64_t v5 = "unexpected second character: %c (expected ':')";
    }
    uint32_t v6 = 8;
    goto LABEL_29;
  }
  uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  if (result)
  {
    LOWORD(v13) = 0;
    uint64_t v4 = MEMORY[0x1E4F14500];
    int64_t v5 = "short line: expected 2 characters or longer";
    uint32_t v6 = 2;
LABEL_29:
    _os_log_error_impl(&dword_1A41FE000, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v13, v6);
    return 0;
  }
  return result;
}

BOOL pf::SceneGeographyLineParser::parseFloatMap(pf::SceneGeographyLineParser *this, char *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 40))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "all floatmap entries lines must come before any POI entries", buf, 2u);
    }
    return 0;
  }
  else
  {
    uint64_t v15 = 0;
    double v5 = strtod(a2, &v15);
    double v14 = v5;
    BOOL v2 = v15 != a2;
    if (v15 == a2)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "failed to read floatmap - failed to parse double: %s", buf, 0xCu);
      }
    }
    else
    {
      uint32_t v6 = (void *)*((void *)this + 14);
      uint64_t v7 = v6[1];
      if (v7 == 1) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = (char *)v6 + v7 + 8;
      }
      uint64_t v9 = v6[2];
      int v10 = &v8[8 * v9];
      if (v9 == v6[3])
      {
        boost::container::vector<double,boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,double *,double &>>(buf, (uint64_t)v6, v10, &v14);
        boost::container::vec_iterator<boost::interprocess::offset_ptr<double,long,unsigned long,0ul>,false>::operator*(*(uint64_t *)buf);
      }
      else
      {
        if (v8) {
          uint64_t v11 = v10 - buf;
        }
        else {
          uint64_t v11 = 1;
        }
        if (v11 == 1) {
          uint64_t v12 = 0;
        }
        else {
          uint64_t v12 = (double *)&buf[v11];
        }
        double *v12 = v5;
        v6[2] = v9 + 1;
      }
    }
  }
  return v2;
}

uint64_t pf::SceneGeographyLineParser::parseScenes(pf::SceneGeographyLineParser *this, char *__str)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 40))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "all scene entries lines must come before any POI entries", buf, 2u);
    }
    return 0;
  }
  uint64_t v4 = *((void *)this + 12);
  double v5 = (char *)this + v4 + 96;
  if (v4 == 1) {
    double v5 = 0;
  }
  if (v5) {
    uint64_t v6 = v5 - (char *)buf;
  }
  else {
    uint64_t v6 = 1;
  }
  *(void *)long long buf = v6;
  uint64_t v28 = 1;
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  __lasts = 0;
  uint64_t v7 = strtok_r(__str, ",", &__lasts);
  if (!v7)
  {
LABEL_29:
    if (v30)
    {
      if (v29)
      {
        *(void *)int64_t v33 = v29;
        int64_t v16 = (char *)&v28 - (char *)&__endptr;
        if (v28 == 1) {
          int64_t v16 = 0;
        }
        __endptr = (char *)(v16 + v28);
        boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v31, buf, 24, v30, (unint64_t *)v33, (uint64_t *)&__endptr);
        if (v31 != 1) {
          unint64_t v30 = *(void *)v33;
        }
      }
      else
      {
        if (v28 != 1)
        {
          *(void *)int64_t v33 = v28 + (char *)&v28 - v33;
          if (*(void *)v33 != 1)
          {
            if ((uint64_t *)((char *)&v28 + v28))
            {
              if (*(void *)buf == 1) {
                uint64_t v17 = 0;
              }
              else {
                uint64_t v17 = (char *)&buf[*(void *)buf];
              }
              boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v17, (uint64_t)&v28 + v28);
            }
          }
        }
        uint64_t v28 = 1;
        unint64_t v30 = 0;
      }
    }
    uint64_t v18 = (void *)*((void *)this + 15);
    uint64_t v19 = v18[1];
    uint64_t v20 = (char *)v18 + v19 + 8;
    if (v19 == 1) {
      uint64_t v20 = 0;
    }
    uint64_t v21 = v18[2];
    unint64_t v22 = &v20[32 * v21];
    if (v21 == v18[3])
    {
      boost::container::vector<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>*,boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>&>>(v33, (uint64_t)v18, v22, (char *)buf);
      boost::container::vec_iterator<boost::interprocess::offset_ptr<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,long,unsigned long,0ul>,false>::operator*(*(uint64_t *)v33);
    }
    else
    {
      if (v20) {
        uint64_t v23 = v22 - v33;
      }
      else {
        uint64_t v23 = 1;
      }
      *(void *)int64_t v33 = v23;
      if (v23 == 1) {
        long long v24 = 0;
      }
      else {
        long long v24 = (uint64_t *)&v33[v23];
      }
      boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(v24, buf);
      ++v18[2];
    }
    uint64_t v2 = 1;
    goto LABEL_57;
  }
  uint64_t v8 = v7;
  char v9 = 1;
  while ((v9 & 1) != 0)
  {
LABEL_26:
    uint64_t v8 = strtok_r(0, ",", &__lasts);
    char v9 = 0;
    if (!v8) {
      goto LABEL_29;
    }
  }
  __endptr = 0;
  uint64_t v10 = strtol(v8, &__endptr, 10);
  if (v10 <= 4294967294 && v8 != __endptr)
  {
    LODWORD(v31) = v10;
    uint64_t v11 = v29;
    if (v28 == 1) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = (char *)&v28 + v28;
    }
    int v13 = &v12[4 * v29];
    if (v29 == v30)
    {
      boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned int *,unsigned int>>(v33, (uint64_t)buf, v13, &v31);
      boost::container::vec_iterator<boost::interprocess::offset_ptr<unsigned int,long,unsigned long,0ul>,false>::operator*(*(uint64_t *)v33);
    }
    else
    {
      if (v12) {
        uint64_t v14 = v13 - v33;
      }
      else {
        uint64_t v14 = 1;
      }
      if (v14 == 1) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = &v33[v14];
      }
      *uint64_t v15 = v10;
      uint64_t v29 = v11 + 1;
    }
    goto LABEL_26;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int64_t v33 = 136315138;
    *(void *)&v33[4] = v8;
    _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "invalid scene ID: %s", v33, 0xCu);
  }
  uint64_t v2 = 0;
LABEL_57:
  boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector((char *)buf);
  return v2;
}

void sub_1A42AF898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector(va);
  _Unwind_Resume(a1);
}

uint64_t pf::SceneGeographyLineParser::parsePOI(pf::SceneGeographyLineParser *this, char *__s)
{
  uint64_t v2 = __s;
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 40)) {
    *((unsigned char *)this + 40) = 1;
  }
  uint64_t v4 = strchr(__s, 44);
  if (!v4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v2;
    uint64_t v11 = MEMORY[0x1E4F14500];
LABEL_57:
    _os_log_error_impl(&dword_1A41FE000, v11, OS_LOG_TYPE_ERROR, "error parsing POI line: %s", buf, 0xCu);
    return 0;
  }
  *uint64_t v4 = 0;
  double v5 = v4 + 1;
  uint64_t v6 = strchr(v4 + 1, 44);
  if (!v6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v2;
    uint64_t v11 = MEMORY[0x1E4F14500];
    goto LABEL_57;
  }
  uint64_t v7 = v6;
  if (!*((unsigned char *)this + 41))
  {
    uint64_t v10 = v5;
    goto LABEL_13;
  }
  char *v6 = 0;
  uint64_t v8 = v6 + 1;
  char v9 = strchr(v6 + 1, 44);
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v2;
      uint64_t v11 = MEMORY[0x1E4F14500];
      goto LABEL_57;
    }
    return 0;
  }
  uint64_t v10 = v8;
  uint64_t v7 = v9;
LABEL_13:
  *uint64_t v7 = 0;
  uint64_t v12 = v7 + 1;
  *(void *)long long buf = strtod(v5, 0);
  *(void *)&uint8_t buf[8] = strtod(v10, 0);
  int v13 = (char *)&v194;
  uint64_t v14 = *((void *)this + 13);
  if (v14 == 1) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = (char *)this + v14 + 104;
  }
  if (v15) {
    uint64_t v16 = v15 - (char *)&v194;
  }
  else {
    uint64_t v16 = 1;
  }
  uint64_t v194 = v16;
  uint64_t v195 = 1;
  uint64_t v196 = 0;
  uint64_t v197 = 0;
  uint64_t v17 = *((void *)this + 16);
  uint64_t v175 = (char *)&v194;
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)v190, v2, (void *)this + 11);
  unint64_t v18 = boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()((uint64_t)v190);
  unint64_t v19 = 265 * ((~v18 + (v18 << 21)) ^ ((~v18 + (v18 << 21)) >> 24));
  uint64_t v20 = 2147483649u * ((21 * (v19 ^ (v19 >> 14))) ^ ((21 * (v19 ^ (v19 >> 14))) >> 28));
  boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::find_node_impl<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(&v179, v17, v20, (uint64_t)v190);
  if (v179 == 1)
  {
    uint64_t v173 = v20;
    uint64_t v174 = v2;
    __endptr = (char *)(v17 + 16);
    v182[0] = 1;
    boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node((uint64_t **)&__endptr);
    if (v182[0] == 1) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = (char *)v182 + v182[0];
    }
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v21, (uint64_t)v190);
    *((_OWORD *)v21 + 2) = *(_OWORD *)buf;
    unint64_t v22 = v21 + 48;
    uint64_t v23 = v196;
    if (v194 == 1) {
      long long v24 = 0;
    }
    else {
      long long v24 = (char *)&v194 + v194;
    }
    if (v24) {
      uint64_t v25 = v24 - v22;
    }
    else {
      uint64_t v25 = 1;
    }
    *((void *)v21 + 6) = v25;
    *((void *)v21 + 7) = 1;
    __int16 v26 = v21 + 56;
    *((void *)v21 + _Block_object_dispose(&STACK[0x360], 8) = v23;
    *((void *)v21 + 9) = 0;
    if (v23)
    {
      __lasts = v23;
      uint64_t v189 = 1;
      boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v187, v22, 1, (unint64_t)v23, (unint64_t *)&__lasts, &v189);
      uint64_t v27 = (char *)((char *)&v187 - v26);
      if (v187 == 1) {
        uint64_t v27 = 0;
      }
      uint64_t v28 = &v27[v187];
      *((void *)v21 + 7) = v28;
      *((void *)v21 + 9) = __lasts;
      if (v196)
      {
        if (v28 == (char *)1) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = &v26[(void)v28];
        }
        if (v195 == 1) {
          unint64_t v30 = 0;
        }
        else {
          unint64_t v30 = (char *)&v195 + v195;
        }
        memmove(v29, v30, 2 * (void)v196);
      }
    }
    if (v182[0] == 1) {
      __assert_rtn("release", "implementation.hpp", 1955, "node_");
    }
    int64_t v31 = (char *)v182 - (char *)&v178 + v182[0];
    int64_t v178 = v31;
    int64_t v32 = (char *)&v178 - (char *)&v180;
    if (v31 == 1) {
      int64_t v32 = 0;
    }
    int64_t v33 = v32 + v31;
    int64_t v180 = v33;
    __endptr = (char *)(v17 + 16);
    uint64_t v34 = (char *)v182;
    int64_t v35 = (char *)&v180 - (char *)v182;
    if (v33 == 1) {
      int64_t v35 = 0;
    }
    v182[0] = v35 + v33;
    unint64_t v36 = *(void *)(v17 + 32);
    unint64_t v37 = v36 + 1;
    int v13 = v175;
    if (*(void *)(v17 + 56) == 1)
    {
      unint64_t v38 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(v37, *(float *)(v17 + 40));
      uint64_t v39 = v173;
      if (*(void *)(v17 + 24) <= v38) {
        unint64_t v40 = v38;
      }
      else {
        unint64_t v40 = *(void *)(v17 + 24);
      }
      boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::create_buckets(v17, v40);
    }
    else
    {
      uint64_t v39 = v173;
      if (*(void *)(v17 + 48) < v37)
      {
        unint64_t v46 = v36 + (v36 >> 1);
        if (v46 > v37) {
          unint64_t v37 = v46;
        }
        unint64_t v47 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(v37, *(float *)(v17 + 40));
        if (v47 != *(void *)(v17 + 24))
        {
          if (*(void *)(v17 + 56) == 1) {
            __assert_rtn("rehash_impl", "implementation.hpp", 4578, "this->buckets_");
          }
          boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::create_buckets(v17, v47);
          boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v189, v17, *(void *)(v17 + 24));
          uint64_t v169 = (char *)v182;
          if (v189 == 1) {
            uint64_t v48 = 0;
          }
          else {
            uint64_t v48 = &v190[v189 - 8];
          }
          uint64_t v49 = *(void *)v48;
          int64_t v50 = v48 - (char *)&__lasts;
          if (v49 == 1) {
            int64_t v50 = 0;
          }
          int64_t v51 = (char *)(v50 + v49);
          __lasts = v51;
          BOOL v52 = v51 == (char *)1;
          uint64_t v53 = (char *)&__lasts + (void)v51;
          if (v51 == (char *)1) {
            uint64_t v53 = 0;
          }
          if (*((void *)v53 + 10) != 1)
          {
            int64_t v172 = (char *)&__lasts - (char *)&v187;
            int64_t v54 = (char *)&v185 - (char *)&v189;
            int64_t v170 = (char *)&v189 - (char *)&__lasts;
            int64_t v171 = (char *)&v189 - (char *)&v186;
            do
            {
              BOOL v61 = !v52;
              int64_t v55 = v172;
              if (!v61) {
                int64_t v55 = 0;
              }
              uint64_t v187 = (uint64_t)&v51[v55];
              uint64_t v56 = &v51[v55 + (void)&v187];
              if (v187 == 1) {
                uint64_t v57 = 0;
              }
              else {
                uint64_t v57 = v56;
              }
              uint64_t v58 = *((void *)v57 + 10);
              uint64_t v59 = v57 + 80 - (char *)&v189;
              if (v58 == 1) {
                uint64_t v59 = 0;
              }
              uint64_t v60 = v59 + v58;
              uint64_t v189 = v59 + v58;
              BOOL v61 = v59 + v58 == 1;
              int64_t v62 = v171;
              if (v61) {
                int64_t v62 = 0;
              }
              uint64_t v63 = v62 + v60;
              uint64_t v186 = v63;
              if (v61) {
                uint64_t v64 = 0;
              }
              else {
                uint64_t v64 = &v190[v60 - 8];
              }
              if (v61) {
                int64_t v65 = 0;
              }
              else {
                int64_t v65 = (char *)&v189 - (char *)&v184;
              }
              if (v63 == 1) {
                unint64_t v66 = 0;
              }
              else {
                unint64_t v66 = (char *)&v186 + v63;
              }
              unint64_t v67 = boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()((uint64_t)v66);
              unint64_t v68 = 265 * ((~v67 + (v67 << 21)) ^ ((~v67 + (v67 << 21)) >> 24));
              unint64_t v69 = (*(void *)(v17 + 24) - 1) & (2147483649u
                                                   * ((21 * (v68 ^ (v68 >> 14))) ^ ((21 * (v68 ^ (v68 >> 14))) >> 28)));
              *((void *)v64 + 11) = v69 & 0x7FFFFFFFFFFFFFFFLL;
              int64_t v70 = v65 + v60;
              uint64_t v71 = (char *)&v184 + v65 + v60;
              if (v65 + v60 == 1) {
                uint64_t v71 = 0;
              }
              uint64_t v72 = *((void *)v71 + 10);
              uint64_t v73 = v71 + 80 - (char *)&v185;
              if (v72 == 1) {
                uint64_t v73 = 0;
              }
              uint64_t v74 = v73 + v72;
              if (v74 != 1)
              {
                uint64_t v75 = (char *)&v185 + v74;
                if (*(int64_t *)((char *)&v185 + v74 + 88) < 0)
                {
                  do
                  {
                    uint64_t v76 = v74 + v54;
                    if (v74 + v54 == 1) {
                      unint64_t v77 = 0;
                    }
                    else {
                      unint64_t v77 = v75;
                    }
                    *((void *)v77 + 11) = v69 | 0x8000000000000000;
                    if (v74 + v54 == 1) {
                      int64_t v78 = 0;
                    }
                    else {
                      int64_t v78 = (char *)&v189 - (char *)&v184;
                    }
                    int64_t v70 = v78 + v76;
                    unint64_t v79 = (char *)&v184 + v70;
                    if (v70 == 1) {
                      unint64_t v79 = 0;
                    }
                    uint64_t v80 = *((void *)v79 + 10);
                    uint64_t v81 = v79 + 80 - (char *)&v185;
                    if (v80 == 1) {
                      uint64_t v81 = 0;
                    }
                    uint64_t v74 = v81 + v80;
                    if (v74 == 1) {
                      break;
                    }
                    uint64_t v75 = (char *)&v185 + v74;
                  }
                  while (*(int64_t *)((char *)&v185 + v74 + 88) < 0);
                  uint64_t v189 = v76;
                }
              }
              int64_t v184 = v70;
              boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v185, v17, v69);
              unint64_t v82 = (char *)&v185 + v185;
              if (v185 == 1) {
                unint64_t v82 = 0;
              }
              if (*(void *)v82 == 1)
              {
                int64_t v83 = (char *)&__lasts - v82;
                if (__lasts == (char *)1) {
                  int64_t v83 = 0;
                }
                *(void *)unint64_t v82 = &__lasts[v83];
                int64_t v84 = v170;
                if (v189 == 1) {
                  int64_t v84 = 0;
                }
                int64_t v51 = (char *)(v84 + v189);
                __lasts = (char *)(v84 + v189);
                uint64_t v85 = (char *)&__lasts + v84 + v189;
              }
              else
              {
                if (v189 == 1) {
                  uint64_t v86 = 0;
                }
                else {
                  uint64_t v86 = &v190[v189 - 8];
                }
                uint64_t v89 = *((void *)v86 + 10);
                unint64_t v87 = v86 + 80;
                uint64_t v88 = v89;
                int64_t v90 = v87 - (char *)&v183;
                if (v89 == 1) {
                  int64_t v90 = 0;
                }
                uint64_t v91 = v90 + v88;
                uint64_t v183 = v91;
                if (*(void *)v82 == 1) {
                  uint64_t v92 = 0;
                }
                else {
                  uint64_t v92 = &v82[*(void *)v82];
                }
                uint64_t v93 = *((void *)v92 + 10);
                uint64_t v94 = v92 + 80 - v87;
                if (v93 == 1) {
                  uint64_t v94 = 0;
                }
                *(void *)unint64_t v87 = v94 + v93;
                int64_t v51 = __lasts;
                uint64_t v85 = (char *)&__lasts + (void)__lasts;
                if (__lasts == (char *)1) {
                  uint64_t v95 = 0;
                }
                else {
                  uint64_t v95 = (char *)&__lasts + (void)__lasts;
                }
                uint64_t v96 = *(void *)v82;
                uint64_t v97 = &v82[*(void *)v82];
                if (v96 == 1) {
                  uint64_t v97 = 0;
                }
                uint64_t v100 = *((void *)v95 + 10);
                uint64_t v98 = v95 + 80;
                uint64_t v99 = v100;
                uint64_t v101 = (char *)(v98 - (v97 + 80));
                if (v100 == 1) {
                  uint64_t v101 = 0;
                }
                *((void *)v97 + 10) = &v101[v99];
                uint64_t v102 = (char *)((char *)&v183 - v98);
                if (v91 == 1) {
                  uint64_t v102 = 0;
                }
                *(void *)uint64_t v98 = &v102[v91];
              }
              BOOL v52 = v51 == (char *)1;
              if (v51 == (char *)1) {
                uint64_t v85 = 0;
              }
            }
            while (*((void *)v85 + 10) != 1);
          }
          int v13 = v175;
          uint64_t v39 = v173;
          uint64_t v34 = v169;
        }
      }
    }
    int64_t v103 = v34 - (char *)&v184;
    if (v182[0] == 1) {
      int64_t v103 = 0;
    }
    int64_t v184 = v103 + v182[0];
    v182[0] = 1;
    uint64_t v104 = (*(void *)(v17 + 24) - 1) & v39;
    boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&__lasts, v17, v104);
    int64_t v105 = v184;
    float v106 = (char *)&v184 + v184;
    if (v184 == 1) {
      float v106 = 0;
    }
    *((void *)v106 + 11) = v104 & 0x7FFFFFFFFFFFFFFFLL;
    if (__lasts == (char *)1) {
      uint64_t v107 = 0;
    }
    else {
      uint64_t v107 = (uint64_t *)((char *)&__lasts + (void)__lasts);
    }
    if (*v107 == 1)
    {
      boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v189, v17, *(void *)(v17 + 24));
      if (v189 == 1) {
        uint64_t v108 = 0;
      }
      else {
        uint64_t v108 = &v190[v189 - 8];
      }
      uint64_t v109 = *(void *)v108;
      int64_t v110 = v108 - (char *)&v187;
      if (v109 == 1) {
        int64_t v110 = 0;
      }
      uint64_t v111 = v110 + v109;
      uint64_t v187 = v111;
      uint64_t v112 = (char *)&v187 + v111;
      if (v111 == 1) {
        uint64_t v112 = 0;
      }
      uint64_t v2 = v174;
      if (*((void *)v112 + 10) != 1)
      {
        int64_t v113 = (char *)&v187 - (char *)&v185;
        if (v111 == 1) {
          int64_t v113 = 0;
        }
        int64_t v114 = v113 + v111;
        uint64_t v115 = (char *)&v185 + v114;
        if (v114 == 1) {
          uint64_t v115 = 0;
        }
        uint64_t v116 = *((void *)v115 + 10);
        int64_t v185 = v114;
        uint64_t v117 = v115 + 80 - (char *)&v186;
        if (v116 == 1) {
          uint64_t v117 = 0;
        }
        uint64_t v186 = v117 + v116;
        unint64_t v118 = (char *)&v186 + v117 + v116;
        if (v117 + v116 == 1) {
          unint64_t v118 = 0;
        }
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v189, v17, *((void *)v118 + 11) & 0x7FFFFFFFFFFFFFFFLL);
        if (v189 == 1) {
          uint64_t v119 = 0;
        }
        else {
          uint64_t v119 = &v190[v189 - 8];
        }
        int64_t v120 = (char *)((char *)&v184 - v119);
        if (v184 == 1) {
          int64_t v120 = 0;
        }
        *(void *)uint64_t v119 = &v120[v184];
        uint64_t v111 = v187;
        uint64_t v2 = v174;
      }
      if (__lasts == (char *)1) {
        uint64_t v121 = 0;
      }
      else {
        uint64_t v121 = (char *)&__lasts + (void)__lasts;
      }
      uint64_t v122 = (char *)((char *)&v187 - v121);
      if (v111 == 1) {
        uint64_t v122 = 0;
      }
      *(void *)uint64_t v121 = &v122[v111];
      unint64_t v123 = (char *)&v187 + v187;
      if (v187 == 1) {
        unint64_t v123 = 0;
      }
      int64_t v105 = v184;
      unint64_t v124 = (char *)&v184 + v184;
      uint64_t v127 = *((void *)v123 + 10);
      uint64_t v125 = v123 + 80;
      uint64_t v126 = v127;
      uint64_t v128 = (char *)((char *)&v184 - v125);
      if (v184 == 1)
      {
        unint64_t v124 = 0;
        uint64_t v128 = 0;
      }
      int64_t v129 = v125 - (v124 + 80);
      if (v126 == 1) {
        int64_t v129 = 0;
      }
      *((void *)v124 + 10) = v129 + v126;
      *(void *)uint64_t v125 = &v128[v105];
    }
    else
    {
      uint64_t v130 = (char *)v107 + *v107;
      uint64_t v131 = *((void *)v130 + 10);
      uint64_t v132 = v130 - v106;
      if (v131 == 1) {
        uint64_t v132 = 0;
      }
      *((void *)v106 + 10) = v132 + v131;
      uint64_t v133 = *v107;
      int64_t v134 = (char *)v107 + *v107;
      if (v133 == 1) {
        uint64_t v135 = 0;
      }
      else {
        uint64_t v135 = v134;
      }
      int64_t v136 = (char *)((char *)&v184 - (v135 + 80));
      if (v105 == 1) {
        int64_t v136 = 0;
      }
      *((void *)v135 + 10) = &v136[v105];
      uint64_t v2 = v174;
    }
    ++*(void *)(v17 + 32);
    int64_t v137 = (char *)&v184 - (char *)&v189;
    if (v105 == 1) {
      int64_t v137 = 0;
    }
    uint64_t v189 = v137 + v105;
    boost::unordered::detail::node_tmp<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_tmp((uint64_t)&__endptr);
    int64_t v138 = (char *)&v189 - (char *)&__endptr;
    if (v189 == 1) {
      int64_t v138 = 0;
    }
    uint64_t v139 = v138 + v189;
    int64_t v140 = (char *)&__endptr - (char *)&v176;
    if (v139 == 1) {
      int64_t v140 = 0;
    }
    uint64_t v176 = v140 + v139;
    char v177 = 1;
  }
  else
  {
    uint64_t v41 = v179 + (char *)&v179 - (char *)&v189;
    int64_t v42 = (char *)&v189 - (char *)&__endptr;
    if (v41 == 1) {
      int64_t v42 = 0;
    }
    uint64_t v43 = v42 + v41;
    int64_t v44 = (char *)&__endptr - (char *)&v176;
    if (v43 == 1) {
      int64_t v44 = 0;
    }
    uint64_t v176 = v44 + v43;
    char v177 = 0;
  }
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)v190);
  if (!v177)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v190 = 136446210;
      *(void *)&v190[4] = v2;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "POI hash already in the index: %{public}s", v190, 0xCu);
    }
    uint64_t v45 = 0;
    goto LABEL_250;
  }
  int v141 = v2;
  if (v176 == 1) {
    uint64_t v142 = 0;
  }
  else {
    uint64_t v142 = (uint64_t *)((char *)&v176 + v176);
  }
  __lasts = 0;
  int v143 = strtok_r(v12, ",", &__lasts);
  if (!v143)
  {
LABEL_230:
    unint64_t v157 = v142[9];
    if (v157)
    {
      uint64_t v158 = v142 + 6;
      if (!v142[8])
      {
        uint64_t v165 = (char *)(v142 + 7);
        uint64_t v166 = v142[7];
        if (v166 != 1)
        {
          *(void *)uint64_t v190 = v166 + v165 - v190;
          if (*(void *)v190 != 1)
          {
            uint64_t v167 = (uint64_t)&v165[v166];
            if (v167)
            {
              if (*v158 == 1) {
                uint64_t v168 = 0;
              }
              else {
                uint64_t v168 = (char *)v158 + *v158;
              }
              boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v168, v167);
            }
          }
        }
        uint64_t v45 = 1;
        v142[7] = 1;
        v142[9] = 0;
        goto LABEL_249;
      }
      *(void *)uint64_t v190 = v142[8];
      uint64_t v159 = v142[7];
      uint64_t v160 = (char *)(v142 + 7) - (char *)&__endptr;
      if (v159 == 1) {
        uint64_t v160 = 0;
      }
      __endptr = (char *)(v160 + v159);
      boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v189, v158, 24, v157, (unint64_t *)v190, (uint64_t *)&__endptr);
      if (v189 != 1) {
        v142[9] = *(void *)v190;
      }
    }
    uint64_t v45 = 1;
    goto LABEL_249;
  }
  double v144 = v143;
  while (1)
  {
    __endptr = 0;
    uint64_t v145 = strtol(v144, &__endptr, 10);
    unint64_t v146 = strrchr(v144, 58);
    if (!v146 || v144 == __endptr)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_248;
      }
      *(_DWORD *)uint64_t v190 = 136315138;
      *(void *)&v190[4] = v141;
      uint64_t v161 = MEMORY[0x1E4F14500];
      uint64_t v162 = "malformed POI line: %s";
LABEL_241:
      uint32_t v163 = 12;
      goto LABEL_247;
    }
    char *v146 = 0;
    unint64_t v147 = v146 + 1;
    uint64_t v148 = strtol(v146 + 1, &__endptr, 10);
    if (v147 == __endptr)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_248;
      }
      *(_DWORD *)uint64_t v190 = 136315138;
      *(void *)&v190[4] = v141;
      uint64_t v161 = MEMORY[0x1E4F14500];
      uint64_t v162 = "malformed POI line: %s";
      goto LABEL_241;
    }
    if (v145 > 255 || (unint64_t)v145 >= *(void *)(*((void *)this + 15) + 16)) {
      break;
    }
    uint64_t v149 = v148;
    if (v148 > 255 || (unint64_t)v148 >= *(void *)(*((void *)this + 14) + 16))
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_248;
      }
      *(_DWORD *)uint64_t v190 = 136315394;
      *(void *)&v190[4] = v141;
      __int16 v191 = 2048;
      uint64_t v192 = v149;
      uint64_t v161 = MEMORY[0x1E4F14500];
      uint64_t v162 = "malformed POI line: %s; tfIDF out of range: %ld";
      goto LABEL_246;
    }
    __int16 v150 = v145 | (unsigned __int16)((_WORD)v148 << 8);
    LOWORD(v189) = v150;
    uint64_t v151 = v142[7];
    uint64_t v152 = v142[8];
    if (v151 == 1) {
      uint64_t v153 = 0;
    }
    else {
      uint64_t v153 = (char *)v142 + v151 + 56;
    }
    int64_t v154 = &v153[2 * v152];
    if (v152 == v142[9])
    {
      boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned char,unsigned char>*,std::pair<unsigned char,unsigned char>>>(v190, (uint64_t)(v142 + 6), v154, (uint64_t)&v189);
      if (*(void *)v190 == 1) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
    }
    else
    {
      if (v153) {
        uint64_t v155 = v154 - v190;
      }
      else {
        uint64_t v155 = 1;
      }
      if (v155 == 1) {
        unint64_t v156 = 0;
      }
      else {
        unint64_t v156 = &v190[v155];
      }
      *unint64_t v156 = v150;
      ++v142[8];
    }
    double v144 = strtok_r(0, ",", &__lasts);
    if (!v144) {
      goto LABEL_230;
    }
  }
  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    goto LABEL_248;
  }
  *(_DWORD *)uint64_t v190 = 136315394;
  *(void *)&v190[4] = v141;
  __int16 v191 = 2048;
  uint64_t v192 = v145;
  uint64_t v161 = MEMORY[0x1E4F14500];
  uint64_t v162 = "malformed POI line: %s; scene ID out of range: %ld";
LABEL_246:
  uint32_t v163 = 22;
LABEL_247:
  _os_log_error_impl(&dword_1A41FE000, v161, OS_LOG_TYPE_ERROR, v162, v190, v163);
LABEL_248:
  uint64_t v45 = 0;
LABEL_249:
  int v13 = v175;
LABEL_250:
  boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector(v13);
  return v45;
}

void sub_1A42B0744()
{
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(v0);
  JUMPOUT(0x1A42B0890);
}

void sub_1A42B0758(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    int64_t v33 = (char *)&a31 - (char *)&a28;
    if (a31 == 1) {
      int64_t v33 = 0;
    }
    uint64_t v34 = v33 + a31;
    a28 = v34;
    if (a31 == 1) {
      int64_t v35 = 0;
    }
    else {
      int64_t v35 = (char *)&a31 + a31;
    }
    if (v34 == 1) {
      unint64_t v36 = 0;
    }
    else {
      unint64_t v36 = (char *)&a28 + v34;
    }
    uint64_t v37 = *((void *)v36 + 10);
    uint64_t v38 = v36 + 80 - (char *)&a32;
    if (v37 == 1) {
      uint64_t v38 = 0;
    }
    uint64_t v39 = v38 + v37;
    a32 = v39;
    *((void *)v35 + 10) = 1;
    if (v39 != 1)
    {
      int64_t v40 = (char *)&a32 - (char *)&a25;
      do
      {
        a25 = v39 + v40;
        if (v39 + v40 == 1) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = (char *)&a32 + v39;
        }
        uint64_t v42 = *((void *)v41 + 10);
        uint64_t v43 = v41 + 80 - (char *)&a26;
        if (v42 == 1) {
          uint64_t v43 = 0;
        }
        a26 = v43 + v42;
        a24 = (char *)&a32 - (char *)&a24 + v39;
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_node(v32, (char *)&a24);
        --*(void *)(v32 + 32);
        if (a26 == 1) {
          int64_t v44 = 0;
        }
        else {
          int64_t v44 = (char *)&a26 - (char *)&a32;
        }
        uint64_t v39 = v44 + a26;
        a32 = v44 + a26;
      }
      while (v44 + a26 != 1);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1A42B08A8);
}

void sub_1A42B0850()
{
}

void sub_1A42B085C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1A42B08A8);
}

void sub_1A42B086C()
{
}

void sub_1A42B0874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
}

char *boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(uint64_t *a1, void *a2, char a3, unint64_t a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v9 = 0;
  uint64_t result = 0;
  uint64_t v11 = (uint64_t)a6 + *a6;
  if (*a6 == 1) {
    uint64_t v11 = 0;
  }
  if (*a2 == 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = (uint64_t)a2 + *a2;
  }
  uint64_t v21 = v11;
  unint64_t v13 = *a5;
  unint64_t v14 = *(void *)(v12 + 48) >> 1;
  if (v14 >= a4 && v13 <= v14)
  {
    unint64_t v22 = 2 * v13;
    uint64_t result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v12, a3 | 0x10u, 2 * a4, &v22, &v21, 2uLL);
    uint64_t v9 = v21;
    *a5 = v22 >> 1;
  }
  if ((a3 & 0x10) == 0 && !result)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    uint64_t v20 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(void *)uint64_t v20 = &unk_1EF7A9B00;
  }
  uint64_t v17 = result - (char *)a1;
  if (!result) {
    uint64_t v17 = 1;
  }
  *a1 = v17;
  uint64_t v18 = v9 - (void)a6;
  if (!v9) {
    uint64_t v18 = 1;
  }
  *a6 = v18;
  return result;
}

void *boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned char,unsigned char>*,std::pair<unsigned char,unsigned char>>>(void *a1, uint64_t a2, char *a3, uint64_t a4)
{
  double v5 = (char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 24);
  if (v6 != *(void *)(a2 + 16)) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  if (*(void *)a2 == 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)a2 + a2;
  }
  unint64_t v9 = *(void *)(v8 + 48) >> 1;
  if (v9 == v6) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
  }
  if (v6 >> 61 > 4) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = 8 * v6;
  }
  if (v6 >> 61) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = 8 * v6 / 5;
  }
  unint64_t v15 = v6 + 1;
  if (v14 < v9) {
    unint64_t v9 = v14;
  }
  if (v15 > v9) {
    unint64_t v16 = v6 + 1;
  }
  else {
    unint64_t v16 = v9;
  }
  int64_t v17 = v5 - (char *)&v113;
  if (v4 == 1) {
    int64_t v17 = 0;
  }
  uint64_t v113 = v17 + v4;
  unint64_t v114 = v16;
  uint64_t result = boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v112, (void *)a2, 7, v15, &v114, &v113);
  if (v113 == 1)
  {
    uint64_t v108 = a1;
    uint64_t v19 = v4;
    uint64_t v20 = (_WORD *)a4;
    if (v112 == 1) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = (char *)&v112 + v112;
    }
    unint64_t v22 = v114;
    uint64_t v23 = *(void *)(a2 + 8);
    uint64_t v24 = *(void *)(a2 + 16);
    if (v23 == 1) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = &v5[v23];
    }
    int64_t v26 = (char *)&v115 - (char *)v116;
    uint64_t v27 = v21 - (char *)&v115;
    if (!v21) {
      uint64_t v27 = 1;
    }
    uint64_t v115 = v27;
    if (v27 == 1) {
      int64_t v26 = 0;
    }
    v116[0] = v26 + v27;
    v116[1] = a2;
    v116[2] = v114;
    if (v25 && v25 != a3 && v21)
    {
      memmove(v21, v25, a3 - v25);
      uint64_t v28 = &v21[a3 - v25];
    }
    else
    {
      uint64_t v28 = v21;
    }
    uint64_t v29 = v28 - (char *)&v117;
    if (!v28) {
      uint64_t v29 = 1;
    }
    unint64_t v30 = (_WORD *)((char *)&v117 + v29);
    if (v29 == 1) {
      unint64_t v30 = 0;
    }
    *unint64_t v30 = *v20;
    if (a3)
    {
      int64_t v31 = &v25[2 * v24];
      if (v31 != a3) {
        memmove(v28 + 2, a3, v31 - a3);
      }
    }
    v116[0] = 1;
    uint64_t v4 = v19;
    a1 = v108;
    if (v25)
    {
      int64_t v32 = v5 - (char *)&v117;
      if (*(void *)v5 == 1) {
        int64_t v32 = 0;
      }
      uint64_t v33 = v32 + *(void *)v5;
      uint64_t v117 = v33;
      if (v33 != 1 && (uint64_t *)((char *)&v117 + v33))
      {
        if (*(void *)a2 == 1) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = (char *)(*(void *)a2 + a2);
        }
        boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v34, (uint64_t)&v117 + v33);
      }
    }
    uint64_t v35 = v21 - (char *)&v117;
    if (!v21) {
      uint64_t v35 = 1;
    }
    unint64_t v36 = (char *)((char *)&v117 - v5);
    if (v35 == 1) {
      unint64_t v36 = 0;
    }
    uint64_t v37 = &v36[v35];
    uint64_t v38 = *(void *)(a2 + 16) + 1;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = v37;
    *(void *)(a2 + 16) = v38;
    *(void *)(a2 + 24) = v22;
    uint64_t result = boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(v116);
    goto LABEL_55;
  }
  if (*(void *)v5 == 1) {
    unint64_t v46 = 0;
  }
  else {
    unint64_t v46 = &v5[*(void *)v5];
  }
  if (v112 == 1) {
    unint64_t v47 = 0;
  }
  else {
    unint64_t v47 = (char *)&v112 + v112;
  }
  unint64_t v48 = v114;
  uint64_t v49 = v46 - v47;
  if (v46 == v47)
  {
    *(void *)(a2 + 24) = v114;
    uint64_t v69 = *(void *)(a2 + 16);
    if (v69 == v48) {
      __assert_rtn("priv_insert_forward_range_expand_forward", "vector.hpp", 2966, "this->room_enough()");
    }
    int64_t v70 = &v46[2 * v69];
    if (v70 == a3)
    {
      uint64_t v94 = a3 - (char *)v116;
      if (!v46) {
        uint64_t v94 = 1;
      }
      uint64_t v95 = (_WORD *)((char *)v116 + v94);
      if (v94 == 1) {
        uint64_t v95 = 0;
      }
      *uint64_t v95 = *(_WORD *)a4;
      ++*(void *)(a2 + 16);
    }
    else
    {
      uint64_t v71 = v70 - 2;
      __int16 v72 = *((_WORD *)v70 - 1);
      uint64_t v73 = v70 - (char *)v116;
      if (!v46) {
        uint64_t v73 = 1;
      }
      if (v73 == 1) {
        uint64_t v74 = 0;
      }
      else {
        uint64_t v74 = (_WORD *)((char *)v116 + v73);
      }
      _WORD *v74 = v72;
      ++*(void *)(a2 + 16);
      if (v71 != a3)
      {
        uint64_t v75 = v71;
        do
        {
          __int16 v76 = *((_WORD *)v75 - 1);
          v75 -= 2;
          *(_WORD *)uint64_t v71 = v76;
          uint64_t v71 = v75;
        }
        while (v75 != a3);
      }
      *a3 = *(unsigned char *)a4;
      a3[1] = *(unsigned char *)(a4 + 1);
    }
    goto LABEL_55;
  }
  uint64_t v107 = (char *)a4;
  uint64_t v109 = a1;
  uint64_t v50 = *(void *)(a2 + 16);
  int64_t v51 = &v46[2 * v50];
  uint64_t v52 = v47 - (char *)v116;
  if (!v47) {
    uint64_t v52 = 1;
  }
  uint64_t v53 = (char *)((char *)v116 - v5);
  if (v52 == 1) {
    uint64_t v53 = 0;
  }
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v48;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = &v53[v52];
  unint64_t v54 = (a3 - v46) >> 1;
  unint64_t v55 = v49 >> 1;
  unint64_t v56 = v54 + 1;
  uint64_t v57 = v46 - (char *)&v117;
  if (!v46) {
    uint64_t v57 = 1;
  }
  uint64_t v117 = v57;
  if (v55 >= v56)
  {
    if (v46 == a3 || !v46)
    {
      unint64_t v77 = v47;
    }
    else
    {
      unint64_t v77 = v47;
      if (v47)
      {
        int64_t v78 = v46;
        size_t v79 = a3 - v46;
        uint64_t v80 = v50;
        uint64_t v81 = v49 >> 1;
        uint64_t result = memmove(v47, v78, v79);
        unint64_t v55 = v81;
        uint64_t v50 = v80;
        unint64_t v77 = &v47[2 * v54];
      }
    }
    *(void *)(a2 + 16) = v54;
    if (v77) {
      uint64_t v82 = v77 - (char *)v116;
    }
    else {
      uint64_t v82 = 1;
    }
    if (v82 == 1) {
      int64_t v83 = 0;
    }
    else {
      int64_t v83 = (_WORD *)((char *)v116 + v82);
    }
    *int64_t v83 = *(_WORD *)v107;
    *(void *)(a2 + 16) = v56;
    uint64_t v84 = v50 + 1;
    if (v55 >= v50 + 1)
    {
      BOOL v93 = v50 == v54;
      a1 = v109;
      if (v93) {
        goto LABEL_55;
      }
      size_t v85 = v51 - a3;
      if (v51 == a3 || !a3 || !v47) {
        goto LABEL_142;
      }
    }
    else
    {
      size_t v85 = v51 - a3;
      a1 = v109;
      if (v51 == a3) {
        goto LABEL_142;
      }
    }
    uint64_t result = memmove(&v47[2 * v56], a3, v85);
LABEL_142:
    *(void *)(a2 + 16) = v84;
    goto LABEL_55;
  }
  unint64_t v58 = v55 - v54;
  if (v55 <= v54)
  {
    uint64_t v86 = v49 >> 1;
    uint64_t v87 = v50;
    if (v46 == v47)
    {
      uint64_t v88 = v50;
    }
    else
    {
      uint64_t result = memmove(v47, v46, v46 - v47);
      uint64_t v49 = v46 - v47;
      uint64_t v88 = v87 + 1;
    }
    *(void *)(a2 + 16) = v88;
    uint64_t v89 = v86;
    int64_t v90 = &v46[2 * v86];
    a1 = v109;
    if (v90 == a3)
    {
      uint64_t v92 = v46;
    }
    else
    {
      uint64_t v91 = 2 * v89;
      uint64_t v92 = v46;
      do
      {
        *(_WORD *)uint64_t v92 = *(_WORD *)&v92[v91];
        v92 += 2;
      }
      while (&v92[v91] != a3);
    }
    if (v46 == v47) {
      goto LABEL_164;
    }
    char *v92 = *v107;
    v92[1] = v107[1];
    if ((unint64_t)v49 >= 4 && v51 != a3)
    {
      uint64_t v101 = v92 + 3;
      uint64_t v102 = a3;
      do
      {
        *(v101 - 1) = *v102;
        *uint64_t v101 = v102[1];
        v101 += 2;
        v102 += 2;
      }
      while (v102 != v51);
    }
  }
  else
  {
    uint64_t v105 = v49 >> 1;
    uint64_t v106 = v50;
    uint64_t v104 = v46 - v47;
    if (v46 && v47)
    {
      uint64_t v59 = v47;
      if (v46 != a3)
      {
        uint64_t result = memmove(v47, v46, a3 - v46);
        uint64_t v59 = &v47[2 * v54];
      }
    }
    else
    {
      uint64_t v59 = v47;
    }
    *(void *)(a2 + 16) = v54;
    if (v58 != 1) {
      goto LABEL_166;
    }
    if (v59) {
      uint64_t v60 = v59 - (char *)v116;
    }
    else {
      uint64_t v60 = 1;
    }
    if (v60 == 1) {
      BOOL v61 = 0;
    }
    else {
      BOOL v61 = (_WORD *)((char *)v116 + v60);
    }
    _WORD *v61 = *(_WORD *)v107;
    uint64_t v62 = v105 + v106;
    *(void *)(a2 + 16) = v105 + v106;
    if (v46 != v47 || a3 - v46 != 2) {
LABEL_164:
    }
      __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 215, "n == 1");
    char *v46 = *v107;
    v46[1] = v107[1];
    uint64_t v63 = 1 - v105;
    unint64_t v64 = v106 - v54;
    unint64_t v65 = 1 - v105 - v64;
    if (1 - v105 > v64)
    {
      if (v51 != a3 && a3 && v46) {
        uint64_t result = memmove(&v51[2 * v65], a3, v51 - a3);
      }
      uint64_t v66 = &v51[2 * v65] - (char *)&v115;
      if (!v46) {
        uint64_t v66 = 1;
      }
      uint64_t v115 = v66;
      if (v64 == 1)
      {
        *a3 = *v107;
        a3[1] = v107[1];
        if (v65 == 1)
        {
          uint64_t v67 = v51 - (char *)v116;
          if (!v46) {
            uint64_t v67 = 1;
          }
          unint64_t v68 = (_WORD *)((char *)v116 + v67);
          if (v67 == 1) {
            unint64_t v68 = 0;
          }
          *unint64_t v68 = *(_WORD *)v107;
          *(void *)(a2 + 16) += v63;
          a1 = v109;
          goto LABEL_55;
        }
LABEL_166:
        __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
      }
      goto LABEL_164;
    }
    uint64_t v103 = v4;
    uint64_t v96 = &v51[2 * v105];
    uint64_t v97 = v96 - 2;
    if (v46)
    {
      uint64_t v98 = v107;
      if (v104 != 2)
      {
        uint64_t result = memmove(v51, v96 - 2, v51 - v97);
        uint64_t v62 = *(void *)(a2 + 16);
      }
    }
    else
    {
      uint64_t v98 = v107;
    }
    *(void *)(a2 + 16) = v62 + v63;
    if (v97 != a3)
    {
      uint64_t v99 = 2 * v105;
      uint64_t v100 = &v46[2 * v106 - 2];
      do
      {
        *(_WORD *)uint64_t v100 = *(_WORD *)&v100[v99 - 2];
        v100 -= 2;
      }
      while (&v100[v99] != a3);
    }
    *a3 = *v98;
    a3[1] = v98[1];
    a1 = v109;
    uint64_t v4 = v103;
  }
LABEL_55:
  uint64_t v39 = &v5[v4];
  if (v4 == 1) {
    uint64_t v39 = 0;
  }
  int64_t v40 = (unsigned char *)(a3 - v39);
  int64_t v41 = v5 - &v110;
  if (*(void *)v5 == 1) {
    int64_t v41 = 0;
  }
  uint64_t v42 = &v40[*(void *)v5 + v41];
  int64_t v43 = &v110 - v111;
  if (v42 == (unsigned char *)1) {
    int64_t v43 = 0;
  }
  uint64_t v44 = (uint64_t)&v42[v43];
  uint64_t v45 = (unsigned char *)(v111 - (unsigned char *)a1);
  if (v44 == 1) {
    uint64_t v45 = 0;
  }
  *a1 = &v45[v44];
  return result;
}

void sub_1A42B11AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(void *a1)
{
  uint64_t v2 = (uint64_t)a1 + *a1;
  if (*a1 != 1 && v2 != 0)
  {
    uint64_t v4 = (uint64_t *)a1[1];
    uint64_t v5 = *v4;
    unint64_t v6 = (char *)v4 + *v4;
    if (v5 == 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v7, v2);
  }
  return a1;
}

double boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(uint64_t **a1)
{
  int v1 = a1 + 1;
  if (a1[1] != (uint64_t *)1) {
    __assert_rtn("create_node", "implementation.hpp", 1984, "!node_");
  }
  uint64_t v3 = **a1;
  if (v3 == 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (uint64_t)*a1 + v3;
  }
  uint64_t v5 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v4, 0x60uLL);
  unint64_t v6 = (unsigned char *)(v10 - (unsigned char *)v1);
  if (v5 - v10 == 1) {
    unint64_t v6 = 0;
  }
  uint64_t v7 = (uint64_t *)&v6[v5 - v10];
  a1[1] = v7;
  if (v7 == (uint64_t *)1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (_OWORD *)((char *)v1 + (void)v7);
  }
  double result = 0.0;
  _DWORD v8[2] = 0u;
  v8[3] = 0u;
  *uint64_t v8 = 0u;
  v8[1] = 0u;
  void v8[4] = 0u;
  v8[5] = xmmword_1A42D3640;
  return result;
}

uint64_t boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 != 1)
  {
    uint64_t v4 = *(char **)a1;
    uint64_t v6 = v2 - (void)&v6 + v3;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v4, &v6);
  }
  return a1;
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::create_buckets(uint64_t a1, unint64_t a2)
{
  uint64_t v37 = 1;
  uint64_t v5 = (char *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 == 1)
  {
    uint64_t v34 = (uint64_t *)(a1 + 16);
    uint64_t v35 = 1;
    boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(&v34);
    double result = boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v33, (void *)(a1 + 8), a2 + 1);
    int64_t v7 = (char *)&v33 - v5;
    if (v33 == (char *)1) {
      int64_t v7 = 0;
    }
    uint64_t v8 = &v33[v7];
    *(void *)uint64_t v5 = &v33[v7];
    if (v35 == 1) {
      __assert_rtn("release", "implementation.hpp", 1955, "node_");
    }
    uint64_t v9 = v35 + (char *)&v35 - (char *)&v33;
    int64_t v10 = (char *)&v33 - (char *)&v37;
    if (v9 == 1) {
      int64_t v10 = 0;
    }
    uint64_t v37 = v10 + v9;
  }
  else
  {
    uint64_t v11 = v4 + v5 - (char *)&v36 + 8 * *(void *)(a1 + 24);
    uint64_t v36 = v11;
    int64_t v12 = (char *)&v36 - (char *)&v34;
    if (v11 == 1) {
      int64_t v12 = 0;
    }
    uint64_t v13 = (uint64_t *)(v12 + v11);
    uint64_t v34 = v13;
    if (v13 == (uint64_t *)1) {
      unint64_t v14 = 0;
    }
    else {
      unint64_t v14 = (char *)&v34 + (void)v13;
    }
    uint64_t v15 = *(void *)v14;
    int64_t v16 = v14 - (char *)&v37;
    if (v15 == 1) {
      int64_t v16 = 0;
    }
    uint64_t v37 = v16 + v15;
    boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v34, (void *)(a1 + 8), a2 + 1);
    double result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_buckets((void *)a1);
    int64_t v17 = (char *)((char *)&v34 - v5);
    if (v34 == (uint64_t *)1) {
      int64_t v17 = 0;
    }
    uint64_t v8 = (char *)v34 + (void)v17;
    *(void *)(a1 + 56) = (char *)v34 + (void)v17;
  }
  *(void *)(a1 + 24) = a2;
  if (v8 == (char *)1)
  {
    unint64_t v18 = 0;
  }
  else
  {
    double v19 = (double)a2 * *(float *)(a1 + 40);
    unint64_t v18 = vcvtpd_u64_f64(v19);
    if (ceil(v19) >= 1.84467441e19) {
      unint64_t v18 = -1;
    }
  }
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x360], 8) = v18;
  int64_t v20 = v5 - &v32;
  int64_t v21 = &v32 - (char *)&v34;
  int64_t v22 = v5 - (char *)&v33;
  if (v8 == (char *)1) {
    int64_t v20 = 0;
  }
  uint64_t v23 = &v8[8 * a2 + v20];
  if (v8 == (char *)1) {
    int64_t v22 = 0;
  }
  if (v23 == (char *)1) {
    int64_t v21 = 0;
  }
  uint64_t v24 = (uint64_t *)&v23[v21];
  uint64_t v25 = &v8[v22];
  uint64_t v33 = v25;
  uint64_t v34 = v24;
  if (v25 == (char *)1) {
    int64_t v26 = 0;
  }
  else {
    int64_t v26 = (char *)&v33 + (void)v25;
  }
  if (v24 == (uint64_t *)1) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = (char *)&v34 + (void)v24;
  }
  while (v26 != v27)
  {
    *(void *)int64_t v26 = 1;
    uint64_t v28 = v33 + 8;
    uint64_t v33 = v28;
    if (v28 == (char *)1) {
      int64_t v26 = 0;
    }
    else {
      int64_t v26 = (char *)&v33 + (void)v28;
    }
    if (v34 == (uint64_t *)1) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = (char *)&v34 + (void)v34;
    }
  }
  int64_t v29 = (char *)&v37 - v31;
  if (v37 == 1) {
    int64_t v29 = 0;
  }
  unint64_t v30 = (unsigned char *)(v31 - v27);
  if (v29 + v37 == 1) {
    unint64_t v30 = 0;
  }
  *(void *)int64_t v26 = &v30[v29 + v37];
  return result;
}

void sub_1A42B15A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::unordered::detail::node_tmp<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_tmp(uint64_t a1)
{
  uint64_t v3 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != 1)
  {
    uint64_t v4 = v2 + v3;
    boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector((char *)(v2 + v3 + 48));
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(v4);
    uint64_t v5 = *(char **)a1;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = v3 - (void)&v9;
    if (v6 == 1) {
      uint64_t v7 = 0;
    }
    uint64_t v9 = v7 + v6;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v5, &v9);
  }
  return a1;
}

void *boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned int *,unsigned int>>(void *a1, uint64_t a2, char *a3, _DWORD *a4)
{
  uint64_t v5 = (char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 24);
  if (v6 != *(void *)(a2 + 16)) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  if (*(void *)a2 == 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)a2 + a2;
  }
  unint64_t v9 = *(void *)(v8 + 48) >> 2;
  if (v9 == v6) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
  }
  if (v6 >> 61 > 4) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = 8 * v6;
  }
  if (v6 >> 61) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = 8 * v6 / 5;
  }
  unint64_t v15 = v6 + 1;
  if (v14 < v9) {
    unint64_t v9 = v14;
  }
  if (v15 > v9) {
    unint64_t v16 = v6 + 1;
  }
  else {
    unint64_t v16 = v9;
  }
  int64_t v17 = v5 - (char *)&v99;
  if (v4 == 1) {
    int64_t v17 = 0;
  }
  uint64_t v99 = v17 + v4;
  unint64_t v100 = v16;
  double result = boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v98, (void *)a2, 7, v15, &v100, &v99);
  if (v99 == 1)
  {
    uint64_t v94 = a1;
    uint64_t v19 = v4;
    int64_t v20 = a4;
    if (v98 == 1) {
      int64_t v21 = 0;
    }
    else {
      int64_t v21 = (char *)&v98 + v98;
    }
    unint64_t v22 = v100;
    uint64_t v23 = *(void *)(a2 + 8);
    uint64_t v24 = *(void *)(a2 + 16);
    if (v23 == 1) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = &v5[v23];
    }
    int64_t v26 = (char *)&v101 - (char *)v102;
    uint64_t v27 = v21 - (char *)&v101;
    if (!v21) {
      uint64_t v27 = 1;
    }
    uint64_t v101 = v27;
    if (v27 == 1) {
      int64_t v26 = 0;
    }
    v102[0] = v26 + v27;
    v102[1] = a2;
    v102[2] = v100;
    if (v25 && v25 != a3 && v21)
    {
      memmove(v21, v25, a3 - v25);
      uint64_t v28 = &v21[a3 - v25];
    }
    else
    {
      uint64_t v28 = v21;
    }
    uint64_t v29 = v28 - (char *)&v103;
    if (!v28) {
      uint64_t v29 = 1;
    }
    unint64_t v30 = (_DWORD *)((char *)&v103 + v29);
    if (v29 == 1) {
      unint64_t v30 = 0;
    }
    *unint64_t v30 = *v20;
    if (a3)
    {
      int64_t v31 = &v25[4 * v24];
      if (v31 != a3) {
        memmove(v28 + 4, a3, v31 - a3);
      }
    }
    v102[0] = 1;
    uint64_t v4 = v19;
    a1 = v94;
    if (v25)
    {
      int64_t v32 = v5 - (char *)&v103;
      if (*(void *)v5 == 1) {
        int64_t v32 = 0;
      }
      uint64_t v33 = v32 + *(void *)v5;
      uint64_t v103 = v33;
      if (v33 != 1 && (uint64_t *)((char *)&v103 + v33))
      {
        if (*(void *)a2 == 1) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = (char *)(*(void *)a2 + a2);
        }
        boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v34, (uint64_t)&v103 + v33);
      }
    }
    uint64_t v35 = v21 - (char *)&v103;
    if (!v21) {
      uint64_t v35 = 1;
    }
    uint64_t v36 = (char *)((char *)&v103 - v5);
    if (v35 == 1) {
      uint64_t v36 = 0;
    }
    uint64_t v37 = &v36[v35];
    uint64_t v38 = *(void *)(a2 + 16) + 1;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = v37;
    *(void *)(a2 + 16) = v38;
    *(void *)(a2 + 24) = v22;
    double result = boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(v102);
    goto LABEL_151;
  }
  if (*(void *)v5 == 1) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = &v5[*(void *)v5];
  }
  if (v98 == 1) {
    int64_t v40 = 0;
  }
  else {
    int64_t v40 = (char *)&v98 + v98;
  }
  unint64_t v41 = v100;
  if (v39 == v40)
  {
    *(void *)(a2 + 24) = v100;
    uint64_t v61 = *(void *)(a2 + 16);
    if (v61 == v41) {
      __assert_rtn("priv_insert_forward_range_expand_forward", "vector.hpp", 2966, "this->room_enough()");
    }
    uint64_t v62 = &v39[4 * v61];
    if (v62 != a3)
    {
      uint64_t v63 = v62 - (char *)v102;
      if (!v39) {
        uint64_t v63 = 1;
      }
      unint64_t v64 = (_DWORD *)((char *)v102 + v63);
      if (v63 == 1) {
        unint64_t v64 = 0;
      }
      *unint64_t v64 = *((_DWORD *)v62 - 1);
      *(void *)(a2 + 16) = v61 + 1;
      if (v62 - 4 != a3) {
        double result = memmove(a3 + 4, a3, v62 - 4 - a3);
      }
      int v65 = *a4;
      goto LABEL_150;
    }
    uint64_t v79 = a3 - (char *)v102;
    if (!v39) {
      uint64_t v79 = 1;
    }
    uint64_t v80 = (_DWORD *)((char *)v102 + v79);
    if (v79 == 1) {
      uint64_t v80 = 0;
    }
    *uint64_t v80 = *a4;
    unint64_t v60 = v61 + 1;
    goto LABEL_143;
  }
  BOOL v93 = a4;
  uint64_t v95 = a1;
  uint64_t v42 = *(void *)(a2 + 16);
  __dst = &v39[4 * v42];
  uint64_t v43 = v40 - (char *)v102;
  if (!v40) {
    uint64_t v43 = 1;
  }
  uint64_t v44 = (char *)((char *)v102 - v5);
  if (v43 == 1) {
    uint64_t v44 = 0;
  }
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v41;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = &v44[v43];
  unint64_t v45 = (a3 - v39) >> 2;
  unint64_t v46 = (v39 - v40) >> 2;
  unint64_t v47 = v45 + 1;
  uint64_t v48 = v39 - (char *)&v103;
  if (!v39) {
    uint64_t v48 = 1;
  }
  uint64_t v103 = v48;
  if (v46 >= v47)
  {
    if (v39 == a3 || !v39)
    {
      uint64_t v66 = v40;
    }
    else
    {
      uint64_t v66 = v40;
      if (v40)
      {
        uint64_t v67 = v39;
        size_t v68 = a3 - v39;
        uint64_t v69 = v42;
        double result = memmove(v40, v67, v68);
        uint64_t v42 = v69;
        uint64_t v66 = &v40[4 * v45];
      }
    }
    if (v66) {
      uint64_t v70 = v66 - (char *)v102;
    }
    else {
      uint64_t v70 = 1;
    }
    if (v70 == 1) {
      uint64_t v71 = 0;
    }
    else {
      uint64_t v71 = (_DWORD *)((char *)v102 + v70);
    }
    *uint64_t v71 = *v93;
    *(void *)(a2 + 16) = v47;
    uint64_t v72 = v42 + 1;
    if (v46 >= v42 + 1)
    {
      BOOL v57 = v42 == v45;
      a1 = v95;
      if (v57) {
        goto LABEL_151;
      }
      size_t v73 = __dst - a3;
      if (__dst == a3 || !a3 || !v40) {
        goto LABEL_137;
      }
    }
    else
    {
      size_t v73 = __dst - a3;
      a1 = v95;
      if (__dst == a3) {
        goto LABEL_137;
      }
    }
    double result = memmove(&v40[4 * v47], a3, v73);
LABEL_137:
    *(void *)(a2 + 16) = v72;
    goto LABEL_151;
  }
  if (v46 > v45)
  {
    uint64_t v90 = v42;
    uint64_t v91 = v39 - v40;
    if (v39 && v40)
    {
      uint64_t v49 = v40;
      if (v39 != a3)
      {
        double result = memmove(v40, v39, a3 - v39);
        uint64_t v49 = &v40[4 * v45];
      }
    }
    else
    {
      uint64_t v49 = v40;
    }
    *(void *)(a2 + 16) = v45;
    if (v46 - v45 != 1) {
LABEL_164:
    }
      __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
    if (v49) {
      uint64_t v50 = v49 - (char *)v102;
    }
    else {
      uint64_t v50 = 1;
    }
    if (v50 == 1) {
      int64_t v51 = 0;
    }
    else {
      int64_t v51 = (_DWORD *)((char *)v102 + v50);
    }
    _DWORD *v51 = *v93;
    *(void *)(a2 + 16) = v46 + v90;
    if (v39 == v40 && a3 - v39 == 4)
    {
      *(_DWORD *)uint64_t v39 = *v93;
      unint64_t v52 = 1 - v46;
      uint64_t v53 = v90 - v45;
      BOOL v54 = 1 - v46 >= v90 - v45;
      uint64_t v55 = 1 - v46 - (v90 - v45);
      if (v55 == 0 || !v54)
      {
        uint64_t v81 = &__dst[4 * v46];
        uint64_t v82 = v81 - 4;
        if (v39 && v91 != 4) {
          double result = memmove(__dst, v81 - 4, __dst - v82);
        }
        *(void *)(a2 + 16) += v52;
        a1 = v95;
        if (v82 != a3) {
          double result = memmove(&__dst[-(v82 - a3)], a3, v82 - a3);
        }
        int v65 = *v93;
LABEL_150:
        *(_DWORD *)a3 = v65;
        goto LABEL_151;
      }
      if (__dst != a3 && a3 && v39) {
        double result = memmove(&__dst[4 * v55], a3, __dst - a3);
      }
      uint64_t v56 = &__dst[4 * v55] - (char *)&v101;
      if (!v39) {
        uint64_t v56 = 1;
      }
      uint64_t v101 = v56;
      if (v53 == 1)
      {
        *(_DWORD *)a3 = *v93;
        BOOL v57 = v55 == 1;
        a1 = v95;
        if (!v57) {
          goto LABEL_164;
        }
        uint64_t v58 = __dst - (char *)v102;
        if (!v39) {
          uint64_t v58 = 1;
        }
        uint64_t v59 = (_DWORD *)((char *)v102 + v58);
        if (v58 == 1) {
          uint64_t v59 = 0;
        }
        *uint64_t v59 = *v93;
        unint64_t v60 = *(void *)(a2 + 16) + v52;
LABEL_143:
        *(void *)(a2 + 16) = v60;
        goto LABEL_151;
      }
    }
LABEL_162:
    __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 215, "n == 1");
  }
  uint64_t v74 = v42;
  if (v39 == v40)
  {
    uint64_t v75 = v42;
  }
  else
  {
    double result = memmove(v40, v39, v39 - v40);
    uint64_t v75 = v74 + 1;
  }
  *(void *)(a2 + 16) = v75;
  a1 = v95;
  if (v39)
  {
    __int16 v76 = &v39[4 * v46];
    unint64_t v77 = v39;
    if (v76 != a3)
    {
      int64_t v78 = a3 - v76;
      double result = memmove(v39, v76, a3 - v76);
      unint64_t v77 = &v39[v78];
    }
  }
  else
  {
    unint64_t v77 = 0;
  }
  if (v39 == v40) {
    goto LABEL_162;
  }
  *(_DWORD *)unint64_t v77 = *v93;
  if ((unint64_t)(v39 - v40) >= 5 && a3 && __dst != a3) {
    double result = memmove(v77 + 4, a3, __dst - a3);
  }
LABEL_151:
  int64_t v83 = &v5[v4];
  if (v4 == 1) {
    int64_t v83 = 0;
  }
  uint64_t v84 = (char *)(a3 - v83);
  int64_t v85 = v5 - &v96;
  if (*(void *)v5 == 1) {
    int64_t v85 = 0;
  }
  uint64_t v86 = &v84[*(void *)v5 + v85];
  int64_t v87 = &v96 - v97;
  if (v86 == (char *)1) {
    int64_t v87 = 0;
  }
  uint64_t v88 = &v86[v87];
  int64_t v89 = v97 - (unsigned char *)a1;
  if (v88 == (char *)1) {
    int64_t v89 = 0;
  }
  *a1 = &v88[v89];
  return result;
}

void sub_1A42B1D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::container::vec_iterator<boost::interprocess::offset_ptr<unsigned int,long,unsigned long,0ul>,false>::operator*(uint64_t result)
{
  if (result == 1) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return result;
}

uint64_t *boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(uint64_t *a1, void *a2)
{
  unint64_t v4 = a2[2];
  if (*a2 == 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (char *)a2 + *a2;
  }
  if (v5) {
    uint64_t v6 = v5 - (char *)a1;
  }
  else {
    uint64_t v6 = 1;
  }
  *a1 = v6;
  uint64_t v7 = 1;
  a1[1] = 1;
  uint64_t v8 = (char *)(a1 + 1);
  a1[2] = v4;
  a1[3] = 0;
  if (v4)
  {
    unint64_t v16 = v4;
    uint64_t v17 = 1;
    boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v15, a1, 1, v4, &v16, &v17);
    unint64_t v9 = (char *)((char *)&v15 - v8);
    if (v15 == 1) {
      unint64_t v9 = 0;
    }
    uint64_t v7 = (uint64_t)&v9[v15];
    a1[1] = (uint64_t)&v9[v15];
    a1[3] = v16;
  }
  uint64_t v10 = a2[2];
  if (v10)
  {
    if (v7 == 1) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = &v8[v7];
    }
    uint64_t v12 = a2[1];
    if (v12 == 1) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (char *)a2 + v12 + 8;
    }
    memmove(v11, v13, 4 * v10);
  }
  return a1;
}

char *boost::container::vector<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>*,boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>&>>(void *a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4 = (char *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 24);
  if (v6 != *(void *)(a2 + 16)) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  if (*(void *)a2 == 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)a2 + a2;
  }
  unint64_t v9 = *(void *)(v8 + 48) >> 5;
  if (v9 == v6) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
  }
  if (v6 >> 61 > 4) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = 8 * v6;
  }
  if (v6 >> 61) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = 8 * v6 / 5;
  }
  unint64_t v15 = v6 + 1;
  if (v14 < v9) {
    unint64_t v9 = v14;
  }
  if (v15 > v9) {
    unint64_t v16 = v6 + 1;
  }
  else {
    unint64_t v16 = v9;
  }
  int64_t v17 = v4 - (char *)&v218;
  if (v5 == 1) {
    int64_t v17 = 0;
  }
  uint64_t v218 = v17 + v5;
  unint64_t v219 = v16;
  boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v217, (void *)a2, 7, v15, &v219, &v218);
  if (v218 == 1)
  {
    unint64_t v18 = a4;
    if (v217 == 1) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = (char *)&v217 + v217;
    }
    uint64_t v20 = v19 - (char *)&v226;
    if (!v19) {
      uint64_t v20 = 1;
    }
    uint64_t v21 = v19 - (char *)&v227;
    if (!v19) {
      uint64_t v21 = 1;
    }
    uint64_t v22 = v19 - (char *)&v220;
    unint64_t v23 = v219;
    if (!v19) {
      uint64_t v22 = 1;
    }
    int64_t v24 = (char *)&v220 - (char *)&v221;
    uint64_t v25 = *(void *)(a2 + 8);
    uint64_t v26 = *(void *)(a2 + 16);
    BOOL v27 = v25 == 1;
    uint64_t v28 = &v4[v25];
    if (v27) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = v28;
    }
    if (v22 == 1) {
      int64_t v24 = 0;
    }
    uint64_t v220 = v22;
    uint64_t v221 = v24 + v22;
    uint64_t v222 = a2;
    uint64_t v223 = v219;
    uint64_t v226 = v20;
    uint64_t v227 = v21;
    int64_t v30 = (char *)&v227 - (char *)&v228;
    if (v21 == 1) {
      int64_t v30 = 0;
    }
    v228.i64[0] = v30 + v21;
    uint64_t v229 = a2;
    if (v29 == a3)
    {
      uint64_t v34 = v19;
    }
    else
    {
      uint64_t v31 = v19 - (char *)v230;
      int64_t v32 = v29;
      uint64_t v33 = v29;
      uint64_t v34 = v19;
      do
      {
        if (v34) {
          uint64_t v35 = v31;
        }
        else {
          uint64_t v35 = 1;
        }
        if (v35 == 1) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = (char *)v230 + v35;
        }
        if (*(void *)v33 == 1) {
          uint64_t v37 = 0;
        }
        else {
          uint64_t v37 = &v32[*(void *)v33];
        }
        if (v37) {
          uint64_t v38 = v37 - v36;
        }
        else {
          uint64_t v38 = 1;
        }
        *(void *)uint64_t v36 = v38;
        uint64_t v39 = *((void *)v33 + 1);
        uint64_t v40 = v32 - v36;
        if (v39 == 1) {
          uint64_t v40 = 0;
        }
        *((void *)v36 + 1) = v40 + v39;
        *((_OWORD *)v36 + 1) = *((_OWORD *)v33 + 1);
        *((void *)v33 + 2) = 0;
        *((void *)v33 + 3) = 0;
        *((void *)v33 + 1) = 1;
        v34 += 32;
        v32 += 32;
        v31 += 32;
        v33 += 32;
      }
      while (v33 != a3);
    }
    uint64_t v64 = v34 - (char *)&v225;
    int64_t v65 = (char *)&v225 - (char *)&v228.u64[1];
    uint64_t v66 = v34 - (char *)v230;
    if (!v34) {
      uint64_t v64 = 1;
    }
    uint64_t v225 = v64;
    if (!v34) {
      uint64_t v66 = 1;
    }
    if (v64 == 1) {
      int64_t v65 = 0;
    }
    v228.i64[1] = v65 + v64;
    v230[0] = v66;
    if (v66 == 1) {
      uint64_t v67 = 0;
    }
    else {
      uint64_t v67 = (void *)((char *)v230 + v66);
    }
    boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(v67, v18);
    size_t v68 = &v29[32 * v26];
    uint64_t v224 = v34 - (char *)&v224 + 32;
    if (v68 != a3)
    {
      uint64_t v69 = a3;
      uint64_t v70 = a3;
      do
      {
        BOOL v27 = &v228.i8[1] == v34;
        v34 += 32;
        if (v27) {
          uint64_t v71 = 0;
        }
        else {
          uint64_t v71 = v34;
        }
        if (*(void *)v70 == 1) {
          uint64_t v72 = 0;
        }
        else {
          uint64_t v72 = &v69[*(void *)v70];
        }
        if (v72) {
          uint64_t v73 = v72 - v71;
        }
        else {
          uint64_t v73 = 1;
        }
        *(void *)uint64_t v71 = v73;
        uint64_t v74 = *((void *)v70 + 1);
        int64_t v75 = v69 - v71;
        if (v74 == 1) {
          int64_t v75 = 0;
        }
        *((void *)v71 + 1) = v75 + v74;
        *((_OWORD *)v71 + 1) = *((_OWORD *)v70 + 1);
        *((void *)v70 + 2) = 0;
        *((void *)v70 + 3) = 0;
        *((void *)v70 + 1) = 1;
        v69 += 32;
        v70 += 32;
      }
      while (v70 != v68);
    }
    int64x2_t v228 = vdupq_n_s64(1uLL);
    boost::container::dtl::scoped_destructor_range<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_range(v228.i64);
    uint64_t v221 = 1;
    if (v29)
    {
      int64_t v76 = v4 - (char *)&v228;
      if (*(void *)v4 == 1) {
        int64_t v76 = 0;
      }
      uint64_t v77 = v76 + *(void *)v4;
      v228.i64[0] = v77;
      if (v77 != 1 && &v228.i8[v77])
      {
        if (*(void *)a2 == 1) {
          int64_t v78 = 0;
        }
        else {
          int64_t v78 = (char *)(*(void *)a2 + a2);
        }
        boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v78, (uint64_t)v228.i64 + v77);
      }
    }
    uint64_t v79 = v19 - (char *)&v228;
    if (!v19) {
      uint64_t v79 = 1;
    }
    uint64_t v80 = (char *)((char *)&v228 - v4);
    if (v79 == 1) {
      uint64_t v80 = 0;
    }
    uint64_t v81 = &v80[v79];
    uint64_t v82 = *(void *)(a2 + 16) + 1;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = v81;
    *(void *)(a2 + 16) = v82;
    *(void *)(a2 + 24) = v23;
    double result = (char *)boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(&v221);
    goto LABEL_339;
  }
  if (*(void *)v4 == 1) {
    unint64_t v41 = 0;
  }
  else {
    unint64_t v41 = &v4[*(void *)v4];
  }
  if (v217 == 1) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = (char *)&v217 + v217;
  }
  unint64_t v43 = v219;
  uint64_t v44 = v41 - v42;
  if (v41 != v42)
  {
    int64_t v213 = a1;
    int64_t v214 = a4;
    uint64_t v45 = *(void *)(a2 + 16);
    unint64_t v46 = &v41[32 * v45];
    uint64_t v47 = v42 - (char *)&v228;
    if (!v42) {
      uint64_t v47 = 1;
    }
    uint64_t v48 = (char *)((char *)&v228 - v4);
    if (v47 == 1) {
      uint64_t v48 = 0;
    }
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v43;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = &v48[v47];
    unint64_t v49 = (a3 - v41) >> 5;
    unint64_t v50 = v44 >> 5;
    unint64_t v51 = v49 + 1;
    uint64_t v52 = v41 - (char *)&v227;
    if (!v41) {
      uint64_t v52 = 1;
    }
    uint64_t v227 = v52;
    int64_t v53 = (char *)&v227 - (char *)&v228;
    if (v52 == 1) {
      int64_t v53 = 0;
    }
    v228.i64[0] = v53 + v52;
    v228.i64[1] = a2;
    uint64_t v229 = v45;
    if (v50 >= v51)
    {
      unint64_t v211 = v44 >> 5;
      uint64_t v100 = v45;
      if (v41 == a3)
      {
        uint64_t v104 = v42;
      }
      else
      {
        uint64_t v101 = v42 - (char *)&v221;
        uint64_t v102 = v41;
        uint64_t v103 = v41;
        uint64_t v104 = v42;
        do
        {
          if (v104) {
            uint64_t v105 = v101;
          }
          else {
            uint64_t v105 = 1;
          }
          if (v105 == 1) {
            uint64_t v106 = 0;
          }
          else {
            uint64_t v106 = (char *)&v221 + v105;
          }
          if (*(void *)v103 == 1) {
            uint64_t v107 = 0;
          }
          else {
            uint64_t v107 = &v102[*(void *)v103];
          }
          if (v107) {
            uint64_t v108 = v107 - v106;
          }
          else {
            uint64_t v108 = 1;
          }
          *(void *)uint64_t v106 = v108;
          uint64_t v109 = *((void *)v103 + 1);
          uint64_t v110 = v102 - v106;
          if (v109 == 1) {
            uint64_t v110 = 0;
          }
          *((void *)v106 + 1) = v110 + v109;
          *((_OWORD *)v106 + 1) = *((_OWORD *)v103 + 1);
          *((void *)v103 + 2) = 0;
          *((void *)v103 + 3) = 0;
          *((void *)v103 + 1) = 1;
          v104 += 32;
          v102 += 32;
          v101 += 32;
          v103 += 32;
        }
        while (v103 != a3);
      }
      *(void *)(a2 + 16) = v49;
      uint64_t v127 = v104 - (char *)&v221;
      if (!v104) {
        uint64_t v127 = 1;
      }
      uint64_t v221 = v127;
      if (v127 == 1) {
        uint64_t v128 = 0;
      }
      else {
        uint64_t v128 = (uint64_t *)((char *)&v221 + v127);
      }
      boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(v128, v214);
      *(void *)(a2 + 16) = v51;
      uint64_t v129 = v100 + 1;
      unint64_t v130 = v100 + 1 - v211;
      if (v100 + 1 <= v211)
      {
        if (v100 != v49)
        {
          if (v46 != a3)
          {
            double v144 = &v42[32 * v51];
            uint64_t v145 = &v42[32 * v49] - (char *)&v221 + 32;
            unint64_t v146 = a3;
            unint64_t v147 = a3;
            do
            {
              if (v144) {
                uint64_t v148 = v145;
              }
              else {
                uint64_t v148 = 1;
              }
              if (v148 == 1) {
                uint64_t v149 = 0;
              }
              else {
                uint64_t v149 = (char *)&v221 + v148;
              }
              if (*(void *)v147 == 1) {
                __int16 v150 = 0;
              }
              else {
                __int16 v150 = &v146[*(void *)v147];
              }
              if (v150) {
                uint64_t v151 = v150 - v149;
              }
              else {
                uint64_t v151 = 1;
              }
              *(void *)uint64_t v149 = v151;
              uint64_t v152 = *((void *)v147 + 1);
              uint64_t v153 = v146 - v149;
              if (v152 == 1) {
                uint64_t v153 = 0;
              }
              *((void *)v149 + 1) = v153 + v152;
              *((_OWORD *)v149 + 1) = *((_OWORD *)v147 + 1);
              *((void *)v147 + 2) = 0;
              *((void *)v147 + 3) = 0;
              *((void *)v147 + 1) = 1;
              v144 += 32;
              v146 += 32;
              v145 += 32;
              v147 += 32;
            }
            while (v147 != v46);
          }
          *(void *)(a2 + 16) = v129;
        }
        v228.i64[0] = 1;
        uint64_t v229 = 0;
        a1 = v213;
      }
      else
      {
        if (v211 != v51)
        {
          uint64_t v131 = &v42[32 * v51];
          uint64_t v132 = v49 - v211 + 1;
          uint64_t v133 = &v42[32 * v49] - (char *)&v221 + 32;
          int64_t v134 = a3;
          uint64_t v135 = a3;
          do
          {
            if (v131) {
              uint64_t v136 = v133;
            }
            else {
              uint64_t v136 = 1;
            }
            if (v136 == 1) {
              int64_t v137 = 0;
            }
            else {
              int64_t v137 = (char *)&v221 + v136;
            }
            if (*(void *)v135 == 1) {
              int64_t v138 = 0;
            }
            else {
              int64_t v138 = &v134[*(void *)v135];
            }
            if (v138) {
              uint64_t v139 = v138 - v137;
            }
            else {
              uint64_t v139 = 1;
            }
            *(void *)int64_t v137 = v139;
            uint64_t v140 = *((void *)v135 + 1);
            uint64_t v141 = v134 - v137;
            if (v140 == 1) {
              uint64_t v141 = 0;
            }
            *((void *)v137 + 1) = v141 + v140;
            *((_OWORD *)v137 + 1) = *((_OWORD *)v135 + 1);
            *((void *)v135 + 2) = 0;
            *((void *)v135 + 3) = 0;
            v131 += 32;
            *((void *)v135 + 1) = 1;
            v134 += 32;
            v133 += 32;
            v135 += 32;
          }
          while (!__CFADD__(v132++, 1));
        }
        v229 -= v130;
        v228.i64[0] += 32 * v130;
        *(void *)(a2 + 16) = v129;
        int v143 = &a3[32 * (v211 - v51)];
        a1 = v213;
        if (v143 != v41)
        {
          while (v143 != v46)
          {
            if (v143 != v41) {
              boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_move_assign<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>(v41, v143);
            }
            v143 += 32;
            v41 += 32;
          }
        }
        v228.i64[0] = 1;
        uint64_t v229 = 0;
      }
      goto LABEL_338;
    }
    if (v50 <= v49)
    {
      if (v41 != v42)
      {
        uint64_t v111 = v42 - (char *)&v221;
        uint64_t v112 = v41;
        uint64_t v113 = v44 >> 5;
        unint64_t v114 = v41;
        uint64_t v115 = v42;
        do
        {
          if (v115) {
            uint64_t v116 = v111;
          }
          else {
            uint64_t v116 = 1;
          }
          uint64_t v221 = v116;
          if (v116 == 1) {
            uint64_t v117 = 0;
          }
          else {
            uint64_t v117 = (char *)&v221 + v116;
          }
          if (*(void *)v114 == 1) {
            unint64_t v118 = 0;
          }
          else {
            unint64_t v118 = &v112[*(void *)v114];
          }
          if (v118) {
            uint64_t v119 = v118 - v117;
          }
          else {
            uint64_t v119 = 1;
          }
          *(void *)uint64_t v117 = v119;
          uint64_t v120 = *((void *)v114 + 1);
          uint64_t v121 = v112 - v117;
          if (v120 == 1) {
            uint64_t v121 = 0;
          }
          *((void *)v117 + 1) = v121 + v120;
          *((_OWORD *)v117 + 1) = *((_OWORD *)v114 + 1);
          *((void *)v114 + 2) = 0;
          *((void *)v114 + 3) = 0;
          v115 += 32;
          *((void *)v114 + 1) = 1;
          v112 += 32;
          v111 += 32;
          v114 += 32;
          --v113;
        }
        while (v113);
      }
      v228.i64[0] = 1;
      uint64_t v229 = 0;
      if (v41 == v42) {
        uint64_t v122 = v45;
      }
      else {
        uint64_t v122 = v45 + 1;
      }
      *(void *)(a2 + 16) = v122;
      a1 = v213;
      if (&v41[32 * v50] == a3)
      {
        unint64_t v124 = v41;
      }
      else
      {
        uint64_t v123 = 32 * v50;
        unint64_t v124 = v41;
        do
        {
          if (v123) {
            boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_move_assign<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>(v124, &v124[v123]);
          }
          v124 += 32;
        }
        while (&v124[v123] != a3);
      }
      if (v41 == v42) {
        __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 187, "n == 1");
      }
      if (v124 != v214)
      {
        uint64_t v194 = *((void *)v214 + 1);
        if (v194 == 1) {
          uint64_t v195 = 0;
        }
        else {
          uint64_t v195 = &v214[v194 + 8];
        }
        boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::assign<unsigned int *>(v124, v195, &v195[4 * *((void *)v214 + 2)]);
      }
      if ((unint64_t)(v41 - v42) >= 0x40 && v46 != a3)
      {
        uint64_t v196 = v124 + 32;
        uint64_t v197 = a3;
        do
        {
          if (v197 != v196) {
            boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_move_assign<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>(v196, v197);
          }
          v197 += 32;
          v196 += 32;
        }
        while (v197 != v46);
      }
      goto LABEL_338;
    }
    int64_t v209 = v41 - v42;
    if (v41 == a3)
    {
      BOOL v57 = v42;
    }
    else
    {
      uint64_t v54 = v42 - (char *)&v221;
      uint64_t v55 = v41;
      uint64_t v56 = v41;
      BOOL v57 = v42;
      do
      {
        if (v57) {
          uint64_t v58 = v54;
        }
        else {
          uint64_t v58 = 1;
        }
        uint64_t v221 = v58;
        if (v58 == 1) {
          uint64_t v59 = 0;
        }
        else {
          uint64_t v59 = (char *)&v221 + v58;
        }
        if (*(void *)v56 == 1) {
          unint64_t v60 = 0;
        }
        else {
          unint64_t v60 = &v55[*(void *)v56];
        }
        if (v60) {
          uint64_t v61 = v60 - v59;
        }
        else {
          uint64_t v61 = 1;
        }
        *(void *)uint64_t v59 = v61;
        uint64_t v62 = *((void *)v56 + 1);
        uint64_t v63 = v55 - v59;
        if (v62 == 1) {
          uint64_t v63 = 0;
        }
        *((void *)v59 + 1) = v63 + v62;
        *((_OWORD *)v59 + 1) = *((_OWORD *)v56 + 1);
        *((void *)v56 + 2) = 0;
        *((void *)v56 + 3) = 0;
        *((void *)v56 + 1) = 1;
        v57 += 32;
        v55 += 32;
        v54 += 32;
        v56 += 32;
      }
      while (v56 != a3);
    }
    uint64_t v210 = v45;
    uint64_t v212 = v44 >> 5;
    *(void *)(a2 + 16) = v49;
    if (v50 - v49 == 1)
    {
      if (v57) {
        uint64_t v154 = v57 - (char *)&v221;
      }
      else {
        uint64_t v154 = 1;
      }
      uint64_t v221 = v154;
      if (v154 == 1) {
        uint64_t v155 = 0;
      }
      else {
        uint64_t v155 = (uint64_t *)((char *)&v221 + v154);
      }
      boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(v155, v214);
      *(void *)(a2 + 16) = v212 + v210;
      v228.i64[0] = 1;
      uint64_t v229 = 0;
      if (v41 != v42) {
        __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 187, "n == 1");
      }
      if (a3 - v41 == 32)
      {
        if (v214 != v41)
        {
          uint64_t v156 = *((void *)v214 + 1);
          unint64_t v157 = &v214[v156 + 8];
          if (v156 == 1) {
            uint64_t v158 = 0;
          }
          else {
            uint64_t v158 = v157;
          }
          boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::assign<unsigned int *>(v41, v158, &v158[4 * *((void *)v214 + 2)]);
        }
        uint64_t v159 = 1 - v212;
        uint64_t v160 = 1 - v212 - (v210 - v49);
        if (1 - v212 > v210 - v49)
        {
          if (v46 != a3)
          {
            uint64_t v161 = &v41[32 * v49] - (char *)&v221 - 32 * v212 + 32;
            uint64_t v162 = a3;
            uint32_t v163 = a3;
            uint64_t v164 = &v46[32 * v160];
            do
            {
              if (v164) {
                uint64_t v165 = v161;
              }
              else {
                uint64_t v165 = 1;
              }
              if (v165 == 1) {
                uint64_t v166 = 0;
              }
              else {
                uint64_t v166 = (char *)&v221 + v165;
              }
              if (*(void *)v163 == 1) {
                uint64_t v167 = 0;
              }
              else {
                uint64_t v167 = &v162[*(void *)v163];
              }
              if (v167) {
                uint64_t v168 = v167 - v166;
              }
              else {
                uint64_t v168 = 1;
              }
              *(void *)uint64_t v166 = v168;
              uint64_t v169 = *((void *)v163 + 1);
              uint64_t v170 = v162 - v166;
              if (v169 == 1) {
                uint64_t v170 = 0;
              }
              *((void *)v166 + 1) = v170 + v169;
              *((_OWORD *)v166 + 1) = *((_OWORD *)v163 + 1);
              *((void *)v163 + 2) = 0;
              *((void *)v163 + 3) = 0;
              *((void *)v163 + 1) = 1;
              v164 += 32;
              v162 += 32;
              v161 += 32;
              v163 += 32;
            }
            while (v163 != v46);
          }
          uint64_t v171 = &v46[32 * v160] - (char *)&v226;
          if (!v41) {
            uint64_t v171 = 1;
          }
          uint64_t v226 = v171;
          int64_t v172 = (char *)&v226 - (char *)&v221;
          if (v171 == 1) {
            int64_t v172 = 0;
          }
          uint64_t v221 = v172 + v171;
          uint64_t v222 = a2;
          uint64_t v223 = (v46 - a3) >> 5;
          if (v210 - v49 == 1)
          {
            a1 = v213;
            if (v214 != a3)
            {
              uint64_t v173 = *((void *)v214 + 1);
              if (v173 == 1) {
                uint64_t v174 = 0;
              }
              else {
                uint64_t v174 = &v214[v173 + 8];
              }
              boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::assign<unsigned int *>(a3, v174, &v174[4 * *((void *)v214 + 2)]);
            }
            if (v160 == 1)
            {
              uint64_t v175 = v46 - (char *)v230;
              if (!v41) {
                uint64_t v175 = 1;
              }
              v230[0] = v175;
              if (v175 == 1) {
                uint64_t v176 = 0;
              }
              else {
                uint64_t v176 = (void *)((char *)v230 + v175);
              }
              boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(v176, v214);
              *(void *)(a2 + 16) += v159;
              uint64_t v221 = 1;
              uint64_t v223 = 0;
              boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(&v221);
LABEL_338:
              double result = (char *)boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(&v228);
              goto LABEL_339;
            }
            int v207 = 181;
            uint64_t v208 = "uninitialized_copy_n_and_update";
          }
          else
          {
            int v207 = 187;
            uint64_t v208 = "copy_n_and_update";
          }
          __assert_rtn(v208, "advanced_insert_int.hpp", v207, "n == 1");
        }
        if (v209 != 32)
        {
          unint64_t v177 = 0;
          int64_t v178 = &v41[32 * v210];
          int64_t v179 = v178 - (char *)&v221;
          uint64_t v180 = (uint64_t)&v178[32 * v212 - 32];
          do
          {
            v181 = &v41[32 * v210 + 32 * v212 + v177];
            uint64_t v182 = v179 + v177;
            if (!&v46[v177]) {
              uint64_t v182 = 1;
            }
            if (v182 == 1) {
              uint64_t v183 = 0;
            }
            else {
              uint64_t v183 = (char *)&v221 + v182;
            }
            uint64_t v184 = *((void *)v181 - 4);
            if (v184 == 1) {
              uint64_t v185 = 0;
            }
            else {
              uint64_t v185 = v180 + v177 + v184;
            }
            if (v185) {
              uint64_t v186 = v185 - (void)v183;
            }
            else {
              uint64_t v186 = 1;
            }
            *(void *)uint64_t v183 = v186;
            uint64_t v187 = *((void *)v181 - 3);
            uint64_t v188 = v180 + v177 - (void)v183;
            if (v187 == 1) {
              uint64_t v188 = 0;
            }
            *((void *)v183 + 1) = v188 + v187;
            *((_OWORD *)v183 + 1) = *((_OWORD *)v181 - 1);
            *((void *)v181 - 2) = 0;
            *((void *)v181 - 1) = 0;
            *((void *)v181 - 3) = 1;
            v177 += 32;
          }
          while (32 - 32 * v212 != v177);
        }
        *(void *)(a2 + 16) += v159;
        a1 = v213;
        if (&v46[32 * v212 - 32] != a3)
        {
          uint64_t v189 = &v41[32 * v210 - 32];
          uint64_t v190 = 32 * v212;
          do
          {
            if (v190 != 32) {
              boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_move_assign<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>(v189, &v189[v190 - 32]);
            }
            v189 -= 32;
          }
          while (&v189[v190] != a3);
        }
        if (v214 != a3)
        {
          uint64_t v191 = *((void *)v214 + 1);
          uint64_t v192 = &v214[v191 + 8];
          if (v191 == 1) {
            unint64_t v193 = 0;
          }
          else {
            unint64_t v193 = v192;
          }
          boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::assign<unsigned int *>(a3, v193, &v193[4 * *((void *)v214 + 2)]);
        }
        goto LABEL_338;
      }
      int v205 = 187;
      uint64_t v206 = "copy_n_and_update";
    }
    else
    {
      int v205 = 181;
      uint64_t v206 = "uninitialized_copy_n_and_update";
    }
    __assert_rtn(v206, "advanced_insert_int.hpp", v205, "n == 1");
  }
  *(void *)(a2 + 24) = v219;
  uint64_t v84 = *(void *)(a2 + 16);
  if (v84 == v43) {
    __assert_rtn("priv_insert_forward_range_expand_forward", "vector.hpp", 2966, "this->room_enough()");
  }
  int64_t v85 = &v41[32 * v84];
  if (v85 == a3)
  {
    uint64_t v125 = a3 - (char *)&v228;
    if (!v41) {
      uint64_t v125 = 1;
    }
    v228.i64[0] = v125;
    if (v125 == 1) {
      uint64_t v126 = 0;
    }
    else {
      uint64_t v126 = (uint64_t *)((char *)v228.i64 + v125);
    }
    double result = (char *)boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(v126, a4);
    ++*(void *)(a2 + 16);
  }
  else
  {
    double result = v85 - 32;
    uint64_t v86 = *((void *)v85 - 4);
    uint64_t v87 = v85 - (char *)&v228;
    if (!v41) {
      uint64_t v87 = 1;
    }
    uint64_t v88 = &v228.i8[v87];
    if (v87 == 1) {
      uint64_t v88 = 0;
    }
    if (v86 == 1) {
      int64_t v89 = 0;
    }
    else {
      int64_t v89 = &result[v86];
    }
    if (v89) {
      uint64_t v90 = v89 - v88;
    }
    else {
      uint64_t v90 = 1;
    }
    *(void *)uint64_t v88 = v90;
    uint64_t v93 = *((void *)v85 - 3);
    uint64_t v91 = v85 - 24;
    uint64_t v92 = v93;
    uint64_t v94 = v91 - (v88 + 8);
    if (v93 == 1) {
      uint64_t v94 = 0;
    }
    *((void *)v88 + 1) = v94 + v92;
    *((_OWORD *)v88 + 1) = *(_OWORD *)(v91 + 8);
    *((void *)v91 + 1) = 0;
    *((void *)v91 + 2) = 0;
    *(void *)uint64_t v91 = 1;
    ++*(void *)(a2 + 16);
    if (result != a3)
    {
      do
      {
        uint64_t v95 = result - 32;
        boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_move_assign<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>(result, (void *)result - 4);
        double result = v95;
      }
      while (v95 != a3);
    }
    if (a4 != a3)
    {
      uint64_t v97 = *((void *)a4 + 1);
      char v96 = a4 + 8;
      uint64_t v98 = (char *)v96 + v97;
      if (v97 == 1) {
        uint64_t v99 = 0;
      }
      else {
        uint64_t v99 = v98;
      }
      double result = (char *)boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::assign<unsigned int *>(a3, v99, &v99[4 * v96[1]]);
    }
  }
LABEL_339:
  uint64_t v198 = &v4[v5];
  if (v5 == 1) {
    uint64_t v198 = 0;
  }
  uint64_t v199 = (char *)(a3 - v198);
  int64_t v200 = v4 - &v215;
  if (*(void *)v4 == 1) {
    int64_t v200 = 0;
  }
  uint64_t v201 = &v199[*(void *)v4 + v200];
  int64_t v202 = &v215 - v216;
  if (v201 == (char *)1) {
    int64_t v202 = 0;
  }
  uint64_t v203 = &v201[v202];
  int64_t v204 = v216 - (unsigned char *)a1;
  if (v203 == (char *)1) {
    int64_t v204 = 0;
  }
  *a1 = &v203[v204];
  return result;
}

void sub_1A42B2D78(_Unwind_Exception *a1)
{
  boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t boost::container::vec_iterator<boost::interprocess::offset_ptr<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,long,unsigned long,0ul>,false>::operator*(uint64_t result)
{
  if (result == 1) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return result;
}

void *boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(void *a1)
{
  uint64_t v2 = (uint64_t)a1 + *a1;
  if (*a1 != 1 && v2 != 0)
  {
    unint64_t v4 = (uint64_t *)a1[1];
    uint64_t v5 = *v4;
    unint64_t v6 = (char *)v4 + *v4;
    if (v5 == 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v7, v2);
  }
  return a1;
}

uint64_t *boost::container::dtl::scoped_destructor_range<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if (*a1 == 1) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = (char *)a1 + *a1;
  }
  if (v2 == 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (char *)v3 + v2;
  }
  if (v4 != v5)
  {
    do
    {
      if (v4) {
        uint64_t v6 = v4 - (char *)&v11;
      }
      else {
        uint64_t v6 = 1;
      }
      uint64_t v11 = v6;
      boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v11);
      uint64_t v7 = a1[1];
      uint64_t v8 = *a1 + 32;
      *a1 = v8;
      if (v8 == 1) {
        unint64_t v4 = 0;
      }
      else {
        unint64_t v4 = (char *)a1 + v8;
      }
      if (v7 == 1) {
        unint64_t v9 = 0;
      }
      else {
        unint64_t v9 = (char *)v3 + v7;
      }
    }
    while (v4 != v9);
  }
  return a1;
}

char *boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_move_assign<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>(void *a1, void *a2)
{
  unint64_t v4 = a2 + 2;
  uint64_t v3 = a2[2];
  if (a1 == a2 && v3) {
    __assert_rtn("priv_move_assign", "vector.hpp", 2480, "this != &x || x.size() == 0");
  }
  uint64_t v6 = (char *)(a2 + 1);
  uint64_t v5 = a2[1];
  uint64_t v7 = (char *)(a2 + 1) - (char *)&v46;
  if (v5 == 1) {
    uint64_t v7 = 0;
  }
  uint64_t v46 = v7 + v5;
  if (*a2 == 1) {
    double result = 0;
  }
  else {
    double result = (char *)a2 + *a2;
  }
  if (*a1 == 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = (char *)a1 + *a1;
  }
  if (result != v9)
  {
    int64_t v10 = v6 - (char *)&v52;
    if (v5 == 1) {
      int64_t v10 = 0;
    }
    uint64_t v11 = v10 + v5;
    if (v10 + v5 == 1) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = (char *)&v52 - (char *)&v45;
    }
    uint64_t v13 = v12 + v11;
    int64_t v52 = v11;
    int64_t v14 = (char *)&v52 - (char *)&v44;
    if (v11 == 1) {
      int64_t v14 = 0;
    }
    uint64_t v15 = v14 + v11;
    uint64_t v44 = v15;
    uint64_t v45 = v12 + v11;
    if (v15 == 1 && v3 != 0) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    int64_t v17 = (char *)&v45 - v47;
    if (v13 == 1) {
      int64_t v17 = 0;
    }
    uint64_t v18 = v17 + v13;
    if (v18 == 1) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = &v47[v18];
    }
    uint64_t v20 = v15 + 4 * v3;
    uint64_t v44 = v20;
    int64_t v21 = (char *)&v44 - (char *)&v52;
    if (v20 == 1) {
      int64_t v21 = 0;
    }
    uint64_t v22 = v21 + v20;
    if (v22 == 1) {
      unint64_t v23 = 0;
    }
    else {
      unint64_t v23 = (char *)&v52 + v22;
    }
    size_t v24 = v23 - v19;
    unint64_t v25 = (v23 - v19) >> 2;
    if (v25 > a1[3])
    {
      BOOL v27 = (char *)(a1 + 1);
      uint64_t v26 = a1[1];
      uint64_t v28 = (char *)(a1 + 1) - (char *)&v50;
      if (v26 == 1) {
        uint64_t v28 = 0;
      }
      uint64_t v50 = v28 + v26;
      unint64_t v51 = (v23 - v19) >> 2;
      double result = boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v49, a1, 3, v51, &v51, &v50);
      if (v50 == 1)
      {
        int64_t v29 = v27 - (char *)&v48;
        if (*(void *)v27 == 1) {
          int64_t v29 = 0;
        }
        int64_t v30 = v29 + *(void *)v27;
        int64_t v48 = v30;
        if (v30 != 1)
        {
          a1[2] = 0;
          int64_t v52 = v30 + (char *)&v48 - (char *)&v52;
          if (v52 != 1)
          {
            if ((int64_t *)((char *)&v48 + v30))
            {
              if (*a1 == 1) {
                uint64_t v31 = 0;
              }
              else {
                uint64_t v31 = (char *)a1 + *a1;
              }
              double result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v31, (uint64_t)&v48 + v30);
            }
          }
        }
        uint64_t v32 = 0;
        uint64_t v33 = (char *)((char *)&v49 - v27);
        if (v49 == 1) {
          uint64_t v33 = 0;
        }
        uint64_t v34 = &v33[v49];
        unint64_t v35 = v51;
        a1[2] = 0;
        a1[3] = v35;
        a1[1] = v34;
        if (v34 == (char *)1) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = &v27[(void)v34];
        }
        if (v19 && v19 != v23 && v36)
        {
          double result = (char *)memmove(v36, v19, v23 - v19);
          uint64_t v37 = &v36[4 * v25];
          uint64_t v32 = a1[2];
        }
        else
        {
          uint64_t v37 = v36;
        }
        a1[2] = v32 + ((v37 - v36) >> 2);
        goto LABEL_76;
      }
      a1[3] = v51;
    }
    uint64_t v41 = a1[1];
    if (v41 == 1) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = (char *)a1 + v41 + 8;
    }
    unint64_t v43 = a1[2];
    if (v25 <= v43)
    {
      if (v23 == v19)
      {
LABEL_75:
        a1[2] = v25;
        goto LABEL_76;
      }
    }
    else
    {
      if (v43)
      {
        double result = (char *)memmove(v42, v19, 4 * v43);
        v19 += 4 * v43;
        v42 += 4 * v43;
      }
      if (v25 == v43) {
        goto LABEL_75;
      }
      size_t v24 = 4 * (v25 - v43);
    }
    double result = (char *)memmove(v42, v19, v24);
    goto LABEL_75;
  }
  uint64_t v39 = (char *)(a1 + 1);
  uint64_t v38 = a1[1];
  a1[2] = 0;
  if (v38 != 1)
  {
    int64_t v52 = v38 + v39 - (char *)&v52;
    if (v52 != 1)
    {
      if (&v39[v38]) {
        double result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(result, (uint64_t)&v39[v38]);
      }
    }
  }
  uint64_t v40 = (char *)(v6 - v39);
  if (*(void *)v6 == 1) {
    uint64_t v40 = 0;
  }
  a1[1] = &v40[*(void *)v6];
  *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
  *(void *)uint64_t v6 = 1;
  v4[1] = 0;
LABEL_76:
  *unint64_t v4 = 0;
  return result;
}

void *boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::assign<unsigned int *>(void *result, char *__src, char *a3)
{
  unint64_t v4 = __src;
  uint64_t v5 = result;
  size_t v6 = a3 - __src;
  unint64_t v7 = (a3 - __src) >> 2;
  if (v7 <= result[3]) {
    goto LABEL_27;
  }
  unint64_t v9 = (char *)(result + 1);
  uint64_t v8 = result[1];
  uint64_t v10 = (char *)(result + 1) - (char *)&v30;
  if (v8 == 1) {
    uint64_t v10 = 0;
  }
  uint64_t v30 = v10 + v8;
  uint64_t v31 = (a3 - __src) >> 2;
  double result = boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v29, result, 3, v7, (unint64_t *)&v31, &v30);
  if (v30 != 1)
  {
    v5[3] = v31;
LABEL_27:
    uint64_t v22 = v5[1];
    if (v22 == 1) {
      unint64_t v23 = 0;
    }
    else {
      unint64_t v23 = (char *)v5 + v22 + 8;
    }
    unint64_t v24 = v5[2];
    if (v7 <= v24)
    {
      if (a3 == v4)
      {
LABEL_38:
        v5[2] = v7;
        return result;
      }
      uint64_t v26 = v23;
      BOOL v27 = v4;
      size_t v25 = v6;
    }
    else
    {
      if (v24)
      {
        double result = memmove(v23, v4, 4 * v24);
        v4 += 4 * v24;
        v23 += 4 * v24;
      }
      if (v7 == v24) {
        goto LABEL_38;
      }
      size_t v25 = 4 * (v7 - v24);
      uint64_t v26 = v23;
      BOOL v27 = v4;
    }
    double result = memmove(v26, v27, v25);
    goto LABEL_38;
  }
  int64_t v11 = v9 - (char *)&v28;
  if (*(void *)v9 == 1) {
    int64_t v11 = 0;
  }
  int64_t v12 = v11 + *(void *)v9;
  int64_t v28 = v12;
  if (v12 != 1)
  {
    v5[2] = 0;
    int64_t v32 = v12 + (char *)&v28 - (char *)&v32;
    uint64_t v13 = (char *)&v28 + v12;
    if (v32 != 1 && v13 != 0)
    {
      if (*v5 == 1) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = (char *)v5 + *v5;
      }
      double result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v15, (uint64_t)v13);
    }
  }
  uint64_t v16 = 0;
  int64_t v17 = (char *)((char *)&v29 - v9);
  if (v29 == 1) {
    int64_t v17 = 0;
  }
  uint64_t v18 = &v17[v29];
  unint64_t v19 = v31;
  v5[2] = 0;
  v5[3] = v19;
  v5[1] = v18;
  if (v18 == (char *)1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = &v9[(void)v18];
  }
  if (v4 && v4 != a3 && v20)
  {
    double result = memmove(v20, v4, v6);
    int64_t v21 = &v20[4 * v7];
    uint64_t v16 = v5[2];
  }
  else
  {
    int64_t v21 = v20;
  }
  v5[2] = v16 + ((v21 - v20) >> 2);
  return result;
}

void *boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    if (*a1 == 1) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = (char *)a1 + *a1;
    }
    uint64_t v4 = v3 - (char *)&v7;
    do
    {
      a1[2] = v2 - 1;
      if (v3) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 1;
      }
      uint64_t v7 = v5;
      boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v7);
      v3 += 32;
      uint64_t v2 = a1[2];
      v4 += 32;
    }
    while (v2);
  }
  return a1;
}

char *boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(uint64_t *a1, void *a2, char a3, unint64_t a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v9 = 0;
  double result = 0;
  uint64_t v11 = (uint64_t)a6 + *a6;
  if (*a6 == 1) {
    uint64_t v11 = 0;
  }
  if (*a2 == 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = (uint64_t)a2 + *a2;
  }
  uint64_t v21 = v11;
  unint64_t v13 = *a5;
  unint64_t v14 = *(void *)(v12 + 48) >> 2;
  if (v14 >= a4 && v13 <= v14)
  {
    unint64_t v22 = 4 * v13;
    double result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v12, a3 | 0x10u, 4 * a4, &v22, &v21, 4uLL);
    uint64_t v9 = v21;
    *a5 = v22 >> 2;
  }
  if ((result & 3) != 0) {
    __assert_rtn("allocation_command", "rbtree_best_fit.hpp", 698, "0 == ((std::size_t)ret % ::boost::container::dtl::alignment_of<T>::value)");
  }
  if ((a3 & 0x10) == 0 && !result)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    uint64_t v20 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(void *)uint64_t v20 = &unk_1EF7A9B00;
  }
  uint64_t v17 = result - (char *)a1;
  if (!result) {
    uint64_t v17 = 1;
  }
  *a1 = v17;
  uint64_t v18 = v9 - (void)a6;
  if (!v9) {
    uint64_t v18 = 1;
  }
  *a6 = v18;
  return result;
}

void *boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(void *a1)
{
  uint64_t v2 = (uint64_t)a1 + *a1;
  if (*a1 != 1 && v2 != 0)
  {
    uint64_t v4 = (uint64_t *)a1[1];
    uint64_t v5 = *v4;
    size_t v6 = (char *)v4 + *v4;
    if (v5 == 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v7, v2);
  }
  return a1;
}

void *boost::container::vector<double,boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,double *,double &>>(void *a1, uint64_t a2, char *a3, void *a4)
{
  uint64_t v5 = (char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 24);
  if (v6 != *(void *)(a2 + 16)) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  if (*(void *)a2 == 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)a2 + a2;
  }
  unint64_t v9 = *(void *)(v8 + 48) >> 3;
  if (v9 == v6) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
  }
  if (v6 >> 61 > 4) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = 8 * v6;
  }
  if (v6 >> 61) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = 8 * v6 / 5;
  }
  unint64_t v15 = v6 + 1;
  if (v14 < v9) {
    unint64_t v9 = v14;
  }
  if (v15 > v9) {
    unint64_t v16 = v6 + 1;
  }
  else {
    unint64_t v16 = v9;
  }
  int64_t v17 = v5 - (char *)&v99;
  if (v4 == 1) {
    int64_t v17 = 0;
  }
  uint64_t v99 = v17 + v4;
  unint64_t v100 = v16;
  double result = boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v98, (void *)a2, 7, v15, &v100, &v99);
  if (v99 == 1)
  {
    uint64_t v94 = a1;
    uint64_t v19 = v4;
    uint64_t v20 = a4;
    if (v98 == 1) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = (char *)&v98 + v98;
    }
    unint64_t v22 = v100;
    uint64_t v23 = *(void *)(a2 + 8);
    uint64_t v24 = *(void *)(a2 + 16);
    if (v23 == 1) {
      size_t v25 = 0;
    }
    else {
      size_t v25 = &v5[v23];
    }
    int64_t v26 = (char *)&v101 - (char *)v102;
    uint64_t v27 = v21 - (char *)&v101;
    if (!v21) {
      uint64_t v27 = 1;
    }
    uint64_t v101 = v27;
    if (v27 == 1) {
      int64_t v26 = 0;
    }
    v102[0] = v26 + v27;
    v102[1] = a2;
    v102[2] = v100;
    if (v25 && v25 != a3 && v21)
    {
      memmove(v21, v25, a3 - v25);
      int64_t v28 = &v21[a3 - v25];
    }
    else
    {
      int64_t v28 = v21;
    }
    uint64_t v29 = v28 - (char *)&v103;
    if (!v28) {
      uint64_t v29 = 1;
    }
    uint64_t v30 = (uint64_t *)((char *)&v103 + v29);
    if (v29 == 1) {
      uint64_t v30 = 0;
    }
    *uint64_t v30 = *v20;
    if (a3)
    {
      uint64_t v31 = &v25[8 * v24];
      if (v31 != a3) {
        memmove(v28 + 8, a3, v31 - a3);
      }
    }
    v102[0] = 1;
    uint64_t v4 = v19;
    a1 = v94;
    if (v25)
    {
      int64_t v32 = v5 - (char *)&v103;
      if (*(void *)v5 == 1) {
        int64_t v32 = 0;
      }
      uint64_t v33 = v32 + *(void *)v5;
      uint64_t v103 = v33;
      if (v33 != 1 && (uint64_t *)((char *)&v103 + v33))
      {
        if (*(void *)a2 == 1) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = (char *)(*(void *)a2 + a2);
        }
        boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v34, (uint64_t)&v103 + v33);
      }
    }
    uint64_t v35 = v21 - (char *)&v103;
    if (!v21) {
      uint64_t v35 = 1;
    }
    uint64_t v36 = (char *)((char *)&v103 - v5);
    if (v35 == 1) {
      uint64_t v36 = 0;
    }
    uint64_t v37 = &v36[v35];
    uint64_t v38 = *(void *)(a2 + 16) + 1;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = v37;
    *(void *)(a2 + 16) = v38;
    *(void *)(a2 + 24) = v22;
    double result = boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(v102);
    goto LABEL_151;
  }
  if (*(void *)v5 == 1) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = &v5[*(void *)v5];
  }
  if (v98 == 1) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = (char *)&v98 + v98;
  }
  unint64_t v41 = v100;
  if (v39 == v40)
  {
    *(void *)(a2 + 24) = v100;
    uint64_t v61 = *(void *)(a2 + 16);
    if (v61 == v41) {
      __assert_rtn("priv_insert_forward_range_expand_forward", "vector.hpp", 2966, "this->room_enough()");
    }
    uint64_t v62 = &v39[8 * v61];
    if (v62 != a3)
    {
      uint64_t v63 = v62 - (char *)v102;
      if (!v39) {
        uint64_t v63 = 1;
      }
      uint64_t v64 = (void *)((char *)v102 + v63);
      if (v63 == 1) {
        uint64_t v64 = 0;
      }
      *uint64_t v64 = *((void *)v62 - 1);
      *(void *)(a2 + 16) = v61 + 1;
      if (v62 - 8 != a3) {
        double result = memmove(a3 + 8, a3, v62 - 8 - a3);
      }
      uint64_t v65 = *a4;
      goto LABEL_150;
    }
    uint64_t v79 = a3 - (char *)v102;
    if (!v39) {
      uint64_t v79 = 1;
    }
    uint64_t v80 = (void *)((char *)v102 + v79);
    if (v79 == 1) {
      uint64_t v80 = 0;
    }
    *uint64_t v80 = *a4;
    unint64_t v60 = v61 + 1;
    goto LABEL_143;
  }
  uint64_t v93 = a4;
  uint64_t v95 = a1;
  uint64_t v42 = *(void *)(a2 + 16);
  __dst = &v39[8 * v42];
  uint64_t v43 = v40 - (char *)v102;
  if (!v40) {
    uint64_t v43 = 1;
  }
  uint64_t v44 = (char *)((char *)v102 - v5);
  if (v43 == 1) {
    uint64_t v44 = 0;
  }
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v41;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = &v44[v43];
  unint64_t v45 = (a3 - v39) >> 3;
  unint64_t v46 = (v39 - v40) >> 3;
  unint64_t v47 = v45 + 1;
  uint64_t v48 = v39 - (char *)&v103;
  if (!v39) {
    uint64_t v48 = 1;
  }
  uint64_t v103 = v48;
  if (v46 >= v47)
  {
    if (v39 == a3 || !v39)
    {
      uint64_t v66 = v40;
    }
    else
    {
      uint64_t v66 = v40;
      if (v40)
      {
        uint64_t v67 = v39;
        size_t v68 = a3 - v39;
        uint64_t v69 = v42;
        double result = memmove(v40, v67, v68);
        uint64_t v42 = v69;
        uint64_t v66 = &v40[8 * v45];
      }
    }
    if (v66) {
      uint64_t v70 = v66 - (char *)v102;
    }
    else {
      uint64_t v70 = 1;
    }
    if (v70 == 1) {
      uint64_t v71 = 0;
    }
    else {
      uint64_t v71 = (void *)((char *)v102 + v70);
    }
    *uint64_t v71 = *v93;
    *(void *)(a2 + 16) = v47;
    uint64_t v72 = v42 + 1;
    if (v46 >= v42 + 1)
    {
      BOOL v57 = v42 == v45;
      a1 = v95;
      if (v57) {
        goto LABEL_151;
      }
      size_t v73 = __dst - a3;
      if (__dst == a3 || !a3 || !v40) {
        goto LABEL_137;
      }
    }
    else
    {
      size_t v73 = __dst - a3;
      a1 = v95;
      if (__dst == a3) {
        goto LABEL_137;
      }
    }
    double result = memmove(&v40[8 * v47], a3, v73);
LABEL_137:
    *(void *)(a2 + 16) = v72;
    goto LABEL_151;
  }
  if (v46 > v45)
  {
    uint64_t v90 = v42;
    uint64_t v91 = v39 - v40;
    if (v39 && v40)
    {
      uint64_t v49 = v40;
      if (v39 != a3)
      {
        double result = memmove(v40, v39, a3 - v39);
        uint64_t v49 = &v40[8 * v45];
      }
    }
    else
    {
      uint64_t v49 = v40;
    }
    *(void *)(a2 + 16) = v45;
    if (v46 - v45 != 1) {
LABEL_164:
    }
      __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 181, "n == 1");
    if (v49) {
      uint64_t v50 = v49 - (char *)v102;
    }
    else {
      uint64_t v50 = 1;
    }
    if (v50 == 1) {
      unint64_t v51 = 0;
    }
    else {
      unint64_t v51 = (void *)((char *)v102 + v50);
    }
    void *v51 = *v93;
    *(void *)(a2 + 16) = v46 + v90;
    if (v39 == v40 && a3 - v39 == 8)
    {
      *(void *)uint64_t v39 = *v93;
      unint64_t v52 = 1 - v46;
      uint64_t v53 = v90 - v45;
      BOOL v54 = 1 - v46 >= v90 - v45;
      uint64_t v55 = 1 - v46 - (v90 - v45);
      if (v55 == 0 || !v54)
      {
        uint64_t v81 = &__dst[8 * v46];
        uint64_t v82 = v81 - 8;
        if (v39 && v91 != 8) {
          double result = memmove(__dst, v81 - 8, __dst - v82);
        }
        *(void *)(a2 + 16) += v52;
        a1 = v95;
        if (v82 != a3) {
          double result = memmove(&__dst[-(v82 - a3)], a3, v82 - a3);
        }
        uint64_t v65 = *v93;
LABEL_150:
        *(void *)a3 = v65;
        goto LABEL_151;
      }
      if (__dst != a3 && a3 && v39) {
        double result = memmove(&__dst[8 * v55], a3, __dst - a3);
      }
      uint64_t v56 = &__dst[8 * v55] - (char *)&v101;
      if (!v39) {
        uint64_t v56 = 1;
      }
      uint64_t v101 = v56;
      if (v53 == 1)
      {
        *(void *)a3 = *v93;
        BOOL v57 = v55 == 1;
        a1 = v95;
        if (!v57) {
          goto LABEL_164;
        }
        uint64_t v58 = __dst - (char *)v102;
        if (!v39) {
          uint64_t v58 = 1;
        }
        uint64_t v59 = (void *)((char *)v102 + v58);
        if (v58 == 1) {
          uint64_t v59 = 0;
        }
        *uint64_t v59 = *v93;
        unint64_t v60 = *(void *)(a2 + 16) + v52;
LABEL_143:
        *(void *)(a2 + 16) = v60;
        goto LABEL_151;
      }
    }
LABEL_162:
    __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 187, "n == 1");
  }
  uint64_t v74 = v42;
  if (v39 == v40)
  {
    uint64_t v75 = v42;
  }
  else
  {
    double result = memmove(v40, v39, v39 - v40);
    uint64_t v75 = v74 + 1;
  }
  *(void *)(a2 + 16) = v75;
  a1 = v95;
  if (v39)
  {
    int64_t v76 = &v39[8 * v46];
    uint64_t v77 = v39;
    if (v76 != a3)
    {
      int64_t v78 = a3 - v76;
      double result = memmove(v39, v76, a3 - v76);
      uint64_t v77 = &v39[v78];
    }
  }
  else
  {
    uint64_t v77 = 0;
  }
  if (v39 == v40) {
    goto LABEL_162;
  }
  *(void *)uint64_t v77 = *v93;
  if ((unint64_t)(v39 - v40) >= 9 && a3 && __dst != a3) {
    double result = memmove(v77 + 8, a3, __dst - a3);
  }
LABEL_151:
  int64_t v83 = &v5[v4];
  if (v4 == 1) {
    int64_t v83 = 0;
  }
  uint64_t v84 = (char *)(a3 - v83);
  int64_t v85 = v5 - &v96;
  if (*(void *)v5 == 1) {
    int64_t v85 = 0;
  }
  uint64_t v86 = &v84[*(void *)v5 + v85];
  int64_t v87 = &v96 - v97;
  if (v86 == (char *)1) {
    int64_t v87 = 0;
  }
  uint64_t v88 = &v86[v87];
  int64_t v89 = v97 - (unsigned char *)a1;
  if (v88 == (char *)1) {
    int64_t v89 = 0;
  }
  *a1 = &v88[v89];
  return result;
}

void sub_1A42B3E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::container::vec_iterator<boost::interprocess::offset_ptr<double,long,unsigned long,0ul>,false>::operator*(uint64_t result)
{
  if (result == 1) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return result;
}

void *boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(void *a1)
{
  uint64_t v2 = (uint64_t)a1 + *a1;
  if (*a1 != 1 && v2 != 0)
  {
    uint64_t v4 = (uint64_t *)a1[1];
    uint64_t v5 = *v4;
    unint64_t v6 = (char *)v4 + *v4;
    if (v5 == 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v7, v2);
  }
  return a1;
}

void pf::SceneGeographyLineParser::~SceneGeographyLineParser(char **this)
{
  *this = (char *)&unk_1EF7A9988;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl(this + 7);
  this[6] = 0;

  JUMPOUT(0x1A6259210);
}

{
  *this = (char *)&unk_1EF7A9988;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl(this + 7);
  this[6] = 0;
}

pf::SceneGeographyLineParser *pf::SceneGeographyLineParser::SceneGeographyLineParser(pf::SceneGeographyLineParser *this, const char *a2, const char *a3, size_t a4)
{
  *(void *)this = &unk_1EF7A9988;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a4;
  *((void *)this + 4) = 0;
  *((_WORD *)this + 20) = 0;
  LOWORD(v17) = 420;
  boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_mapped_file((uint64_t)this + 48, a2, 0x10000000uLL, (mode_t *)&v17);
  uint64_t v7 = *((void *)this + 6);
  uint64_t v8 = v7 - ((void)this + 88);
  uint64_t v9 = v7 - ((void)this + 96);
  if (!v7)
  {
    uint64_t v8 = 1;
    uint64_t v9 = 1;
  }
  *((void *)this + 11) = v8;
  *((void *)this + 12) = v9;
  if (v7) {
    uint64_t v10 = v7 - ((void)this + 104);
  }
  else {
    uint64_t v10 = 1;
  }
  *((void *)this + 13) = v10;
  uint64_t v11 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v7, a4 + 8);
  *((void *)this + 2) = v11;
  memcpy(v11, a3, a4);
  *((void *)this + 4) = *((void *)this + 2) + a4;
  uint64_t v12 = *((void *)this + 6);
  long long v18 = xmmword_1A42D34F0;
  uint64_t v16 = v12;
  int64_t v17 = &unk_1EF7A9D68;
  unint64_t v19 = 0x80000001A42D5204 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v20 = &v16;
  *((void *)this + 14) = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v12, "floatmap", 1uLL, 0, 1, (uint64_t)&v17);
  uint64_t v13 = *((void *)this + 6);
  long long v18 = xmmword_1A42D34F0;
  unint64_t v19 = 0x80000001A42D5497 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v20 = &v16;
  int64_t v17 = &unk_1EF7A9D38;
  *((void *)this + 15) = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v13, "scenes", 1uLL, 0, 1, (uint64_t)&v17);
  uint64_t v14 = *((void *)this + 6);
  long long v18 = xmmword_1A42D3500;
  int64_t v17 = &unk_1EF7A9DC8;
  unint64_t v19 = 0x80000001A42D581DLL & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v20 = &v16;
  *((void *)this + 16) = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v14, "POI", 1uLL, 0, 1, (uint64_t)&v17);
  return this;
}

void sub_1A42B4168(_Unwind_Exception *a1)
{
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)(v1 + 56));
  *(void *)(v1 + 4_Block_object_dispose(&STACK[0x360], 8) = 0;
  _Unwind_Resume(a1);
}

void boost::interprocess::ipcdetail::CtorArgN<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>* const&>::~CtorArgN()
{
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>* const&>::construct_n(uint64_t result, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    uint64_t v4 = -16 - a2;
    do
    {
      uint64_t v5 = **(void **)(result + 32);
      if (v5) {
        uint64_t v6 = v5 - (void)v16;
      }
      else {
        uint64_t v6 = 1;
      }
      if (v6 == 1) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = &v16[v6];
      }
      if (v7) {
        uint64_t v8 = v7 - v17;
      }
      else {
        uint64_t v8 = 1;
      }
      *(unsigned char *)a2 = 0;
      if (v8 == 1) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = &v17[v8];
      }
      uint64_t v10 = v9 - v18;
      BOOL v11 = v9 == 0;
      if (!v9) {
        uint64_t v10 = 1;
      }
      uint64_t v12 = (uint64_t)&v9[v4];
      if (v11) {
        uint64_t v12 = 1;
      }
      if (v10 == 1) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = &v18[v10];
      }
      if (v13) {
        uint64_t v14 = (uint64_t)&v13[v4 + 8];
      }
      else {
        uint64_t v14 = 1;
      }
      *(void *)(a2 + _Block_object_dispose(&STACK[0x360], 8) = v14;
      *(void *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 24) = xmmword_1A42D3650;
      *(_DWORD *)(a2 + 40) = 1065353216;
      *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x360], 8) = xmmword_1A42D3510;
      unint64_t v15 = *a4 + 1;
      *a4 = v15;
      v4 -= 64;
      a2 += 64;
    }
    while (v15 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::CtorArgN<boost::container::vector<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,false,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>* const&>::~CtorArgN()
{
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::container::vector<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,false,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>* const&>::construct_n(uint64_t result, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    uint64_t v4 = -(uint64_t)a2;
    do
    {
      uint64_t v5 = **(void **)(result + 32);
      if (v5) {
        uint64_t v6 = v5 - (void)v10;
      }
      else {
        uint64_t v6 = 1;
      }
      if (v6 == 1) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = &v10[v6];
      }
      if (v7) {
        uint64_t v8 = (uint64_t)&v7[v4];
      }
      else {
        uint64_t v8 = 1;
      }
      *a2 = v8;
      a2[1] = 1;
      a2[2] = 0;
      a2[3] = 0;
      unint64_t v9 = *a4 + 1;
      *a4 = v9;
      v4 -= 32;
      a2 += 4;
    }
    while (v9 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::CtorArgN<boost::container::vector<double,boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,false,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>* const&>::~CtorArgN()
{
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::container::vector<double,boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,false,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>* const&>::construct_n(uint64_t result, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  *a4 = 0;
  if (a3)
  {
    uint64_t v4 = -(uint64_t)a2;
    do
    {
      uint64_t v5 = **(void **)(result + 32);
      if (v5) {
        uint64_t v6 = v5 - (void)v10;
      }
      else {
        uint64_t v6 = 1;
      }
      if (v6 == 1) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = &v10[v6];
      }
      if (v7) {
        uint64_t v8 = (uint64_t)&v7[v4];
      }
      else {
        uint64_t v8 = 1;
      }
      *a2 = v8;
      a2[1] = 1;
      a2[2] = 0;
      a2[3] = 0;
      unint64_t v9 = *a4 + 1;
      *a4 = v9;
      v4 -= 32;
      a2 += 4;
    }
    while (v9 < a3);
  }
  return result;
}

uint64_t pf::SceneGeographyLineParser::parseVersion(pf::SceneGeographyLineParser *this, char *__str)
{
  if (strtol(__str, 0, 10) >= 2) {
    *((unsigned char *)this + 41) = 1;
  }
  return 1;
}

id PFStoryColorGradeCategoryFromValenceArousal(double a1, double a2)
{
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = (double *)&unk_1E5B2EE60;
  double v7 = 1.79769313e308;
  do
  {
    double v8 = hypot(*(v6 - 1) - a1, *v6 - a2);
    if (v8 < v7)
    {
      double v7 = v8;
      int v5 = v4;
    }
    ++v4;
    v6 += 3;
  }
  while (v4 != 13);
  unint64_t v9 = *(&Vertices_11107 + 3 * v5);

  return v9;
}

__CFString *PFStoryColorGradeCategoryNamed(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  VertexIndexForColorGradeCategorCGFloat y = _GetVertexIndexForColorGradeCategory(v1);
  if ((VertexIndexForColorGradeCategory & 0x80000000) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      int v5 = 138412290;
      id v6 = v1;
      _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "unsupported color grade category '%@'", (uint8_t *)&v5, 0xCu);
    }
    uint64_t v3 = @"undefined";
  }
  else
  {
    uint64_t v3 = *(&Vertices_11107 + 3 * VertexIndexForColorGradeCategory);
  }

  return v3;
}

uint64_t _GetVertexIndexForColorGradeCategory(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0;
  uint64_t v3 = (id *)&Vertices_11107;
  while (*v3 != v1 && ([*v3 isEqualToString:v1] & 1) == 0)
  {
    ++v2;
    v3 += 3;
    if (v2 == 13)
    {
      uint64_t v2 = 0xFFFFFFFFLL;
      break;
    }
  }

  return v2;
}

double PFStoryColorGradeCategoryGetValence(void *a1)
{
  VertexIndexForColorGradeCategorCGFloat y = _GetVertexIndexForColorGradeCategory(a1);
  if ((VertexIndexForColorGradeCategory & 0x80000000) != 0) {
    return 0.0;
  }
  else {
    return *((double *)&Vertices_11107 + 3 * VertexIndexForColorGradeCategory + 1);
  }
}

double PFStoryColorGradeCategoryGetArousal(void *a1)
{
  VertexIndexForColorGradeCategorCGFloat y = _GetVertexIndexForColorGradeCategory(a1);
  if ((VertexIndexForColorGradeCategory & 0x80000000) != 0) {
    return 0.0;
  }
  else {
    return *((double *)&Vertices_11107 + 3 * VertexIndexForColorGradeCategory + 2);
  }
}

id PFStoryColorGradeSupportedCategories()
{
  if (PFStoryColorGradeSupportedCategories_onceToken[0] != -1) {
    dispatch_once(PFStoryColorGradeSupportedCategories_onceToken, &__block_literal_global_11153);
  }
  uint64_t v0 = (void *)PFStoryColorGradeSupportedCategories_supportedCategories;

  return v0;
}

void __PFStoryColorGradeSupportedCategories_block_invoke()
{
  id v3 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:13];
  for (uint64_t i = 0; i != 312; i += 24)
    [v3 addObject:*(__CFString **)((char *)&Vertices_11107 + i)];
  uint64_t v1 = [v3 copy];
  uint64_t v2 = (void *)PFStoryColorGradeSupportedCategories_supportedCategories;
  PFStoryColorGradeSupportedCategories_supportedCategories = v1;
}

void sub_1A42B4CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A42B60C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t __Block_byref_object_copy__11503(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11504(uint64_t a1)
{
}

void sub_1A42B649C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A42B6EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A42B7590(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A42B7C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1A42B8360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A42B8474(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A42BA83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL PFErrorOrUnderlyingErrorMatchesCodesByDomain(void *a1, void *a2)
{
  uint64_t v2 = PFUnderlyingErrorThatMatchesCodesByDomain(a1, a2);
  BOOL v3 = v2 != 0;

  return v3;
}

BOOL PFIsErrorOrUnderlyingErrorFileNotFound(void *a1)
{
  _DWORD v8[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *MEMORY[0x1E4F28798];
  v7[0] = *MEMORY[0x1E4F281F8];
  v7[1] = v1;
  v8[0] = &unk_1EF7CAE08;
  v8[1] = &unk_1EF7CAE20;
  uint64_t v2 = (void *)MEMORY[0x1E4F1C9E8];
  id v3 = a1;
  uint64_t v4 = [v2 dictionaryWithObjects:v8 forKeys:v7 count:2];
  BOOL v5 = PFErrorOrUnderlyingErrorMatchesCodesByDomain(v3, v4);

  return v5;
}

void sub_1A42BB6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  }

  _Unwind_Resume(a1);
}

void sub_1A42BBAB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A42BBCCC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v7 = __cxa_begin_catch(a1);
    double v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = [v3 indexName];
      uint64_t v11 = (*(uint64_t (**)(void *))(*(void *)v7 + 16))(v7);
      *(_DWORD *)(v5 - 112) = 138543874;
      *(void *)(v5 - 10_Block_object_dispose(&STACK[0x360], 8) = v10;
      *(_WORD *)(v5 - 100) = 2114;
      *(void *)(v5 - 9_Block_object_dispose(&STACK[0x360], 8) = v4;
      *(_WORD *)(v5 - 90) = 2082;
      *(void *)(v5 - 8_Block_object_dispose(&STACK[0x360], 8) = v11;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Error making %{public}@ at %{public}@: %{public}s", (uint8_t *)(v5 - 112), 0x20u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1A42BBC30);
  }

  _Unwind_Resume(a1);
}

void sub_1A42BBFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A42BC190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t pf::CachingArchive::skipChecksumValidation(pf::CachingArchive *this)
{
  unsigned __int8 v1 = atomic_load(s_skipChecksumValidation);
  return v1 & 1;
}

uint64_t pf::CachingArchive::setSkipCheckumValidation(uint64_t this)
{
  return this;
}

void PFCachingArchiveIndexSetSkipChecksumValidation(int a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  atomic_store(a1, s_skipChecksumValidation);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    v2[0] = 67109120;
    v2[1] = a1;
    _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "PFChecksum set skip: %d", (uint8_t *)v2, 8u);
  }
}

uint64_t PFArchiveFileIsAppleInternal()
{
  if (PFArchiveFileIsAppleInternal::onceToken[0] != -1) {
    dispatch_once(PFArchiveFileIsAppleInternal::onceToken, &__block_literal_global_11911);
  }
  return PFArchiveFileIsAppleInternal::isAppleInternal;
}

uint64_t __PFArchiveFileIsAppleInternal_block_invoke()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  PFArchiveFileIsAppleInternal::isAppleInternal = result;
  return result;
}

BOOL PFArchiveFileMagicFound(const char *a1, const char *a2, char *__little, size_t __len, const char **a5)
{
  size_t v6 = __len;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1 + 144;
  if (strnstr(a1 + 144, __little, __len) == a1 + 144) {
    goto LABEL_22;
  }
  BOOL result = 0;
  if (a1 && v6)
  {
    int v12 = *a2;
    uint64_t v13 = (void *)a1;
    while (1)
    {
      uint64_t v14 = (const char *)memchr(v13, v12, v6);
      if (!v14)
      {
        BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = a2;
        _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Archive index missing required magic %{public}s", buf, 0xCu);
        return 0;
      }
      uint64_t v10 = v14;
      if (strnstr(v14, a2, v6) == v14) {
        break;
      }
      uint64_t v13 = (void *)(v10 + 1);
      if (!--v6) {
        return 0;
      }
    }
    if (strnstr(v10, __little, v6) != v10)
    {
      size_t v15 = strlen(__little);
      if (v15 >= 0x50) {
        size_t v16 = 80;
      }
      else {
        size_t v16 = v15;
      }
      strlcpy((char *)buf, v10, v16);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 136446210;
        long long v18 = buf;
        _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unsupported archive file ABI: %{public}s", (uint8_t *)&v17, 0xCu);
      }
      return 0;
    }
    if (PFArchiveFileIsAppleInternal::onceToken[0] != -1) {
      dispatch_once(PFArchiveFileIsAppleInternal::onceToken, &__block_literal_global_11911);
    }
    if (PFArchiveFileIsAppleInternal::isAppleInternal && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v20 = (const char *)(v10 - a1);
      _os_log_fault_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Achive index found, but at different offset (%lx): update EXPECTED_MAGIC_OFFSET", buf, 0xCu);
      if (!a5) {
        return 1;
      }
      goto LABEL_23;
    }
LABEL_22:
    if (!a5) {
      return 1;
    }
LABEL_23:
    *a5 = v10;
    return 1;
  }
  return result;
}

unint64_t PFChecksumArchiveData(char *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1 && a3 && &a1[a2] > a3)
  {
    int64_t v8 = a3 - a1;
    uint64_t v9 = a4 + a3 - a1 + 8;
    uint64_t v10 = 0xCBF29CE484222325;
    uint64_t v11 = 0xCBF29CE484222325;
    if (a3 != a1)
    {
      int v12 = a1;
      do
      {
        uint64_t v13 = *v12++;
        uint64_t v11 = 0x100000001B3 * (v11 ^ v13);
        --v8;
      }
      while (v8);
    }
    uint64_t v14 = a2 - v9;
    if (a2 != v9)
    {
      size_t v15 = &a3[a4 + 8];
      do
      {
        uint64_t v16 = *v15++;
        uint64_t v10 = 0x100000001B3 * (v10 ^ v16);
        --v14;
      }
      while (v14);
    }
    return bswap64(v10 ^ v11);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v18 = 134218752;
      unint64_t v19 = a1;
      __int16 v20 = 2048;
      uint64_t v21 = a3;
      __int16 v22 = 2048;
      uint64_t v23 = a2;
      __int16 v24 = 2048;
      uint64_t v25 = a4;
      _os_log_error_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Invalid address for checksum (%p, %p, %ld, %ld).", (uint8_t *)&v18, 0x2Au);
    }
    return 0;
  }
}

id PFAssetBundleAllAuxiliaryResourceKeys()
{
  v2[1] = *MEMORY[0x1E4F143B8];
  v2[0] = @"PFAssetBundlePathSegmentationDataKey";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:1];

  return v0;
}

void *UTTypeForBundlePathKey(void *a1)
{
  uint64_t v1 = UTTypeForBundlePathKey_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&UTTypeForBundlePathKey_onceToken, &__block_literal_global_12324);
  }
  uint64_t v3 = [(id)UTTypeForBundlePathKey_utiTypesByPathKey objectForKeyedSubscript:v2];

  return v3;
}

void __UTTypeForBundlePathKey_block_invoke()
{
  v25[17] = *MEMORY[0x1E4F143B8];
  v24[0] = @"PFAssetBundlePathPhotoKey";
  uint64_t v0 = (void *)*MEMORY[0x1E4F44400];
  uint64_t v23 = [(id)*MEMORY[0x1E4F44400] identifier];
  v25[0] = v23;
  v24[1] = @"PFAssetBundlePathVideoKey";
  uint64_t v1 = (void *)*MEMORY[0x1E4F44448];
  __int16 v22 = [(id)*MEMORY[0x1E4F44448] identifier];
  v25[1] = v22;
  void v24[2] = @"PFAssetBundlePathAudioKey";
  uint64_t v21 = [(id)*MEMORY[0x1E4F44330] identifier];
  void v25[2] = v21;
  v24[3] = @"PFAssetBundlePathAlternatePhotoKey";
  __int16 v20 = [v0 identifier];
  v25[3] = v20;
  v24[4] = @"PFAssetBundlePathFullSizePhotoKey";
  unint64_t v19 = [v0 identifier];
  v25[4] = v19;
  v24[5] = @"PFAssetBundlePathFullSizeVideoKey";
  int v18 = [v1 identifier];
  v25[5] = v18;
  v24[6] = @"PFAssetBundlePathAdjustmentDataKey";
  int v17 = +[PFUniformTypeUtilities supplementalResourceAAEType];
  uint64_t v16 = [v17 identifier];
  v25[6] = v16;
  v24[7] = @"PFAssetBundlePathOriginalAdjustmentDataKey";
  size_t v15 = +[PFUniformTypeUtilities supplementalResourceAAEType];
  id v2 = [v15 identifier];
  v25[7] = v2;
  uint8_t v24[8] = @"PFAssetBundlePathAdjustmentSecondaryDataKey";
  uint64_t v3 = (void *)*MEMORY[0x1E4F44378];
  uint64_t v4 = [(id)*MEMORY[0x1E4F44378] identifier];
  unsigned char v25[8] = v4;
  v24[9] = @"PFAssetBundlePathAdjustmentBasePhotoKey";
  uint64_t v5 = [v0 identifier];
  v25[9] = v5;
  v24[10] = @"PFAssetBundlePathPairedVideoKey";
  size_t v6 = [v1 identifier];
  v25[10] = v6;
  v24[11] = @"PFAssetBundlePathFullSizePairedVideoKey";
  uint64_t v7 = [v1 identifier];
  v25[11] = v7;
  v24[12] = @"PFAssetBundlePathAdjustmentBasePairedVideoKey";
  int64_t v8 = [v1 identifier];
  v25[12] = v8;
  v24[13] = @"PFAssetBundlePathSpatialOvercapturePhotoKey";
  uint64_t v9 = [v0 identifier];
  void v25[13] = v9;
  v24[14] = @"PFAssetBundlePathSpatialOvercapturePairedVideoKey";
  uint64_t v10 = [v1 identifier];
  v25[14] = v10;
  v24[15] = @"PFAssetBundlePathSpatialOvercaptureVideoKey";
  uint64_t v11 = [v1 identifier];
  v25[15] = v11;
  v24[16] = @"PFAssetBundlePathSegmentationDataKey";
  int v12 = [v3 identifier];
  v25[16] = v12;
  uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:v24 count:17];
  uint64_t v14 = (void *)UTTypeForBundlePathKey_utiTypesByPathKey;
  UTTypeForBundlePathKey_utiTypesByPathKeCGFloat y = v13;
}

id createURLForAbsolutePathKeyInDictionary(void *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = copiedStringValueForKeyInDictionary((uint64_t)v3, a2);
  if (v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v4 isDirectory:0];
    if (v5) {
      goto LABEL_6;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      int v7 = 138412546;
      id v8 = v3;
      __int16 v9 = 2112;
      uint64_t v10 = v4;
      _os_log_impl(&dword_1A41FE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "[PFAssetBundle] could not create a URL for the path key %@. Path value in manifest: %@.", (uint8_t *)&v7, 0x16u);
    }
  }
  uint64_t v5 = 0;
LABEL_6:

  return v5;
}

id copiedStringValueForKeyInDictionary(uint64_t a1, void *a2)
{
  id v2 = [a2 objectForKeyedSubscript:a1];
  if (v2 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    id v3 = (void *)[v2 copy];
  }
  else {
    id v3 = 0;
  }

  return v3;
}

id ErrorForCode(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  size_t v6 = [MEMORY[0x1E4F1CA60] dictionary];
  if (a2 < 0xFFFFFFFA)
  {
    int v7 = @"unknown error";
    if (!a1) {
      goto LABEL_7;
    }
  }
  else
  {
    int v7 = off_1E5B2F4E8[a2 + 6];
    if (!a1) {
      goto LABEL_7;
    }
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    [NSString stringWithFormat:@"%@ %@ %s", @"zlib-error: ", v7, v8];
    goto LABEL_8;
  }
LABEL_7:
  [NSString stringWithFormat:@"%@ %@", @"zlib-error: ", v7, v12];
  __int16 v9 = LABEL_8:;
  [v6 setObject:v9 forKeyedSubscript:@"English Error String - Not Localized"];

  if (v5) {
    [v6 setObject:v5 forKeyedSubscript:*MEMORY[0x1E4F28A50]];
  }
  uint64_t v10 = [MEMORY[0x1E4F28C58] errorWithDomain:PFZlibErrorDomain code:(int)a2 userInfo:v6];

  return v10;
}

uint64_t __Block_byref_object_copy__12790(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12791(uint64_t a1)
{
}

void sub_1A42C5FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose((const void *)(v60 - 176), 8);
  _Block_object_dispose(&a54, 8);
  _Block_object_dispose(&a60, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose((const void *)(v60 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_1A42C6BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_1A42C6F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void AAArchiveStreamCancel(AAArchiveStream s)
{
}

int AAArchiveStreamClose(AAArchiveStream s)
{
  return MEMORY[0x1F4179268](s);
}

ssize_t AAArchiveStreamProcess(AAArchiveStream istream, AAArchiveStream ostream, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return MEMORY[0x1F4179270](istream, ostream, msg_data, msg_proc, flags, *(void *)&n_threads);
}

int AAArchiveStreamReadBlob(AAArchiveStream s, AAFieldKey key, void *buf, size_t nbyte)
{
  return MEMORY[0x1F4179278](s, *(void *)key.skey, buf, nbyte);
}

int AAArchiveStreamReadHeader(AAArchiveStream s, AAHeader *header)
{
  return MEMORY[0x1F4179280](s, header);
}

int AAArchiveStreamWriteBlob(AAArchiveStream s, AAFieldKey key, const void *buf, size_t nbyte)
{
  return MEMORY[0x1F4179288](s, *(void *)key.skey, buf, nbyte);
}

int AAArchiveStreamWriteHeader(AAArchiveStream s, AAHeader header)
{
  return MEMORY[0x1F4179290](s, header);
}

int AAArchiveStreamWritePathList(AAArchiveStream s, AAPathList path_list, AAFieldKeySet key_set, const char *dir, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return MEMORY[0x1F4179298](s, path_list, key_set, dir, msg_data, msg_proc, flags, *(void *)&n_threads);
}

void AAByteStreamCancel(AAByteStream s)
{
}

int AAByteStreamClose(AAByteStream s)
{
  return MEMORY[0x1F41792A8](s);
}

uint64_t AAByteStreamFlush()
{
  return MEMORY[0x1F41792B0]();
}

ssize_t AAByteStreamWrite(AAByteStream s, const void *buf, size_t nbyte)
{
  return MEMORY[0x1F41792C0](s, buf, nbyte);
}

AAByteStream AACompressionOutputStreamOpen(AAByteStream compressed_stream, AACompressionAlgorithm compression_algorithm, size_t block_size, AAFlagSet flags, int n_threads)
{
  return (AAByteStream)MEMORY[0x1F41792C8](compressed_stream, *(void *)&compression_algorithm, block_size, flags, *(void *)&n_threads);
}

AAByteStream AACompressionOutputStreamOpenExisting(AAByteStream compressed_stream, AAFlagSet flags, int n_threads)
{
  return (AAByteStream)MEMORY[0x1F41792D0](compressed_stream, flags, *(void *)&n_threads);
}

AAArchiveStream AADecodeArchiveInputStreamOpen(AAByteStream stream, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return (AAArchiveStream)MEMORY[0x1F4179308](stream, msg_data, msg_proc, flags, *(void *)&n_threads);
}

AAByteStream AADecompressionInputStreamOpen(AAByteStream compressed_stream, AAFlagSet flags, int n_threads)
{
  return (AAByteStream)MEMORY[0x1F4179310](compressed_stream, flags, *(void *)&n_threads);
}

AAArchiveStream AAEncodeArchiveOutputStreamOpen(AAByteStream stream, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return (AAArchiveStream)MEMORY[0x1F4179318](stream, msg_data, msg_proc, flags, *(void *)&n_threads);
}

AAArchiveStream AAExtractArchiveOutputStreamOpen(const char *dir, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return (AAArchiveStream)MEMORY[0x1F4179320](dir, msg_data, msg_proc, flags, *(void *)&n_threads);
}

AAFieldKeySet AAFieldKeySetCreateWithString(const char *s)
{
  return (AAFieldKeySet)MEMORY[0x1F4179328](s);
}

void AAFieldKeySetDestroy(AAFieldKeySet key_set)
{
}

AAByteStream AAFileStreamOpenWithFD(int fd, int automatic_close)
{
  return (AAByteStream)MEMORY[0x1F4179340](*(void *)&fd, *(void *)&automatic_close);
}

AAByteStream AAFileStreamOpenWithPath(const char *path, int open_flags, mode_t open_mode)
{
  return (AAByteStream)MEMORY[0x1F4179348](path, *(void *)&open_flags, open_mode);
}

AAHeader AAHeaderCreate(void)
{
  return (AAHeader)MEMORY[0x1F4179350]();
}

void AAHeaderDestroy(AAHeader header)
{
}

int AAHeaderGetFieldBlob(AAHeader header, uint32_t i, uint64_t *size, uint64_t *offset)
{
  return MEMORY[0x1F4179360](header, *(void *)&i, size, offset);
}

int AAHeaderGetFieldString(AAHeader header, uint32_t i, size_t capacity, char *value, size_t *length)
{
  return MEMORY[0x1F4179368](header, *(void *)&i, capacity, value, length);
}

int AAHeaderGetFieldUInt(AAHeader header, uint32_t i, uint64_t *value)
{
  return MEMORY[0x1F4179370](header, *(void *)&i, value);
}

int AAHeaderGetKeyIndex(AAHeader header, AAFieldKey key)
{
  return MEMORY[0x1F4179378](header, *(void *)key.skey);
}

int AAHeaderSetFieldBlob(AAHeader header, uint32_t i, AAFieldKey key, uint64_t size)
{
  return MEMORY[0x1F4179388](header, *(void *)&i, *(void *)key.skey, size);
}

int AAHeaderSetFieldString(AAHeader header, uint32_t i, AAFieldKey key, const char *value, size_t length)
{
  return MEMORY[0x1F4179390](header, *(void *)&i, *(void *)key.skey, value, length);
}

int AAHeaderSetFieldUInt(AAHeader header, uint32_t i, AAFieldKey key, uint64_t value)
{
  return MEMORY[0x1F4179398](header, *(void *)&i, *(void *)key.skey, value);
}

AAPathList AAPathListCreateWithDirectoryContents(const char *dir, const char *path, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return (AAPathList)MEMORY[0x1F41793A8](dir, path, msg_data, msg_proc, flags, *(void *)&n_threads);
}

void AAPathListDestroy(AAPathList path_list)
{
}

int AEAAuthDataAppendEntry(AEAAuthData auth_data, const char *key, const uint8_t *data, size_t data_size)
{
  return MEMORY[0x1F41793C0](auth_data, key, data, data_size);
}

AEAAuthData AEAAuthDataCreate(void)
{
  return (AEAAuthData)MEMORY[0x1F41793C8]();
}

AEAAuthData AEAAuthDataCreateWithContext(AEAContext context)
{
  return (AEAAuthData)MEMORY[0x1F41793D0](context);
}

void AEAAuthDataDestroy(AEAAuthData auth_data)
{
}

const uint8_t *__cdecl AEAAuthDataGetEncodedData(AEAAuthData auth_data)
{
  return (const uint8_t *)MEMORY[0x1F41793E0](auth_data);
}

size_t AEAAuthDataGetEncodedSize(AEAAuthData auth_data)
{
  return MEMORY[0x1F41793E8](auth_data);
}

int AEAAuthDataGetEntry(AEAAuthData auth_data, uint32_t i, size_t key_capacity, char *key, size_t *key_length, size_t data_capacity, uint8_t *data, size_t *data_size)
{
  return MEMORY[0x1F41793F0](auth_data, *(void *)&i, key_capacity, key, key_length, data_capacity, data, data_size);
}

uint32_t AEAAuthDataGetEntryCount(AEAAuthData auth_data)
{
  return MEMORY[0x1F41793F8](auth_data);
}

AEAContext AEAContextCreateWithEncryptedStream(AAByteStream encrypted_stream)
{
  return (AEAContext)MEMORY[0x1F4179400](encrypted_stream);
}

AEAContext AEAContextCreateWithProfile(AEAProfile profile)
{
  return (AEAContext)MEMORY[0x1F4179408](*(void *)&profile);
}

void AEAContextDestroy(AEAContext context)
{
}

int AEAContextSetFieldBlob(AEAContext context, AEAContextField field, AEAContextFieldRepresentation representation, const uint8_t *buf, size_t buf_size)
{
  return MEMORY[0x1F4179420](context, *(void *)&field, *(void *)&representation, buf, buf_size);
}

int AEAContextSetFieldUInt(AEAContext context, AEAContextField field, uint64_t value)
{
  return MEMORY[0x1F4179428](context, *(void *)&field, value);
}

AAByteStream AEADecryptionInputStreamOpen(AAByteStream encrypted_stream, AEAContext context, AAFlagSet flags, int n_threads)
{
  return (AAByteStream)MEMORY[0x1F4179430](encrypted_stream, context, flags, *(void *)&n_threads);
}

AAByteStream AEAEncryptionOutputStreamOpen(AAByteStream encrypted_stream, AEAContext context, AAFlagSet flags, int n_threads)
{
  return (AAByteStream)MEMORY[0x1F4179440](encrypted_stream, context, flags, *(void *)&n_threads);
}

uint64_t AVGestaltGetIntegerAnswerWithDefault()
{
  return MEMORY[0x1F40D0EC0]();
}

uint64_t AVSmartStyleSettingsGetSystemStyle()
{
  return MEMORY[0x1F40D0ED0]();
}

OSStatus AudioFormatGetProperty(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1F40D4CB0](*(void *)&inPropertyID, *(void *)&inSpecifierSize, inSpecifier, ioPropertyDataSize, outPropertyData);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1F40D9790](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97A8](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D0](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D8](retstr, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1F40D9970](space, components);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return (CGColorRef)MEMORY[0x1F40D9980](a1, *(void *)&intent, color, options);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x1F40D9A00](color);
}

void CGColorRelease(CGColorRef color)
{
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B60](name);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

BOOL CGColorSpaceUsesExtendedRange(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9C60](space);
}

BOOL CGColorSpaceUsesITUR_2100TF(CGColorSpaceRef a1)
{
  return MEMORY[0x1F40D9C68](a1);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextRelease(CGContextRef c)
{
}

CGImageRef CGImageCreateCopyWithColorSpace(CGImageRef image, CGColorSpaceRef space)
{
  return (CGImageRef)MEMORY[0x1F40DA880](image, space);
}

uint64_t CGImageCreateDataFromMetadata()
{
  return MEMORY[0x1F40E96C0]();
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

void CGImageDestinationAddImageFromSource(CGImageDestinationRef idst, CGImageSourceRef isrc, size_t index, CFDictionaryRef properties)
{
}

CFArrayRef CGImageDestinationCopyTypeIdentifiers(void)
{
  return (CFArrayRef)MEMORY[0x1F40E9730]();
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1F40E9758](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1F40E9760](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA8D0](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1F40DA8E0](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1F40DA8F0](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1F40DA908](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

uint64_t CGImageMetadataCreateFromMetadataProperties()
{
  return MEMORY[0x1F40E97B0]();
}

CGMutableImageMetadataRef CGImageMetadataCreateMutable(void)
{
  return (CGMutableImageMetadataRef)MEMORY[0x1F40E97C8]();
}

CFDataRef CGImageMetadataCreateXMPData(CGImageMetadataRef metadata, CFDictionaryRef options)
{
  return (CFDataRef)MEMORY[0x1F40E97E0](metadata, options);
}

BOOL CGImageMetadataSetValueMatchingImageProperty(CGMutableImageMetadataRef metadata, CFStringRef dictionaryName, CFStringRef propertyName, CFTypeRef value)
{
  return MEMORY[0x1F40E9828](metadata, dictionaryName, propertyName, value);
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1F40DAA98](image);
}

CFDictionaryRef CGImageSourceCopyAuxiliaryDataInfoAtIndex(CGImageSourceRef isrc, size_t index, CFStringRef auxiliaryImageDataType)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9908](isrc, index, auxiliaryImageDataType);
}

uint64_t CGImageSourceCopyMetadataPropertiesAtIndex()
{
  return MEMORY[0x1F40E9920]();
}

CFDictionaryRef CGImageSourceCopyProperties(CGImageSourceRef isrc, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9930](isrc, options);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9938](isrc, index, options);
}

CFArrayRef CGImageSourceCopyTypeIdentifiers(void)
{
  return (CFArrayRef)MEMORY[0x1F40E9958]();
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9968](isrc, index, options);
}

uint64_t CGImageSourceCreateProxyData()
{
  return MEMORY[0x1F40E9980]();
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E9998](data, options);
}

uint64_t CGImageSourceCreateWithProxyData()
{
  return MEMORY[0x1F40E99B8]();
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E99C8](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x1F40E99F8](isrc);
}

size_t CGImageSourceGetPrimaryImageIndex(CGImageSourceRef isrc)
{
  return MEMORY[0x1F40E9A00](isrc);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return (CFStringRef)MEMORY[0x1F40E9A18](isrc);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x1F40DB220](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.simd_double2 x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1F40DB228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB230]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1F40DB238]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2B8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.CGFloat height = v6;
  result.size.CGFloat width = v5;
  result.origin.CGFloat y = v4;
  result.origin.simd_double2 x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x1F40DB2C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.simd_double2 x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB2C8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.simd_double2 x = v2;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x1F40DB2E0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x1F40DB2F0](dict, rect);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.CGFloat height = v6;
  result.size.CGFloat width = v5;
  result.origin.CGFloat y = v4;
  result.origin.simd_double2 x = v3;
  return result;
}

CGRect CGRectStandardize(CGRect rect)
{
  MEMORY[0x1F40DB300]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.simd_double2 x = v1;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB310]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.simd_double2 x = v2;
  return result;
}

CFDictionaryRef CGSizeCreateDictionaryRepresentation(CGSize size)
{
  return (CFDictionaryRef)MEMORY[0x1F40DB4C8]((__n128)size, *(__n128 *)&size.height);
}

BOOL CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGSize *size)
{
  return MEMORY[0x1F40DB4E0](dict, size);
}

BOOL CLLocationCoordinate2DIsValid(CLLocationCoordinate2D coord)
{
  return MEMORY[0x1F40DB598]((__n128)coord, *(__n128 *)&coord.longitude);
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  MEMORY[0x1F40DB5A0](latitude, longitude);
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

const AudioChannelLayout *__cdecl CMAudioFormatDescriptionGetChannelLayout(CMAudioFormatDescriptionRef desc, size_t *sizeOut)
{
  return (const AudioChannelLayout *)MEMORY[0x1F40DB8A0](desc, sizeOut);
}

const AudioFormatListItem *__cdecl CMAudioFormatDescriptionGetFormatList(CMAudioFormatDescriptionRef desc, size_t *sizeOut)
{
  return (const AudioFormatListItem *)MEMORY[0x1F40DB8A8](desc, sizeOut);
}

const void *__cdecl CMAudioFormatDescriptionGetMagicCookie(CMAudioFormatDescriptionRef desc, size_t *sizeOut)
{
  return (const void *)MEMORY[0x1F40DB8B0](desc, sizeOut);
}

const AudioFormatListItem *__cdecl CMAudioFormatDescriptionGetRichestDecodableFormat(CMAudioFormatDescriptionRef desc)
{
  return (const AudioFormatListItem *)MEMORY[0x1F40DB8C8](desc);
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1F40DB988](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(void *)&flags);
}

size_t CMBlockBufferGetDataLength(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x1F40DB998](theBuffer);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x1F40DB9A0](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

CFPropertyListRef CMFormatDescriptionGetExtension(CMFormatDescriptionRef desc, CFStringRef extensionKey)
{
  return (CFPropertyListRef)MEMORY[0x1F40DBBB8](desc, extensionKey);
}

CFDictionaryRef CMFormatDescriptionGetExtensions(CMFormatDescriptionRef desc)
{
  return (CFDictionaryRef)MEMORY[0x1F40DBBC0](desc);
}

FourCharCode CMFormatDescriptionGetMediaSubType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x1F40DBBC8](desc);
}

CMMediaType CMFormatDescriptionGetMediaType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x1F40DBBD0](desc);
}

OSStatus CMMetadataFormatDescriptionCreateWithMetadataSpecifications(CFAllocatorRef allocator, CMMetadataFormatType metadataType, CFArrayRef metadataSpecifications, CMMetadataFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1F40DBC80](allocator, *(void *)&metadataType, metadataSpecifications, formatDescriptionOut);
}

CFArrayRef CMMetadataFormatDescriptionGetIdentifiers(CMMetadataFormatDescriptionRef desc)
{
  return (CFArrayRef)MEMORY[0x1F40DBC88](desc);
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImage()
{
  return MEMORY[0x1F410D510]();
}

uint64_t CMPhotoCompressionSessionAddImage()
{
  return MEMORY[0x1F410D568]();
}

uint64_t CMPhotoCompressionSessionCloseContainer()
{
  return MEMORY[0x1F410D5A8]();
}

uint64_t CMPhotoCompressionSessionCloseContainerAndCopyBacking()
{
  return MEMORY[0x1F410D5B0]();
}

uint64_t CMPhotoCompressionSessionCreate()
{
  return MEMORY[0x1F410D5B8]();
}

uint64_t CMPhotoCompressionSessionInvalidate()
{
  return MEMORY[0x1F410D5E0]();
}

uint64_t CMPhotoCompressionSessionOpenEmptyContainer()
{
  return MEMORY[0x1F410D5F0]();
}

uint64_t CMPhotoCompressionSessionOpenExistingContainerForModification()
{
  return MEMORY[0x1F410D600]();
}

uint64_t CMPhotoDecompressionContainerCreateImageForIndex()
{
  return MEMORY[0x1F410D7D0]();
}

uint64_t CMPhotoDecompressionContainerJFIFTranscode()
{
  return MEMORY[0x1F410D908]();
}

uint64_t CMPhotoDecompressionSessionCreate()
{
  return MEMORY[0x1F410D960]();
}

uint64_t CMPhotoDecompressionSessionCreateContainer()
{
  return MEMORY[0x1F410D968]();
}

uint64_t CMPhotoSurfacePoolCreatePixelBuffer()
{
  return MEMORY[0x1F410DBA0]();
}

OSStatus CMSampleBufferCreate(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMItemCount numSampleSizeEntries, const size_t *sampleSizeArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1F40DBD30](allocator, dataBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, numSamples, numSampleTimingEntries);
}

CMTime *__cdecl CMSampleBufferGetDuration(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1F40DBDB8](retstr, sbuf);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return (CVImageBufferRef)MEMORY[0x1F40DBDC8](sbuf);
}

CMItemCount CMSampleBufferGetNumSamples(CMSampleBufferRef sbuf)
{
  return MEMORY[0x1F40DBDD0](sbuf);
}

CMTime *__cdecl CMSampleBufferGetOutputPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1F40DBDE8](retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1F40DBDF8](retstr, sbuf);
}

size_t CMSampleBufferGetTotalSampleSize(CMSampleBufferRef sbuf)
{
  return MEMORY[0x1F40DBE30](sbuf);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1F40DC088](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1F40DC0C8](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1F40DC0E0](time, allocator);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  MEMORY[0x1F40DC100](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1F40DC108](retstr, value, *(void *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1F40DC110](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x1F40DC120](retstr, *(void *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeMultiplyByFloat64(CMTime *__return_ptr retstr, CMTime *time, Float64 multiplier)
{
  return (CMTime *)MEMORY[0x1F40DC178](retstr, time, multiplier);
}

CFDictionaryRef CMTimeRangeCopyAsDictionary(CMTimeRange *range, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1F40DC1A0](range, allocator);
}

CMTimeRange *__cdecl CMTimeRangeFromTimeToTime(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *end)
{
  return (CMTimeRange *)MEMORY[0x1F40DC1B8](retstr, start, end);
}

CMTime *__cdecl CMTimeRangeGetEnd(CMTime *__return_ptr retstr, CMTimeRange *range)
{
  return (CMTime *)MEMORY[0x1F40DC1C0](retstr, range);
}

CMTimeRange *__cdecl CMTimeRangeGetIntersection(CMTimeRange *__return_ptr retstr, CMTimeRange *range, CMTimeRange *otherRange)
{
  return (CMTimeRange *)MEMORY[0x1F40DC1C8](retstr, range, otherRange);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  return (CMTimeRange *)MEMORY[0x1F40DC1D8](retstr, start, duration);
}

CMTimeRange *__cdecl CMTimeRangeMakeFromDictionary(CMTimeRange *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTimeRange *)MEMORY[0x1F40DC1E0](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1F40DC1F0](retstr, lhs, rhs);
}

CGSize CMVideoFormatDescriptionGetPresentationDimensions(CMVideoFormatDescriptionRef videoDesc, Boolean usePixelAspectRatio, Boolean useCleanAperture)
{
  MEMORY[0x1F40DC360](videoDesc, usePixelAspectRatio, useCleanAperture);
  result.CGFloat height = v4;
  result.CGFloat width = v3;
  return result;
}

uint64_t CMVideoFormatDescriptionGetVideoDynamicRange()
{
  return MEMORY[0x1F40DC368]();
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1F40DFB48](buffer, key, attachmentMode);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFCE0](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFD00](allocator, width, height, *(void *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1F40DFD28](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1F40DFD30](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD40](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFD48](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD68](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD80](pixelBuffer);
}

CFTypeID CVPixelBufferGetTypeID(void)
{
  return MEMORY[0x1F40DFD90]();
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD98](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1F40DFDB8](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFDC8](allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1F40DFE40](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1F40DFE48](pixelBuffer, unlockFlags);
}

uint64_t CopyMetadataFromFileAtPath()
{
  return MEMORY[0x1F40E9A88]();
}

uint64_t FigAudioFormatDescriptionGetCinematicAudioEffectEligibility()
{
  return MEMORY[0x1F40DC628]();
}

uint64_t FigHEVCBridge_GetHEVCParameterSetAtIndex()
{
  return MEMORY[0x1F40DDA70]();
}

uint64_t FigHEVCBridge_GetSPSProfileTierLevel()
{
  return MEMORY[0x1F40DDA88]();
}

uint64_t FigLivePhotoMetadataComputeDeserializationSize()
{
  return MEMORY[0x1F410D3E8]();
}

uint64_t FigLivePhotoMetadataDeserializeIntoBuffer()
{
  return MEMORY[0x1F410D3F8]();
}

uint64_t FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors()
{
  return MEMORY[0x1F40DDC58]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MMCSSignatureAndSchemeSize()
{
  return MEMORY[0x1F412C440]();
}

uint64_t MMCSSignatureCreateFromFileDescriptor()
{
  return MEMORY[0x1F412C450]();
}

uint64_t MMCSSignatureGeneratorCreate()
{
  return MEMORY[0x1F412C458]();
}

uint64_t MMCSSignatureGeneratorFinish()
{
  return MEMORY[0x1F412C478]();
}

uint64_t MMCSSignatureGeneratorUpdate()
{
  return MEMORY[0x1F412C488]();
}

uint64_t MTCopyStringsForMediaTypeAndSubType()
{
  return MEMORY[0x1F40EDD40]();
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E7140](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1F40E72A0](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E72E0](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

uint64_t PFExists()
{
  return MEMORY[0x1F413F310]();
}

uint64_t PFFilter()
{
  return MEMORY[0x1F413F318]();
}

uint64_t PFLargestSalientAspectFilledCropRect()
{
  return MEMORY[0x1F413F328]();
}

uint64_t PFSizeWithAspectRatioFittingSize()
{
  return MEMORY[0x1F413F388]();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DD8](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DE0](query, result);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1F40F70F0](rnd, count, bytes);
}

OSStatus VTCompressionSessionCompleteFrames(VTCompressionSessionRef session, CMTime *completeUntilPresentationTimeStamp)
{
  return MEMORY[0x1F41030F0](session, completeUntilPresentationTimeStamp);
}

OSStatus VTCompressionSessionCreate(CFAllocatorRef allocator, int32_t width, int32_t height, CMVideoCodecType codecType, CFDictionaryRef encoderSpecification, CFDictionaryRef sourceImageBufferAttributes, CFAllocatorRef compressedDataAllocator, VTCompressionOutputCallback outputCallback, void *outputCallbackRefCon, VTCompressionSessionRef *compressionSessionOut)
{
  return MEMORY[0x1F4103100](allocator, *(void *)&width, *(void *)&height, *(void *)&codecType, encoderSpecification, sourceImageBufferAttributes, compressedDataAllocator, outputCallback);
}

OSStatus VTCompressionSessionEncodeFrameWithOutputHandler(VTCompressionSessionRef session, CVImageBufferRef imageBuffer, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, VTEncodeInfoFlags *infoFlagsOut, VTCompressionOutputHandler outputHandler)
{
  return MEMORY[0x1F4103118](session, imageBuffer, presentationTimeStamp, duration, frameProperties, infoFlagsOut, outputHandler);
}

OSStatus VTCompressionSessionPrepareToEncodeFrames(VTCompressionSessionRef session)
{
  return MEMORY[0x1F4103150](session);
}

uint64_t VTCopyDecoderCapabilitiesDictionaryForCodecTypes()
{
  return MEMORY[0x1F4103168]();
}

uint64_t VTCopyHEVCDecoderCapabilitiesDictionary()
{
  return MEMORY[0x1F4103170]();
}

uint64_t VTGetDecoderCapabilitesForFormatDescription()
{
  return MEMORY[0x1F41032F0]();
}

uint64_t VTGetHEVCCapabilitesForFormatDescription()
{
  return MEMORY[0x1F4103308]();
}

uint64_t VTSelectAndCreateVideoDecoderInstance()
{
  return MEMORY[0x1F4103510]();
}

uint64_t VTSelectAndCreateVideoEncoderInstance()
{
  return MEMORY[0x1F4103518]();
}

OSStatus VTSessionCopySupportedPropertyDictionary(VTSessionRef session, CFDictionaryRef *supportedPropertyDictionaryOut)
{
  return MEMORY[0x1F4103528](session, supportedPropertyDictionaryOut);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x1F4103538](session, propertyKey, propertyValue);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1F40D8D10]();
}

uint64_t _PFAssertContinueHandler()
{
  return MEMORY[0x1F413F3A8]();
}

uint64_t _PFAssertFailHandler()
{
  return MEMORY[0x1F413F3B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4E0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

{
  MEMORY[0x1F417E4F0](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __fpclassifyd(double a1)
{
  return MEMORY[0x1F40C9BC8](a1);
}

uint64_t __invert_d3()
{
  return MEMORY[0x1F40C9BE0]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

simd_double2 _simd_pow_d2(simd_double2 x, simd_double2 y)
{
  MEMORY[0x1F40CA180]((__n128)x, (__n128)y);
  return result;
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

uint64_t archive_error_string()
{
  return MEMORY[0x1F417E080]();
}

uint64_t archive_read_data_block()
{
  return MEMORY[0x1F417E0A8]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1F417E110]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x1F417E118]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x1F417E120]();
}

uint64_t archive_read_open_filename()
{
  return MEMORY[0x1F417E140]();
}

uint64_t archive_read_support_filter_bzip2()
{
  return MEMORY[0x1F417E160]();
}

uint64_t archive_read_support_format_raw()
{
  return MEMORY[0x1F417E190]();
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1F40CB3D8](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182BD0](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182BE0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1F4182BE8](strm, *(void *)&level, *(void *)&method, *(void *)&windowBits, *(void *)&memLevel, *(void *)&strategy, version, *(void *)&stream_size);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CB9F8](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1F40CBD40](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1F40CC028](*(void *)&a1, a2);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1F40CC2F0](*(void *)&a1, a2);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x1F40CC630](__x, __y);
  return result;
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182CB0](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182CB8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1F4182CC8](strm, *(void *)&windowBits, version, *(void *)&stream_size);
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CC900](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x1F40CCE48](__y, __x);
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x1F40CCEA0](__rqtp, __rmtp);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1F40CD560](log, ptr);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1F40CD570]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1F40CD578]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return MEMORY[0x1F40CDB90](a1, a2);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

int sched_yield(void)
{
  return MEMORY[0x1F40CDEC8]();
}

int shmdt(const void *a1)
{
  return MEMORY[0x1F40CDFF0](a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1F40CE210](__big, __little, __len);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE230](__s, *(void *)&__c);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x1F40CE298](__str, __sep, __lasts);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x1F40CE3B8](*(void *)&a1);
}