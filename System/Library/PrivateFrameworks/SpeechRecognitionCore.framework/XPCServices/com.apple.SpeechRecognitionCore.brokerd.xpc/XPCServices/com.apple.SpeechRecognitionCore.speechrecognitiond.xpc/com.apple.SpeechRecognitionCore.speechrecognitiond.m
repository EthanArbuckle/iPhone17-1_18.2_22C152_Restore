void sub_100004DC4(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = RXOSLog();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SpeechAnalyzerObjC initialized", v2, 2u);
  }
}

void sub_1000057C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000057E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = RXOSLog();
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Attached transcriber to SpeechAnalyzer", (uint8_t *)&v9, 2u);
    }

    [*(id *)(a1 + 32) setCurrentTask:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) startRecognition:v3];
    v6 = RXOSLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SpeechAnalyzerObjC recognition started with task %@", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SpeechAnalyzerObjC recognition failed with task %@", (uint8_t *)&v9, 0xCu);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_100005B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_100005B8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = RXOSLog();
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(unsigned __int8 *)(a1 + 56);
      int v11 = 67109120;
      int v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Attached transcriber to SpeechAnalyzer for recognition replacements %d", (uint8_t *)&v11, 8u);
    }

    [WeakRetained setUseRecognitionReplacements:*(unsigned __int8 *)(a1 + 56)];
    [WeakRetained startRecognition:v3];
    uint64_t v8 = RXOSLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int8 *)(a1 + 56);
      int v11 = 67109120;
      int v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SpeechAnalyzerObjC recognition started for recognition replacements %d", (uint8_t *)&v11, 8u);
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(unsigned __int8 *)(a1 + 56);
      int v11 = 67109120;
      int v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SpeechAnalyzerObjC recognition failed for recognition replacements %d", (uint8_t *)&v11, 8u);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id RDEARCSpeechRecognizerCreate(uint64_t a1, int a2)
{
  if (a2)
  {
    BOOL v3 = CFPreferencesGetAppBooleanValue(@"UseAssetSupportForEmojiNameRecogition", @"com.apple.SpeechRecognitionCore", 0) != 0;
    id v4 = objc_alloc((Class)_EARSpeechRecognizer);
    v5 = +[_EARSpeechRecognitionActiveConfiguration activeConfigurationForEverything];
    LOBYTE(v10) = 1;
    BYTE1(v9) = v3;
    LOBYTE(v9) = 0;
    id v6 = objc_msgSend(v4, "initWithConfiguration:overrides:overrideConfigFiles:language:activeConfiguration:modelLoadingOptions:enableSpeakerCodeTraining:supportEmojiRecognition:voiceCommandActiveSet:modelContextDelegate:enableItn:", a1, 0, 0, 0, v5, 0, v9, 0, 0, v10);

    return v6;
  }
  else
  {
    id v8 = objc_alloc((Class)_EARSpeechRecognizer);
    return _[v8 initWithConfiguration:a1];
  }
}

CFTypeRef RDEARCSpeechRecognizerCopyUserProfileData(void *a1)
{
  id v1 = [a1 userProfileData];
  return CFRetain(v1);
}

id RDEARCSpeechRecognizerSetUserProfileData(void *a1, uint64_t a2)
{
  return _[a1 setUserProfileData:a2];
}

id RDEARCSpeechRecognizerUpdateUserProfileData(void *a1, uint64_t a2)
{
  return _[a1 updateUserProfileData:a2];
}

id RDEARCSpeechRecognizerSetJitProfileData(void *a1, uint64_t a2)
{
  return _[a1 setJitProfileData:a2];
}

id RDEARCSpeechRecognizerUpdateJitProfileData(void *a1, uint64_t a2)
{
  return _[a1 updateJitProfileData:a2];
}

CFTypeRef RDEARCSpeechRecognizerCopyJitProfileData(void *a1)
{
  id v1 = [a1 jitProfileData];
  return CFRetain(v1);
}

id RDEARCSpeechRecognizerSetLeftContext(void *a1, uint64_t a2)
{
  return _[a1 setLeftContext:a2];
}

id RDEARCSpeechRecognizerSetLeftContextText(void *a1, uint64_t a2)
{
  return _[a1 setLeftContextText:a2];
}

id RDEARCSpeechRecognizerSetDetectUtterances(void *a1, int a2)
{
  return _[a1 setDetectUtterances:a2 != 0];
}

id RDEARCSpeechRecognitionTokenGetTokenName(void *a1)
{
  return _[a1 tokenName];
}

id RDEARCSpeechRecognitionTokenGetStart(void *a1)
{
  return _[a1 start];
}

id RDEARCSpeechRecognitionTokenGetEnd(void *a1)
{
  return _[a1 end];
}

id RDEARCSpeechRecognitionTokenGetSilenceStart(void *a1)
{
  return _[a1 silenceStart];
}

id RDEARCSpeechRecognitionTokenGetConfidence(void *a1)
{
  return _[a1 confidence];
}

id RDEARCSpeechRecognitionTokenHasSpaceAfter(void *a1)
{
  return [a1 hasSpaceAfter];
}

uint64_t RDEARCSpeechRecognizerCreateRecognitionBuffer(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9 = [[RDEARCSpeechRecognitionResultStreamGlue alloc] initWithStream:a5];
  if (CFPreferencesGetAppBooleanValue(@"UseAssetSupportForEmojiNameRecogition", @"com.apple.SpeechRecognitionCore", 0))
  {
    [a1 setRecognizeEmoji:1];
  }
  uint64_t v10 = [a1 runRecognitionWithResultStream:v9 language:a2 task:a3 samplingRate:a4];

  return v10;
}

id RDEARCSpeechRecognizerSetConcatenateUtterances(void *a1, int a2)
{
  return _[a1 setConcatenateUtterances:a2 != 0];
}

id RDEARCSpeechRecognizerSetEndpointStart(void *a1)
{
  return _objc_msgSend(a1, "setEndpointStart:");
}

id RDEARCSpeechRecognizerSetRecognizeEagerCandidates(void *a1, int a2)
{
  return _[a1 setRecognizeEagerCandidates:a2 != 0];
}

id RDEARCSpeechRecognizerSetFarField(void *a1, int a2)
{
  return _[a1 setFarField:a2 != 0];
}

id RDEARCSpeechRecognizerSetHighPriority(void *a1, int a2)
{
  return _[a1 setHighPriority:a2 != 0];
}

id RDEARCSpeechRecognizerSetMaximumRecognitionDuration(void *a1)
{
  return _objc_msgSend(a1, "setMaximumRecognitionDuration:");
}

id RDEARCSpeechRecognizerSetRecognitionReplacements(void *a1, const char *a2)
{
  return [a1 setRecognitionReplacements:a2];
}

id PREARCSpeechRecognizerSetRecognitionConfidenceSubtraction(void *a1, uint64_t a2)
{
  return _[a1 setRecognitionConfidenceSubtraction:a2];
}

id RDEARCSpeechRecognizerSetInputOrigin(void *a1, uint64_t a2)
{
  return _[a1 setInputOrigin:a2];
}

id RDEARCSpeechRecognizerSetDeviceId(void *a1, uint64_t a2)
{
  return _[a1 setDeviceId:a2];
}

id RDEARCSpeechRecognizerSetRefTranscriptForErrorBlaming(void *a1, uint64_t a2)
{
  return _[a1 setRefTranscriptForErrorBlaming:a2];
}

id RDEARCSpeechRecognizerSetBluetoothDeviceId(void *a1, uint64_t a2)
{
  return _[a1 setBluetoothDeviceId:a2];
}

id RDEARCSpeechRecognizerSetUserId(void *a1, uint64_t a2)
{
  return _[a1 setUserId:a2];
}

id RDEARCSpeechRecognizerSetSessionId(void *a1, uint64_t a2)
{
  return _[a1 setSessionId:a2];
}

id RDEARCSpeechRecognitionAudioBufferAddAudioSampleData(void *a1, uint64_t a2)
{
  return _[a1 addAudioSampleData:a2];
}

id RDEARCSpeechRecognitionAudioBufferAddAudioSamples(void *a1, uint64_t a2, uint64_t a3)
{
  return _[a1 addAudioSamples:a2 count:a3];
}

id RDEARCWordPartCreate(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  id v8 = objc_alloc((Class)_EARWordPart);
  return [v8 initWithOrthography:a1 pronunciations:a2 tagName:a3 frequency:a4];
}

id RDEARCWordPartGetOrthography(void *a1)
{
  return _[a1 orthography];
}

id RDEARCWordPartGetTagName(void *a1)
{
  return _[a1 tagName];
}

id RDEARCWordPartGetFrequency(void *a1)
{
  return [a1 frequency];
}

id RDEARCWordPartGetPronunciations(void *a1)
{
  return _[a1 pronunciations];
}

id RDEARCUserProfileCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return [objc_alloc((Class)_EARUserProfileBuilder) initWithConfiguration:a1 language:a2 sdapiOverrides:a3 generalVoc:a4 emptyVoc:a5 pgVoc:a6 lexiconEnh:a7 tokenEnh:a8 paramsetHolder:a9];
}

id RDEARCUserProfileAddWord(void *a1, const char *a2, uint64_t a3)
{
  return [a1 addWordWithParts:a2 templateName:a3];
}

id RDEARCUserProfileRemoveAllWords(void *a1)
{
  return _[a1 removeAllWords];
}

uint64_t RDEARCUserProfileCopyDataProfile(void *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t RDEARCUserProfileCopyPronunciationsForOrthography(void *a1, uint64_t a2)
{
  return objc_claimAutoreleasedReturnValue();
}

id RDEARCUserProfileReadDataProfile(void *a1, const char *a2)
{
  return [a1 readUserProfile:a2];
}

uint64_t RDEARCUserProfileCopySanitizedString(void *a1, uint64_t a2)
{
  return objc_claimAutoreleasedReturnValue();
}

id RDEARCUserProfileSignalEndOfUserData(void *a1)
{
  return _[a1 signalEndOfUserData];
}

id RDEARCCommandTaggerCreate(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc((Class)_EARCommandTagger);
  return _[v4 initWithConfiguration:a1 usage:a2];
}

id RDEARCCommandTaggingGetCommandId(void *a1)
{
  return _[a1 commandId];
}

id RDEARCCommandTaggingGetTagSequence(void *a1)
{
  return _[a1 tagSequence];
}

id RDEARCCommandTaggingTokensForTag(void *a1, uint64_t a2)
{
  return _[a1 tokensForTag:a2];
}

id RDEARCCCommandTaggingResultGetCommandTaggings(void *a1)
{
  return _[a1 commandTaggings];
}

uint64_t RDEARCCommandTaggerCreateCommandTaggingResults(void *a1, uint64_t a2, uint64_t a3)
{
  return objc_claimAutoreleasedReturnValue();
}

id RDEARCCommandTaggerGetParameterTagForIndex(void *a1, unsigned int a2)
{
  return _[a1 parameterTagForIndex:a2];
}

id RDEARCCommandTaggerGetCommandPhraseForIndex(void *a1, unsigned int a2)
{
  return _[a1 commandPhraseTagForIndex:a2];
}

id RDEARCCommandTaggerIsParameterTag(void *a1, uint64_t a2)
{
  return [a1 isParameterTag:a2];
}

id RDEARCCommandTaggerIsCommandPhraseTag(void *a1, uint64_t a2)
{
  return [a1 isCommandPhraseTag:a2];
}

void RDTimer::RDTimer(RDTimer *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = dispatch_queue_create("RDTimer", 0);
}

{
  *((void *)this + 1) = 0;
  *(void *)this = dispatch_queue_create("RDTimer", 0);
}

void RDTimer::~RDTimer(dispatch_object_t *this)
{
  dispatch_release(*this);
  if (this[1])
  {
    v2 = *this;
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_100006F08;
    block[3] = &unk_1000EDCD8;
    block[4] = this;
    dispatch_async(v2, block);
    dispatch_release(this[1]);
  }
}

void RDTimer::cancelTimer(NSObject **this)
{
  id v1 = *this;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006F08;
  block[3] = &unk_1000EDCD8;
  block[4] = this;
  dispatch_async(v1, block);
}

void *RDTimer::setTimerForNumMilliSecs(NSObject **a1, __int16 a2, __int16 a3, uint64_t a4)
{
  id v4 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_100006CE0;
  block[3] = &unk_1000EDCA8;
  block[4] = a1;
  __int16 v8 = a2;
  __int16 v9 = a3;
  sub_10000704C((uint64_t)v7, a4);
  dispatch_async(v4, block);
  return sub_100006FC8(v7);
}

void sub_100006CE0(uint64_t a1)
{
  id v1 = *(dispatch_queue_t **)(a1 + 32);
  if (v1[1])
  {
    v2 = RXOSLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Timer already running. Cannot schedule another task", v7, 2u);
    }
  }
  else
  {
    id v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *v1);
    v1[1] = v4;
    dispatch_time_t v5 = dispatch_time(0, 1000000 * *(unsigned __int16 *)(a1 + 72));
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 1000000 * *(unsigned __int16 *)(a1 + 74));
    id v6 = v1[1];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120;
    handler[2] = sub_100006E50;
    handler[3] = &unk_1000EDC78;
    handler[4] = v1;
    sub_10000704C((uint64_t)v9, a1 + 40);
    dispatch_source_set_event_handler(v6, handler);
    dispatch_resume(v1[1]);
    sub_100006FC8(v9);
  }
}

uint64_t sub_100006E50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = RXOSLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "RDTimer fired: event-handler called", v6, 2u);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    sub_100006F40();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  *(void *)(v2 + 8) = 0;
  return result;
}

uint64_t sub_100006EF4(uint64_t a1, uint64_t a2)
{
  return sub_10000704C(a1 + 40, a2 + 40);
}

void *sub_100006F00(uint64_t a1)
{
  return sub_100006FC8((void *)(a1 + 40));
}

void sub_100006F08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 8);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
  }
}

void sub_100006F40()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_1000EDD20;
}

void sub_100006F90(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

void *sub_100006FC8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10000704C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

intptr_t sub_100007460(uint64_t a1, char a2, uint64_t a3)
{
  if (a3 || (a2 & 1) == 0)
  {
    id v6 = RXOSLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138412290;
      uint64_t v9 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error while starting CS engine %@", (uint8_t *)&v8, 0xCu);
    }
    char v5 = 0;
  }
  else
  {
    char v5 = 1;
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 8) = v5;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

intptr_t sub_100007694(uint64_t a1, char a2, uint64_t a3)
{
  if (a3 || (a2 & 1) == 0)
  {
    char v5 = RXOSLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      uint64_t v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error while stopping CS engine %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 8) = 0;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

id sub_1000078CC(uint64_t a1)
{
  int v2 = 3;
  while (1)
  {
    id result = [*(id *)(a1 + 32) startRecording];
    if (result) {
      break;
    }
    usleep(0xC350u);
    if (!--v2)
    {
      return +[AudioNotification sendLiveRecordingOffNotificationWithInterrupt:1];
    }
  }
  return result;
}

void RDQSRSoundSource::CreateFileSource(RDQSRSoundSource *this, const __CFURL *a2, void (*a3)(RDQSRSoundSource *), void (*a4)(RDQSRSoundSource *, const __int16 *, uint64_t))
{
  if (RXLogSound())
  {
    uint64_t v4 = RXOSLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "QSR : CreateFileSource\n", v5, 2u);
    }
  }
  operator new();
}

void sub_100007E08()
{
}

uint64_t RDQSRSoundSource::RDQSRSoundSource(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000EDD98;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  if (qword_1000FEAA0 != -1) {
    dispatch_once(&qword_1000FEAA0, &stru_1000EDDF8);
  }
  return a1;
}

void RDQSRSoundSource::CreateMixedSource(RDQSRSoundSource *this, void (*a2)(RDQSRSoundSource *, const __int16 *, uint64_t), void (*a3)(RDQSRSoundSource *))
{
  if (RXLogSound())
  {
    uint64_t v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "QSR : CreateMixedSource\n", v4, 2u);
    }
  }
  operator new();
}

void sub_100007F4C()
{
}

void RDQSRSoundSource::CreateCannedSource(RDQSRSoundSource *this, void *a2, void (*a3)(RDQSRSoundSource *, const __int16 *, uint64_t))
{
  if (RXLogSound())
  {
    uint64_t v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "QSR : CreateCannedSource\n", v4, 2u);
    }
  }
  operator new();
}

void RDQSRSoundSource::CreateLiveSource(RDQSRSoundSource *this, RDAudioObject *a2, void (*a3)(RDQSRSoundSource *, const __int16 *, uint64_t))
{
  if (RXLogSound())
  {
    uint64_t v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "QSR : CreateLiveSource\n", v4, 2u);
    }
  }
  operator new();
}

void sub_100008164()
{
}

uint64_t RDQSRSoundSource::AllowedFileTypes(RDQSRSoundSource *this)
{
  uint64_t outPropertyData = 0;
  UInt32 ioDataSize = 8;
  AudioFileGetGlobalInfo(0x61757469u, 0, 0, &ioDataSize, &outPropertyData);
  return outPropertyData;
}

void RDQSRSoundSource::RDQSRSoundSource(RDQSRSoundSource *this, void (*a2)(RDQSRSoundSource *, const __int16 *, uint64_t))
{
  *(void *)this = off_1000EDD98;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = a2;
  if (qword_1000FEAA0 != -1) {
    dispatch_once(&qword_1000FEAA0, &stru_1000EDDF8);
  }
}

void sub_100008244(id a1)
{
  uint64_t v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  if (!v1) {
    sub_1000C2AB0();
  }
  qword_1000FEAA8 = (uint64_t)dispatch_queue_create("RDAudioQueue", v1);
}

void RDQSRSoundSource::~RDQSRSoundSource(RDQSRSoundSource *this)
{
  *(void *)this = off_1000EDD98;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = off_1000EDD98;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = off_1000EDD98;
  *((void *)this + 2) = 0;
  operator delete();
}

uint64_t RDQSRSoundSource::OK(RDQSRSoundSource *this)
{
  return 1;
}

void RDQSRSoundSource::EndOfUtterance(RDQSRSoundSource *this)
{
  if (RXLogSound())
  {
    uint64_t v1 = RXOSLog();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SoundSource: EndOfUtterance", v2, 2u);
    }
  }
}

double RDQSRSoundSource::ClientFormat@<D0>(uint64_t a1@<X8>)
{
  double result = 16000.0;
  *(_OWORD *)a1 = xmmword_1000CA320;
  *(_OWORD *)(a1 + 16) = unk_1000CA330;
  *(void *)(a1 + 32) = 16;
  return result;
}

void RDQSRCannedSoundSource::RDQSRCannedSoundSource(RDQSRCannedSoundSource *this, void *a2, void (*a3)(RDQSRSoundSource *, const __int16 *, uint64_t))
{
  *(void *)this = off_1000EDD98;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = a3;
  if (qword_1000FEAA0 != -1) {
    dispatch_once(&qword_1000FEAA0, &stru_1000EDDF8);
  }
  *(void *)this = off_1000EDE28;
}

void RDQSRMixedSoundSource::RDQSRMixedSoundSource(RDQSRMixedSoundSource *this, void (*a2)(RDQSRSoundSource *, const __int16 *, uint64_t), void (*a3)(RDQSRSoundSource *), char a4)
{
  *(void *)this = off_1000EDD98;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = a2;
  if (qword_1000FEAA0 != -1) {
    dispatch_once(&qword_1000FEAA0, &stru_1000EDDF8);
  }
  *(void *)this = off_1000EDE78;
  *((_WORD *)this + 16) = 0;
  *((void *)this + 5) = a3;
  *((_WORD *)this + 24) = 257;
  *((unsigned char *)this + 50) = a4;
  if ((a4 & 1) == 0) {
    atomic_store(0, (unsigned __int8 *)this + 48);
  }
  CFURLRef v7 = RDCopyCacheURL();
  if (v7)
  {
    *((void *)this + 7) = CFURLCreateCopyAppendingPathComponent(0, v7, @"synthesizedText.caf", 0);
    CFRelease(v7);
  }
}

void sub_10000851C(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  v1[2] = 0;
  _Unwind_Resume(a1);
}

void RDQSRMixedSoundSource::SynthesizeText(RDQSRMixedSoundSource *this, const __CFString *a2, const __CFString *a3)
{
  if (*((unsigned char *)this + 64))
  {
    RDString::RDString((RDString *)__p, a2, 0);
    id v6 = RXOSLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      CFURLRef v7 = __p;
      if (v10 < 0) {
        CFURLRef v7 = (void **)__p[0];
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Synthesizing text %s", (uint8_t *)&buf, 0xCu);
    }
    *(void *)&long long buf = this;
    *((void *)&buf + 1) = RDQSRMixedSoundSource::DidFinishSpeakingCallback;
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, a3);
    v12.length = CFStringGetLength(MutableCopy);
    v12.location = 0;
    CFStringFindAndReplace(MutableCopy, @"_", @"-", v12, 0);
    RDSpeakStringToURL((uint64_t)a2, (uint64_t)MutableCopy, *((void *)this + 7), (uint64_t)&buf);
    CFRelease(MutableCopy);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100008674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RDQSRMixedSoundSource::DidFinishSpeakingCallback(CFURLRef *this, void *a2)
{
  uint64_t v3 = RXOSLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Finished Synthesizing, sending the audio samples", v4, 2u);
  }
  RDQSRMixedSoundSource::DidFinishSpeaking((RDQSRMixedSoundSource *)this, this[7]);
}

void RDQSRMixedSoundSource::ReadAudioFile(RDQSRMixedSoundSource *this, const __CFString *a2)
{
  CFURLRef v4 = RDCopyCacheURL();
  if (v4)
  {
    CFURLRef v5 = v4;
    CFURLRef v6 = CFURLCreateCopyAppendingPathComponent(0, v4, a2, 0);
    if (v6)
    {
      CFURLRef v7 = v6;
      uint64_t v8 = RXOSLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 138412290;
        CFStringRef v10 = a2;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Reading audio file %@", (uint8_t *)&v9, 0xCu);
      }
      RDQSRMixedSoundSource::DidFinishSpeaking(this, v7);
      CFRelease(v7);
    }
    CFRelease(v5);
  }
}

void RDQSRMixedSoundSource::DidFinishSpeaking(RDQSRMixedSoundSource *this, CFURLRef inURL)
{
  if (ExtAudioFileOpenURL(inURL, (ExtAudioFileRef *)this + 3))
  {
    atomic_store(0, (unsigned __int8 *)this + 32);
  }
  else
  {
    v3[0] = xmmword_1000CA320;
    v3[1] = unk_1000CA330;
    uint64_t v4 = 16;
    ExtAudioFileSetProperty(*((ExtAudioFileRef *)this + 3), 0x63666D74u, 0x28u, v3);
    atomic_store(1u, (unsigned __int8 *)this + 49);
    atomic_store(1u, (unsigned __int8 *)this + 32);
    RDQSRMixedSoundSource::ReadAudio(this);
  }
}

void RDQSRMixedSoundSource::ReadAudio(RDQSRMixedSoundSource *this)
{
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100008CB0;
  block[3] = &unk_1000EDF18;
  block[4] = this;
  dispatch_async(global_queue, block);
}

void RDQSRMixedSoundSource::SendNoise(RDQSRMixedSoundSource *this)
{
  dispatch_time_t v2 = dispatch_time(0, 100000000);
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000089B8;
  block[3] = &unk_1000EDED8;
  block[4] = this;
  dispatch_after(v2, global_queue, block);
}

void sub_1000089B8(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 32);
  unsigned __int8 v2 = atomic_load(v1 + 49);
  if (v2)
  {
    atomic_store(0, v1 + 48);
  }
  else
  {
    sub_100008BB0(&v12);
    std::random_device::result_type v3 = std::random_device::operator()(&v12);
    v10[0] = v3;
    for (uint64_t i = 1; i != 624; ++i)
    {
      std::random_device::result_type v3 = i + 1812433253 * (v3 ^ (v3 >> 30));
      v10[i] = v3;
    }
    uint64_t v5 = 0;
    uint64_t v11 = 0;
    long long v8 = xmmword_1000CA310;
    char v9 = 0;
    do
    {
      *(_WORD *)&v15[v5] = (int)(sub_100009E4C((uint64_t)&v8, (uint64_t)v10, (double *)&v8) * 32765.0);
      v5 += 2;
    }
    while (v5 != 1024);
    if (RXLogSound() && RXVeryVerbose())
    {
      CFURLRef v6 = RXOSLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v14 = 512;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Queueing %zu frames\n", buf, 0xCu);
      }
    }
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 0x40000000;
    v7[2] = sub_100008C24;
    v7[3] = &unk_1000EDEB8;
    void v7[4] = v1;
    v7[5] = v15;
    dispatch_sync((dispatch_queue_t)qword_1000FEAA8, v7);
    RDQSRMixedSoundSource::SendNoise((RDQSRMixedSoundSource *)v1);
    std::random_device::~random_device(&v12);
  }
}

void sub_100008B88(_Unwind_Exception *a1)
{
}

std::random_device *sub_100008BB0(std::random_device *a1)
{
  sub_100009CF0(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_100008C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100008C24(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = result;
    std::random_device::result_type v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "noise samples", v4, 2u);
    }
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16))(v1, *(void *)(v2 + 40), 512);
  }
  return result;
}

void sub_100008CB0()
{
  uint64_t v0 = *(void *)(__chkstk_darwin() + 32);
  UInt32 ioNumberFrames = 2048;
  *(&ioData.mNumberBuffers + 1) = 0;
  ioData.mNumberBuffers = 1;
  *(void *)&ioData.mBuffers[0].mNumberChannels = 0x100000000001;
  ioData.mBuffers[0].mData = v14;
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(v0 + 33));
  if ((v1 & 1) != 0 || ExtAudioFileRead(*(ExtAudioFileRef *)(v0 + 24), &ioNumberFrames, &ioData)) {
    UInt32 ioNumberFrames = 0;
  }
  if (RXLogSound())
  {
    if (RXVeryVerbose())
    {
      uint64_t v2 = RXOSLog();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134218240;
        uint64_t v11 = v0;
        __int16 v12 = 1024;
        UInt32 v13 = ioNumberFrames;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%p Queueing %u frames\n", buf, 0x12u);
      }
    }
  }
  if (ioNumberFrames)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_100008EAC;
    block[3] = &unk_1000EDEF8;
    block[4] = v0;
    void block[5] = v14;
    UInt32 v7 = ioNumberFrames;
    dispatch_sync((dispatch_queue_t)qword_1000FEAA8, block);
    RDQSRMixedSoundSource::ReadAudio((RDQSRMixedSoundSource *)v0);
  }
  else
  {
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v0 + 32));
    if (v3)
    {
      ExtAudioFileDispose(*(ExtAudioFileRef *)(v0 + 24));
      atomic_store(0, (unsigned __int8 *)(v0 + 32));
      if (!*(unsigned char *)(v0 + 50))
      {
        uint64_t v4 = *(void (**)(uint64_t))(v0 + 40);
        if (v4) {
          v4(v0);
        }
      }
    }
    if (*(unsigned char *)(v0 + 50))
    {
      atomic_store(0, (unsigned __int8 *)(v0 + 49));
      unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v0 + 48));
      if ((v5 & 1) == 0)
      {
        atomic_store(1u, (unsigned __int8 *)(v0 + 48));
        RDQSRMixedSoundSource::SendNoise((RDQSRMixedSoundSource *)v0);
      }
    }
  }
}

uint64_t sub_100008EAC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = result;
    unsigned __int8 v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "audio samples", v4, 2u);
    }
    return (*(uint64_t (**)(uint64_t, void, void))(v1 + 16))(v1, *(void *)(v2 + 40), *(unsigned int *)(v2 + 48));
  }
  return result;
}

void RDQSRMixedSoundSource::SetMicOn(RDQSRMixedSoundSource *this)
{
  if (RXLogSound())
  {
    uint64_t v2 = RXOSLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Mixed : SetMicOn\n", v4, 2u);
    }
  }
  *((unsigned char *)this + 64) = 1;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 32);
  if ((v3 & 1) == 0)
  {
    atomic_store(0, (unsigned __int8 *)this + 33);
    if (*((unsigned char *)this + 50))
    {
      atomic_store(0, (unsigned __int8 *)this + 49);
      RDQSRMixedSoundSource::SendNoise(this);
    }
  }
}

void RDQSRMixedSoundSource::SetMicOff(RDQSRMixedSoundSource *this)
{
  if (RXLogSound())
  {
    uint64_t v2 = RXOSLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned __int8 v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Mixed : SetMicOff\n", v3, 2u);
    }
  }
  if (*((unsigned char *)this + 64))
  {
    atomic_store(1u, (unsigned __int8 *)this + 49);
    atomic_store(1u, (unsigned __int8 *)this + 33);
    *((unsigned char *)this + 64) = 0;
  }
}

void RDQSRMixedSoundSource::~RDQSRMixedSoundSource(RDQSRMixedSoundSource *this)
{
  *(void *)this = off_1000EDE78;
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v5 = 0;
  CFURLRef v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  do
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_100009244;
    block[3] = &unk_1000EDF40;
    block[4] = &v5;
    void block[5] = this;
    dispatch_sync((dispatch_queue_t)qword_1000FEAA8, block);
    if (*((unsigned char *)v6 + 24)) {
      break;
    }
    usleep(0x1388u);
  }
  while (!*((unsigned char *)v6 + 24));
  _Block_object_dispose(&v5, 8);
  uint64_t v5 = 0;
  CFURLRef v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  do
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 0x40000000;
    _OWORD v3[2] = sub_100009270;
    v3[3] = &unk_1000EDF68;
    v3[4] = &v5;
    v3[5] = this;
    dispatch_sync((dispatch_queue_t)qword_1000FEAA8, v3);
    if (*((unsigned char *)v6 + 24)) {
      break;
    }
    usleep(0x1388u);
  }
  while (!*((unsigned char *)v6 + 24));
  _Block_object_dispose(&v5, 8);
  *(void *)this = off_1000EDD98;
  *((void *)this + 2) = 0;
}

{
  uint64_t vars8;

  RDQSRMixedSoundSource::~RDQSRMixedSoundSource(this);
  operator delete();
}

void sub_100009230(void *a1)
{
}

uint64_t sub_100009244(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  atomic_store(1u, (unsigned __int8 *)(v1 + 49));
  LOBYTE(v1) = atomic_load((unsigned __int8 *)(v1 + 48));
  if ((v1 & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

uint64_t sub_100009270(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  atomic_store(1u, (unsigned __int8 *)(v1 + 33));
  LOBYTE(v1) = atomic_load((unsigned __int8 *)(v1 + 32));
  if ((v1 & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void RDQSRFileSoundSource::RDQSRFileSoundSource(RDQSRFileSoundSource *this, CFURLRef inURL, void (*a3)(RDQSRSoundSource *), void (*a4)(RDQSRSoundSource *, const __int16 *, uint64_t))
{
  *(void *)this = off_1000EDD98;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = a4;
  if (qword_1000FEAA0 != -1) {
    dispatch_once(&qword_1000FEAA0, &stru_1000EDDF8);
  }
  *(void *)this = off_1000EDF98;
  *((_WORD *)this + 16) = 1;
  *((void *)this + 5) = a3;
  if (ExtAudioFileOpenURL(inURL, (ExtAudioFileRef *)this + 3))
  {
    *((unsigned char *)this + 32) = 0;
  }
  else
  {
    v7[0] = xmmword_1000CA320;
    v7[1] = unk_1000CA330;
    uint64_t v8 = 16;
    ExtAudioFileSetProperty(*((ExtAudioFileRef *)this + 3), 0x63666D74u, 0x28u, v7);
  }
}

void sub_1000093D8(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  v1[2] = 0;
  _Unwind_Resume(a1);
}

void RDQSRFileSoundSource::~RDQSRFileSoundSource(RDQSRFileSoundSource *this)
{
  *(void *)this = off_1000EDF98;
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  char v6 = 0;
  do
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 0x40000000;
    v2[2] = sub_100009510;
    v2[3] = &unk_1000EDFE0;
    v2[4] = &v3;
    v2[5] = this;
    dispatch_sync((dispatch_queue_t)qword_1000FEAA8, v2);
    if (*((unsigned char *)v4 + 24)) {
      break;
    }
    usleep(0x1388u);
  }
  while (!*((unsigned char *)v4 + 24));
  _Block_object_dispose(&v3, 8);
  *(void *)this = off_1000EDD98;
  *((void *)this + 2) = 0;
}

{
  uint64_t vars8;

  RDQSRFileSoundSource::~RDQSRFileSoundSource(this);
  operator delete();
}

uint64_t sub_100009510(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  *(unsigned char *)(v1 + 33) = 1;
  if (!*(unsigned char *)(v1 + 32)) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

BOOL RDQSRFileSoundSource::OK(RDQSRFileSoundSource *this)
{
  return *((void *)this + 3) != 0;
}

void RDQSRFileSoundSource::SetMicOn(RDQSRFileSoundSource *this)
{
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100009608;
  block[3] = &unk_1000EE020;
  block[4] = this;
  dispatch_async(global_queue, block);
}

void sub_100009608(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  UInt32 ioNumberFrames = 2048;
  *(&ioData.mNumberBuffers + 1) = 0;
  ioData.mNumberBuffers = 1;
  *(void *)&ioData.mBuffers[0].mNumberChannels = 0x100000000001;
  ioData.mBuffers[0].mData = v12;
  if (*(unsigned char *)(v1 + 33) || ExtAudioFileRead(*(ExtAudioFileRef *)(v1 + 24), &ioNumberFrames, &ioData)) {
    UInt32 ioNumberFrames = 0;
  }
  if (RXLogSound())
  {
    if (RXVeryVerbose())
    {
      uint64_t v2 = RXOSLog();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134218240;
        uint64_t v9 = v1;
        __int16 v10 = 1024;
        UInt32 v11 = ioNumberFrames;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%p Queueing %u frames\n", buf, 0x12u);
      }
    }
  }
  if (ioNumberFrames)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_1000097E8;
    block[3] = &unk_1000EE000;
    block[4] = v1;
    void block[5] = v12;
    UInt32 v5 = ioNumberFrames;
    dispatch_sync((dispatch_queue_t)qword_1000FEAA8, block);
    (**(void (***)(uint64_t))v1)(v1);
  }
  else if (*(unsigned char *)(v1 + 32))
  {
    ExtAudioFileDispose(*(ExtAudioFileRef *)(v1 + 24));
    uint64_t v3 = *(void (**)(uint64_t))(v1 + 40);
    if (v3) {
      v3(v1);
    }
    *(unsigned char *)(v1 + 32) = 0;
  }
}

uint64_t sub_1000097E8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v2 = *(uint64_t (**)(void))(result + 16);
  if (v2) {
    return v2();
  }
  return result;
}

void RDQSRFileSoundSource::SetMicOff(RDQSRFileSoundSource *this)
{
  if (RXLogSound())
  {
    uint64_t v1 = RXOSLog();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "AudioFile : SetMicOff", v2, 2u);
    }
  }
}

void RDQSRLiveSoundSource::RDQSRLiveSoundSource(RDQSRLiveSoundSource *this, RDAudioObject *a2, void (*a3)(RDQSRSoundSource *, const __int16 *, uint64_t))
{
  *(void *)this = off_1000EDD98;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = a3;
  if (qword_1000FEAA0 != -1) {
    dispatch_once(&qword_1000FEAA0, &stru_1000EDDF8);
  }
  *(void *)this = off_1000EE050;
  RDSoundInput::CreateSoundInput();
}

void sub_10000998C(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  v1[2] = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_100009998(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v2 = *(uint64_t (**)(void))(result + 16);
  if (v2) {
    return v2();
  }
  return result;
}

void RDQSRLiveSoundSource::~RDQSRLiveSoundSource(RDQSRLiveSoundSource *this)
{
  *(void *)this = off_1000EE050;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = off_1000EDD98;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

{
  uint64_t vars8;

  RDQSRLiveSoundSource::~RDQSRLiveSoundSource(this);
  operator delete();
}

BOOL RDQSRLiveSoundSource::OK(RDQSRLiveSoundSource *this)
{
  return *((void *)this + 3) != 0;
}

uint64_t RDQSRLiveSoundSource::SetMicOn(RDQSRLiveSoundSource *this)
{
  if (RXLogSound())
  {
    uint64_t v2 = RXOSLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Live : SetMicOn", v4, 2u);
    }
  }
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
    if ((result & 1) == 0)
    {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
      *((unsigned char *)this + 32) = result;
    }
  }
  return result;
}

uint64_t RDQSRLiveSoundSource::SetMicOff(RDQSRLiveSoundSource *this)
{
  if (RXLogSound())
  {
    uint64_t v2 = RXOSLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Live : SetMicOff", v4, 2u);
    }
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
  if (result) {
    return (*(uint64_t (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3));
  }
  return result;
}

uint64_t RDQSRLiveSoundSource::EndOfUtterance(RDQSRLiveSoundSource *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 3) + 24);
    return v3();
  }
  return result;
}

void *sub_100009C98(void *result)
{
  *uint64_t result = off_1000EDD98;
  result[2] = 0;
  return result;
}

void sub_100009CBC(void *a1)
{
  *a1 = off_1000EDD98;
  a1[2] = 0;
  operator delete();
}

void *sub_100009CF0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100009DA4();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    char v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    char v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_100009DA4()
{
}

void sub_100009DBC(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100009E18(exception, a1);
}

void sub_100009E04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100009E18(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

double sub_100009E4C(uint64_t a1, uint64_t a2, double *a3)
{
  if (*(unsigned char *)(a1 + 24))
  {
    *(unsigned char *)(a1 + 24) = 0;
    double v5 = *(double *)(a1 + 16);
  }
  else
  {
    do
    {
      do
      {
        double v7 = (double)sub_100009F68(a2);
        double v8 = (v7 + (double)sub_100009F68(a2) * 4294967300.0) * 5.42101086e-20 * 2.0 + -1.0;
        double v9 = (double)sub_100009F68(a2);
        double v10 = (v9 + (double)sub_100009F68(a2) * 4294967300.0) * 5.42101086e-20 * 2.0 + -1.0;
        double v11 = v10 * v10 + v8 * v8;
      }
      while (v11 > 1.0);
    }
    while (v11 == 0.0);
    double v12 = sqrt(log(v10 * v10 + v8 * v8) * -2.0 / v11);
    *(double *)(a1 + 16) = v10 * v12;
    *(unsigned char *)(a1 + 24) = 1;
    double v5 = v8 * v12;
  }
  return *a3 + v5 * a3[1];
}

uint64_t sub_100009F68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (v1 << 15) & 0xEFC60000 ^ v1 ^ (((v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

void RDAudioObject::RDAudioObject(RDAudioObject *this, xpc_object_t object)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  if (object)
  {
    if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_string)
    {
      *(void *)this = _CFXPCCreateCFObjectFromXPCObject();
    }
    else if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_uint64)
    {
      *((_DWORD *)this + 2) = xpc_uint64_get_value(object);
    }
  }
}

uint64_t RDAudioObject::RDAudioObject(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (v3) {
    CFRetain(v3);
  }
  return a1;
}

{
  const void *v3;

  unsigned int v3 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (v3) {
    CFRetain(v3);
  }
  return a1;
}

void RDAudioObject::~RDAudioObject(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t RDAudioObject::ObjectID(RDAudioObject *this)
{
  return 0;
}

void RDSoundInput::CreateSoundInput()
{
}

void sub_10000A1A4()
{
}

uint64_t RDSoundInput::RDSoundInput(uint64_t a1, uint64_t a2, char a3, int a4)
{
  double v7 = *(const void **)a2;
  *(void *)a1 = off_1000EE130;
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8);
  if (v7) {
    CFRetain(v7);
  }
  *(unsigned char *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = a4;
  return a1;
}

void sub_10000A278(id a1)
{
  qword_1000FEAB8 = objc_alloc_init(RDSpeechSynthesis);
}

void sub_10000A484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000A49C(uint64_t a1, uint64_t a2)
{
}

void sub_10000A4AC(uint64_t a1)
{
}

void sub_10000A4B8(uint64_t a1, void *a2)
{
  if (a2)
  {
    if ([a2 frameLength])
    {
      size_t v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      if (!v4)
      {
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend(objc_alloc((Class)AVAudioFile), "initForWriting:settings:commonFormat:interleaved:error:", *(void *)(a1 + 32), objc_msgSend(objc_msgSend(a2, "format"), "settings"), objc_msgSend(objc_msgSend(a2, "format"), "commonFormat"), objc_msgSend(objc_msgSend(a2, "format"), "isInterleaved"), 0);
        size_t v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      }
      _[v4 writeFromBuffer:a2 error:0];
    }
  }
  else
  {
    NSLog(@"TTS Error initializing buffer");
  }
}

id RDSpeakStringToURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = +[RDSpeechSynthesis sharedManager];
  return _[v8 speakString:a1 toURL:a3 withLanguageCode:a2 withCallback:a4];
}

void sub_10000A6DC(id a1)
{
  qword_1000FEAC0 = (uint64_t)objc_alloc_init((Class)CARSessionStatus);
}

void sub_10000A850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000A868(uint64_t a1, uint64_t a2)
{
}

void sub_10000A878(uint64_t a1)
{
}

Class sub_10000A884(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_1000FEAD8)
  {
    v3[1] = _NSConcreteStackBlock;
    _OWORD v3[2] = (void *)3221225472;
    v3[3] = sub_10000A9B0;
    v3[4] = &unk_1000EE210;
    v3[5] = v3;
    long long v4 = off_1000EE1F8;
    uint64_t v5 = 0;
    qword_1000FEAD8 = _sl_dlopen();
  }
  if (!qword_1000FEAD8) {
    sub_1000C2AE4(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("AXSystemAppServer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_1000C2B4C();
  }
  qword_1000FEAD0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t sub_10000A9B0()
{
  uint64_t result = _sl_dlopen();
  qword_1000FEAD8 = result;
  return result;
}

id sub_10000B26C(uint64_t a1)
{
  return [*(id *)(a1 + 32) startRecording:0];
}

void sub_10000B7C8(uint64_t a1, uint64_t a2)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000B884;
  block[3] = &unk_1000EE238;
  objc_copyWeak(&v6, &location);
  block[4] = a2;
  dispatch_async(v4, block);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

id sub_10000B884(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  return _[Weak _appendPCMBuffer:v3];
}

id sub_10000BAC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _drainAndClearAudioConverter];
}

void sub_10000BF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000BF5C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v3 + 24))
  {
    uint64_t result = 0;
    *a3 = 1;
  }
  else
  {
    *(unsigned char *)(v3 + 24) = 1;
    *a3 = 0;
    return *(void *)(a1 + 32);
  }
  return result;
}

AVAudioBuffer *__cdecl sub_10000C160(id a1, unsigned int a2, int64_t *a3)
{
  *a3 = 2;
  return 0;
}

void sub_10000CE64(uint64_t a1, uint64_t a2)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000CF20;
  block[3] = &unk_1000EE238;
  objc_copyWeak(&v6, &location);
  block[4] = a2;
  dispatch_async(v4, block);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

id sub_10000CF20(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  return _[Weak _appendPCMBuffer:v3];
}

id sub_10000D0E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _drainAndClearAudioConverter];
}

void sub_10000D250(id a1)
{
  uint64_t v1 = RXOSLog();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "wait for the async blocks", v2, 2u);
  }
}

void sub_10000D5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000D610(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v3 + 24))
  {
    uint64_t result = 0;
    *a3 = 1;
  }
  else
  {
    *(unsigned char *)(v3 + 24) = 1;
    *a3 = 0;
    return *(void *)(a1 + 32);
  }
  return result;
}

AVAudioBuffer *__cdecl sub_10000D814(id a1, unsigned int a2, int64_t *a3)
{
  *a3 = 2;
  return 0;
}

void sub_10000DA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void sub_10000DA50(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v3 = AFPreferencesAssistantEnabled();
    long long v4 = RXOSLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v5 = @"Disabled";
      if (v3) {
        CFStringRef v5 = @"Enabled";
      }
      int v6 = 138543362;
      CFStringRef v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Siri Enabled = %{public}@", (uint8_t *)&v6, 0xCu);
    }
    [a2 _didReceiveSiriSettingChanged:v3 != 0];
  }
}

id sub_10000DF04(uint64_t a1)
{
  return [*(id *)(a1 + 32) stopRecording];
}

id sub_10000E0C8(uint64_t a1)
{
  [*(id *)(a1 + 32) stopRecording];
  return +[AudioNotification sendLiveRecordingOffNotificationWithInterrupt:1];
}

id sub_10000E100(uint64_t a1)
{
  [*(id *)(a1 + 32) startRecording:0];
  return +[AudioNotification sendLiveRecordingOnNotification];
}

id sub_10000E318(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isRecording];
  if (result)
  {
    int v3 = *(void **)(a1 + 32);
    return [v3 stopRecording];
  }
  return result;
}

id sub_10000E468(uint64_t a1)
{
  return [*(id *)(a1 + 32) startRecording:0];
}

id sub_10000E760(uint64_t a1)
{
  return [*(id *)(a1 + 32) stopRecording];
}

id sub_10000E768(uint64_t a1)
{
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No one listening, start AV", v4, 2u);
  }
  id result = [*(id *)(a1 + 32) startRecording:0];
  if ((result & 1) == 0) {
    return +[AudioNotification sendLiveRecordingOffNotificationWithInterrupt:1];
  }
  return result;
}

uint64_t RDQSRAudioFileLogger::openAudioFile(ExtAudioFileRef *outExtAudioFile, CFURLRef inURL, AudioStreamBasicDescription *a3, AudioFileTypeID inFileType)
{
  OSStatus v7 = ExtAudioFileCreateWithURL(inURL, inFileType, a3, 0, 1u, outExtAudioFile);
  uint64_t v8 = (__int16)v7;
  if (v7 << 16)
  {
    double v9 = RXOSLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = 138543618;
      CFURLRef v12 = inURL;
      __int16 v13 = 1024;
      int v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error creating output file %{public}@, err: %{errno}d", (uint8_t *)&v11, 0x12u);
    }
  }
  else
  {
    ExtAudioFileSetProperty(*outExtAudioFile, 0x63666D74u, 0x28u, a3);
    CFURLSetResourcePropertyForKey(inURL, kCFURLFileProtectionKey, kCFURLFileProtectionCompleteUntilFirstUserAuthentication, 0);
  }
  return v8;
}

uint64_t RDQSRAudioFileLogger::addSamples(ExtAudioFileRef *this, __int16 *a2, uint64_t inNumberFrames)
{
  if (inNumberFrames < 1)
  {
    LOWORD(v3) = 0;
  }
  else
  {
    *(&ioData.mNumberBuffers + 1) = 0;
    ioData.mNumberBuffers = 1;
    ioData.mBuffers[0].mNumberChannels = 1;
    ioData.mBuffers[0].mDataByteSize = 2 * inNumberFrames;
    ioData.mBuffers[0].mData = a2;
    OSStatus v3 = ExtAudioFileWrite(*this, inNumberFrames, &ioData);
    if (v3)
    {
      long long v4 = RXOSLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        OSStatus v8 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "RDQSRAudioFileLogger::addSamples Error writing to output wav file,err: %{errno}d", buf, 8u);
      }
    }
  }
  return (__int16)v3;
}

void RDQSRAudioFileLogger::~RDQSRAudioFileLogger(OpaqueExtAudioFile **this)
{
  uint64_t v1 = *this;
  if (v1) {
    ExtAudioFileDispose(v1);
  }
}

uint64_t RDQSRAudioFileLogger::audioFileLoggerQueue(RDQSRAudioFileLogger *this)
{
  if (qword_1000FEAE0 != -1) {
    dispatch_once(&qword_1000FEAE0, &stru_1000EE368);
  }
  return qword_1000FEAE8;
}

void sub_10000EA98(id a1)
{
  qword_1000FEAE8 = (uint64_t)dispatch_queue_create("RDQSRLoggerQueue", 0);
}

const __CFURL *RDQSRAudioFileLogger::createCacheURLWithFilename(const __CFString *this, const __CFString *a2)
{
  CFURLRef result = RDCopyCacheURL();
  if (result)
  {
    CFURLRef v4 = result;
    CFURLRef v5 = CFURLCreateCopyAppendingPathComponent(0, result, this, 1u);
    CFRelease(v4);
    return v5;
  }
  return result;
}

double RDQSRAudioFileLogger::aiffFormat@<D0>(uint64_t a1@<X8>)
{
  double result = 16000.0;
  *(_OWORD *)a1 = xmmword_1000CA3F0;
  *(_OWORD *)(a1 + 16) = unk_1000CA400;
  *(void *)(a1 + 32) = 16;
  return result;
}

double RDQSRAudioFileLogger::wavFormat@<D0>(uint64_t a1@<X8>)
{
  double result = 16000.0;
  *(_OWORD *)a1 = xmmword_1000CA418;
  *(_OWORD *)(a1 + 16) = unk_1000CA428;
  *(void *)(a1 + 32) = 16;
  return result;
}

void RDQSRCircularBuffer<short>::RDQSRCircularBuffer(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 8) = a2;
  operator new[]();
}

{
  *(_DWORD *)(a1 + 8) = a2;
  operator new[]();
}

uint64_t RDQSRCircularBuffer<short>::reset(uint64_t result)
{
  *(void *)(result + 20) = 0;
  *(void *)(result + 12) = 0;
  return result;
}

void *RDQSRCircularBuffer<short>::write(uint64_t a1, char *__src, unsigned int a3)
{
  CFURLRef v4 = __src;
  size_t v6 = 2 * a3;
  uint64_t v7 = *(unsigned int *)(a1 + 12);
  unsigned int v8 = *(_DWORD *)(a1 + 8) - v7;
  if (v8 >= a3)
  {
    double v10 = (void *)(*(void *)a1 + 2 * v7);
  }
  else
  {
    size_t v9 = v6 - 2 * v8;
    memcpy((void *)(*(void *)a1 + 2 * v7), __src, 2 * v8);
    double v10 = *(void **)a1;
    __src = &v4[2 * v8];
    size_t v6 = v9;
  }
  double result = memcpy(v10, __src, v6);
  int v12 = *(_DWORD *)(a1 + 24);
  unsigned int v13 = (*(_DWORD *)(a1 + 12) + a3) % *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = v13;
  *(void *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 24) = v12 + a3;
  return result;
}

{
  return RDQSRCircularBuffer<short>::write(a1, __src, a3);
}

unint64_t RDQSRCircularBuffer<short>::read(uint64_t a1, unint64_t a2, char *__dst)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if ((v5 - *(_DWORD *)(a1 + 20)) >= a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = (v5 - *(_DWORD *)(a1 + 20));
  }
  size_t v8 = (2 * v7);
  unint64_t v9 = (v5 - v6);
  if (v7 <= v9)
  {
    int v12 = (const void *)(*(void *)a1 + 2 * v6);
    int v11 = __dst;
  }
  else
  {
    size_t v10 = (v8 - 2 * v9);
    memcpy(__dst, (const void *)(*(void *)a1 + 2 * v6), (2 * v9));
    int v11 = &__dst[2 * v9];
    int v12 = *(const void **)a1;
    size_t v8 = v10;
  }
  memcpy(v11, v12, v8);
  unint64_t v13 = *(unsigned int *)(a1 + 8);
  unsigned int v14 = *(_DWORD *)(a1 + 20) + v7;
  if (v14 >= v13) {
    unsigned int v14 = 0;
  }
  *(_DWORD *)(a1 + 16) = (v7 + *(unsigned int *)(a1 + 16)) % v13;
  *(_DWORD *)(a1 + 20) = v14;
  return v7;
}

{
  return RDQSRCircularBuffer<short>::read(a1, a2, __dst);
}

uint64_t RDQSRCircularBuffer<short>::totalFramesWritten(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

{
  return RDQSRCircularBuffer<short>::totalFramesWritten(a1);
}

uint64_t RDQSRCircularBuffer<short>::seekBack(uint64_t result, unint64_t a2)
{
  *(_DWORD *)(result + 16) = ((*(_DWORD *)(result + 16) + *(_DWORD *)(result + 8))
                            + a2 / *(unsigned int *)(result + 8) * *(unsigned int *)(result + 8)
                            - a2)
                           % *(unsigned int *)(result + 8);
  return result;
}

{
  return RDQSRCircularBuffer<short>::seekBack(result, a2);
}

void *RDQSRCircularBuffer<short>::~RDQSRCircularBuffer(void *result)
{
  if (*result) {
    operator delete[]();
  }
  *double result = 0;
  return result;
}

{
  if (*result) {
    operator delete[]();
  }
  *double result = 0;
  return result;
}

RDSAPIObjCSpeechAnalyzer *RDSAPICSpeechAnalyzerCreate(uint64_t a1)
{
  uint64_t v1 = [[RDSAPIObjCSpeechAnalyzer alloc] initWithLocale:a1];
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFURLRef v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SpeechAnalyzerC initialized", v4, 2u);
  }

  return v1;
}

id RDSAPICSpeechAnalyzerCreateRecognitionBuffer(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5 = [a1 createRecognitionBufferWithDelegate:a5 task:a3];
  uint64_t v6 = RXOSLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SpeechAnalyzerC AudioBuffer initialized", v8, 2u);
  }

  return v5;
}

id RDSAPICSpeechAnalyzerAddAudioSamples(void *a1, uint64_t a2, uint64_t a3)
{
  return _[a1 addAudioSamples:a2 count:a3];
}

id RDSAPICSpeechAnalyzerTranscriptionTokenGetTokenName(void *a1)
{
  return _[a1 tokenName];
}

id RDSAPICSpeechAnalyzerTranscriptionTokenGetStart(void *a1)
{
  return _[a1 start];
}

id RDSAPICSpeechAnalyzerTranscriptionTokenGetEnd(void *a1)
{
  return _[a1 end];
}

id RDSAPICSpeechAnalyzerTranscriptionTokenGetSilenceStart(void *a1)
{
  return _[a1 silenceStart];
}

id RDSAPICSpeechAnalyzerTranscriptionTokenGetConfidence(void *a1)
{
  return _[a1 confidence];
}

id RDSAPICSpeechAnalyzerTranscriptionTokenHasSpaceAfter(void *a1)
{
  return [a1 hasSpaceAfter];
}

CFTypeRef RDSAPICSpeechAnalyzerCopyUserProfileData(void *a1)
{
  id v1 = [a1 getUserProfileData];
  return CFRetain(v1);
}

id RDSAPICSpeechAnalyzerUpdateUserProfileData(void *a1, uint64_t a2)
{
  return _[a1 setUserProfileData:a2];
}

id RDSAPICSpeechAnalyzerSetUserProfileData(void *a1, uint64_t a2)
{
  return _[a1 setUserProfileData:a2];
}

CFTypeRef RDSAPICSpeechAnalyzerCopyJitProfileData(void *a1)
{
  id v1 = [a1 getJitProfileData];
  return CFRetain(v1);
}

id RDSAPICSpeechAnalyzerSetJitProfileData(void *a1, uint64_t a2)
{
  return _[a1 setJitProfileData:a2];
}

id RDSAPICSpeechAnalyzerUpdateJitProfileData(void *a1, uint64_t a2)
{
  return _[a1 setJitProfileData:a2];
}

id RDSAPICSpeechAnalyzerSetLeftContextText(void *a1, uint64_t a2)
{
  return _[a1 setLeftContextText:a2];
}

id RDSAPICSpeechAnalyzerSetRecognitionReplacements(void *a1, const char *a2)
{
  return [a1 setRecognitionReplacements:a2];
}

void sub_10000F6F8(id a1)
{
  byte_1000FEAF1 = MGGetBoolAnswer();
}

id sub_100010014(uint64_t a1)
{
  return [*(id *)(a1 + 32) startRecording:0];
}

id sub_10001009C(uint64_t a1)
{
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Some client active did change  = %@", (uint8_t *)&v5, 0xCu);
  }
  return [*(id *)(a1 + 40) startRecording:0];
}

id sub_1000102EC(uint64_t a1)
{
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "RDSoundInputImpl:Call started ringing = %@", (uint8_t *)&v5, 0xCu);
  }
  return [*(id *)(a1 + 40) startRecording:1];
}

id sub_100010398(uint64_t a1)
{
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "RDSoundInputImpl:Call disconnected = %@", (uint8_t *)&v5, 0xCu);
  }
  return [*(id *)(a1 + 40) startRecording:0];
}

id RDAddSTActivityAttributionForAuditToken(_OWORD *a1)
{
  long long v1 = a1[1];
  v5[0] = *a1;
  v5[1] = v1;
  unint64_t v2 = +[STActivityAttribution attributionWithAuditToken:v5];
  if (qword_1000FEB08 != -1) {
    dispatch_once(&qword_1000FEB08, &stru_1000EE3F8);
  }
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000108FC;
  v4[3] = &unk_1000EE3D8;
  v4[4] = v2;
  return [(id)qword_1000FEB00 updateVolatileDataWithBlock:v4];
}

id sub_1000108FC(uint64_t a1, void *a2)
{
  return _[a2 addAudioRecordingAttribution:*(void *)(a1 + 32)];
}

id RDRemoveSTActivityAttributionForAuditToken(_OWORD *a1)
{
  long long v1 = a1[1];
  v5[0] = *a1;
  v5[1] = v1;
  unint64_t v2 = +[STActivityAttribution attributionWithAuditToken:v5];
  if (qword_1000FEB08 != -1) {
    dispatch_once(&qword_1000FEB08, &stru_1000EE3F8);
  }
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000109CC;
  v4[3] = &unk_1000EE3D8;
  v4[4] = v2;
  return [(id)qword_1000FEB00 updateVolatileDataWithBlock:v4];
}

id sub_1000109CC(uint64_t a1, void *a2)
{
  return _[a2 removeAudioRecordingAttribution:*(void *)(a1 + 32)];
}

void sub_1000109D8(id a1)
{
  qword_1000FEB00 = (uint64_t)objc_alloc_init((Class)STMediaStatusDomainPublisher);
}

BOOL rd_userprofile_util::doesSupportCategory(void *__s)
{
  long long v1 = __s;
  if (*((char *)__s + 23) < 0)
  {
    uint64_t v2 = __s[1];
    if (!v2) {
      return 0;
    }
    long long v1 = (void *)*__s;
  }
  else
  {
    uint64_t v2 = *((unsigned __int8 *)__s + 23);
    if (!*((unsigned char *)__s + 23)) {
      return 0;
    }
  }
  if (v2 >= 10)
  {
    uint64_t v3 = (char *)v1 + v2;
    CFURLRef v4 = v1;
    do
    {
      int v5 = (char *)memchr(v4, 66, v2 - 9);
      if (!v5) {
        break;
      }
      if (*(void *)v5 == 0x4C6E49746C697542 && *((_WORD *)v5 + 4) == 11853) {
        return v5 != v3 && v5 - (char *)v1 != -1;
      }
      CFURLRef v4 = v5 + 1;
      uint64_t v2 = v3 - (unsigned char *)v4;
    }
    while (v3 - (unsigned char *)v4 >= 10);
  }
  return 0;
}

uint64_t rd_userprofile_util::doesSupportProfile(void *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = a1[1];
    if (v5 == 20)
    {
      if (*(void *)*a1 != 0x4C6E49746C697542
        || *(void *)(*a1 + 8) != 0x776F646E69572E4DLL
        || *(_DWORD *)(*a1 + 16) != 1835365449)
      {
        uint64_t v5 = a1[1];
LABEL_35:
        if (v5 != 23) {
          return 0;
        }
        a1 = (void *)*a1;
        return *a1 == 0x4C6E49746C697542
            && a1[1] == 0x6D6F747375432E4DLL
            && *(void *)((char *)a1 + 15) == 0x646E616D6D6F436DLL;
      }
    }
    else
    {
      if (v5 != 31) {
        goto LABEL_35;
      }
      BOOL v6 = *(void *)*a1 == 0x4C6E49746C697542 && *(void *)(*a1 + 8) == 0x6863746977532E4DLL;
      BOOL v7 = v6 && *(void *)(*a1 + 16) == 0x6C707041656C6261;
      if (!v7 || *(void *)(*a1 + 23) != 0x6E6F69746163696CLL) {
        goto LABEL_35;
      }
    }
    return 1;
  }
  int v1 = *((unsigned __int8 *)a1 + 23);
  if (v1 == 20) {
    return *a1 == 0x4C6E49746C697542 && a1[1] == 0x776F646E69572E4DLL && *((_DWORD *)a1 + 4) == 1835365449;
  }
  if (v1 == 23) {
    return *a1 == 0x4C6E49746C697542
  }
        && a1[1] == 0x6D6F747375432E4DLL
        && *(void *)((char *)a1 + 15) == 0x646E616D6D6F436DLL;
  if (v1 != 31) {
    return 0;
  }
  return *a1 == 0x4C6E49746C697542
      && a1[1] == 0x6863746977532E4DLL
      && a1[2] == 0x6C707041656C6261
      && *(void *)((char *)a1 + 23) == 0x6E6F69746163696CLL;
}

__CFString *rd_userprofile_util::nonTerminalForProfile(unint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    unint64_t v5 = a1[1];
    if (v5 == 20)
    {
      if (*(void *)*a1 == 0x4C6E49746C697542
        && *(void *)(*a1 + 8) == 0x776F646E69572E4DLL
        && *(_DWORD *)(*a1 + 16) == 1835365449)
      {
        return kRDProfileNonTerminalInline[0];
      }
      unint64_t v5 = a1[1];
    }
    else if (v5 == 31)
    {
      BOOL v6 = *(void *)*a1 == 0x4C6E49746C697542 && *(void *)(*a1 + 8) == 0x6863746977532E4DLL;
      BOOL v7 = v6 && *(void *)(*a1 + 16) == 0x6C707041656C6261;
      if (v7 && *(void *)(*a1 + 23) == 0x6E6F69746163696CLL) {
        return kRDProfileNonTerminalAppName[0];
      }
    }
    if (v5 != 23) {
      return 0;
    }
    a1 = (unint64_t *)*a1;
    goto LABEL_40;
  }
  int v1 = *((unsigned __int8 *)a1 + 23);
  if (v1 == 20)
  {
    if (*a1 != 0x4C6E49746C697542 || a1[1] != 0x776F646E69572E4DLL || *((_DWORD *)a1 + 4) != 1835365449) {
      return 0;
    }
    return kRDProfileNonTerminalInline[0];
  }
  if (v1 != 23)
  {
    if (v1 != 31) {
      return 0;
    }
    BOOL v2 = *a1 == 0x4C6E49746C697542 && a1[1] == 0x6863746977532E4DLL;
    BOOL v3 = v2 && a1[2] == 0x6C707041656C6261;
    if (!v3 || *(unint64_t *)((char *)a1 + 23) != 0x6E6F69746163696CLL) {
      return 0;
    }
    return kRDProfileNonTerminalAppName[0];
  }
LABEL_40:
  unint64_t v11 = 0x4275696C74496E4CLL;
  unint64_t v12 = bswap64(*a1);
  if (v12 == 0x4275696C74496E4CLL
    && (unint64_t v11 = 0x4D2E437573746F6DLL, v12 = bswap64(a1[1]), v12 == 0x4D2E437573746F6DLL)
    && (unint64_t v11 = 0x6D436F6D6D616E64, v12 = bswap64(*(unint64_t *)((char *)a1 + 15)), v12 == 0x6D436F6D6D616E64))
  {
    int v13 = 0;
  }
  else if (v12 < v11)
  {
    int v13 = -1;
  }
  else
  {
    int v13 = 1;
  }
  if (v13) {
    return 0;
  }
  else {
    return kRDProfileNonTerminalUnknown[0];
  }
}

__CFString *rd_userprofile_util::wordTagForProfile(unint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    unint64_t v5 = a1[1];
    if (v5 == 20)
    {
      if (*(void *)*a1 == 0x4C6E49746C697542
        && *(void *)(*a1 + 8) == 0x776F646E69572E4DLL
        && *(_DWORD *)(*a1 + 16) == 1835365449)
      {
        return kRDProfileWordTagJustInTime[0];
      }
      unint64_t v5 = a1[1];
    }
    else if (v5 == 31)
    {
      BOOL v6 = *(void *)*a1 == 0x4C6E49746C697542 && *(void *)(*a1 + 8) == 0x6863746977532E4DLL;
      BOOL v7 = v6 && *(void *)(*a1 + 16) == 0x6C707041656C6261;
      if (v7 && *(void *)(*a1 + 23) == 0x6E6F69746163696CLL) {
        return kRDProfileWordTagAppName[0];
      }
    }
    if (v5 != 23) {
      return 0;
    }
    a1 = (unint64_t *)*a1;
    goto LABEL_40;
  }
  int v1 = *((unsigned __int8 *)a1 + 23);
  if (v1 == 20)
  {
    if (*a1 != 0x4C6E49746C697542 || a1[1] != 0x776F646E69572E4DLL || *((_DWORD *)a1 + 4) != 1835365449) {
      return 0;
    }
    return kRDProfileWordTagJustInTime[0];
  }
  if (v1 != 23)
  {
    if (v1 != 31) {
      return 0;
    }
    BOOL v2 = *a1 == 0x4C6E49746C697542 && a1[1] == 0x6863746977532E4DLL;
    BOOL v3 = v2 && a1[2] == 0x6C707041656C6261;
    if (!v3 || *(unint64_t *)((char *)a1 + 23) != 0x6E6F69746163696CLL) {
      return 0;
    }
    return kRDProfileWordTagAppName[0];
  }
LABEL_40:
  unint64_t v11 = 0x4275696C74496E4CLL;
  unint64_t v12 = bswap64(*a1);
  if (v12 == 0x4275696C74496E4CLL
    && (unint64_t v11 = 0x4D2E437573746F6DLL, v12 = bswap64(a1[1]), v12 == 0x4D2E437573746F6DLL)
    && (unint64_t v11 = 0x6D436F6D6D616E64, v12 = bswap64(*(unint64_t *)((char *)a1 + 15)), v12 == 0x6D436F6D6D616E64))
  {
    int v13 = 0;
  }
  else if (v12 < v11)
  {
    int v13 = -1;
  }
  else
  {
    int v13 = 1;
  }
  if (v13) {
    return 0;
  }
  else {
    return kRDProfileWordTagUnknownFirst;
  }
}

void RDQSRResultObject::RDQSRResultObject(RDQSRResultObject *this, int a2, void *a3)
{
  *(_DWORD *)this = a2;
  *((void *)this + 1) = a3;
}

{
  *(_DWORD *)this = a2;
  *((void *)this + 1) = a3;
}

void RDQSRResultObject::RDQSRResultObject(RDQSRResultObject *this, const RDQSRResultObject *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  BOOL v3 = (void *)*((void *)a2 + 1);
  *((void *)this + 1) = v3;
  if (v3) {
    xpc_retain(v3);
  }
}

{
  void *v3;

  *(_DWORD *)this = *(_DWORD *)a2;
  BOOL v3 = (void *)*((void *)a2 + 1);
  *((void *)this + 1) = v3;
  if (v3) {
    xpc_retain(v3);
  }
}

uint64_t RDQSRResultObject::operator=(uint64_t a1, uint64_t a2)
{
  CFURLRef v4 = *(void **)(a2 + 8);
  if (v4) {
    xpc_retain(v4);
  }
  unint64_t v5 = *(void **)(a1 + 8);
  if (v5) {
    xpc_release(v5);
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

void RDQSRResultObject::~RDQSRResultObject(RDQSRResultObject *this)
{
  int v1 = (void *)*((void *)this + 1);
  if (v1) {
    xpc_release(v1);
  }
}

uint64_t RDQSRResultObject::getGrammarIndex(RDQSRResultObject *this)
{
  return *(unsigned int *)this;
}

uint64_t RDQSRResultObject::getResultModel(RDQSRResultObject *this)
{
  return *((void *)this + 1);
}

uint64_t RDQSRResult::RDQSRResult(uint64_t a1, uint64_t a2, CFStringRef theString, int a4, uint64_t a5, CFLocaleRef *a6)
{
  *(void *)a1 = &off_1000EE428;
  *(void *)(a1 + 8) = 0;
  CFStringRef Copy = CFStringCreateCopy(0, theString);
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = Copy;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = a6;
  *(void *)(a1 + 104) = a5;
  if (a4 >= 15) {
    int v13 = 15;
  }
  else {
    int v13 = a4;
  }
  *(_DWORD *)(a1 + 112) = v13;
  *(void *)(a1 + 120) = a2;
  RDQSRResult::tokenSausageVecFromCFString(theString, a6, v26);
  if (RXLogServerResults()) {
    sub_1000B65B4(v26);
  }
  RXIsLocaleWithNoSpaceInPostITN();
  v25[0] = 0;
  v25[1] = 0;
  v24 = (void **)v25;
  v27[0] = off_1000EE4B0;
  v27[1] = a1;
  v27[3] = v27;
  sub_1000B7854(v26, &v23);
  uint64_t v14 = v23;
  uint64_t v23 = 0;
  uint64_t v15 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    uint64_t v16 = v23;
    uint64_t v23 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  sub_100019908(v27);
  sub_1000652BC((uint64_t)&v24, &v23);
  sub_10006C55C(*(void *)(a1 + 56), v23, &v22);
  uint64_t v17 = v22;
  uint64_t v22 = 0;
  uint64_t v18 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    uint64_t v19 = v22;
    uint64_t v22 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  if (RXLogServerGrammar()) {
    sub_10006F764(*(void **)(a1 + 56), "result.fst");
  }
  uint64_t v20 = v23;
  uint64_t v23 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_1000192EC((uint64_t)&v24, v25[0]);
  v24 = (void **)v26;
  sub_100019278(&v24);
  return a1;
}

void sub_10001151C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void ***a12, char *a13, uint64_t a14, void **a15)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  sub_1000192EC((uint64_t)&a12, a13);
  a12 = &a15;
  sub_100019278((void ***)&a12);
  a15 = v16 + 5;
  sub_1000191C0(&a15);
  uint64_t v18 = *(void *)(v15 + 64);
  *(void *)(v15 + 64) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void *)(v15 + 56);
  *(void *)(v15 + 56) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  a15 = v16;
  sub_1000191C0(&a15);
  _Unwind_Resume(a1);
}

void RDQSRResult::tokenSausageVecFromCFString(const __CFString *a1@<X1>, CFLocaleRef *a2@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (RXIsLocaleWithNoSpaceInPostITN()) {
    unint64_t v5 = sub_1000B5604((uint64_t)a2, a1);
  }
  else {
    unint64_t v5 = sub_1000B5418(a2, a1);
  }
  CFArrayRef v6 = v5;
  if (CFArrayGetCount(v5) > 0)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, 0);
    sub_1000B4838(ValueAtIndex, 0, v8);
    operator new();
  }
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1000118A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

uint64_t RDQSRResult::RDQSRResult(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  *(void *)a1 = &off_1000EE428;
  *(void *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a8;
  *(void *)(a1 + 104) = a7;
  if (a6 >= 15) {
    int v10 = 15;
  }
  else {
    int v10 = a6;
  }
  *(_DWORD *)(a1 + 112) = v10;
  *(void *)(a1 + 120) = a2;
  RDQSRResult::tokenSausageVecFromCFTokenSausage(a3, a9, v23);
  if (RXLogServerResults()) {
    sub_1000B65B4(v23);
  }
  RXIsLocaleWithNoSpaceInPostITN();
  v22[0] = 0;
  v22[1] = 0;
  v21 = (void **)v22;
  v24[0] = off_1000EE540;
  v24[1] = a1;
  v24[3] = v24;
  sub_1000B7854(v23, &v20);
  uint64_t v11 = v20;
  uint64_t v20 = 0;
  uint64_t v12 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    uint64_t v13 = v20;
    uint64_t v20 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  sub_100019908(v24);
  sub_1000652BC((uint64_t)&v21, &v20);
  sub_10006C55C(*(void *)(a1 + 56), v20, &v19);
  uint64_t v14 = v19;
  uint64_t v19 = 0;
  uint64_t v15 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    uint64_t v16 = v19;
    uint64_t v19 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  if (RXLogServerGrammar())
  {
    sub_10006F764(*(void **)(a1 + 56), "result.fst");
    sub_10006F764(*(void **)(a1 + 64), "result_edit.fst");
  }
  uint64_t v17 = v20;
  uint64_t v20 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  sub_1000192EC((uint64_t)&v21, v22[0]);
  v21 = (void **)v23;
  sub_100019278(&v21);
  return a1;
}

{
  return RDQSRResult::RDQSRResult(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_100011C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void ***a12, char *a13, uint64_t a14, void **a15)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  sub_1000192EC((uint64_t)&a12, a13);
  a12 = &a15;
  sub_100019278((void ***)&a12);
  sub_1000191C0(&a15);
  uint64_t v17 = *(void *)(v15 + 64);
  *(void *)(v15 + 64) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(v15 + 56);
  *(void *)(v15 + 56) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  a15 = (void **)(v15 + 32);
  sub_1000191C0(&a15);
  _Unwind_Resume(a1);
}

CFIndex RDQSRResult::tokenSausageVecFromCFTokenSausage@<X0>(const __CFArray *a1@<X1>, int a2@<W3>, uint64_t *a3@<X8>)
{
  CFIndex idx = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  while (1)
  {
    CFIndex result = CFArrayGetCount(a1);
    if (result <= idx) {
      return result;
    }
    memset(v31, 0, sizeof(v31));
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, idx);
    CFIndex Count = CFArrayGetCount(ValueAtIndex);
    if (Count >= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = Count;
    }
    if (!a2) {
      uint64_t v5 = Count;
    }
    uint64_t v20 = v5;
    if (v5 >= 1)
    {
      CFIndex v6 = 0;
      do
      {
        CFIndex v22 = v6;
        CFArrayRef v23 = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, v6);
        CFIndex v24 = 0;
        memset(v30, 0, sizeof(v30));
        while (v24 < CFArrayGetCount(v23))
        {
          BOOL v7 = (void *)CFArrayGetValueAtIndex(v23, v24);
          CFStringRef TokenName = (const __CFString *)RDASRWSpeechRecognitionTokenGetTokenName(v7);
          sub_1000B4838(TokenName, 0, &v29);
          CFStringRef v9 = (const __CFString *)RXLocalizedStringForSpacebar();
          if (v9 && !v24 && CFEqual(TokenName, v9)) {
            std::string::assign(&v29, " ");
          }
          if ((RXIsLocaleWithNoSpaceInPostITN() & 1) == 0) {
            RDASRWSpeechRecognitionTokenHasSpaceAfter(v7);
          }
          if (!RXIsLocaleWithNoSpaceInPostITN())
          {
            RDASRWSpeechRecognitionTokenGetStart(v7);
            RDASRWSpeechRecognitionTokenGetEnd(v7);
            RDASRWSpeechRecognitionTokenGetSilenceStart(v7);
            RDASRWSpeechRecognitionTokenGetConfidence(v7);
            operator new();
          }
          CFStringRef v10 = (const __CFString *)RDASRWSpeechRecognitionTokenGetTokenName(v7);
          sub_1000B4838(v10, 0, __p);
          char v11 = sub_1000B58FC((char *)__p);
          char v12 = v11;
          if (v28 < 0)
          {
            operator delete(__p[0]);
            if (v12)
            {
LABEL_21:
              RDASRWSpeechRecognitionTokenGetStart(v7);
              RDASRWSpeechRecognitionTokenGetEnd(v7);
              RDASRWSpeechRecognitionTokenGetSilenceStart(v7);
              RDASRWSpeechRecognitionTokenGetConfidence(v7);
              operator new();
            }
          }
          else if (v11)
          {
            goto LABEL_21;
          }
          RDASRWSpeechRecognitionTokenGetEnd(v7);
          RDASRWSpeechRecognitionTokenGetStart(v7);
          if (CFStringGetLength(v10) > 0)
          {
            v34.id location = 0;
            v34.length = 1;
            CFStringRef v13 = CFStringCreateWithSubstring(0, v10, v34);
            sub_1000B4838(v13, 0, v25);
            if (RXVeryVerbose())
            {
              uint64_t v14 = RXOSLog();
              if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
              {
                uint64_t v15 = v25;
                if (v26 < 0) {
                  uint64_t v15 = (void **)v25[0];
                }
                *(_DWORD *)long long buf = 136315138;
                *(void *)&uint8_t buf[4] = v15;
                _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "result phrase tokens = %s", buf, 0xCu);
              }
            }
            RDASRWSpeechRecognitionTokenGetStart(v7);
            CFStringGetLength(v10);
            RDASRWSpeechRecognitionTokenGetEnd(v7);
            CFStringGetLength(v10);
            CFStringGetLength(v10);
            RDASRWSpeechRecognitionTokenGetSilenceStart(v7);
            RDASRWSpeechRecognitionTokenGetConfidence(v7);
            operator new();
          }
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
          ++v24;
        }
        LOBYTE(v25[0]) = 0;
        memset(buf, 0, sizeof(buf));
        uint64_t v33 = 0;
        if (RXIsLocaleWithSpecialHyphenHandling()) {
          RDQSRResult::fillAlternativeTokenVec(v30, (uint64_t)buf, v25);
        }
        sub_100013234(v31, (uint64_t)v30);
        if (LOBYTE(v25[0])) {
          sub_100013234(v31, (uint64_t)buf);
        }
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        sub_1000191C0((void ***)&v29);
        *(void *)long long buf = v30;
        sub_1000191C0((void ***)buf);
        CFIndex v6 = v22 + 1;
      }
      while (v22 + 1 != v20);
    }
    sub_100013374(a3, (uint64_t)v31);
    *(void *)long long buf = v31;
    sub_100019C28((void ***)buf);
    ++idx;
  }
}

void sub_1000125DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t *a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  a42 = &a45;
  sub_100019C28((void ***)&a42);
  a45 = a11;
  sub_100019278((void ***)&a45);
  _Unwind_Resume(a1);
}

uint64_t RDQSRResult::firstBestResult(RDQSRResult *this)
{
  return *((void *)this + 2);
}

void RDQSRResult::~RDQSRResult(RDQSRResult *this)
{
  *(void *)this = &off_1000EE428;
  BOOL v2 = (const void *)*((void *)this + 3);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v5 = (void **)((char *)this + 72);
  sub_1000191C0(&v5);
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (void **)((char *)this + 32);
  sub_1000191C0(&v5);
}

{
  uint64_t vars8;

  RDQSRResult::~RDQSRResult(this);
  operator delete();
}

unint64_t RDQSRResult::TimeInMs(RDQSRResult *this, double a2)
{
  return *((void *)this + 13) + (unint64_t)(a2 * 1000.0);
}

uint64_t RDQSRResult::GetResultToken(uint64_t a1, const char *a2, int a3)
{
  size_t v6 = strlen("<eps>");
  size_t v7 = v6;
  uint64_t v8 = *((unsigned __int8 *)a2 + 23);
  if (a2[23] < 0)
  {
    if (v6 != *((void *)a2 + 1))
    {
      if (a3 == 2) {
        CFStringRef v10 = (void *)(a1 + 32);
      }
      else {
        CFStringRef v10 = (void *)(a1 + 72);
      }
      goto LABEL_21;
    }
    if (v6 == -1) {
      goto LABEL_23;
    }
    CFStringRef v9 = *(const char **)a2;
  }
  else
  {
    if (v6 != v8)
    {
      if (a3 == 2) {
        CFStringRef v10 = (void *)(a1 + 32);
      }
      else {
        CFStringRef v10 = (void *)(a1 + 72);
      }
      return *(void *)(*v10 + 8 * atoi(a2));
    }
    CFStringRef v9 = a2;
    if (v7 == -1) {
LABEL_23:
    }
      sub_100018C34();
  }
  if (!memcmp(v9, "<eps>", v7)) {
    return 0;
  }
  if (a3 == 2)
  {
    CFStringRef v10 = (void *)(a1 + 32);
    if ((v8 & 0x80) != 0) {
LABEL_21:
    }
      a2 = *(const char **)a2;
  }
  else
  {
    CFStringRef v10 = (void *)(a1 + 72);
    if ((v8 & 0x80) != 0) {
      goto LABEL_21;
    }
  }
  return *(void *)(*v10 + 8 * atoi(a2));
}

const __CFArray *RDQSRResult::hypothesesTokensVecFromCFTokenSausage(RDQSRResult *this, const __CFArray *a2)
{
  CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  uint64_t v4 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (CFArrayGetCount(this) >= 1)
  {
    CFIndex v5 = 0;
    char v26 = this;
    do
    {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(this, v5);
      CFArrayRef MutableCopy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, Mutable);
      CFArrayRemoveAllValues(Mutable);
      v29.length = CFArrayGetCount(MutableCopy);
      v29.id location = 0;
      CFArrayAppendArray(v4, MutableCopy, v29);
      if (CFArrayGetCount(ValueAtIndex) >= 1)
      {
        CFIndex v8 = 0;
        CFArrayRef theArray = ValueAtIndex;
        CFIndex v28 = v5;
        do
        {
          CFArrayRef v9 = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, v8);
          CFStringRef v10 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          if (CFArrayGetCount(v9) >= 1)
          {
            CFIndex v11 = 0;
            do
            {
              char v12 = CFArrayGetValueAtIndex(v9, v11);
              CFArrayAppendValue(v10, v12);
              ++v11;
            }
            while (v11 < CFArrayGetCount(v9));
          }
          if (v5)
          {
            CFStringRef v13 = (void *)CFArrayGetValueAtIndex(v10, 0);
            if (CFArrayGetCount(MutableCopy) >= 1)
            {
              CFIndex v14 = 0;
              do
              {
                CFArrayRef v15 = (const __CFArray *)CFArrayGetValueAtIndex(MutableCopy, v14);
                CFIndex Count = CFArrayGetCount(v15);
                uint64_t v17 = (void *)CFArrayGetValueAtIndex(v15, Count - 1);
                RDASRWSpeechRecognitionTokenGetEnd(v17);
                double v19 = v18;
                RDASRWSpeechRecognitionTokenGetStart(v13);
                if (v19 == v20)
                {
                  v21 = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v15);
                  v30.length = CFArrayGetCount(v10);
                  v30.id location = 0;
                  CFArrayAppendArray(v21, v10, v30);
                  CFArrayAppendValue(Mutable, v21);
                  CFMutableArrayRef v22 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                  CFArraySetValueAtIndex(v4, v14, v22);
                  CFRelease(v21);
                }
                ++v14;
              }
              while (v14 < CFArrayGetCount(MutableCopy));
            }
          }
          else
          {
            CFArrayAppendValue(Mutable, v10);
          }
          CFRelease(v10);
          ++v8;
          CFArrayRef ValueAtIndex = theArray;
          CFIndex v5 = v28;
        }
        while (CFArrayGetCount(theArray) > v8);
      }
      CFRelease(MutableCopy);
      if (CFArrayGetCount(v4) >= 1)
      {
        CFIndex v23 = 0;
        do
        {
          CFIndex v24 = CFArrayGetValueAtIndex(v4, v23);
          if (CFArrayGetCount((CFArrayRef)v24) >= 1) {
            CFArrayAppendValue(Mutable, v24);
          }
          ++v23;
        }
        while (v23 < CFArrayGetCount(v4));
      }
      CFArrayRemoveAllValues(v4);
      ++v5;
      this = v26;
    }
    while (CFArrayGetCount(v26) > v5);
  }
  CFRelease(v4);
  return Mutable;
}

void RDQSRResult::tokenSausageVecByCombiningAndRetokeninzing(RDQSRResult *this@<X1>, CFLocaleRef *a2@<X2>, uint64_t *a3@<X8>)
{
  CFArrayRef theArray = RDQSRResult::hypothesesTokensVecFromCFTokenSausage(this, this);
  CFIndex v4 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  double v19 = a3;
  memset(v24, 0, sizeof(v24));
  while (v4 < CFArrayGetCount(theArray))
  {
    CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v4);
    CFIndex Count = CFArrayGetCount(ValueAtIndex);
    CFIndex v8 = Count;
    CFIndex v9 = Count - 1;
    if (Count < 1)
    {
      if (!Count) {
        goto LABEL_19;
      }
LABEL_16:
      CFArrayGetCount(ValueAtIndex);
      uint64_t v17 = sub_1000B5418(a2, Mutable);
      CFRelease(Mutable);
      CFArrayGetCount(v17);
      memset(v23, 0, sizeof(v23));
      if (CFArrayGetCount(v17) > 0)
      {
        CFStringRef v18 = (const __CFString *)CFArrayGetValueAtIndex(v17, 0);
        sub_1000B4838(v18, 0, v22);
        operator new();
      }
      sub_100013234(v24, (uint64_t)v23);
      CFRelease(v17);
      __p[0] = v23;
      sub_1000191C0((void ***)__p);
      goto LABEL_19;
    }
    CFIndex v10 = 0;
    double v11 = 0.0;
    do
    {
      char v12 = (void *)CFArrayGetValueAtIndex(ValueAtIndex, v10);
      CFStringRef v13 = v12;
      if (!v10)
      {
        RDASRWSpeechRecognitionTokenGetStart(v12);
        RDASRWSpeechRecognitionTokenGetSilenceStart(v13);
      }
      if (v9 == v10) {
        RDASRWSpeechRecognitionTokenGetEnd(v13);
      }
      RDASRWSpeechRecognitionTokenGetConfidence(v13);
      double v15 = v14;
      CFStringRef TokenName = (const __CFString *)RDASRWSpeechRecognitionTokenGetTokenName(v13);
      CFStringAppend(Mutable, TokenName);
      if (RDASRWSpeechRecognitionTokenHasSpaceAfter(v13) && v10 < CFArrayGetCount(ValueAtIndex) - 1) {
        CFStringAppend(Mutable, @" ");
      }
      double v11 = v11 + v15;
      ++v10;
    }
    while (v8 != v10);
    if (v8) {
      goto LABEL_16;
    }
LABEL_19:
    ++v4;
  }
  sub_100013374(v19, (uint64_t)v24);
  CFRelease(theArray);
  __p[0] = v24;
  sub_100019C28((void ***)__p);
}

void sub_100013140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  a20 = &a23;
  sub_100019C28((void ***)&a20);
  a23 = a9;
  sub_100019278((void ***)&a23);
  _Unwind_Resume(a1);
}

void **sub_100013234(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  CFIndex result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  size_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100019424();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    CFStringRef v13 = (char *)sub_100019D14((uint64_t)result, v12);
    double v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)double v14 = 0;
    *(_OWORD *)double v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_100019C9C(a1, v16);
    CFIndex v8 = (void *)a1[1];
    CFIndex result = sub_100019E84(v16);
  }
  else
  {
    *size_t v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = 0;
    *(_OWORD *)size_t v7 = *(_OWORD *)a2;
    _OWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    CFIndex v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_100013360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100019E84((void **)va);
  _Unwind_Resume(a1);
}

void **sub_100013374(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  CFIndex result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  size_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100019424();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    CFStringRef v13 = (char *)sub_100019D14((uint64_t)result, v12);
    double v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)double v14 = 0;
    *(_OWORD *)double v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_100019F0C(a1, v16);
    CFIndex v8 = (void *)a1[1];
    CFIndex result = sub_10001A0AC(v16);
  }
  else
  {
    *size_t v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = 0;
    *(_OWORD *)size_t v7 = *(_OWORD *)a2;
    _OWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    CFIndex v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1000134A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001A0AC((void **)va);
  _Unwind_Resume(a1);
}

long long ***RDQSRResult::fillAlternativeTokenVec(long long ***result, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *result;
  if (result[1] != *result)
  {
    unint64_t v5 = *v3;
    if (*((char *)*v3 + 23) < 0)
    {
      sub_10006770C(__dst, *(void **)v5, *((void *)v5 + 1));
    }
    else
    {
      long long v6 = *v5;
      uint64_t v13 = *((void *)v5 + 2);
      *(_OWORD *)__dst = v6;
    }
    if (v13 >= 0) {
      size_t v7 = __dst;
    }
    else {
      size_t v7 = (void **)__dst[0];
    }
    CFStringRef v8 = CFStringCreateWithCString(0, (const char *)v7, 0x8000100u);
    CFStringCreateMutableCopy(0, 0, v8);
    int v11 = 0;
    CFStringRef v9 = (const __CFString *)RXReplaceHyphensWithSpace();
    sub_1000B4838(v9, 0, v10);
    if (v11 >= 1) {
      *a3 = 1;
    }
    operator new();
  }
  return result;
}

void sub_10001374C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v31 = a10;
  a10 = 0;
  if (v31) {
    sub_100019350((uint64_t)&a10, v31);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RDQSRResult::Match@<X0>(uint64_t a1@<X0>, RDQSRGrammarBuilder ***a2@<X1>, void *a3@<X8>)
{
  memset(v19, 0, sizeof(v19));
  int v20 = 1065353216;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000FEB10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000FEB10))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &unk_1000FDF78, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000FEB10);
  }
  size_t v7 = *a2;
  long long v6 = a2[1];
  CFStringRef v8 = operator new(0x20uLL);
  *CFStringRef v8 = off_1000EE5C0;
  v8[1] = a2;
  v8[2] = v19;
  v8[3] = a1;
  v21[3] = v8;
  multithread_forloop(4uLL, ((char *)v6 - (char *)v7) >> 5, (uint64_t)v21);
  sub_10001A6C8(v21);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  CFStringRef v9 = *a2;
  unint64_t v10 = a2[1];
  if (*a2 == v10)
  {
    long long v15 = 0uLL;
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      *(void *)&long long v15 = v11;
      *(void *)long long buf = &v15;
      unint64_t v12 = (void *)sub_10001A3FC((uint64_t)v19, (unint64_t *)&v15, (uint64_t)&unk_1000CA487, (void **)buf)[3];
      if (!sub_10006EA84((uint64_t)v12))
      {
        if (RXLogServerGrammar())
        {
          sub_10006F764(v12, "composed.fst");
          uint64_t v13 = (void *)RDQSRGrammarBuilder::grammarFST(*v9);
          sub_10006F764(v13, "grammar.fst");
        }
        sub_10006EAD4((uint64_t)v12);
      }
      ++v11;
      v9 += 4;
    }
    while (v9 != v10);
    long long v15 = 0uLL;
    uint64_t v16 = 0;
  }
  *(void *)long long buf = &v15;
  sub_100018CDC((void ***)buf);
  *(void *)long long buf = &v17;
  sub_100018CDC((void ***)buf);
  return sub_10001A134((uint64_t)v19);
}

void sub_10001410C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void ***a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void ***a34)
{
  a34 = (void ***)&a21;
  sub_100018CDC((void ***)&a34);
  a21 = &a25;
  sub_100018CDC((void ***)&a21);
  a25 = a14;
  sub_10001A74C(&a25);
  sub_10001A134((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t RDQSRResult::calculateMode(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  *a4 = 0;
  *a5 = 0;
  uint64_t v6 = *a2;
  if (!*(unsigned char *)(a3 + 24))
  {
    uint64_t v55 = 2;
LABEL_125:
    v59 = (char *)a2[1];
    if ((char *)v6 == v59) {
      return v55;
    }
    unsigned int v73 = v55;
    for (uint64_t i = (char *)(v6 + 24); ; i += 48)
    {
      v61 = i;
      if (i[23] < 0) {
        v61 = *(char **)i;
      }
      v62 = *(uint64_t ***)(a3 + 16);
      v63 = (const std::string *)sub_100009CF0(buf, v61);
      __dst.__r_.__value_.__r.__words[0] = std::stoull(v63, 0, 10);
      *(void *)__p = &__dst;
      v64 = (void *)sub_10001AC70(v62, (unint64_t *)&__dst, (uint64_t)&unk_1000CA487, (uint64_t **)__p)[5];
      if (SHIBYTE(v78) < 0) {
        operator delete(*(void **)buf);
      }
      xpc_type_t type = xpc_get_type(v64);
      if (type == (xpc_type_t)&_xpc_type_dictionary)
      {
        if (xpc_dictionary_get_int64(v64, kRDKeyObjectType) != 13) {
          return 0;
        }
      }
      else
      {
        v66 = RXOSLog();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = type;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_FAULT, "API misuse while calculating mode: XPC_TYPE_DICTIONARY expected, passed %@ ", buf, 0xCu);
        }
      }
      v67 = i + 24;
      if (v67 == v59) {
        return v73;
      }
    }
  }
  v70 = a2;
  uint64_t v74 = a2[1];
  if (v6 == v74)
  {
    int v8 = 0;
    int v71 = 1;
    int v56 = 2;
    goto LABEL_121;
  }
  int v8 = 0;
  int v9 = 0;
  int v71 = 1;
  unsigned int v72 = 2;
  while (1)
  {
    v8 &= v9 ^ 1;
    size_t v10 = strlen("<eps>");
    size_t v11 = v10;
    uint64_t v12 = *(unsigned __int8 *)(v6 + 23);
    if (*(char *)(v6 + 23) < 0)
    {
      if (v10 != *(void *)(v6 + 8)) {
        goto LABEL_12;
      }
      if (v10 == -1) {
LABEL_140:
      }
        sub_100018C34();
      uint64_t v13 = *(const void **)v6;
    }
    else
    {
      if (v10 != v12) {
        goto LABEL_12;
      }
      uint64_t v13 = (const void *)v6;
      if (v11 == -1) {
        goto LABEL_140;
      }
    }
    if (!memcmp(v13, "<eps>", v11))
    {
      v57 = a4;
      goto LABEL_120;
    }
LABEL_12:
    double v14 = (char *)(v6 + 24);
    uint64_t v15 = *(unsigned __int8 *)(v6 + 47);
    if (*(char *)(v6 + 47) < 0)
    {
      if (v11 != *(void *)(v6 + 32)) {
        goto LABEL_20;
      }
      if (v11 == -1) {
LABEL_141:
      }
        sub_100018C34();
      uint64_t v16 = *(char **)v14;
    }
    else
    {
      if (v11 != v15) {
        goto LABEL_20;
      }
      uint64_t v16 = (char *)(v6 + 24);
      if (v11 == -1) {
        goto LABEL_141;
      }
    }
    if (!memcmp(v16, "<eps>", v11)) {
      break;
    }
LABEL_20:
    long long v17 = (const char *)v6;
    if ((v12 & 0x80) != 0) {
      long long v17 = *(const char **)v6;
    }
    int v18 = atoi(v17);
    if ((v15 & 0x80) != 0) {
      double v14 = *(char **)v14;
    }
    double v19 = *(long long **)(*(void *)(a1 + 72) + 8 * v18);
    int v20 = *(uint64_t ***)(a3 + 16);
    v21 = (const std::string *)sub_100009CF0(buf, v14);
    __dst.__r_.__value_.__r.__words[0] = std::stoull(v21, 0, 10);
    *(void *)__p = &__dst;
    CFMutableArrayRef v22 = (void *)sub_10001AC70(v20, (unint64_t *)&__dst, (uint64_t)&unk_1000CA487, (uint64_t **)__p)[5];
    if (SHIBYTE(v78) < 0) {
      operator delete(*(void **)buf);
    }
    xpc_type_t v23 = xpc_get_type(v22);
    if (v23 != (xpc_type_t)&_xpc_type_dictionary)
    {
      CFIndex v24 = RXOSLog();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      {
        if (*((char *)v19 + 23) < 0)
        {
          sub_10006770C(buf, *(void **)v19, *((void *)v19 + 1));
        }
        else
        {
          long long v25 = *v19;
          uint64_t v78 = *((void *)v19 + 2);
          *(_OWORD *)long long buf = v25;
        }
        v32 = buf;
        if (v78 < 0) {
          v32 = *(uint8_t **)buf;
        }
        *(_DWORD *)__p = 136315394;
        *(void *)&__p[4] = v32;
        *(_WORD *)&__p[12] = 2112;
        *(void *)&__p[14] = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "API misuse for token %s : XPC_TYPE_DICTIONARY expected, passed %@ ", __p, 0x16u);
        if (SHIBYTE(v78) < 0) {
          operator delete(*(void **)buf);
        }
      }
      goto LABEL_112;
    }
    int64_t int64 = xpc_dictionary_get_int64(v22, kRDKeyObjectType);
    if (int64 != 12)
    {
      if (int64 == 13 && *(unsigned char *)(a3 + 25))
      {
        if (*((char *)v19 + 23) < 0)
        {
          sub_10006770C(buf, *(void **)v19, *((void *)v19 + 1));
        }
        else
        {
          long long v31 = *v19;
          uint64_t v78 = *((void *)v19 + 2);
          *(_OWORD *)long long buf = v31;
        }
        if (sub_1000B581C((uint64_t)buf))
        {
          BOOL v39 = 1;
        }
        else
        {
          if (*((char *)v19 + 23) < 0)
          {
            sub_10006770C(__p, *(void **)v19, *((void *)v19 + 1));
          }
          else
          {
            long long v40 = *v19;
            *(void *)&__p[16] = *((void *)v19 + 2);
            *(_OWORD *)__p = v40;
          }
          BOOL v39 = sub_1000B588C((uint64_t)__p);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        if (SHIBYTE(v78) < 0) {
          operator delete(*(void **)buf);
        }
        int v9 = 0;
        int v71 = 0;
        v8 |= v39;
      }
      goto LABEL_112;
    }
    v27 = *(CFLocaleRef **)(a1 + 96);
    string = (char *)xpc_dictionary_get_string(v22, kRDKeyText);
    sub_100009CF0(__p, string);
    sub_1000B4734(v27, __p, buf);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    CFRange v29 = *(CFLocaleRef **)(a1 + 96);
    if (*((char *)v19 + 23) < 0)
    {
      sub_10006770C(&__dst, *(void **)v19, *((void *)v19 + 1));
    }
    else
    {
      long long v30 = *v19;
      __dst.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v30;
    }
    sub_1000B4734(v29, (const char *)&__dst, __p);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    uint64_t v33 = HIBYTE(v78);
    if (v78 >= 0) {
      uint64_t v34 = HIBYTE(v78);
    }
    else {
      uint64_t v34 = *(void *)&buf[8];
    }
    uint64_t v35 = __p[23];
    char v36 = __p[23];
    if (__p[23] < 0) {
      uint64_t v35 = *(void *)&__p[8];
    }
    if (v34 == v35)
    {
      if (__p[23] >= 0) {
        v37 = __p;
      }
      else {
        v37 = *(unsigned __int8 **)__p;
      }
      if (v78 < 0)
      {
        if (!memcmp(*(const void **)buf, v37, *(size_t *)&buf[8]))
        {
LABEL_102:
          int v52 = 0;
          LOBYTE(v50) = 0;
          int v9 = 1;
          if (v36 < 0) {
            goto LABEL_92;
          }
          goto LABEL_93;
        }
      }
      else
      {
        if (!HIBYTE(v78)) {
          goto LABEL_102;
        }
        v38 = buf;
        while (*v38 == *v37)
        {
          ++v38;
          ++v37;
          if (!--v33) {
            goto LABEL_102;
          }
        }
      }
    }
    sub_1000B4A14((const void **)__p, &__dst);
    if (v78 >= 0) {
      uint64_t v41 = HIBYTE(v78);
    }
    else {
      uint64_t v41 = *(void *)&buf[8];
    }
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    int v43 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    if (v41 != size)
    {
      BOOL v50 = 1;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_86;
      }
LABEL_101:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_86;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if (v78 < 0)
    {
      BOOL v50 = memcmp(*(const void **)buf, p_dst, *(size_t *)&buf[8]) != 0;
      if (v43 < 0) {
        goto LABEL_101;
      }
    }
    else if (HIBYTE(v78))
    {
      uint64_t v45 = HIBYTE(v78) - 1;
      v46 = buf;
      do
      {
        int v48 = *v46++;
        int v47 = v48;
        int v49 = p_dst->__r_.__value_.__s.__data_[0];
        p_dst = (std::string *)((char *)p_dst + 1);
        BOOL v50 = v47 != v49;
      }
      while (v47 == v49 && v45-- != 0);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_101;
      }
    }
    else
    {
      BOOL v50 = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_101;
      }
    }
LABEL_86:
    v9 |= !v50;
    if (v50) {
      int v52 = 2;
    }
    else {
      int v52 = 0;
    }
    int v53 = v72;
    if (v50) {
      int v53 = 1;
    }
    unsigned int v72 = v53;
    if ((__p[23] & 0x80) != 0) {
LABEL_92:
    }
      operator delete(*(void **)__p);
LABEL_93:
    if (SHIBYTE(v78) < 0) {
      operator delete(*(void **)buf);
    }
    if (v52) {
      BOOL v54 = v50;
    }
    else {
      BOOL v54 = 0;
    }
    if (v54) {
      goto LABEL_122;
    }
LABEL_112:
    v6 += 48;
    if (v6 == v74) {
      goto LABEL_122;
    }
  }
  v57 = a5;
LABEL_120:
  ++*v57;
  int v56 = 1;
LABEL_121:
  unsigned int v72 = v56;
LABEL_122:
  uint64_t result = 1;
  if ((*(unsigned char *)(a3 + 25) == 0) | (v71 | v8) & 1)
  {
    uint64_t v55 = v72;
    if (v72 != 1)
    {
      a2 = v70;
      uint64_t v6 = *v70;
      goto LABEL_125;
    }
  }
  return result;
}

void sub_100014994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(char *)(v31 - 105) < 0) {
    operator delete(*(void **)(v31 - 128));
  }
  _Unwind_Resume(exception_object);
}

void *RDQSRResultModelBuilder::buildResult(RDQSRResultModelBuilder *this, int a2)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  *((_DWORD *)this + 58) = 0;
  if (a2 < 1)
  {
LABEL_7:
    xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
    size_t v10 = v9;
    if (*((_DWORD *)this + 12) == 1) {
      int64_t v11 = 15;
    }
    else {
      int64_t v11 = 14;
    }
    xpc_dictionary_set_int64(v9, kRDKeyObjectType, v11);
    xpc_dictionary_set_uint64(v10, kRDKeyResultID, (uint64_t)v4);
    xpc_dictionary_set_value(v10, kRDKeyChildren, v4);
    xpc_release(v4);
  }
  else
  {
    while (1)
    {
      *((unsigned char *)this + 56) = 0;
      *((void *)this + 9) = 0;
      uint64_t v6 = *((void *)this + 10);
      for (uint64_t i = *((void *)this + 11); i != v6; uint64_t i = sub_10001BC50(i - 24))
        ;
      *((void *)this + 11) = v6;
      std::string::assign((std::string *)((char *)this + 104), "");
      std::string::assign((std::string *)((char *)this + 128), "");
      *((void *)this + 20) = *((void *)this + 19);
      *((void *)this + 23) = *((void *)this + 22);
      sub_1000192EC((uint64_t)this + 200, *((char **)this + 26));
      *((void *)this + 25) = (char *)this + 208;
      *((void *)this + 26) = 0;
      *((void *)this + 27) = 0;
      *((void *)this + 28) = 0;
      sub_10001BB7C((RDQSRResultLMNodeBuilder **)this + 8, 0);
      RDQSRResultModelBuilder::AddResultNodeForCurrentResult(this);
      size_t v7 = (void *)*((void *)this + 9);
      if (!v7) {
        return 0;
      }
      xpc_array_append_value(v4, v7);
      int v8 = *((_DWORD *)this + 58) + 1;
      *((_DWORD *)this + 58) = v8;
      if (v8 >= a2) {
        goto LABEL_7;
      }
    }
  }
  return v10;
}

void RDQSRResult::constructPathVectorFromNBestForAdlib(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  xpc_object_t v4 = *(long long ***)a2;
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    *a3 = (uint64_t)v4;
    a3[1] = (uint64_t)v4;
    a3[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return;
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  sub_10001AF20((char *)&v31, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * (v4[1] - *v4));
  memset(&__s1, 0, sizeof(__s1));
  uint64_t v6 = v32;
  if (v31 == v32)
  {
    int v10 = 0;
  }
  else
  {
    uint64_t v7 = v31 + 48;
    do
    {
      std::string::operator=(&__s1, (const std::string *)(v7 - 24));
      size_t v8 = strlen("<eps>");
      size_t v9 = v8;
      int v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (v8 != __s1.__r_.__value_.__l.__size_) {
          goto LABEL_15;
        }
        if (v8 == -1) {
LABEL_45:
        }
          sub_100018C34();
        p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v8 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
          goto LABEL_21;
        }
        if (v8 == -1) {
          goto LABEL_45;
        }
        p_s1 = &__s1;
      }
      if (memcmp(p_s1, "<eps>", v9)) {
        break;
      }
      BOOL v12 = v7 == v6;
      v7 += 48;
    }
    while (!v12);
    if ((v10 & 0x80) != 0)
    {
LABEL_15:
      std::string::size_type size = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_)
      {
        if (strlen("<eps>") != __s1.__r_.__value_.__l.__size_) {
          goto LABEL_26;
        }
        if (__s1.__r_.__value_.__l.__size_ != -1)
        {
          double v14 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          goto LABEL_25;
        }
LABEL_46:
        sub_100018C34();
      }
LABEL_29:
      int v18 = RXOSLog();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "constructPathVectorFromNBestForAdlib: <eps> grammar found for adlib", (uint8_t *)__p, 2u);
      }
      *(_OWORD *)a3 = *(_OWORD *)a2;
      a3[2] = *(void *)(a2 + 16);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)a2 = 0;
      goto LABEL_42;
    }
  }
LABEL_21:
  if (!v10) {
    goto LABEL_29;
  }
  size_t v15 = strlen("<eps>");
  if (v15 != v10) {
    goto LABEL_26;
  }
  std::string::size_type size = v15;
  if (v15 == -1) {
    goto LABEL_46;
  }
  double v14 = &__s1;
LABEL_25:
  if (!memcmp(v14, "<eps>", size)) {
    goto LABEL_29;
  }
LABEL_26:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (RXAutomationModeResult())
  {
    uint64_t v16 = sub_1000B5418(*(CFLocaleRef **)(a1 + 96), *(const __CFString **)(a1 + 24));
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    if (CFArrayGetCount(v16) > 0)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v16, 0);
      sub_1000B4838(ValueAtIndex, 0, v26);
      CFArrayGetCount(v16);
      operator new();
    }
    sub_100015624(a3, (uint64_t)&v27);
    if (v16) {
      CFRelease(v16);
    }
    __p[0] = &v27;
    sub_10001B264((void ***)__p);
  }
  else
  {
    for (CFIndex i = 0; i < CFArrayGetCount(*(CFArrayRef *)(a1 + 8)); ++i)
    {
      int v20 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i);
      if (v20)
      {
        CFArrayRef Tokens = (const __CFArray *)RDASRWSpeechRecognitionGetTokens((uint64_t)v20);
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        if (CFArrayGetCount(Tokens) > 0)
        {
          CFMutableArrayRef v22 = (void *)CFArrayGetValueAtIndex(Tokens, 0);
          CFStringRef TokenName = (const __CFString *)RDASRWSpeechRecognitionTokenGetTokenName(v22);
          sub_1000B4838(TokenName, 0, v26);
          RDASRWSpeechRecognitionTokenGetStart(v22);
          RDASRWSpeechRecognitionTokenGetEnd(v22);
          RDASRWSpeechRecognitionTokenGetSilenceStart(v22);
          RDASRWSpeechRecognitionTokenGetConfidence(v22);
          RDASRWSpeechRecognitionTokenHasSpaceAfter(v22);
          operator new();
        }
        sub_100015624(a3, (uint64_t)&v27);
        __p[0] = &v27;
        sub_10001B264((void ***)__p);
      }
    }
  }
LABEL_42:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  __p[0] = &v31;
  sub_10001B264((void ***)__p);
}

void sub_1000152E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  a34 = a10;
  sub_100018CDC((void ***)&a34);
  if (a42 < 0) {
    operator delete(__p);
  }
  __p = (void *)(v42 - 144);
  sub_10001B264((void ***)&__p);
  _Unwind_Resume(a1);
}

void **sub_100015474(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_100019424();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      size_t v15 = (char *)sub_10001AFFC((uint64_t)result, v14);
    }
    else {
      size_t v15 = 0;
    }
    uint64_t v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    _OWORD v19[2] = v16 + 48;
    sub_10001B2FC(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = sub_10001B4B8(v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_1000155CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B4B8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000155E0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **sub_100015624(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100019424();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)sub_100019D14((uint64_t)result, v12);
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_10001B534(a1, v16);
    long long v8 = (void *)a1[1];
    uint64_t result = sub_10001B6D4(v16);
  }
  else
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    _OWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_100015750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B6D4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t RDQSRResultLMNodeBuilder::RDQSRResultLMNodeBuilder(uint64_t a1, std::string::size_type *a2, uint64_t a3, void *a4)
{
  long long v8 = sub_10001B75C((void *)a1, 1uLL);
  *(_OWORD *)(v8 + 3) = 0u;
  unint64_t v9 = v8 + 3;
  v8[9] = 0;
  *(_OWORD *)(v8 + 7) = 0u;
  *(_OWORD *)(v8 + 5) = 0u;
  *((_DWORD *)v8 + 20) = 1065353216;
  v8[13] = 0;
  v8[12] = v8 + 13;
  v8[14] = 0;
  v8[15] = v8;
  uint8_t v8[16] = a3;
  v8[17] = a2;
  *((_DWORD *)v8 + 37) = 0;
  unint64_t v10 = (_OWORD *)*v8;
  v10[1] = 0u;
  v10[2] = 0u;
  *unint64_t v10 = 0u;
  *(unsigned char *)*long long v8 = 10;
  *(void *)(*(void *)a1 + 32) = xpc_array_create(0, 0);
  uint64_t int64 = xpc_dictionary_get_uint64(a4, kRDKeyObjectID);
  xpc_object_t v12 = xpc_uint64_create(uint64);
  xpc_array_append_value(*(xpc_object_t *)(*(void *)a1 + 32), v12);
  xpc_release(v12);
  ++*(_WORD *)(*(void *)a1 + 4);
  unint64_t v13 = *(void **)(a1 + 32);
  unint64_t v14 = *(void *)(a1 + 40);
  if ((unint64_t)v13 >= v14)
  {
    uint64_t v16 = ((uint64_t)v13 - *v9) >> 3;
    if ((unint64_t)(v16 + 1) >> 61) {
      sub_100019424();
    }
    uint64_t v17 = v14 - *v9;
    uint64_t v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
      uint64_t v18 = v16 + 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19) {
      int v20 = (char *)sub_10001943C(a1 + 40, v19);
    }
    else {
      int v20 = 0;
    }
    v21 = &v20[8 * v16];
    CFMutableArrayRef v22 = &v20[8 * v19];
    *(void *)v21 = 0;
    uint64_t v15 = v21 + 8;
    CFIndex v24 = *(char **)(a1 + 24);
    xpc_type_t v23 = *(char **)(a1 + 32);
    if (v23 != v24)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v21 - 1) = v25;
        v21 -= 8;
      }
      while (v23 != v24);
      xpc_type_t v23 = (char *)*v9;
    }
    *(void *)(a1 + 24) = v21;
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = v22;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *unint64_t v13 = 0;
    uint64_t v15 = v13 + 1;
  }
  *(void *)(a1 + 32) = v15;
  *(_DWORD *)(a1 + 144) = 0;
  std::string::size_type v27 = *a2;
  std::string::size_type v26 = a2[1];
  if (*a2 != v26)
  {
    uint64_t v42 = v9;
    char v28 = 1;
    unsigned int v29 = 1;
    while (1)
    {
      long long v30 = (void *)(v27 + 24);
      size_t v31 = strlen("<eps>");
      if (*(char *)(v27 + 47) < 0)
      {
        if (v31 != *(void *)(v27 + 32))
        {
          long long v30 = (void *)*v30;
          goto LABEL_32;
        }
        if (v31 == -1) {
LABEL_52:
        }
          sub_100018C34();
        long long v30 = (void *)*v30;
      }
      else
      {
        if (v31 != *(unsigned __int8 *)(v27 + 47)) {
          goto LABEL_32;
        }
        if (v31 == -1) {
          goto LABEL_52;
        }
      }
      if (!memcmp(v30, "<eps>", v31))
      {
        uint64_t v32 = RXOSLog();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          std::string::size_type v33 = v27;
          if (*(char *)(v27 + 23) < 0) {
            std::string::size_type v33 = *(void *)v27;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Word Inserted : %s", (uint8_t *)&buf, 0xCu);
        }
        goto LABEL_44;
      }
LABEL_32:
      sub_100009CF0(&buf, (char *)v30);
      *(void *)(a1 + 88) = std::stoull(&buf, 0, 10);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
        if ((v28 & 1) == 0)
        {
LABEL_36:
          unint64_t v34 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
          unint64_t v35 = v34 >> 3;
          if (v29 >= (v34 >> 3))
          {
            char v28 = 0;
          }
          else
          {
            uint64_t v36 = (v34 >> 3);
            uint64_t v37 = 8 * v29;
            do
            {
              *(_DWORD *)(a1 + 144) = v29;
              RDQSRResultLMNodeBuilder::EvaluateNextLMNode((RDQSRResultLMNodeBuilder *)a1, *(_DWORD *)(*(void *)(a1 + 24) + v37));
              if (v36 == (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3)
              {
                v38 = RXOSLog();
                if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Search failed!", (uint8_t *)&buf, 2u);
                }
              }
              ++v29;
              v37 += 8;
            }
            while (v35 != v29);
            char v28 = 0;
            unsigned int v29 = v35;
          }
          goto LABEL_44;
        }
      }
      else if ((v28 & 1) == 0)
      {
        goto LABEL_36;
      }
      RDQSRResultLMNodeBuilder::EvaluateLMNode((RDQSRResultLMNodeBuilder *)a1, 0);
      char v28 = 0;
      *(_DWORD *)(a1 + 144) = 0;
LABEL_44:
      v27 += 48;
      if (v27 == v26)
      {
        uint64_t v15 = *(void **)(a1 + 32);
        unint64_t v9 = v42;
        goto LABEL_47;
      }
    }
  }
  unsigned int v29 = 1;
LABEL_47:
  uint64_t v39 = v29;
  long long v40 = (char *)*v9;
  if (v29 < (unint64_t)(((uint64_t)v15 - *v9) >> 3))
  {
    do
    {
      if (RDQSRResultLMNodeBuilder::LMNodeIsTerminal((RDQSRResultLMNodeBuilder *)a1, *(_DWORD *)&v40[8 * v39]))*(_DWORD *)(a1 + 148) = v29; {
      long long v40 = *(char **)(a1 + 24);
      }
      uint64_t v39 = ++v29;
    }
    while (v29 < (unint64_t)((uint64_t)(*(void *)(a1 + 32) - (void)v40) >> 3));
  }
  return a1;
}

void sub_100015B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10001B844(v23, *v21);
  sub_10001B7F8(v20 + 48);
  uint64_t v25 = *v22;
  if (*v22)
  {
    *(void *)(v20 + 32) = v25;
    operator delete(v25);
  }
  std::string::size_type v26 = *(void **)v20;
  if (*(void *)v20)
  {
    *(void *)(v20 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void RDQSRResultLMNodeBuilder::EvaluateLMNode(RDQSRResultLMNodeBuilder *this, unsigned int a2)
{
  uint64_t v3 = (_OWORD *)(*(void *)this + 48 * a2);
  long long v4 = v3[2];
  *(_OWORD *)std::string::size_type v26 = *v3;
  long long v27 = v3[1];
  *(_OWORD *)xarray = v4;
  switch(LOBYTE(v26[0]))
  {
    case 0xA:
      if (!xarray[0]) {
        goto LABEL_31;
      }
      if (v26[2])
      {
        size_t v6 = 0;
        do
        {
          uint64_t int64 = xpc_array_get_uint64(xarray[0], v6);
          unsigned int LMNode = RDQSRResultLMNodeBuilder::FindLMNode(this, a2, v6, 0, 0, uint64);
          RDQSRResultLMNodeBuilder::EvaluateLMNode(this, LMNode);
          ++v6;
        }
        while (v26[2] != v6);
      }
      break;
    case 0xB:
      if (!xarray[0] || !v26[2]) {
        goto LABEL_31;
      }
      uint64_t v9 = xpc_array_get_uint64(xarray[0], 0);
      unsigned int v10 = RDQSRResultLMNodeBuilder::FindLMNode(this, a2, 0, 0, 0, v9);
      RDQSRResultLMNodeBuilder::EvaluateLMNode(this, v10);
      break;
    case 0xC:
      goto LABEL_12;
    case 0xD:
      if (!sub_10001BAC8((void *)this + 6, (unint64_t *)&v27))
      {
        unsigned int v29 = &v27;
        *((_DWORD *)sub_100018D50((uint64_t)this + 48, (unint64_t *)&v27, (uint64_t)&unk_1000CA487, (void **)&v29)+ 6) = a2;
      }
LABEL_12:
      if (*((void *)this + 11) == (void)v27)
      {
        unint64_t v11 = *((void *)this + 5);
        uint64_t v12 = *((unsigned int *)this + 36);
        unint64_t v13 = (unint64_t *)*((void *)this + 4);
        if ((unint64_t)v13 >= v11)
        {
          uint64_t v15 = *((void *)this + 3);
          uint64_t v16 = ((uint64_t)v13 - v15) >> 3;
          if ((unint64_t)(v16 + 1) >> 61) {
            sub_100019424();
          }
          uint64_t v17 = v11 - v15;
          uint64_t v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
            uint64_t v18 = v16 + 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            uint64_t v20 = (char *)sub_10001943C((uint64_t)this + 40, v19);
          }
          else {
            uint64_t v20 = 0;
          }
          v21 = &v20[8 * v16];
          CFMutableArrayRef v22 = &v20[8 * v19];
          *(void *)v21 = a2 | (unint64_t)(v12 << 32);
          unint64_t v14 = v21 + 8;
          CFIndex v24 = (char *)*((void *)this + 3);
          uint64_t v23 = (char *)*((void *)this + 4);
          if (v23 != v24)
          {
            do
            {
              uint64_t v25 = *((void *)v23 - 1);
              v23 -= 8;
              *((void *)v21 - 1) = v25;
              v21 -= 8;
            }
            while (v23 != v24);
            uint64_t v23 = (char *)*((void *)this + 3);
          }
          *((void *)this + 3) = v21;
          *((void *)this + 4) = v14;
          *((void *)this + 5) = v22;
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *unint64_t v13 = a2 | (unint64_t)(v12 << 32);
          unint64_t v14 = v13 + 1;
        }
        *((void *)this + 4) = v14;
      }
      break;
    default:
      break;
  }
  if ((v26[0] & 0x400) != 0) {
LABEL_31:
  }
    RDQSRResultLMNodeBuilder::EvaluateParentLMNode(this, *(unsigned int *)&v26[4], v26[3]);
}

void RDQSRResultLMNodeBuilder::EvaluateNextLMNode(RDQSRResultLMNodeBuilder *this, unsigned int a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)this + 48 * a2);
  int v4 = *v3;
  int v5 = *((unsigned __int16 *)v3 + 1);
  __int16 v6 = *((_WORD *)v3 + 3);
  unsigned int v7 = *((_DWORD *)v3 + 2);
  long long v8 = (void *)*((void *)v3 + 3);
  int v9 = (v3[1] >> 3) & 1;
  if (v5 == 0xFFFF) {
    int v9 = 0;
  }
  if (v4 == 13)
  {
    if (!v9) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v4 == 12 && (v9 & 1) != 0)
  {
LABEL_8:
    unsigned int LMNode = RDQSRResultLMNodeBuilder::FindLMNode(this, v7, v6, (unsigned __int16)v5 + 1, v8, 0);
    RDQSRResultLMNodeBuilder::EvaluateLMNode(this, LMNode);
  }
LABEL_9:
  RDQSRResultLMNodeBuilder::EvaluateParentLMNode(this, v7, v6);
}

uint64_t RDQSRResultLMNodeBuilder::LMNodeIsTerminal(RDQSRResultLMNodeBuilder *this, unsigned int a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (unsigned __int8 *)(*(void *)this + 48 * a2);
  for (unsigned int i = *((_DWORD *)v3 + 2); i; unsigned int i = *((_DWORD *)v3 + 2))
  {
    unsigned int v6 = i;
    int v7 = *(unsigned __int8 *)(v2 + 48 * i);
    if (v7 != 10)
    {
      if (v7 == 11)
      {
        uint64_t v8 = v2 + 48 * v6;
        int v9 = (unsigned __int16 *)(v8 + 4);
        unsigned int v10 = (xpc_object_t *)(v8 + 32);
        size_t v11 = *((unsigned __int16 *)v3 + 3) + 1;
        while (v11 < *v9)
        {
          uint64_t int64 = xpc_array_get_uint64(*v10, v11);
          unsigned int LMNode = RDQSRResultLMNodeBuilder::FindLMNode(this, v6, v11++, 0, 0, uint64);
          if ((RDQSRResultLMNodeBuilder::LMNodeIsOptional(this, LMNode) & 1) == 0) {
            return 0;
          }
        }
      }
      else
      {
        __RXAbort(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SpeechRecognitionCore/Daemon/RDQSRResult.cc", 1313, 0, @"LMNodeIsTerminal unexpected parent node type %d\n", *v3);
      }
    }
    uint64_t v2 = *(void *)this;
    uint64_t v3 = (unsigned __int8 *)(*(void *)this + 48 * v6);
  }
  return 1;
}

uint64_t RDQSRResultLMNodeBuilder::FindLMNode(RDQSRResultLMNodeBuilder *this, unsigned int a2, __int16 a3, __int16 a4, void *a5, unint64_t a6)
{
  uint64_t v12 = (char *)this + 104;
  uint64_t v11 = *(void *)this;
  unint64_t v39 = a6;
  *(_DWORD *)(v11 + 8) = a2;
  *(_WORD *)(v11 + 6) = a3;
  *(_WORD *)(v11 + 2) = a4;
  unint64_t v13 = (uint64_t **)((char *)this + 96);
  LODWORD(v40) = 0;
  uint64_t v14 = sub_10001B898((uint64_t)this + 96, (unsigned int *)&v40);
  if (v12 != (char *)v14) {
    return *(unsigned int *)(v14 + 28);
  }
  if (a2) {
    uint64_t v16 = (uint64_t ***)(*(void *)this + 48 * a2 + 40);
  }
  else {
    uint64_t v16 = (uint64_t ***)((char *)this + 128);
  }
  uint64_t v17 = *v16;
  v38 = *v16;
  if (a5 || (long long v40 = &v39, (a5 = (void *)sub_10001AC70(v17, &v39, (uint64_t)&unk_1000CA487, (uint64_t **)&v40)[5]) != 0))
  {
    char int64 = xpc_dictionary_get_int64(a5, kRDKeyObjectType);
    uchar int64 = xpc_dictionary_get_uint64(a5, kRDKeyOptions);
    xpc_object_t value = xpc_dictionary_get_value(a5, kRDKeyChildren);
    uint64_t v12 = (char *)xpc_dictionary_get_uint64(a5, kRDKeyObjectID);
    char v36 = uint64;
    if (value) {
      __int16 count = xpc_array_get_count(value);
    }
    else {
      __int16 count = 0;
    }
  }
  else
  {
    xpc_object_t value = 0;
    __int16 count = 0;
    char v36 = 0;
    char int64 = 11;
  }
  uint64_t v22 = *(void *)this;
  unint64_t v21 = *((void *)this + 1);
  uint64_t v23 = (uint64_t)(v21 - *(void *)this) / 48;
  LODWORD(v40) = v23;
  unint64_t v24 = *((void *)this + 2);
  if (v21 >= v24)
  {
    if ((unint64_t)(v23 + 1) > 0x555555555555555) {
      sub_100019424();
    }
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v22) >> 4);
    uint64_t v27 = 2 * v26;
    if (2 * v26 <= v23 + 1) {
      uint64_t v27 = v23 + 1;
    }
    if (v26 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v28 = 0x555555555555555;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28) {
      unsigned int v29 = (char *)sub_10001AFFC((uint64_t)this + 16, v28);
    }
    else {
      unsigned int v29 = 0;
    }
    long long v30 = &v29[48 * v23];
    size_t v31 = &v29[48 * v28];
    *long long v30 = int64;
    v30[1] = v36;
    *((_WORD *)v30 + 1) = a4;
    *((_WORD *)v30 + 2) = count;
    *((_WORD *)v30 + 3) = a3;
    *((_DWORD *)v30 + 2) = a2;
    *((void *)v30 + 2) = v12;
    *((void *)v30 + 3) = a5;
    *((void *)v30 + 4) = value;
    *((void *)v30 + 5) = v38;
    uint64_t v25 = v30 + 48;
    std::string::size_type v33 = *(char **)this;
    uint64_t v32 = (char *)*((void *)this + 1);
    if (v32 != *(char **)this)
    {
      do
      {
        long long v34 = *((_OWORD *)v32 - 3);
        long long v35 = *((_OWORD *)v32 - 1);
        *((_OWORD *)v30 - 2) = *((_OWORD *)v32 - 2);
        *((_OWORD *)v30 - 1) = v35;
        *((_OWORD *)v30 - 3) = v34;
        v30 -= 48;
        v32 -= 48;
      }
      while (v32 != v33);
      uint64_t v32 = *(char **)this;
    }
    *(void *)this = v30;
    *((void *)this + 1) = v25;
    *((void *)this + 2) = v31;
    if (v32) {
      operator delete(v32);
    }
  }
  else
  {
    *(unsigned char *)unint64_t v21 = int64;
    *(unsigned char *)(v21 + 1) = v36;
    *(_WORD *)(v21 + 2) = a4;
    *(_WORD *)(v21 + 4) = count;
    *(_WORD *)(v21 + 6) = a3;
    *(_DWORD *)(v21 + 8) = a2;
    *(void *)(v21 + 16) = v12;
    *(void *)(v21 + 24) = a5;
    uint64_t v25 = (char *)(v21 + 48);
    *(void *)(v21 + 32) = value;
    *(void *)(v21 + 40) = v38;
  }
  *((void *)this + 1) = v25;
  sub_10001B9A8(v13, (unsigned int *)&v40, &v40);
  return v40;
}

void RDQSRResultLMNodeBuilder::EvaluateParentLMNode(RDQSRResultLMNodeBuilder *this, unsigned int a2, __int16 a3)
{
  if (!a2) {
    return;
  }
  unsigned int v4 = a2;
  while (1)
  {
    unsigned int v6 = v4;
    __int16 v7 = a3;
    uint64_t v8 = (unsigned __int8 *)(*(void *)this + 48 * v4);
    int v9 = *v8;
    int v10 = *((unsigned __int16 *)v8 + 1);
    a3 = *((_WORD *)v8 + 3);
    unsigned int v4 = *((_DWORD *)v8 + 2);
    int v11 = (v8[1] >> 3) & 1;
    if (v10 == 0xFFFF) {
      int v11 = 0;
    }
    if (v9 != 10) {
      break;
    }
    if (v11) {
      goto LABEL_11;
    }
LABEL_12:
    if (!v4) {
      return;
    }
  }
  if (v9 != 11)
  {
    __RXAbort(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SpeechRecognitionCore/Daemon/RDQSRResult.cc", 1289, 0, @"EvaluateParentLMNode unexpected node type %d\n", *v8);
    return;
  }
  __int16 v12 = v7 + 1;
  if (*((unsigned __int16 *)v8 + 2) <= (unsigned __int16)(v7 + 1))
  {
    if (!v11) {
      goto LABEL_12;
    }
LABEL_11:
    unsigned int LMNode = RDQSRResultLMNodeBuilder::FindLMNode(this, v4, a3, (unsigned __int16)v10 + 1, *((void **)v8 + 3), 0);
    RDQSRResultLMNodeBuilder::EvaluateLMNode(this, LMNode);
    goto LABEL_12;
  }
  uchar int64 = xpc_array_get_uint64(*((xpc_object_t *)v8 + 4), (unsigned __int16)(v7 + 1));
  unsigned int v15 = RDQSRResultLMNodeBuilder::FindLMNode(this, v6, v12, v10, 0, uint64);
  RDQSRResultLMNodeBuilder::EvaluateLMNode(this, v15);
}

uint64_t RDQSRResultLMNodeBuilder::LMNodeIsOptional(RDQSRResultLMNodeBuilder *this, unsigned int a2)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)this + 48 * a2);
  if ((v2[1] & 4) != 0) {
    return 1;
  }
  size_t v5 = *((unsigned __int16 *)v2 + 2);
  unsigned int v6 = (void *)*((void *)v2 + 4);
  int v7 = *v2;
  if (v7 == 10)
  {
    if (v5)
    {
      size_t v17 = 0;
      size_t v18 = v5 - 1;
      do
      {
        uchar int64 = xpc_array_get_uint64(v6, v17);
        unsigned int LMNode = RDQSRResultLMNodeBuilder::FindLMNode(this, a2, v17, 0, 0, uint64);
        uint64_t result = RDQSRResultLMNodeBuilder::LMNodeIsOptional(this, LMNode);
        if (result) {
          break;
        }
      }
      while (v18 != v17++);
      return result;
    }
    return 1;
  }
  if (v7 != 11) {
    return 0;
  }
  if (!v5) {
    return 1;
  }
  uint64_t v8 = xpc_array_get_uint64(v6, 0);
  unsigned int v9 = RDQSRResultLMNodeBuilder::FindLMNode(this, a2, 0, 0, 0, v8);
  int IsOptional = RDQSRResultLMNodeBuilder::LMNodeIsOptional(this, v9);
  uint64_t result = 0;
  if (IsOptional)
  {
    size_t v12 = 1;
    do
    {
      size_t v13 = v12;
      if (v5 == v12) {
        break;
      }
      uint64_t v14 = xpc_array_get_uint64(v6, v12);
      unsigned int v15 = RDQSRResultLMNodeBuilder::FindLMNode(this, a2, v13, 0, 0, v14);
      char v16 = RDQSRResultLMNodeBuilder::LMNodeIsOptional(this, v15);
      size_t v12 = v13 + 1;
    }
    while ((v16 & 1) != 0);
    return v13 >= v5;
  }
  return result;
}

void RDQSRResultLMNodeBuilder::~RDQSRResultLMNodeBuilder(RDQSRResultLMNodeBuilder *this)
{
  xpc_release(*(xpc_object_t *)(*(void *)this + 32));
  sub_10001B844((uint64_t)this + 96, *((void **)this + 13));
  sub_10001B7F8((uint64_t)this + 48);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t RDQSRResultModelBuilder::RDQSRResultModelBuilder(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, int a5, int a6)
{
  *(void *)a1 = a2;
  long long v7 = *a3;
  long long v8 = a3[1];
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 48) = a5;
  *(_DWORD *)(a1 + 52) = a6;
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_100009CF0((void *)(a1 + 128), "");
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = a1 + 208;
  *(_DWORD *)(a1 + 232) = 0;
  return a1;
}

void sub_100016714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 + 127) < 0) {
    operator delete(*(void **)(v10 + 104));
  }
  a10 = (void **)(v10 + 80);
  sub_10001BBCC(&a10);
  sub_10001BB7C(v11, 0);
  _Unwind_Resume(a1);
}

BOOL RDQSRResultModelBuilder::spellMode(RDQSRResultModelBuilder *this)
{
  return *((_DWORD *)this + 13) < 2u;
}

void RDQSRResultModelBuilder::AddResultNodeForCurrentResult(RDQSRResultModelBuilder *this)
{
  unint64_t v1 = *((int *)this + 58);
  if ((int)v1 < 1 || *((_DWORD *)this + 12) == 1)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*((void *)this + 5) + 8) - **((void **)this + 5)) >> 3) > v1) {
      operator new();
    }
    sub_10001AC58();
  }
  uint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "ERROR: More than 1 result only allowed for close match results", v3, 2u);
  }
}

void sub_1000168F0()
{
}

uint64_t RDQSRResultModelBuilder::GetResulTokenForIndex(RDQSRResultModelBuilder *this, unsigned int a2)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  unint64_t v3 = *((int *)this + 58);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[1] - *v2) >> 3) <= v3) {
    sub_10001AC58();
  }
  unsigned int v4 = (void *)(*v2 + 24 * (int)v3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 4) <= a2) {
    sub_10001AC58();
  }
  size_t v5 = (const char *)(*v4 + 48 * a2);
  int v6 = *((_DWORD *)this + 12);
  uint64_t v7 = *(void *)this;
  return RDQSRResult::GetResultToken(v7, v5, v6);
}

void RDQSRResultModelBuilder::AddResultNode(RDQSRResultModelBuilder *a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v6 = a2[1];
  if (v6) {
    RDQSRResultModelBuilder::AddResultNode(a1, *(void *)(*((void *)a1 + 8) + 24) + 8 * v6, a3 - 1);
  }
  unsigned int v7 = *a2;
  uint64_t ResulTokenForIndex = RDQSRResultModelBuilder::GetResulTokenForIndex(a1, a3);
  RDQSRResultModelBuilder::AddResultNode((uint64_t)a1, v7, ResulTokenForIndex);
}

void RDQSRResultModelBuilder::EndOfResult(RDQSRResultModelBuilder *this)
{
  if (*((unsigned char *)this + 56)) {
    RDQSRResultModelBuilder::ProcessCurrentAdlib(this);
  }
  RDQSRResultModelBuilder::PropagateTimestamps(this, 0);
}

void RDQSRResultModelBuilder::AddResultNode(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v7 = **(void **)(a1 + 64);
  uint64_t v8 = v7 + 48 * a2;
  if (!*(unsigned char *)(a1 + 56) || (*(unsigned char *)v8 == 13 ? (BOOL v9 = *(unsigned __int16 *)(v8 + 2) == 0) : (BOOL v9 = 1), v9))
  {
    uint64_t v10 = *(unsigned int *)(v7 + 48 * a2 + 8);
    if (*(_DWORD *)(v7 + 48 * a2 + 8))
    {
      uint64_t v11 = *(void *)(a1 + 88);
      if (*(void *)(a1 + 80) == v11)
      {
        RDQSRResultModelBuilder::AddResultNode(a1, v10, 0);
      }
      else
      {
        if (*(unsigned char *)(a1 + 56)) {
          RDQSRResultModelBuilder::ProcessCurrentAdlib((RDQSRResultModelBuilder *)a1);
        }
        if (*(_DWORD *)(v11 - 24) != v10) {
          RDQSRResultModelBuilder::PushAncestors((RDQSRResultModelBuilder *)a1, v10);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 56)) {
    goto LABEL_56;
  }
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  size_t v13 = kRDKeyObjectType;
  uint64_t v14 = v7 + 48 * a2;
  int64_t int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(v14 + 24), kRDKeyObjectType);
  xpc_dictionary_set_int64(v12, v13, int64);
  char v16 = kRDKeyObjectID;
  uint64_t int64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(v14 + 24), kRDKeyObjectID);
  xpc_dictionary_set_uint64(v12, v16, uint64);
  if (a3)
  {
    xpc_dictionary_set_uint64(v12, kRDKeyStartTime, *(void *)(*(void *)a1 + 104) + (unint64_t)(*(double *)(a3 + 24) * 1000.0));
    xpc_dictionary_set_uint64(v12, kRDKeyEndTime, *(void *)(*(void *)a1 + 104) + (unint64_t)(*(double *)(a3 + 32) * 1000.0));
  }
  if ((*(unsigned char *)v8 & 0xFE) == 0xA)
  {
    xpc_object_t v18 = xpc_array_create(0, 0);
    xpc_dictionary_set_value(v12, kRDKeyChildren, v18);
  }
  else
  {
    xpc_object_t v18 = 0;
  }
  if (*(_DWORD *)(v7 + 48 * a2 + 8))
  {
    xpc_array_append_value(*(xpc_object_t *)(*(void *)(a1 + 88) - 8), v12);
    if (v18)
    {
LABEL_22:
      unint64_t v19 = *(void *)(a1 + 96);
      unint64_t v20 = *(void *)(a1 + 88);
      if (v20 < v19)
      {
        *(_DWORD *)unint64_t v20 = a2;
        *(void *)(v20 + 8) = v12;
        *(void *)(v20 + 16) = v18;
LABEL_45:
        unint64_t v31 = v20 + 24;
        *(void *)(a1 + 88) = v20 + 24;
LABEL_54:
        *(void *)(a1 + 88) = v31;
        goto LABEL_55;
      }
      uint64_t v22 = *(void *)(a1 + 80);
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100019424();
      }
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x555555555555555) {
        unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v26 = v24;
      }
      uint64_t v77 = a1 + 96;
      uint64_t v27 = (char *)sub_100019D14(a1 + 96, v26);
      unint64_t v28 = &v27[24 * v23];
      __p[0] = v27;
      __p[1] = v28;
      v76 = &v27[24 * v29];
      *(_DWORD *)unint64_t v28 = a2;
      *((void *)v28 + 1) = v12;
      *((void *)v28 + 2) = v18;
      v75 = v28 + 24;
      sub_10001BC90((uint64_t *)(a1 + 80), __p);
      goto LABEL_53;
    }
  }
  else
  {
    unint64_t v21 = *(void **)(a1 + 72);
    if (v21) {
      xpc_release(v21);
    }
    *(void *)(a1 + 72) = xpc_retain(v12);
    if (v18) {
      goto LABEL_22;
    }
  }
  if (*(unsigned char *)v8 == 13)
  {
    *(unsigned char *)(a1 + 56) = 1;
    if (*(char *)(a1 + 127) < 0)
    {
      **(unsigned char **)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 104) = 0;
      *(unsigned char *)(a1 + 127) = 0;
    }
    *(void *)(a1 + 224) = 0;
    if (*(char *)(a1 + 151) < 0)
    {
      **(unsigned char **)(a1 + 128) = 0;
      *(void *)(a1 + 136) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 128) = 0;
      *(unsigned char *)(a1 + 151) = 0;
    }
    unint64_t v30 = *(void *)(a1 + 96);
    *(void *)(a1 + 160) = *(void *)(a1 + 152);
    *(void *)(a1 + 184) = *(void *)(a1 + 176);
    unint64_t v20 = *(void *)(a1 + 88);
    if (v20 < v30)
    {
      *(_DWORD *)unint64_t v20 = a2;
      *(void *)(v20 + 8) = v12;
      *(void *)(v20 + 16) = 0;
      goto LABEL_45;
    }
    uint64_t v32 = *(void *)(a1 + 80);
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v32) >> 3);
    unint64_t v34 = v33 + 1;
    if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100019424();
    }
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v32) >> 3);
    if (2 * v35 > v34) {
      unint64_t v34 = 2 * v35;
    }
    if (v35 >= 0x555555555555555) {
      unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v36 = v34;
    }
    uint64_t v77 = a1 + 96;
    uint64_t v37 = (char *)sub_100019D14(a1 + 96, v36);
    v38 = &v37[24 * v33];
    __p[0] = v37;
    __p[1] = v38;
    v76 = &v37[24 * v39];
    *(_DWORD *)v38 = a2;
    *((void *)v38 + 1) = v12;
    *((void *)v38 + 2) = 0;
    v75 = v38 + 24;
    sub_10001BC90((uint64_t *)(a1 + 80), __p);
LABEL_53:
    unint64_t v31 = *(void *)(a1 + 88);
    sub_10001BDE8((uint64_t)__p);
    goto LABEL_54;
  }
  if (v12) {
    xpc_release(v12);
  }
LABEL_55:
  if (!*(unsigned char *)(a1 + 56)) {
    return;
  }
LABEL_56:
  if (a3)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_10006770C(__p, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v75 = *(void **)(a3 + 16);
    }
    if (SHIBYTE(v75) >= 0) {
      uint64_t v41 = __p;
    }
    else {
      uint64_t v41 = (void **)__p[0];
    }
    if (SHIBYTE(v75) >= 0) {
      std::string::size_type v42 = HIBYTE(v75);
    }
    else {
      std::string::size_type v42 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(a1 + 104), (const std::string::value_type *)v41, v42);
    if (SHIBYTE(v75) < 0) {
      operator delete(__p[0]);
    }
    if (*(char *)(a3 + 23) < 0)
    {
      sub_10006770C(__p, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v75 = *(void **)(a3 + 16);
    }
    if (SHIBYTE(v75) >= 0) {
      int v43 = __p;
    }
    else {
      int v43 = (void **)__p[0];
    }
    if (SHIBYTE(v75) >= 0) {
      std::string::size_type v44 = HIBYTE(v75);
    }
    else {
      std::string::size_type v44 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(a1 + 128), (const std::string::value_type *)v43, v44);
    if (SHIBYTE(v75) < 0) {
      operator delete(__p[0]);
    }
    if (*(unsigned char *)(a3 + 56) && (RXIsLocaleWithNoSpaceInPostITN() & 1) == 0) {
      std::string::push_back((std::string *)(a1 + 128), 32);
    }
    uint64_t v45 = *(void *)(a1 + 224);
    uint64_t v46 = *(void *)(v7 + 48 * a2 + 16);
    if (!v45 || v45 == v46)
    {
      *(void *)(a1 + 224) = v46;
    }
    else
    {
      int v47 = RXOSLog();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Multiple adlib IDs, some data will be lost", (uint8_t *)__p, 2u);
      }
    }
    std::string::push_back((std::string *)(a1 + 104), 0);
    unint64_t v48 = *(void *)(*(void *)a1 + 104) + (unint64_t)(*(double *)(a3 + 24) * 1000.0);
    int v49 = *(unint64_t **)(a1 + 160);
    unint64_t v50 = *(void *)(a1 + 168);
    if ((unint64_t)v49 >= v50)
    {
      int v52 = *(unint64_t **)(a1 + 152);
      uint64_t v53 = v49 - v52;
      if ((unint64_t)(v53 + 1) >> 61) {
        goto LABEL_123;
      }
      unint64_t v54 = v50 - (void)v52;
      unint64_t v55 = (uint64_t)(v50 - (void)v52) >> 2;
      if (v55 <= v53 + 1) {
        unint64_t v55 = v53 + 1;
      }
      if (v54 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v55;
      }
      if (v56)
      {
        v57 = (char *)sub_10001943C(a1 + 168, v56);
        int v52 = *(unint64_t **)(a1 + 152);
        int v49 = *(unint64_t **)(a1 + 160);
      }
      else
      {
        v57 = 0;
      }
      v58 = (unint64_t *)&v57[8 * v53];
      v59 = &v57[8 * v56];
      unint64_t *v58 = v48;
      v51 = v58 + 1;
      while (v49 != v52)
      {
        unint64_t v60 = *--v49;
        *--v58 = v60;
      }
      *(void *)(a1 + 152) = v58;
      *(void *)(a1 + 160) = v51;
      *(void *)(a1 + 168) = v59;
      if (v52) {
        operator delete(v52);
      }
    }
    else
    {
      *int v49 = v48;
      v51 = v49 + 1;
    }
    *(void *)(a1 + 160) = v51;
    unint64_t v61 = *(void *)(*(void *)a1 + 104) + (unint64_t)(*(double *)(a3 + 32) * 1000.0);
    v62 = *(unint64_t **)(a1 + 184);
    unint64_t v63 = *(void *)(a1 + 192);
    if ((unint64_t)v62 < v63)
    {
      unint64_t *v62 = v61;
      v64 = v62 + 1;
LABEL_121:
      *(void *)(a1 + 184) = v64;
      return;
    }
    v65 = *(unint64_t **)(a1 + 176);
    uint64_t v66 = v62 - v65;
    if (!((unint64_t)(v66 + 1) >> 61))
    {
      unint64_t v67 = v63 - (void)v65;
      unint64_t v68 = (uint64_t)(v63 - (void)v65) >> 2;
      if (v68 <= v66 + 1) {
        unint64_t v68 = v66 + 1;
      }
      if (v67 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v69 = v68;
      }
      if (v69)
      {
        v70 = (char *)sub_10001943C(a1 + 192, v69);
        v65 = *(unint64_t **)(a1 + 176);
        v62 = *(unint64_t **)(a1 + 184);
      }
      else
      {
        v70 = 0;
      }
      int v71 = (unint64_t *)&v70[8 * v66];
      unsigned int v72 = &v70[8 * v69];
      *int v71 = v61;
      v64 = v71 + 1;
      while (v62 != v65)
      {
        unint64_t v73 = *--v62;
        *--int v71 = v73;
      }
      *(void *)(a1 + 176) = v71;
      *(void *)(a1 + 184) = v64;
      *(void *)(a1 + 192) = v72;
      if (v65) {
        operator delete(v65);
      }
      goto LABEL_121;
    }
LABEL_123:
    sub_100019424();
  }
  long long v40 = RXOSLog();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "TokenPtr is NULL for adlib mode!", (uint8_t *)__p, 2u);
  }
}

void sub_1000171E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void RDQSRResultModelBuilder::ProcessCurrentAdlib(RDQSRResultModelBuilder *this)
{
  sub_10001C0D8((std::locale *)&v1, " +$", 0);
}

void sub_100017524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v23 - 40) = v22;
  sub_100019278((void ***)(v23 - 40));
  __p = &a9;
  sub_100019278((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t RDQSRResultModelBuilder::PushAncestors(RDQSRResultModelBuilder *this, uint64_t a2)
{
  unsigned int v4 = (int *)*((void *)this + 10);
  size_t v5 = (uint64_t *)((char *)this + 80);
  uint64_t v6 = *((void *)this + 11) - (void)v4;
  if (v6)
  {
    unint64_t v7 = 0;
    unint64_t v8 = v6 / 24;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    while (1)
    {
      int v9 = *v4;
      v4 += 6;
      ++v7;
      if (v9 == a2) {
        break;
      }
      if (v8 == v7) {
        goto LABEL_6;
      }
    }
    RDQSRResultModelBuilder::PropagateTimestamps(this, v7);
    return sub_10001778C(v5, v7);
  }
  else
  {
LABEL_6:
    RDQSRResultModelBuilder::PushAncestors(this, *(_DWORD *)(**((void **)this + 8) + 48 * a2 + 8));
    return RDQSRResultModelBuilder::AddResultNode(this, a2, 0);
  }
}

void RDQSRResultModelBuilder::PropagateTimestamps(RDQSRResultModelBuilder *this, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 3);
  if (v2 > a2)
  {
    uint64_t v5 = 8 * ((uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 3);
    do
    {
      uint64_t v6 = *((void *)this + 10) + v5;
      unint64_t v7 = *(void **)(v6 - 8);
      if (v7)
      {
        size_t count = xpc_array_get_count(*(xpc_object_t *)(v6 - 8));
        if (count)
        {
          size_t v9 = count;
          uint64_t v10 = *(void **)(*((void *)this + 10) + v5 - 16);
          if (!xpc_dictionary_get_uint64(v10, kRDKeyStartTime))
          {
            uint64_t v11 = kRDKeyStartTime;
            xpc_object_t value = xpc_array_get_value(v7, 0);
            uint64_t int64 = xpc_dictionary_get_uint64(value, kRDKeyStartTime);
            xpc_dictionary_set_uint64(v10, v11, uint64);
          }
          if (!xpc_dictionary_get_uint64(v10, kRDKeyEndTime))
          {
            uint64_t v14 = kRDKeyEndTime;
            xpc_object_t v15 = xpc_array_get_value(v7, v9 - 1);
            uint64_t v16 = xpc_dictionary_get_uint64(v15, kRDKeyEndTime);
            xpc_dictionary_set_uint64(v10, v14, v16);
          }
        }
      }
      --v2;
      v5 -= 24;
    }
    while (v2 > a2);
  }
}

uint64_t sub_10001778C(uint64_t *a1, unint64_t a2)
{
  uint64_t result = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((result - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return sub_10001BE38(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (result != v7)
      uint64_t result = sub_10001BC50(result - 24);
    a1[1] = v7;
  }
  return result;
}

xpc_object_t RDQSRResultModelBuilder::xpcObjectFromTokenSausageVec(_DWORD *a1, uint64_t *a2)
{
  if (*a2 == a2[1]) {
    return 0;
  }
  xpc_object_t result = xpc_array_create(0, 0);
  uint64_t v5 = *a2;
  if (a2[1] != *a2)
  {
    xpc_object_t v29 = result;
    uint64_t v6 = 0;
    unint64_t v28 = a2;
    do
    {
      v37[0] = 0;
      v37[1] = 0;
      unint64_t v36 = v37;
      xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t xarray = xpc_array_create(0, 0);
      uint64_t v30 = v6;
      unint64_t v31 = v7;
      unint64_t v8 = (uint64_t *)(v5 + 24 * v6);
      size_t v9 = v8 + 1;
      uint64_t v10 = *v8;
      if (v8[1] == *v8)
      {
        unint64_t value = 0;
        uint64_t v12 = 0;
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        unint64_t value = 0;
        do
        {
          sub_100009CF0(&v35, "");
          size_t v13 = (uint64_t *)(v10 + 24 * v11);
          uint64_t v14 = v13 + 1;
          uint64_t v15 = *v13;
          if (v13[1] != *v13)
          {
            unint64_t v16 = 0;
            do
            {
              size_t v17 = *(long long **)(v15 + 8 * v16);
              if (*((char *)v17 + 23) < 0)
              {
                sub_10006770C(&__p, *(void **)v17, *((void *)v17 + 1));
              }
              else
              {
                long long v18 = *v17;
                __p.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = __p.__r_.__value_.__l.__size_;
              }
              std::string::append(&v35, (const std::string::value_type *)p_p, size);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (*(unsigned char *)(*(void *)(v15 + 8 * v16) + 56)
                && (a1[12] || v16 != ((*v14 - *v13) >> 3) - 1)
                && (RXIsLocaleWithNoSpaceInPostITN() & 1) == 0)
              {
                std::string::append(&v35, " ");
              }
              if (!v11)
              {
                if (!v16) {
                  unint64_t value = *(void *)(*(void *)a1 + 104)
                }
                        + (unint64_t)(*(double *)(*(void *)v15 + 24) * 1000.0);
                if (v16 == -1 - 0x5555555555555555 * ((*v9 - *v8) >> 3)) {
                  uint64_t v12 = *(void *)(*(void *)a1 + 104)
                }
                      + (unint64_t)(*(double *)(*(void *)(v15 + 8 * v16) + 32) * 1000.0);
              }
              ++v16;
              uint64_t v15 = *v13;
            }
            while (v16 < (*v14 - *v13) >> 3);
          }
          std::string::size_type v21 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v21 = v35.__r_.__value_.__l.__size_;
          }
          if (v21 && v37 == (char **)sub_10001BF7C((uint64_t)&v36, (const void **)&v35.__r_.__value_.__l.__data_))
          {
            sub_1000B820C((uint64_t **)&v36, (const void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&v35);
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v22 = &v35;
            }
            else {
              uint64_t v22 = (std::string *)v35.__r_.__value_.__r.__words[0];
            }
            xpc_object_t v23 = xpc_string_create((const char *)v22);
            xpc_array_append_value(xarray, v23);
            xpc_release(v23);
            sub_1000B4A14((const void **)&v35.__r_.__value_.__l.__data_, &__p);
            std::string::size_type v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            char v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v24 = __p.__r_.__value_.__l.__size_;
            }
            if (v24)
            {
              sub_1000B820C((uint64_t **)&v36, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v26 = &__p;
              }
              else {
                unint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              xpc_object_t v27 = xpc_string_create((const char *)v26);
              xpc_array_append_value(xarray, v27);
              xpc_release(v27);
              char v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            if (v25 < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          ++v11;
          uint64_t v10 = *v8;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((*v9 - *v8) >> 3) > v11);
      }
      xpc_dictionary_set_value(v31, kRDKeyText, xarray);
      xpc_dictionary_set_uint64(v31, kRDKeyStartTime, value);
      xpc_dictionary_set_uint64(v31, kRDKeyEndTime, v12);
      xpc_release(xarray);
      xpc_array_append_value(v29, v31);
      xpc_release(v31);
      sub_1000192EC((uint64_t)&v36, v37[0]);
      uint64_t v6 = v30 + 1;
      uint64_t v5 = *v28;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v28[1] - *v28) >> 3) > v30 + 1);
    return v29;
  }
  return result;
}

void sub_100017C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,char *a30)
{
}

void RDQSRResultModelBuilder::tokenSausageVecFromNBestListForCurrentAdlib(RDQSRResultModelBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v2 = *((void *)this + 5);
  unint64_t v3 = *(void **)v2;
  std::string::size_type v21 = *(void **)(v2 + 8);
  if (*(void **)v2 != v21)
  {
    do
    {
      uint64_t v22 = 0;
      xpc_object_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v5 = v3[1];
      if (*v3 != v5)
      {
        uint64_t v6 = *v3 + 24;
        while (1)
        {
          size_t v7 = strlen("<eps>");
          if (*(char *)(v6 + 23) < 0)
          {
            if (v7 == *(void *)(v6 + 8))
            {
              if (v7 == -1) {
LABEL_40:
              }
                sub_100018C34();
              unint64_t v8 = *(char **)v6;
              if (!memcmp(*(const void **)v6, "<eps>", v7))
              {
LABEL_22:
                uint64_t v12 = RXOSLog();
                if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_34;
                }
                LOWORD(__str.__r_.__value_.__l.__data_) = 0;
                size_t v13 = v12;
                uint64_t v14 = "getAlternativesForAdlibs: <eps> grammar found";
LABEL_26:
                _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&__str, 2u);
                goto LABEL_34;
              }
            }
            else
            {
              unint64_t v8 = *(char **)v6;
            }
          }
          else
          {
            if (v7 == *(unsigned __int8 *)(v6 + 23))
            {
              if (v7 == -1) {
                goto LABEL_40;
              }
              if (!memcmp((const void *)v6, "<eps>", v7)) {
                goto LABEL_22;
              }
            }
            unint64_t v8 = (char *)v6;
          }
          sub_100009CF0(&__str, v8);
          uint64_t v9 = std::stoll(&__str, 0, 10);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (v9 == *((void *)this + 28)) {
            break;
          }
          uint64_t v11 = v6 + 24;
          v6 += 48;
          if (v11 == v5) {
            goto LABEL_34;
          }
        }
        uint64_t v10 = *((void *)this + 8);
        unint64_t v28 = v9;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
        if (*(unsigned char *)(**((void **)this + 8)
                      + 48 * *((unsigned int *)sub_100018D50(v10 + 48, &v28, (uint64_t)&unk_1000CA487, &__str) + 6)) != 13)
        {
          uint64_t v15 = RXOSLog();
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            goto LABEL_34;
          }
          LOWORD(__str.__r_.__value_.__l.__data_) = 0;
          size_t v13 = v15;
          uint64_t v14 = "getAlternativesForAdlibs: Non-adlib found in alternatives";
          goto LABEL_26;
        }
        if (RDQSRResult::GetResultToken(*(void *)this, (const char *)(v6 - 24), *((_DWORD *)this + 12))) {
          operator new();
        }
        unint64_t v16 = v22;
        if (v23 != v22)
        {
          size_t v17 = v23 - 1;
          do
          {
            uint64_t v18 = *v17;
            *size_t v17 = 0;
            if (v18) {
              sub_100019350((uint64_t)v17, v18);
            }
          }
          while (v17-- != v16);
        }
        xpc_object_t v23 = v16;
      }
LABEL_34:
      if (v22 != v23) {
        sub_100013234(&v25, (uint64_t)&v22);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
      sub_1000191C0((void ***)&__str);
      v3 += 3;
    }
    while (v3 != v21);
    if (v25 != v26) {
      sub_100013374(a2, (uint64_t)&v25);
    }
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  sub_100019C28((void ***)&__str);
}

void sub_1000180FC(_Unwind_Exception *a1)
{
  *(void *)(v1 - 88) = v4;
  sub_1000191C0((void ***)(v1 - 88));
  v4[0] = (void **)v5;
  sub_100019C28(v4);
  v5[0] = v3;
  sub_100019278(v5);
  _Unwind_Resume(a1);
}

void RDQSRResultModelBuilder::spellTokenSausageVecFromNBestListForCurrentAdlib(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unint64_t v3 = *(uint64_t ***)(a1 + 40);
  unint64_t v4 = *v3;
  uint64_t v30 = v3[1];
  if (*v3 == v30) {
    goto LABEL_68;
  }
  char v7 = 0;
  do
  {
    unint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v9 = *v4;
    uint64_t v8 = v4[1];
    while (1)
    {
      if (v9 == v8) {
        goto LABEL_61;
      }
      uint64_t v10 = (char *)(v9 + 24);
      if (*(char *)(v9 + 47) < 0) {
        uint64_t v10 = *(char **)v10;
      }
      sub_100009CF0(&__str, v10);
      uint64_t v11 = std::stoll(&__str, 0, 10);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v11 == *(void *)(a1 + 224)) {
        break;
      }
      v9 += 48;
    }
    uint64_t v12 = *(void *)(a1 + 64);
    __p.__r_.__value_.__r.__words[0] = v11;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    if (*(unsigned char *)(**(void **)(a1 + 64)
                  + 48
                  * *((unsigned int *)sub_100018D50(v12 + 48, (unint64_t *)&__p, (uint64_t)&unk_1000CA487, &__str)
                    + 6)) == 13)
    {
      uint64_t ResultToken = RDQSRResult::GetResultToken(*(void *)a1, (const char *)v9, *(_DWORD *)(a1 + 48));
      CFStringRef v14 = (const __CFString *)RXLocalizedStringForSpacebar();
      sub_1000B4838(v14, 0, v34);
      sub_100009CF0(&__p, "");
      if (!ResultToken)
      {
LABEL_43:
        if ((v7 & 1) == 0)
        {
          if (*(char *)(a2 + 23) < 0)
          {
            **(unsigned char **)a2 = 0;
            *(void *)(a2 + 8) = 0;
          }
          else
          {
            *(unsigned char *)a2 = 0;
            *(unsigned char *)(a2 + 23) = 0;
          }
        }
        uint64_t v22 = v36;
        if (v37 != v36)
        {
          xpc_object_t v23 = v37 - 1;
          do
          {
            uint64_t v24 = *v23;
            *xpc_object_t v23 = 0;
            if (v24) {
              sub_100019350((uint64_t)v23, v24);
            }
          }
          while (v23-- != v22);
        }
        uint64_t v37 = v22;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((char)v35 < 0) {
          operator delete(v34[0]);
        }
        goto LABEL_61;
      }
      if (*(char *)(ResultToken + 23) < 0)
      {
        sub_10006770C(__s1, *(void **)ResultToken, *(void *)(ResultToken + 8));
      }
      else
      {
        long long v15 = *(_OWORD *)ResultToken;
        uint64_t v32 = *(void *)(ResultToken + 16);
        *(_OWORD *)std::string __s1 = v15;
      }
      uint64_t v16 = HIBYTE(v32);
      if (v32 >= 0) {
        size_t v17 = (void *)HIBYTE(v32);
      }
      else {
        size_t v17 = __s1[1];
      }
      unint64_t v18 = v35;
      if ((v35 & 0x80u) != 0) {
        unint64_t v18 = (unint64_t)v34[1];
      }
      if (v17 != (void *)v18) {
        goto LABEL_31;
      }
      if ((v35 & 0x80u) == 0) {
        unint64_t v19 = v34;
      }
      else {
        unint64_t v19 = (void **)v34[0];
      }
      if (v32 < 0)
      {
        if (memcmp(__s1[0], v19, (size_t)__s1[1]))
        {
LABEL_31:
          if (*(char *)(ResultToken + 23) < 0)
          {
            sub_10006770C(&__str, *(void **)ResultToken, *(void *)(ResultToken + 8));
          }
          else
          {
            long long v21 = *(_OWORD *)ResultToken;
            __str.__r_.__value_.__r.__words[2] = *(void *)(ResultToken + 16);
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v21;
          }
          goto LABEL_35;
        }
      }
      else if (HIBYTE(v32))
      {
        unint64_t v20 = __s1;
        while (*(unsigned __int8 *)v20 == *(unsigned __int8 *)v19)
        {
          unint64_t v20 = (void **)((char *)v20 + 1);
          unint64_t v19 = (void **)((char *)v19 + 1);
          if (!--v16) {
            goto LABEL_33;
          }
        }
        goto LABEL_31;
      }
LABEL_33:
      sub_100009CF0(&__str, " ");
LABEL_35:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
      __str.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v32) < 0) {
        operator delete(__s1[0]);
      }
      if (!*(_DWORD *)(a1 + 52) && (sub_1000B581C((uint64_t)&__p) & 1) != 0
        || sub_1000B588C((uint64_t)&__p))
      {
        operator new();
      }
      goto LABEL_43;
    }
    uint64_t v26 = RXOSLog();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__str.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "getAlternativesForAdlibs: Non-adlib found in alternatives", (uint8_t *)&__str, 2u);
    }
LABEL_61:
    uint64_t v27 = *(unsigned __int8 *)(a2 + 23);
    if ((v27 & 0x80u) != 0) {
      uint64_t v27 = *(void *)(a2 + 8);
    }
    BOOL v28 = v27 != 0;
    if (v36 != v37) {
      sub_100013234(&v39, (uint64_t)&v36);
    }
    v7 |= v28;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    sub_1000191C0((void ***)&__str);
    v4 += 3;
  }
  while (v4 != v30);
  if (v39 != v40) {
    sub_100013374(a3, (uint64_t)&v39);
  }
LABEL_68:
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  sub_100019C28((void ***)&__str);
}

void sub_10001877C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v45 = v46;
  sub_1000191C0((void ***)&v45);
  v46[0] = (void **)v47;
  sub_100019C28(v46);
  v47[0] = v44;
  sub_100019278(v47);
  _Unwind_Resume(a1);
}

void sub_10001888C(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    sub_100018BC0(locale);
  }
  std::locale::~locale(this);
}

void RDQSRResultModelBuilder::~RDQSRResultModelBuilder(RDQSRResultModelBuilder *this)
{
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2) {
    xpc_release(v2);
  }
  sub_1000192EC((uint64_t)this + 200, *((char **)this + 26));
  unint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  uint64_t v5 = (void **)((char *)this + 80);
  sub_10001BBCC(&v5);
  sub_10001BB7C((RDQSRResultLMNodeBuilder **)this + 8, 0);
}

void RDQSRResultMatcher::Create()
{
}

{
  operator new();
}

void sub_100018A20()
{
}

void sub_100018AC8()
{
}

void sub_100018AF4()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

char *sub_100018B28(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10006770C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  uint64_t v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10006770C(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return __dst;
}

void sub_100018BA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100018BC0(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_100018C34()
{
}

void sub_100018C4C(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100018CA8(exception, a1);
}

void sub_100018C94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100018CA8(std::logic_error *a1, const char *a2)
{
  xpc_object_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_100018CDC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_10001B264(&v6);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_100018D50(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  *((_DWORD *)v11 + 6) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100018F74(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *unint64_t v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_100018F60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100018F74(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_100019064(a1, prime);
    }
  }
}

void sub_100019064(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_100018AF4();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *uint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1000191C0(void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    sub_100019214((uint64_t)v2, *v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100019214(uint64_t a1, uint64_t *a2)
{
  int8x8_t v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    unint64_t v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      uint64_t *v5 = 0;
      if (v6) {
        sub_100019350((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_100019278(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    int8x8_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_100019C28(&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1000192EC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1000192EC(a1, *(void *)a2);
    sub_1000192EC(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void sub_100019350(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    operator delete();
  }
}

uint64_t sub_1000193AC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100019474((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_100019424()
{
}

void *sub_10001943C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100018AF4();
  }
  return operator new(8 * a2);
}

uint64_t sub_100019474(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint8x8_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10001950C((uint64_t)v13);
  return v11;
}

uint64_t sub_10001950C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100019544(a1);
  }
  return a1;
}

void sub_100019544(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    *uint64_t v1 = 0;
    if (v3) {
      sub_100019350((uint64_t)v1, v3);
    }
    ++v1;
  }
}

uint64_t sub_100019590(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000195C8(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      sub_100019350(i - 8, v5);
    }
  }
}

void sub_100019620()
{
}

void *sub_100019634(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1000EE4B0;
  result[1] = v3;
  return result;
}

uint64_t sub_10001967C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1000EE4B0;
  a2[1] = v2;
  return result;
}

void sub_1000196A8()
{
}

void sub_10001981C()
{
}

uint64_t sub_10001986C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000198AC()
{
}

BOOL sub_1000198B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *sub_100019908(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100019990()
{
}

void *sub_1000199A4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1000EE540;
  result[1] = v3;
  return result;
}

uint64_t sub_1000199EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1000EE540;
  a2[1] = v2;
  return result;
}

void sub_100019A18()
{
}

void sub_100019B8C()
{
}

uint64_t sub_100019BDC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100019C1C()
{
}

void sub_100019C28(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    int8x8_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_1000191C0(&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100019C9C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100019D5C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100019D14(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100018AF4();
  }
  return operator new(24 * a2);
}

uint64_t sub_100019D5C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_100019E00((uint64_t)v11);
  return v9;
}

uint64_t sub_100019E00(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100019E38(a1);
  }
  return a1;
}

void sub_100019E38(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_1000191C0(&v3);
    v1 += 3;
  }
}

void **sub_100019E84(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100019EB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    int8x8_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_1000191C0(&v5);
  }
}

uint64_t sub_100019F0C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100019F84((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100019F84(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_10001A028((uint64_t)v11);
  return v9;
}

uint64_t sub_10001A028(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10001A060(a1);
  }
  return a1;
}

void sub_10001A060(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_100019C28(&v3);
    v1 += 3;
  }
}

void **sub_10001A0AC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10001A0E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    int8x8_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_100019C28(&v5);
  }
}

uint64_t sub_10001A134(uint64_t a1)
{
  sub_10001A170(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10001A170(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      v2[3] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_10001A1E0()
{
}

__n128 sub_10001A1F4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1000EE5C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10001A248(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1000EE5C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10001A280(uint64_t a1, unint64_t *a2)
{
  unint64_t v11 = *a2;
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v4 = **(void **)(a1 + 8) + 32 * v11;
  if (*(unsigned char *)(v4 + 24)) {
    uint64_t v5 = *(void *)(v3 + 64);
  }
  else {
    uint64_t v5 = *(void *)(v3 + 56);
  }
  uint64_t v6 = RDQSRGrammarBuilder::grammarFST(*(RDQSRGrammarBuilder **)v4);
  sub_10006C55C(v5, v6, &v12);
  uint64_t v7 = v12;
  std::mutex::lock(&stru_1000FDF78);
  uint64_t v8 = *(void *)(a1 + 16);
  char v12 = &v11;
  uint64_t v9 = sub_10001A3FC(v8, &v11, (uint64_t)&unk_1000CA487, &v12);
  uint64_t v10 = v9[3];
  v9[3] = v7;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  std::mutex::unlock(&stru_1000FDF78);
}

void sub_10001A364(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1000FDF78);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10001A3B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10001A3F0()
{
}

void *sub_10001A3FC(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100018F74(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *long long v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10001A62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10001A648(v11, v10);
  _Unwind_Resume(a1);
}

void sub_10001A648(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[3];
    __p[3] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *sub_10001A6C8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10001A74C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)(v4 - 16));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

RDQSRResultModelBuilder *sub_10001A7D0(RDQSRResultModelBuilder **a1, RDQSRResultModelBuilder *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    RDQSRResultModelBuilder::~RDQSRResultModelBuilder(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10001A820(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10001A8D0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10001A898(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100018AF4();
  }
  return operator new(16 * a2);
}

uint64_t sub_10001A8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      long long v13 = *(void **)(a3 + v11 - 8);
      *(void *)(v12 - 8) = v13;
      if (v13) {
        xpc_retain(v13);
      }
      v11 -= 16;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_10001A954(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 16)
    RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001A974(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10001A9C4(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        uint64_t v5 = v3;
        sub_10001B264(&v5);
      }
      while (v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_10001AA38(void *result, long long **a2, long long **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10001AAC0(result, a4);
    uint64_t result = (void *)sub_10001AB14((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10001AAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100018CDC(&a9);
  _Unwind_Resume(a1);
}

char *sub_10001AAC0(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100019424();
  }
  uint64_t result = (char *)sub_100019D14((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t sub_10001AB14(uint64_t a1, long long **a2, long long **a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_10001AF20((char *)v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      uint64_t v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_10001ABD4((uint64_t)v8);
  return v4;
}

void sub_10001ABC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10001ABD4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10001AC0C(a1);
  }
  return a1;
}

void sub_10001AC0C(uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    sub_10001B264(&v3);
  }
}

void sub_10001AC58()
{
}

uint64_t *sub_10001AC70(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    sub_10001AD30(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_10001AD30(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_10001AD88(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_10001AD88(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            char v9 = (uint64_t **)a2[2];
          }
          else
          {
            char v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *char v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        _OWORD v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

char *sub_10001AF20(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_10001AFA8(result, a4);
    uint64_t result = sub_10001B044((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_10001AF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10001B264(&a9);
  _Unwind_Resume(a1);
}

char *sub_10001AFA8(void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_100019424();
  }
  uint64_t result = (char *)sub_10001AFFC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *sub_10001AFFC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_100018AF4();
  }
  return operator new(48 * a2);
}

char *sub_10001B044(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v10 = __dst;
  uint64_t v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      sub_10001B0E8(v4, v6);
      v6 += 3;
      uint64_t v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_10001B180((uint64_t)v8);
  return v4;
}

void sub_10001B0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_10001B0E8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10006770C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  uint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_10006770C(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return __dst;
}

void sub_10001B164(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001B180(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10001B1B8((uint64_t *)a1);
  }
  return a1;
}

void sub_10001B1B8(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      sub_10001B20C(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_10001B20C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void sub_10001B264(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_10001B20C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10001B2FC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10001B374((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10001B374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  sub_10001B42C((uint64_t)v13);
  return a6;
}

uint64_t sub_10001B42C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10001B464((uint64_t *)a1);
  }
  return a1;
}

void sub_10001B464(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10001B20C(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **sub_10001B4B8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10001B4EC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_10001B20C(v4, i - 48);
  }
}

uint64_t sub_10001B534(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10001B5AC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10001B5AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_10001B650((uint64_t)v11);
  return v9;
}

uint64_t sub_10001B650(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10001B688(a1);
  }
  return a1;
}

void sub_10001B688(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_10001B264(&v3);
    v1 += 3;
  }
}

void **sub_10001B6D4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10001B708(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_10001B264(&v5);
  }
}

void *sub_10001B75C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10001AFA8(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_10001B7DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001B7F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_10001B844(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10001B844(a1, *a2);
    sub_10001B844(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_10001B898(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  size_t v5 = (uint64_t **)(a1 + 24);
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_10001B928(v5, *(_DWORD *)(v3 + 28), *a2);
    long long v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      long long v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_10001B928(v5, *a2, *(_DWORD *)(v6 + 28))) {
    return v2;
  }
  return v6;
}

BOOL sub_10001B928(uint64_t **a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = **a1;
  unsigned int v4 = *(_DWORD *)(v3 + 48 * a2 + 8);
  unsigned int v5 = *(_DWORD *)(v3 + 48 * a3 + 8);
  if (v4 < v5) {
    return 1;
  }
  if (v4 > v5) {
    return 0;
  }
  unsigned int v6 = *(unsigned __int16 *)(v3 + 48 * a2 + 6);
  unsigned int v7 = *(unsigned __int16 *)(v3 + 48 * a3 + 6);
  if (v6 < v7) {
    return 1;
  }
  return v6 <= v7 && *(unsigned __int16 *)(v3 + 48 * a2 + 2) < *(unsigned __int16 *)(v3 + 48 * a3 + 2);
}

uint64_t *sub_10001B9A8(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  unsigned int v5 = sub_10001BA2C((uint64_t)a1, &v9, a2);
  unsigned int v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    unsigned int v7 = (uint64_t **)v5;
    unsigned int v6 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v6 + 7) = *a3;
    sub_10001AD30(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *sub_10001BA2C(uint64_t a1, void *a2, unsigned int *a3)
{
  unsigned int v5 = (uint64_t *)(a1 + 8);
  unsigned int v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    unsigned int v7 = (uint64_t **)(a1 + 24);
    do
    {
      while (1)
      {
        long long v8 = v4;
        if (!sub_10001B928(v7, *a3, *((_DWORD *)v4 + 7))) {
          break;
        }
        unsigned int v4 = (uint64_t *)*v8;
        unsigned int v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_10001B928(v7, *((_DWORD *)v8 + 7), *a3)) {
        break;
      }
      unsigned int v5 = v8 + 1;
      unsigned int v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    long long v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void *sub_10001BAC8(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unsigned int v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

RDQSRResultLMNodeBuilder *sub_10001BB7C(RDQSRResultLMNodeBuilder **a1, RDQSRResultLMNodeBuilder *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    RDQSRResultLMNodeBuilder::~RDQSRResultLMNodeBuilder(result);
    operator delete();
  }
  return result;
}

void sub_10001BBCC(void ***a1)
{
  uint64_t v1 = *a1;
  int8x8_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_10001BC50(v4 - 24);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10001BC50(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 8);
  if (v2) {
    xpc_release(v2);
  }
  unint64_t v3 = *(void **)(a1 + 16);
  if (v3) {
    xpc_release(v3);
  }
  return a1;
}

uint64_t sub_10001BC90(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10001BD08((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10001BD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 24;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 24;
    sub_10001BD9C(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_10001BD9C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  unint64_t v3 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v4)
  {
    xpc_retain(v4);
    unint64_t v3 = *(void **)(a1 + 16);
  }
  if (v3) {
    xpc_retain(v3);
  }
  return a1;
}

uint64_t sub_10001BDE8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_10001BC50(i - 24);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10001BE38(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 24 * a2;
      do
      {
        *(_DWORD *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        v7 += 24;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_100019424();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)sub_100019D14(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    long long v14 = &v12[24 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[24 * v11];
    long long v15 = &v14[24 * a2];
    do
    {
      *(_DWORD *)long long v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = 0;
      v14 += 24;
    }
    while (v14 != v15);
    v16[2] = v15;
    sub_10001BC90(a1, v16);
    return sub_10001BDE8((uint64_t)v16);
  }
  return result;
}

void sub_10001BF68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001BDE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001BF7C(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_10001C00C(v5, (const void **)(v3 + 32), a2);
    unint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      unint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_10001C00C(v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

BOOL sub_10001C00C(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void sub_10001C078(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_10001C0D8(std::locale *a1, const char *a2, int a3)
{
  size_t v5 = sub_10001C170(a1);
  LODWORD(v5[3].__locale_) = a3;
  *(_OWORD *)((char *)&v5[3].__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[5].__locale_ + 4) = 0u;
  HIDWORD(v5[7].__locale_) = 0;
  strlen(a2);
  sub_10001C1D0();
}

void sub_10001C150(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    sub_100018BC0(locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::locale *sub_10001C170(std::locale *a1)
{
  uint64_t v2 = std::locale::locale(a1);
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v2, &std::ctype<char>::id);
  a1[2].__locale_ = (std::locale::__imp *)std::locale::use_facet(a1, &std::collate<char>::id);
  return a1;
}

void sub_10001C1BC(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_10001C1D0()
{
}

void sub_10001C390(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_10001C3C4()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_parse);
}

void sub_10001C408(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10001C41C(uint64_t a1, uint64_t a2)
{
  sub_10001CA6C(&v2, a2);
}

char *sub_10001C464(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v6 = a2;
  do
  {
    size_t v7 = v6;
    uint64_t v6 = sub_10001CEA8(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  if (v7 == a2) {
    operator new();
  }
  if (v7 != (unsigned __int8 *)a3)
  {
    if (*v7 == 124)
    {
      unint64_t v8 = v7 + 1;
      size_t v9 = v7 + 1;
      do
      {
        int v10 = v9;
        size_t v9 = sub_10001CEA8(a1, (char *)v9, a3);
      }
      while (v9 != v10);
      if (v10 == v8) {
        operator new();
      }
      sub_10001CDA0();
    }
    return (char *)v7;
  }
  return a3;
}

unsigned __int8 *sub_10001C5C4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  int v4 = a3;
  if (*a2 == 94) {
    sub_10001D6AC();
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v6 = v3;
      int v3 = sub_100024110(a1, v3, v4);
    }
    while (v3 != v6);
    if (v6 != v4)
    {
      if (v6 + 1 == v4 && *v6 == 36) {
        sub_10001D730();
      }
      sub_1000240B8();
    }
  }
  return v4;
}

unsigned __int8 *sub_10001C674(uint64_t a1, char *a2, char *a3)
{
  int v3 = a3;
  uint64_t v6 = sub_1000247AC(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
LABEL_8:
  }
    sub_1000240B8();
  if (v6 != (unsigned __int8 *)v3)
  {
    if (*v6 == 124)
    {
      if (sub_1000247AC(a1, (char *)v6 + 1, v3) != v6 + 1) {
        sub_10001CDA0();
      }
      goto LABEL_8;
    }
    return v6;
  }
  return (unsigned __int8 *)v3;
}

unsigned __int8 *sub_10001C718(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  uint64_t v6 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v6) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = a3;
  }
  if (v7 == __s) {
    operator new();
  }
  sub_10001C5C4(a1, __s, v7);
  if (v7 == a3) {
    int v10 = v7;
  }
  else {
    int v10 = v7 + 1;
  }
  if (v10 != a3)
  {
    unint64_t v8 = (unsigned __int8 *)memchr(v10, 10, a3 - v10);
    if (v8) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = a3;
    }
    if (v9 != v10)
    {
      sub_10001C5C4(a1, v10, v9);
      sub_10001CDA0();
    }
    operator new();
  }
  return a3;
}

char *sub_10001C880(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = (char *)memchr(__s, 10, a3 - __s);
  if (v6) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = a3;
  }
  if (v7 == __s) {
    operator new();
  }
  sub_10001C674(a1, __s, v7);
  if (v7 == a3) {
    int v10 = v7;
  }
  else {
    int v10 = v7 + 1;
  }
  if (v10 != a3)
  {
    unint64_t v8 = (char *)memchr(v10, 10, a3 - v10);
    if (v8) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = a3;
    }
    if (v9 != v10)
    {
      sub_10001C674(a1, v10, v9);
      sub_10001CDA0();
    }
    operator new();
  }
  return a3;
}

void sub_10001C9E8()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_grammar);
}

void sub_10001CA2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10001CA44()
{
}

void sub_10001CA58(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_10001CA6C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10001CAD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000C2BB4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001CAF0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10001CB28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10001CB58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_10001CB9C(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10001CC08(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator delete();
}

uint64_t sub_10001CC94(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_10001CCA8(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10001CD14(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator delete();
}

void sub_10001CDA0()
{
}

unsigned __int8 *sub_10001CEA8(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)sub_10001CF50(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    size_t v7 = sub_10001D160(a1, (unsigned __int8 *)a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
    if (v7 != (unsigned __int8 *)a2)
    {
      return sub_10001D3A8(a1, v7, (unsigned __int8 *)a3);
    }
  }
  return result;
}

char *sub_10001CF50(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = *a2;
    if (v6 > 91)
    {
      if (v6 == 92)
      {
        if (a2 + 1 != a3)
        {
          int v13 = a2[1];
          if (v13 == 66 || v13 == 98) {
            sub_10001D7B4();
          }
        }
      }
      else if (v6 == 94)
      {
        sub_10001D6AC();
      }
    }
    else
    {
      if (v6 == 36) {
        sub_10001D730();
      }
      BOOL v8 = v6 == 40;
      size_t v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        size_t v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          int v11 = *v9;
          if (v11 == 33)
          {
            sub_10001C170(v14);
            long long v15 = 0u;
            uint64_t v17 = 0;
            long long v16 = 0u;
            LODWORD(v15) = *(_DWORD *)(a1 + 24);
            sub_10001C1D0(v14, a2 + 3, a3);
            sub_10001D848();
          }
          if (v11 == 61)
          {
            sub_10001C170(v14);
            long long v15 = 0u;
            uint64_t v17 = 0;
            long long v16 = 0u;
            LODWORD(v15) = *(_DWORD *)(a1 + 24);
            sub_10001C1D0(v14, a2 + 3, a3);
            sub_10001D848();
          }
        }
      }
    }
  }
  return a2;
}

void sub_10001D140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *sub_10001D160(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  int v3 = a2;
  if (a2 == (unsigned __int8 *)a3) {
    return v3;
  }
  int v6 = (char)*a2;
  if (v6 <= 62)
  {
    if (v6 != 40)
    {
      if (v6 == 46) {
        operator new();
      }
      if ((v6 - 42) >= 2) {
        goto LABEL_28;
      }
LABEL_34:
      sub_10001F4F0();
    }
    if (a2 + 1 != (unsigned __int8 *)a3)
    {
      if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
      {
        BOOL v8 = (_DWORD *)(a1 + 36);
        ++*(_DWORD *)(a1 + 36);
        size_t v9 = (char *)sub_10001C464(a1, a2 + 3, a3);
        if (v9 == a3) {
          goto LABEL_35;
        }
        int v10 = v9;
        if (*v9 != 41) {
          goto LABEL_35;
        }
        goto LABEL_25;
      }
      sub_10001F3F0(a1);
      BOOL v8 = (_DWORD *)(a1 + 36);
      ++*(_DWORD *)(a1 + 36);
      int v11 = (char *)sub_10001C464(a1, v3 + 1, a3);
      if (v11 != a3)
      {
        int v10 = v11;
        if (*v11 == 41)
        {
          sub_10001F474(a1);
LABEL_25:
          --*v8;
          return (unsigned __int8 *)(v10 + 1);
        }
      }
    }
LABEL_35:
    sub_10001D8F0();
  }
  if (v6 <= 91)
  {
    if (v6 == 91)
    {
      return sub_10001F2DC(a1, a2, a3);
    }
    if (v6 == 63) {
      goto LABEL_34;
    }
LABEL_28:
    return sub_10001F548(a1, a2, a3);
  }
  if (v6 != 92)
  {
    if (v6 == 123) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  return sub_10001F238(a1, a2, (unsigned __int8 *)a3);
}

unsigned __int8 *sub_10001D3A8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v5 = (char)*a2;
  if (v5 <= 62)
  {
    if (v5 == 42 || v5 == 43) {
LABEL_18:
    }
      sub_100023AB0();
    return a2;
  }
  if (v5 == 63) {
    goto LABEL_18;
  }
  if (v5 == 123)
  {
    int v6 = a2 + 1;
    size_t v7 = sub_100023C40(a1, a2 + 1, a3, &v13);
    if (v7 == v6) {
      goto LABEL_23;
    }
    if (v7 != a3)
    {
      int v8 = (char)*v7;
      if (v8 != 44)
      {
        if (v8 == 125) {
          goto LABEL_18;
        }
LABEL_23:
        sub_100023CE0();
      }
      size_t v9 = v7 + 1;
      if (v7 + 1 == a3) {
        goto LABEL_23;
      }
      if (*v9 == 125) {
        goto LABEL_18;
      }
      int v12 = -1;
      int v11 = sub_100023C40(a1, v9, a3, &v12);
      if (v11 != v9 && v11 != a3 && *v11 == 125)
      {
        if (v12 >= v13) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
    }
    sub_100023D38();
  }
  return a2;
}

void sub_10001D6AC()
{
}

void sub_10001D730()
{
}

void sub_10001D7B4()
{
}

void sub_10001D848()
{
}

void sub_10001D8CC()
{
}

void sub_10001D8F0()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_paren);
}

void sub_10001D934(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_10001D948(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10001D9B4(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator delete();
}

uint64_t sub_10001DA40(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void *sub_10001DAA0(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10001DB0C(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator delete();
}

uint64_t sub_10001DB98(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_10001DBE8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EE858;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_10001DC74(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EE858;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  operator delete();
}

uint64_t sub_10001DD20(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

uint64_t sub_10001DE34(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = off_1000EE8A0;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

std::locale *sub_10001DEC4(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EE8A0;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    sub_100018BC0(locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_10001DF64(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EE8A0;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    sub_100018BC0(locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }
  operator delete();
}

void sub_10001E024(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v25 = 0;
  long long v26 = 0uLL;
  char v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  std::string __p = 0;
  size_t v19 = 0;
  unint64_t v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v20 = 0;
  *(void *)&long long v21 = v5;
  *((void *)&v21 + 1) = v5;
  char v22 = 0;
  sub_10001E694((char **)&__p, v4, &v21);
  uint64_t v23 = v6;
  uint64_t v24 = v6;
  char v25 = 0;
  long long v26 = v21;
  char v27 = v22;
  uint64_t v29 = v6;
  char v28 = 1;
  uint64_t v7 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(void *)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_10001E224(a1 + 16, v7, *(void *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    int v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  int v10 = (char *)__p;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (unsigned char *)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    long long v16 = &v10[24 * v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v16;
    *(unsigned char *)(v17 + 16) = v16[16];
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  size_t v19 = v10;
  operator delete(v10);
}

void sub_10001E190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10001E1B0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(a1 + 24) = a4;
  BOOL v8 = (_OWORD *)(a1 + 24);
  *(void *)(a1 + 32) = a4;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t result = sub_10001E694((char **)a1, a2, (long long *)(a1 + 24));
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a3;
  *(unsigned char *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *v8;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a1 + 40);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = a3;
  }
  *(unsigned char *)(a1 + 96) = 1;
  return result;
}

uint64_t sub_10001E224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  std::string::size_type v42 = 0;
  int v43 = 0;
  unint64_t v44 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(void *)&long long v40 = a3;
    *((void *)&v40 + 1) = a3;
    char v41 = 0;
    *(_DWORD *)uint64_t v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)std::string __p = 0u;
    memset(v39, 0, 21);
    int v43 = (_OWORD *)sub_10001E96C((uint64_t *)&v42, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v37[32])
    {
      *(void *)&v37[40] = *(void *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    unsigned __int8 v35 = a4;
    int v12 = v43;
    *((_DWORD *)v43 - 24) = 0;
    *((void *)v12 - 11) = a2;
    *((void *)v12 - 10) = a2;
    *((void *)v12 - 9) = a3;
    sub_10001E850((uint64_t)(v12 - 4), *(unsigned int *)(a1 + 28), &v40);
    sub_10001E88C((uint64_t)v43 - 40, *(unsigned int *)(a1 + 32));
    int v13 = v43;
    *((void *)v43 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *((unsigned char *)v13 - 4) = a6;
    unsigned int v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) == 0 && (int)(v14 >> 12) >= (int)a3 - (int)a2) {
        sub_10001E8BC();
      }
      long long v16 = v13 - 1;
      uint64_t v15 = *((void *)v13 - 2);
      uint64_t v17 = v13 - 6;
      if (v15) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 16))(v15, v13 - 6);
      }
      switch(*(_DWORD *)v17)
      {
        case 0xFFFFFC18:
          uint64_t v18 = *((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v18 == a2 || (a5 & 0x1000) != 0 && v18 != a3) {
            goto LABEL_16;
          }
          uint64_t v26 = *v35;
          *(void *)uint64_t v26 = a2;
          *(void *)(v26 + 8) = v18;
          *(unsigned char *)(v26 + 16) = 1;
          uint64_t v27 = *((void *)v13 - 8);
          uint64_t v28 = *((void *)v13 - 7) - v27;
          if (v28)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
            uint64_t v30 = (unsigned char *)(v27 + 16);
            unsigned int v31 = 1;
            do
            {
              uint64_t v32 = v26 + 24 * v31;
              *(_OWORD *)uint64_t v32 = *((_OWORD *)v30 - 1);
              char v33 = *v30;
              v30 += 24;
              *(unsigned char *)(v32 + 16) = v33;
            }
            while (v29 > v31++);
          }
          uint64_t v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          size_t v19 = v43 - 6;
          sub_10001ECEC((uint64_t)&v44, (void *)v43 - 12);
          int v43 = v19;
          goto LABEL_23;
        case 0xFFFFFC20:
          long long v20 = *(v13 - 5);
          *(_OWORD *)uint64_t v37 = *v17;
          *(_OWORD *)&v37[16] = v20;
          memset(&v37[32], 0, 24);
          sub_10001F068(&v37[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          sub_10001F0E8((char *)__p, *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          uint64_t v21 = *v16;
          *(void *)((char *)&v39[1] + 5) = *(void *)((char *)v13 - 11);
          v39[1] = v21;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v16 + 24))(*v16, 1, v13 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v39[1] + 24))(v39[1], 0, v37);
          char v22 = v43;
          if ((unint64_t)v43 >= v44)
          {
            int v43 = (_OWORD *)sub_10001E96C((uint64_t *)&v42, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&v37[16];
            *int v43 = *(_OWORD *)v37;
            v22[1] = v23;
            *((void *)v22 + 4) = 0;
            *((void *)v22 + 5) = 0;
            *((void *)v22 + 6) = 0;
            *((void *)v22 + 7) = 0;
            v22[2] = *(_OWORD *)&v37[32];
            *((void *)v22 + 6) = *(void *)&v37[48];
            memset(&v37[32], 0, 24);
            *((void *)v22 + 8) = 0;
            *((void *)v22 + 9) = 0;
            *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)__p;
            *((void *)v22 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            uint64_t v24 = v39[1];
            *(void *)((char *)v22 + 85) = *(void *)((char *)&v39[1] + 5);
            *((void *)v22 + 10) = v24;
            int v43 = v22 + 6;
          }
          if (*(void *)&v37[32])
          {
            *(void *)&v37[40] = *(void *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          int v13 = v43;
          ++v14;
          if (v42 != v43) {
            continue;
          }
          uint64_t v6 = 0;
          break;
        default:
          sub_10001E914();
      }
      break;
    }
  }
  *(void *)uint64_t v37 = &v42;
  sub_10001F1A0((void ***)v37);
  return v6;
}

void sub_10001E614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_10001E80C(&a13);
  a13 = v18 - 112;
  sub_10001F1A0((void ***)&a13);
  _Unwind_Resume(a1);
}

char *sub_10001E694(char **a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) >= a2)
  {
    uint64_t v15 = a1[1];
    unint64_t v16 = (v15 - result) / 24;
    if (v16 >= a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = (v15 - result) / 24;
    }
    if (v17)
    {
      uint64_t v18 = result;
      do
      {
        *(_OWORD *)uint64_t v18 = *a3;
        v18[16] = *((unsigned char *)a3 + 16);
        v18 += 24;
        --v17;
      }
      while (v17);
    }
    if (a2 <= v16)
    {
      a1[1] = &result[24 * a2];
    }
    else
    {
      size_t v19 = &v15[24 * (a2 - v16)];
      uint64_t v20 = 24 * a2 - 24 * v16;
      do
      {
        long long v21 = *a3;
        *((void *)v15 + 2) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v15 = v21;
        v15 += 24;
        v20 -= 24;
      }
      while (v20);
      a1[1] = v19;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_100019424();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t result = sub_10001AAC0(a1, v10);
    unint64_t v11 = a1[1];
    int v12 = &v11[24 * a2];
    uint64_t v13 = 24 * a2;
    do
    {
      long long v14 = *a3;
      *((void *)v11 + 2) = *((void *)a3 + 2);
      *(_OWORD *)unint64_t v11 = v14;
      v11 += 24;
      v13 -= 24;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

void *sub_10001E80C(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10001E850(uint64_t a1, unint64_t a2, long long *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_10001EDC0((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void sub_10001E88C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_10001EF48((void **)a1, a2 - v2);
  }
}

void sub_10001E8BC()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_complexity);
}

void sub_10001E900(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10001E914()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_unknown);
}

void sub_10001E958(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001E96C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_100019424();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10001EB34(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  sub_10001EABC(a1, v16);
  uint64_t v14 = a1[1];
  sub_10001ED44(v16);
  return v14;
}

void sub_10001EAA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001ED44((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001EABC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10001EB7C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10001EB34(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_100018AF4();
  }
  return operator new(96 * a2);
}

uint64_t sub_10001EB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_10001EC60((uint64_t)v12);
  return v10;
}

uint64_t sub_10001EC60(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10001EC98((uint64_t *)a1);
  }
  return a1;
}

void sub_10001EC98(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  unint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10001ECEC(v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void sub_10001ECEC(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **sub_10001ED44(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10001ED78(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    sub_10001ECEC(v4, (void *)(i - 96));
  }
}

void sub_10001EDC0(void **a1, unint64_t a2, long long *a3)
{
  long long v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      long long v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        long long v17 = *a3;
        v9[2] = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)*a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_100019424();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)sub_100019D14(v6, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v18 = &v14[24 * v10];
    size_t v19 = &v18[24 * a2];
    uint64_t v20 = 24 * a2;
    long long v21 = v18;
    do
    {
      long long v22 = *a3;
      *((void *)v21 + 2) = *((void *)a3 + 2);
      *(_OWORD *)long long v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    long long v23 = &v14[24 * v13];
    char v25 = (char *)*a1;
    uint64_t v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        long long v26 = *(_OWORD *)(v24 - 24);
        *((void *)v18 - 1) = *((void *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      uint64_t v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
    {
      operator delete(v24);
    }
  }
}

void sub_10001EF48(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_100019424();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_10001A898(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = &v13[16 * v10];
    long long v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    long long v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      long long v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

char *sub_10001F068(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10001AAC0(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_10001F0CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10001F0E8(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10001F15C(result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_10001F140(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10001F15C(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100019424();
  }
  uint64_t result = (char *)sub_10001A898((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_10001F1A0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        sub_10001ECEC((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *sub_10001F238(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    sub_10001F6B4();
  }
  uint64_t result = sub_10001F70C(a1, a2 + 1, a3);
  if (result == v5)
  {
    uint64_t result = (unsigned __int8 *)sub_10001F7CC(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      uint64_t result = sub_10001F89C(a1, (char *)a2 + 1, (char *)a3, 0);
      if (result == v5) {
        return a2;
      }
    }
  }
  return result;
}

unsigned char *sub_10001F2DC(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3) {
      sub_100020998();
    }
    sub_100021D48();
  }
  return a2;
}

uint64_t sub_10001F3F0(uint64_t result)
{
  if ((*(unsigned char *)(result + 24) & 2) == 0) {
    operator new();
  }
  return result;
}

uint64_t sub_10001F474(uint64_t result)
{
  if ((*(unsigned char *)(result + 24) & 2) == 0) {
    operator new();
  }
  return result;
}

void sub_10001F4F0()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_badrepeat);
}

void sub_10001F534(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_10001F548(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3)
  {
    int v3 = (char)*a2;
    BOOL v4 = (v3 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v4 && (v3 - 123) >= 3) {
      sub_10001FBA0(a1);
    }
  }
  return a2;
}

void *sub_10001F5BC(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10001F628(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator delete();
}

void sub_10001F6B4()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_escape);
}

void sub_10001F6F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10001F70C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    unsigned int v5 = v4 - 48;
    if (v4 == 48) {
      sub_10001FBA0(a1);
    }
    if ((v4 - 49) <= 8)
    {
      uint64_t v6 = a2 + 1;
      if (a2 + 1 == a3) {
        goto LABEL_12;
      }
      do
      {
        int v7 = *v6;
        if ((v7 - 48) > 9) {
          break;
        }
        if (v5 >= 0x19999999) {
          goto LABEL_14;
        }
        ++v6;
        unsigned int v5 = v7 + 10 * v5 - 48;
      }
      while (v6 != a3);
      if (v5)
      {
LABEL_12:
        if (v5 <= *(_DWORD *)(a1 + 28)) {
          sub_10001FD38(a1);
        }
      }
LABEL_14:
      sub_10001FCE0();
    }
  }
  return a2;
}

char *sub_10001F7CC(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v3 = *a2;
  if (v3 > 99)
  {
    if (v3 == 119) {
      goto LABEL_12;
    }
    if (v3 == 115) {
LABEL_13:
    }
      sub_100020998();
    if (v3 != 100) {
      return a2;
    }
LABEL_10:
    sub_100020998();
  }
  switch(v3)
  {
    case 'D':
      goto LABEL_10;
    case 'S':
      goto LABEL_13;
    case 'W':
LABEL_12:
      sub_100020998();
  }
  return a2;
}

unsigned __int8 *sub_10001F89C(uint64_t a1, char *a2, char *a3, std::string *this)
{
  int v4 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v4;
  }
  int v5 = *a2;
  if (v5 > 109)
  {
    char v6 = 0;
    switch(*a2)
    {
      case 'n':
        if (!this) {
          goto LABEL_52;
        }
        int v7 = this;
        std::string::value_type v8 = 10;
        goto LABEL_50;
      case 'r':
        if (!this) {
          goto LABEL_52;
        }
        int v7 = this;
        std::string::value_type v8 = 13;
        goto LABEL_50;
      case 't':
        if (!this) {
          goto LABEL_52;
        }
        int v7 = this;
        std::string::value_type v8 = 9;
        goto LABEL_50;
      case 'u':
        if (a2 + 1 == a3) {
          goto LABEL_55;
        }
        int v9 = a2[1];
        if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
          goto LABEL_55;
        }
        int v4 = a2 + 2;
        if (a2 + 2 == a3) {
          goto LABEL_55;
        }
        int v10 = *v4;
        char v11 = -48;
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
          goto LABEL_24;
        }
        v10 |= 0x20u;
        if ((v10 - 97) >= 6) {
          goto LABEL_55;
        }
        char v11 = -87;
LABEL_24:
        char v6 = 16 * (v11 + v10);
LABEL_25:
        if (v4 + 1 == a3) {
          goto LABEL_55;
        }
        int v12 = v4[1];
        char v13 = -48;
        if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
          goto LABEL_30;
        }
        v12 |= 0x20u;
        if ((v12 - 97) >= 6) {
          goto LABEL_55;
        }
        char v13 = -87;
LABEL_30:
        if (v4 + 2 == a3) {
          goto LABEL_55;
        }
        int v14 = v4[2];
        char v15 = -48;
        if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
          goto LABEL_35;
        }
        v14 |= 0x20u;
        if ((v14 - 97) >= 6) {
          goto LABEL_55;
        }
        char v15 = -87;
LABEL_35:
        if (!this) {
          sub_10001FBA0(a1);
        }
        std::string::operator=(this, v15 + v14 + 16 * (v13 + v12 + v6));
        v4 += 3;
        break;
      case 'v':
        if (!this) {
          goto LABEL_52;
        }
        int v7 = this;
        std::string::value_type v8 = 11;
        goto LABEL_50;
      case 'x':
        goto LABEL_25;
      default:
        goto LABEL_45;
    }
    return (unsigned __int8 *)v4;
  }
  if (v5 == 48)
  {
    if (this)
    {
      int v7 = this;
      std::string::value_type v8 = 0;
      goto LABEL_50;
    }
LABEL_52:
    sub_10001FBA0(a1);
  }
  if (v5 != 99)
  {
    if (v5 == 102)
    {
      if (this)
      {
        int v7 = this;
        std::string::value_type v8 = 12;
LABEL_50:
        std::string::operator=(v7, v8);
        return (unsigned __int8 *)++v4;
      }
      goto LABEL_52;
    }
LABEL_45:
    if (*a2 != 95
      && ((v5 & 0x80) != 0
       || (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 4 * *a2) & 0x500) == 0))
    {
      std::string::value_type v8 = *a2;
      if (this)
      {
        int v7 = this;
        goto LABEL_50;
      }
      goto LABEL_52;
    }
LABEL_55:
    sub_10001F6B4();
  }
  if (a2 + 1 == a3) {
    goto LABEL_55;
  }
  char v16 = a2[1];
  if (((v16 & 0xDF) - 65) > 0x19u) {
    goto LABEL_55;
  }
  if (!this) {
    sub_10001FBA0(a1);
  }
  std::string::operator=(this, v16 & 0x1F);
  v4 += 2;
  return (unsigned __int8 *)v4;
}

void sub_10001FBA0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_10001FCBC()
{
}

void sub_10001FCE0()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_backref);
}

void sub_10001FD24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10001FD38(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t sub_10001FE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_1000EE930;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_10001FEFC(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  *int v1 = off_1000EE798;
  uint64_t v4 = v1[1];
  if (v4) {
    sub_1000C2BB4(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *sub_10001FF3C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EE930;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_10001FFC8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EE930;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  operator delete();
}

uint64_t sub_100020074(uint64_t result, uint64_t a2)
{
  int v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_100020108(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EE978;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_100020194(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EE978;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  operator delete();
}

uint64_t sub_100020240(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void *sub_100020288(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1000202F4(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator delete();
}

uint64_t sub_100020380(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *sub_1000203C8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EEA08;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_100020454(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EEA08;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  operator delete();
}

uint64_t sub_100020500(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *sub_100020618(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EEA50;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_1000206A4(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EEA50;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  operator delete();
}

uint64_t sub_100020750(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      int v9 = *(unsigned __int8 **)(a2 + 16);
      uint64_t v10 = v6;
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v9++;
        if (v11 != v13) {
          break;
        }
        if (!--v10) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void *sub_1000207E0(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10002084C(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator delete();
}

unsigned int *sub_1000208D8(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    sub_10001FCE0();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

void sub_100020998()
{
}

void sub_100020A10()
{
}

void sub_100020A34(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        long long v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          long long v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_100019424();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      char v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        long long v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          unsigned int v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  long long v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    unint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

uint64_t sub_100020C7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)a1 = off_1000EEAE0;
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_100020DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  sub_10002179C((void ***)&a10);
  std::string v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  sub_10001B264((void ***)&a10);
  unint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  unint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *unint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void sub_100020E60(std::locale *a1)
{
  sub_100021840(a1);
  operator delete();
}

void sub_100020E98(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(signed __int8 **)(a2 + 16);
  unsigned int v5 = *(signed __int8 **)(a2 + 24);
  if (v4 == v5)
  {
    uint64_t v37 = 0;
    int v36 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_221;
  }
  if (!*(unsigned char *)(a1 + 171) || v4 + 1 == v5) {
    goto LABEL_58;
  }
  signed __int8 v6 = *v4;
  unsigned __int8 v125 = *v4;
  signed __int8 v7 = v4[1];
  unsigned __int8 v126 = v7;
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v125 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v6);
    unsigned __int8 v126 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v7);
  }
  uint64_t v8 = a1 + 16;
  sub_1000219E0(a1 + 16, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124) {
      goto LABEL_8;
    }
LABEL_58:
    int v36 = 0;
    uint64_t v37 = 1;
    goto LABEL_59;
  }
  size_t v38 = v123;
  operator delete(__p);
  if (!v38) {
    goto LABEL_58;
  }
LABEL_8:
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 120) - v9;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unsigned char *)(v9 + 1);
    do
    {
      if (v125 == *(v12 - 1) && v126 == *v12) {
        goto LABEL_218;
      }
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  if (!*(unsigned char *)(a1 + 170) || *(void *)(a1 + 88) == *(void *)(a1 + 96))
  {
    int v36 = 0;
  }
  else
  {
    sub_100021928(a1 + 16, (char *)&v125, (char *)&v127);
    uint64_t v14 = *(void *)(a1 + 88);
    char v15 = v124;
    uint64_t v16 = *(void *)(a1 + 96) - v14;
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v16 / 48;
      char v113 = v124;
      if (v124 >= 0) {
        size_t v19 = v124;
      }
      else {
        size_t v19 = v123;
      }
      if (v124 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v18 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v16 / 48;
      }
      BOOL v22 = 1;
      while (1)
      {
        int v23 = *(char *)(v14 + 23);
        if (v23 >= 0) {
          size_t v24 = *(unsigned __int8 *)(v14 + 23);
        }
        else {
          size_t v24 = *(void *)(v14 + 8);
        }
        if (v23 >= 0) {
          char v25 = (const void *)v14;
        }
        else {
          char v25 = *(const void **)v14;
        }
        if (v24 >= v19) {
          size_t v26 = v19;
        }
        else {
          size_t v26 = v24;
        }
        int v27 = memcmp(p_p, v25, v26);
        BOOL v28 = v19 >= v24;
        if (v27) {
          BOOL v28 = v27 >= 0;
        }
        if (v28)
        {
          int v29 = *(char *)(v14 + 47);
          if (v29 >= 0) {
            size_t v30 = *(unsigned __int8 *)(v14 + 47);
          }
          else {
            size_t v30 = *(void *)(v14 + 32);
          }
          if (v29 >= 0) {
            unsigned int v31 = (const void *)(v14 + 24);
          }
          else {
            unsigned int v31 = *(const void **)(v14 + 24);
          }
          if (v19 >= v30) {
            size_t v32 = v30;
          }
          else {
            size_t v32 = v19;
          }
          int v33 = memcmp(v31, p_p, v32);
          BOOL v34 = v30 >= v19;
          if (v33) {
            BOOL v34 = v33 >= 0;
          }
          if (v34) {
            break;
          }
        }
        BOOL v22 = ++v17 < v18;
        v14 += 48;
        if (v21 == v17)
        {
          int v35 = 0;
          int v36 = 0;
          goto LABEL_162;
        }
      }
      int v36 = 1;
      int v35 = 5;
LABEL_162:
      uint64_t v8 = a1 + 16;
      char v15 = v113;
    }
    else
    {
      BOOL v22 = 0;
      int v35 = 0;
      int v36 = 0;
    }
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v22) {
      goto LABEL_195;
    }
  }
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_200;
  }
  sub_100021C38(v8, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  uint64_t v89 = *(void *)(a1 + 136);
  uint64_t v90 = v124;
  uint64_t v91 = *(void *)(a1 + 144) - v89;
  if (v91)
  {
    uint64_t v92 = 0;
    unint64_t v93 = v91 / 24;
    v95 = __p;
    size_t v94 = v123;
    if (v124 >= 0) {
      size_t v96 = v124;
    }
    else {
      size_t v96 = v123;
    }
    if (v93 <= 1) {
      uint64_t v97 = 1;
    }
    else {
      uint64_t v97 = v91 / 24;
    }
    BOOL v98 = 1;
    while (1)
    {
      v99 = (unsigned __int8 **)(v89 + 24 * v92);
      v100 = (unsigned __int8 *)*((unsigned __int8 *)v99 + 23);
      int v101 = (char)v100;
      if ((char)v100 < 0) {
        v100 = v99[1];
      }
      if ((unsigned __int8 *)v96 == v100)
      {
        if (v101 >= 0) {
          v102 = (unsigned __int8 *)(v89 + 24 * v92);
        }
        else {
          v102 = *v99;
        }
        if ((v90 & 0x80) == 0)
        {
          if (v90)
          {
            v103 = &__p;
            uint64_t v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != *v102) {
                goto LABEL_188;
              }
              v103 = (void **)((char *)v103 + 1);
              ++v102;
              --v104;
            }
            while (v104);
            int v36 = 1;
            int v35 = 5;
            goto LABEL_192;
          }
          int v36 = 1;
          if (v98) {
            goto LABEL_220;
          }
LABEL_200:
          if ((char)v125 < 0)
          {
            int v109 = *(_DWORD *)(a1 + 164);
            goto LABEL_213;
          }
          int v106 = *(_DWORD *)(a1 + 160);
          uint64_t v107 = *(void *)(*(void *)(a1 + 24) + 16);
          int v108 = *(_DWORD *)(v107 + 4 * v125);
          if ((v108 & v106) == 0 && (v125 != 95 || (v106 & 0x80) == 0)
            || (char)v126 < 0
            || (*(_DWORD *)(v107 + 4 * v126) & v106) == 0 && ((v106 & 0x80) == 0 || v126 != 95))
          {
            int v109 = *(_DWORD *)(a1 + 164);
            if ((v108 & v109) != 0 || v125 == 95 && (v109 & 0x80) != 0)
            {
LABEL_217:
              int v110 = v36;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v126) & v109) != 0) {
                goto LABEL_217;
              }
              int v110 = 1;
              if (v126 == 95 && (v109 & 0x80) != 0) {
                goto LABEL_217;
              }
LABEL_219:
              int v36 = v110;
LABEL_220:
              uint64_t v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          int v110 = 1;
          goto LABEL_219;
        }
        unint64_t v118 = v93;
        uint64_t v121 = v90;
        int v105 = memcmp(v95, v102, v94);
        unint64_t v93 = v118;
        uint64_t v90 = v121;
        if (!v105) {
          break;
        }
      }
LABEL_188:
      BOOL v98 = ++v92 < v93;
      if (v92 == v97) {
        goto LABEL_191;
      }
    }
    int v35 = 5;
    int v36 = 1;
    goto LABEL_193;
  }
  BOOL v98 = 0;
LABEL_191:
  int v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0) {
LABEL_193:
  }
    operator delete(__p);
  if (!v98) {
    goto LABEL_200;
  }
LABEL_195:
  if (v35) {
    goto LABEL_220;
  }
  uint64_t v37 = 2;
LABEL_59:
  unsigned __int8 v39 = **(unsigned char **)(a2 + 16);
  unsigned __int8 v125 = v39;
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v39 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), (char)v39);
    unsigned __int8 v125 = v39;
  }
  long long v40 = *(unsigned __int8 **)(a1 + 40);
  unint64_t v41 = *(void *)(a1 + 48) - (void)v40;
  if (v41)
  {
    if (v41 <= 1) {
      unint64_t v41 = 1;
    }
    while (1)
    {
      int v42 = *v40++;
      if (v42 == v39) {
        break;
      }
      if (!--v41) {
        goto LABEL_66;
      }
    }
LABEL_77:
    int v36 = 1;
    goto LABEL_221;
  }
LABEL_66:
  unsigned int v43 = *(_DWORD *)(a1 + 164);
  if (v43 || *(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    if ((v39 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v39) & v43) == 0) {
      int v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    uint64_t v45 = *(void **)(a1 + 72);
    uint64_t v46 = memchr(*(void **)(a1 + 64), (char)v39, (size_t)v45 - *(void *)(a1 + 64));
    int v47 = v46 ? v46 : v45;
    if ((v44 & 1) == 0 && v47 == v45) {
      goto LABEL_77;
    }
  }
  uint64_t v49 = *(void *)(a1 + 88);
  uint64_t v48 = *(void *)(a1 + 96);
  if (v49 != v48)
  {
    if (*(unsigned char *)(a1 + 170))
    {
      sub_100021928(a1 + 16, (char *)&v125, (char *)&v126);
      uint64_t v49 = *(void *)(a1 + 88);
      uint64_t v48 = *(void *)(a1 + 96);
    }
    else
    {
      char v124 = 1;
      LOWORD(__p) = v39;
    }
    uint64_t v50 = v48 - v49;
    if (v50)
    {
      uint64_t v119 = v37;
      int v116 = v36;
      uint64_t v51 = 0;
      unint64_t v52 = v50 / 48;
      char v114 = v124;
      if (v124 >= 0) {
        size_t v53 = v124;
      }
      else {
        size_t v53 = v123;
      }
      if (v124 >= 0) {
        unint64_t v54 = &__p;
      }
      else {
        unint64_t v54 = __p;
      }
      if (v52 <= 1) {
        uint64_t v55 = 1;
      }
      else {
        uint64_t v55 = v50 / 48;
      }
      BOOL v56 = 1;
      while (1)
      {
        int v57 = *(char *)(v49 + 23);
        if (v57 >= 0) {
          size_t v58 = *(unsigned __int8 *)(v49 + 23);
        }
        else {
          size_t v58 = *(void *)(v49 + 8);
        }
        if (v57 >= 0) {
          v59 = (const void *)v49;
        }
        else {
          v59 = *(const void **)v49;
        }
        if (v58 >= v53) {
          size_t v60 = v53;
        }
        else {
          size_t v60 = v58;
        }
        int v61 = memcmp(v54, v59, v60);
        BOOL v62 = v53 >= v58;
        if (v61) {
          BOOL v62 = v61 >= 0;
        }
        if (v62)
        {
          int v63 = *(char *)(v49 + 47);
          if (v63 >= 0) {
            size_t v64 = *(unsigned __int8 *)(v49 + 47);
          }
          else {
            size_t v64 = *(void *)(v49 + 32);
          }
          if (v63 >= 0) {
            v65 = (const void *)(v49 + 24);
          }
          else {
            v65 = *(const void **)(v49 + 24);
          }
          if (v53 >= v64) {
            size_t v66 = v64;
          }
          else {
            size_t v66 = v53;
          }
          int v67 = memcmp(v65, v54, v66);
          BOOL v68 = v64 >= v53;
          if (v67) {
            BOOL v68 = v67 >= 0;
          }
          if (v68) {
            break;
          }
        }
        BOOL v56 = ++v51 < v52;
        v49 += 48;
        if (v55 == v51)
        {
          int v36 = v116;
          goto LABEL_123;
        }
      }
      int v36 = 1;
LABEL_123:
      uint64_t v37 = v119;
      if ((v114 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    else
    {
      BOOL v56 = 0;
      if ((v124 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    operator delete(__p);
LABEL_125:
    if (v56) {
      goto LABEL_221;
    }
  }
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_154;
  }
  sub_100021C38(a1 + 16, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  uint64_t v69 = *(void *)(a1 + 136);
  uint64_t v70 = v124;
  uint64_t v71 = *(void *)(a1 + 144) - v69;
  if (v71)
  {
    uint64_t v120 = v37;
    uint64_t v72 = 0;
    unint64_t v73 = v71 / 24;
    uint64_t v74 = __p;
    size_t v75 = v123;
    if (v124 >= 0) {
      size_t v76 = v124;
    }
    else {
      size_t v76 = v123;
    }
    if (v73 <= 1) {
      uint64_t v77 = 1;
    }
    else {
      uint64_t v77 = v71 / 24;
    }
    BOOL v78 = 1;
    while (1)
    {
      v79 = (unsigned __int8 **)(v69 + 24 * v72);
      v80 = (unsigned __int8 *)*((unsigned __int8 *)v79 + 23);
      int v81 = (char)v80;
      if ((char)v80 < 0) {
        v80 = v79[1];
      }
      if ((unsigned __int8 *)v76 == v80)
      {
        if (v81 >= 0) {
          v82 = (unsigned __int8 *)(v69 + 24 * v72);
        }
        else {
          v82 = *v79;
        }
        if ((v70 & 0x80) != 0)
        {
          int v117 = v36;
          unint64_t v85 = v73;
          uint64_t v115 = v77;
          int v86 = memcmp(v74, v82, v75);
          uint64_t v77 = v115;
          unint64_t v73 = v85;
          int v36 = v117;
          if (!v86)
          {
            int v36 = 1;
            uint64_t v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!v70)
          {
            int v36 = 1;
            uint64_t v37 = v120;
            if (!v78) {
              goto LABEL_154;
            }
            goto LABEL_221;
          }
          v83 = &__p;
          uint64_t v84 = v70;
          while (*(unsigned __int8 *)v83 == *v82)
          {
            v83 = (void **)((char *)v83 + 1);
            ++v82;
            if (!--v84)
            {
              int v36 = 1;
              goto LABEL_149;
            }
          }
        }
      }
      BOOL v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        uint64_t v37 = v120;
        if ((v70 & 0x80) == 0) {
          goto LABEL_153;
        }
        goto LABEL_152;
      }
    }
  }
  BOOL v78 = 0;
  if (v124 < 0) {
LABEL_152:
  }
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0) {
      goto LABEL_221;
    }
    unsigned int v87 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v125) & v87) == 0)
    {
      int v88 = (v87 >> 7) & 1;
      if (v125 != 95) {
        int v88 = 0;
      }
      if (v88 != 1) {
        goto LABEL_221;
      }
    }
    goto LABEL_77;
  }
LABEL_221:
  if (v36 == *(unsigned __int8 *)(a1 + 168))
  {
    uint64_t v111 = 0;
    int v112 = -993;
  }
  else
  {
    *(void *)(a2 + 16) += v37;
    uint64_t v111 = *(void *)(a1 + 8);
    int v112 = -995;
  }
  *(_DWORD *)a2 = v112;
  *(void *)(a2 + 80) = v111;
}

void sub_10002179C(void ***a1)
{
  char v2 = *a1;
  if (*v2)
  {
    sub_1000217F0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000217F0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

std::locale *sub_100021840(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1000EEAE0;
  signed __int8 v7 = a1 + 17;
  sub_10002179C((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  signed __int8 v7 = a1 + 11;
  sub_10001B264((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1000EE798;
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void sub_100021928(uint64_t a1, char *a2, char *a3)
{
  sub_100021B90(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000219C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000219E0(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  sub_100021B90(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_100021B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100021B90(void *result, char *a2, char *a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100009DA4();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    unint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)unint64_t v4 = v10;
    unint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)unint64_t v4 = 0;
  return result;
}

void sub_100021C38(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  sub_100021B90(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = (unsigned char *)a4;
      }
      else {
        char v10 = *(unsigned char **)a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100021D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100021D48()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_brack);
}

void sub_100021D8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_100021DA0(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = sub_100022330(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      uint64_t v10 = sub_100022150(a1, a2 + 2, a3, a4);
LABEL_34:
      uint64_t v6 = v10;
      char v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  uint64_t v18 = sub_1000223EC(a1, a2 + 2, a3, (uint64_t)&v26);
  unint64_t v4 = (unsigned char *)v18;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          uint64_t v14 = sub_100022618(a1, v13, a3, &v26);
        }
        else
        {
          uint64_t v14 = (char *)sub_1000224DC(a1, v13, a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    uint64_t v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (uint64_t v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          sub_100022C48(v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      uint64_t v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_36;
      }
LABEL_28:
      sub_100020A34(v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    char v20 = 1;
    unint64_t v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  unint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    uint64_t v22 = sub_1000223EC(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    unint64_t v4 = (unsigned char *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if (v16 == 92)
    {
      if (v11) {
        uint64_t v22 = (uint64_t)sub_100022618(a1, v14 + 2, a3, &v25);
      }
      else {
        uint64_t v22 = (uint64_t)sub_1000224DC(a1, v14 + 2, a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  sub_100022820(v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v20) {
    return v4;
  }
  return (unsigned char *)v6;
}

void sub_1000220F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100022150(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  for (uint64_t i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_33;
    }
  }
  if (&a2[i] == a3) {
LABEL_33:
  }
    sub_100021D48();
  sub_1000219E0(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    uint64_t v8 = v19;
    if (v19)
    {
      int v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    sub_100022EA4();
  }
  uint64_t v8 = v18;
  if (!v18) {
    goto LABEL_34;
  }
  int v9 = (char *)v17;
LABEL_14:
  sub_100021C38(a1, v9, &v9[v8], (uint64_t)__p);
  unint64_t v10 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10)
  {
    sub_100022EFC(a4, (long long *)__p);
  }
  else
  {
    uint64_t v11 = v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v11 = v18;
    }
    if (v11 == 2)
    {
      unint64_t v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        unint64_t v13 = (char *)v17;
      }
      sub_100022C48((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1) {
        sub_100022EA4();
      }
      int v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        int v12 = (char *)v17;
      }
      sub_100020A34((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v17);
  }
  return (uint64_t)&a2[i + 2];
}

void sub_1000222F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100022330(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_11;
    }
  }
  if (&a2[i] == a3) {
LABEL_11:
  }
    sub_100021D48();
  int v7 = sub_100023344(a1, a2, &a2[i], *(unsigned char *)(a1 + 24) & 1);
  if (!v7) {
    sub_1000232EC();
  }
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t sub_1000223EC(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    sub_100021D48();
  sub_1000219E0(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    sub_100022EA4();
  }
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *sub_1000224DC(uint64_t a1, char *a2, char *a3, std::string *this, uint64_t a5)
{
  if (a2 == a3) {
    sub_10001F6B4();
  }
  int v6 = *a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_100020A34(a5, 95);
        return (unsigned __int8 *)(a2 + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        long long v10 = this;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (unsigned __int8 *)(a2 + 1);
      }
      if (v6 != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (unsigned __int8 *)(a2 + 1);
  }
  if (v6 <= 82)
  {
    if (*a2)
    {
      if (v6 == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (unsigned __int8 *)(a2 + 1);
      }
      goto LABEL_25;
    }
    std::string::value_type v9 = 0;
    long long v10 = this;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    sub_100023418(a5, 95);
    return (unsigned __int8 *)(a2 + 1);
  }
LABEL_25:
  return sub_10001F89C(a1, a2, a3, this);
}

char *sub_100022618(uint64_t a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_45:
  }
    sub_10001F6B4();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (!this) {
          goto LABEL_43;
        }
        int v6 = this;
        LOBYTE(v5) = 10;
        goto LABEL_16;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (!this) {
          goto LABEL_43;
        }
        int v6 = this;
        LOBYTE(v5) = 13;
        goto LABEL_16;
      case 't':
        if (!this) {
          goto LABEL_43;
        }
        int v6 = this;
        LOBYTE(v5) = 9;
        goto LABEL_16;
      case 'v':
        if (!this) {
          goto LABEL_43;
        }
        int v6 = this;
        LOBYTE(v5) = 11;
        goto LABEL_16;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            int v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            int v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
        }
        break;
    }
    goto LABEL_43;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        int v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
LABEL_43:
      sub_10001FBA0(a1);
    }
LABEL_14:
    if (this)
    {
      int v6 = this;
      goto LABEL_16;
    }
    goto LABEL_43;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_45;
  }
  std::string::value_type v7 = v5 - 48;
  unint64_t v11 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_38:
    unint64_t v11 = a3;
    goto LABEL_39;
  }
  if ((*v11 & 0xF8) == 0x30)
  {
    std::string::value_type v7 = *v11 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v8 = a2[2];
      int v9 = v8 & 0xF8;
      std::string::value_type v10 = v8 + 8 * v7 - 48;
      if (v9 == 48) {
        unint64_t v11 = a2 + 3;
      }
      else {
        unint64_t v11 = a2 + 2;
      }
      if (v9 == 48) {
        std::string::value_type v7 = v10;
      }
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_39:
  if (!this) {
    sub_10001FBA0(a1);
  }
  std::string::operator=(this, v7);
  return v11;
}

void sub_100022820(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        char v8 = v4;
        if (v4[23] < 0) {
          char v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        std::string::value_type v10 = v4;
        if (v4[23] < 0) {
          std::string::value_type v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        unint64_t v13 = v3;
        if (v3[23] < 0) {
          unint64_t v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        int v15 = v3;
        if (v3[23] < 0) {
          int v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        unsigned __int8 v19 = a2;
        if (a2[23] < 0) {
          unsigned __int8 v19 = *(char **)a2;
        }
        char v20 = a2;
        if (a2[23] < 0) {
          char v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        int v23 = a3;
        if (a3[23] < 0) {
          int v23 = *(char **)a3;
        }
        std::string v24 = a3;
        if (a3[23] < 0) {
          std::string v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      std::string v26 = v4;
      unint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    sub_100021928(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      uint64_t v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    sub_100021928(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)long long v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::string __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    sub_100023660((uint64_t *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = a3[23]), v29 != 1)) {
      sub_1000237CC();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      size_t v30 = a2;
      if (a2[23] < 0) {
        size_t v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v30);
      size_t v32 = v4;
      if (v4[23] < 0) {
        size_t v32 = *(unsigned char **)v4;
      }
      unsigned char *v32 = v31;
      int v33 = v3;
      if (v3[23] < 0) {
        int v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v33);
      int v35 = v3;
      if (v3[23] < 0) {
        int v35 = *(unsigned char **)v3;
      }
      *int v35 = v34;
    }
    *(_OWORD *)long long v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    sub_100023660((uint64_t *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_100022BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void sub_100022C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    std::string::value_type v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)sub_100023824(v18, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v27 = &v25[2 * v21];
        uint64_t v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)sub_100023824(v18, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v27 = &v37[2 * v33];
        uint64_t v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    sub_100019424();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *char v9 = v8;
    std::string v26 = v9 + 1;
    goto LABEL_48;
  }
  std::string::value_type v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3) {
    goto LABEL_49;
  }
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)sub_100023824(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v27 = &v17[2 * v13];
  uint64_t v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  std::string v26 = v27 + 2;
  size_t v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 120) = v26;
  *(void *)(a1 + 128) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 120) = v26;
}

void sub_100022EA4()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_collate);
}

void sub_100022EE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100022EFC(uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = sub_100022FA0(v3, a2);
  }
  else
  {
    sub_100022F40(v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void *sub_100022F40(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_10006770C((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_100022F98(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100022FA0(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100019424();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    std::string::value_type v10 = (char *)sub_100019D14(v7, v9);
  }
  else {
    std::string::value_type v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10006770C(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  uint64_t v16 = v11 + 24;
  sub_1000230C4(a1, v15);
  uint64_t v13 = a1[1];
  sub_10002325C((uint64_t)v15);
  return v13;
}

void sub_1000230B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002325C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000230C4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10002313C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10002313C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_1000231DC((uint64_t)v12);
  return a6;
}

uint64_t sub_1000231DC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100023214(a1);
  }
  return a1;
}

void sub_100023214(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_10002325C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100023294(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_1000232EC()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_ctype);
}

void sub_100023330(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100023344(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  sub_100021B90(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_1000233FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100023418(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    uint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      uint64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          unsigned __int8 v12 = operator new(v11);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          uint64_t v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_100019424();
    }
    goto LABEL_22;
  }
  unint64_t v6 = (unint64_t *)(a1 + 64);
  uint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unsigned __int8 v12 = operator new(v28);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        uint64_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          __int16 v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  long long v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    unsigned __int8 v12 = operator new(v18);
  }
  else {
    unsigned __int8 v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  unsigned __int8 v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 80) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

void **sub_100023660(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_100019424();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      long long v15 = (char *)sub_10001AFFC((uint64_t)result, v14);
    }
    else {
      long long v15 = 0;
    }
    unint64_t v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    _OWORD v19[2] = v16 + 48;
    sub_10001B2FC(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = sub_10001B4B8(v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_1000237B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B4B8((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000237CC()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_range);
}

void sub_100023810(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_100023824(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100018AF4();
  }
  return operator new(2 * a2);
}

void *sub_100023858(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1000238C4(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator delete();
}

uint64_t sub_100023950(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_100023980(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1000239EC(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator delete();
}

uint64_t sub_100023A78(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_100023AB0()
{
}

void sub_100023C08(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100023C40(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            sub_100023CE0();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return a2;
}

void sub_100023CE0()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_badbrace);
}

void sub_100023D24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100023D38()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_brace);
}

void sub_100023D7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100023D94(void *a1)
{
  sub_100023EEC(a1);
  operator delete();
}

unsigned int *sub_100023DCC(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    unint64_t *v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return sub_100023FA0(result, a2);
    }
    goto LABEL_23;
  }
  unint64_t *v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *sub_100023E80(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return sub_100023FA0(result, a3);
  }
  return result;
}

void sub_100023EB4(void *a1)
{
  sub_100023EEC(a1);
  operator delete();
}

void *sub_100023EEC(void *a1)
{
  *a1 = off_1000EEC18;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_1000EE798;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

unsigned int *sub_100023FA0(unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    uint64_t v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(void *)(v7 - 8) = v5;
      *(void *)uint64_t v7 = v5;
      *(unsigned char *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_100023FF8()
{
}

uint64_t sub_10002400C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_100024024(void *a1)
{
  sub_100023EEC(a1);
  operator delete();
}

void sub_10002405C(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_100024068(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void sub_100024090()
{
}

uint64_t sub_1000240A4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_1000240B8()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_empty);
}

void sub_1000240FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100024110(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = sub_1000241AC(a1, a2, a3);
  if (v6 == a2) {
    return a2;
  }
  return sub_1000242BC(a1, v6, a3);
}

unsigned char *sub_1000241AC(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v6 = sub_100024460(a1, a2, a3);
  uint64_t v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      int v8 = a2[1];
      if (v8 == 40)
      {
        uint64_t v9 = (uint64_t)(a2 + 2);
        sub_10001F3F0(a1);
        do
        {
          uint64_t v10 = (unsigned char *)v9;
          uint64_t v9 = sub_100024110(a1, v9, a3);
        }
        while ((unsigned char *)v9 != v10);
        if (v10 == a3 || v10 + 1 == a3 || *v10 != 92 || v10[1] != 41) {
          sub_10001D8F0();
        }
        uint64_t v7 = v10 + 2;
        sub_10001F474(a1);
      }
      else
      {
        int v12 = sub_10002474C(a1, v8);
        uint64_t v13 = 2;
        if (!v12) {
          uint64_t v13 = 0;
        }
        return &a2[v13];
      }
    }
  }
  return v7;
}

unsigned __int8 *sub_1000242BC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if (v4 == 42) {
      sub_100023AB0();
    }
    if (a2 + 1 != a3 && v4 == 92 && a2[1] == 123)
    {
      uint64_t v6 = a2 + 2;
      int v13 = 0;
      uint64_t v7 = sub_100023C40(a1, a2 + 2, a3, &v13);
      if (v7 == v6) {
        goto LABEL_16;
      }
      if (v7 != a3)
      {
        int v8 = v7 + 1;
        int v9 = *v7;
        if (v9 == 44)
        {
          int v12 = -1;
          uint64_t v10 = sub_100023C40(a1, v8, a3, &v12);
          if (v10 != a3 && v10 + 1 != a3 && *v10 == 92 && v10[1] == 125)
          {
            if (v12 != -1 && v12 < v13) {
LABEL_16:
            }
              sub_100023CE0();
LABEL_20:
            sub_100023AB0();
          }
        }
        else if (v8 != a3 && v9 == 92 && *v8 == 125)
        {
          goto LABEL_20;
        }
      }
      sub_100023D38();
    }
  }
  return a2;
}

unsigned char *sub_100024460(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = sub_100024598(a1, a2, a3);
    if (result != a2) {
      return result;
    }
    goto LABEL_12;
  }
  int v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    sub_10001FBA0(a1);
  }
  uint64_t result = sub_100024598(a1, a2, a3);
  if (result == a2)
  {
    if (*a2 == 46) {
      operator new();
    }
LABEL_12:
    return sub_10001F2DC(a1, a2, a3);
  }
  return result;
}

unsigned char *sub_100024598(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3
    && a2 + 1 != a3
    && *a2 == 92
    && ((char)a2[1] - 36) <= 0x3A
    && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
  {
    sub_10001FBA0(a1);
  }
  return a2;
}

void *sub_100024614(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_100024680(void *a1)
{
  *a1 = off_1000EE798;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator delete();
}

uint64_t sub_10002470C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

uint64_t sub_10002474C(uint64_t a1, unsigned __int8 a2)
{
  if (((a2 & 0xF8) == 0x30 || (a2 & 0xFE) == 0x38) && a2 - 49 <= 8)
  {
    if (a2 - 48 <= *(_DWORD *)(a1 + 28)) {
      sub_10001FD38(a1);
    }
    sub_10001FCE0();
  }
  return 0;
}

unsigned __int8 *sub_1000247AC(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_10002480C(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    sub_1000240B8();
  }
  do
  {
    uint64_t v7 = v6;
    int v6 = sub_10002480C(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *sub_10002480C(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_100024950(a1, a2, a3);
  uint64_t v7 = (unsigned __int8 *)v6;
  if (v6 == a2 && v6 != a3)
  {
    int v8 = *a2;
    if (v8 == 36) {
      sub_10001D730();
    }
    if (v8 != 40)
    {
      if (v8 == 94) {
        sub_10001D6AC();
      }
      return (unsigned __int8 *)a2;
    }
    sub_10001F3F0(a1);
    ++*(_DWORD *)(a1 + 36);
    int v9 = (char *)sub_10001C674(a1, a2 + 1, a3);
    if (v9 == a3 || (uint64_t v10 = v9, *v9 != 41)) {
      sub_10001D8F0();
    }
    sub_10001F474(a1);
    --*(_DWORD *)(a1 + 36);
    uint64_t v7 = (unsigned __int8 *)(v10 + 1);
  }
  if (v7 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  return sub_10001D3A8(a1, v7, (unsigned __int8 *)a3);
}

char *sub_100024950(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = sub_100024A38(a1, a2, a3);
  if (result == a2)
  {
    uint64_t result = sub_100024AC4(a1, a2, a3);
    if (result == a2)
    {
      if (a2 != a3 && *a2 == 46) {
        operator new();
      }
      return sub_10001F2DC(a1, a2, a3);
    }
  }
  return result;
}

char *sub_100024A38(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v3 = *a2;
    uint64_t v4 = (v3 - 36);
    if (v4 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (v3 - 36)) & 0x5800000080004D1) != 0) {
      return a2;
    }
    if (v4 == 5)
    {
      if (*(_DWORD *)(a1 + 36)) {
        return a2;
      }
    }
    else
    {
LABEL_8:
      if ((v3 - 123) < 2) {
        return a2;
      }
    }
    sub_10001FBA0(a1);
  }
  return a2;
}

char *sub_100024AC4(uint64_t a1, char *a2, char *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  uint64_t v4 = (unsigned __int8 *)(a2 + 1);
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  int v5 = (char)*v4;
  BOOL v6 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v6 || (v5 - 123) < 3) {
    sub_10001FBA0(a1);
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    int v8 = sub_10002474C(a1, *v4);
    uint64_t v9 = 2;
    if (!v8) {
      uint64_t v9 = 0;
    }
    v3 += v9;
    return v3;
  }
  return sub_100022618(a1, (char *)v4, a3, 0);
}

std::string *sub_100024B9C(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  __int16 v6 = a6;
  uint64_t v9 = (std::string::value_type *)a2;
  sub_100025224((uint64_t)v29, a2, a3, a4, a6);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v20, 0, sizeof(v20));
  memset(v17, 0, sizeof(v17));
  int v18 = 0;
  if (sub_100024D5C((uint64_t)v29, (uint64_t)v17))
  {
    if ((v6 & 0x200) == 0)
    {
      while (v9 != (std::string::value_type *)a3)
        std::string::push_back(a1, *v9++);
    }
  }
  else
  {
    unint64_t v11 = 0;
    int v12 = 0;
    int v13 = (unsigned __int8 *)&a5[strlen(a5)];
    while (!sub_100024D5C((uint64_t)v29, (uint64_t)v17))
    {
      if ((v6 & 0x200) == 0)
      {
        unint64_t v14 = (std::string::value_type *)v30[6];
        long long v15 = (std::string::value_type *)v30[7];
        while (v14 != v15)
          std::string::push_back(a1, *v14++);
      }
      a1 = sub_100024DF4((std::string::value_type ***)v30, a1, (unsigned __int8 *)a5, v13, v6);
      int v12 = (std::string::value_type *)v30[9];
      unint64_t v11 = (std::string::value_type *)v30[10];
      if ((v6 & 0x400) != 0) {
        break;
      }
      sub_100025060((uint64_t)v29);
    }
    if ((v6 & 0x200) == 0)
    {
      while (v12 != v11)
        std::string::push_back(a1, *v12++);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  return a1;
}

void sub_100024D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100024D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1 + 32;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v6 + 8);
  uint64_t v9 = a2 + 32;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(v9 + 8);
  BOOL v10 = v8 == v7 && v5 == v4;
  if (v5 != v4 && v8 != v7) {
    return *(void *)a1 == *(void *)a2
  }
        && *(void *)(a1 + 8) == *(void *)(a2 + 8)
        && *(void *)(a1 + 16) == *(void *)(a2 + 16)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
        && sub_100027638(v4, v7) == 0;
  return v10;
}

std::string *sub_100024DF4(std::string::value_type ***a1, std::string *this, unsigned __int8 *a3, unsigned __int8 *a4, __int16 a5)
{
  uint64_t v6 = a3;
  if ((a5 & 0x100) != 0)
  {
    if (a3 == a4) {
      return this;
    }
    while (1)
    {
      int v30 = *v6;
      if (v30 == 92)
      {
        unint64_t v34 = v6 + 1;
        if (v6 + 1 != a4)
        {
          int v30 = *v34;
          if ((v30 - 48) <= 9u)
          {
            unint64_t v35 = (v30 - 48);
            if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v35) {
              uint64_t v36 = (uint64_t)(a1 + 3);
            }
            else {
              uint64_t v36 = (uint64_t)&(*a1)[3 * v35];
            }
            uint64_t v37 = *(std::string::value_type **)v36;
            long long v38 = *(std::string::value_type **)(v36 + 8);
            while (v37 != v38)
            {
              std::string::value_type v39 = *v37++;
              std::string::push_back(this, v39);
            }
            goto LABEL_55;
          }
          ++v6;
        }
      }
      else if (v30 == 38)
      {
        __int16 v31 = **a1;
        char v32 = (*a1)[1];
        while (v31 != v32)
        {
          std::string::value_type v33 = *v31++;
          std::string::push_back(this, v33);
        }
        goto LABEL_54;
      }
      std::string::push_back(this, v30);
LABEL_54:
      unint64_t v34 = v6;
LABEL_55:
      uint64_t v6 = v34 + 1;
      if (v34 + 1 == a4) {
        return this;
      }
    }
  }
  if (a3 != a4)
  {
    do
    {
      int v9 = *v6;
      BOOL v10 = v6 + 1;
      if (v9 == 36 && v10 != a4)
      {
        int v12 = (char)*v10;
        int v9 = *v10;
        if (v12 > 38)
        {
          if (v12 == 39)
          {
            uint64_t v19 = (std::string::value_type *)a1[9];
            uint64_t v20 = (std::string::value_type *)a1[10];
            while (v19 != v20)
            {
              std::string::value_type v21 = *v19++;
              std::string::push_back(this, v21);
            }
            goto LABEL_10;
          }
          if (v12 == 96)
          {
            unint64_t v16 = (std::string::value_type *)a1[6];
            long long v17 = (std::string::value_type *)a1[7];
            while (v16 != v17)
            {
              std::string::value_type v18 = *v16++;
              std::string::push_back(this, v18);
            }
            goto LABEL_10;
          }
        }
        else
        {
          if (v12 == 36) {
            goto LABEL_9;
          }
          if (v12 == 38)
          {
            int v13 = **a1;
            unint64_t v14 = (*a1)[1];
            while (v13 != v14)
            {
              std::string::value_type v15 = *v13++;
              std::string::push_back(this, v15);
            }
            goto LABEL_10;
          }
        }
        if ((v9 - 48) <= 9)
        {
          unint64_t v22 = *v10 - 48;
          if (v6 + 2 != a4)
          {
            uint64_t v23 = v6[2];
            unsigned int v24 = v23 - 48;
            uint64_t v25 = v23 + 10 * (int)v22 - 48;
            if (v24 > 9)
            {
              BOOL v10 = v6 + 1;
            }
            else
            {
              unint64_t v22 = v25;
              BOOL v10 = v6 + 2;
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v22) {
            uint64_t v26 = (uint64_t)(a1 + 3);
          }
          else {
            uint64_t v26 = (uint64_t)&(*a1)[3 * (int)v22];
          }
          char v27 = *(std::string::value_type **)v26;
          uint64_t v28 = *(std::string::value_type **)(v26 + 8);
          while (v27 != v28)
          {
            std::string::value_type v29 = *v27++;
            std::string::push_back(this, v29);
          }
          goto LABEL_10;
        }
        LOBYTE(v9) = 36;
      }
      BOOL v10 = v6;
LABEL_9:
      std::string::push_back(this, v9);
LABEL_10:
      uint64_t v6 = v10 + 1;
    }
    while (v10 + 1 != a4);
  }
  return this;
}

uint64_t sub_100025060(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  uint64_t v2 = *(void **)(a1 + 32);
  int v4 = *(_DWORD *)(v3 - 8);
  int v5 = v4 | 0x800;
  *(_DWORD *)(v3 - 8) = v4 | 0x800;
  if (*(void **)(v3 + 8) == v2) {
    uint64_t v6 = (void *)(v3 + 24);
  }
  else {
    uint64_t v6 = v2;
  }
  uint64_t v7 = v6[1];
  if (*v6 != v7)
  {
LABEL_5:
    *(_DWORD *)(a1 + 24) = v5 | 0x80;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    char v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    char v22 = 0;
    char v23 = 0;
    uint64_t v24 = 0;
    *(_OWORD *)std::string __p = 0u;
    memset(v16, 0, sizeof(v16));
    char v10 = sub_100025328(v8, v7, v9, (uint64_t)__p, v5 | 0x80u);
    sub_100025504(v3, v7, v9, (uint64_t *)__p, (v5 & 0x800) != 0);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v10 & 1) == 0)
    {
      uint64_t v2 = *(void **)v3;
LABEL_14:
      if (v2)
      {
        *(void *)(a1 + 40) = v2;
        operator delete(v2);
        *(void *)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        *(void *)(v3 + 16) = 0;
      }
      *(unsigned char *)(a1 + 128) = 0;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 25) = 0u;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(unsigned char *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
      *(unsigned char *)(a1 + 120) = 0;
      *(void *)(a1 + 136) = 0;
      return a1;
    }
    return a1;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11 == v7) {
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v16, 0, sizeof(v16));
  char v13 = sub_100025328(v12, v7, v11, (uint64_t)__p, v4 | 0x860u);
  sub_100025504(v3, v7, v11, (uint64_t *)__p, 1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v13 & 1) == 0)
  {
    ++v7;
    int v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_5;
  }
  return a1;
}

void sub_100025204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100025224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5 = a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v9 = a1 + 32;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v12, 0, sizeof(v12));
  sub_100025328(a4, a2, a3, (uint64_t)__p, a5);
  sub_100025504(v9, a2, a3, (uint64_t *)__p, (v5 & 0x800) != 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000252FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 40) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100025328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  sub_10001E1B0(a4, *(_DWORD *)(a1 + 28) + 1, a2, a3, (unsigned __int16)(v9 & 0x800) >> 11);
  if (sub_100025694(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
  {
    if (*(void *)(a4 + 8) == *(void *)a4) {
      uint64_t v10 = (uint64_t *)(a4 + 24);
    }
    else {
      uint64_t v10 = *(uint64_t **)a4;
    }
LABEL_8:
    uint64_t v11 = *v10;
    *(void *)(a4 + 56) = *v10;
    *(unsigned char *)(a4 + 64) = *(void *)(a4 + 48) != v11;
    uint64_t v12 = v10[1];
    *(void *)(a4 + 72) = v12;
    *(unsigned char *)(a4 + 88) = v12 != *(void *)(a4 + 80);
    return 1;
  }
  if (a2 != a3 && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    uint64_t v15 = a2 + 1;
    if (v15 != a3)
    {
      while (1)
      {
        sub_10001E694((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), (long long *)(a4 + 24));
        int v16 = sub_100025694(a1, v15, a3, (uint64_t *)a4, v14, 0);
        uint64_t v18 = *(void *)a4;
        uint64_t v17 = *(void *)(a4 + 8);
        if (v16) {
          break;
        }
        sub_10001E694((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3), (long long *)(a4 + 24));
        if (++v15 == a3) {
          goto LABEL_14;
        }
      }
      if (v17 == v18) {
        uint64_t v10 = (uint64_t *)(a4 + 24);
      }
      else {
        uint64_t v10 = *(uint64_t **)a4;
      }
      goto LABEL_8;
    }
LABEL_14:
    sub_10001E694((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), (long long *)(a4 + 24));
    if (sub_100025694(a1, a3, a3, (uint64_t *)a4, v14, 0))
    {
      if (*(void *)(a4 + 8) == *(void *)a4) {
        uint64_t v10 = (uint64_t *)(a4 + 24);
      }
      else {
        uint64_t v10 = *(uint64_t **)a4;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  *(void *)(a4 + 8) = *(void *)a4;
  return result;
}

void sub_100025504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  sub_100027480(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  uint64_t v11 = *(void *)a1;
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      uint64_t v17 = (void *)(v15 + v12);
      if (v16 <= v13) {
        uint64_t v18 = a4 + 3;
      }
      else {
        uint64_t v18 = v17;
      }
      *(void *)(v11 + v12) = a2 + *v18 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13) {
        char v19 = a4 + 3;
      }
      else {
        char v19 = (uint64_t *)(*a4 + v12);
      }
      *(void *)(*(void *)a1 + v12 + 8) = a2 + v19[1] - v10;
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13) {
        uint64_t v20 = a4 + 3;
      }
      else {
        uint64_t v20 = (uint64_t *)(*a4 + v12);
      }
      char v21 = *((unsigned char *)v20 + 16);
      uint64_t v11 = *(void *)a1;
      uint64_t v22 = *(void *)(a1 + 8);
      *(unsigned char *)(*(void *)a1 + v12 + 16) = v21;
      ++v13;
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v11) >> 3));
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v23 = a2 + a4[6] - v10;
  *(void *)(a1 + 48) = v23;
  *(void *)(a1 + 56) = a2 + a4[7] - v10;
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a4 + 64);
  *(void *)(a1 + 72) = a2 + a4[9] - v10;
  *(void *)(a1 + 80) = a2 + a4[10] - v10;
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = v23;
  }
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t sub_100025694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return sub_10001E224(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return sub_100025C64(a1, a2, a3, a4, a5, a6);
  }
  return sub_1000256B4(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000256B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)int v57 = 0;
    memset(&v57[8], 0, 32);
    long long v58 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    memset(v60, 0, 21);
    sub_10002622C(&v61, (uint64_t)v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v57[32])
    {
      *(void *)&long long v58 = *(void *)&v57[32];
      operator delete(*(void **)&v57[32]);
    }
    unint64_t v52 = a4;
    uint64_t v12 = *((void *)&v61 + 1);
    unint64_t v13 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    sub_10001E88C(*(void *)(v12 + 8 * v14) + 32 * v16 + 56, *(unsigned int *)(a1 + 32));
    char v55 = 0;
    unsigned int v18 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = a2;
    uint64_t v19 = a3 - a2;
    uint64_t v20 = *((void *)&v63 + 1);
    uint64_t v21 = *((void *)&v61 + 1);
    unint64_t v22 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v23 = v22 / 0x2A;
    unint64_t v24 = 3 * (v22 % 0x2A);
    *(void *)(*(void *)(*((void *)&v61 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    uint64_t v25 = *(void *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(unsigned char *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19) {
        sub_10001E8BC();
      }
      unint64_t v27 = v20 + v63 - 1;
      uint64_t v28 = *(void *)(*((void *)&v61 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == a3;
          BOOL v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v53;
          if ((v55 & (v53 >= v37)) == 0) {
            uint64_t v38 = v37;
          }
          if (v38 != v19)
          {
            uint64_t v53 = v38;
            sub_100026330(&v61);
            char v55 = 1;
            goto LABEL_38;
          }
          std::string::value_type v39 = (void **)*((void *)&v61 + 1);
          uint64_t v40 = v62;
          if ((void)v62 == *((void *)&v61 + 1))
          {
            uint64_t v40 = *((void *)&v61 + 1);
          }
          else
          {
            __int16 v41 = (void *)(*((void *)&v61 + 1) + 8 * ((unint64_t)v63 / 0x2A));
            int v42 = (void *)(*v41 + 96 * ((unint64_t)v63 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v61 + 1) + 8 * ((*((void *)&v63 + 1) + (void)v63) / 0x2AuLL))
                + 96 * ((*((void *)&v63 + 1) + (void)v63) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                sub_10001ECEC((uint64_t)&v63 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  int v44 = (void *)v41[1];
                  ++v41;
                  int v42 = v44;
                }
              }
              while (v42 != (void *)v43);
              std::string::value_type v39 = (void **)*((void *)&v61 + 1);
              uint64_t v40 = v62;
            }
          }
          *((void *)&v63 + 1) = 0;
          unint64_t v47 = v40 - (void)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              std::string::value_type v39 = (void **)(*((void *)&v61 + 1) + 8);
              *((void *)&v61 + 1) = v39;
              unint64_t v47 = v62 - (void)v39;
            }
            while ((void)v62 - (void)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            uint64_t v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v48 = 42;
          }
          *(void *)&long long v63 = v48;
LABEL_53:
          char v55 = 1;
          uint64_t v53 = v19;
LABEL_38:
          uint64_t v20 = *((void *)&v63 + 1);
          if (*((void *)&v63 + 1)) {
            continue;
          }
          if ((v55 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v49 = *v52;
          *(void *)uint64_t v49 = v54;
          *(void *)(v49 + 8) = v54 + v53;
          uint64_t v50 = 1;
          *(unsigned char *)(v49 + 16) = 1;
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          sub_1000263C4((uint64_t)&v61, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          sub_100026330(&v61);
          goto LABEL_38;
        case 0xFFFFFC20:
          long long v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)int v57 = *(_OWORD *)v30;
          *(_OWORD *)&v57[16] = v45;
          long long v58 = 0uLL;
          *(void *)&v57[32] = 0;
          sub_10001F068(&v57[32], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v60[0] = 0;
          sub_10001F0E8((char *)__p, *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v46 = *v32;
          *(void *)((char *)&v60[1] + 5) = *(void *)(v30 + 85);
          v60[1] = v46;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, unsigned char *))(*(void *)v60[1] + 24))(v60[1], 0, v57);
          sub_10002622C(&v61, (uint64_t)v57);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v57[32])
          {
            *(void *)&long long v58 = *(void *)&v57[32];
            operator delete(*(void **)&v57[32]);
          }
          goto LABEL_38;
        default:
          sub_10001E914();
      }
      break;
    }
  }
  else
  {
LABEL_56:
    uint64_t v50 = 0;
  }
  sub_100026FD0(&v61);
  return v50;
}

void sub_100025BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_100026FD0((void *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_100025C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  char v55 = 0;
  BOOL v56 = 0;
  v57[0] = 0;
  *(_DWORD *)unint64_t v52 = 0;
  memset(&v52[8], 0, 32);
  long long v53 = 0u;
  memset(v54, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(void *)&long long v50 = a3;
    *((void *)&v50 + 1) = a3;
    char v51 = 0;
    *(_DWORD *)unint64_t v47 = 0;
    memset(&v47[8], 0, 48);
    *(_OWORD *)std::string __p = 0uLL;
    memset(v49, 0, 21);
    BOOL v56 = (_OWORD *)sub_10001E96C((uint64_t *)&v55, (uint64_t)v47);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v47[32])
    {
      *(void *)&v47[40] = *(void *)&v47[32];
      operator delete(*(void **)&v47[32]);
    }
    int v42 = a4;
    uint64_t v11 = v56;
    *((_DWORD *)v56 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 10) = a2;
    *((void *)v11 - 9) = a3;
    sub_10001E850((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v50);
    sub_10001E88C((uint64_t)v56 - 40, *(unsigned int *)(a1 + 32));
    uint64_t v43 = a3;
    uint64_t v44 = 0;
    char v12 = 0;
    unsigned int v13 = 0;
    uint64_t v14 = a3 - a2;
    uint64_t v15 = v56;
    *((void *)v56 - 2) = v6;
    *((_DWORD *)v15 - 2) = a5;
    *((unsigned char *)v15 - 4) = a6;
    do
    {
      BOOL v16 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v14;
      if (!v16) {
        sub_10001E8BC();
      }
      unsigned int v18 = v15 - 1;
      uint64_t v17 = *((void *)v15 - 2);
      uint64_t v19 = v15 - 6;
      if (v17) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16))(v17, v15 - 6);
      }
      switch(*(_DWORD *)v19)
      {
        case 0xFFFFFC18:
          uint64_t v20 = *((void *)v15 - 10);
          if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v43) {
            goto LABEL_19;
          }
          char v27 = v12;
          uint64_t v28 = v20 - *((void *)v15 - 11);
          uint64_t v29 = v44;
          if ((v27 & (v44 >= v28)) == 0)
          {
            long long v30 = *(v15 - 5);
            *(_OWORD *)unint64_t v52 = *(_OWORD *)v19;
            *(_OWORD *)&v52[16] = v30;
            if (v52 != v19)
            {
              sub_100027178(&v52[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
              sub_100027330(v54, *((uint64_t **)v15 - 5), *((uint64_t **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
            }
            uint64_t v31 = (void *)*v18;
            *(void **)((char *)&v54[3] + 5) = *(void **)((char *)v15 - 11);
            v54[3] = v31;
            uint64_t v29 = v28;
          }
          char v32 = v56;
          if (v29 == v14)
          {
            uint64_t v33 = (uint64_t)v55;
            while (v32 != (void *)v33)
            {
              v32 -= 12;
              sub_10001ECEC((uint64_t)v57, v32);
            }
            BOOL v56 = (_OWORD *)v33;
            char v12 = 1;
            uint64_t v44 = v14;
          }
          else
          {
            uint64_t v44 = v29;
            unint64_t v34 = v56 - 6;
            sub_10001ECEC((uint64_t)v57, (void *)v56 - 12);
            BOOL v56 = v34;
            char v12 = 1;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          uint64_t v21 = v56 - 6;
          sub_10001ECEC((uint64_t)v57, (void *)v56 - 12);
          BOOL v56 = v21;
          break;
        case 0xFFFFFC20:
          long long v22 = *(v15 - 5);
          *(_OWORD *)unint64_t v47 = *(_OWORD *)v19;
          *(_OWORD *)&v47[16] = v22;
          memset(&v47[32], 0, 24);
          sub_10001F068(&v47[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v49[0] = 0;
          sub_10001F0E8((char *)__p, *((long long **)v15 - 5), *((long long **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
          unint64_t v23 = (void *)*v18;
          *(void *)((char *)&v49[1] + 5) = *(void *)((char *)v15 - 11);
          v49[1] = v23;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24))(*v18, 1, v15 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v49[1] + 24))(v49[1], 0, v47);
          unint64_t v24 = v56;
          if ((unint64_t)v56 >= v57[0])
          {
            BOOL v56 = (_OWORD *)sub_10001E96C((uint64_t *)&v55, (uint64_t)v47);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v25 = *(_OWORD *)&v47[16];
            *BOOL v56 = *(_OWORD *)v47;
            v24[1] = v25;
            *((void *)v24 + 4) = 0;
            *((void *)v24 + 5) = 0;
            *((void *)v24 + 6) = 0;
            *((void *)v24 + 7) = 0;
            v24[2] = *(_OWORD *)&v47[32];
            *((void *)v24 + 6) = *(void *)&v47[48];
            memset(&v47[32], 0, 24);
            *((void *)v24 + 8) = 0;
            *((void *)v24 + 9) = 0;
            *(_OWORD *)((char *)v24 + 56) = *(_OWORD *)__p;
            *((void *)v24 + 9) = v49[0];
            __p[0] = 0;
            __p[1] = 0;
            v49[0] = 0;
            uint64_t v26 = v49[1];
            *(void *)((char *)v24 + 85) = *(void *)((char *)&v49[1] + 5);
            *((void *)v24 + 10) = v26;
            BOOL v56 = v24 + 6;
          }
          if (*(void *)&v47[32])
          {
            *(void *)&v47[40] = *(void *)&v47[32];
            operator delete(*(void **)&v47[32]);
          }
          break;
        default:
          sub_10001E914();
      }
      uint64_t v15 = v56;
    }
    while (v55 != v56);
    if (v12)
    {
      uint64_t v35 = *v42;
      *(void *)uint64_t v35 = a2;
      *(void *)(v35 + 8) = a2 + v44;
      *(unsigned char *)(v35 + 16) = 1;
      if ((void)v53 != *(void *)&v52[32])
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *(void *)&v52[32]) >> 3);
        uint64_t v37 = (unsigned char *)(*(void *)&v52[32] + 16);
        unsigned int v38 = 1;
        do
        {
          uint64_t v39 = v35 + 24 * v38;
          *(_OWORD *)uint64_t v39 = *((_OWORD *)v37 - 1);
          char v40 = *v37;
          v37 += 24;
          *(unsigned char *)(v39 + 16) = v40;
          BOOL v16 = v36 > v38++;
        }
        while (v16);
      }
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (v54[0])
  {
    v54[1] = v54[0];
    operator delete(v54[0]);
  }
  if (*(void *)&v52[32])
  {
    *(void *)&long long v53 = *(void *)&v52[32];
    operator delete(*(void **)&v52[32]);
  }
  *(void *)unint64_t v52 = &v55;
  sub_10001F1A0((void ***)v52);
  return v6;
}

void sub_1000261A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_10001E80C(&a17);
  sub_10001E80C(&a33);
  a33 = v33 - 120;
  sub_10001F1A0((void ***)&a33);
  _Unwind_Resume(a1);
}

__n128 sub_10002622C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1000264B8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t sub_100026330(void *a1)
{
  uint64_t v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  sub_10001ECEC((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return sub_100026C3C(a1, 1);
}

int64x2_t sub_1000263C4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_100026CB4((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(void *)(v7 - 56) = 0;
  *(void *)(v7 - 48) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v7 - 40) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1000CA450);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_1000264B8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_10001943C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_1000267D0(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_1000268E8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_10001943C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        char v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)char v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  BOOL v56 = a1 + 3;
  *(void *)&long long v54 = sub_10001943C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFC0uLL);
  sub_100026A08(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100026B20((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100026784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000267D0(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_10001943C(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      char v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_1000268E8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_10001943C(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_100026A08(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_10001943C(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_100026B20(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_10001943C(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_100026C3C(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_100026CB4(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = sub_10001943C(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      __int16 v41 = operator new(0xFC0uLL);
      sub_100026A08(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_10001943C((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::string __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      uint64_t v43 = v33;
      unsigned int v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFC0uLL);
        sub_1000267D0(a1, &__p);
        unint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFC0uLL);
      }
      sub_1000268E8((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1000268E8((uint64_t)a1, &__p);
  }
}

void sub_100026F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100026FD0(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_10001ECEC((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }
  void *v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }
  return sub_100027128((uint64_t)a1);
}

uint64_t sub_100027128(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

char *sub_100027178(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          v26[16] = *((unsigned char *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }
    else
    {
      int64_t v21 = (long long *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((unsigned char *)v6 + 16);
          uint64_t v6 = (long long *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      uint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          long long v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (long long *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      int64_t v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_100019424();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = sub_10001AAC0(a1, v12);
    int64_t v15 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        long long v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    int64_t v18 = v16 - v13;
  }
  *uint64_t v14 = &v13[v18];
  return result;
}

char *sub_100027330(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      long long v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = (long long *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      unint64_t v23 = v12;
      if (v20 != (long long *)a3)
      {
        long long v24 = v12;
        do
        {
          long long v25 = *v20++;
          *(_OWORD *)long long v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (long long *)a3);
      }
      long long v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      sub_100019424();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = sub_10001F15C(a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        long long v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    long long v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void sub_100027480(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1000274BC((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void sub_1000274BC(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[3 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        *((unsigned char *)v7 + 16) = 0;
        v7 += 3;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_100019424();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)sub_100019D14(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    int64_t v15 = &v12[24 * v8];
    long long v16 = &v15[24 * a2];
    uint64_t v17 = 24 * a2;
    int64_t v18 = v15;
    do
    {
      *(void *)int64_t v18 = 0;
      *((void *)v18 + 1) = 0;
      v18[16] = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    unint64_t v19 = &v12[24 * v11];
    uint64_t v21 = (char *)*a1;
    unint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *((void *)v15 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      unint64_t v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

uint64_t sub_100027638(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    sub_100021B90(&__p, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  else
  {
    std::string __p = 0;
    size_t v19 = 0;
    uint64_t v20 = 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    sub_100021B90(&v15, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v17);
    unint64_t v5 = v15;
    size_t v4 = v16;
  }
  else
  {
    size_t v4 = 0;
    unint64_t v5 = 0;
    unsigned int v3 = 0;
    int64_t v15 = 0;
    size_t v16 = 0;
    uint64_t v17 = 0;
  }
  char v6 = HIBYTE(v20);
  if (v20 >= 0) {
    size_t v7 = HIBYTE(v20);
  }
  else {
    size_t v7 = v19;
  }
  if (v20 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v9 = v3;
  }
  else {
    size_t v9 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    unint64_t v10 = (void **)&v15;
  }
  else {
    unint64_t v10 = v5;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  unsigned int v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  unsigned int v13 = v9 < v7;
  if (v7 < v9) {
    unsigned int v13 = -1;
  }
  if (v12) {
    return v12;
  }
  else {
    return v13;
  }
}

void sub_10002774C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100027768(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    unsigned int v3 = a1[1];
    size_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        unint64_t v5 = v3;
        sub_100019C28(&v5);
      }
      while (v3 != v1);
      size_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

id RDQSRReplacementDictationaryWithEtiquettes(const __CFString *a1)
{
  uint64_t v12 = 0;
  unint64_t v2 = +[NSData dataWithContentsOfFile:a1 options:0 error:&v12];
  if (!v2)
  {
    unint64_t v5 = RXOSLog();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)std::string buf = 138412546;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v12;
    char v6 = "Could not read %@: %@";
LABEL_10:
    size_t v7 = v5;
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v6, buf, 0x16u);
    return 0;
  }
  id v3 = +[NSJSONSerialization JSONObjectWithData:v2 options:0 error:&v12];
  if (!v3)
  {
    unint64_t v5 = RXOSLog();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)std::string buf = 138412546;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v12;
    char v6 = "Could not parse %@: %@";
    goto LABEL_10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v8 = RXOSLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = objc_opt_class();
      *(_DWORD *)std::string buf = 138412546;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v9;
      char v6 = "%@ is wrong type: %@";
      size_t v7 = v8;
      goto LABEL_13;
    }
    return 0;
  }
  *(void *)std::string buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000;
  char v14 = 1;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100027A4C;
  void v11[3] = &unk_1000EED60;
  v11[4] = a1;
  v11[5] = buf;
  [v3 enumerateKeysAndObjectsUsingBlock:v11];
  if (*(unsigned char *)(*(void *)&buf[8] + 24)) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  _Block_object_dispose(buf, 8);
  return v4;
}

void sub_100027A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100027A4C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    unint64_t v8 = RXOSLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138412802;
      uint64_t v11 = v9;
      __int16 v12 = 2112;
      uint64_t v13 = a2;
      __int16 v14 = 2112;
      uint64_t v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%@ contains bogus key/value pair: %@ => %@", (uint8_t *)&v10, 0x20u);
    }
    *a4 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

CFMutableStringRef RDLanguageAssets::createLanguageFromLocaleID(CFStringRef theString, const __CFString *a2)
{
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, theString);
  v4.length = CFStringGetLength(MutableCopy);
  v4.id location = 0;
  CFStringFindAndReplace(MutableCopy, @"_", @"-", v4, 0);
  return MutableCopy;
}

CFMutableStringRef RDLanguageAssets::createLocaleIDFromLanguage(CFStringRef theString, const __CFString *a2)
{
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, theString);
  v4.length = CFStringGetLength(MutableCopy);
  v4.id location = 0;
  CFStringFindAndReplace(MutableCopy, @"-", @"_", v4, 0);
  return MutableCopy;
}

const __CFDictionary *RDLanguageAssets::CopyInstallationStatus(RDLanguageAssets *this)
{
  CFDictionaryRef v8 = 0;
  if (qword_1000FEB20 != -1) {
    dispatch_once(&qword_1000FEB20, &stru_1000EED80);
  }
  CFDictionaryRef v1 = (const __CFDictionary *)[(id)qword_1000FEB18 copyInstallationStatusForLangaugesWithError:&v8];
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412290;
    CFDictionaryRef v10 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "InstallationStatus resultStatus=%@", buf, 0xCu);
  }
  if (v8)
  {
    id v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      CFDictionaryRef v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "InstallationStatus failed with: %@", buf, 0xCu);
    }
  }
  if (!v1) {
    return 0;
  }
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v1);
  unint64_t v5 = (RDLanguageAssets *)RXGetAssetFallbackLocales();
  if (v5) {
    RDLanguageAssets::addAliasLocalesToResultStatus(v5, MutableCopy, v6);
  }
  CFRelease(v1);
  return MutableCopy;
}

void RDLanguageAssets::addAliasLocalesToResultStatus(RDLanguageAssets *this, const __CFDictionary *a2, __CFDictionary *a3)
{
  CFIndex Count = CFDictionaryGetCount(this);
  if (Count >= 1)
  {
    CFIndex v6 = Count;
    size_t v7 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
    CFDictionaryGetKeysAndValues(this, v7, 0);
    for (uint64_t i = 0; i != v6; ++i)
    {
      CFMutableStringRef LanguageFromLocaleID = RDLanguageAssets::createLanguageFromLocaleID((CFStringRef)v7[i], v8);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(this, v7[i]);
      if (Value)
      {
        CFMutableStringRef v13 = RDLanguageAssets::createLanguageFromLocaleID(Value, v12);
        __int16 v14 = CFDictionaryGetValue(a2, v13);
        if (v14)
        {
          uint64_t v15 = v14;
          if (!CFDictionaryGetValue(a2, LanguageFromLocaleID)) {
            CFDictionaryAddValue(a2, LanguageFromLocaleID, v15);
          }
        }
        CFRelease(v13);
      }
      CFRelease(LanguageFromLocaleID);
    }
    free(v7);
  }
}

id RDLanguageAssets::InstallAndCopyQuasarModelPathForLanguage(const __CFString *this, const __CFString *a2)
{
  CFMutableStringRef LocaleIDFromLanguage = RDLanguageAssets::createLocaleIDFromLanguage(this, a2);
  uint64_t v4 = RXGetAssetFallbackLocaleIdentifier();
  CFRelease(LocaleIDFromLanguage);
  CFStringRef v10 = 0;
  if (qword_1000FEB20 != -1) {
    dispatch_once(&qword_1000FEB20, &stru_1000EED80);
  }
  if (v4) {
    CFStringRef v5 = (const __CFString *)v4;
  }
  else {
    CFStringRef v5 = this;
  }
  id v6 = [(id)qword_1000FEB18 copyInstalledQuasarModelPathForLanguage:v5 error:&v10];
  size_t v7 = RXOSLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412546;
    CFStringRef v12 = this;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "InstallAndCopyQuasarModelPathForLanguage language=%@ resultPath=%@", buf, 0x16u);
  }
  if (v10)
  {
    CFStringRef v8 = RXOSLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      CFStringRef v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "InstallAndCopyQuasarModelPathForLanguage failed with: %@", buf, 0xCu);
    }
  }
  return v6;
}

id RDLanguageAssets::CopyInstalledAssetPathForLanguage(const __CFString *this, const __CFString *a2)
{
  CFMutableStringRef LocaleIDFromLanguage = RDLanguageAssets::createLocaleIDFromLanguage(this, a2);
  CFStringRef v3 = (const __CFString *)RXGetAssetFallbackLocaleIdentifier();
  if (!v3) {
    CFStringRef v3 = LocaleIDFromLanguage;
  }
  CFMutableStringRef LanguageFromLocaleID = RDLanguageAssets::createLanguageFromLocaleID(v3, v4);
  uint64_t v9 = 0;
  if (qword_1000FEB20 != -1) {
    dispatch_once(&qword_1000FEB20, &stru_1000EED80);
  }
  id v6 = [(id)qword_1000FEB18 copyInstalledAssetPathForLangaugeWithError:LanguageFromLocaleID error:&v9];
  if (v9)
  {
    size_t v7 = RXOSLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CopyAssetPath failed with: %@", buf, 0xCu);
    }
  }
  return v6;
}

id RDLanguageAssets::CopyInstalledAssetSupportedTasksForLanguage(const __CFString *this, const __CFString *a2)
{
  CFMutableStringRef LocaleIDFromLanguage = RDLanguageAssets::createLocaleIDFromLanguage(this, a2);
  CFStringRef v3 = (const __CFString *)RXGetAssetFallbackLocaleIdentifier();
  if (!v3) {
    CFStringRef v3 = LocaleIDFromLanguage;
  }
  CFMutableStringRef LanguageFromLocaleID = RDLanguageAssets::createLanguageFromLocaleID(v3, v4);
  CFStringRef v10 = 0;
  if (qword_1000FEB20 != -1) {
    dispatch_once(&qword_1000FEB20, &stru_1000EED80);
  }
  id v6 = [(id)qword_1000FEB18 copyInstalledAssetSupportedTasksForLangaugeWithError:LanguageFromLocaleID error:&v10];
  if (v10)
  {
    size_t v7 = RXOSLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      id v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CopyAssetSupportedTasks failed with: %@", buf, 0xCu);
    }
  }
  CFStringRef v8 = RXOSLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412290;
    id v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "RDLanguageAssets: supportedTasks:%@", buf, 0xCu);
  }
  return v6;
}

void RDLanguageAssets::CancelDownloadForLanguage(RDLanguageAssets *this, const __CFString *a2)
{
  CFStringRef v3 = RXOSLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412290;
    size_t v7 = this;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CancelDownloadForLanguage language=%@", buf, 0xCu);
  }
  CFStringRef v5 = 0;
  if (qword_1000FEB20 != -1) {
    dispatch_once(&qword_1000FEB20, &stru_1000EED80);
  }
  [(id)qword_1000FEB18 cancelDownloadForLanguage:this error:&v5];
  if (v5)
  {
    CFStringRef v4 = RXOSLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      size_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CancelDownloadForLanguage failed with: %@", buf, 0xCu);
    }
  }
}

id RDLanguageAssets::PurgeInstalledQuasarAssets(RDLanguageAssets *this)
{
  CFStringRef v5 = 0;
  if (qword_1000FEB20 != -1) {
    dispatch_once(&qword_1000FEB20, &stru_1000EED80);
  }
  id v1 = [(id)qword_1000FEB18 purgeInstalledAssetsWithError:&v5];
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412290;
    id v7 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Assets purged %@", buf, 0xCu);
  }
  if (v5)
  {
    CFStringRef v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      id v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "PurgeInstalledQuasarAssets failed with: %@", buf, 0xCu);
    }
  }
  return [v1 intValue];
}

void RDLanguageAssets::SetPurgeabilityForLanguages(RDLanguageAssets *this, const __CFArray *a2)
{
  CFStringRef v4 = RXOSLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412546;
    CFStringRef v8 = this;
    __int16 v9 = 1024;
    int v10 = (int)a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SetPurgeabilityForLanguages languages=%@%d", buf, 0x12u);
  }
  id v6 = 0;
  if (qword_1000FEB20 != -1) {
    dispatch_once(&qword_1000FEB20, &stru_1000EED80);
  }
  [(id)qword_1000FEB18 setPurgeabilityForLanguages:this withPurgeability:a2 error:&v6];
  if (v6)
  {
    CFStringRef v5 = RXOSLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      CFStringRef v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "SetPurgeabilityForLanguages failed with: %@", buf, 0xCu);
    }
  }
}

id RDLanguageAssets::RemovePeerForProgressCallback(_xpc_connection_s *a1)
{
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = xpc_connection_get_pid(a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Removing Peer %d for callback", (uint8_t *)v4, 8u);
  }
  if (qword_1000FEB20 != -1) {
    dispatch_once(&qword_1000FEB20, &stru_1000EED80);
  }
  return [(id)qword_1000FEB18 removePeerFromCallback:a1];
}

id RDLanguageAssets::AddPeerForProgressCallback(_xpc_connection_s *a1)
{
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = xpc_connection_get_pid(a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Adding Peer %d for callback", (uint8_t *)v4, 8u);
  }
  if (qword_1000FEB20 != -1) {
    dispatch_once(&qword_1000FEB20, &stru_1000EED80);
  }
  return [(id)qword_1000FEB18 addPeerForCallback:a1];
}

void sub_1000287D0(id a1)
{
  int v1 = _os_feature_enabled_impl();
  unint64_t v2 = RXOSLog();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v1)
  {
    if (v3)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Using RDAssetManager2", buf, 2u);
    }
    CFStringRef v4 = &off_1000ED830;
  }
  else
  {
    if (v3)
    {
      *(_WORD *)CFStringRef v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Using original RDAssetManager", v5, 2u);
    }
    CFStringRef v4 = off_1000ED828;
  }
  qword_1000FEB18 = [(__objc2_class *)*v4 sharedInstance];
}

void RDQSRGrammarFst::Build(int a1, int a2, xpc_object_t xdict)
{
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, kRDKeyObjectID);
  operator new();
}

void sub_100028FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
  }
  if (a5) {
    (*(void (**)(uint64_t))(*(void *)a5 + 8))(a5);
  }
  sub_10002B9D0((void **)va, 0);
  _Unwind_Resume(a1);
}

void RDQSRGrammarFst::Build(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t __val = a2;
  CFStringRef v4 = *(uint64_t ***)(a1 + 48);
  *(void *)std::string buf = &__val;
  CFStringRef v5 = (void *)sub_10001AC70(v4, &__val, (uint64_t)&unk_1000CABD8, (uint64_t **)buf)[5];
  if (!v5)
  {
    __int16 v13 = RXOSLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = __val;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "NULL LM Object for id %llu", buf, 0xCu);
    }
    return;
  }
  xpc_object_t xdict = v5;
  int64_t int64 = xpc_dictionary_get_int64(v5, kRDKeyObjectType);
  *(void *)std::string buf = &__val;
  id v7 = sub_10002BB04((uint64_t **)(a1 + 56), &__val, (uint64_t)&unk_1000CABD8, (uint64_t **)buf);
  uint64_t v44 = *((unsigned int *)v7 + 10);
  uint64_t v43 = *((unsigned int *)v7 + 11);
  if ((unint64_t)(int64 - 10) >= 2)
  {
    if (int64 == 13)
    {
      int v17 = *(_DWORD *)(a1 + 184);
      *(_DWORD *)(a1 + 184) = v17 + 1;
      std::to_string(&__p, v17);
      int64_t v18 = std::string::insert(&__p, 0, "$$ADLIB");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      int64_t v51 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string buf = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      RDQSRGrammarFst::addAdlibFstWithLabel();
    }
    if (int64 == 12)
    {
      string = (char *)xpc_dictionary_get_string(xdict, kRDKeyText);
      sub_100009CF0(buf, string);
      uint64_t v9 = HIBYTE(v51);
      char v10 = HIBYTE(v51);
      if (v51 < 0) {
        uint64_t v9 = *(void *)&buf[8];
      }
      if (v9)
      {
        sub_1000B4734(*(CFLocaleRef **)(a1 + 40), (const char *)buf, &__p);
        std::to_string(&v48, __val);
        sub_10006AEAC(a3, v44, v43, (uint64_t)&__p, (uint64_t)&v48, 0.0);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        sub_1000B820C((uint64_t **)(a1 + 88), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        if (RXLogServerGrammar())
        {
          if (RXVeryVerbose())
          {
            uint64_t v11 = RXOSLog();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              LODWORD(v48.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Grammar: Word -> %s", (uint8_t *)&v48, 0xCu);
            }
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        char v10 = HIBYTE(v51);
      }
      if (v10 < 0) {
        operator delete(*(void **)buf);
      }
    }
    goto LABEL_81;
  }
  xpc_object_t value = xpc_dictionary_get_value(xdict, kRDKeyChildren);
  uint64_t v15 = value;
  if (value) {
    unsigned __int16 count = xpc_array_get_count(value);
  }
  else {
    unsigned __int16 count = 0;
  }
  if (!xpc_dictionary_get_string(xdict, kRDKeyCategoryID)) {
    goto LABEL_49;
  }
  v48.__r_.__value_.__r.__words[0] = 0;
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_dictionary_get_string(xdict, kRDKeyCategoryID);
  uint64_t v20 = sub_100009CF0(buf, v48.__r_.__value_.__l.__data_);
  BOOL doesSupportCategory = rd_userprofile_util::doesSupportCategory(v20);
  BOOL v22 = doesSupportCategory;
  if (SHIBYTE(v51) < 0)
  {
    operator delete(*(void **)buf);
    if (v22) {
      goto LABEL_32;
    }
    goto LABEL_49;
  }
  if (!doesSupportCategory)
  {
LABEL_49:
    if (RXLogServerGrammar()
      && RXVeryVerbose()
      && xpc_dictionary_get_string(xdict, kRDKeyCommandID))
    {
      uint64_t v29 = (char *)xpc_dictionary_get_string(xdict, kRDKeyCommandID);
      sub_100009CF0(buf, v29);
      uint64_t v30 = RXOSLog();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        long long v31 = buf;
        if (v51 < 0) {
          long long v31 = *(uint8_t **)buf;
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Grammar: CommandID -> %s", (uint8_t *)&__p, 0xCu);
      }
      if (SHIBYTE(v51) < 0) {
        operator delete(*(void **)buf);
      }
    }
    int v42 = count;
    if (!count)
    {
      if (*(unsigned char *)(a1 + 189)) {
        RDQSRGrammarFst::addBogusFst((RDQSRGrammarFst *)a1);
      }
      sub_100009CF0(buf, off_1000FDFB8[0]);
      sub_100009CF0(&__p, off_1000FDFB8[0]);
      sub_10006AEAC(a3, v44, v43, (uint64_t)buf, (uint64_t)&__p, 0.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51) < 0) {
        operator delete(*(void **)buf);
      }
    }
    uint64_t v32 = count;
    if (!count)
    {
LABEL_81:
      if ((xpc_dictionary_get_uint64(xdict, kRDKeyOptions) & 4) != 0)
      {
        if (*(unsigned char *)(a1 + 188)) {
          RDQSRGrammarFst::addOptionalFst((RDQSRGrammarFst *)a1);
        }
        sub_100009CF0(buf, off_1000FDFC0);
        sub_100009CF0(&__p, off_1000FDFC0);
        sub_10006AEAC(a3, v44, v43, (uint64_t)buf, (uint64_t)&__p, 0.0);
        goto LABEL_86;
      }
      return;
    }
    size_t v33 = 0;
    while (1)
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__r.__words[0] = xpc_array_get_uint64(v15, v33);
      unint64_t v34 = *(uint64_t ***)(a1 + 48);
      *(void *)std::string buf = &__p;
      if (sub_10001AC70(v34, (unint64_t *)&__p, (uint64_t)&unk_1000CABD8, (uint64_t **)buf)[5]) {
        break;
      }
LABEL_80:
      if (v32 == ++v33) {
        goto LABEL_81;
      }
    }
    if (int64 == 11)
    {
      if (v33)
      {
        v48.__r_.__value_.__r.__words[0] = 0;
        if (v32 - 1 == v33)
        {
          v48.__r_.__value_.__r.__words[0] = xpc_array_get_uint64(v15, v42 - 1 - 1);
          *(void *)std::string buf = &v48;
          uint64_t v37 = *((unsigned int *)sub_10002BB04((uint64_t **)(a1 + 56), (unint64_t *)&v48, (uint64_t)&unk_1000CABD8, (uint64_t **)buf)+ 11);
          *(void *)std::string buf = &__p;
          uint64_t v35 = sub_10002BB04((uint64_t **)(a1 + 56), (unint64_t *)&__p, (uint64_t)&unk_1000CABD8, (uint64_t **)buf);
          unint64_t v36 = (v43 << 32) | v37;
        }
        else
        {
          v48.__r_.__value_.__r.__words[0] = xpc_array_get_uint64(v15, v33 - 1);
          *(void *)std::string buf = &v48;
          uint64_t v38 = *((unsigned int *)sub_10002BB04((uint64_t **)(a1 + 56), (unint64_t *)&v48, (uint64_t)&unk_1000CABD8, (uint64_t **)buf)+ 11);
          uint64_t v39 = *(unsigned int *)(a1 + 80);
          *(_DWORD *)(a1 + 80) = v39 + 1;
          *(void *)std::string buf = &__p;
          uint64_t v35 = sub_10002BB04((uint64_t **)(a1 + 56), (unint64_t *)&__p, (uint64_t)&unk_1000CABD8, (uint64_t **)buf);
          unint64_t v36 = v38 | (v39 << 32);
        }
        goto LABEL_78;
      }
      if (v42 != 1)
      {
        uint64_t v40 = *(unsigned int *)(a1 + 80);
        *(_DWORD *)(a1 + 80) = v40 + 1;
        *(void *)std::string buf = &__p;
        uint64_t v35 = sub_10002BB04((uint64_t **)(a1 + 56), (unint64_t *)&__p, (uint64_t)&unk_1000CABD8, (uint64_t **)buf);
        unint64_t v36 = v44 | (v40 << 32);
        goto LABEL_78;
      }
    }
    else if (int64 != 10)
    {
LABEL_79:
      RDQSRGrammarFst::Build(a1, __p.__r_.__value_.__r.__words[0], a3);
      goto LABEL_80;
    }
    *(void *)std::string buf = &__p;
    uint64_t v35 = sub_10002BB04((uint64_t **)(a1 + 56), (unint64_t *)&__p, (uint64_t)&unk_1000CABD8, (uint64_t **)buf);
    unint64_t v36 = v44 | ((unint64_t)v43 << 32);
LABEL_78:
    v35[5] = v36;
    goto LABEL_79;
  }
LABEL_32:
  long long v24 = *(const void ***)(a1 + 8);
  unint64_t v23 = *(const void ***)(a1 + 16);
  if (v24 == v23)
  {
LABEL_43:
    if (RXLogServerGrammar())
    {
      if (RXVeryVerbose())
      {
        uint64_t v28 = RXOSLog();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v48.__r_.__value_.__r.__words[0];
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Grammar: Building CategoryID -> %s", buf, 0xCu);
        }
      }
    }
    operator new();
  }
  long long v25 = (const void *)v48.__r_.__value_.__r.__words[0];
  size_t v26 = strlen(v48.__r_.__value_.__l.__data_);
  while ((*((char *)v24 + 23) & 0x80000000) == 0)
  {
    if (v26 == *((unsigned __int8 *)v24 + 23))
    {
      uint64_t v27 = v24;
      if (v26 == -1) {
        goto LABEL_95;
      }
      goto LABEL_41;
    }
LABEL_42:
    v24 += 4;
    if (v24 == v23) {
      goto LABEL_43;
    }
  }
  if ((const void *)v26 != v24[1]) {
    goto LABEL_42;
  }
  if (v26 == -1) {
LABEL_95:
  }
    sub_100018C34();
  uint64_t v27 = *v24;
LABEL_41:
  if (memcmp(v27, v25, v26)) {
    goto LABEL_42;
  }
  if (RXLogServerGrammar())
  {
    if (RXVeryVerbose())
    {
      __int16 v41 = RXOSLog();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v48.__r_.__value_.__r.__words[0];
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Grammar: CategoryID -> %s", buf, 0xCu);
      }
    }
  }
  sub_100009CF0(buf, v48.__r_.__value_.__l.__data_);
  sub_100009CF0(&__p, v48.__r_.__value_.__l.__data_);
  sub_10006AEAC(a3, v44, v43, (uint64_t)buf, (uint64_t)&__p, 0.0);
LABEL_86:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_100029B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 105) < 0) {
    operator delete(*(void **)(v33 - 128));
  }
  _Unwind_Resume(exception_object);
}

void RDQSRGrammarFst::addAdlibFstWithLabel()
{
}

void sub_100029E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a16) {
    sub_1000C2BE0((uint64_t)a16);
  }
  sub_10002B9D0(&a22, 0);
  _Unwind_Resume(a1);
}

void RDQSRCategoryFst::Build(int a1, xpc_object_t xdict)
{
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, kRDKeyObjectID);
  operator new();
}

void sub_10002A070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002B9D0((void **)va, 0);
  _Unwind_Resume(a1);
}

void RDQSRGrammarFst::addBogusFst(RDQSRGrammarFst *this)
{
}

void sub_10002A26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  sub_10002B9D0(&a22, 0);
  _Unwind_Resume(a1);
}

void RDQSRGrammarFst::addOptionalFst(RDQSRGrammarFst *this)
{
}

void sub_10002A4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  sub_10002B9D0(&a22, 0);
  _Unwind_Resume(a1);
}

void RDQSRCategoryFst::Build(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t __val = a2;
  CFStringRef v4 = *(uint64_t ***)(a1 + 16);
  *(void *)&long long buf = &__val;
  CFStringRef v5 = (void *)sub_10001AC70(v4, &__val, (uint64_t)&unk_1000CABD8, (uint64_t **)&buf)[5];
  if (v5)
  {
    xpc_object_t xdict = v5;
    int64_t int64 = xpc_dictionary_get_int64(v5, kRDKeyObjectType);
    *(void *)&long long buf = &__val;
    id v7 = sub_10002BB04((uint64_t **)(a1 + 24), &__val, (uint64_t)&unk_1000CABD8, (uint64_t **)&buf);
    *(void *)long long v31 = *((unsigned int *)v7 + 10);
    uint64_t v30 = *((unsigned int *)v7 + 11);
    if ((unint64_t)(int64 - 10) >= 2)
    {
      if (int64 == 13)
      {
        int64_t v18 = RXOSLog();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Grammar: Adlibs can't be a part of category in LM", (uint8_t *)&buf, 2u);
        }
      }
      else if (int64 == 12)
      {
        string = (char *)xpc_dictionary_get_string(xdict, kRDKeyText);
        sub_100009CF0(&buf, string);
        uint64_t v9 = v39;
        unsigned __int8 v10 = v39;
        if ((v39 & 0x80u) != 0) {
          uint64_t v9 = *((void *)&buf + 1);
        }
        if (v9)
        {
          sub_1000B4734(*(CFLocaleRef **)(a1 + 8), (const char *)&buf, __p);
          unint64_t v11 = v35;
          if ((v35 & 0x80u) != 0) {
            unint64_t v11 = (unint64_t)__p[1];
          }
          if (v11)
          {
            std::to_string(&v37, __val);
            sub_10006AEAC(a3, v31[0], v30, (uint64_t)__p, (uint64_t)&v37, 0.0);
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v37.__r_.__value_.__l.__data_);
            }
          }
          if (RXLogServerGrammar())
          {
            if (RXVeryVerbose())
            {
              id v12 = RXOSLog();
              if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v13 = __p;
                if ((v35 & 0x80u) != 0) {
                  __int16 v13 = (void **)__p[0];
                }
                LODWORD(v37.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Grammar: Word -> %s", (uint8_t *)&v37, 0xCu);
              }
            }
          }
          if ((char)v35 < 0) {
            operator delete(__p[0]);
          }
          unsigned __int8 v10 = v39;
        }
        if ((v10 & 0x80) != 0) {
          operator delete((void *)buf);
        }
      }
      goto LABEL_53;
    }
    xpc_object_t value = xpc_dictionary_get_value(xdict, kRDKeyChildren);
    size_t v16 = value;
    if (value)
    {
      unsigned __int16 count = xpc_array_get_count(value);
      int v29 = count;
      if (count)
      {
LABEL_37:
        uint64_t v19 = count;
        if (!count)
        {
LABEL_53:
          if ((xpc_dictionary_get_uint64(xdict, kRDKeyOptions) & 4) != 0)
          {
            sub_100009CF0(&buf, "<eps>");
            sub_100009CF0(__p, "<eps>");
            sub_10006AEAC(a3, v31[0], v30, (uint64_t)&buf, (uint64_t)__p, 0.0);
            if ((char)v35 < 0) {
              operator delete(__p[0]);
            }
            if ((char)v39 < 0) {
              operator delete((void *)buf);
            }
          }
          return;
        }
        size_t v20 = 0;
        uint64_t v28 = v29 - 1;
        while (1)
        {
          __p[0] = 0;
          __p[0] = (void *)xpc_array_get_uint64(v16, v20);
          uint64_t v21 = *(uint64_t ***)(a1 + 16);
          *(void *)&long long buf = __p;
          if (sub_10001AC70(v21, (unint64_t *)__p, (uint64_t)&unk_1000CABD8, (uint64_t **)&buf)[5]) {
            break;
          }
LABEL_52:
          if (v19 == ++v20) {
            goto LABEL_53;
          }
        }
        if (int64 == 11)
        {
          if (v20)
          {
            v37.__r_.__value_.__r.__words[0] = 0;
            if (v28 == v20)
            {
              v37.__r_.__value_.__r.__words[0] = xpc_array_get_uint64(v16, v28 - 1);
              *(void *)&long long buf = &v37;
              uint64_t v24 = *((unsigned int *)sub_10002BB04((uint64_t **)(a1 + 24), (unint64_t *)&v37, (uint64_t)&unk_1000CABD8, (uint64_t **)&buf)+ 11);
              *(void *)&long long buf = __p;
              BOOL v22 = sub_10002BB04((uint64_t **)(a1 + 24), (unint64_t *)__p, (uint64_t)&unk_1000CABD8, (uint64_t **)&buf);
              unint64_t v23 = (v30 << 32) | v24;
            }
            else
            {
              v37.__r_.__value_.__r.__words[0] = xpc_array_get_uint64(v16, v20 - 1);
              *(void *)&long long buf = &v37;
              uint64_t v25 = *((unsigned int *)sub_10002BB04((uint64_t **)(a1 + 24), (unint64_t *)&v37, (uint64_t)&unk_1000CABD8, (uint64_t **)&buf)+ 11);
              uint64_t v26 = *(unsigned int *)(a1 + 48);
              *(_DWORD *)(a1 + 48) = v26 + 1;
              *(void *)&long long buf = __p;
              BOOL v22 = sub_10002BB04((uint64_t **)(a1 + 24), (unint64_t *)__p, (uint64_t)&unk_1000CABD8, (uint64_t **)&buf);
              unint64_t v23 = v25 | (v26 << 32);
            }
            goto LABEL_50;
          }
          if (v29 != 1)
          {
            uint64_t v27 = *(unsigned int *)(a1 + 48);
            *(_DWORD *)(a1 + 48) = v27 + 1;
            *(void *)&long long buf = __p;
            BOOL v22 = sub_10002BB04((uint64_t **)(a1 + 24), (unint64_t *)__p, (uint64_t)&unk_1000CABD8, (uint64_t **)&buf);
            unint64_t v23 = *(void *)v31 | (v27 << 32);
            goto LABEL_50;
          }
        }
        else if (int64 != 10)
        {
LABEL_51:
          RDQSRCategoryFst::Build(a1, __p[0], a3);
          goto LABEL_52;
        }
        *(void *)&long long buf = __p;
        BOOL v22 = sub_10002BB04((uint64_t **)(a1 + 24), (unint64_t *)__p, (uint64_t)&unk_1000CABD8, (uint64_t **)&buf);
        unint64_t v23 = v31[0] | ((unint64_t)v30 << 32);
LABEL_50:
        v22[5] = v23;
        goto LABEL_51;
      }
    }
    else
    {
      unsigned __int16 count = 0;
    }
    sub_100009CF0(&buf, "<eps>");
    sub_100009CF0(__p, "<eps>");
    sub_10006AEAC(a3, v31[0], v30, (uint64_t)&buf, (uint64_t)__p, 0.0);
    if ((char)v35 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v39 < 0) {
      operator delete((void *)buf);
    }
    int v29 = 0;
    goto LABEL_37;
  }
  id v14 = RXOSLog();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = __val;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "NULL LM Object for id %llu", (uint8_t *)&buf, 0xCu);
  }
}

void sub_10002AB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v31 - 105) < 0) {
    operator delete(*(void **)(v31 - 128));
  }
  _Unwind_Resume(exception_object);
}

void RDQSRGrammarBuilder::BuildGrammar()
{
}

void sub_10002ADF0(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(uint64_t **)(v1 - 64);
  *(void *)(v1 - 64) = 0;
  if (v3) {
    sub_10002C250(v1 - 64, v3);
  }
  _Unwind_Resume(exception_object);
}

void RDQSRGrammarBuilder::buildCategoryFst()
{
}

void sub_10002AEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  unint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    sub_10002BBC4((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void RDQSRGrammarBuilder::UpdateCategory()
{
}

void sub_10002B0A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000C2C18(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10002B0C0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_100018C34();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t RDQSRGrammarBuilder::grammarFST(RDQSRGrammarBuilder *this)
{
  if (!*((unsigned char *)this + 56)) {
    return *((void *)this + 2);
  }
  if (RXLogPerformance()) {
    v2.__d_.__rep_ = rd_time_util::now().__d_.__rep_;
  }
  else {
    v2.__d_.__rep_ = 0;
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3 && !sub_10006EA84(v3))
  {
    if (*((void *)this + 4) != *((void *)this + 5)) {
      sub_10006CFC0(*((void *)this + 3), (void *)this + 4);
    }
    uint64_t v8 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    *((unsigned char *)this + 56) = 0;
    if (RXLogPerformance())
    {
      double v6 = rd_time_util::durationInMilliSec(v2.__d_.__rep_);
      id v7 = RXOSLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v9 = 134217984;
        *(double *)&void v9[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Re-building grammar - %f", v9, 0xCu);
      }
    }
    return *((void *)this + 2);
  }
  size_t v4 = RXOSLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Empty FST, try calling BuildGrammar first", v9, 2u);
  }
  return 0;
}

void RDQSRGrammarBuilder::grammarProfile(RDQSRGrammarBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = *((void *)this + 5);
  if (v2 != v3)
  {
    CFStringRef v5 = a2 + 2;
    do
    {
      if (rd_userprofile_util::doesSupportProfile((void *)v2))
      {
        sub_10006F66C(*(void **)(v2 + 24), (uint64_t *)&v19);
        double v6 = rd_userprofile_util::nonTerminalForProfile((unint64_t *)v2);
        id v7 = rd_userprofile_util::wordTagForProfile((unint64_t *)v2);
        uint64_t v8 = v7;
        unint64_t v9 = a2[1];
        unint64_t v10 = a2[2];
        if (v9 >= v10)
        {
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - *a2) >> 3);
          unint64_t v13 = v12 + 1;
          if (v12 + 1 > 0x666666666666666) {
            sub_100019424();
          }
          unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - *a2) >> 3);
          if (2 * v14 > v13) {
            unint64_t v13 = 2 * v14;
          }
          if (v14 >= 0x333333333333333) {
            unint64_t v15 = 0x666666666666666;
          }
          else {
            unint64_t v15 = v13;
          }
          void v21[4] = v5;
          size_t v16 = (char *)sub_1000317B0((uint64_t)v5, v15);
          int v17 = (__CFString **)&v16[40 * v12];
          v21[0] = v16;
          v21[1] = v17;
          v21[3] = &v16[40 * v18];
          *int v17 = v6;
          v17[1] = v8;
          void v17[3] = 0;
          v17[4] = 0;
          v17[2] = 0;
          *((_OWORD *)v17 + 1) = v19;
          v17[4] = v20;
          long long v19 = 0uLL;
          size_t v20 = 0;
          v21[2] = v17 + 5;
          sub_100031738(a2, v21);
          uint64_t v11 = a2[1];
          sub_100031934(v21);
        }
        else
        {
          *(void *)unint64_t v9 = v6;
          *(void *)(v9 + 8) = v7;
          *(_OWORD *)(v9 + 16) = v19;
          *(void *)(v9 + 32) = v20;
          long long v19 = 0uLL;
          size_t v20 = 0;
          uint64_t v11 = v9 + 40;
        }
        a2[1] = v11;
        v21[0] = &v19;
        sub_100018CDC((void ***)v21);
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void sub_10002B4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, void ***a13)
{
  a13 = &a9;
  sub_100018CDC((void ***)&a13);
  sub_1000316BC(&a9);
  _Unwind_Resume(a1);
}

void RDQSRGrammarBuilder::categoryProfile(char *__s@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_100009CF0(__p, __s);
  int doesSupportProfile = rd_userprofile_util::doesSupportProfile(__p);
  int v7 = doesSupportProfile;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p[0]);
    if (!v7) {
      return;
    }
  }
  else if (!doesSupportProfile)
  {
    return;
  }
  sub_10006F66C(a2, (uint64_t *)&v20);
  sub_100009CF0(__p, __s);
  uint64_t v8 = rd_userprofile_util::nonTerminalForProfile((unint64_t *)__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  sub_100009CF0(__p, __s);
  unint64_t v9 = rd_userprofile_util::wordTagForProfile((unint64_t *)__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v10 = a3[2];
  unint64_t v11 = a3[1];
  if (v11 >= v10)
  {
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - *a3) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666) {
      sub_100019424();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - *a3) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x333333333333333) {
      unint64_t v16 = 0x666666666666666;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v25 = a3 + 2;
    int v17 = (char *)sub_1000317B0((uint64_t)(a3 + 2), v16);
    uint64_t v18 = (__CFString **)&v17[40 * v13];
    __p[0] = v17;
    __p[1] = v18;
    uint64_t v24 = &v17[40 * v19];
    *uint64_t v18 = v8;
    v18[1] = v9;
    v18[3] = 0;
    v18[4] = 0;
    v18[2] = 0;
    *((_OWORD *)v18 + 1) = v20;
    v18[4] = v21;
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    unint64_t v23 = v18 + 5;
    sub_100031738(a3, __p);
    uint64_t v12 = a3[1];
    sub_100031934(__p);
  }
  else
  {
    *(void *)unint64_t v11 = v8;
    *(void *)(v11 + 8) = v9;
    *(_OWORD *)(v11 + 16) = v20;
    *(void *)(v11 + 32) = v21;
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    uint64_t v12 = v11 + 40;
  }
  a3[1] = v12;
  __p[0] = &v20;
  sub_100018CDC((void ***)__p);
}

void sub_10002B6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  a13 = &a9;
  sub_100018CDC((void ***)&a13);
  sub_1000316BC((void ***)&a9);
  _Unwind_Resume(a1);
}

void RDQSRGrammarBuilder::fullGrammarProfile(RDQSRGrammarBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((unsigned char *)this + 57))
  {
    uint64_t v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "3rd party grammar contains adlibs, so not adding them to profile", buf, 2u);
    }
  }
  else
  {
    uint64_t v4 = RDQSRGrammarBuilder::grammarFST(this);
    if (v4)
    {
      sub_10006ED3C(v4, 300, &v17);
      sub_100009CF0(buf, "BuiltInLM.CustomCommand");
      CFStringRef v5 = rd_userprofile_util::nonTerminalForProfile((unint64_t *)buf);
      if (SHIBYTE(v21) < 0) {
        operator delete(*(void **)buf);
      }
      sub_100009CF0(buf, "BuiltInLM.CustomCommand");
      double v6 = rd_userprofile_util::wordTagForProfile((unint64_t *)buf);
      if (SHIBYTE(v21) < 0) {
        operator delete(*(void **)buf);
      }
      unint64_t v7 = a2[2];
      unint64_t v8 = a2[1];
      if (v8 >= v7)
      {
        unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - *a2) >> 3);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0x666666666666666) {
          sub_100019424();
        }
        unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a2) >> 3);
        if (2 * v12 > v11) {
          unint64_t v11 = 2 * v12;
        }
        if (v12 >= 0x333333333333333) {
          unint64_t v13 = 0x666666666666666;
        }
        else {
          unint64_t v13 = v11;
        }
        unint64_t v23 = a2 + 2;
        unint64_t v14 = (char *)sub_1000317B0((uint64_t)(a2 + 2), v13);
        unint64_t v15 = (__CFString **)&v14[40 * v10];
        *(void *)long long buf = v14;
        long long v20 = v15;
        BOOL v22 = &v14[40 * v16];
        *unint64_t v15 = v5;
        v15[1] = v6;
        v15[3] = 0;
        v15[4] = 0;
        void v15[2] = 0;
        *((_OWORD *)v15 + 1) = v17;
        v15[4] = v18;
        long long v17 = 0uLL;
        uint64_t v18 = 0;
        uint64_t v21 = v15 + 5;
        sub_100031738(a2, buf);
        uint64_t v9 = a2[1];
        sub_100031934((void **)buf);
      }
      else
      {
        *(void *)unint64_t v8 = v5;
        *(void *)(v8 + 8) = v6;
        *(_OWORD *)(v8 + 16) = v17;
        *(void *)(v8 + 32) = v18;
        long long v17 = 0uLL;
        uint64_t v18 = 0;
        uint64_t v9 = v8 + 40;
      }
      a2[1] = v9;
      *(void *)long long buf = &v17;
      sub_100018CDC((void ***)buf);
    }
  }
}

void sub_10002B964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  a12 = &a9;
  sub_100018CDC((void ***)&a12);
  sub_1000316BC((void ***)&a9);
  _Unwind_Resume(a1);
}

void *sub_10002B9D0(void **a1, void *a2)
{
  int64x2_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10002BA20(result);
    operator delete();
  }
  return result;
}

void *sub_10002BA20(void *a1)
{
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t *sub_10002BB04(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  double v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        double v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      double v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    sub_10001AD30(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_10002BBC4(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    sub_10001B844((uint64_t)(a2 + 3), (void *)a2[4]);
    uint64_t v3 = *a2;
    *a2 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    operator delete();
  }
}

uint64_t sub_10002BC4C(uint64_t *a1, char **a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_100019424();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v21 = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)sub_10002BDBC(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  long long v17 = v12;
  uint64_t v18 = &v12[32 * v5];
  uint64_t v19 = v18;
  long long v20 = &v12[32 * v11];
  unint64_t v13 = sub_100009CF0(v18, *a2);
  uint64_t v14 = *a3;
  *a3 = 0;
  void v13[3] = v14;
  v19 += 32;
  sub_10002BD44(a1, &v17);
  uint64_t v15 = a1[1];
  sub_10002BFA8(&v17);
  return v15;
}

void sub_10002BD30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002BFA8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10002BD44(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10002BDF4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10002BDBC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_100018AF4();
  }
  return operator new(32 * a2);
}

uint64_t sub_10002BDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 32;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 + 16) = *(void *)(a3 - 16);
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v10 = *(void *)(a3 - 8);
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(v8 + 24) = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 32;
      v8 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10002BEA4((uint64_t)v13);
  return v11;
}

uint64_t sub_10002BEA4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10002BEDC((uint64_t *)a1);
  }
  return a1;
}

void sub_10002BEDC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10002BF30(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void sub_10002BF30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

void **sub_10002BFA8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10002BFDC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    sub_10002BF30(v4, i - 32);
  }
}

_OWORD *sub_10002C024(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_1000B6084((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_10001AD30(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_10002C0B8(void *result, long long *a2, uint64_t *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_10006770C((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(v5 + 24) = v7;
  v4[1] = v5 + 32;
  return result;
}

void sub_10002C128(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10002C130(uint64_t *a1, long long *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_100019424();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v21 = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)sub_10002BDBC(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  unint64_t v13 = &v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  uint64_t v19 = v13;
  long long v20 = &v12[32 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10006770C(v13, *(void **)a2, *((void *)a2 + 1));
    unint64_t v13 = v19;
  }
  else
  {
    long long v14 = *a2;
    *((void *)v13 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v13 = v14;
  }
  uint64_t v15 = *a3;
  *a3 = 0;
  *(void *)&v12[32 * v5 + 24] = v15;
  uint64_t v19 = v13 + 32;
  sub_10002BD44(a1, v18);
  uint64_t v16 = a1[1];
  sub_10002BFA8(v18);
  return v16;
}

void sub_10002C23C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002BFA8((void **)va);
  _Unwind_Resume(a1);
}

void sub_10002C250(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v4 = (void **)(a2 + 20);
    sub_10002C318(&v4);
    sub_1000192EC((uint64_t)(a2 + 17), (char *)a2[18]);
    sub_1000192EC((uint64_t)(a2 + 14), (char *)a2[15]);
    sub_1000192EC((uint64_t)(a2 + 11), (char *)a2[12]);
    sub_10001B844((uint64_t)(a2 + 7), (void *)a2[8]);
    uint64_t v4 = (void **)(a2 + 1);
    sub_10002C318(&v4);
    uint64_t v3 = *a2;
    *a2 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    operator delete();
  }
}

void sub_10002C318(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_10002BF30((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10002C3B0(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 32;
        sub_10002BF30((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_10002C420(void *a1)
{
  *a1 = off_1000F0D20;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_100018BC0(v2);
  }
  return a1;
}

void sub_10002C46C(void *a1)
{
  *a1 = off_1000F0D20;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_100018BC0(v1);
  }
  operator delete();
}

uint64_t sub_10002C4D8(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 80);
}

float sub_10002C4E4@<S0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v3 = *(float **)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2);
  float result = *v3;
  *a3 = *(_DWORD *)v3;
  return result;
}

uint64_t sub_10002C4FC(uint64_t a1, int a2)
{
  return (uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 32)
                 - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 24)) >> 4;
}

uint64_t sub_10002C518(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 8);
}

uint64_t sub_10002C52C(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 16);
}

uint64_t sub_10002C540(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = sub_100067D14(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v7();
  }
}

uint64_t sub_10002C5F4(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void sub_10002C600()
{
}

uint64_t sub_10002C690(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t sub_10002C69C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t sub_10002C6A8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 64) - *(void *)(v2 + 56)) >> 3;
  return result;
}

uint64_t sub_10002C6C4(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 56) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  uint64_t v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t sub_10002C6F0(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 64) - *(void *)(*(void *)(a1 + 8) + 56)) >> 3;
}

uint64_t sub_10002C704(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000300E0(a2, &v7);
    uint64_t v4 = v7;
    uint64_t v3 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v3;
    if (v5) {
      sub_100018BC0(v5);
    }
    if (v8) {
      sub_100018BC0(v8);
    }
  }
  return a1;
}

unint64_t sub_10002C774(uint64_t a1, int a2)
{
  sub_100030AA4(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 80) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  *(void *)(v4 + 8) = result & 0xCCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

float sub_10002C7F4(uint64_t a1, int a2, int *a3)
{
  sub_100030AA4(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  int v8 = *a3;
  return sub_100030BD4(v6, a2, (float *)&v8);
}

void sub_10002C848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a3 & 4) != (a3 & 4 & a2)) {
    sub_100030AA4(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
}

uint64_t sub_10002C8DC(uint64_t a1)
{
  sub_100030AA4(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = sub_100030374(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 16))(v2) & 0xEAFFFFFF0007;
  return v3;
}

uint64_t sub_10002C95C(uint64_t a1, int a2, float *a3)
{
  sub_100030AA4(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return sub_100030C6C(v6, a2, a3);
}

uint64_t sub_10002C9AC(uint64_t a1, char **a2)
{
  sub_100030AA4(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  sub_100030D14((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
  v4[1] = v4[1] & 4 | result & 0x806A5A950007;
  return result;
}

uint64_t sub_10002CA2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && !*(void *)(v2 + 8))
  {
    uint64_t v10 = *(void **)(a1 + 8);
    sub_100031354((uint64_t)v10);
    uint64_t result = (*(uint64_t (**)(void *))(*v10 + 16))(v10);
    v10[1] = (*((_DWORD *)v10 + 2) | result) & 4 | 0x956A5A950003;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v4 = *(void *)(v3 + 48);
    sub_1000311AC(&v11);
    uint64_t v7 = v11;
    uint64_t v6 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v8 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v6;
    if (v8) {
      sub_100018BC0(v8);
    }
    if (v12) {
      sub_100018BC0(v12);
    }
    sub_100030234(*(void *)(a1 + 8), v5);
    return sub_1000302D4(*(void *)(a1 + 8), v4);
  }
  return result;
}

uint64_t sub_10002CB20(uint64_t a1, int a2, uint64_t a3)
{
  sub_100030AA4(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  sub_100030F7C(*(void **)(v6[7] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 16))(v6);
  v6[1] = v6[1] & 4 | result & 0x8A6A5A950007;
  return result;
}

uint64_t sub_10002CBB0(uint64_t a1, int a2)
{
  sub_100030AA4(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(v4[7] + 8 * a2);
  v5[1] = 0;
  _OWORD v5[2] = 0;
  v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
  v4[1] = v4[1] & 4 | result & 0x8A6A5A950007;
  return result;
}

void sub_10002CC38(uint64_t a1, int a2)
{
  sub_100030AA4(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 56);
  sub_1000306A4(v4, a2);
}

void sub_10002CC7C(uint64_t a1, int a2, unint64_t a3)
{
  sub_100030AA4(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 24);
  sub_10003074C(v6, a3);
}

uint64_t sub_10002CCD4(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t sub_10002CD00(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t sub_10002CD2C(uint64_t a1, uint64_t a2)
{
  sub_100030AA4(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return sub_100030234(v4, a2);
}

uint64_t sub_10002CD6C(uint64_t a1, uint64_t a2)
{
  sub_100030AA4(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return sub_1000302D4(v4, a2);
}

void sub_10002CDAC()
{
}

void sub_10002CE38()
{
}

uint64_t sub_10002CE5C(uint64_t a1)
{
  sub_100009CF0(__p, "ERROR");
  sub_10002D454(&v11, (uint64_t)__p);
  uint64_t v2 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  uint64_t v7 = sub_10002D07C(v2, v5, v6);
  sub_10002D07C(v7, (uint64_t)" FST type", 9);
  sub_10002D500(&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_10002CF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002CF5C(uint64_t a1)
{
  sub_100009CF0(__p, "ERROR");
  sub_10002D454(&v11, (uint64_t)__p);
  uint64_t v2 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  uint64_t v7 = sub_10002D07C(v2, v5, v6);
  sub_10002D07C(v7, (uint64_t)" FST type", 9);
  sub_10002D500(&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_10002D030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002D05C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t sub_10002D068(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void *sub_10002D07C(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v13)
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      char v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_10002D220(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_10002D1B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x10002D198);
}

void sub_10002D20C(_Unwind_Exception *a1)
{
}

uint64_t sub_10002D220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_10002D3A8(__p, v12, __c);
      char v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_10002D38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10002D3A8(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_100009DA4();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

BOOL *sub_10002D454(BOOL *a1, uint64_t a2)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 < 0)
  {
    if (*(void *)(a2 + 8) != 5)
    {
LABEL_12:
      BOOL v8 = 0;
      goto LABEL_13;
    }
    uint64_t v4 = *(void *)a2;
  }
  else
  {
    uint64_t v4 = a2;
    if (v3 != 5) {
      goto LABEL_12;
    }
  }
  int v5 = *(_DWORD *)v4;
  int v6 = *(unsigned __int8 *)(v4 + 4);
  BOOL v8 = v5 == 1096040774 && v6 == 76;
LABEL_13:
  *a1 = v8;
  uint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v10 = v9;
  }
  uint64_t v11 = sub_10002D07C(&std::cerr, a2, v10);
  sub_10002D07C(v11, (uint64_t)": ", 2);
  return a1;
}

unsigned char *sub_10002D500(unsigned char *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                              + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
  uint64_t v2 = std::locale::use_facet(&v4, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*a1) {
    exit(1);
  }
  return a1;
}

void sub_10002D5C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

BOOL sub_10002D5E4(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = (((2 * a2) & 0xAAAAAAAA0000 | a2 & 0xFFFFFFFF0000 | (a2 >> 1) & 0x555555550000) & ((a1 >> 1) & 0x555555550000 | (2 * a1) & 0xAAAAAAAA0000 | a1) | 7) & (a2 ^ a1);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    do
    {
      if ((v6 & v2) != 0)
      {
        sub_100009CF0(__p, "ERROR");
        sub_10002D454(&v20, (uint64_t)__p);
        size_t v7 = sub_10002D07C(&std::cerr, (uint64_t)"CompatProperties: Mismatch: ", 28);
        size_t v8 = strlen(off_1000FE920[v5]);
        uint64_t v9 = sub_10002D07C(v7, (uint64_t)off_1000FE920[v5], v8);
        uint64_t v10 = sub_10002D07C(v9, (uint64_t)": props1 = ", 11);
        if ((v6 & a1) != 0) {
          uint64_t v11 = "true";
        }
        else {
          uint64_t v11 = "false";
        }
        if ((v6 & a1) != 0) {
          uint64_t v12 = 4;
        }
        else {
          uint64_t v12 = 5;
        }
        char v13 = sub_10002D07C(v10, (uint64_t)v11, v12);
        uint64_t v14 = sub_10002D07C(v13, (uint64_t)", props2 = ", 11);
        if ((v6 & a2) != 0) {
          uint64_t v15 = "true";
        }
        else {
          uint64_t v15 = "false";
        }
        if ((v6 & a2) != 0) {
          uint64_t v16 = 4;
        }
        else {
          uint64_t v16 = 5;
        }
        sub_10002D07C(v14, (uint64_t)v15, v16);
        sub_10002D500(&v20);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      v6 *= 2;
      ++v5;
    }
    while (v5 != 64);
  }
  return v2 == 0;
}

void sub_10002D768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10002D794(void *a1)
{
  uint64_t v4 = a1[10];
  uint64_t v2 = a1 + 10;
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_10002E360((uint64_t)v2, v3);
  }
  uint64_t v5 = (void **)a1[9];
  a1[9] = 0;
  if (v5) {
    sub_10002E3BC((uint64_t)(a1 + 9), v5);
  }
  uint64_t v6 = a1[8];
  a1[8] = 0;
  if (v6) {
    sub_10002E360((uint64_t)(a1 + 8), v6);
  }
  uint64_t v7 = a1[7];
  a1[7] = 0;
  if (v7) {
    sub_10002E360((uint64_t)(a1 + 7), v7);
  }
  return a1;
}

uint64_t sub_10002D804(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10001B7F8(result);
    operator delete();
  }
  return result;
}

int *sub_10002D854()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000FDFD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000FDFD0))
  {
    dword_1000FDFC8 = 0;
    __cxa_guard_release(&qword_1000FDFD0);
  }
  return &dword_1000FDFC8;
}

int *sub_10002D8A8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000FDFE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000FDFE0))
  {
    dword_1000FDFD8 = 2139095040;
    __cxa_guard_release(&qword_1000FDFE0);
  }
  return &dword_1000FDFD8;
}

void sub_10002D900(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

void sub_10002DAC4(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = **(_DWORD ***)a1;
    uint64_t v3 = *(void *)(*(void *)a1 + 8) - (void)v2;
    if (v3)
    {
      unint64_t v4 = v3 >> 2;
      if (v4 <= 1) {
        unint64_t v4 = 1;
      }
      do
      {
        _DWORD *v2 = *(_DWORD *)(a1 + 48) + ~*v2;
        ++v2;
        --v4;
      }
      while (v4);
    }
  }
  if (*(unsigned char *)(a1 + 52))
  {
    int v5 = *(void ***)(a1 + 16);
    if (v5)
    {
      if (*v5) {
        operator delete(*v5);
      }
      operator delete();
    }
  }
  uint64_t v6 = a1 + 56;
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v7) {
    sub_10002E360(v6, v7);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v8) {
    sub_10002E360(a1 + 64, v8);
  }
  uint64_t v9 = *(void ***)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v9) {
    sub_10002E3BC(a1 + 72, v9);
  }
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v11 = (void *)(a1 + 80);
  uint64_t v10 = v12;
  *uint64_t v11 = 0;
  if (v12)
  {
    sub_10002E360((uint64_t)v11, v10);
  }
}

uint64_t sub_10002DBBC(uint64_t *a1, int a2, int a3)
{
  uint64_t v6 = a1[10];
  uint64_t v7 = *(_DWORD **)(v6 + 8);
  unint64_t v8 = *(void *)(v6 + 16);
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = *(_DWORD **)v6;
    uint64_t v11 = ((uint64_t)v7 - *(void *)v6) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      sub_100019424();
    }
    uint64_t v13 = v8 - (void)v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      uint64_t v15 = (char *)sub_10002EE10(v6 + 16, v14);
      uint64_t v10 = *(_DWORD **)v6;
      uint64_t v7 = *(_DWORD **)(v6 + 8);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[4 * v11];
    long long v17 = &v15[4 * v14];
    *(_DWORD *)uint64_t v16 = a2;
    uint64_t v9 = v16 + 4;
    while (v7 != v10)
    {
      int v18 = *--v7;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(void *)uint64_t v6 = v16;
    *(void *)(v6 + 8) = v9;
    *(void *)(v6 + 16) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    uint64_t v9 = v7 + 1;
  }
  *(void *)(v6 + 8) = v9;
  unint64_t v19 = a2;
  uint64_t v20 = *(void *)a1[7];
  if (a2 >= (unint64_t)((*(void *)(a1[7] + 8) - v20) >> 2))
  {
    do
    {
      uint64_t v21 = *a1;
      if (*a1)
      {
        unint64_t v22 = *(void *)(v21 + 16);
        unint64_t v23 = *(_DWORD **)(v21 + 8);
        if ((unint64_t)v23 >= v22)
        {
          uint64_t v25 = *(_DWORD **)v21;
          uint64_t v26 = ((uint64_t)v23 - *(void *)v21) >> 2;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
            goto LABEL_78;
          }
          uint64_t v28 = v22 - (void)v25;
          if (v28 >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            uint64_t v30 = (char *)sub_10002EE10(v21 + 16, v29);
            uint64_t v25 = *(_DWORD **)v21;
            unint64_t v23 = *(_DWORD **)(v21 + 8);
          }
          else
          {
            uint64_t v30 = 0;
          }
          uint64_t v31 = &v30[4 * v26];
          *(_DWORD *)uint64_t v31 = -1;
          uint64_t v24 = v31 + 4;
          while (v23 != v25)
          {
            int v32 = *--v23;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          *(void *)uint64_t v21 = v31;
          *(void *)(v21 + 8) = v24;
          *(void *)(v21 + 16) = &v30[4 * v29];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *unint64_t v23 = -1;
          uint64_t v24 = v23 + 1;
        }
        *(void *)(v21 + 8) = v24;
      }
      uint64_t v33 = a1[1];
      if (v33)
      {
        char v67 = 0;
        sub_10002ED68(v33, &v67);
      }
      uint64_t v34 = a1[2];
      char v66 = 0;
      sub_10002ED68(v34, &v66);
      uint64_t v35 = a1[7];
      unint64_t v36 = *(_DWORD **)(v35 + 8);
      unint64_t v37 = *(void *)(v35 + 16);
      if ((unint64_t)v36 >= v37)
      {
        unsigned __int8 v39 = *(_DWORD **)v35;
        uint64_t v40 = ((uint64_t)v36 - *(void *)v35) >> 2;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          goto LABEL_78;
        }
        uint64_t v42 = v37 - (void)v39;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          uint64_t v44 = (char *)sub_10002EE10(v35 + 16, v43);
          unsigned __int8 v39 = *(_DWORD **)v35;
          unint64_t v36 = *(_DWORD **)(v35 + 8);
        }
        else
        {
          uint64_t v44 = 0;
        }
        uint64_t v45 = &v44[4 * v40];
        *(_DWORD *)uint64_t v45 = -1;
        uint64_t v38 = v45 + 4;
        while (v36 != v39)
        {
          int v46 = *--v36;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *(void *)uint64_t v35 = v45;
        *(void *)(v35 + 8) = v38;
        *(void *)(v35 + 16) = &v44[4 * v43];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *unint64_t v36 = -1;
        uint64_t v38 = v36 + 1;
      }
      *(void *)(v35 + 8) = v38;
      uint64_t v47 = a1[8];
      std::string v48 = *(_DWORD **)(v47 + 8);
      unint64_t v49 = *(void *)(v47 + 16);
      if ((unint64_t)v48 >= v49)
      {
        int64_t v51 = *(_DWORD **)v47;
        uint64_t v52 = ((uint64_t)v48 - *(void *)v47) >> 2;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62) {
LABEL_78:
        }
          sub_100019424();
        uint64_t v54 = v49 - (void)v51;
        if (v54 >> 1 > v53) {
          unint64_t v53 = v54 >> 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          BOOL v56 = (char *)sub_10002EE10(v47 + 16, v55);
          int64_t v51 = *(_DWORD **)v47;
          std::string v48 = *(_DWORD **)(v47 + 8);
        }
        else
        {
          BOOL v56 = 0;
        }
        int v57 = &v56[4 * v52];
        *(_DWORD *)int v57 = -1;
        uint64_t v50 = v57 + 4;
        while (v48 != v51)
        {
          int v58 = *--v48;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }
        *(void *)uint64_t v47 = v57;
        *(void *)(v47 + 8) = v50;
        *(void *)(v47 + 16) = &v56[4 * v55];
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *std::string v48 = -1;
        uint64_t v50 = v48 + 1;
      }
      *(void *)(v47 + 8) = v50;
      uint64_t v59 = a1[9];
      char v65 = 0;
      sub_10002ED68(v59, &v65);
      uint64_t v20 = *(void *)a1[7];
    }
    while (v19 >= (*(void *)(a1[7] + 8) - v20) >> 2);
  }
  *(_DWORD *)(v20 + 4 * v19) = *((_DWORD *)a1 + 11);
  size_t v60 = (void *)a1[9];
  *(_DWORD *)(*(void *)a1[8] + 4 * v19) = *((_DWORD *)a1 + 11);
  unint64_t v61 = v19 >> 6;
  uint64_t v62 = 1 << v19;
  *(void *)(*v60 + 8 * (v19 >> 6)) |= 1 << v19;
  long long v63 = (void *)a1[1];
  if (*((_DWORD *)a1 + 10) == a3)
  {
    if (v63) {
      *(void *)(*v63 + 8 * v61) |= v62;
    }
  }
  else
  {
    if (v63) {
      *(void *)(*v63 + 8 * v61) &= ~v62;
    }
    *(void *)a1[3] = *(void *)a1[3] & 0xFFFFFCFFFFFFFFFFLL | 0x20000000000;
  }
  ++*((_DWORD *)a1 + 11);
  return 1;
}

int *sub_10002DFC0(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 24))(&v25);
  uint64_t result = sub_10002D8A8();
  int v26 = v25;
  HIDWORD(v25) = 0;
  HIDWORD(v25) = *result;
  if (*(float *)&v25 != *((float *)&v25 + 1)) {
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * a2) == *(_DWORD *)(**(void **)(a1 + 64) + 4 * a2))
  {
    char v7 = 0;
    unint64_t v8 = *(uint64_t **)(a1 + 80);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1] - *v8;
    uint64_t v11 = **(void **)(a1 + 16);
    unint64_t v12 = (int *)((v10 & 0xFFFFFFFFFFFFFFFCLL) + v9 - 4);
    do
    {
      unint64_t v13 = *v12--;
      v7 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
    }
    while (v13 != a2);
    unint64_t v14 = *(void **)a1;
    do
    {
      uint64_t v15 = *(void *)(a1 + 80);
      uint64_t v16 = *(void *)(v15 + 8);
      unint64_t v19 = *(int *)(v16 - 4);
      uint64_t v17 = v16 - 4;
      unint64_t v18 = v19;
      if (v14) {
        *(_DWORD *)(*v14 + 4 * v18) = *(_DWORD *)(a1 + 48);
      }
      unint64_t v20 = v18 >> 6;
      uint64_t v21 = 1 << v18;
      if (v7) {
        *(void *)(v11 + 8 * v20) |= v21;
      }
      uint64_t result = **(int ***)(a1 + 72);
      *(void *)&result[2 * v20] &= ~v21;
      *(void *)(v15 + 8) = v17;
    }
    while (v18 != a2);
    if ((v7 & 1) == 0) {
      **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
    }
    ++*(_DWORD *)(a1 + 48);
  }
  if (a3 != -1)
  {
    uint64_t v22 = **(void **)(a1 + 16);
    if ((*(void *)(v22 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2)) {
      *(void *)(v22 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    uint64_t v23 = **(void **)(a1 + 64);
    int v24 = *(_DWORD *)(v23 + 4 * a2);
    if (v24 < *(_DWORD *)(v23 + 4 * a3)) {
      *(_DWORD *)(v23 + 4 * a3) = v24;
    }
  }
  return result;
}

uint64_t sub_10002E1C4(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 12);
  int v4 = *(_DWORD *)(**(void **)(a1 + 56) + 4 * v3);
  uint64_t v5 = **(void **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2)) {
    *(_DWORD *)(v5 + 4 * a2) = v4;
  }
  uint64_t v6 = **(void **)(a1 + 16);
  if ((*(void *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
    *(void *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  char v7 = *(unint64_t **)(a1 + 24);
  unint64_t v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  *char v7 = v8;
  if (v3 == *(_DWORD *)(a1 + 40)) {
    *char v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  }
  return 1;
}

uint64_t sub_10002E258(void **a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 12);
  uint64_t v4 = *a1[7];
  int v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
  }
  else
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
    if ((*(void *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      uint64_t v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2)) {
        *(_DWORD *)(v8 + 4 * a2) = v5;
      }
    }
  }
  uint64_t v9 = *a1[2];
  if ((*(void *)(v9 + 8 * v6) & v7) != 0) {
    *(void *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  return 1;
}

void *sub_10002E2F8(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10002E360(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_10002E3BC(uint64_t a1, void **a2)
{
  if (a2)
  {
    if (*a2) {
      operator delete(*a2);
    }
    operator delete();
  }
}

void sub_10002E414(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10002E49C()
{
  return 48;
}

void *sub_10002E4A4(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10002E50C(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10002E594(void *a1, uint64_t a2)
{
  *a1 = off_1000F0E98;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10002E628(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10002E63C(void *a1)
{
  *a1 = off_1000F0E98;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10002E680(void *a1)
{
  *a1 = off_1000F0E98;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10002E6E4()
{
  return 56;
}

void sub_10002E6EC(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      int v5 = (uint64_t *)v2[1];
      sub_10002E750((int)a1, v2);
      uint64_t v2 = v5;
    }
  }
}

void sub_10002E750(int a1, void *__p)
{
  uint64_t v2 = __p[2];
  __p[2] = 0;
  if (v2) {
    operator delete[]();
  }
  operator delete(__p);
}

void sub_10002E7A4(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      unint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      sub_100019424();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v14 = &v8[(void)v12];
    uint64_t v15 = &v8[(void)v12 + v4];
    uint64_t v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    uint64_t v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--unint64_t v14 = v18;
      }
      while (v7 != v17);
      uint64_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_10002E8D0(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10002E958(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_10002E958(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10001943C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1000267D0(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1000268E8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10001943C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      std::string v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  BOOL v56 = a1 + 3;
  *(void *)&long long v54 = sub_10001943C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  sub_100026A08(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100026B20((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10002EC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10002EC70(void *a1, uint64_t a2)
{
  uint64_t v3 = 56 * a2;
  unint64_t v4 = a1[1];
  if (224 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

void sub_10002ED68(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      sub_100019424();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_10002EE48((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  unint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void *sub_10002EE10(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_100018AF4();
  }
  return operator new(4 * a2);
}

void sub_10002EE48(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_100019424();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    sub_10002EF08(&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    unint64_t v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    sub_100069378(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    unint64_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_10002EEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10002EF08(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100019424();
  }
  uint64_t result = sub_10001943C((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_10002EF50(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  sub_10002EFE0((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_10002EFE0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    uint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t sub_10002F0B0(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t sub_10002F120(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    int v7 = *v2++;
    operator delete(v7);
  }
  return sub_100027128((uint64_t)a1);
}

uint64_t sub_10002F1C8(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    int v13 = (const std::string *)sub_10002F834();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    sub_1000C1AC4();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 144))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if (result && a3[26])
  {
    unint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) + 144);
    return v22();
  }
  return result;
}

uint64_t sub_10002F3F0(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::ostream::sentry::sentry();
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long __p = 0u;
    long long v28 = 0u;
    uint64_t v35 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v26);
    if (v26[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  std::ostream::sentry::~sentry();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    sub_100009CF0(&__p, "ERROR");
    sub_10002D454((BOOL *)v26, (uint64_t)&__p);
    int v18 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
    int v19 = *(char *)(a3 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = *(void *)a3;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 8);
    }
  }
  else
  {
    sub_10002F1C8(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      sub_100009CF0(&__p, "ERROR");
      sub_10002D454((BOOL *)v26, (uint64_t)&__p);
      int v18 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
      int v22 = *(char *)(a3 + 23);
      if (v22 >= 0) {
        uint64_t v20 = a3;
      }
      else {
        uint64_t v20 = *(void *)a3;
      }
      if (v22 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v21 = *(void *)(a3 + 8);
      }
    }
    else
    {
      std::ostream::sentry::sentry();
      uint64_t v23 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v23[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v23 + 5) + 32))(&__p);
        if (v35 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      std::ostream::sentry::~sentry();
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      sub_100009CF0(&__p, "ERROR");
      sub_10002D454((BOOL *)v26, (uint64_t)&__p);
      int v18 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
      int v24 = *(char *)(a3 + 23);
      if (v24 >= 0) {
        uint64_t v20 = a3;
      }
      else {
        uint64_t v20 = *(void *)a3;
      }
      if (v24 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v21 = *(void *)(a3 + 8);
      }
    }
  }
  sub_10002D07C(v18, v20, v21);
  sub_10002D500(v26);
  if (SBYTE7(v28) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_10002F788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t sub_10002F7F0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10002F834()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000FDFF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000FDFF0))
  {
    operator new();
  }
  return qword_1000FDFE8;
}

void sub_10002F8FC(_Unwind_Exception *a1)
{
}

uint64_t sub_10002F934()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000FE000, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000FE000))
  {
    operator new();
  }
  return qword_1000FDFF8;
}

void sub_10002F9F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_10002FA48(uint64_t a1, void **a2)
{
  uint64_t v3 = (void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v3 < 0) {
    uint64_t v3 = a2[1];
  }
  if (v3)
  {
    sub_10002FE48((void (__cdecl ***)(std::ofstream *__hidden))__p);
    if ((v29[*((void *)__p[0] - 3)] & 5) != 0)
    {
      sub_100009CF0(v16, "ERROR");
      sub_10002D454(&v22, (uint64_t)v16);
      unint64_t v5 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::Write: Can't open file: ", 29);
      int v6 = *((char *)a2 + 23);
      if (v6 >= 0) {
        int v7 = a2;
      }
      else {
        int v7 = *a2;
      }
      if (v6 >= 0) {
        uint64_t v8 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        uint64_t v8 = (uint64_t)a2[1];
      }
      goto LABEL_31;
    }
    char v10 = byte_1000FF647;
    if (*((char *)a2 + 23) < 0)
    {
      sub_10006770C(v16, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)a2;
      uint64_t v17 = a2[2];
    }
    __int16 v18 = 257;
    char v19 = 1;
    char v20 = v10;
    char v21 = 0;
    char v12 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)a1 + 80))(a1, __p, v16);
    char v13 = v12;
    if (SHIBYTE(v17) < 0)
    {
      operator delete(v16[0]);
      if (v13) {
        goto LABEL_23;
      }
    }
    else if (v12)
    {
LABEL_23:
      uint64_t v11 = 1;
LABEL_34:
      std::filebuf::~filebuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return v11;
    }
    sub_100009CF0(v16, "ERROR");
    sub_10002D454(&v22, (uint64_t)v16);
    unint64_t v5 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::Write failed: ", 19);
    int v14 = *((char *)a2 + 23);
    if (v14 >= 0) {
      int v7 = a2;
    }
    else {
      int v7 = *a2;
    }
    if (v14 >= 0) {
      uint64_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v8 = (uint64_t)a2[1];
    }
LABEL_31:
    sub_10002D07C(v5, (uint64_t)v7, v8);
    sub_10002D500(&v22);
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
    uint64_t v11 = 0;
    goto LABEL_34;
  }
  sub_100009CF0(v16, "standard output");
  char v9 = byte_1000FF647;
  if (SHIBYTE(v17) < 0)
  {
    sub_10006770C(__p, v16[0], (unint64_t)v16[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v16;
    int v24 = v17;
  }
  __int16 v25 = 257;
  char v26 = 1;
  char v27 = v9;
  char v28 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, std::ostream *, void **))(*(void *)a1 + 80))(a1, &std::cout, __p);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  return v11;
}

void sub_10002FDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void (__cdecl ***sub_10002FE48(void (__cdecl ***a1)(std::ofstream *__hidden this)))(std::ofstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  unint64_t v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 1);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_10002FFDC(_Unwind_Exception *a1)
{
}

void *sub_100030014(void *a1)
{
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void *sub_1000300E0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x70uLL);
  uint64_t result = sub_10003013C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100030128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003013C(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000F0EC0;
  sub_100069C34((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100030184(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100030198(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F0EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000301B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F0EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003020C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100030234(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v3;
  if (result)
  {
    unint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t sub_1000302D4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v3;
  if (result)
  {
    unint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t sub_100030374(void *a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  uint64_t v3 = sub_10002D8A8();
  unint64_t v4 = a1[9];
  *(_DWORD *)uint64_t v2 = *v3;
  *((void *)v2 + 5) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  unint64_t v5 = (void *)a1[8];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[7];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_100019424();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      char v12 = (char *)sub_10001943C((uint64_t)(a1 + 9), v11);
    }
    else {
      char v12 = 0;
    }
    char v13 = &v12[8 * v8];
    int v14 = &v12[8 * v11];
    *(void *)char v13 = v2;
    int v6 = v13 + 8;
    uint64_t v16 = (char *)a1[7];
    int v15 = (char *)a1[8];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      int v15 = (char *)a1[7];
    }
    a1[7] = v13;
    a1[8] = v6;
    a1[9] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    void *v5 = v2;
    int v6 = v5 + 1;
  }
  a1[8] = v6;
  return (((unint64_t)v6 - a1[7]) >> 3) - 1;
}

uint64_t sub_10003048C(void *a1)
{
  *a1 = off_1000F0858;
  uint64_t v2 = (void **)a1[8];
  if (v2 != (void **)a1[7])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void **)a1[7];
    do
    {
      sub_100030A58(v2[v3++]);
      uint64_t v2 = (void **)a1[7];
    }
    while (v3 < (uint64_t)(a1[8] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return sub_1000305F4((uint64_t)a1);
}

void sub_100030530(void *a1)
{
  sub_10003048C(a1);
  operator delete();
}

uint64_t sub_100030568(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_100030570(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void sub_100030580(void *a1)
{
  sub_10003048C(a1);
  operator delete();
}

void sub_1000305BC(uint64_t a1)
{
  sub_1000305F4(a1);
  operator delete();
}

uint64_t sub_1000305F4(uint64_t a1)
{
  *(void *)a1 = off_1000F0888;
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1000306A4(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_100019424();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v6 = (char *)sub_10001943C(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    char v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_10003074C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_100019424();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    long long __p = sub_10001A898(v3, a2);
    uint64_t v8 = (char *)__p + v5;
    uint64_t v9 = (char *)__p + v5;
    uint64_t v10 = (char *)__p + 16 * v6;
    sub_100030828(a1, &__p);
    if (v9 != v8) {
      v9 += (v8 - v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1000307F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100030828(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      *(_DWORD *)(v6 - 4) = *(_DWORD *)(v2 + v5 - 4);
      v5 -= 16;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000308AC(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[1];
  }
  if (!a2[1]) {
    ++a1[2];
  }
  unint64_t v3 = a1[4];
  if (v3 >= a1[5])
  {
    uint64_t result = sub_10003092C(a1 + 3, (uint64_t)a2);
  }
  else
  {
    *(void *)unint64_t v3 = *(void *)a2;
    *(_DWORD *)(v3 + 8) = a2[2];
    *(_DWORD *)(v3 + 12) = a2[3];
    uint64_t result = v3 + 16;
  }
  a1[4] = result;
  return result;
}

uint64_t sub_10003092C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100019424();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  char v19 = a1 + 2;
  uint64_t v10 = (char *)sub_10001A898(v7, v9);
  uint64_t v11 = &v10[16 * v4];
  long long __p = v10;
  uint64_t v16 = v11;
  __int16 v18 = &v10[16 * v12];
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  uint64_t v17 = v11 + 16;
  sub_100030828(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    v17 += (v16 - v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_100030A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100030A58(void *__p)
{
  if (__p)
  {
    uint64_t v2 = (void *)__p[3];
    if (v2)
    {
      __p[4] = v2;
      operator delete(v2);
    }
    operator delete(__p);
  }
}

void sub_100030AA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2 || *(void *)(v2 + 8))
  {
    sub_100030B1C(a1, &v6);
    uint64_t v4 = v6;
    uint64_t v3 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v3;
    if (v5) {
      sub_100018BC0(v5);
    }
    if (v7) {
      sub_100018BC0(v7);
    }
  }
}

void *sub_100030B1C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  uint64_t result = sub_100030B78(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100030B64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100030B78(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000F0EC0;
  sub_100069C34((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100030BC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

float sub_100030BD4(void *a1, int a2, float *a3)
{
  int v9 = **(_DWORD **)(a1[7] + 8 * a2);
  unint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  uint64_t v7 = sub_10006A1DC(v6, (float *)&v9, a3);
  float result = *a3;
  **(float **)(a1[7] + 8 * a2) = *a3;
  a1[1] = a1[1] & 4 | v7;
  return result;
}

uint64_t sub_100030C6C(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[7] + 8 * a2) + 32);
  if (v6 == *(void *)(*(void *)(a1[7] + 8 * a2) + 24)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (_DWORD *)(v6 - 16);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  a1[1] = a1[1] & 4 | sub_10006A2E0(v8, a2, a3, v7);
  int v9 = *(void **)(a1[7] + 8 * a2);
  return sub_1000308AC(v9, a3);
}

void sub_100030D14(uint64_t a1, char **a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 56);
  unint64_t v5 = (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3;
  int v35 = 0;
  sub_100030FD0(__p, v5, &v35);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    int v9 = __p[0];
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      v9[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 64) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (*((_DWORD *)__p[0] + v12) == -1)
      {
        sub_100030A58(*(void **)(v11 + 8 * v12));
      }
      else
      {
        *((_DWORD *)__p[0] + v12) = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 56);
    }
    while (v12 < (*(void *)(a1 + 64) - v11) >> 3);
  }
  sub_100030F4C((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 64) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      uint64_t v17 = *(void *)(v16 + 24);
      uint64_t v18 = *(void *)(v16 + 32);
      int64x2_t v19 = *(int64x2_t *)(v16 + 8);
      uint64_t v21 = v18 - v17;
      BOOL v20 = v18 == v17;
      if (v18 == v17) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = *(void *)(v16 + 24);
      }
      if (v20)
      {
        int64x2_t v34 = *(int64x2_t *)(v16 + 8);
        uint64_t v24 = 0;
        uint64_t v31 = v21 >> 4;
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
        __int16 v25 = (int *)(v22 + 12);
        do
        {
          int v26 = *((_DWORD *)__p[0] + *v25);
          if (v26 == -1)
          {
            uint64_t v28 = *(void *)(v25 - 3);
            v29.i64[0] = v28;
            v29.i64[1] = HIDWORD(v28);
            int64x2_t v19 = vaddq_s64(v19, vceqzq_s64(v29));
          }
          else
          {
            *__int16 v25 = v26;
            if (v23 != v24)
            {
              uint64_t v27 = v22 + 16 * v24;
              *(void *)uint64_t v27 = *(void *)(v25 - 3);
              *(_DWORD *)(v27 + 8) = *(v25 - 1);
              *(_DWORD *)(v27 + 12) = v26;
              uint64_t v14 = *v4;
            }
            ++v24;
          }
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          ++v23;
          uint64_t v30 = *(void *)(v16 + 32) - *(void *)(v16 + 24);
          v25 += 4;
        }
        while (v23 < v30 >> 4);
        int64x2_t v34 = v19;
        uint64_t v31 = v30 >> 4;
      }
      sub_100030F7C((void *)v16, v31 - v24);
      uint64_t v14 = *(void *)(a1 + 56);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 8) = v34;
    }
    while (v15 < (*(void *)(a1 + 64) - v14) >> 3);
  }
  uint64_t v32 = *(int *)(a1 + 80);
  if (v32 == -1)
  {
    long long v33 = __p[0];
    if (!__p[0]) {
      return;
    }
  }
  else
  {
    long long v33 = __p[0];
    *(_DWORD *)(a1 + 80) = *((_DWORD *)__p[0] + v32);
  }
  __p[1] = v33;
  operator delete(v33);
}

void sub_100030F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100030F4C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_100031098((void **)a1, a2 - v2);
  }
}

void *sub_100030F7C(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result[4];
    uint64_t v3 = -16 * a2;
    uint64_t v4 = (_DWORD *)(v2 - 16);
    unint64_t v5 = (_DWORD *)(v2 - 16);
    do
    {
      int v6 = *v5;
      v5 -= 4;
      if (!v6) {
        --result[1];
      }
      if (!v4[1]) {
        --result[2];
      }
      uint64_t v4 = v5;
      --a2;
    }
    while (a2);
    result[4] = v2 + v3;
  }
  return result;
}

void *sub_100030FD0(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100031054(a1, a2);
    int v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_100031038(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100031054(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_100019424();
  }
  float result = (char *)sub_10002EE10((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_100031098(void **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      sub_100019424();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int v13 = (char *)sub_10001943C(v4, v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    unint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *sub_1000311AC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  float result = sub_1000311F8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000311E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000311F8(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000F0EC0;
  sub_100031254((uint64_t)(a1 + 3));
  return a1;
}

void sub_100031240(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100031254(uint64_t a1)
{
  *(void *)a1 = off_1000F0888;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  sub_100009CF0((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  *(void *)a1 = off_1000F0828;
  sub_100009CF0(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x956A5A950003;
  return a1;
}

void sub_100031328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10003048C(v15);
  _Unwind_Resume(a1);
}

void sub_100031354(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2 != *(void *)(a1 + 56))
  {
    unint64_t v3 = 0;
    uint64_t v2 = *(void *)(a1 + 56);
    do
    {
      sub_100030A58(*(void **)(v2 + 8 * v3++));
      uint64_t v2 = *(void *)(a1 + 56);
    }
    while (v3 < (*(void *)(a1 + 64) - v2) >> 3);
  }
  *(void *)(a1 + 64) = v2;
  *(_DWORD *)(a1 + 80) = -1;
}

void sub_1000313C4()
{
}

BOOL sub_1000313D8(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                                            - *(void *)(*(void *)(a1 + 8) + 24)) >> 4);
}

uint64_t sub_1000313F4(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 16 * *(void *)(a1 + 24);
}

uint64_t sub_100031408(uint64_t result)
{
  return result;
}

uint64_t sub_100031418(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_100031420(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_100031428(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_100031430()
{
  return 15;
}

int *sub_10003143C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 24);
  int v6 = (int *)(v5 + 16 * v4);
  int v7 = *v6;
  int v8 = v6[1];
  if (v7 != v8) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v7)
  {
    if (!v8)
    {
      unint64_t v9 = *(unint64_t **)(a1 + 16);
      unint64_t v10 = *v9;
LABEL_8:
      *unint64_t v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    unint64_t v9 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      unint64_t v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *unint64_t v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  uint64_t v12 = v5 + 16 * v4;
  int v13 = sub_10002D8A8();
  float v15 = *(float *)(v12 + 8);
  uint64_t v14 = (float *)(v12 + 8);
  if (v15 != *(float *)v13 && *v14 != *(float *)sub_10002D854()) {
    **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  sub_100031644(*(void **)(a1 + 8), a2, *(void *)(a1 + 24));
  int v16 = *(_DWORD *)a2;
  int v17 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v17) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v16)
  {
    if (!v17)
    {
      uint64_t v18 = *(unint64_t **)(a1 + 16);
      unint64_t v19 = *v18;
LABEL_19:
      *uint64_t v18 = v19 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    uint64_t v18 = *(unint64_t **)(a1 + 16);
    unint64_t v20 = *v18 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *uint64_t v18 = v20;
    if (!v17)
    {
      unint64_t v19 = v20 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *uint64_t v18 = v19;
      goto LABEL_19;
    }
  }
  float result = sub_10002D8A8();
  if (*(float *)(a2 + 8) != *(float *)result)
  {
    float result = sub_10002D854();
    if (*(float *)(a2 + 8) != *(float *)result) {
      **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | (unint64_t)&_mh_execute_header;
    }
  }
  **(void **)(a1 + 16) &= 0x30FC30007uLL;
  return result;
}

float sub_100031644(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = (_DWORD *)(v3 + 16 * a3);
  if (!*v4) {
    --a1[1];
  }
  if (!v4[1]) {
    --a1[2];
  }
  if (!*(_DWORD *)a2) {
    ++a1[1];
  }
  if (!*(_DWORD *)(a2 + 4)) {
    ++a1[2];
  }
  *(void *)uint64_t v4 = *(void *)a2;
  uint64_t v5 = v3 + 16 * a3;
  float result = *(float *)(a2 + 8);
  *(float *)(v5 + 8) = result;
  *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

void sub_1000316BC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 40;
        int v7 = (void **)(v4 - 24);
        sub_100018CDC(&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100031738(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000317F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000317B0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_100018AF4();
  }
  return operator new(40 * a2);
}

uint64_t sub_1000317F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    uint64_t v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - ++*(void *)(result + 24) = 0;
      *(_OWORD *)(v7 - ++*(void *)(result + 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - ++*(void *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v13 + 1) - 40;
      *((void *)&v13 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v8 = v13;
  }
  char v11 = 1;
  sub_1000318AC((uint64_t)v10);
  return v8;
}

uint64_t sub_1000318AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000318E4(a1);
  }
  return a1;
}

void sub_1000318E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = (void **)(v1 + 16);
    sub_100018CDC(&v3);
    v1 += 40;
  }
}

void **sub_100031934(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100031968(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    uint64_t v4 = (void **)(i - 24);
    sub_100018CDC(&v4);
  }
}

uint64_t sub_1000319C0(uint64_t a1)
{
  return a1;
}

int main(int argc, const char **argv, const char **envp)
{
  inactive = dispatch_workloop_create_inactive("RDMainWorkloop");
  dispatch_workloop_set_scheduler_priority();
  dispatch_set_qos_class_fallback();
  dispatch_activate(inactive);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v5 = dispatch_queue_create("RDMainQueue", initially_inactive);
  dispatch_set_target_queue(v5, inactive);
  dispatch_set_qos_class_floor(v5, QOS_CLASS_USER_INTERACTIVE, 0);
  dispatch_activate(v5);
  dispatch_release(inactive);
  gRDServerQueue = (uint64_t)v5;
  do
    int v6 = open("/dev/null", 2);
  while (v6 < 3);
  close(v6);
  xpc_track_activity();
  xpc_main((xpc_connection_handler_t)sub_100031AB0);
}

void sub_100031AB0(_xpc_connection_s *a1)
{
  xpc_connection_set_target_queue(a1, (dispatch_queue_t)gRDServerQueue);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_100031B40;
  handler[3] = &unk_1000EEF40;
  handler[4] = a1;
  xpc_connection_set_event_handler(a1, handler);
  xpc_connection_resume(a1);
}

void sub_100031B40(uint64_t a1, void *a2)
{
}

void sub_100031B48(_xpc_connection_s *a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    if (type == (xpc_type_t)&_xpc_type_connection)
    {
      sub_100031AB0(object);
      return;
    }
    if (type != (xpc_type_t)&_xpc_type_dictionary) {
      sub_1000C2CF8();
    }
    int64_t int64 = xpc_dictionary_get_int64(object, kRDKeyMessage);
    int64_t v6 = int64;
    if (int64 > 899)
    {
      if (int64 == 900)
      {
        xpc_object_t reply = xpc_dictionary_create_reply(object);
        long long v13 = kRDKeyObjectID;
        uint64_t int64 = xpc_dictionary_get_uint64(object, kRDKeyObjectID);
        xpc_dictionary_set_uint64(reply, v13, uint64);
LABEL_34:
        if (reply)
        {
          xpc_connection_send_message(a1, reply);
          xpc_release(reply);
        }
        return;
      }
      if (int64 != 911)
      {
        if (int64 == 999) {
          sub_1000C2C74(a1);
        }
        goto LABEL_31;
      }
    }
    else if (int64 != 100)
    {
      if (int64 == 101)
      {
        xpc_object_t v15 = xpc_dictionary_create_reply(object);
        xpc_dictionary_set_int64(v15, kRDKeyMessage, 201);
        if (xpc_dictionary_get_BOOL(object, kRDKeyLiveAudio)) {
          operator new();
        }
        xpc_object_t value = (_xpc_connection_s *)xpc_dictionary_get_value(object, kRDKeyLocale);
        uint64_t v18 = xpc_dictionary_get_uint64(object, kRDKeyOptions);
        RDPeer::CreatePeer(a1, value, v18, 0, v19);
      }
      if (int64 == 300)
      {
        RDPeer::sBroker = (uint64_t)a1;
        uint64_t v7 = RXOSLog();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          pid_t pid = xpc_connection_get_pid(a1);
          uint64_t v8 = "broker(%d) introduced itself";
LABEL_25:
          unint64_t v10 = v7;
          os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
          uint32_t v12 = 8;
LABEL_26:
          _os_log_impl((void *)&_mh_execute_header, v10, v11, v8, buf, v12);
          return;
        }
        return;
      }
LABEL_31:
      int v16 = RXOSLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109376;
        pid_t pid = xpc_connection_get_pid(a1);
        __int16 v22 = 2048;
        int64_t v23 = v6;
        uint64_t v8 = "peer(%d) unknown or unimplemented message %lld";
        unint64_t v10 = v16;
        os_log_type_t v11 = OS_LOG_TYPE_ERROR;
        uint32_t v12 = 18;
        goto LABEL_26;
      }
      return;
    }
    xpc_object_t reply = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(reply, kRDKeyMessage, 202);
    goto LABEL_34;
  }
  if (object == &_xpc_error_connection_invalid)
  {
    uint64_t v7 = RXOSLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      pid_t pid = xpc_connection_get_pid(a1);
      uint64_t v8 = "peer(%d) XPC_ERROR_CONNECTION_INVALID";
      goto LABEL_25;
    }
  }
  else if (object == &_xpc_error_connection_interrupted)
  {
    uint64_t v7 = RXOSLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      pid_t pid = xpc_connection_get_pid(a1);
      uint64_t v8 = "peer(%d) XPC_ERROR_CONNECTION_INTERRUPTED";
      goto LABEL_25;
    }
  }
  else if (object == &_xpc_error_termination_imminent)
  {
    uint64_t v7 = RXOSLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      pid_t pid = xpc_connection_get_pid(a1);
      uint64_t v8 = "peer(%d) XPC_ERROR_TERMINATION_IMMINENT";
      goto LABEL_25;
    }
  }
}

void sub_100031FF4()
{
}

void sub_100032020(_xpc_connection_s *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  sub_1000328FC((uint64_t **)&qword_1000FEB28, (unint64_t *)&v5, &v5);
  if ((byte_1000FEB40 & 1) == 0)
  {
    byte_1000FEB40 = 1;
    qword_1000FEB48 = os_transaction_create();
    uint64_t v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      pid_t pid = xpc_connection_get_pid(a1);
      *(_DWORD *)long long buf = 67109120;
      pid_t v7 = pid;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "peer(%d) is first peer alive", buf, 8u);
    }
  }
}

void sub_100032104(uint64_t a1, xpc_object_t object)
{
  uint64_t v4 = *(_xpc_connection_s **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (object == &_xpc_error_connection_invalid)
    {
      sub_1000329B8(v4, (unint64_t)v3);
      (*(void (**)(void *))*v3)(v3);
      pid_t v7 = RXOSLog();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v14 = 67109120;
      pid_t pid = xpc_connection_get_pid(v4);
      uint64_t v8 = "peer(%d) XPC_ERROR_CONNECTION_INVALID";
    }
    else if (object == &_xpc_error_connection_interrupted)
    {
      sub_1000329B8(v4, (unint64_t)v3);
      (*(void (**)(void *))*v3)(v3);
      pid_t v7 = RXOSLog();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v14 = 67109120;
      pid_t pid = xpc_connection_get_pid(v4);
      uint64_t v8 = "peer(%d) XPC_ERROR_CONNECTION_INTERRUPTED";
    }
    else
    {
      if (object != &_xpc_error_termination_imminent) {
        return;
      }
      pid_t v7 = RXOSLog();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v14 = 67109120;
      pid_t pid = xpc_connection_get_pid(v4);
      uint64_t v8 = "peer(%d) XPC_ERROR_TERMINATION_IMMINENT";
    }
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v14, 8u);
    return;
  }
  if (type != (xpc_type_t)&_xpc_type_dictionary) {
    sub_1000C2D24();
  }
  int64_t int64 = xpc_dictionary_get_int64(object, kRDKeyMessage);
  switch(int64)
  {
    case 'd':
      if ((*(unsigned int (**)(void *, xpc_object_t))(*v3 + 24))(v3, object))
      {
        sub_100032020(v4, (uint64_t)v3);
      }
      else
      {
        sub_1000329B8(v4, (unint64_t)v3);
      }
      return;
    case 'e':
      goto LABEL_23;
    case 'f':
      xpc_object_t reply = xpc_dictionary_create_reply(object);
      (*(void (**)(void *, xpc_object_t, xpc_object_t))(*v3 + 32))(v3, object, reply);
      goto LABEL_52;
    case 'g':
      unint64_t v9 = *(void (**)(void *, uint64_t))(*v3 + 40);
      unint64_t v10 = v3;
      uint64_t v11 = (uint64_t)object;
      goto LABEL_57;
    case 'h':
      unint64_t v9 = *(void (**)(void *, uint64_t))(*v3 + 48);
      unint64_t v10 = v3;
      uint64_t v11 = (uint64_t)object;
      goto LABEL_57;
    case 'i':
      v3[4] = object;
      xpc_retain(object);
      return;
    case 'j':
      unint64_t v9 = *(void (**)(void *, uint64_t))(*v3 + 64);
      unint64_t v10 = v3;
      uint64_t v11 = (uint64_t)object;
      goto LABEL_57;
    case 'k':
      unint64_t v9 = *(void (**)(void *, uint64_t))(*v3 + 72);
      unint64_t v10 = v3;
      uint64_t v11 = (uint64_t)object;
      goto LABEL_57;
    case 'l':
      long long v13 = *(void (**)(void *))(*v3 + 80);
      v13(v3);
      return;
    case 'm':
      unint64_t v9 = *(void (**)(void *, uint64_t))(*v3 + 88);
      unint64_t v10 = v3;
      uint64_t v11 = (uint64_t)object;
      goto LABEL_57;
    case 'n':
      unint64_t v9 = *(void (**)(void *, uint64_t))(*v3 + 96);
      unint64_t v10 = v3;
      uint64_t v11 = (uint64_t)object;
      goto LABEL_57;
    case 'o':
      xpc_object_t reply = xpc_dictionary_create_reply(object);
      (*(void (**)(void *, xpc_object_t, xpc_object_t))(*v3 + 104))(v3, object, reply);
LABEL_52:
      xpc_connection_send_message(v4, reply);
      xpc_release(reply);
      return;
    case 'p':
      unint64_t v9 = *(void (**)(void *, uint64_t))(*v3 + 56);
      unint64_t v10 = v3;
      uint64_t v11 = (uint64_t)object;
      goto LABEL_57;
    default:
      if (int64 == 911)
      {
        unint64_t v9 = *(void (**)(void *, uint64_t))(*v3 + 8);
        unint64_t v10 = v3;
        uint64_t v11 = 1;
LABEL_57:
        v9(v10, v11);
      }
      else
      {
LABEL_23:
        sub_100031B48((int)v4, object);
      }
      break;
  }
}

uint64_t *sub_1000328FC(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  int64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        int64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_10001AD30(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void sub_1000329B8(_xpc_connection_s *a1, unint64_t a2)
{
  unint64_t v5 = a2;
  sub_100032A9C((uint64_t)&qword_1000FEB28, &v5);
  if (!qword_1000FEB38 && byte_1000FEB40 == 1)
  {
    byte_1000FEB40 = 0;
    os_release((void *)qword_1000FEB48);
    uint64_t v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      pid_t pid = xpc_connection_get_pid(a1);
      *(_DWORD *)long long buf = 67109120;
      pid_t v7 = pid;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "peer(%d) was last peer alive", buf, 8u);
    }
  }
}

uint64_t sub_100032A9C(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      pid_t v7 = v2;
    }
    else {
      pid_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_100032B18((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *sub_100032B18(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      unint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_100032B8C(v6, a2);
  return v3;
}

uint64_t *sub_100032B8C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  pid_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      pid_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      pid_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    _OWORD v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + ++*(void *)(result + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + ++*(void *)(result + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + ++*(void *)(result + 24) = 1;
      *(unsigned char *)(v12 + ++*(void *)(result + 24) = 0;
      long long v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *long long v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      pid_t v7 = *(uint64_t **)(*v7 + 8);
    }
    xpc_object_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      int v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + ++*(void *)(result + 24) = 1;
        *((unsigned char *)v7 + ++*(void *)(result + 24) = 0;
        uint64_t v22 = v15[1];
        *pid_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        void v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        _OWORD v7[2] = (uint64_t)v15;
        int v16 = v7;
      }
      else
      {
        xpc_object_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + ++*(void *)(result + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + ++*(void *)(result + 24) = 1;
      *((unsigned char *)v16 + ++*(void *)(result + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    int v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + ++*(void *)(result + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      int v17 = result;
LABEL_53:
      *((unsigned char *)v17 + ++*(void *)(result + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    pid_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + ++*(void *)(result + 24) = 1;
    *(unsigned char *)(v12 + ++*(void *)(result + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    _OWORD v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    pid_t v7 = *(uint64_t **)v12;
  }
  unint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  unint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + ++*(void *)(result + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    unint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + ++*(void *)(result + 24) = 1;
    *((unsigned char *)v7 + ++*(void *)(result + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *unint64_t v20 = (uint64_t)v7;
    _OWORD v7[2] = (uint64_t)v20;
    unint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + ++*(void *)(result + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + ++*(void *)(result + 24) = 1;
  *((unsigned char *)v19 + ++*(void *)(result + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_100032F10()
{
  qword_1000FEB38 = 0;
  qword_1000FEB30 = 0;
  qword_1000FEB28 = (uint64_t)&qword_1000FEB30;
  return __cxa_atexit((void (*)(void *))sub_1000319C0, &qword_1000FEB28, (void *)&_mh_execute_header);
}

CFIndex RXDebugFlagsUpdate()
{
  dword_1000FEB50 = CFPreferencesGetAppIntegerValue(@"RXDebugFlag", @"com.apple.SpeechRecognitionCore.speechrecognitiond", 0);
  byte_1000FEB54 = CFPreferencesGetAppBooleanValue(@"RXVeryVerbose", @"com.apple.SpeechRecognitionCore.speechrecognitiond", 0) != 0;
  byte_1000FEB55 = CFPreferencesGetAppIntegerValue(@"RXDebugAutomationMode", @"com.apple.SpeechRecognitionCore.speechrecognitiond", 0);
  Boolean keyExistsAndHasValidFormat = 0;
  AppBooleanCFStringRef Value = CFPreferencesGetAppBooleanValue(@"RXDebugAutomationSimulateOpenMic", @"com.apple.SpeechRecognitionCore.speechrecognitiond", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v1 = AppBooleanValue == 0;
  }
  else {
    BOOL v1 = 0;
  }
  char v2 = !v1;
  byte_1000FE008 = v2;
  Boolean keyExistsAndHasValidFormat = 0;
  AppIntegerCFStringRef Value = CFPreferencesGetAppIntegerValue(@"RXRecognitionResetTimeInSec", @"com.apple.SpeechRecognitionCore.speechrecognitiond", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    char v4 = AppIntegerValue;
  }
  else {
    char v4 = 5;
  }
  byte_1000FE009 = v4;
  CFIndex result = CFPreferencesGetAppIntegerValue(@"RXDebugAutomationSaveKeywordsAudio", @"com.apple.SpeechRecognitionCore.speechrecognitiond", 0);
  byte_1000FEB56 = result != 0;
  return result;
}

uint64_t RXLogServerResults()
{
  return dword_1000FEB50 >> 7;
}

uint64_t RXLogServerGrammar()
{
  return BYTE1(dword_1000FEB50) & 1;
}

uint64_t RXLogSound()
{
  return (BYTE1(dword_1000FEB50) >> 1) & 1;
}

uint64_t RXLogClientUpdates()
{
  return (BYTE1(dword_1000FEB50) >> 2) & 1;
}

uint64_t RXLogPerformance()
{
  return (BYTE1(dword_1000FEB50) >> 3) & 1;
}

uint64_t RXVeryVerbose()
{
  return byte_1000FEB54;
}

BOOL RXAutomationModeSynthesis()
{
  return byte_1000FEB55 == 1;
}

BOOL RXAutomationModeResult()
{
  return byte_1000FEB55 == 2;
}

BOOL RXAutomationModeFileName()
{
  return byte_1000FEB55 == 3;
}

uint64_t RXAutomationSimulateOpenMic()
{
  return byte_1000FE008;
}

uint64_t RXResetTimeInSec()
{
  return byte_1000FE009;
}

uint64_t RXAutomationSaveKeywordsAudio()
{
  return byte_1000FEB56;
}

void __RXAbort(int a1, uint64_t a2, uint64_t a3, uint64_t a4, CFStringRef format, ...)
{
  va_start(va, format);
  CFStringRef v9 = CFStringCreateWithFormatAndArguments(0, 0, format, va);
  CFStringRef v10 = v9;
  if (a4) {
  else
  }
    CFStringRef v11 = CFStringCreateWithFormat(0, 0, @"%s:%u: %@\n", a2, a3, v9);
  CFStringRef v12 = v11;
  if (v10) {
    CFRelease(v10);
  }
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(0, v12, 0x8000100u, 0);
  if (v12) {
    CFRelease(v12);
  }
  if (ExternalRepresentation)
  {
    BytePtr = CFDataGetBytePtr(ExternalRepresentation);
    size_t Length = CFDataGetLength(ExternalRepresentation);
    write(1, BytePtr, Length);
    CFRelease(ExternalRepresentation);
  }
  if (a1) {
    abort();
  }
}

uint64_t RXIsAppleInternal()
{
  if (qword_1000FEB58 != -1) {
    dispatch_once(&qword_1000FEB58, &stru_1000EEFA0);
  }
  return byte_1000FEB57;
}

void sub_100033258(id a1)
{
  byte_1000FEB57 = os_variant_has_internal_diagnostics();
}

void reportBacktrace()
{
  uint64_t v15 = 0;
  *(_OWORD *)long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  int v0 = backtrace(v13, 33);
  uint64_t v1 = (v0 - 2);
  char v2 = backtrace_symbols((void *const *)v14, v1);
  if (v2)
  {
    unint64_t v3 = v2;
    if (v0 >= 3)
    {
      for (uint64_t i = 0; v1 != i; ++i)
      {
        int v5 = v3[i];
        if (v5)
        {
          if (qword_1000FEB78 != -1) {
            dispatch_once(&qword_1000FEB78, &stru_1000EF020);
          }
          uint64_t v6 = qword_1000FEB70;
          if (!os_log_type_enabled((os_log_t)qword_1000FEB70, OS_LOG_TYPE_ERROR)) {
            continue;
          }
          uint64_t v7 = *((void *)v14 + i);
          *(_DWORD *)long long buf = 67109634;
          int v17 = i + 1;
          __int16 v18 = 2048;
          uint64_t v19 = v7;
          __int16 v20 = 2080;
          BOOL v21 = v5;
          int v8 = v6;
          CFStringRef v9 = "BACKTRACE: %-3d %p %s\n";
          uint32_t v10 = 28;
        }
        else
        {
          if (qword_1000FEB78 != -1) {
            dispatch_once(&qword_1000FEB78, &stru_1000EF020);
          }
          uint64_t v11 = qword_1000FEB70;
          if (!os_log_type_enabled((os_log_t)qword_1000FEB70, OS_LOG_TYPE_ERROR)) {
            continue;
          }
          uint64_t v12 = *((void *)v14 + i);
          *(_DWORD *)long long buf = 67109376;
          int v17 = i + 1;
          __int16 v18 = 2048;
          uint64_t v19 = v12;
          int v8 = v11;
          CFStringRef v9 = "BACKTRACE: %-3d %p\n";
          uint32_t v10 = 18;
        }
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v9, buf, v10);
      }
    }
    free(v3);
  }
}

uint64_t RXSignpostLog()
{
  if (qword_1000FEB68 != -1) {
    dispatch_once(&qword_1000FEB68, &stru_1000EEFE0);
  }
  return qword_1000FEB60;
}

void sub_1000334D4(id a1)
{
  qword_1000FEB60 = (uint64_t)os_log_create("com.apple.SpeechRecognitionCore", "SRCSignposts");
}

uint64_t RXOSLog()
{
  if (qword_1000FEB78 != -1) {
    dispatch_once(&qword_1000FEB78, &stru_1000EF020);
  }
  return qword_1000FEB70;
}

void sub_100033548(id a1)
{
  qword_1000FEB70 = (uint64_t)os_log_create("com.apple.SpeechRecognitionCore", "SRCLogs");
}

uint64_t RDQSREngine::Instantiate(RDQSREngine *this, void *a2)
{
  if (!RDQSREngine::sInstance) {
    operator new();
  }
  return 1;
}

void sub_1000336B4()
{
}

uint64_t RDQSREngine::StartASREngine(uint64_t this)
{
  CFStringRef v1 = *(const __CFString **)(this + 200);
  if (v1)
  {
    uint64_t v2 = this;
    CFDictionaryRef MutableCopy = CFStringCreateMutableCopy(kCFAllocatorSystemDefault, 0, v1);
    char v4 = CFStringCreateMutableCopy(kCFAllocatorSystemDefault, 0, *(CFStringRef *)(v2 + 200));
    CFStringAppend(MutableCopy, @"mini.json");
    CFStringAppend(v4, @"etiquette.json");
    if (sub_100034228(MutableCopy))
    {
      CFLocaleRef v5 = CFLocaleCreate(0, *(CFLocaleIdentifier *)(v2 + 160));
      uint64_t v6 = RDASRWSpeechRecognizerCreate((uint64_t)MutableCopy, 1, (uint64_t)v5);
      *(void *)(v2 + 16) = v6;
      RDASRWSpeechRecognizerSetDetectUtterances(v6, 1);
      RDASRWSpeechRecognizerSetHighPriority(*(void **)(v2 + 16), 1);
      CFArrayRef v7 = (const __CFArray *)RXLocalesSupportingSpellingMode();
      if (v7)
      {
        CFArrayRef v9 = v7;
        v14.length = CFArrayGetCount(v7);
        v14.id location = 0;
        *(unsigned char *)(v2 + 448) = CFArrayContainsValue(v9, v14, *(const void **)(v2 + 160)) != 0;
        CFRelease(v9);
      }
      CFArrayRef v10 = (const __CFArray *)RDLanguageAssets::CopyInstalledAssetSupportedTasksForLanguage(*(const __CFString **)(v2 + 160), v8);
      if (v10)
      {
        CFArrayRef v11 = v10;
        v15.length = CFArrayGetCount(v10);
        v15.id location = 0;
        *(unsigned char *)(v2 + 449) = CFArrayContainsValue(v11, v15, @"SpellCC") != 0;
        CFRelease(v11);
      }
      operator new();
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (*(void *)(v2 + 16))
    {
      *(unsigned char *)(v2 + 10) = RXIsAudioDonationSupported();
      *(_WORD *)(v2 + 8) = 10;
      CFDictionaryRef v12 = (const __CFDictionary *)CFPreferencesCopyAppValue(@"SpeechDonationConfig", @"com.apple.SpeechRecognitionCore.speechrecognitiond");
      if (v12)
      {
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v12, @"SpeechDonationSamplingPercent");
        if (Value) {
          *(_WORD *)(v2 + 8) = CFStringGetIntValue(Value);
        }
      }
      operator new();
    }
    sub_1000C2D50();
  }
  return this;
}

void sub_100033A98()
{
}

void RDQSREngine::RDQSREngine(RDQSREngine *this, xpc_object_t xstring)
{
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 1;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = 0;
  *((_WORD *)this + 40) = 22863;
  *(_DWORD *)((char *)this + 82) = 0;
  *((_WORD *)this + 43) = 0;
  *((unsigned char *)this + 88) = 1;
  *((void *)this + 15) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((unsigned char *)this + 144) = 0;
  string_ptr = xpc_string_get_string_ptr(xstring);
  CFStringRef v4 = CFStringCreateWithCStringNoCopy(0, string_ptr, 0x8000100u, kCFAllocatorNull);
  *((void *)this + 21) = 0;
  *((void *)this + 20) = v4;
  *((void *)this + ++*(void *)(result + 24) = 0;
  operator new();
}

void sub_100034130(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void **)(v1 + 216);
  *(void *)(v1 + 216) = 0;
  if (v6) {
    sub_100039708(v1 + 216, v6);
  }
  CFArrayRef v7 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
  if (v7) {
    sub_100039708(v3 + 40, v7);
  }
  sub_100039508((CFTypeRef **)v3, 0);
  CFStringRef v8 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 128) = v8;
    operator delete(v8);
  }
  sub_1000394B8((RDUserProfile **)(v1 + 32), 0);
  sub_1000394B8(v2, 0);
  _Unwind_Resume(a1);
}

BOOL sub_100034228(__CFString *a1)
{
  RDString::RDString((RDString *)__p, a1, 0);
  if (v7 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  int v2 = access((const char *)v1, 4);
  if (v2)
  {
    uint64_t v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v4 = __p;
      if (v7 < 0) {
        CFStringRef v4 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315138;
      CFArrayRef v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unable to acess %s!!!", buf, 0xCu);
    }
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v2 == 0;
}

void sub_100034320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100034344(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 24);
  v4[0] = off_1000EF328;
  v4[1] = v1;
  v4[3] = v4;
  RDUserProfile::updateUserProfileWithPersonalData(v2, (uint64_t)v4);
  return sub_100039684(v4);
}

void sub_1000343D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100039684((uint64_t *)va);
  _Unwind_Resume(a1);
}

void RDQSREngine::LoadCustomVocabulary(RDUserProfile **this, int a2)
{
  AppIntegerCFStringRef Value = CFPreferencesGetAppIntegerValue(@"PhoneticVocabularyMode", @"com.apple.SpeechRecognitionCore.Vocabulary", 0);
  CFLocaleRef v5 = RXOSLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    CFIndex v36 = AppIntegerValue;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "LoadCustomVocabulary phoneticVocabularyMode: %ld", buf, 0xCu);
  }
  CFArrayRef v6 = (const __CFArray *)CFPreferencesCopyAppValue(@"CACVocabularyEntries", @"com.apple.SpeechRecognitionCore.Vocabulary");
  if (v6)
  {
    CFArrayRef v7 = v6;
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == CFArrayGetTypeID())
    {
      unint64_t v32 = AppIntegerValue;
      int v30 = a2;
      RDUserProfile::removeLmeDataForTemplateName((id **)this[3], kRDProfileNonTerminalUnknown[0]);
      long long v33 = this;
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, (CFStringRef)this[20]);
      v41.length = CFStringGetLength(MutableCopy);
      v41.id location = 0;
      CFStringFindAndReplace(MutableCopy, @"-", @"_", v41, 0);
      if (CFArrayGetCount(v7) >= 1)
      {
        CFIndex v10 = 0;
        unint64_t v31 = AppIntegerValue & 0xFFFFFFFFFFFFFFFDLL;
        CFArrayRef v34 = v7;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v10);
          if (ValueAtIndex)
          {
            CFDictionaryRef v12 = ValueAtIndex;
            CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"LocaleIdentifier");
            if (Value) {
              CFStringRef v14 = Value;
            }
            else {
              CFStringRef v14 = @"en_US";
            }
            CFMutableStringRef v15 = CFStringCreateMutableCopy(0, 0, v14);
            v42.length = CFStringGetLength(v15);
            v42.id location = 0;
            CFStringFindAndReplace(v15, @"-", @"_", v42, 0);
            if (CFEqual(MutableCopy, v15))
            {
              CFStringRef v16 = (const __CFString *)CFDictionaryGetValue(v12, @"Text");
              CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(v12, @"TextIPAs");
              CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
              if (v17)
              {
                CFIndex Count = CFArrayGetCount(v17);
                if (Count >= 1)
                {
                  CFIndex v20 = Count;
                  for (CFIndex i = 0; i != v20; ++i)
                  {
                    CFArrayGetValueAtIndex(v17, i);
                    CFStringRef v22 = (const __CFString *)SRSSCopyNvasrFromIPA();
                    if (CFStringCompare(v22, &stru_1000F4FA8, 0))
                    {
                      uint64_t v23 = RXOSLog();
                      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v24 = CFArrayGetValueAtIndex(v17, i);
                        *(_DWORD *)long long buf = 138412802;
                        CFIndex v36 = (CFIndex)v16;
                        __int16 v37 = 2112;
                        uint64_t v38 = v24;
                        __int16 v39 = 2112;
                        CFStringRef v40 = v22;
                        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "LoadCustomVocabulary text: %@, textIPA: %@, prons: %@", buf, 0x20u);
                      }
                      CFArrayAppendValue(Mutable, v22);
                    }
                    if (v22) {
                      CFRelease(v22);
                    }
                  }
                }
              }
              CFArrayRef v7 = v34;
              if (v16)
              {
                if (CFArrayGetCount(Mutable) >= 1 && v32 <= 1)
                {
                  CFMutableStringRef v25 = CFStringCreateMutable(0, 0);
                  CFStringAppend(v25, v16);
                  CFStringAppend(v25, @"±");
                  RDUserProfile::addPhraseAndPronsToUserProfile(v33[3], v25, Mutable, kRDProfileNonTerminalUnknown[0], kRDProfileWordTagUnknownFirst);
                  if (v25) {
                    CFRelease(v25);
                  }
                }
                if (!v31)
                {
                  CFArrayRef v26 = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);
                  RDUserProfile::addPhraseAndPronsToUserProfile(v33[3], v16, v26, kRDProfileNonTerminalUnknown[0], kRDProfileWordTagUnknownFirst);
                  if (v26) {
                    CFRelease(v26);
                  }
                }
              }
              if (Mutable) {
                CFRelease(Mutable);
              }
            }
            CFRelease(v15);
          }
          ++v10;
        }
        while (v10 < CFArrayGetCount(v7));
      }
      CFRelease(MutableCopy);
      a2 = v30;
      this = v33;
    }
    CFRelease(v7);
  }
  id v27 = RDUserProfile::copyDataProfile((id **)this[3]);
  if (v27)
  {
    uint64_t v28 = v27;
    int64x2_t v29 = this[2];
    if (a2) {
      RDASRWSpeechRecognizerSetUserProfileData(v29, (uint64_t)v28);
    }
    else {
      RDASRWSpeechRecognizerUpdateUserProfileData(v29, (uint64_t)v28);
    }
    CFRelease(v28);
  }
}

void sub_10003488C(uint64_t a1, uint64_t a2)
{
  v3[0] = 0;
  v3[1] = v3;
  _OWORD v3[2] = 0x2000000000;
  v3[3] = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10003938C;
  block[3] = &unk_1000EF2F8;
  block[4] = v3;
  dispatch_async((dispatch_queue_t)gRDServerQueue, block);
  _Block_object_dispose(v3, 8);
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep RDQSREngine::RestartASREngine(CFTypeRef *this, const __CFString *a2)
{
  CFRelease(this[2]);
  this[2] = 0;
  *((unsigned char *)this + 82) = 0;
  CFStringRef v4 = RXOSLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138543362;
    CFStringRef v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Restarting ASR Engine(%{public}@)", (uint8_t *)&v6, 0xCu);
  }
  RDQSREngine::StartASREngine((uint64_t)this);
  return RDQSREngine::ResetRecognition((RDQSREngine *)this);
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep RDQSREngine::ResetRecognition(RDQSREngine *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 280);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 280));
  uint64_t v3 = *((void *)this + 34);
  CFStringRef v4 = RXOSLog();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Resetting recognition system....", buf, 2u);
    }
    int v6 = (const void *)*((void *)this + 29);
    if (v6)
    {
      CFRelease(v6);
      *((void *)this + 29) = 0;
    }
    CFStringRef v7 = (const void *)*((void *)this + 32);
    if (v7)
    {
      CFRelease(v7);
      *((void *)this + 32) = 0;
    }
    RDASRWSpeechRecognitionAudioBufferCancelRecognition(*((void *)this + 34));
    CFRelease(*((CFTypeRef *)this + 34));
    CFTypeID v8 = RXOSLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFArrayRef v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AudioBuffer released after recognition cancellation", v11, 2u);
    }
    *((void *)this + 34) = 0;
  }
  else if (v5)
  {
    *(_WORD *)CFIndex v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AudioBuffer was Nil", v10, 2u);
  }
  pthread_mutex_unlock(v2);
  RDQSREngine::SetupRecognition(this);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result = rd_time_util::now().__d_.__rep_;
  *((void *)this + 52) = result;
  return result;
}

void RDQSREngine::UseAudioSource(RDQSREngine *this, RDQSRSoundSource *a2)
{
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
    *((void *)this + 5) = a2;
    if (a2 && !*((unsigned char *)this + 48))
    {
      RDQSREngine::SetMicState(this, 1, "New Audio file");
    }
  }
  else
  {
    *((void *)this + 5) = a2;
    if (a2)
    {
      if (*((unsigned char *)this + 83))
      {
        RDQSREngine::EAREngine_SetMicState((uint64_t)this, 0);
        BOOL v5 = RXOSLog();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int v6 = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Mic is finally ON", v6, 2u);
        }
      }
    }
  }
}

void RDQSREngine::EAREngine_SetMicState(uint64_t a1, int a2)
{
  if (!*(void *)(a1 + 40))
  {
    uint64_t v4 = RXOSLog();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    BOOL v5 = "Set the sound source first before setting EAREngine_MicState";
    goto LABEL_25;
  }
  if (a2 != 1)
  {
    if (!a2)
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 280));
      if (!*(void *)(a1 + 272))
      {
        uint64_t v3 = RXOSLog();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Creating Audio buffer", buf, 2u);
        }
        RDQSREngine::SetupRecognition((RDQSREngine *)a1);
        *(std::chrono::steady_clock::time_point *)(a1 + 416) = rd_time_util::now();
      }
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 280));
      (***(void (****)(void))(a1 + 40))(*(void *)(a1 + 40));
      return;
    }
    uint64_t v4 = RXOSLog();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    BOOL v5 = "Unknown EAR Mic state";
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, v5, buf, 2u);
    return;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 280));
  if (*(void *)(a1 + 272))
  {
    int v6 = RXOSLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Ending Audio buffer", buf, 2u);
    }
    CFStringRef v7 = *(const void **)(a1 + 232);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 232) = 0;
    }
    CFTypeID v8 = *(const void **)(a1 + 256);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 256) = 0;
    }
    RDASRWSpeechRecognitionAudioBufferEndAudio(*(void *)(a1 + 272));
    CFRelease(*(CFTypeRef *)(a1 + 272));
    CFArrayRef v9 = RXOSLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "AudioBuffer released after mic went off", buf, 2u);
    }
    *(void *)(a1 + 272) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 280));
  (*(void (**)(void))(**(void **)(a1 + 40) + 8))(*(void *)(a1 + 40));
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100036124;
  block[3] = &unk_1000EF130;
  block[4] = a1;
  if (qword_1000FEB98 != -1) {
    dispatch_once(&qword_1000FEB98, block);
  }
}

void RDQSREngine::SetMicState(RDQSREngine *this, int a2, const char *a3)
{
  if (a2 && *((unsigned char *)this + 84) && *((unsigned char *)this + 83)) {
    RDQSREngine::SetMicState(this, 0, "Deferred toggle");
  }
  *((unsigned char *)this + 84) = 0;
  int v6 = *((unsigned __int8 *)this + 83);
  if (v6 != a2)
  {
    if (*((void *)this + 5)) {
      RDQSREngine::EAREngine_SetMicState((uint64_t)this, a2 ^ 1);
    }
    *((unsigned char *)this + 83) = a2;
  }
  CFStringRef v7 = RXOSLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (v6 == a2)
    {
      CFTypeID v8 = "was already";
    }
    else if (*((void *)this + 5))
    {
      CFTypeID v8 = "is now";
    }
    else
    {
      CFTypeID v8 = "eventually will be";
    }
    CFArrayRef v9 = "OFF";
    int v10 = 136315650;
    CFArrayRef v11 = a3;
    __int16 v12 = 2080;
    if (a2) {
      CFArrayRef v9 = "ON";
    }
    long long v13 = v8;
    __int16 v14 = 2080;
    CFMutableStringRef v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Mic [%s] %s %s\n", (uint8_t *)&v10, 0x20u);
  }
}

uint64_t RDQSREngine::UseLiveAudio(uint64_t this, RDAudioObject *a2, void (*a3)(RDQSRSoundSource *, const __int16 *, uint64_t))
{
  if (!*(void *)(this + 40))
  {
    *(unsigned char *)(this + 48) = 1;
    RDQSRSoundSource::CreateLiveSource(a2, (RDAudioObject *)RDQSREngine::RequestSamplesCallback, a3);
  }
  return this;
}

uint64_t RDQSREngine::RequestSamplesCallback(RDQSREngine *this, RDQSRSoundSource *a2, const __int16 *a3)
{
  return RDQSREngine::RequestSamples((RDQSREngine *)RDQSREngine::sInstance, a2, (char *)a2, (uint64_t)a3);
}

void RDQSREngine::UseFileAudio(RDQSREngine *this, const __CFURL *a2, uint64_t a3, void (*a4)(RDQSRSoundSource *, const __int16 *, uint64_t))
{
  *((unsigned char *)this + 48) = 0;
  RDQSRSoundSource::CreateFileSource(a2, (const __CFURL *)RDQSREngine::EndOfFileCallback, (void (*)(RDQSRSoundSource *))RDQSREngine::RequestSamplesCallback, a4);
}

void RDQSREngine::EndOfFileCallback(RDQSREngine *this, RDQSRSoundSource *a2)
{
}

uint64_t RDQSREngine::UseMixedAudio(uint64_t this, void (*a2)(RDQSRSoundSource *))
{
  if (!*(void *)(this + 40))
  {
    *(unsigned char *)(this + 48) = 1;
    RDQSRSoundSource::CreateMixedSource((RDQSRSoundSource *)RDQSREngine::RequestSamplesCallback, (void (*)(RDQSRSoundSource *, const __int16 *, uint64_t))RDQSREngine::EndOfAudioCallback, a2);
  }
  return this;
}

uint64_t RDQSREngine::EndOfAudioCallback(RDQSREngine *this, RDQSRSoundSource *a2)
{
  return RDQSREngine::EndOfAudio((RDQSREngine *)RDQSREngine::sInstance, a2);
}

void RDQSREngine::UseCannedAudio(RDQSREngine *this, RDQSRSoundSource *a2, void (*a3)(RDQSRSoundSource *, const __int16 *, uint64_t))
{
  *((unsigned char *)this + 48) = 0;
  RDQSRSoundSource::CreateCannedSource(a2, RDQSREngine::RequestSamplesCallback, a3);
}

void RDQSREngine::EndOfFile(RDQSREngine *this, RDQSRSoundSource *a2)
{
}

uint64_t RDQSREngine::EndOfAudio(RDQSREngine *this, RDQSRSoundSource *a2)
{
  uint64_t v3 = (pthread_mutex_t *)((char *)this + 280);
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 280));
  if (*((void *)this + 34))
  {
    if (RXAutomationModeResult() || RXAutomationModeSynthesis() || RXAutomationModeFileName())
    {
      BOOL v5 = RXOSLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ending audio", buf, 2u);
      }
      RDASRWSpeechRecognitionAudioBufferEndAudio(*((void *)this + 34));
      if (*((unsigned char *)this + 224))
      {
        if (RXAutomationModeSynthesis() || RXAutomationModeFileName())
        {
          uint64_t v6 = RXAutomationSimulateOpenMic();
          if ((v6 & 1) == 0)
          {
            CFStringRef v7 = RDQSRAudioFileLogger::audioFileLoggerQueue((RDQSRAudioFileLogger *)v6);
            block[0] = _NSConcreteStackBlock;
            block[1] = 0x40000000;
            block[2] = sub_10003538C;
            block[3] = &unk_1000EF060;
            block[4] = this;
            dispatch_async(v7, block);
          }
        }
        RDQSREngine::logAudioSamples(this, 0, 0);
        CFArrayRef v9 = RDQSRAudioFileLogger::audioFileLoggerQueue(v8);
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 0x40000000;
        v10[2] = sub_1000354A4;
        void v10[3] = &unk_1000EF080;
        v10[4] = this;
        dispatch_async(v9, v10);
      }
    }
    return pthread_mutex_unlock(v3);
  }
  return result;
}

uint64_t sub_10003538C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 85) = 0;
  return result;
}

void RDQSREngine::logAudioSamples(RDQSREngine *this, const __int16 *a2, uint64_t a3)
{
  uint64_t v6 = (RDQSRAudioFileLogger *)sub_100039774(&v13, a3);
  if (a3) {
    uint64_t v6 = (RDQSRAudioFileLogger *)memmove(v13, a2, 2 * a3);
  }
  CFStringRef v7 = RDQSRAudioFileLogger::audioFileLoggerQueue(v6);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1174405120;
  v8[2] = sub_100035728;
  void v8[3] = &unk_1000EF0A0;
  v8[4] = this;
  long long __p = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  sub_10003987C(&__p, v13, (uint64_t)v14, (v14 - (unsigned char *)v13) >> 1);
  uint64_t v12 = a3;
  dispatch_async(v7, v8);
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    __int16 v14 = v13;
    operator delete(v13);
  }
}

void sub_100035488(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(void *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000354A4()
{
}

void sub_10003553C()
{
}

uint64_t RDQSREngine::RequestSamples(RDQSREngine *this, RDQSRSoundSource *a2, char *a3, uint64_t a4)
{
  CFStringRef v7 = (pthread_mutex_t *)((char *)this + 280);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 280));
  if (*((void *)this + 34))
  {
    if (*((unsigned char *)this + 86))
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 344));
      RDQSRCircularBuffer<short>::write(*((void *)this + 27), a3, a4);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 344));
    }
    if (*((unsigned char *)this + 240) && *((void *)this + 29))
    {
      if ((uint64_t)(rd_time_util::durationInMilliSec(*((void *)this + 31)) / 1000.0) < 8)
      {
        if (*((unsigned char *)this + 241)) {
          RDASRWSpeechRecognitionAudioBufferAddAudioSamples(*((void **)this + 34), (uint64_t)a3, a4);
        }
      }
      else
      {
        *((unsigned char *)this + 241) = 0;
      }
      RDQSRCircularBuffer<short>::write(*((void *)this + 26), a3, a4);
      RDKeywordSpotterAddAudioSamples(*((void **)this + 29), (uint64_t)a3, a4);
    }
    else if (*((unsigned char *)this + 264) && (CFArrayRef v9 = (void *)*((void *)this + 32)) != 0)
    {
      if (*((unsigned char *)this + 265))
      {
        RDASRWSpeechRecognitionAudioBufferAddAudioSamples(*((void **)this + 34), (uint64_t)a3, a4);
        CFArrayRef v9 = (void *)*((void *)this + 32);
      }
      RDOSDAddAudioSamples(v9, (uint64_t)a3, a4);
      RDQSRCircularBuffer<short>::write(*((void *)this + 26), a3, a4);
    }
    else
    {
      RDASRWSpeechRecognitionAudioBufferAddAudioSamples(*((void **)this + 34), (uint64_t)a3, a4);
    }
    if (*((unsigned char *)this + 224))
    {
      if ((RXAutomationSimulateOpenMic() & 1) == 0) {
        *((unsigned char *)this + 85) = 1;
      }
      RDQSREngine::logAudioSamples(this, (const __int16 *)a3, a4);
    }
  }
  else
  {
    CFTypeID v8 = RXOSLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AudioBuffer is nil.", v11, 2u);
    }
  }
  return pthread_mutex_unlock(v7);
}

void *RDQSREngine::saveAudioSamples(RDQSREngine *this, char *a2, unsigned int a3)
{
  return RDQSRCircularBuffer<short>::write(*((void *)this + 26), a2, a3);
}

void *sub_100035728(uint64_t a1)
{
  uint64_t v2 = __chkstk_darwin(a1);
  uint64_t v3 = *(void *)(v2 + 32);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000FEB88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000FEB88))
  {
    qword_1000FEB80 = 0;
    __cxa_atexit((void (*)(void *))sub_100035928, &qword_1000FEB80, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000FEB88);
  }
  if (*(unsigned char *)(v3 + 85))
  {
    if (!qword_1000FEB80)
    {
      RDQSRAudioFileLogger::createCacheURLWithFilename(@"srcLogAudioFile.wav", v1);
      *(unsigned char *)(v3 + 225) = 1;
      operator new();
    }
    if (!word_1000FEB90) {
      RDQSRAudioFileLogger::addSamples((ExtAudioFileRef *)qword_1000FEB80, *(__int16 **)(v2 + 40), *(void *)(v2 + 64));
    }
  }
  else
  {
    if (qword_1000FEB80) {
      BOOL v4 = word_1000FEB90 == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      sub_10003982C((RDQSRAudioFileLogger **)&qword_1000FEB80, 0);
    }
  }
  return RDQSRCircularBuffer<short>::write(*(void *)(v3 + 208), *(char **)(v2 + 40), *(_DWORD *)(v2 + 64));
}

RDQSRAudioFileLogger **sub_100035928(RDQSRAudioFileLogger **a1)
{
  return a1;
}

void *sub_100035954(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return sub_10003987C(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 1);
}

void sub_100035970(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void RDQSREngine::removeLogAudioFile(RDQSREngine *this)
{
  if (*((unsigned char *)this + 225))
  {
    CFStringRef v1 = RDQSRAudioFileLogger::audioFileLoggerQueue(this);
    dispatch_sync(v1, &stru_1000EF0F0);
  }
}

void sub_1000359C8(id a1)
{
  CFURLRef CacheURLWithFilename = RDQSRAudioFileLogger::createCacheURLWithFilename(@"srcLogAudioFile.wav", v1);
  RDURL::RDURL((RDURL *)__p, CacheURLWithFilename, 1);
  if (v5 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  removefile((const char *)v3, 0, 2u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100035A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RDQSREngine::fullModelDir(RDQSREngine *this)
{
  return *((void *)this + 25);
}

id RDQSREngine::AddPeer(RDQSREngine *this, RDQSRPeer *a2)
{
  ++*((void *)this + 7);
  *((void *)a2 + 29) = *((void *)this + 19);
  *((void *)this + 19) = a2;
  id result = (id)*((void *)a2 + 1);
  if (result)
  {
    xpc_connection_get_audit_token();
    v3[0] = v3[2];
    v3[1] = v3[3];
    return RDAddSTActivityAttributionForAuditToken(v3);
  }
  return result;
}

id RDQSREngine::RemovePeer(RDQSREngine *this, RDQSRPeer *a2)
{
  uint64_t v4 = *((void *)this + 7) - 1;
  *((void *)this + 7) = v4;
  if (!v4)
  {
    uint64_t v5 = *((void *)this + 5);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
      *((void *)this + 5) = 0;
      *((unsigned char *)this + 83) = 0;
    }
  }
  CFTypeID v8 = (RDQSRPeer *)*((void *)this + 19);
  CFStringRef v7 = (void *)((char *)this + 152);
  uint64_t v6 = v8;
  if (v8)
  {
    if (v6 == a2)
    {
LABEL_9:
      *CFStringRef v7 = *((void *)a2 + 29);
    }
    else
    {
      while (1)
      {
        CFArrayRef v9 = v6;
        uint64_t v6 = (RDQSRPeer *)*((void *)v6 + 29);
        if (!v6) {
          break;
        }
        if (v6 == a2)
        {
          CFStringRef v7 = (void *)((char *)v9 + 232);
          goto LABEL_9;
        }
      }
    }
  }
  id result = (id)*((void *)a2 + 1);
  if (result)
  {
    xpc_connection_get_audit_token();
    v11[0] = v11[2];
    v11[1] = v11[3];
    return RDRemoveSTActivityAttributionForAuditToken(v11);
  }
  return result;
}

BOOL RDQSREngine::PeerExists(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 152);
  do
  {
    uint64_t v3 = *v2;
    uint64_t v2 = (void *)(*v2 + 232);
  }
  while (v3 != a2 && v3 != 0);
  return v3 != 0;
}

uint64_t RDQSREngine::AddGrammar(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void **)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 120);
  int v6 = *(unsigned __int16 *)(a1 + 80);
  *(_WORD *)(a1 + 80) = v6 + 1;
  unint64_t v7 = *(void *)(a1 + 128);
  if (*(void *)(a1 + 64) >= (unint64_t)((uint64_t)(v7 - v4) >> 4))
  {
    uint64_t v9 = (uint64_t)(v7 - v4) >> 4;
    uint64_t v11 = a1 + 136;
    unint64_t v12 = *(void *)(a1 + 136);
    if (v7 >= v12)
    {
      unint64_t v14 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60) {
        sub_100019424();
      }
      uint64_t v15 = v12 - v4;
      if (v15 >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        CFArrayRef v17 = (char *)sub_10001A898(v11, v16);
      }
      else {
        CFArrayRef v17 = 0;
      }
      __int16 v18 = &v17[16 * v9];
      uint64_t v19 = &v17[16 * v16];
      *(void *)__int16 v18 = a2;
      *((_WORD *)v18 + 4) = 256;
      *((_WORD *)v18 + 5) = v6;
      *((_DWORD *)v18 + 3) = 0;
      long long v13 = v18 + 16;
      BOOL v21 = *(char **)(a1 + 120);
      CFIndex v20 = *(char **)(a1 + 128);
      if (v20 != v21)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
          v18 -= 16;
          v20 -= 16;
        }
        while (v20 != v21);
        CFIndex v20 = (char *)*v5;
      }
      *(void *)(a1 + 120) = v18;
      *(void *)(a1 + 128) = v13;
      *(void *)(a1 + 136) = v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(void *)unint64_t v7 = a2;
      *(_WORD *)(v7 + 8) = 256;
      *(_WORD *)(v7 + 10) = v6;
      *(_DWORD *)(v7 + 12) = 0;
      long long v13 = (char *)(v7 + 16);
    }
    *(void *)(a1 + 128) = v13;
  }
  else
  {
    uint64_t v8 = v4 - 8;
    uint64_t v9 = -1;
    do
    {
      uint64_t v10 = *(void *)(v8 + 8);
      ++v9;
      v8 += 16;
    }
    while (v10);
    *(void *)(v8 - 8) = a2;
    *(_WORD *)uint64_t v8 = 256;
    *(_WORD *)(v8 + 2) = v6;
    *(_DWORD *)(v8 + 4) = 0;
  }
  ++*(void *)(a1 + 64);
  return v9 | (v6 << 16);
}

uint64_t RDQSREngine::SynthesizeText(RDQSREngine *this, const __CFString *a2)
{
  return (*(uint64_t (**)(void, const __CFString *, void))(**((void **)this + 5) + 24))(*((void *)this + 5), a2, *((void *)this + 20));
}

uint64_t RDQSREngine::RecognizeAudioFile(RDQSREngine *this, const __CFString *a2)
{
  return (*(uint64_t (**)(void, const __CFString *))(**((void **)this + 5) + 32))(*((void *)this + 5), a2);
}

void RDQSREngine::RecognizeText(RDQSREngine *this, CFTypeRef cf)
{
  CFRetain(cf);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  _DWORD v4[2] = sub_100035DF4;
  v4[3] = &unk_1000EF110;
  void v4[4] = this;
  void v4[5] = cf;
  dispatch_async((dispatch_queue_t)gRDServerQueue, v4);
}

void sub_100035DF4(uint64_t a1)
{
}

void RDQSREngine::DidRecognizeFinalResults(RDQSREngine *this, const __CFString *a2)
{
}

void sub_100035EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1000C2DA4(a10);
  }
  _Unwind_Resume(exception_object);
}

id RDQSREngine::SetupRecognition(RDQSREngine *this)
{
  v11[0] = this;
  v11[1] = RDQSREngine::DisposeContextCallback;
  v11[2] = RDQSREngine::DidRecognizePartialResultTokensCallback;
  void v11[3] = RDQSREngine::DidFinishRecognitionWithErrorCallback;
  _OWORD v11[4] = 0;
  v11[5] = RDQSREngine::DidRecognizeFinalResultsWithPreITNCallback;
  void v11[6] = RDQSREngine::DidGetUtteranceBoundaryCallback;
  v11[7] = RDQSREngine::DidProcessAudioDurationCallback;
  if (*((unsigned char *)this + 448) && *((unsigned char *)this + 449) && (uint64_t v2 = *((void *)this + 19)) != 0)
  {
    CFStringRef v3 = @"DictationCC";
    while (!*(unsigned char *)(v2 + 207))
    {
      uint64_t v2 = *(void *)(v2 + 232);
      if (!v2) {
        goto LABEL_9;
      }
    }
    CFStringRef v3 = @"SpellCC";
  }
  else
  {
    CFStringRef v3 = @"DictationCC";
  }
LABEL_9:
  *((void *)this + 55) = v3;
  if (*((unsigned char *)this + 240))
  {
    *((unsigned char *)this + 241) = 0;
    *(void *)long long buf = this;
    uint64_t v9 = RDQSREngine::KeywordSpottedCallback;
    uint64_t v10 = RDQSREngine::KeywordSpotterDidStopCallback;
    __chkstk_darwin(this);
    v7[0] = @"wake_up w EY k <w> uh p <w>";
    v7[1] = @"show_siri sh OH <w> s EE r ee <w>";
    _OWORD v7[2] = @"open_siri OH p un <w> s EE r ee <w>";
    v7[3] = @"start_listening s t AH r t <w> l IH s un ih ng <w>";
    CFArrayRef v4 = CFArrayCreate(kCFAllocatorDefault, v7, 4, &kCFTypeArrayCallBacks);
    *((void *)this + 29) = RDKeywordSpotterInit((uint64_t)v4, (uint64_t)buf);
  }
  else if (*((unsigned char *)this + 264))
  {
    *(void *)long long buf = this;
    uint64_t v9 = RDQSREngine::SpeechStartedCallback;
    uint64_t v10 = RDQSREngine::SpeechEndedCallback;
    *((void *)this + 32) = RDOSDInit((uint64_t)buf);
  }
  id result = RDASRWSpeechRecognizerCreateRecognitionBuffer(*((void **)this + 2), *((void *)this + 20), *((void *)this + 55), 16000, (uint64_t)v11);
  *((void *)this + 34) = result;
  if (!result)
  {
    int v6 = RXOSLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Could not initialize audio buffer", buf, 2u);
    }
    sub_100037378(@"Could not initialize audio buffer");
  }
  return result;
}

void sub_100036124(uint64_t a1)
{
}

void RDQSREngine::RemoveGrammar(RDQSREngine *this, unsigned __int16 a2)
{
  uint64_t v2 = *((void *)this + 15) + 16 * a2;
  *(void *)uint64_t v2 = 0;
  int v3 = *(unsigned __int8 *)(v2 + 8);
  int v4 = *(unsigned __int8 *)(v2 + 9);
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = *((void *)this + 9) - 1;
    *((void *)this + 9) = v6;
    if (!v6) {
      RDQSREngine::SetMicState(this, 0, "Last live grammar removed");
    }
  }
}

uint64_t RDQSREngine::FindGrammar(RDQSREngine *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 15);
  if ((unsigned __int16)a2 < (unint64_t)((*((void *)this + 16) - v2) >> 4)
    && *(unsigned __int16 *)(v2 + 16 * (unsigned __int16)a2 + 10) == a2 >> 16)
  {
    return *(void *)(v2 + 16 * (unsigned __int16)a2);
  }
  else
  {
    return 0;
  }
}

RDQSREngine *RDQSREngine::GrammarIsLive(RDQSREngine *this, unsigned __int16 a2, int a3)
{
  uint64_t v3 = *((void *)this + 15);
  uint64_t v4 = v3 + 16 * a2;
  int v6 = *(unsigned __int8 *)(v4 + 8);
  BOOL v5 = (unsigned char *)(v4 + 8);
  if (v6 != a3)
  {
    unsigned char *v5 = a3;
    if (*(unsigned char *)(v3 + 16 * a2 + 9))
    {
      uint64_t v7 = *((void *)this + 9);
      if (a3)
      {
        *((void *)this + 9) = v7 + 1;
        if (!v7)
        {
          uint64_t v8 = "First grammar went live";
          BOOL v9 = 1;
          return (RDQSREngine *)RDQSREngine::SetMicState(this, v9, v8);
        }
      }
      else
      {
        uint64_t v10 = v7 - 1;
        *((void *)this + 9) = v10;
        if (!v10)
        {
          uint64_t v8 = "Last grammar went dead";
          BOOL v9 = 0;
          return (RDQSREngine *)RDQSREngine::SetMicState(this, v9, v8);
        }
      }
    }
  }
  return this;
}

void RDQSREngine::CanListen(RDQSREngine *this, RDQSRPeer *a2, char a3)
{
  uint64_t v5 = *((void *)this + 15);
  uint64_t v6 = *((void *)this + 16);
  if (a3)
  {
    if (v6 != v5)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *(void *)(v5 + v7);
        if (v9)
        {
          if (*(RDQSRPeer **)(v9 + 24) == a2)
          {
            uint64_t v10 = v5 + v7;
            if (!*(unsigned char *)(v5 + v7 + 9))
            {
              *(unsigned char *)(v10 + 9) = 1;
              if (*(unsigned char *)(v10 + 8))
              {
                uint64_t v11 = *((void *)this + 9);
                *((void *)this + 9) = v11 + 1;
                if (!v11)
                {
                  RDQSREngine::SetMicState(this, 1, "First grammar is listening");
                  uint64_t v5 = *((void *)this + 15);
                  uint64_t v6 = *((void *)this + 16);
                }
              }
            }
          }
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < (v6 - v5) >> 4);
    }
  }
  else
  {
    uint64_t v12 = v6 - v5;
    if (v6 != v5)
    {
      uint64_t v13 = 0;
      char v14 = 0;
      unint64_t v15 = v12 >> 4;
      if (v15 <= 1) {
        unint64_t v15 = 1;
      }
      uint64_t v16 = -(uint64_t)v15;
      uint64_t v17 = v5 + 9;
LABEL_16:
      __int16 v18 = (unsigned char *)(v17 + 16 * v13++);
      do
      {
        uint64_t v19 = *(void *)(v18 - 9);
        if (v19)
        {
          if (*(RDQSRPeer **)(v19 + 24) == a2)
          {
            if (*v18)
            {
              *__int16 v18 = 0;
              if (*(v18 - 1))
              {
                --*((void *)this + 9);
                char v14 = 1;
                if (v16 + v13) {
                  goto LABEL_16;
                }
                goto LABEL_26;
              }
            }
          }
        }
        ++v13;
        v18 += 16;
      }
      while (v16 + v13 != 1);
      if ((v14 & 1) == 0) {
        return;
      }
LABEL_26:
      *((unsigned char *)this + 84) = 1;
      CFIndex v20 = *(void (**)(void))(**((void **)this + 5) + 16);
      v20();
    }
  }
}

void RDQSREngine::FilterProfanity(void **this, int a2)
{
  if (!a2)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
    RDASRWSpeechRecognizerSetRecognitionReplacements(this[2], Mutable);
    CFRelease(Mutable);
    uint64_t v4 = RXOSLog();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)uint64_t v10 = 0;
    uint64_t v5 = "No profanity filter set";
    goto LABEL_9;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10003652C;
  block[3] = &unk_1000EF150;
  block[4] = this;
  if (qword_1000FEBA0 != -1) {
    dispatch_once(&qword_1000FEBA0, block);
  }
  CFDictionaryRef v3 = (const __CFDictionary *)this[54];
  if (v3)
  {
    RDASRWSpeechRecognizerSetRecognitionReplacements(this[2], v3);
    uint64_t v4 = RXOSLog();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)uint64_t v10 = 0;
    uint64_t v5 = "Successfully filtering profanity";
LABEL_9:
    uint64_t v7 = v4;
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v7, v8, v5, v10, 2u);
    return;
  }
  uint64_t v9 = RXOSLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v10 = 0;
    uint64_t v5 = "Error in filtering profanity";
    uint64_t v7 = v9;
    os_log_type_t v8 = OS_LOG_TYPE_ERROR;
    goto LABEL_10;
  }
}

void sub_10003652C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFStringRef v2 = *(const __CFString **)(v1 + 424);
  if (v2)
  {
    *(void *)(v1 + 432) = RDQSRReplacementDictationaryWithEtiquettes(v2);
  }
  else
  {
    CFDictionaryRef v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error in reading etiquettes file", v4, 2u);
    }
  }
}

void RDQSREngine::BuildCombinedGrammar(RDQSREngine *this)
{
  *((unsigned char *)this + 87) = 1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100036628;
  block[3] = &unk_1000EF170;
  block[4] = this;
  dispatch_async((dispatch_queue_t)gRDServerQueue, block);
}

void sub_100036628(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 87))
  {
    *(unsigned char *)(v1 + 87) = 0;
    *(void *)(v1 + 184) = 1;
    sub_100009CF0(&v20, "");
    uint64_t v2 = *(void *)(v1 + 120);
    if (*(void *)(v1 + 128) != v2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(v2 + v3);
        if (v5)
        {
          BOOL v6 = !*(void *)(v5 + 32) || *(unsigned char *)(v2 + v3 + 8) == 0;
          if (!v6 && *(unsigned char *)(v2 + v3 + 9) != 0)
          {
            unint64_t v8 = *(void *)(v1 + 184);
            if (v8 <= *(void *)(v5 + 56)) {
              unint64_t v8 = *(void *)(v5 + 56);
            }
            *(void *)(v1 + 184) = v8;
            uint64_t v9 = *(void **)(v5 + 64);
            if (v9)
            {
              string = (char *)xpc_dictionary_get_string(v9, kRDKeyCategoryID);
              sub_100009CF0(&__str, string);
              if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v20.__r_.__value_.__l.__size_;
              }
              if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v12 = &v20;
              }
              else {
                uint64_t v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
              }
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v13 = __str.__r_.__value_.__l.__size_;
              }
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_str = &__str;
              }
              else {
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              if (v13 >= size) {
                size_t v15 = size;
              }
              else {
                size_t v15 = v13;
              }
              if (memcmp(v12, p_str, v15) || v13 != size)
              {
                std::string::operator=(&v20, &__str);
                RDQSRGrammarBuilder::buildCategoryFst();
              }
              *(void *)(*(void *)(v2 + v3) + 64) = 0;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
            }
            else if (*(unsigned char *)(v5 + 48))
            {
              uint64_t v17 = RXSignpostLog();
              if (os_signpost_enabled(v17))
              {
                LOWORD(__str.__r_.__value_.__l.__data_) = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Grammar", "Building Grammar", (uint8_t *)&__str, 2u);
              }
              __int16 v18 = RXOSLog();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                std::string::size_type v19 = *(void *)(*(void *)(v2 + v3) + 16);
                LODWORD(__str.__r_.__value_.__l.__data_) = 134217984;
                *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v19;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Building Grammar %zu", (uint8_t *)&__str, 0xCu);
              }
              operator new();
            }
          }
        }
        ++v4;
        uint64_t v2 = *(void *)(v1 + 120);
        v3 += 16;
      }
      while (v4 < (*(void *)(v1 + 128) - v2) >> 4);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100036C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  a20 = &a24;
  sub_1000316BC(&a20);
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void RDQSREngine::AddTemplatesToUserProfile(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v20 = 0;
    do
    {
      if (*(__CFString **)v2 == kRDProfileNonTerminalInline[0])
      {
        unint64_t v4 = *(id ***)(a1 + 32);
        RDUserProfile::removeAllWords(v4);
        LOBYTE(v20) = 1;
      }
      else
      {
        unint64_t v4 = *(id ***)(a1 + 24);
        BYTE4(v20) = 1;
      }
      BOOL v6 = *(uint64_t **)(v2 + 16);
      uint64_t v5 = *(uint64_t **)(v2 + 24);
      while (v6 != v5)
      {
        CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
        uint64_t v8 = *v6;
        uint64_t v9 = v6[1];
        while (v8 != v9)
        {
          uint64_t v10 = (const char *)v8;
          if (*(char *)(v8 + 23) < 0) {
            uint64_t v10 = *(const char **)v8;
          }
          CFStringRef v11 = CFStringCreateWithCString(0, v10, 0x8000100u);
          if (v11)
          {
            CFStringRef v12 = v11;
            CFArrayAppendValue(Mutable, v11);
            CFRelease(v12);
          }
          v8 += 48;
        }
        if (Mutable)
        {
          RDUserProfile::addPhraseToUserProfile((RDUserProfile *)v4, Mutable, *(const __CFString **)v2, *(const __CFString **)(v2 + 8));
          CFRelease(Mutable);
        }
        v6 += 3;
      }
      v2 += 40;
    }
    while (v2 != v3);
    if (*a2 != a2[1])
    {
      if ((v20 & 0x100000000) != 0)
      {
        id v13 = RDUserProfile::copyDataProfile(*(id ***)(a1 + 24));
        if (v13)
        {
          char v14 = v13;
          size_t v15 = RXOSLog();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Updating AOT LME", buf, 2u);
          }
          RDASRWSpeechRecognizerUpdateUserProfileData(*(void **)(a1 + 16), (uint64_t)v14);
          CFRelease(v14);
        }
      }
      if (v20)
      {
        id v16 = RDUserProfile::copyDataProfile(*(id ***)(a1 + 32));
        if (v16)
        {
          uint64_t v17 = v16;
          __int16 v18 = RXOSLog();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)CFStringRef v22 = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Updating Inline LME", v22, 2u);
          }
          RDASRWSpeechRecognizerUpdateJitProfileData(*(void **)(a1 + 16), (uint64_t)v17);
          CFRelease(v17);
        }
      }
    }
  }
}

void RDQSREngine::DidRecognizePartialResultTokensCallback(RDQSREngine *this, CFTypeRef cf, const __CFArray *a3)
{
  if (cf) {
    CFRetain(cf);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _OWORD v5[2] = sub_10003701C;
  v5[3] = &unk_1000EF190;
  v5[4] = this;
  v5[5] = cf;
  dispatch_async((dispatch_queue_t)gRDServerQueue, v5);
}

void sub_10003701C(uint64_t a1)
{
}

void RDQSREngine::DidRecognizePartialResultTokens(RDQSREngine *this, const __CFArray *a2)
{
  if (*((unsigned char *)this + 88))
  {
    RDQSREngine::BeginUtt(this);
    *((unsigned char *)this + 88) = 0;
  }
  if (RXLogServerResults())
  {
    int v4 = RXVeryVerbose();
    if (a2)
    {
      if (v4)
      {
        if (CFArrayGetCount(a2) >= 1)
        {
          CFIndex v5 = 0;
          do
          {
            CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v5);
            if (ValueAtIndex)
            {
              CFStringRef TokenName = (const __CFString *)RDASRWSpeechRecognitionTokenGetTokenName(ValueAtIndex);
              RDString::RDString((RDString *)__p, TokenName, 0);
              uint64_t v8 = RXOSLog();
              if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
              {
                if (v12 >= 0) {
                  uint64_t v9 = __p;
                }
                else {
                  uint64_t v9 = (void **)__p[0];
                }
                *(_DWORD *)long long buf = 136315138;
                char v14 = v9;
                _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Partial Token: %s\n", buf, 0xCu);
              }
              if (v12 < 0) {
                operator delete(__p[0]);
              }
            }
            ++v5;
          }
          while (v5 < CFArrayGetCount(a2));
        }
        uint64_t v10 = RXOSLog();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "------ ", (uint8_t *)__p, 2u);
        }
      }
    }
  }
  if (a2) {
    CFRelease(a2);
  }
}

void sub_1000371C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RDQSREngine::DidFinishRecognitionWithErrorCallback(RDQSREngine *this, CFErrorRef err, __CFError *a3)
{
  if (err)
  {
    CFStringRef Domain = CFErrorGetDomain(err);
    if (Domain)
    {
      CFStringRef v6 = Domain;
      if (CFEqual(Domain, @"EARErrorDomain") && !CFErrorGetCode(err))
      {
        uint64_t v7 = RXOSLog();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "EAR recognition failed with error that can cause a hang", buf, 2u);
        }
        sub_100037378(@"EAR recognition failed with error that can cause a hang");
      }
      if (CFEqual(v6, @"SpeechAPIErrorDomain") && !CFErrorGetCode(err))
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000;
        block[2] = sub_1000373F0;
        block[3] = &unk_1000EF1B0;
        block[4] = this;
        dispatch_async((dispatch_queue_t)gRDServerQueue, block);
      }
    }
    CFRetain(err);
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_100037400;
  void v8[3] = &unk_1000EF1D0;
  v8[4] = this;
  void v8[5] = err;
  dispatch_async((dispatch_queue_t)gRDServerQueue, v8);
}

void sub_100037378(uint64_t a1)
{
  uint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v3 = 138543362;
    uint64_t v4 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Terminating to restart EAR (%{public}@)", (uint8_t *)&v3, 0xCu);
  }
  exit(0);
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep sub_1000373F0(uint64_t a1)
{
  return RDQSREngine::RestartASREngine(*(CFTypeRef **)(a1 + 32), @"Exception thrown in recognition");
}

void sub_100037400(uint64_t a1)
{
}

void RDQSREngine::DidFinishRecognitionWithError(RDQSREngine *this, CFStringRef cf)
{
  if (cf) {
    cf = CFCopyDescription(cf);
  }
  RDString::RDString((RDString *)__p, cf, 1);
  int v3 = RXOSLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = __p;
    if (v7 < 0) {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "DidFinishRecognitionWithError: %s\n", buf, 0xCu);
  }
  *((unsigned char *)this + 88) = 1;
  if (!*((unsigned char *)this + 48))
  {
    for (CFIndex i = (RDQSRPeer *)*((void *)this + 19); i; CFIndex i = (RDQSRPeer *)*((void *)i + 29))
      RDQSRPeer::ReachedEndofAudioFile(i);
  }
  RDQSREngine::EndUtt(this);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100037518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RDQSREngine::DidRecognizeFinalResultsWithPreITNCallback(RDQSREngine *this, CFTypeRef cf, CFTypeRef a3, CFTypeRef a4, CFTypeRef a5, CFTypeRef a6, CFTypeRef a7, const __CFString *a8)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3) {
    CFRetain(a3);
  }
  if (a4) {
    CFRetain(a4);
  }
  if (a5) {
    CFRetain(a5);
  }
  if (a6) {
    CFRetain(a6);
  }
  if (a7) {
    CFRetain(a7);
  }
  size_t v15 = RXOSLog();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Got the result", buf, 2u);
  }
  id v16 = RXSignpostLog();
  if (os_signpost_enabled(v16))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Got the result", "", buf, 2u);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000376D4;
  block[3] = &unk_1000EF1F0;
  block[4] = this;
  void block[5] = cf;
  void block[6] = a3;
  block[7] = a4;
  block[8] = a7;
  block[9] = a5;
  block[10] = a6;
  dispatch_async((dispatch_queue_t)gRDServerQueue, block);
}

void sub_1000376D4(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
}

void RDQSREngine::DidRecognizeFinalResults(RDQSREngine *this, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, const __CFString *a5)
{
  if (*((unsigned char *)this + 240)) {
    *((unsigned char *)this + 241) = 0;
  }
  if (RXAutomationModeResult() || RXAutomationModeSynthesis() || RXAutomationModeFileName()) {
    RDQSREngine::ResetRecognition(this);
  }
  RDQSRResultMatcher::Create();
}

void sub_10003783C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1000C2DA4(a10);
  }
  _Unwind_Resume(exception_object);
}

void RDQSREngine::DidGetUtteranceBoundaryCallback(RDQSREngine *this, void *a2, uint64_t a3, uint64_t a4)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  _DWORD v4[2] = sub_1000378D8;
  v4[3] = &unk_1000EF210;
  void v4[4] = this;
  void v4[5] = a2;
  void v4[6] = a3;
  v4[7] = a4;
  dispatch_async((dispatch_queue_t)gRDServerQueue, v4);
}

__n128 sub_1000378D8(uint64_t a1)
{
  uint64_t v1 = *(__n128 **)(a1 + 32);
  unint64_t v2 = *(void *)(a1 + 56);
  __n128 result = *(__n128 *)(a1 + 40);
  v1[6] = result;
  v1[7].n128_u64[0] = v2;
  return result;
}

void *RDQSREngine::DidGetUtteranceBoundary(void *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  this[12] = a2;
  this[13] = a3;
  this[14] = a4;
  return this;
}

void RDQSREngine::DidRecognizeFinalResultsCallback(RDQSREngine *this, CFTypeRef cf, CFTypeRef a3, CFTypeRef a4, CFTypeRef a5, const __CFString *a6)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3) {
    CFRetain(a3);
  }
  if (a4) {
    CFRetain(a4);
  }
  if (a5) {
    CFRetain(a5);
  }
  CFStringRef v11 = RXOSLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Got the result", buf, 2u);
  }
  char v12 = RXSignpostLog();
  if (os_signpost_enabled(v12))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Got the result", "", buf, 2u);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100037A60;
  block[3] = &unk_1000EF230;
  block[4] = this;
  void block[5] = cf;
  void block[6] = a3;
  block[7] = a4;
  block[8] = a5;
  dispatch_async((dispatch_queue_t)gRDServerQueue, block);
}

void sub_100037A60(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
}

void RDQSREngine::DidProcessAudioDurationCallback(RDQSREngine *this, void *a2, double a3)
{
  if (!RXAutomationModeResult() && !RXAutomationModeSynthesis() && !RXAutomationModeFileName())
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 0x40000000;
    _OWORD v5[2] = sub_100037B84;
    v5[3] = &unk_1000EF250;
    v5[4] = this;
    *(double *)&v5[5] = a3;
    dispatch_async((dispatch_queue_t)gRDServerQueue, v5);
  }
}

void sub_100037B84(uint64_t a1)
{
}

void RDQSREngine::DidProcessAudioDuration(RDQSREngine *this, double a2)
{
  double v4 = rd_time_util::durationInMilliSec(*((void *)this + 52));
  LOBYTE(v5) = *((unsigned char *)this + 145);
  if ((double)((uint64_t)v4 / 1000) - a2 > (double)v5)
  {
    if ((*((unsigned __int8 *)this + 144) | 2) != 3) {
      RDQSREngine::ResetRecognition(this);
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.SpeechRecognitionCore.RecognitionReset", 0, 0, 0);
  }
}

void RDQSREngine::BeginUtt(RDQSREngine *this)
{
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BeginUtt\n", v4, 2u);
  }
  *((unsigned char *)this + 85) = 1;
  *((void *)this + 22) = dispatch_time(0, 0);
  for (CFIndex i = (RDQSRPeer *)*((void *)this + 19); i; CFIndex i = (RDQSRPeer *)*((void *)i + 29))
    RDQSRPeer::BeginUtt(i);
}

void RDQSREngine::EndUtt(RDQSREngine *this)
{
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 9);
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "EndUtt (%u live)\n", (uint8_t *)v6, 8u);
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 280));
  uint64_t v4 = *((void *)this + 34);
  if (v4) {
    RDASRWSpeechRecognitionAudioBufferNewUtteranceBegins(v4);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 280));
  *((unsigned char *)this + 85) = 0;
  for (CFIndex i = (RDQSRPeer *)*((void *)this + 19); i; CFIndex i = (RDQSRPeer *)*((void *)i + 29))
    RDQSRPeer::EndUtt(i);
  if (*((unsigned char *)this + 84)) {
    RDQSREngine::SetMicState(this, 0, "Deferred off");
  }
}

void RDQSREngine::MatchResult(RDQSREngine *this, RDQSRResultMatcher *a2)
{
  uint64_t v3 = RXSignpostLog();
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Result", "Started Result processing", buf, 2u);
  }
  *(void *)long long buf = 0;
  char v66 = 0;
  char v67 = 0;
  long long __p = 0;
  long long v63 = 0;
  size_t v64 = 0;
  uint64_t v4 = (unsigned char *)*((void *)this + 15);
  for (CFIndex i = (unsigned char *)*((void *)this + 16); v4 != i; v4 += 16)
  {
    uint64_t v6 = *(void *)v4;
    if (*(void *)v4 && *(void *)(v6 + 32))
    {
      BOOL v7 = !*(void *)(v6 + 40) || v4[8] == 0;
      if (!v7 && v4[9] != 0)
      {
        uint64_t v9 = v66;
        if (v66 >= v67)
        {
          uint64_t v11 = ((uint64_t)v66 - *(void *)buf) >> 3;
          if ((unint64_t)(v11 + 1) >> 61) {
            sub_100019424();
          }
          unint64_t v12 = ((uint64_t)v67 - *(void *)buf) >> 2;
          if (v12 <= v11 + 1) {
            unint64_t v12 = v11 + 1;
          }
          if ((unint64_t)v67 - *(void *)buf >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13)
          {
            char v14 = (char *)sub_10001943C((uint64_t)&v67, v13);
            uint64_t v6 = *(void *)v4;
          }
          else
          {
            char v14 = 0;
          }
          size_t v15 = &v14[8 * v11];
          *(void *)size_t v15 = v6;
          uint64_t v10 = (uint64_t *)(v15 + 8);
          uint64_t v17 = *(uint64_t **)buf;
          id v16 = v66;
          if (v66 != *(uint64_t **)buf)
          {
            do
            {
              uint64_t v18 = *--v16;
              *((void *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            id v16 = *(uint64_t **)buf;
          }
          *(void *)long long buf = v15;
          char v66 = v10;
          char v67 = (uint64_t *)&v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          uint64_t *v66 = v6;
          uint64_t v10 = v9 + 1;
        }
        std::string::size_type v19 = this;
        char v66 = v10;
        uint64_t v21 = *(void *)(*(void *)v4 + 32);
        uint64_t v20 = *(void *)(*(void *)v4 + 40);
        uint64_t v22 = *(void *)(*(void *)v4 + 24) + 40;
        char v23 = *(unsigned char *)(*(void *)v4 + 50);
        char v24 = *(unsigned char *)(*(void *)v4 + 51);
        char v25 = *(unsigned char *)(*(void *)v4 + 52);
        CFArrayRef v26 = v63;
        if (v63 >= v64)
        {
          uint64_t v28 = (v63 - (unsigned char *)__p) >> 5;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59) {
            sub_100019424();
          }
          uint64_t v30 = v64 - (unsigned char *)__p;
          if ((v64 - (unsigned char *)__p) >> 4 > v29) {
            unint64_t v29 = v30 >> 4;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31) {
            unint64_t v32 = (char *)sub_10002BDBC((uint64_t)&v64, v31);
          }
          else {
            unint64_t v32 = 0;
          }
          long long v33 = &v32[32 * v28];
          *(void *)long long v33 = v20;
          *((void *)v33 + 1) = v21;
          *((void *)v33 + 2) = v22;
          v33[24] = v23;
          v33[25] = v24;
          v33[26] = v25;
          int v35 = (char *)__p;
          CFArrayRef v34 = v63;
          CFIndex v36 = v33;
          if (v63 != __p)
          {
            do
            {
              long long v37 = *((_OWORD *)v34 - 2);
              *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
              *((_OWORD *)v36 - 2) = v37;
              v36 -= 32;
              v34 -= 32;
            }
            while (v34 != v35);
            CFArrayRef v34 = v35;
          }
          id v27 = v33 + 32;
          long long __p = v36;
          long long v63 = v33 + 32;
          size_t v64 = &v32[32 * v31];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(void *)long long v63 = v20;
          *((void *)v26 + 1) = v21;
          *((void *)v26 + 2) = v22;
          v26[24] = v23;
          v26[25] = v24;
          id v27 = v26 + 32;
          v26[26] = v25;
        }
        long long v63 = v27;
        this = v19;
      }
    }
  }
  (**(void (***)(RDQSRResultObject **__return_ptr))a2)(&v60);
  unint64_t v38 = 126 - 2 * __clz((v61 - v60) >> 4);
  if (v61 == v60) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = v38;
  }
  sub_100039974(v60, v61, v39, 1);
  CFStringRef v40 = v60;
  if (v60 != v61)
  {
    char v41 = 0;
    while (1)
    {
      int GrammarIndex = RDQSRResultObject::getGrammarIndex(v40);
      if (RDQSRResultObject::getResultModel(v40))
      {
        ResultModel = (void *)RDQSRResultObject::getResultModel(v40);
        xpc_object_t v44 = xpc_retain(ResultModel);
        if (GrammarIndex != -1)
        {
          uint64_t v45 = GrammarIndex;
          uint64_t v46 = *(void *)(*(void *)buf + 8 * GrammarIndex);
          if (v44)
          {
            RDQSRPeer::EndPhrase(*(uint64_t ***)(v46 + 24), 0, v46, v44);
            *((void *)this + 57) = (*(uint64_t (**)(RDQSRResultMatcher *))(*(void *)a2 + 8))(a2);
            uint64_t v47 = RXOSLog();
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v48 = *(void *)(v46 + 16);
              *(_DWORD *)BOOL v68 = 134217984;
              *(void *)&v68[4] = v48;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Sending message to client %zu", v68, 0xCu);
            }
            char v41 = 1;
          }
          else
          {
LABEL_60:
            RDQSRPeer::ServerResponse(*(void *)(v46 + 24), 0, v46);
            uint64_t v49 = RXOSLog();
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)BOOL v68 = 0;
              _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Even with the winner, we have no response - sending null to client\n", v68, 2u);
            }
          }
          uint64_t v50 = *(void *)buf + 8 * v45;
          int64_t v51 = (char *)v66 - v50 - 8;
          if (v66 != (uint64_t *)(v50 + 8)) {
            memmove((void *)(*(void *)buf + 8 * v45), (const void *)(v50 + 8), (size_t)v66 - v50 - 8);
          }
          char v66 = (uint64_t *)&v51[v50];
        }
      }
      else if (GrammarIndex != -1)
      {
        uint64_t v45 = GrammarIndex;
        uint64_t v46 = *(void *)(*(void *)buf + 8 * GrammarIndex);
        goto LABEL_60;
      }
      CFStringRef v40 = (RDQSRResultObject *)((char *)v40 + 16);
      if (v40 == v61) {
        goto LABEL_68;
      }
    }
  }
  char v41 = 0;
LABEL_68:
  uint64_t v52 = *(uint64_t **)buf;
  for (unint64_t j = v66; v52 != j; ++v52)
  {
    uint64_t v54 = *v52;
    RDQSRPeer::ServerResponse(*(void *)(*v52 + 24), 0, *v52);
    long long v55 = RXOSLog();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      uint64_t v56 = *(void *)(v54 + 16);
      *(_DWORD *)BOOL v68 = 134217984;
      *(void *)&v68[4] = v56;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "Sending null to client %zu", v68, 0xCu);
    }
  }
  int v57 = RXSignpostLog();
  if (os_signpost_enabled(v57))
  {
    *(_WORD *)BOOL v68 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v57, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Result", "Done Result processing", v68, 2u);
  }
  if (v41)
  {
    if (RDQSREngine::ShouldDonateSpeech(this)) {
      RDQSREngine::DonateSpeech(this);
    }
  }
  else
  {
    int v58 = RXOSLog();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "EndPhrase did not match any grammars\n", v68, 2u);
    }
  }
  *((unsigned char *)this + 88) = 1;
  RDQSREngine::EndUtt(this);
  *(void *)BOOL v68 = &v60;
  sub_10001A74C((void ***)v68);
  if (__p)
  {
    long long v63 = (char *)__p;
    operator delete(__p);
  }
  if (*(void *)buf)
  {
    char v66 = *(uint64_t **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_10003842C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  *(void *)(v22 - 112) = &a15;
  sub_10001A74C((void ***)(v22 - 112));
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void RDQSREngine::SpeechStartedCallback(RDQSREngine *this, void *a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100038520;
  block[3] = &unk_1000EF270;
  block[4] = this;
  dispatch_async((dispatch_queue_t)gRDServerQueue, block);
}

uint64_t sub_100038520(uint64_t a1)
{
  return RDQSREngine::SpeechStarted(*(RDQSREngine **)(a1 + 32));
}

uint64_t RDQSREngine::SpeechStarted(RDQSREngine *this)
{
  uint64_t v1 = __chkstk_darwin(this);
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "speech started", v6, 2u);
  }
  *(std::chrono::steady_clock::time_point *)(v1 + 416) = rd_time_util::now();
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 280));
  do
  {
    unint64_t v3 = RDQSRCircularBuffer<short>::read(*(void *)(v1 + 208), 0x800uLL, (char *)v6);
    uint64_t v4 = *(void **)(v1 + 272);
    if (v4) {
      RDASRWSpeechRecognitionAudioBufferAddAudioSamples(v4, (uint64_t)v6, v3);
    }
  }
  while (v3 > 0x7FF);
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v1 + 280));
  *(unsigned char *)(v1 + 265) = 1;
  return result;
}

void RDQSREngine::SpeechEndedCallback(RDQSREngine *this, void *a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000386AC;
  block[3] = &unk_1000EF290;
  block[4] = this;
  dispatch_async((dispatch_queue_t)gRDServerQueue, block);
}

void sub_1000386AC(uint64_t a1)
{
}

void RDQSREngine::SpeechEnded(RDQSREngine *this)
{
  unint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "speech ended", v3, 2u);
  }
  *((unsigned char *)this + 265) = 0;
}

void RDQSREngine::KeywordSpottedCallback(RDQSREngine *this, void *a2, const __CFString *a3, double a4)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10003879C;
  block[3] = &unk_1000EF2B0;
  block[4] = this;
  void block[5] = a2;
  *(double *)&void block[6] = a4;
  dispatch_async((dispatch_queue_t)gRDServerQueue, block);
}

uint64_t sub_10003879C(uint64_t a1)
{
  return RDQSREngine::KeywordSpotted(*(RDQSREngine **)(a1 + 32), *(const __CFString **)(a1 + 40), *(double *)(a1 + 48));
}

uint64_t RDQSREngine::KeywordSpotted(RDQSREngine *this, const __CFString *a2, double a3)
{
  uint64_t v3 = __chkstk_darwin(this);
  uint64_t v5 = v4;
  BOOL v7 = v6;
  uint64_t v8 = v3;
  uint64_t v9 = RXOSLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138412546;
    char v14 = v7;
    __int16 v15 = 2048;
    uint64_t v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "keyword spotted == %@, cost=%f", (uint8_t *)&v13, 0x16u);
  }
  CFRelease(v7);
  *(std::chrono::steady_clock::time_point *)(v8 + 248) = rd_time_util::now();
  pthread_mutex_lock((pthread_mutex_t *)(v8 + 280));
  do
  {
    unint64_t v10 = RDQSRCircularBuffer<short>::read(*(void *)(v8 + 208), 0x800uLL, (char *)&v13);
    uint64_t v11 = *(void **)(v8 + 272);
    if (v11) {
      RDASRWSpeechRecognitionAudioBufferAddAudioSamples(v11, (uint64_t)&v13, v10);
    }
  }
  while (v10 > 0x7FF);
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v8 + 280));
  *(unsigned char *)(v8 + 241) = 1;
  return result;
}

void RDQSREngine::KeywordSpotterDidStopCallback(RDQSREngine *this, void *a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100038960;
  block[3] = &unk_1000EF2D0;
  block[4] = this;
  dispatch_async((dispatch_queue_t)gRDServerQueue, block);
}

void RDQSREngine::KeywordSpotterDidStop(RDQSREngine *this)
{
  uint64_t v1 = RXOSLog();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "keyword spotter stopped", v2, 2u);
  }
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep RDQSREngine::SetResetRecognitionMode(RDQSREngine *this, xpc_object_t xdict)
{
  int v3 = *((unsigned __int8 *)this + 144);
  *((unsigned char *)this + 264) = 0;
  *((unsigned char *)this + 240) = 0;
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, kRDKeyRecognitionResetMode);
  *((unsigned char *)this + 144) = uint64;
  switch(uint64)
  {
    case 0:
      uint64_t v5 = RXOSLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v16 = 0;
        uint64_t v6 = "Setting recognition reset mode to default...";
        BOOL v7 = (uint8_t *)&v16;
        goto LABEL_11;
      }
      break;
    case 1:
      uint64_t v5 = RXOSLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v15 = 0;
        uint64_t v6 = "Setting recognition reset mode to dictation...";
        BOOL v7 = (uint8_t *)&v15;
        goto LABEL_11;
      }
      break;
    case 2:
      uint64_t v5 = RXOSLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v6 = "Setting recognition reset mode to commands...";
        BOOL v7 = buf;
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
      }
      break;
    case 3:
      uint64_t v9 = RXOSLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setting recognition reset mode to sleep...", v13, 2u);
      }
      if (RXIsKeywordSpotterEnabled() && RXIsLocaleSupportingKeywordSpotter())
      {
        *((unsigned char *)this + 240) = 1;
      }
      else if (RXIsSpeechDetectorEnabled() && RXIsLocaleSupportingOndeviceSpeechDetection())
      {
        *((unsigned char *)this + 264) = 1;
      }
      break;
    default:
      uint64_t v8 = RXOSLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Incorrect reset mode..Switching to default", v12, 2u);
      }
      *((unsigned char *)this + 144) = 0;
      break;
  }
  if (RXIsKeywordSpotterEnabled() && (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result = RXIsLocaleSupportingKeywordSpotter(), result)
    || (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result = RXIsSpeechDetectorEnabled(), result)
    && (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result = RXIsLocaleSupportingOndeviceSpeechDetection(), result))
  {
    int v11 = *((unsigned __int8 *)this + 144);
    if (v3 != v11 && (v3 == 3 || v11 == 3)) {
      return RDQSREngine::ResetRecognition(this);
    }
  }
  return result;
}

void RDQSREngine::SaveUserProfileToFile(void **this, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, kRDKeyUserProfileSavePath);
  if (*string)
  {
    uint64_t v4 = string;
    size_t v5 = strlen(string);
    uint64_t v6 = (char *)&v19 - ((__chkstk_darwin(v5) + 115) & 0xFFFFFFFFFFFFFFF0);
    bzero(v6, v5 + 100);
    BOOL v7 = strncpy(v6, v4, v5);
    strcpy(&v6[strlen(v7)], "EngineUserProfile");
    CFDataRef v8 = (const __CFData *)RDASRWSpeechRecognizerCopyUserProfileData(this[2]);
    if (v8)
    {
      CFDataRef v9 = v8;
      unint64_t v10 = fopen(v6, "w");
      BytePtr = CFDataGetBytePtr(v9);
      size_t Length = CFDataGetLength(v9);
      fwrite(BytePtr, 1uLL, Length, v10);
      fclose(v10);
      CFRelease(v9);
    }
    __chkstk_darwin(v8);
    bzero((char *)&v19 - ((v5 + 115) & 0xFFFFFFFFFFFFFFF0), v5 + 100);
    int v13 = strncpy((char *)&v19 - ((v5 + 115) & 0xFFFFFFFFFFFFFFF0), v4, v5);
    strcpy((char *)&v19 + strlen(v13) - ((v5 + 115) & 0xFFFFFFFFFFFFFFF0), "EngineJitProfile");
    CFDataRef v14 = (const __CFData *)RDASRWSpeechRecognizerCopyJitProfileData(this[2]);
    if (v14)
    {
      CFDataRef v15 = v14;
      __int16 v16 = fopen((const char *)&v19 - ((v5 + 115) & 0xFFFFFFFFFFFFFFF0), "w");
      uint64_t v17 = CFDataGetBytePtr(v15);
      size_t v18 = CFDataGetLength(v15);
      fwrite(v17, 1uLL, v18, v16);
      fclose(v16);
      CFRelease(v15);
    }
  }
}

BOOL RDQSREngine::ShouldDonateSpeech(RDQSREngine *this)
{
  return RXIsAudioDonationOptedIn()
      && *((unsigned char *)this + 10)
      && !*((unsigned char *)this + 450)
      && rand() % 100 < *((unsigned __int16 *)this + 4);
}

void RDQSREngine::DonateSpeech(RDQSREngine *this)
{
  if (*((unsigned char *)this + 10) && RXIsAudioDonationOptedIn()) {
    *(void *)this = RDSpeechDonationInit(@"VoiceControl", @"somethingunique", *((void *)this + 20), *((void *)this + 55));
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 344));
  uint64_t v2 = *((void *)this + 13) - *((void *)this + 12);
  uint64_t v3 = RDQSRCircularBuffer<short>::totalFramesWritten(*((void *)this + 27));
  unint64_t v4 = v3 - *((void *)this + 14);
  size_t v5 = RXOSLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    unint64_t v6 = *((void *)this + 12);
    uint64_t v7 = *((void *)this + 13);
    uint64_t v8 = *((void *)this + 14);
    *(_DWORD *)long long buf = 134219264;
    unint64_t v19 = v6;
    __int16 v20 = 2048;
    uint64_t v21 = v7;
    __int16 v22 = 2048;
    uint64_t v23 = v2;
    __int16 v24 = 2048;
    uint64_t v25 = v8;
    __int16 v26 = 2048;
    uint64_t v27 = v3;
    __int16 v28 = 2048;
    unint64_t v29 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "SpeechDonation: Start Sample Number = %lld, end Sample number = %lld, samples in the utterance = %lld, totalSamplesSentToASR = %lld,  totalSamplesWritten = %zu, sample overwritten by next utterance = %zu", buf, 0x3Eu);
  }
  if (v4 >> 7 < 0x271)
  {
    unint64_t v10 = 80000;
    if (v2 < 80000) {
      unint64_t v10 = v2;
    }
    if (v10 >= 80000 - v4) {
      unint64_t v11 = 80000 - v4;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v12 = RDQSRCircularBuffer<short>::seekBack(*((void *)this + 27), v11 + v4 + *((void *)this + 14) - *((void *)this + 13));
    __chkstk_darwin(v12);
    CFDataRef v14 = &buf[-v13];
    unint64_t v15 = RDQSRCircularBuffer<short>::read(*((void *)this + 27), v11, (char *)&buf[-v13]);
    __int16 v16 = RXOSLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      unint64_t v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "SpeechDonation: Samples donated = %zu", buf, 0xCu);
    }
    uint64_t v17 = *(void **)this;
    if (*(void *)this)
    {
      RDspeechDonationAddAudioSamples(v17, (uint64_t)v14, v11);
      uint64_t v17 = *(void **)this;
    }
    RDspeechDonationDonateAudioForTranscription(v17, *((void *)this + 57), *((unsigned __int8 *)this + 224));
  }
  else
  {
    CFDataRef v9 = RXOSLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "SpeechDonation: donation utterance has been overwritten in the circular buffer, don't donate", buf, 2u);
    }
  }
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 344));
  if (*(void *)this)
  {
    CFRelease(*(CFTypeRef *)this);
    *(void *)this = 0;
  }
}

void RDQSREngine::AddTrainingData(RDQSREngine *this, void *a2)
{
  uint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Training mode is not supported for Quasar", v3, 2u);
  }
}

BOOL RDQSREngine::SetSecureFieldFocused(RDQSREngine *this, xpc_object_t xdict)
{
  BOOL result = xpc_dictionary_get_BOOL(xdict, kRDKeyFocusOnSecureField);
  *((unsigned char *)this + 450) = result;
  return result;
}

void RDQSREngine::AddOtherContextData(RDQSREngine *this, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, kRDKeyText);
  unint64_t v4 = RXOSLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Adding other context", buf, 2u);
  }
  if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
  {
    if (xpc_array_get_count(value))
    {
      size_t v6 = 0;
      do
      {
        string = xpc_array_get_string(value, v6);
        CFStringRef v8 = CFStringCreateWithCString(0, string, 0x8000100u);
        if (v8)
        {
          CFStringRef v9 = v8;
          unint64_t v10 = sub_1000B5418(*((CFLocaleRef **)this + 21), v8);
          if (v10)
          {
            unint64_t v11 = v10;
            RDUserProfile::addWordCombinations(*((id ***)this + 4), v10, kRDProfileNonTerminalInline[0], kRDProfileWordTagJustInTime[0]);
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        ++v6;
      }
      while (v6 < xpc_array_get_count(value));
    }
  }
  else
  {
    size_t v5 = RXOSLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CFDataRef v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Other context data can only be CFArray", v14, 2u);
    }
  }
  id v12 = RDUserProfile::copyDataProfile(*((id ***)this + 4));
  if (v12)
  {
    uint64_t v13 = v12;
    RDASRWSpeechRecognizerUpdateJitProfileData(*((void **)this + 2), (uint64_t)v12);
    CFRelease(v13);
  }
}

void sub_10003938C(uint64_t a1)
{
  RDQSREngine::LoadCustomVocabulary(*(RDUserProfile ***)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0);
  uint64_t v1 = RXOSLog();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Custom vocabulary changed...Updating it", v2, 2u);
  }
}

void sub_100039400(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    size_t v5 = (void **)(a2 + 32);
    sub_10002C318(&v5);
    uint64_t v3 = *(void *)(a2 + 24);
    *(void *)(a2 + ++*(void *)(result + 24) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    operator delete();
  }
}

RDUserProfile *sub_1000394B8(RDUserProfile **a1, RDUserProfile *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    RDUserProfile::~RDUserProfile(result);
    operator delete();
  }
  return result;
}

CFTypeRef *sub_100039508(CFTypeRef **a1, CFTypeRef *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1000B4704(result);
    operator delete();
  }
  return result;
}

void sub_10003955C()
{
}

void *sub_100039570(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_1000EF328;
  result[1] = v3;
  return result;
}

uint64_t sub_1000395B8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1000EF328;
  a2[1] = v2;
  return result;
}

void *sub_1000395E4(void *result, unsigned char *a2)
{
  if (*a2)
  {
    uint64_t v2 = result[1];
    uint64_t v3 = *(void **)(v2 + 16);
    id v4 = RDUserProfile::copyDataProfile(*(id ***)(v2 + 24));
    return RDASRWSpeechRecognizerUpdateUserProfileData(v3, (uint64_t)v4);
  }
  return result;
}

uint64_t sub_100039638(uint64_t a1, uint64_t a2)
{
  if (sub_1000198B8(a2, (uint64_t)&off_1000EF398)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100039678()
{
  return &off_1000EF398;
}

void *sub_100039684(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100039708(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (*a2) {
      operator delete[]();
    }
    *a2 = 0;
    operator delete();
  }
}

void *sub_100039774(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000397EC(a1, a2);
    id v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_1000397D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1000397EC(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100019424();
  }
  BOOL result = (char *)sub_100023824((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

RDQSRAudioFileLogger *sub_10003982C(RDQSRAudioFileLogger **a1, RDQSRAudioFileLogger *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    RDQSRAudioFileLogger::~RDQSRAudioFileLogger(result);
    operator delete();
  }
  return result;
}

void *sub_10003987C(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    BOOL result = sub_1000397EC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000398DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000398F8(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        size_t v5 = v3 - 40;
        size_t v6 = (void **)(v3 - 24);
        sub_100018CDC(&v6);
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_100039974(RDQSRResultObject *a1, RDQSRResultObject *a2, uint64_t a3, char a4)
{
  size_t v8 = a2;
  CFStringRef v9 = a1;
  int v88 = a2;
  uint64_t v89 = a1;
  while (1)
  {
    uint64_t v10 = v8 - v9;
    unint64_t v11 = (v8 - v9) >> 4;
    if (!(!v5 & v4))
    {
      switch(v11)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int v88 = (RDQSRResultObject *)((char *)v8 - 16);
          int GrammarIndex = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)((char *)v8 - 16));
          if (GrammarIndex > (int)RDQSRResultObject::getGrammarIndex(v9)) {
            sub_10003A2F0(&v89, (uint64_t *)&v88);
          }
          break;
        case 3uLL:
          int v88 = (RDQSRResultObject *)((char *)v8 - 16);
          sub_10003A454(v9, (RDQSRResultObject *)((char *)v9 + 16), (RDQSRResultObject *)((char *)v8 - 16));
          break;
        case 4uLL:
          int v88 = (RDQSRResultObject *)((char *)v8 - 16);
          sub_10003A7B4(v9, (RDQSRResultObject *)((char *)v9 + 16), (RDQSRResultObject *)((char *)v9 + 32), (uint64_t)v8 - 16);
          break;
        case 5uLL:
          int v88 = (RDQSRResultObject *)((char *)v8 - 16);
          sub_10003A35C(v9, (RDQSRResultObject *)((char *)v9 + 16), (RDQSRResultObject *)((char *)v9 + 32), (RDQSRResultObject *)((char *)v9 + 48), (uint64_t)v8 - 16);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v9 != v8)
      {
        int64_t v57 = (v11 - 2) >> 1;
        int v86 = v8;
        int64_t v87 = v57;
        do
        {
          int64_t v58 = v57;
          if (v87 >= v57)
          {
            uint64_t v59 = (2 * v57) | 1;
            uint64_t v60 = (uint64_t)v9 + 16 * v59;
            if (2 * v57 + 2 < (uint64_t)v11)
            {
              int v61 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)((char *)v9 + 16 * v59));
              if (v61 > (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)(v60 + 16)))
              {
                v60 += 16;
                uint64_t v59 = 2 * v58 + 2;
              }
            }
            uint64_t v62 = (RDQSRResultObject *)((char *)v9 + 16 * v58);
            int v63 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v60);
            if (v63 <= (int)RDQSRResultObject::getGrammarIndex(v62))
            {
              RDQSRResultObject::RDQSRResultObject((RDQSRResultObject *)v92, (RDQSRResultObject *)((char *)v9 + 16 * v58));
              do
              {
                uint64_t v64 = v60;
                RDQSRResultObject::operator=((uint64_t)v62, v60);
                if (v87 < v59) {
                  break;
                }
                uint64_t v65 = (2 * v59) | 1;
                uint64_t v60 = (uint64_t)v9 + 16 * v65;
                uint64_t v59 = 2 * v59 + 2;
                if (v59 < (uint64_t)v11)
                {
                  int v66 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)((char *)v9 + 16 * v65));
                  if (v66 <= (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)(v60 + 16))) {
                    uint64_t v59 = v65;
                  }
                  else {
                    v60 += 16;
                  }
                }
                else
                {
                  uint64_t v59 = v65;
                }
                int v67 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v60);
                uint64_t v62 = (RDQSRResultObject *)v64;
              }
              while (v67 <= (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92));
              RDQSRResultObject::operator=(v64, (uint64_t)v92);
              RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)v92);
            }
          }
          int64_t v57 = v58 - 1;
        }
        while (v58);
        uint64_t v68 = (unint64_t)v10 >> 4;
        uint64_t v69 = (uint64_t)v86;
        do
        {
          RDQSRResultObject::RDQSRResultObject((RDQSRResultObject *)v90, v9);
          uint64_t v70 = 0;
          uint64_t v71 = (uint64_t)v9;
          do
          {
            uint64_t v72 = v71 + 16 * v70 + 16;
            uint64_t v73 = 2 * v70;
            uint64_t v70 = (2 * v70) | 1;
            uint64_t v74 = v73 + 2;
            if (v73 + 2 < v68)
            {
              int v75 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v72);
              if (v75 > (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)(v72 + 16)))
              {
                v72 += 16;
                uint64_t v70 = v74;
              }
            }
            RDQSRResultObject::operator=(v71, v72);
            uint64_t v71 = v72;
          }
          while (v70 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
          v69 -= 16;
          if (v72 == v69)
          {
            RDQSRResultObject::operator=(v72, (uint64_t)v90);
          }
          else
          {
            RDQSRResultObject::operator=(v72, v69);
            RDQSRResultObject::operator=(v69, (uint64_t)v90);
            uint64_t v76 = v72 - (void)v9 + 16;
            if (v76 >= 17)
            {
              unint64_t v77 = (((unint64_t)v76 >> 4) - 2) >> 1;
              BOOL v78 = (RDQSRResultObject *)((char *)v9 + 16 * v77);
              int v79 = RDQSRResultObject::getGrammarIndex(v78);
              if (v79 > (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v72))
              {
                RDQSRResultObject::RDQSRResultObject((RDQSRResultObject *)v92, (const RDQSRResultObject *)v72);
                do
                {
                  uint64_t v80 = (uint64_t)v78;
                  RDQSRResultObject::operator=(v72, (uint64_t)v78);
                  if (!v77) {
                    break;
                  }
                  unint64_t v77 = (v77 - 1) >> 1;
                  BOOL v78 = (RDQSRResultObject *)((char *)v9 + 16 * v77);
                  int v81 = RDQSRResultObject::getGrammarIndex(v78);
                  uint64_t v72 = v80;
                }
                while (v81 > (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92));
                RDQSRResultObject::operator=(v80, (uint64_t)v92);
                RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)v92);
              }
            }
          }
          RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)v90);
        }
        while (v68-- > 2);
      }
      return;
    }
    unint64_t v12 = v11 >> 1;
    uint64_t v13 = (RDQSRResultObject *)((char *)v8 - 16);
    if ((unint64_t)v10 >= 0x801)
    {
      sub_10003A454(v9, (RDQSRResultObject *)((char *)v9 + 16 * (v11 >> 1)), v13);
      uint64_t v14 = 16 * v12 - 16;
      sub_10003A454((RDQSRResultObject *)((char *)v89 + 16), (RDQSRResultObject *)((char *)v89 + v14), (RDQSRResultObject *)((char *)v88 - 32));
      uint64_t v15 = 16 * v12 + 16;
      sub_10003A454((RDQSRResultObject *)((char *)v89 + 32), (RDQSRResultObject *)((char *)v89 + v15), (RDQSRResultObject *)((char *)v88 - 48));
      sub_10003A454((RDQSRResultObject *)((char *)v89 + v14), (RDQSRResultObject *)((char *)v89 + 16 * v12), (RDQSRResultObject *)((char *)v89 + v15));
      v92[0] = (uint64_t)v89 + 16 * v12;
      sub_10003A548(&v89, v92);
    }
    else
    {
      sub_10003A454((RDQSRResultObject *)((char *)v9 + 16 * (v11 >> 1)), v9, v13);
    }
    --a3;
    if (a4)
    {
      __int16 v16 = v88;
    }
    else
    {
      uint64_t v17 = v89;
      int v18 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)((char *)v89 - 16));
      __int16 v16 = v88;
      if (v18 <= (int)RDQSRResultObject::getGrammarIndex(v17))
      {
        unint64_t v31 = v89;
        v90[0] = v89;
        uint64_t v91 = v88;
        RDQSRResultObject::RDQSRResultObject((RDQSRResultObject *)v92, v89);
        int v32 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92);
        if (v32 <= (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)((char *)v88 - 16)))
        {
          int v35 = (RDQSRResultObject *)((char *)v31 + 16);
          do
          {
            long long v33 = v35;
            v90[0] = v35;
            if (v35 >= v91) {
              break;
            }
            int v36 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92);
            int v37 = RDQSRResultObject::getGrammarIndex(v33);
            int v35 = (RDQSRResultObject *)((char *)v33 + 16);
          }
          while (v36 <= v37);
        }
        else
        {
          long long v33 = v31;
          do
          {
            long long v33 = (RDQSRResultObject *)((char *)v33 + 16);
            v90[0] = v33;
            int v34 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92);
          }
          while (v34 <= (int)RDQSRResultObject::getGrammarIndex(v33));
        }
        unint64_t v38 = v91;
        if (v33 < v91)
        {
          do
          {
            unint64_t v38 = (RDQSRResultObject *)((char *)v38 - 16);
            uint64_t v91 = v38;
            int v39 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92);
          }
          while (v39 > (int)RDQSRResultObject::getGrammarIndex(v38));
          long long v33 = v90[0];
        }
        if (v33 < v38)
        {
          do
          {
            sub_10003A2F0(v90, (uint64_t *)&v91);
            do
            {
              v90[0] = (const RDQSRResultObject *)((char *)v90[0] + 16);
              CFStringRef v40 = v90[0];
              int v41 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92);
            }
            while (v41 <= (int)RDQSRResultObject::getGrammarIndex(v40));
            do
            {
              uint64_t v91 = (RDQSRResultObject *)((char *)v91 - 16);
              CFRange v42 = v91;
              int v43 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92);
            }
            while (v43 > (int)RDQSRResultObject::getGrammarIndex(v42));
            long long v33 = v90[0];
          }
          while (v90[0] < v91);
        }
        uint64_t v44 = (uint64_t)v33 - 16;
        if ((RDQSRResultObject *)v44 != v31) {
          RDQSRResultObject::operator=((uint64_t)v31, v44);
        }
        RDQSRResultObject::operator=(v44, (uint64_t)v92);
        CFStringRef v9 = v90[0];
        RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)v92);
        goto LABEL_53;
      }
    }
    unint64_t v19 = v89;
    uint64_t v91 = v16;
    RDQSRResultObject::RDQSRResultObject((RDQSRResultObject *)v92, v89);
    uint64_t v20 = 0;
    do
    {
      v90[0] = (RDQSRResultObject *)((char *)v19 + v20 + 16);
      int v21 = RDQSRResultObject::getGrammarIndex(v90[0]);
      v20 += 16;
    }
    while (v21 > (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92));
    __int16 v22 = v91;
    if (v20 == 16)
    {
      uint64_t v25 = (RDQSRResultObject *)((char *)v19 + 16);
      do
      {
        if (v25 >= v22) {
          break;
        }
        __int16 v22 = (RDQSRResultObject *)((char *)v22 - 16);
        uint64_t v91 = v22;
        int v26 = RDQSRResultObject::getGrammarIndex(v22);
      }
      while (v26 <= (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92));
    }
    else
    {
      uint64_t v23 = (RDQSRResultObject *)((char *)v91 - 16);
      do
      {
        uint64_t v91 = v23;
        int v24 = RDQSRResultObject::getGrammarIndex(v23);
        uint64_t v23 = (RDQSRResultObject *)((char *)v23 - 16);
      }
      while (v24 <= (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92));
      uint64_t v25 = v90[0];
    }
    uint64_t v27 = v91;
    CFStringRef v9 = v25;
    if (v25 < v91)
    {
      do
      {
        sub_10003A2F0(v90, (uint64_t *)&v91);
        do
        {
          v90[0] = (const RDQSRResultObject *)((char *)v90[0] + 16);
          int v28 = RDQSRResultObject::getGrammarIndex(v90[0]);
        }
        while (v28 > (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92));
        do
        {
          uint64_t v91 = (RDQSRResultObject *)((char *)v91 - 16);
          int v29 = RDQSRResultObject::getGrammarIndex(v91);
        }
        while (v29 <= (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92));
        CFStringRef v9 = v90[0];
      }
      while (v90[0] < v91);
    }
    if ((RDQSRResultObject *)((char *)v9 - 16) != v19) {
      RDQSRResultObject::operator=((uint64_t)v19, (uint64_t)v9 - 16);
    }
    RDQSRResultObject::operator=((uint64_t)v9 - 16, (uint64_t)v92);
    RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)v92);
    if (v25 < v27) {
      goto LABEL_29;
    }
    BOOL v30 = sub_10003A5B4((uint64_t)v89, (uint64_t)v9 - 16);
    if (!sub_10003A5B4((uint64_t)v9, (uint64_t)v88))
    {
      if (v30) {
        goto LABEL_54;
      }
LABEL_29:
      sub_100039974(v89, (char *)v9 - 16, a3, a4 & 1);
LABEL_53:
      a4 = 0;
LABEL_54:
      uint64_t v89 = v9;
      goto LABEL_55;
    }
    if (v30) {
      return;
    }
    int v88 = (RDQSRResultObject *)((char *)v9 - 16);
    CFStringRef v9 = v89;
LABEL_55:
    size_t v8 = v88;
  }
  uint64_t v46 = (RDQSRResultObject *)((char *)v9 + 16);
  BOOL v48 = v9 == v8 || v46 == v8;
  if (a4)
  {
    if (!v48)
    {
      uint64_t v49 = 0;
      uint64_t v50 = v9;
      do
      {
        int64_t v51 = v50;
        uint64_t v50 = v46;
        int v52 = RDQSRResultObject::getGrammarIndex(v46);
        if (v52 > (int)RDQSRResultObject::getGrammarIndex(v51))
        {
          RDQSRResultObject::RDQSRResultObject((RDQSRResultObject *)v92, v50);
          uint64_t v53 = v49;
          while (1)
          {
            RDQSRResultObject::operator=((uint64_t)v9 + v53 + 16, (uint64_t)v9 + v53);
            if (!v53) {
              break;
            }
            int v54 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92);
            int v55 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)((char *)v9 + v53 - 16));
            v53 -= 16;
            if (v54 <= v55)
            {
              uint64_t v56 = (uint64_t)v9 + v53 + 16;
              goto LABEL_77;
            }
          }
          uint64_t v56 = (uint64_t)v9;
LABEL_77:
          RDQSRResultObject::operator=(v56, (uint64_t)v92);
          RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)v92);
        }
        uint64_t v46 = (const RDQSRResultObject *)((char *)v50 + 16);
        v49 += 16;
      }
      while ((const RDQSRResultObject *)((char *)v50 + 16) != v8);
    }
  }
  else if (!v48)
  {
    do
    {
      v83 = v46;
      int v84 = RDQSRResultObject::getGrammarIndex(v46);
      if (v84 > (int)RDQSRResultObject::getGrammarIndex(v9))
      {
        RDQSRResultObject::RDQSRResultObject((RDQSRResultObject *)v92, v83);
        do
        {
          RDQSRResultObject::operator=((uint64_t)v9 + 16, (uint64_t)v9);
          int v85 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v92);
          CFStringRef v9 = (RDQSRResultObject *)((char *)v9 - 16);
        }
        while (v85 > (int)RDQSRResultObject::getGrammarIndex(v9));
        RDQSRResultObject::operator=((uint64_t)v9 + 16, (uint64_t)v92);
        RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)v92);
      }
      uint64_t v46 = (const RDQSRResultObject *)((char *)v83 + 16);
      CFStringRef v9 = v83;
    }
    while ((const RDQSRResultObject *)((char *)v83 + 16) != v8);
  }
}

void sub_10003A250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)va1);
  RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)va);
  _Unwind_Resume(a1);
}

void sub_10003A2F0(const RDQSRResultObject **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  RDQSRResultObject::RDQSRResultObject((RDQSRResultObject *)v4, *a1);
  RDQSRResultObject::operator=((uint64_t)v2, v3);
  RDQSRResultObject::operator=(v3, (uint64_t)v4);
  RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)v4);
}

void sub_10003A348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10003A35C(const RDQSRResultObject *a1, RDQSRResultObject *a2, RDQSRResultObject *a3, RDQSRResultObject *a4, uint64_t a5)
{
  char v5 = (RDQSRResultObject *)a5;
  __int16 v16 = a2;
  uint64_t v17 = a1;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  uint64_t v13 = a5;
  sub_10003A7B4(a1, a2, a3, (uint64_t)a4);
  LODWORD(v5) = RDQSRResultObject::getGrammarIndex(v5);
  if ((int)v5 > (int)RDQSRResultObject::getGrammarIndex(a4))
  {
    sub_10003A2F0(&v14, &v13);
    int GrammarIndex = RDQSRResultObject::getGrammarIndex(v14);
    if (GrammarIndex > (int)RDQSRResultObject::getGrammarIndex(a3))
    {
      sub_10003A2F0(&v15, (uint64_t *)&v14);
      int v11 = RDQSRResultObject::getGrammarIndex(v15);
      if (v11 > (int)RDQSRResultObject::getGrammarIndex(a2))
      {
        sub_10003A2F0(&v16, (uint64_t *)&v15);
        int v12 = RDQSRResultObject::getGrammarIndex(v16);
        if (v12 > (int)RDQSRResultObject::getGrammarIndex(a1)) {
          sub_10003A2F0(&v17, (uint64_t *)&v16);
        }
      }
    }
  }
}

void sub_10003A454(const RDQSRResultObject *a1, RDQSRResultObject *this, RDQSRResultObject *a3)
{
  char v5 = a1;
  __int16 v16 = this;
  uint64_t v17 = a1;
  uint64_t v15 = a3;
  int GrammarIndex = RDQSRResultObject::getGrammarIndex(this);
  LODWORD(v5) = RDQSRResultObject::getGrammarIndex(v5);
  int v7 = RDQSRResultObject::getGrammarIndex(a3);
  int v8 = RDQSRResultObject::getGrammarIndex(this);
  if (GrammarIndex > (int)v5)
  {
    if (v7 <= v8)
    {
      sub_10003A2F0(&v17, (uint64_t *)&v16);
      uint64_t v13 = v16;
      int v14 = RDQSRResultObject::getGrammarIndex(v15);
      if (v14 <= (int)RDQSRResultObject::getGrammarIndex(v13)) {
        return;
      }
      uint64_t v9 = &v16;
    }
    else
    {
      uint64_t v9 = &v17;
    }
    int v12 = &v15;
    goto LABEL_10;
  }
  if (v7 > v8)
  {
    sub_10003A2F0(&v16, (uint64_t *)&v15);
    uint64_t v10 = v17;
    int v11 = RDQSRResultObject::getGrammarIndex(v16);
    if (v11 > (int)RDQSRResultObject::getGrammarIndex(v10))
    {
      uint64_t v9 = &v17;
      int v12 = &v16;
LABEL_10:
      sub_10003A2F0(v9, (uint64_t *)v12);
    }
  }
}

void sub_10003A548(const RDQSRResultObject **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  RDQSRResultObject::RDQSRResultObject((RDQSRResultObject *)v4, *a1);
  RDQSRResultObject::operator=((uint64_t)v2, v3);
  RDQSRResultObject::operator=(v3, (uint64_t)v4);
  RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)v4);
}

void sub_10003A5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_10003A5B4(uint64_t a1, uint64_t a2)
{
  int v14 = (RDQSRResultObject *)a2;
  uint64_t v15 = (const RDQSRResultObject *)a1;
  BOOL v4 = 1;
  switch((a2 - a1) >> 4)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      int v14 = (RDQSRResultObject *)(a2 - 16);
      int GrammarIndex = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)(a2 - 16));
      if (GrammarIndex > (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)a1)) {
        sub_10003A2F0(&v15, (uint64_t *)&v14);
      }
      return 1;
    case 3:
      sub_10003A454((const RDQSRResultObject *)a1, (RDQSRResultObject *)(a1 + 16), (RDQSRResultObject *)(a2 - 16));
      return v4;
    case 4:
      sub_10003A7B4((const RDQSRResultObject *)a1, (RDQSRResultObject *)(a1 + 16), (RDQSRResultObject *)(a1 + 32), a2 - 16);
      return v4;
    case 5:
      sub_10003A35C((const RDQSRResultObject *)a1, (RDQSRResultObject *)(a1 + 16), (RDQSRResultObject *)(a1 + 32), (RDQSRResultObject *)(a1 + 48), a2 - 16);
      return v4;
    default:
      size_t v6 = (RDQSRResultObject *)(a1 + 32);
      sub_10003A454((const RDQSRResultObject *)a1, (RDQSRResultObject *)(a1 + 16), (RDQSRResultObject *)(a1 + 32));
      int v7 = (RDQSRResultObject *)(a1 + 48);
      if (v7 == (RDQSRResultObject *)a2) {
        return 1;
      }
      int v8 = 0;
      break;
  }
  while (1)
  {
    int v9 = RDQSRResultObject::getGrammarIndex(v7);
    if (v9 > (int)RDQSRResultObject::getGrammarIndex(v6)) {
      break;
    }
LABEL_12:
    size_t v6 = v7;
    int v7 = (RDQSRResultObject *)((char *)v7 + 16);
    if (v7 == v14) {
      return 1;
    }
  }
  RDQSRResultObject::RDQSRResultObject((RDQSRResultObject *)v13, v7);
  do
  {
    uint64_t v10 = (uint64_t)v6;
    RDQSRResultObject::operator=((uint64_t)v6 + 16, (uint64_t)v6);
    if (v6 == v15) {
      break;
    }
    int v11 = RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)v13);
    size_t v6 = (RDQSRResultObject *)((char *)v6 - 16);
  }
  while (v11 > (int)RDQSRResultObject::getGrammarIndex((RDQSRResultObject *)(v10 - 16)));
  RDQSRResultObject::operator=(v10, (uint64_t)v13);
  if (++v8 != 8)
  {
    RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)v13);
    goto LABEL_12;
  }
  BOOL v4 = (RDQSRResultObject *)((char *)v7 + 16) == v14;
  RDQSRResultObject::~RDQSRResultObject((RDQSRResultObject *)v13);
  return v4;
}

void sub_10003A784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10003A7B4(const RDQSRResultObject *a1, RDQSRResultObject *a2, RDQSRResultObject *a3, uint64_t a4)
{
  BOOL v4 = (RDQSRResultObject *)a4;
  int v12 = a2;
  uint64_t v13 = a1;
  uint64_t v10 = a4;
  int v11 = a3;
  sub_10003A454(a1, a2, a3);
  LODWORD(v4) = RDQSRResultObject::getGrammarIndex(v4);
  if ((int)v4 > (int)RDQSRResultObject::getGrammarIndex(a3))
  {
    sub_10003A2F0(&v11, &v10);
    int GrammarIndex = RDQSRResultObject::getGrammarIndex(v11);
    if (GrammarIndex > (int)RDQSRResultObject::getGrammarIndex(a2))
    {
      sub_10003A2F0(&v12, (uint64_t *)&v11);
      int v9 = RDQSRResultObject::getGrammarIndex(v12);
      if (v9 > (int)RDQSRResultObject::getGrammarIndex(a1)) {
        sub_10003A2F0(&v13, (uint64_t *)&v12);
      }
    }
  }
}

CFStringRef RDCopyModelPath(void)
{
  CFArrayRef v0 = (const __CFArray *)CFCopySearchPathForDirectoriesInDomains();
  CFURLRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v0, 0);
  CFStringRef v2 = CFURLCopyFileSystemPath(ValueAtIndex, kCFURLPOSIXPathStyle);
  CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"%@/Speech/Recognizers/SpeechRecognitionCoreLanguages", v2);
  CFRelease(v2);
  CFRelease(v0);
  return v3;
}

CFURLRef RDCopyCacheURL(void)
{
  CFArrayRef v0 = (const __CFArray *)CFCopySearchPathForDirectoriesInDomains();
  CFURLRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v0, 0);
  CFURLRef v2 = CFURLCreateCopyAppendingPathComponent(0, ValueAtIndex, @"com.apple.SpeechRecognitionCore", 1u);
  CFRelease(v0);
  CFStringRef v3 = CFURLCopyPath(v2);
  if (v3)
  {
    CFStringRef v4 = v3;
    CFStringGetCString(v3, buffer, 2000, 0x8000100u);
    char v5 = opendir(buffer);
    if (v5)
    {
      closedir(v5);
    }
    else if (mkdir(buffer, 0x1EDu))
    {
      int v7 = RXOSLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = 138412290;
        CFURLRef v9 = v2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error creating %@", (uint8_t *)&v8, 0xCu);
      }
    }
    CFRelease(v4);
  }
  return v2;
}

CFDictionaryRef RDCopyInfoDict(CFURLRef url)
{
  CFURLRef v1 = CFURLCreateCopyAppendingPathComponent(0, url, @"Info.plist", 0);
  return sub_10003AA68(v1);
}

CFDictionaryRef sub_10003AA68(CFURLRef fileURL)
{
  if (!fileURL) {
    return 0;
  }
  CFURLRef v2 = CFReadStreamCreateWithFile(0, fileURL);
  if (v2)
  {
    CFStringRef v3 = v2;
    CFReadStreamOpen(v2);
    CFErrorRef error = 0;
    CFDictionaryRef v4 = (const __CFDictionary *)CFPropertyListCreateWithStream(0, v3, 0, 0, 0, &error);
    CFDictionaryRef v5 = v4;
    if (v4)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v4, @"CFBundleShortVersionString");
      if (CFStringGetCharacterAtIndex(Value, 0) <= 0x31u)
      {
        CFRelease(v5);
        CFDictionaryRef v5 = 0;
      }
    }
    CFReadStreamClose(v3);
    CFRelease(v3);
  }
  else
  {
    CFDictionaryRef v5 = 0;
  }
  CFRelease(fileURL);
  return v5;
}

CFBooleanRef RDCopyCacheVersion(const __CFString *a1)
{
  CFURLRef v1 = sub_10003AC3C(a1);
  if (v1)
  {
    CFURLRef v2 = v1;
    CFURLRef v3 = CFURLCreateCopyAppendingPathComponent(0, v1, @"Info.plist", 0);
    CFDictionaryRef v4 = sub_10003AA68(v3);
    if (v4)
    {
      CFDictionaryRef v5 = v4;
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v4, @"CFBundleShortVersionString");
      if (Value)
      {
        CFBooleanRef v7 = Value;
        CFRetain(Value);
        CFRelease(v5);
LABEL_15:
        CFRelease(v2);
        return v7;
      }
      CFRelease(v5);
    }
    RDURL::RDURL((RDURL *)__p, v2, 0);
    if (v11 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    if (stat((const char *)v8, &v12)) {
      CFBooleanRef v7 = 0;
    }
    else {
      CFBooleanRef v7 = kCFBooleanTrue;
    }
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_15;
  }
  return 0;
}

void sub_10003AC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFURLRef sub_10003AC3C(const __CFString *a1)
{
  CFStringRef v1 = RDCopyBestNashvilleLocaleIdentifier(a1);
  if (!v1) {
    return 0;
  }
  CFStringRef v2 = v1;
  CFURLRef v3 = RDCopyCacheURL();
  if (v3)
  {
    CFURLRef v4 = v3;
    CFURLRef v5 = CFURLCreateCopyAppendingPathComponent(0, v3, @"Users", 1u);
    if (v5)
    {
      CFURLRef v6 = v5;
      CFURLRef v7 = CFURLCreateCopyAppendingPathComponent(0, v5, v2, 1u);
      CFRelease(v6);
    }
    else
    {
      CFURLRef v7 = 0;
    }
    CFRelease(v4);
  }
  else
  {
    CFURLRef v7 = 0;
  }
  CFRelease(v2);
  return v7;
}

void RDNukeCache(const __CFString *a1)
{
  if (a1)
  {
    CFURLRef v1 = sub_10003AC3C(a1);
    if (!v1) {
      return;
    }
    RDURL::RDURL((RDURL *)__p, v1, 1);
    if (v5 >= 0) {
      CFStringRef v2 = __p;
    }
    else {
      CFStringRef v2 = (void **)__p[0];
    }
  }
  else
  {
    CFURLRef v3 = RDCopyCacheURL();
    if (!v3) {
      return;
    }
    RDURL::RDURL((RDURL *)__p, v3, 1);
    if (v5 >= 0) {
      CFStringRef v2 = __p;
    }
    else {
      CFStringRef v2 = (void **)__p[0];
    }
  }
  removefile((const char *)v2, 0, 1u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10003AD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFSet *RDCopyNashvilleModelLanguages(void)
{
  CFStringRef v0 = RDCopyModelPath();
  RDString::RDString((RDString *)v22, v0, 1);
  if ((v23 & 0x80u) == 0) {
    CFURLRef v1 = v22;
  }
  else {
    CFURLRef v1 = (void **)v22[0];
  }
  CFStringRef v2 = opendir((const char *)v1);
  CFMutableSetRef Mutable = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  CFURLRef v4 = Mutable;
  if (v2) {
    BOOL v5 = Mutable == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    while (1)
    {
      while (1)
      {
        do
        {
          CFURLRef v6 = readdir(v2);
          if (!v6)
          {
            closedir(v2);
            goto LABEL_30;
          }
          d_name = v6->d_name;
          int v8 = strstr(v6->d_name, ".SpeechRecognition");
        }
        while (!v8);
        CFURLRef v9 = v8;
        if ((v23 & 0x80u) == 0) {
          size_t v10 = v23;
        }
        else {
          size_t v10 = (size_t)v22[1];
        }
        sub_10003BFB0((uint64_t)&v20, v10 + 1);
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v11 = &v20;
        }
        else {
          char v11 = (std::string *)v20.__r_.__value_.__r.__words[0];
        }
        if (v10)
        {
          if ((v23 & 0x80u) == 0) {
            stat v12 = v22;
          }
          else {
            stat v12 = (void **)v22[0];
          }
          memmove(v11, v12, v10);
        }
        *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
        uint64_t v13 = std::string::append(&v20, d_name);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        BOOL v15 = sub_10003B030(&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        if (v15) {
          goto LABEL_27;
        }
      }
      operator delete(v20.__r_.__value_.__l.__data_);
      if (v15)
      {
LABEL_27:
        CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)d_name, v9 - d_name, 0x8000100u, 0);
        CFSetAddValue(v4, v16);
        CFRelease(v16);
        uint64_t v17 = strchr(d_name, 95);
        if (v17)
        {
          CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)d_name, v17 - d_name, 0x8000100u, 0);
          CFSetAddValue(v4, v18);
          CFRelease(v18);
        }
      }
    }
  }
LABEL_30:
  if ((char)v23 < 0) {
    operator delete(v22[0]);
  }
  return v4;
}

void sub_10003AFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10003B030(std::string *a1)
{
  CFURLRef v1 = a1;
  std::string::append(a1, "/Contents/Info.plist");
  CFStringRef v2 = (const char *)v1;
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0) {
    CFStringRef v2 = (const char *)v1->__r_.__value_.__r.__words[0];
  }
  if (stat(v2, &v9)) {
    return 0;
  }
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0) {
    CFURLRef v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
  }
  CFStringRef v4 = CFStringCreateWithCStringNoCopy(0, (const char *)v1, 0x8000100u, kCFAllocatorNull);
  if (!v4) {
    return 0;
  }
  CFStringRef v5 = v4;
  CFURLRef v6 = CFURLCreateWithFileSystemPath(0, v4, kCFURLPOSIXPathStyle, 0);
  CFDictionaryRef v7 = sub_10003AA68(v6);
  BOOL v3 = v7 != 0;
  if (v7) {
    CFRelease(v7);
  }
  CFRelease(v5);
  return v3;
}

CFStringRef RDCopyBestNashvilleLocaleIdentifier(CFStringRef theString)
{
  RDString::RDString((RDString *)&v66, theString, 0);
  std::string v67 = v66;
  memset(&v66, 0, sizeof(v66));
  CFStringRef v1 = RDCopyModelPath();
  if (!v1)
  {
    sub_100009CF0(&cStr, "");
    goto LABEL_169;
  }
  RDString::RDString((RDString *)v80, v1, 1);
  std::string::push_back(v2, 47);
  sub_100009CF0(&v77, ".SpeechRecognition");
  sub_10003BE08(v80, (const void **)&v67.__r_.__value_.__l.__data_, (uint64_t)&v75);
  if ((v79 & 0x80u) == 0) {
    BOOL v3 = (const std::string::value_type *)&v77;
  }
  else {
    BOOL v3 = (const std::string::value_type *)v77;
  }
  if ((v79 & 0x80u) == 0) {
    std::string::size_type v4 = v79;
  }
  else {
    std::string::size_type v4 = v78;
  }
  CFStringRef v5 = std::string::append(&v75, v3, v4);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  BOOL v7 = sub_10003B030(&v76);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v75.__r_.__value_.__l.__data_);
    if (v7) {
      goto LABEL_59;
    }
  }
  else if (v7)
  {
    goto LABEL_59;
  }
  std::string::size_type v8 = std::string::find(&v67, 46, 0);
  if (v8 != -1)
  {
    stat v9 = (char *)&v67 + HIBYTE(v67.__r_.__value_.__r.__words[2]);
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v10 = &v67;
    }
    else
    {
      stat v9 = (char *)(v67.__r_.__value_.__r.__words[0] + v67.__r_.__value_.__l.__size_);
      size_t v10 = (std::string *)v67.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&v67, v8, v9 - ((char *)v10 + v8));
    sub_10003BE08(v80, (const void **)&v67.__r_.__value_.__l.__data_, (uint64_t)&v74);
    if ((v79 & 0x80u) == 0) {
      char v11 = (const std::string::value_type *)&v77;
    }
    else {
      char v11 = (const std::string::value_type *)v77;
    }
    if ((v79 & 0x80u) == 0) {
      std::string::size_type v12 = v79;
    }
    else {
      std::string::size_type v12 = v78;
    }
    uint64_t v13 = std::string::append(&v74, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    BOOL v15 = sub_10003B030(&v75);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v74.__r_.__value_.__l.__data_);
      if (v15) {
        goto LABEL_59;
      }
    }
    else if (v15)
    {
      goto LABEL_59;
    }
  }
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFStringRef v16 = &v67;
  }
  else {
    CFStringRef v16 = (std::string *)v67.__r_.__value_.__r.__words[0];
  }
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v67.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    CFStringRef v18 = (unsigned __int8 *)v16 + size;
    unint64_t v19 = v16;
LABEL_39:
    uint64_t v20 = 0;
    while (v19->__r_.__value_.__s.__data_[0] != asc_1000DD850[v20])
    {
      if (++v20 == 2)
      {
        unint64_t v19 = (std::string *)((char *)v19 + 1);
        if (v19 == (std::string *)v18) {
          goto LABEL_60;
        }
        goto LABEL_39;
      }
    }
    if (v19 != (std::string *)v18 && (char *)v19 - (char *)v16 != -1)
    {
      int v21 = (char *)&v67 + HIBYTE(v67.__r_.__value_.__r.__words[2]);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v21 = (char *)(v67.__r_.__value_.__r.__words[0] + v67.__r_.__value_.__l.__size_);
      }
      std::string::erase(&v67, (char *)v19 - (char *)v16, v21 - (char *)v19);
      sub_10003BE08(v80, (const void **)&v67.__r_.__value_.__l.__data_, (uint64_t)&v73);
      if ((v79 & 0x80u) == 0) {
        __int16 v22 = (const std::string::value_type *)&v77;
      }
      else {
        __int16 v22 = (const std::string::value_type *)v77;
      }
      if ((v79 & 0x80u) == 0) {
        std::string::size_type v23 = v79;
      }
      else {
        std::string::size_type v23 = v78;
      }
      int v24 = std::string::append(&v73, v22, v23);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v74.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      BOOL v26 = sub_10003B030(&v74);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      if (v26)
      {
LABEL_59:
        std::string cStr = v67;
        memset(&v67, 0, sizeof(v67));
        goto LABEL_165;
      }
    }
  }
LABEL_60:
  sub_100009CF0(&v73, "");
  if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) != 2) {
      goto LABEL_76;
    }
    if (LOWORD(v67.__r_.__value_.__l.__data_) != 28261)
    {
      if (LOWORD(v67.__r_.__value_.__l.__data_) != 29286)
      {
        if (LOWORD(v67.__r_.__value_.__l.__data_) != 29541)
        {
          uint64_t v27 = &v67;
          goto LABEL_70;
        }
LABEL_74:
        int v28 = "es_US";
        goto LABEL_75;
      }
LABEL_73:
      int v28 = "fr_FR";
      goto LABEL_75;
    }
LABEL_72:
    int v28 = "en_US";
    goto LABEL_75;
  }
  if (v67.__r_.__value_.__l.__size_ != 2) {
    goto LABEL_76;
  }
  uint64_t v27 = (std::string *)v67.__r_.__value_.__r.__words[0];
  switch(*(_WORD *)v67.__r_.__value_.__l.__data_)
  {
    case 0x6E65:
      goto LABEL_72;
    case 0x7266:
      goto LABEL_73;
    case 0x7365:
      goto LABEL_74;
  }
LABEL_70:
  if (LOWORD(v27->__r_.__value_.__l.__data_) == 25956)
  {
    int v28 = "de_DE";
LABEL_75:
    std::string::assign(&v73, v28);
  }
LABEL_76:
  std::string::size_type v29 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v29 = v73.__r_.__value_.__l.__size_;
  }
  if (v29)
  {
    sub_10003BE08(v80, (const void **)&v73.__r_.__value_.__l.__data_, (uint64_t)&__s1);
    if ((v79 & 0x80u) == 0) {
      BOOL v30 = (const std::string::value_type *)&v77;
    }
    else {
      BOOL v30 = (const std::string::value_type *)v77;
    }
    if ((v79 & 0x80u) == 0) {
      std::string::size_type v31 = v79;
    }
    else {
      std::string::size_type v31 = v78;
    }
    int v32 = std::string::append(&__s1, v30, v31);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    BOOL v34 = sub_10003B030(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__s1.__r_.__value_.__l.__data_);
      if (v34) {
        goto LABEL_89;
      }
    }
    else if (v34)
    {
LABEL_89:
      std::string cStr = v73;
      memset(&v73, 0, sizeof(v73));
      goto LABEL_163;
    }
  }
  if ((v81 & 0x80u) == 0) {
    int v35 = (const char *)v80;
  }
  else {
    int v35 = (const char *)v80[0];
  }
  int v36 = opendir(v35);
  if (!v36)
  {
LABEL_162:
    sub_100009CF0(&cStr, "");
    goto LABEL_163;
  }
  while (1)
  {
    int v37 = readdir(v36);
    if (!v37)
    {
      closedir(v36);
      goto LABEL_162;
    }
    d_name = v37->d_name;
    sub_100009CF0(&__s1, v37->d_name);
    int64_t v39 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    int v40 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    CFRange v42 = (__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__s1
        : (std::string *)__s1.__r_.__value_.__r.__words[0];
    int v43 = (v79 & 0x80u) == 0 ? (void **)&v77 : v77;
    int64_t v44 = (v79 & 0x80u) == 0 ? v79 : v78;
    if (!v44) {
      goto LABEL_140;
    }
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v39 = __s1.__r_.__value_.__l.__size_;
    }
    if (v39 >= v44)
    {
      uint64_t v45 = (char *)v42 + v39;
      int v46 = *(char *)v43;
      uint64_t v47 = v42;
      while (1)
      {
        int64_t v48 = v39 - v44;
        if (v48 == -1) {
          goto LABEL_159;
        }
        uint64_t v49 = (char *)memchr(v47, v46, v48 + 1);
        if (!v49) {
          goto LABEL_159;
        }
        uint64_t v50 = v49;
        if (!memcmp(v49, v43, v44)) {
          break;
        }
        uint64_t v47 = (std::string *)(v50 + 1);
        int64_t v39 = v45 - (v50 + 1);
        if (v39 < v44) {
          goto LABEL_159;
        }
      }
      if (v50 != v45 && v50 - (char *)v42 != -1)
      {
LABEL_140:
        std::string::size_type v51 = (v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v67.__r_.__value_.__r.__words[2])
            : v67.__r_.__value_.__l.__size_;
        if (v40 < 0)
        {
          if (v51 == -1) {
LABEL_186:
          }
            sub_100018C34();
          unint64_t v52 = __s1.__r_.__value_.__l.__size_ >= 2 ? 2 : __s1.__r_.__value_.__l.__size_;
        }
        else
        {
          if (v51 == -1) {
            goto LABEL_186;
          }
          unint64_t v52 = (v40 & 0xFE) != 0 ? 2 : v40;
          p_s1 = &__s1;
        }
        uint64_t v53 = (v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v67
            : (std::string *)v67.__r_.__value_.__r.__words[0];
        size_t v54 = v52 >= v51 ? v51 : v52;
        if (!memcmp(p_s1, v53, v54) && v52 == v51) {
          break;
        }
      }
    }
LABEL_159:
    if ((v40 & 0x80) != 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
  }
  if ((v81 & 0x80u) == 0) {
    size_t v56 = v81;
  }
  else {
    size_t v56 = (size_t)v80[1];
  }
  sub_10003BFB0((uint64_t)&v69, v56 + 1);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v57 = &v69;
  }
  else {
    int64_t v57 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if (v56)
  {
    if ((v81 & 0x80u) == 0) {
      int64_t v58 = v80;
    }
    else {
      int64_t v58 = (const void **)v80[0];
    }
    memmove(v57, v58, v56);
  }
  *(_WORD *)((char *)&v57->__r_.__value_.__l.__data_ + v56) = 47;
  uint64_t v59 = std::string::append(&v69, d_name);
  long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  BOOL v61 = sub_10003B030(&v70);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (!v61)
  {
    LOBYTE(v40) = *((unsigned char *)&__s1.__r_.__value_.__s + 23);
    goto LABEL_159;
  }
  closedir(v36);
  std::string::size_type v65 = sub_10003BED4((uint64_t *)&__s1, (char *)&v77, 0);
  std::string::basic_string(&cStr, &__s1, 0, v65, (std::allocator<char> *)&v69);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
LABEL_163:
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
LABEL_165:
  if ((char)v79 < 0) {
    operator delete(v77);
  }
  if ((char)v81 < 0) {
    operator delete((void *)v80[0]);
  }
LABEL_169:
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(cStr.__r_.__value_.__r.__words[2]) < 0)
  {
    if (cStr.__r_.__value_.__l.__size_)
    {
      p_std::string cStr = (std::string *)cStr.__r_.__value_.__r.__words[0];
LABEL_178:
      CFStringRef v63 = CFStringCreateWithCString(0, (const char *)p_cStr, 0x8000100u);
      if ((SHIBYTE(cStr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v63;
      }
    }
    else
    {
      CFStringRef v63 = 0;
    }
    operator delete(cStr.__r_.__value_.__l.__data_);
    return v63;
  }
  if (*((unsigned char *)&cStr.__r_.__value_.__s + 23))
  {
    p_std::string cStr = &cStr;
    goto LABEL_178;
  }
  return 0;
}

void sub_10003B908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v49 - 129) < 0) {
    operator delete(*(void **)(v49 - 152));
  }
  if (*(char *)(v49 - 105) < 0) {
    operator delete(*(void **)(v49 - 128));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t RDDoLocaleIdentifiersMatch(CFLocaleIdentifier localeIdentifier, const __CFString *a2)
{
  CFLocaleRef v3 = CFLocaleCreate(0, localeIdentifier);
  CFLocaleRef v4 = CFLocaleCreate(0, a2);
  if (v3)
  {
    CFLocaleRef v5 = v4;
    if (!v4)
    {
      uint64_t v12 = 0;
      goto LABEL_12;
    }
    CFStringRef Value = (const __CFString *)CFLocaleGetValue(v3, kCFLocaleLanguageCode);
    CFStringRef v7 = (const __CFString *)CFLocaleGetValue(v3, kCFLocaleCountryCode);
    CFStringRef v8 = (const __CFString *)CFLocaleGetValue(v5, kCFLocaleLanguageCode);
    CFStringRef v9 = (const __CFString *)CFLocaleGetValue(v5, kCFLocaleCountryCode);
    if (Value) {
      BOOL v10 = v8 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      goto LABEL_8;
    }
    CFStringRef v11 = v9;
    if (CFStringCompare(Value, v8, 0)) {
      goto LABEL_8;
    }
    if (v7) {
      BOOL v14 = v11 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14)
    {
      if (!((unint64_t)v7 | (unint64_t)v11)) {
        goto LABEL_22;
      }
    }
    else if (CFEqual(v7, v11))
    {
LABEL_22:
      uint64_t v12 = 1;
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v12 = 0;
LABEL_9:
    CFRelease(v5);
LABEL_12:
    CFRelease(v3);
    return v12;
  }
  return 0;
}

void RDString::RDString(RDString *this, CFStringRef theString, int a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (theString)
  {
    CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
    if (CStringPtr)
    {
      std::string::assign((std::string *)this, CStringPtr);
    }
    else
    {
      CFIndex Length = CFStringGetLength(theString);
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      std::string::resize((std::string *)this, MaximumSizeForEncoding + 2, 0);
      CFStringRef v9 = (char *)this;
      if (*((char *)this + 23) < 0) {
        CFStringRef v9 = *(char **)this;
      }
      CFStringGetCString(theString, v9, MaximumSizeForEncoding + 1, 0x8000100u);
      BOOL v10 = (const char *)this;
      if (*((char *)this + 23) < 0) {
        BOOL v10 = *(const char **)this;
      }
      std::string::size_type v11 = strlen(v10);
      std::string::resize((std::string *)this, v11, 0);
    }
    if (a3) {
      CFRelease(theString);
    }
  }
}

void sub_10003BCA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void RDInt::RDInt(RDInt *this, CFNumberRef number, int a3)
{
  if (number)
  {
    CFNumberGetValue(number, kCFNumberIntType, this);
    if (a3) {
      CFRelease(number);
    }
  }
  else
  {
    *(_DWORD *)this = 0;
  }
}

void RDURL::RDURL(RDURL *this, CFURLRef anURL, int a3)
{
  if (anURL)
  {
    CFStringRef v6 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    RDString::RDString(this, v6, 1);
    if (a3) {
      CFRelease(anURL);
    }
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
}

void sub_10003BD90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *RDURL::DirName(std::string *this)
{
  BOOL result = (std::string *)std::string::rfind(this, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (result != (std::string *)-1)
  {
    return std::string::erase(this, (std::string::size_type)result, 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

uint64_t sub_10003BE08@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = sub_10003BFB0(a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    CFStringRef v8 = (char *)result;
  }
  else {
    CFStringRef v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      CFStringRef v9 = a1;
    }
    else {
      CFStringRef v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  BOOL v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      std::string::size_type v11 = a2;
    }
    else {
      std::string::size_type v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t sub_10003BED4(uint64_t *a1, char *a2, unint64_t a3)
{
  uint64_t v3 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v3 = *a1;
    unint64_t v4 = a1[1];
  }
  else
  {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  int v5 = a2[23];
  if (v5 >= 0) {
    size_t v6 = a2;
  }
  else {
    size_t v6 = *(char **)a2;
  }
  if (v5 >= 0) {
    int64_t v7 = a2[23];
  }
  else {
    int64_t v7 = *((void *)a2 + 1);
  }
  if (v4 < a3) {
    return -1;
  }
  if (v7)
  {
    CFStringRef v8 = (void *)(v3 + a3);
    CFStringRef v9 = (char *)(v3 + v4);
    int64_t v10 = v4 - a3;
    if (v10 >= v7)
    {
      int v13 = *v6;
      do
      {
        uint64_t v14 = v10 - v7;
        if (v14 == -1) {
          break;
        }
        BOOL v15 = (char *)memchr(v8, v13, v14 + 1);
        if (!v15) {
          break;
        }
        std::string::size_type v11 = v15;
        if (!memcmp(v15, v6, v7)) {
          goto LABEL_15;
        }
        CFStringRef v8 = v11 + 1;
        int64_t v10 = v9 - (v11 + 1);
      }
      while (v10 >= v7);
    }
    std::string::size_type v11 = v9;
LABEL_15:
    if (v11 == v9) {
      return -1;
    }
    else {
      return (uint64_t)&v11[-v3];
    }
  }
  return a3;
}

uint64_t sub_10003BFB0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100009DA4();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_10003C460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 192), 8);
  _Block_object_dispose((const void *)(v10 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10003C4C0(id a1, BOOL a2, NSError *a3)
{
  if (!a2)
  {
    uint64_t v4 = RXOSLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Access to Contacts db not granted.", (uint8_t *)&v6, 2u);
    }
  }
  if (a3)
  {
    uint64_t v5 = RXOSLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 138412290;
      int64_t v7 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_10003C5A0(uint64_t a1, void *a2, unsigned char *a3)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))())
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) < 0x3E8uLL)
    {
      id v7 = objc_alloc_init((Class)NSMutableDictionary);
      if (objc_msgSend(objc_msgSend(a2, "givenName"), "length")) {
        objc_msgSend(v7, "setValue:forKey:", objc_msgSend(a2, "givenName"), @"\\contact-first");
      }
      if (objc_msgSend(objc_msgSend(a2, "familyName"), "length")) {
        objc_msgSend(v7, "setValue:forKey:", objc_msgSend(a2, "familyName"), @"\\contact-last");
      }
      if (objc_msgSend(objc_msgSend(a2, "middleName"), "length")) {
        objc_msgSend(v7, "setValue:forKey:", objc_msgSend(a2, "middleName"), @"\\contact-middle");
      }
      if (objc_msgSend(objc_msgSend(a2, "nickname"), "length")) {
        objc_msgSend(v7, "setValue:forKey:", objc_msgSend(a2, "nickname"), @"\\contact-nickname");
      }
      if ([v7 count])
      {
        [*(id *)(a1 + 32) addObject:v7];
        ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      }

      ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    }
    else
    {
      *a3 = 1;
    }
  }
}

void sub_10003C724(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned char *a5)
{
  if (a3 == 2)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v17 = [a4 countByEnumeratingWithState:&v24 objects:v34 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v25;
      do
      {
        for (CFIndex i = 0; i != v18; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v25 != v19) {
            objc_enumerationMutation(a4);
          }
          uint64_t v21 = *(void *)(*((void *)&v24 + 1) + 8 * i);
          ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
          CFStringRef v32 = @"\\contact-nickname";
          uint64_t v33 = v21;
          __int16 v22 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
          if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
             + *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) < 0x3E8uLL)
          {
            [*(id *)(a1 + 32) addObject:v22];
            ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
          }
          else
          {
            *a5 = 1;
          }
        }
        id v18 = [a4 countByEnumeratingWithState:&v24 objects:v34 count:16];
      }
      while (v18);
    }
  }
  else if (a3 == 1)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v9 = [a4 countByEnumeratingWithState:&v28 objects:v35 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v29;
      do
      {
        for (unint64_t j = 0; j != v10; unint64_t j = (char *)j + 1)
        {
          if (*(void *)v29 != v11) {
            objc_enumerationMutation(a4);
          }
          if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
             + *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) < 0x3E8uLL)
          {
            uint64_t v13 = *(void *)(*((void *)&v28 + 1) + 8 * (void)j);
            id v14 = objc_alloc_init((Class)NSPersonNameComponentsFormatter);
            id v15 = [v14 personNameComponentsFromString:v13];
            id v16 = objc_alloc_init((Class)NSMutableDictionary);
            if (objc_msgSend(objc_msgSend(v15, "givenName"), "length")) {
              objc_msgSend(v16, "setValue:forKey:", objc_msgSend(v15, "givenName"), @"\\contact-first");
            }
            if (objc_msgSend(objc_msgSend(v15, "middleName"), "length")) {
              objc_msgSend(v16, "setValue:forKey:", objc_msgSend(v15, "middleName"), @"\\contact-middle");
            }
            if (objc_msgSend(objc_msgSend(v15, "familyName"), "length")) {
              objc_msgSend(v16, "setValue:forKey:", objc_msgSend(v15, "familyName"), @"\\contact-last");
            }
            ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
            [*(id *)(a1 + 32) addObject:v16];
            ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
          }
          else
          {
            *a5 = 1;
          }
        }
        id v10 = [a4 countByEnumeratingWithState:&v28 objects:v35 count:16];
      }
      while (v10);
    }
  }
}

BOOL sub_10003CA6C(id a1)
{
  return 1;
}

void sub_10003CE34(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003CE60(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) _fetchContactsWithKeepGoing:*(void *)(a1 + 40)];
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a2 + 16);
  return v3(a2);
}

uint64_t sub_10003CEA8(void *a1)
{
  uint64_t v2 = a1[5];
  if ((*(unsigned int (**)(void))(a1[6] + 16))()) {
    uint64_t v3 = a1[4];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  return v4(v2, v3);
}

void sub_10003D2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003D338(id a1)
{
  qword_1000FEBB0 = (uint64_t)dispatch_queue_create("com.apple.embeddedspeech.FetchSerializer", 0);
  qword_1000FEBB8 = (uint64_t)objc_alloc_init((Class)NSMutableSet);
}

id sub_10003D378(uint64_t a1)
{
  id result = [(id)qword_1000FEBB8 containsObject:*(void *)(a1 + 32)];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(result + 24) = 1;
  }
  else
  {
    uint64_t v3 = (void *)qword_1000FEBB8;
    uint64_t v4 = *(void *)(a1 + 32);
    return [v3 addObject:v4];
  }
  return result;
}

void sub_10003D3E0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003D45C;
  block[3] = &unk_1000EDD68;
  block[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)qword_1000FEBB0, block);
}

id sub_10003D45C(uint64_t a1)
{
  uint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Marking fetch available for %@", (uint8_t *)&v5, 0xCu);
  }
  id result = [(id)qword_1000FEBB8 containsObject:*(void *)(a1 + 32)];
  if (result) {
    return [(id)qword_1000FEBB8 removeObject:*(void *)(a1 + 32)];
  }
  return result;
}

void sub_10003D51C(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    uint64_t v2 = RXOSLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v4 = 138412290;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Timed out waiting on %@", (uint8_t *)&v4, 0xCu);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + ++*(void *)(result + 24) = 1;
  }
}

uint64_t sub_10003D5FC(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_10003D690;
  v3[3] = &unk_1000EF568;
  uint64_t v7 = *(void *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 48);
  return (*(uint64_t (**)(uint64_t, void *))(v1 + 16))(v1, v3);
}

void sub_10003D690(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  uint64_t v2 = *(NSObject **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_10003D730;
  v3[3] = &unk_1000EF540;
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 40);
  dispatch_async(v2, v3);
}

void sub_10003D730(uint64_t a1)
{
  [+[NSProcessInfo processInfo] systemUptime];
  double v3 = v2 - *(double *)(a1 + 56);
  int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  uint64_t v5 = RXOSLog();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v6)
    {
      double v7 = *(double *)(a1 + 32);
      int v9 = 134218242;
      double v10 = v3 * 1000.0;
      __int16 v11 = 2112;
      double v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Fetch completed too late (%.2fsms) for %@", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    if (v6)
    {
      double v8 = *(double *)(a1 + 32);
      int v9 = 138412546;
      double v10 = v8;
      __int16 v11 = 2048;
      double v12 = v3 * 1000.0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Fetch completed for %@ in %.2fms", (uint8_t *)&v9, 0x16u);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(result + 24) = 1;
  }
}

uint64_t sub_10003D890(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if ((result & 1) == 0 || (objc_opt_class(), uint64_t result = objc_opt_isKindOfClass(), (result & 1) == 0))
  {
    *a4 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(result + 24) = 1;
  }
  return result;
}

void RDSoundInputiOS::RDSoundInputiOS(uint64_t a1, uint64_t a2)
{
  *(void *)RDSoundInput::RDSoundInput(a1, a2, 0, 0) = off_1000EF5E8;
  operator new();
}

void sub_10003D9F4(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[4];
  v1[4] = 0;
  if (v3) {
    operator delete();
  }
  *uint64_t v1 = off_1000EE130;
  RDAudioObject::~RDAudioObject((RDAudioObject *)(v1 + 1));
  _Unwind_Resume(a1);
}

id RDSoundInputiOS::StartRecording(id **this)
{
  double v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "RDSoundInputiOS::StartRecording", v4, 2u);
  }
  return [*this[4] startRecording];
}

id RDSoundInputiOS::StopRecording(id **this)
{
  double v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "RDSoundInputiOS::StopRecording", v4, 2u);
  }
  return [*this[4] stopRecording];
}

id RDSoundInputiOS::IsRecording(id **this)
{
  return [*this[4] isRecording];
}

void RDSoundInputiOS::~RDSoundInputiOS(id **this)
{
  *this = (id *)off_1000EF5E8;
  double v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "RDSoundInputiOS::Dealloc", v4, 2u);
  }
  [*this[4] stopRecording];

  uint64_t v3 = this[4];
  this[4] = 0;
  if (v3) {
    operator delete();
  }
  *this = (id *)off_1000EE130;
  RDAudioObject::~RDAudioObject((RDAudioObject *)(this + 1));
}

{
  uint64_t vars8;

  RDSoundInputiOS::~RDSoundInputiOS(this);
  operator delete();
}

void RDQSRSnippet::Dump(RDQSRSnippet *this, int a2, const char *a3)
{
  BOOL v6 = RXOSLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)this;
    uint64_t v7 = *((void *)this + 1);
    int v9 = (void *)((char *)this + 40);
    if (*((char *)this + 63) < 0) {
      int v9 = (void *)*v9;
    }
    int v10 = *((_DWORD *)this + 4);
    int v11 = *((_DWORD *)this + 5);
    int v12 = *((_DWORD *)this + 6);
    v13[0] = 68159746;
    v13[1] = a2;
    __int16 v14 = 2080;
    id v15 = "";
    __int16 v16 = 2080;
    id v17 = a3;
    __int16 v18 = 2048;
    uint64_t v19 = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v7;
    __int16 v22 = 2080;
    std::string::size_type v23 = v9;
    __int16 v24 = 1024;
    int v25 = v10;
    __int16 v26 = 1024;
    int v27 = v11;
    __int16 v28 = 1024;
    int v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%.*s%s[%llu:%llu] \"%s\" {%u;%u;%d}\n",
      (uint8_t *)v13,
      0x4Cu);
  }
}

void RDQSRSnippet::Dump(RDQSRSnippet *this, const char *a2, const RDQSRSnippet *a3)
{
  BOOL v6 = RXOSLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)this;
    uint64_t v7 = *((void *)this + 1);
    uint64_t v10 = *(void *)a3;
    uint64_t v9 = *((void *)a3 + 1);
    int v11 = (void *)((char *)this + 40);
    if (*((char *)this + 63) < 0) {
      int v11 = (void *)*v11;
    }
    int v12 = 136316418;
    uint64_t v13 = a2;
    __int16 v14 = 2048;
    uint64_t v15 = v8;
    __int16 v16 = 2048;
    uint64_t v17 = v7;
    __int16 v18 = 2048;
    uint64_t v19 = v10;
    __int16 v20 = 2048;
    uint64_t v21 = v9;
    __int16 v22 = 2080;
    std::string::size_type v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s [%llu:%llu]->[%llu:%llu] \"%s\"\n", (uint8_t *)&v12, 0x3Eu);
  }
}

double Concat@<D0>(const RDQSRSnippet *a1@<X0>, const RDQSRSnippet *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)a1;
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + ++*(void *)(result + 24) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 16) = *((_DWORD *)a2 + 5) + *((_DWORD *)a1 + 4);
  sub_10003BE08((const void **)a1 + 5, (const void **)a2 + 5, (uint64_t)&v7);
  double result = *(double *)&v7;
  *(_OWORD *)(a3 + 40) = v7;
  *(void *)(a3 + 56) = v8;
  return result;
}

void sub_10003DF00(_Unwind_Exception *a1)
{
  sub_10003EE88(v1);
  _Unwind_Resume(a1);
}

uint64_t RDQSRSnippetSet::AddSnippet(uint64_t **this, uint64_t a2, uint64_t a3, UInt8 *bytes, std::string::size_type numBytes, int a6, int a7)
{
  v20[0] = a2;
  v20[1] = a3;
  uint64_t v21 = 0;
  int v22 = a7;
  CFStringRef theString1 = CFStringCreateWithBytes(0, bytes, numBytes, 0x8000100u, 0);
  memset(&v24, 0, sizeof(v24));
  sub_10003EECC((uint64_t)v19, (uint64_t)v20);
  RDQSRSnippetSet::FixupSnippets(this, (uint64_t)v19);
  sub_10003EE88((uint64_t)v19);
  int v11 = sub_10003EFD4((uint64_t)this, (uint64_t)v20);
  uint64_t v13 = v12;
  if (v11 == v12) {
    goto LABEL_10;
  }
  if (a6 && CFStringCompare(theString1, (CFStringRef)v11[8], 0x100uLL))
  {
    __int16 v14 = (void *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v15 = v14;
        __int16 v14 = (void *)v14[1];
      }
      while (v14);
    }
    else
    {
      __int16 v16 = v13;
      do
      {
        uint64_t v15 = (void *)v16[2];
        BOOL v17 = *v15 == (void)v16;
        __int16 v16 = v15;
      }
      while (v17);
    }
    if (v15 == v11)
    {
LABEL_10:
      std::string::assign(&v24, (const std::string::value_type *)bytes, numBytes);
      HIDWORD(v21) = this[2];
      if (v11 != v13) {
        RDQSRSnippet::Dump((RDQSRSnippet *)(v11 + 4), 0, "Existing: ");
      }
      RDQSRSnippet::Dump((RDQSRSnippet *)v20, 0, "Insert:   ");
      sub_10003F148(this, (uint64_t)v20);
    }
  }
  return sub_10003EE88((uint64_t)v20);
}

void sub_10003E07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10003EE88((uint64_t)va);
  _Unwind_Resume(a1);
}

void RDQSRSnippetSet::FixupSnippets(uint64_t **a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 24) != 1)
  {
    if (*(void *)(a2 + 32))
    {
      unint64_t v3 = *(void *)(a2 + 8);
      if (v3 - *(void *)a2 != 10)
      {
        *(void *)(a2 + 8) = *(void *)a2 + 10;
        uint64_t v5 = sub_10003EFD4((uint64_t)a1, a2);
        BOOL v6 = v5;
        uint64_t v8 = v7;
        v50[0] = 0;
        v50[1] = 0;
        uint64_t v49 = (uint64_t *)v50;
        long long v46 = 0u;
        long long v47 = 0u;
        int v48 = 1065353216;
        long long v43 = 0u;
        long long v44 = 0u;
        int v45 = 1065353216;
        if (v5 != v7)
        {
          uint64_t v9 = v5;
          do
          {
            sub_10003EECC((uint64_t)&v40, (uint64_t)(v9 + 4));
            unint64_t v41 = v3;
            int v42 = -1;
            sub_10003F148(&v49, (uint64_t)&v40);
            RDQSRSnippet::Dump((RDQSRSnippet *)(v9 + 4), "Fixup:  ", (const RDQSRSnippet *)&v40);
            v51[0] = v9 + 5;
            sub_10003F30C((uint64_t)&v46, (unint64_t *)v9 + 5, (uint64_t)&unk_1000CB048, v51)[3] = v3;
            sub_10003EE88((uint64_t)&v40);
            uint64_t v10 = (uint64_t *)v9[1];
            if (v10)
            {
              do
              {
                int v11 = v10;
                uint64_t v10 = (uint64_t *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                int v11 = (uint64_t *)v9[2];
                BOOL v12 = *v11 == (void)v9;
                uint64_t v9 = v11;
              }
              while (!v12);
            }
            uint64_t v9 = v11;
          }
          while (v11 != v8);
        }
        sub_10003F52C(a1, v6, v8);
        __int16 v14 = (uint64_t *)(a1 + 1);
        uint64_t v13 = *a1;
        if (*a1 != (uint64_t *)(a1 + 1))
        {
          unint64_t v15 = *(void *)a2 + 10;
          char v16 = 1;
          do
          {
            unint64_t v17 = v13[4];
            if (v17 >= v15) {
              break;
            }
            if (*((_DWORD *)v13 + 14) == 1)
            {
              unint64_t v18 = v17 + 40;
              if (v16) {
                unint64_t v15 = v18;
              }
              CFStringRef v19 = (const __CFString *)v13[8];
              if (v19 && CFStringCompare(v19, *(CFStringRef *)(a2 + 32), 0x101uLL) == kCFCompareEqualTo)
              {
                sub_10003EECC((uint64_t)&v40, (uint64_t)(v13 + 4));
                unint64_t v22 = v40;
                if (v40 <= *(void *)a2) {
                  unint64_t v22 = *(void *)a2;
                }
                unint64_t v40 = v22;
                unint64_t v41 = v3;
                int v42 = -1;
                sub_10003F148(&v49, (uint64_t)&v40);
                RDQSRSnippet::Dump((RDQSRSnippet *)(v13 + 4), "SkipFix: ", (const RDQSRSnippet *)&v40);
                v51[0] = v13 + 5;
                sub_10003F30C((uint64_t)&v46, (unint64_t *)v13 + 5, (uint64_t)&unk_1000CB048, v51)[3] = v3;
                unint64_t v23 = v40;
                v51[0] = v13 + 4;
                sub_10003F30C((uint64_t)&v43, (unint64_t *)v13 + 4, (uint64_t)&unk_1000CB048, v51)[3] = v23;
                std::string v24 = (uint64_t *)v13[1];
                int v25 = v13;
                if (v24)
                {
                  do
                  {
                    __int16 v26 = v24;
                    std::string v24 = (uint64_t *)*v24;
                  }
                  while (v24);
                }
                else
                {
                  do
                  {
                    __int16 v26 = (uint64_t *)v25[2];
                    BOOL v12 = *v26 == (void)v25;
                    int v25 = v26;
                  }
                  while (!v12);
                }
                sub_100032B18(a1, v13);
                sub_10003EE88((uint64_t)(v13 + 4));
                operator delete(v13);
                sub_10003EE88((uint64_t)&v40);
                char v16 = 0;
                uint64_t v13 = v26;
                continue;
              }
              char v16 = 0;
            }
            __int16 v20 = (uint64_t *)v13[1];
            if (v20)
            {
              do
              {
                uint64_t v13 = v20;
                __int16 v20 = (uint64_t *)*v20;
              }
              while (v20);
            }
            else
            {
              do
              {
                uint64_t v21 = v13;
                uint64_t v13 = (uint64_t *)v13[2];
              }
              while ((uint64_t *)*v13 != v21);
            }
          }
          while (v13 != v14);
        }
        if (*((void *)&v44 + 1))
        {
          int v27 = *a1;
          if (*a1 != v14)
          {
            do
            {
              if ((unint64_t)v27[4] >= *(void *)a2) {
                break;
              }
              if (*((_DWORD *)v27 + 14) == 1 && sub_10001BAC8(&v43, (unint64_t *)v27 + 5))
              {
                sub_10003EECC((uint64_t)&v40, (uint64_t)(v27 + 4));
                unint64_t v41 = *(void *)a2;
                sub_10003F148(&v49, (uint64_t)&v40);
                RDQSRSnippet::Dump((RDQSRSnippet *)(v27 + 4), "Predecessor: ", (const RDQSRSnippet *)&v40);
                __int16 v28 = (uint64_t *)v27[1];
                int v29 = v27;
                if (v28)
                {
                  do
                  {
                    long long v30 = v28;
                    __int16 v28 = (uint64_t *)*v28;
                  }
                  while (v28);
                }
                else
                {
                  do
                  {
                    long long v30 = (uint64_t *)v29[2];
                    BOOL v12 = *v30 == (void)v29;
                    int v29 = v30;
                  }
                  while (!v12);
                }
                sub_100032B18(a1, v27);
                sub_10003EE88((uint64_t)(v27 + 4));
                operator delete(v27);
                sub_10003EE88((uint64_t)&v40);
              }
              else
              {
                long long v31 = (uint64_t *)v27[1];
                if (v31)
                {
                  do
                  {
                    long long v30 = v31;
                    long long v31 = (uint64_t *)*v31;
                  }
                  while (v31);
                }
                else
                {
                  do
                  {
                    long long v30 = (uint64_t *)v27[2];
                    BOOL v12 = *v30 == (void)v27;
                    int v27 = v30;
                  }
                  while (!v12);
                }
              }
              int v27 = v30;
            }
            while (v30 != v14);
          }
        }
        if (*((void *)&v47 + 1))
        {
          CFStringRef v32 = *a1;
          if (*a1 != v14)
          {
            do
            {
              if (*((_DWORD *)v32 + 14) == 1)
              {
                uint64_t v33 = sub_10001BAC8(&v46, (unint64_t *)v32 + 4);
                if (v33)
                {
                  sub_10003EECC((uint64_t)&v40, (uint64_t)(v32 + 4));
                  unint64_t v34 = v33[3] + 10;
                  if (v41 > v34) {
                    unint64_t v34 = v41;
                  }
                  unint64_t v40 = v33[3];
                  unint64_t v41 = v34;
                  sub_10003F148(&v49, (uint64_t)&v40);
                  RDQSRSnippet::Dump((RDQSRSnippet *)(v32 + 4), "Followup: ", (const RDQSRSnippet *)&v40);
                  unint64_t v35 = v41;
                  v51[0] = v32 + 5;
                  sub_10003F30C((uint64_t)&v46, (unint64_t *)v32 + 5, (uint64_t)&unk_1000CB048, v51)[3] = v35;
                  int v36 = (uint64_t *)v32[1];
                  int v37 = v32;
                  if (v36)
                  {
                    do
                    {
                      unint64_t v38 = v36;
                      int v36 = (uint64_t *)*v36;
                    }
                    while (v36);
                  }
                  else
                  {
                    do
                    {
                      unint64_t v38 = (uint64_t *)v37[2];
                      BOOL v12 = *v38 == (void)v37;
                      int v37 = v38;
                    }
                    while (!v12);
                  }
                  sub_100032B18(a1, v32);
                  sub_10003EE88((uint64_t)(v32 + 4));
                  operator delete(v32);
                  sub_10003EE88((uint64_t)&v40);
                  goto LABEL_70;
                }
                RDQSRSnippet::Dump((RDQSRSnippet *)(v32 + 4), 0, "Ignore:   ");
              }
              int64_t v39 = (uint64_t *)v32[1];
              if (v39)
              {
                do
                {
                  unint64_t v38 = v39;
                  int64_t v39 = (uint64_t *)*v39;
                }
                while (v39);
              }
              else
              {
                do
                {
                  unint64_t v38 = (uint64_t *)v32[2];
                  BOOL v12 = *v38 == (void)v32;
                  CFStringRef v32 = v38;
                }
                while (!v12);
              }
LABEL_70:
              CFStringRef v32 = v38;
            }
            while (v38 != v14);
          }
        }
        sub_10003E69C((uint64_t *)a1, v49, v50);
        sub_10001B7F8((uint64_t)&v43);
        sub_10001B7F8((uint64_t)&v46);
        sub_10003EF78((uint64_t)&v49, v50[0]);
      }
    }
  }
}

void sub_10003E638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  sub_10001B7F8((uint64_t)va);
  sub_10001B7F8((uint64_t)va1);
  sub_10003EF78(v11 - 128, *(void **)(v11 - 120));
  _Unwind_Resume(a1);
}

uint64_t *sub_10003E69C(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      double result = sub_10003F594(v5, v6, (uint64_t)(v4 + 4));
      long long v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          long long v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void RDQSRSnippetToXPC::Dump(RDQSRSnippetToXPC *this)
{
  double v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Partial\n", buf, 2u);
  }
  unint64_t v3 = (RDQSRSnippetToXPC *)*((void *)this + 5);
  if (v3 != (RDQSRSnippetToXPC *)((char *)this + 48))
  {
    do
    {
      RDQSRSnippet::Dump((RDQSRSnippetToXPC *)((char *)v3 + 32), 2, "");
      uint64_t v4 = (RDQSRSnippetToXPC *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = *(RDQSRSnippetToXPC **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (RDQSRSnippetToXPC *)*((void *)v3 + 2);
          BOOL v6 = *(void *)v5 == (void)v3;
          unint64_t v3 = v5;
        }
        while (!v6);
      }
      unint64_t v3 = v5;
    }
    while (v5 != (RDQSRSnippetToXPC *)((char *)this + 48));
  }
  long long v7 = RXOSLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Complete\n", v11, 2u);
  }
  uint64_t v8 = (RDQSRSnippetToXPC *)*((void *)this + 2);
  if (v8 != (RDQSRSnippetToXPC *)((char *)this + 24))
  {
    do
    {
      RDQSRSnippet::Dump((RDQSRSnippetToXPC *)((char *)v8 + 32), 2, "");
      BOOL v9 = (RDQSRSnippetToXPC *)*((void *)v8 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          BOOL v9 = *(RDQSRSnippetToXPC **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (RDQSRSnippetToXPC *)*((void *)v8 + 2);
          BOOL v6 = *(void *)v10 == (void)v8;
          uint64_t v8 = v10;
        }
        while (!v6);
      }
      uint64_t v8 = v10;
    }
    while (v10 != (RDQSRSnippetToXPC *)((char *)this + 24));
  }
}

void RDQSRSnippetToXPC::operator()(uint64_t a1, RDQSRSnippet *this)
{
  RDQSRSnippet::Dump(this, 0, "Snippet: ");
  uint64_t v4 = (uint64_t **)(a1 + 40);
  while (1)
  {
    if (!*(void *)(a1 + 56))
    {
      RDQSRSnippetToXPC::PushSnippets((RDQSRSnippetToXPC *)a1);
      *(void *)&long long v12 = *(void *)this;
      *((void *)&v12 + 1) = v12;
      uint64_t v13 = 0;
      int v14 = 0;
      long long v15 = 0u;
      long long v16 = 0u;
      sub_10003F7D4((uint64_t **)(a1 + 40), &v12);
      sub_10003EE88((uint64_t)&v12);
      unint64_t v6 = *((void *)this + 1);
      *(void *)(a1 + 8) = v6;
LABEL_6:
      unint64_t v7 = v6;
      goto LABEL_7;
    }
    uint64_t v5 = *v4;
    if ((unint64_t)(*v4)[5] >= *(void *)this) {
      break;
    }
    sub_100032B18((uint64_t **)(a1 + 40), *v4);
    sub_10003EE88((uint64_t)(v5 + 4));
    operator delete(v5);
  }
  unint64_t v7 = *((void *)this + 1);
  unint64_t v6 = *(void *)(a1 + 8);
  if (v7 > v6)
  {
    sub_10003E69C((uint64_t *)(a1 + 40), *(void **)(a1 + 16), (void *)(a1 + 24));
    sub_10003EF78(a1 + 16, *(void **)(a1 + 24));
    *(void *)(a1 + ++*(void *)(result + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = a1 + 24;
    unint64_t v6 = *((void *)this + 1);
    *(void *)(a1 + 8) = v6;
    goto LABEL_6;
  }
LABEL_7:
  if (v7 == v6) {
    uint64_t v4 = (uint64_t **)(a1 + 16);
  }
  uint64_t v8 = *(void **)(a1 + 40);
  if (v8 != (void *)(a1 + 48))
  {
    do
    {
      if (v8[5] == *(void *)this)
      {
        Concat((const RDQSRSnippet *)(v8 + 4), this, (uint64_t)&v12);
        sub_10003F7D4(v4, &v12);
        sub_10003EE88((uint64_t)&v12);
      }
      BOOL v9 = (void *)v8[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          BOOL v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v8[2];
          BOOL v11 = *v10 == (void)v8;
          uint64_t v8 = v10;
        }
        while (!v11);
      }
      uint64_t v8 = v10;
    }
    while (v10 != (void *)(a1 + 48));
  }
  RDQSRSnippetToXPC::Dump((RDQSRSnippetToXPC *)a1);
}

void sub_10003EA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void RDQSRSnippetToXPC::PushSnippets(RDQSRSnippetToXPC *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    unint64_t v3 = (uint64_t **)((char *)this + 16);
    if (v1 != 1)
    {
      uint64_t v4 = *v3;
      uint64_t v5 = (uint64_t *)(*v3)[1];
      if (v5)
      {
        do
        {
          unint64_t v6 = v5;
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unint64_t v6 = (uint64_t *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v8 = (char *)this + 24;
      if (v6 != (uint64_t *)((char *)this + 24))
      {
        while (1)
        {
          BOOL v9 = *v3;
          if (*v3 == v6) {
            goto LABEL_42;
          }
          uint64_t v10 = *((unsigned __int8 *)v6 + 95);
          size_t v11 = v6[10];
          if ((v10 & 0x80u) == 0) {
            uint64_t v12 = *((unsigned __int8 *)v6 + 95);
          }
          else {
            uint64_t v12 = v6[10];
          }
          while (1)
          {
            uint64_t v13 = *((unsigned __int8 *)v9 + 95);
            int v14 = (char)v13;
            if ((v13 & 0x80u) != 0) {
              uint64_t v13 = v9[10];
            }
            if (v12 != v13) {
              goto LABEL_26;
            }
            long long v15 = v14 >= 0 ? v9 + 9 : (uint64_t *)v9[9];
            if ((v10 & 0x80) != 0) {
              break;
            }
            if (!v10) {
              goto LABEL_33;
            }
            long long v16 = (unsigned __int8 *)(v6 + 9);
            uint64_t v17 = v10;
            while (*v16 == *(unsigned __int8 *)v15)
            {
              ++v16;
              long long v15 = (uint64_t *)((char *)v15 + 1);
              if (!--v17) {
                goto LABEL_33;
              }
            }
LABEL_26:
            uint64_t v18 = (uint64_t *)v9[1];
            if (v18)
            {
              do
              {
                uint64_t v19 = v18;
                uint64_t v18 = (uint64_t *)*v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                uint64_t v19 = (uint64_t *)v9[2];
                BOOL v7 = *v19 == (void)v9;
                BOOL v9 = v19;
              }
              while (!v7);
            }
            BOOL v9 = v19;
            if (v19 == v6) {
              goto LABEL_42;
            }
          }
          if (memcmp((const void *)v6[9], v15, v11)) {
            goto LABEL_26;
          }
LABEL_33:
          __int16 v20 = (uint64_t *)v6[1];
          uint64_t v21 = v6;
          if (v20)
          {
            do
            {
              unint64_t v22 = v20;
              __int16 v20 = (uint64_t *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              unint64_t v22 = (uint64_t *)v21[2];
              BOOL v7 = *v22 == (void)v21;
              uint64_t v21 = v22;
            }
            while (!v7);
          }
          sub_100032B18(v3, v6);
          sub_10003EE88((uint64_t)(v6 + 4));
          operator delete(v6);
          unint64_t v23 = (uint64_t *)*v22;
          if (*v22)
          {
            do
            {
              unint64_t v6 = v23;
              unint64_t v23 = (uint64_t *)v23[1];
            }
            while (v23);
          }
          else
          {
            do
            {
              unint64_t v6 = (uint64_t *)v22[2];
              BOOL v7 = *v6 == (void)v22;
              unint64_t v22 = v6;
            }
            while (v7);
          }
LABEL_42:
          std::string v24 = (uint64_t *)v6[1];
          if (v24)
          {
            do
            {
              int v25 = v24;
              std::string v24 = (uint64_t *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              int v25 = (uint64_t *)v6[2];
              BOOL v7 = *v25 == (void)v6;
              unint64_t v6 = v25;
            }
            while (!v7);
          }
          unint64_t v6 = v25;
          if (v25 == (uint64_t *)v8)
          {
            uint64_t v1 = *((void *)this + 4);
            break;
          }
        }
      }
      if (v1 != 1) {
        goto LABEL_57;
      }
    }
    size_t count = xpc_array_get_count(*(xpc_object_t *)this);
    if (count
      && (xpc_object_t value = xpc_array_get_value(*(xpc_object_t *)this, count - 1),
          xpc_object_t v28 = xpc_dictionary_get_value(value, kRDKeyText),
          xpc_array_get_count(v28) == 1))
    {
      xpc_dictionary_set_uint64(value, kRDKeyEndTime, (*v3)[5]);
      xpc_array_get_string(v28, 0);
      std::operator+<char>();
      if (v41 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      xpc_array_set_string(v28, 0, p_p);
      long long v31 = (void *)*((void *)this + 3);
      long long v30 = (void *)((char *)this + 24);
      sub_10003EF78((uint64_t)v3, v31);
      *(v30 - 1) = v30;
      *long long v30 = 0;
      v30[1] = 0;
      if (v41 < 0) {
        operator delete(__p);
      }
    }
    else
    {
LABEL_57:
      xpc_object_t v32 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v32, kRDKeyStartTime, *(void *)(*((void *)this + 2) + 32));
      xpc_dictionary_set_uint64(v32, kRDKeyEndTime, *(void *)(*((void *)this + 2) + 40));
      xpc_object_t v33 = xpc_array_create(0, 0);
      unint64_t v34 = (void *)*((void *)this + 2);
      unint64_t v35 = (char *)this + 24;
      if (v34 != (void *)((char *)this + 24))
      {
        do
        {
          int v36 = (const char *)(v34 + 9);
          if (*((char *)v34 + 95) < 0) {
            int v36 = *(const char **)v36;
          }
          xpc_object_t v37 = xpc_string_create(v36);
          xpc_array_append_value(v33, v37);
          xpc_release(v37);
          unint64_t v38 = (char *)v34[1];
          if (v38)
          {
            do
            {
              int64_t v39 = v38;
              unint64_t v38 = *(char **)v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              int64_t v39 = (char *)v34[2];
              BOOL v7 = *(void *)v39 == (void)v34;
              unint64_t v34 = v39;
            }
            while (!v7);
          }
          unint64_t v34 = v39;
        }
        while (v39 != v35);
      }
      xpc_dictionary_set_value(v32, kRDKeyText, v33);
      xpc_release(v33);
      xpc_array_append_value(*(xpc_object_t *)this, v32);
      xpc_release(v32);
      sub_10003EF78((uint64_t)v3, *((void **)this + 3));
      *((void *)this + 3) = 0;
      *((void *)this + 4) = 0;
      *((void *)this + 2) = v35;
    }
  }
}

void sub_10003EE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RDQSRSnippetToXPC::Result(RDQSRSnippetToXPC *this)
{
  return *(void *)this;
}

uint64_t sub_10003EE88(uint64_t a1)
{
  double v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

uint64_t sub_10003EECC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(void *)(result + 24) = *(_DWORD *)(a2 + 24);
  unint64_t v3 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if ((*(char *)(a2 + 63) & 0x80000000) == 0)
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    if (!v3) {
      return a1;
    }
    goto LABEL_5;
  }
  sub_10006770C((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  unint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
LABEL_5:
  }
    CFRetain(v3);
  return a1;
}

void sub_10003EF5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003EF78(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10003EF78(a1, *a2);
    sub_10003EF78(a1, a2[1]);
    sub_10003EE88((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void *sub_10003EFD4(uint64_t a1, uint64_t a2)
{
  double v2 = (void *)(a1 + 8);
  unint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  while ((sub_10003F0CC(v5, a2, (uint64_t)(v3 + 4)) & 1) != 0)
  {
    double v2 = v3;
LABEL_7:
    unint64_t v3 = (void *)*v3;
    if (!v3) {
      return v2;
    }
  }
  if (sub_10003F0CC(v5, (uint64_t)(v3 + 4), a2))
  {
    ++v3;
    goto LABEL_7;
  }
  uint64_t v8 = (void *)*v3;
  unint64_t v6 = v3;
  if (*v3)
  {
    unint64_t v6 = v3;
    do
    {
      int v9 = sub_10003F0CC(v5, (uint64_t)(v8 + 4), a2);
      uint64_t v10 = v8 + 1;
      if (!v9)
      {
        uint64_t v10 = v8;
        unint64_t v6 = v8;
      }
      uint64_t v8 = (void *)*v10;
    }
    while (*v10);
  }
  size_t v11 = (void *)v3[1];
  if (v11)
  {
    do
    {
      int v12 = sub_10003F0CC(v5, a2, (uint64_t)(v11 + 4));
      uint64_t v13 = v11 + 1;
      if (v12) {
        uint64_t v13 = v11;
      }
      size_t v11 = (void *)*v13;
    }
    while (*v13);
  }
  return v6;
}

unint64_t sub_10003F0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 < *(void *)a3) {
    return 1;
  }
  if (*(void *)a2 > *(void *)a3) {
    return 0;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a3 + 8);
  if (v4 < v5) {
    return 1;
  }
  if (v4 > v5) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  unsigned int v7 = *(_DWORD *)(a3 + 16);
  if (v6 < v7) {
    return 1;
  }
  if (v6 > v7) {
    return 0;
  }
  unint64_t result = *(void *)(a2 + 32);
  if (result)
  {
    CFStringRef v8 = *(const __CFString **)(a3 + 32);
    if (v8) {
      return (unint64_t)CFStringCompare((CFStringRef)result, v8, 0x101uLL) >> 63;
    }
    return 0;
  }
  return result;
}

uint64_t *sub_10003F148(uint64_t **a1, uint64_t a2)
{
  sub_10003F1CC((uint64_t)a1, a2, (uint64_t)v7);
  unint64_t v3 = (uint64_t **)sub_10003F238((uint64_t)a1, &v6, (uint64_t)(v7[0] + 4));
  sub_10001AD30(a1, v6, v3, v7[0]);
  unint64_t v4 = v7[0];
  v7[0] = 0;
  sub_10003F2B4((uint64_t)v7, 0);
  return v4;
}

void sub_10003F1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003F2B4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10003F1CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_10003EECC((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10003F220(_Unwind_Exception *a1)
{
  sub_10003F2B4(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_10003F238(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = v4;
        if (!sub_10003F0CC(v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        unint64_t v4 = (void *)*v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      unint64_t v4 = (void *)v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void sub_10003F2B4(uint64_t a1, uint64_t a2)
{
  double v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10003EE88((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *sub_10003F30C(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (CFIndex i = *v10; i; CFIndex i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  CFIndex i = operator new(0x20uLL);
  *CFIndex i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100018F74(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  __int16 v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *CFIndex i = *v20;
LABEL_38:
    *__int16 v20 = i;
    goto LABEL_39;
  }
  *CFIndex i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    __int16 v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10003F518(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003F52C(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    do
    {
      uint64_t v6 = sub_100032B18(a1, v4);
      sub_10003EE88((uint64_t)(v4 + 4));
      operator delete(v4);
      unint64_t v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t *sub_10003F594(uint64_t **a1, void *a2, uint64_t a3)
{
  sub_10003F1CC((uint64_t)a1, a3, (uint64_t)v9);
  uint64_t v5 = (uint64_t **)sub_10003F624(a1, a2, &v8, (uint64_t)(v9[0] + 4));
  sub_10001AD30(a1, v8, v5, v9[0]);
  uint64_t v6 = v9[0];
  v9[0] = 0;
  sub_10003F2B4((uint64_t)v9, 0);
  return v6;
}

void sub_10003F60C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003F2B4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_10003F624(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v6 = a2;
  if (a1 + 1 != a2 && (sub_10003F0CC((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a4) & 1) != 0)
  {
    return sub_10003F754((uint64_t)a1, a3, a4);
  }
  if ((void *)*a1 == v6)
  {
    uint64_t v10 = v6;
LABEL_17:
    if (*v6)
    {
      *a3 = v10;
      return v10 + 1;
    }
    else
    {
      *a3 = v6;
    }
    return v6;
  }
  uint8x8_t v9 = (void *)*v6;
  if (*v6)
  {
    do
    {
      uint64_t v10 = v9;
      uint8x8_t v9 = (void *)v9[1];
    }
    while (v9);
  }
  else
  {
    size_t v11 = v6;
    do
    {
      uint64_t v10 = (void *)v11[2];
      BOOL v12 = *v10 == (void)v11;
      size_t v11 = v10;
    }
    while (v12);
  }
  if ((sub_10003F0CC((uint64_t)(a1 + 2), a4, (uint64_t)(v10 + 4)) & 1) == 0) {
    goto LABEL_17;
  }
  return sub_10003F238((uint64_t)a1, a3, a4);
}

void *sub_10003F754(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = v4;
        if (sub_10003F0CC(v7, (uint64_t)(v4 + 4), a3)) {
          break;
        }
        unint64_t v4 = (void *)*v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      unint64_t v4 = (void *)v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t *sub_10003F7D4(uint64_t **a1, long long *a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 1);
  uint64_t v5 = (char *)operator new(0x60uLL);
  *((void *)v5 + 6) = *((void *)a2 + 2);
  *(_OWORD *)(v5 + 72) = *(long long *)((char *)a2 + 40);
  long long v6 = *a2;
  *((_DWORD *)v5 + 14) = *((_DWORD *)a2 + 6);
  *((void *)v5 + 8) = *((void *)a2 + 4);
  *((void *)v5 + 11) = *((void *)a2 + 7);
  *((_OWORD *)v5 + 2) = v6;
  v11[0] = (uint64_t *)v5;
  v11[1] = v4;
  a2[2] = 0u;
  a2[3] = 0u;
  char v12 = 1;
  uint64_t v7 = (uint64_t **)sub_10003F238((uint64_t)a1, &v10, (uint64_t)(v5 + 32));
  sub_10001AD30(a1, v10, v7, v11[0]);
  uint64_t v8 = v11[0];
  v11[0] = 0;
  sub_10003F2B4((uint64_t)v11, 0);
  return v8;
}

void sub_10003F890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003F2B4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void RDUserProfile::RDUserProfile(_DWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  *a1 = a4;
  operator new();
}

void sub_10003FDE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void RDUserProfile::updateUserProfileWithPersonalData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == 1)
  {
    double v2 = RXOSLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "preHeatUserProfile not allowed for inline mode", v4, 2u);
    }
  }
  else
  {
    uint64_t v3 = **(void ***)(a1 + 8);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3321888768;
    _OWORD v5[2] = sub_10003FF34;
    v5[3] = &unk_1000EF628;
    sub_100040404((uint64_t)v6, a2);
    [v3 updateUserProfileWithPersonalData:v5];
    sub_100039684(v6);
  }
}

void sub_10003FF18(_Unwind_Exception *a1)
{
  sub_100039684(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003FF34(uint64_t a1, char a2)
{
  return sub_10003FF3C(a1 + 32, a2);
}

uint64_t sub_10003FF3C(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100006F40();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_10003FF90(uint64_t a1, uint64_t a2)
{
  return sub_100040404(a1 + 32, a2 + 32);
}

void *sub_10003FF9C(uint64_t a1)
{
  return sub_100039684((void *)(a1 + 32));
}

void RDUserProfile::writeUserProfileToCache(RDUserProfile *this)
{
  if (*(_DWORD *)this == 1)
  {
    uint64_t v1 = RXOSLog();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "writeUserProfileToCache not allowed for inline mode", v3, 2u);
    }
  }
  else
  {
    uint64_t v2 = (void *)**((void **)this + 1);
    _[v2 writeUserProfileToCache];
  }
}

void RDUserProfile::~RDUserProfile(id **this)
{
  uint64_t v2 = this[1];
  this[1] = 0;
  if (v2) {
    operator delete();
  }
}

void RDUserProfile::addPhraseToUserProfile(RDUserProfile *this, const __CFArray *a2, const __CFString *a3, const __CFString *a4)
{
  if (!a2 && CFArrayGetCount(0) <= 0)
  {
    uint8x8_t v9 = RXOSLog();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v10 = "addPhraseToUserProfile: Null phrase being added to profile. Ignoring..";
    size_t v11 = buf;
    goto LABEL_12;
  }
  if (!a3 || !a4)
  {
    uint8x8_t v9 = RXOSLog();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      return;
    }
    __int16 v12 = 0;
    uint64_t v10 = "addPhraseToUserProfile: NULL NTString or WordTag when adding to profile. Ignoring..";
    size_t v11 = (uint8_t *)&v12;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v10, v11, 2u);
    return;
  }
  uint64_t v8 = (void *)**((void **)this + 1);
  [v8 addPhraseToUserProfileWithTemplateName:a3 wordTag:a4 phrase:a2];
}

void RDUserProfile::addPhraseAndPronsToUserProfile(RDUserProfile *this, const __CFString *a2, const __CFArray *a3, const __CFString *a4, const __CFString *a5)
{
  if (!a2)
  {
    long long v6 = RXOSLog();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      return;
    }
    __int16 v10 = 0;
    uint64_t v7 = "addPhraseToUserProfile: Null phrase being added to profile. Ignoring..";
    uint64_t v8 = (uint8_t *)&v10;
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    return;
  }
  if (!a4 || !a5)
  {
    long long v6 = RXOSLog();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      return;
    }
    __int16 v9 = 0;
    uint64_t v7 = "addPhraseToUserProfile: NULL NTString or WordTag when adding to profile. Ignoring..";
    uint64_t v8 = (uint8_t *)&v9;
    goto LABEL_11;
  }
  uint64_t v5 = (void *)**((void **)this + 1);
  _[v5 addPhraseToUserProfileWithIPAprons:a4 wordTag:a5 phrase:a2 pronsArray:a3];
}

void RDUserProfile::addWordCombinations(id **this, const __CFArray *a2, const __CFString *a3, const __CFString *a4)
{
  if (!a2 && CFArrayGetCount(0) <= 0)
  {
    __int16 v10 = RXOSLog();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    size_t v11 = "addWordCombinations: Null phrase being added to profile. Ignoring..";
    __int16 v12 = buf;
    goto LABEL_15;
  }
  if (!a3 || !a4)
  {
    __int16 v10 = RXOSLog();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      return;
    }
    __int16 v13 = 0;
    size_t v11 = "addWordCombinations: NULL NTString or WordTag when adding to profile. Ignoring..";
    __int16 v12 = (uint8_t *)&v13;
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v11, v12, 2u);
    return;
  }
  for (uint64_t i = 1; i != 4; ++i)
  {
    if ((uint64_t)((uint64_t)&_mh_execute_header
                 + ((unint64_t)([(__CFArray *)a2 count] - i) << 32)) >= 1)
    {
      uint64_t v9 = 0;
      do
        objc_msgSend(*this[1], "addPhraseToUserProfileWithTemplateName:wordTag:phrase:", a3, a4, -[__CFArray subarrayWithRange:](a2, "subarrayWithRange:", v9++, i));
      while (v9 < (int)([(__CFArray *)a2 count] - i + 1));
    }
  }
}

id RDUserProfile::removeAllWords(id **this)
{
  return _[*this[1] removeAllWords];
}

id RDUserProfile::removeLmeDataForTemplateName(id **this, const __CFString *a2)
{
  return _[*this[1] removeLmeDataForTemplateName:a2];
}

id RDUserProfile::copyDataProfile(id **this)
{
  id result = [*this[1] dataProfile];
  if (result)
  {
    return result;
  }
  return result;
}

uint64_t sub_100040404(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(void *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(void *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(void *)(result + 24) = 0;
  }
  return a1;
}

RDASRWrapper *RDASRWSpeechRecognizerCreate(uint64_t a1, int a2, uint64_t a3)
{
  long long v6 = objc_alloc_init(RDASRWrapper);
  if (RXIsSpeechSPIEnabled()) {
    uint64_t v7 = RDSAPICSpeechAnalyzerCreate(a3);
  }
  else {
    uint64_t v7 = RDEARCSpeechRecognizerCreate(a1, a2);
  }
  [(RDASRWrapper *)v6 setRecognizer:v7];
  uint64_t v8 = RXOSLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int16 v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "ASRWrapper created recognizer", v10, 2u);
  }

  return v6;
}

id RDASRWSpeechRecognizerCreateRecognitionBuffer(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = a1;
  [v9 mapDelegate:a5];
  int v10 = RXIsSpeechSPIEnabled();
  id v11 = [v9 recognizer];
  id v12 = [v9 recognitionDelegate];
  if (v10) {
    uint64_t RecognitionBuffer = (uint64_t)RDSAPICSpeechAnalyzerCreateRecognitionBuffer(v11, a2, a3, a4, (uint64_t)v12);
  }
  else {
    uint64_t RecognitionBuffer = RDEARCSpeechRecognizerCreateRecognitionBuffer(v11, a2, a3, a4, (uint64_t)v12);
  }
  [v9 setRecognitionBuffer:RecognitionBuffer];
  float v14 = RXOSLog();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)unint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "ASRWrapper created audio buffer", v17, 2u);
  }

  id v15 = [v9 recognitionBuffer];
  return v15;
}

uint64_t RDASRWSpeechRecognitionAudioBufferNewUtteranceBegins(uint64_t a1)
{
  uint64_t result = RXIsSpeechSPIEnabled();
  if (result)
  {
    return RDSAPICSpeechAnalyzerNewUtteranceBegins(a1);
  }
  return result;
}

id RDASRWSpeechRecognitionAudioBufferAddAudioSamples(void *a1, uint64_t a2, uint64_t a3)
{
  if (RXIsSpeechSPIEnabled())
  {
    return RDSAPICSpeechAnalyzerAddAudioSamples(a1, a2, a3);
  }
  else
  {
    return RDEARCSpeechRecognitionAudioBufferAddAudioSamples(a1, a2, a3);
  }
}

void RDASRWSpeechRecognitionAudioBufferEndAudio(uint64_t a1)
{
  if (RXIsSpeechSPIEnabled()) {
    RDSAPICSpeechAnalyzerEndAudio(a1);
  }
  else {
    RDEARCSpeechRecognitionAudioBufferEndAudio(a1);
  }
  uint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ASRWrapper end audio", v3, 2u);
  }
}

void RDASRWSpeechRecognitionAudioBufferCancelRecognition(uint64_t a1)
{
  if (RXIsSpeechSPIEnabled()) {
    RDSAPICSpeechAnalyzerCancelRecognition(a1);
  }
  else {
    RDEARCSpeechRecognitionAudioBufferCancelRecognition(a1);
  }
  uint64_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ASRWrapper cancel audio", v3, 2u);
  }
}

id RDASRWSpeechRecognizerSetDetectUtterances(void *a1, uint64_t a2)
{
  int v4 = RXIsSpeechSPIEnabled();
  id v5 = [a1 recognizer];
  if (v4)
  {
    return (id)RDSAPICSpeechAnalyzerSetDetectUtterances(v5, a2);
  }
  else
  {
    return RDEARCSpeechRecognizerSetDetectUtterances(v5, a2);
  }
}

id RDASRWSpeechRecognizerSetHighPriority(void *a1, uint64_t a2)
{
  int v4 = RXIsSpeechSPIEnabled();
  id v5 = [a1 recognizer];
  if (v4)
  {
    return (id)RDSAPICSpeechAnalyzerSetHighPriority(v5, a2);
  }
  else
  {
    return RDEARCSpeechRecognizerSetHighPriority(v5, a2);
  }
}

id RDASRWSpeechRecognizerSetFarField(void *a1, uint64_t a2)
{
  int v4 = RXIsSpeechSPIEnabled();
  id v5 = [a1 recognizer];
  if (v4)
  {
    return (id)RDSAPICSpeechAnalyzerSetFarField(v5, a2);
  }
  else
  {
    return RDEARCSpeechRecognizerSetFarField(v5, a2);
  }
}

id RDASRWSpeechRecognizerUpdateUserProfileData(void *a1, uint64_t a2)
{
  int v4 = RXIsSpeechSPIEnabled();
  id v5 = [a1 recognizer];
  if (v4)
  {
    return RDSAPICSpeechAnalyzerUpdateUserProfileData(v5, a2);
  }
  else
  {
    return RDEARCSpeechRecognizerUpdateUserProfileData(v5, a2);
  }
}

CFTypeRef RDASRWSpeechRecognizerCopyUserProfileData(void *a1)
{
  int v2 = RXIsSpeechSPIEnabled();
  id v3 = [a1 recognizer];
  if (v2)
  {
    return RDSAPICSpeechAnalyzerCopyUserProfileData(v3);
  }
  else
  {
    return RDEARCSpeechRecognizerCopyUserProfileData(v3);
  }
}

id RDASRWSpeechRecognizerSetUserProfileData(void *a1, uint64_t a2)
{
  int v4 = RXIsSpeechSPIEnabled();
  id v5 = [a1 recognizer];
  if (v4)
  {
    return RDSAPICSpeechAnalyzerSetUserProfileData(v5, a2);
  }
  else
  {
    return RDEARCSpeechRecognizerSetUserProfileData(v5, a2);
  }
}

CFTypeRef RDASRWSpeechRecognizerCopyJitProfileData(void *a1)
{
  int v2 = RXIsSpeechSPIEnabled();
  id v3 = [a1 recognizer];
  if (v2)
  {
    return RDSAPICSpeechAnalyzerCopyJitProfileData(v3);
  }
  else
  {
    return RDEARCSpeechRecognizerCopyJitProfileData(v3);
  }
}

id RDASRWSpeechRecognizerSetJitProfileData(void *a1, uint64_t a2)
{
  int v4 = RXIsSpeechSPIEnabled();
  id v5 = [a1 recognizer];
  if (v4)
  {
    return RDSAPICSpeechAnalyzerSetJitProfileData(v5, a2);
  }
  else
  {
    return RDEARCSpeechRecognizerSetJitProfileData(v5, a2);
  }
}

id RDASRWSpeechRecognizerUpdateJitProfileData(void *a1, uint64_t a2)
{
  int v4 = RXIsSpeechSPIEnabled();
  id v5 = [a1 recognizer];
  if (v4)
  {
    return RDSAPICSpeechAnalyzerUpdateJitProfileData(v5, a2);
  }
  else
  {
    return RDEARCSpeechRecognizerUpdateJitProfileData(v5, a2);
  }
}

id RDASRWSpeechRecognizerSetLeftContextText(void *a1, uint64_t a2)
{
  int v4 = RXIsSpeechSPIEnabled();
  id v5 = [a1 recognizer];
  if (v4)
  {
    return RDSAPICSpeechAnalyzerSetLeftContextText(v5, a2);
  }
  else
  {
    return RDEARCSpeechRecognizerSetLeftContextText(v5, a2);
  }
}

id RDASRWSpeechRecognizerSetRecognitionReplacements(void *a1, const __CFDictionary *a2)
{
  if (RXIsSpeechSPIEnabled())
  {
    if (a2 && CFDictionaryGetCount(a2) >= 1)
    {
      id v4 = [a1 recognizer];
      uint64_t v5 = 1;
    }
    else
    {
      id v4 = [a1 recognizer];
      uint64_t v5 = 0;
    }
    return RDSAPICSpeechAnalyzerSetRecognitionReplacements(v4, (const char *)v5);
  }
  else
  {
    id v6 = [a1 recognizer];
    return RDEARCSpeechRecognizerSetRecognitionReplacements(v6, (const char *)a2);
  }
}

id RDASRWSpeechRecognitionTokenGetTokenName(void *a1)
{
  if (RXIsSpeechSPIEnabled())
  {
    return RDSAPICSpeechAnalyzerTranscriptionTokenGetTokenName(a1);
  }
  else
  {
    return RDEARCSpeechRecognitionTokenGetTokenName(a1);
  }
}

id RDASRWSpeechRecognitionTokenGetStart(void *a1)
{
  if (RXIsSpeechSPIEnabled())
  {
    return RDSAPICSpeechAnalyzerTranscriptionTokenGetStart(a1);
  }
  else
  {
    return RDEARCSpeechRecognitionTokenGetStart(a1);
  }
}

id RDASRWSpeechRecognitionTokenGetEnd(void *a1)
{
  if (RXIsSpeechSPIEnabled())
  {
    return RDSAPICSpeechAnalyzerTranscriptionTokenGetEnd(a1);
  }
  else
  {
    return RDEARCSpeechRecognitionTokenGetEnd(a1);
  }
}

id RDASRWSpeechRecognitionTokenGetSilenceStart(void *a1)
{
  if (RXIsSpeechSPIEnabled())
  {
    return RDSAPICSpeechAnalyzerTranscriptionTokenGetSilenceStart(a1);
  }
  else
  {
    return RDEARCSpeechRecognitionTokenGetSilenceStart(a1);
  }
}

id RDASRWSpeechRecognitionTokenGetConfidence(void *a1)
{
  if (RXIsSpeechSPIEnabled())
  {
    return RDSAPICSpeechAnalyzerTranscriptionTokenGetConfidence(a1);
  }
  else
  {
    return RDEARCSpeechRecognitionTokenGetConfidence(a1);
  }
}

id RDASRWSpeechRecognitionTokenHasSpaceAfter(void *a1)
{
  if (RXIsSpeechSPIEnabled())
  {
    return RDSAPICSpeechAnalyzerTranscriptionTokenHasSpaceAfter(a1);
  }
  else
  {
    return RDEARCSpeechRecognitionTokenHasSpaceAfter(a1);
  }
}

uint64_t RDASRWSpeechRecognitionGetTokens(uint64_t a1)
{
  if (RXIsSpeechSPIEnabled())
  {
    return RDSAPICSpeechAnalyzerSpeechRecognitionGetTokens(a1);
  }
  else
  {
    return RDEARCSpeechRecognitionGetTokens(a1);
  }
}

void RDPeer::RDPeer(RDPeer *this, _xpc_connection_s *a2)
{
  *(void *)this = off_1000EF668;
  *((void *)this + 1) = a2;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
}

{
  *(void *)this = off_1000EF668;
  *((void *)this + 1) = a2;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
}

void RDPeer::~RDPeer(RDPeer *this)
{
  *(void *)this = off_1000EF668;
  *((void *)this + 1) = 0;
  uint64_t v1 = (void *)*((void *)this + 4);
  if (v1) {
    xpc_release(v1);
  }
}

{
  uint64_t vars8;

  RDPeer::~RDPeer(this);
  operator delete();
}

char *RDPeer::ClientHello(RDPeer *this, xpc_object_t object)
{
  uint64_t result = xpc_copy_description(object);
  *((void *)this + 3) = result;
  return result;
}

uint64_t RDPeer::ClientUpdate(RDPeer *this, xpc_object_t object)
{
  if (*((unsigned char *)this + 16))
  {
    if (*((void *)this + 3))
    {
      id v4 = RXOSLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = (char *)*((void *)this + 3);
        int v10 = 136315138;
        id v11 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client Hello %s", (uint8_t *)&v10, 0xCu);
      }
    }
    id v6 = xpc_copy_description(object);
    uint64_t v7 = RXOSLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Client Update %s", (uint8_t *)&v10, 0xCu);
    }
    free(v6);
  }
  uint64_t v8 = (void *)*((void *)this + 3);
  if (v8)
  {
    free(v8);
    *((void *)this + 3) = 0;
  }
  return 0;
}

void RDPeer::GetAudio(RDPeer *this, void *a2, xpc_object_t xdict)
{
  if (*((unsigned char *)this + 16))
  {
    size_t length = 0;
    xpc_dictionary_get_data(xdict, kRDKeyAudioData, &length);
    id v4 = RXOSLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t int64 = xpc_dictionary_get_uint64(a2, kRDKeyResultID);
      uint64_t v6 = xpc_dictionary_get_uint64(a2, kRDKeyStartTime);
      uint64_t v7 = xpc_dictionary_get_uint64(a2, kRDKeyEndTime);
      *(_DWORD *)long long buf = 134218752;
      uint64_t v10 = uint64;
      __int16 v11 = 2048;
      uint64_t v12 = v6;
      __int16 v13 = 2048;
      uint64_t v14 = v7;
      __int16 v15 = 2048;
      size_t v16 = length;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Get Audio %llx[%llu, %llu] -> %lu samples\n", buf, 0x2Au);
    }
  }
}

void RDPeer::ReleaseResult(RDPeer *this, void *a2)
{
  if (*((unsigned char *)this + 16))
  {
    id v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 134217984;
      uint64_t int64 = xpc_dictionary_get_uint64(a2, kRDKeyResultID);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Release Result %llx\n", (uint8_t *)&v4, 0xCu);
    }
  }
}

void RDPeer::AddTraining(RDPeer *this, xpc_object_t object)
{
  if (*((unsigned char *)this + 16))
  {
    int v2 = xpc_copy_description(object);
    id v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Training Data %s", (uint8_t *)&v4, 0xCu);
    }
    free(v2);
  }
}

void RDPeer::SetSecureFieldFocused(RDPeer *this, xpc_object_t object)
{
  if (*((unsigned char *)this + 16))
  {
    int v2 = xpc_copy_description(object);
    id v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Focus on secure field %s", (uint8_t *)&v4, 0xCu);
    }
    free(v2);
  }
}

void RDPeer::AddLeadingContext(RDPeer *this, xpc_object_t object)
{
  if (*((unsigned char *)this + 16))
  {
    int v2 = xpc_copy_description(object);
    id v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Leading context %s", (uint8_t *)&v4, 0xCu);
    }
    free(v2);
  }
}

void RDPeer::AddOtherContext(RDPeer *this, xpc_object_t object)
{
  if (*((unsigned char *)this + 16))
  {
    int v2 = xpc_copy_description(object);
    id v3 = RXOSLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Other context %s", (uint8_t *)&v4, 0xCu);
    }
    free(v2);
  }
}

void RDPeer::ResetRecognition(RDPeer *this)
{
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = RXOSLog();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Resetting recogition", v2, 2u);
    }
  }
}

void RDPeer::SetResetRecognitionMode(RDPeer *this, void *a2)
{
  if (*((unsigned char *)this + 16))
  {
    int v2 = RXOSLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting recognition reset mode", v3, 2u);
    }
  }
}

void RDPeer::SaveUserProfileToFile(RDPeer *this, void *a2)
{
  if (*((unsigned char *)this + 16))
  {
    int v2 = RXOSLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Saving user profile to file", v3, 2u);
    }
  }
}

void RDPeer::PhoneticNeighborsForText(RDPeer *this, xpc_object_t xdict, void *a3)
{
  if (*((unsigned char *)this + 16))
  {
    string = xpc_dictionary_get_string(xdict, kRDKeyText);
    uint64_t v5 = RXOSLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      uint64_t v8 = string;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PhoneticNeighborsForText %s", (uint8_t *)&v7, 0xCu);
    }
  }
  xpc_object_t empty = xpc_array_create_empty();
  xpc_dictionary_set_value(a3, kRDKeyText, empty);
}

void RDPeer::ServerIsRunning(RDPeer *this, char a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_100041B78;
  v2[3] = &unk_1000EF6E8;
  v2[4] = this;
  char v3 = a2;
  dispatch_async((dispatch_queue_t)gRDServerQueue, v2);
}

void sub_100041B78(uint64_t a1)
{
  int v2 = *(RDPeer **)(a1 + 32);
  RDPeer::UnlockConfig((RDPeer *)a1);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  int v4 = v3;
  if (*(unsigned char *)(a1 + 40)) {
    int64_t v5 = 204;
  }
  else {
    int64_t v5 = 203;
  }
  xpc_dictionary_set_int64(v3, kRDKeyMessage, v5);
  if (*((unsigned char *)v2 + 16))
  {
    uint64_t v6 = xpc_copy_description(v4);
    int v7 = RXOSLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315138;
      id v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Server Response %s", (uint8_t *)&v8, 0xCu);
    }
    free(v6);
  }
  RDPeer::SendClientMessage(v2, v4);
}

void RDPeer::UnlockConfig(RDPeer *this)
{
  if (RDPeer::sBroker)
  {
    xpc_object_t v1 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v1, kRDKeyMessage, 401);
    if (xpc_get_type(v1) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_connection_send_message((xpc_connection_t)RDPeer::sBroker, v1);
    }
    else
    {
      int v2 = RXOSLog();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      {
        int v3 = 136315394;
        int v4 = kRDKeyMessage;
        __int16 v5 = 2112;
        xpc_object_t v6 = v1;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "API misuse for message %s : XPC_TYPE_DICTIONARY expected, passed %@ ", (uint8_t *)&v3, 0x16u);
      }
    }
    xpc_release(v1);
  }
}

void RDPeer::SendClientMessage(RDPeer *this, xpc_object_t object)
{
  if (object)
  {
    int v4 = (void *)*((void *)this + 1);
    if (v4 && xpc_get_type(v4) == (xpc_type_t)&_xpc_type_connection) {
      xpc_connection_send_message(*((xpc_connection_t *)this + 1), object);
    }
    xpc_release(object);
  }
}

void RDPeer::CreatePeer(RDPeer *this, _xpc_connection_s *a2, unint64_t a3, RDAudioObject *a4, RDAudioObject *a5)
{
  id v9 = RXOSLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 134218752;
    __int16 v15 = this;
    __int16 v16 = 2048;
    unint64_t v17 = a2;
    __int16 v18 = 2048;
    unint64_t v19 = a3;
    __int16 v20 = 2048;
    unint64_t v21 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CreatePeer, %p, %p, %llx, %p", (uint8_t *)&v14, 0x2Au);
  }
  if (a4)
  {
    string_ptr = (RDKeyword *)xpc_string_get_string_ptr(a2);
    RDKeyword::SetLocale(string_ptr, v11);
  }
  uint64_t v12 = xpc_string_get_string_ptr(a2);
  CFStringCreateWithCString(0, v12, 0x8000100u);
  __int16 v13 = RXOSLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Creating QSR peer", (uint8_t *)&v14, 2u);
  }
  RDCreateQSRPeer(this, a2, a3, a4);
}

void RDPeer::LockConfig(RDPeer *this)
{
  if (RDPeer::sBroker)
  {
    xpc_object_t v1 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v1, kRDKeyMessage, 400);
    xpc_object_t v2 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)RDPeer::sBroker, v1);
    xpc_release(v1);
    if (xpc_get_type(v2) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_release(v2);
    }
  }
}

uint64_t RDPeer::KeepSystemAwake(RDPeer *this)
{
  return IOPMAssertionDeclareUserActivity(@"Speech Recognition Successful", kIOPMUserActiveLocal, dword_1000FEBC0);
}

uint64_t sub_100042008(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 120))();
  }
  return result;
}

uint64_t sub_100042034(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void sub_100042080(id a1)
{
  qword_1000FEBC8 = objc_alloc_init(RDAssetManager2);
}

void sub_1000428E4(uint64_t a1, uint64_t a2)
{
}

void sub_1000428F4(uint64_t a1)
{
}

id sub_100042900(uint64_t a1)
{
  uint64_t v3 = 0;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) _queryAndCopyInstallationStatusForLanguagesWithError:&v3];
  id result = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (!result || (id result = [result count]) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = v3;
  }
  return result;
}

void sub_100042FAC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

intptr_t sub_100042FFC(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [a2 copy];
  uint64_t v3 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v3);
}

id sub_100043420(uint64_t a1)
{
  uint64_t v3 = 0;
  id result = [*(id *)(a1 + 32) _cancelDownloadForLanguageWithError:*(void *)(a1 + 40) withError:&v3];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = v3;
  return result;
}

void sub_100043890(uint64_t a1)
{
  uint64_t v5 = 0;
  +[SFSpeechAssetManager setAssetsPurgeability:*(unsigned __int8 *)(a1 + 56) forLanguages:*(void *)(a1 + 32) error:&v5];
  xpc_object_t v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)long long buf = 138412802;
    uint64_t v7 = v3;
    __int16 v8 = 1024;
    int v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "setPurgeabilityForLanguages, languages=%@  purgeability= %d error=%@", buf, 0x1Cu);
  }
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = v5;
}

void sub_100043BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_100043BDC(uint64_t a1)
{
  uint64_t v3 = 0;
  id result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "_installedAssetForLanguage:error:", *(void *)(a1 + 40), &v3), "copy");
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)) {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = v3;
  }
  return result;
}

void sub_100044058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

intptr_t sub_100044080(void *a1, void *a2, uint64_t a3)
{
  *(void *)(*(void *)(a1[5] + 8) + 40) = a3;
  if (!a3) {
    *(void *)(*(void *)(a1[6] + 8) + 40) = a2;
  }
  int v4 = a1[4];
  return dispatch_semaphore_signal(v4);
}

__n128 sub_100044504(uint64_t a1, uint64_t a2, char a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  long long v3 = *(_OWORD *)(a1 + 32);
  int v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  _DWORD v6[2] = sub_10004459C;
  v6[3] = &unk_1000EF870;
  long long v7 = v3;
  int v10 = *(_DWORD *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = a2;
  int v11 = *(_DWORD *)(a1 + 60);
  char v12 = a3;
  dispatch_async(v4, v6);
  return result;
}

void sub_10004459C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _isActiveDownloadForLanguage:*(void *)(a1 + 40) downloadId:*(unsigned int *)(a1 + 64)])
  {
    float v2 = fmin((double)*(unint64_t *)(a1 + 56) / 100.0, 1.0);
    [+[NSDate date] timeIntervalSinceDate:*(void *)(a1 + 48)];
    float v4 = -1.0;
    if (v2 > 0.0)
    {
      if (v3 < 0.0) {
        double v3 = 0.0;
      }
      float v5 = v3;
      float v4 = (1.0 - v2) * v5 / v2;
    }
    float v6 = *(float *)(a1 + 68) * v2;
    long long v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a1 + 72))
    {
      [v7 _stalledDownloadForLanguage:v8];
      uint64_t v9 = RXOSLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        double v10 = (float)(v6 / *(float *)(a1 + 68));
        int v11 = *(_DWORD *)(a1 + 64);
        id v12 = [*(id *)(a1 + 32) _downloadStatusDescription];
        int v26 = 134218754;
        *(double *)int v27 = v10;
        *(_WORD *)&v27[8] = 2048;
        *(double *)&v27[10] = v4;
        __int16 v28 = 1024;
        int v29 = v11;
        __int16 v30 = 2112;
        id v31 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Asset Download Progress stalled at : %.2f ratio , ~%.2f seconds remaining, downloadId=%d, %@", (uint8_t *)&v26, 0x26u);
      }
      if ([*(id *)(a1 + 32) _sendCallback])
      {
        __int16 v16 = *(void **)(a1 + 32);
        uint64_t v17 = *(void *)(a1 + 40);
        LODWORD(v15) = *(_DWORD *)(a1 + 68);
        CFStringRef v18 = @"Stalled";
        LODWORD(v13) = -1.0;
LABEL_19:
        *(float *)&double v14 = v6;
        [v16 _sendDownloadCallbackDictionaryWithLanguage:v17 downloadPhase:v18 timeRemaining:0 bytesWritten:v13 bytesTotal:v14 error:v15];
      }
    }
    else
    {
      if ([v7 _isDownloadingStalledForLanguage:v8]) {
        [*(id *)(a1 + 32) _resumeStalledDownloadForLanguage:*(void *)(a1 + 40)];
      }
      unint64_t v22 = RXOSLog();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        double v23 = (float)(v6 / *(float *)(a1 + 68));
        int v24 = *(_DWORD *)(a1 + 64);
        id v25 = [*(id *)(a1 + 32) _downloadStatusDescription];
        int v26 = 134218754;
        *(double *)int v27 = v23;
        *(_WORD *)&v27[8] = 2048;
        *(double *)&v27[10] = v4;
        __int16 v28 = 1024;
        int v29 = v24;
        __int16 v30 = 2112;
        id v31 = v25;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Asset Download progress: %.2f ratio , ~%.2f seconds remaining, downloadId=%d, %@", (uint8_t *)&v26, 0x26u);
      }
      if ([*(id *)(a1 + 32) _sendCallback])
      {
        __int16 v16 = *(void **)(a1 + 32);
        uint64_t v17 = *(void *)(a1 + 40);
        LODWORD(v15) = *(_DWORD *)(a1 + 68);
        CFStringRef v18 = @"Downloading";
        *(float *)&double v13 = v4;
        goto LABEL_19;
      }
    }
  }
  else
  {
    unint64_t v19 = RXOSLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *(_DWORD *)(a1 + 64);
      id v21 = [*(id *)(a1 + 32) _downloadStatusDescription];
      int v26 = 67109378;
      *(_DWORD *)int v27 = v20;
      *(_WORD *)&void v27[4] = 2112;
      *(void *)&v27[6] = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Ignoring non-active asset download progress downloadId=%d, %@", (uint8_t *)&v26, 0x12u);
    }
  }
}

__n128 sub_100044870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  long long v3 = *(_OWORD *)(a1 + 32);
  float v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[2] = sub_100044900;
  block[3] = &unk_1000EF8C0;
  long long v7 = v3;
  int v10 = *(_DWORD *)(a1 + 48);
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  int v11 = *(_DWORD *)(a1 + 52);
  dispatch_async(v4, block);
  return result;
}

void sub_100044900(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _isActiveDownloadForLanguage:*(void *)(a1 + 40) downloadId:*(unsigned int *)(a1 + 64)])
  {
    [*(id *)(a1 + 32) _endAllDownloadsForLanguage:*(void *)(a1 + 40)];
    float v2 = *(NSError **)(a1 + 48);
    if ([*(id *)(a1 + 56) length]) {
      unsigned int v3 = sub_1000452E8(*(void **)(a1 + 56), 0, @"DictationCC");
    }
    else {
      unsigned int v3 = 0;
    }
    if ([*(id *)(a1 + 56) length] && (v3 & 1) == 0)
    {
      NSErrorUserInfoKey v33 = NSLocalizedFailureReasonErrorKey;
      CFStringRef v34 = @"Asset is incompatible";
      float v2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"kRXAssetDownloadErrorDomain", 101, +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1]);
    }
    long long v7 = RXOSLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 56);
      int v9 = *(_DWORD *)(a1 + 64);
      id v10 = [*(id *)(a1 + 32) _downloadStatusDescription];
      int v25 = 138413314;
      *(void *)int v26 = v8;
      *(_WORD *)&unsigned __int16 v26[8] = 2112;
      *(void *)&v26[10] = v2;
      __int16 v27 = 1024;
      unsigned int v28 = v3;
      __int16 v29 = 1024;
      int v30 = v9;
      __int16 v31 = 2112;
      id v32 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Asset downloaded, assetPath=%@, error=%@, isCompatibleAsset=%d, downloadId=%d, %@", (uint8_t *)&v25, 0x2Cu);
    }
    int v11 = RXOSLog();
    id v12 = v11;
    if (v3)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v25) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Asset download successful", (uint8_t *)&v25, 2u);
      }
      int v13 = *(_DWORD *)(a1 + 68);
      if ([*(id *)(a1 + 32) _sendCallback])
      {
        LODWORD(v15) = *(_DWORD *)(a1 + 68);
        LODWORD(v14) = v13;
        [*(id *)(a1 + 32) _sendDownloadCallbackDictionaryWithLanguage:*(void *)(a1 + 40) downloadPhase:@"Downloading" timeRemaining:0 bytesWritten:0.0 bytesTotal:v14 error:v15];
        __int16 v16 = *(void **)(a1 + 32);
        uint64_t v17 = *(void *)(a1 + 40);
        LODWORD(v18) = *(_DWORD *)(a1 + 68);
        CFStringRef v19 = @"Downloaded";
        double v20 = 0.0;
        LODWORD(v21) = v13;
        id v22 = 0;
LABEL_21:
        [v16 _sendDownloadCallbackDictionaryWithLanguage:v17 downloadPhase:v19 timeRemaining:v22 bytesWritten:v20 bytesTotal:v21 error:v18];
      }
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v25) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Asset download failed", (uint8_t *)&v25, 2u);
      }
      if ([*(id *)(a1 + 32) _sendCallback])
      {
        int v24 = *(void **)(a1 + 32);
        uint64_t v23 = *(void *)(a1 + 40);
        id v22 = [(NSError *)v2 description];
        CFStringRef v19 = @"DownloadFailed";
        LODWORD(v20) = -1.0;
        LODWORD(v21) = -1.0;
        LODWORD(v18) = -1.0;
        __int16 v16 = v24;
        uint64_t v17 = v23;
        goto LABEL_21;
      }
    }
  }
  else
  {
    float v4 = RXOSLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(a1 + 64);
      id v6 = [*(id *)(a1 + 32) _downloadStatusDescription];
      int v25 = 67109378;
      *(_DWORD *)int v26 = v5;
      *(_WORD *)&v26[4] = 2112;
      *(void *)&v26[6] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ignoring non-active asset download downloadId=%d, %@", (uint8_t *)&v25, 0x12u);
    }
  }
}

void sub_100044C60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100044CD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100044D30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100045254(_Unwind_Exception *exception_object)
{
}

id sub_1000452E8(void *a1, void *a2, uint64_t a3)
{
  if (![a1 length])
  {
    int v13 = RXOSLog();
    id result = (id)os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    id v12 = "empty quasarModelPath";
    double v14 = v13;
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    uint32_t v16 = 2;
    goto LABEL_14;
  }
  CFStringRef v6 = (const __CFString *)[a1 stringByAppendingPathComponent:@"mini.json"];
  if (![+[NSFileManager defaultManager] fileExistsAtPath:v6])
  {
    uint64_t v17 = RXOSLog();
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    id result = 0;
    if (!v18) {
      return result;
    }
    *(_DWORD *)long long buf = 138412546;
    CFStringRef v34 = @"mini.json";
    __int16 v35 = 2112;
    CFStringRef v36 = v6;
    id v12 = "%@ does not exist at: %@ ";
    double v14 = v17;
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    uint32_t v16 = 22;
    goto LABEL_14;
  }
  long long v7 = +[NSData dataWithContentsOfFile:v6];
  if (!v7)
  {
    int v9 = RXOSLog();
    BOOL v19 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    id result = 0;
    if (!v19) {
      return result;
    }
    *(_DWORD *)long long buf = 138412290;
    CFStringRef v34 = v6;
    id v12 = "could not read contents from : %@";
    goto LABEL_13;
  }
  uint64_t v32 = 0;
  id v8 = +[NSJSONSerialization JSONObjectWithData:v7 options:0 error:&v32];
  if (v32)
  {
    int v9 = RXOSLog();
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    id result = 0;
    if (!v10) {
      return result;
    }
    *(_DWORD *)long long buf = 138412290;
    CFStringRef v34 = v6;
    id v12 = "%@ : not a valid json";
LABEL_13:
    double v14 = v9;
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    uint32_t v16 = 12;
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v12, buf, v16);
    return 0;
  }
  double v20 = v8;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }
  objc_msgSend(+[_EARSpeechRecognizer minimumSupportedConfigurationVersion](_EARSpeechRecognizer, "minimumSupportedConfigurationVersion"), "floatValue");
  float v22 = v21;
  objc_msgSend(+[_EARSpeechRecognizer maximumSupportedConfigurationVersion](_EARSpeechRecognizer, "maximumSupportedConfigurationVersion"), "floatValue");
  float v24 = v23;
  id v25 = [v20 objectForKey:@"version-major"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }
  [v25 floatValue];
  if (v26 < v22) {
    return 0;
  }
  [v25 floatValue];
  if (v27 > v24) {
    return 0;
  }
  id v28 = [v20 objectForKey:@"model-info"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }
  id v29 = [v28 objectForKey:@"version"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (a2)
  {
    if (isKindOfClass) {
      *a2 = v29;
    }
  }
  id v31 = [v28 objectForKey:@"tasks"];
  id result = [v29 length];
  if (result)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      return [v31 containsObject:a3];
    }
    return 0;
  }
  return result;
}

void sub_100045B70(id a1)
{
  qword_1000FEBD8 = objc_alloc_init(RDAssetManager);
}

void sub_100045D18(uint64_t a1)
{
  float v2 = RXOSLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 40)) {
      CFStringRef v3 = @"with";
    }
    else {
      CFStringRef v3 = @"without";
    }
    *(_DWORD *)long long buf = 138412290;
    CFStringRef v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Kicking off catalog download %@ urgency", buf, 0xCu);
  }
  if (([*(id *)(a1 + 32) catalogDownloadInProgress] & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      float v4 = *(double **)(a1 + 32);
LABEL_12:
      [v4 setCatalogDownloadInProgress:1];
      long long v7 = RXOSLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Downloading EmbeddedSpeech catalog", buf, 2u);
      }
      id v8 = sub_100045F10(*(unsigned __int8 *)(a1 + 40));
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_100045F74;
      v9[3] = &unk_1000EF930;
      void v9[4] = *(void *)(a1 + 32);
      +[MAAsset startCatalogDownload:@"com.apple.MobileAsset.EmbeddedSpeech" options:v8 then:v9];
      return;
    }
    [+[NSDate date] timeIntervalSinceReferenceDate];
    float v4 = *(double **)(a1 + 32);
    if (v5 - v4[1] >= 86400.0) {
      goto LABEL_12;
    }
    CFStringRef v6 = RXOSLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Too early since last catalog download. Returning.", buf, 2u);
    }
  }
}

id sub_100045F10(int a1)
{
  id v2 = objc_alloc_init((Class)MADownloadOptions);
  [v2 setAllowsCellularAccess:0];
  [v2 setDiscretionary:a1 ^ 1u];
  [v2 setRequiresPowerPluggedIn:0];
  return v2;
}

id sub_100045F74(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setCatalogDownloadInProgress:0];
  float v4 = RXOSLog();
  double v5 = v4;
  if (a2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v6 = [*(id *)(a1 + 32) _errorStringForDownloadResult:a2];
      *(_DWORD *)long long buf = 138412290;
      id v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "The MobileAsset catalog download failed: CFErrorRef error = %@", buf, 0xCu);
    }
    id result = [*(id *)(a1 + 32) sendCallback];
    if (result)
    {
      id v8 = *(void **)(a1 + 32);
      id v9 = [v8 _errorStringForDownloadResult:a2];
      LODWORD(v10) = -1.0;
      LODWORD(v11) = -1.0;
      LODWORD(v12) = -1.0;
      return [v8 _sendDownloadCallbackDictionaryWithLanguage:0 downloadPhase:@"DownloadFailed" timeRemaining:v9 bytesWritten:v10 bytesTotal:v11 error:v12];
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sucessfully downloaded the catalog", buf, 2u);
    }
    [+[NSDate date] timeIntervalSinceReferenceDate];
    *(void *)(*(void *)(a1 + 32) + 8) = v13;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v14 = [*(id *)(a1 + 32) requestedLanguagesForDownload];
    id result = [v14 countByEnumeratingWithState:&v22 objects:v28 count:16];
    if (result)
    {
      id v15 = result;
      uint64_t v16 = *(void *)v23;
      do
      {
        uint64_t v17 = 0;
        do
        {
          if (*(void *)v23 != v16) {
            objc_enumerationMutation(v14);
          }
          uint64_t v18 = *(void *)(*((void *)&v22 + 1) + 8 * (void)v17);
          uint64_t v19 = *(void *)(a1 + 32);
          double v20 = *(NSObject **)(v19 + 24);
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          v21[2] = sub_1000461C4;
          v21[3] = &unk_1000EE3B0;
          void v21[4] = v19;
          v21[5] = v18;
          dispatch_async(v20, v21);
          uint64_t v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        id result = [v14 countByEnumeratingWithState:&v22 objects:v28 count:16];
        id v15 = result;
      }
      while (result);
    }
  }
  return result;
}

id sub_1000461C4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fetchRemoteAssetForLanguage:*(void *)(a1 + 40)];
}

void sub_1000462F8(uint64_t a1, uint64_t a2)
{
}

void sub_100046308(uint64_t a1)
{
}

id sub_100046314(uint64_t a1)
{
  uint64_t v3 = 0;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) queryAndCopyInstallationStatusForLangaugesWithError:&v3];
  id result = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (!result || (id result = [result count]) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = v3;
  }
  return result;
}

id sub_100046958(void *a1)
{
  CFStringRef v1 = (const __CFString *)[a1 stringByAppendingPathComponent:@"mini.json"];
  if ([+[NSFileManager defaultManager] fileExistsAtPath:v1])
  {
    id v2 = +[NSData dataWithContentsOfFile:v1];
    if (v2)
    {
      uint64_t v16 = 0;
      id v3 = +[NSJSONSerialization JSONObjectWithData:v2 options:0 error:&v16];
      if (!v16)
      {
        uint64_t v13 = v3;
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v14 = [v13 objectForKey:@"model-info"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v15 = [v14 objectForKey:@"tasks"];
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              return [v15 containsObject:@"DictationCC"];
            }
          }
        }
        return 0;
      }
      float v4 = RXOSLog();
      BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      id result = 0;
      if (!v5) {
        return result;
      }
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v18 = v1;
      long long v7 = "%@ : not a valid json";
    }
    else
    {
      float v4 = RXOSLog();
      BOOL v12 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      id result = 0;
      if (!v12) {
        return result;
      }
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v18 = v1;
      long long v7 = "could not read contents from : %@";
    }
    double v10 = v4;
    uint32_t v11 = 12;
  }
  else
  {
    id v8 = RXOSLog();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    id result = 0;
    if (!v9) {
      return result;
    }
    *(_DWORD *)long long buf = 138412546;
    CFStringRef v18 = @"mini.json";
    __int16 v19 = 2112;
    CFStringRef v20 = v1;
    long long v7 = "%@ does not exist at: %@ ";
    double v10 = v8;
    uint32_t v11 = 22;
  }
  _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v7, buf, v11);
  return 0;
}

void sub_100046FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100046FBC(uint64_t a1)
{
  uint64_t v3 = 0;
  id result = [*(id *)(a1 + 32) _cancelDownloadForLangaugeWithError:*(void *)(a1 + 40) withError:&v3];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = v3;
  return result;
}

void sub_1000474F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

NSError *sub_100047518(uint64_t a1)
{
  if ([*(id *)(a1 + 32) catalogDownloadInProgress])
  {
    id result = (NSError *)objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "requestedLanguagesForDownload"), "containsObject:", *(void *)(a1 + 40));
    if ((result & 1) == 0)
    {
      uint64_t v3 = RXOSLog();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Catalog download is in progress, caching %@", buf, 0xCu);
      }
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "requestedLanguagesForDownload"), "addObject:", *(void *)(a1 + 40));
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = 0;
      NSErrorUserInfoKey v5 = NSLocalizedFailureReasonErrorKey;
      CFStringRef v6 = @"Catalog download in progress";
      id result = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"kRXAssetDownloadErrorDomain", 100, +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1]);
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = result;
    }
  }
  else
  {
    *(void *)long long buf = 0;
    id result = (NSError *)objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "_installedAssetForLanguage:error:", *(void *)(a1 + 40), buf), "_es_quasarModelPath"), "copy");
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = result;
    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)) {
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = *(void *)buf;
    }
  }
  return result;
}

void sub_10004774C(int8x16_t *a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  int8x16_t v2 = vextq_s8(a1[2], a1[2], 8uLL);
  uint64_t v3 = *(NSObject **)(a1[2].i64[0] + 24);
  _DWORD v4[2] = sub_1000477D4;
  v4[3] = &unk_1000EF9A8;
  int8x16_t v5 = v2;
  uint64_t v6 = a1[3].i64[0];
  uint64_t v7 = a2;
  dispatch_async(v3, v4);
}

void sub_1000477D4(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    int8x16_t v2 = RXOSLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      id v4 = [*(id *)(a1 + 40) _errorStringForQueryResult:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v12 = v3;
      __int16 v13 = 2112;
      id v14 = v4;
      int8x16_t v5 = "Async asset query failed for query=%@, error=%@";
      uint64_t v6 = v2;
      os_log_type_t v7 = OS_LOG_TYPE_ERROR;
      uint32_t v8 = 22;
LABEL_4:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, buf, v8);
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (!objc_msgSend(*(id *)(a1 + 40), "_installedAssetFromFoundAssets:language:error:", objc_msgSend(*(id *)(a1 + 32), "results"), *(void *)(a1 + 48), &v10))
    {
      uint64_t v9 = RXOSLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v12 = v10;
        int8x16_t v5 = "Remote fetch asset fetch got assets but none have been installed yet: %@";
        uint64_t v6 = v9;
        os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
        uint32_t v8 = 12;
        goto LABEL_4;
      }
    }
  }
}

id sub_1000488A0(uint64_t a1, void *a2)
{
  unsigned __int8 v4 = [a2 isStalled];
  int8x16_t v5 = RXOSLog();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      int v25 = 134218240;
      double v26 = COERCE_DOUBLE([a2 totalWritten]);
      __int16 v27 = 2048;
      id v28 = [a2 totalExpected];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Asset Download Progress stalled at %lld of %lld bytes", (uint8_t *)&v25, 0x16u);
    }
    id result = [*(id *)(a1 + 32) sendCallback];
    if (result)
    {
      uint32_t v8 = *(void **)(a1 + 32);
      id v9 = objc_msgSend(*(id *)(a1 + 40), "_es_language");
      float v10 = (float)(uint64_t)[a2 totalWritten];
      *(float *)&double v11 = (float)(uint64_t)[a2 totalExpected];
      CFStringRef v12 = @"Stalled";
      LODWORD(v13) = -1.0;
      id v14 = v8;
      id v15 = v9;
      *(float *)&double v16 = v10;
      return [v14 _sendDownloadCallbackDictionaryWithLanguage:v15 downloadPhase:v12 timeRemaining:0 bytesWritten:v13 bytesTotal:v16 error:v11];
    }
  }
  else
  {
    if (v6)
    {
      float v17 = (float)(uint64_t)[a2 totalWritten];
      double v18 = (float)(v17 / (float)(uint64_t)[a2 totalExpected]);
      [a2 expectedTimeRemaining];
      int v25 = 134218240;
      double v26 = v18;
      __int16 v27 = 2048;
      id v28 = v19;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Asset Download progress: %.2f percent , ~%.2f seconds remaining", (uint8_t *)&v25, 0x16u);
    }
    id result = [*(id *)(a1 + 32) sendCallback];
    if (result)
    {
      CFStringRef v20 = *(void **)(a1 + 32);
      id v21 = objc_msgSend(*(id *)(a1 + 40), "_es_language");
      [a2 expectedTimeRemaining];
      float v23 = v22;
      float v24 = (float)(uint64_t)[a2 totalWritten];
      *(float *)&double v11 = (float)(uint64_t)[a2 totalExpected];
      CFStringRef v12 = @"Downloading";
      id v14 = v20;
      id v15 = v21;
      *(float *)&double v13 = v23;
      *(float *)&double v16 = v24;
      return [v14 _sendDownloadCallbackDictionaryWithLanguage:v15 downloadPhase:v12 timeRemaining:0 bytesWritten:v13 bytesTotal:v16 error:v11];
    }
  }
  return result;
}

void sub_100048A94(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if ([*(id *)(a1 + 32) sendCallback])
    {
      unsigned __int8 v4 = *(void **)(a1 + 32);
      id v5 = objc_msgSend(*(id *)(a1 + 40), "_es_language");
      id v6 = [*(id *)(a1 + 32) _errorStringForDownloadResult:a2];
      LODWORD(v7) = -1.0;
      LODWORD(v8) = -1.0;
      LODWORD(v9) = -1.0;
      [v4 _sendDownloadCallbackDictionaryWithLanguage:v5 downloadPhase:@"DownloadFailed" timeRemaining:v6 bytesWritten:v7 bytesTotal:v8 error:v9];
    }
    float v10 = RXOSLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = [*(id *)(a1 + 32) _errorStringForDownloadResult:a2];
      int v18 = 138412290;
      id v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Asset download failed: %@", (uint8_t *)&v18, 0xCu);
    }
  }
  else
  {
    CFStringRef v12 = RXOSLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v18) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Asset download successful", (uint8_t *)&v18, 2u);
    }
    if ([*(id *)(a1 + 32) sendCallback])
    {
      double v13 = *(void **)(a1 + 32);
      id v14 = objc_msgSend(*(id *)(a1 + 40), "_es_language");
      LODWORD(v15) = -1.0;
      LODWORD(v16) = -1.0;
      LODWORD(v17) = -1.0;
      [v13 _sendDownloadCallbackDictionaryWithLanguage:v14 downloadPhase:@"Downloaded" timeRemaining:0 bytesWritten:v15 bytesTotal:v16 error:v17];
    }
  }
}

void sub_100048C0C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = RXOSLog();
  id v5 = v4;
  if (a2)
  {
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [*(id *)(a1 + 40) _errorStringForPurgeResult:a2];
    int v13 = 138412546;
    uint64_t v14 = v6;
    __int16 v15 = 2112;
    id v16 = v7;
    double v8 = "Failed to purge %@: %@";
    double v9 = v5;
    os_log_type_t v10 = OS_LOG_TYPE_ERROR;
    uint32_t v11 = 22;
  }
  else
  {
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v12 = *(void *)(a1 + 32);
    int v13 = 138412290;
    uint64_t v14 = v12;
    double v8 = "Purged %@";
    double v9 = v5;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    uint32_t v11 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, v11);
}

NSNumber *sub_100048D24(void *a1, uint64_t a2)
{
  id v4 = [objc_alloc((Class)MAAssetQuery) initWithType:@"com.apple.MobileAsset.EmbeddedSpeech"];
  id v5 = [v4 queryMetaDataSync];
  if (v5)
  {
    id v6 = v5;
    id v7 = RXOSLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      id v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "MobileAsset is sad: %ld", buf, 0xCu);
    }
    if (a1)
    {
      CFStringRef v22 = @"MAQueryResult";
      float v23 = +[NSNumber numberWithInteger:v6];
      *a1 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"kRXAssetDownloadErrorDomain", 101, +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1]);
    }

    return 0;
  }
  else
  {
    id v9 = [v4 results];

    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v10 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)v18;
      uint64_t v14 = ASAttributeUnarchivedSize;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v18 != v13) {
            objc_enumerationMutation(v9);
          }
          id v16 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          if (objc_msgSend(v16, "_es_isInstalled"))
          {
            buf[0] = 0;
            (*(void (**)(uint64_t, void *, uint8_t *))(a2 + 16))(a2, v16, buf);
            if (buf[0]) {
              return +[NSNumber numberWithLongLong:v12];
            }
            v12 += (uint64_t)objc_msgSend(objc_msgSend(objc_msgSend(v16, "attributes"), "objectForKey:", v14), "longLongValue");
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    return +[NSNumber numberWithLongLong:v12];
  }
}

void sub_100049058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100049070(uint64_t a1, void *a2, unsigned char *a3)
{
  id v6 = RXOSLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Purging asset for CacheDelete: %@", buf, 0xCu);
  }
  id v7 = [a2 purgeSync];
  if (v7)
  {
    id v11 = +[NSNumber numberWithInteger:v7, @"MAPurgeResult"];
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"kRXAssetDownloadErrorDomain", 102, +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1]);
    double v8 = RXOSLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Purging failed: %@", buf, 0xCu);
    }
    *a3 = 1;
  }
}

void sub_100049244(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000492B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100049314(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100049838(_Unwind_Exception *exception_object)
{
}

void RDDummyPeer::RDDummyPeer(RDDummyPeer *this, _xpc_connection_s *a2)
{
  RDPeer::RDPeer(this, a2);
  *uint64_t v3 = off_1000EFD40;
  void v3[6] = 0;
  v3[5] = v3 + 6;
  v3[8] = 0;
  v3[7] = 0;
  v3[9] = 0;
  v3[10] = 0;
  id v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)gRDServerQueue);
  *((void *)this + 12) = v4;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_100049BA8;
  handler[3] = &unk_1000EFDC0;
  handler[4] = this;
  dispatch_source_set_event_handler(v4, handler);
  dispatch_source_set_timer(*((dispatch_source_t *)this + 12), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  dispatch_resume(*((dispatch_object_t *)this + 12));
  RDPeer::ServerIsRunning(this, 1);
}

void sub_100049B74(_Unwind_Exception *a1)
{
  id v4 = v3;
  id v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 72) = v6;
    operator delete(v6);
  }
  sub_10001B844(v2, *(void **)(v1 + 48));
  RDPeer::~RDPeer((RDPeer *)v1);
  _Unwind_Resume(a1);
}

void sub_100049BA8(uint64_t a1)
{
}

void RDDummyPeer::SimulateRecognition(RDDummyPeer *this)
{
  if (*((void *)this + 9) != *((void *)this + 8))
  {
    unint64_t v9 = *(void *)(*((void *)this + 8)
                   + 8 * (random() % (unint64_t)((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3)));
    p_uint64_t int64 = &v9;
    uint64_t v2 = sub_10001AC70((uint64_t **)this + 5, &v9, (uint64_t)&unk_1000CB0EE, (uint64_t **)&p_uint64);
    uint64_t v3 = (void *)v2[5];
    if (v3)
    {
      uint64_t int64 = xpc_dictionary_get_uint64((xpc_object_t)v2[5], kRDKeyLanguageModel);
      p_uint64_t int64 = &uint64;
      id v4 = (void *)sub_10001AC70((uint64_t **)this + 5, &uint64, (uint64_t)&unk_1000CB0EE, (uint64_t **)&p_uint64)[5];
      if (v4)
      {
        xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_int64(v5, kRDKeyMessage, 200);
        xpc_dictionary_set_uint64(v5, kRDKeyEpoch, *((void *)this + 11));
        xpc_object_t v6 = xpc_copy(v3);
        xpc_object_t v7 = RDDummyPeer::PickLanguageModel((uint64_t **)this, v4);
        xpc_dictionary_set_value(v6, kRDKeyLanguageModel, v7);
        xpc_release(v7);
        xpc_dictionary_set_value(v5, kRDKeyRecognizer, v6);
        xpc_release(v6);
        RDPeer::SendClientMessage(this, v5);
      }
    }
    RDDummyPeer::StartRecognition((dispatch_object_t *)this);
  }
}

void RDDummyPeer::~RDDummyPeer(dispatch_object_t *this)
{
  *this = (dispatch_object_t)off_1000EFD40;
  dispatch_release(this[12]);
  uint64_t v2 = this[8];
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }
  sub_10001B844((uint64_t)(this + 5), this[6]);
  RDPeer::~RDPeer((RDPeer *)this);
}

{
  uint64_t vars8;

  RDDummyPeer::~RDDummyPeer(this);
  operator delete();
}

uint64_t RDDummyPeer::ClientUpdate(RDDummyPeer *this, void *a2)
{
  RDPeer::ClientUpdate(this, a2);
  *((void *)this + 11) = xpc_dictionary_get_uint64(a2, kRDKeyEpoch);
  xpc_object_t value = xpc_dictionary_get_value(a2, kRDKeyObjects);
  if (value)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 0x40000000;
    applier[2] = sub_100049F84;
    applier[3] = &unk_1000EFDE0;
    applier[4] = this;
    xpc_array_apply(value, applier);
  }
  xpc_object_t v5 = xpc_dictionary_get_value(a2, kRDKeyDead);
  if (v5)
  {
    xpc_object_t v6 = v5;
    size_t count = xpc_array_get_count(v5);
    if (count)
    {
      size_t v8 = count;
      size_t v9 = 0;
      uint64_t v10 = (xpc_object_t *)((char *)this + 48);
      do
      {
        uint64_t int64 = xpc_array_get_uint64(v6, v9);
        uint64_t v12 = *v10;
        if (*v10)
        {
          uint64_t v13 = (xpc_object_t *)((char *)this + 48);
          do
          {
            uint64_t v14 = v12[4];
            BOOL v15 = v14 >= uint64;
            if (v14 >= uint64) {
              id v16 = v12;
            }
            else {
              id v16 = v12 + 1;
            }
            if (v15) {
              uint64_t v13 = (xpc_object_t *)v12;
            }
            uint64_t v12 = (void *)*v16;
          }
          while (*v16);
          if (v13 != v10 && uint64 >= (unint64_t)v13[4])
          {
            RDDummyPeer::CheckObjectInUse(this, uint64);
            xpc_release(v13[5]);
            sub_100032B18((uint64_t **)this + 5, (uint64_t *)v13);
            operator delete(v13);
          }
        }
        ++v9;
      }
      while (v9 != v8);
    }
  }
  dispatch_suspend(*((dispatch_object_t *)this + 12));
  uint64_t v17 = RDDummyPeer::ScanRecognizers(this);
  RDDummyPeer::StartRecognition((dispatch_object_t *)this);
  dispatch_resume(*((dispatch_object_t *)this + 12));
  return v17;
}

uint64_t sub_100049F84(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, kRDKeyObjectID);
  uint64_t v13 = uint64;
  xpc_object_t v6 = *(void **)(v4 + 48);
  if (v6)
  {
    xpc_object_t v7 = (void *)(v4 + 48);
    do
    {
      uint64_t v8 = v6[4];
      BOOL v9 = v8 >= uint64;
      if (v8 >= uint64) {
        uint64_t v10 = v6;
      }
      else {
        uint64_t v10 = v6 + 1;
      }
      if (v9) {
        xpc_object_t v7 = v6;
      }
      xpc_object_t v6 = (void *)*v10;
    }
    while (*v10);
    if (v7 != (void *)(v4 + 48) && uint64 >= v7[4]) {
      xpc_release((xpc_object_t)v7[5]);
    }
  }
  xpc_object_t v11 = xpc_retain(xdict);
  uint64_t v14 = &v13;
  sub_10001AC70((uint64_t **)(v4 + 40), &v13, (uint64_t)&unk_1000CB0EE, (uint64_t **)&v14)[5] = (uint64_t)v11;
  return 1;
}

void RDDummyPeer::CheckObjectInUse(RDDummyPeer *this, uint64_t a2)
{
  uint64_t v2 = (char *)*((void *)this + 5);
  uint64_t v3 = (char *)this + 48;
  if (v2 != (char *)this + 48)
  {
    while (1)
    {
      if (*((void *)v2 + 4) != a2)
      {
        if (xpc_dictionary_get_uint64(*((xpc_object_t *)v2 + 5), kRDKeyLanguageModel) == a2
          || xpc_dictionary_get_uint64(*((xpc_object_t *)v2 + 5), kRDKeyVocabulary) == a2)
        {
          goto LABEL_17;
        }
        xpc_object_t value = xpc_dictionary_get_value(*((xpc_object_t *)v2 + 5), kRDKeyChildren);
        if (value)
        {
          xpc_object_t v6 = value;
          size_t count = xpc_array_get_count(value);
          if (count) {
            break;
          }
        }
      }
LABEL_10:
      uint64_t v10 = (char *)*((void *)v2 + 1);
      if (v10)
      {
        do
        {
          xpc_object_t v11 = v10;
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          xpc_object_t v11 = (char *)*((void *)v2 + 2);
          BOOL v12 = *(void *)v11 == (void)v2;
          uint64_t v2 = v11;
        }
        while (!v12);
      }
      uint64_t v2 = v11;
      if (v11 == v3) {
        return;
      }
    }
    size_t v8 = count;
    size_t v9 = 0;
    while (xpc_array_get_uint64(v6, v9) != a2)
    {
      if (v8 == ++v9) {
        goto LABEL_10;
      }
    }
LABEL_17:
    uint64_t v13 = RXOSLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = 134217984;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Deleting live object %llu\n", (uint8_t *)&v14, 0xCu);
    }
  }
}

uint64_t RDDummyPeer::ScanRecognizers(RDDummyPeer *this)
{
  uint64_t v1 = (void **)((char *)this + 64);
  *((void *)this + 9) = *((void *)this + 8);
  uint64_t v2 = (char *)*((void *)this + 5);
  uint64_t v3 = (char *)this + 48;
  if (v2 == (char *)this + 48)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    xpc_object_t v6 = (char *)this + 80;
    do
    {
      if (xpc_dictionary_get_int64(*((xpc_object_t *)v2 + 5), kRDKeyObjectType) == 1)
      {
        if (xpc_dictionary_get_BOOL(*((xpc_object_t *)v2 + 5), kRDKeyIsListening))
        {
          size_t v8 = (char *)*((void *)this + 9);
          unint64_t v7 = *((void *)this + 10);
          if ((unint64_t)v8 >= v7)
          {
            uint64_t v10 = (char *)*v1;
            uint64_t v11 = (v8 - (unsigned char *)*v1) >> 3;
            unint64_t v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 61) {
              sub_100019424();
            }
            uint64_t v13 = v7 - (void)v10;
            if (v13 >> 2 > v12) {
              unint64_t v12 = v13 >> 2;
            }
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v12;
            }
            if (v14)
            {
              uint64_t v15 = (char *)sub_10001943C((uint64_t)v6, v14);
              uint64_t v10 = (char *)*((void *)this + 8);
              size_t v8 = (char *)*((void *)this + 9);
            }
            else
            {
              uint64_t v15 = 0;
            }
            id v16 = &v15[8 * v11];
            *(void *)id v16 = *((void *)v2 + 4);
            size_t v9 = v16 + 8;
            while (v8 != v10)
            {
              uint64_t v17 = *((void *)v8 - 1);
              v8 -= 8;
              *((void *)v16 - 1) = v17;
              v16 -= 8;
            }
            *((void *)this + 8) = v16;
            *((void *)this + 9) = v9;
            *((void *)this + 10) = &v15[8 * v14];
            if (v10) {
              operator delete(v10);
            }
          }
          else
          {
            *(void *)size_t v8 = *((void *)v2 + 4);
            size_t v9 = v8 + 8;
          }
          *((void *)this + 9) = v9;
        }
        char v5 = 1;
      }
      long long v18 = (char *)*((void *)v2 + 1);
      if (v18)
      {
        do
        {
          long long v19 = v18;
          long long v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          long long v19 = (char *)*((void *)v2 + 2);
          BOOL v20 = *(void *)v19 == (void)v2;
          uint64_t v2 = v19;
        }
        while (!v20);
      }
      uint64_t v2 = v19;
    }
    while (v19 != v3);
  }
  return v5 & 1;
}

void RDDummyPeer::StartRecognition(dispatch_object_t *this)
{
  dispatch_suspend(this[12]);
  if (this[9] == this[8])
  {
    dispatch_time_t v4 = -1;
  }
  else
  {
    uint64_t v2 = random();
    uint64_t v3 = ((unint64_t)(1000000000 * v2) * (unsigned __int128)0x200000005uLL) >> 64;
    dispatch_time_t v4 = dispatch_time(0, ((v3 + ((unint64_t)(1000000000 * v2 - v3) >> 1)) >> 30) + 200000000);
  }
  dispatch_source_set_timer(this[12], v4, 0x7FFFFFFFFFFFFFFFuLL, 0xF4240uLL);
  char v5 = this[12];
  dispatch_resume(v5);
}

xpc_object_t RDDummyPeer::PickLanguageModel(uint64_t **this, void *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  char v5 = kRDKeyObjectType;
  xpc_object_t value = xpc_dictionary_get_value(a2, kRDKeyObjectType);
  xpc_dictionary_set_value(v4, v5, value);
  unint64_t v7 = kRDKeyObjectID;
  xpc_object_t v8 = xpc_dictionary_get_value(a2, kRDKeyObjectID);
  xpc_dictionary_set_value(v4, v7, v8);
  int64_t int64 = xpc_dictionary_get_int64(a2, kRDKeyObjectType);
  switch(int64)
  {
    case 10:
      xpc_object_t v17 = xpc_dictionary_get_value(a2, kRDKeyChildren);
      xpc_object_t v18 = xpc_copy(v17);
      size_t count = xpc_array_get_count(v18);
      unint64_t v20 = random();
      __str.__r_.__value_.__r.__words[0] = xpc_array_get_uint64(v18, v20 % count);
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      id v21 = sub_10001AC70(this + 5, (unint64_t *)&__str, (uint64_t)&unk_1000CB0EE, (uint64_t **)&v35);
      CFStringRef v22 = (void *)RDDummyPeer::PickLanguageModel((RDDummyPeer *)this, (void *)v21[5]);
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      if (v18)
      {
        xpc_release(v18);
        xpc_object_t v23 = xpc_array_create((xpc_object_t *)&v35.__r_.__value_.__l.__data_, 1uLL);
        CFStringRef v22 = (void *)v35.__r_.__value_.__r.__words[0];
      }
      else
      {
        xpc_object_t v23 = 0;
      }
      xpc_release(v22);
      xpc_dictionary_set_value(v4, kRDKeyChildren, v23);
      id v31 = v23;
LABEL_33:
      xpc_release(v31);
      return v4;
    case 11:
      xpc_object_t v24 = xpc_dictionary_get_value(a2, kRDKeyChildren);
      xpc_object_t v25 = xpc_copy(v24);
      size_t v26 = xpc_array_get_count(v25);
      if (v26)
      {
        size_t v27 = v26;
        for (size_t i = 0; i != v27; ++i)
        {
          __str.__r_.__value_.__r.__words[0] = xpc_array_get_uint64(v25, i);
          v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          id v29 = sub_10001AC70(this + 5, (unint64_t *)&__str, (uint64_t)&unk_1000CB0EE, (uint64_t **)&v35);
          int v30 = (void *)RDDummyPeer::PickLanguageModel((RDDummyPeer *)this, (void *)v29[5]);
          xpc_array_set_value(v25, i, v30);
          xpc_release(v30);
        }
      }
      xpc_dictionary_set_value(v4, kRDKeyChildren, v25);
      id v31 = v25;
      goto LABEL_33;
    case 13:
      memset(&v35, 0, sizeof(v35));
      unsigned int v10 = random();
      if (v10) {
        uint64_t v11 = "yada";
      }
      else {
        uint64_t v11 = "blah";
      }
      sub_100009CF0(&__str, v11);
      std::string::operator=(&v35, &__str);
      sub_10004A78C(32, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&v33);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = v33;
      int v12 = (v10 >> 1) & 7;
      if (v12)
      {
        int v13 = v12 + 1;
        do
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          std::string::append(&v35, (const std::string::value_type *)p_str, size);
          --v13;
        }
        while (v13 > 1);
      }
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v16 = &v35;
      }
      else {
        id v16 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      xpc_dictionary_set_string(v4, kRDKeyText, (const char *)v16);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      break;
  }
  return v4;
}

void sub_10004A750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004A78C@<X0>(char a1@<W0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t result = sub_10003BFB0(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    unint64_t v7 = (unsigned char *)result;
  }
  else {
    unint64_t v7 = *(unsigned char **)result;
  }
  *unint64_t v7 = a1;
  xpc_object_t v8 = v7 + 1;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v9 = a2;
    }
    else {
      size_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  *((unsigned char *)v8 + v5) = 0;
  return result;
}

void RDCreateDummyPeer(_xpc_connection_s *a1)
{
}

void sub_10004A864()
{
}

RDSpeechDonation *RDSpeechDonationInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_alloc((Class)NSLocale) initWithLocaleIdentifier:a3];
  xpc_object_t v8 = [[RDSpeechDonation alloc] initWithBundleID:a1 donorReferenceID:a2 locale:v7 taskHint:a4];

  return v8;
}

id RDspeechDonationAddAudioSamples(void *a1, uint64_t a2, uint64_t a3)
{
  return _[a1 addAudioSamples:a2 count:a3];
}

id RDspeechDonationDonateAudioForTranscription(void *a1, uint64_t a2, uint64_t a3)
{
  return _[a1 donateAudioFor:a2 logAudioFile:a3];
}

void RDQSRKeywordChanged(void)
{
  if (RDQSREngine::sInstance) {
    RDQSREngine::BuildCombinedGrammar((RDQSREngine *)RDQSREngine::sInstance);
  }
}

void RDQSRPeer::RDQSRPeer(RDQSRPeer *this, _xpc_connection_s *a2, void *a3, uint64_t a4, RDAudioObject *a5)
{
  RDPeer::RDPeer(this, a2);
  *(void *)(v9 + 48) = 0;
  *(void *)(v9 + 40) = v9 + 48;
  *(void *)uint64_t v9 = &off_1000EFE28;
  *(void *)(v9 + 56) = 0;
  *(void *)(v9 + 72) = 0;
  *(void *)(v9 + 64) = v9 + 72;
  *(void *)(v9 + 80) = 0;
  *(void *)(v9 + 96) = 0;
  *(void *)(v9 + 88) = v9 + 96;
  *(void *)(v9 + 120) = 0;
  *(void *)(v9 + 104) = 0;
  *(void *)(v9 + 112) = v9 + 120;
  *(void *)(v9 + 128) = 0;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_DWORD *)(v9 + 168) = 1065353216;
  *(void *)(v9 + 176) = 0;
  *(unsigned char *)(v9 + 200) = 0;
  *(unsigned char *)(v9 + 201) = a5 != 0;
  *(_DWORD *)(v9 + 202) = 256;
  *(unsigned char *)(v9 + 206) = 0;
  *(void *)(v9 + 216) = a3;
  *(void *)(v9 + 2++*(void *)(result + 24) = a5;
  *(void *)(v9 + 232) = 0;
  *(void *)(v9 + 240) = 0;
  xpc_retain(a3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10004AAF4;
  block[3] = &unk_1000EFEA8;
  void block[4] = this;
  void block[5] = a3;
  void block[6] = a4;
  dispatch_async((dispatch_queue_t)gRDServerQueue, block);
  if ((a4 & 8) != 0) {
    *((unsigned char *)this + 206) = 1;
  }
}

void sub_10004AAA8(_Unwind_Exception *a1)
{
  sub_10004D254(v6);
  sub_10001B844(v5, *((void **)v1 + 15));
  sub_10001B844(v4, *((void **)v1 + 12));
  sub_10001B844(v3, *((void **)v1 + 9));
  sub_10001B844(v2, *((void **)v1 + 6));
  RDPeer::~RDPeer(v1);
  _Unwind_Resume(a1);
}

void sub_10004AAF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (RDQSREngine::Instantiate(*(RDQSREngine **)(a1 + 40), *(void **)(a1 + 48)))
  {
    RDPeer::ServerIsRunning((RDPeer *)v2, 1);
    if (_os_feature_enabled_impl())
    {
      if ((*(unsigned char *)(a1 + 48) & 8) != 0)
      {
        xpc_string_get_string_ptr(*(xpc_object_t *)(v2 + 216));
        CFStringRef v3 = (const __CFString *)RDQSREngine::fullModelDir((RDQSREngine *)RDQSREngine::sInstance);
        CFStringGetCStringPtr(v3, 0x8000100u);
        *(void *)(v2 + 240) = SRSSPhoneticCheckerCreate();
      }
    }
  }
  else
  {
    RDPeer::ServerIsRunning((RDPeer *)v2, 0);
    uint64_t v4 = *(_xpc_connection_s **)(v2 + 8);
    if (v4)
    {
      xpc_connection_cancel(v4);
    }
  }
}

void RDQSRPeer::Terminate(RDQSRPeer *this)
{
  if (*((unsigned char *)this + 204))
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &stru_1000EFEE8);
  }
  else
  {
    *((void *)this + 1) = 0;
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_10004ACC8;
    block[3] = &unk_1000EFF48;
    void block[4] = this;
    dispatch_async((dispatch_queue_t)gRDServerQueue, block);
  }
}

void sub_10004AC74(id a1)
{
  RDPeer::LockConfig((RDPeer *)a1);
  uint64_t v1 = gRDServerQueue;
  dispatch_sync(v1, &stru_1000EFF28);
}

void sub_10004ACB0(id a1)
{
}

uint64_t sub_10004ACC8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 120))();
  }
  return result;
}

void RDQSRPeer::~RDQSRPeer(xpc_object_t *this)
{
  *this = &off_1000EFE28;
  xpc_release(this[27]);
  uint64_t v2 = (RDQSREngine *)RDQSREngine::sInstance;
  CFStringRef v3 = (RDQSRPeer *)this[14];
  if (v3 != (RDQSRPeer *)(this + 15))
  {
    do
    {
      RDQSREngine::RemoveGrammar(v2, *(void *)(*((void *)v3 + 4) + 16));
      uint64_t v4 = *((void *)v3 + 4);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 40);
        *(void *)(v4 + 40) = 0;
        if (v5) {
          sub_100039400(v4 + 40, v5);
        }
        operator delete();
      }
      uint64_t v6 = (RDQSRPeer *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          id v7 = v6;
          uint64_t v6 = *(RDQSRPeer **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          id v7 = (RDQSRPeer *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          CFStringRef v3 = v7;
        }
        while (!v8);
      }
      CFStringRef v3 = v7;
    }
    while (v7 != (RDQSRPeer *)(this + 15));
  }
  uint64_t v9 = (RDAudioObject *)this[28];
  if (v9)
  {
    RDAudioObject::~RDAudioObject(v9);
    operator delete();
  }
  if (*((unsigned char *)this + 206) && v2) {
    RDQSREngine::removeLogAudioFile(v2);
  }
  xpc_object_t v10 = this[30];
  if (v10)
  {
    CFRelease(v10);
    this[30] = 0;
  }
  if (*((unsigned char *)this + 200)) {
    RDQSREngine::RemovePeer(v2, (RDQSRPeer *)this);
  }
  sub_10004D254((uint64_t)(this + 17));
  sub_10001B844((uint64_t)(this + 14), this[15]);
  sub_10001B844((uint64_t)(this + 11), this[12]);
  sub_10001B844((uint64_t)(this + 8), this[9]);
  sub_10001B844((uint64_t)(this + 5), this[6]);
  RDPeer::~RDPeer((RDPeer *)this);
}

{
  uint64_t vars8;

  RDQSRPeer::~RDQSRPeer(this);
  operator delete();
}

void RDQSRPeer::UpdateOrReleaseObject(RDQSRPeer *this, unint64_t a2, xpc_object_t xdict)
{
  unint64_t v55 = a2;
  if (!*((void *)this + 1)) {
    return;
  }
  uint64_t v6 = (void *)*((void *)this + 6);
  id v7 = (uint64_t **)((char *)this + 40);
  if (v6)
  {
    BOOL v8 = (char *)this + 48;
    do
    {
      unint64_t v9 = v6[4];
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        uint64_t v11 = v6;
      }
      else {
        uint64_t v11 = v6 + 1;
      }
      if (v10) {
        BOOL v8 = (char *)v6;
      }
      uint64_t v6 = (void *)*v11;
    }
    while (*v11);
    if (v8 != (char *)this + 48 && *((void *)v8 + 4) <= a2)
    {
      int v12 = (void *)*((void *)v8 + 5);
      if (v12)
      {
        xpc_type_t type = xpc_get_type(v12);
        if (type != (xpc_type_t)&_xpc_type_dictionary)
        {
          xpc_type_t v14 = type;
          uint64_t v15 = RXOSLog();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v14;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "API misuse while updating objects : XPC_TYPE_DICTIONARY expected, passed %@ ", buf, 0xCu);
          }
          return;
        }
        if (xpc_dictionary_get_int64(*((xpc_object_t *)v8 + 5), kRDKeyObjectType) == 1)
        {
          if (xdict)
          {
            if (xpc_dictionary_get_BOOL(xdict, kRDKeyIsListening))
            {
              int v30 = RXOSLog();
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 134217984;
                *(void *)&uint8_t buf[4] = a2;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Activating recognizer %llu", buf, 0xCu);
              }
            }
LABEL_69:
            xpc_release(*((xpc_object_t *)v8 + 5));
LABEL_82:
            *((void *)v8 + 5) = xpc_retain(xdict);
            return;
          }
          sub_100032A9C((uint64_t)this + 64, &v55);
        }
        else
        {
          if (xpc_dictionary_get_BOOL(*((xpc_object_t *)v8 + 5), kRDKeyTopLevelLM))
          {
            *(_OWORD *)long long buf = a2;
            uint64_t v57 = 0;
            uint64_t v58 = 0;
            char v59 = 1;
            uint64_t v60 = 0;
            size_t v54 = buf;
            xpc_object_t v37 = (uint64_t *)sub_10004D2D8((uint64_t)this + 112, (unint64_t **)&v54);
            unint64_t v38 = v37;
            if ((uint64_t *)((char *)this + 120) == v37)
            {
              if (xdict) {
                operator new();
              }
            }
            else if (xdict)
            {
              *(unsigned char *)(v37[4] + 48) = 1;
            }
            else
            {
              RDQSREngine::RemoveGrammar((RDQSREngine *)RDQSREngine::sInstance, *(void *)(v37[4] + 16));
              uint64_t v48 = v38[4];
              if (v48)
              {
                uint64_t v49 = *(void *)(v48 + 40);
                *(void *)(v48 + 40) = 0;
                if (v49) {
                  sub_100039400(v48 + 40, v49);
                }
                operator delete();
              }
              sub_100032B18((uint64_t **)this + 14, v38);
              operator delete(v38);
            }
            uint64_t v50 = v58;
            uint64_t v58 = 0;
            if (v50) {
              sub_100039400((uint64_t)&v58, v50);
            }
            xpc_release(*((xpc_object_t *)v8 + 5));
            if (xdict) {
              goto LABEL_82;
            }
            goto LABEL_83;
          }
          if (xdict)
          {
            unint64_t int64 = xpc_dictionary_get_int64(xdict, kRDKeyObjectType);
            if (int64 <= 0xD && ((1 << int64) & 0x2C00) != 0) {
              RDQSRPeer::checkAndUpdateLMCache(this, xdict);
            }
            goto LABEL_69;
          }
        }
        xpc_release(*((xpc_object_t *)v8 + 5));
LABEL_83:
        std::string::size_type v51 = (void *)((char *)this + 136);
        unint64_t v52 = sub_10001BAC8(v51, &v55);
        if (v52) {
          sub_10004D6A4(v51, v52);
        }
        sub_100032B18(v7, (uint64_t *)v8);
        operator delete(v8);
        return;
      }
    }
  }
  if (xdict)
  {
    int64_t v16 = xpc_dictionary_get_int64(xdict, kRDKeyObjectType);
    if (v16)
    {
      int64_t v17 = v16;
      *(void *)long long buf = a2;
      *(void *)&uint8_t buf[8] = xpc_retain(xdict);
      sub_10004D880(v7, (unint64_t *)buf, (uint64_t *)buf);
      if (v17 == 1)
      {
        xpc_object_t v18 = RXOSLog();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134217984;
          *(void *)&uint8_t buf[4] = v55;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Adding new recognizer %llu", buf, 0xCu);
        }
        sub_1000328FC((uint64_t **)this + 8, &v55, (uint64_t *)&v55);
      }
      else if (xpc_dictionary_get_BOOL(xdict, kRDKeyTopLevelLM))
      {
        operator new();
      }
    }
    else
    {
      xpc_object_t value = xpc_dictionary_get_value(xdict, kRDKeyURL);
      if (value)
      {
        unint64_t v20 = value;
        bytes_ptr = (const UInt8 *)xpc_data_get_bytes_ptr(value);
        size_t length = xpc_data_get_length(v20);
        CFDataRef v23 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, bytes_ptr, length, kCFAllocatorNull);
        if (v23)
        {
          CFDataRef v24 = v23;
          CFURLRef v25 = CFURLCreateByResolvingBookmarkData(kCFAllocatorDefault, v23, 0x100uLL, 0, 0, 0, 0);
          if (v25) {
            RDQSREngine::UseFileAudio((RDQSREngine *)RDQSREngine::sInstance, v25, v26, v27);
          }
          CFRelease(v24);
        }
      }
      else
      {
        id v28 = (RDQSRSoundSource *)xpc_dictionary_get_value(xdict, kRDKeyAudioData);
        if (v28) {
          RDQSREngine::UseCannedAudio((RDQSREngine *)RDQSREngine::sInstance, v28, v29);
        }
        if (*((void *)this + 28))
        {
          if (RXAutomationModeResult() || RXAutomationModeSynthesis() || RXAutomationModeFileName())
          {
            uint64_t v32 = RDQSREngine::sInstance;
            std::string v33 = (void (*)(RDQSRSoundSource *))RXAutomationSimulateOpenMic();
            RDQSREngine::UseMixedAudio(v32, v33);
          }
          else
          {
            RDQSREngine::UseLiveAudio(RDQSREngine::sInstance, *((RDAudioObject **)this + 28), v31);
          }
        }
      }
      xpc_object_t v34 = xpc_dictionary_get_value(xdict, kRDKeyTextToBeRecognized);
      if (v34)
      {
        string_ptr = xpc_string_get_string_ptr(v34);
        CFStringRef v36 = CFStringCreateWithCString(0, string_ptr, 0x8000100u);
        if (RXAutomationModeResult())
        {
          RDQSREngine::RecognizeText((RDQSREngine *)RDQSREngine::sInstance, v36);
        }
        else if (RXAutomationModeSynthesis())
        {
          RDQSREngine::SynthesizeText((RDQSREngine *)RDQSREngine::sInstance, v36);
        }
        else if (RXAutomationModeFileName())
        {
          RDQSREngine::RecognizeAudioFile((RDQSREngine *)RDQSREngine::sInstance, v36);
        }
        else
        {
          int64_t v39 = RXOSLog();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Unknown Audio mode specified", buf, 2u);
          }
        }
        if (v36) {
          CFRelease(v36);
        }
      }
      xpc_object_t v40 = xpc_dictionary_get_value(xdict, kRDKeyFilterProfanity);
      if (v40)
      {
        int v41 = *((unsigned __int8 *)this + 205);
        if (v41 != xpc_BOOL_get_value(v40))
        {
          int v42 = *((unsigned __int8 *)this + 205) ^ 1;
          *((unsigned char *)this + 205) ^= 1u;
          RDQSREngine::FilterProfanity((void **)RDQSREngine::sInstance, v42);
        }
      }
      xpc_object_t v43 = xpc_dictionary_get_value(xdict, kRDKeyIsListening);
      if (v43)
      {
        *((unsigned char *)this + 202) = 1;
        int v44 = *((unsigned __int8 *)this + 203);
        if (v44 != xpc_BOOL_get_value(v43))
        {
          char v45 = *((unsigned char *)this + 203) ^ 1;
          *((unsigned char *)this + 203) = v45;
          RDQSREngine::CanListen((RDQSREngine *)RDQSREngine::sInstance, this, v45);
          dispatch_time_t v46 = dispatch_time(0, 1000000000);
          v53[0] = _NSConcreteStackBlock;
          v53[1] = 0x40000000;
          v53[2] = sub_10004BD14;
          v53[3] = &unk_1000EFF68;
          v53[4] = this;
          dispatch_after(v46, (dispatch_queue_t)gRDServerQueue, v53);
        }
      }
      *((void *)this + 23) = xpc_dictionary_get_uint64(xdict, kRDKeyObjectID);
      *((void *)this + ++*(void *)(result + 24) = xpc_dictionary_get_uint64(xdict, kRDKeyCallbacks);
    }
  }
}

void sub_10004B738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a26) {
    sub_100039400(v26, a26);
  }
  _Unwind_Resume(exception_object);
}

void RDQSRPeer::updateLMCache(uint64_t a1, void *a2, uint64_t a3)
{
  xpc_type_t type = xpc_get_type(a2);
  if (type != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_type_t v7 = type;
    BOOL v8 = RXOSLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "API misuse while updating LM : XPC_TYPE_DICTIONARY expected, passed %@ ", buf, 0xCu);
    }
    return;
  }
  if ((xpc_dictionary_get_int64(a2, kRDKeyObjectType) & 0xFFFFFFFFFFFFFFFELL) == 0xA)
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, kRDKeyChildren);
    size_t count = xpc_array_get_count(value);
    if (count)
    {
      size_t v11 = count;
      size_t v12 = 0;
      while (1)
      {
        uunint64_t int64 = 0;
        uunint64_t int64 = xpc_array_get_uint64(value, v12);
        *(void *)long long buf = &uint64;
        uint64_t v13 = sub_10001AC70((uint64_t **)(a1 + 40), &uint64, (uint64_t)&unk_1000CB113, (uint64_t **)buf)[5];
        xpc_type_t v14 = sub_10001BAC8((void *)(a1 + 136), &uint64);
        if (!v14 || v14[5] != *(void *)(a3 + 16)) {
          goto LABEL_24;
        }
        uint64_t v15 = (void *)v14[3];
        if (v15 != v14 + 4) {
          break;
        }
LABEL_25:
        if (++v12 == v11) {
          return;
        }
      }
      int64_t v16 = *(void **)a3;
      while (v15[4] == v16[4])
      {
        int64_t v17 = (void *)v15[1];
        xpc_object_t v18 = v15;
        if (v17)
        {
          do
          {
            uint64_t v15 = v17;
            int64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v15 = (void *)v18[2];
            BOOL v19 = *v15 == (void)v18;
            xpc_object_t v18 = v15;
          }
          while (!v19);
        }
        unint64_t v20 = (void *)v16[1];
        if (v20)
        {
          do
          {
            id v21 = v20;
            unint64_t v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            id v21 = (void *)v16[2];
            BOOL v19 = *v21 == (void)v16;
            int64_t v16 = v21;
          }
          while (!v19);
        }
        int64_t v16 = v21;
        if (v15 == v14 + 4) {
          goto LABEL_25;
        }
      }
LABEL_24:
      *(void *)long long buf = &uint64;
      CFStringRef v22 = sub_10004D93C(a1 + 136, &uint64, (uint64_t)&unk_1000CB113, (uint64_t **)buf);
      sub_10004BFD4(v22 + 3, *(void **)a3, (void *)(a3 + 8));
      RDQSRPeer::updateLMCache(a1, v13, a3);
      goto LABEL_25;
    }
  }
}

void RDQSRPeer::checkAndUpdateLMCache(RDQSRPeer *this, xpc_object_t xdict)
{
  uunint64_t int64 = xpc_dictionary_get_uint64(xdict, kRDKeyObjectID);
  if (sub_10001BAC8((void *)this + 17, &uint64))
  {
    *(void *)unint64_t v20 = &uint64;
    CFStringRef v3 = sub_10004D93C((uint64_t)this + 136, &uint64, (uint64_t)&unk_1000CB113, (uint64_t **)v20);
    string = xpc_dictionary_get_string(xdict, kRDKeyCategoryID);
    uint64_t v5 = (void *)v3[3];
    if (v5 != v3 + 4)
    {
      uint64_t v6 = (char *)string;
      do
      {
        *(_OWORD *)unint64_t v20 = (unint64_t)v5[4];
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        char v23 = 1;
        uint64_t v24 = 0;
        *(void *)long long buf = v20;
        xpc_type_t v7 = (void *)sub_10004D2D8((uint64_t)this + 112, (unint64_t **)buf);
        if ((void *)((char *)this + 120) != v7)
        {
          if (v6)
          {
            sub_100009CF0(buf, v6);
            BOOL doesSupportCategory = rd_userprofile_util::doesSupportCategory(buf);
            BOOL v9 = doesSupportCategory;
            if (v19 < 0)
            {
              operator delete(*(void **)buf);
              if (v9)
              {
LABEL_8:
                if (RXLogServerGrammar())
                {
                  BOOL v10 = RXOSLog();
                  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)long long buf = 136315138;
                    *(void *)&uint8_t buf[4] = v6;
                    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Updating category -> %s", buf, 0xCu);
                  }
                }
                *(void *)(v7[4] + 64) = xdict;
                goto LABEL_14;
              }
            }
            else if (doesSupportCategory)
            {
              goto LABEL_8;
            }
          }
          *(unsigned char *)(v7[4] + 48) = 1;
        }
LABEL_14:
        uint64_t v11 = v22;
        uint64_t v22 = 0;
        if (v11) {
          sub_100039400((uint64_t)&v22, v11);
        }
        size_t v12 = (void *)v5[1];
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            size_t v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (void *)v5[2];
            BOOL v14 = *v13 == (void)v5;
            uint64_t v5 = v13;
          }
          while (!v14);
        }
        uint64_t v5 = v13;
      }
      while (v13 != v3 + 4);
    }
    RDQSRPeer::updateLMCache((uint64_t)this, xdict, (uint64_t)(v3 + 3));
  }
  else
  {
    uint64_t v15 = RXOSLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v20 = 134217984;
      *(void *)&v20[4] = uint64;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "LMCache: Language ID %llu was not stored in cache and is updated", v20, 0xCu);
    }
  }
}

void sub_10004BCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27) {
    sub_100039400(v27, a27);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004BD14(uint64_t a1)
{
  uint64_t v1 = *(RDQSRPeer **)(a1 + 32);
  if (RDQSREngine::PeerExists(RDQSREngine::sInstance, (uint64_t)v1) && !*(unsigned char *)(RDQSREngine::sInstance + 85))
  {
    RDQSRPeer::EndUtt(v1);
  }
}

void RDQSRPeer::EndUtt(RDQSRPeer *this)
{
  if (*((unsigned char *)this + 202) && !*((unsigned char *)this + 203))
  {
    uint64_t v2 = (RDQSREngine *)RDQSREngine::sInstance;
    CFStringRef v3 = (char *)*((void *)this + 11);
    uint64_t v15 = (char *)this + 88;
    uint64_t v4 = (char *)this + 96;
    if (v3 != (char *)this + 96)
    {
      uint64_t v5 = (char *)this + 120;
      do
      {
        v18[0] = *((void *)v3 + 4);
        v18[1] = 0;
        v18[3] = 0;
        uint64_t v19 = 0;
        char v20 = 1;
        uint64_t v21 = 0;
        __p[0] = v18;
        uint64_t v6 = sub_10004D2D8((uint64_t)this + 112, (unint64_t **)__p);
        uint64_t v7 = v6;
        if (v5 != (char *)v6
          && xpc_dictionary_get_string(*(xpc_object_t *)(*(void *)(v6 + 32) + 32), kRDKeyCommandID))
        {
          string = (char *)xpc_dictionary_get_string(*(xpc_object_t *)(*(void *)(v7 + 32) + 32), kRDKeyCommandID);
          sub_100009CF0(__p, string);
          BOOL v9 = RXOSLog();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            BOOL v10 = __p;
            if (v17 < 0) {
              BOOL v10 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136315138;
            char v23 = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Deactivate Grammar after End of utterance: CommandID -> %s", buf, 0xCu);
          }
          if (v17 < 0) {
            operator delete(__p[0]);
          }
        }
        RDQSREngine::GrammarIsLive(v2, *(void *)(*(void *)(v7 + 32) + 16), 0);
        uint64_t v11 = v19;
        uint64_t v19 = 0;
        if (v11) {
          sub_100039400((uint64_t)&v19, v11);
        }
        size_t v12 = (char *)*((void *)v3 + 1);
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            size_t v12 = *(char **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (char *)*((void *)v3 + 2);
            BOOL v14 = *(void *)v13 == (void)v3;
            CFStringRef v3 = v13;
          }
          while (!v14);
        }
        CFStringRef v3 = v13;
      }
      while (v13 != v4);
    }
    sub_10001B844((uint64_t)v15, *((void **)this + 12));
    *((void *)this + 12) = 0;
    *((void *)this + 13) = 0;
    *((void *)this + 11) = v4;
    RDQSREngine::BuildCombinedGrammar(v2);
  }
}

void sub_10004BF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
}

uint64_t *sub_10004BFD4(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_10004D474(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t RDQSRPeer::EngineIsRunning(RDQSRPeer *this)
{
  if (!*((unsigned char *)this + 200))
  {
    RDQSREngine::AddPeer((RDQSREngine *)RDQSREngine::sInstance, this);
    *((unsigned char *)this + 200) = 1;
  }
  return 1;
}

uint64_t RDQSRPeer::ClientUpdate(RDQSRPeer *this, xpc_object_t object)
{
  if (!*((unsigned char *)this + 200))
  {
    RDQSREngine::AddPeer((RDQSREngine *)RDQSREngine::sInstance, this);
    *((unsigned char *)this + 200) = 1;
  }
  RDPeer::ClientUpdate(this, object);
  *((void *)this + 22) = xpc_dictionary_get_uint64(object, kRDKeyEpoch);
  xpc_object_t value = xpc_dictionary_get_value(object, kRDKeyObjects);
  if (value)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 0x40000000;
    applier[2] = sub_10004C1F0;
    applier[3] = &unk_1000EFF88;
    applier[4] = this;
    xpc_array_apply(value, applier);
  }
  xpc_object_t v5 = xpc_dictionary_get_value(object, kRDKeyDead);
  if (v5)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 0x40000000;
    _OWORD v7[2] = sub_10004C23C;
    v7[3] = &unk_1000EFFA8;
    void v7[4] = this;
    xpc_array_apply(v5, v7);
  }
  return RDQSRPeer::ScanRecognizers(this);
}

uint64_t sub_10004C1F0(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v4 = *(RDQSRPeer **)(a1 + 32);
  uunint64_t int64 = xpc_dictionary_get_uint64(xdict, kRDKeyObjectID);
  RDQSRPeer::UpdateOrReleaseObject(v4, uint64, xdict);
  return 1;
}

uint64_t sub_10004C23C(uint64_t a1, int a2, xpc_object_t xuint)
{
  CFStringRef v3 = *(RDQSRPeer **)(a1 + 32);
  uint64_t value = xpc_uint64_get_value(xuint);
  RDQSRPeer::UpdateOrReleaseObject(v3, value, 0);
  return 1;
}

uint64_t RDQSRPeer::ScanRecognizers(RDQSRPeer *this)
{
  *(_WORD *)((char *)this + 207) = 0;
  int64_t v39 = (RDQSREngine *)RDQSREngine::sInstance;
  v48[0] = 0;
  v48[1] = 0;
  long long v47 = (uint64_t *)v48;
  uint64_t v2 = (char *)*((void *)this + 8);
  CFStringRef v3 = (char *)this + 72;
  BOOL v4 = v2 != (char *)this + 72;
  if (v2 == (char *)this + 72)
  {
LABEL_23:
    char v17 = (char *)*((void *)this + 11);
    CFStringRef v36 = (uint64_t *)((char *)this + 88);
    xpc_object_t v18 = (char *)this + 96;
    if (v17 != (char *)this + 96)
    {
      uint64_t v19 = (char *)this + 112;
      char v20 = (char *)this + 120;
      do
      {
        uint64_t v21 = v48[0];
        unint64_t v22 = *((void *)v17 + 4);
        if (!v48[0]) {
          goto LABEL_34;
        }
        char v23 = v48;
        do
        {
          uint64_t v24 = v21;
          CFURLRef v25 = v23;
          unint64_t v26 = v21[4];
          uint64_t v27 = v21 + 1;
          if (v26 >= v22)
          {
            uint64_t v27 = v24;
            char v23 = (void **)v24;
          }
          uint64_t v21 = (void *)*v27;
        }
        while (v21);
        if (v23 == v48) {
          goto LABEL_34;
        }
        if (v26 < v22) {
          uint64_t v24 = v25;
        }
        if (v22 < v24[4])
        {
LABEL_34:
          xpc_object_t v40 = (uint64_t *)*((void *)v17 + 4);
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          char v44 = 1;
          uint64_t v45 = 0;
          *(void *)long long buf = &v40;
          uint64_t v28 = sub_10004D2D8((uint64_t)v19, (unint64_t **)buf);
          if (v20 != (char *)v28)
          {
            id v29 = RXOSLog();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v30 = *(void *)(*(void *)(v28 + 32) + 16);
              *(_DWORD *)long long buf = 134217984;
              *(void *)&uint8_t buf[4] = v30;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Deactivate grammar %zu\n", buf, 0xCu);
            }
            RDQSREngine::GrammarIsLive(v39, *(void *)(*(void *)(v28 + 32) + 16), 0);
          }
          uint64_t v31 = v43;
          uint64_t v43 = 0;
          if (v31) {
            sub_100039400((uint64_t)&v43, v31);
          }
        }
        uint64_t v32 = (char *)*((void *)v17 + 1);
        if (v32)
        {
          do
          {
            std::string v33 = v32;
            uint64_t v32 = *(char **)v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            std::string v33 = (char *)*((void *)v17 + 2);
            BOOL v16 = *(void *)v33 == (void)v17;
            char v17 = v33;
          }
          while (!v16);
        }
        char v17 = v33;
      }
      while (v33 != v18);
    }
    sub_10004DB94(v36, (uint64_t)&v47);
    RDQSREngine::BuildCombinedGrammar(v39);
    uint64_t v34 = v4;
  }
  else
  {
    unint64_t v38 = (char *)this + 112;
    xpc_object_t v37 = (char *)this + 120;
    while (*((unsigned char *)this + 203))
    {
      xpc_object_t v40 = (uint64_t *)(v2 + 32);
      xpc_object_t v5 = sub_10001AC70((uint64_t **)this + 5, (unint64_t *)v2 + 4, (uint64_t)&unk_1000CB113, &v40);
      uint64_t v6 = (void *)v5[5];
      if (v6)
      {
        if (xpc_dictionary_get_BOOL((xpc_object_t)v5[5], kRDKeyIsListening))
        {
          dispatch_time_t v46 = 0;
          uunint64_t int64 = (uint64_t *)xpc_dictionary_get_uint64(v6, kRDKeyLanguageModel);
          dispatch_time_t v46 = uint64;
          if (uint64)
          {
            xpc_object_t v40 = uint64;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            char v44 = 1;
            uint64_t v45 = 0;
            *(void *)long long buf = &v40;
            uint64_t v8 = sub_10004D2D8((uint64_t)v38, (unint64_t **)buf);
            if (v37 == (char *)v8)
            {
              size_t v12 = RXOSLog();
              if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 134217984;
                *(void *)&uint8_t buf[4] = v46;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "ScanRecognizers:: Gram entry not found for lmID %llu", buf, 0xCu);
              }
            }
            else
            {
              *(void *)long long buf = &v46;
              *(void *)(*(void *)(v8 + 32) + 32) = sub_10001AC70((uint64_t **)this + 5, (unint64_t *)&v46, (uint64_t)&unk_1000CB113, (uint64_t **)buf)[5];
              *(void *)(*(void *)(v8 + 32) + 8) = xpc_dictionary_get_uint64(v6, kRDKeyObjectID);
              *(void *)(*(void *)(v8 + 32) + 56) = xpc_dictionary_get_uint64(v6, kRDKeyMaxResults);
              *(unsigned char *)(*(void *)(v8 + 32) + 49) = xpc_dictionary_get_BOOL(v6, kRDKeyUseStreaming);
              *(unsigned char *)(*(void *)(v8 + 32) + 50) = xpc_dictionary_get_BOOL(v6, kRDKeyAllowCloseMatch);
              *(unsigned char *)(*(void *)(v8 + 32) + 51) = xpc_dictionary_get_BOOL(v6, kRDKeySpellingMode);
              BOOL v9 = xpc_dictionary_get_BOOL(v6, kRDKeyNumberMode);
              uint64_t v10 = *(void *)(v8 + 32);
              *(unsigned char *)(v10 + 52) = v9;
              RDQSREngine::GrammarIsLive(v39, *(void *)(v10 + 16), 1);
              uint64_t v11 = *(void *)(v8 + 32);
              if (*(unsigned char *)(v11 + 51)) {
                *((unsigned char *)this + 207) = 1;
              }
              if (*(unsigned char *)(v11 + 52)) {
                *((unsigned char *)this + 208) = 1;
              }
              sub_1000328FC(&v47, (unint64_t *)&v46, (uint64_t *)&v46);
            }
            uint64_t v13 = v43;
            uint64_t v43 = 0;
            if (v13) {
              sub_100039400((uint64_t)&v43, v13);
            }
          }
        }
      }
      BOOL v14 = (char *)*((void *)v2 + 1);
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          BOOL v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (char *)*((void *)v2 + 2);
          BOOL v16 = *(void *)v15 == (void)v2;
          uint64_t v2 = v15;
        }
        while (!v16);
      }
      uint64_t v2 = v15;
      if (v15 == v3) {
        goto LABEL_23;
      }
    }
    uint64_t v34 = 1;
  }
  sub_10001B844((uint64_t)&v47, v48[0]);
  return v34;
}

void sub_10004C73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *a28)
{
}

void RDQSRPeer::AddTraining(RDQSRPeer *this, void *a2)
{
  if (!*((unsigned char *)this + 204))
  {
    if (!*((unsigned char *)this + 200))
    {
      RDQSREngine::AddPeer((RDQSREngine *)RDQSREngine::sInstance, this);
      *((unsigned char *)this + 200) = 1;
    }
    *((unsigned char *)this + 204) = 1;
  }
  BOOL v4 = (RDQSREngine *)RDQSREngine::sInstance;
  RDQSREngine::AddTrainingData(v4, a2);
}

BOOL RDQSRPeer::SetSecureFieldFocused(RDQSRPeer *this, xpc_object_t xdict)
{
  if (!*((unsigned char *)this + 200))
  {
    RDQSREngine::AddPeer((RDQSREngine *)RDQSREngine::sInstance, this);
    *((unsigned char *)this + 200) = 1;
  }
  BOOL v4 = (RDQSREngine *)RDQSREngine::sInstance;
  return RDQSREngine::SetSecureFieldFocused(v4, xdict);
}

uint64_t RDQSRPeer::AddLeadingContext(RDQSRPeer *this, void *a2)
{
  if (!*((unsigned char *)this + 200))
  {
    RDQSREngine::AddPeer((RDQSREngine *)RDQSREngine::sInstance, this);
    *((unsigned char *)this + 200) = 1;
  }
  BOOL v4 = (RDQSREngine *)RDQSREngine::sInstance;
  return RDQSREngine::AddLeadingContextData(v4, a2);
}

void RDQSRPeer::AddOtherContext(RDQSRPeer *this, xpc_object_t xdict)
{
  if (!*((unsigned char *)this + 200))
  {
    RDQSREngine::AddPeer((RDQSREngine *)RDQSREngine::sInstance, this);
    *((unsigned char *)this + 200) = 1;
  }
  BOOL v4 = (RDQSREngine *)RDQSREngine::sInstance;
  RDQSREngine::AddOtherContextData(v4, xdict);
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep RDQSRPeer::ResetRecognition(RDQSRPeer *this)
{
  if (!*((unsigned char *)this + 200))
  {
    RDQSREngine::AddPeer((RDQSREngine *)RDQSREngine::sInstance, this);
    *((unsigned char *)this + 200) = 1;
  }
  uint64_t v2 = (RDQSREngine *)RDQSREngine::sInstance;
  return RDQSREngine::ResetRecognition(v2);
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep RDQSRPeer::SetResetRecognitionMode(RDQSRPeer *this, xpc_object_t xdict)
{
  if (!*((unsigned char *)this + 200))
  {
    RDQSREngine::AddPeer((RDQSREngine *)RDQSREngine::sInstance, this);
    *((unsigned char *)this + 200) = 1;
  }
  BOOL v4 = (RDQSREngine *)RDQSREngine::sInstance;
  return RDQSREngine::SetResetRecognitionMode(v4, xdict);
}

void RDQSRPeer::SaveUserProfileToFile(RDQSRPeer *this, xpc_object_t xdict)
{
  if (!*((unsigned char *)this + 200))
  {
    RDQSREngine::AddPeer((RDQSREngine *)RDQSREngine::sInstance, this);
    *((unsigned char *)this + 200) = 1;
  }
  BOOL v4 = (void **)RDQSREngine::sInstance;
  RDQSREngine::SaveUserProfileToFile(v4, xdict);
}

void RDQSRPeer::PhoneticNeighborsForText(RDQSRPeer *this, xpc_object_t xdict, void *a3)
{
  if (!*((unsigned char *)this + 200))
  {
    RDQSREngine::AddPeer((RDQSREngine *)RDQSREngine::sInstance, this);
    *((unsigned char *)this + 200) = 1;
  }
  if (*((void *)this + 30))
  {
    xpc_dictionary_get_string(xdict, kRDKeyText);
    CFArrayRef v6 = (const __CFArray *)SRSSPhoneticCheckerCopyGuesses();
    if (v6)
    {
      CFArrayRef v7 = v6;
      if (CFArrayGetCount(v6) >= 1)
      {
        xpc_object_t empty = xpc_array_create_empty();
        if (CFArrayGetCount(v7) >= 1)
        {
          CFIndex v9 = 0;
          do
          {
            CFArrayGetValueAtIndex(v7, v9);
            CFStringRef v10 = (const __CFString *)SRSSPhoneticCheckerResultCopyText();
            if (v10)
            {
              CFStringRef v11 = v10;
              memset(v13, 0, sizeof(v13));
              if (CFStringGetCString(v10, (char *)v13, 512, 0x8000100u))
              {
                xpc_object_t v12 = xpc_string_create((const char *)v13);
                xpc_array_append_value(empty, v12);
                CFRelease(v11);
                xpc_release(v12);
              }
            }
            ++v9;
          }
          while (CFArrayGetCount(v7) > v9);
        }
        if (a3) {
          xpc_dictionary_set_value(a3, kRDKeyText, empty);
        }
      }
      CFRelease(v7);
    }
  }
}

void RDQSRPeer::LogMatchedCommandID(uint64_t **this, void *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a2, kRDKeyChildren);
  if (value)
  {
    BOOL v4 = value;
    uint64_t count = (unsigned __int16)xpc_array_get_count(value);
    if (count)
    {
      size_t v6 = 0;
      while (1)
      {
        xpc_object_t v7 = xpc_array_get_value(v4, v6);
        uunint64_t int64 = 0;
        uunint64_t int64 = xpc_dictionary_get_uint64(v7, kRDKeyObjectID);
        __p[0] = &uint64;
        uint64_t v8 = sub_10001AC70(this + 5, &uint64, (uint64_t)&unk_1000CB113, (uint64_t **)__p);
        CFIndex v9 = (void *)v8[5];
        if (v9)
        {
          if (xpc_dictionary_get_string((xpc_object_t)v8[5], kRDKeyCommandID))
          {
            string = (char *)xpc_dictionary_get_string(v9, kRDKeyCommandID);
            sub_100009CF0(__p, string);
            CFStringRef v11 = RXOSLog();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              xpc_object_t v12 = __p;
              if (v14 < 0) {
                xpc_object_t v12 = (void **)__p[0];
              }
              *(_DWORD *)long long buf = 136446210;
              char v17 = v12;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Matched Grammar: CommandID -> %{public}s", buf, 0xCu);
            }
            if (v14 < 0) {
              break;
            }
          }
        }
        if (v7) {
          goto LABEL_12;
        }
LABEL_13:
        if (count == ++v6) {
          return;
        }
      }
      operator delete(__p[0]);
      if (!v7) {
        goto LABEL_13;
      }
LABEL_12:
      RDQSRPeer::LogMatchedCommandID((RDQSRPeer *)this, v7);
      goto LABEL_13;
    }
  }
}

void sub_10004CDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RDQSRPeer::ServerResponse(uint64_t a1, void *a2, uint64_t a3)
{
  BOOL v6 = *(unsigned char *)(RDQSREngine::sInstance + 48) == 0;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v7, kRDKeyMessage, 200);
  xpc_dictionary_set_uint64(v7, kRDKeyEpoch, *(void *)(a1 + 176));
  if (a2) {
    xpc_dictionary_set_uint64(a2, kRDKeyUtteranceID, *(void *)(RDQSREngine::sInstance + 176));
  }
  if (a3)
  {
    *(void *)long long buf = a3 + 8;
    uint64_t v8 = sub_10001AC70((uint64_t **)(a1 + 40), (unint64_t *)(a3 + 8), (uint64_t)&unk_1000CB113, (uint64_t **)buf);
    xpc_object_t v9 = xpc_copy((xpc_object_t)v8[5]);
    xpc_dictionary_set_value(v9, kRDKeyLanguageModel, a2);
    if (a2)
    {
      if (*(void *)(a1 + 224)) {
        RDPeer::KeepSystemAwake((RDPeer *)a1);
      }
      xpc_release(a2);
      BOOL v6 = 0;
    }
    xpc_dictionary_set_value(v7, kRDKeyRecognizer, v9);
    xpc_release(v9);
  }
  if (*(unsigned char *)(a1 + 16))
  {
    CFStringRef v10 = xpc_copy_description(v7);
    CFStringRef v11 = RXOSLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Server Response %s", buf, 0xCu);
    }
    free(v10);
  }
  if (a2) {
    char v12 = v6;
  }
  else {
    char v12 = 1;
  }
  if (v12) {
    xpc_release(v7);
  }
  else {
    RDPeer::SendClientMessage((RDPeer *)a1, v7);
  }
}

void RDQSRPeer::EndPhrase(uint64_t **a1, int a2, uint64_t a3, void *a4)
{
  RDQSRPeer::LogMatchedCommandID(a1, a4);
  RDQSRPeer::ServerResponse((uint64_t)a1, a4, a3);
}

void RDQSRPeer::ReachedEndofAudioFile(RDQSRPeer *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v2, kRDKeyMessage, 205);
  xpc_dictionary_set_uint64(v2, kRDKeyCallbacks, 2uLL);
  xpc_dictionary_set_uint64(v2, kRDKeyObjectID, *((void *)this + 23));
  RDPeer::SendClientMessage(this, v2);
}

void RDQSRPeer::BeginUtt(RDQSRPeer *this)
{
  if (*((unsigned char *)this + 192))
  {
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v2, kRDKeyMessage, 205);
    xpc_dictionary_set_uint64(v2, kRDKeyUtteranceID, *(void *)(RDQSREngine::sInstance + 176));
    xpc_dictionary_set_uint64(v2, kRDKeyCallbacks, 1uLL);
    xpc_dictionary_set_uint64(v2, kRDKeyObjectID, *((void *)this + 23));
    RDPeer::SendClientMessage(this, v2);
  }
}

void RDCreateQSRPeer(_xpc_connection_s *a1, void *a2, unint64_t a3, RDAudioObject *a4)
{
}

void sub_10004D230()
{
}

uint64_t sub_10004D254(uint64_t a1)
{
  sub_10004D290(a1, *(void ***)(a1 + 16));
  xpc_object_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10004D290(uint64_t a1, void **a2)
{
  if (a2)
  {
    xpc_object_t v2 = a2;
    do
    {
      CFStringRef v3 = *v2;
      sub_10001B844((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      xpc_object_t v2 = (void **)v3;
    }
    while (v3);
  }
}

uint64_t sub_10004D2D8(uint64_t a1, unint64_t **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = **a2;
  uint64_t v6 = v2;
  do
  {
    unint64_t v7 = **(void **)(v3 + 32);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      xpc_object_t v9 = (uint64_t *)v3;
    }
    else {
      xpc_object_t v9 = (uint64_t *)(v3 + 8);
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < **(void **)(v6 + 32)) {
    return v2;
  }
  return v6;
}

uint64_t *sub_10004D330(uint64_t **a1, unint64_t **a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = **a2;
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        unint64_t v9 = *(void *)v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v8 = a1 + 1;
LABEL_10:
    CFStringRef v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_10001AD30(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_10004D3F4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_10004D474((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_10004D45C(_Unwind_Exception *a1)
{
  sub_10001B844(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10004D474(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)sub_10004D4FC(a1, a2, &v11, &v10, a3);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    unint64_t v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a4;
    sub_10001AD30(a1, v11, v8, v7);
  }
  return v7;
}

void *sub_10004D4FC(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    BOOL v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          BOOL v16 = (void *)*v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        BOOL v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      char v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    char v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          char v20 = (void *)*v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        char v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_10004D6A4(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10004D6F0(a1, a2, (uint64_t)&v5);
  uint64_t v3 = v5;
  unint64_t v5 = 0;
  if (v3) {
    sub_10004D824((uint64_t)&v6, v3);
  }
  return v2;
}

void *sub_10004D6F0@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *unint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10004D824(uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_10001B844((uint64_t)(a2 + 3), a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *sub_10004D880(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint8x8_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint8x8_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint8x8_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    v10[4] = *a3;
    void v10[5] = v11;
    sub_10001AD30(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void *sub_10004D93C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (size_t i = *v10; i; size_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  size_t i = operator new(0x30uLL);
  *size_t i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[5] = 0;
  i[4] = 0;
  i[2] = v14;
  i[3] = i + 4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100018F74(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *size_t i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  *size_t i = *v13;
  *uint64_t v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10004DB78(_Unwind_Exception *a1)
{
  sub_10004D824(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10004DB94(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  int8x8_t v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (result[2]) {
    uint64_t result = (uint64_t *)(*v3 + 16);
  }
  *uint64_t result = (uint64_t)v3;
  uint64_t v6 = (void *)(*(void *)(a2 + 8) + 16);
  if (!v4) {
    uint64_t v6 = (void *)a2;
  }
  void *v6 = a2 + 8;
  return result;
}

void RDKeyword::SetLocale(RDKeyword *this, const char *a2)
{
  if (qword_1000FEC10 != -1) {
    dispatch_once(&qword_1000FEC10, &stru_1000F0108);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10004DC94;
  block[3] = &unk_1000EFFE0;
  void block[4] = this;
  dispatch_sync((dispatch_queue_t)qword_1000FEC08, block);
}

CFStringRef sub_10004DC94(CFStringRef result)
{
  if (!qword_1000FEBE8)
  {
    uint64_t result = CFStringCreateWithCString(0, (const char *)result[1].isa, 0x8000100u);
    qword_1000FEBE8 = (uint64_t)result;
  }
  return result;
}

void RDKeyword::Text(uint64_t a1@<X8>)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x4002000000;
  unint64_t v8 = sub_10004DE30;
  uint8x8_t v9 = sub_10004DE4C;
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (qword_1000FEC10 != -1) {
    dispatch_once(&qword_1000FEC10, &stru_1000F0108);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10004DE60;
  block[3] = &unk_1000F0008;
  void block[4] = &v5;
  dispatch_sync((dispatch_queue_t)qword_1000FEC08, block);
  if (*((char *)v6 + 63) < 0)
  {
    sub_10006770C((unsigned char *)a1, (void *)v6[5], v6[6]);
  }
  else
  {
    long long v3 = *(_OWORD *)(v6 + 5);
    *(void *)(a1 + 16) = v6[7];
    *(_OWORD *)a1 = v3;
  }
  _Block_object_dispose(&v5, 8);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
}

void sub_10004DE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10004DE30(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004DE4C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void sub_10004DE60(uint64_t a1)
{
  sub_10004DEB8();
  uint64_t v2 = (const std::string::value_type *)qword_1000FEBF0;
  if (qword_1000FEBF0)
  {
    long long v3 = (std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    std::string::assign(v3, v2);
  }
}

void sub_10004DEB8()
{
  if ((byte_1000FEC18 & 1) == 0 && qword_1000FEBE8)
  {
    CFStringRef v0 = CFStringCreateWithFormat(0, 0, @"%@.%@", @"KeywordText", qword_1000FEBE8);
    CFStringRef v1 = (const __CFString *)CFPreferencesCopyAppValue(v0, @"com.apple.speech.recognition.AppleSpeechRecognition.prefs");
    CFRelease(v0);
    if (v1)
    {
      CStringPtr = CFStringGetCStringPtr(v1, 0x8000100u);
      if (CStringPtr)
      {
        qword_1000FEBF0 = (uint64_t)strdup(CStringPtr);
      }
      else
      {
        CFIndex Length = CFStringGetLength(v1);
        CFIndex v4 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
        sub_10002D3A8(__p, v4, 32);
        if (v13 >= 0) {
          uint64_t v5 = (char *)__p;
        }
        else {
          uint64_t v5 = (char *)__p[0];
        }
        int CString = CFStringGetCString(v1, v5, v4, 0x8000100u);
        int v7 = v13;
        if (CString)
        {
          if (v13 >= 0) {
            unint64_t v8 = __p;
          }
          else {
            unint64_t v8 = (void **)__p[0];
          }
          qword_1000FEBF0 = (uint64_t)strdup((const char *)v8);
        }
        if (v7 < 0) {
          operator delete(__p[0]);
        }
      }
      CFRelease(v1);
    }
    CFNumberRef v9 = (const __CFNumber *)CFPreferencesCopyAppValue(@"KeywordOptional", @"com.apple.speech.recognition.AppleSpeechRecognition.prefs");
    if (v9)
    {
      CFNumberRef v10 = v9;
      if (!CFNumberGetValue(v9, kCFNumberIntType, &dword_1000FEBFC)) {
        dword_1000FEBFC = 0;
      }
      CFRelease(v10);
      unsigned int v11 = dword_1000FEBFC >> 31;
    }
    else
    {
      LOBYTE(v11) = 0;
      dword_1000FEBFC = 0;
      qword_1000FEBF0 = 0;
    }
    byte_1000FEBF8 = v11;
    byte_1000FEC18 = 1;
  }
}

void sub_10004E058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RDKeyword::IsOptional(RDKeyword *this)
{
  if (qword_1000FEC10 != -1) {
    dispatch_once(&qword_1000FEC10, &stru_1000F0108);
  }
  dispatch_sync((dispatch_queue_t)qword_1000FEC08, &stru_1000F0048);
  return byte_1000FEBF8;
}

void RDKeyword::ResetTimer(RDKeyword *this)
{
  if (qword_1000FEC10 != -1) {
    dispatch_once(&qword_1000FEC10, &stru_1000F0108);
  }
  CFStringRef v1 = qword_1000FEC08;
  dispatch_sync(v1, &stru_1000F0088);
}

void sub_10004E12C(id a1)
{
  sub_10004DEB8();
  int v2 = dword_1000FEBFC;
  if (byte_1000FEBF8 != (dword_1000FEBFC != 0))
  {
    byte_1000FEBF8 = dword_1000FEBFC != 0;
    RDPeer::KeywordChanged(v1);
    int v2 = dword_1000FEBFC;
  }
  if (v2 >= 1)
  {
    qword_1000FEC00 = time(0) + dword_1000FEBFC;
    dispatch_time_t v3 = dispatch_time(0, 1000000000 * dword_1000FEBFC + 1000000000);
    if (qword_1000FEC10 != -1) {
      dispatch_once(&qword_1000FEC10, &stru_1000F0108);
    }
    CFIndex v4 = qword_1000FEC08;
    dispatch_after(v3, v4, &stru_1000F00C8);
  }
}

void sub_10004E208(id a1)
{
  uint64_t v1 = qword_1000FEC00;
  int v2 = (RDPeer *)time(0);
  if (v1 <= (uint64_t)v2 && byte_1000FEBF8 != dword_1000FEBFC >> 31)
  {
    byte_1000FEBF8 = dword_1000FEBFC < 0;
    RDPeer::KeywordChanged(v2);
  }
}

void sub_10004E278(id a1)
{
  qword_1000FEC08 = (uint64_t)dispatch_queue_create("RDKeyword", 0);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_10004E2DC, @"com.apple.speech.recognition.AppleSpeechRecognition.KeywordChanged", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

uint64_t sub_10004E2DC()
{
  if (qword_1000FEC10 != -1) {
    dispatch_once(&qword_1000FEC10, &stru_1000F0108);
  }
  dispatch_sync((dispatch_queue_t)qword_1000FEC08, &stru_1000F0148);
  return RDPeer::KeywordChanged(v0);
}

void sub_10004E33C(id a1)
{
  free((void *)qword_1000FEBF0);
  qword_1000FEBF0 = 0;
  byte_1000FEC18 = 0;
  CFPreferencesAppSynchronize(@"com.apple.speech.recognition.AppleSpeechRecognition.prefs");
}

void sub_10004E738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_10004E75C(uint64_t a1)
{
  return objc_loadWeak((id *)(a1 + 32)) != 0;
}

void sub_10004E780(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004E804;
  block[3] = &unk_1000F0198;
  void block[4] = a2;
  long long v3 = *(_OWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)gRDServerQueue, block);
}

void sub_10004E804(uint64_t a1)
{
  if (qword_1000FEC20 && [(id)qword_1000FEC20 isEqual:*(void *)(a1 + 32)])
  {
    int v2 = RXOSLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      double v3 = *(double *)(*(void *)(a1 + 40) + 16);
      int v9 = 138412290;
      double v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Skipping profile update for %@ because user data has not actually changed", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    qword_1000FEC20 = *(void *)(a1 + 32);
    [+[NSProcessInfo processInfo] systemUptime];
    double v5 = v4;
    [*(id *)(a1 + 40) adaptUserProfileWithUserData:*(void *)(a1 + 32)];
    [+[NSProcessInfo processInfo] systemUptime];
    double v7 = v6;
    unint64_t v8 = RXOSLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 134217984;
      double v10 = (v7 - v5) * 1000.0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Contacts added to profile in %.2fms", (uint8_t *)&v9, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

id sub_10004EF34(void *a1, void *a2)
{
  id v4 = [(NSArray *)NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1) firstObject];
  if (!v4)
  {
    if (a2) {
      *a2 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:2 userInfo:0];
    }
    return 0;
  }
  id v5 = [v4 stringByAppendingPathComponent:@"/SpeechRecognitionCore"];
  if ([+[NSFileManager defaultManager] createDirectoryAtPath:v5 withIntermediateDirectories:1 attributes:0 error:a2])
  {
    BOOL v6 = v5 == 0;
  }
  else
  {
    BOOL v6 = 1;
  }
  if (v6) {
    return 0;
  }
  id v7 = [a1 stringByReplacingOccurrencesOfString:@"-" withString:@"_"];
  id v8 = objc_msgSend(objc_msgSend(v5, "stringByAppendingPathComponent:", @"SpeechProfile"), "stringByAppendingString:", @"_");
  return [v8 stringByAppendingString:v7];
}

void sub_10004F1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_msgSend(objc_alloc((Class)_EARWordPart), "initWithOrthography:pronunciations:tag:", a3, +[NSSet set](NSSet, "set"), sub_10004F258(a2));
  [*(id *)(a1 + 32) addObject:v4];
}

id sub_10004F258(uint64_t a1)
{
  if (qword_1000FEC30 != -1) {
    dispatch_once(&qword_1000FEC30, &stru_1000F0208);
  }
  id v2 = [(id)qword_1000FEC28 objectForKeyedSubscript:a1];
  return _[v2 integerValue];
}

void sub_10004F600(id a1)
{
  qword_1000FEC28 = &off_1000F6550;
}

RDVAVisionKWSSpotter *RDKeywordSpotterInit(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = RXAutomationSaveKeywordsAudio();
  int v5 = RXIsVoiceActionsVisionKWSEnabled();
  BOOL v6 = RXOSLog();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      LOWORD(v13[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Using VisionKWS", (uint8_t *)v13, 2u);
    }

    id v8 = [[RDVAVisionKWSSpotterDelegateImpl alloc] initWithDelegate:a2];
    int v9 = [[RDVAVisionKWSSpotter alloc] initWithDelegate:v8];
    [(RDVAVisionKWSSpotter *)v9 start:a1 saveRuntimeAudio:v4];
  }
  else
  {
    if (v7)
    {
      LOWORD(v13[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Using FSTSpotter", (uint8_t *)v13, 2u);
    }

    id v8 = [[RDVAFSTSpotterDelegate alloc] initWithDelegate:a2];
    uint64_t v14 = 0;
    float v15 = &v14;
    uint64_t v16 = 0x2050000000;
    double v10 = (void *)qword_1000FEC38;
    uint64_t v17 = qword_1000FEC38;
    if (!qword_1000FEC38)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      _DWORD v13[2] = sub_10004F8B4;
      void v13[3] = &unk_1000EE1D8;
      v13[4] = &v14;
      sub_10004F8B4((uint64_t)v13);
      double v10 = (void *)v15[3];
    }
    unsigned int v11 = v10;
    _Block_object_dispose(&v14, 8);
    int v9 = (RDVAVisionKWSSpotter *)[[v11 alloc] init:a1 delegate:v8 silenceLookback:0 silenceExpect:0 batchDecode:0 enableAudioDebugging:v4];
    [(RDVAVisionKWSSpotterDelegateImpl *)v8 setMaxFrameSizeForKeywords:100];
  }

  return v9;
}

void sub_10004F814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id RDKeywordSpotterAddAudioSamples(void *a1, uint64_t a2, uint64_t a3)
{
  RXIsVoiceActionsVisionKWSEnabled();
  return _[a1 addAudioSamples:a2 count:a3];
}

id RDKeywordSpotterStop(void *a1)
{
  RXIsVoiceActionsVisionKWSEnabled();
  return [a1 stop];
}

Class sub_10004F8B4(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_1000FEC40)
  {
    v3[1] = _NSConcreteStackBlock;
    _OWORD v3[2] = (void *)3221225472;
    v3[3] = sub_10004F9E0;
    void v3[4] = &unk_1000EE210;
    v3[5] = v3;
    long long v4 = off_1000F0228;
    uint64_t v5 = 0;
    qword_1000FEC40 = _sl_dlopen();
  }
  if (!qword_1000FEC40) {
    sub_1000C2DDC(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("VATKeywordSpotter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(result + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000C2E5C();
  }
  qword_1000FEC38 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10004F9E0()
{
  uint64_t result = _sl_dlopen();
  qword_1000FEC40 = result;
  return result;
}

double rd_time_util::durationInMilliSec(uint64_t a1)
{
  return (double)((std::chrono::steady_clock::now().__d_.__rep_ - a1) / 1000000);
}

void *multithread_forloop(size_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10004FB5C;
  block[3] = &unk_1000F0240;
  sub_10004FE50((uint64_t)v5, a2);
  dispatch_apply(a1, 0, block);
  return sub_10004FDCC(v5);
}

uint64_t sub_10004FB5C(uint64_t a1, uint64_t a2)
{
  return sub_10004FB64(a1 + 32, a2);
}

uint64_t sub_10004FB64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100006F40();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_10004FBB8(uint64_t a1, uint64_t a2)
{
  return sub_10004FE50(a1 + 32, a2 + 32);
}

void *sub_10004FBC4(uint64_t a1)
{
  return sub_10004FDCC((void *)(a1 + 32));
}

void *multithread_forloop(size_t a1, unint64_t a2, uint64_t a3)
{
  size_t v5 = a1;
  if (!a1)
  {
    BOOL v6 = RXOSLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "multithread_forloop: 0 threads are specified, defaulting to 1", v9, 2u);
    }
    size_t v5 = 1;
  }
  unint64_t v7 = vcvtps_u32_f32((float)a2 / (float)v5);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10004FCFC;
  block[3] = &unk_1000F0270;
  if (v7 >= a2) {
    unint64_t v7 = a2;
  }
  void block[4] = v7;
  void block[5] = a2;
  sub_10004FEE8((uint64_t)v11, a3);
  dispatch_apply(v5, 0, block);
  return sub_10001A6C8(v11);
}

uint64_t sub_10004FCFC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  unint64_t v3 = v2 * a2;
  unint64_t v4 = v2 * a2 + v2;
  if (*(void *)(result + 40) >= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = *(void *)(result + 40);
  }
  if (v3 < v5)
  {
    uint64_t v7 = result + 48;
    do
      uint64_t result = sub_10004FD60(v7, v3++, a2);
    while (v5 != v3);
  }
  return result;
}

uint64_t sub_10004FD60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100006F40();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_10004FDB8(uint64_t a1, uint64_t a2)
{
  return sub_10004FEE8(a1 + 48, a2 + 48);
}

void *sub_10004FDC4(uint64_t a1)
{
  return sub_10001A6C8((void *)(a1 + 48));
}

void *sub_10004FDCC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10004FE50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(void *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(void *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(void *)(result + 24) = 0;
  }
  return a1;
}

uint64_t sub_10004FEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(void *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(void *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(void *)(result + 24) = 0;
  }
  return a1;
}

id sub_100050054(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) endAudio];
  uint64_t v2 = *(void **)(a1 + 32);
  return [v2 createCaesuraSPG];
}

void sub_100050238(uint64_t a1)
{
  id v2 = +[NSData dataWithBytes:*(void *)(a1 + 40) length:2 * *(int *)(a1 + 48)];
  [*(id *)(*(void *)(a1 + 32) + 32) addAudio:v2 numSamples:*(int *)(a1 + 48)];
}

EARCaesuraSPGHelper *RDOSDInit(uint64_t a1)
{
  id v2 = [EARCaesuraSPGHelper alloc];
  return [(EARCaesuraSPGHelper *)v2 initWithDelegate:a1];
}

id RDOSDAddAudioSamples(void *a1, uint64_t a2, uint64_t a3)
{
  return _[a1 addAudio:a2 count:a3];
}

uint64_t variable initialization expression of RDSwiftSpeechDonation.taskHint()
{
  return 0;
}

uint64_t variable initialization expression of RDSwiftSpeechDonation.file()
{
  return 0;
}

uint64_t variable initialization expression of RDSwiftSpeechDonation.logger()
{
  sub_100054860();
  swift_bridgeObjectRetain();
  sub_100054894();
  swift_bridgeObjectRetain();
  return sub_1000C3190();
}

id RDSwiftSpeechDonation.__allocating_init(donorBundleID:donorReferenceID:recordingDate:locale:taskHint:transcription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v18 = objc_allocWithZone(v10);
  return RDSwiftSpeechDonation.init(donorBundleID:donorReferenceID:recordingDate:locale:taskHint:transcription:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

id RDSwiftSpeechDonation.init(donorBundleID:donorReferenceID:recordingDate:locale:taskHint:transcription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  float v15 = &v10[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_taskHint];
  *(void *)float v15 = 0;
  CFStringRef v36 = v15;
  v15[8] = 1;
  *(void *)&v10[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_audioFormat] = 0;
  *(void *)&v10[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_file] = 0;
  uint64_t v16 = v10;
  sub_100054860();
  swift_bridgeObjectRetain();
  sub_100054894();
  swift_bridgeObjectRetain();
  uint64_t v17 = a5;
  sub_1000C3190();
  id v18 = &v16[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_donorReferenceID];
  *(void *)id v18 = a3;
  *((void *)v18 + 1) = a4;
  unint64_t v19 = &v16[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_donorBundleID];
  *(void *)unint64_t v19 = a1;
  *((void *)v19 + 1) = a2;
  size_t v20 = &v16[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_recordingDate];
  uint64_t v21 = sub_1000C3020();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v20, v17, v21);
  unint64_t v23 = &v16[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_locale];
  uint64_t v24 = sub_1000C3070();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v23, a6, v24);
  unint64_t v26 = &v16[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_transcription];
  *(void *)unint64_t v26 = a9;
  *((void *)v26 + 1) = a10;
  uint64_t v27 = &v16[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_audioPath];
  *(void *)uint64_t v27 = 0xD000000000000015;
  *((void *)v27 + 1) = 0x80000001000DE540;
  if (a7 == 0x6F69746174636944 && a8 == 0xEB0000000043436ELL || (sub_1000C3850() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = 1005;
  }
  else if (a7 == 0x43436C6C657053 && a8 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = 1006;
  }
  else
  {
    char v31 = sub_1000C3850();
    swift_bridgeObjectRelease();
    uint64_t v28 = 1005;
    if (v31) {
      uint64_t v28 = 1006;
    }
  }
  *(void *)CFStringRef v36 = v28;
  v36[8] = 0;

  v37.receiver = v16;
  v37.super_class = (Class)type metadata accessor for RDSwiftSpeechDonation();
  id v29 = objc_msgSendSuper2(&v37, "init");
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(a6, v24);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v17, v21);
  return v29;
}

Swift::Void __swiftcall RDSwiftSpeechDonation.donate(audioBuffers:logAudioFile:)(Swift::OpaquePointer audioBuffers, Swift::Bool logAudioFile)
{
  BOOL v42 = logAudioFile;
  rawCFStringRef Value = audioBuffers._rawValue;
  uint64_t v3 = sub_1000520F0(&qword_1000FE2F8);
  __chkstk_darwin(v3 - 8);
  uint64_t v41 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000520F0(&qword_1000FE300);
  __chkstk_darwin(v5 - 8);
  xpc_object_t v40 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000520F0(&qword_1000FE308);
  __chkstk_darwin(v7 - 8);
  uint64_t v43 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000C3070();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[2] = v12;
  uint64_t v13 = sub_1000C3020();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_1000C3250();
  uint64_t v37 = *(void *)(v39 - 8);
  uint64_t v17 = *(void *)(v37 + 64);
  uint64_t v18 = __chkstk_darwin(v39);
  unint64_t v38 = (char *)v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  size_t v20 = (char *)v36 - v19;
  v36[3] = *(void *)&v2[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_donorBundleID];
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, &v2[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_recordingDate], v13);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, &v2[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_locale], v9);
  v36[1] = *(void *)&v2[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_transcription];
  uint64_t v21 = sub_1000C3230();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v43, 1, 1, v21);
  uint64_t v22 = sub_1000C3210();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v40, 1, 1, v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = v37;
  uint64_t v24 = v20;
  sub_1000C3220();
  uint64_t v25 = sub_1000C3650();
  uint64_t v26 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v41, 1, 1, v25);
  uint64_t v27 = v38;
  uint64_t v28 = v20;
  uint64_t v29 = v39;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v38, v28, v39);
  unint64_t v30 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = 0;
  *(void *)(v31 + ++*(void *)(result + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v23 + 32))(v31 + v30, v27, v29);
  unint64_t v32 = v31 + ((v30 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v32 = v2;
  *(unsigned char *)(v32 + 8) = v42;
  *(void *)(v31 + ((v30 + v17 + 23) & 0xFFFFFFFFFFFFFFF8)) = rawValue;
  swift_bridgeObjectRetain();
  v2;
  sub_100051548(v26, (uint64_t)&unk_1000FE318, v31);
  swift_release();
  std::string v33 = sub_1000C3180();
  os_log_type_t v34 = sub_1000C36C0();
  if (os_log_type_enabled(v33, v34))
  {
    std::string v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)std::string v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "donated speech buffers", v35, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v29);
}

uint64_t sub_100051014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  *(unsigned char *)(v7 + 72) = a6;
  *(void *)(v7 + ++*(void *)(result + 24) = a5;
  *(void *)(v7 + 32) = a7;
  sub_1000520F0(&qword_1000FE368);
  *(void *)(v7 + 40) = swift_task_alloc();
  *(void *)(v7 + 48) = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v7 + 56) = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v7 + 64) = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_100051108;
  return SpeechDonation.donate()(v8);
}

uint64_t sub_100051108()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100051204, 0, 0);
}

uint64_t sub_100051204()
{
  uint64_t v23 = v0;
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = sub_1000C3040();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v4(v1, 1, v2) == 1)
  {
    uint64_t v5 = sub_1000C3180();
    os_log_type_t v6 = sub_1000C36E0();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "VoiceControl::SpeechDonation::DonationID is nil", v7, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    sub_100052928(v1, *(void *)(v0 + 48));
    uint64_t v8 = sub_1000C3180();
    os_log_type_t v9 = sub_1000C36E0();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 48);
    if (v10)
    {
      os_log_type_t v21 = v9;
      uint64_t v12 = *(void *)(v0 + 40);
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_100052928(v11, v12);
      uint64_t result = v4(v12, 1, v2);
      if (result == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v15 = *(void *)(v0 + 40);
      uint64_t v20 = *(void *)(v0 + 48);
      uint64_t v16 = sub_1000C3030();
      unint64_t v18 = v17;
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v15, v2);
      *(void *)(v0 + 16) = sub_100052990(v16, v18, &v22);
      sub_1000C3720();
      swift_bridgeObjectRelease();
      sub_1000528CC(v20, &qword_1000FE368);
      _os_log_impl((void *)&_mh_execute_header, v8, v21, "VoiceControl::SpeechDonation::DonationID=%s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1000528CC(v11, &qword_1000FE368);
    }
    if (*(unsigned char *)(v0 + 72) == 1) {
      sub_100051768(*(void *)(v0 + 32));
    }
  }
  sub_1000528CC(*(void *)(v0 + 56), &qword_1000FE368);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_100051548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000C3650();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1000C3640();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000528CC(a1, &qword_1000FE2F8);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1000C3610();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + ++*(void *)(result + 24) = a3;
  return swift_task_create();
}

id sub_100051768(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000C2FE0();
  unint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v44 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v14 = OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_file;
  uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_file);
  uint64_t v46 = v2;
  uint64_t v47 = OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond21RDSwiftSpeechDonation_file;
  unint64_t v48 = a1;
  if (v15) {
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  sub_1000C2FB0();
  swift_bridgeObjectRelease();
  sub_1000C2FA0();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v11, v4);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v13, v4);
  unint64_t v5 = a1 & 0xC000000000000001;
  uint64_t v45 = v16;
  if ((a1 & 0xC000000000000001) != 0) {
    goto LABEL_29;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    __break(1u);
  }
  for (id i = *(id *)(a1 + 32); ; id i = (id)sub_1000C37B0())
  {
    unint64_t v18 = i;
    id v19 = [i format];

    id v20 = [v19 settings];
    uint64_t v21 = sub_1000C3520();

    id v22 = v5 ? (id)sub_1000C37B0() : *(id *)(v48 + 32);
    uint64_t v23 = v22;
    id v24 = [v22 format];

    id v25 = [v24 commonFormat];
    id v26 = v5 ? (id)sub_1000C37B0() : *(id *)(v48 + 32);
    uint64_t v27 = v26;
    id v28 = [v26 format];

    LOBYTE(v27) = [v28 isInterleaved];
    id v29 = objc_allocWithZone((Class)AVAudioFile);
    uint64_t v30 = (uint64_t)v8;
    uint64_t v8 = 0;
    id v31 = sub_100051F0C(v30, v21, (uint64_t)v25, (char)v27);
    uint64_t v2 = v46;
    uint64_t v14 = v47;
    unint64_t v32 = *(void **)(v46 + v47);
    *(void *)(v46 + v47) = v31;

    v45(v13, v4);
    a1 = v48;
LABEL_12:
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = sub_1000C37F0();
      if (!v4) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v4) {
        goto LABEL_27;
      }
    }
    if (v4 >= 1) {
      break;
    }
    __break(1u);
LABEL_29:
    ;
  }
  uint64_t v33 = 0;
  unint64_t v34 = a1 & 0xC000000000000001;
  do
  {
    if (v34) {
      CFStringRef v36 = sub_1000C37B0();
    }
    else {
      CFStringRef v36 = *(id *)(a1 + 8 * v33 + 32);
    }
    uint64_t v37 = v36;
    unint64_t v38 = *(void **)(v2 + v14);
    if (v38)
    {
      id v49 = 0;
      if ([v38 writeFromBuffer:v37 error:&v49])
      {
        id v35 = v49;
      }
      else
      {
        id v39 = v49;
        sub_1000C2F90();

        swift_willThrow();
        xpc_object_t v40 = sub_1000C3180();
        os_log_type_t v41 = sub_1000C36E0();
        if (os_log_type_enabled(v40, v41))
        {
          BOOL v42 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)BOOL v42 = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "VoiceControl::SpeechDonation::DonationID, error writing to file", v42, 2u);
          uint64_t v2 = v46;
          swift_slowDealloc();
        }

        swift_errorRelease();
        uint64_t v37 = v40;
        uint64_t v14 = v47;
        a1 = v48;
      }
    }
    ++v33;
  }
  while (v4 != v33);
LABEL_27:
  swift_bridgeObjectRelease();
  return [*(id *)(v2 + v14) close];
}

id RDSwiftSpeechDonation.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return [v1 init];
}

void RDSwiftSpeechDonation.init()()
{
}

id RDSwiftSpeechDonation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDSwiftSpeechDonation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_100051F0C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = v4;
  sub_1000C2FC0(__stack_chk_guard);
  uint64_t v10 = v9;
  Class isa = sub_1000C3510().super.isa;
  swift_bridgeObjectRelease();
  id v20 = 0;
  id v12 = [v5 initForWriting:v10 settings:isa commonFormat:a3 interleaved:a4 & 1 error:&v20];

  id v13 = v20;
  if (v12)
  {
    uint64_t v14 = sub_1000C2FE0();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
    id v16 = v13;
    v15(a1, v14);
  }
  else
  {
    id v17 = v20;
    sub_1000C2F90();

    swift_willThrow();
    uint64_t v18 = sub_1000C2FE0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
  }
  return v12;
}

uint64_t type metadata accessor for RDSwiftSpeechDonation()
{
  uint64_t result = qword_1000FEC88;
  if (!qword_1000FEC88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000520F0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100052134()
{
  uint64_t v1 = sub_1000C3250();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_10005222C()
{
  uint64_t v2 = *(void *)(sub_1000C3250() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  unint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = *(void *)(v0 + v5);
  char v8 = *(unsigned char *)(v0 + v5 + 8);
  uint64_t v9 = *(void *)(v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_10005234C;
  return sub_100051014((uint64_t)v10, v11, v12, v6, v7, v8, v9);
}

uint64_t sub_10005234C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100052440()
{
  return type metadata accessor for RDSwiftSpeechDonation();
}

uint64_t sub_100052448()
{
  uint64_t result = sub_1000C3020();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1000C3070();
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_1000C31B0();
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

void type metadata accessor for SFSpeechRecognitionTaskHint()
{
  if (!qword_1000FE348)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1000FE348);
    }
  }
}

unint64_t sub_1000525C8()
{
  unint64_t result = qword_1000FE350;
  if (!qword_1000FE350)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000FE350);
  }
  return result;
}

uint64_t sub_100052608(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1000526E4;
  return v6(a1);
}

uint64_t sub_1000526E4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000527DC()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100052814(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10005234C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000FE358 + dword_1000FE358);
  return v6(a1, v4);
}

uint64_t sub_1000528CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000520F0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100052928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000520F0(&qword_1000FE368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100052990(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100052A64(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100053038((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100053038((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100052FE8((uint64_t)v12);
  return v7;
}

uint64_t sub_100052A64(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1000C3730();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100052C20(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1000C37C0();
  if (!v8)
  {
    sub_1000C37D0();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1000C3820();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100052C20(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100052CB8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100052E98(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100052E98(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100052CB8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100052E30(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1000C37A0();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      sub_1000C37D0();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1000C3580();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    sub_1000C3820();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)sub_1000C37D0();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100052E30(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000520F0(&qword_1000FE370);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  _DWORD v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100052E98(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000520F0(&qword_1000FE370);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1000C3820();
  __break(1u);
  return result;
}

uint64_t sub_100052FE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100053038(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + ++*(void *)(result + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_100053098()
{
}

uint64_t sub_1000530AC()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000530E4(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_10005312C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100053184@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1
     + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond33RDVASwiftVisionKWSSpotterDelegate_logger;
  swift_beginAccess();
  uint64_t v4 = sub_1000C31B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100053208(uint64_t a1)
{
  uint64_t v3 = v1
     + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond33RDVASwiftVisionKWSSpotterDelegate_logger;
  swift_beginAccess();
  uint64_t v4 = sub_1000C31B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*sub_100053294())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000532F0(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  sub_1000C31A0();
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_100053370(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  sub_1000C31A0();
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_1000533DC()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 96))();
  if (result)
  {
    uint64_t v2 = (void *)result;
    sub_1000C3170();
    NSString v3 = sub_1000C3550();
    swift_bridgeObjectRelease();
    sub_1000C3160();
    int v5 = v4;
    char v6 = sub_1000C3130();
    char v7 = sub_1000C3150();
    char v8 = sub_1000C3140();
    LODWORD(v9) = v5;
    [v2 didDetectKeywordWithKeyword:v3 score:v6 & 1 silenceAfter:v7 & 1 silenceBefore:v8 & 1 speechDuring:v9];

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100053608()
{
  swift_unknownObjectRelease();
  uint64_t v1 = v0
     + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond33RDVASwiftVisionKWSSpotterDelegate_logger;
  uint64_t v2 = sub_1000C31B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100053674()
{
  swift_unknownObjectRelease();
  uint64_t v1 = v0
     + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond33RDVASwiftVisionKWSSpotterDelegate_logger;
  uint64_t v2 = sub_1000C31B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

id sub_10005371C()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDVASwiftVisionKWSSpotter_spotter));
}

uint64_t sub_10005372C()
{
  return swift_retain();
}

uint64_t sub_100053778(uint64_t a1)
{
  NSString v3 = (void *)(v1
                + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDVASwiftVisionKWSSpotter_listeningTask);
  swift_beginAccess();
  *NSString v3 = a1;
  return swift_release();
}

uint64_t (*sub_1000537CC())()
{
  return j__swift_endAccess;
}

uint64_t sub_10005382C()
{
  return swift_retain();
}

uint64_t sub_100053878(uint64_t a1)
{
  NSString v3 = (void *)(v1
                + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDVASwiftVisionKWSSpotter_swiftDelegate);
  swift_beginAccess();
  *NSString v3 = a1;
  return swift_release();
}

uint64_t (*sub_1000538CC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100053928@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDVASwiftVisionKWSSpotter_logger;
  swift_beginAccess();
  uint64_t v4 = sub_1000C31B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000539AC(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDVASwiftVisionKWSSpotter_logger;
  swift_beginAccess();
  uint64_t v4 = sub_1000C31B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*sub_100053A38())()
{
  return j_j__swift_endAccess;
}

id sub_100053A94(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_10005439C(a1);
  swift_unknownObjectRelease();
  return v4;
}

id sub_100053AD8(uint64_t a1)
{
  id v1 = sub_10005439C(a1);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_100053B50()
{
  uint64_t v1 = sub_1000C3100();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C30F0();
  swift_bridgeObjectRetain();
  sub_1000C30E0();
  sub_1000C30C0();
  sub_1000C30B0();
  sub_1000C30D0();
  uint64_t v5 = sub_1000C3090();
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x78))(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_100053D90()
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x70))();
  if (result)
  {
    sub_1000520F0(&qword_1000FE390);
    sub_1000C3690();
    return swift_release();
  }
  return result;
}

void sub_100053F10()
{
  id v1 = (id)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xD8))();
  mach_absolute_time();
  sub_1000C30A0();
}

void *sub_100054144(uint64_t a1)
{
  uint64_t v10 = 0x40CF400000000000;
  long long v11 = xmmword_1000CB220;
  long long v12 = xmmword_1000CB230;
  id v2 = [objc_allocWithZone((Class)AVAudioFormat) initWithStreamDescription:&v10];
  if (!v2) {
    goto LABEL_8;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (HIDWORD(v3))
  {
    __break(1u);
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  id v4 = v2;
  id v5 = objc_allocWithZone((Class)AVAudioPCMBuffer);
  id v6 = objc_msgSend(v5, "initWithPCMFormat:frameCapacity:", v4, v3, v10, v11, v12);
  if (!v6) {
    goto LABEL_9;
  }
  uint64_t v7 = v6;
  char v8 = [v6 int16ChannelData];
  if (v8) {
    char v8 = (void *)*v8;
  }
  memcpy(v8, (const void *)(a1 + 32), 2 * v3);
  [v7 setFrameLength:v3];

  return v7;
}

void sub_100054264()
{
}

id sub_1000542C4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDVASwiftVisionKWSSpotter(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_10005439C(uint64_t a1)
{
  uint64_t v3 = sub_1000C3080();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDVASwiftVisionKWSSpotter_listeningTask] = 0;
  uint64_t v7 = v1;
  sub_1000C31A0();
  type metadata accessor for RDVASwiftVisionKWSSpotterDelegate(0);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  swift_unknownObjectRetain();
  sub_1000C31A0();
  swift_beginAccess();
  *(void *)(v8 + 16) = a1;
  swift_unknownObjectRelease();
  *(void *)&v7[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDVASwiftVisionKWSSpotter_swiftDelegate] = v8;
  sub_1000C3120();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for VAComputeUnits.cpuAndNeuralEngine(_:), v3);
  swift_retain();
  uint64_t v9 = sub_1000C3110();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(void *)&v7[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDVASwiftVisionKWSSpotter_spotter] = v9;

  uint64_t v10 = (objc_class *)type metadata accessor for RDVASwiftVisionKWSSpotter(0);
  v12.receiver = v7;
  v12.super_class = v10;
  return objc_msgSendSuper2(&v12, "init");
}

uint64_t type metadata accessor for RDVASwiftVisionKWSSpotter(uint64_t a1)
{
  return sub_100054650(a1, (uint64_t *)&unk_1000FECA8);
}

uint64_t sub_100054628()
{
  return type metadata accessor for RDVASwiftVisionKWSSpotterDelegate(0);
}

uint64_t type metadata accessor for RDVASwiftVisionKWSSpotterDelegate(uint64_t a1)
{
  return sub_100054650(a1, (uint64_t *)&unk_1000FEC98);
}

uint64_t sub_100054650(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100054688()
{
  uint64_t result = sub_1000C31B0();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100054724()
{
  return type metadata accessor for RDVASwiftVisionKWSSpotter(0);
}

uint64_t sub_10005472C()
{
  uint64_t result = sub_1000C31B0();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_1000547E8()
{
  unk_1000FF5F5 = 0;
  unk_1000FF5F6 = -5120;
}

uint64_t *sub_100054814()
{
  if (qword_1000FECB8 != -1) {
    swift_once();
  }
  return &qword_1000FF5E8;
}

void *sub_100054860()
{
  return &unk_1000F0428;
}

void sub_10005486C()
{
  qword_1000FF5F8 = 0x5041686365657053;
  unk_1000FF600 = 0xE900000000000049;
}

uint64_t *sub_100054894()
{
  if (qword_1000FECC0 != -1) {
    swift_once();
  }
  return &qword_1000FF5F8;
}

id sub_1000548E0()
{
  id result = [objc_allocWithZone((Class)AVAudioFormat) initWithCommonFormat:3 sampleRate:1 channels:0 interleaved:16000.0];
  if (result) {
    qword_1000FF608 = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t *sub_100054934()
{
  if (qword_1000FECC8 != -1) {
    swift_once();
  }
  return &qword_1000FF608;
}

uint64_t sub_100054980()
{
  return swift_retain();
}

uint64_t sub_1000549CC(uint64_t a1)
{
  uint64_t v3 = (void *)(v1
                + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond28RDSAPISwiftTranscriberModule__transcriberModule);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

id sub_100054A20(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond28RDSAPISwiftTranscriberModule__transcriberModule] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

id sub_100054A70(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond28RDSAPISwiftTranscriberModule__transcriberModule] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for RDSAPISwiftTranscriberModule();
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t type metadata accessor for RDSAPISwiftTranscriberModule()
{
  return self;
}

void RDSAPISwiftTranscriberModule.init()()
{
}

id RDSAPISwiftTranscriberModule.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDSAPISwiftTranscriberModule();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t variable initialization expression of RDSAPISwiftSpeechAnalyzer._logger()
{
  if (qword_1000FECC0 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return sub_1000C3190();
}

uint64_t sub_100054C18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__logger;
  uint64_t v4 = sub_1000C31B0();
  objc_super v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

void *sub_100054C8C()
{
  uint64_t v1 = (void **)(v0
               + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__delegate);
  swift_beginAccess();
  objc_super v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_100054CDC(void *a1)
{
  id v3 = (void **)(v1
               + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__delegate);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*sub_100054D30())()
{
  return j__swift_endAccess;
}

uint64_t variable initialization expression of RDSAPISwiftSpeechAnalyzer._taskHint@<X0>(uint64_t a1@<X8>)
{
  return sub_100054DBC((uint64_t (*)(void))&type metadata accessor for TaskHint, a1);
}

uint64_t variable initialization expression of RDSAPISwiftSpeechAnalyzer._analysisOptions@<X0>(uint64_t a1@<X8>)
{
  return sub_100054DBC((uint64_t (*)(void))&type metadata accessor for AnalysisOptions, a1);
}

uint64_t sub_100054DBC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

id RDSAPISwiftSpeechAnalyzer.__allocating_init(delegate:locale:highPriority:farField:supportEmojiRecognition:)(void *a1, void *a2, int a3, int a4, int a5)
{
  id v11 = objc_allocWithZone(v5);
  id v12 = sub_100062A80((uint64_t)a1, (uint64_t)a2, a3, a4, a5);

  return v12;
}

id RDSAPISwiftSpeechAnalyzer.init(delegate:locale:highPriority:farField:supportEmojiRecognition:)(void *a1, void *a2, int a3, int a4, int a5)
{
  id v7 = sub_100062A80((uint64_t)a1, (uint64_t)a2, a3, a4, a5);

  return v7;
}

id RDSAPISwiftSpeechAnalyzer.__deallocating_deinit()
{
  uint64_t v1 = v0;
  objc_super v2 = sub_1000C3180();
  os_log_type_t v3 = sub_1000C36E0();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SpeechAnalyzer deinit", v4, 2u);
    swift_slowDealloc();
  }

  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for RDSAPISwiftSpeechAnalyzer(0);
  return objc_msgSendSuper2(&v6, "dealloc");
}

uint64_t RDSAPISwiftSpeechAnalyzer.attachAnalysisContext()()
{
  *(void *)(v1 + ++*(void *)(result + 24) = v0;
  return _swift_task_switch(sub_100055324, 0, 0);
}

uint64_t sub_100055324()
{
  uint64_t v1 = v0[3];
  v0[4] = *(void *)(v1
                    + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__speechAnalyzer);
  objc_super v2 = *(void **)(v1
                + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__analysisContext);
  v0[5] = v2;
  swift_retain();
  id v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  void *v4 = v0;
  v4[1] = sub_1000553F8;
  return SpeechAnalyzer.setContext(_:)(v3);
}

uint64_t sub_1000553F8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10005553C, 0, 0);
  }
  else
  {

    swift_release();
    id v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10005553C()
{
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = sub_1000C3180();
  os_log_type_t v2 = sub_1000C36D0();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)id v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    sub_1000C3720();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Could not attach analysis context to SpeechAnalyzer = %@", v3, 0xCu);
    sub_1000520F0(&qword_1000FE4D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100055880(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_100055944;
  v5[3] = v4;
  return _swift_task_switch(sub_100055324, 0, 0);
}

uint64_t sub_100055944()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 24);
  os_log_type_t v2 = *(void **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();

  v1[2](v1);
  _Block_release(v1);
  id v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_100055A7C(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return _swift_task_switch(sub_100055AA0, 0, 0);
}

uint64_t sub_100055AA0()
{
  if (*(void *)((char *)v0[4].super_class
                 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__recognitionTask))
  {
    swift_retain();
    sub_1000C3690();
    swift_release();
  }
  id receiver = v0[4].receiver;
  v0[5].id receiver = (id)OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__logger;
  id v2 = receiver;
  id v3 = sub_1000C3180();
  os_log_type_t v4 = sub_1000C36E0();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = v0[4].receiver;
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    v0[3].id receiver = v6;
    uint64_t v9 = v6;
    sub_1000C3720();
    *uint64_t v8 = v6;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SpeechAnalyzer previous recognition task cancelled for %@", v7, 0xCu);
    sub_1000520F0(&qword_1000FE4D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v3 = v6;
  }

  Class super_class = v0[4].super_class;
  Class v11 = v0[3].super_class;
  id v12 = (objc_class *)type metadata accessor for RDSAPISwiftTranscriberModule();
  id v13 = (char *)objc_allocWithZone(v12);
  *(void *)&v13[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond28RDSAPISwiftTranscriberModule__transcriberModule] = v11;
  v0[1].id receiver = v13;
  v0[1].Class super_class = v12;
  swift_retain();
  uint64_t v14 = (objc_class *)objc_msgSendSuper2(v0 + 1, "init");
  v0[5].Class super_class = v14;
  uint64_t v15 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v14) + 0x58))();
  v0[6].id receiver = (id)v15;
  v0[6].Class super_class = *(Class *)((char *)super_class
                               + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__speechAnalyzer);
  sub_1000520F0(&qword_1000FE578);
  uint64_t v16 = swift_allocObject();
  v0[7].id receiver = (id)v16;
  *(_OWORD *)(v16 + 16) = xmmword_1000CB310;
  uint64_t v17 = sub_100064E90(&qword_1000FE580, (void (*)(uint64_t))&type metadata accessor for Transcriber);
  *(void *)(v16 + 32) = v15;
  *(void *)(v16 + 40) = v17;
  swift_retain();
  swift_retain();
  uint64_t v18 = (objc_class *)swift_task_alloc();
  v0[7].Class super_class = v18;
  *(void *)uint64_t v18 = v0;
  *((void *)v18 + 1) = sub_100055DD4;
  return SpeechAnalyzer.setModules(_:)(v16);
}

uint64_t sub_100055DD4()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_100055F5C;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    id v2 = sub_100055EF8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100055EF8()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 88);
  id v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100055F5C()
{
  uint64_t v1 = *(void **)(v0 + 64);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  id v2 = v1;
  swift_errorRetain();
  id v3 = v2;
  swift_errorRetain();
  uint64_t v4 = sub_1000C3180();
  os_log_type_t v5 = sub_1000C36D0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v15 = *(void **)(v0 + 88);
    uint64_t v6 = *(void **)(v0 + 64);
    log = v4;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(void *)(v0 + 32) = v6;
    *(_DWORD *)uint64_t v7 = 138412546;
    id v9 = v6;
    sub_1000C3720();
    *uint64_t v8 = v6;

    *(_WORD *)(v7 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v10;
    sub_1000C3720();
    v8[1] = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v5, "Could not attach Transcriber to SpeechAnalyzer for %@ due to %@", (uint8_t *)v7, 0x16u);
    sub_1000520F0(&qword_1000FE4D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    Class v11 = *(void **)(v0 + 64);

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  id v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12(0);
}

uint64_t RDSAPISwiftSpeechAnalyzer.attachTranscriber(task:)(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  sub_1000520F0(&qword_1000FE4E0);
  v2[10] = swift_task_alloc();
  uint64_t v3 = sub_1000C3070();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v4 = sub_1000C3500();
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  uint8_t v2[16] = swift_task_alloc();
  sub_1000520F0(&qword_1000FE4A8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_10005634C, 0, 0);
}

uint64_t sub_10005634C()
{
  sub_100063AC8();
  uint64_t v1 = (void *)sub_1000C3700();
  char v2 = sub_1000C36F0();

  uint64_t v3 = v0[15];
  if (v2)
  {
    uint64_t v4 = (void (**)(uint64_t, void, uint64_t))(v3 + 104);
    os_log_type_t v5 = (unsigned int *)&enum case for TaskHint.dictationCC(_:);
  }
  else
  {
    uint64_t v6 = (void *)sub_1000C3700();
    char v7 = sub_1000C36F0();

    uint64_t v4 = (void (**)(uint64_t, void, uint64_t))(v3 + 104);
    os_log_type_t v5 = (unsigned int *)&enum case for TaskHint.dictationCC(_:);
    if (v7) {
      os_log_type_t v5 = (unsigned int *)&enum case for TaskHint.spellCC(_:);
    }
    uint64_t v3 = v0[15];
  }
  uint64_t v8 = v0[18];
  uint64_t v29 = v0[17];
  uint64_t v9 = v0[16];
  uint64_t v11 = v0[13];
  uint64_t v10 = v0[14];
  uint64_t v12 = v0[12];
  uint64_t v28 = v0[11];
  uint64_t v14 = v0[9];
  uint64_t v13 = v0[10];
  id v30 = (id)v0[8];
  (*v4)(v9, *v5, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8, v9, v10);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v10);
  uint64_t v15 = v14 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__taskHint;
  swift_beginAccess();
  sub_100064ED8(v8, v15, &qword_1000FE4A8);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v14 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__locale, v28);
  sub_100064F3C(v15, v29, &qword_1000FE4A8);
  uint64_t v16 = v14
      + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__modelOptions;
  uint64_t v17 = sub_1000C3290();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v13, v16, v17);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v17);
  swift_beginAccess();
  sub_1000C3340();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_1000C3330();
  v0[19] = v19;
  sub_1000C3790(23);
  swift_bridgeObjectRelease();
  id v20 = [v30 description];
  uint64_t v21 = sub_1000C3560();
  uint64_t v23 = v22;

  v32._countAndFlagsBits = v21;
  v32._object = v23;
  sub_1000C3570(v32);
  swift_bridgeObjectRelease();
  NSString v24 = sub_1000C3550();
  v0[20] = v24;
  swift_bridgeObjectRelease();
  id v25 = (void *)swift_task_alloc();
  v0[21] = v25;
  *id v25 = v0;
  v25[1] = sub_100056768;
  uint64_t v26 = v0[9];
  v25[8] = v24;
  v25[9] = v26;
  v25[7] = v19;
  return _swift_task_switch(sub_100055AA0, 0, 0);
}

uint64_t sub_100056768(uint64_t a1)
{
  char v2 = *(void **)(*(void *)v1 + 160);
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();

  return _swift_task_switch(sub_100056884, 0, 0);
}

uint64_t sub_100056884()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 176);
  return v1(v2);
}

uint64_t sub_100056AA8(void *a1, void *aBlock, void *a3)
{
  _OWORD v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  char v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *char v7 = v3;
  v7[1] = sub_100056B6C;
  return RDSAPISwiftSpeechAnalyzer.attachTranscriber(task:)((uint64_t)v6);
}

uint64_t sub_100056B6C(void *a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 32);
  uint64_t v4 = *(void **)(*v1 + 24);
  os_log_type_t v5 = *(void **)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();

  ((void (**)(void, void *))v3)[2](v3, a1);
  _Block_release(v3);

  id v6 = *(uint64_t (**)(void))(v8 + 8);
  return v6();
}

uint64_t RDSAPISwiftSpeechAnalyzer.setRecognitionReplacements(useRecognitionReplacements:)(char a1)
{
  *(void *)(v2 + 112) = v1;
  *(unsigned char *)(v2 + 2++*(void *)(result + 24) = a1;
  sub_1000520F0(&qword_1000FE4E0);
  *(void *)(v2 + 120) = swift_task_alloc();
  sub_1000520F0(&qword_1000FE4A8);
  *(void *)(v2 + 128) = swift_task_alloc();
  uint64_t v3 = sub_1000C3070();
  *(void *)(v2 + 136) = v3;
  *(void *)(v2 + 144) = *(void *)(v3 - 8);
  *(void *)(v2 + 152) = swift_task_alloc();
  uint64_t v4 = sub_1000C3310();
  *(void *)(v2 + 160) = v4;
  *(void *)(v2 + 168) = *(void *)(v4 - 8);
  *(void *)(v2 + 176) = swift_task_alloc();
  sub_1000520F0(&qword_1000FE500);
  *(void *)(v2 + 184) = swift_task_alloc();
  return _swift_task_switch(sub_100056E80, 0, 0);
}

uint64_t sub_100056E80()
{
  if (*(unsigned char *)(v0 + 224) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 160);
    uint64_t v2 = *(void *)(v0 + 168);
    uint64_t v3 = (uint64_t *)(*(void *)(v0 + 112)
                   + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__transcriptionOptions);
    swift_beginAccess();
    uint64_t v4 = *v3;
    sub_1000520F0(&qword_1000FE508);
    unint64_t v5 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1000CB310;
    (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v6 + v5, enum case for Transcriber.TranscriptionOption.etiquetteReplacements(_:), v1);
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_100062920(v6, v4);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    *uint64_t v3 = v7;
    swift_bridgeObjectRelease();
    uint64_t v8 = (void *)0xE400000000000000;
    uint64_t v25 = 1702195828;
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 176);
    uint64_t v9 = *(void *)(v0 + 184);
    uint64_t v11 = *(void *)(v0 + 160);
    uint64_t v12 = *(void *)(v0 + 168);
    (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v10, enum case for Transcriber.TranscriptionOption.etiquetteReplacements(_:), v11);
    swift_beginAccess();
    sub_100060FF4(v10, v9);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    sub_1000528CC(v9, &qword_1000FE500);
    swift_endAccess();
    uint64_t v25 = 0x65736C6166;
    uint64_t v8 = (void *)0xE500000000000000;
  }
  uint64_t v13 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v14 = *(void *)(v0 + 120);
  (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 144) + 16))(*(void *)(v0 + 152), v15 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__locale, *(void *)(v0 + 136));
  uint64_t v16 = v15 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__taskHint;
  swift_beginAccess();
  sub_100064F3C(v16, v13, &qword_1000FE4A8);
  uint64_t v17 = v15
      + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__modelOptions;
  uint64_t v18 = sub_1000C3290();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v14, v17, v18);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, v18);
  swift_beginAccess();
  sub_1000C3340();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000C3330();
  *(void *)(v0 + 192) = v20;
  sub_1000C3790(33);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = v25;
  v27._object = v8;
  sub_1000C3570(v27);
  swift_bridgeObjectRelease();
  NSString v21 = sub_1000C3550();
  *(void *)(v0 + 200) = v21;
  swift_bridgeObjectRelease();
  id v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v22;
  *id v22 = v0;
  v22[1] = sub_1000572C8;
  uint64_t v23 = *(void *)(v0 + 112);
  v22[8] = v21;
  v22[9] = v23;
  v22[7] = v20;
  return _swift_task_switch(sub_100055AA0, 0, 0);
}

uint64_t sub_1000572C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)v1 + 200);
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();

  return _swift_task_switch(sub_1000573E4, 0, 0);
}

uint64_t sub_1000573E4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 216);
  return v1(v2);
}

uint64_t sub_100057604(char a1, void *aBlock, void *a3)
{
  _OWORD v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  a3;
  uint64_t v6 = (void *)swift_task_alloc();
  void v3[4] = v6;
  void *v6 = v3;
  v6[1] = sub_1000576C0;
  return RDSAPISwiftSpeechAnalyzer.setRecognitionReplacements(useRecognitionReplacements:)(a1);
}

uint64_t sub_1000576C0(void *a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 24);
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  ((void (**)(void, void *))v3)[2](v3, a1);
  _Block_release(v3);

  unint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

Swift::Void __swiftcall RDSAPISwiftSpeechAnalyzer.cancelRecognition()()
{
}

Swift::Void __swiftcall RDSAPISwiftSpeechAnalyzer.setText(leftContextText:)(NSString leftContextText)
{
  uint64_t v2 = sub_1000520F0(&qword_1000FE2F8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000C3560();
  uint64_t v7 = v6;
  uint64_t v8 = sub_1000C3650();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  void v9[4] = v1;
  void v9[5] = v5;
  v9[6] = v7;
  id v10 = v1;
  sub_100051548((uint64_t)v4, (uint64_t)&unk_1000FE518, (uint64_t)v9);
  swift_release();
}

uint64_t sub_10005793C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  uint64_t v7 = sub_1000C33C0();
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  return _swift_task_switch(sub_100057A00, 0, 0);
}

uint64_t sub_100057A00()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[7];
  uint64_t v17 = v0[9];
  uint64_t v18 = v0[6];
  uint64_t v5 = OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__analysisContext;
  id v6 = objc_retain(*(id *)(v18
                         + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__analysisContext));
  sub_1000C33B0();
  sub_1000520F0(&qword_1000FE820);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1000CB310;
  *(void *)(v7 + 32) = v4;
  *(void *)(v7 + 40) = v3;
  swift_bridgeObjectRetain();
  uint64_t v8 = (void (*)(void *, void))sub_1000C33A0();
  id v10 = v9;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *v10;
  *id v10 = 0x8000000000000000;
  sub_100061AAC(v7, v1, isUniquelyReferenced_nonNull_native);
  *id v10 = v20;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v17);
  v8(v0 + 2, 0);

  uint64_t v12 = *(void **)(v18 + v5);
  v0[12] = v12;
  v12;
  uint64_t v13 = sub_1000C33D0();
  v0[13] = v13;
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of AnalysisContext.setWait<A>(userData:)
                                                 + async function pointer to dispatch thunk of AnalysisContext.setWait<A>(userData:));
  uint64_t v14 = (void *)swift_task_alloc();
  v0[14] = v14;
  uint64_t v15 = sub_1000520F0((uint64_t *)&unk_1000FE828);
  *uint64_t v14 = v0;
  v14[1] = sub_100057BDC;
  return v19(v13, v15);
}

uint64_t sub_100057BDC()
{
  uint64_t v1 = *(void **)(*v0 + 96);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

void RDSAPISwiftSpeechAnalyzer.getJitProfileData()()
{
}

uint64_t RDSAPISwiftSpeechAnalyzer.setContext(jitProfileData:)(uint64_t a1, unint64_t a2)
{
  return sub_10005829C(a1, a2, (uint64_t)&unk_1000F0470, (uint64_t)&unk_1000FE528);
}

uint64_t sub_100057EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  void v6[4] = a6;
  _DWORD v6[2] = a4;
  return _swift_task_switch(sub_100057ED8, 0, 0);
}

uint64_t sub_100057ED8()
{
  uint64_t v1 = v0[3];
  unint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__analysisContext;
  id v5 = objc_retain(*(id *)(v3
                         + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__analysisContext));
  sub_100063CCC(v1, v2);
  sub_1000C3390();

  id v6 = *(void **)(v3 + v4);
  v0[5] = v6;
  v6;
  uint64_t v7 = sub_1000C33D0();
  v0[6] = v7;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of AnalysisContext.setWait<A>(userData:)
                                                 + async function pointer to dispatch thunk of AnalysisContext.setWait<A>(userData:));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[7] = v8;
  uint64_t v9 = sub_1000520F0((uint64_t *)&unk_1000FE828);
  *uint64_t v8 = v0;
  v8[1] = sub_100057FF8;
  return v11(v7, v9);
}

uint64_t sub_100057FF8()
{
  uint64_t v1 = *(void **)(*v0 + 40);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  unint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

void RDSAPISwiftSpeechAnalyzer.getUserProfileData()()
{
}

void sub_100058158(void (*a1)(void))
{
  id v3 = objc_retain(*(id *)(v1
                         + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__analysisContext));
  a1();
  unint64_t v5 = v4;

  if (v5 >> 60 == 15) {
    __break(1u);
  }
}

void sub_1000581DC(char *a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v4 = *(void **)&a1[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__analysisContext];
  unint64_t v5 = a1;
  id v6 = v4;
  uint64_t v7 = a3();
  unint64_t v9 = v8;

  if (v9 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {

    v10.super.Class isa = sub_1000C2FF0().super.isa;
    sub_100064728(v7, v9);
    uint64_t v11 = v10.super.isa;
  }
}

uint64_t RDSAPISwiftSpeechAnalyzer.setContext(userProfileData:)(uint64_t a1, unint64_t a2)
{
  return sub_10005829C(a1, a2, (uint64_t)&unk_1000F0498, (uint64_t)&unk_1000FE538);
}

uint64_t sub_10005829C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000520F0(&qword_1000FE2F8);
  __chkstk_darwin(v8 - 8);
  NSData v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000C3650();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  uint64_t v12[3] = 0;
  v12[4] = v4;
  v12[5] = a1;
  v12[6] = a2;
  id v13 = v4;
  sub_100063CCC(a1, a2);
  sub_100051548((uint64_t)v10, a4, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_1000583A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  void v6[4] = a6;
  _DWORD v6[2] = a4;
  return _swift_task_switch(sub_1000583CC, 0, 0);
}

uint64_t sub_1000583CC()
{
  uint64_t v1 = v0[3];
  unint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__analysisContext;
  id v5 = objc_retain(*(id *)(v3
                         + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__analysisContext));
  sub_100063CCC(v1, v2);
  sub_1000C3380();

  id v6 = *(void **)(v3 + v4);
  v0[5] = v6;
  v6;
  uint64_t v7 = sub_1000C33D0();
  v0[6] = v7;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of AnalysisContext.setWait<A>(userData:)
                                                 + async function pointer to dispatch thunk of AnalysisContext.setWait<A>(userData:));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[7] = v8;
  uint64_t v9 = sub_1000520F0((uint64_t *)&unk_1000FE828);
  *uint64_t v8 = v0;
  v8[1] = sub_100064FB4;
  return v11(v7, v9);
}

void sub_10005850C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_1000520F0(&qword_1000FE2F8);
  __chkstk_darwin(v8 - 8);
  NSData v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = a3;
  id v12 = a1;
  uint64_t v13 = sub_1000C3000();
  unint64_t v15 = v14;

  uint64_t v16 = sub_1000C3650();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  void v17[3] = 0;
  v17[4] = v12;
  v17[5] = v13;
  v17[6] = v15;
  id v18 = v12;
  sub_100063CCC(v13, v15);
  sub_100051548((uint64_t)v10, a5, (uint64_t)v17);
  swift_release();
  sub_100063BB8(v13, v15);
}

Swift::Void __swiftcall RDSAPISwiftSpeechAnalyzer.useRecognitionReplacements()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000520F0(&qword_1000FE2F8);
  __chkstk_darwin(v2 - 8);
  id v35 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000520F0(&qword_1000FE4E0);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000520F0(&qword_1000FE4A8);
  __chkstk_darwin(v7 - 8);
  uint64_t v34 = (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000C3070();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v33 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = (uint64_t *)&v1[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__transcriptionOptions];
  swift_beginAccess();
  uint64_t v13 = *v12;
  sub_1000520F0(&qword_1000FE508);
  uint64_t v14 = sub_1000C3310();
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1000CB310;
  (*(void (**)(unint64_t, void, uint64_t))(v15 + 104))(v17 + v16, enum case for Transcriber.TranscriptionOption.etiquetteReplacements(_:), v14);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_100062920(v17, v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *id v12 = v18;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v33, &v1[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__locale], v9);
  uint64_t v19 = (uint64_t)&v1[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__taskHint];
  swift_beginAccess();
  sub_100064F3C(v19, v34, &qword_1000FE4A8);
  uint64_t v20 = &v1[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__modelOptions];
  uint64_t v21 = sub_1000C3290();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v6, v20, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v6, 0, 1, v21);
  sub_1000C3340();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_1000C3330();
  NSString v24 = (objc_class *)type metadata accessor for RDSAPISwiftTranscriberModule();
  uint64_t v25 = (char *)objc_allocWithZone(v24);
  *(void *)&v25[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond28RDSAPISwiftTranscriberModule__transcriberModule] = v23;
  v36.id receiver = v25;
  v36.Class super_class = v24;
  swift_retain();
  id v26 = objc_msgSendSuper2(&v36, "init");
  uint64_t v27 = sub_1000C3650();
  uint64_t v28 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v35, 1, 1, v27);
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = 0;
  v29[3] = 0;
  v29[4] = v26;
  v29[5] = v1;
  id v30 = v26;
  uint64_t v31 = v1;
  sub_100051548(v28, (uint64_t)&unk_1000FE548, (uint64_t)v29);
  swift_release();

  swift_release();
}

uint64_t sub_100058B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + ++*(void *)(result + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return _swift_task_switch(sub_100058B60, 0, 0);
}

uint64_t sub_100058B60()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 24)) + 0x58))();
  *(void *)(v0 + 40) = v2;
  *(void *)(v0 + 48) = *(void *)(v1
                                   + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__speechAnalyzer);
  sub_1000520F0(&qword_1000FE578);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_1000CB310;
  uint64_t v4 = sub_100064E90(&qword_1000FE580, (void (*)(uint64_t))&type metadata accessor for Transcriber);
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v4;
  swift_retain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  void *v5 = v0;
  v5[1] = sub_100058CC4;
  return SpeechAnalyzer.setModules(_:)(v3);
}

uint64_t sub_100058CC4()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100058E48;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = sub_100058DE8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100058DE8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100058E48()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = sub_1000C3180();
  os_log_type_t v2 = sub_1000C36D0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    sub_1000C3720();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Could not set recognition replacements = %@", v3, 0xCu);
    sub_1000520F0(&qword_1000FE4D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  id v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

Swift::Void __swiftcall RDSAPISwiftSpeechAnalyzer.newUtteranceBegins()()
{
  *(void *)(v0
            + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__newUtteranceBeginSampleNumber) = *(void *)(v0 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__totalSamplesSent);
}

Swift::Void __swiftcall RDSAPISwiftSpeechAnalyzer.addAudioSamples(audio:)(Swift::OpaquePointer audio)
{
  os_log_type_t v2 = v1;
  rawCFStringRef Value = audio._rawValue;
  uint64_t v4 = sub_1000C3360();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = sub_1000520F0(&qword_1000FE4C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&rawValue - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000520F0(&qword_1000FE550);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&rawValue - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, (uint64_t)v2+ OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__inputStreamBuilder, v5);
  (*(void (**)(void *))((swift_isaMask & *v2) + 0x2A0))(audio._rawValue);
  uint64_t v13 = OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__totalSamplesSent;
  CMTimeMake(&v19, *(void *)((char *)v2+ OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__totalSamplesSent), 16000);
  sub_1000C3350();
  sub_1000C3670();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v14 = rawValue[2];
  uint64_t v15 = *(void *)((char *)v2 + v13);
  BOOL v16 = __OFADD__(v15, v14);
  uint64_t v17 = v15 + v14;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)((char *)v2 + v13) = v17;
  }
}

Swift::Void __swiftcall RDSAPISwiftSpeechAnalyzer.endAudio()()
{
}

void sub_1000593A8(const char *a1)
{
  oslog = sub_1000C3180();
  os_log_type_t v2 = sub_1000C36C0();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, a1, v3, 2u);
    swift_slowDealloc();
  }
}

void sub_100059468(void *a1, uint64_t a2, const char *a3)
{
  id v4 = a1;
  oslog = sub_1000C3180();
  os_log_type_t v5 = sub_1000C36C0();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, a3, v6, 2u);
    swift_slowDealloc();
  }
}

Swift::Void __swiftcall RDSAPISwiftSpeechAnalyzer.addAudioSamplesPCM(audio:)(AVAudioPCMBuffer audio)
{
  Class isa = audio.super.super.isa;
  uint64_t v3 = sub_1000C3360();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_1000520F0(&qword_1000FE4C0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000520F0(&qword_1000FE550);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v1+ OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__inputStreamBuilder, v4);
  id v12 = isa;
  CMTimeMake(&v14, 0, 1);
  sub_1000C3350();
  sub_1000C3670();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100059980(uint64_t a1)
{
  uint64_t v9 = 0x40CF400000000000;
  long long v10 = xmmword_1000CB220;
  long long v11 = xmmword_1000CB230;
  id v2 = [objc_allocWithZone((Class)AVAudioFormat) initWithStreamDescription:&v9];
  if (!v2)
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (HIDWORD(v3))
  {
    uint64_t result = sub_1000C37D0();
    __break(1u);
    return result;
  }
  uint64_t v4 = v2;
  id v5 = [objc_allocWithZone((Class)AVAudioPCMBuffer) initWithPCMFormat:v2 frameCapacity:v3];
  if (!v5) {
LABEL_8:
  }
    __break(1u);
  uint64_t v6 = v5;
  uint64_t v7 = [v5 int16ChannelData];
  if (v7) {
    uint64_t v7 = (void *)*v7;
  }
  memcpy(v7, (const void *)(a1 + 32), 2 * v3);
  [v6 setFrameLength:v3];

  return (uint64_t)v6;
}

uint64_t RDSAPISwiftSpeechAnalyzer.startRecognition(transcriberModuleWrapper:)(void *a1)
{
  uint64_t v3 = sub_1000520F0(&qword_1000FE2F8);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000C3650();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  v7[3] = 0;
  void v7[4] = v1;
  void v7[5] = a1;
  uint64_t v8 = v1;
  id v9 = a1;
  *(void *)&v8[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__recognitionTask] = sub_100051548((uint64_t)v5, (uint64_t)&unk_1000FE560, (uint64_t)v7);
  return swift_release();
}

uint64_t sub_100059BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[73] = a5;
  v5[72] = a4;
  v5[74] = sub_1000C2F60();
  v5[75] = swift_task_alloc();
  uint64_t v6 = sub_1000C2F70();
  v5[76] = v6;
  v5[77] = *(void *)(v6 - 8);
  v5[78] = swift_task_alloc();
  uint64_t v7 = sub_1000C34F0();
  v5[79] = v7;
  v5[80] = *(void *)(v7 - 8);
  v5[81] = swift_task_alloc();
  uint64_t v8 = sub_1000C34C0();
  v5[82] = v8;
  v5[83] = *(void *)(v8 - 8);
  v5[84] = swift_task_alloc();
  v5[85] = swift_task_alloc();
  v5[86] = swift_task_alloc();
  v5[87] = swift_task_alloc();
  uint64_t v9 = sub_1000C3370();
  v5[88] = v9;
  v5[89] = *(void *)(v9 - 8);
  v5[90] = swift_task_alloc();
  uint64_t v10 = sub_1000C3300();
  v5[91] = v10;
  v5[92] = *(void *)(v10 - 8);
  v5[93] = swift_task_alloc();
  v5[94] = swift_task_alloc();
  v5[95] = swift_task_alloc();
  sub_1000520F0(&qword_1000FE7C0);
  v5[96] = swift_task_alloc();
  v5[97] = sub_1000520F0(&qword_1000FE7C8);
  v5[98] = swift_task_alloc();
  uint64_t v11 = sub_1000520F0(&qword_1000FE7D0);
  v5[99] = v11;
  v5[100] = *(void *)(v11 - 8);
  v5[101] = swift_task_alloc();
  uint64_t v12 = sub_1000C2F40();
  v5[102] = v12;
  v5[103] = *(void *)(v12 - 8);
  v5[104] = swift_task_alloc();
  return _swift_task_switch(sub_100059FC4, 0, 0);
}

uint64_t sub_100059FC4()
{
  *(void *)(v0 + 840) = OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__logger;
  uint64_t v1 = sub_1000C3180();
  os_log_type_t v2 = sub_1000C36C0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SpeechAnalyzer new recognition task started", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void **)(v0 + 584);

  uint64_t v5 = sub_1000C2F30();
  *(void *)(v0 + 848) = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v4) + 0x58))(v5);
  sub_1000C3320();
  *(void *)(v0 + 856) = swift_getOpaqueTypeConformance2();
  sub_1000C36A0();
  *(void *)(v0 + 864) = OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__totalSamplesSent;
  *(_DWORD *)(v0 + 1072) = enum case for EARResultType.partial(_:);
  *(_DWORD *)(v0 + 1076) = enum case for EARResultType.final(_:);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 872) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10005A1FC;
  uint64_t v8 = *(void *)(v0 + 792);
  uint64_t v9 = *(void *)(v0 + 768);
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v9, 0, 0, v0 + 544, v8, AssociatedConformanceWitness);
}

uint64_t sub_10005A1FC()
{
  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = sub_10005B964;
  }
  else {
    uint64_t v1 = sub_10005A30C;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_10005A30C()
{
  uint64_t v1 = *(void *)(v0 + 768);
  uint64_t v2 = *(void *)(v0 + 736);
  uint64_t v3 = *(void *)(v0 + 728);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) != 1)
  {
    int v12 = *(_DWORD *)(v0 + 1072);
    uint64_t v13 = *(void *)(v0 + 720);
    uint64_t v14 = *(void *)(v0 + 712);
    uint64_t v15 = *(void *)(v0 + 704);
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 760), v1, v3);
    sub_1000C32B0();
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(v13, v15);
    if (v16 == v12)
    {
      uint64_t v17 = sub_1000C3180();
      os_log_type_t v18 = sub_1000C36C0();
      CMTime v19 = (void *)v0;
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "SpeechAnalyzer partial results", v20, 2u);
        swift_slowDealloc();
      }

      id v230 = [objc_allocWithZone((Class)NSMutableArray) init];
      uint64_t v21 = sub_1000C32D0();
      uint64_t v27 = v21;
      id v227 = *(id *)(v21 + 16);
      if (v227)
      {
        unint64_t v28 = 0;
        uint64_t v222 = v21;
        uint64_t v224 = v21 + 32;
        while (v28 < *(void *)(v27 + 16))
        {
          uint64_t v29 = *(void *)(v224 + 8 * v28);
          id v30 = objc_allocWithZone((Class)NSMutableArray);
          swift_bridgeObjectRetain();
          id v249 = [v30 init];
          uint64_t v31 = *(void *)(v29 + 16);
          if (v31)
          {
            unint64_t v234 = v28;
            uint64_t v32 = v19[83];
            uint64_t v33 = v29 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
            v242 = *(CMTime **)(v32 + 72);
            v246 = *(void (**)(void, uint64_t, void))(v32 + 16);
            while (1)
            {
              uint64_t v254 = v31;
              v246(v19[87], v33, v19[82]);
              v19[60] = sub_1000C34B0();
              v19[61] = v34;
              sub_100064D84();
              sub_1000C3740();
              swift_bridgeObjectRelease();
              v19[29] = sub_1000C34A0();
              *((_DWORD *)v19 + 60) = v35;
              *((_DWORD *)v19 + 61) = v36;
              v19[31] = v37;
              double Seconds = CMTimeGetSeconds((CMTime *)(v19 + 29));
              v19[23] = sub_1000C3490();
              *((_DWORD *)v19 + 48) = v39;
              *((_DWORD *)v19 + 49) = v40;
              v19[25] = v41;
              double v42 = CMTimeGetSeconds((CMTime *)(v19 + 23));
              v19[14] = sub_1000C3440();
              *((_DWORD *)v19 + 30) = v43;
              *((_DWORD *)v19 + 31) = v44;
              v19[16] = v45;
              double v46 = CMTimeGetSeconds((CMTime *)(v19 + 14));
              sub_1000C3430();
              double v48 = v47;
              char v258 = sub_1000C3450();
              char v49 = sub_1000C3470();
              sub_1000C3460();
              sub_1000C3480();
              id v50 = objc_allocWithZone((Class)RDSAPIObjCSpeechAnalyzerTranscriptionToken);
              NSString v51 = sub_1000C3550();
              swift_bridgeObjectRelease();
              NSString v52 = sub_1000C3550();
              swift_bridgeObjectRelease();
              NSString v53 = sub_1000C3550();
              swift_bridgeObjectRelease();
              id v54 = [v50 initWithTokenName:v51 start:v258 & 1 end:v49 & 1 silenceStart:v52 confidence:v53 hasSpaceAfter:Seconds hasSpaceBefore:v42 phoneSequence:v46 ipaPhoneSequence:v48];

              if (!v54) {
                goto LABEL_73;
              }
              uint64_t v55 = v19[87];
              uint64_t v56 = v19[83];
              uint64_t v57 = v19[82];
              [v249 addObject:v54];

              (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
              v33 += (uint64_t)v242;
              uint64_t v31 = v254 - 1;
              if (v254 == 1)
              {
                swift_bridgeObjectRelease();
                uint64_t v27 = v222;
                unint64_t v28 = v234;
                goto LABEL_11;
              }
            }
          }
          swift_bridgeObjectRelease();
LABEL_11:
          ++v28;
          [v230 addObject:v249];

          if ((id)v28 == v227) {
            goto LABEL_39;
          }
        }
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v21, v22, v23, v24, v25, v26);
      }
LABEL_39:
      swift_bridgeObjectRelease();
      uint64_t v124 = v19[95];
      uint64_t v125 = v19[92];
      uint64_t v126 = v19[91];
      sub_10005C0CC(v230);

      (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v124, v126);
LABEL_63:
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v212 = (void *)swift_task_alloc();
      v19[109] = v212;
      void *v212 = v19;
      v212[1] = sub_10005A1FC;
      uint64_t v25 = v19[99];
      uint64_t v21 = v19[96];
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      NSString v24 = v19 + 68;
      uint64_t v26 = AssociatedConformanceWitness;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v21, v22, v23, v24, v25, v26);
    }
    CMTime v19 = (void *)v0;
    if (v16 != *(_DWORD *)(v0 + 1076))
    {
      uint64_t v127 = *(void *)(v0 + 760);
      uint64_t v128 = *(void *)(v0 + 736);
      uint64_t v129 = *(void *)(v0 + 728);
      uint64_t v130 = *(void *)(v0 + 720);
      uint64_t v131 = *(void *)(v0 + 712);
      uint64_t v132 = *(void *)(v0 + 704);
      (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v127, v129);
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
      goto LABEL_63;
    }
    uint64_t v58 = sub_1000C3180();
    os_log_type_t v59 = sub_1000C36C0();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "SpeechAnalyzer finalAndTerminal results", v60, 2u);
      swift_slowDealloc();
    }

    id v216 = [objc_allocWithZone((Class)NSMutableArray) init];
    uint64_t v21 = sub_1000C32F0();
    uint64_t v215 = *(void *)(v21 + 16);
    if (v215)
    {
      unint64_t v61 = 0;
      v220 = (CMTime *)(v0 + 304);
      v221 = (CMTime *)(v0 + 280);
      v238 = (CMTime *)(v0 + 376);
      v240 = (CMTime *)(v0 + 136);
      time = (CMTime *)(v0 + 400);
      v219 = (CMTime *)(v0 + 328);
      uint64_t v62 = *(unsigned __int8 *)(*(void *)(v0 + 640) + 80);
      uint64_t v213 = v21;
      uint64_t v214 = v21 + ((v62 + 32) & ~v62);
      while (v61 < *(void *)(v21 + 16))
      {
        unint64_t v217 = v61;
        (*(void (**)(void, unint64_t, void))(v19[80] + 16))(v19[81], v214 + *(void *)(v19[80] + 72) * v61, v19[79]);
        id v228 = [objc_allocWithZone((Class)NSMutableArray) init];
        id v231 = [objc_allocWithZone((Class)NSMutableArray) init];
        uint64_t v66 = sub_1000C34E0();
        uint64_t v67 = *(void *)(v66 + 16);
        if (v67)
        {
          uint64_t v68 = v19[83];
          unint64_t v69 = v66 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
          uint64_t v250 = *(void *)(v68 + 72);
          v255 = *(void (**)(void, unint64_t, void))(v68 + 16);
          do
          {
            v255(v19[86], v69, v19[82]);
            v19[62] = sub_1000C34B0();
            v19[63] = v70;
            sub_100064D84();
            sub_1000C3740();
            swift_bridgeObjectRelease();
            v19[35] = sub_1000C34A0();
            *((_DWORD *)v19 + 72) = v71;
            *((_DWORD *)v19 + 73) = v72;
            v19[37] = v73;
            double v74 = CMTimeGetSeconds(v221);
            v19[38] = sub_1000C3490();
            *((_DWORD *)v19 + 78) = v75;
            *((_DWORD *)v19 + 79) = v76;
            v19[40] = v77;
            double v78 = CMTimeGetSeconds(v220);
            v19[41] = sub_1000C3440();
            *((_DWORD *)v19 + 84) = v79;
            *((_DWORD *)v19 + 85) = v80;
            v19[43] = v81;
            double v82 = CMTimeGetSeconds(v219);
            sub_1000C3430();
            double v84 = v83;
            char v263 = sub_1000C3450();
            char v259 = sub_1000C3470();
            sub_1000C3460();
            sub_1000C3480();
            id v85 = objc_allocWithZone((Class)RDSAPIObjCSpeechAnalyzerTranscriptionToken);
            NSString v86 = sub_1000C3550();
            swift_bridgeObjectRelease();
            NSString v87 = sub_1000C3550();
            swift_bridgeObjectRelease();
            NSString v88 = sub_1000C3550();
            swift_bridgeObjectRelease();
            id v89 = [v85 initWithTokenName:v86 start:v263 & 1 end:v259 & 1 silenceStart:v87 confidence:v88 hasSpaceAfter:v74 hasSpaceBefore:v78 phoneSequence:v82 ipaPhoneSequence:v84];

            if (!v89) {
              goto LABEL_74;
            }
            uint64_t v90 = v19[86];
            uint64_t v91 = v19[83];
            uint64_t v92 = v19[82];
            [v231 addObject:v89];

            (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
            v69 += v250;
          }
          while (--v67);
        }
        swift_bridgeObjectRelease();
        [v228 addObject:v231];
        uint64_t v21 = sub_1000C34D0();
        uint64_t v93 = v21;
        uint64_t v225 = *(void *)(v21 + 16);
        if (v225)
        {
          unint64_t v94 = 0;
          uint64_t v223 = v21 + 32;
          uint64_t v218 = v21;
          while (v94 < *(void *)(v93 + 16))
          {
            uint64_t v95 = *(void *)(v223 + 8 * v94);
            id v96 = objc_allocWithZone((Class)NSMutableArray);
            swift_bridgeObjectRetain();
            id v251 = [v96 init];
            uint64_t v97 = *(void *)(v95 + 16);
            if (v97)
            {
              unint64_t v235 = v94;
              uint64_t v98 = v19[83];
              uint64_t v99 = v95 + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
              v243 = *(CMTime **)(v98 + 72);
              v247 = *(void (**)(void, uint64_t, void))(v98 + 16);
              while (1)
              {
                uint64_t v256 = v97;
                v247(v19[85], v99, v19[82]);
                v19[58] = sub_1000C34B0();
                v19[59] = v100;
                sub_100064D84();
                sub_1000C3740();
                swift_bridgeObjectRelease();
                v19[47] = sub_1000C34A0();
                *((_DWORD *)v19 + 96) = v101;
                *((_DWORD *)v19 + 97) = v102;
                v19[49] = v103;
                double v104 = CMTimeGetSeconds(v238);
                v19[50] = sub_1000C3490();
                *((_DWORD *)v19 + 102) = v105;
                *((_DWORD *)v19 + 103) = v106;
                v19[52] = v107;
                double v108 = CMTimeGetSeconds(time);
                v19[17] = sub_1000C3440();
                *((_DWORD *)v19 + 36) = v109;
                *((_DWORD *)v19 + 37) = v110;
                v19[19] = v111;
                double v112 = CMTimeGetSeconds(v240);
                sub_1000C3430();
                double v114 = v113;
                char v260 = sub_1000C3450();
                char v115 = sub_1000C3470();
                sub_1000C3460();
                sub_1000C3480();
                id v116 = objc_allocWithZone((Class)RDSAPIObjCSpeechAnalyzerTranscriptionToken);
                NSString v117 = sub_1000C3550();
                swift_bridgeObjectRelease();
                NSString v118 = sub_1000C3550();
                swift_bridgeObjectRelease();
                NSString v119 = sub_1000C3550();
                swift_bridgeObjectRelease();
                id v120 = [v116 initWithTokenName:v117 start:v260 & 1 end:v115 & 1 silenceStart:v118 confidence:v119 hasSpaceAfter:v104 hasSpaceBefore:v108 phoneSequence:v112 ipaPhoneSequence:v114];

                if (!v120) {
                  goto LABEL_72;
                }
                uint64_t v121 = v19[85];
                uint64_t v122 = v19[83];
                uint64_t v123 = v19[82];
                [v251 addObject:v120];

                (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v123);
                v99 += (uint64_t)v243;
                uint64_t v97 = v256 - 1;
                if (v256 == 1)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v93 = v218;
                  unint64_t v94 = v235;
                  goto LABEL_32;
                }
              }
            }
            swift_bridgeObjectRelease();
LABEL_32:
            ++v94;
            [v228 addObject:v251];

            if (v94 == v225) {
              goto LABEL_23;
            }
          }
          goto LABEL_68;
        }
LABEL_23:
        swift_bridgeObjectRelease();
        uint64_t v63 = v19[81];
        uint64_t v64 = v19[80];
        uint64_t v65 = v19[79];
        [v216 addObject:v228];

        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
        unint64_t v61 = v217 + 1;
        uint64_t v21 = v213;
        if (v217 + 1 == v215) {
          goto LABEL_41;
        }
      }
      goto LABEL_71;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    id v233 = [objc_allocWithZone((Class)NSMutableArray) init];
    uint64_t v21 = sub_1000C32D0();
    uint64_t v133 = v21;
    id v232 = *(id *)(v21 + 16);
    if (v232)
    {
      unint64_t v134 = 0;
      v241 = (CMTime *)(v19 + 44);
      v244 = (CMTime *)(v19 + 32);
      v239 = (CMTime *)(v19 + 53);
      uint64_t v226 = v21;
      v229 = (void *)(v21 + 32);
      while (v134 < *(void *)(v133 + 16))
      {
        uint64_t v135 = v229[v134];
        id v136 = objc_allocWithZone((Class)NSMutableArray);
        swift_bridgeObjectRetain();
        id v257 = [v136 init];
        uint64_t v137 = *(void *)(v135 + 16);
        if (v137)
        {
          unint64_t v236 = v134;
          uint64_t v138 = v19[83];
          uint64_t v139 = v135 + ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80));
          uint64_t v248 = *(void *)(v138 + 72);
          v252 = *(void (**)(void, uint64_t, void))(v138 + 16);
          while (1)
          {
            uint64_t v261 = v137;
            v252(v19[84], v139, v19[82]);
            v19[56] = sub_1000C34B0();
            v19[57] = v140;
            sub_100064D84();
            sub_1000C3740();
            swift_bridgeObjectRelease();
            v19[53] = sub_1000C34A0();
            *((_DWORD *)v19 + 108) = v141;
            *((_DWORD *)v19 + 109) = v142;
            v19[55] = v143;
            double v144 = CMTimeGetSeconds(v239);
            v19[44] = sub_1000C3490();
            *((_DWORD *)v19 + 90) = v145;
            *((_DWORD *)v19 + 91) = v146;
            v19[46] = v147;
            double v148 = CMTimeGetSeconds(v241);
            v19[32] = sub_1000C3440();
            *((_DWORD *)v19 + 66) = v149;
            *((_DWORD *)v19 + 67) = v150;
            v19[34] = v151;
            double v152 = CMTimeGetSeconds(v244);
            sub_1000C3430();
            double v154 = v153;
            char v264 = sub_1000C3450();
            char v155 = sub_1000C3470();
            sub_1000C3460();
            v156 = v19;
            sub_1000C3480();
            id v157 = objc_allocWithZone((Class)RDSAPIObjCSpeechAnalyzerTranscriptionToken);
            NSString v158 = sub_1000C3550();
            swift_bridgeObjectRelease();
            NSString v159 = sub_1000C3550();
            swift_bridgeObjectRelease();
            NSString v160 = sub_1000C3550();
            swift_bridgeObjectRelease();
            id v161 = [v157 initWithTokenName:v158 start:v264 & 1 end:v155 & 1 silenceStart:v159 confidence:v160 hasSpaceAfter:v144 hasSpaceBefore:v148 phoneSequence:v152 ipaPhoneSequence:v154];

            if (!v161) {
              goto LABEL_75;
            }
            uint64_t v162 = v156[84];
            uint64_t v163 = v156[83];
            uint64_t v164 = v156[82];
            [v257 addObject:v161];

            (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v162, v164);
            v139 += v248;
            uint64_t v137 = v261 - 1;
            CMTime v19 = v156;
            if (v261 == 1)
            {
              swift_bridgeObjectRelease();
              uint64_t v133 = v226;
              unint64_t v134 = v236;
              goto LABEL_44;
            }
          }
        }
        swift_bridgeObjectRelease();
LABEL_44:
        ++v134;
        [v233 addObject:v257];

        if ((id)v134 == v232) {
          goto LABEL_51;
        }
      }
      goto LABEL_70;
    }
LABEL_51:
    swift_bridgeObjectRelease();
    uint64_t v165 = v19[95];
    uint64_t v166 = v19[94];
    uint64_t v167 = v19[93];
    uint64_t v168 = v19[92];
    uint64_t v169 = v19[91];
    v170 = (void *)v19[72];
    sub_1000C32E0();
    sub_1000C36B0();
    sub_1000C32E0();
    v171 = *(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 16);
    v171(v166, v165, v169);
    v171(v167, v165, v169);
    id v172 = v170;
    v173 = sub_1000C3180();
    os_log_type_t v174 = sub_1000C36C0();
    if (os_log_type_enabled(v173, v174))
    {
      uint64_t v175 = v19[108];
      os_log_type_t v253 = v174;
      uint64_t v176 = v19[94];
      v245 = (CMTime *)v19[93];
      uint64_t v177 = v19[92];
      uint64_t v178 = v19[91];
      v179 = (char *)v19[72];
      uint64_t v180 = swift_slowAlloc();
      *(_DWORD *)uint64_t v180 = 134218496;
      v19[65] = *(void *)&v179[v175];
      sub_1000C3720();

      *(_WORD *)(v180 + 12) = 2048;
      sub_1000C32E0();
      uint64_t v181 = v19[8];
      v182 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
      v182(v176, v178);
      v19[66] = v181;
      sub_1000C3720();
      *(_WORD *)(v180 + 22) = 2048;
      sub_1000C32E0();
      uint64_t v183 = sub_1000C36B0();
      v182((uint64_t)v245, v178);
      v19[67] = v183;
      sub_1000C3720();
      _os_log_impl((void *)&_mh_execute_header, v173, v253, "SpeechDonation ::totalSamplesSent =%lld ::newUtteranceBeginSampleNumber :: start = %lld :: newUtteranceEndSampleNumber = %lld", (uint8_t *)v180, 0x20u);
      swift_slowDealloc();
    }
    else
    {
      uint64_t v184 = v19[94];
      uint64_t v185 = v19[91];
      v186 = (void *)v19[72];
      v182 = *(void (**)(uint64_t, uint64_t))(v19[92] + 8);
      v182(v19[93], v185);
      v182(v184, v185);
    }
    uint64_t v187 = v19[108];
    v188 = (void *)v19[72];

    sub_1000C32E0();
    uint64_t v189 = v19[2];
    sub_1000C32E0();
    uint64_t v190 = sub_1000C36B0();
    uint64_t v191 = *(void *)((char *)v188 + v187);
    v192 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v188) + 0xC8))();
    [v192 didGetUtteranceBoundary:v189 utteranceEndSampleNumber:v190 totalSamplesSentToASR:v191];

    uint64_t v193 = sub_1000C32C0();
    int64_t v194 = *(void *)(v193 + 16);
    if (v194)
    {
      v262 = v182;
      uint64_t v195 = v19[77];
      unsigned char v19[64] = _swiftEmptyArrayStorage;
      v265 = v19 + 64;
      sub_100062164(0, v194, 0);
      unint64_t v196 = v193 + ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80));
      uint64_t v266 = *(void *)(v195 + 72);
      v197 = *(void (**)(uint64_t, unint64_t, uint64_t))(v195 + 16);
      do
      {
        uint64_t v198 = v19[78];
        uint64_t v199 = v19[77];
        uint64_t v200 = v19[76];
        v197(v198, v196, v200);
        sub_1000C2F50();
        sub_100064E90(&qword_1000FE818, (void (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
        uint64_t v201 = sub_1000C3590();
        uint64_t v203 = v202;
        (*(void (**)(uint64_t, uint64_t))(v199 + 8))(v198, v200);
        uint64_t v204 = v19[64];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100062164(0, *(void *)(v204 + 16) + 1, 1);
          uint64_t v204 = *v265;
        }
        unint64_t v206 = *(void *)(v204 + 16);
        unint64_t v205 = *(void *)(v204 + 24);
        if (v206 >= v205 >> 1)
        {
          sub_100062164(v205 > 1, v206 + 1, 1);
          uint64_t v204 = *v265;
        }
        *(void *)(v204 + 16) = v206 + 1;
        uint64_t v207 = v204 + 16 * v206;
        *(void *)(v207 + 32) = v201;
        *(void *)(v207 + 40) = v203;
        v196 += v266;
        --v194;
      }
      while (v194);
      uint64_t v21 = swift_bridgeObjectRelease();
      v182 = v262;
      if (*(void *)(v204 + 16)) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v21 = swift_bridgeObjectRelease();
      if (_swiftEmptyArrayStorage[2])
      {
LABEL_62:
        uint64_t v208 = v19[95];
        uint64_t v209 = v19[91];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        NSString v210 = sub_1000C3550();
        swift_bridgeObjectRelease();
        sub_10005BE70(v216);

        v182(v208, v209);
        goto LABEL_63;
      }
    }
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  uint64_t v4 = *(void *)(v0 + 832);
  uint64_t v5 = *(void *)(v0 + 824);
  uint64_t v6 = *(void *)(v0 + 816);
  uint64_t v7 = *(void *)(v0 + 808);
  uint64_t v8 = *(void *)(v0 + 800);
  uint64_t v9 = *(void *)(v0 + 792);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10005B964()
{
  uint64_t v1 = v0[101];
  uint64_t v2 = v0[100];
  uint64_t v3 = v0[99];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = sub_1000C3180();
  os_log_type_t v5 = sub_1000C36D0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[69] = v8;
    sub_1000C3720();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Speech API Recognition Error = %@", v6, 0xCu);
    sub_1000520F0(&qword_1000FE4D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_getErrorValue();
  if (sub_1000C3890() == 0x726F727245524145 && v9 == 0xEE006E69616D6F44)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = sub_1000C3850();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      goto LABEL_10;
    }
  }
  swift_getErrorValue();
  if (sub_1000C3880())
  {
    (*(void (**)(void, void))(v0[103] + 8))(v0[104], v0[102]);
    swift_errorRelease();
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v11 = v0[104];
  uint64_t v12 = v0[103];
  uint64_t v13 = v0[102];
  sub_10005C2C8();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

void sub_10005BE70(void *a1)
{
  uint64_t v2 = v1;
  id v3 = a1;
  uint64_t v4 = sub_1000C3180();
  os_log_type_t v5 = sub_1000C36C0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    id v7 = v3;
    sub_1000C3720();
    *uint64_t v8 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Called the callback with final results = %@", v6, 0xCu);
    sub_1000520F0(&qword_1000FE4D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if ((*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xC8))())
  {
    sub_1000C35C0();
    sub_1000C35B0();
    __break(1u);
  }
}

void sub_10005C0CC(void *a1)
{
  uint64_t v2 = v1;
  id v3 = a1;
  uint64_t v4 = sub_1000C3180();
  os_log_type_t v5 = sub_1000C36C0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    id v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    id v8 = v3;
    sub_1000C3720();
    *id v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Called the callback with partial results = %@", v6, 0xCu);
    sub_1000520F0(&qword_1000FE4D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if ((*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xC8))())
  {
    sub_1000C35B0();
    __break(1u);
  }
}

void sub_10005C2C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000C3180();
  os_log_type_t v3 = sub_1000C36E0();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SpeechAPI Recognition Error", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xC8))();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    id v7 = (id)sub_1000C2F80();
    [v6 didFinishRecognitionWithError:v7];
  }
}

Swift::Void __swiftcall RDSAPISwiftSpeechAnalyzer.startRecognitionFromFile()()
{
  uint64_t v0 = sub_1000520F0(&qword_1000FE2F8);
  __chkstk_darwin(v0 - 8);
  uint64_t v60 = (char *)&v59 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_1000520F0(&qword_1000FE4B0);
  __chkstk_darwin(v2 - 8);
  uint64_t v62 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000C3270();
  uint64_t v65 = *(void *)(v4 - 8);
  uint64_t v66 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v64 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v63 = (char *)&v59 - v7;
  uint64_t v75 = sub_1000520F0(&qword_1000FE568);
  uint64_t v73 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  int v71 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_1000520F0(&qword_1000FE4C0);
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v70 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_1000520F0(&qword_1000FE4B8);
  uint64_t v76 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  double v78 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000C2FE0();
  uint64_t v68 = *(void *)(v11 - 8);
  uint64_t v69 = v11;
  __chkstk_darwin(v11);
  int v80 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000C3070();
  __chkstk_darwin(v13 - 8);
  uint64_t v14 = sub_1000520F0(&qword_1000FE4E0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1000520F0(&qword_1000FE4A8);
  __chkstk_darwin(v17 - 8);
  CMTime v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1000C3500();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = sub_1000C3290();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v16, 1, 1, v21);
  sub_1000520F0(&qword_1000FE570);
  uint64_t v22 = sub_1000C32A0();
  uint64_t v23 = *(void *)(v22 - 8);
  unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = swift_allocObject();
  long long v61 = xmmword_1000CB310;
  *(_OWORD *)(v25 + 16) = xmmword_1000CB310;
  (*(void (**)(unint64_t, void, uint64_t))(v23 + 104))(v25 + v24, enum case for Transcriber.ReportingOption.multisegmentResults(_:), v22);
  uint64_t v77 = (uint64_t)sub_1000622F0(v25);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1000C3060();
  sub_1000520F0(&qword_1000FE508);
  uint64_t v26 = sub_1000C3310();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(void *)(v27 + 72);
  unint64_t v29 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1000CB320;
  unint64_t v31 = v30 + v29;
  uint64_t v32 = *(void (**)(unint64_t, void, uint64_t))(v27 + 104);
  v32(v31, enum case for Transcriber.TranscriptionOption.contextualizedTranscription(_:), v26);
  v32(v31 + v28, enum case for Transcriber.TranscriptionOption.punctuation(_:), v26);
  uint64_t v33 = (uint64_t)v80;
  v32(v31 + 2 * v28, enum case for Transcriber.TranscriptionOption.emoji(_:), v26);
  sub_100062608(v30);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1000C3340();
  swift_allocObject();
  uint64_t v34 = sub_1000C3330();
  type metadata accessor for RDSAPISwiftSpeechAnalyzer(0);
  sub_10005D0A4(v33);
  id v35 = [objc_allocWithZone((Class)AVAudioFormat) initWithCommonFormat:3 sampleRate:1 channels:0 interleaved:16000.0];
  if (v35)
  {
    int v36 = v35;
    uint64_t v77 = v34;
    type metadata accessor for AudioStream(0);
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_avFile) = 0;
    *(void *)(v37 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_avConverter) = 0;
    sub_1000C3360();
    uint64_t v38 = v73;
    int v39 = v71;
    uint64_t v40 = v75;
    (*(void (**)(char *, void, uint64_t))(v73 + 104))(v71, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v75);
    id v41 = v36;
    double v42 = v78;
    int v43 = v70;
    sub_1000C3660();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
    uint64_t v44 = v76;
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v37 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStream, v42, v79);
    (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v37 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStreamGenerator, v43, v74);
    sub_10005EF34(v33, (uint64_t)v41);
    uint64_t v45 = v64;
    sub_1000C3260();
    uint64_t v75 = sub_1000C3200();
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v63, v45, v66);
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v78, v37 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStream, v79);
    sub_1000520F0(&qword_1000FE578);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = v61;
    uint64_t v47 = sub_100064E90(&qword_1000FE580, (void (*)(uint64_t))&type metadata accessor for Transcriber);
    *(void *)(v46 + 32) = v77;
    *(void *)(v46 + 40) = v47;
    uint64_t v48 = sub_1000C3420();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v62, 1, 1, v48);
    id v49 = objc_allocWithZone((Class)sub_1000C33E0());
    id v50 = v41;
    swift_retain();
    [v49 init];
    sub_100063F50();
    uint64_t v51 = sub_1000C31F0();
    sub_10005F2C0((void (*)(void *, void *))sub_100063FF4, v37, sub_100063FFC);
    uint64_t v52 = v69;
    NSString v53 = v67;
    uint64_t v54 = sub_1000C3650();
    uint64_t v55 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v60, 1, 1, v54);
    uint64_t v56 = (void *)swift_allocObject();
    v56[2] = 0;
    v56[3] = 0;
    uint64_t v57 = v77;
    v56[4] = v51;
    v56[5] = v57;
    v56[6] = v53;
    swift_retain();
    swift_retain();
    id v58 = v53;
    sub_10005DEB8(v55, (uint64_t)&unk_1000FE598, (uint64_t)v56);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v66);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v80, v52);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10005D0A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000C2FE0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000520F0(&qword_1000FE5A0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AudioStream(0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v10 = [self bundleForClass:ObjCClassFromMetadata];
  NSString v11 = sub_1000C3550();
  NSString v12 = sub_1000C3550();
  id v13 = [v10 URLForResource:v11 withExtension:v12];

  if (v13)
  {
    sub_1000C2FD0();

    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if (result != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  __break(1u);
  return result;
}

uint64_t sub_10005D2F8()
{
  uint64_t v0 = sub_1000520F0(&qword_1000FE568);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000520F0(&qword_1000FE4C0);
  uint64_t v4 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000520F0(&qword_1000FE4B8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_avFile) = 0;
  *(void *)(v11 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_avConverter) = 0;
  sub_1000C3360();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v0);
  sub_1000C3660();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v11 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStream, v10, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v11 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStreamGenerator, v6, v14);
  return v11;
}

uint64_t sub_10005D590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  void v6[4] = a6;
  uint64_t v7 = sub_1000C3300();
  v6[5] = v7;
  v6[6] = *(void *)(v7 - 8);
  v6[7] = swift_task_alloc();
  sub_1000520F0(&qword_1000FE7C0);
  v6[8] = swift_task_alloc();
  v6[9] = sub_1000520F0(&qword_1000FE7C8);
  v6[10] = swift_task_alloc();
  uint64_t v8 = sub_1000520F0(&qword_1000FE7D0);
  v6[11] = v8;
  v6[12] = *(void *)(v8 - 8);
  v6[13] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v6[14] = v9;
  *uint64_t v9 = v6;
  v9[1] = sub_10005D748;
  return SpeechAnalyzer.finalizeAndFinishThroughEndOfInput()();
}

uint64_t sub_10005D748()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10005D8AC, 0, 0);
  }
}

uint64_t sub_10005D8AC()
{
  sub_1000C3320();
  v0[15] = swift_getOpaqueTypeConformance2();
  sub_1000C36A0();
  v0[16] = OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__logger;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[17] = v2;
  void *v2 = v0;
  v2[1] = sub_10005D9E8;
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[8];
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v4, 0, 0, v0 + 2, v3, AssociatedConformanceWitness);
}

uint64_t sub_10005D9E8()
{
  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = sub_10005DE14;
  }
  else {
    uint64_t v1 = sub_10005DAF8;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_10005DAF8()
{
  uint64_t v20 = v0;
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[7], v1, v2);
    uint64_t v6 = sub_1000C3180();
    os_log_type_t v7 = sub_1000C36C0();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v10 = v0[6];
    uint64_t v9 = v0[7];
    uint64_t v11 = v0[5];
    if (v8)
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      sub_100064E90(&qword_1000FE7D8, (void (*)(uint64_t))&type metadata accessor for Transcriber.MultisegmentResult);
      uint64_t v13 = sub_1000C3830();
      *(void *)(v12 + 4) = sub_100052990(v13, v14, &v19);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Got recognition results from audio file %s", (uint8_t *)v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v16 = (void *)swift_task_alloc();
    v0[17] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_10005D9E8;
    uint64_t v17 = v0[11];
    uint64_t v18 = v0[8];
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v18, 0, 0, v0 + 2, v17, AssociatedConformanceWitness);
  }
}

uint64_t sub_10005DE14()
{
  (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10005DEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000C3650();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1000C3640();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1000528CC(a1, &qword_1000FE2F8);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1000C3610();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10005E088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  void v5[6] = a5;
  v5[3] = a1;
  void v5[4] = a3;
  v5[7] = *(void *)(a3 - 8);
  v5[8] = swift_task_alloc();
  uint64_t v7 = sub_1000C3710();
  v5[9] = v7;
  v5[10] = *(void *)(v7 - 8);
  v5[11] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[12] = AssociatedTypeWitness;
  v5[13] = *(void *)(AssociatedTypeWitness - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  uint8_t v5[16] = swift_getAssociatedTypeWitness();
  sub_1000C3710();
  v5[17] = swift_task_alloc();
  v5[18] = *(void *)(a4 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  v5[20] = v9;
  v5[21] = *(void *)(v9 - 8);
  v5[22] = swift_task_alloc();
  return _swift_task_switch(sub_10005E354, 0, 0);
}

uint64_t sub_10005E354()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  v0[2] = sub_1000C35E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  sub_1000C36A0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[23] = AssociatedConformanceWitness;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[24] = v6;
  void *v6 = v0;
  v6[1] = sub_10005E484;
  uint64_t v7 = v0[20];
  uint64_t v8 = v0[17];
  uint64_t v9 = v0[15];
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v8, 0, 0, v9, v7, AssociatedConformanceWitness);
}

uint64_t sub_10005E484()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_10005E830;
  }
  else
  {
    uint64_t v1 = sub_10005E59C;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_10005E59C()
{
  if ((*(unsigned int (**)(void, uint64_t, void))(*(void *)(v0[16] - 8) + 48))(v0[17], 1, v0[16]) == 1)
  {
    (*(void (**)(void, void))(v0[21] + 8))(v0[22], v0[20]);
    uint64_t v1 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
    return v2(v1);
  }
  else
  {
    uint64_t v4 = v0[7];
    char v5 = swift_dynamicCast();
    uint64_t v6 = *(void (**)(void, uint64_t, uint64_t, uint64_t))(v4 + 56);
    uint64_t v7 = v0[11];
    if (v5)
    {
      uint64_t v9 = v0[7];
      uint64_t v8 = v0[8];
      uint64_t v10 = v0[4];
      v6(v0[11], 0, 1, v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v8, v7, v10);
      sub_1000C3600();
      sub_1000C35F0();
    }
    else
    {
      uint64_t v11 = v0[9];
      uint64_t v12 = v0[10];
      v6(v0[11], 1, 1, v0[4]);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v7, v11);
    }
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v0[23] = AssociatedConformanceWitness;
    unint64_t v14 = (void *)swift_task_alloc();
    v0[24] = v14;
    *unint64_t v14 = v0;
    v14[1] = sub_10005E484;
    uint64_t v15 = v0[20];
    uint64_t v16 = v0[17];
    uint64_t v17 = v0[15];
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v16, 0, 0, v17, v15, AssociatedConformanceWitness);
  }
}

uint64_t sub_10005E830()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[13] + 32);
  v1(v0[14], v0[15], v0[12]);
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = sub_1000C3840();
  uint64_t v3 = v0[14];
  if (v2)
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  }
  else
  {
    uint64_t v4 = v0[12];
    swift_allocError();
    v1(v5, v3, v4);
  }
  (*(void (**)(void, void))(v0[21] + 8))(v0[22], v0[20]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

void RDSAPISwiftSpeechAnalyzer.init()()
{
}

uint64_t sub_10005EA1C@<X0>(uint64_t a1@<X8>)
{
  return sub_10005EA44(&OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStream, &qword_1000FE4B8, a1);
}

uint64_t sub_10005EA30@<X0>(uint64_t a1@<X8>)
{
  return sub_10005EA44(&OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStreamGenerator, &qword_1000FE4C0, a1);
}

uint64_t sub_10005EA44@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *a1;
  uint64_t v6 = sub_1000520F0(a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  return v7(a3, v5, v6);
}

void *sub_10005EAB4()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_avFile);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_10005EB04(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_avFile);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*sub_10005EB58())()
{
  return j_j__swift_endAccess;
}

void *sub_10005EBB4()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_avConverter);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_10005EC04(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_avConverter);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*sub_10005EC58())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10005ECB4()
{
  uint64_t v1 = sub_1000520F0(&qword_1000FE568);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000520F0(&qword_1000FE4C0);
  uint64_t v5 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000520F0(&qword_1000FE4B8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_avFile) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_avConverter) = 0;
  sub_1000C3360();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v1);
  sub_1000C3660();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v0 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStream, v11, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v0 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStreamGenerator, v7, v14);
  return v0;
}

void sub_10005EF34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = sub_1000C2FE0();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, a1);
  id v11 = objc_allocWithZone((Class)AVAudioFile);
  id v12 = sub_10005FA74((uint64_t)v9);
  if (!v3)
  {
    uint64_t v13 = (*(uint64_t (**)(id))(*(void *)v4 + 120))(v12);
    uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v13);
    if (v14)
    {
      uint64_t v15 = v14;
      id v16 = [v14 processingFormat];

      id v17 = [objc_allocWithZone((Class)AVAudioConverter) initFromFormat:v16 toFormat:a2];
      if (v17)
      {
        (*(void (**)(id))(*(void *)v4 + 144))(v17);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_10005F0FC()
{
  return (*(uint64_t (**)(uint64_t (*)(void *), uint64_t, void (*)(), uint64_t))(*(void *)v0 + 184))(sub_100063FF4, v0, sub_100064FAC, v0);
}

uint64_t sub_10005F164(void *a1)
{
  uint64_t v2 = sub_1000C3360();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = sub_1000520F0(&qword_1000FE550);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = a1;
  sub_1000C3350();
  sub_1000520F0(&qword_1000FE4C0);
  sub_1000C3670();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_10005F2C0(void (*a1)(void *, void *), uint64_t a2, void (*a3)(void))
{
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 112);
  uint64_t v5 = (void *)v4();
  if (!v5) {
    goto LABEL_39;
  }
  uint64_t v6 = v5;
  id v7 = &selRef_donorReferenceID;
  id v8 = [v5 processingFormat];

  [v8 sampleRate];
  double v10 = v9;

  double v11 = v10 * 0.5;
  if ((~COERCE__INT64(v10 * 0.5) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v11 <= -1.0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  if (v11 >= 4294967300.0) {
    goto LABEL_28;
  }
  uint64_t v12 = 0;
  unsigned int v61 = v11;
  uint64_t v56 = v4;
  do
  {
    uint64_t v13 = (void *)v4();
    if (!v13) {
      goto LABEL_29;
    }
    uint64_t v14 = v13;
    id v15 = [v13 length];

    if (v12 >= (uint64_t)v15) {
      goto LABEL_22;
    }
    id v16 = (void *)v4();
    if (!v16) {
      goto LABEL_30;
    }
    id v17 = v16;
    id v18 = [v16 v7[393]];

    [v18 sampleRate];
    double v20 = v19;

    id v21 = [objc_allocWithZone((Class)AVAudioTime) initWithSampleTime:v12 atRate:v20];
    uint64_t v22 = (void *)v4();
    if (!v22) {
      goto LABEL_31;
    }
    uint64_t v23 = v22;
    uint64_t v60 = v21;
    uint64_t v58 = v12;
    id v24 = [v22 v7[393]];

    id v25 = [objc_allocWithZone((Class)AVAudioPCMBuffer) initWithPCMFormat:v24 frameCapacity:v61];
    if (!v25) {
      goto LABEL_32;
    }
    uint64_t v26 = *(uint64_t (**)(void))(*(void *)v3 + 136);
    uint64_t v27 = (void *)v26();
    if (!v27) {
      goto LABEL_33;
    }
    uint64_t v28 = v27;
    id v29 = [v27 outputFormat];

    id v30 = [objc_allocWithZone((Class)AVAudioPCMBuffer) initWithPCMFormat:v29 frameCapacity:v61];
    uint64_t v59 = v30;
    if (!v30) {
      goto LABEL_34;
    }
    unint64_t v31 = (void *)v4();
    if (!v31) {
      goto LABEL_35;
    }
    uint64_t v32 = v31;
    aBlock[0] = 0;
    unsigned int v33 = [v31 readIntoBuffer:v25 error:aBlock];

    if (!v33)
    {
      id v52 = aBlock[0];
      sub_1000C2F90();

      swift_willThrow();
      NSString v53 = v59;
      id v47 = v60;
      uint64_t v48 = v25;
LABEL_25:

      return;
    }
    uint64_t v34 = (void *)((uint64_t (*)(id))v4)(aBlock[0]);
    if (!v34) {
      goto LABEL_36;
    }
    id v35 = v34;
    id v36 = [v34 framePosition];

    uint64_t v37 = v3;
    uint64_t v38 = (void *)v4();
    if (!v38) {
      goto LABEL_37;
    }
    int v39 = v38;
    id v40 = [v38 length];

    uint64_t v41 = swift_allocObject();
    *(unsigned char *)(v41 + 16) = 0;
    uint64_t v42 = v37;
    uint64_t v43 = v26();
    if (!v43) {
      goto LABEL_38;
    }
    uint64_t v44 = (void *)v43;
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = v41;
    *(unsigned char *)(v45 + ++*(void *)(result + 24) = (uint64_t)v36 >= (uint64_t)v40;
    *(void *)(v45 + 32) = v25;
    aBlock[4] = sub_10006417C;
    aBlock[5] = (id)v45;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10005F82C;
    aBlock[3] = &unk_1000F0578;
    uint64_t v46 = _Block_copy(aBlock);
    swift_retain();
    id v47 = v25;
    swift_release();
    aBlock[0] = 0;
    uint64_t v48 = v59;
    [v44 convertToBuffer:v59 error:aBlock withInputFromBlock:v46];
    _Block_release(v46);

    id v49 = aBlock[0];
    if (v49)
    {
      id v54 = v49;
      swift_willThrow();

      swift_release();
      [v47 frameLength];
      NSString v53 = v60;
      goto LABEL_25;
    }
    a1(v59, v60);
    swift_release();
    unsigned int v50 = [v47 frameLength];

    BOOL v51 = __OFADD__(v58, v50);
    uint64_t v12 = v58 + v50;
    uint64_t v4 = v56;
    uint64_t v3 = v42;
    id v7 = &selRef_donorReferenceID;
  }
  while (!v51);
  __break(1u);
LABEL_22:
  a3();
}

id sub_10005F82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v6 = (void *)v5(a2, a3);
  swift_release();
  return v6;
}

uint64_t sub_10005F898()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStream;
  uint64_t v2 = sub_1000520F0(&qword_1000FE4B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStreamGenerator;
  uint64_t v4 = sub_1000520F0(&qword_1000FE4C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return v0;
}

uint64_t sub_10005F968()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStream;
  uint64_t v2 = sub_1000520F0(&qword_1000FE4B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond11AudioStream_audioStreamGenerator;
  uint64_t v4 = sub_1000520F0(&qword_1000FE4C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

id sub_10005FA74(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1000C2FC0(__stack_chk_guard);
  uint64_t v5 = v4;
  id v14 = 0;
  id v6 = [v2 initForReading:v4 error:&v14];

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = sub_1000C2FE0();
    double v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    id v10 = v7;
    v9(a1, v8);
  }
  else
  {
    id v11 = v14;
    sub_1000C2F90();

    swift_willThrow();
    uint64_t v12 = sub_1000C2FE0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

uint64_t sub_10005FBC0(uint64_t a1, uint64_t a2, int *a3)
{
  id v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_100064FA0;
  return v6();
}

uint64_t sub_10005FC8C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_100064FA0;
  return v7();
}

uint64_t sub_10005FD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000C3650();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1000C3640();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000528CC(a1, &qword_1000FE2F8);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1000C3610();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + ++*(void *)(result + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10005FF04(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100064FB0;
  return v6(a1);
}

uint64_t sub_10005FFE0(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000C3310();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  double v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100064E90(&qword_1000FE7E8, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
  swift_bridgeObjectRetain();
  unsigned int v33 = a2;
  uint64_t v11 = sub_1000C3530();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    id v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    id v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    id v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      double v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100064E90(&qword_1000FE7F0, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
      char v21 = sub_1000C3540();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      id v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100060700((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100060304()
{
  uint64_t v1 = v0;
  uint64_t v42 = sub_1000C3310();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_1000520F0(&qword_1000FE7E0);
  uint64_t v5 = sub_1000C3770();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    id v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    id v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100064E90(&qword_1000FE7E8, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
      uint64_t result = sub_1000C3530();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100060700(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = sub_1000C3310();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100060304();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1000609A0();
      goto LABEL_12;
    }
    sub_100060C44();
  }
  uint64_t v12 = *v3;
  sub_100064E90(&qword_1000FE7E8, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
  uint64_t v13 = sub_1000C3530();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    int64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100064E90(&qword_1000FE7F0, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
      char v21 = sub_1000C3540();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_1000C3860();
  __break(1u);
  return result;
}

void *sub_1000609A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000C3310();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000520F0(&qword_1000FE7E0);
  uint64_t v6 = *v0;
  uint64_t v7 = sub_1000C3760();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100060C44()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000C3310();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1000520F0(&qword_1000FE7E0);
  uint64_t v7 = sub_1000C3770();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100064E90(&qword_1000FE7E8, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
    uint64_t result = sub_1000C3530();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100060FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000C3310();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100064E90(&qword_1000FE7E8, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = sub_1000C3530();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    int64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    unint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_100064E90(&qword_1000FE7F0, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
      char v19 = sub_1000C3540();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    uint64_t *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000609A0();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_1000612D4(v12);
    uint64_t *v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_1000612D4(int64_t a1)
{
  uint64_t v3 = sub_1000C3310();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v31 = v1;
    uint64_t v11 = ~v9;
    uint64_t v35 = result;
    swift_retain();
    uint64_t v12 = sub_1000C3750();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (v12 + 1) & v11;
      unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v13 = v4 + 16;
      uint64_t v32 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      int64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v35;
      do
      {
        uint64_t v18 = v8;
        uint64_t v19 = v15;
        int64_t v20 = v15 * v10;
        v32(v6, *(void *)(v17 + 48) + v15 * v10, v3);
        sub_100064E90(&qword_1000FE7E8, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
        uint64_t v21 = sub_1000C3530();
        (*v16)(v6, v3);
        unint64_t v22 = v21 & v11;
        if (a1 >= (uint64_t)v33)
        {
          if (v22 < v33 || a1 < (uint64_t)v22)
          {
LABEL_4:
            uint64_t v8 = v18;
            uint64_t v15 = v19;
            uint64_t v17 = v35;
            goto LABEL_5;
          }
        }
        else if (v22 < v33 && a1 < (uint64_t)v22)
        {
          goto LABEL_4;
        }
        uint64_t v17 = v35;
        int64_t v25 = v19 * a1;
        uint64_t v8 = v18;
        if (v19 * a1 < v20
          || (uint64_t v15 = v19, *(void *)(v35 + 48) + v19 * a1 >= (unint64_t)(*(void *)(v35 + 48) + v20 + v19)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v10;
        if (v25 != v20)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          uint64_t v17 = v35;
          uint64_t v15 = v19;
          a1 = v10;
        }
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v31;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

unint64_t sub_1000615F0(uint64_t a1)
{
  sub_1000C33C0();
  sub_100064E90(&qword_1000FE840, (void (*)(uint64_t))&type metadata accessor for AnalysisContext.ContextualStringsTag);
  uint64_t v2 = sub_1000C3530();
  return sub_100061D0C(a1, v2);
}

uint64_t sub_100061688(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_1000C33C0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1000520F0(&qword_1000FE838);
  int v46 = a2;
  uint64_t v10 = sub_1000C3810();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  int64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    int64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_100064E90(&qword_1000FE840, (void (*)(uint64_t))&type metadata accessor for AnalysisContext.ContextualStringsTag);
    uint64_t result = sub_1000C3530();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  int64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100061AAC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_1000C33C0();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1000615F0(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    int64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100061ECC();
    goto LABEL_7;
  }
  sub_100061688(v17, a3 & 1);
  unint64_t v23 = sub_1000615F0(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = sub_1000C3870();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  int64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100061C54(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100061C54(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_1000C33C0();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_100061D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = sub_1000C33C0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100064E90(&qword_1000FE848, (void (*)(uint64_t))&type metadata accessor for AnalysisContext.ContextualStringsTag);
      char v15 = sub_1000C3540();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

void *sub_100061ECC()
{
  uint64_t v1 = sub_1000C33C0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000520F0(&qword_1000FE838);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_1000C3800();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100062164(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100062184(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100062184(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000520F0(&qword_1000FE820);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1000C3820();
  __break(1u);
  return result;
}

void *sub_1000622F0(uint64_t a1)
{
  uint64_t v2 = sub_1000C32A0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_1000520F0(&qword_1000FE7F8);
    uint64_t v9 = sub_1000C3780();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    unint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_100064E90(&qword_1000FE800, (void (*)(uint64_t))&type metadata accessor for Transcriber.ReportingOption);
      uint64_t v16 = sub_1000C3530();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_100064E90(&qword_1000FE808, (void (*)(uint64_t))&type metadata accessor for Transcriber.ReportingOption);
          char v23 = sub_1000C3540();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        int64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_100062608(uint64_t a1)
{
  uint64_t v2 = sub_1000C3310();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_1000520F0(&qword_1000FE7E0);
    uint64_t v9 = sub_1000C3780();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    unint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_100064E90(&qword_1000FE7E8, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
      uint64_t v16 = sub_1000C3530();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_100064E90(&qword_1000FE7F0, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
          char v23 = sub_1000C3540();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        int64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_100062920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000C3310();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v19 = a2;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v13 = v14;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v16 = *(void *)(v12 + 56);
    do
    {
      v13(v8, v15, v4);
      sub_10005FFE0((uint64_t)v10, v8);
      (*(void (**)(char *, uint64_t))(v12 - 8))(v10, v4);
      v15 += v16;
      --v11;
    }
    while (v11);
    return v19;
  }
  return a2;
}

id sub_100062A80(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v104 = a5;
  LODWORD(v118) = a4;
  int v113 = a3;
  uint64_t v100 = a2;
  *(void *)&long long v99 = a1;
  uint64_t v6 = sub_1000520F0(&qword_1000FE850);
  __chkstk_darwin(v6 - 8);
  id v96 = (char *)v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_1000C3400();
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v95 = (char *)v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000C3650();
  __chkstk_darwin(v9 - 8);
  v92[1] = (char *)v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000520F0(&qword_1000FE4B0);
  __chkstk_darwin(v11 - 8);
  NSString v117 = (char *)v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_1000520F0(&qword_1000FE568);
  uint64_t v107 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  int v105 = (char *)v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v110 = (objc_class *)sub_1000520F0(&qword_1000FE4C0);
  uint64_t v108 = *((void *)v110 - 1);
  __chkstk_darwin(v110);
  int v106 = (char *)v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_1000520F0(&qword_1000FE4B8);
  uint64_t v112 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  id v120 = (char *)v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_1000C3270();
  uint64_t v116 = *(void *)(v121 - 8);
  uint64_t v16 = __chkstk_darwin(v121);
  NSString v119 = (char *)v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  char v115 = (char *)v92 - v18;
  uint64_t v19 = sub_1000520F0(&qword_1000FE5A0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v98 = (char *)v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  char v23 = (char *)v92 - v22;
  uint64_t v97 = sub_1000C3290();
  uint64_t v24 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v26 = (char *)v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_1000C3070();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)v92 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = &v5[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__logger];
  uint64_t v32 = qword_1000FECC0;
  uint64_t v33 = v5;
  if (v32 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v111 = v31;
  sub_1000C3190();
  uint64_t v34 = (void **)&v33[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__delegate];
  *(void *)&v33[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__delegate] = 0;
  unint64_t v35 = &v33[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__taskHint];
  uint64_t v36 = sub_1000C3500();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  uint64_t v37 = &v33[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__analysisOptions];
  uint64_t v38 = sub_1000C3420();
  uint64_t v39 = *(void *)(v38 - 8);
  int64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56);
  v92[0] = v37;
  uint64_t v103 = v38;
  int v102 = v40;
  uint64_t v101 = v39 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v40)(v37, 1, 1);
  *(void *)&v33[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__recognitionTask] = 0;
  swift_beginAccess();
  int64_t v41 = *v34;
  uint64_t v42 = (void *)v99;
  *uint64_t v34 = (void *)v99;
  id v43 = v42;

  *(void *)&v33[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__totalSamplesSent] = 0;
  *(void *)&v33[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__newUtteranceBeginSampleNumber] = 0;
  sub_1000C3050();
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v33[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__locale], v30, v27);
  uint64_t v44 = sub_1000C2FE0();
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56);
  v45(v23, 1, 1, v44);
  v45(v98, 1, 1, v44);
  sub_1000C3280();
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v33[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__modelOptions], v26, v97);
  sub_1000520F0(&qword_1000FE570);
  uint64_t v46 = sub_1000C32A0();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(void *)(v47 + 72);
  unint64_t v49 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_1000CB320;
  unint64_t v51 = v50 + v49;
  id v52 = *(void (**)(unint64_t, void, uint64_t))(v47 + 104);
  v52(v51, enum case for Transcriber.ReportingOption.multisegmentResults(_:), v46);
  v52(v51 + v48, enum case for Transcriber.ReportingOption.alternativeTranscriptions(_:), v46);
  v52(v51 + 2 * v48, enum case for Transcriber.ReportingOption.volatileResults(_:), v46);
  NSString v53 = sub_1000622F0(v50);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)&v33[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__reportingOptions] = v53;
  uint64_t v54 = sub_1000520F0(&qword_1000FE508);
  uint64_t v55 = sub_1000C3310();
  uint64_t v56 = *(void *)(v55 - 8);
  unint64_t v57 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  uint64_t v100 = v54;
  uint64_t v58 = swift_allocObject();
  long long v99 = xmmword_1000CB310;
  *(_OWORD *)(v58 + 16) = xmmword_1000CB310;
  uint64_t v59 = *(void (**)(unint64_t, void, uint64_t))(v56 + 104);
  v59(v58 + v57, enum case for Transcriber.TranscriptionOption.contextualizedTranscription(_:), v55);
  uint64_t v60 = sub_100062608(v58);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  NSString v118 = v33;
  unsigned int v61 = (uint64_t *)&v33[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__transcriptionOptions];
  *(void *)&v33[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__transcriptionOptions] = v60;
  if (v104)
  {
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = v99;
    v59(v62 + v57, enum case for Transcriber.TranscriptionOption.emoji(_:), v55);
    swift_bridgeObjectRetain();
    uint64_t v63 = sub_100062920(v62, (uint64_t)v60);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    swift_beginAccess();
    uint64_t *v61 = v63;
    swift_bridgeObjectRelease();
  }
  if (qword_1000FECB8 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v64 = v115;
  sub_1000C3260();
  sub_1000C3360();
  uint64_t v65 = v107;
  uint64_t v66 = v105;
  uint64_t v67 = v109;
  (*(void (**)(char *, void, uint64_t))(v107 + 104))(v105, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v109);
  uint64_t v68 = v120;
  uint64_t v69 = v106;
  sub_1000C3660();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
  uint64_t v70 = v118;
  int v71 = &v118[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__inputStream];
  uint64_t v72 = v112;
  uint64_t v73 = v114;
  (*(void (**)(char *, char *, uint64_t))(v112 + 32))(&v118[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__inputStream], v68, v114);
  (*(void (**)(char *, char *, objc_class *))(v108 + 32))(&v70[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__inputStreamBuilder], v69, v110);
  int v110 = (objc_class *)sub_1000C33E0();
  uint64_t v74 = &selRef_donorReferenceID;
  id v75 = [objc_allocWithZone(v110) init];
  *(void *)&v70[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__analysisContext] = v75;
  uint64_t v77 = v116;
  uint64_t v76 = (uint64_t)v117;
  uint64_t v78 = v121;
  if (v113)
  {
    sub_1000C3630();
    uint64_t v79 = v72;
    (*(void (**)(char *, void, uint64_t))(v93 + 104))(v95, enum case for AnalysisOptions.ModelRetention.whileInUse(_:), v94);
    uint64_t v80 = sub_1000C33F0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v96, 1, 1, v80);
    sub_1000C3410();
    v102(v76, 0, 1, v103);
    uint64_t v81 = v92[0];
    swift_beginAccess();
    sub_100064ED8(v76, v81, &qword_1000FE4B0);
    swift_endAccess();
    sub_1000C3200();
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v119, v64, v121);
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v68, v71, v73);
    if (qword_1000FECC8 != -1) {
      swift_once();
    }
    double v82 = (void *)qword_1000FF608;
    sub_100064F3C(v81, v76, &qword_1000FE4B0);
    uint64_t v74 = &selRef_donorReferenceID;
  }
  else
  {
    sub_1000C3200();
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v119, v64, v78);
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v68, v71, v73);
    if (qword_1000FECC8 != -1) {
      swift_once();
    }
    double v82 = (void *)qword_1000FF608;
    v102(v76, 1, 1, v103);
  }
  id v83 = objc_allocWithZone(v110);
  id v84 = v82;
  [v83 v74[28]];
  sub_100063F50();
  uint64_t v85 = sub_1000C31F0();
  NSString v86 = v118;
  *(void *)&v118[OBJC_IVAR____TtC50com_apple_SpeechRecognitionCore_speechrecognitiond25RDSAPISwiftSpeechAnalyzer__speechAnalyzer] = v85;
  NSString v87 = sub_1000C3180();
  os_log_type_t v88 = sub_1000C36E0();
  if (os_log_type_enabled(v87, v88))
  {
    id v89 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v89 = 0;
    _os_log_impl((void *)&_mh_execute_header, v87, v88, "SpeechAnalyzer initialized", v89, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v77 + 8))(v64, v121);
  uint64_t v90 = (objc_class *)type metadata accessor for RDSAPISwiftSpeechAnalyzer(0);
  v122.id receiver = v86;
  v122.Class super_class = v90;
  return objc_msgSendSuper2(&v122, v74[28]);
}

uint64_t type metadata accessor for RDSAPISwiftSpeechAnalyzer(uint64_t a1)
{
  return sub_100054650(a1, (uint64_t *)&unk_1000FED38);
}

unint64_t sub_100063AC8()
{
  unint64_t result = qword_1000FE4E8;
  if (!qword_1000FE4E8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000FE4E8);
  }
  return result;
}

uint64_t sub_100063B0C()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100064FA0;
  return sub_10005793C((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_100063BB8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100063C10()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100064FA0;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return _swift_task_switch(sub_100057ED8, 0, 0);
}

uint64_t sub_100063CCC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_100063D28()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100064FA0;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return _swift_task_switch(sub_1000583CC, 0, 0);
}

uint64_t sub_100063DE8()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100064FA0;
  *(_OWORD *)(v2 + ++*(void *)(result + 24) = v3;
  return _swift_task_switch(sub_100058B60, 0, 0);
}

uint64_t sub_100063E98()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100064FA0;
  return sub_100059BFC((uint64_t)v4, v5, v6, v2, v3);
}

uint64_t type metadata accessor for AudioStream(uint64_t a1)
{
  return sub_100054650(a1, (uint64_t *)&unk_1000FED48);
}

unint64_t sub_100063F50()
{
  unint64_t result = qword_1000FE588;
  if (!qword_1000FE588)
  {
    sub_100063FAC(&qword_1000FE4B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000FE588);
  }
  return result;
}

uint64_t sub_100063FAC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100063FF4(void *a1)
{
  return sub_10005F164(a1);
}

void sub_100063FFC()
{
}

uint64_t sub_100064034()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100064084()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10005234C;
  return sub_10005D590((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_10006412C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10006413C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void *sub_10006417C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  int v5 = *(unsigned __int8 *)(v2 + 24);
  uint64_t v6 = *(void **)(v2 + 32);
  swift_beginAccess();
  if (*(unsigned char *)(v4 + 16))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 1;
    if (v5) {
      uint64_t v7 = 2;
    }
  }
  else
  {
    swift_beginAccess();
    *(unsigned char *)(v4 + 16) = 1;
    id v8 = v6;
    uint64_t v7 = 0;
  }
  *a2 = v7;
  return v6;
}

uint64_t sub_100064220(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100064230()
{
  return swift_release();
}

uint64_t sub_100064238()
{
  return type metadata accessor for RDSAPISwiftSpeechAnalyzer(0);
}

void sub_100064240()
{
  sub_1000C31B0();
  if (v0 <= 0x3F)
  {
    sub_1000C3070();
    if (v1 <= 0x3F)
    {
      sub_100064538(319, &qword_1000FE600, (uint64_t (*)(uint64_t))&type metadata accessor for TaskHint, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v2 <= 0x3F)
      {
        sub_1000C3290();
        if (v3 <= 0x3F)
        {
          sub_100064538(319, &qword_1000FE608, (uint64_t (*)(uint64_t))&type metadata accessor for AnalysisOptions, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
          if (v4 <= 0x3F)
          {
            sub_100064538(319, &qword_1000FE610, (uint64_t (*)(uint64_t))&type metadata accessor for AnalyzerInput, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream);
            if (v5 <= 0x3F)
            {
              sub_100064538(319, &qword_1000FE618, (uint64_t (*)(uint64_t))&type metadata accessor for AnalyzerInput, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream.Continuation);
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

void sub_100064538(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10006459C()
{
  return type metadata accessor for AudioStream(0);
}

void sub_1000645A4()
{
  sub_100064538(319, &qword_1000FE610, (uint64_t (*)(uint64_t))&type metadata accessor for AnalyzerInput, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream);
  if (v0 <= 0x3F)
  {
    sub_100064538(319, &qword_1000FE618, (uint64_t (*)(uint64_t))&type metadata accessor for AnalyzerInput, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream.Continuation);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1000646DC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100064728(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100063BB8(a1, a2);
  }
  return a1;
}

uint64_t sub_100064740()
{
  swift_unknownObjectRelease();

  sub_100063BB8(*(void *)(v0 + 40), *(void *)(v0 + 48));
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10006478C()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000647D4()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100064814()
{
  char v2 = *(unsigned char *)(v0 + 16);
  unint64_t v4 = *(void **)(v0 + 24);
  unint64_t v3 = *(void **)(v0 + 32);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10005234C;
  unint64_t v6 = (uint64_t (*)(char, void *, void *))((char *)&dword_1000FE740 + dword_1000FE740);
  return v6(v2, v4, v3);
}

uint64_t sub_1000648CC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  unint64_t v4 = (int *)v0[4];
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100064FA0;
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1000FE750 + dword_1000FE750);
  return v6(v2, v3, v4);
}

uint64_t sub_100064990(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100064FA0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1000FE760 + dword_1000FE760);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100064A5C()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100064A94(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100064FA0;
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000FE770 + dword_1000FE770);
  return v6(a1, v4);
}

uint64_t sub_100064B4C()
{
  _Block_release(*(const void **)(v0 + 24));
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100064B94()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100064FA0;
  unint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1000FE780 + dword_1000FE780);
  return v6(v2, v3, v4);
}

uint64_t sub_100064C50()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100064C90()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100064FA0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1000FE7A0 + dword_1000FE7A0);
  return v5(v2, v3);
}

uint64_t sub_100064D44()
{
  swift_unknownObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_100064D84()
{
  unint64_t result = qword_1000FE810;
  if (!qword_1000FE810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE810);
  }
  return result;
}

uint64_t sub_100064DD8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100064FA0;
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000FE358 + dword_1000FE358);
  return v6(a1, v4);
}

uint64_t sub_100064E90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100064ED8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000520F0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100064F3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000520F0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_100064FB8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(void *)(a1 + 16) | *(void *)(a2 + 16)) {
    operator new();
  }
  uint64_t v4 = sub_1000C15EC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "cmdp_edit_distance::editfst1 : EMPTY Symbol set", buf, 2u);
  }
  *a3 = 0;
}

void sub_100065240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_10002B9D0(&a22, 0);
  _Unwind_Resume(a1);
}

void sub_1000652BC(uint64_t a1@<X0>, void *a2@<X8>)
{
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = v3;
  sub_100064FB8(a1, (uint64_t)&v2, a2);
  sub_1000192EC((uint64_t)&v2, v3[0]);
}

void sub_100065304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void sub_10006531C(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    operator new();
  }
  uint64_t v3 = sub_1000C15EC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "cmdp_edit_distance::editfst2 : EMPTY Symbol set", buf, 2u);
  }
  *a2 = 0;
}

void sub_10006564C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_10002B9D0(&a22, 0);
  _Unwind_Resume(a1);
}

void sub_1000656CC(uint64_t a1@<X0>, void *a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  v3[1] = 0;
  uint64_t v4 = v5;
  uint64_t v2 = v3;
  v3[0] = 0;
  sub_10006531C(a1, a2);
  sub_1000192EC((uint64_t)&v2, v3[0]);
  sub_1000192EC((uint64_t)&v4, v5[0]);
}

void sub_100065730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, char a12, char *a13)
{
}

uint64_t sub_100065754@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100066208;
  block[3] = &unk_1000F07F8;
  void block[4] = a1;
  if (qword_1000FED60 != -1) {
    dispatch_once(&qword_1000FED60, block);
  }
  if (!qword_1000FED58)
  {
    id v43 = sub_1000C15EC();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = a1;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Unable to read synonyms FST for %s", __p, 0xCu);
    }
    operator new();
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)qword_1000FED58 + 72))(qword_1000FED58, 0);
  *a5 = v10;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 104))(v10);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
  uint64_t v18 = (void *)*a2;
  uint64_t v16 = a2 + 1;
  uint64_t v17 = v18;
  if (v18 != v16)
  {
    do
    {
      int v19 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 32))(v13, v17 + 4);
      int v20 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 32))(v15, v17 + 4);
      uint64_t v10 = *a5;
      *(_DWORD *)std::string __p = v19;
      *(_DWORD *)&__p[4] = v20;
      *(_DWORD *)&__p[8] = 0;
      int v46 = v11;
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v10 + 184))(v10, v11, __p);
      uint64_t v21 = (void *)v17[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v17[2];
          BOOL v23 = *v22 == (void)v17;
          uint64_t v17 = v22;
        }
        while (!v23);
      }
      uint64_t v17 = v22;
    }
    while (v22 != v16);
  }
  uint64_t v26 = (void *)*a3;
  uint64_t v24 = a3 + 1;
  uint64_t v25 = v26;
  if (v26 != v24)
  {
    do
    {
      int v27 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 32))(v13, v25 + 4);
      int v28 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 32))(v15, v25 + 4);
      uint64_t v10 = *a5;
      *(_DWORD *)std::string __p = v27;
      *(_DWORD *)&__p[4] = v28;
      *(_DWORD *)&__p[8] = 0;
      int v46 = v11;
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v10 + 184))(v10, v11, __p);
      uint64_t v29 = (void *)v25[1];
      if (v29)
      {
        do
        {
          uint64_t v30 = v29;
          uint64_t v29 = (void *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          uint64_t v30 = (void *)v25[2];
          BOOL v23 = *v30 == (void)v25;
          uint64_t v25 = v30;
        }
        while (!v23);
      }
      uint64_t v25 = v30;
    }
    while (v30 != v24);
  }
  uint64_t v33 = (void *)*a4;
  uint64_t v31 = a4 + 1;
  uint64_t v32 = v33;
  if (v33 != v31)
  {
    do
    {
      int v34 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 32))(v13, v32 + 4);
      int v35 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 32))(v15, v32 + 4);
      uint64_t v10 = *a5;
      *(_DWORD *)std::string __p = v34;
      *(_DWORD *)&__p[4] = v35;
      *(_DWORD *)&__p[8] = 0;
      int v46 = v11;
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v10 + 184))(v10, v11, __p);
      uint64_t v36 = (void *)v32[1];
      if (v36)
      {
        do
        {
          uint64_t v37 = v36;
          uint64_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          uint64_t v37 = (void *)v32[2];
          BOOL v23 = *v37 == (void)v32;
          uint64_t v32 = v37;
        }
        while (!v23);
      }
      uint64_t v32 = v37;
    }
    while (v37 != v31);
  }
  sub_100009CF0(__p, off_1000FE860);
  int v38 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v13 + 32))(v13, __p);
  if (v47 < 0) {
    operator delete(*(void **)__p);
  }
  sub_100009CF0(__p, off_1000FE860);
  int v39 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v15 + 32))(v15, __p);
  if (v47 < 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)std::string __p = v38;
  *(_DWORD *)&__p[4] = v39;
  *(_DWORD *)&__p[8] = 0;
  int v46 = v11;
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v10 + 184))(v10, v11, __p);
  sub_100009CF0(__p, off_1000FE858[0]);
  int v40 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v13 + 32))(v13, __p);
  if (v47 < 0) {
    operator delete(*(void **)__p);
  }
  sub_100009CF0(__p, off_1000FE858[0]);
  int v41 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v15 + 32))(v15, __p);
  if (v47 < 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)std::string __p = v40;
  *(_DWORD *)&__p[4] = v41;
  *(_DWORD *)&__p[8] = 0;
  int v46 = v11;
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v10 + 184))(v10, v11, __p);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 256))(v10, v13);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 264))(v10, v15);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  return (*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
}

void sub_1000660DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  sub_10002B9D0(&a16, 0);
  _Unwind_Resume(a1);
}

void sub_100066208(uint64_t a1)
{
  uint64_t v1 = *(const char **)(a1 + 32);
  MainBundle = CFBundleGetMainBundle();
  CFURLRef v3 = CFBundleCopyResourceURL(MainBundle, @"CommandProcessingResources.bundle", 0, 0);
  if (v3)
  {
    CFURLRef v4 = v3;
    uint64_t v5 = CFBundleCreate(kCFAllocatorDefault, v3);
    CFRelease(v4);
    CFStringRef v6 = CFStringCreateWithCString(0, v1, 0x8000100u);
    CFStringRef CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString(0, v6);
    CFRelease(v6);
    if (CFStringHasPrefix(CanonicalLocaleIdentifierFromString, @"en")) {
      CFStringRef v8 = @"en";
    }
    else {
      CFStringRef v8 = CanonicalLocaleIdentifierFromString;
    }
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, v8);
    CFStringAppend(MutableCopy, @"_");
    CFStringAppend(MutableCopy, @"synonym.fst");
    CFURLRef v12 = CFBundleCopyResourceURL(v5, MutableCopy, 0, 0);
    CFRelease(CanonicalLocaleIdentifierFromString);
    CFRelease(MutableCopy);
    CFRelease(v5);
    if (v12)
    {
      CFStringRef v13 = CFURLGetString(v12);
      CFMutableStringRef v14 = CFStringCreateMutableCopy(0, 0, v13);
      CFRelease(v12);
      v20.id location = 0;
      v20.size_t length = 7;
      CFStringDelete(v14, v20);
      sub_1000B4838(v14, 0, __p);
      CFRelease(v14);
      goto LABEL_13;
    }
    uint64_t v9 = sub_1000C15EC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v10 = "cmdp_edit_distance::synonymDictionary : Unable to access synonym URL";
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v9 = sub_1000C15EC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v10 = "cmdp_edit_distance::synonymDictionary : Unable to access resource URL";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
    }
  }
  sub_100009CF0(__p, "");
LABEL_13:
  unint64_t v15 = v18;
  if ((v18 & 0x80u) != 0) {
    unint64_t v15 = (unint64_t)__p[1];
  }
  if (v15)
  {
    qword_1000FED58 = sub_100066498((uint64_t)__p);
  }
  else
  {
    uint64_t v16 = sub_1000C15EC();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Empty synonym Plist FST", buf, 2u);
    }
  }
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100066474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100066498(uint64_t a1)
{
  if (sub_100066600(a1)) {
    operator new();
  }
  return 0;
}

void sub_100066514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100018BC0(a10);
  }
  operator delete();
}

void sub_10006654C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  v6[0] = 0;
  v6[1] = 0;
  v4[1] = 0;
  uint64_t v5 = v6;
  CFURLRef v3 = v4;
  v4[0] = 0;
  sub_100065754(a1, a2, &v5, &v3, a3);
  sub_1000192EC((uint64_t)&v3, v4[0]);
  sub_1000192EC((uint64_t)&v5, v6[0]);
}

void sub_1000665B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, char a12, char *a13)
{
}

float sub_1000665D4(int a1, int a2, int a3, float a4)
{
  return (float)(a4 - (float)(-100 * (a1 - a2))) / (float)(210 * (a1 - a3));
}

uint64_t sub_100066600(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (!v1)
  {
    sub_100009CF0(__p, "standard input");
    sub_1000C20A4(__dst);
    sub_100066AB4();
  }
  sub_1000668E4((void (__cdecl ***)(std::ifstream *__hidden))__dst);
  if ((*((unsigned char *)&__dst[4] + *((void *)__dst[0] - 3)) & 5) == 0)
  {
    sub_1000C20A4(__p);
    sub_100066AB4();
  }
  sub_100009CF0(__p, "ERROR");
  sub_10002D454(&v10, (uint64_t)__p);
  CFURLRef v3 = sub_10002D07C(&std::cerr, (uint64_t)"ExpandedFst::Read: Can't open file: ", 36);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  sub_10002D07C(v3, v5, v6);
  sub_10002D500(&v10);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return 0;
}

void sub_100066868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100066F38(&a24);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_1000668E4(void (__cdecl ***a1)(std::ifstream *__hidden this)))(std::ifstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  a1[1] = 0;
  int v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 2);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_100066A7C(_Unwind_Exception *a1)
{
}

void sub_100066AB4()
{
}

void sub_100066E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_10002F7F0((uint64_t)&a24);
  (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  _Unwind_Resume(a1);
}

void *sub_100066F38(void *a1)
{
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_100067004(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a3 + 24);
  if (v10)
  {
    *(_DWORD *)a5 = *(_DWORD *)v10;
    std::string::operator=((std::string *)(a5 + 8), (const std::string *)(v10 + 8));
    std::string::operator=((std::string *)(a5 + 32), (const std::string *)(v10 + 32));
    uint64_t v11 = *(void *)(v10 + 88);
    long long v12 = *(_OWORD *)(v10 + 72);
    *(_OWORD *)(a5 + 56) = *(_OWORD *)(v10 + 56);
    *(_OWORD *)(a5 + 72) = v12;
    *(void *)(a5 + 88) = v11;
  }
  else
  {
    int v13 = sub_1000C1718(a5, (uint64_t)a2, a3, 0);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
  }
  if (dword_1000FF640 >= 2)
  {
    sub_100009CF0(__p, "INFO");
    sub_10002D454(&v81, (uint64_t)__p);
    unint64_t v15 = sub_10002D07C(&std::cerr, (uint64_t)"FstImpl::ReadHeader: source: ", 29);
    int v16 = *(char *)(a3 + 23);
    uint64_t v17 = v16 >= 0 ? a3 : *(void *)a3;
    uint64_t v18 = v16 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(void *)(a3 + 8);
    int v19 = sub_10002D07C(v15, v17, v18);
    CFRange v20 = sub_10002D07C(v19, (uint64_t)", fst_type: ", 12);
    int v21 = *(char *)(a5 + 31);
    uint64_t v22 = v21 >= 0 ? a5 + 8 : *(void *)(a5 + 8);
    uint64_t v23 = v21 >= 0 ? *(unsigned __int8 *)(a5 + 31) : *(void *)(a5 + 16);
    uint64_t v24 = sub_10002D07C(v20, v22, v23);
    uint64_t v25 = sub_10002D07C(v24, (uint64_t)", arc_type: ", 12);
    uint64_t v26 = sub_10002F834();
    int v27 = *(char *)(v26 + 23);
    uint64_t v28 = v27 >= 0 ? v26 : *(void *)v26;
    uint64_t v29 = v27 >= 0 ? *(unsigned __int8 *)(v26 + 23) : *(void *)(v26 + 8);
    uint64_t v30 = sub_10002D07C(v25, v28, v29);
    sub_10002D07C(v30, (uint64_t)", version: ", 11);
    uint64_t v31 = (void *)std::ostream::operator<<();
    sub_10002D07C(v31, (uint64_t)", flags: ", 9);
    std::ostream::operator<<();
    sub_10002D500(&v81);
    if (v80 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v32 = *(unsigned __int8 *)(a5 + 31);
  if ((v32 & 0x80u) == 0) {
    uint64_t v33 = *(unsigned __int8 *)(a5 + 31);
  }
  else {
    uint64_t v33 = *(void *)(a5 + 16);
  }
  uint64_t v34 = *(unsigned __int8 *)(a1 + 39);
  int v35 = (char)v34;
  if ((v34 & 0x80u) != 0) {
    uint64_t v34 = *(void *)(a1 + 24);
  }
  if (v33 != v34) {
    goto LABEL_40;
  }
  uint64_t v36 = (const void **)(a5 + 8);
  if (v35 >= 0) {
    uint64_t v37 = (unsigned __int8 *)(a1 + 16);
  }
  else {
    uint64_t v37 = *(unsigned __int8 **)(a1 + 16);
  }
  if ((v32 & 0x80) != 0)
  {
    if (memcmp(*v36, v37, *(void *)(a5 + 16)))
    {
LABEL_40:
      sub_100009CF0(__p, "ERROR");
      sub_10002D454(&v81, (uint64_t)__p);
      int v38 = sub_10002D07C(&std::cerr, (uint64_t)"FstImpl::ReadHeader: FST not of type ", 37);
      int v39 = *(char *)(a1 + 39);
      if (v39 >= 0) {
        uint64_t v40 = a1 + 16;
      }
      else {
        uint64_t v40 = *(void *)(a1 + 16);
      }
      if (v39 >= 0) {
        uint64_t v41 = *(unsigned __int8 *)(a1 + 39);
      }
      else {
        uint64_t v41 = *(void *)(a1 + 24);
      }
      uint64_t v42 = sub_10002D07C(v38, v40, v41);
      id v43 = sub_10002D07C(v42, (uint64_t)": ", 2);
      int v44 = *(char *)(a3 + 23);
      if (v44 >= 0) {
        uint64_t v45 = a3;
      }
      else {
        uint64_t v45 = *(void *)a3;
      }
      if (v44 >= 0) {
        uint64_t v46 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v46 = *(void *)(a3 + 8);
      }
      goto LABEL_79;
    }
  }
  else if (*(unsigned char *)(a5 + 31))
  {
    while (*(unsigned __int8 *)v36 == *v37)
    {
      uint64_t v36 = (const void **)((char *)v36 + 1);
      ++v37;
      if (!--v32) {
        goto LABEL_52;
      }
    }
    goto LABEL_40;
  }
LABEL_52:
  uint64_t v47 = sub_10002F834();
  uint64_t v48 = *(unsigned __int8 *)(a5 + 55);
  if ((v48 & 0x80u) == 0) {
    uint64_t v49 = *(unsigned __int8 *)(a5 + 55);
  }
  else {
    uint64_t v49 = *(void *)(a5 + 40);
  }
  uint64_t v50 = *(unsigned __int8 *)(v47 + 23);
  int v51 = (char)v50;
  if ((v50 & 0x80u) != 0) {
    uint64_t v50 = *(void *)(v47 + 8);
  }
  if (v49 != v50) {
    goto LABEL_67;
  }
  id v52 = (const void **)(a5 + 32);
  if (v51 >= 0) {
    NSString v53 = (unsigned __int8 *)v47;
  }
  else {
    NSString v53 = *(unsigned __int8 **)v47;
  }
  if ((v48 & 0x80) != 0)
  {
    if (memcmp(*v52, v53, *(void *)(a5 + 40)))
    {
LABEL_67:
      sub_100009CF0(__p, "ERROR");
      sub_10002D454(&v81, (uint64_t)__p);
      uint64_t v54 = sub_10002D07C(&std::cerr, (uint64_t)"FstImpl::ReadHeader: Arc not of type ", 37);
      uint64_t v55 = sub_10002F834();
      int v56 = *(char *)(v55 + 23);
      if (v56 >= 0) {
        uint64_t v57 = v55;
      }
      else {
        uint64_t v57 = *(void *)v55;
      }
      if (v56 >= 0) {
        uint64_t v58 = *(unsigned __int8 *)(v55 + 23);
      }
      else {
        uint64_t v58 = *(void *)(v55 + 8);
      }
      uint64_t v59 = sub_10002D07C(v54, v57, v58);
      id v43 = sub_10002D07C(v59, (uint64_t)": ", 2);
      int v60 = *(char *)(a3 + 23);
      if (v60 >= 0) {
        uint64_t v45 = a3;
      }
      else {
        uint64_t v45 = *(void *)a3;
      }
      if (v60 >= 0) {
        uint64_t v46 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v46 = *(void *)(a3 + 8);
      }
      goto LABEL_79;
    }
  }
  else if (*(unsigned char *)(a5 + 55))
  {
    while (*(unsigned __int8 *)v52 == *v53)
    {
      id v52 = (const void **)((char *)v52 + 1);
      ++v53;
      if (!--v48) {
        goto LABEL_83;
      }
    }
    goto LABEL_67;
  }
LABEL_83:
  if (*(_DWORD *)(a5 + 56) < a4)
  {
    sub_100009CF0(__p, "ERROR");
    sub_10002D454(&v81, (uint64_t)__p);
    unsigned int v61 = sub_10002D07C(&std::cerr, (uint64_t)"FstImpl::ReadHeader: Obsolete ", 30);
    int v62 = *(char *)(a1 + 39);
    if (v62 >= 0) {
      uint64_t v63 = a1 + 16;
    }
    else {
      uint64_t v63 = *(void *)(a1 + 16);
    }
    if (v62 >= 0) {
      uint64_t v64 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v64 = *(void *)(a1 + 24);
    }
    uint64_t v65 = sub_10002D07C(v61, v63, v64);
    id v43 = sub_10002D07C(v65, (uint64_t)" FST version: ", 14);
    int v66 = *(char *)(a3 + 23);
    if (v66 >= 0) {
      uint64_t v45 = a3;
    }
    else {
      uint64_t v45 = *(void *)a3;
    }
    if (v66 >= 0) {
      uint64_t v46 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v46 = *(void *)(a3 + 8);
    }
LABEL_79:
    sub_10002D07C(v43, v45, v46);
    sub_10002D500(&v81);
    if (v80 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  *(void *)(a1 + 8) = *(void *)(a5 + 64);
  if (*(unsigned char *)(a5 + 60))
  {
    uint64_t v67 = sub_100067684(a2, (const std::string *)a3);
    uint64_t v68 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v67;
    if (v68) {
      (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
    }
  }
  if (!*(unsigned char *)(a3 + 52))
  {
    uint64_t v69 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v69) {
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v69 + 8))(v69, v53);
    }
  }
  if ((*(unsigned char *)(a5 + 60) & 2) != 0)
  {
    uint64_t v70 = sub_100067684(a2, (const std::string *)a3);
    uint64_t v71 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v70;
    if (v71) {
      (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
    }
  }
  if (!*(unsigned char *)(a3 + 53))
  {
    uint64_t v72 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v72) {
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v72 + 8))(v72, v53);
    }
  }
  uint64_t v73 = *(void *)(a3 + 32);
  if (v73)
  {
    uint64_t v74 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v73 + 16))(v73, v53);
    uint64_t v75 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v74;
    if (v75) {
      (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
    }
  }
  uint64_t v76 = *(void *)(a3 + 40);
  if (v76)
  {
    uint64_t v77 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v76 + 16))(v76, v53);
    uint64_t v78 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v77;
    if (v78) {
      (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
    }
  }
  return 1;
}

void sub_100067640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100067684(void *a1, const std::string *a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v6 = 0u;
  std::string::operator=((std::string *)&__p[1], a2);
  uint64_t v3 = sub_1000677AC(a1);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[1]);
  }
  return v3;
}

void sub_1000676F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10006770C(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_100009DA4();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    CFStringRef v8 = operator new(v6 + 1);
    v5[1] = a3;
    _OWORD v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_1000677AC(void *a1)
{
  if (sub_1000BB8EC(a1)) {
    operator new();
  }
  return 0;
}

void sub_100067820()
{
}

uint64_t sub_100067844(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100067888(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000678FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100067A7C((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_100067918(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100067950(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_1000679DC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100067998(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000679DC(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 216));
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  sub_10001B844(a1 + 136, *(void **)(a1 + 144));
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  uint64_t v5 = (void **)(a1 + 48);
  sub_10002179C(&v5);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100067A7C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1000679DC(result);
    operator delete();
  }
  return result;
}

void sub_100067ACC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100067B34(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10006A418(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100067B50(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100067B88(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100067BB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_100067BFC(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100067C8C(a1, &v5);
  if (v6) {
    sub_100018BC0(v6);
  }
  *a1 = off_1000F09A8;
  return a1;
}

void sub_100067C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100018BC0(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100067C8C(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[1] = v4;
  a1[2] = v3;
  *a1 = off_1000F0BF8;
  if (v3) {
    sub_100018BC0(v3);
  }
  *a1 = off_1000F0AD0;
  return a1;
}

uint64_t sub_100067D0C()
{
  return 0;
}

unint64_t sub_100067D14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (byte_1000FF646)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
    unint64_t v7 = sub_100067EB8(a1, a2, a3, 0);
    if (!sub_10002D5E4(v6, v7))
    {
      if (byte_1000FE8F0) {
        sub_100009CF0(__p, "FATAL");
      }
      else {
        sub_100009CF0(__p, "ERROR");
      }
      sub_10002D454(&v12, (uint64_t)__p);
      char v9 = sub_10002D07C(&std::cerr, (uint64_t)"TestProperties: stored FST properties incorrect", 47);
      sub_10002D07C(v9, (uint64_t)" (stored: props1, computed: props2)", 35);
      sub_10002D500(&v12);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return sub_100067EB8(a1, a2, a3, 1);
  }
}

void sub_100067E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100067EB8(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (a4)
  {
    uint64_t v10 = v8 & 0xFFFFFFFF0000 | (2 * v8) & 0xAAAAAAAA0000 | (v8 >> 1) & 0x555555550000 | 7;
    if ((a2 & ~v10) == 0)
    {
      if (a3) {
        *a3 = v10;
      }
      return v9;
    }
  }
  unint64_t v9 = v8 & 7;
  uint64_t v45 = 0;
  unint64_t v46 = v9;
  id v43 = 0;
  int v44 = 0;
  uint64_t v11 = a2 & 0xCF3C00000000;
  if ((a2 & 0xCF3C00000000) != 0)
  {
    long long v38 = (unint64_t)&v43;
    *(void *)&long long v39 = 0;
    *((void *)&v39 + 1) = &v46;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_100068854(a1, (uint64_t)&v38);
  }
  if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
    goto LABEL_92;
  }
  uint64_t v32 = a2 & 0xC0000;
  uint64_t v33 = 0;
  uint64_t v12 = 0x10425A810000;
  if ((a2 & 0xC0000) != 0) {
    uint64_t v12 = 0x10425A850000;
  }
  unint64_t v13 = v9 | v12;
  uint64_t v31 = a2 & 0x300000;
  if ((a2 & 0x300000) != 0) {
    v13 |= 0x100000uLL;
  }
  unint64_t v46 = v13;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  int v34 = 0;
  unsigned int v35 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v33);
  int v14 = 0;
LABEL_13:
  if (!v33)
  {
    if ((int)v35 >= v34) {
      goto LABEL_84;
    }
    goto LABEL_18;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v33 + 16))(v33))
  {
    if (v33)
    {
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v33 + 24))();
LABEL_19:
      if (v32) {
        operator new();
      }
      if (v31) {
        operator new();
      }
      unint64_t v40 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v15, &v38);
      char v16 = 1;
      while ((void)v38)
      {
        if ((*(unsigned int (**)(void))(*(void *)v38 + 16))(v38))
        {
          if ((void)v38)
          {
            (*(void (**)(void))(*(void *)v38 + 8))();
            goto LABEL_71;
          }
LABEL_69:
          if (*((void *)&v39 + 1)) {
            --**((_DWORD **)&v39 + 1);
          }
LABEL_71:
          if (v14 > 0) {
            unint64_t v46 = v46 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v47, a1, v15);
          int v27 = sub_10002D8A8();
          LODWORD(v38) = v47;
          HIDWORD(v47) = 0;
          HIDWORD(v47) = *v27;
          if (*(float *)&v47 == *((float *)&v47 + 1))
          {
            if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 32))(a1, v15, *(float *)&v47) != 1) {
              unint64_t v46 = v46 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
            }
          }
          else
          {
            uint64_t v28 = sub_10002D854();
            LODWORD(v38) = v47;
            HIDWORD(v47) = 0;
            HIDWORD(v47) = *v28;
            v29.n128_u32[0] = v47;
            if (*(float *)&v47 != *((float *)&v47 + 1)) {
              unint64_t v46 = v46 & 0xFFFFFFFCFFFFFFFFLL | (unint64_t)&_mh_execute_header;
            }
            ++v14;
          }
          if (v33) {
            (*(void (**)(uint64_t, __n128))(*(void *)v33 + 32))(v33, v29);
          }
          else {
            ++v35;
          }
          goto LABEL_13;
        }
        if (!(void)v38) {
          goto LABEL_29;
        }
        uint64_t v17 = (int *)(*(uint64_t (**)(void))(*(void *)v38 + 24))();
LABEL_30:
        if (v37 && sub_10006941C(v37, v17)) {
          unint64_t v46 = v46 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
        }
        if (v36 && sub_10006941C(v36, v17 + 1)) {
          unint64_t v46 = v46 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
        }
        int v18 = *v17;
        int v19 = *v17;
        if (*v17 != v17[1])
        {
          unint64_t v46 = v46 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
          int v19 = v17[1];
        }
        if (v18 | v19)
        {
          if (v18)
          {
            if (!v19) {
              goto LABEL_46;
            }
            goto LABEL_42;
          }
          unint64_t v20 = v46;
        }
        else
        {
          unint64_t v20 = v46 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
        }
        unint64_t v46 = v20 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
        if (!v19)
        {
LABEL_46:
          unint64_t v46 = v46 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if (v16) {
            goto LABEL_51;
          }
          goto LABEL_47;
        }
LABEL_42:
        if (v16) {
          goto LABEL_51;
        }
LABEL_47:
        if (v18 < (int)v11) {
          unint64_t v46 = v46 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
        }
        if (v19 < SHIDWORD(v11)) {
          unint64_t v46 = v46 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
        }
LABEL_51:
        int v21 = sub_10002D854();
        HIDWORD(v47) = 0;
        HIDWORD(v47) = v17[2];
        LODWORD(v47) = 0;
        LODWORD(v47) = *v21;
        v22.n128_u32[0] = HIDWORD(v47);
        if (*((float *)&v47 + 1) != *(float *)&v47)
        {
          uint64_t v23 = sub_10002D8A8();
          HIDWORD(v47) = 0;
          HIDWORD(v47) = v17[2];
          LODWORD(v47) = 0;
          LODWORD(v47) = *v23;
          v22.n128_u32[0] = HIDWORD(v47);
          if (*((float *)&v47 + 1) != *(float *)&v47)
          {
            unint64_t v24 = v46;
            unint64_t v25 = v46 & 0xFFFFFFFCFFFFFFFFLL | (unint64_t)&_mh_execute_header;
            unint64_t v46 = v25;
            if ((v24 & 0x800000000000) != 0 && v43[(int)v15] == v43[v17[3]]) {
              unint64_t v46 = v25 & 0xFFFF3FFDFFFFFFFFLL | 0x400000000000;
            }
          }
        }
        int v26 = v17[3];
        if (v26 <= (int)v15) {
          unint64_t v46 = v46 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
        }
        if (v26 != v15 + 1) {
          unint64_t v46 = v46 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
        }
        uint64_t v11 = *(void *)v17;
        if (v37) {
          sub_1000694D0((uint64_t)v37, v17, v17);
        }
        if (v36) {
          sub_1000694D0((uint64_t)v36, v17 + 1, v17 + 1);
        }
        if ((void)v38)
        {
          (*(void (**)(void, __n128))(*(void *)v38 + 32))(v38, v22);
          char v16 = 0;
        }
        else
        {
          char v16 = 0;
          ++v40;
        }
      }
      if (v40 >= (unint64_t)v39) {
        goto LABEL_69;
      }
LABEL_29:
      uint64_t v17 = (int *)(*((void *)&v38 + 1) + 16 * v40);
      goto LABEL_30;
    }
LABEL_18:
    uint64_t v15 = v35;
    goto LABEL_19;
  }
  if (v33) {
    (*(void (**)(void))(*(void *)v33 + 8))();
  }
LABEL_84:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != -1
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    unint64_t v46 = v46 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
  }
  if (v36)
  {
    sub_10001B7F8((uint64_t)v36);
    operator delete();
  }
  if (v37)
  {
    sub_10001B7F8((uint64_t)v37);
    operator delete();
  }
  unint64_t v9 = v46;
LABEL_92:
  if (a3) {
    *a3 = v9 & 0xFFFFFFFF0000 | (2 * v9) & 0xAAAAAAAA0000 | (v9 >> 1) & 0x555555550000 | 7;
  }
  if (v43)
  {
    int v44 = v43;
    operator delete(v43);
  }
  return v9;
}

void sub_100068770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  sub_10002D804((uint64_t *)va, 0);
  sub_10002D804((uint64_t *)va1, 0);
  unint64_t v9 = *(void **)(v7 - 128);
  if (v9)
  {
    *(void *)(v7 - 120) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_100068854(uint64_t a1, uint64_t a2)
{
}

void sub_100069118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  sub_10002E6EC(&a23);
  sub_10002F120(&a27);
  __n128 v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000691D0(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 136);
    return v2(a1);
  }
  uint64_t v5 = 0;
  int v6 = 0;
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_100069360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1000C2C3C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100069378(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  sub_10002EF50(&v16, &v14, &v12, (uint64_t)&v11);
}

uint64_t *sub_10006941C(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *sub_1000694D0(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100018F74(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1000696D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000696EC(void *a1, void *a2, uint64_t a3)
{
  long long v33 = 0u;
  long long v34 = 0u;
  *(_OWORD *)uint64_t v31 = 0u;
  *(_OWORD *)uint64_t v32 = 0u;
  uint64_t v6 = -1;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = -1;
  uint64_t v35 = (*(int (**)(void *))(*a1 + 16))(a1);
  uint64_t v36 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 56))(a1, 1, 0)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(unsigned char *)(a3 + 28) == 0;
  }
  if (!v7)
  {
    uint64_t v6 = 0;
LABEL_6:
    int v8 = 0;
    uint64_t v36 = (int)sub_1000691D0((uint64_t)a1);
    goto LABEL_9;
  }
  int v9 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v9[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v9 + 5) + 32))(__p);
    uint64_t v6 = v39;
    if (v39 != -1) {
      goto LABEL_6;
    }
  }
  int v8 = 1;
LABEL_9:
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 56))(a1, 0xFFFFFFFF0004, 0);
  sub_100009CF0(__p, "vector");
  uint64_t v11 = v10 | 3;
  sub_10002F1C8((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v11, (uint64_t)&v30 + 4);
  uint64_t v29 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v12 = *(void *)(a1[1] + 64) - *(void *)(a1[1] + 56);
  unint64_t v13 = v12 >> 3;
  if ((int)(v12 >> 3) < 1)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = (v12 >> 3);
    do
    {
      (*(void (**)(void **__return_ptr, void *, uint64_t))(*a1 + 24))(&v30, a1, v14);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = v30;
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, v14);
      std::ostream::write();
      uint64_t v16 = *(void *)(*(void *)(a1[1] + 56) + 8 * v14);
      uint64_t v17 = *(void *)(v16 + 24);
      uint64_t v18 = *(void *)(v16 + 32);
      if (v17 == v18) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = *(void *)(v16 + 24);
      }
      if (v17 != v18)
      {
        unint64_t v20 = (v18 - v17) >> 4;
        if (v20 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = v20;
        }
        __n128 v22 = (_DWORD *)(v19 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v22 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v22 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v22;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v22[1];
          std::ostream::write();
          v22 += 4;
          --v21;
        }
        while (v21);
      }
      ++v14;
    }
    while (v14 != v15);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    sub_100009CF0(__p, "ERROR");
    sub_10002D454((BOOL *)&v30, (uint64_t)__p);
    uint64_t v23 = sub_10002D07C(&std::cerr, (uint64_t)"VectorFst::Write: Write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    sub_10002D07C(v23, v25, v26);
LABEL_33:
    sub_10002D500(&v30);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v27 = 0;
    goto LABEL_36;
  }
  if (!v8)
  {
    if (v36 == v13)
    {
      uint64_t v27 = 1;
      goto LABEL_36;
    }
    sub_100009CF0(__p, "ERROR");
    sub_10002D454((BOOL *)&v30, (uint64_t)__p);
    sub_10002D07C(&std::cerr, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_33;
  }
  uint64_t v36 = v13;
  sub_100009CF0(__p, "vector");
  uint64_t v27 = sub_10002F3F0((uint64_t)a1, a2, a3, 2, __p, v11, (uint64_t)&v30 + 4, v29);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_36:
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[1]);
  }
  if (SHIBYTE(v32[0]) < 0) {
    operator delete(v31[0]);
  }
  return v27;
}

void sub_100069BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_10002F7F0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_100069C34(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000F0888;
  *(void *)(a1 + 8) = 0;
  uint8x8_t v4 = (std::string *)(a1 + 16);
  sub_100009CF0((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v5 = (void *)(a1 + 56);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  *(void *)a1 = off_1000F0828;
  sub_100009CF0(__p, "vector");
  std::string::operator=(v4, (const std::string *)__p);
  if (SBYTE7(v14) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  sub_100030234(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  sub_1000302D4(a1, v7);
  *(_DWORD *)(a1 + 80) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 1, 0))
  {
    int v8 = sub_1000691D0(a2);
    sub_1000306A4((void **)(a1 + 56), v8);
  }
  uint64_t v17 = 0;
  int v18 = 0;
  unsigned int v19 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 112))(a2, &v17);
  while (1)
  {
    if (!v17)
    {
      if ((int)v19 >= v18) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v19;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 16))(v17)) {
      break;
    }
    if (!v17) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v17 + 24))();
LABEL_12:
    sub_100030374((void *)a1);
    (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 24))(&v16, a2, v9);
    **(_DWORD **)(*v5 + 8 * (int)v9) = v16;
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
    sub_10003074C((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 24), v10);
    unint64_t v15 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v14 = 0u;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 120))(a2, v9, __p);
    while (1)
    {
      if (!__p[0])
      {
        if (v15 >= (unint64_t)v14) {
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v11 = (char *)__p[1] + 16 * v15;
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 16))(__p[0])) {
        break;
      }
      if (!__p[0]) {
        goto LABEL_18;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p[0] + 24))();
LABEL_19:
      sub_1000308AC(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 32))(__p[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p[0])
    {
      (*(void (**)(void))(*(void *)__p[0] + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (*((void *)&v14 + 1)) {
      --**((_DWORD **)&v14 + 1);
    }
LABEL_26:
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 32))(v17);
    }
    else {
      ++v19;
    }
  }
  if (v17) {
    (*(void (**)(void))(*(void *)v17 + 8))();
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0xFFFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_10006A11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  sub_10003048C(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_10006A1DC(unint64_t a1, float *a2, float *a3)
{
  if (*a2 != *(float *)sub_10002D8A8() && *a2 != *(float *)sub_10002D854()) {
    a1 &= ~0x100000000uLL;
  }
  if (*a3 != *(float *)sub_10002D8A8() && *a3 != *(float *)sub_10002D854()) {
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | (unint64_t)&_mh_execute_header;
  }
  return a1 & 0xC3FFFFFF0007;
}

uint64_t sub_10006A2E0(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v6 = *a3;
  int v7 = *((_DWORD *)a3 + 1);
  unint64_t v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v7) {
    unint64_t v8 = a1;
  }
  unint64_t v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7) {
    unint64_t v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (v6 == 0.0) {
    unint64_t v8 = v9;
  }
  if (v7) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (a4)
  {
    if (*a4 <= SLODWORD(v6)) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (a4[1] > v7) {
      unint64_t v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
    else {
      unint64_t v10 = v11;
    }
  }
  if (a3[2] != *(float *)sub_10002D8A8() && a3[2] != *(float *)sub_10002D854()) {
    unint64_t v10 = v10 & 0xFFFFFFFCFFFFFFFFLL | (unint64_t)&_mh_execute_header;
  }
  if (*((_DWORD *)a3 + 3) <= a2) {
    unint64_t v12 = v10 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  else {
    unint64_t v12 = v10;
  }
  if ((v12 & 0x4000000000) != 0) {
    return v12 & 0x45D7FFEB0007 | 0x2800000000;
  }
  else {
    return v12 & 0x45D7FFEB0007;
  }
}

uint64_t sub_10006A418(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_10006A43C(unsigned char *a1, char a2)
{
  *a1 = a2;
  operator new();
}

void sub_10006A67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = v14[4];
  v14[4] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = v14[3];
  std::locale v14[3] = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = v14[2];
  v14[2] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v14[1];
  v14[1] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006A828()
{
}

void sub_10006A84C(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  operator new();
}

void sub_10006A9F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[3];
  v1[3] = 0;
  if (v3) {
    sub_1000B44F0(v3);
  }
  uint64_t v4 = v1[2];
  v1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v1[1];
  v1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006AA80(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_10006AB48(*(void *)(a1 + 8), *(void *)(a2 + 8));
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(v4 + 8);
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = *(std::__shared_weak_count **)(v5 + 16);
    *(void *)(v5 + 8) = v7;
    *(void *)(v5 + 16) = v6;
    if (v8) {
      sub_100018BC0(v8);
    }
    uint64_t v9 = *(void *)(a2 + 24);
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v13 = *(std::__shared_weak_count **)(v10 + 16);
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 16) = v11;
    if (v13) {
      sub_100018BC0(v13);
    }
    uint64_t v14 = *(void *)(a2 + 32);
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(v14 + 8);
    uint64_t v16 = *(void *)(v14 + 16);
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(std::__shared_weak_count **)(v15 + 16);
    *(void *)(v15 + 8) = v17;
    *(void *)(v15 + 16) = v16;
    if (v18) {
      sub_100018BC0(v18);
    }
    *(unsigned char *)a1 = *(unsigned char *)a2;
  }
  return a1;
}

uint64_t sub_10006AB48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v5) {
    sub_100018BC0(v5);
  }
  if (v4) {
    sub_100018BC0(v4);
  }
  return a1;
}

void sub_10006ABA0(uint64_t a1, int __val)
{
  std::to_string(&v4, __val);
  uint64_t v3 = (*(uint64_t (**)(void, std::string *))(**(void **)(a1 + 32) + 80))(*(void *)(a1 + 32), &v4);
  if (v3 == -1)
  {
    uint64_t v3 = (*(int (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8));
    (*(void (**)(void, std::string *, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), &v4, v3);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), v3);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_10006ACA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006ACC0(uint64_t a1, int __val, double a3)
{
  std::to_string(&v9, __val);
  uint64_t v5 = (*(uint64_t (**)(void, std::string *))(**(void **)(a1 + 32) + 80))(*(void *)(a1 + 32), &v9);
  if (v5 == -1)
  {
    uint64_t v5 = (*(int (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8));
    (*(void (**)(void, std::string *, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), &v9, v5);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  float v7 = a3;
  float v8 = v7;
  (*(void (**)(uint64_t, uint64_t, float *))(*(void *)v6 + 160))(v6, v5, &v8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_10006ADDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006ADF8(uint64_t a1)
{
  (*(void (**)(void, void))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), *(void *)(a1 + 16));
  int8x8_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 264);
  return v2();
}

void sub_10006AEAC(uint64_t a1, int __val, int a3, uint64_t a4, uint64_t a5, double a6)
{
  std::to_string(&v20, __val);
  uint64_t v11 = (*(uint64_t (**)(void, std::string *))(**(void **)(a1 + 32) + 80))(*(void *)(a1 + 32), &v20);
  if (v11 == -1)
  {
    uint64_t v11 = (*(int (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8));
    (*(void (**)(void, std::string *, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), &v20, v11);
  }
  std::to_string(&v19, a3);
  uint64_t v12 = (*(uint64_t (**)(void, std::string *))(**(void **)(a1 + 32) + 80))(*(void *)(a1 + 32), &v19);
  LODWORD(v13) = v12;
  if (v12 == -1)
  {
    uint64_t v13 = (*(int (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8));
    (*(void (**)(void, std::string *, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), &v19, v13);
  }
  int v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a4);
  int v15 = v14;
  if (*(unsigned char *)a1) {
    int v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a5);
  }
  uint64_t v16 = *(void *)(a1 + 8);
  float v17 = a6;
  v18[0] = v15;
  v18[1] = v14;
  *(float *)&v18[2] = v17;
  v18[3] = v13;
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v16 + 184))(v16, v11, v18);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_10006B104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006B148(uint64_t a1, int a2, int a3, int __val, uint64_t a5, double a6)
{
  std::to_string(&v11, __val);
  sub_10006AEAC(a1, a2, a3, (uint64_t)&v11, a5, a6);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_10006B1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006B1E4(uint64_t a1, int a2, int a3, uint64_t a4, int __val, double a6)
{
  std::to_string(&v11, __val);
  sub_10006AEAC(a1, a2, a3, a4, (uint64_t)&v11, a6);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_10006B264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006B280(uint64_t a1, int a2, int a3, int __val, int a5, double a6)
{
  std::to_string(&v12, __val);
  std::to_string(&__p, a5);
  sub_10006AEAC(a1, a2, a3, (uint64_t)&v12, (uint64_t)&__p, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_10006B31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006B350(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 208))();
}

void sub_10006B378()
{
}

void sub_10006BF00(_Unwind_Exception *a1)
{
}

void (__cdecl ***sub_10006C004(void (__cdecl ***a1)(std::istringstream *__hidden this), const std::string *a2, int a3))(std::istringstream *__hidden this)
{
  uint64_t v6 = (uint64_t)(a1 + 2);
  *a1 = v8;
  *(void *)((char *)*(v8 - 3) + (void)a1) = v7;
  a1[1] = 0;
  std::string v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  sub_1000700A0(v6, a2, a3 | 8);
  return a1;
}

void sub_10006C160(_Unwind_Exception *a1)
{
}

uint64_t *sub_10006C188(uint64_t *a1, uint64_t a2)
{
  std::istream::sentry::sentry();
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  float v7 = std::locale::use_facet(&v19, &std::ctype<char>::id);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  std::string v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    std::string v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    std::string v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    int v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      std::locale v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + ++*(void *)(result + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_10006C3A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x10006C364);
  }
  __cxa_rethrow();
}

void sub_10006C444(_Unwind_Exception *a1)
{
}

uint64_t sub_10006C458(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

void sub_10006C55C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1 && a2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 72))(a1, 0);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 72))(a2, 0);
    char v9 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 104))(v5);
    (*(void (**)(uint64_t))(*(void *)v6 + 96))(v6);
    sub_1000B8948();
  }
  float v7 = sub_1000C15EC();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "cmdp_fst_util::composeFst : null FSTs", (uint8_t *)&__p, 2u);
  }
  *a3 = 0;
}

void sub_10006C9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v19 = 0;
  (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

void sub_10006CB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  sub_100070254(a1, v6, a2, 1, v7, a3, 1);
}

void sub_10006CC24(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = (uint64_t)&v4;
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  sub_1000716E8(a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_10006CC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006CC90(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = (uint64_t)&v4;
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  sub_100072CF0(a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_10006CCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006CCFC(uint64_t a1)
{
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  uint64_t v4 = 0;
  v1[0] = 0;
  v1[1] = v6;
  uint64_t v1[2] = v5;
  v1[3] = &v4;
  long long v2 = 0u;
  long long v3 = 0u;
  sub_100068854(a1, (uint64_t)v1);
}

void sub_10006CF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  sub_10002D794(&a13);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v27 = *(void **)(v25 - 104);
  if (v27) {
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

void sub_10006CFC0(uint64_t a1, void *a2)
{
  char v4 = 0;
  if (*a2 != a2[1])
  {
    uint64_t v3 = *(void *)(*a2 + 24);
    (*(void (**)(uint64_t))(*(void *)v3 + 96))(v3);
    (*(void (**)(uint64_t))(*(void *)v3 + 104))(v3);
    sub_1000B8948();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  sub_1000B8948();
}

void sub_10006D4C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
}

uint64_t sub_10006D608(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_10002D8A8();
    sub_10006D6F4(v1);
  }
  return result;
}

uint64_t sub_10006D660(uint64_t result)
{
  if (!result)
  {
    int v3 = 1;
    sub_100091734(&v3, &v1);
    char v2 = 0;
    sub_10002D8A8();
    sub_10006D6F4(0);
  }
  return result;
}

void sub_10006D6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100018BC0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006D6F4(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_1000928F8((uint64_t)v1, a1);
}

void sub_10006D7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000A8084((uint64_t)va);
  uint64_t v7 = *(void **)(v5 - 88);
  if (v7)
  {
    *(void *)(v5 - 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void sub_10006D7D8(uint64_t a1, uint64_t a2)
{
}

void sub_10006D9DC()
{
}

void sub_10006DAC0(uint64_t a1)
{
  if (*(void *)(a1 + 8) - *(void *)a1 <= 0xFuLL)
  {
    uint64_t v2 = sub_1000C15EC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "cmdp_fst_util::unionFst : Need more than 1 FST for union. Returning 1st FST", buf, 2u);
    }
    if (*(void *)(a1 + 8) != *(void *)a1) {
      operator new();
    }
    sub_10001AC58();
  }
  sub_10006D7D8(**(void **)a1, *(void *)(*(void *)a1 + 8));
}

void sub_10006DC64(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = 0;
  if (v2) {
    sub_1000C2C18(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006DC80(uint64_t a1, int a2)
{
  if (a2) {
    sub_10006CC90(a1);
  }
  else {
    sub_10006CC24(a1);
  }
}

uint64_t sub_10006DC8C(void *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  std::string __p = 0;
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  sub_10006DD20(a1, v2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_10006DD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006DD20(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2 != -1)
  {
    uint64_t v6 = *(__int32 **)(a3 + 8);
    uint64_t v7 = wmemchr(*(__int32 **)a3, a2, ((uint64_t)v6 - *(void *)a3) >> 2);
    uint64_t v8 = v7 ? v7 : v6;
    char v9 = *(__int32 **)(a3 + 8);
    if (v8 == v9)
    {
      unint64_t v10 = *(void *)(a3 + 16);
      if ((unint64_t)v8 >= v10)
      {
        std::string v12 = *(__int32 **)a3;
        uint64_t v13 = ((uint64_t)v9 - *(void *)a3) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v15 = v10 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          uint64_t v17 = (char *)sub_10002EE10(a3 + 16, v16);
          std::string v12 = *(__int32 **)a3;
          uint64_t v8 = *(__int32 **)(a3 + 8);
        }
        else
        {
          uint64_t v17 = 0;
        }
        uint64_t v18 = &v17[4 * v13];
        std::locale v19 = &v17[4 * v16];
        *(_DWORD *)uint64_t v18 = a2;
        uint64_t v11 = v18 + 4;
        while (v8 != v12)
        {
          int v20 = *--v8;
          *((_DWORD *)v18 - 1) = v20;
          v18 -= 4;
        }
        *(void *)a3 = v18;
        *(void *)(a3 + 8) = v11;
        *(void *)(a3 + 16) = v19;
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *uint64_t v8 = a2;
        uint64_t v11 = v8 + 1;
      }
      *(void *)(a3 + 8) = v11;
      (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a1 + 24))(&v44, a1, a2);
      uint64_t v21 = sub_10002D8A8();
      HIDWORD(v44) = 0;
      HIDWORD(v44) = *v21;
      if (*(float *)&v44 == *((float *)&v44 + 1))
      {
        (*(void (**)(void *, float))(*a1 + 104))(a1, *(float *)&v44);
        (*(void (**)(void *))(*a1 + 96))(a1);
        std::string __p = 0;
        long long v42 = 0;
        id v43 = 0;
        uint64_t v22 = *(void *)(*(void *)(a1[1] + 56) + 8 * (int)a2);
        uint64_t v23 = *(void *)(v22 + 24);
        uint64_t v24 = *(void *)(v22 + 32);
        uint64_t v25 = v23 == v24 ? 0 : v23;
        if (v23 != v24)
        {
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          unint64_t v28 = (v24 - v23) >> 4;
          if (v28 <= 1) {
            uint64_t v29 = 1;
          }
          else {
            uint64_t v29 = v28;
          }
          do
          {
            uint64_t v30 = (_DWORD *)(v25 + 16 * v27 + 12);
            if (v26 >= v43)
            {
              uint64_t v31 = __p;
              uint64_t v32 = (v26 - __p) >> 2;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62) {
                sub_100019424();
              }
              uint64_t v34 = v43 - __p;
              if ((v43 - __p) >> 1 > v33) {
                unint64_t v33 = v34 >> 1;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                uint64_t v36 = (char *)sub_10002EE10((uint64_t)&v43, v35);
                uint64_t v31 = __p;
                uint64_t v26 = v42;
              }
              else
              {
                uint64_t v36 = 0;
              }
              uint64_t v37 = &v36[4 * v32];
              *(_DWORD *)uint64_t v37 = *v30;
              long long v38 = v37 + 4;
              while (v26 != v31)
              {
                int v39 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *((_DWORD *)v37 - 1) = v39;
                v37 -= 4;
              }
              std::string __p = v37;
              id v43 = &v36[4 * v35];
              if (v31) {
                operator delete(v31);
              }
              uint64_t v26 = v38;
            }
            else
            {
              *(_DWORD *)uint64_t v26 = *v30;
              v26 += 4;
            }
            long long v42 = v26;
            ++v27;
          }
          while (v27 != v29);
          unint64_t v40 = __p;
          if (__p == v26) {
            goto LABEL_52;
          }
          do
          {
            sub_10006DD20(a1, *(unsigned int *)v40, a3);
            v40 += 4;
          }
          while (v40 != v26);
          uint64_t v26 = __p;
          if (__p) {
LABEL_52:
          }
            operator delete(v26);
        }
      }
    }
  }
}

void sub_10006E048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006E06C(void *a1)
{
  *(void *)&v10[(void)*(v9 - 3) - 8] = v2;
  uint64_t v3 = (std::ios_base *)&v10[(void)*(v9 - 3) - 8];
  std::ios_base::init(v3, v10);
  v3[1].__vftable = 0;
  v3[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  std::ofstream::open();
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::string __p = 0;
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  sub_10006E380(a1, v4, (uint64_t)&__p, (uint64_t)&v9);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v10[(void)*(v9 - 3) - 8], *(_DWORD *)&v10[(void)*(v9 - 3) + 24] | 4);
  }
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10006E330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void sub_10006E380(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == -1) {
    return;
  }
  uint64_t v8 = *(__int32 **)(a3 + 8);
  char v9 = wmemchr(*(__int32 **)a3, a2, ((uint64_t)v8 - *(void *)a3) >> 2);
  unint64_t v10 = v9 ? v9 : v8;
  uint64_t v11 = *(__int32 **)(a3 + 8);
  if (v10 != v11) {
    return;
  }
  unint64_t v12 = *(void *)(a3 + 16);
  if ((unint64_t)v10 >= v12)
  {
    unint64_t v14 = *(__int32 **)a3;
    uint64_t v15 = ((uint64_t)v11 - *(void *)a3) >> 2;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62) {
      sub_100019424();
    }
    uint64_t v17 = v12 - (void)v14;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      std::locale v19 = (char *)sub_10002EE10(a3 + 16, v18);
      unint64_t v14 = *(__int32 **)a3;
      unint64_t v10 = *(__int32 **)(a3 + 8);
    }
    else
    {
      std::locale v19 = 0;
    }
    int v20 = &v19[4 * v15];
    uint64_t v21 = &v19[4 * v18];
    *(_DWORD *)int v20 = a2;
    uint64_t v13 = v20 + 4;
    while (v10 != v14)
    {
      int v22 = *--v10;
      *((_DWORD *)v20 - 1) = v22;
      v20 -= 4;
    }
    *(void *)a3 = v20;
    *(void *)(a3 + 8) = v13;
    *(void *)(a3 + 16) = v21;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *unint64_t v10 = a2;
    uint64_t v13 = v10 + 1;
  }
  *(void *)(a3 + 8) = v13;
  (*(void (**)(void **__return_ptr, void *, uint64_t))(*a1 + 24))(__p, a1, a2);
  uint64_t v23 = sub_10002D8A8();
  LODWORD(v75.__locale_) = __p[0];
  LODWORD(v73[0]) = 0;
  LODWORD(v73[0]) = *v23;
  if (*(float *)__p != *(float *)v73)
  {
    unsigned int v61 = (void *)std::ostream::operator<<();
    int v62 = sub_10002D07C(v61, (uint64_t)"\t", 1);
    (*(void (**)(void **__return_ptr, void *, uint64_t))(*a1 + 24))(v73, a1, a2);
    if (*(float *)v73 == INFINITY)
    {
      uint64_t v63 = "Infinity";
      uint64_t v64 = v62;
      uint64_t v65 = 8;
    }
    else
    {
      if (*(float *)v73 != -INFINITY)
      {
        int v66 = (void *)std::ostream::operator<<();
        goto LABEL_80;
      }
      uint64_t v63 = "-Infinity";
      uint64_t v64 = v62;
      uint64_t v65 = 9;
    }
    int v66 = sub_10002D07C(v64, (uint64_t)v63, v65);
LABEL_80:
    std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24)));
    uint64_t v67 = std::locale::use_facet(&v75, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
    std::locale::~locale(&v75);
    std::ostream::put();
    std::ostream::flush();
    return;
  }
  uint64_t v24 = (*(uint64_t (**)(void *, float))(*a1 + 104))(a1, *(float *)__p);
  uint64_t v25 = (*(uint64_t (**)(void *))(*a1 + 96))(a1);
  v75.__locale_ = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v26 = *(void *)(*(void *)(a1[1] + 56) + 8 * (int)a2);
  uint64_t v27 = *(void *)(v26 + 24);
  uint64_t v28 = *(void *)(v26 + 32);
  if (v27 == v28) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v27;
  }
  if (v27 == v28) {
    return;
  }
  uint64_t v30 = v25;
  uint64_t v68 = a1;
  uint64_t v69 = a3;
  uint64_t v31 = 0;
  unint64_t v32 = (v28 - v27) >> 4;
  if (v32 <= 1) {
    unint64_t v32 = 1;
  }
  unint64_t v70 = v32;
  do
  {
    unint64_t v33 = (void *)std::ostream::operator<<();
    sub_10002D07C(v33, (uint64_t)"\t", 1);
    uint64_t v34 = (_DWORD *)(v29 + 16 * v31 + 12);
    unint64_t v35 = (void *)std::ostream::operator<<();
    uint64_t v36 = sub_10002D07C(v35, (uint64_t)"\t", 1);
    (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v30 + 72))(v73, v30, *(int *)(v29 + 16 * v31));
    if ((v74 & 0x80u) == 0) {
      uint64_t v37 = v73;
    }
    else {
      uint64_t v37 = (void **)v73[0];
    }
    if ((v74 & 0x80u) == 0) {
      uint64_t v38 = v74;
    }
    else {
      uint64_t v38 = (uint64_t)v73[1];
    }
    int v39 = sub_10002D07C(v36, (uint64_t)v37, v38);
    unint64_t v40 = sub_10002D07C(v39, (uint64_t)"\t", 1);
    (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v24 + 72))(__p, v24, *(int *)(v29 + 16 * v31 + 4));
    if ((v72 & 0x80u) == 0) {
      long long v41 = __p;
    }
    else {
      long long v41 = (void **)__p[0];
    }
    if ((v72 & 0x80u) == 0) {
      uint64_t v42 = v72;
    }
    else {
      uint64_t v42 = (uint64_t)__p[1];
    }
    id v43 = sub_10002D07C(v40, (uint64_t)v41, v42);
    uint64_t v44 = sub_10002D07C(v43, (uint64_t)"\t", 1);
    float v45 = *(float *)(v29 + 16 * v31 + 8);
    if (v45 == INFINITY)
    {
      unint64_t v46 = "Infinity";
      uint64_t v47 = 8;
LABEL_47:
      uint64_t v48 = sub_10002D07C(v44, (uint64_t)v46, v47);
      goto LABEL_48;
    }
    if (v45 == -INFINITY)
    {
      unint64_t v46 = "-Infinity";
      uint64_t v47 = 9;
      goto LABEL_47;
    }
    uint64_t v48 = (void *)std::ostream::operator<<();
LABEL_48:
    std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(void *)(*v48 - 24)));
    uint64_t v49 = std::locale::use_facet(&v78, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
    std::locale::~locale(&v78);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v72 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v74 < 0) {
      operator delete(v73[0]);
    }
    uint64_t v50 = v76;
    if (v76 >= v77)
    {
      locale = v75.__locale_;
      uint64_t v53 = (v76 - (char *)v75.__locale_) >> 2;
      unint64_t v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 62) {
        sub_100019424();
      }
      uint64_t v55 = v77 - (char *)v75.__locale_;
      if ((v77 - (char *)v75.__locale_) >> 1 > v54) {
        unint64_t v54 = v55 >> 1;
      }
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56)
      {
        uint64_t v57 = (char *)sub_10002EE10((uint64_t)&v77, v56);
        locale = v75.__locale_;
        uint64_t v50 = v76;
      }
      else
      {
        uint64_t v57 = 0;
      }
      uint64_t v58 = (std::locale::__imp *)&v57[4 * v53];
      *(_DWORD *)uint64_t v58 = *v34;
      int v51 = (std::locale::__imp *)((char *)v58 + 4);
      while (v50 != (char *)locale)
      {
        int v59 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v58 - 1) = v59;
        uint64_t v58 = (std::locale::__imp *)((char *)v58 - 4);
      }
      v75.__locale_ = v58;
      uint64_t v76 = (char *)v51;
      uint64_t v77 = &v57[4 * v56];
      if (locale) {
        operator delete(locale);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v76 = *v34;
      int v51 = (std::locale::__imp *)(v50 + 4);
    }
    uint64_t v76 = (char *)v51;
    ++v31;
  }
  while (v31 != v70);
  int v60 = v75.__locale_;
  if (v75.__locale_ == v51) {
    goto LABEL_74;
  }
  do
  {
    sub_10006E380(v68, *(unsigned int *)v60, v69, a4);
    int v60 = (std::locale::__imp *)((char *)v60 + 4);
  }
  while (v60 != v51);
  int v51 = v75.__locale_;
  if (v75.__locale_)
  {
LABEL_74:
    uint64_t v76 = (char *)v51;
    operator delete(v51);
  }
}

void sub_10006EA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::locale a25,uint64_t a26)
{
}

BOOL sub_10006EA84(uint64_t a1)
{
  return !a1 || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == -1;
}

void sub_10006EAD4(uint64_t a1)
{
}

void sub_10006EB34(uint64_t a1)
{
  memset(__p, 0, sizeof(__p));
  sub_10009B6A8(a1, (uint64_t)__p, 0);
}

void sub_10006ECBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006ECE4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000FE870, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000FE870))
  {
    dword_1000FE868 = 2143289344;
    __cxa_guard_release(&qword_1000FE870);
  }
  return &dword_1000FE868;
}

void sub_10006ED3C(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2 > 0)
  {
    sub_1000A9814(buf);
    int v7 = *sub_10002D8A8();
    sub_10006EF60(a1);
  }
  uint64_t v6 = sub_1000C15EC();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "RXFstOp::copyNBestStrings : invalid n = %d, n should be > 0", buf, 8u);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_10006EEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, void (**a17)(), uint64_t a18, std::__shared_weak_count *a19)
{
  if (__p) {
    operator delete(__p);
  }
  a16 = &a12;
  sub_10001B264((void ***)&a16);
  sub_100018CDC((void ***)&a12);
  a17 = off_1000F0D20;
  if (a19) {
    sub_100018BC0(a19);
  }
  _Unwind_Resume(a1);
}

void sub_10006EF60(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_10009CE4C((uint64_t)v1, a1);
}

void sub_10006F03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000A8084((uint64_t)va);
  char v9 = *(void **)(v7 - 104);
  if (v9)
  {
    *(void *)(v7 - 96) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_10006F068(uint64_t a1, int a2)
{
  memset(__p, 0, sizeof(__p));
  sub_10009B6A8(a1, (uint64_t)__p, a2 == 0);
}

void sub_10006F120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006F144(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = a2 + 16;
  unint64_t v11 = *(void *)(a2 + 16);
  unint64_t v12 = *(__int32 **)(a2 + 8);
  if ((unint64_t)v12 >= v11)
  {
    unint64_t v14 = *(__int32 **)a2;
    uint64_t v15 = ((uint64_t)v12 - *(void *)a2) >> 2;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62) {
      sub_100019424();
    }
    uint64_t v17 = v11 - (void)v14;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      std::locale v19 = (char *)sub_10002EE10(v10, v18);
      unint64_t v14 = *(__int32 **)a2;
      unint64_t v12 = *(__int32 **)(a2 + 8);
    }
    else
    {
      std::locale v19 = 0;
    }
    int v20 = &v19[4 * v15];
    uint64_t v21 = &v19[4 * v18];
    *(_DWORD *)int v20 = a3;
    uint64_t v13 = v20 + 4;
    while (v12 != v14)
    {
      int v22 = *--v12;
      *((_DWORD *)v20 - 1) = v22;
      v20 -= 4;
    }
    *(void *)a2 = v20;
    *(void *)(a2 + 8) = v13;
    *(void *)(a2 + 16) = v21;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *unint64_t v12 = a3;
    uint64_t v13 = v12 + 1;
  }
  *(void *)(a2 + 8) = v13;
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a1 + 24))(&v67, a1, a3);
  uint64_t v23 = sub_10002D8A8();
  *(_DWORD *)long long buf = v67;
  LODWORD(v63[0]) = 0;
  LODWORD(v63[0]) = *v23;
  v24.n128_u32[0] = v67;
  if (*(float *)&v67 != *(float *)v63)
  {
    unint64_t v25 = a5[1];
    if (v25 >= a5[2])
    {
      uint64_t v26 = sub_10006FA8C(a5, (long long **)a4);
    }
    else
    {
      sub_10006FA2C((uint64_t)a5, (long long **)a4);
      uint64_t v26 = v25 + 24;
    }
    a5[1] = v26;
  }
  uint64_t v27 = *(void *)(*(void *)(a1[1] + 56) + 8 * (int)a3);
  uint64_t v28 = *(void *)(v27 + 24);
  uint64_t v29 = *(void *)(v27 + 32);
  if (v28 == v29) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *(void *)(v27 + 24);
  }
  if (v28 != v29)
  {
    unint64_t v31 = (v29 - v28) >> 4;
    if (v31 <= 1) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v31;
    }
    for (uint64_t i = (__int32 *)(v30 + 12); *i == a3; i += 4)
    {
      uint64_t v34 = sub_1000C15EC();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "cmdp_fst_util::unionFst : Loop detected while computing paths", buf, 2u);
      }
LABEL_66:
      if (!--v32) {
        return;
      }
    }
    uint64_t v35 = (*(uint64_t (**)(void *, __n128))(*a1 + 96))(a1, v24);
    uint64_t v36 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
    (*(void (**)(uint8_t *__return_ptr, uint64_t, void))(*(void *)v35 + 72))(buf, v35, *(i - 3));
    (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v36 + 72))(v63, v36, *(i - 2));
    if (v66 < 0)
    {
      if (*(void *)&buf[8] != 5) {
        goto LABEL_42;
      }
      uint64_t v37 = *(uint8_t **)buf;
    }
    else
    {
      if (v66 != 5) {
        goto LABEL_42;
      }
      uint64_t v37 = buf;
    }
    int v38 = *(_DWORD *)v37;
    int v39 = v37[4];
    if (v38 != 1936745788 || v39 != 62) {
      goto LABEL_42;
    }
    if (v64 < 0)
    {
      if (v63[1] != (void *)5) {
        goto LABEL_42;
      }
      id v52 = (void **)v63[0];
    }
    else
    {
      if (v64 != 5) {
        goto LABEL_42;
      }
      id v52 = v63;
    }
    int v54 = *(_DWORD *)v52;
    int v55 = *((unsigned __int8 *)v52 + 4);
    if (v54 == 1936745788 && v55 == 62)
    {
LABEL_46:
      uint64_t v43 = *(void *)(a2 + 8);
      uint64_t v44 = wmemchr(*(__int32 **)a2, *i, (v43 - *(void *)a2) >> 2);
      if (v44) {
        uint64_t v45 = (uint64_t)v44;
      }
      else {
        uint64_t v45 = v43;
      }
      if (v45 == *(void *)(a2 + 8))
      {
        std::string __p = 0;
        unsigned int v61 = 0;
        uint64_t v62 = 0;
        sub_1000A9798(&__p, *(const void **)a2, v45, (v45 - *(void *)a2) >> 2);
        sub_10006F144(a1, &__p, *i, a4, a5);
        if (__p)
        {
          unsigned int v61 = __p;
          operator delete(__p);
        }
      }
      if (v66 < 0)
      {
        if (*(void *)&buf[8] != 5) {
          goto LABEL_61;
        }
        unint64_t v46 = *(uint8_t **)buf;
      }
      else
      {
        if (v66 != 5) {
          goto LABEL_61;
        }
        unint64_t v46 = buf;
      }
      int v47 = *(_DWORD *)v46;
      int v48 = v46[4];
      if (v47 != 1936745788 || v48 != 62) {
        goto LABEL_61;
      }
      char v51 = v64;
      if (v64 < 0)
      {
        if (v63[1] == (void *)5)
        {
          uint64_t v53 = (void **)v63[0];
LABEL_84:
          int v57 = *(_DWORD *)v53;
          int v58 = *((unsigned __int8 *)v53 + 4);
          if (v57 == 1936745788 && v58 == 62) {
            goto LABEL_62;
          }
        }
      }
      else if (v64 == 5)
      {
        uint64_t v53 = v63;
        goto LABEL_84;
      }
LABEL_61:
      uint64_t v50 = *(void *)(a4 + 8) - 48;
      sub_10001B20C(a4 + 16, v50);
      *(void *)(a4 + 8) = v50;
      char v51 = v64;
LABEL_62:
      if (v51 < 0) {
        operator delete(v63[0]);
      }
      if (v66 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_66;
    }
LABEL_42:
    unint64_t v41 = *(void *)(a4 + 8);
    if (v41 >= *(void *)(a4 + 16))
    {
      uint64_t v42 = sub_10006FBB0((uint64_t *)a4, (long long *)buf, (long long *)v63);
    }
    else
    {
      sub_100018B28(*(char **)(a4 + 8), (long long *)buf, (long long *)v63);
      uint64_t v42 = v41 + 48;
      *(void *)(a4 + 8) = v41 + 48;
    }
    *(void *)(a4 + 8) = v42;
    goto LABEL_46;
  }
}

void sub_10006F614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006F66C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  sub_1000A9798(&__p, 0, 0, 0);
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  sub_10006F144(a1, (uint64_t)&__p, v4, (uint64_t)v8, a2);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  char v9 = (void **)v8;
  sub_10001B264(&v9);
}

void sub_10006F724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v13 - ++*(void *)(result + 24) = &a13;
  sub_10001B264((void ***)(v13 - 24));
  sub_100018CDC((void ***)&a13);
  _Unwind_Resume(a1);
}

void sub_10006F764(void *a1, char *a2)
{
  bzero(__s, 0x400uLL);
  size_t v4 = confstr(65537, __s, 0x400uLL);
  if (v4)
  {
    sub_100009CF0(&v19, __s);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v19;
    }
    else {
      uint64_t v5 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if (v5->__r_.__value_.__s.__data_[v4 - 1] != 47)
    {
      sub_100009CF0(__p, "/");
      uint64_t v6 = v21 >= 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      uint64_t v7 = v21 >= 0 ? (void *)HIBYTE(v21) : __p[1];
      std::string::append(&v19, v6, (std::string::size_type)v7);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_100009CF0(&v18, a2);
    int v8 = dword_1000FED68++;
    std::to_string(&v17, v8);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v9 = &v17;
    }
    else {
      char v9 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v17.__r_.__value_.__l.__size_;
    }
    unint64_t v11 = std::string::append(&v18, (const std::string::value_type *)v9, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v21 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v21 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    if (v21 >= 0) {
      std::string::size_type v14 = HIBYTE(v21);
    }
    else {
      std::string::size_type v14 = (std::string::size_type)__p[1];
    }
    std::string::append(&v19, (const std::string::value_type *)v13, v14);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    sub_10006E06C(a1);
    uint64_t v15 = sub_1000C15EC();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v16 = &v19;
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v16 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "FST Grammar log %s\n", (uint8_t *)__p, 0xCu);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
}

void sub_10006F9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10006FA2C(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = sub_10001AF20((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_10006FA84(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10006FA8C(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100019424();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  std::string v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100019D14(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_10001AF20(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  v15 += 24;
  sub_10001B534(a1, v14);
  uint64_t v12 = a1[1];
  sub_10001B6D4(v14);
  return v12;
}

void sub_10006FB9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B6D4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006FBB0(uint64_t *a1, long long *a2, long long *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_100019424();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v11 = 0x555555555555555;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_10001AFFC(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v15 = v12;
  unint64_t v16 = &v12[48 * v5];
  std::string v18 = &v12[48 * v11];
  sub_100018B28(v16, a2, a3);
  std::string v17 = v16 + 48;
  sub_10001B2FC(a1, &v15);
  uint64_t v13 = a1[1];
  sub_10001B4B8(&v15);
  return v13;
}

void sub_10006FCAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B4B8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006FCC0@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x130uLL);
  uint64_t result = sub_10006FD1C((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_10006FD08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006FD1C(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1000F0F80;
  sub_10006FDF8((char *)(a1 + 24), a2);
  return a1;
}

void sub_10006FD64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10006FD78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F0F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10006FD98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F0F80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10006FDEC(uint64_t a1)
{
  return sub_1000679DC(a1 + 24);
}

char *sub_10006FDF8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10006770C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  *((void *)__dst + 3) = 0;
  *((void *)__dst + 4) = 0;
  sub_1000B9E54(__dst + 40);
  *((void *)__dst + 14) = 0;
  *((void *)__dst + 15) = 0;
  *((void *)__dst + 19) = 0;
  *((void *)__dst + 18) = 0;
  *((void *)__dst + 16) = 0;
  *((void *)__dst + 17) = __dst + 144;
  __dst[160] = 0;
  *(_OWORD *)(__dst + 168) = 0u;
  *(_OWORD *)(__dst + 184) = 0u;
  *(_OWORD *)(__dst + 20sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0u;
  *((void *)__dst + 27) = 850045863;
  *((_OWORD *)__dst + 14) = 0u;
  *((_OWORD *)__dst + 15) = 0u;
  *((_OWORD *)__dst + 16) = 0u;
  *((void *)__dst + 34) = 0;
  return __dst;
}

void sub_10006FE94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10006FEB0(void *a1, uint64_t a2, unsigned __int8 a3)
{
  std::istream::sentry::sentry();
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    unint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_100070010(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x10006FFD0);
  }
  __cxa_rethrow();
}

void sub_10007008C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000700A0(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_100070140(a1);
  return a1;
}

void sub_10007011C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_100070140(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + ++*(void *)(result + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void sub_100070254(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, char a7)
{
  sub_100009CF0(v16, "");
  sub_100009CF0(__p, "");
  sub_100070348(a1, a2, a3, (uint64_t)v16, a4, a5, a6, (uint64_t)__p, a7);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
}

void sub_100070314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_100070348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11 = a1;
  id v89 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  if (a2 && a3)
  {
    uint64_t v16 = *(unsigned __int8 *)(a4 + 23);
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *(void *)(a4 + 8);
    }
    if (v16)
    {
      int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 80))(a3, a4);
      if (v17 == -1)
      {
        if (dword_1000FF640 >= 1)
        {
          sub_100009CF0(&__p, "INFO");
          sub_10002D454((BOOL *)v84, (uint64_t)&__p);
          std::string v18 = sub_10002D07C(&std::cerr, (uint64_t)"Input symbol '", 14);
          int v19 = *(char *)(a4 + 23);
          uint64_t v20 = v19 >= 0 ? a4 : *(void *)a4;
          uint64_t v21 = v19 >= 0 ? *(unsigned __int8 *)(a4 + 23) : *(void *)(a4 + 8);
          int v22 = sub_10002D07C(v18, v20, v21);
          sub_10002D07C(v22, (uint64_t)"' missing from target symbol table", 34);
          sub_10002D500(v84);
          if (SHIBYTE(v88) < 0) {
            operator delete(__p);
          }
        }
        int v17 = -1;
        uint64_t v79 = 1;
      }
      else
      {
        uint64_t v79 = 0;
      }
    }
    else
    {
      uint64_t v79 = 0;
      int v17 = -1;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 64))(a2, 0);
    uint64_t v77 = a8;
    if (v23)
    {
      uint64_t v25 = v24;
      uint64_t v26 = 0;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 72))(&__p, a2, v25);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 72))(v84, a2, v25);
        uint64_t v27 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a3 + 80))(a3, v84);
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        BOOL v28 = v27 == -1;
        if (v27 == -1) {
          LODWORD(v27) = v17;
        }
        if (v28 && v17 == -1)
        {
          if (dword_1000FF640 >= 1)
          {
            sub_100009CF0(v84, "INFO");
            sub_10002D454((BOOL *)v82, (uint64_t)v84);
            sub_10002D07C(&std::cerr, (uint64_t)"Input symbol ID ", 16);
            uint64_t v30 = (void *)std::ostream::operator<<();
            unint64_t v31 = sub_10002D07C(v30, (uint64_t)" symbol '", 9);
            uint64_t v32 = SHIBYTE(v88) >= 0 ? &__p : (void **)__p;
            uint64_t v33 = SHIBYTE(v88) >= 0 ? HIBYTE(v88) : (uint64_t)v87;
            uint64_t v34 = sub_10002D07C(v31, (uint64_t)v32, v33);
            sub_10002D07C(v34, (uint64_t)"' missing from target symbol table", 34);
            sub_10002D500(v82);
            if ((char)v85 < 0) {
              operator delete(v84[0]);
            }
          }
          ++v79;
          LODWORD(v27) = -1;
        }
        uint64_t v35 = v90;
        if (v90 >= v91)
        {
          uint64_t v37 = ((char *)v90 - (char *)v89) >> 3;
          if ((unint64_t)(v37 + 1) >> 61) {
            sub_100019424();
          }
          unint64_t v38 = v91 - v89;
          if (v38 <= v37 + 1) {
            unint64_t v38 = v37 + 1;
          }
          if ((unint64_t)((char *)v91 - (char *)v89) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v38;
          }
          if (v39) {
            unint64_t v40 = (char *)sub_10001943C((uint64_t)&v91, v39);
          }
          else {
            unint64_t v40 = 0;
          }
          unint64_t v41 = (int *)&v40[8 * v37];
          *(void *)unint64_t v41 = v25 | ((unint64_t)v27 << 32);
          uint64_t v36 = v41 + 2;
          uint64_t v43 = v89;
          uint64_t v42 = v90;
          if (v90 != v89)
          {
            do
            {
              uint64_t v44 = *((void *)v42 - 1);
              v42 -= 2;
              *((void *)v41 - 1) = v44;
              v41 -= 2;
            }
            while (v42 != v43);
            uint64_t v42 = v89;
          }
          id v89 = v41;
          uint64_t v90 = v36;
          uint64_t v91 = (int *)&v40[8 * v39];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *(void *)uint64_t v90 = v25 | ((unint64_t)v27 << 32);
          uint64_t v36 = v35 + 2;
        }
        uint64_t v90 = v36;
        if (SHIBYTE(v88) < 0) {
          operator delete(__p);
        }
        if (++v26 < v23) {
          uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v26);
        }
      }
      while (v26 != v23);
    }
    a8 = v77;
    uint64_t v11 = a1;
    if (v79)
    {
      sub_100009CF0(&__p, "WARNING");
      sub_10002D454((BOOL *)v84, (uint64_t)&__p);
      sub_10002D07C(&std::cerr, (uint64_t)"Target symbol table missing: ", 29);
      uint64_t v45 = (void *)std::ostream::operator<<();
      sub_10002D07C(v45, (uint64_t)" input symbols", 14);
      sub_10002D500(v84);
      if (SHIBYTE(v88) < 0)
      {
        operator delete(__p);
        if (!a5) {
          goto LABEL_65;
        }
        goto LABEL_64;
      }
    }
    if (a5) {
LABEL_64:
    }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a3);
  }
LABEL_65:
  std::string __p = 0;
  NSString v87 = 0;
  os_log_type_t v88 = 0;
  if (a6 && a7)
  {
    uint64_t v46 = *(unsigned __int8 *)(a8 + 23);
    if ((v46 & 0x80u) != 0) {
      uint64_t v46 = *(void *)(a8 + 8);
    }
    if (v46)
    {
      int v47 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a7 + 80))(a7, a8);
      if (v47 == -1)
      {
        if (dword_1000FF640 >= 1)
        {
          sub_100009CF0(v84, "INFO");
          sub_10002D454((BOOL *)v82, (uint64_t)v84);
          uint64_t v49 = sub_10002D07C(&std::cerr, (uint64_t)"Output symbol '", 15);
          int v50 = *(char *)(a8 + 23);
          uint64_t v51 = v50 >= 0 ? a8 : *(void *)a8;
          uint64_t v52 = v50 >= 0 ? *(unsigned __int8 *)(a8 + 23) : *(void *)(a8 + 8);
          uint64_t v53 = sub_10002D07C(v49, v51, v52);
          sub_10002D07C(v53, (uint64_t)"' missing from target symbol table", 34);
          sub_10002D500(v82);
          if ((char)v85 < 0) {
            operator delete(v84[0]);
          }
        }
        int v47 = -1;
        uint64_t v48 = 1;
      }
      else
      {
        uint64_t v48 = 0;
      }
    }
    else
    {
      uint64_t v48 = 0;
      int v47 = -1;
    }
    unint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 120))(a6);
    uint64_t v55 = (*(uint64_t (**)(uint64_t, void))(*(void *)a6 + 64))(a6, 0);
    if (v54)
    {
      uint64_t v56 = v55;
      uint64_t v57 = 0;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a6 + 72))(v84, a6, v56);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a6 + 72))(v82, a6, v56);
        uint64_t v58 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a7 + 80))(a7, v82);
        if (v83 < 0) {
          operator delete(v82[0]);
        }
        BOOL v59 = v58 == -1;
        if (v58 == -1) {
          LODWORD(v58) = v47;
        }
        if (v59 && v47 == -1)
        {
          if (dword_1000FF640 >= 1)
          {
            sub_100009CF0(v82, "INFO");
            sub_10002D454(&v81, (uint64_t)v82);
            sub_10002D07C(&std::cerr, (uint64_t)"Output symbol ID ", 17);
            unsigned int v61 = (void *)std::ostream::operator<<();
            uint64_t v62 = sub_10002D07C(v61, (uint64_t)" symbol '", 9);
            uint64_t v63 = (v85 & 0x80u) == 0 ? v84 : (void **)v84[0];
            char v64 = (v85 & 0x80u) == 0 ? (void *)v85 : v84[1];
            uint64_t v65 = sub_10002D07C(v62, (uint64_t)v63, (uint64_t)v64);
            sub_10002D07C(v65, (uint64_t)"' missing from target symbol table", 34);
            sub_10002D500(&v81);
            if (v83 < 0) {
              operator delete(v82[0]);
            }
          }
          ++v48;
          LODWORD(v58) = -1;
        }
        char v66 = v87;
        if (v87 >= v88)
        {
          uint64_t v68 = ((char *)v87 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v68 + 1) >> 61) {
            sub_100019424();
          }
          unint64_t v69 = ((char *)v88 - (unsigned char *)__p) >> 2;
          if (v69 <= v68 + 1) {
            unint64_t v69 = v68 + 1;
          }
          if ((unint64_t)((char *)v88 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v69;
          }
          if (v70) {
            uint64_t v71 = (char *)sub_10001943C((uint64_t)&v88, v70);
          }
          else {
            uint64_t v71 = 0;
          }
          unsigned __int8 v72 = (unint64_t *)&v71[8 * v68];
          *unsigned __int8 v72 = v56 | ((unint64_t)v58 << 32);
          uint64_t v67 = v72 + 1;
          unsigned __int8 v74 = (char *)__p;
          uint64_t v73 = (char *)v87;
          if (v87 != __p)
          {
            do
            {
              unint64_t v75 = *((void *)v73 - 1);
              v73 -= 8;
              *--unsigned __int8 v72 = v75;
            }
            while (v73 != v74);
            uint64_t v73 = (char *)__p;
          }
          std::string __p = v72;
          NSString v87 = v67;
          os_log_type_t v88 = (unint64_t *)&v71[8 * v70];
          if (v73) {
            operator delete(v73);
          }
        }
        else
        {
          *NSString v87 = v56 | ((unint64_t)v58 << 32);
          uint64_t v67 = v66 + 1;
        }
        NSString v87 = v67;
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        if (++v57 < v54) {
          uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a6 + 64))(a6, v57);
        }
      }
      while (v57 != v54);
    }
    uint64_t v11 = a1;
    if (v48)
    {
      sub_100009CF0(v84, "WARNING");
      sub_10002D454((BOOL *)v82, (uint64_t)v84);
      sub_10002D07C(&std::cerr, (uint64_t)"Target symbol table missing: ", 29);
      uint64_t v76 = (void *)std::ostream::operator<<();
      sub_10002D07C(v76, (uint64_t)" output symbols", 15);
      sub_10002D500(v82);
      if ((char)v85 < 0) {
        operator delete(v84[0]);
      }
    }
    if (a9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 264))(a1, a7);
    }
  }
  sub_100070E6C(v11, &v89, (int **)&__p);
  if (__p)
  {
    NSString v87 = (unint64_t *)__p;
    operator delete(__p);
  }
  if (v89)
  {
    uint64_t v90 = v89;
    operator delete(v89);
  }
}

void sub_100070D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  unint64_t v38 = *(void **)(v36 - 112);
  if (v38)
  {
    *(void *)(v36 - 104) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100070E6C(uint64_t a1, int **a2, int **a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  sub_100071450((uint64_t)v26, *a2, a2[1]);
  sub_100071450((uint64_t)v25, *a3, a3[1]);
  uint64_t v22 = 0;
  int v23 = 0;
  unsigned int v24 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v22);
  while (1)
  {
    if (!v22)
    {
      if ((int)v24 >= v23) {
        goto LABEL_39;
      }
LABEL_7:
      uint64_t v7 = v24;
      goto LABEL_8;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22)) {
      break;
    }
    if (!v22) {
      goto LABEL_7;
    }
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v22 + 24))();
LABEL_8:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 272))(a1, v7, &v21);
    while (((*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21) & 1) == 0)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 24))(v21);
      uint64_t v18 = *(void *)v8;
      int v19 = *(_DWORD *)(v8 + 8);
      int v20 = *(_DWORD *)(v8 + 12);
      uint64_t v9 = sub_10006941C(v26, (int *)&v18);
      if (v9)
      {
        if (*((_DWORD *)v9 + 5) == -1)
        {
          if (byte_1000FE8F0) {
            sub_100009CF0(__p, "FATAL");
          }
          else {
            sub_100009CF0(__p, "ERROR");
          }
          sub_10002D454(&v17, (uint64_t)__p);
          sub_10002D07C(&std::cerr, (uint64_t)"Input symbol ID ", 16);
          uint64_t v11 = (void *)std::ostream::operator<<();
          sub_10002D07C(v11, (uint64_t)" missing from target vocabulary", 31);
          goto LABEL_30;
        }
        LODWORD(v18) = *((_DWORD *)v9 + 5);
      }
      unint64_t v10 = sub_10006941C(v25, (int *)&v18 + 1);
      if (v10)
      {
        if (*((_DWORD *)v10 + 5) == -1)
        {
          if (byte_1000FE8F0) {
            sub_100009CF0(__p, "FATAL");
          }
          else {
            sub_100009CF0(__p, "ERROR");
          }
          sub_10002D454(&v17, (uint64_t)__p);
          sub_10002D07C(&std::cerr, (uint64_t)"Output symbol id ", 17);
          uint64_t v12 = (void *)std::ostream::operator<<();
          sub_10002D07C(v12, (uint64_t)" missing from target vocabulary", 31);
LABEL_30:
          sub_10002D500(&v17);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, 4, 4);
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
          if (v22) {
            (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
          }
          goto LABEL_36;
        }
        HIDWORD(v18) = *((_DWORD *)v10 + 5);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v21 + 80))(v21, &v18);
      (*(void (**)(uint64_t))(*(void *)v21 + 32))(v21);
    }
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 32))(v22);
    }
    else {
      ++v24;
    }
  }
  if (v22) {
    (*(void (**)(void))(*(void *)v22 + 8))();
  }
LABEL_39:
  uint64_t v14 = sub_1000C2940(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, v14, 0xFFFFFFFF0007);
LABEL_36:
  sub_10001B7F8((uint64_t)v25);
  return sub_10001B7F8((uint64_t)v26);
}

void sub_100071364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_10001B7F8((uint64_t)&a25);
  sub_10001B7F8(v25 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_100071450(uint64_t a1, int *a2, int *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    unint64_t v5 = a2;
    do
    {
      sub_1000714CC(a1, v5, v5);
      v5 += 2;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1000714B8(_Unwind_Exception *a1)
{
  sub_10001B7F8(v1);
  _Unwind_Resume(a1);
}

void *sub_1000714CC(uint64_t a1, int *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x18uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100018F74(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1000716D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000716E8(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result == -1) {
    return result;
  }
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v6);
  uint64_t v11 = 0;
  int v12 = 0;
  unsigned int v13 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v11);
  while (1)
  {
    if (!v11)
    {
      if ((int)v13 >= v12) {
        return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 168))(a1, v5 & 0xFFFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0xFFFFFFFF0007);
      }
LABEL_8:
      uint64_t v7 = v13;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
      break;
    }
    if (!v11) {
      goto LABEL_8;
    }
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v11 + 24))();
LABEL_9:
    sub_100071A68(a2, v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 216))(a1, v7);
    for (unint64_t i = a2[5]; ; a2[5] = i)
    {
      uint64_t v9 = a2[2];
      if (i >= (a2[3] - v9) >> 4) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 184))(a1, v7, v9 + 16 * i);
      unint64_t i = a2[5] + 1;
    }
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(v10);
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 160))(a1, v7, v10);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
    }
    else {
      ++v13;
    }
  }
  if (v11) {
    (*(void (**)(void))(*(void *)v11 + 8))();
  }
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 168))(a1, v5 & 0xFFFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0xFFFFFFFF0007);
}

void sub_100071A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100071A68(uint64_t *a1, uint64_t a2)
{
  a1[5] = 0;
  uint64_t v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 32))(*a1);
  sub_10003074C(v4, v5);
  uint64_t v6 = *a1;
  long long v14 = 0u;
  long long v15 = 0u;
  unint64_t v16 = 0;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v6 + 120))(v6, a2, &v14);
  while (1)
  {
    if (!(void)v14)
    {
      if (v16 >= (unint64_t)v15) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v14 + 16))(v14)) {
      break;
    }
    if ((void)v14)
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v14 + 24))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = *((void *)&v14 + 1) + 16 * v16;
LABEL_8:
    unint64_t v8 = a1[3];
    if (v8 >= a1[4])
    {
      uint64_t v9 = sub_10003092C(v4, v7);
    }
    else
    {
      *(void *)unint64_t v8 = *(void *)v7;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v7 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(v7 + 12);
      uint64_t v9 = v8 + 16;
    }
    a1[3] = v9;
    if ((void)v14) {
      (*(void (**)(void))(*(void *)v14 + 32))(v14);
    }
    else {
      ++v16;
    }
  }
  if ((void)v14)
  {
    (*(void (**)(void))(*(void *)v14 + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (*((void *)&v15 + 1)) {
    --**((_DWORD **)&v15 + 1);
  }
LABEL_18:
  unint64_t v10 = (uint64_t *)a1[2];
  uint64_t v11 = (uint64_t *)a1[3];
  unint64_t v12 = 126 - 2 * __clz(((char *)v11 - (char *)v10) >> 4);
  if (v11 == v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  sub_100071CA8(v10, v11, (uint64_t)&v14, v13, 1);
}

void sub_100071C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    sub_1000B4594();
  }
  else {
    sub_1000B457C((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

void sub_100071CA8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*((_DWORD *)a2 - 3) < *((_DWORD *)v11 + 1))
          {
            uint64_t v24 = *v11;
            int v25 = *((_DWORD *)v11 + 2);
            int v26 = *((_DWORD *)v11 + 3);
            *uint64_t v11 = *(a2 - 2);
            *((_DWORD *)v11 + 2) = *((_DWORD *)a2 - 2);
            *((_DWORD *)v11 + 3) = *((_DWORD *)a2 - 1);
            *(a2 - 2) = v24;
            *((_DWORD *)a2 - 2) = v25;
            *((_DWORD *)a2 - 1) = v26;
          }
          break;
        case 3uLL:
          sub_1000721DC(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          sub_100072724((uint64_t)v11, (uint64_t)(v11 + 2), (uint64_t)(v11 + 4), (uint64_t)(a2 - 2));
          break;
        case 5uLL:
          sub_100072820((uint64_t)v11, (uint64_t)(v11 + 2), (uint64_t)(v11 + 4), (uint64_t)(v11 + 6), (uint64_t)(a2 - 2));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        sub_100072968((uint64_t)v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    size_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      sub_1000721DC(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      sub_1000721DC(v11 + 2, v17 - 2, a2 - 4);
      sub_1000721DC(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      sub_1000721DC(v17 - 2, v17, &v11[2 * v16 + 2]);
      uint64_t v18 = *v11;
      int v19 = *((_DWORD *)v11 + 2);
      int v20 = *((_DWORD *)v11 + 3);
      *uint64_t v11 = *v17;
      *((_DWORD *)v11 + 2) = *((_DWORD *)v17 + 2);
      *((_DWORD *)v11 + 3) = *((_DWORD *)v17 + 3);
      *size_t v17 = v18;
      *((_DWORD *)v17 + 2) = v19;
      *((_DWORD *)v17 + 3) = v20;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1000721DC(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*((_DWORD *)v11 - 3) >= *((_DWORD *)v11 + 1))
    {
      uint64_t v11 = sub_100072318(v11, (unint64_t)a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v21 = sub_100072428(v11, (unint64_t)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v23 = sub_10007253C((uint64_t)v11, (uint64_t)v21);
    uint64_t v11 = v21 + 2;
    if (sub_10007253C((uint64_t)(v21 + 2), (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_16:
      sub_100071CA8(a1, v21, a3, -v13, a5 & 1);
      uint64_t v11 = v21 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1000720A8((uint64_t)v11, a2);
  }
  else
  {
    sub_100072150(v11, a2);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*(a2 - 4) < *v11)
          {
            uint64_t v24 = *(void *)v11;
            int v25 = v11[2];
            int v26 = v11[3];
            *(void *)uint64_t v11 = *((void *)a2 - 2);
            v11[2] = *(a2 - 2);
            void v11[3] = *(a2 - 1);
            *((void *)a2 - 2) = v24;
            *(a2 - 2) = v25;
            *(a2 - 1) = v26;
          }
          break;
        case 3uLL:
          sub_1000737DC((uint64_t *)v11, v11 + 4, a2 - 4);
          break;
        case 4uLL:
          sub_100073CD8((uint64_t)v11, (uint64_t *)v11 + 2, v11 + 8, (uint64_t *)a2 - 2);
          break;
        case 5uLL:
          sub_100073DD4((uint64_t)v11, (uint64_t)(v11 + 4), (uint64_t *)v11 + 4, (uint64_t *)v11 + 6, (uint64_t *)a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        sub_100073F1C(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    size_t v17 = &v11[4 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      sub_1000737DC((uint64_t *)v11, &v11[4 * (v15 >> 1)], a2 - 4);
      sub_1000737DC((uint64_t *)v11 + 2, v17 - 4, a2 - 8);
      sub_1000737DC((uint64_t *)v11 + 4, &v11[4 * v16 + 4], a2 - 12);
      sub_1000737DC((uint64_t *)v17 - 2, v17, &v11[4 * v16 + 4]);
      uint64_t v18 = *(void *)v11;
      int v19 = v11[2];
      int v20 = v11[3];
      *(void *)uint64_t v11 = *(void *)v17;
      v11[2] = v17[2];
      void v11[3] = v17[3];
      *(void *)size_t v17 = v18;
      v17[2] = v19;
      void v17[3] = v20;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1000737DC((uint64_t *)&v11[4 * (v15 >> 1)], v11, a2 - 4);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(v11 - 4) >= *v11)
    {
      uint64_t v11 = sub_100073914(v11, (unint64_t)a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v21 = sub_100073A00((uint64_t *)v11, (unint64_t)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v23 = sub_100073AF4((uint64_t)v11, v21);
    uint64_t v11 = (int *)(v21 + 2);
    if (sub_100073AF4((uint64_t)(v21 + 2), a2))
    {
      a4 = -v13;
      a2 = (int *)v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_16:
      sub_1000732B0(a1, v21, a3, -v13, a5 & 1);
      uint64_t v11 = (int *)(v21 + 2);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1000736B0((uint64_t)v11, a2);
  }
  else
  {
    sub_100073754(v11, a2);
  }
}

uint64_t sub_1000720A8(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    uint64_t v2 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (_DWORD *)result;
      do
      {
        char v5 = v2;
        if (v4[5] < v4[1])
        {
          uint64_t v6 = *v2;
          int v7 = v4[6];
          int v8 = v4[7];
          uint64_t v9 = HIDWORD(*v5);
          uint64_t v10 = v3;
          while (1)
          {
            uint64_t v11 = result + v10;
            *(void *)(v11 + 16) = *(void *)(result + v10);
            *(_DWORD *)(v11 + ++*(void *)(result + 24) = *(_DWORD *)(result + v10 + 8);
            *(_DWORD *)(v11 + 28) = *(_DWORD *)(result + v10 + 12);
            if (!v10) {
              break;
            }
            v10 -= 16;
            if (*(_DWORD *)(v11 - 12) <= (int)v9)
            {
              uint64_t v12 = result + v10 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v12 = result;
LABEL_10:
          *(void *)uint64_t v12 = v6;
          *(_DWORD *)(v12 + 8) = v7;
          *(_DWORD *)(v12 + 12) = v8;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        uint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

_DWORD *sub_100072150(_DWORD *result, void *a2)
{
  if (result != (_DWORD *)a2)
  {
    uint64_t v2 = result + 4;
    if (result + 4 != (_DWORD *)a2)
    {
      uint64_t v3 = result + 7;
      do
      {
        uint64_t v4 = v2;
        if (result[5] < result[1])
        {
          uint64_t v5 = *v2;
          int v6 = result[6];
          int v7 = result[7];
          uint64_t v8 = HIDWORD(*v4);
          uint64_t v9 = v3;
          do
          {
            uint64_t v10 = v9;
            *(void *)(v9 - 3) = *(void *)(v9 - 7);
            *(v9 - 1) = *(v9 - 5);
            int v11 = *(v9 - 4);
            v9 -= 4;
            *uint64_t v10 = v11;
          }
          while (*(v10 - 10) > (int)v8);
          *(void *)(v9 - 3) = v5;
          *(v9 - 1) = v6;
          *uint64_t v9 = v7;
        }
        uint64_t v2 = v4 + 2;
        v3 += 4;
        uint64_t result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1000721DC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a2 + 1);
  int v4 = *((_DWORD *)a3 + 1);
  if (v3 < *((_DWORD *)a1 + 1))
  {
    uint64_t v5 = *a1;
    int v6 = *((_DWORD *)a1 + 2);
    int v7 = *((_DWORD *)a1 + 3);
    if (v4 < v3)
    {
      *a1 = *a3;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a1 + 3) = *((_DWORD *)a3 + 3);
      *a3 = v5;
      *((_DWORD *)a3 + 2) = v6;
      *((_DWORD *)a3 + 3) = v7;
      return 1;
    }
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
    *a2 = v5;
    *((_DWORD *)a2 + 2) = v6;
    *((_DWORD *)a2 + 3) = v7;
    if (*((_DWORD *)a3 + 1) >= SHIDWORD(v5)) {
      return 1;
    }
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
    *a3 = v5;
    *((_DWORD *)a3 + 2) = v6;
    *((_DWORD *)a3 + 3) = v7;
    return 2;
  }
  if (v4 < v3)
  {
    uint64_t v8 = *a2;
    int v9 = *((_DWORD *)a2 + 2);
    int v10 = *((_DWORD *)a2 + 3);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
    *a3 = v8;
    *((_DWORD *)a3 + 2) = v9;
    *((_DWORD *)a3 + 3) = v10;
    if (*((_DWORD *)a2 + 1) >= *((_DWORD *)a1 + 1)) {
      return 1;
    }
    uint64_t v11 = *a1;
    int v12 = *((_DWORD *)a1 + 2);
    int v13 = *((_DWORD *)a1 + 3);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
    *a2 = v11;
    *((_DWORD *)a2 + 2) = v12;
    *((_DWORD *)a2 + 3) = v13;
    return 2;
  }
  return 0;
}

uint64_t *sub_100072318(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = HIDWORD(*a1);
  if (*(_DWORD *)(a2 - 12) <= (int)v3)
  {
    int v7 = a1 + 2;
    do
    {
      uint64_t v5 = v7;
      if ((unint64_t)v7 >= a2) {
        break;
      }
      int v8 = *((_DWORD *)v7 + 1);
      v7 += 2;
    }
    while (v8 <= (int)v3);
  }
  else
  {
    int v4 = a1;
    do
    {
      uint64_t v5 = v4 + 2;
      int v6 = *((_DWORD *)v4 + 5);
      v4 += 2;
    }
    while (v6 <= (int)v3);
  }
  if ((unint64_t)v5 >= a2)
  {
    unint64_t v9 = a2;
  }
  else
  {
    do
    {
      unint64_t v9 = a2 - 16;
      int v10 = *(_DWORD *)(a2 - 12);
      a2 -= 16;
    }
    while (v10 > (int)v3);
  }
  int v11 = *((_DWORD *)a1 + 2);
  int v12 = *((_DWORD *)a1 + 3);
  while ((unint64_t)v5 < v9)
  {
    uint64_t v13 = *v5;
    int v14 = *((_DWORD *)v5 + 2);
    int v15 = *((_DWORD *)v5 + 3);
    uint64_t *v5 = *(void *)v9;
    *((_DWORD *)v5 + 2) = *(_DWORD *)(v9 + 8);
    *((_DWORD *)v5 + 3) = *(_DWORD *)(v9 + 12);
    *(void *)unint64_t v9 = v13;
    *(_DWORD *)(v9 + 8) = v14;
    *(_DWORD *)(v9 + 12) = v15;
    do
    {
      int v16 = *((_DWORD *)v5 + 5);
      v5 += 2;
    }
    while (v16 <= (int)v3);
    do
    {
      int v17 = *(_DWORD *)(v9 - 12);
      v9 -= 16;
    }
    while (v17 > (int)v3);
  }
  if (v5 - 2 != a1)
  {
    *a1 = *(v5 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v5 - 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)v5 - 1);
  }
  *(v5 - 2) = v2;
  *((_DWORD *)v5 - 2) = v11;
  *((_DWORD *)v5 - 1) = v12;
  return v5;
}

uint64_t *sub_100072428(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *((_DWORD *)a1 + 3);
  unint64_t v6 = HIDWORD(*a1);
  do
  {
    int v7 = HIDWORD(a1[v2 + 2]);
    v2 += 2;
  }
  while (v7 < (int)v6);
  int v8 = &a1[v2];
  if (v2 == 2)
  {
    while ((unint64_t)v8 < a2)
    {
      unint64_t v9 = a2 - 16;
      int v11 = *(_DWORD *)(a2 - 12);
      a2 -= 16;
      if (v11 < (int)v6) {
        goto LABEL_9;
      }
    }
    unint64_t v9 = a2;
  }
  else
  {
    do
    {
      unint64_t v9 = a2 - 16;
      int v10 = *(_DWORD *)(a2 - 12);
      a2 -= 16;
    }
    while (v10 >= (int)v6);
  }
LABEL_9:
  int v12 = v8;
  if ((unint64_t)v8 < v9)
  {
    unint64_t v13 = v9;
    do
    {
      uint64_t v14 = *v12;
      int v15 = *((_DWORD *)v12 + 2);
      int v16 = *((_DWORD *)v12 + 3);
      *int v12 = *(void *)v13;
      *((_DWORD *)v12 + 2) = *(_DWORD *)(v13 + 8);
      *((_DWORD *)v12 + 3) = *(_DWORD *)(v13 + 12);
      *(void *)unint64_t v13 = v14;
      *(_DWORD *)(v13 + 8) = v15;
      *(_DWORD *)(v13 + 12) = v16;
      do
      {
        int v17 = *((_DWORD *)v12 + 5);
        v12 += 2;
      }
      while (v17 < (int)v6);
      do
      {
        int v18 = *(_DWORD *)(v13 - 12);
        v13 -= 16;
      }
      while (v18 >= (int)v6);
    }
    while ((unint64_t)v12 < v13);
  }
  if (v12 - 2 != a1)
  {
    *a1 = *(v12 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v12 - 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)v12 - 1);
  }
  *(v12 - 2) = v3;
  *((_DWORD *)v12 - 2) = v4;
  *((_DWORD *)v12 - 1) = v5;
  return v12 - 2;
}

BOOL sub_10007253C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 4))
      {
        uint64_t v6 = *(void *)a1;
        int v7 = *(_DWORD *)(a1 + 8);
        int v8 = *(_DWORD *)(a1 + 12);
        *(void *)a1 = *(void *)(a2 - 16);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 4);
        *(void *)(a2 - 16) = v6;
        *(_DWORD *)(a2 - 8) = v7;
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      sub_1000721DC((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a2 - 16));
      return 1;
    case 4:
      sub_100072724(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_100072820(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v9 = a1 + 32;
      sub_1000721DC((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)(v10 + 4) < *(_DWORD *)(v9 + 4))
    {
      uint64_t v13 = *(void *)v10;
      int v14 = *(_DWORD *)(v10 + 8);
      int v15 = *(_DWORD *)(v10 + 12);
      uint64_t v16 = HIDWORD(*(void *)v10);
      uint64_t v17 = v11;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        *(void *)(v18 + 48) = *(void *)(a1 + v17 + 32);
        *(_DWORD *)(v18 + 56) = *(_DWORD *)(a1 + v17 + 40);
        *(_DWORD *)(v18 + 6sub_10002B9D0((void **)&STACK[0x2A8], 0) = *(_DWORD *)(a1 + v17 + 44);
        if (v17 == -32) {
          break;
        }
        v17 -= 16;
        if (*(_DWORD *)(v18 + 20) <= (int)v16)
        {
          uint64_t v19 = a1 + v17 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v19 = a1;
LABEL_12:
      *(void *)uint64_t v19 = v13;
      *(_DWORD *)(v19 + 8) = v14;
      *(_DWORD *)(v19 + 12) = v15;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

float sub_100072724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000721DC((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    uint64_t v9 = *(void *)a3;
    float result = *(float *)(a3 + 8);
    int v10 = *(_DWORD *)(a3 + 12);
    *(void *)a3 = *(void *)a4;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
    *(void *)a4 = v9;
    *(float *)(a4 + 8) = result;
    *(_DWORD *)(a4 + 12) = v10;
    if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
    {
      uint64_t v11 = *(void *)a2;
      float result = *(float *)(a2 + 8);
      int v12 = *(_DWORD *)(a2 + 12);
      *(void *)a2 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
      *(void *)a3 = v11;
      *(float *)(a3 + 8) = result;
      *(_DWORD *)(a3 + 12) = v12;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        uint64_t v13 = *(void *)a1;
        float result = *(float *)(a1 + 8);
        int v14 = *(_DWORD *)(a1 + 12);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
        *(void *)a2 = v13;
        *(float *)(a2 + 8) = result;
        *(_DWORD *)(a2 + 12) = v14;
      }
    }
  }
  return result;
}

float sub_100072820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float result = sub_100072724(a1, a2, a3, a4);
  if (*(_DWORD *)(a5 + 4) < *(_DWORD *)(a4 + 4))
  {
    uint64_t v11 = *(void *)a4;
    float result = *(float *)(a4 + 8);
    int v12 = *(_DWORD *)(a4 + 12);
    *(void *)a4 = *(void *)a5;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a4 + 12) = *(_DWORD *)(a5 + 12);
    *(void *)a5 = v11;
    *(float *)(a5 + 8) = result;
    *(_DWORD *)(a5 + 12) = v12;
    if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
    {
      uint64_t v13 = *(void *)a3;
      float result = *(float *)(a3 + 8);
      int v14 = *(_DWORD *)(a3 + 12);
      *(void *)a3 = *(void *)a4;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
      *(void *)a4 = v13;
      *(float *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 12) = v14;
      if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
      {
        uint64_t v15 = *(void *)a2;
        float result = *(float *)(a2 + 8);
        int v16 = *(_DWORD *)(a2 + 12);
        *(void *)a2 = *(void *)a3;
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
        *(void *)a3 = v15;
        *(float *)(a3 + 8) = result;
        *(_DWORD *)(a3 + 12) = v16;
        if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
        {
          uint64_t v17 = *(void *)a1;
          float result = *(float *)(a1 + 8);
          int v18 = *(_DWORD *)(a1 + 12);
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(void *)a2 = v17;
          *(float *)(a2 + 8) = result;
          *(_DWORD *)(a2 + 12) = v18;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_100072968(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (uint64_t *)(a1 + 16 * v10);
      do
      {
        sub_100072B0C(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        if (*((_DWORD *)v14 + 1) < *(_DWORD *)(a1 + 4))
        {
          uint64_t v15 = *v14;
          int v16 = *((_DWORD *)v14 + 2);
          int v17 = *((_DWORD *)v14 + 3);
          *int v14 = *(void *)a1;
          *((_DWORD *)v14 + 2) = *(_DWORD *)(a1 + 8);
          *((_DWORD *)v14 + 3) = *(_DWORD *)(a1 + 12);
          *(void *)a1 = v15;
          *(_DWORD *)(a1 + 8) = v16;
          *(_DWORD *)(a1 + 12) = v17;
          sub_100072B0C(a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v18 = (unint64_t)v8 >> 4;
      uint64_t v19 = a2 - 2;
      do
      {
        uint64_t v20 = *(void *)a1;
        int v21 = *(_DWORD *)(a1 + 8);
        int v22 = *(_DWORD *)(a1 + 12);
        uint64_t v23 = sub_100072BF0(a1, a4, v18);
        if (v19 == (uint64_t *)v23)
        {
          *(void *)uint64_t v23 = v20;
          *(_DWORD *)(v23 + 8) = v21;
          *(_DWORD *)(v23 + 12) = v22;
        }
        else
        {
          *(void *)uint64_t v23 = *v19;
          *(_DWORD *)(v23 + 8) = *((_DWORD *)v19 + 2);
          *(_DWORD *)(v23 + 12) = *((_DWORD *)v19 + 3);
          uint64_t *v19 = v20;
          *((_DWORD *)v19 + 2) = v21;
          *((_DWORD *)v19 + 3) = v22;
          sub_100072C6C(a1, v23 + 16, a4, (v23 + 16 - a1) >> 4);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_100072B0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (uint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = *((_DWORD *)v8 + 1);
        int v11 = *((_DWORD *)v8 + 5);
        v8 += 2 * (v10 < v11);
        if (v10 < v11) {
          uint64_t v7 = v9;
        }
      }
      if (*((_DWORD *)v8 + 1) >= *((_DWORD *)a4 + 1))
      {
        uint64_t v12 = *a4;
        int v13 = *((_DWORD *)a4 + 2);
        int v14 = *((_DWORD *)a4 + 3);
        unint64_t v15 = HIDWORD(*a4);
        do
        {
          int v16 = a4;
          a4 = v8;
          *int v16 = *v8;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v8 + 2);
          *((_DWORD *)v16 + 3) = *((_DWORD *)v8 + 3);
          if (v5 < v7) {
            break;
          }
          uint64_t v17 = (2 * v7) | 1;
          uint64_t v8 = (uint64_t *)(result + 16 * v17);
          uint64_t v18 = 2 * v7 + 2;
          if (v18 < a3)
          {
            int v19 = *((_DWORD *)v8 + 1);
            int v20 = *((_DWORD *)v8 + 5);
            v8 += 2 * (v19 < v20);
            if (v19 < v20) {
              uint64_t v17 = v18;
            }
          }
          uint64_t v7 = v17;
        }
        while (*((_DWORD *)v8 + 1) >= (int)v15);
        *a4 = v12;
        *((_DWORD *)a4 + 2) = v13;
        *((_DWORD *)a4 + 3) = v14;
      }
    }
  }
  return result;
}

uint64_t sub_100072BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1 + 16 * (v3 + 1);
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      int v9 = *(_DWORD *)(v6 + 4);
      int v10 = *(_DWORD *)(v6 + 20);
      v6 += 16 * (v9 < v10);
      if (v9 < v10) {
        uint64_t v7 = v8;
      }
    }
    *(void *)a1 = *(void *)v6;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v6 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(v6 + 12);
    a1 = v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t sub_100072C6C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    if (*(_DWORD *)(result + 16 * v4 + 4) < *(_DWORD *)(a2 - 12))
    {
      unint64_t v7 = *(void *)(a2 - 16);
      uint64_t v5 = a2 - 16;
      unint64_t v6 = v7;
      int v8 = *(_DWORD *)(v5 + 8);
      int v9 = *(_DWORD *)(v5 + 12);
      unint64_t v10 = HIDWORD(v7);
      do
      {
        uint64_t v11 = v5;
        uint64_t v5 = result + 16 * v4;
        *(void *)uint64_t v11 = *(void *)v5;
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(v5 + 8);
        *(_DWORD *)(v11 + 12) = *(_DWORD *)(v5 + 12);
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (*(_DWORD *)(result + 16 * v4 + 4) < (int)v10);
      *(void *)uint64_t v5 = v6;
      *(_DWORD *)(v5 + 8) = v8;
      *(_DWORD *)(v5 + 12) = v9;
    }
  }
  return result;
}

uint64_t sub_100072CF0(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result == -1) {
    return result;
  }
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v6);
  uint64_t v11 = 0;
  int v12 = 0;
  unsigned int v13 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v11);
  while (1)
  {
    if (!v11)
    {
      if ((int)v13 >= v12) {
        return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 168))(a1, v5 & 0xFFFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0xFFFFFFFF0007);
      }
LABEL_8:
      uint64_t v7 = v13;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
      break;
    }
    if (!v11) {
      goto LABEL_8;
    }
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v11 + 24))();
LABEL_9:
    sub_100073070(a2, v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 216))(a1, v7);
    for (unint64_t i = a2[5]; ; a2[5] = i)
    {
      uint64_t v9 = a2[2];
      if (i >= (a2[3] - v9) >> 4) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 184))(a1, v7, v9 + 16 * i);
      unint64_t i = a2[5] + 1;
    }
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(v10);
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 160))(a1, v7, v10);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
    }
    else {
      ++v13;
    }
  }
  if (v11) {
    (*(void (**)(void))(*(void *)v11 + 8))();
  }
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 168))(a1, v5 & 0xFFFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0xFFFFFFFF0007);
}

void sub_100073030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100073070(uint64_t *a1, uint64_t a2)
{
  a1[5] = 0;
  unint64_t v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 32))(*a1);
  sub_10003074C(v4, v5);
  uint64_t v6 = *a1;
  long long v14 = 0u;
  long long v15 = 0u;
  unint64_t v16 = 0;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v6 + 120))(v6, a2, &v14);
  while (1)
  {
    if (!(void)v14)
    {
      if (v16 >= (unint64_t)v15) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v14 + 16))(v14)) {
      break;
    }
    if ((void)v14)
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v14 + 24))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = *((void *)&v14 + 1) + 16 * v16;
LABEL_8:
    unint64_t v8 = a1[3];
    if (v8 >= a1[4])
    {
      uint64_t v9 = sub_10003092C(v4, v7);
    }
    else
    {
      *(void *)unint64_t v8 = *(void *)v7;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v7 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(v7 + 12);
      uint64_t v9 = v8 + 16;
    }
    a1[3] = v9;
    if ((void)v14) {
      (*(void (**)(void))(*(void *)v14 + 32))(v14);
    }
    else {
      ++v16;
    }
  }
  if ((void)v14)
  {
    (*(void (**)(void))(*(void *)v14 + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (*((void *)&v15 + 1)) {
    --**((_DWORD **)&v15 + 1);
  }
LABEL_18:
  unint64_t v10 = (int *)a1[2];
  uint64_t v11 = (int *)a1[3];
  unint64_t v12 = 126 - 2 * __clz(((char *)v11 - (char *)v10) >> 4);
  if (v11 == v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  sub_1000732B0(v10, v11, (uint64_t)&v14, v13, 1);
}

void sub_10007328C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    sub_1000B4594();
  }
  else {
    sub_1000B457C((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

void sub_1000732B0(int *a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_1000736B0(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    uint64_t v2 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = (_DWORD *)result;
      do
      {
        char v5 = v2;
        if (v4[4] < *v4)
        {
          uint64_t v6 = *v2;
          int v7 = v4[6];
          uint64_t v8 = v3;
          int v9 = v4[7];
          while (1)
          {
            uint64_t v10 = result + v8;
            *(void *)(v10 + 16) = *(void *)(result + v8);
            *(_DWORD *)(v10 + ++*(void *)(result + 24) = *(_DWORD *)(result + v8 + 8);
            *(_DWORD *)(v10 + 28) = *(_DWORD *)(result + v8 + 12);
            if (!v8) {
              break;
            }
            v8 -= 16;
            if (*(_DWORD *)(v10 - 16) <= (int)v6)
            {
              uint64_t v11 = result + v8 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v11 = result;
LABEL_10:
          *(void *)uint64_t v11 = v6;
          *(_DWORD *)(v11 + 8) = v7;
          *(_DWORD *)(v11 + 12) = v9;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        unint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

_DWORD *sub_100073754(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 4;
    if (result + 4 != a2)
    {
      uint64_t v3 = result + 7;
      do
      {
        unint64_t v4 = v2;
        if (result[4] < *result)
        {
          uint64_t v5 = *v2;
          int v6 = result[6];
          int v7 = v3;
          int v8 = result[7];
          do
          {
            int v9 = v7;
            *(void *)(v7 - 3) = *(void *)(v7 - 7);
            *(v7 - 1) = *(v7 - 5);
            int v10 = *(v7 - 4);
            v7 -= 4;
            *int v9 = v10;
          }
          while (*(v9 - 11) > (int)v5);
          *(void *)(v7 - 3) = v5;
          *(v7 - 1) = v6;
          *int v7 = v8;
        }
        uint64_t v2 = v4 + 2;
        v3 += 4;
        uint64_t result = v4;
      }
      while (v4 + 2 != (void *)a2);
    }
  }
  return result;
}

uint64_t sub_1000737DC(uint64_t *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a3;
  if (*a2 < *(_DWORD *)a1)
  {
    uint64_t v5 = *a1;
    int v6 = *((_DWORD *)a1 + 2);
    int v7 = *((_DWORD *)a1 + 3);
    if (v4 < v3)
    {
      *a1 = *(void *)a3;
      *((_DWORD *)a1 + 2) = a3[2];
      *((_DWORD *)a1 + 3) = a3[3];
      *(void *)a3 = v5;
      a3[2] = v6;
      a3[3] = v7;
      return 1;
    }
    *a1 = *(void *)a2;
    *((_DWORD *)a1 + 2) = a2[2];
    *((_DWORD *)a1 + 3) = a2[3];
    *(void *)a2 = v5;
    a2[2] = v6;
    a2[3] = v7;
    if (*a3 >= (int)v5) {
      return 1;
    }
    *(void *)a2 = *(void *)a3;
    a2[2] = a3[2];
    a2[3] = a3[3];
    *(void *)a3 = v5;
    a3[2] = v6;
    a3[3] = v7;
    return 2;
  }
  if (v4 < v3)
  {
    uint64_t v8 = *(void *)a2;
    int v9 = a2[2];
    int v10 = a2[3];
    *(void *)a2 = *(void *)a3;
    a2[2] = a3[2];
    a2[3] = a3[3];
    *(void *)a3 = v8;
    a3[2] = v9;
    a3[3] = v10;
    if (*a2 >= *(_DWORD *)a1) {
      return 1;
    }
    uint64_t v11 = *a1;
    int v12 = *((_DWORD *)a1 + 2);
    int v13 = *((_DWORD *)a1 + 3);
    *a1 = *(void *)a2;
    *((_DWORD *)a1 + 2) = a2[2];
    *((_DWORD *)a1 + 3) = a2[3];
    *(void *)a2 = v11;
    a2[2] = v12;
    a2[3] = v13;
    return 2;
  }
  return 0;
}

_DWORD *sub_100073914(_DWORD *a1, unint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (*(_DWORD *)(a2 - 16) <= (int)*(void *)a1)
  {
    uint64_t v5 = a1 + 4;
    do
    {
      int v3 = v5;
      if ((unint64_t)v5 >= a2) {
        break;
      }
      v5 += 4;
    }
    while (*v3 <= (int)v2);
  }
  else
  {
    int v3 = a1;
    do
    {
      int v4 = v3[4];
      v3 += 4;
    }
    while (v4 <= (int)v2);
  }
  if ((unint64_t)v3 < a2)
  {
    do
    {
      int v6 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
    }
    while (v6 > (int)v2);
  }
  int v7 = a1[2];
  int v8 = a1[3];
  while ((unint64_t)v3 < a2)
  {
    uint64_t v9 = *(void *)v3;
    int v10 = v3[2];
    int v11 = v3[3];
    *(void *)int v3 = *(void *)a2;
    _OWORD v3[2] = *(_DWORD *)(a2 + 8);
    v3[3] = *(_DWORD *)(a2 + 12);
    *(void *)a2 = v9;
    *(_DWORD *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 12) = v11;
    do
    {
      int v12 = v3[4];
      v3 += 4;
    }
    while (v12 <= (int)v2);
    do
    {
      int v13 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
    }
    while (v13 > (int)v2);
  }
  if (v3 - 4 != a1)
  {
    *(void *)a1 = *((void *)v3 - 2);
    a1[2] = *(v3 - 2);
    a1[3] = *(v3 - 1);
  }
  *((void *)v3 - 2) = v2;
  *(v3 - 2) = v7;
  *(v3 - 1) = v8;
  return v3;
}

uint64_t *sub_100073A00(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *((_DWORD *)a1 + 3);
  do
  {
    int v6 = a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < (int)v3);
  unint64_t v7 = (unint64_t)&a1[v2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      int v9 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
    }
    while (v9 >= (int)v3);
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
    }
    while (v8 >= (int)v3);
  }
  int v10 = &a1[v2];
  if (v7 < a2)
  {
    unint64_t v11 = a2;
    do
    {
      uint64_t v12 = *v10;
      int v13 = *((_DWORD *)v10 + 2);
      int v14 = *((_DWORD *)v10 + 3);
      *int v10 = *(void *)v11;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(v11 + 8);
      *((_DWORD *)v10 + 3) = *(_DWORD *)(v11 + 12);
      *(void *)unint64_t v11 = v12;
      *(_DWORD *)(v11 + 8) = v13;
      *(_DWORD *)(v11 + 12) = v14;
      do
      {
        int v15 = *((_DWORD *)v10 + 4);
        v10 += 2;
      }
      while (v15 < (int)v3);
      do
      {
        int v16 = *(_DWORD *)(v11 - 16);
        v11 -= 16;
      }
      while (v16 >= (int)v3);
    }
    while ((unint64_t)v10 < v11);
  }
  if (v10 - 2 != a1)
  {
    *a1 = *(v10 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v10 - 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)v10 - 1);
  }
  *(v10 - 2) = v3;
  *((_DWORD *)v10 - 2) = v4;
  *((_DWORD *)v10 - 1) = v5;
  return v10 - 2;
}

BOOL sub_100073AF4(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 4) < *(_DWORD *)a1)
      {
        uint64_t v6 = *(void *)a1;
        int v7 = *(_DWORD *)(a1 + 8);
        int v8 = *(_DWORD *)(a1 + 12);
        *(void *)a1 = *((void *)a2 - 2);
        *(_DWORD *)(a1 + 8) = *(a2 - 2);
        *(_DWORD *)(a1 + 12) = *(a2 - 1);
        *((void *)a2 - 2) = v6;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_1000737DC((uint64_t *)a1, (int *)(a1 + 16), a2 - 4);
      return 1;
    case 4:
      sub_100073CD8(a1, (uint64_t *)(a1 + 16), (int *)(a1 + 32), (uint64_t *)a2 - 2);
      return 1;
    case 5:
      sub_100073DD4(a1, a1 + 16, (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 48), (uint64_t *)a2 - 2);
      return 1;
    default:
      int v9 = (_DWORD *)(a1 + 32);
      sub_1000737DC((uint64_t *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      int v10 = (_DWORD *)(a1 + 48);
      if ((_DWORD *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (*v10 < *v9)
    {
      uint64_t v13 = *(void *)v10;
      int v14 = v10[2];
      uint64_t v15 = v11;
      int v16 = v10[3];
      while (1)
      {
        uint64_t v17 = a1 + v15;
        *(void *)(v17 + 48) = *(void *)(a1 + v15 + 32);
        *(_DWORD *)(v17 + 56) = *(_DWORD *)(a1 + v15 + 40);
        *(_DWORD *)(v17 + 6sub_10002B9D0((void **)&STACK[0x2A8], 0) = *(_DWORD *)(a1 + v15 + 44);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (*(_DWORD *)(v17 + 16) <= (int)v13)
        {
          uint64_t v18 = a1 + v15 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v13;
      *(_DWORD *)(v18 + 8) = v14;
      *(_DWORD *)(v18 + 12) = v16;
      if (++v12 == 8) {
        return v10 + 4 == a2;
      }
    }
    int v9 = v10;
    v11 += 16;
    v10 += 4;
    if (v10 == a2) {
      return 1;
    }
  }
}

float sub_100073CD8(uint64_t a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  sub_1000737DC((uint64_t *)a1, (int *)a2, a3);
  if (*(_DWORD *)a4 < *a3)
  {
    uint64_t v9 = *(void *)a3;
    float result = *((float *)a3 + 2);
    int v10 = a3[3];
    *(void *)a3 = *a4;
    a3[2] = *((_DWORD *)a4 + 2);
    a3[3] = *((_DWORD *)a4 + 3);
    *a4 = v9;
    *((float *)a4 + 2) = result;
    *((_DWORD *)a4 + 3) = v10;
    if (*a3 < *(_DWORD *)a2)
    {
      uint64_t v11 = *a2;
      float result = *((float *)a2 + 2);
      int v12 = *((_DWORD *)a2 + 3);
      *a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = a3[2];
      *((_DWORD *)a2 + 3) = a3[3];
      *(void *)a3 = v11;
      *((float *)a3 + 2) = result;
      a3[3] = v12;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        uint64_t v13 = *(void *)a1;
        float result = *(float *)(a1 + 8);
        int v14 = *(_DWORD *)(a1 + 12);
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
        *a2 = v13;
        *((float *)a2 + 2) = result;
        *((_DWORD *)a2 + 3) = v14;
      }
    }
  }
  return result;
}

float sub_100073DD4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  float result = sub_100073CD8(a1, (uint64_t *)a2, (int *)a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    uint64_t v11 = *a4;
    float result = *((float *)a4 + 2);
    int v12 = *((_DWORD *)a4 + 3);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = *((_DWORD *)a5 + 2);
    *((_DWORD *)a4 + 3) = *((_DWORD *)a5 + 3);
    *a5 = v11;
    *((float *)a5 + 2) = result;
    *((_DWORD *)a5 + 3) = v12;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      uint64_t v13 = *a3;
      float result = *((float *)a3 + 2);
      int v14 = *((_DWORD *)a3 + 3);
      *a3 = *a4;
      *((_DWORD *)a3 + 2) = *((_DWORD *)a4 + 2);
      *((_DWORD *)a3 + 3) = *((_DWORD *)a4 + 3);
      *a4 = v13;
      *((float *)a4 + 2) = result;
      *((_DWORD *)a4 + 3) = v14;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        uint64_t v15 = *(void *)a2;
        float result = *(float *)(a2 + 8);
        int v16 = *(_DWORD *)(a2 + 12);
        *(void *)a2 = *a3;
        *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
        *(_DWORD *)(a2 + 12) = *((_DWORD *)a3 + 3);
        *a3 = v15;
        *((float *)a3 + 2) = result;
        *((_DWORD *)a3 + 3) = v16;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          uint64_t v17 = *(void *)a1;
          float result = *(float *)(a1 + 8);
          int v18 = *(_DWORD *)(a1 + 12);
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(void *)a2 = v17;
          *(float *)(a2 + 8) = result;
          *(_DWORD *)(a2 + 12) = v18;
        }
      }
    }
  }
  return result;
}

int *sub_100073F1C(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[4 * v10];
      do
      {
        sub_1000740C0((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        if (*v14 < *a1)
        {
          uint64_t v15 = *(void *)v14;
          int v16 = v14[2];
          int v17 = v14[3];
          *(void *)int v14 = *(void *)a1;
          v14[2] = a1[2];
          std::locale v14[3] = a1[3];
          *(void *)a1 = v15;
          a1[2] = v16;
          a1[3] = v17;
          sub_1000740C0((uint64_t)a1, a4, v9, a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v18 = (unint64_t)v8 >> 4;
      int v19 = a2 - 4;
      do
      {
        uint64_t v20 = *(void *)a1;
        int v21 = a1[2];
        int v22 = a1[3];
        BOOL v23 = sub_1000741B0(a1, a4, v18);
        if (v19 == v23)
        {
          *(void *)BOOL v23 = v20;
          v23[2] = v21;
          void v23[3] = v22;
        }
        else
        {
          *(void *)BOOL v23 = *(void *)v19;
          v23[2] = v19[2];
          void v23[3] = v19[3];
          *(void *)int v19 = v20;
          _OWORD v19[2] = v21;
          v19[3] = v22;
          sub_10007422C((uint64_t)a1, (uint64_t)(v23 + 4), a4, ((char *)(v23 + 4) - (char *)a1) >> 4);
        }
        v19 -= 4;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1000740C0(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (int *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        int v10 = *v8;
      }
      else
      {
        int v10 = *v8;
        int v11 = v8[4];
        if (*v8 <= v11) {
          int v10 = v8[4];
        }
        if (*v8 < v11)
        {
          v8 += 4;
          uint64_t v7 = v9;
        }
      }
      if (v10 >= *a4)
      {
        uint64_t v12 = *(void *)a4;
        int v13 = a4[2];
        int v14 = a4[3];
        do
        {
          uint64_t v15 = a4;
          a4 = v8;
          *(void *)uint64_t v15 = *(void *)v8;
          void v15[2] = v8[2];
          v15[3] = v8[3];
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (int *)(result + 16 * v16);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            int v17 = *v8;
            uint64_t v7 = v16;
          }
          else
          {
            int v17 = *v8;
            int v18 = v8[4];
            if (*v8 <= v18) {
              int v17 = v8[4];
            }
            if (*v8 >= v18) {
              uint64_t v7 = v16;
            }
            else {
              v8 += 4;
            }
          }
        }
        while (v17 >= (int)v12);
        *(void *)a4 = v12;
        a4[2] = v13;
        a4[3] = v14;
      }
    }
  }
  return result;
}

_DWORD *sub_1000741B0(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[4 * v3 + 4];
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      int v9 = *v6;
      int v10 = v6[4];
      if (*v6 < v10) {
        v6 += 4;
      }
      if (v9 < v10) {
        uint64_t v7 = v8;
      }
    }
    *(void *)a1 = *(void *)v6;
    a1[2] = v6[2];
    a1[3] = v6[3];
    a1 = v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t sub_10007422C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = result + 16 * (v4 >> 1);
    uint64_t v7 = a2 - 16;
    if (*(_DWORD *)v6 < *(_DWORD *)(a2 - 16))
    {
      uint64_t v8 = *(void *)(a2 - 16);
      int v9 = *(_DWORD *)(a2 - 8);
      int v10 = *(_DWORD *)(a2 - 4);
      do
      {
        uint64_t v11 = v7;
        uint64_t v7 = v6;
        *(void *)uint64_t v11 = *(void *)v6;
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(v6 + 8);
        *(_DWORD *)(v11 + 12) = *(_DWORD *)(v6 + 12);
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = result + 16 * v5;
      }
      while (*(_DWORD *)v6 < (int)v8);
      *(void *)uint64_t v7 = v8;
      *(_DWORD *)(v7 + 8) = v9;
      *(_DWORD *)(v7 + 12) = v10;
    }
  }
  return result;
}

void sub_1000742A8()
{
}

void sub_1000743E0()
{
}

uint64_t sub_100074494(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  *(void *)a1 = off_1000F1318;
  if (!a6) {
    operator new();
  }
  *(void *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 2sub_10002B9D0((void **)&STACK[0x2A8], 0) = a4;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = -1;
  *(unsigned char *)(a1 + 56) = 0;
  if (a3 == 3)
  {
    if (byte_1000FE8F0) {
      sub_100009CF0(__p, "FATAL");
    }
    else {
      sub_100009CF0(__p, "ERROR");
    }
    sub_10002D454(&v17, (uint64_t)__p);
    sub_10002D07C(&std::cerr, (uint64_t)"RhoMatcher: Bad match type", 26);
    sub_10002D500(&v17);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 16) = 4;
    *(unsigned char *)(a1 + 48) = 1;
  }
  if (!a4)
  {
    if (byte_1000FE8F0) {
      sub_100009CF0(v12, "FATAL");
    }
    else {
      sub_100009CF0(v12, "ERROR");
    }
    sub_10002D454(&v14, (uint64_t)v12);
    sub_10002D07C(&std::cerr, (uint64_t)"RhoMatcher: 0 cannot be used as rho_label", 41);
    sub_10002D500(&v14);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    *(_DWORD *)(a1 + 2sub_10002B9D0((void **)&STACK[0x2A8], 0) = -1;
    *(unsigned char *)(a1 + 48) = 1;
  }
  if (a5 == 1)
  {
    BOOL v10 = 1;
  }
  else
  {
    if (a5)
    {
      *(unsigned char *)(a1 + ++*(void *)(result + 24) = 0;
      return a1;
    }
    BOOL v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, 0x10000, 1) != 0;
  }
  *(unsigned char *)(a1 + ++*(void *)(result + 24) = v10;
  return a1;
}

void sub_1000746CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v26 = *(void *)(v24 + 8);
  *(void *)(v24 + 8) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007478C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 72))(a2, 0);
  sub_100077D40(a1, v7, a3, a4);
}

void *sub_100074830(void *a1)
{
  *a1 = off_1000F0FD0;
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  *a1 = off_1000F1318;
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1000748E8(void *a1)
{
  *a1 = off_1000F0FD0;
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  *a1 = off_1000F1318;
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  operator delete();
}

void sub_1000749C0()
{
}

void sub_100074A38()
{
}

uint64_t sub_100074A5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t sub_100074A84(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 52) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 52) = a2;
    float result = sub_1000774BC(*(void *)(result + 8), a2);
    *(unsigned char *)(v2 + 56) = *(_DWORD *)(v2 + 20) != -1;
  }
  return result;
}

BOOL sub_100074ACC(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 20);
  if (v3 != a2 || v3 == -1)
  {
    BOOL result = sub_100077548(*(void *)(a1 + 8), a2);
    if (result)
    {
      *(_DWORD *)(a1 + 28) = -1;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD) {
        return result;
      }
      if (!*(unsigned char *)(a1 + 56)) {
        return result;
      }
      BOOL result = sub_100077548(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
      *(unsigned char *)(a1 + 56) = result;
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 28) = a2;
    }
    return 1;
  }
  if (byte_1000FE8F0) {
    sub_100009CF0(__p, "FATAL");
  }
  else {
    sub_100009CF0(__p, "ERROR");
  }
  sub_10002D454(&v9, (uint64_t)__p);
  sub_10002D07C(&std::cerr, (uint64_t)"RhoMatcher::Find: bad label (rho)", 33);
  sub_10002D500(&v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  BOOL result = 0;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

void sub_100074BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100074C14(uint64_t a1)
{
  return sub_100076500(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 8));
}

void *sub_100074C24(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 28);
  BOOL result = sub_10007769C(*(void *)(a1 + 8));
  unint64_t v4 = result;
  if (v2 != -1)
  {
    uint64_t v5 = *result;
    *(void *)(a1 + 32) = *result;
    BOOL result = (void *)(a1 + 32);
    *(_DWORD *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = *((_DWORD *)v4 + 2);
    *(_DWORD *)(a1 + 44) = *((_DWORD *)v4 + 3);
    if (!*(unsigned char *)(a1 + 24))
    {
      int v7 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 16) == 1)
      {
        *(_DWORD *)BOOL result = v7;
        return result;
      }
      goto LABEL_10;
    }
    int v6 = *(_DWORD *)(a1 + 20);
    if (v6 == v5) {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 28);
    }
    if (v6 == HIDWORD(v5))
    {
      int v7 = *(_DWORD *)(a1 + 28);
LABEL_10:
      *(_DWORD *)(a1 + 36) = v7;
    }
  }
  return result;
}

BOOL sub_100074CCC(uint64_t a1)
{
  return sub_100077744(*(void *)(a1 + 8));
}

uint64_t sub_100074CD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

uint64_t sub_100074CFC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
  if (*(unsigned char *)(a1 + 48)) {
    result |= 4uLL;
  }
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 4)
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int8 *)(a1 + 24);
      unint64_t v5 = result & 0xFFFFEFFF3FFAFFFFLL;
      unint64_t v6 = 0xFFFFEFFF0FF3FFFFLL;
LABEL_8:
      unint64_t v7 = result & v6;
      if (v4) {
        return v7;
      }
      else {
        return v5;
      }
    }
    if (v3 == 1)
    {
      int v4 = *(unsigned __int8 *)(a1 + 24);
      unint64_t v5 = result & 0xFFFFEFFFCFEEFFFFLL;
      unint64_t v6 = 0xFFFFEFFF0FCFFFFFLL;
      goto LABEL_8;
    }
    if (byte_1000FE8F0) {
      sub_100009CF0(__p, "FATAL");
    }
    else {
      sub_100009CF0(__p, "ERROR");
    }
    sub_10002D454(&v10, (uint64_t)__p);
    sub_10002D07C(&std::cerr, (uint64_t)"RhoMatcher: Bad match type: ", 28);
    std::ostream::operator<<();
    sub_10002D500(&v10);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_100074E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100074E80(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) != -1 && *(_DWORD *)(a1 + 16) != 4) {
    return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8)) | 1;
  }
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 88);
  return v1();
}

int *sub_100074F14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  return sub_100075B60(*(void *)(*(void *)(a1 + 8) + 8), a2, a3);
}

uint64_t sub_100074F20(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 52) = a2;
  sub_1000774BC(*(void *)(a1 + 8), a2);
  BOOL v4 = sub_100077548(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
  *(unsigned char *)(a1 + 56) = v4;
  if (v4) {
    return -1;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  return sub_1000779DC(v6, a2);
}

uint64_t sub_100074F8C(uint64_t a1, uint64_t a2, int a3, int a4, char a5, int a6, uint64_t a7)
{
  *(void *)a1 = off_1000F1090;
  if (!a7) {
    operator new();
  }
  *(void *)(a1 + 8) = a7;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 2sub_10002B9D0((void **)&STACK[0x2A8], 0) = a4;
  *(_DWORD *)(a1 + 48) = -1;
  *(unsigned char *)(a1 + 56) = a5;
  *(unsigned char *)(a1 + 57) = 0;
  if (a3 == 3)
  {
    if (byte_1000FE8F0) {
      sub_100009CF0(__p, "FATAL");
    }
    else {
      sub_100009CF0(__p, "ERROR");
    }
    sub_10002D454(&v14, (uint64_t)__p);
    sub_10002D07C(&std::cerr, (uint64_t)"PhiMatcher: Bad match type", 26);
    sub_10002D500(&v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 16) = 4;
    *(unsigned char *)(a1 + 57) = 1;
  }
  if (a6 == 1)
  {
    BOOL v10 = 1;
  }
  else
  {
    if (a6)
    {
      *(unsigned char *)(a1 + ++*(void *)(result + 24) = 0;
      return a1;
    }
    BOOL v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, 0x10000, 1) != 0;
  }
  *(unsigned char *)(a1 + ++*(void *)(result + 24) = v10;
  return a1;
}

void sub_100075138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v20 = *(void *)(v18 + 8);
  *(void *)(v18 + 8) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000751C8(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = off_1000F1090;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_100075234(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = off_1000F1090;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  operator delete();
}

void sub_1000752C0()
{
}

void sub_100075318()
{
}

uint64_t sub_10007533C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t sub_100075364(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 48) != a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    uint64_t result = sub_10007629C(*(void *)(result + 8), a2);
    *(_DWORD *)(v3 + 48) = v2;
    *(unsigned char *)(v3 + 25) = *(_DWORD *)(v3 + 20) != -1;
  }
  return result;
}

BOOL sub_1000753B0(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 20) == a2 && (a2 + 1) >= 2)
  {
    if (byte_1000FE8F0) {
      sub_100009CF0(v22, "FATAL");
    }
    else {
      sub_100009CF0(v22, "ERROR");
    }
    sub_10002D454((BOOL *)__p, (uint64_t)v22);
    sub_10002D07C(&std::cerr, (uint64_t)"PhiMatcher::Find: bad label (phi): ", 35);
    std::ostream::operator<<();
    sub_10002D500(__p);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    BOOL v6 = 0;
    *(unsigned char *)(a1 + 57) = 1;
    return v6;
  }
  sub_10007629C(*(void *)(a1 + 8), *(unsigned int *)(a1 + 48));
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 52) = *sub_10002D854();
  if (*(_DWORD *)(a1 + 20)) {
    goto LABEL_6;
  }
  if (a2 == -1) {
    return 0;
  }
  if (!a2)
  {
    if (!sub_100076484(*(void *)(a1 + 8), -1))
    {
      uint64_t v15 = *(void *)(a1 + 8);
      int v16 = 0;
      goto LABEL_42;
    }
    *(_DWORD *)(a1 + 28) = 0;
    return 1;
  }
LABEL_6:
  if ((a2 + 1) >= 2 && *(unsigned char *)(a1 + 25))
  {
    LODWORD(v5) = *(_DWORD *)(a1 + 48);
    BOOL v6 = 1;
    if (!sub_100076484(*(void *)(a1 + 8), a2))
    {
      while (1)
      {
        if (*(_DWORD *)(a1 + 20)) {
          int v7 = *(_DWORD *)(a1 + 20);
        }
        else {
          int v7 = -1;
        }
        BOOL v6 = sub_100076484(*(void *)(a1 + 8), v7);
        if (!v6) {
          return v6;
        }
        if (*(unsigned char *)(a1 + 56) && *(_DWORD *)(sub_1000765DC(*(void *)(a1 + 8)) + 12) == v5)
        {
          *(_DWORD *)(a1 + 28) = a2;
          return 1;
        }
        uint64_t v8 = sub_1000765DC(*(void *)(a1 + 8));
        float v9 = *(float *)(a1 + 52);
        if (v9 == -INFINITY || (float v10 = *(float *)(v8 + 8), v10 >= -INFINITY) && v10 <= -INFINITY)
        {
          float v11 = *(float *)sub_10006ECE4();
        }
        else
        {
          BOOL v12 = v10 == INFINITY || v9 == INFINITY;
          float v11 = v9 + v10;
          if (v12) {
            float v11 = INFINITY;
          }
        }
        *(float *)(a1 + 52) = v11;
        uint64_t v5 = *(unsigned int *)(sub_1000765DC(*(void *)(a1 + 8)) + 12);
        sub_100076698(*(void *)(a1 + 8));
        if (!sub_100076500(*(void *)(a1 + 8))) {
          break;
        }
LABEL_35:
        sub_10007629C(*(void *)(a1 + 8), v5);
        if (sub_100076484(*(void *)(a1 + 8), a2)) {
          return v6;
        }
      }
      int v13 = byte_1000FE8F0;
      if (byte_1000FE8F0)
      {
        sub_100009CF0(v22, "FATAL");
        sub_10002D454(&v21, (uint64_t)v22);
      }
      else
      {
        sub_100009CF0(__p, "ERROR");
        sub_10002D454(&v20, (uint64_t)__p);
      }
      sub_10002D07C(&std::cerr, (uint64_t)"PhiMatcher: Phi non-determinism not supported", 45);
      if (v13)
      {
        sub_10002D500(&v21);
        if (v23 < 0)
        {
          BOOL v14 = v22[0];
LABEL_33:
          operator delete(v14);
        }
      }
      else
      {
        sub_10002D500(&v20);
        if (v19 < 0)
        {
          BOOL v14 = __p[0];
          goto LABEL_33;
        }
      }
      *(unsigned char *)(a1 + 57) = 1;
      goto LABEL_35;
    }
    return v6;
  }
  uint64_t v15 = *(void *)(a1 + 8);
  int v16 = a2;
LABEL_42:
  return sub_100076484(v15, v16);
}

void sub_1000756F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100075760(uint64_t a1)
{
  return sub_100076500(*(void *)(a1 + 8));
}

uint64_t sub_100075768(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 28);
  if (v2 != -1)
  {
    if (v2)
    {
LABEL_3:
      uint64_t v3 = sub_1000765DC(*(void *)(a1 + 8));
      *(void *)(a1 + 32) = *(void *)v3;
      BOOL v4 = (_DWORD *)(a1 + 32);
      float v5 = *(float *)(v3 + 8);
      *(float *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = v5;
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(v3 + 12);
      float v6 = *(float *)(a1 + 52);
      if (v6 == -INFINITY || v5 >= -INFINITY && v5 <= -INFINITY)
      {
        float v7 = *(float *)sub_10006ECE4();
      }
      else
      {
        BOOL v10 = v5 == INFINITY || v6 == INFINITY;
        float v7 = v6 + v5;
        if (v10) {
          float v7 = INFINITY;
        }
      }
      *(float *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = v7;
      int v11 = *(_DWORD *)(a1 + 28);
      if (v11 == -1) {
        return (uint64_t)v4;
      }
      if (*(unsigned char *)(a1 + 24))
      {
        int v12 = *(_DWORD *)(a1 + 20);
        if (*(_DWORD *)(a1 + 32) == v12) {
          _DWORD *v4 = v11;
        }
        if (*(_DWORD *)(a1 + 36) != v12) {
          return (uint64_t)v4;
        }
      }
      else if (*(_DWORD *)(a1 + 16) == 1)
      {
        _DWORD *v4 = v11;
        return (uint64_t)v4;
      }
      *(_DWORD *)(a1 + 36) = v11;
      return (uint64_t)v4;
    }
LABEL_23:
    int v13 = *sub_10002D854();
    *(void *)(a1 + 32) = 0xFFFFFFFFLL;
    BOOL v14 = (_DWORD *)(a1 + 32);
    int v15 = v14[4];
    BOOL v4 = v14;
    v14[2] = v13;
    std::locale v14[3] = v15;
    if (*(v14 - 4) == 2) {
      *(void *)BOOL v14 = 0xFFFFFFFF00000000;
    }
    return (uint64_t)v4;
  }
  if (*(float *)(a1 + 52) != *(float *)sub_10002D854())
  {
    if (*(_DWORD *)(a1 + 28)) {
      goto LABEL_3;
    }
    goto LABEL_23;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  return sub_1000765DC(v8);
}

uint64_t sub_1000758F8(uint64_t a1)
{
  return sub_100076698(*(void *)(a1 + 8));
}

uint64_t sub_100075900(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

uint64_t sub_100075928(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
  if (*(unsigned char *)(a1 + 57)) {
    result |= 4uLL;
  }
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 4)
  {
    if (v3 == 2)
    {
      if (*(_DWORD *)(a1 + 20)) {
        uint64_t v5 = result;
      }
      else {
        uint64_t v5 = result | 0x8800000;
      }
      int v6 = *(unsigned __int8 *)(a1 + 24);
      unint64_t v7 = v5 & 0xFFFFEFFF0FFAFFFFLL;
      unint64_t v4 = 0xFFFFEFFF0FF3FFFFLL;
      goto LABEL_14;
    }
    if (v3 == 1)
    {
      unint64_t v4 = 0xFFFFEFFF0FCFFFFFLL;
      if (*(_DWORD *)(a1 + 20)) {
        uint64_t v5 = result;
      }
      else {
        uint64_t v5 = result | 0x2800000;
      }
      int v6 = *(unsigned __int8 *)(a1 + 24);
      unint64_t v7 = v5 & 0xFFFFEFFF0FEEFFFFLL;
LABEL_14:
      unint64_t v8 = v5 & v4;
      if (v6) {
        return v8;
      }
      else {
        return v7;
      }
    }
    if (byte_1000FE8F0) {
      sub_100009CF0(__p, "FATAL");
    }
    else {
      sub_100009CF0(__p, "ERROR");
    }
    sub_10002D454(&v11, (uint64_t)__p);
    sub_10002D07C(&std::cerr, (uint64_t)"PhiMatcher: Bad match type: ", 28);
    std::ostream::operator<<();
    sub_10002D500(&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_100075A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100075ACC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) != -1 && *(_DWORD *)(a1 + 16) != 4) {
    return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8)) | 1;
  }
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 88);
  return v1();
}

int *sub_100075B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
  uint64_t result = (int *)(*(void *(**)(char *__return_ptr))(*(void *)v6 + 24))((char *)&v19 + 4);
  if (*(_DWORD *)(a1 + 20) == -1)
  {
    float v8 = *((float *)&v19 + 1);
  }
  else
  {
    uint64_t result = sub_10002D8A8();
    float v8 = *((float *)&v19 + 1);
    LODWORD(v21) = HIDWORD(v19);
    float v20 = 0.0;
    float v20 = *(float *)result;
    if (*((float *)&v19 + 1) == v20)
    {
      HIDWORD(v19) = *sub_10002D854();
      while (1)
      {
        sub_10007629C(*(void *)(a1 + 8), a2);
        uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 24))(&v19);
        char v10 = sub_10002D8A8();
        LODWORD(v21) = v19;
        float v20 = 0.0;
        float v20 = *(float *)v10;
        v11.n128_u32[0] = v19;
        if (*(float *)&v19 != v20) {
          break;
        }
        int v12 = *(_DWORD *)(a1 + 20) ? *(_DWORD *)(a1 + 20) : -1;
        if (!sub_100076484(*(void *)(a1 + 8), v12)) {
          break;
        }
        uint64_t v13 = sub_1000765DC(*(void *)(a1 + 8));
        if (*((float *)&v19 + 1) == -INFINITY || (float v14 = *(float *)(v13 + 8), v14 >= -INFINITY) && v14 <= -INFINITY)
        {
          float v15 = *(float *)sub_10006ECE4();
        }
        else
        {
          BOOL v16 = v14 == INFINITY || *((float *)&v19 + 1) == INFINITY;
          float v15 = *((float *)&v19 + 1) + v14;
          if (v16) {
            float v15 = INFINITY;
          }
        }
        *((float *)&v19 + 1) = v15;
        if (a2 == *(_DWORD *)(sub_1000765DC(*(void *)(a1 + 8)) + 12))
        {
          uint64_t result = sub_10002D8A8();
          goto LABEL_26;
        }
        a2 = *(unsigned int *)(sub_1000765DC(*(void *)(a1 + 8)) + 12);
      }
      uint64_t v17 = (*(uint64_t (**)(void, __n128))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), v11);
      uint64_t result = (int *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v17 + 24))(&v21);
      if (*((float *)&v19 + 1) == -INFINITY || *(float *)&v21 >= -INFINITY && *(float *)&v21 <= -INFINITY)
      {
        uint64_t result = sub_10006ECE4();
LABEL_26:
        float v8 = *(float *)result;
        goto LABEL_32;
      }
      BOOL v18 = *(float *)&v21 == INFINITY || *((float *)&v19 + 1) == INFINITY;
      float v8 = *((float *)&v19 + 1) + *(float *)&v21;
      if (v18) {
        float v8 = INFINITY;
      }
    }
  }
LABEL_32:
  *a3 = v8;
  return result;
}

uint64_t sub_100075E14(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v3 != -1)
  {
    sub_10007629C(v4, a2);
    if (*(_DWORD *)(a1 + 20)) {
      int v5 = *(_DWORD *)(a1 + 20);
    }
    else {
      int v5 = -1;
    }
    if (sub_100076484(*(void *)(a1 + 8), v5)) {
      return -1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  unint64_t v7 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 72))(v4) + 32);
  return v7();
}

uint64_t sub_100075ED4()
{
  return 0;
}

uint64_t sub_100075EDC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 24);
  return v1();
}

void sub_100075F5C(void *a1)
{
  *a1 = off_1000F1090;
  operator new();
}

void sub_100075FF8()
{
}

void sub_10007601C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_1000F1128;
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 72))(*(void *)(a2 + 16), a3);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + ++*(void *)(result + 24) = -1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = -1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(void *)(a1 + 88) = off_1000F1218;
  sub_1000769DC((void *)(a1 + 96), 1);
}

void sub_100076118(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    sub_1000C2C18(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100076138(void *a1)
{
  sub_100076B34(a1);
  operator delete();
}

void sub_100076170()
{
}

void sub_1000761C8()
{
}

uint64_t sub_1000761EC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 4) {
    return 4;
  }
  if (v2 == 1) {
    uint64_t v6 = 0x10000000;
  }
  else {
    uint64_t v6 = 0x40000000;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v2 == 1) {
    uint64_t v8 = 805306368;
  }
  else {
    uint64_t v8 = 3221225472;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 56))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 40);
  }
  uint64_t v10 = 0x80000000;
  if (v2 == 1) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 4;
  }
  else {
    return 5;
  }
}

uint64_t sub_10007629C(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + ++*(void *)(result + 24) = a2;
    if (*(_DWORD *)(result + 40) == 4)
    {
      if (byte_1000FE8F0) {
        sub_100009CF0(__p, "FATAL");
      }
      else {
        sub_100009CF0(__p, "ERROR");
      }
      sub_10002D454(&v8, (uint64_t)__p);
      sub_10002D07C(&std::cerr, (uint64_t)"SortedMatcher: Bad match type", 29);
      sub_10002D500(&v8);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(v3 + 82) = 1;
    }
    sub_100076BFC(*(void *)(v3 + 32), v3 + 88);
    uint64_t v4 = *(void **)(v3 + 144);
    if (v4)
    {
      *(void *)(v3 + 144) = v4[5];
    }
    else
    {
      uint64_t v4 = (void *)sub_100076C78((void *)(v3 + 96), 1);
      void v4[5] = 0;
    }
    uint64_t v5 = *(void *)(v3 + 16);
    void v4[4] = 0;
    *(_OWORD *)uint64_t v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v5 + 120))(v5, a2, v4);
    *(void *)(v3 + 32) = v4;
    if (*v4) {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v4 + 72))(*v4, 16, 16);
    }
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 16) + 32))(*(void *)(v3 + 16), a2);
    *(void *)(v3 + 56) = result;
    *(_DWORD *)(v3 + 76) = a2;
  }
  return result;
}

void sub_10007644C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100076484(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 81) = 1;
  if (*(unsigned char *)(a1 + 82))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
    *(_DWORD *)(a1 + 48) = -1;
  }
  else
  {
    *(unsigned char *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = a2 == 0;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    *(_DWORD *)(a1 + 48) = v4;
    return sub_100076D6C(a1) || *(unsigned char *)(a1 + 80) != 0;
  }
  return result;
}

BOOL sub_100076500(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80)) {
    return 0;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (*v3)
  {
    if ((*(uint64_t (**)(void))(*(void *)*v3 + 16))(*v3)) {
      return 1;
    }
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 81)) {
    return 0;
  }
  uint64_t v4 = **(void **)(a1 + 32);
  if (v4)
  {
    if (*(_DWORD *)(a1 + 40) == 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = 2;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 72))(v4, v5, 15);
  }
  return sub_100076FB4(a1) != *(_DWORD *)(a1 + 48);
}

uint64_t sub_1000765DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80)) {
    return a1 + 64;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (!*v3) {
    return v3[1] + 16 * v3[4];
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 72))(*v3, 15, 15);
  uint64_t v3 = *(void **)(a1 + 32);
  if (!*v3) {
    return v3[1] + 16 * v3[4];
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)*v3 + 24);
  return v4();
}

uint64_t sub_100076698(uint64_t result)
{
  if (*(unsigned char *)(result + 80))
  {
    *(unsigned char *)(result + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  }
  else
  {
    uint64_t v1 = *(uint64_t **)(result + 32);
    BOOL result = *v1;
    if (*v1) {
      return (*(uint64_t (**)(void))(*(void *)result + 32))();
    }
    else {
      ++v1[4];
    }
  }
  return result;
}

uint64_t sub_1000766E8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1000766F0(uint64_t a1, uint64_t a2)
{
  return a2 | (4 * *(unsigned __int8 *)(a1 + 82));
}

uint64_t sub_1000766FC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 24);
  return v1();
}

uint64_t sub_10007677C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 32);
  return v1();
}

void *sub_1000767F4(void *a1)
{
  *a1 = off_1000F1218;
  a1[1] = off_1000F1240;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007685C(void *a1)
{
  *a1 = off_1000F1218;
  a1[1] = off_1000F1240;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_1000768E4()
{
  return 40;
}

void *sub_1000768EC(void *a1)
{
  *a1 = off_1000F1218;
  a1[1] = off_1000F1240;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100076954(void *a1)
{
  *a1 = off_1000F1218;
  a1[1] = off_1000F1240;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_1000769DC(void *a1, uint64_t a2)
{
  *a1 = off_1000F1240;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_100076A70(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_100076A84(void *a1)
{
  *a1 = off_1000F1240;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_100076AC8(void *a1)
{
  *a1 = off_1000F1240;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_100076B2C()
{
  return 48;
}

void *sub_100076B34(void *a1)
{
  *a1 = off_1000F1128;
  sub_100076BFC(a1[4], (uint64_t)(a1 + 11));
  a1[11] = off_1000F1218;
  a1[12] = off_1000F1240;
  sub_10002E6EC(a1 + 15);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_100076BFC(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    BOOL result = *(void *)result;
    if (result)
    {
      BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    else
    {
      uint64_t v4 = *(_DWORD **)(v3 + 24);
      if (v4) {
        --*v4;
      }
    }
    *(void *)(v3 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = v3;
  }
  return result;
}

uint64_t sub_100076C78(void *a1, uint64_t a2)
{
  uint64_t v3 = 48 * a2;
  unint64_t v4 = a1[1];
  if (192 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

BOOL sub_100076D6C(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 32);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 40) == 1) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = 2;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 72))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44))
  {
    unint64_t v5 = *(void *)(a1 + 56);
    if (v5)
    {
      unint64_t v6 = 0;
      do
      {
        unint64_t v7 = v6 + ((v5 - v6) >> 1);
        BOOL v8 = *(void **)(a1 + 32);
        if (*v8) {
          (*(void (**)(void, unint64_t))(*(void *)*v8 + 56))(*v8, v6 + ((v5 - v6) >> 1));
        }
        else {
          v8[4] = v7;
        }
        if ((int)sub_100076FB4(a1) >= *(_DWORD *)(a1 + 48)) {
          unint64_t v5 = v6 + ((v5 - v6) >> 1);
        }
        else {
          unint64_t v6 = v7 + 1;
        }
      }
      while (v6 < v5);
    }
    else
    {
      unint64_t v6 = 0;
    }
    BOOL v16 = *(void **)(a1 + 32);
    if (*v16) {
      (*(void (**)(void, unint64_t))(*(void *)*v16 + 56))(*v16, v6);
    }
    else {
      v16[4] = v6;
    }
    if (v6 < *(void *)(a1 + 56)) {
      return sub_100076FB4(a1) == *(_DWORD *)(a1 + 48);
    }
  }
  else
  {
    unint64_t v4 = *(void **)(a1 + 32);
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 48))(*v4);
    }
    else {
      void v4[4] = 0;
    }
    while (1)
    {
      uint64_t v9 = *(void **)(a1 + 32);
      if (*v9)
      {
        if ((*(uint64_t (**)(void))(*(void *)*v9 + 16))(*v9)) {
          return 0;
        }
      }
      else if (v9[4] >= v9[2])
      {
        return 0;
      }
      int v10 = sub_100076FB4(a1);
      int v11 = *(_DWORD *)(a1 + 48);
      BOOL v12 = v10 == v11;
      int v13 = 2 * (v10 > v11);
      if (v12) {
        int v13 = 1;
      }
      if (v13) {
        break;
      }
      float v14 = *(void **)(a1 + 32);
      if (*v14) {
        (*(void (**)(void))(*(void *)*v14 + 32))(*v14);
      }
      else {
        ++v14[4];
      }
    }
    if (v13 == 1) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_100076FB4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (*v2) {
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*v2 + 24))(*v2);
  }
  else {
    uint64_t v3 = v2[1] + 16 * v2[4];
  }
  if (*(_DWORD *)(a1 + 40) == 1) {
    unint64_t v4 = (unsigned int *)v3;
  }
  else {
    unint64_t v4 = (unsigned int *)(v3 + 4);
  }
  return *v4;
}

uint64_t sub_100077028(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  *(void *)a1 = off_1000F1280;
  if (!a6) {
    operator new();
  }
  *(void *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 2sub_10002B9D0((void **)&STACK[0x2A8], 0) = a4;
  *(unsigned char *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  if (a3 == 3)
  {
    if (byte_1000FE8F0) {
      sub_100009CF0(__p, "FATAL");
    }
    else {
      sub_100009CF0(__p, "ERROR");
    }
    sub_10002D454(&v17, (uint64_t)__p);
    sub_10002D07C(&std::cerr, (uint64_t)"SigmaMatcher: Bad match type", 28);
    sub_10002D500(&v17);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 16) = 4;
    *(unsigned char *)(a1 + 52) = 1;
  }
  if (!a4)
  {
    if (byte_1000FE8F0) {
      sub_100009CF0(v12, "FATAL");
    }
    else {
      sub_100009CF0(v12, "ERROR");
    }
    sub_10002D454(&v14, (uint64_t)v12);
    sub_10002D07C(&std::cerr, (uint64_t)"SigmaMatcher: 0 cannot be used as sigma_label", 45);
    sub_10002D500(&v14);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    *(_DWORD *)(a1 + 2sub_10002B9D0((void **)&STACK[0x2A8], 0) = -1;
    *(unsigned char *)(a1 + 52) = 1;
  }
  if (a5 == 1)
  {
    BOOL v10 = 1;
  }
  else
  {
    if (a5)
    {
      *(unsigned char *)(a1 + ++*(void *)(result + 24) = 0;
      return a1;
    }
    BOOL v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, 0x10000, 1) != 0;
  }
  *(unsigned char *)(a1 + ++*(void *)(result + 24) = v10;
  return a1;
}

void sub_100077260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v26 = *(void *)(v24 + 8);
  *(void *)(v24 + 8) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100077320(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = off_1000F1280;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10007738C(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = off_1000F1280;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  operator delete();
}

void sub_100077418()
{
}

void sub_100077470()
{
}

uint64_t sub_100077494(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t sub_1000774BC(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 56) != a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    *(_DWORD *)(result + 56) = a2;
    uint64_t v4 = *(void *)(result + 8);
    if (*(_DWORD *)(v4 + 48) != a2)
    {
      sub_10007629C(*(void *)(v4 + 8), a2);
      *(_DWORD *)(v4 + 48) = v2;
      *(unsigned char *)(v4 + 25) = *(_DWORD *)(v4 + 20) != -1;
    }
    int v5 = *(_DWORD *)(v3 + 20);
    BOOL result = v5 != -1 && sub_1000753B0(*(void *)(v3 + 8), v5);
    *(unsigned char *)(v3 + 25) = result;
  }
  return result;
}

BOOL sub_100077548(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 48) = a2;
  int v3 = *(_DWORD *)(a1 + 20);
  if (v3 != a2 || v3 == -1)
  {
    BOOL result = sub_1000753B0(*(void *)(a1 + 8), a2);
    if (result)
    {
      *(_DWORD *)(a1 + 28) = -1;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD) {
        return result;
      }
      if (!*(unsigned char *)(a1 + 25)) {
        return result;
      }
      BOOL result = sub_1000753B0(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 28) = a2;
    }
    return 1;
  }
  if (byte_1000FE8F0) {
    sub_100009CF0(__p, "FATAL");
  }
  else {
    sub_100009CF0(__p, "ERROR");
  }
  sub_10002D454(&v9, (uint64_t)__p);
  sub_10002D07C(&std::cerr, (uint64_t)"SigmaMatcher::Find: bad label (sigma)", 37);
  sub_10002D500(&v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  BOOL result = 0;
  *(unsigned char *)(a1 + 52) = 1;
  return result;
}

void sub_100077658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100077690(uint64_t a1)
{
  return sub_100076500(*(void *)(*(void *)(a1 + 8) + 8));
}

void *sub_10007769C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 28);
  BOOL result = (void *)sub_100075768(*(void *)(a1 + 8));
  uint64_t v4 = result;
  if (v2 != -1)
  {
    uint64_t v5 = *result;
    *(void *)(a1 + 32) = *result;
    BOOL result = (void *)(a1 + 32);
    *(_DWORD *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = *((_DWORD *)v4 + 2);
    *(_DWORD *)(a1 + 44) = *((_DWORD *)v4 + 3);
    if (!*(unsigned char *)(a1 + 24))
    {
      int v7 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 16) == 1)
      {
        *(_DWORD *)BOOL result = v7;
        return result;
      }
      goto LABEL_10;
    }
    int v6 = *(_DWORD *)(a1 + 20);
    if (v6 == v5) {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 28);
    }
    if (v6 == HIDWORD(v5))
    {
      int v7 = *(_DWORD *)(a1 + 28);
LABEL_10:
      *(_DWORD *)(a1 + 36) = v7;
    }
  }
  return result;
}

BOOL sub_100077744(uint64_t a1)
{
  sub_100076698(*(void *)(*(void *)(a1 + 8) + 8));
  BOOL result = sub_100076500(*(void *)(*(void *)(a1 + 8) + 8));
  if (result && *(unsigned char *)(a1 + 25) && *(_DWORD *)(a1 + 28) == -1 && *(int *)(a1 + 48) >= 1)
  {
    BOOL result = sub_1000753B0(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_1000777B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

uint64_t sub_1000777DC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
  if (*(unsigned char *)(a1 + 52)) {
    result |= 4uLL;
  }
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 4)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = -4030464001;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (v3 == 2)
    {
      uint64_t v4 = -3225223169;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (v3 == 1)
    {
      uint64_t v4 = -809304065;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (byte_1000FE8F0) {
      sub_100009CF0(__p, "FATAL");
    }
    else {
      sub_100009CF0(__p, "ERROR");
    }
    sub_10002D454(&v7, (uint64_t)__p);
    sub_10002D07C(&std::cerr, (uint64_t)"SigmaMatcher: Bad match type: ", 30);
    std::ostream::operator<<();
    sub_10002D500(&v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_100077908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100077940(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) != -1 && *(_DWORD *)(a1 + 16) != 4) {
    return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8)) | 1;
  }
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 88);
  return v1();
}

int *sub_1000779D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  return sub_100075B60(*(void *)(a1 + 8), a2, a3);
}

uint64_t sub_1000779DC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) != -1)
  {
    sub_1000774BC(a1, a2);
    if (*(unsigned char *)(a1 + 25)) {
      return -1;
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  return sub_100075E14(v5, a2);
}

void sub_100077A48(void *a1)
{
  *a1 = off_1000F1280;
  operator new();
}

void sub_100077AE4()
{
}

void *sub_100077B08(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = off_1000F1318;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_100077B74(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = off_1000F1318;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  operator delete();
}

void sub_100077C00()
{
}

void sub_100077C58()
{
}

void sub_100077C7C(void *a1)
{
  *a1 = off_1000F1318;
  operator new();
}

void sub_100077D1C()
{
}

void sub_100077D40(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = off_1000F1128;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + ++*(void *)(result + 24) = -1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = a3;
  *(_DWORD *)(a1 + 44) = a4;
  *(_DWORD *)(a1 + 48) = -1;
  *(void *)(a1 + 56) = 0;
  int v5 = *sub_10002D854();
  *(void *)(a1 + 64) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 76) = -1;
  *(unsigned char *)(a1 + 82) = 0;
  *(void *)(a1 + 88) = off_1000F1218;
  sub_1000769DC((void *)(a1 + 96), 1);
}

void sub_100077ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  v18[11] = v19;
  v18[12] = off_1000F1240;
  sub_10002E6EC(v18 + 15);
  uint64_t v21 = v18[1];
  v18[1] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  _Unwind_Resume(a1);
}

double sub_100077F6C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  v7[0] = *(unsigned char *)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = 0;
  char v10 = 1;
  long long v5 = *(_OWORD *)(a3 + 32);
  long long v11 = *(_OWORD *)(a3 + 16);
  long long v12 = v5;
  __int16 v13 = 1;
  sub_100078328(a1, a2, (uint64_t)v7, v14);
  double result = v14[0];
  *a4 = *(_OWORD *)v14;
  return result;
}

void *sub_100077FE0(void *a1)
{
  *a1 = off_1000F2730;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_100018BC0(v2);
  }
  return a1;
}

void sub_10007802C(void *a1)
{
  *a1 = off_1000F2730;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_100018BC0(v1);
  }
  operator delete();
}

uint64_t sub_100078098(uint64_t a1)
{
  return sub_100086550(*(void *)(a1 + 8));
}

float sub_1000780A0@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return sub_100086614(*(uint64_t **)(a1 + 8), a2, a3);
}

uint64_t sub_1000780A8(uint64_t a1, uint64_t a2)
{
  return sub_100086734(*(void **)(a1 + 8), a2);
}

uint64_t sub_1000780B0(uint64_t a1, uint64_t a2)
{
  return sub_10008681C(*(void **)(a1 + 8), a2);
}

uint64_t sub_1000780B8(uint64_t a1, uint64_t a2)
{
  return sub_1000868A0(*(void **)(a1 + 8), a2);
}

uint64_t sub_1000780C0(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = sub_100067D14(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    BOOL v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v7();
  }
}

uint64_t sub_100078174(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void sub_100078180()
{
}

void sub_1000781D8()
{
}

uint64_t sub_1000781FC(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t sub_100078208(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void sub_100078214()
{
}

void sub_1000782CC()
{
}

uint64_t sub_1000782F0(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100086DF4(*(void *)(a1 + 8), a2, a3);
}

uint64_t sub_1000782F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a1, a2);
}

void *sub_100078328@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xD8uLL);
  double result = sub_10007839C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_100078388(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10007839C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000F1460;
  sub_100078494((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1000783E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000783F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F1460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100078418(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F1460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10007846C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100078494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)sub_10007931C(a1, a4) = off_1000F14B0;
  uint64_t v8 = *(uint64_t **)(a4 + 48);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  uint64_t v9 = *v8;
  *(void *)(a1 + 144) = *v8;
  *(void *)(a1 + 152) = v8[1];
  *(void *)(a1 + 16sub_10002B9D0((void **)&STACK[0x2A8], 0) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 72))(v9);
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 72))(*(void *)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 56);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a4 + 64) != 0;
  sub_100009CF0(&__str, "compose");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 96))(a3);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (!sub_1000BC600(v11, v12, 1))
  {
    if (byte_1000FE8F0) {
      sub_100009CF0(&__str, "FATAL");
    }
    else {
      sub_100009CF0(&__str, "ERROR");
    }
    sub_10002D454(&v24, (uint64_t)&__str);
    __int16 v13 = sub_10002D07C(&std::cerr, (uint64_t)"ComposeFst: Output symbol table of 1st argument ", 48);
    sub_10002D07C(v13, (uint64_t)"does not match input symbol table of 2nd argument", 49);
    sub_10002D500(&v24);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 96))(*(void *)(a1 + 160));
  sub_100030234(a1, v14);
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 104))(*(void *)(a1 + 168));
  sub_1000302D4(a1, v15);
  sub_1000789E8(a1);
  if (dword_1000FF640 >= 2)
  {
    sub_100009CF0(__p, "INFO");
    sub_10002D454(&v23, (uint64_t)__p);
    sub_10002D07C(&std::cerr, (uint64_t)"ComposeFstImpl: Match type: ", 28);
    std::ostream::operator<<();
    sub_10002D500(&v23);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(_DWORD *)(a1 + 188) == 4) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0xFFFFFFFF0007, 0);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 56))(a3, 0xFFFFFFFF0007, 0);
  uint64_t v18 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 144) + 80))(*(void *)(a1 + 144), v16);
  uint64_t v19 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 80))(*(void *)(a1 + 152), v17);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFF00000000FFFFLL | sub_1000C24B8(v18, v19) & 0xFFFFFFFF0004;
  return a1;
}

void sub_100078900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  BOOL v28 = *v26;
  *uint64_t v26 = 0;
  if (v28) {
    sub_100081D30((uint64_t)v26, v28);
  }
  sub_10007EC44(v25);
  _Unwind_Resume(a1);
}

void sub_1000789E8(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 144) + 88))(*(void *)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 1) != 2)
  {
    if (byte_1000FE8F0) {
      sub_100009CF0(__p, "FATAL");
    }
    else {
      sub_100009CF0(__p, "ERROR");
    }
    sub_10002D454(&v14, (uint64_t)__p);
    uint64_t v9 = sub_10002D07C(&std::cerr, (uint64_t)"ComposeFst: 1st argument cannot perform required matching ", 58);
    sub_10002D07C(v9, (uint64_t)"(sort?).", 8);
  }
  else if (((*(uint64_t (**)(void))(**(void **)(a1 + 152) + 88))(*(void *)(a1 + 152)) & 1) != 0 {
         && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 1) != 1)
  }
  {
    if (byte_1000FE8F0) {
      sub_100009CF0(__p, "FATAL");
    }
    else {
      sub_100009CF0(__p, "ERROR");
    }
    sub_10002D454(&v14, (uint64_t)__p);
    uint64_t v10 = sub_10002D07C(&std::cerr, (uint64_t)"ComposeFst: 2nd argument cannot perform required matching ", 58);
    sub_10002D07C(v10, (uint64_t)"(sort?).", 8);
  }
  else
  {
    int v2 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0);
    int v3 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0);
    if (v3 == 1 && v2 == 2) {
      int v5 = 3;
    }
    else {
      int v5 = 2;
    }
    BOOL v6 = v2 == 2;
    if (v2 == 2) {
      int v7 = v5;
    }
    else {
      int v7 = 1;
    }
    if (v6 || v3 == 1) {
      goto LABEL_36;
    }
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 1) == 2)
    {
      int v7 = 2;
      goto LABEL_36;
    }
    int v7 = 1;
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 1) == 1) {
      goto LABEL_36;
    }
    if (byte_1000FE8F0) {
      sub_100009CF0(__p, "FATAL");
    }
    else {
      sub_100009CF0(__p, "ERROR");
    }
    sub_10002D454(&v14, (uint64_t)__p);
    uint64_t v11 = sub_10002D07C(&std::cerr, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    sub_10002D07C(v11, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  sub_10002D500(&v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  int v7 = 4;
LABEL_36:
  *(_DWORD *)(a1 + 188) = v7;
}

void sub_100078D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100078DA0(uint64_t a1)
{
  sub_100081DDC(a1);
  operator delete();
}

uint64_t sub_100078DD8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 0xFFFFFFFF0007);
}

uint64_t sub_100078E04(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 56))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 80))(*(void *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 80))(*(void *)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void sub_100078F08()
{
}

void sub_100078F50()
{
}

void sub_100078F74(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 104) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  int v7 = (int *)a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  sub_1000840C4(v7, v5, v6, &v16);
  if (sub_1000841FC((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  sub_10008434C(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t sub_10007902C(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1000790F8()
{
}

uint64_t sub_10007911C(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 16))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 16))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return sub_1000848A0(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

int *sub_1000791C0@<X0>(void *a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1[22] + 104);
  int v7 = (unsigned int *)(v6 + 12 * a2);
  uint64_t v8 = *v7;
  sub_100075B60(*(void *)(*(void *)(a1[18] + 8) + 8), v8, &v15);
  uint64_t result = sub_10002D8A8();
  float v10 = v15;
  float v17 = v15;
  float v16 = 0.0;
  float v16 = *(float *)result;
  if (v15 != v16)
  {
    uint64_t v11 = v7[1];
    sub_100075B60(*(void *)(*(void *)(a1[19] + 8) + 8), v11, &v14);
    uint64_t result = sub_10002D8A8();
    float v10 = v14;
    float v17 = v14;
    float v16 = 0.0;
    float v16 = *(float *)result;
    if (v14 != v16)
    {
      int v12 = (int *)a1[17];
      LOBYTE(v17) = *(unsigned char *)(v6 + 12 * a2 + 8);
      uint64_t result = sub_1000840C4(v12, v8, v11, &v17);
      if (v15 == -INFINITY || v14 >= -INFINITY && v14 <= -INFINITY)
      {
        uint64_t result = sub_10006ECE4();
        float v10 = *(float *)result;
      }
      else
      {
        BOOL v13 = v14 == INFINITY || v15 == INFINITY;
        float v10 = v15 + v14;
        if (v13) {
          float v10 = INFINITY;
        }
      }
    }
  }
  *a3 = v10;
  return result;
}

uint64_t sub_10007931C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000F0888;
  *(void *)(a1 + 8) = 0;
  sub_100009CF0((void *)(a1 + 16), "null");
  *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = off_1000F15A8;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 6sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0xFFFFFFFFLL;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    operator new();
  }
  *(void *)(a1 + 12sub_10002B9D0((void **)&STACK[0x2A8], 0) = v4;
  BOOL v5 = v4 == 0;
  *(unsigned char *)(a1 + 128) = v5;
  if (*(unsigned char *)(a2 + 24)) {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 129) = v5;
  return a1;
}

void sub_10007946C()
{
}

uint64_t sub_1000794AC()
{
  return 0;
}

void sub_1000794B8(uint64_t a1)
{
  sub_10007EC44(a1);
  operator delete();
}

void sub_1000794F0(uint64_t a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 32) = a1 + 32;
  *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = a1 + 32;
  *(void *)(a1 + 48) = 0;
  operator new();
}

void sub_1000795EC(_Unwind_Exception *a1)
{
  sub_10007EB1C(v4);
  sub_10007EB1C(v1 + 9);
  sub_10007CD78(v2);
  sub_10007EB1C(v1 + 7);
  uint64_t v6 = *v3;
  if (*v3)
  {
    uint64_t v1[2] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void *sub_100079644(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2 != a1[1])
  {
    unint64_t v3 = 0;
    uint64_t v2 = a1[1];
    do
    {
      sub_1000796BC(*(void *)(v2 + 8 * v3++), a1 + 9);
      uint64_t v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return sub_10007CD78(a1 + 4);
}

uint64_t sub_1000796BC(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (uint64_t *)(result + 24);
    sub_10007971C(&v4);
    sub_10007EB1C((uint64_t *)(v3 + 48));
    uint64_t result = sub_10007BAC0(*a2);
    *(void *)(v3 + 64) = *(void *)(result + 56);
    *(void *)(result + 56) = v3;
  }
  return result;
}

void sub_10007971C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)**a1;
  if (v2)
  {
    v1[1] = (uint64_t)v2;
    sub_100079758(v1 + 3, v2, (v1[2] - (uint64_t)v2) >> 4);
  }
}

void sub_100079758(uint64_t *a1, void *__p, unint64_t a3)
{
  if (a3 == 2)
  {
    uint64_t v4 = sub_10007A0D8(*a1);
    if (!__p) {
      return;
    }
    __p[4] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    uint64_t v4 = sub_100079878(*a1);
    if (!__p) {
      return;
    }
    __p[2] = *(void *)(v4 + 56);
LABEL_22:
    *(void *)(v4 + 56) = __p;
    return;
  }
  if (a3 <= 4)
  {
    uint64_t v4 = sub_10007A528(*a1);
    if (!__p) {
      return;
    }
    __p[8] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    uint64_t v4 = sub_10007A978(*a1);
    if (!__p) {
      return;
    }
    __p[16] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    uint64_t v4 = sub_10007ADC8(*a1);
    if (!__p) {
      return;
    }
    __p[32] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    uint64_t v4 = sub_10007B218(*a1);
    if (!__p) {
      return;
    }
    __p[64] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x40)
  {
    uint64_t v4 = sub_10007B66C(*a1);
    if (!__p) {
      return;
    }
    __p[128] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  operator delete(__p);
}

uint64_t sub_100079878(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x87)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x11uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 128)) {
    operator new();
  }
  return *(void *)(v1 + 128);
}

void sub_100079964()
{
}

void sub_100079988(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        *uint64_t v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_100079A38(a1, v5);
  }
}

void sub_100079A38(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      sub_100019424();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      BOOL v13 = (char *)sub_10001943C(v4, v12);
    }
    else {
      BOOL v13 = 0;
    }
    float v14 = v13;
    float v15 = &v13[8 * v10];
    float v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    float v16 = &v15[8 * a2];
    sub_100079B3C(a1, &v14);
    sub_100079CEC(&v14);
  }
}

void sub_100079B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100079CEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100079B3C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100079BB4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100079BB4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100079C4C((uint64_t)v13);
  return v11;
}

uint64_t sub_100079C4C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100079C84((void *)a1);
  }
  return a1;
}

void *sub_100079C84(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_100079CEC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_100079D24(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      _DWORD v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *sub_100079D98(void *a1)
{
  *a1 = off_1000F1630;
  a1[1] = off_1000F1658;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100079E00(void *a1)
{
  *a1 = off_1000F1630;
  a1[1] = off_1000F1658;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_100079E88()
{
  return 16;
}

void *sub_100079E90(void *a1)
{
  *a1 = off_1000F1630;
  a1[1] = off_1000F1658;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100079EF8(void *a1)
{
  *a1 = off_1000F1630;
  a1[1] = off_1000F1658;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_100079F80(void *a1, uint64_t a2)
{
  *a1 = off_1000F1658;
  a1[1] = 24 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007A014(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007A028(void *a1)
{
  *a1 = off_1000F1658;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007A06C(void *a1)
{
  *a1 = off_1000F1658;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007A0D0()
{
  return 24;
}

uint64_t sub_10007A0D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x107)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x21uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 256)) {
    operator new();
  }
  return *(void *)(v1 + 256);
}

void sub_10007A1C4()
{
}

void *sub_10007A1E8(void *a1)
{
  *a1 = off_1000F16F0;
  a1[1] = off_1000F1718;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007A250(void *a1)
{
  *a1 = off_1000F16F0;
  a1[1] = off_1000F1718;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007A2D8()
{
  return 32;
}

void *sub_10007A2E0(void *a1)
{
  *a1 = off_1000F16F0;
  a1[1] = off_1000F1718;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007A348(void *a1)
{
  *a1 = off_1000F16F0;
  a1[1] = off_1000F1718;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007A3D0(void *a1, uint64_t a2)
{
  *a1 = off_1000F1718;
  a1[1] = 40 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007A464(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007A478(void *a1)
{
  *a1 = off_1000F1718;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007A4BC(void *a1)
{
  *a1 = off_1000F1718;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007A520()
{
  return 40;
}

uint64_t sub_10007A528(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x41uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_10007A614()
{
}

void *sub_10007A638(void *a1)
{
  *a1 = off_1000F17B0;
  a1[1] = off_1000F17D8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007A6A0(void *a1)
{
  *a1 = off_1000F17B0;
  a1[1] = off_1000F17D8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007A728()
{
  return 64;
}

void *sub_10007A730(void *a1)
{
  *a1 = off_1000F17B0;
  a1[1] = off_1000F17D8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007A798(void *a1)
{
  *a1 = off_1000F17B0;
  a1[1] = off_1000F17D8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007A820(void *a1, uint64_t a2)
{
  *a1 = off_1000F17D8;
  a1[1] = 72 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007A8B4(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007A8C8(void *a1)
{
  *a1 = off_1000F17D8;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007A90C(void *a1)
{
  *a1 = off_1000F17D8;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007A970()
{
  return 72;
}

uint64_t sub_10007A978(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x81uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_10007AA64()
{
}

void *sub_10007AA88(void *a1)
{
  *a1 = off_1000F1870;
  a1[1] = off_1000F1898;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007AAF0(void *a1)
{
  *a1 = off_1000F1870;
  a1[1] = off_1000F1898;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007AB78()
{
  return 128;
}

void *sub_10007AB80(void *a1)
{
  *a1 = off_1000F1870;
  a1[1] = off_1000F1898;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007ABE8(void *a1)
{
  *a1 = off_1000F1870;
  a1[1] = off_1000F1898;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007AC70(void *a1, uint64_t a2)
{
  *a1 = off_1000F1898;
  a1[1] = 136 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007AD04(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007AD18(void *a1)
{
  *a1 = off_1000F1898;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007AD5C(void *a1)
{
  *a1 = off_1000F1898;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007ADC0()
{
  return 136;
}

uint64_t sub_10007ADC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x101uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_10007AEB4()
{
}

void *sub_10007AED8(void *a1)
{
  *a1 = off_1000F1930;
  a1[1] = off_1000F1958;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007AF40(void *a1)
{
  *a1 = off_1000F1930;
  a1[1] = off_1000F1958;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007AFC8()
{
  return 256;
}

void *sub_10007AFD0(void *a1)
{
  *a1 = off_1000F1930;
  a1[1] = off_1000F1958;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007B038(void *a1)
{
  *a1 = off_1000F1930;
  a1[1] = off_1000F1958;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007B0C0(void *a1, uint64_t a2)
{
  *a1 = off_1000F1958;
  a1[1] = 264 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007B154(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007B168(void *a1)
{
  *a1 = off_1000F1958;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007B1AC(void *a1)
{
  *a1 = off_1000F1958;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007B210()
{
  return 264;
}

uint64_t sub_10007B218(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x201uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_10007B308()
{
}

void *sub_10007B32C(void *a1)
{
  *a1 = off_1000F19F0;
  a1[1] = off_1000F1A18;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007B394(void *a1)
{
  *a1 = off_1000F19F0;
  a1[1] = off_1000F1A18;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007B41C()
{
  return 512;
}

void *sub_10007B424(void *a1)
{
  *a1 = off_1000F19F0;
  a1[1] = off_1000F1A18;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007B48C(void *a1)
{
  *a1 = off_1000F19F0;
  a1[1] = off_1000F1A18;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007B514(void *a1, uint64_t a2)
{
  *a1 = off_1000F1A18;
  a1[1] = 520 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007B5A8(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007B5BC(void *a1)
{
  *a1 = off_1000F1A18;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007B600(void *a1)
{
  *a1 = off_1000F1A18;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007B664()
{
  return 520;
}

uint64_t sub_10007B66C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x400)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x401uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x2000)) {
    operator new();
  }
  return *(void *)(v1 + 0x2000);
}

void sub_10007B75C()
{
}

void *sub_10007B780(void *a1)
{
  *a1 = off_1000F1AB0;
  a1[1] = off_1000F1AD8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007B7E8(void *a1)
{
  *a1 = off_1000F1AB0;
  a1[1] = off_1000F1AD8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007B870()
{
  return 1024;
}

void *sub_10007B878(void *a1)
{
  *a1 = off_1000F1AB0;
  a1[1] = off_1000F1AD8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007B8E0(void *a1)
{
  *a1 = off_1000F1AB0;
  a1[1] = off_1000F1AD8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007B968(void *a1, uint64_t a2)
{
  *a1 = off_1000F1AD8;
  a1[1] = 1032 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007B9FC(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007BA10(void *a1)
{
  *a1 = off_1000F1AD8;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007BA54(void *a1)
{
  *a1 = off_1000F1AD8;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007BAB8()
{
  return 1032;
}

uint64_t sub_10007BAC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x41uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_10007BBAC()
{
}

void *sub_10007BBD0(void *a1)
{
  *a1 = off_1000F17B0;
  a1[1] = off_1000F17D8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007BC38(void *a1)
{
  *a1 = off_1000F17B0;
  a1[1] = off_1000F17D8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007BCC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x81uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_10007BDAC()
{
}

void *sub_10007BDD0(void *a1)
{
  *a1 = off_1000F1870;
  a1[1] = off_1000F1898;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007BE38(void *a1)
{
  *a1 = off_1000F1870;
  a1[1] = off_1000F1898;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007BEC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x101uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_10007BFAC()
{
}

void *sub_10007BFD0(void *a1)
{
  *a1 = off_1000F1930;
  a1[1] = off_1000F1958;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007C038(void *a1)
{
  *a1 = off_1000F1930;
  a1[1] = off_1000F1958;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007C0C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x201uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_10007C1B0()
{
}

void *sub_10007C1D4(void *a1)
{
  *a1 = off_1000F19F0;
  a1[1] = off_1000F1A18;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007C23C(void *a1)
{
  *a1 = off_1000F19F0;
  a1[1] = off_1000F1A18;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007C2C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x400)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x401uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x2000)) {
    operator new();
  }
  return *(void *)(v1 + 0x2000);
}

void sub_10007C3B4()
{
}

void *sub_10007C3D8(void *a1)
{
  *a1 = off_1000F1AB0;
  a1[1] = off_1000F1AD8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007C440(void *a1)
{
  *a1 = off_1000F1AB0;
  a1[1] = off_1000F1AD8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007C4C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x800)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x801uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x4000)) {
    operator new();
  }
  return *(void *)(v1 + 0x4000);
}

void sub_10007C5B8()
{
}

void *sub_10007C5DC(void *a1)
{
  *a1 = off_1000F1CB0;
  a1[1] = off_1000F1CD8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007C644(void *a1)
{
  *a1 = off_1000F1CB0;
  a1[1] = off_1000F1CD8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007C6CC()
{
  return 2048;
}

void *sub_10007C6D4(void *a1)
{
  *a1 = off_1000F1CB0;
  a1[1] = off_1000F1CD8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007C73C(void *a1)
{
  *a1 = off_1000F1CB0;
  a1[1] = off_1000F1CD8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007C7C4(void *a1, uint64_t a2)
{
  *a1 = off_1000F1CD8;
  a1[1] = 2056 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007C858(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007C86C(void *a1)
{
  *a1 = off_1000F1CD8;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007C8B0(void *a1)
{
  *a1 = off_1000F1CD8;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007C914()
{
  return 2056;
}

uint64_t sub_10007C91C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x8007)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x1001uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x8000)) {
    operator new();
  }
  return *(void *)(v1 + 0x8000);
}

void sub_10007CA14()
{
}

void *sub_10007CA38(void *a1)
{
  *a1 = off_1000F1D70;
  a1[1] = off_1000F1D98;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007CAA0(void *a1)
{
  *a1 = off_1000F1D70;
  a1[1] = off_1000F1D98;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007CB28()
{
  return 4096;
}

void *sub_10007CB30(void *a1)
{
  *a1 = off_1000F1D70;
  a1[1] = off_1000F1D98;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007CB98(void *a1)
{
  *a1 = off_1000F1D70;
  a1[1] = off_1000F1D98;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007CC20(void *a1, uint64_t a2)
{
  *a1 = off_1000F1D98;
  a1[1] = 4104 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007CCB4(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007CCC8(void *a1)
{
  *a1 = off_1000F1D98;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007CD0C(void *a1)
{
  *a1 = off_1000F1D98;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007CD70()
{
  return 4104;
}

void *sub_10007CD78(void *result)
{
  if (result[2])
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v3 = *result;
    uint64_t v2 = (uint64_t *)result[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*result + 8);
    **(void **)(v3 + 8) = v4;
    result[2] = 0;
    while (v2 != (uint64_t *)v1)
    {
      uint64_t v5 = (uint64_t *)v2[1];
      uint64_t result = (void *)sub_10007CDDC(v1, (uint64_t)v2);
      uint64_t v2 = v5;
    }
  }
  return result;
}

uint64_t sub_10007CDDC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10007CF38(*(void *)(a1 + 24));
  if (a2)
  {
    *(void *)(a2 + ++*(void *)(result + 24) = *(void *)(result + 56);
    *(void *)(result + 56) = a2;
  }
  return result;
}

void sub_10007CE18(uint64_t *a1, void *__p, unint64_t a3)
{
  if (a3 == 2)
  {
    uint64_t v4 = sub_10007D384(*a1);
    if (!__p) {
      return;
    }
    __p[6] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    uint64_t v4 = sub_10007CF38(*a1);
    if (!__p) {
      return;
    }
    __p[3] = *(void *)(v4 + 56);
LABEL_22:
    *(void *)(v4 + 56) = __p;
    return;
  }
  if (a3 <= 4)
  {
    uint64_t v4 = sub_10007D584(*a1);
    if (!__p) {
      return;
    }
    unsigned char __p[12] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    uint64_t v4 = sub_10007D9D4(*a1);
    if (!__p) {
      return;
    }
    unsigned char __p[24] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    uint64_t v4 = sub_10007DE24(*a1);
    if (!__p) {
      return;
    }
    __p[48] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    uint64_t v4 = sub_10007E274(*a1);
    if (!__p) {
      return;
    }
    __p[96] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x40)
  {
    uint64_t v4 = sub_10007E6C8(*a1);
    if (!__p) {
      return;
    }
    __p[192] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  operator delete(__p);
}

uint64_t sub_10007CF38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC7)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x19uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 192)) {
    operator new();
  }
  return *(void *)(v1 + 192);
}

void sub_10007D024()
{
}

void *sub_10007D048(void *a1)
{
  *a1 = off_1000F1E30;
  a1[1] = off_1000F1E58;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007D0B0(void *a1)
{
  *a1 = off_1000F1E30;
  a1[1] = off_1000F1E58;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007D138()
{
  return 24;
}

void *sub_10007D140(void *a1)
{
  *a1 = off_1000F1E30;
  a1[1] = off_1000F1E58;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007D1A8(void *a1)
{
  *a1 = off_1000F1E30;
  a1[1] = off_1000F1E58;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007D230(void *a1, uint64_t a2)
{
  *a1 = off_1000F1E58;
  a1[1] = 32 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007D2C0(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007D2D4(void *a1)
{
  *a1 = off_1000F1E58;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007D318(void *a1)
{
  *a1 = off_1000F1E58;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007D37C()
{
  return 32;
}

uint64_t sub_10007D384(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x187)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x31uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 384)) {
    operator new();
  }
  return *(void *)(v1 + 384);
}

void sub_10007D470()
{
}

void *sub_10007D494(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007D4FC(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007D584(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x307)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x61uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 768)) {
    operator new();
  }
  return *(void *)(v1 + 768);
}

void sub_10007D670()
{
}

void *sub_10007D694(void *a1)
{
  *a1 = off_1000F1F30;
  a1[1] = off_1000F1F58;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007D6FC(void *a1)
{
  *a1 = off_1000F1F30;
  a1[1] = off_1000F1F58;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007D784()
{
  return 96;
}

void *sub_10007D78C(void *a1)
{
  *a1 = off_1000F1F30;
  a1[1] = off_1000F1F58;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007D7F4(void *a1)
{
  *a1 = off_1000F1F30;
  a1[1] = off_1000F1F58;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007D87C(void *a1, uint64_t a2)
{
  *a1 = off_1000F1F58;
  a1[1] = 104 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007D910(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007D924(void *a1)
{
  *a1 = off_1000F1F58;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007D968(void *a1)
{
  *a1 = off_1000F1F58;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007D9CC()
{
  return 104;
}

uint64_t sub_10007D9D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x607)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0xC1uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1536)) {
    operator new();
  }
  return *(void *)(v1 + 1536);
}

void sub_10007DAC0()
{
}

void *sub_10007DAE4(void *a1)
{
  *a1 = off_1000F1FF0;
  a1[1] = off_1000F2018;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007DB4C(void *a1)
{
  *a1 = off_1000F1FF0;
  a1[1] = off_1000F2018;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007DBD4()
{
  return 192;
}

void *sub_10007DBDC(void *a1)
{
  *a1 = off_1000F1FF0;
  a1[1] = off_1000F2018;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007DC44(void *a1)
{
  *a1 = off_1000F1FF0;
  a1[1] = off_1000F2018;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007DCCC(void *a1, uint64_t a2)
{
  *a1 = off_1000F2018;
  a1[1] = 200 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007DD60(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007DD74(void *a1)
{
  *a1 = off_1000F2018;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007DDB8(void *a1)
{
  *a1 = off_1000F2018;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007DE1C()
{
  return 200;
}

uint64_t sub_10007DE24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC07)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x181uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 3072)) {
    operator new();
  }
  return *(void *)(v1 + 3072);
}

void sub_10007DF10()
{
}

void *sub_10007DF34(void *a1)
{
  *a1 = off_1000F20B0;
  a1[1] = off_1000F20D8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007DF9C(void *a1)
{
  *a1 = off_1000F20B0;
  a1[1] = off_1000F20D8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007E024()
{
  return 384;
}

void *sub_10007E02C(void *a1)
{
  *a1 = off_1000F20B0;
  a1[1] = off_1000F20D8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007E094(void *a1)
{
  *a1 = off_1000F20B0;
  a1[1] = off_1000F20D8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007E11C(void *a1, uint64_t a2)
{
  *a1 = off_1000F20D8;
  a1[1] = 392 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007E1B0(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007E1C4(void *a1)
{
  *a1 = off_1000F20D8;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007E208(void *a1)
{
  *a1 = off_1000F20D8;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007E26C()
{
  return 392;
}

uint64_t sub_10007E274(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x300)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x301uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 6144)) {
    operator new();
  }
  return *(void *)(v1 + 6144);
}

void sub_10007E364()
{
}

void *sub_10007E388(void *a1)
{
  *a1 = off_1000F2170;
  a1[1] = off_1000F2198;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007E3F0(void *a1)
{
  *a1 = off_1000F2170;
  a1[1] = off_1000F2198;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007E478()
{
  return 768;
}

void *sub_10007E480(void *a1)
{
  *a1 = off_1000F2170;
  a1[1] = off_1000F2198;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007E4E8(void *a1)
{
  *a1 = off_1000F2170;
  a1[1] = off_1000F2198;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007E570(void *a1, uint64_t a2)
{
  *a1 = off_1000F2198;
  a1[1] = 776 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007E604(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007E618(void *a1)
{
  *a1 = off_1000F2198;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007E65C(void *a1)
{
  *a1 = off_1000F2198;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007E6C0()
{
  return 776;
}

uint64_t sub_10007E6C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x600)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x601uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 12288)) {
    operator new();
  }
  return *(void *)(v1 + 12288);
}

void sub_10007E7B8()
{
}

void *sub_10007E7DC(void *a1)
{
  *a1 = off_1000F2230;
  a1[1] = off_1000F2258;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007E844(void *a1)
{
  *a1 = off_1000F2230;
  a1[1] = off_1000F2258;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007E8CC()
{
  return 1536;
}

void *sub_10007E8D4(void *a1)
{
  *a1 = off_1000F2230;
  a1[1] = off_1000F2258;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007E93C(void *a1)
{
  *a1 = off_1000F2230;
  a1[1] = off_1000F2258;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007E9C4(void *a1, uint64_t a2)
{
  *a1 = off_1000F2258;
  a1[1] = 1544 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007EA58(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007EA6C(void *a1)
{
  *a1 = off_1000F2258;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007EAB0(void *a1)
{
  *a1 = off_1000F2258;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007EB14()
{
  return 1544;
}

uint64_t *sub_10007EB1C(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = *(void *)(*result + 8) - 1;
  *(void *)(*result + 8) = v2;
  if (!v2)
  {
    uint64_t v3 = (void **)(v1 + 16);
    sub_10007EB84(&v3);
    operator delete();
  }
  return result;
}

void sub_10007EB84(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10007EBD8(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_10007EBD8(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t sub_10007EC44(uint64_t a1)
{
  *(void *)a1 = off_1000F15A8;
  if (*(unsigned char *)(a1 + 129))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 120);
    if (v2)
    {
      sub_10007ECC8(v2);
      operator delete();
    }
  }
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3) {
    operator delete(v3);
  }
  return sub_1000305F4(a1);
}

uint64_t *sub_10007ECC8(uint64_t *a1)
{
  sub_100079644(a1);
  sub_10007EB1C(a1 + 10);
  sub_10007EB1C(a1 + 9);
  sub_10007CD78(a1 + 4);
  sub_10007EB1C(a1 + 7);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10007ED24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 72))(a4);
  *(void *)(a1 + ++*(void *)(result + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_10007EE20()
{
}

void sub_10007EEB4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  *a1 = a3;
  if (!a4) {
    operator new();
  }
  a1[1] = a4;
  a1[2] = a1;
  a1[3] = a1;
  sub_10007F0B0();
}

void sub_10007EF60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_10007EFCC(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556) {
      sub_100019424();
    }
    uint64_t v5 = (a1[1] - *a1) / 12;
    uint64_t v6 = (char *)sub_100081CE8(v3, a2);
    uint64_t v7 = &v6[12 * v5];
    unint64_t v9 = &v6[12 * v8];
    uint64_t v11 = *a1;
    uint64_t v10 = a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *(void *)(v10 - 12);
        v10 -= 12;
        int v14 = *((_DWORD *)v10 + 2);
        *(void *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      uint64_t v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_10007F0B0()
{
}

void sub_10007F198(_Unwind_Exception *a1)
{
  sub_100080E48(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007F1BC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    sub_10007F1FC(a1 + 8, v2);
  }
  sub_10007EB1C((uint64_t *)(a1 + 16));
  return a1;
}

void sub_10007F1FC(uint64_t a1, void *a2)
{
}

void sub_10007F21C(uint64_t *a1, void *__p, unint64_t a3)
{
  if (a3 == 2)
  {
    uint64_t v4 = sub_10007F788(*a1);
    if (!__p) {
      return;
    }
    __p[2] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    uint64_t v4 = sub_10007F33C(*a1);
    if (!__p) {
      return;
    }
    __p[1] = *(void *)(v4 + 56);
LABEL_22:
    *(void *)(v4 + 56) = __p;
    return;
  }
  if (a3 <= 4)
  {
    uint64_t v4 = sub_10007F988(*a1);
    if (!__p) {
      return;
    }
    __p[4] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    uint64_t v4 = sub_10007FB88(*a1);
    if (!__p) {
      return;
    }
    __p[8] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    uint64_t v4 = sub_10007FD88(*a1);
    if (!__p) {
      return;
    }
    __p[16] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    uint64_t v4 = sub_10007FF88(*a1);
    if (!__p) {
      return;
    }
    __p[32] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x40)
  {
    uint64_t v4 = sub_100080188(*a1);
    if (!__p) {
      return;
    }
    __p[64] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  operator delete(__p);
}

uint64_t sub_10007F33C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x47)
  {
    sub_100079988((uint64_t *)(a1 + 16), 9uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 64)) {
    operator new();
  }
  return *(void *)(v1 + 64);
}

void sub_10007F428()
{
}

void *sub_10007F44C(void *a1)
{
  *a1 = off_1000F22F0;
  a1[1] = off_1000F2318;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007F4B4(void *a1)
{
  *a1 = off_1000F22F0;
  a1[1] = off_1000F2318;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007F53C()
{
  return 8;
}

void *sub_10007F544(void *a1)
{
  *a1 = off_1000F22F0;
  a1[1] = off_1000F2318;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007F5AC(void *a1)
{
  *a1 = off_1000F22F0;
  a1[1] = off_1000F2318;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10007F634(void *a1, uint64_t a2)
{
  *a1 = off_1000F2318;
  a1[1] = 16 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_10007F6C4(_Unwind_Exception *a1)
{
  sub_10002E6EC(v1);
  _Unwind_Resume(a1);
}

void *sub_10007F6D8(void *a1)
{
  *a1 = off_1000F2318;
  sub_10002E6EC(a1 + 3);
  return a1;
}

void sub_10007F71C(void *a1)
{
  *a1 = off_1000F2318;
  sub_10002E6EC(a1 + 3);
  operator delete();
}

uint64_t sub_10007F780()
{
  return 16;
}

uint64_t sub_10007F788(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x87)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x11uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 128)) {
    operator new();
  }
  return *(void *)(v1 + 128);
}

void sub_10007F874()
{
}

void *sub_10007F898(void *a1)
{
  *a1 = off_1000F1630;
  a1[1] = off_1000F1658;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007F900(void *a1)
{
  *a1 = off_1000F1630;
  a1[1] = off_1000F1658;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007F988(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x107)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x21uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 256)) {
    operator new();
  }
  return *(void *)(v1 + 256);
}

void sub_10007FA74()
{
}

void *sub_10007FA98(void *a1)
{
  *a1 = off_1000F16F0;
  a1[1] = off_1000F1718;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007FB00(void *a1)
{
  *a1 = off_1000F16F0;
  a1[1] = off_1000F1718;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007FB88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x41uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_10007FC74()
{
}

void *sub_10007FC98(void *a1)
{
  *a1 = off_1000F17B0;
  a1[1] = off_1000F17D8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007FD00(void *a1)
{
  *a1 = off_1000F17B0;
  a1[1] = off_1000F17D8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007FD88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x81uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_10007FE74()
{
}

void *sub_10007FE98(void *a1)
{
  *a1 = off_1000F1870;
  a1[1] = off_1000F1898;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10007FF00(void *a1)
{
  *a1 = off_1000F1870;
  a1[1] = off_1000F1898;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10007FF88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x101uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_100080074()
{
}

void *sub_100080098(void *a1)
{
  *a1 = off_1000F1930;
  a1[1] = off_1000F1958;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100080100(void *a1)
{
  *a1 = off_1000F1930;
  a1[1] = off_1000F1958;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_100080188(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x201uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_100080278()
{
}

void *sub_10008029C(void *a1)
{
  *a1 = off_1000F19F0;
  a1[1] = off_1000F1A18;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100080304(void *a1)
{
  *a1 = off_1000F19F0;
  a1[1] = off_1000F1A18;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_10008038C(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_10008047C(a1, prime);
    }
  }
}

void sub_10008047C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (unint64_t *)(a1 + 8);
  if (a2)
  {
    unint64_t v5 = sub_1000805E0((uint64_t *)(a1 + 16), a2);
    uint8x8_t v6 = *(void **)a1;
    *(void *)a1 = v5;
    if (v6) {
      sub_10007F1FC((uint64_t)v3, v6);
    }
    uint64_t v7 = 0;
    *uint64_t v3 = a2;
    do
      *(void *)(*(void *)a1 + 8 * v7++) = 0;
    while (a2 != v7);
    uint64_t v8 = *(void **)(a1 + 24);
    if (v8)
    {
      unint64_t v9 = v8[1];
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
      }
      else
      {
        v9 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v9) = a1 + 24;
      unint64_t v12 = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v9)
          {
            if (!*(void *)(*(void *)a1 + 8 * v13))
            {
              *(void *)(*(void *)a1 + 8 * v13) = v8;
              goto LABEL_23;
            }
            *uint64_t v8 = *v12;
            *unint64_t v12 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
            unint64_t v12 = v8;
          }
          unint64_t v13 = v9;
LABEL_23:
          uint64_t v8 = v12;
          unint64_t v12 = (void *)*v12;
          unint64_t v9 = v13;
        }
        while (v12);
      }
    }
  }
  else
  {
    uint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      sub_10007F1FC(a1 + 8, v11);
    }
    *uint64_t v3 = 0;
  }
}

void *sub_1000805E0(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = sub_10007F788(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080890((void *)(v2 + 8), 1);
      result[2] = 0;
      return result;
    }
    uint64_t v4 = result[2];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = sub_10007F33C(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_1000807A4((void *)(v2 + 8), 1);
      result[1] = 0;
      return result;
    }
    uint64_t v4 = result[1];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = sub_10007F988(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080984((void *)(v2 + 8), 1);
      result[4] = 0;
      return result;
    }
    uint64_t v4 = result[4];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = sub_10007FB88(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080A78((void *)(v2 + 8), 1);
      result[8] = 0;
      return result;
    }
    uint64_t v4 = result[8];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = sub_10007FD88(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080B6C((void *)(v2 + 8), 1);
      result[16] = 0;
      return result;
    }
    uint64_t v4 = result[16];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = sub_10007FF88(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080C60((void *)(v2 + 8), 1);
      result[32] = 0;
      return result;
    }
    uint64_t v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = sub_100080188(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080D54((void *)(v2 + 8), 1);
      result[64] = 0;
      return result;
    }
    uint64_t v4 = result[64];
    goto LABEL_26;
  }
  if (a2 >> 61) {
    sub_100018AF4();
  }
  return operator new(8 * a2);
}

uint64_t sub_1000807A4(void *a1, uint64_t a2)
{
  uint64_t v3 = 16 * a2;
  unint64_t v4 = a1[1];
  if (v4 < a2 << 6) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_100080890(void *a1, uint64_t a2)
{
  uint64_t v3 = 24 * a2;
  unint64_t v4 = a1[1];
  if (96 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_100080984(void *a1, uint64_t a2)
{
  uint64_t v3 = 40 * a2;
  unint64_t v4 = a1[1];
  if (160 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_100080A78(void *a1, uint64_t a2)
{
  uint64_t v3 = 72 * a2;
  unint64_t v4 = a1[1];
  if (288 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_100080B6C(void *a1, uint64_t a2)
{
  uint64_t v3 = 136 * a2;
  unint64_t v4 = a1[1];
  if (544 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_100080C60(void *a1, uint64_t a2)
{
  uint64_t v3 = 264 * a2;
  unint64_t v4 = a1[1];
  if (1056 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_100080D54(void *a1, uint64_t a2)
{
  uint64_t v3 = 520 * a2;
  unint64_t v4 = a1[1];
  if (2080 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_100080E48(uint64_t a1)
{
  sub_100080E8C(a1, *(void **)(a1 + 24));
  sub_10007EB1C((uint64_t *)(a1 + 32));
  return sub_10007F1BC(a1);
}

uint64_t sub_100080E8C(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      unint64_t v4 = (void *)*v2;
      uint64_t result = sub_100080EE0(*(void *)(v3 + 32));
      v2[3] = *(void *)(result + 56);
      *(void *)(result + 56) = v2;
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_100080EE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC7)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x19uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 192)) {
    operator new();
  }
  return *(void *)(v1 + 192);
}

void sub_100080FCC()
{
}

void *sub_100080FF0(void *a1)
{
  *a1 = off_1000F1E30;
  a1[1] = off_1000F1E58;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100081058(void *a1)
{
  *a1 = off_1000F1E30;
  a1[1] = off_1000F1E58;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_1000810E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x187)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x31uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 384)) {
    operator new();
  }
  return *(void *)(v1 + 384);
}

void sub_1000811CC()
{
}

void *sub_1000811F0(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100081258(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_1000812E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x307)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x61uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 768)) {
    operator new();
  }
  return *(void *)(v1 + 768);
}

void sub_1000813CC()
{
}

void *sub_1000813F0(void *a1)
{
  *a1 = off_1000F1F30;
  a1[1] = off_1000F1F58;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100081458(void *a1)
{
  *a1 = off_1000F1F30;
  a1[1] = off_1000F1F58;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_1000814E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x607)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0xC1uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1536)) {
    operator new();
  }
  return *(void *)(v1 + 1536);
}

void sub_1000815CC()
{
}

void *sub_1000815F0(void *a1)
{
  *a1 = off_1000F1FF0;
  a1[1] = off_1000F2018;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100081658(void *a1)
{
  *a1 = off_1000F1FF0;
  a1[1] = off_1000F2018;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_1000816E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC07)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x181uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 3072)) {
    operator new();
  }
  return *(void *)(v1 + 3072);
}

void sub_1000817CC()
{
}

void *sub_1000817F0(void *a1)
{
  *a1 = off_1000F20B0;
  a1[1] = off_1000F20D8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100081858(void *a1)
{
  *a1 = off_1000F20B0;
  a1[1] = off_1000F20D8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_1000818E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x300)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x301uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 6144)) {
    operator new();
  }
  return *(void *)(v1 + 6144);
}

void sub_1000819D0()
{
}

void *sub_1000819F4(void *a1)
{
  *a1 = off_1000F2170;
  a1[1] = off_1000F2198;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100081A5C(void *a1)
{
  *a1 = off_1000F2170;
  a1[1] = off_1000F2198;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_100081AE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x600)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x601uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 12288)) {
    operator new();
  }
  return *(void *)(v1 + 12288);
}

void sub_100081BD4()
{
}

void *sub_100081BF8(void *a1)
{
  *a1 = off_1000F2230;
  a1[1] = off_1000F2258;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100081C60(void *a1)
{
  *a1 = off_1000F2230;
  a1[1] = off_1000F2258;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void *sub_100081CE8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_100018AF4();
  }
  return operator new(12 * a2);
}

void sub_100081D30(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[1];
    a2[1] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *a2;
    *a2 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    operator delete();
  }
}

uint64_t sub_100081DDC(uint64_t a1)
{
  *(void *)a1 = off_1000F14B0;
  if (*(unsigned char *)(a1 + 184))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 176);
    if (v2)
    {
      uint64_t v3 = (void *)v2[13];
      if (v3)
      {
        v2[14] = (uint64_t)v3;
        operator delete(v3);
      }
      sub_100080E48((uint64_t)(v2 + 4));
      uint64_t v4 = v2[1];
      v2[1] = 0;
      if (v4) {
        operator delete();
      }
      uint64_t v5 = *v2;
      uint64_t *v2 = 0;
      if (v5) {
        operator delete();
      }
      operator delete();
    }
  }
  uint64_t v6 = *(uint64_t **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v6) {
    sub_100081D30(a1 + 136, v6);
  }
  return sub_10007EC44(a1);
}

void sub_100081EB8(uint64_t a1, uint64_t a2)
{
}

void sub_100081FD0()
{
}

void sub_100082040(uint64_t a1, uint64_t a2)
{
}

void sub_1000820EC(_Unwind_Exception *a1)
{
  sub_10007EC44(v1);
  _Unwind_Resume(a1);
}

void sub_100082100(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000F0888;
  *(void *)(a1 + 8) = 0;
  sub_100009CF0((void *)(a1 + 16), "null");
  *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = off_1000F15A8;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 6sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0xFFFFFFFFLL;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_100082294()
{
}

void **sub_1000822D4(void **a1, uint64_t a2)
{
  if (a1 != (void **)a2)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (v4 > (void)a1[2] << 6)
      {
        uint64_t v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          unint64_t v4 = *(void *)(a2 + 8);
        }
        sub_10002EF08(a1, v4);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      uint64_t v6 = *(void **)(a2 + 8);
    }
    else
    {
      uint64_t v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

uint64_t sub_100082368(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000824D4((void *)a1, a2);
    *(void *)(a1 + 64) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
    if (*(_DWORD *)(a2 + 92) == -1) {
      unint64_t v4 = 0;
    }
    else {
      unint64_t v4 = sub_1000823DC(a1, 0);
    }
    *(void *)(a1 + 96) = v4;
  }
  return a1;
}

void *sub_1000823DC(uint64_t a1, int a2)
{
  int v13 = a2;
  uint64_t v3 = a2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 8;
  if (a2 >= (unint64_t)((v6 - v5) >> 3))
  {
    uint64_t v12 = 0;
    sub_100083714(v4, a2 + 1, &v12);
  }
  else
  {
    uint64_t v7 = *(void **)(v5 + 8 * a2);
    if (v7) {
      return v7;
    }
  }
  uint64_t v7 = sub_1000826B0((uint64_t *)(a1 + 72), 1uLL);
  *(_DWORD *)uint64_t v7 = *sub_10002D8A8();
  void v7[5] = 0;
  *(_OWORD *)(v7 + 3) = 0u;
  *(_OWORD *)(v7 + 1) = 0u;
  uint64_t v8 = *(void *)(a1 + 80);
  void v7[6] = v8;
  ++*(void *)(v8 + 8);
  v7[7] = 0;
  *(void *)(*(void *)(a1 + 8) + 8 * v3) = v7;
  if (*(unsigned char *)a1)
  {
    unint64_t v9 = sub_100082E58(a1 + 32, 0, 0, &v13);
    uint64_t v10 = *(void *)(a1 + 32);
    *unint64_t v9 = v10;
    v9[1] = a1 + 32;
    *(void *)(v10 + 8) = v9;
    *(void *)(a1 + 32) = v9;
    ++*(void *)(a1 + 48);
  }
  return v7;
}

void sub_1000824D4(void *a1, uint64_t a2)
{
  sub_100079644(a1);
  uint64_t v4 = (char **)(a1 + 1);
  sub_1000306A4((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  int v23 = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        uint64_t v8 = sub_1000826B0(a1 + 9, 1uLL);
        *(_DWORD *)uint64_t v8 = *(_DWORD *)v7;
        *(_OWORD *)(v8 + 1) = *(_OWORD *)(v7 + 8);
        sub_100082B50(v8 + 3, *(void *)(v7 + 24), *(void *)(v7 + 32), a1 + 10);
        *((_DWORD *)v8 + 14) = *(_DWORD *)(v7 + 56);
        *((_DWORD *)v8 + 15) = 0;
        if (*(unsigned char *)a1)
        {
          unint64_t v9 = sub_100082E58((uint64_t)(a1 + 4), 0, 0, &v23);
          uint64_t v10 = a1[4];
          *unint64_t v9 = v10;
          v9[1] = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_100019424();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)sub_10001943C((uint64_t)(a1 + 3), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[8 * v14];
        *(void *)uint64_t v19 = v8;
        int v13 = v19 + 8;
        uint64_t v21 = (char *)a1[1];
        float v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          float v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v8;
        int v13 = v12 + 1;
      }
      a1[2] = v13;
      unint64_t v6 = ++v23;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

void *sub_1000826B0(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = sub_10007BCC0(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080B6C((void *)(v2 + 8), 1);
      result[16] = 0;
      return result;
    }
    uint64_t v4 = result[16];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = sub_10007BAC0(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080A78((void *)(v2 + 8), 1);
      result[8] = 0;
      return result;
    }
    uint64_t v4 = result[8];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = sub_10007BEC0(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080C60((void *)(v2 + 8), 1);
      result[32] = 0;
      return result;
    }
    uint64_t v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = sub_10007C0C0(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080D54((void *)(v2 + 8), 1);
      result[64] = 0;
      return result;
    }
    uint64_t v4 = result[64];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = sub_10007C2C4(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100082874((void *)(v2 + 8), 1);
      result[128] = 0;
      return result;
    }
    uint64_t v4 = result[128];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = sub_10007C4C8(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100082968((void *)(v2 + 8), 1);
      result[256] = 0;
      return result;
    }
    uint64_t v4 = result[256];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = sub_10007C91C(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100082A5C((void *)(v2 + 8), 1);
      result[512] = 0;
      return result;
    }
    uint64_t v4 = result[512];
    goto LABEL_26;
  }
  if (a2 >> 58) {
    sub_100018AF4();
  }
  return operator new(a2 << 6);
}

uint64_t sub_100082874(void *a1, uint64_t a2)
{
  uint64_t v3 = 1032 * a2;
  unint64_t v4 = a1[1];
  if (4128 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_100082968(void *a1, uint64_t a2)
{
  uint64_t v3 = 2056 * a2;
  unint64_t v4 = a1[1];
  if (8224 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_100082A5C(void *a1, uint64_t a2)
{
  uint64_t v3 = 4104 * a2;
  unint64_t v4 = a1[1];
  if (16416 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

void *sub_100082B50(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *a4;
  a1[3] = *a4;
  ++*(void *)(v5 + 8);
  sub_100082BB4(a1, a2, a3, (a3 - a2) >> 4);
  return a1;
}

void sub_100082BA0(_Unwind_Exception *a1)
{
  sub_10007EB1C(v1);
  _Unwind_Resume(a1);
}

void *sub_100082BB4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100082C48(result, a4);
    uint64_t v7 = v6[1];
    while (a2 != a3)
    {
      *(void *)uint64_t v7 = *(void *)a2;
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(v7 + 12) = *(_DWORD *)(a2 + 12);
      v7 += 16;
      a2 += 16;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_100082C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void *sub_100082C48(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100019424();
  }
  uint64_t result = sub_100082C94(a1 + 3, a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * a2];
  return result;
}

void *sub_100082C94(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = sub_10007A0D8(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080984((void *)(v2 + 8), 1);
      result[4] = 0;
      return result;
    }
    uint64_t v4 = result[4];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = sub_100079878(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080890((void *)(v2 + 8), 1);
      result[2] = 0;
      return result;
    }
    uint64_t v4 = result[2];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = sub_10007A528(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080A78((void *)(v2 + 8), 1);
      result[8] = 0;
      return result;
    }
    uint64_t v4 = result[8];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = sub_10007A978(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080B6C((void *)(v2 + 8), 1);
      result[16] = 0;
      return result;
    }
    uint64_t v4 = result[16];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = sub_10007ADC8(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080C60((void *)(v2 + 8), 1);
      result[32] = 0;
      return result;
    }
    uint64_t v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = sub_10007B218(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080D54((void *)(v2 + 8), 1);
      result[64] = 0;
      return result;
    }
    uint64_t v4 = result[64];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = sub_10007B66C(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100082874((void *)(v2 + 8), 1);
      result[128] = 0;
      return result;
    }
    uint64_t v4 = result[128];
    goto LABEL_26;
  }
  if (a2 >> 60) {
    sub_100018AF4();
  }
  return operator new(16 * a2);
}

void *sub_100082E58(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v9 = *(void *)(a1 + 24);
  ++*(void *)(v9 + 8);
  sub_100082EF8(v10, &v9, 1uLL);
  sub_10007EB1C(&v9);
  uint64_t v7 = v11;
  *unint64_t v11 = a2;
  v7[1] = a3;
  *((_DWORD *)v7 + 4) = *a4;
  unint64_t v11 = 0;
  sub_1000836EC(v10);
  sub_10007EB1C(v10);
  return v7;
}

void sub_100082EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_100082EF8(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4 = *a2;
  *(void *)(v4 + 8) = *(void *)(*a2 + 8) + 1;
  *a1 = v4;
  a1[1] = a3;
  a1[2] = (uint64_t)sub_100082F54(a1, a3);
  return a1;
}

void sub_100082F40(_Unwind_Exception *a1)
{
  sub_10007EB1C(v1);
  _Unwind_Resume(a1);
}

void *sub_100082F54(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = sub_10007D384(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_10002EC70((void *)(v2 + 8), 1);
      result[6] = 0;
      return result;
    }
    uint64_t v4 = result[6];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = sub_10007CF38(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100083128((void *)(v2 + 8), 1);
      result[3] = 0;
      return result;
    }
    uint64_t v4 = result[3];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = sub_10007D584(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100083214((void *)(v2 + 8), 1);
      result[12] = 0;
      return result;
    }
    uint64_t v4 = result[12];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = sub_10007D9D4(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_10008330C((void *)(v2 + 8), 1);
      result[24] = 0;
      return result;
    }
    uint64_t v4 = result[24];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = sub_10007DE24(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100083404((void *)(v2 + 8), 1);
      result[48] = 0;
      return result;
    }
    uint64_t v4 = result[48];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = sub_10007E274(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_1000834FC((void *)(v2 + 8), 1);
      result[96] = 0;
      return result;
    }
    uint64_t v4 = result[96];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = sub_10007E6C8(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_1000835F4((void *)(v2 + 8), 1);
      result[192] = 0;
      return result;
    }
    uint64_t v4 = result[192];
    goto LABEL_26;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100018AF4();
  }
  return operator new(24 * a2);
}

uint64_t sub_100083128(void *a1, uint64_t a2)
{
  uint64_t v3 = 32 * a2;
  unint64_t v4 = a1[1];
  if (v4 < a2 << 7) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_100083214(void *a1, uint64_t a2)
{
  uint64_t v3 = 104 * a2;
  unint64_t v4 = a1[1];
  if (416 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_10008330C(void *a1, uint64_t a2)
{
  uint64_t v3 = 200 * a2;
  unint64_t v4 = a1[1];
  if (800 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_100083404(void *a1, uint64_t a2)
{
  uint64_t v3 = 392 * a2;
  unint64_t v4 = a1[1];
  if (1568 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_1000834FC(void *a1, uint64_t a2)
{
  uint64_t v3 = 776 * a2;
  unint64_t v4 = a1[1];
  if (3104 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t sub_1000835F4(void *a1, uint64_t a2)
{
  uint64_t v3 = 1544 * a2;
  unint64_t v4 = a1[1];
  if (6176 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

void sub_1000836EC(uint64_t *a1)
{
  uint64_t v1 = (void *)a1[2];
  if (v1) {
    sub_10007CE18(a1, v1, a1[1]);
  }
}

void sub_100083714(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_100083744((void **)a1, a2 - v3, a3);
  }
}

void sub_100083744(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      unint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      sub_100019424();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_10001943C(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[8 * v12];
    uint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    uint64_t v21 = v18;
    do
    {
      *(void *)uint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    uint64_t v22 = &v15[8 * v14];
    BOOL v24 = (char *)*a1;
    int v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      int v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void sub_100083870()
{
}

void sub_1000838F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[1];
  v1[1] = 0;
  if (v3) {
    sub_1000B45C8(v3);
  }
  uint64_t v4 = *v1;
  *uint64_t v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008394C()
{
}

void sub_100083A14(_Unwind_Exception *a1)
{
  sub_100080E48(v2);
  uint64_t v4 = v1[1];
  v1[1] = 0;
  if (v4) {
    operator delete();
  }
  uint64_t v5 = *v1;
  *uint64_t v1 = 0;
  if (v5) {
    operator delete();
  }
  _Unwind_Resume(a1);
}

char *sub_100083A88(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100083B08(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2;
      *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v7 = v8;
      v7 += 12;
      a2 = (uint64_t *)((char *)a2 + 12);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_100083AEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100083B08(void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_100019424();
  }
  uint64_t result = (char *)sub_100081CE8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void *sub_100083B5C(uint64_t a1, int *a2, _DWORD *a3)
{
  unsigned int v7 = *a2;
  if (*a2 < -1)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v7 == -1) {
      uint64_t v9 = *(int **)(v8 + 128);
    }
    else {
      uint64_t v9 = (int *)(*(void *)(v8 + 104) + 12 * v7);
    }
    unint64_t v10 = *v9 + 7853 * v9[1] + 7867 * *((char *)v9 + 8);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_100083E14((uint64_t *)(a1 + 64), *((_DWORD *)i + 4), *a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = sub_100083EB0((uint64_t *)(a1 + 32), 1uLL);
  *unint64_t i = 0;
  i[1] = v10;
  *((_DWORD *)i + 4) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v18 = *(float *)(a1 + 56);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_10008038C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  int v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *unint64_t i = *v23;
LABEL_44:
    *int v23 = i;
    goto LABEL_45;
  }
  *unint64_t i = *(void *)(a1 + 24);
  *(void *)(a1 + ++*(void *)(result + 24) = i;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11) {
        v24 %= v11;
      }
    }
    else
    {
      v24 &= v11 - 1;
    }
    int v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 40);
  return i;
}

void sub_100083DF8(_Unwind_Exception *a1)
{
  sub_100084084(v2, v1);
  _Unwind_Resume(a1);
}

BOOL sub_100083E14(uint64_t *a1, int a2, int a3)
{
  if (a2 == a3) {
    return 1;
  }
  BOOL result = 0;
  if (a2 >= -1 && a3 >= -1)
  {
    uint64_t v5 = *a1;
    if (a2 == -1) {
      uint64_t v6 = *(void *)(v5 + 128);
    }
    else {
      uint64_t v6 = *(void *)(v5 + 104) + 12 * a2;
    }
    if (a3 == -1) {
      uint64_t v7 = *(void *)(v5 + 128);
    }
    else {
      uint64_t v7 = *(void *)(v5 + 104) + 12 * a3;
    }
    if (v6 == v7) {
      return 1;
    }
    return *(_DWORD *)v6 == *(_DWORD *)v7
        && *(_DWORD *)(v6 + 4) == *(_DWORD *)(v7 + 4)
        && *(unsigned __int8 *)(v6 + 8) == *(unsigned __int8 *)(v7 + 8);
  }
  return result;
}

void *sub_100083EB0(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = sub_1000810E0(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_10002EC70((void *)(v2 + 8), 1);
      result[6] = 0;
      return result;
    }
    uint64_t v4 = result[6];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = sub_100080EE0(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_100083128((void *)(v2 + 8), 1);
      result[3] = 0;
      return result;
    }
    uint64_t v4 = result[3];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = sub_1000812E0(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_100083214((void *)(v2 + 8), 1);
      result[12] = 0;
      return result;
    }
    uint64_t v4 = result[12];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = sub_1000814E0(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_10008330C((void *)(v2 + 8), 1);
      result[24] = 0;
      return result;
    }
    uint64_t v4 = result[24];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = sub_1000816E0(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_100083404((void *)(v2 + 8), 1);
      result[48] = 0;
      return result;
    }
    uint64_t v4 = result[48];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = sub_1000818E0(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_1000834FC((void *)(v2 + 8), 1);
      result[96] = 0;
      return result;
    }
    uint64_t v4 = result[96];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = sub_100081AE4(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_1000835F4((void *)(v2 + 8), 1);
      result[192] = 0;
      return result;
    }
    uint64_t v4 = result[192];
    goto LABEL_26;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100018AF4();
  }
  return operator new(24 * a2);
}

uint64_t sub_100084084(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    BOOL result = sub_100080EE0(**(void **)result);
    *(void *)(a2 + ++*(void *)(result + 24) = *(void *)(result + 56);
    *(void *)(result + 56) = a2;
  }
  return result;
}

int *sub_1000840C4(int *result, uint64_t a2, int a3, unsigned char *a4)
{
  uint64_t v5 = result;
  if (result[6] != a2 || result[7] != a3 || *a4 != *((unsigned char *)result + 32))
  {
    result[6] = a2;
    result[7] = a3;
    *((unsigned char *)result + 32) = *a4;
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)result + 2) + 32))(*((void *)result + 2), a2);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)v5 + 2) + 48))(*((void *)v5 + 2), a2);
    (*(void (**)(uint64_t *__return_ptr))(**((void **)v5 + 2) + 24))(&v10);
    BOOL result = sub_10002D8A8();
    int v11 = v10;
    HIDWORD(v1sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
    HIDWORD(v1sub_10002B9D0((void **)&STACK[0x2A8], 0) = *result;
    BOOL v9 = *(float *)&v10 == *((float *)&v10 + 1) && v6 == v7;
    *((unsigned char *)v5 + 33) = v9;
    *((unsigned char *)v5 + 34) = v7 == 0;
  }
  return result;
}

uint64_t sub_1000841FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 188);
  if (v3 == 1) {
    return 1;
  }
  if (v3 == 2) {
    return 0;
  }
  uint64_t v7 = sub_100074F20(*(void *)(a1 + 144), a2);
  uint64_t v8 = sub_100074F20(*(void *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (byte_1000FE8F0) {
      sub_100009CF0(__p, "FATAL");
    }
    else {
      sub_100009CF0(__p, "ERROR");
    }
    sub_10002D454(&v14, (uint64_t)__p);
    sub_10002D07C(&std::cerr, (uint64_t)"ComposeFst: Both sides can't require match", 42);
    sub_10002D500(&v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  BOOL v11 = v8 == -1 || v7 <= v8;
  return v7 != -1 && v11;
}

void sub_100084314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008434C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  if (*(_DWORD *)(a7 + 52) != a4)
  {
    *(_DWORD *)(a7 + 52) = a4;
    sub_1000774BC(*(void *)(a7 + 8), a4);
    *(unsigned char *)(a7 + 56) = *(_DWORD *)(a7 + 20) != -1;
  }
  int v14 = *sub_10002D854();
  v19[0] = a8 - 1;
  v19[1] = a8 << 31 >> 31;
  _OWORD v19[2] = v14;
  v19[3] = a6;
  sub_100084584(a1, a2, a7, v19, a8);
  unint64_t v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a5 + 120))(a5, a6, &v16);
  while (1)
  {
    if (!(void)v16)
    {
      if (v18 >= (unint64_t)v17) {
        goto LABEL_15;
      }
LABEL_9:
      uint64_t v15 = (int *)(*((void *)&v16 + 1) + 16 * v18);
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(void))(*(void *)v16 + 16))(v16)) {
      break;
    }
    if (!(void)v16) {
      goto LABEL_9;
    }
    uint64_t v15 = (int *)(*(uint64_t (**)(void))(*(void *)v16 + 24))();
LABEL_10:
    sub_100084584(a1, a2, a7, v15, a8);
    if ((void)v16) {
      (*(void (**)(void))(*(void *)v16 + 32))(v16);
    }
    else {
      ++v18;
    }
  }
  if ((void)v16)
  {
    (*(void (**)(void))(*(void *)v16 + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (*((void *)&v17 + 1)) {
    --**((_DWORD **)&v17 + 1);
  }
LABEL_17:
  sub_100084728(a1, a2);
}

void sub_100084560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    sub_1000B4594();
  }
  else {
    sub_1000B457C((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100084584(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  BOOL result = sub_100074ACC(a3, *v10);
  if (result)
  {
    for (BOOL result = sub_100076500(*(void *)(*(void *)(*(void *)(a3 + 8) + 8) + 8));
          !result;
          BOOL result = sub_100076500(*(void *)(*(void *)(*(void *)(a3 + 8) + 8) + 8)))
    {
      uint8x8_t v12 = sub_100074C24(a3);
      unint64_t v13 = *v12;
      unint64_t v31 = *v12;
      int v32 = *((_DWORD *)v12 + 2);
      int v33 = *((_DWORD *)v12 + 3);
      unint64_t v14 = *(void *)a4;
      unint64_t v28 = *(void *)a4;
      int v29 = a4[2];
      int v30 = a4[3];
      if (a5)
      {
        unint64_t v15 = HIDWORD(v14);
        long long v16 = *(unsigned __int8 **)(a1 + 136);
        if (v15 != -1)
        {
          if (v13 == -1)
          {
            int v17 = v16[32];
            if (v16[32]) {
              char v18 = -1;
            }
            else {
              char v18 = 0;
            }
            char v27 = v18;
            if (v17) {
              goto LABEL_35;
            }
          }
          else
          {
            if (v15) {
              char v23 = 0;
            }
            else {
              char v23 = -1;
            }
            char v27 = v23;
            if (!v15) {
              goto LABEL_35;
            }
          }
LABEL_28:
          unint64_t v24 = (float *)&v28;
          uint64_t v25 = (uint64_t *)&v31;
LABEL_34:
          sub_1000847C4(a1, a2, v24, (uint64_t)v25, &v27);
          goto LABEL_35;
        }
        if (!v16[33])
        {
          char v27 = v16[34] ^ 1;
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v19 = HIDWORD(v13);
        unint64_t v20 = *(unsigned __int8 **)(a1 + 136);
        if (v19 != -1)
        {
          if (v14 == -1)
          {
            int v21 = v20[32];
            if (v21) {
              char v22 = -1;
            }
            else {
              char v22 = 0;
            }
            char v27 = v22;
            if (v21) {
              goto LABEL_35;
            }
          }
          else
          {
            if (v19) {
              char v26 = 0;
            }
            else {
              char v26 = -1;
            }
            char v27 = v26;
            if (!v19) {
              goto LABEL_35;
            }
          }
LABEL_33:
          unint64_t v24 = (float *)&v31;
          uint64_t v25 = (uint64_t *)&v28;
          goto LABEL_34;
        }
        if (!v20[33])
        {
          char v27 = v20[34] ^ 1;
          goto LABEL_33;
        }
      }
LABEL_35:
      sub_100077744(*(void *)(a3 + 8));
    }
  }
  return result;
}

void sub_100084728(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100084B5C(*(void *)(a1 + 120), a2);
  sub_1000853B0(*(void *)(a1 + 120), (uint64_t)v4);
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4] - v5;
  if (v6)
  {
    unint64_t v7 = v6 >> 4;
    int v8 = *(_DWORD *)(a1 + 64);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    BOOL v9 = (int *)(v5 + 12);
    do
    {
      int v11 = *v9;
      v9 += 4;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 64) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  sub_10008543C(a1, a2);
  *((_DWORD *)v4 + 14) |= 0xAu;
}

uint64_t *sub_1000847C4(uint64_t a1, int a2, float *a3, uint64_t a4, char *a5)
{
  int v7 = *(_DWORD *)(a4 + 12);
  *(float *)&uint64_t v19 = a3[3];
  HIDWORD(v19) = v7;
  char v20 = *a5;
  float v8 = *a3;
  int v9 = *(_DWORD *)(a4 + 4);
  float v10 = a3[2];
  if (v10 == -INFINITY || (float v11 = *(float *)(a4 + 8), v11 >= -INFINITY) && v11 <= -INFINITY)
  {
    float v12 = *(float *)sub_10006ECE4();
  }
  else
  {
    BOOL v13 = v11 == INFINITY || v10 == INFINITY;
    float v14 = v10 + v11;
    if (v13) {
      float v12 = INFINITY;
    }
    else {
      float v12 = v14;
    }
  }
  int v15 = sub_1000848A0(*(void **)(a1 + 176), &v19, 1);
  *(float *)char v18 = v8;
  v18[1] = v9;
  *(float *)&v18[2] = v12;
  v18[3] = v15;
  long long v16 = sub_100084B5C(*(void *)(a1 + 120), a2);
  return sub_100085298(v16 + 3, (uint64_t)v18);
}

uint64_t sub_1000848A0(void *a1, uint64_t *a2, int a3)
{
  a1[16] = a2;
  uint64_t v4 = a1 + 4;
  if (!a3)
  {
    uint64_t v6 = sub_100084A1C(v4, &dword_1000CD4F4);
    if (!v6) {
      return 0xFFFFFFFFLL;
    }
    return *((unsigned int *)v6 + 4);
  }
  uint64_t v6 = sub_100083B5C((uint64_t)v4, &dword_1000CD4F4, &dword_1000CD4F4);
  if (!v7) {
    return *((unsigned int *)v6 + 4);
  }
  uint64_t v8 = a1[13];
  unint64_t v9 = a1[14];
  uint64_t v10 = (uint64_t)(v9 - v8) / 12;
  *((_DWORD *)v6 + 4) = v10;
  unint64_t v11 = a1[15];
  if (v9 >= v11)
  {
    if ((unint64_t)(v10 + 1) > 0x1555555555555555) {
      sub_100019424();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v8) >> 2);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v10 + 1) {
      uint64_t v15 = v10 + 1;
    }
    if (v14 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      int v17 = (char *)sub_100081CE8((uint64_t)(a1 + 15), v16);
    }
    else {
      int v17 = 0;
    }
    char v18 = &v17[12 * v10];
    uint64_t v19 = &v17[12 * v16];
    uint64_t v20 = *a2;
    *((_DWORD *)v18 + 2) = *((_DWORD *)a2 + 2);
    *(void *)char v18 = v20;
    BOOL v13 = v18 + 12;
    char v22 = (_DWORD *)a1[13];
    int v21 = (_DWORD *)a1[14];
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *(void *)(v21 - 3);
        v21 -= 3;
        int v24 = v21[2];
        *(void *)(v18 - 12) = v23;
        v18 -= 12;
        *((_DWORD *)v18 + 2) = v24;
      }
      while (v21 != v22);
      int v21 = (_DWORD *)a1[13];
    }
    a1[13] = v18;
    a1[14] = v13;
    a1[15] = v19;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    uint64_t v12 = *a2;
    *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v9 = v12;
    BOOL v13 = (char *)(v9 + 12);
  }
  a1[14] = v13;
  return v10;
}

uint64_t *sub_100084A1C(void *a1, int *a2)
{
  unsigned int v3 = *a2;
  if (*a2 < -1)
  {
    unint64_t v6 = 0;
  }
  else
  {
    uint64_t v4 = a1[6];
    if (v3 == -1) {
      uint64_t v5 = *(int **)(v4 + 128);
    }
    else {
      uint64_t v5 = (int *)(*(void *)(v4 + 104) + 12 * v3);
    }
    unint64_t v6 = *v5 + 7853 * v5[1] + 7867 * *((char *)v5 + 8);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *v11;
  if (*v11)
  {
    BOOL v13 = a1 + 8;
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v6)
      {
        if (sub_100083E14(v13, *((_DWORD *)v12 + 4), *a2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v7) {
            v14 %= *(void *)&v7;
          }
        }
        else
        {
          v14 &= *(void *)&v7 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  return v12;
}

void *sub_100084B5C(uint64_t a1, int a2)
{
  unsigned int v3 = sub_100084BE4(a1, a2);
  uint64_t v4 = v3;
  if (*(unsigned char *)(a1 + 104))
  {
    int v5 = *((_DWORD *)v3 + 14);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)v3 + 14) = v5 | 4;
      unint64_t v6 = v3[4] - v3[3] + *(void *)(a1 + 128) + 64;
      *(void *)(a1 + 128) = v6;
      *(unsigned char *)(a1 + 12sub_10002B9D0((void **)&STACK[0x2A8], 0) = 1;
      if (v6 > *(void *)(a1 + 112)) {
        sub_100084CC8(a1, v3, 0, 0.666);
      }
    }
  }
  return v4;
}

void *sub_100084BE4(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 92);
  if (v3 == a2) {
    return *(void **)(a1 + 96);
  }
  if (*(unsigned char *)(a1 + 88))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 92) = a2;
      int8x8_t v7 = sub_1000823DC(a1, 0);
      *(void *)(a1 + 96) = v7;
      *((_DWORD *)v7 + 14) |= 4u;
      sub_1000850E0(v7 + 3, 0x80uLL);
      return *(void **)(a1 + 96);
    }
    uint64_t v5 = *(void *)(a1 + 96);
    if (!*(_DWORD *)(v5 + 60))
    {
      *(_DWORD *)(a1 + 92) = a2;
      *(_DWORD *)uint64_t v5 = *sub_10002D8A8();
      *(void *)(v5 + 56) = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)(v5 + 32) = *(void *)(v5 + 24);
      BOOL result = *(void **)(a1 + 96);
      *((_DWORD *)result + 14) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 56) &= ~4u;
    *(unsigned char *)(a1 + 88) = 0;
  }
  int v6 = a2 + 1;
  return sub_1000823DC(a1, v6);
}

void sub_100084CC8(uint64_t a1, void *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 120))
  {
    if (dword_1000FF640 >= 2)
    {
      sub_100009CF0(__p, "INFO");
      sub_10002D454((BOOL *)v32, (uint64_t)__p);
      uint8x8_t v8 = sub_10002D07C(&std::cerr, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      sub_10002D07C(v8, (uint64_t)"(", 1);
      unint64_t v9 = (void *)std::ostream::operator<<();
      sub_10002D07C(v9, (uint64_t)"), free recently cached = ", 26);
      unint64_t v10 = (void *)std::ostream::operator<<();
      sub_10002D07C(v10, (uint64_t)", cache std::string::size_type size = ", 15);
      unint64_t v11 = (void *)std::ostream::operator<<();
      sub_10002D07C(v11, (uint64_t)", cache frac = ", 15);
      uint64_t v12 = (void *)std::ostream::operator<<();
      sub_10002D07C(v12, (uint64_t)", cache limit = ", 16);
      BOOL v13 = (void *)std::ostream::operator<<();
      sub_10002D07C(v13, (uint64_t)"\n", 1);
      sub_10002D500(v32);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v14 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 112) * a4);
    uint64_t v15 = *(void *)(a1 + 40);
LABEL_6:
    *(void *)(a1 + 64) = v15;
    while (v15 != a1 + 32)
    {
      int v16 = *(_DWORD *)(v15 + 16);
      if (v16) {
        int v17 = v16 - 1;
      }
      else {
        int v17 = *(_DWORD *)(a1 + 92);
      }
      char v18 = sub_100084BE4(a1, v17);
      unint64_t v19 = *(void *)(a1 + 128);
      if (v19 <= v14 || *((_DWORD *)v18 + 15))
      {
LABEL_23:
        *((_DWORD *)v18 + 14) &= ~8u;
        uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8);
        goto LABEL_6;
      }
      if (a3)
      {
        if (v18 == a2) {
          goto LABEL_23;
        }
        int v20 = *((_DWORD *)v18 + 14);
      }
      else
      {
        int v20 = *((_DWORD *)v18 + 14);
        if ((v20 & 8) != 0 || v18 == a2) {
          goto LABEL_23;
        }
      }
      if ((v20 & 4) != 0)
      {
        unint64_t v21 = v18[4] - v18[3] + 64;
        BOOL v22 = v19 > v21;
        unint64_t v23 = v19 - v21;
        if (v22) {
          *(void *)(a1 + 128) = v23;
        }
      }
      sub_1000851EC((void *)a1);
      uint64_t v15 = *(void *)(a1 + 64);
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 128) <= v14)
    {
      unint64_t v24 = *(void *)(a1 + 128);
      if (v14)
      {
        if (v24 > v14)
        {
          uint64_t v25 = *(void *)(a1 + 112);
          do
          {
            v25 *= 2;
            BOOL v22 = v24 > 2 * v14;
            v14 *= 2;
          }
          while (v22);
          *(void *)(a1 + 112) = v25;
        }
      }
      else if (v24)
      {
        if (byte_1000FE8F0) {
          sub_100009CF0(__p, "FATAL");
        }
        else {
          sub_100009CF0(__p, "ERROR");
        }
        sub_10002D454(&v35, (uint64_t)__p);
        sub_10002D07C(&std::cerr, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        sub_10002D500(&v35);
        if (v37 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      sub_100084CC8(a1, a2, 1, a4);
    }
    if (dword_1000FF640 >= 2)
    {
      sub_100009CF0(v32, "INFO");
      sub_10002D454(&v34, (uint64_t)v32);
      char v26 = sub_10002D07C(&std::cerr, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      sub_10002D07C(v26, (uint64_t)"(", 1);
      char v27 = (void *)std::ostream::operator<<();
      sub_10002D07C(v27, (uint64_t)"), free recently cached = ", 26);
      unint64_t v28 = (void *)std::ostream::operator<<();
      sub_10002D07C(v28, (uint64_t)", cache std::string::size_type size = ", 15);
      int v29 = (void *)std::ostream::operator<<();
      sub_10002D07C(v29, (uint64_t)", cache frac = ", 15);
      int v30 = (void *)std::ostream::operator<<();
      sub_10002D07C(v30, (uint64_t)", cache limit = ", 16);
      unint64_t v31 = (void *)std::ostream::operator<<();
      sub_10002D07C(v31, (uint64_t)"\n", 1);
      sub_10002D500(&v34);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
}

void sub_100085074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000850E0(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 4)
  {
    int v3 = result;
    if (a2 >> 60) {
      sub_100019424();
    }
    uint64_t v4 = result[1] - *result;
    void v5[4] = result + 3;
    v5[0] = sub_100082C94(result + 3, a2);
    v5[1] = v5[0] + v4;
    _OWORD v5[2] = v5[0] + v4;
    v5[3] = v5[0] + 16 * a2;
    sub_100030828(v3, v5);
    return (uint64_t *)sub_10008518C((uint64_t)v5);
  }
  return result;
}

void sub_100085178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10008518C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10008518C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  if (*(void *)a1) {
    sub_100079758(*(uint64_t **)(a1 + 32), *(void **)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

uint64_t sub_1000851EC(void *a1)
{
  int v1 = *(_DWORD *)(a1[8] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 23))
  {
    *((_DWORD *)a1 + 23) = -1;
    a1[12] = 0;
  }
  return sub_100085218(a1);
}

uint64_t sub_100085218(void *a1)
{
  sub_1000796BC(*(void *)(a1[1] + 8 * *(int *)(a1[8] + 16)), a1 + 9);
  *(void *)(a1[1] + 8 * *(int *)(a1[8] + 16)) = 0;
  uint64_t v2 = (uint64_t *)a1[8];
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  a1[8] = v3;
  *(void *)(v4 + 8) = v3;
  *(void *)v2[1] = v4;
  --a1[6];
  return sub_10007CDDC((uint64_t)(a1 + 4), (uint64_t)v2);
}

uint64_t *sub_100085298(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[1];
  unint64_t v5 = result[2];
  if (v4 >= v5)
  {
    uint64_t v7 = (uint64_t)(v4 - *result) >> 4;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 60) {
      sub_100019424();
    }
    unint64_t v9 = result + 3;
    uint64_t v10 = v5 - *v3;
    if (v10 >> 3 > v8) {
      unint64_t v8 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v8;
    }
    v14[4] = v3 + 3;
    uint64_t v12 = sub_100082C94(v9, v11);
    BOOL v13 = &v12[2 * v7];
    v14[0] = v12;
    v14[1] = v13;
    double v14[3] = &v12[2 * v11];
    *BOOL v13 = *(void *)a2;
    *((_DWORD *)v13 + 2) = *(_DWORD *)(a2 + 8);
    *((_DWORD *)v13 + 3) = *(_DWORD *)(a2 + 12);
    v14[2] = v13 + 2;
    sub_100030828(v3, v14);
    uint64_t v6 = v3[1];
    BOOL result = (uint64_t *)sub_10008518C((uint64_t)v14);
  }
  else
  {
    *(void *)unint64_t v4 = *(void *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(a2 + 12);
    uint64_t v6 = v4 + 16;
    result[1] = v4 + 16;
  }
  v3[1] = v6;
  return result;
}

void sub_10008539C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10008518C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000853B0(uint64_t a1, uint64_t a2)
{
  sub_1000854D8((void *)a2);
  if (*(unsigned char *)(a1 + 120))
  {
    if ((*(unsigned char *)(a2 + 56) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 32) - *(void *)(a2 + 24) + *(void *)(a1 + 128);
      *(void *)(a1 + 128) = v4;
      if (v4 > *(void *)(a1 + 112))
      {
        sub_100084CC8(a1, (void *)a2, 0, 0.666);
      }
    }
  }
}

void sub_10008543C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 100) < a2) {
    *(_DWORD *)(a1 + 10sub_10002B9D0((void **)&STACK[0x2A8], 0) = a2;
  }
  int v2 = *(_DWORD *)(a1 + 96);
  if (v2 <= a2)
  {
    if (v2 == a2) {
      *(_DWORD *)(a1 + 96) = a2 + 1;
    }
    if (*(unsigned char *)(a1 + 104) || !*(void *)(a1 + 112))
    {
      uint64_t v3 = (void *)(a1 + 72);
      unint64_t v4 = a2;
      if (*(void *)(a1 + 80) <= (unint64_t)a2) {
        sub_100085518(a1 + 72, a2 + 1, 0);
      }
      *(void *)(*v3 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
    }
  }
}

void *sub_1000854D8(void *result)
{
  int v1 = (_DWORD *)result[3];
  int v2 = (_DWORD *)result[4];
  while (v1 != v2)
  {
    if (!*v1) {
      ++result[1];
    }
    if (!v1[1]) {
      ++result[2];
    }
    v1 += 4;
  }
  return result;
}

void sub_100085518(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      unint64_t v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        sub_100019424();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      sub_10002EE48(&v21, v12);
      BOOL v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      unint64_t v23 = v21;
      int v24 = 0;
      sub_10008569C(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      int v17 = v19;
      LODWORD(v18) = v20;
      uint64_t v15 = *(char **)a1;
      *(void *)a1 = v21;
      unint64_t v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      int v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        unint64_t v21 = v17;
        LODWORD(v22) = v18;
        sub_1000857D0(&v21, v6);
      }
      else
      {
        unint64_t v21 = v17;
        LODWORD(v22) = v18;
        sub_100085884((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_100085680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_10008569C@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    long long v16 = *(unint64_t **)a5;
  }
  else
  {
    unint64_t v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    long long v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *long long v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void *sub_1000857D0(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *BOOL result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    BOOL result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *uint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_100085884(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void sub_100085934(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_1000F2698;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + ++*(void *)(result + 24) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = -1;
  *(_DWORD *)(a1 + 36) = a3;
  sub_1000749C0();
}

void sub_1000859E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[6];
  v1[6] = 0;
  if (v3) {
    sub_1000B45C8(v3);
  }
  uint64_t v4 = v1[5];
  v1[5] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v1[1];
  v1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100085A6C(void *a1)
{
  *a1 = off_1000F2698;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_100085B3C(void *a1)
{
  *a1 = off_1000F2698;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  operator delete();
}

void sub_100085C2C()
{
}

void sub_100085C84()
{
}

uint64_t sub_100085CA8(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
  if (result != 4)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2);
    if (result != 4)
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) != 5
        || (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2), result != 5))
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) == 5
          && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2) == *(_DWORD *)(a1 + 36))
        {
          return 5;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) != *(_DWORD *)(a1 + 36)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2), result != 5))
        {
          if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) != *(_DWORD *)(a1 + 36))return 4; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2);
          }
          if (result != *(_DWORD *)(a1 + 36)) {
            return 4;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100085EEC(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 32) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 32) = a2;
    uint64_t v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 24) + 176) + 104) + 12 * a2);
    uint64_t v4 = *(void *)(result + 40);
    uint64_t v5 = *v3;
    if (*(_DWORD *)(v4 + 52) != v5)
    {
      *(_DWORD *)(v4 + 52) = v5;
      uint64_t result = sub_1000774BC(*(void *)(v4 + 8), v5);
      *(unsigned char *)(v4 + 56) = *(_DWORD *)(v4 + 20) != -1;
    }
    uint64_t v6 = *(void *)(v2 + 48);
    uint64_t v7 = v3[1];
    if (*(_DWORD *)(v6 + 52) != v7)
    {
      *(_DWORD *)(v6 + 52) = v7;
      uint64_t result = sub_1000774BC(*(void *)(v6 + 8), v7);
      *(unsigned char *)(v6 + 56) = *(_DWORD *)(v6 + 20) != -1;
    }
    *(_DWORD *)(v2 + 72) = *(_DWORD *)(v2 + 32);
  }
  return result;
}

uint64_t sub_100085FA0(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 56) = a2 == 0;
  if (*(_DWORD *)(a1 + 36) == 1)
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      uint64_t v3 = (uint64_t *)(a1 + 48);
      return sub_100086248(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 48);
    uint64_t v3 = (uint64_t *)(a1 + 40);
    return sub_100086248(a1, a2, *v2, *v3);
  }
  return 1;
}

BOOL sub_100085FE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)
    || !sub_100076500(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 8) + 8)))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 8) + 8);
  return sub_100076500(v2);
}

uint64_t sub_100086058(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    return a1 + 60;
  }
  else {
    return a1 + 76;
  }
}

uint64_t sub_100086070(uint64_t result)
{
  if (*(unsigned char *)(result + 56))
  {
    *(unsigned char *)(result + 56) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 36) == 1)
    {
      uint64_t v1 = *(void *)(result + 40);
      uint64_t v2 = *(void *)(result + 48);
    }
    else
    {
      uint64_t v2 = *(void *)(result + 40);
      uint64_t v1 = *(void *)(result + 48);
    }
    return sub_1000862D4(result, v1, v2);
  }
  return result;
}

uint64_t sub_10008609C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1000860A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000860AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

void sub_1000860D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_1000F2698;
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 72))(*(void *)(a2 + 16), a3);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + ++*(void *)(result + 24) = *(void *)(v5 + 8);
  int v6 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = -1;
  *(_DWORD *)(a1 + 36) = v6;
  sub_1000749C0();
}

void sub_1000861BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[6];
  v1[6] = 0;
  if (v3) {
    sub_1000B45C8(v3);
  }
  uint64_t v4 = v1[5];
  v1[5] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v1[1];
  v1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100086248(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_100074ACC(a3, a2);
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 36);
    unint64_t v9 = (int *)sub_100074C24(a3);
    int64_t v10 = v9 + 1;
    if (v8 != 1) {
      int64_t v10 = v9;
    }
    sub_100074ACC(a4, *v10);
    return sub_1000862D4(a1, a3, a4);
  }
  return result;
}

uint64_t sub_1000862D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (!sub_100076500(*(void *)(*(void *)(*(void *)(a2 + 8) + 8) + 8))
       || !sub_100076500(*(void *)(*(void *)(*(void *)(a3 + 8) + 8) + 8)))
  {
    if (sub_100076500(*(void *)(*(void *)(*(void *)(a3 + 8) + 8) + 8)))
    {
      sub_100077744(*(void *)(a2 + 8));
      while (!sub_100076500(*(void *)(*(void *)(*(void *)(a2 + 8) + 8) + 8)))
      {
        int v6 = *(_DWORD *)(a1 + 36);
        uint64_t v7 = (int *)sub_100074C24(a2);
        int v8 = v7 + 1;
        if (v6 != 1) {
          int v8 = v7;
        }
        if (sub_100074ACC(a3, *v8)) {
          break;
        }
        sub_100077744(*(void *)(a2 + 8));
      }
    }
    while (!sub_100076500(*(void *)(*(void *)(*(void *)(a3 + 8) + 8) + 8)))
    {
      unint64_t v9 = sub_100074C24(a2);
      int64_t v10 = sub_100074C24(a3);
      sub_100077744(*(void *)(a3 + 8));
      uint64_t v11 = *(unsigned int *)(a1 + 32);
      int v12 = *(_DWORD *)(a1 + 36);
      BOOL v13 = v12 == 1;
      if (v12 == 1) {
        uint64_t v14 = v9;
      }
      else {
        uint64_t v14 = v10;
      }
      uint64_t v20 = *v14;
      int v21 = *((_DWORD *)v14 + 2);
      int v22 = *((_DWORD *)v14 + 3);
      if (v13) {
        uint64_t v15 = v10;
      }
      else {
        uint64_t v15 = v9;
      }
      uint64_t v17 = *v15;
      int v18 = *((_DWORD *)v15 + 2);
      int v19 = *((_DWORD *)v15 + 3);
      if (sub_100086444(a1, v11, (uint64_t)&v20, (uint64_t)&v17)) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100086444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = *(unsigned __int8 **)(v5 + 136);
  int v7 = *(_DWORD *)(a3 + 4);
  if (v7 == -1)
  {
    if (v6[33]) {
      return 0;
    }
    LOBYTE(v6) = v6[34] ^ 1;
  }
  else if (*(_DWORD *)a4 == -1)
  {
    uint64_t v8 = 0;
    LODWORD(v6) = v6[32];
    if (v6) {
      return v8;
    }
  }
  else
  {
    LOBYTE(v6) = 0;
    if (!v7) {
      return 0;
    }
  }
  int v9 = *(_DWORD *)(a4 + 12);
  LODWORD(v16) = *(_DWORD *)(a3 + 12);
  HIDWORD(v16) = v9;
  char v17 = (char)v6;
  int v10 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = v10;
  float v11 = *(float *)(a3 + 8);
  if (v11 == -INFINITY || (float v12 = *(float *)(a4 + 8), v12 >= -INFINITY) && v12 <= -INFINITY)
  {
    float v13 = *(float *)sub_10006ECE4();
    uint64_t v5 = *(void *)(a1 + 24);
  }
  else
  {
    BOOL v14 = v12 == INFINITY || v11 == INFINITY;
    float v13 = v11 + v12;
    if (v14) {
      float v13 = INFINITY;
    }
  }
  *(float *)(a1 + 84) = v13;
  uint64_t v8 = 1;
  *(_DWORD *)(a1 + 88) = sub_1000848A0(*(void **)(v5 + 176), &v16, 1);
  return v8;
}

uint64_t sub_100086550(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 56))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 4))
    {
      *(unsigned char *)(a1 + 56) = 1;
    }
    else if (!*(unsigned char *)(a1 + 56))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 6sub_10002B9D0((void **)&STACK[0x2A8], 0) = v3;
        *(unsigned char *)(a1 + 56) = 1;
        if (*(_DWORD *)(a1 + 64) <= v3) {
          *(_DWORD *)(a1 + 64) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 60);
}

float sub_100086614@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  if ((sub_1000866D8((uint64_t)a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 64))(&v11, a1, a2);
    int v6 = sub_100084B5C(a1[15], a2);
    _DWORD *v6 = v11;
    v6[14] |= 9u;
  }
  uint64_t v7 = a1[15];
  if (*(_DWORD *)(v7 + 92) == a2) {
    uint64_t v8 = (float **)(v7 + 96);
  }
  else {
    uint64_t v8 = (float **)(*(void *)(v7 + 8) + 8 * ((int)a2 + 1));
  }
  int v9 = *v8;
  float result = *v9;
  *a3 = *(_DWORD *)v9;
  return result;
}

uint64_t sub_1000866D8(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 92) == a2)
  {
    int v3 = (uint64_t *)(v2 + 96);
  }
  else
  {
    unint64_t v4 = a2 + 1;
    uint64_t v6 = v2 + 8;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v4 >= (*(void *)(v6 + 8) - v5) >> 3) {
      return 0;
    }
    int v3 = (uint64_t *)(v5 + 8 * v4);
  }
  uint64_t v7 = *v3;
  if (!v7) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 56);
  if ((v8 & 1) == 0) {
    return 0;
  }
  *(_DWORD *)(v7 + 56) = v8 | 8;
  return 1;
}

uint64_t sub_100086734(void *a1, uint64_t a2)
{
  if ((sub_1000867C0((uint64_t)a1, a2) & 1) == 0) {
    (*(void (**)(void *, uint64_t))(*a1 + 40))(a1, a2);
  }
  uint64_t v4 = a1[15];
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

uint64_t sub_1000867C0(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 92) == a2)
  {
    int v3 = (uint64_t *)(v2 + 96);
  }
  else
  {
    unint64_t v4 = a2 + 1;
    uint64_t v6 = v2 + 8;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v4 >= (*(void *)(v6 + 8) - v5) >> 3) {
      return 0;
    }
    int v3 = (uint64_t *)(v5 + 8 * v4);
  }
  uint64_t v7 = *v3;
  if (!v7) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 56);
  if ((v8 & 2) == 0) {
    return 0;
  }
  *(_DWORD *)(v7 + 56) = v8 | 8;
  return 1;
}

uint64_t sub_10008681C(void *a1, uint64_t a2)
{
  if ((sub_1000867C0((uint64_t)a1, a2) & 1) == 0) {
    (*(void (**)(void *, uint64_t))(*a1 + 40))(a1, a2);
  }
  uint64_t v4 = a1[15];
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t sub_1000868A0(void *a1, uint64_t a2)
{
  if ((sub_1000867C0((uint64_t)a1, a2) & 1) == 0) {
    (*(void (**)(void *, uint64_t))(*a1 + 40))(a1, a2);
  }
  uint64_t v4 = a1[15];
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *sub_100086924(void *a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
    sub_1000869C4(&v8, v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a1[1] = v4;
  a1[2] = v6;
  *a1 = off_1000F1398;
  return a1;
}

void sub_1000869C4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100086A2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000B45EC();
  }
  _Unwind_Resume(exception_object);
}

void sub_100086A48(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100086A80(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100086AB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100086AF8()
{
}

uint64_t sub_100086B0C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 64)) {
    return 0;
  }
  uint64_t v5 = sub_100086C6C(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 64)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    sub_100086D4C(&v20, *(void *)(a1 + 8), v6);
    unint64_t v7 = v21;
    uint64_t v8 = *(void *)(v20 + 24);
    uint64_t v9 = *(void *)(v20 + 32) - v8;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      uint64_t v11 = v9 >> 4;
      int v12 = *(_DWORD *)(v10 + 64);
      float v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        int v15 = *v13;
        v13 += 4;
        int v14 = v15;
        if (v12 <= v15)
        {
          int v12 = v14 + 1;
          *(_DWORD *)(v10 + 64) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      unint64_t v21 = v11;
    }
    sub_10008543C(v10, v6);
    int v16 = *(_DWORD *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(v17 + 64);
    --*(_DWORD *)(v20 + 60);
    BOOL v4 = v16 >= v18;
    if (v16 < v18) {
      break;
    }
    uint64_t v6 = sub_100086C6C(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 64));
  return v4;
}

void sub_100086C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100086C34(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_100086C3C(uint64_t result)
{
  return result;
}

uint64_t sub_100086C4C(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100086C58()
{
}

uint64_t sub_100086C6C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 96);
  if ((int)v1 <= *(_DWORD *)(a1 + 100))
  {
    while (1)
    {
      int v3 = sub_100086CC8(a1, v1);
      int v4 = *(_DWORD *)(a1 + 96);
      if (!v3) {
        break;
      }
      uint64_t v1 = (v4 + 1);
      *(_DWORD *)(a1 + 96) = v1;
      if (v4 >= *(_DWORD *)(a1 + 100)) {
        return v1;
      }
    }
    return *(unsigned int *)(a1 + 96);
  }
  return v1;
}

uint64_t sub_100086CC8(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 104) || !*(void *)(a1 + 112)) {
    return (*(void *)(*(void *)(a1 + 72) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1;
  }
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v3 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v3 + 92) == a2)
    {
      int v4 = (void *)(v3 + 96);
      return *v4 != 0;
    }
    unint64_t v5 = a2 + 1;
    uint64_t v7 = v3 + 8;
    uint64_t v6 = *(void *)(v3 + 8);
    if (v5 < (*(void *)(v7 + 8) - v6) >> 3)
    {
      int v4 = (void *)(v6 + 8 * v5);
      return *v4 != 0;
    }
  }
  return 0;
}

void *sub_100086D4C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  uint64_t v7 = sub_100084B5C(*(void *)(v6 + 120), a3);
  *a1 = v7;
  ++*((_DWORD *)v7 + 15);
  if ((sub_1000867C0(*(void *)(a2 + 8), a3) & 1) == 0) {
    (*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  }
  return a1;
}

void sub_100086DE0(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 60);
  _Unwind_Resume(a1);
}

uint64_t sub_100086DF4(uint64_t a1, uint64_t a2, void *a3)
{
  if ((sub_1000867C0(a1, a2) & 1) == 0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2);
  }
  return sub_100086E74(a1, a2, a3);
}

uint64_t sub_100086E74(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 120);
  if (*(_DWORD *)(v3 + 92) == a2) {
    int v4 = (uint64_t *)(v3 + 96);
  }
  else {
    int v4 = (uint64_t *)(*(void *)(v3 + 8) + 8 * (a2 + 1));
  }
  uint64_t v5 = *v4;
  int v8 = *(_DWORD *)(v5 + 60);
  uint64_t v6 = (_DWORD *)(v5 + 60);
  int v7 = v8;
  uint64_t v9 = *(void *)(v6 - 9);
  uint64_t v10 = (*(void *)(v6 - 7) - v9) >> 4;
  if (*(void *)(v6 - 7) == v9) {
    uint64_t v9 = 0;
  }
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  _DWORD *v6 = v7 + 1;
  return result;
}

void *sub_100086EC8(void *a1, uint64_t a2)
{
  sub_1000300E0(a2, &v4);
  sub_100067C8C(a1, &v4);
  if (v5) {
    sub_100018BC0(v5);
  }
  *a1 = off_1000F09A8;
  return a1;
}

void sub_100086F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_100018BC0(a11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100086F4C(void *a1)
{
  *a1 = off_1000F2DE0;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_100018BC0(v2);
  }
  return a1;
}

void sub_100086F98(void *a1)
{
  *a1 = off_1000F2DE0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_100018BC0(v1);
  }
  operator delete();
}

uint64_t sub_100087004(uint64_t a1)
{
  return sub_10008B81C(*(void *)(a1 + 8));
}

_DWORD *sub_10008700C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X8>)
{
  return sub_10008C884(*(void *)(a1 + 8), a2, a3);
}

uint64_t sub_100087014(uint64_t a1, int a2)
{
  return sub_10008C9A8(*(void *)(a1 + 8), a2);
}

uint64_t sub_10008701C(uint64_t a1, int a2)
{
  return sub_10008D258(*(uint64_t **)(a1 + 8), a2);
}

uint64_t sub_100087024(uint64_t a1, int a2)
{
  return sub_10008D5F0(*(uint64_t **)(a1 + 8), a2);
}

uint64_t sub_10008702C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = sub_100067D14(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v7();
  }
}

uint64_t sub_1000870E0(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void sub_1000870EC()
{
}

void sub_100087160()
{
}

uint64_t sub_100087184(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t sub_100087190(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void sub_10008719C()
{
}

void sub_100087254()
{
}

uint64_t sub_100087278(uint64_t a1, int a2, void *a3)
{
  return sub_10008EE4C(*(uint64_t **)(a1 + 8), a2, a3);
}

uint64_t sub_100087280(void *a1, int a2)
{
  if (!*(unsigned char *)(a1[1] + 160))
  {
    if (a2 == 2)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*a1 + 56);
    }
    else
    {
      if (a2 != 1) {
        goto LABEL_2;
      }
      uint64_t v3 = *(uint64_t (**)(void))(*a1 + 56);
    }
    if (v3()) {
      operator new();
    }
  }
LABEL_2:
  if (dword_1000FF640 >= 2)
  {
    sub_100009CF0(__p, "INFO");
    sub_10002D454(&v6, (uint64_t)__p);
    sub_10002D07C(&std::cerr, (uint64_t)"Not using replace matcher", 25);
    sub_10002D500(&v6);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_1000873BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
}

void *sub_100087408@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0x128uLL);
  uint64_t result = sub_10008746C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100087458(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10008746C(void *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000F29C8;
  sub_100087564((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1000874B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000874C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F29C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000874E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F29C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10008753C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100087564(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = sub_10007931C(a1, a3);
  *(void *)uint64_t v6 = off_1000F2A18;
  *(void *)(v6 + 132) = *(void *)(a3 + 32);
  uint64_t v7 = *(void *)(a3 + 40);
  *(void *)&long long v8 = (int)v7;
  *((void *)&v8 + 1) = SHIDWORD(v7);
  *(_OWORD *)(v6 + 144) = v8;
  uint64_t v9 = *(void *)(a3 + 56);
  if (!v9) {
    operator new();
  }
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 168) = v9;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 20sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0u;
  uint64_t v56 = a1 + 200;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(void *)(a1 + 24sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  uint64_t v57 = (uint64_t *)(a1 + 240);
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  sub_100009CF0(&__str, "replace");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (!*(void *)(a1 + 144)) {
    *(_DWORD *)(a1 + 132) = 1;
  }
  if (!*(void *)(a1 + 152)) {
    *(_DWORD *)(a1 + 136) = 1;
  }
  if (*a2 != a2[1])
  {
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*a2 + 8) + 96))(*(void *)(*a2 + 8));
    sub_100030234(a1, v10);
    uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(*a2 + 8) + 104))(*(void *)(*a2 + 8));
    sub_1000302D4(a1, v11);
  }
  float v13 = *(void **)(a1 + 248);
  unint64_t v12 = *(void *)(a1 + 256);
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = ((uint64_t)v13 - *v57) >> 3;
    if ((unint64_t)(v15 + 1) >> 61) {
      sub_100019424();
    }
    uint64_t v16 = v12 - *v57;
    uint64_t v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
      uint64_t v17 = v15 + 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v77 = a1 + 256;
    if (v18) {
      int v19 = (char *)sub_10001943C(a1 + 256, v18);
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = &v19[8 * v15];
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
    uint64_t v76 = &v19[8 * v18];
    *(void *)uint64_t v20 = 0;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 + 8);
    sub_10008B108(v57, &__str);
    int v14 = *(void **)(a1 + 248);
    sub_10008B2B8((void **)&__str.__r_.__value_.__l.__data_);
  }
  else
  {
    *float v13 = 0;
    int v14 = v13 + 1;
    *(void *)(a1 + 248) = v14;
  }
  *(void *)(a1 + 248) = v14;
  uint64_t v21 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      LODWORD(v58[0]) = 0;
      uint64_t v24 = v21 + v22;
      LODWORD(v58[0]) = *(_DWORD *)v24;
      uint64_t v25 = *(void *)(v24 + 8);
      uint64_t v27 = *(void *)(a1 + 240);
      uint64_t v26 = *(void *)(a1 + 248);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
      *((_DWORD *)sub_10008B364(v56, (int *)v58, (uint64_t)&unk_1000CE129, &__str) + 5) = (unint64_t)(v26 - v27) >> 3;
      sub_10008B584((uint64_t **)(a1 + 176), (int *)v58, v58);
      uint64_t v28 = v25;
      if (!*(unsigned char *)(a3 + 48)) {
        uint64_t v28 = (*(uint64_t (**)(uint64_t, void))(*(void *)v25 + 72))(v25, 0);
      }
      int v30 = *(uint64_t **)(a1 + 248);
      unint64_t v29 = *(void *)(a1 + 256);
      if ((unint64_t)v30 >= v29)
      {
        uint64_t v32 = ((uint64_t)v30 - *v57) >> 3;
        if ((unint64_t)(v32 + 1) >> 61) {
          sub_100019424();
        }
        uint64_t v33 = v29 - *v57;
        uint64_t v34 = v33 >> 2;
        if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
          uint64_t v34 = v32 + 1;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        uint64_t v77 = a1 + 256;
        if (v35) {
          uint64_t v36 = (char *)sub_10001943C(a1 + 256, v35);
        }
        else {
          uint64_t v36 = 0;
        }
        char v37 = (uint64_t *)&v36[8 * v32];
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
        uint64_t v76 = &v36[8 * v35];
        uint64_t *v37 = v28;
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v37 + 1);
        sub_10008B108(v57, &__str);
        unint64_t v31 = *(void **)(a1 + 248);
        sub_10008B2B8((void **)&__str.__r_.__value_.__l.__data_);
      }
      else
      {
        *int v30 = v28;
        unint64_t v31 = v30 + 1;
        *(void *)(a1 + 248) = v31;
      }
      *(void *)(a1 + 248) = v31;
      if (!v23) {
        goto LABEL_62;
      }
      uint64_t v38 = *(void *)(a1 + 40);
      uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 96))(v25);
      if (!sub_1000BC600(v38, v39, 1)) {
        break;
      }
LABEL_51:
      uint64_t v43 = *(void *)(a1 + 48);
      uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 104))(v25);
      if (!sub_1000BC600(v43, v44, 1))
      {
        int v45 = byte_1000FE8F0;
        if (byte_1000FE8F0)
        {
          sub_100009CF0(v65, "FATAL");
          sub_10002D454(&v67, (uint64_t)v65);
        }
        else
        {
          sub_100009CF0(v62, "ERROR");
          sub_10002D454(&v64, (uint64_t)v62);
        }
        sub_10002D07C(&std::cerr, (uint64_t)"ReplaceFstImpl: Output symbols of FST ", 38);
        uint64_t v46 = (void *)std::ostream::operator<<();
        sub_10002D07C(v46, (uint64_t)" do not match output symbols of base FST (0th FST)", 50);
        if (v45)
        {
          sub_10002D500(&v67);
          if (v66 < 0)
          {
            int v47 = (void *)v65[0];
            goto LABEL_60;
          }
        }
        else
        {
          sub_10002D500(&v64);
          if (v63 < 0)
          {
            int v47 = v62[0];
LABEL_60:
            operator delete(v47);
          }
        }
        *(void *)(a1 + 8) |= 4uLL;
      }
LABEL_62:
      ++v23;
      uint64_t v21 = *a2;
      v22 += 16;
      if (v23 >= (a2[1] - *a2) >> 4) {
        goto LABEL_63;
      }
    }
    int v40 = byte_1000FE8F0;
    if (byte_1000FE8F0)
    {
      sub_100009CF0(v71, "FATAL");
      sub_10002D454(&v73, (uint64_t)v71);
    }
    else
    {
      sub_100009CF0(__p, "ERROR");
      sub_10002D454(&v70, (uint64_t)__p);
    }
    sub_10002D07C(&std::cerr, (uint64_t)"ReplaceFstImpl: Input symbols of FST ", 37);
    unint64_t v41 = (void *)std::ostream::operator<<();
    sub_10002D07C(v41, (uint64_t)" do not match input symbols of base FST (0th FST)", 49);
    if (v40)
    {
      sub_10002D500(&v73);
      if (v72 < 0)
      {
        uint64_t v42 = (void *)v71[0];
LABEL_49:
        operator delete(v42);
      }
    }
    else
    {
      sub_10002D500(&v70);
      if (v69 < 0)
      {
        uint64_t v42 = __p[0];
        goto LABEL_49;
      }
    }
    *(void *)(a1 + 8) |= 4uLL;
    goto LABEL_51;
  }
LABEL_63:
  uint64_t v48 = (int *)(a3 + 28);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
  int v49 = *((_DWORD *)sub_10008B364(v56, v48, (uint64_t)&unk_1000CE129, &__str) + 5);
  if (!v49 && *(void *)(a1 + 248) - *(void *)(a1 + 240) >= 9uLL)
  {
    if (byte_1000FE8F0) {
      sub_100009CF0(&__str, "FATAL");
    }
    else {
      sub_100009CF0(&__str, "ERROR");
    }
    sub_10002D454(&v74, (uint64_t)&__str);
    sub_10002D07C(&std::cerr, (uint64_t)"ReplaceFstImpl: No FST corresponding to root label ", 51);
    int v50 = (void *)std::ostream::operator<<();
    sub_10002D07C(v50, (uint64_t)" in the input tuple vector", 26);
    sub_10002D500(&v74);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
  if (v49 <= 1) {
    int v51 = 1;
  }
  else {
    int v51 = v49;
  }
  *(_DWORD *)(a1 + 264) = v51;
  char v61 = 0;
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | sub_100087E8C(*v48, a2, *(_DWORD *)(a1 + 132), *(_DWORD *)(a1 + 136), *(_DWORD *)(a1 + 144), &v61);
  *(unsigned char *)(a1 + 16sub_10002B9D0((void **)&STACK[0x2A8], 0) = v61 ^ 1;
  if (dword_1000FF640 >= 2)
  {
    sub_100009CF0(v58, "INFO");
    sub_10002D454(&v60, (uint64_t)v58);
    uint64_t v52 = sub_10002D07C(&std::cerr, (uint64_t)"ReplaceFstImpl::ReplaceFstImpl: always_cache = ", 47);
    if (*(unsigned char *)(a1 + 160)) {
      uint64_t v53 = "true";
    }
    else {
      uint64_t v53 = "false";
    }
    if (*(unsigned char *)(a1 + 160)) {
      uint64_t v54 = 4;
    }
    else {
      uint64_t v54 = 5;
    }
    sub_10002D07C(v52, (uint64_t)v53, v54);
    sub_10002D500(&v60);
    if (v59 < 0) {
      operator delete(v58[0]);
    }
  }
  return a1;
}

void sub_100087CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12, void **a13)
{
  if (*(char *)(v15 - 105) < 0) {
    operator delete(*(void **)(v15 - 128));
  }
  a13 = a12;
  sub_10008B640(&a13);
  sub_10001B7F8(a11);
  sub_10001B844(v14, *a10);
  sub_10008B700((uint64_t **)(v13 + 168), 0);
  sub_10007EC44(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_100087E8C(int a1, uint64_t *a2, int a3, int a4, int a5, unsigned char *a6)
{
  uint64_t v6 = a6;
  std::string __p = 0;
  char v59 = 0;
  BOOL v60 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1] - *a2;
  if (v8)
  {
    int v48 = a3;
    int v49 = a5;
    int v50 = a4;
    unint64_t v9 = 0;
    int v10 = 0;
    unint64_t v11 = v8 >> 4;
    int v12 = 1;
    char v13 = 1;
    char v14 = 1;
    int v15 = 1;
    int v16 = 1;
    do
    {
      int v56 = v16;
      int v57 = v12;
      int v17 = v15;
      unint64_t v18 = (int *)(v7 + 16 * v9);
      uint64_t v19 = *v18;
      BOOL v20 = v11 >= v19 && v19 > 0;
      BOOL v54 = v20;
      BOOL v55 = v19 < 0;
      if (v19 == a1) {
        int v10 = v9;
      }
      uint64_t v21 = *((void *)v18 + 1);
      BOOL v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21) != -1;
      BOOL v23 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v21 + 56))(v21, 0x10000000, 0) != 0;
      BOOL v24 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v21 + 56))(v21, 0x40000000, 0) != 0;
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v21 + 56))(v21, 0xFFFFFFFF0004, 0);
      uint64_t v26 = v25;
      uint64_t v27 = v59;
      if (v59 >= v60)
      {
        unint64_t v31 = (char *)__p;
        uint64_t v32 = (v59 - (unsigned char *)__p) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
          sub_100019424();
        }
        uint64_t v34 = v60 - (unsigned char *)__p;
        if ((v60 - (unsigned char *)__p) >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          uint64_t v36 = (char *)sub_10001943C((uint64_t)&v60, v35);
          unint64_t v31 = (char *)__p;
          uint64_t v27 = v59;
        }
        else
        {
          uint64_t v36 = 0;
        }
        char v37 = (uint64_t *)&v36[8 * v32];
        uint64_t *v37 = v26;
        uint64_t v28 = (char *)(v37 + 1);
        int v29 = v17;
        while (v27 != v31)
        {
          uint64_t v38 = *((void *)v27 - 1);
          v27 -= 8;
          *--char v37 = v38;
        }
        std::string __p = v37;
        char v59 = v28;
        BOOL v60 = &v36[8 * v35];
        int v30 = v57;
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(void *)char v59 = v25;
        uint64_t v28 = v27 + 8;
        int v29 = v17;
        int v30 = v57;
      }
      v14 &= v55;
      v13 &= v54;
      int v15 = v22 & v29;
      int v12 = v23 & v30;
      int v16 = v24 & v56;
      char v59 = v28;
      ++v9;
      uint64_t v7 = *a2;
      unint64_t v11 = (a2[1] - *a2) >> 4;
    }
    while (v11 > v9);
    uint64_t v39 = v10;
    unsigned __int8 v40 = v14 | v13;
    uint64_t v6 = a6;
    a5 = v49;
    a4 = v50;
    a3 = v48;
  }
  else
  {
    uint64_t v39 = 0;
    LOBYTE(v16) = 1;
    int v15 = 1;
    unsigned __int8 v40 = 1;
    LOBYTE(v12) = 1;
  }
  BOOL v43 = a3 == 4 && a5 != -1 || (a4 & 0xFFFFFFFE) == 2;
  int v44 = (a3 & 0xFFFFFFFE) == 2 || v43;
  uint64_t v45 = sub_1000C2770((uint64_t **)&__p, v39, (a3 & 0xFFFFFFFD) == 1, (a4 & 0xFFFFFFFD) == 1, (a3 - 1) < 2, (a4 - 1) < 2, v44, v15, v12, v16, v40);
  if ((v45 & 0x50000000) != 0) {
    char v46 = v15;
  }
  else {
    char v46 = 0;
  }
  unsigned char *v6 = v46;
  if (__p)
  {
    char v59 = (char *)__p;
    operator delete(__p);
  }
  return v45;
}

void sub_1000881F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100088218(uint64_t a1)
{
  *(void *)a1 = off_1000F2A18;
  uint64_t v3 = (void **)(a1 + 240);
  sub_10008B640(&v3);
  sub_10001B7F8(a1 + 200);
  sub_10001B844(a1 + 176, *(void **)(a1 + 184));
  sub_10008B700((uint64_t **)(a1 + 168), 0);
  return sub_10007EC44(a1);
}

void sub_100088294(uint64_t a1)
{
  *(void *)a1 = off_1000F2A18;
  int v2 = (void **)(a1 + 240);
  sub_10008B640(&v2);
  sub_10001B7F8(a1 + 200);
  sub_10001B844(a1 + 176, *(void **)(a1 + 184));
  sub_10008B700((uint64_t **)(a1 + 168), 0);
  sub_10007EC44(a1);
  operator delete();
}

uint64_t sub_100088324(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 0xFFFFFFFF0007);
}

uint64_t sub_100088350(void *a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    uint64_t v4 = a1[30];
    if ((unint64_t)(a1[31] - v4) >= 9)
    {
      unint64_t v5 = 1;
      do
      {
        if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(v4 + 8 * v5) + 56))(*(void *)(v4 + 8 * v5), 4, 0))
        {
          a1[1] |= 4uLL;
        }
        ++v5;
        uint64_t v4 = a1[30];
      }
      while (v5 < (a1[31] - v4) >> 3);
    }
  }
  return a1[1] & a2;
}

void sub_1000883F0(void *a1)
{
}

void sub_100088438(_Unwind_Exception *a1)
{
  sub_10008844C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10008844C(uint64_t *a1)
{
  int v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = (uint64_t)v2;
    operator delete(v2);
  }
  sub_100088798((uint64_t)(a1 + 4));
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    operator delete();
  }
  return a1;
}

void sub_1000884C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  *a1 = a3;
  if (!a4) {
    operator new();
  }
  a1[1] = a4;
  a1[2] = a1;
  a1[3] = a1;
  sub_10008868C();
}

void sub_10008856C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_1000885D8(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_100019424();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_10001A898(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    unint64_t v9 = &v6[16 * v8];
    unint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_10008868C()
{
}

void sub_100088774(_Unwind_Exception *a1)
{
  sub_100088798(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100088798(uint64_t a1)
{
  sub_1000887DC(a1, *(void **)(a1 + 24));
  sub_10007EB1C((uint64_t *)(a1 + 32));
  return sub_10007F1BC(a1);
}

uint64_t sub_1000887DC(uint64_t result, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t result = sub_100080EE0(*(void *)(v3 + 32));
      v2[3] = *(void *)(result + 56);
      *(void *)(result + 56) = v2;
      int v2 = v4;
    }
    while (v4);
  }
  return result;
}

void sub_100088830(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  *a1 = a3;
  if (!a4) {
    operator new();
  }
  a1[1] = a4;
  a1[2] = a1;
  a1[3] = a1;
  sub_100088A00();
}

void sub_1000888E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *v10;
  *int v10 = 0;
  if (v12) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008894C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_100019424();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_100019D14(result, a2);
    v7[1] = v7[0] + v5;
    _OWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_10008AD48(a1, v7);
    return sub_10008AFC8((uint64_t)v7);
  }
  return result;
}

void sub_1000889EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10008AFC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100088A00()
{
}

void sub_100088AE8(_Unwind_Exception *a1)
{
  sub_100089EA8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100088B0C(uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    sub_100088B4C(a1 + 8, v2);
  }
  sub_10007EB1C((uint64_t *)(a1 + 16));
  return a1;
}

void sub_100088B4C(uint64_t a1, void *a2)
{
}

void sub_100088B6C(uint64_t *a1, void *__p, unint64_t a3)
{
  if (a3 == 2)
  {
    uint64_t v4 = sub_100088E8C(*a1);
    if (!__p) {
      return;
    }
    __p[2] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    uint64_t v4 = sub_100088C8C(*a1);
    if (!__p) {
      return;
    }
    __p[1] = *(void *)(v4 + 56);
LABEL_22:
    *(void *)(v4 + 56) = __p;
    return;
  }
  if (a3 <= 4)
  {
    uint64_t v4 = sub_10008908C(*a1);
    if (!__p) {
      return;
    }
    __p[4] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    uint64_t v4 = sub_10008928C(*a1);
    if (!__p) {
      return;
    }
    __p[8] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    uint64_t v4 = sub_10008948C(*a1);
    if (!__p) {
      return;
    }
    __p[16] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    uint64_t v4 = sub_10008968C(*a1);
    if (!__p) {
      return;
    }
    __p[32] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x40)
  {
    uint64_t v4 = sub_10008988C(*a1);
    if (!__p) {
      return;
    }
    __p[64] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  operator delete(__p);
}

uint64_t sub_100088C8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x47)
  {
    sub_100079988((uint64_t *)(a1 + 16), 9uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 64)) {
    operator new();
  }
  return *(void *)(v1 + 64);
}

void sub_100088D78()
{
}

void *sub_100088D9C(void *a1)
{
  *a1 = off_1000F22F0;
  a1[1] = off_1000F2318;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100088E04(void *a1)
{
  *a1 = off_1000F22F0;
  a1[1] = off_1000F2318;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_100088E8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x87)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x11uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 128)) {
    operator new();
  }
  return *(void *)(v1 + 128);
}

void sub_100088F78()
{
}

void *sub_100088F9C(void *a1)
{
  *a1 = off_1000F1630;
  a1[1] = off_1000F1658;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100089004(void *a1)
{
  *a1 = off_1000F1630;
  a1[1] = off_1000F1658;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10008908C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x107)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x21uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 256)) {
    operator new();
  }
  return *(void *)(v1 + 256);
}

void sub_100089178()
{
}

void *sub_10008919C(void *a1)
{
  *a1 = off_1000F16F0;
  a1[1] = off_1000F1718;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100089204(void *a1)
{
  *a1 = off_1000F16F0;
  a1[1] = off_1000F1718;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10008928C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x41uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_100089378()
{
}

void *sub_10008939C(void *a1)
{
  *a1 = off_1000F17B0;
  a1[1] = off_1000F17D8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100089404(void *a1)
{
  *a1 = off_1000F17B0;
  a1[1] = off_1000F17D8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10008948C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x81uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_100089578()
{
}

void *sub_10008959C(void *a1)
{
  *a1 = off_1000F1870;
  a1[1] = off_1000F1898;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100089604(void *a1)
{
  *a1 = off_1000F1870;
  a1[1] = off_1000F1898;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10008968C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x101uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_100089778()
{
}

void *sub_10008979C(void *a1)
{
  *a1 = off_1000F1930;
  a1[1] = off_1000F1958;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100089804(void *a1)
{
  *a1 = off_1000F1930;
  a1[1] = off_1000F1958;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10008988C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x201uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_10008997C()
{
}

void *sub_1000899A0(void *a1)
{
  *a1 = off_1000F19F0;
  a1[1] = off_1000F1A18;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100089A08(void *a1)
{
  *a1 = off_1000F19F0;
  a1[1] = off_1000F1A18;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_100089A90(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_100089B80(a1, prime);
    }
  }
}

void sub_100089B80(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (unint64_t *)(a1 + 8);
  if (a2)
  {
    unint64_t v5 = sub_100089CE4((uint64_t *)(a1 + 16), a2);
    uint8x8_t v6 = *(void **)a1;
    *(void *)a1 = v5;
    if (v6) {
      sub_100088B4C((uint64_t)v3, v6);
    }
    uint64_t v7 = 0;
    *uint64_t v3 = a2;
    do
      *(void *)(*(void *)a1 + 8 * v7++) = 0;
    while (a2 != v7);
    uint64_t v8 = *(void **)(a1 + 24);
    if (v8)
    {
      unint64_t v9 = v8[1];
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
      }
      else
      {
        v9 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v9) = a1 + 24;
      uint64_t v12 = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v9)
          {
            if (!*(void *)(*(void *)a1 + 8 * v13))
            {
              *(void *)(*(void *)a1 + 8 * v13) = v8;
              goto LABEL_23;
            }
            *uint64_t v8 = *v12;
            *uint64_t v12 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
            uint64_t v12 = v8;
          }
          unint64_t v13 = v9;
LABEL_23:
          uint64_t v8 = v12;
          uint64_t v12 = (void *)*v12;
          unint64_t v9 = v13;
        }
        while (v12);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      sub_100088B4C(a1 + 8, v11);
    }
    *uint64_t v3 = 0;
  }
}

void *sub_100089CE4(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = sub_100088E8C(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080890((void *)(v2 + 8), 1);
      result[2] = 0;
      return result;
    }
    uint64_t v4 = result[2];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = sub_100088C8C(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_1000807A4((void *)(v2 + 8), 1);
      result[1] = 0;
      return result;
    }
    uint64_t v4 = result[1];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = sub_10008908C(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080984((void *)(v2 + 8), 1);
      result[4] = 0;
      return result;
    }
    uint64_t v4 = result[4];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = sub_10008928C(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080A78((void *)(v2 + 8), 1);
      result[8] = 0;
      return result;
    }
    uint64_t v4 = result[8];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = sub_10008948C(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080B6C((void *)(v2 + 8), 1);
      result[16] = 0;
      return result;
    }
    uint64_t v4 = result[16];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = sub_10008968C(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080C60((void *)(v2 + 8), 1);
      result[32] = 0;
      return result;
    }
    uint64_t v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = sub_10008988C(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)sub_100080D54((void *)(v2 + 8), 1);
      result[64] = 0;
      return result;
    }
    uint64_t v4 = result[64];
    goto LABEL_26;
  }
  if (a2 >> 61) {
    sub_100018AF4();
  }
  return operator new(8 * a2);
}

uint64_t sub_100089EA8(uint64_t a1)
{
  sub_100089EEC(a1, *(void **)(a1 + 24));
  sub_10007EB1C((uint64_t *)(a1 + 32));
  return sub_100088B0C(a1);
}

uint64_t sub_100089EEC(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t result = sub_100089F40(*(void *)(v3 + 32));
      v2[3] = *(void *)(result + 56);
      *(void *)(result + 56) = v2;
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_100089F40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC7)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x19uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 192)) {
    operator new();
  }
  return *(void *)(v1 + 192);
}

void sub_10008A02C()
{
}

void *sub_10008A050(void *a1)
{
  *a1 = off_1000F1E30;
  a1[1] = off_1000F1E58;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10008A0B8(void *a1)
{
  *a1 = off_1000F1E30;
  a1[1] = off_1000F1E58;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10008A140(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x187)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x31uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 384)) {
    operator new();
  }
  return *(void *)(v1 + 384);
}

void sub_10008A22C()
{
}

void *sub_10008A250(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10008A2B8(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10008A340(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x307)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x61uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 768)) {
    operator new();
  }
  return *(void *)(v1 + 768);
}

void sub_10008A42C()
{
}

void *sub_10008A450(void *a1)
{
  *a1 = off_1000F1F30;
  a1[1] = off_1000F1F58;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10008A4B8(void *a1)
{
  *a1 = off_1000F1F30;
  a1[1] = off_1000F1F58;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10008A540(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x607)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0xC1uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1536)) {
    operator new();
  }
  return *(void *)(v1 + 1536);
}

void sub_10008A62C()
{
}

void *sub_10008A650(void *a1)
{
  *a1 = off_1000F1FF0;
  a1[1] = off_1000F2018;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10008A6B8(void *a1)
{
  *a1 = off_1000F1FF0;
  a1[1] = off_1000F2018;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10008A740(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC07)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x181uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 3072)) {
    operator new();
  }
  return *(void *)(v1 + 3072);
}

void sub_10008A82C()
{
}

void *sub_10008A850(void *a1)
{
  *a1 = off_1000F20B0;
  a1[1] = off_1000F20D8;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10008A8B8(void *a1)
{
  *a1 = off_1000F20B0;
  a1[1] = off_1000F20D8;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10008A940(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x300)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x301uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 6144)) {
    operator new();
  }
  return *(void *)(v1 + 6144);
}

void sub_10008AA30()
{
}

void *sub_10008AA54(void *a1)
{
  *a1 = off_1000F2170;
  a1[1] = off_1000F2198;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10008AABC(void *a1)
{
  *a1 = off_1000F2170;
  a1[1] = off_1000F2198;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10008AB44(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x600)
  {
    sub_100079988((uint64_t *)(a1 + 16), 0x601uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 12288)) {
    operator new();
  }
  return *(void *)(v1 + 12288);
}

void sub_10008AC34()
{
}

void *sub_10008AC58(void *a1)
{
  *a1 = off_1000F2230;
  a1[1] = off_1000F2258;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_10008ACC0(void *a1)
{
  *a1 = off_1000F2230;
  a1[1] = off_1000F2258;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

uint64_t sub_10008AD48(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10008ADC0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10008ADC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  void v15[2] = &v18;
  char v16 = 0;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      uint8x8_t v10 = (void *)(v7 - 24);
      uint64_t v10[2] = 0;
      unint64_t v11 = *(const void **)(v9 - 24);
      uint64_t v12 = *(void *)(v9 - 16);
      v9 -= 24;
      sub_10008AE88(v10, v11, v12, (v12 - (uint64_t)v11) >> 3);
      uint64_t v7 = *((void *)&v18 + 1) - 24;
      *((void *)&v18 + 1) -= 24;
    }
    while (v9 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  sub_10008AF48((uint64_t)v15);
  return v13;
}

void sub_10008AE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10008AE88(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10008AF04(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10008AEE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10008AF04(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100019424();
  }
  uint64_t result = (char *)sub_10001943C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t sub_10008AF48(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10008AF80(a1);
  }
  return a1;
}

void sub_10008AF80(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_10008AFC8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10008B000(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void sub_10008B05C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10008B0B0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10008B0B0(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_10008B108(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10008B180((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10008B180(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10008B218((uint64_t)v13);
  return v11;
}

uint64_t sub_10008B218(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10008B250((void *)a1);
  }
  return a1;
}

void *sub_10008B250(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_10008B2B8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_10008B2F0(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      _DWORD v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *sub_10008B364(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100018F74(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  BOOL v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *BOOL v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    BOOL v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_10008B570(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_10008B584(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_10001AD30(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_10008B640(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10008B694(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_10008B694(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    unint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t *sub_10008B700(uint64_t **a1, uint64_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10008B750(result);
    operator delete();
  }
  return result;
}

uint64_t *sub_10008B750(uint64_t *a1)
{
  unint64_t v8 = (void **)(a1 + 30);
  sub_10008B05C(&v8);
  sub_100089EA8((uint64_t)(a1 + 21));
  uint64_t v2 = a1[18];
  a1[18] = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = a1[17];
  a1[17] = 0;
  if (v3) {
    operator delete();
  }
  unint64_t v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = (uint64_t)v4;
    operator delete(v4);
  }
  sub_100088798((uint64_t)(a1 + 4));
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    operator delete();
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    operator delete();
  }
  return a1;
}

uint64_t sub_10008B81C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    return *(unsigned int *)(a1 + 60);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 4))
  {
    *(unsigned char *)(a1 + 56) = 1;
    return *(unsigned int *)(a1 + 60);
  }
  if (*(unsigned char *)(a1 + 56)) {
    return *(unsigned int *)(a1 + 60);
  }
  uint64_t v3 = *(void *)(a1 + 240);
  if (*(void *)(a1 + 248) - v3 == 8)
  {
    uint64_t result = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 6sub_10002B9D0((void **)&STACK[0x2A8], 0) = -1;
    *(unsigned char *)(a1 + 56) = 1;
    if ((*(_DWORD *)(a1 + 64) & 0x80000000) != 0) {
      *(_DWORD *)(a1 + 64) = 0;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(v3 + 8 * *(int *)(a1 + 264));
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    if (result != -1)
    {
      unsigned int v5 = result;
      memset(__p, 0, sizeof(__p));
      uint64_t v6 = (void *)sub_10008B990((void *)(*(void *)(a1 + 168) + 136), (uint64_t)__p, 1);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      int v7 = *(void **)(a1 + 168);
      unsigned int v8 = *(_DWORD *)(a1 + 264);
      __p[0] = v6;
      __p[1] = (void *)__PAIR64__(v5, v8);
      uint64_t result = sub_10008C2B8(v7, __p, 1);
      *(_DWORD *)(a1 + 6sub_10002B9D0((void **)&STACK[0x2A8], 0) = result;
      *(unsigned char *)(a1 + 56) = 1;
      if (*(_DWORD *)(a1 + 64) <= (int)result) {
        *(_DWORD *)(a1 + 64) = result + 1;
      }
    }
  }
  return result;
}

void sub_10008B974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008B990(void *a1, uint64_t a2, int a3)
{
  a1[16] = a2;
  uint64_t v4 = a1 + 4;
  if (!a3)
  {
    uint64_t v6 = sub_10008C1B0(v4, &qword_1000CE130);
    if (!v6) {
      return -1;
    }
    return v6[2];
  }
  uint64_t v6 = sub_10008BA4C((uint64_t)v4, &qword_1000CE130, &qword_1000CE130);
  if (!v7) {
    return v6[2];
  }
  unint64_t v8 = a1[14];
  unint64_t v9 = a1[15];
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - a1[13]) >> 3);
  _DWORD v6[2] = v10;
  uint64_t v11 = a1 + 13;
  if (v8 >= v9)
  {
    uint64_t v12 = sub_10008C098(v11, a2);
  }
  else
  {
    sub_10008C044((uint64_t)v11, a2);
    uint64_t v12 = v8 + 24;
  }
  a1[14] = v12;
  return v10;
}

void *sub_10008BA4C(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v7 = sub_10008BCC8((uint64_t *)(a1 + 48), *a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          if (sub_10008BD20((uint64_t **)(a1 + 64), i[2], *a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = sub_10008BE30((uint64_t *)(a1 + 32), 1uLL);
  *unint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v16 = *(float *)(a1 + 56);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100089A90(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *unint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 24);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = i;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 40);
  return i;
}

void sub_10008BCAC(_Unwind_Exception *a1)
{
  sub_10008C004(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10008BCC8(uint64_t *a1, uint64_t a2)
{
  if (a2 < -1) {
    return 0;
  }
  uint64_t v2 = *a1;
  unint64_t v3 = a2 == -1 ? *(int ***)(v2 + 128) : (int **)(*(void *)(v2 + 104) + 24 * a2);
  uint64_t v4 = *v3;
  unsigned int v5 = v3[1];
  if (v4 == v5) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v7 = *v4;
    int v8 = v4[1];
    v4 += 2;
    result += v7 + 7863 * v8;
  }
  while (v4 != v5);
  return result;
}

BOOL sub_10008BD20(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 1;
  }
  BOOL result = 0;
  if (a2 >= -1 && a3 >= -1)
  {
    unsigned int v5 = *a1;
    if (a2 == -1) {
      uint64_t v6 = v5[16];
    }
    else {
      uint64_t v6 = v5[13] + 24 * a2;
    }
    if (a3 == -1) {
      uint64_t v7 = v5[16];
    }
    else {
      uint64_t v7 = v5[13] + 24 * a3;
    }
    return sub_10008BD8C(v5[1], v6, v7);
  }
  return result;
}

BOOL sub_10008BD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(_DWORD **)a2;
  unint64_t v3 = *(_DWORD **)(a2 + 8);
  unint64_t v5 = ((uint64_t)v3 - *(void *)a2) >> 3;
  uint64_t v6 = *(_DWORD **)a3;
  if (v5 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : ((uint64_t)v3 - *(void *)a2) >> 3;
  if (*v4 != *v6 || v4[1] != v6[1]) {
    return 0;
  }
  int v8 = v6 + 3;
  unint64_t v9 = v4 + 3;
  uint64_t v10 = 1;
  do
  {
    unint64_t v11 = v10;
    if (v7 == v10) {
      break;
    }
    if (*(v9 - 1) != *(v8 - 1)) {
      break;
    }
    int v13 = *v9;
    v9 += 2;
    int v12 = v13;
    int v14 = *v8;
    v8 += 2;
    ++v10;
  }
  while (v12 == v14);
  return v11 >= v5;
}

void *sub_10008BE30(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = sub_10008A140(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_10002EC70((void *)(v2 + 8), 1);
      result[6] = 0;
      return result;
    }
    uint64_t v4 = result[6];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = sub_100089F40(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_100083128((void *)(v2 + 8), 1);
      result[3] = 0;
      return result;
    }
    uint64_t v4 = result[3];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = sub_10008A340(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_100083214((void *)(v2 + 8), 1);
      result[12] = 0;
      return result;
    }
    uint64_t v4 = result[12];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = sub_10008A540(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_10008330C((void *)(v2 + 8), 1);
      result[24] = 0;
      return result;
    }
    uint64_t v4 = result[24];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = sub_10008A740(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_100083404((void *)(v2 + 8), 1);
      result[48] = 0;
      return result;
    }
    uint64_t v4 = result[48];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = sub_10008A940(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_1000834FC((void *)(v2 + 8), 1);
      result[96] = 0;
      return result;
    }
    uint64_t v4 = result[96];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = sub_10008AB44(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)sub_1000835F4((void *)(v2 + 8), 1);
      result[192] = 0;
      return result;
    }
    uint64_t v4 = result[192];
    goto LABEL_26;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100018AF4();
  }
  return operator new(24 * a2);
}

uint64_t sub_10008C004(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    BOOL result = sub_100089F40(**(void **)result);
    *(void *)(a2 + ++*(_DWORD *)(result + 24) = *(void *)(result + 56);
    *(void *)(result + 56) = a2;
  }
  return result;
}

void *sub_10008C044(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  *unint64_t v3 = 0;
  v3[1] = 0;
  _OWORD v3[2] = 0;
  BOOL result = sub_10008AE88(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_10008C090(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10008C098(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100019424();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100019D14(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  float v15 = v11;
  float v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_10008AE88(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  sub_10008AD48(a1, v14);
  uint64_t v12 = a1[1];
  sub_10008AFC8((uint64_t)v14);
  return v12;
}

void sub_10008C19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10008AFC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10008C1B0(void *a1, uint64_t *a2)
{
  unint64_t v4 = sub_10008BCC8(a1 + 6, *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t **)(a1 + 8);
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (sub_10008BD20(v12, v11[2], *a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t sub_10008C2B8(void *a1, _OWORD *a2, int a3)
{
  a1[16] = a2;
  unint64_t v4 = a1 + 4;
  if (!a3)
  {
    unint64_t v6 = sub_10008C748(v4, &dword_1000CE138);
    if (!v6) {
      return 0xFFFFFFFFLL;
    }
    return *((unsigned int *)v6 + 4);
  }
  unint64_t v6 = sub_10008C3F8((uint64_t)v4, &dword_1000CE138, &dword_1000CE138);
  if (!v7) {
    return *((unsigned int *)v6 + 4);
  }
  uint64_t v8 = a1[13];
  unint64_t v9 = (_OWORD *)a1[14];
  uint64_t v10 = ((uint64_t)v9 - v8) >> 4;
  *((_DWORD *)v6 + 4) = v10;
  unint64_t v11 = a1[15];
  if ((unint64_t)v9 >= v11)
  {
    unint64_t v13 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_100019424();
    }
    uint64_t v14 = v11 - v8;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      float v16 = (char *)sub_10001A898((uint64_t)(a1 + 15), v15);
    }
    else {
      float v16 = 0;
    }
    BOOL v17 = &v16[16 * v10];
    unint64_t v18 = &v16[16 * v15];
    *(_OWORD *)BOOL v17 = *a2;
    uint64_t v12 = v17 + 16;
    size_t v20 = (char *)a1[13];
    unint64_t v19 = (char *)a1[14];
    if (v19 != v20)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v19 - 1);
        v17 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      unint64_t v19 = (char *)a1[13];
    }
    a1[13] = v17;
    a1[14] = v12;
    a1[15] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unint64_t v9 = *a2;
    uint64_t v12 = v9 + 1;
  }
  a1[14] = v12;
  return v10;
}

void *sub_10008C3F8(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v7 = *a2;
  if ((int)v7 < -1)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v7 == -1) {
      uint64_t v9 = *(void *)(v8 + 128);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 104) + 16 * v7;
    }
    unint64_t v10 = *(void *)v9 + 7853 * *(int *)(v9 + 8) + 7867 * *(int *)(v9 + 12);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_10008C6AC((uint64_t *)(a1 + 64), *((_DWORD *)i + 4), *a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = sub_100083EB0((uint64_t *)(a1 + 32), 1uLL);
  *unint64_t i = 0;
  i[1] = v10;
  *((_DWORD *)i + 4) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v18 = *(float *)(a1 + 56);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_10008038C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  BOOL v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *unint64_t i = *v23;
LABEL_44:
    *BOOL v23 = i;
    goto LABEL_45;
  }
  *unint64_t i = *(void *)(a1 + 24);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = i;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11) {
        v24 %= v11;
      }
    }
    else
    {
      v24 &= v11 - 1;
    }
    BOOL v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 40);
  return i;
}

void sub_10008C690(_Unwind_Exception *a1)
{
  sub_100084084(v2, v1);
  _Unwind_Resume(a1);
}

BOOL sub_10008C6AC(uint64_t *a1, int a2, int a3)
{
  if (a2 == a3) {
    return 1;
  }
  BOOL result = 0;
  if (a2 >= -1 && a3 >= -1)
  {
    uint64_t v5 = *a1;
    if (a2 == -1) {
      uint64_t v6 = *(void *)(v5 + 128);
    }
    else {
      uint64_t v6 = *(void *)(v5 + 104) + 16 * a2;
    }
    if (a3 == -1) {
      uint64_t v7 = *(void *)(v5 + 128);
    }
    else {
      uint64_t v7 = *(void *)(v5 + 104) + 16 * a3;
    }
    return *(void *)v6 == *(void *)v7
        && *(_DWORD *)(v6 + 8) == *(_DWORD *)(v7 + 8)
        && *(_DWORD *)(v6 + 12) == *(_DWORD *)(v7 + 12);
  }
  return result;
}

uint64_t *sub_10008C748(void *a1, int *a2)
{
  uint64_t v3 = *a2;
  if ((int)v3 < -1)
  {
    unint64_t v6 = 0;
  }
  else
  {
    uint64_t v4 = a1[6];
    if (v3 == -1) {
      uint64_t v5 = *(void *)(v4 + 128);
    }
    else {
      uint64_t v5 = *(void *)(v4 + 104) + 16 * v3;
    }
    unint64_t v6 = *(void *)v5 + 7853 * *(int *)(v5 + 8) + 7867 * *(int *)(v5 + 12);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint8x8_t v12 = *v11;
  if (*v11)
  {
    unint64_t v13 = a1 + 8;
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v6)
      {
        if (sub_10008C6AC(v13, *((_DWORD *)v12 + 4), *a2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v7) {
            v14 %= *(void *)&v7;
          }
        }
        else
        {
          v14 &= *(void *)&v7 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      uint8x8_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  return v12;
}

_DWORD *sub_10008C884@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X8>)
{
  BOOL result = (_DWORD *)sub_1000866D8(a1, a2);
  if (result)
  {
    uint64_t v7 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v7 + 92) == a2) {
      uint8x8_t v8 = (int **)(v7 + 96);
    }
    else {
      uint8x8_t v8 = (int **)(*(void *)(v7 + 8) + 8 * a2 + 8);
    }
    *a3 = **v8;
  }
  else
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 168) + 104);
    unint64_t v10 = sub_10002D8A8();
    int v11 = *v10;
    *a3 = *v10;
    if (!*(void *)(v9 + 16 * a2))
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(a1 + 240)
                                                                  + 8 * *(int *)(v9 + 16 * a2 + 8))
                                                    + 24))(&v12);
      int v11 = v12;
      *a3 = v12;
    }
    if (*(unsigned char *)(a1 + 160) || (BOOL result = (_DWORD *)sub_1000867C0(a1, a2), result))
    {
      BOOL result = sub_100084B5C(*(void *)(a1 + 120), a2);
      *BOOL result = v11;
      result[14] |= 9u;
    }
  }
  return result;
}

uint64_t sub_10008C9A8(uint64_t a1, int a2)
{
  if (!sub_1000867C0(a1, a2))
  {
    if (!*(unsigned char *)(a1 + 160))
    {
      long long v9 = *(_OWORD *)(*(void *)(*(void *)(a1 + 168) + 104) + 16 * a2);
      if (HIDWORD(v9) == -1) {
        return 0;
      }
      uint64_t v7 = *(void *)(*(void *)(a1 + 240) + 8 * SDWORD2(v9));
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
      return v8 + sub_10008CD0C(a1, (uint64_t *)&v9, 0, 15);
    }
    sub_10008CA98((uint64_t *)a1, a2);
  }
  uint64_t v4 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * a2 + 8;
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

void sub_10008CA98(uint64_t *a1, int a2)
{
  long long v12 = *(_OWORD *)(*(void *)(a1[21] + 104) + 16 * a2);
  if (HIDWORD(v12) != -1)
  {
    uint64_t v4 = *(void *)(a1[30] + 8 * SDWORD2(v12));
    long long v9 = 0u;
    long long v10 = 0u;
    unint64_t v11 = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 120))(v4);
    if (sub_10008CD0C((uint64_t)a1, (uint64_t *)&v12, v8, 15))
    {
      uint64_t v5 = sub_100084B5C(a1[15], a2);
      sub_100085298(v5 + 3, (uint64_t)v8);
    }
    while (1)
    {
      if ((void)v9)
      {
        if ((*(uint64_t (**)(void))(*(void *)v9 + 16))(v9))
        {
LABEL_15:
          sub_100084728((uint64_t)a1, a2);
          if ((void)v9)
          {
            (*(void (**)(void))(*(void *)v9 + 8))(v9);
          }
          else if (*((void *)&v10 + 1))
          {
            --**((_DWORD **)&v10 + 1);
          }
          return;
        }
        if ((void)v9)
        {
          unint64_t v6 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v9 + 24))(v9);
          goto LABEL_8;
        }
      }
      else if (v11 >= (unint64_t)v10)
      {
        goto LABEL_15;
      }
      unint64_t v6 = (unsigned int *)(*((void *)&v9 + 1) + 16 * v11);
LABEL_8:
      if (sub_10008CF04((uint64_t)a1, (uint64_t)&v12, v6, (uint64_t)v8, 15))
      {
        uint64_t v7 = sub_100084B5C(a1[15], a2);
        sub_100085298(v7 + 3, (uint64_t)v8);
      }
      if ((void)v9) {
        (*(void (**)(void))(*(void *)v9 + 32))(v9);
      }
      else {
        ++v11;
      }
    }
  }
  sub_100084728((uint64_t)a1, a2);
}

void sub_10008CCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  else if (a14)
  {
    --*a14;
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008CD0C(uint64_t a1, uint64_t *a2, _DWORD *a3, char a4)
{
  if (*((_DWORD *)a2 + 3) == -1) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(a1 + 240) + 8 * *((int *)a2 + 2)) + 24))(&v23);
  uint64_t v8 = sub_10002D8A8();
  LODWORD(v19) = v23;
  HIDWORD(v23) = 0;
  HIDWORD(v23) = *v8;
  v9.n128_u32[0] = v23;
  if (*(float *)&v23 == *((float *)&v23 + 1)) {
    return 0;
  }
  uint64_t v10 = *a2;
  if (!*a2) {
    return 0;
  }
  if (a3)
  {
    int v11 = *(_DWORD *)(a1 + 136);
    if ((v11 & 0xFFFFFFFD) == 1) {
      int v12 = 0;
    }
    else {
      int v12 = *(_DWORD *)(a1 + 152);
    }
    *a3 = v12;
    if ((v11 - 1) >= 2) {
      int v14 = *(_DWORD *)(a1 + 152);
    }
    else {
      int v14 = 0;
    }
    a3[1] = v14;
    if ((a4 & 8) != 0)
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 168) + 240) + 24 * v10;
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      std::string __p = 0;
      sub_10008AE88(&__p, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3);
      v21 -= 8;
      uint64_t v16 = sub_10008B990((void *)(*(void *)(a1 + 168) + 136), (uint64_t)&__p, 1);
      if (__p)
      {
        unint64_t v21 = (char *)__p;
        operator delete(__p);
      }
      uint64_t v17 = *(void *)(v15 + 8);
      float v18 = *(void **)(a1 + 168);
      *(void *)&long long v19 = v16;
      *((void *)&v19 + 1) = *(void *)(v17 - 8);
      a3[3] = sub_10008C2B8(v18, &v19, 1);
    }
    if ((a4 & 4) != 0)
    {
      (*(void (**)(long long *__return_ptr, __n128))(**(void **)(*(void *)(a1 + 240)
                                                                           + 8 * *((int *)a2 + 2))
                                                             + 24))(&v19, v9);
      a3[2] = v19;
    }
  }
  return 1;
}

void sub_10008CEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008CF04(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5)
{
  BOOL v7 = (a5 & 0xFFFFFFFA) != 0 || (*(_DWORD *)(a1 + 132) & 0xFFFFFFFD) == 1;
  if (!v7)
  {
    *(void *)a4 = *(void *)a3;
    *(_DWORD *)(a4 + 8) = a3[2];
    int v22 = a3[3];
LABEL_24:
    *(_DWORD *)(a4 + 12) = v22;
    return 1;
  }
  char v8 = a5;
  int v12 = a3 + 1;
  signed int v11 = a3[1];
  if (!v11 || v11 < *(_DWORD *)(*(void *)(a1 + 176) + 28)) {
    goto LABEL_19;
  }
  uint64_t v13 = a1 + 184;
  uint64_t v14 = *(void *)(a1 + 184);
  if (v14)
  {
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = *(void *)(v14 + 8);
    }
    while (v14);
  }
  else
  {
    do
    {
      uint64_t v15 = *(void *)(v13 + 16);
      BOOL v7 = *(void *)v15 == v13;
      uint64_t v13 = v15;
    }
    while (v7);
  }
  if (v11 > *(_DWORD *)(v15 + 28) || (uint64_t v16 = sub_10006941C((void *)(a1 + 200), (int *)a3 + 1)) == 0)
  {
LABEL_19:
    if ((v8 & 8) != 0)
    {
      uint64_t v23 = *(void **)(a1 + 168);
      unsigned int v24 = *(_DWORD *)(a2 + 8);
      unsigned int v25 = a3[3];
      *(void *)&long long v36 = *(void *)a2;
      *((void *)&v36 + 1) = __PAIR64__(v25, v24);
      int v22 = sub_10008C2B8(v23, &v36, 1);
    }
    else
    {
      int v22 = -1;
    }
    uint64_t v26 = *(void *)a3;
    unsigned int v27 = a3[2];
    goto LABEL_23;
  }
  unsigned int v17 = *((_DWORD *)v16 + 5);
  uint64_t v18 = *(void *)(*(void *)(a1 + 168) + 240) + 24 * *(void *)a2;
  std::string __p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  sub_10008AE88(&__p, *(const void **)v18, *(void *)(v18 + 8), (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 3);
  sub_10008D16C(&__p, *(_DWORD *)(a2 + 8), a3[3]);
  uint64_t v19 = sub_10008B990((void *)(*(void *)(a1 + 168) + 136), (uint64_t)&__p, 1);
  if (__p)
  {
    uint64_t v34 = __p;
    operator delete(__p);
  }
  uint64_t v20 = *(void *)(*(void *)(a1 + 240) + 8 * (int)v17);
  unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
  if (v21 != -1)
  {
    if ((v8 & 8) != 0)
    {
      int v29 = *(void **)(a1 + 168);
      *(void *)&long long v36 = v19;
      *((void *)&v36 + 1) = __PAIR64__(v21, v17);
      int v22 = sub_10008C2B8(v29, &v36, 1);
    }
    else
    {
      int v22 = -1;
    }
    uint64_t v30 = 0;
    int v31 = *(_DWORD *)(a1 + 132);
    if ((v31 & 0xFFFFFFFD) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a3;
    }
    if ((v31 - 1) >= 2)
    {
      uint64_t v30 = *(void *)(a1 + 144);
      if (v30 == -1) {
        uint64_t v30 = *v12;
      }
    }
    unsigned int v27 = a3[2];
    uint64_t v26 = v32 | (v30 << 32);
LABEL_23:
    *(void *)a4 = v26;
    *(_DWORD *)(a4 + 8) = v27;
    goto LABEL_24;
  }
  return 0;
}

void sub_10008D150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008D16C(void **a1, unsigned int a2, uint64_t a3)
{
  unint64_t v8 = (unint64_t)a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  __n128 v9 = *(unint64_t **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = ((char *)v9 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_100019424();
    }
    uint64_t v12 = v7 - (void)*a1;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_10001943C(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    unsigned int v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = a2 | (unint64_t)(a3 << 32);
    uint64_t v10 = v16 + 8;
    uint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *__n128 v9 = a2 | (unint64_t)(a3 << 32);
    uint64_t v10 = v9 + 1;
  }
  a1[1] = v10;
}

uint64_t sub_10008D258(uint64_t *a1, int a2)
{
  if (!sub_1000867C0((uint64_t)a1, a2))
  {
    if (!*((unsigned char *)a1 + 160) && (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 24))(a1, 0x10000000))
    {
      long long v9 = *(_OWORD *)(*(void *)(a1[21] + 104) + 16 * a2);
      if (HIDWORD(v9) == -1) {
        return 0;
      }
      uint64_t v8 = *(void *)(a1[30] + 8 * SDWORD2(v9));
      if ((*((_DWORD *)a1 + 33) & 0xFFFFFFFD) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 120))(v8);
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
      }
      if ((a1[17] & 0xFFFFFFFD) == 1) {
        v6 += sub_10008CD0C((uint64_t)a1, (uint64_t *)&v9, 0, 15);
      }
      return v6;
    }
    sub_10008CA98(a1, a2);
  }
  uint64_t v4 = a1[15];
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * a2 + 8;
  }
  return *(void *)(*(void *)v5 + 8);
}

void sub_10008D544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    sub_1000B4594();
  }
  else {
    sub_1000B457C((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10008D568(void *a1, int a2)
{
  int v7 = a2;
  if (*(_DWORD *)(a1[22] + 28) > a2) {
    return 0;
  }
  uint64_t v2 = a1 + 23;
  uint64_t v3 = a1[23];
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
  }
  else
  {
    do
    {
      uint64_t v4 = v2[2];
      BOOL v5 = *(void *)v4 == (void)v2;
      uint64_t v2 = (void *)v4;
    }
    while (v5);
  }
  return *(_DWORD *)(v4 + 28) >= a2 && sub_10006941C(a1 + 25, &v7) != 0;
}

uint64_t sub_10008D5F0(uint64_t *a1, int a2)
{
  if (!sub_1000867C0((uint64_t)a1, a2))
  {
    if (!*((unsigned char *)a1 + 160) && (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 24))(a1, 0x40000000))
    {
      long long v9 = *(_OWORD *)(*(void *)(a1[21] + 104) + 16 * a2);
      if (HIDWORD(v9) == -1) {
        return 0;
      }
      uint64_t v8 = *(void *)(a1[30] + 8 * SDWORD2(v9));
      if ((*((_DWORD *)a1 + 33) - 1) >= 2)
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
      }
      else
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 120))(v8);
        uint64_t v6 = 0;
      }
      if ((*((_DWORD *)a1 + 34) - 1) <= 1) {
        v6 += sub_10008CD0C((uint64_t)a1, (uint64_t *)&v9, 0, 15);
      }
      return v6;
    }
    sub_10008CA98(a1, a2);
  }
  uint64_t v4 = a1[15];
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * a2 + 8;
  }
  return *(void *)(*(void *)v5 + 16);
}

void sub_10008D8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    sub_1000B4594();
  }
  else {
    sub_1000B457C((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

void *sub_10008D900(void *a1, uint64_t a2, int a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000F2DE0;
  if (a3) {
    sub_10008D9C8((uint64_t)&v8, *(void *)(a2 + 8));
  }
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    uint64_t v6 = (std::__shared_weak_count *)a1[2];
    a1[1] = v5;
    a1[2] = v4;
    if (v6) {
      sub_100018BC0(v6);
    }
  }
  else
  {
    a1[1] = v5;
    a1[2] = 0;
  }
  return a1;
}

void sub_10008D9B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_100018BC0(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008D9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = operator new(0x128uLL);
  sub_10008DA24(v3, a2);
}

void sub_10008DA10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10008DA24(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000F29C8;
  sub_10008DA80((uint64_t)(a1 + 3), a2);
}

void sub_10008DA6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10008DA80(uint64_t a1, uint64_t a2)
{
}

void sub_10008DDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  sub_10008B2B8(&__p);
  sub_10008B640((void ***)&a19);
  sub_10001B7F8(v20);
  sub_10001B844(a10, *(void **)(v19 + 184));
  sub_10008B700((uint64_t **)(v19 + 168), 0);
  sub_10007EC44(v19);
  _Unwind_Resume(a1);
}

void **sub_10008DE64(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  BOOL result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_100019424();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_10001943C((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _OWORD v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 8 * v6;
    sub_10008B108(a1, v7);
    return sub_10008B2B8(v7);
  }
  return result;
}

void sub_10008DEE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10008B2B8((void **)va);
  _Unwind_Resume(a1);
}

void sub_10008DEF8(void *a1)
{
}

void sub_10008DF3C(_Unwind_Exception *a1)
{
  sub_10008844C(v1);
  _Unwind_Resume(a1);
}

void sub_10008DF50()
{
}

void sub_10008E020(_Unwind_Exception *a1)
{
  sub_100089EA8(v2);
  uint64_t v4 = v1[1];
  v1[1] = 0;
  if (v4) {
    operator delete();
  }
  uint64_t v5 = *v1;
  *uint64_t v1 = 0;
  if (v5) {
    operator delete();
  }
  _Unwind_Resume(a1);
}

void *sub_10008E090(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10001AAC0(result, a4);
    BOOL result = sub_10008E118((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10008E0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10008B05C(&a9);
  _Unwind_Resume(a1);
}

void *sub_10008E118(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      _DWORD v4[2] = 0;
      sub_10008AE88(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_10008E1CC((uint64_t)v8);
  return v4;
}

void sub_10008E1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10008E1CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10008E204(a1);
  }
  return a1;
}

void sub_10008E204(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      uint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t *sub_10008E254(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10008E2AC(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_10008E294(_Unwind_Exception *a1)
{
  sub_10001B844(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10008E2AC(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      BOOL result = sub_10008E338(v5, v6, v4 + 7, v4 + 7);
      int v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          char v8 = v7;
          int v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          char v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10008E338(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v6 = sub_10008E3C0(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    char v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_10001AD30(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10008E3C0(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    char v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unsigned int v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      unsigned int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unsigned int v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      unsigned int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_10008E568(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100018F74(a1, *(void *)(a2 + 8));
  for (unint64_t i = *(int **)(a2 + 16); i; unint64_t i = *(int **)i)
    sub_10008E5E0(a1, i + 4, (void *)i + 2);
  return a1;
}

void sub_10008E5C8(_Unwind_Exception *a1)
{
  sub_10001B7F8(v1);
  _Unwind_Resume(a1);
}

void *sub_10008E5E0(uint64_t a1, int *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    BOOL v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  uint64_t v10[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100018F74(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_10008E7E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10008E800()
{
}

uint64_t sub_10008E814(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 64)) {
    return 0;
  }
  int v5 = sub_100086C6C(v3);
  if (v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 64)) {
    return 1;
  }
  int v6 = v5;
  do
  {
    sub_10008EC20(v15, *(void *)(a1 + 8), v6);
    sub_10008E9BC((int *)v15, 15, 31);
    uint64_t v7 = v16;
    uint64_t v8 = v17;
    while (v7 < v8)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      signed int v10 = sub_10008EA5C(v15)[3];
      if (*(_DWORD *)(v9 + 64) <= v10) {
        *(_DWORD *)(v9 + 64) = v10 + 1;
      }
      uint64_t v8 = v17;
      uint64_t v7 = ++v16;
    }
    sub_10008543C(*(void *)(a1 + 16), v6);
    int v11 = *(_DWORD *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 64);
    BOOL v4 = v11 >= v13;
    if (v18) {
      --*v18;
    }
    if (v19) {
      --*v19;
    }
    if (v11 < v13) {
      break;
    }
    int v6 = sub_100086C6C(v12);
  }
  while (v6 < *(_DWORD *)(*(void *)(a1 + 16) + 64));
  return v4;
}

void sub_10008E954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_DWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,_DWORD *a26)
{
  if (a22) {
    --*a22;
  }
  if (a26) {
    --*a26;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10008E984(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_10008E98C(uint64_t result)
{
  return result;
}

uint64_t sub_10008E99C(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10008E9A8()
{
}

uint64_t sub_10008E9BC(int *a1, int a2, int a3)
{
  char v3 = a2;
  int v5 = a1[14] & ~a3;
  uint64_t result = *(void *)(*(void *)a1 + 8);
  if (*(unsigned char *)(result + 160)) {
    int v7 = 15;
  }
  else {
    int v7 = 31;
  }
  int v8 = v7 & a2 | v5;
  a1[14] = v8;
  if ((v8 & 0x10) == 0 && a1[38] != 15)
  {
    uint64_t result = sub_1000867C0(result, a1[2]);
    if ((result & 1) == 0) {
      a1[38] = 0;
    }
  }
  if ((v3 & 0x10) != 0 && !a1[38])
  {
    return (uint64_t)sub_10008EDA8(a1);
  }
  return result;
}

unsigned int *sub_10008EA5C(void *a1)
{
  int v2 = *((_DWORD *)a1 + 38);
  if (v2)
  {
    uint64_t v3 = a1[5];
    int v4 = v2 ^ 0xF;
  }
  else
  {
    if ((a1[7] & 0x10) != 0)
    {
      if (byte_1000FE8F0) {
        sub_100009CF0(__p, "FATAL");
      }
      else {
        sub_100009CF0(__p, "ERROR");
      }
      sub_10002D454(&v15, (uint64_t)__p);
      sub_10002D07C(&std::cerr, (uint64_t)"ReplaceFst: Inconsistent arc iterator flags", 43);
      sub_10002D500(&v15);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    (*(void (**)(void, void, void *))(*(void *)*a1 + 120))(*a1, *((unsigned int *)a1 + 2), a1 + 10);
    int v4 = 0;
    uint64_t v3 = 0;
    a1[18] = a1[11];
    *((_DWORD *)a1 + 38) = 15;
    a1[5] = 0;
  }
  uint64_t v5 = a1[4] - v3;
  if (v5 < 0)
  {
    int v11 = *((_DWORD *)a1 + 14);
    if (((*((_DWORD *)a1 + 43) ^ 0xF) & v11) != 0)
    {
      sub_10008CD0C(*(void *)(*a1 + 8), a1 + 2, (_DWORD *)a1 + 39, v11 & 0xF);
      *((_DWORD *)a1 + 43) = a1[7] & 0xF;
    }
    return (unsigned int *)a1 + 39;
  }
  else
  {
    int v6 = (unsigned int *)(a1[18] + 16 * v5);
    int v7 = *((_DWORD *)a1 + 14);
    if ((v4 & v7) != 0)
    {
      uint64_t v8 = (uint64_t)(a1 + 2);
      uint64_t v10 = *a1;
      uint64_t v9 = (uint64_t)a1 + 60;
      sub_10008CF04(*(void *)(v10 + 8), v8, v6, v9, v7 & 0xF);
      return (unsigned int *)v9;
    }
  }
  return v6;
}

void sub_10008EBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10008EC20(uint64_t *a1, uint64_t a2, int a3)
{
  *a1 = a2;
  *((_DWORD *)a1 + 2) = a3;
  a1[2] = -1;
  int v4 = a1 + 2;
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = -1;
  *((_DWORD *)a1 + 14) = 15;
  *((_OWORD *)a1 + 5) = 0u;
  uint64_t v5 = a1 + 10;
  *((_OWORD *)a1 + 7) = 0u;
  int v6 = a1 + 14;
  *((_DWORD *)a1 + 43) = 0;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *(_OWORD *)((char *)a1 + 14sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0u;
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(unsigned char *)(v7 + 160))
  {
    char v8 = sub_1000867C0(v7, a3);
    a2 = *a1;
    a3 = *((_DWORD *)a1 + 2);
    if ((v8 & 1) == 0)
    {
      sub_10008CA98(*(uint64_t **)(a2 + 8), *((_DWORD *)a1 + 2));
      a2 = *a1;
      a3 = *((_DWORD *)a1 + 2);
    }
  }
  int v9 = sub_1000867C0(*(void *)(a2 + 8), a3);
  uint64_t v10 = *a1;
  uint64_t v11 = *(void *)(*a1 + 8);
  if (v9)
  {
    sub_100086E74(v11, *((_DWORD *)a1 + 2), v5);
    uint64_t v12 = a1[11];
    a1[6] = a1[12];
    a1[18] = v12;
    *((_DWORD *)a1 + 38) = 15;
  }
  else
  {
    *(_OWORD *)int v4 = *(_OWORD *)(*(void *)(*(void *)(v11 + 168) + 104) + 16 * *((int *)a1 + 2));
    uint64_t v13 = *((unsigned int *)a1 + 7);
    if (v13 == -1)
    {
      a1[6] = 0;
    }
    else
    {
      uint64_t v14 = *(void *)(*(void *)(*(void *)(v10 + 8) + 240) + 8 * *((int *)a1 + 6));
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v14 + 120))(v14, v13, v6);
      a1[18] = a1[15];
      unsigned int v15 = sub_10008CD0C(*(void *)(*a1 + 8), v4, (_DWORD *)a1 + 39, 7);
      *((_DWORD *)a1 + 43) = 7;
      uint64_t v16 = a1[16] + v15;
      a1[5] = v15;
      a1[6] = v16;
      *((_DWORD *)a1 + 38) = 0;
    }
  }
  return a1;
}

unsigned char *sub_10008EDA8(unsigned char *result)
{
  uint64_t v1 = result;
  if ((result[56] & 0x10) != 0)
  {
    uint64_t v3 = *((void *)result + 16);
    *((void *)result + 18) = *((void *)result + 15);
    if ((*(_DWORD *)(*(void *)(*(void *)result + 8) + 132) & 0xFFFFFFFD) == 1) {
      int v4 = 4;
    }
    else {
      int v4 = 5;
    }
    *((_DWORD *)result + 38) = v4;
    uint64_t v2 = *((void *)result + 6) - v3;
  }
  else
  {
    uint64_t result = (unsigned char *)(*(uint64_t (**)(void))(**(void **)result + 120))();
    uint64_t v2 = 0;
    *((void *)v1 + 18) = *((void *)v1 + 11);
    *((_DWORD *)v1 + 38) = 15;
  }
  *((void *)v1 + 5) = v2;
  return result;
}

uint64_t sub_10008EE4C(uint64_t *a1, int a2, void *a3)
{
  if ((sub_1000867C0((uint64_t)a1, a2) & 1) == 0) {
    sub_10008CA98(a1, a2);
  }
  return sub_100086E74((uint64_t)a1, a2, a3);
}

uint64_t sub_10008EEAC(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_1000F2F28;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = *(void *)(a2 + 8);
  *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = a3;
  *(_WORD *)(a1 + 77) = 0;
  *(void *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = -1;
  *(void *)(a1 + 88) = -1;
  int v4 = *sub_10002D854();
  *(void *)(a1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 12sub_10002B9D0((void **)&STACK[0x2A8], 0) = v4;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 24) = -1;
  if (*(_DWORD *)(a1 + 72) == 2) {
    *(void *)(a1 + 112) = 0xFFFFFFFF00000000;
  }
  sub_10008EF8C(a1);
  return a1;
}

void sub_10008EF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  a10 = v12;
  sub_10008FD9C(&a10);
  uint64_t v14 = *(void *)(v10 + 8);
  *(void *)(v10 + 8) = 0;
  if (v14) {
    sub_1000B4614();
  }
  _Unwind_Resume(a1);
}

void sub_10008EF8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  sub_10008F694(a1 + 40, (uint64_t)(*(void *)(v1 + 248) - *(void *)(v1 + 240)) >> 3);
  uint64_t v2 = *(void *)(v1 + 240);
  if (*(void *)(v1 + 248) != v2)
  {
    unint64_t v3 = 0;
    do
    {
      if (*(void *)(v2 + 8 * v3)) {
        operator new();
      }
      ++v3;
      uint64_t v2 = *(void *)(v1 + 240);
    }
    while (v3 < (*(void *)(v1 + 248) - v2) >> 3);
  }
}

void sub_10008F0B0()
{
}

uint64_t sub_10008F0D4(uint64_t a1)
{
  *(void *)a1 = off_1000F2F28;
  int v4 = (void **)(a1 + 40);
  sub_10008FD9C(&v4);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10008F15C(uint64_t a1)
{
  *(void *)a1 = off_1000F2F28;
  unint64_t v3 = (void **)(a1 + 40);
  sub_10008FD9C(&v3);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  operator delete();
}

void sub_10008F1F8()
{
}

void sub_10008F250()
{
}

uint64_t sub_10008F274(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 72);
  if (v2 == 4) {
    return 4;
  }
  if (v2 == 1) {
    uint64_t v6 = 0x10000000;
  }
  else {
    uint64_t v6 = 0x40000000;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v2 == 1) {
    uint64_t v8 = 805306368;
  }
  else {
    uint64_t v8 = 3221225472;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 56))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 72);
  }
  uint64_t v10 = 0x80000000;
  if (v2 == 1) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 4;
  }
  else {
    return 5;
  }
}

uint64_t sub_10008F324(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 64) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 64) = a2;
    *(_OWORD *)(result + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = *(_OWORD *)(*(void *)(*(void *)(*(void *)(result + 24) + 168) + 104) + 16 * a2);
    uint64_t v3 = *(unsigned int *)(result + 92);
    if (v3 == -1)
    {
      *(unsigned char *)(result + 76) = 1;
    }
    else
    {
      int v4 = *(_DWORD **)(*(void *)(result + 40) + 8 * *(int *)(result + 88));
      *(void *)(result + 32) = v4;
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v4 + 8) + 32))(*(void *)(*(void *)v4 + 8), v3);
      v4[18] = v3;
      *(_DWORD *)(v2 + 1++*(_DWORD *)(result + 24) = *(_DWORD *)(v2 + 64);
      *(unsigned char *)(v2 + 78) = 0;
    }
  }
  return result;
}

uint64_t sub_10008F3D8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 68) = a2;
  if ((a2 + 1) > 1)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    return sub_10008FF38(v8, a2);
  }
  else
  {
    if (!a2) {
      *(unsigned char *)(a1 + 77) = 1;
    }
    *(unsigned char *)(a1 + 78) = sub_10008CD0C(*(void *)(a1 + 24), (uint64_t *)(a1 + 80), 0, 15);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = (void *)(v4 + 24);
    *(void *)(v4 + 48) = v4 + 24;
    *(unsigned char *)(v4 + 56) = 0;
    if (*(unsigned char *)(v4 + 8))
    {
      uint64_t v9 = *(void **)(v4 + 16);
      while (1)
      {
        *(void *)(v4 + 48) = v9;
        if (v9 == v5) {
          break;
        }
        char v10 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)v4 + 8) + 40))(*(void *)(*(void *)v4 + 8), *((unsigned int *)v9 + 7));
        uint64_t v11 = *(void **)(v4 + 48);
        if (v10)
        {
          if (v11 == v5) {
            break;
          }
          *(unsigned char *)(v4 + 76) = 0;
          return 1;
        }
        uint64_t v12 = (void *)v11[1];
        if (v12)
        {
          do
          {
            uint64_t v9 = v12;
            uint64_t v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v9 = (void *)v11[2];
            BOOL v13 = *v9 == (void)v11;
            uint64_t v11 = v9;
          }
          while (!v13);
        }
      }
    }
    char v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v4 + 8) + 40))(*(void *)(*(void *)v4 + 8), 0xFFFFFFFFLL);
    *(unsigned char *)(v4 + 76) = v6 ^ 1;
    if (v6)
    {
      return 1;
    }
    else
    {
      if (a2) {
        BOOL v13 = *(unsigned char *)(a1 + 78) == 0;
      }
      else {
        BOOL v13 = 0;
      }
      return !v13;
    }
  }
}

BOOL sub_10008F554(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 77) && !*(unsigned char *)(a1 + 78) && *(unsigned char *)(*(void *)(a1 + 32) + 76) != 0;
}

uint64_t sub_10008F580(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 77)) {
    return a1 + 112;
  }
  if (*(unsigned char *)(a1 + 78))
  {
    uint64_t v2 = a1 + 96;
    sub_10008CD0C(*(void *)(a1 + 24), (uint64_t *)(a1 + 80), (_DWORD *)(a1 + 96), 15);
  }
  else
  {
    uint64_t v3 = *(unsigned int **)(a1 + 32);
    if (*((unsigned char *)v3 + 56)) {
      uint64_t v4 = v3 + 15;
    }
    else {
      uint64_t v4 = (unsigned int *)(*(uint64_t (**)(void))(**(void **)(*(void *)v3 + 8) + 56))(*(void *)(*(void *)v3 + 8));
    }
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = a1 + 80;
    uint64_t v2 = a1 + 96;
    sub_10008CF04(v5, v6, v4, v2, 15);
  }
  return v2;
}

uint64_t sub_10008F634(uint64_t result)
{
  if (*(unsigned char *)(result + 77))
  {
    *(unsigned char *)(result + 77) = 0;
  }
  else if (*(unsigned char *)(result + 78))
  {
    *(unsigned char *)(result + 78) = 0;
  }
  else
  {
    return sub_100090128(*(void *)(result + 32));
  }
  return result;
}

uint64_t sub_10008F65C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_10008F664(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10008F66C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

void sub_10008F694(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  unint64_t v4 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *(void *)a1 + 8 * a2;
      while (v3 != (uint64_t *)v6)
        sub_10008F724(--v3, 0);
      *(void *)(a1 + 8) = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_10008F874((char **)a1, v5);
  }
}

uint64_t sub_10008F724(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10008F9F0(result);
    operator delete();
  }
  return result;
}

void sub_10008F774(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = a1 + 16;
    sub_10008FD38(v2, a2);
  }
  else
  {
    if (byte_1000FE8F0) {
      sub_100009CF0(__p, "FATAL");
    }
    else {
      sub_100009CF0(__p, "ERROR");
    }
    sub_10002D454(&v5, (uint64_t)__p);
    sub_10002D07C(&std::cerr, (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    sub_10002D500(&v5);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10008F83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008F874(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  BOOL v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_100019424();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    uint64_t v24 = v4;
    if (v13)
    {
      uint64_t v14 = (char *)sub_10001943C(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    unsigned int v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    uint64_t v23 = v16;
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    *((void *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        uint64_t v18 = *((void *)v7 - 1);
        v7 -= 8;
        *(void *)uint64_t v7 = 0;
        *((void *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      uint64_t v17 = (char *)*((void *)&v22 + 1);
      uint64_t v16 = v23;
    }
    long long v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    long long v22 = v19;
    unint64_t v20 = a1[2];
    a1[2] = v16;
    uint64_t v23 = v20;
    uint64_t v21 = v19;
    sub_10008F99C((uint64_t)&v21);
  }
}

uint64_t sub_10008F99C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_10008F724((uint64_t *)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10008F9F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 12))
  {
    uint64_t v2 = *(uint64_t **)a1;
    if (*(void *)a1)
    {
      uint64_t v3 = v2[1];
      v2[1] = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      operator delete();
    }
  }
  sub_10001B844(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

uint64_t sub_10008FAA8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, char a6)
{
  if (!a5) {
    operator new();
  }
  *(void *)a1 = a5;
  *(_DWORD *)(a1 + 8) = a4;
  *(unsigned char *)(a1 + 12) = a6;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = -1;
  *(void *)(a1 + 48) = 0;
  if (a3 == 1) {
    int v7 = -1;
  }
  else {
    int v7 = 0;
  }
  if (a3 == 1) {
    int v8 = 0;
  }
  else {
    int v8 = -1;
  }
  *(_DWORD *)(a1 + 6sub_10002B9D0((void **)&STACK[0x2A8], 0) = v7;
  *(_DWORD *)(a1 + 64) = v8;
  *(_DWORD *)(a1 + 68) = *sub_10002D854();
  *(_DWORD *)(a1 + 72) = -1;
  return a1;
}

void sub_10008FB80()
{
}

uint64_t *sub_10008FBB8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 72))(a2, 0);
  *a1 = v5;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, a3);
  a1[1] = v6;
  if (!v6) {
    operator new();
  }
  return a1;
}

void sub_10008FCA4()
{
}

uint64_t **sub_10008FD38(uint64_t a1, int a2)
{
  int v9 = a2;
  uint64_t result = sub_10008B584((uint64_t **)a1, &v9, &v9);
  int v4 = *(_DWORD *)(a1 + 24);
  int v5 = v9;
  if (v4 == -1 || v9 < v4) {
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = v9;
  }
  int v7 = *(_DWORD *)(a1 + 28);
  if (v7 == -1 || v7 < v5) {
    *(_DWORD *)(a1 + 28) = v5;
  }
  return result;
}

void sub_10008FD9C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    int v4 = (uint64_t *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_10008F724(--v4, 0);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10008FE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_1000F2F28;
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 72))(*(void *)(a2 + 16), a3);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(v5 + 8);
  *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v6;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_WORD *)(a1 + 77) = 0;
  *(void *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = -1;
  *(void *)(a1 + 88) = -1;
  int v7 = *sub_10002D854();
  *(void *)(a1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 12sub_10002B9D0((void **)&STACK[0x2A8], 0) = v7;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 24) = -1;
  if (*(_DWORD *)(a1 + 72) == 2) {
    *(void *)(a1 + 112) = 0xFFFFFFFF00000000;
  }
  sub_10008EF8C(a1);
  return a1;
}

void sub_10008FF10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10008FD9C((void ***)va);
  uint64_t v4 = *(void *)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  if (v4) {
    sub_1000B4614();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10008FF38(uint64_t a1, int a2)
{
  uint64_t v3 = (void *)(a1 + 24);
  *(void *)(a1 + 48) = a1 + 24;
  *(unsigned char *)(a1 + 56) = 0;
  if (a2 == -1)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v6 = *(void **)(a1 + 16);
      while (1)
      {
        *(void *)(a1 + 48) = v6;
        if (v6 == v3) {
          break;
        }
        char v7 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)a1 + 8) + 40))(*(void *)(*(void *)a1 + 8), *((unsigned int *)v6 + 7));
        int v8 = *(void **)(a1 + 48);
        if (v7)
        {
          if (v8 == v3) {
            break;
          }
          uint64_t result = 1;
          goto LABEL_11;
        }
        int v9 = (void *)v8[1];
        if (v9)
        {
          do
          {
            uint64_t v6 = v9;
            int v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v6 = (void *)v8[2];
            BOOL v10 = *v6 == (void)v8;
            int v8 = v6;
          }
          while (!v10);
        }
      }
    }
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 8) + 40);
    goto LABEL_10;
  }
  if (!a2)
  {
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 8) + 40);
LABEL_10:
    uint64_t result = v4();
    goto LABEL_11;
  }
  if ((*(unsigned char *)(a1 + 8) & 2) == 0 || v3 == (void *)sub_1000900BC(a1 + 16, a2))
  {
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 8) + 40);
    goto LABEL_10;
  }
  uint64_t result = 1;
  *(unsigned char *)(a1 + 56) = 1;
LABEL_11:
  *(unsigned char *)(a1 + 76) = result ^ 1;
  return result;
}

uint64_t sub_1000900BC(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 24);
  BOOL v3 = v2 != -1 && v2 <= a2;
  if (!v3 || *(_DWORD *)(a1 + 28) < a2) {
    return a1 + 8;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v5 = a1 + 8;
  uint64_t v6 = v7;
  if (!v7) {
    return v5;
  }
  uint64_t v4 = v5;
  do
  {
    int v8 = *(_DWORD *)(v6 + 28);
    BOOL v9 = v8 < a2;
    if (v8 >= a2) {
      BOOL v10 = (uint64_t *)v6;
    }
    else {
      BOOL v10 = (uint64_t *)(v6 + 8);
    }
    if (!v9) {
      uint64_t v4 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v4 == v5 || *(_DWORD *)(v4 + 28) > a2) {
    return v5;
  }
  return v4;
}

uint64_t sub_100090128(uint64_t result)
{
  uint64_t v1 = (unsigned char *)result;
  if (*(unsigned char *)(result + 56))
  {
    char v2 = 1;
LABEL_3:
    v1[76] = v2;
  }
  else
  {
    (*(void (**)(void))(**(void **)(*(void *)result + 8) + 64))(*(void *)(*(void *)result + 8));
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)v1 + 8) + 48))(*(void *)(*(void *)v1 + 8));
    v1[76] = result;
    if (result)
    {
      BOOL v3 = v1 + 24;
      uint64_t v4 = (void *)*((void *)v1 + 6);
      if (v4 != (void *)(v1 + 24))
      {
        uint64_t v5 = (void *)v4[1];
        if (v5)
        {
          do
          {
            uint64_t v6 = v5;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v6 = (void *)v4[2];
            BOOL v7 = *v6 == (void)v4;
            uint64_t v4 = v6;
          }
          while (!v7);
        }
        while (1)
        {
          *((void *)v1 + 6) = v6;
          if (v6 == (void *)v3) {
            goto LABEL_19;
          }
          uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(*(void *)v1 + 8) + 40))(*(void *)(*(void *)v1 + 8), *((unsigned int *)v6 + 7));
          int v8 = (void *)*((void *)v1 + 6);
          if (result) {
            break;
          }
          BOOL v9 = (void *)v8[1];
          if (v9)
          {
            do
            {
              uint64_t v6 = v9;
              BOOL v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v6 = (void *)v8[2];
              BOOL v7 = *v6 == (void)v8;
              int v8 = v6;
            }
            while (!v7);
          }
        }
        if (v8 == (void *)v3)
        {
LABEL_19:
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v1 + 8) + 40))(*(void *)(*(void *)v1 + 8), 0xFFFFFFFFLL);
          char v2 = result ^ 1;
          goto LABEL_3;
        }
        v1[76] = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000902B0(uint64_t a1)
{
  v5[0] = *(int *)(a1 + 264);
  v5[1] = 0x100000002;
  _OWORD v5[2] = 0;
  sub_100090334((uint64_t)v3, (uint64_t *)(a1 + 240), a1 + 200, v5);
  sub_100090848((uint64_t)v3, 0);
  uint64_t v1 = (v4 >> 34) & 1;
  sub_100091618((uint64_t)v3);
  return v1;
}

void sub_100090320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100091618((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100090334(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  uint64_t v9 = a4[2];
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  BOOL v10 = (char **)(a1 + 24);
  *(_DWORD *)(a1 + 4) = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  uint64_t v11 = (uint64_t *)(a1 + 72);
  *(_OWORD *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  sub_1000906D8((void *)(a1 + 72), (a2[1] - *a2) >> 3);
  int v44 = v11;
  sub_10008E568(a1 + 96, a3);
  sub_1000A9814((void *)(a1 + 136));
  *(_OWORD *)(a1 + 16sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0u;
  *(_OWORD *)(a1 + 2++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 24sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  uint64_t v12 = *(void **)(a1 + 32);
  unint64_t v13 = *(void *)(a1 + 40);
  if ((unint64_t)v12 >= v13)
  {
    uint64_t v15 = ((char *)v12 - *v10) >> 3;
    if ((unint64_t)(v15 + 1) >> 61) {
      sub_100019424();
    }
    uint64_t v16 = v13 - (void)*v10;
    uint64_t v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
      uint64_t v17 = v15 + 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18) {
      long long v19 = (char *)sub_10001943C(a1 + 40, v18);
    }
    else {
      long long v19 = 0;
    }
    unint64_t v20 = &v19[8 * v15];
    uint64_t v21 = &v19[8 * v18];
    *(void *)unint64_t v20 = 0;
    uint64_t v14 = v20 + 8;
    uint64_t v23 = *(char **)(a1 + 24);
    long long v22 = *(char **)(a1 + 32);
    if (v22 != v23)
    {
      do
      {
        uint64_t v24 = *((void *)v22 - 1);
        v22 -= 8;
        *((void *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      long long v22 = *v10;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v20;
    *(void *)(a1 + 32) = v14;
    *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *uint64_t v12 = 0;
    uint64_t v14 = v12 + 1;
  }
  *(void *)(a1 + 32) = v14;
  uint64_t v25 = *a2;
  if ((unint64_t)(a2[1] - *a2) >= 9)
  {
    unint64_t v26 = 1;
    do
    {
      uint64_t v27 = (*(uint64_t (**)(void, void))(**(void **)(v25 + 8 * v26) + 72))(*(void *)(v25 + 8 * v26), 0);
      uint64_t v28 = v27;
      uint64_t v30 = *(uint64_t **)(a1 + 32);
      unint64_t v29 = *(void *)(a1 + 40);
      if ((unint64_t)v30 >= v29)
      {
        uint64_t v32 = ((char *)v30 - *v10) >> 3;
        if ((unint64_t)(v32 + 1) >> 61) {
          sub_100019424();
        }
        uint64_t v33 = v29 - (void)*v10;
        uint64_t v34 = v33 >> 2;
        if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
          uint64_t v34 = v32 + 1;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v35) {
          long long v36 = (char *)sub_10001943C(a1 + 40, v35);
        }
        else {
          long long v36 = 0;
        }
        char v37 = (uint64_t *)&v36[8 * v32];
        uint64_t *v37 = v28;
        int v31 = v37 + 1;
        uint64_t v39 = *(char **)(a1 + 24);
        uint64_t v38 = *(char **)(a1 + 32);
        if (v38 != v39)
        {
          do
          {
            uint64_t v40 = *((void *)v38 - 1);
            v38 -= 8;
            *--char v37 = v40;
          }
          while (v38 != v39);
          uint64_t v38 = *v10;
        }
        *(void *)(a1 + ++*(_DWORD *)(result + 24) = v37;
        *(void *)(a1 + 32) = v31;
        *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = &v36[8 * v35];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        *uint64_t v30 = v27;
        int v31 = v30 + 1;
      }
      *(void *)(a1 + 32) = v31;
      ++v26;
      uint64_t v25 = *a2;
    }
    while (v26 < (a2[1] - *a2) >> 3);
  }
  unint64_t v41 = *(uint64_t **)(a3 + 16);
  for (uint64_t i = *v44; v41; v41 = (uint64_t *)*v41)
    *(_DWORD *)(i + 4 * *((int *)v41 + 5)) = *((_DWORD *)v41 + 4);
  *(_DWORD *)a1 = *(_DWORD *)(i + 4 * *(int *)(a1 + 4));
  return a1;
}

void sub_100090608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14)
{
  unint64_t v18 = (void *)v14[31];
  if (v18)
  {
    v14[32] = v18;
    operator delete(v18);
  }
  a14 = a9;
  sub_100090750(&a14);
  long long v19 = (void *)v14[23];
  if (v19) {
    operator delete(v19);
  }
  unint64_t v20 = *v16;
  if (*v16)
  {
    v14[21] = v20;
    operator delete(v20);
  }
  v14[17] = off_1000F0D20;
  uint64_t v21 = (std::__shared_weak_count *)v14[19];
  if (v21) {
    sub_100018BC0(v21);
  }
  sub_10001B7F8(a11);
  long long v22 = *a13;
  if (*a13)
  {
    v14[10] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)v14[6];
  if (v23)
  {
    v14[7] = v23;
    operator delete(v23);
  }
  uint64_t v24 = *v15;
  if (*v15)
  {
    v14[4] = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void *sub_1000906D8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100031054(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_100090734(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100090750(void ***a1)
{
  char v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_1000907A4((uint64_t)v2, *v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000907A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 24;
    do
    {
      sub_10001B844(v5, *(void **)(v5 + 8));
      sub_10001B844(v5 - 24, *(void **)(v5 - 16));
      uint64_t v6 = v5 - 56;
      v5 -= 80;
    }
    while (v6 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_10009080C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100090848(uint64_t result, int a2)
{
  char v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = result + 136;
  if ((int)((*(void *)(*(void *)(result + 144) + 64) - *(void *)(*(void *)(result + 144) + 56)) >> 3) < 1)
  {
    *(unsigned char *)(result + 216) = a2;
    uint64_t v5 = (unsigned char *)(result + 216);
    if (!a2)
    {
LABEL_7:
      if (*(void *)(v3 + 32) != *(void *)(v3 + 24))
      {
        unint64_t v6 = 0;
        do
        {
          sub_10002C8DC(v4);
          int v7 = *sub_10002D854();
          sub_100030AA4(v4);
          uint64_t v8 = *(void **)(v3 + 144);
          LODWORD(v4sub_10002B9D0((void **)&STACK[0x2A8], 0) = v7;
          sub_100030BD4(v8, v6, (float *)&v40);
          if (*(unsigned char *)(v3 + 216))
          {
            BOOL v43 = 0;
            uint64_t v44 = 0;
            long long v40 = 0uLL;
            LODWORD(v41) = 0;
            *((void *)&v41 + 1) = 0;
            unint64_t v42 = (unint64_t)&v43;
            *((void *)&v45 + 1) = 0;
            *(void *)&long long v46 = 0;
            *(void *)&long long v45 = (char *)&v45 + 8;
            unint64_t v9 = *(void *)(v3 + 232);
            if (v9 >= *(void *)(v3 + 240))
            {
              uint64_t v14 = sub_100091448((uint64_t *)(v3 + 224), (uint64_t)&v40);
            }
            else
            {
              long long v10 = v41;
              *(_OWORD *)unint64_t v9 = v40;
              *(_OWORD *)(v9 + 16) = v10;
              *(void *)(v9 + 32) = v42;
              uint64_t v11 = v43;
              *(void *)(v9 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = v43;
              unint64_t v12 = v9 + 40;
              uint64_t v13 = v44;
              *(void *)(v9 + 48) = v44;
              if (v13)
              {
                v11[2] = v12;
                unint64_t v42 = (unint64_t)&v43;
                BOOL v43 = 0;
                uint64_t v44 = 0;
              }
              else
              {
                *(void *)(v9 + 32) = v12;
              }
              *(void *)(v9 + 56) = v45;
              uint64_t v15 = *((void *)&v45 + 1);
              *(void *)(v9 + 64) = *((void *)&v45 + 1);
              unint64_t v16 = v9 + 64;
              uint64_t v17 = v46;
              *(void *)(v9 + 72) = v46;
              if (v17)
              {
                *(void *)(v15 + 16) = v16;
                *(void *)&long long v45 = (char *)&v45 + 8;
                *((void *)&v45 + 1) = 0;
                *(void *)&long long v46 = 0;
              }
              else
              {
                *(void *)(v9 + 56) = v16;
              }
              uint64_t v14 = v9 + 80;
            }
            *(void *)(v3 + 232) = v14;
            sub_10001B844((uint64_t)&v45, *((void **)&v45 + 1));
            sub_10001B844((uint64_t)&v42, v43);
          }
          ++v6;
        }
        while (v6 < (uint64_t)(*(void *)(v3 + 32) - *(void *)(v3 + 24)) >> 3);
      }
      sub_10002C774(v4, *(_DWORD *)(v3 + 4));
      int v54 = 0;
      uint64_t v19 = *(void *)(v3 + 24);
      uint64_t v18 = *(void *)(v3 + 32);
      if (v18 == v19)
      {
LABEL_61:
        *(void *)&long long v40 = v3 + 160;
        *((void *)&v40 + 1) = v3 + 184;
        *(void *)&long long v41 = 0;
        *((void *)&v41 + 1) = v3 + 208;
        long long v45 = 0u;
        long long v46 = 0u;
        sub_100068854(v4, (uint64_t)&v40);
      }
      int v20 = 0;
      uint64_t v21 = 0;
      while (1)
      {
        uint64_t v22 = *(void *)(v19 + 8 * v21);
        if (!v22) {
          goto LABEL_60;
        }
        uint64_t v51 = 0;
        int v52 = 0;
        unsigned int v53 = 0;
        uint64_t v39 = v22;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v22 + 112))(v22, &v51);
LABEL_25:
        if (!v51) {
          break;
        }
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v51 + 16))(v51))
        {
          if (v51)
          {
            uint64_t v23 = (*(uint64_t (**)(void))(*(void *)v51 + 24))();
            goto LABEL_31;
          }
LABEL_30:
          uint64_t v23 = v53;
LABEL_31:
          uint64_t v24 = v39;
          if (*v5)
          {
            ++*(_DWORD *)(*(void *)(v3 + 224) + 80 * v54);
            (*(void (**)(float *__return_ptr))(*(void *)v39 + 24))(&v50);
            uint64_t v25 = sub_10002D8A8();
            *(float *)&long long v40 = v50;
            LODWORD(v47) = 0;
            LODWORD(v47) = *v25;
            uint64_t v24 = v39;
            if (v50 != *(float *)&v47)
            {
              uint64_t v26 = *(void *)(v3 + 224) + 80 * v54;
              ++*(_DWORD *)(v26 + 4);
            }
          }
          unint64_t v42 = 0;
          long long v40 = 0u;
          long long v41 = 0u;
          (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v24 + 120))(v24, v23, &v40);
          while (1)
          {
            if ((void)v40)
            {
              if ((*(unsigned int (**)(void))(*(void *)v40 + 16))(v40))
              {
                if ((void)v40)
                {
                  (*(void (**)(void))(*(void *)v40 + 8))(v40);
                }
                else
                {
LABEL_52:
                  if (*((void *)&v41 + 1)) {
                    --**((_DWORD **)&v41 + 1);
                  }
                }
                if (v51) {
                  (*(void (**)(uint64_t))(*(void *)v51 + 32))(v51);
                }
                else {
                  ++v53;
                }
                goto LABEL_25;
              }
            }
            else if (v42 >= (unint64_t)v41)
            {
              goto LABEL_52;
            }
            if (*v5)
            {
              uint64_t v27 = *(void *)(v3 + 224) + 80 * v54;
              ++*(void *)(v27 + 8);
            }
            if ((void)v40) {
              uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v40 + 24))(v40);
            }
            else {
              uint64_t v28 = *((void *)&v40 + 1) + 16 * v42;
            }
            unint64_t v29 = (int *)(v28 + 4);
            uint64_t v30 = sub_10006941C((void *)(v3 + 96), (int *)(v28 + 4));
            if (v30)
            {
              float v50 = *((float *)v30 + 5);
              int v31 = v54;
              int v32 = *v29;
              int v33 = *sub_10002D854();
              LODWORD(v47) = v32;
              HIDWORD(v47) = v32;
              int v48 = v33;
              float v49 = v50;
              sub_100030AA4(v4);
              sub_100030C6C(*(void **)(v3 + 144), v31, (float *)&v47);
              if (*v5)
              {
                uint64_t v34 = *(void *)(v3 + 224);
                ++*(_DWORD *)(v34 + 80 * v54 + 16);
                uint64_t v35 = v34 + 80 * SLODWORD(v50);
                ++*(void *)(v35 + 24);
                int v47 = &v54;
                long long v36 = sub_100091554((uint64_t **)(v35 + 32), &v54, (uint64_t)&unk_1000CE129, &v47);
                v36[5] = (uint64_t *)((char *)v36[5] + 1);
                char v37 = (uint64_t **)(*(void *)(v3 + 224) + 80 * v54 + 56);
                int v47 = (int *)&v50;
                uint64_t v38 = sub_100091554(v37, (int *)&v50, (uint64_t)&unk_1000CE129, &v47);
                v38[5] = (uint64_t *)((char *)v38[5] + 1);
              }
            }
            if ((void)v40) {
              (*(void (**)(void))(*(void *)v40 + 32))(v40);
            }
            else {
              ++v42;
            }
          }
        }
        if (v51) {
          (*(void (**)(void))(*(void *)v51 + 8))();
        }
LABEL_59:
        int v20 = v54;
        uint64_t v19 = *(void *)(v3 + 24);
        uint64_t v18 = *(void *)(v3 + 32);
LABEL_60:
        int v54 = ++v20;
        uint64_t v21 = v20;
        if (v20 >= (unint64_t)((v18 - v19) >> 3)) {
          goto LABEL_61;
        }
      }
      if ((int)v53 >= v52) {
        goto LABEL_59;
      }
      goto LABEL_30;
    }
LABEL_6:
    sub_100090FE8((uint64_t *)(v3 + 224), (uint64_t)(*(void *)(v3 + 32) - *(void *)(v3 + 24)) >> 3);
    goto LABEL_7;
  }
  if (a2)
  {
    uint64_t v5 = (unsigned char *)(result + 216);
    if (!*(unsigned char *)(result + 216))
    {
      sub_10002CA2C(result + 136);
      sub_1000907A4(v3 + 224, *(void *)(v3 + 224));
      *(void *)(v3 + 208) = 0;
      *(void *)(v3 + 256) = *(void *)(v3 + 248);
      *(unsigned char *)(v3 + 216) = v2;
      goto LABEL_6;
    }
  }
  return result;
}

void sub_100090F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10002D794(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100090FE8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334) {
      sub_100019424();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_100091114(result, a2);
    v7[1] = v7[0] + v5;
    _OWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 80 * v6;
    sub_10009109C(a1, v7);
    return sub_1000913AC((uint64_t)v7);
  }
  return result;
}

void sub_100091088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000913AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10009109C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10009115C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100091114(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    sub_100018AF4();
  }
  return operator new(80 * a2);
}

uint64_t sub_10009115C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 80;
      sub_100091214(a1, v7 - 80, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 80;
      *((void *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100091290((uint64_t)v13);
  return v11;
}

void sub_100091214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  uint64_t v4 = (void *)(a3 + 40);
  uint64_t v5 = *(void *)(a3 + 40);
  *(void *)(a2 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = v5;
  uint64_t v6 = a2 + 40;
  uint64_t v7 = *(void *)(a3 + 48);
  *(void *)(a2 + 48) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)(a3 + 32) = v4;
    void *v4 = 0;
    *(void *)(a3 + 48) = 0;
  }
  else
  {
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  uint64_t v8 = (void *)(a3 + 64);
  uint64_t v9 = *(void *)(a3 + 64);
  *(void *)(a2 + 64) = v9;
  uint64_t v10 = a2 + 64;
  uint64_t v11 = *(void *)(a3 + 72);
  *(void *)(a2 + 72) = v11;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    *(void *)(a3 + 56) = v8;
    *uint64_t v8 = 0;
    *(void *)(a3 + 72) = 0;
  }
  else
  {
    *(void *)(a2 + 56) = v10;
  }
}

uint64_t sub_100091290(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000912C8((uint64_t *)a1);
  }
  return a1;
}

void sub_1000912C8(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_100091340(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_100091340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    sub_10001B844(i + 56, *(void **)(i + 64));
    sub_10001B844(i + 32, *(void **)(i + 40));
    uint64_t i = *(void *)(a2 + 32) + 80;
  }
}

uint64_t sub_1000913AC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000913E4(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    sub_10001B844(i - 24, *(void **)(i - 16));
    sub_10001B844(i - 48, *(void **)(i - 40));
  }
}

uint64_t sub_100091448(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_100019424();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_100091114((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[80 * v3];
  uint64_t v13 = &v7[80 * v6];
  sub_100091214((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 80;
  sub_10009109C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1000913AC((uint64_t)&v10);
  return v8;
}

void sub_100091540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000913AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_100091554(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    void v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    sub_10001AD30(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_100091618(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        uint64_t v3 = *(void *)(a1 + 24);
        uint64_t v2 = *(void *)(a1 + 32);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  unint64_t v6 = *(void **)(a1 + 248);
  if (v6)
  {
    *(void *)(a1 + 256) = v6;
    operator delete(v6);
  }
  uint64_t v14 = (void **)(a1 + 224);
  sub_100090750(&v14);
  uint64_t v7 = *(void **)(a1 + 184);
  if (v7) {
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 160);
  if (v8)
  {
    *(void *)(a1 + 168) = v8;
    operator delete(v8);
  }
  *(void *)(a1 + 136) = off_1000F0D20;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 152);
  if (v9) {
    sub_100018BC0(v9);
  }
  sub_10001B7F8(a1 + 96);
  int v10 = *(void **)(a1 + 72);
  if (v10)
  {
    *(void *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 48);
  if (v11)
  {
    *(void *)(a1 + 56) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 24);
  if (v12)
  {
    *(void *)(a1 + 32) = v12;
    operator delete(v12);
  }
  return a1;
}

void *sub_100091734@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x78uLL);
  uint64_t result = sub_100091790(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10009177C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100091790(void *a1, int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000F2FC0;
  sub_100091890((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_1000917DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000917F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F2FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100091810(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F2FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100091864(uint64_t a1)
{
  sub_100091AFC((uint64_t)&v1, a1 + 24);
}

uint64_t sub_100091890(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  v4[0] = a2;
  sub_100091900(a1 + 32, 0x400uLL, v4);
  *(void *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  *(void *)(a1 + 88) = 0;
  return a1;
}

void sub_1000918E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100091A44((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100091900(uint64_t a1, size_t a2, int *a3)
{
  int v4 = *a3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 1065353216;
  sub_100091954(a1, a2);
  return a1;
}

void sub_100091940(_Unwind_Exception *a1)
{
  sub_10001B7F8(v1);
  _Unwind_Resume(a1);
}

void sub_100091954(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 40));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_100019064(a1, prime);
    }
  }
}

void sub_100091A44(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100091A98((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_100091A98(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void **)(result + 8);
  while (v3 != a2)
  {
    uint64_t v4 = *--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      operator delete();
    }
  }
  *(void *)(v2 + 8) = a2;
  return result;
}

void sub_100091AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a2 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_10001B7F8(a2 + 32);
  unint64_t v5 = (void **)(a2 + 8);
  sub_100091A44(&v5);
}

void sub_100091B9C(void *a1, void *a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void *))(*(void *)a1 + 16))(a1) == -1) {
    return;
  }
  int v6 = (*(uint64_t (**)(void *))(*(void *)a1 + 136))(a1);
  LOBYTE(__p[0]) = 0;
  sub_100098D50(&v66, v6, (unsigned __int8 *)__p);
  int v7 = (*(uint64_t (**)(void *))(*(void *)a1 + 16))(a1);
  unint64_t v8 = 0;
  *(void *)&v66[((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v7;
LABEL_3:
  if (v8 < (*(int (**)(void *))(*(void *)a1 + 136))(a1))
  {
    unint64_t v39 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v38 = 0u;
    (*(void (**)(void *, unint64_t, void **))(*(void *)a1 + 120))(a1, v8, __p);
    while (1)
    {
      if (__p[0])
      {
        if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 16))(__p[0]))
        {
          if (__p[0])
          {
            (*(void (**)(void))(*(void *)__p[0] + 8))();
            goto LABEL_20;
          }
LABEL_18:
          if (*((void *)&v38 + 1)) {
            --**((_DWORD **)&v38 + 1);
          }
LABEL_20:
          ++v8;
          goto LABEL_3;
        }
        if (__p[0])
        {
          uint64_t v9 = (char *)(*(uint64_t (**)(void))(*(void *)__p[0] + 24))();
          goto LABEL_11;
        }
      }
      else if (v39 >= (unint64_t)v38)
      {
        goto LABEL_18;
      }
      uint64_t v9 = (char *)__p[1] + 16 * v39;
LABEL_11:
      if (*(void *)v9) {
        *(void *)&v66[((unint64_t)*((int *)v9 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *((_DWORD *)v9 + 3);
      }
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 32))(__p[0]);
      }
      else {
        ++v39;
      }
    }
  }
  char v63 = 0;
  BOOL v64 = 0;
  uint64_t v65 = 0;
  int v10 = (*(uint64_t (**)(void *))(*(void *)a1 + 136))(a1);
  sub_100097368((void **)&v63, v10);
  if (((*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 56))(a1, 0x4000000000, 0) & 0x4000000000) == 0)
  {
    if (((*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 56))(a1, 0x800000000, 0) & 0x800000000) == 0)
    {
      uint64_t v62 = 0;
      BOOL v67 = 0;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      __p[0] = &v67;
      __p[1] = 0;
      *(void *)&long long v38 = 0;
      *((void *)&v38 + 1) = &v62;
      long long v43 = 0u;
      long long v44 = 0u;
      sub_100097DE8((uint64_t)a1, (uint64_t)__p);
    }
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v38 = 0;
    LOBYTE(v61) = 0;
    BOOL v67 = __p;
    uint64_t v68 = &v61;
    uint64_t v69 = 0;
    sub_100097410();
  }
  for (unint64_t i = 0; i < (*(int (**)(void *))(*(void *)a1 + 136))(a1); ++i)
  {
    uint64_t v12 = v64;
    if (v64 >= v65)
    {
      uint64_t v14 = v63;
      uint64_t v15 = (v64 - v63) >> 2;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        sub_100019424();
      }
      uint64_t v17 = v65 - v63;
      if ((v65 - v63) >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        uint64_t v19 = (char *)sub_10002EE10((uint64_t)&v65, v18);
        uint64_t v14 = v63;
        uint64_t v12 = v64;
      }
      else
      {
        uint64_t v19 = 0;
      }
      int v20 = &v19[4 * v15];
      *(_DWORD *)int v20 = i;
      uint64_t v13 = v20 + 4;
      while (v12 != v14)
      {
        int v21 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v20 - 1) = v21;
        v20 -= 4;
      }
      char v63 = v20;
      BOOL v64 = v13;
      uint64_t v65 = &v19[4 * v18];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_DWORD *)BOOL v64 = i;
      uint64_t v13 = v12 + 4;
    }
    BOOL v64 = v13;
  }
  __p[0] = a1;
  __p[1] = a2;
  *(void *)&long long v38 = a1;
  *((void *)&v38 + 1) = a2;
  unint64_t v39 = *(void *)a3;
  int v40 = *(_DWORD *)(a3 + 16);
  char v41 = *(unsigned char *)(a3 + 20);
  char v42 = 1;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  memset(v48, 0, sizeof(v48));
  a2[1] = *a2;
  long long v49 = 0u;
  long long v50 = 0u;
  int v51 = 1065353216;
  int v60 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v58 = 0;
  while (v63 != v64)
  {
    unint64_t v22 = *((int *)v64 - 1);
    v64 -= 4;
    if (((*(void *)&v66[(v22 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v22) & 1) == 0)
    {
      if (*(unsigned char *)(a3 + 21)) {
        continue;
      }
      uint64_t v25 = sub_10002D8A8();
      LODWORD(v67) = 0;
      LODWORD(v67) = *(_DWORD *)(a3 + 24);
      float v61 = 0.0;
      float v61 = *(float *)v25;
      if (*(float *)&v67 != v61 || *(_DWORD *)(a3 + 28) != -1) {
        continue;
      }
    }
    sub_100098788((uint64_t *)__p, v22);
    int v36 = v59;
    (*(void (**)(void *, unint64_t, int *))(*(void *)a1 + 160))(a1, v22, &v36);
    (*(void (**)(void *, unint64_t))(*(void *)a1 + 216))(a1, v22);
    (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 232))(a1, v22, (uint64_t)(*((void *)&v57 + 1) - v57) >> 4);
    uint64_t v23 = *((void *)&v57 + 1);
    uint64_t v24 = v57;
    while (v24 != v23)
    {
      (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 184))(a1, v22, v23 - 16);
      uint64_t v24 = v57;
      uint64_t v23 = *((void *)&v57 + 1) - 16;
      *((void *)&v57 + 1) -= 16;
    }
  }
  if (*(unsigned char *)(a3 + 21)
    || (uint64_t v28 = sub_10002D8A8(),
        LODWORD(v67) = 0,
        LODWORD(v67) = *(_DWORD *)(a3 + 24),
        float v61 = 0.0,
        float v61 = *(float *)v28,
        *(float *)&v67 != v61)
    || *(_DWORD *)(a3 + 28) != -1)
  {
    for (unint64_t j = 0; j < (*(int (**)(void *))(*(void *)a1 + 136))(a1); ++j)
    {
      if (((*(void *)&v66[(j >> 3) & 0x1FFFFFFFFFFFFFF8] >> j) & 1) == 0) {
        (*(void (**)(void *, unint64_t))(*(void *)a1 + 216))(a1, j);
      }
    }
  }
  if (v48[20]) {
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, 4, 4);
  }
  uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  uint64_t v30 = sub_1000C2988(v29, 0);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, v30, 0xFFFFFFFF0007);
  int v31 = sub_10002D8A8();
  LODWORD(v67) = 0;
  float v32 = *(float *)(a3 + 24);
  *(float *)&BOOL v67 = v32;
  float v61 = 0.0;
  float v61 = *(float *)v31;
  unsigned int v33 = *(_DWORD *)(a3 + 28);
  if (v32 != v61 || v33 != -1)
  {
    BOOL v67 = (void **)__PAIR64__(v33, LODWORD(v32));
    uint64_t v69 = 0;
    int v70 = 981467136;
    char v71 = 0;
    sub_10009AAF8((uint64_t)a1, (uint64_t)&v67);
  }
  if (*(unsigned char *)(a3 + 21))
  {
    uint64_t v35 = sub_10002D8A8();
    LODWORD(v67) = 0;
    LODWORD(v67) = *(_DWORD *)(a3 + 24);
    float v61 = 0.0;
    float v61 = *(float *)v35;
    if (*(float *)&v67 == v61 && *(_DWORD *)(a3 + 28) == -1) {
      sub_10006CCFC((uint64_t)a1);
    }
  }
  sub_1000A7FDC(__p);
  if (v63)
  {
    BOOL v64 = v63;
    operator delete(v63);
  }
  if (v66) {
    operator delete(v66);
  }
}

void sub_100092788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (*(char *)(v16 - 177) < 0) {
    operator delete(*(void **)(v15 + 360));
  }
  uint64_t v18 = *(void *)(v15 + 448);
  *(void *)(v15 + 448) = 0;
  if (v18) {
    sub_10002E360(v14, v18);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v19 = *(void **)(v15 + 384);
  if (v19)
  {
    *(void *)(v15 + 392) = v19;
    operator delete(v19);
  }
  int v20 = *(void **)(v15 + 408);
  if (v20) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000928F8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = off_1000F3010;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v3 = (void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v8 = 0;
        __p[0] = v3;
        __p[1] = 0;
        __p[2] = 0;
        __p[3] = &v8;
        long long v6 = 0u;
        long long v7 = 0u;
        sub_1000935F4(a2, (uint64_t)__p);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1000933F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_10002D500(&a17);
  if (a14 < 0)
  {
    operator delete(__p);
    if (v28) {
LABEL_10:
    }
      operator delete();
  }
  else if (v28)
  {
    goto LABEL_10;
  }
  if (v29) {
    operator delete();
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  sub_10002D794(&a21);
  float v32 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 56) = v32;
    operator delete(v32);
  }
  sub_1000972A8((void ***)&a21);
  uint64_t v33 = *v30;
  *uint64_t v30 = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  _Unwind_Resume(a1);
}

void sub_1000935F4(uint64_t a1, uint64_t a2)
{
}

void sub_100093EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  sub_10002E6EC(&a23);
  sub_10002F120(&a27);
  uint64_t v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100093F94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a3, 4 * v12);
  }
  uint64_t v32 = 0;
  int v33 = 0;
  unsigned int v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v32);
  while (1)
  {
    uint64_t result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33) {
        return result;
      }
LABEL_11:
      uint64_t v15 = v34;
      goto LABEL_12;
    }
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
    uint64_t result = v32;
    if (v14) {
      break;
    }
    if (!v32) {
      goto LABEL_11;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v32 + 24))();
LABEL_12:
    unint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v15, &v29);
    uint64_t v17 = (int)v15;
    while (1)
    {
      if (!(void)v29)
      {
        if (v31 >= (unint64_t)v30) {
          goto LABEL_39;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v29 + 16))(v29)) {
        break;
      }
      if ((void)v29)
      {
        uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v29 + 24))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v18 = *((void *)&v29 + 1) + 16 * v31;
LABEL_19:
      if (*(void *)v18) {
        goto LABEL_29;
      }
      uint64_t v19 = *(int *)(*a2 + 4 * v17);
      if (v19 == *(_DWORD *)(*a2 + 4 * *(int *)(v18 + 12)))
      {
        int v20 = *(_DWORD **)a3;
        if (!a4
          || (v21 = sub_10002D854(), unint64_t v22 = (float *)(v18 + 8), sub_100096070(a4, (float *)(v18 + 8), (float *)v21)))
        {
          int v23 = 1;
          goto LABEL_24;
        }
        if ((v20[v19] | 2) == 2)
        {
          uint64_t v26 = sub_10002D8A8();
          float v36 = 0.0;
          float v36 = *v22;
          float v35 = 0.0;
          float v35 = *(float *)v26;
          if (v36 == v35 || (v27 = sub_10002D854(), v36 = 0.0, v36 = *v22, float v35 = 0.0, float v35 = *(float *)v27, v36 == v35)) {
            int v23 = 2;
          }
          else {
            int v23 = 3;
          }
LABEL_24:
          v20[v19] = v23;
        }
        *a5 = 0;
      }
      uint64_t v24 = sub_10002D8A8();
      float v36 = 0.0;
      float v36 = *(float *)(v18 + 8);
      float v35 = 0.0;
      float v35 = *(float *)v24;
      v16.n128_f32[0] = v36;
      if (v36 != v35)
      {
        uint64_t v25 = sub_10002D854();
        float v36 = 0.0;
        float v36 = *(float *)(v18 + 8);
        float v35 = 0.0;
        float v35 = *(float *)v25;
        v16.n128_f32[0] = v36;
        if (v36 != v35) {
          *a6 = 0;
        }
      }
LABEL_29:
      if ((void)v29) {
        (*(void (**)(void, __n128))(*(void *)v29 + 32))(v29, v16);
      }
      else {
        ++v31;
      }
    }
    if ((void)v29)
    {
      (*(void (**)(void))(*(void *)v29 + 8))();
      goto LABEL_41;
    }
LABEL_39:
    if (*((void *)&v30 + 1)) {
      --**((_DWORD **)&v30 + 1);
    }
LABEL_41:
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 32))(v32);
    }
    else {
      ++v34;
    }
  }
  if (v32) {
    return (*(uint64_t (**)(void))(*(void *)v32 + 8))();
  }
  return result;
}

void sub_1000943A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_100094438(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        *uint64_t v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_1000961E0(a1, v5);
  }
}

void sub_1000944E8(uint64_t a1)
{
  sub_1000A8084(a1);
  operator delete();
}

uint64_t sub_100094520(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t sub_100094548(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t sub_100094570(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t sub_100094598(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t sub_1000945C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t sub_1000945E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))();
}

void *sub_100094610(void *a1)
{
  *a1 = off_1000F3088;
  uint64_t v2 = (void *)a1[3];
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10009465C(void *a1)
{
  *a1 = off_1000F3088;
  uint64_t v1 = (void *)a1[3];
  if (v1) {
    operator delete(v1);
  }
  operator delete();
}

uint64_t sub_1000946C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void sub_1000946D0(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 20);
  if (v3 > v4)
  {
    *(_DWORD *)(a1 + 2sub_10002B9D0((void **)&STACK[0x2A8], 0) = a2;
LABEL_6:
    *(_DWORD *)(a1 + 16) = a2;
    goto LABEL_7;
  }
  if (v4 < a2)
  {
    *(_DWORD *)(a1 + 2sub_10002B9D0((void **)&STACK[0x2A8], 0) = a2;
    goto LABEL_7;
  }
  if (v3 > a2) {
    goto LABEL_6;
  }
LABEL_7:
  unint64_t v5 = (void *)(a1 + 24);
  unint64_t v6 = a2;
  while (*(void *)(a1 + 32) <= v6)
  {
    char v7 = 0;
    sub_10002ED68(a1 + 24, &v7);
  }
  *(void *)(*v5 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
}

uint64_t sub_100094780(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  int v2 = *(_DWORD *)(result + 20);
  unint64_t v3 = *(int *)(result + 16);
  *(void *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v3);
  if ((int)v3 <= v2)
  {
    int v4 = v3 - 1;
    do
    {
      if ((*(void *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
        break;
      }
      ++v3;
      *(_DWORD *)(result + 16) = v4 + 2;
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

BOOL sub_1000947E8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

double sub_1000947F8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  unint64_t v2 = *(int *)(a1 + 16);
  if ((int)v2 <= v1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    int v4 = v1 - v2 + 1;
    do
    {
      *(void *)(v3 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v2);
      ++v2;
      --v4;
    }
    while (v4);
  }
  double result = NAN;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

void sub_100094848(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = off_1000F30F0;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v4 = 0;
  uint64_t v1 = a1 + 24;
  unint64_t v2 = &v4;
  uint64_t v3 = 0;
  sub_100094A28();
}

void sub_1000949B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21) {
    sub_10002E360(v23, a21);
  }
  uint64_t v26 = *v22;
  if (*v22)
  {
    *(void *)(v21 + 56) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *v24;
  if (*v24)
  {
    *(void *)(v21 + 32) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_100094A28()
{
}

void sub_100095310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  sub_10002E6EC(&a23);
  sub_10002F120(&a27);
  long long v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_1000953D0(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_100095834((void **)a1, a2 - v3, a3);
  }
}

void sub_100095404(void *a1)
{
  sub_100095958(a1);
  operator delete();
}

uint64_t sub_10009543C(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 16));
}

uint64_t sub_10009544C(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 16);
  int v3 = *(_DWORD *)(result + 20);
  uint64_t v4 = *(void *)(result + 24);
  int v5 = *(_DWORD *)(v4 + 4 * a2);
  if (v2 > v3)
  {
    *(_DWORD *)(result + 2sub_10002B9D0((void **)&STACK[0x2A8], 0) = v5;
LABEL_6:
    *(_DWORD *)(result + 16) = v5;
    goto LABEL_7;
  }
  if (v5 <= v3)
  {
    if (v5 < v2) {
      goto LABEL_6;
    }
  }
  else
  {
    *(_DWORD *)(result + 2sub_10002B9D0((void **)&STACK[0x2A8], 0) = v5;
  }
LABEL_7:
  *(_DWORD *)(*(void *)(result + 48) + 4 * *(int *)(v4 + 4 * a2)) = a2;
  return result;
}

uint64_t sub_100095498(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  *(_DWORD *)(v1 + 4 * *(int *)(result + 16)) = -1;
  int v2 = *(_DWORD *)(result + 20);
  uint64_t v3 = *(int *)(result + 16);
  if ((int)v3 <= v2)
  {
    uint64_t v4 = (int *)(v1 + 4 * v3);
    int v5 = v3 - 1;
    do
    {
      int v6 = *v4++;
      if (v6 != -1) {
        break;
      }
      *(_DWORD *)(result + 16) = v5 + 2;
      ++v5;
    }
    while (v2 != v5);
  }
  return result;
}

BOOL sub_1000954E8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

double sub_1000954F8(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if ((int)v1 <= *(_DWORD *)(a1 + 20))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    do
      *(_DWORD *)(v2 + 4 * v1) = -1;
    while (v1++ < *(int *)(a1 + 20));
  }
  double result = NAN;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

void sub_100095534()
{
}

void sub_100095598(uint64_t **a1)
{
  if (*(unsigned char *)a1[1])
  {
    (*a1)[1] = **a1;
    uint64_t v3 = a1 + 2;
    uint64_t v2 = a1[2];
    uint64_t v4 = v2[1];
    if (v4 == *v2)
    {
      unint64_t v18 = (v4 - *v2) >> 2;
      if (v18)
      {
LABEL_22:
        uint64_t v19 = 0;
        uint64_t v20 = **a1;
        uint64_t v21 = (int *)(v4 + 4 * v18 - 4);
        do
        {
          uint64_t v22 = *v21--;
          *(_DWORD *)(v20 + 4 * v22) = v19++;
        }
        while (v18 != v19);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v5 = 0;
      do
      {
        int v6 = (char **)*a1;
        char v7 = (char *)(*a1)[1];
        unint64_t v8 = (*a1)[2];
        if ((unint64_t)v7 >= v8)
        {
          int v10 = *v6;
          uint64_t v11 = (v7 - *v6) >> 2;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 62) {
            sub_100019424();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 1 > v12) {
            unint64_t v12 = v13 >> 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)sub_10002EE10((uint64_t)(*a1 + 2), v14);
            int v10 = *v6;
            char v7 = v6[1];
          }
          else
          {
            uint64_t v15 = 0;
          }
          __n128 v16 = &v15[4 * v11];
          *(_DWORD *)__n128 v16 = -1;
          uint64_t v9 = v16 + 4;
          while (v7 != v10)
          {
            int v17 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v16 - 1) = v17;
            v16 -= 4;
          }
          void *v6 = v16;
          v6[1] = v9;
          _DWORD v6[2] = &v15[4 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(_DWORD *)char v7 = -1;
          uint64_t v9 = v7 + 4;
        }
        v6[1] = v9;
        ++v5;
        uint64_t v2 = *v3;
        uint64_t v4 = **v3;
        unint64_t v18 = ((*v3)[1] - v4) >> 2;
      }
      while (v18 > v5);
      if (v18) {
        goto LABEL_22;
      }
    }
    *uint64_t v3 = 0;
    goto LABEL_31;
  }
  uint64_t v2 = a1[2];
LABEL_26:
  a1[2] = 0;
  uint64_t v23 = a1 + 2;
  if (!v2) {
    return;
  }
  uint64_t v3 = v23;
LABEL_31:
  sub_10002E360((uint64_t)v3, (uint64_t)v2);
}

void sub_100095754(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(_DWORD **)(v3 + 8);
  unint64_t v5 = *(void *)(v3 + 16);
  if ((unint64_t)v4 >= v5)
  {
    char v7 = *(_DWORD **)v3;
    uint64_t v8 = ((uint64_t)v4 - *(void *)v3) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      sub_100019424();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      unint64_t v12 = (char *)sub_10002EE10(v3 + 16, v11);
      char v7 = *(_DWORD **)v3;
      uint64_t v4 = *(_DWORD **)(v3 + 8);
    }
    else
    {
      unint64_t v12 = 0;
    }
    uint64_t v13 = &v12[4 * v8];
    unint64_t v14 = &v12[4 * v11];
    *(_DWORD *)uint64_t v13 = a2;
    int v6 = v13 + 4;
    while (v4 != v7)
    {
      int v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + 8) = v6;
    *(void *)(v3 + 16) = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    _DWORD *v4 = a2;
    int v6 = v4 + 1;
  }
  *(void *)(v3 + 8) = v6;
}

void sub_100095834(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  char v7 = v8;
  unint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      int v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      sub_100019424();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      int v15 = (char *)sub_10002EE10(v6, v14);
    }
    else {
      int v15 = 0;
    }
    unint64_t v18 = &v15[4 * v12];
    uint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_DWORD *)uint64_t v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = &v15[4 * v14];
    uint64_t v23 = (char *)*a1;
    for (unint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *sub_100095958(void *a1)
{
  *a1 = off_1000F30F0;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_1000959B8(void *a1)
{
  *a1 = off_1000F3158;
  sub_100095B5C(a1 + 2);
  return a1;
}

void sub_1000959FC(void *a1)
{
  *a1 = off_1000F3158;
  sub_100095B5C(a1 + 2);
  operator delete();
}

uint64_t sub_100095A60(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 24) + ((*(void *)(a1 + 48) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * (*(void *)(a1 + 48) & 0x3FFLL));
}

void sub_100095A80(uint64_t a1, int a2)
{
  int v2 = a2;
  sub_100095C04(a1 + 16, &v2);
}

uint64_t sub_100095AAC(int64x2_t *a1)
{
  a1[3] = vaddq_s64(a1[3], (int64x2_t)xmmword_1000CB760);
  return sub_100095F98((uint64_t)a1[1].i64, 1);
}

BOOL sub_100095AD4(uint64_t a1)
{
  return *(void *)(a1 + 56) == 0;
}

void sub_100095AE4(void *a1)
{
  int v2 = (void **)a1[3];
  uint64_t v3 = a1[4];
  a1[7] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[4];
      int v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 1024;
  }
  a1[6] = v6;
}

uint64_t sub_100095B5C(void *a1)
{
  int v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      int v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    char v7 = *v2++;
    operator delete(v7);
  }
  return sub_100027128((uint64_t)a1);
}

void sub_100095C04(uint64_t a1, _DWORD *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_100095C84((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 >> 10));
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + 4 * (v4 & 0x3FF);
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  *(_DWORD *)(v7 - 4) = *a2;
  uint64_t v8 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 - 1;
  *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = v8;
}

void sub_100095C84(void **a1)
{
  int v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = ((v3 - v2) << 7) - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x400)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    unint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      long long v46 = a1 + 3;
      std::string __p = sub_10001943C(v7, v11);
      long long v43 = (char *)__p;
      long long v44 = (char *)__p;
      long long v45 = (char *)__p + 8 * v12;
      char v41 = operator new(0x1000uLL);
      sub_100026A08(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      unint64_t v14 = v44;
      if (v13 == a1[2])
      {
        int v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_10001943C((uint64_t)v46, v23);
              uint64_t v26 = v43;
              unint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                unint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                long long v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)long long v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              unint64_t v31 = __p;
              std::string __p = v24;
              long long v43 = &v24[8 * (v23 >> 2)];
              long long v44 = v14;
              long long v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                unint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                unint64_t v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              unint64_t v14 = &v20[v21];
              long long v43 = v22;
              long long v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)unint64_t v14 = v32;
          unint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        int v33 = (char *)a1[1];
      }
      float v36 = *a1;
      char v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      long long v43 = v33;
      long long v38 = (char *)a1[3];
      unint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      long long v44 = v13;
      long long v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 512;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 1024;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        long long v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0x1000uLL);
        sub_1000267D0(a1, &__p);
        unsigned int v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0x1000uLL);
      }
      sub_1000268E8((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 512;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 1024;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 1024;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1000268E8((uint64_t)a1, &__p);
  }
}

void sub_100095F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100095F98(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

void *sub_100095FF8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100031054(a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_100096054(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100096070(uint64_t a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a3;
  if (*a2 == *a3) {
    return 0;
  }
  if (v3 == -INFINITY || v4 >= -INFINITY && v4 <= -INFINITY)
  {
    float v4 = *(float *)sub_10006ECE4();
    float v3 = *a2;
  }
  else if (v3 < v4)
  {
    float v4 = *a2;
  }
  return v4 == v3;
}

uint64_t sub_100096124(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = off_1000F30F0;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  sub_1000A9798((void *)(a1 + 24), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  sub_100030FD0((void *)(a1 + 48), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2, &dword_1000CE3A4);
  return a1;
}

void sub_1000961C4(_Unwind_Exception *exception_object)
{
  float v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000961E0(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      sub_100019424();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_10001943C(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v13;
    int64_t v15 = &v13[8 * v10];
    BOOL v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    uint64_t v16 = &v15[8 * a2];
    sub_1000962E4(a1, &v14);
    sub_100096494(&v14);
  }
}

void sub_1000962D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100096494((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000962E4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10009635C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10009635C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1000963F4((uint64_t)v13);
  return v11;
}

uint64_t sub_1000963F4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10009642C((void *)a1);
  }
  return a1;
}

void *sub_10009642C(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  unint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_100096494(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_1000964CC(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      _DWORD v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void sub_100096544(void *a1)
{
  sub_1000965D8(a1);
  operator delete();
}

uint64_t sub_10009657C(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t sub_100096588(uint64_t a1, int a2)
{
  int v3 = a2;
  return sub_100096658(a1 + 16, &v3);
}

uint64_t sub_1000965B4(uint64_t a1)
{
  return sub_1000969C8(a1 + 16);
}

BOOL sub_1000965C0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t sub_1000965D0(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

void *sub_1000965D8(void *a1)
{
  *a1 = off_1000F31C0;
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_100096658(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 64;
  uint64_t v4 = *(int **)(a1 + 64);
  unint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = *(int **)(v5 + 8);
  unint64_t v8 = v7 - v4;
  if (v8 > v6)
  {
    v4[v6] = *a2;
    *(_DWORD *)(*(void *)(a1 + 16) + 4 * *(int *)(*(void *)(a1 + 40) + 4 * *(int *)(a1 + 88))) = *(_DWORD *)(a1 + 88);
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 80);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62) {
      sub_100019424();
    }
    unint64_t v11 = v9 - (void)v4;
    unint64_t v12 = (uint64_t)(v9 - (void)v4) >> 1;
    if (v12 <= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      char v14 = (char *)sub_10002EE10(a1 + 80, v13);
      uint64_t v4 = *(int **)(a1 + 64);
      uint64_t v7 = *(int **)(a1 + 72);
    }
    else
    {
      char v14 = 0;
    }
    long long v15 = (int *)&v14[4 * v8];
    long long v16 = &v14[4 * v13];
    *long long v15 = *a2;
    uint64_t v10 = v15 + 1;
    while (v7 != v4)
    {
      int v17 = *--v7;
      *--long long v15 = v17;
    }
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = v16;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t v10 = v7 + 1;
  }
  unint64_t v18 = *(void *)(a1 + 32);
  *(void *)(a1 + 72) = v10;
  uint64_t v19 = *(char **)(a1 + 24);
  if ((unint64_t)v19 >= v18)
  {
    int64_t v21 = *(char **)(a1 + 16);
    uint64_t v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_55;
    }
    unint64_t v23 = v18 - (void)v21;
    unint64_t v24 = (uint64_t)(v18 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      uint64_t v26 = (char *)sub_10002EE10(a1 + 32, v25);
      int64_t v21 = *(char **)(a1 + 16);
      uint64_t v19 = *(char **)(a1 + 24);
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v27 = &v26[4 * v22];
    uint64_t v28 = &v26[4 * v25];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)(a1 + 88);
    uint64_t v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v20;
    *(void *)(a1 + 32) = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v19 = *(_DWORD *)(a1 + 88);
    uint64_t v20 = v19 + 4;
  }
  unint64_t v30 = *(void *)(a1 + 56);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v20;
  unint64_t v31 = *(char **)(a1 + 48);
  if ((unint64_t)v31 >= v30)
  {
    int v33 = *(char **)(a1 + 40);
    uint64_t v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      unint64_t v35 = v30 - (void)v33;
      unint64_t v36 = (uint64_t)(v30 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        long long v38 = (char *)sub_10002EE10(a1 + 56, v37);
        int v33 = *(char **)(a1 + 40);
        unint64_t v31 = *(char **)(a1 + 48);
      }
      else
      {
        long long v38 = 0;
      }
      unint64_t v39 = &v38[4 * v34];
      uint64_t v40 = &v38[4 * v37];
      *(_DWORD *)unint64_t v39 = *(_DWORD *)(a1 + 88);
      uint64_t v32 = v39 + 4;
      while (v31 != v33)
      {
        int v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = v39;
      *(void *)(a1 + 48) = v32;
      *(void *)(a1 + 56) = v40;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_51;
    }
LABEL_55:
    sub_100019424();
  }
  *(_DWORD *)unint64_t v31 = *(_DWORD *)(a1 + 88);
  uint64_t v32 = v31 + 4;
LABEL_51:
  *(void *)(a1 + 48) = v32;
LABEL_52:
  int v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v42 + 1;
  return sub_10009690C(a1, a2, v42);
}

uint64_t sub_10009690C(uint64_t a1, int *a2, int a3)
{
  unsigned int v3 = a3;
  if (a3 >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    while (1)
    {
      unsigned int v7 = v3 - 1;
      uint64_t v8 = (v3 - 1) >> 1;
      if (sub_100096070(*(void *)(a1 + 8), (float *)(**(void **)a1 + 4 * *(int *)(v6 + 4 * v8)), (float *)(**(void **)a1 + 4 * *a2)))
      {
        break;
      }
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(int *)(v9 + 4 * v3);
      uint64_t v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      uint64_t v12 = *(void *)(a1 + 16);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v1sub_10002B9D0((void **)&STACK[0x2A8], 0) = v8;
      uint64_t v6 = *(void *)(a1 + 64);
      LODWORD(v1sub_10002B9D0((void **)&STACK[0x2A8], 0) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      unsigned int v3 = v7 >> 1;
      if (v7 <= 1) {
        return *(unsigned int *)(*(void *)(a1 + 40) + 4 * (int)v8);
      }
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(void *)(a1 + 40) + 4 * (int)v8);
}

uint64_t sub_1000969C8(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 64);
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(a1 + 88) - 1;
  uint64_t v4 = *(int **)(a1 + 40);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[v3];
  int *v4 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *uint64_t v1 = v1[v3];
  v1[v3] = v4;
  --*(_DWORD *)(a1 + 88);
  sub_100096A3C(a1, 0);
  return v2;
}

BOOL sub_100096A3C(BOOL result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    uint64_t v4 = (2 * a2) | 1u;
    if ((int)v4 >= *(_DWORD *)(v3 + 88)
      || !(uint64_t result = sub_100096070(*(void *)(v3 + 8), (float *)(**(void **)v3 + 4 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v4)), (float *)(**(void **)v3 + 4 * *(int *)(*(void *)(v3 + 64) + 4 * (int)a2)))))
    {
      uint64_t v4 = a2;
    }
    unsigned int v5 = 2 * a2 + 2;
    if ((signed int)v5 < *(_DWORD *)(v3 + 88))
    {
      uint64_t result = sub_100096070(*(void *)(v3 + 8), (float *)(**(void **)v3 + 4 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v5)), (float *)(**(void **)v3 + 4 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v4)));
      if (result) {
        uint64_t v4 = v5;
      }
      else {
        uint64_t v4 = v4;
      }
    }
    if (v4 == a2) {
      break;
    }
    uint64_t v6 = *(void *)(v3 + 40);
    uint64_t v7 = *(int *)(v6 + 4 * (int)a2);
    uint64_t v8 = *(int *)(v6 + 4 * (int)v4);
    *(_DWORD *)(v6 + 4 * (int)a2) = v8;
    uint64_t v9 = *(void *)(v3 + 16);
    *(_DWORD *)(v9 + 4 * v8) = a2;
    *(_DWORD *)(v6 + 4 * (int)v4) = v7;
    *(_DWORD *)(v9 + 4 * v7) = v4;
    uint64_t v10 = *(void *)(v3 + 64);
    LODWORD(v7) = *(_DWORD *)(v10 + 4 * (int)a2);
    *(_DWORD *)(v10 + 4 * (int)a2) = *(_DWORD *)(v10 + 4 * (int)v4);
    *(_DWORD *)(v10 + 4 * (int)v4) = v7;
    a2 = v4;
  }
  return result;
}

void *sub_100096B24(void *a1)
{
  *a1 = off_1000F3228;
  sub_100095B5C(a1 + 2);
  return a1;
}

void sub_100096B68(void *a1)
{
  *a1 = off_1000F3228;
  sub_100095B5C(a1 + 2);
  operator delete();
}

uint64_t sub_100096BCC(void *a1)
{
  unint64_t v1 = a1[7] + a1[6] - 1;
  return *(unsigned int *)(*(void *)(a1[3] + ((v1 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v1 & 0x3FF));
}

void sub_100096BF4(uint64_t a1, int a2)
{
  int v2 = a2;
  sub_100095C04(a1 + 16, &v2);
}

uint64_t sub_100096C20(uint64_t a1)
{
  return sub_100096CC8((void *)(a1 + 16), 1);
}

BOOL sub_100096C40(uint64_t a1)
{
  return *(void *)(a1 + 56) == 0;
}

void sub_100096C50(void *a1)
{
  int v2 = (void **)a1[3];
  uint64_t v3 = a1[4];
  a1[7] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[4];
      int v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 1024;
  }
  a1[6] = v6;
}

uint64_t sub_100096CC8(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *sub_100096D38(void *a1)
{
  *a1 = off_1000F3290;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100096D88(void *a1)
{
  *a1 = off_1000F3290;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_100096DF8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 <= *(_DWORD *)(a1 + 36))
  {
    while (1)
    {
      uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 8 * v2);
      if (v4)
      {
        char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
        int v3 = *(_DWORD *)(a1 + 32);
        if (v5) {
          goto LABEL_10;
        }
        unint64_t v6 = v3;
        if (*(void *)(**(void **)(a1 + 16) + 8 * v3)) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v6 = v2;
        int v3 = v2;
      }
      uint64_t v7 = *(void *)(a1 + 40);
      if (v6 < (*(void *)(a1 + 48) - v7) >> 2 && *(_DWORD *)(v7 + 4 * v6) != -1) {
        goto LABEL_11;
      }
LABEL_10:
      int v2 = v3 + 1;
      *(_DWORD *)(a1 + 32) = v3 + 1;
      if (v3++ >= *(_DWORD *)(a1 + 36)) {
        goto LABEL_11;
      }
    }
  }
  int v3 = *(_DWORD *)(a1 + 32);
LABEL_11:
  uint64_t v9 = *(void *)(**(void **)(a1 + 16) + 8 * v3);
  if (!v9) {
    return *(unsigned int *)(*(void *)(a1 + 40) + 4 * v3);
  }
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)v9 + 16);
  return v10();
}

char *sub_100096F14(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 36);
  uint64_t v6 = a2;
  uint64_t v7 = **(void **)(a1 + 24);
  int v8 = *(_DWORD *)(v7 + 4 * a2);
  if (v4 > v5)
  {
    *(_DWORD *)(a1 + 36) = v8;
LABEL_3:
    *(_DWORD *)(a1 + 32) = v8;
    goto LABEL_7;
  }
  if (v8 <= v5)
  {
    if (v8 < v4) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 36) = v8;
  }
LABEL_7:
  unint64_t v9 = *(int *)(v7 + 4 * a2);
  uint64_t v10 = *(void *)(**(void **)(a1 + 16) + 8 * v9);
  if (v10)
  {
    uint64_t v11 = *(uint64_t (**)(void))(*(void *)v10 + 24);
    return (char *)v11();
  }
  else
  {
    uint64_t result = *(char **)(a1 + 40);
    unint64_t v13 = *(char **)(a1 + 48);
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 <= v9)
    {
      long long v15 = (void *)(a1 + 56);
      do
      {
        if ((unint64_t)v13 >= *v15)
        {
          unint64_t v17 = v14 + 1;
          if ((v14 + 1) >> 62) {
            sub_100019424();
          }
          uint64_t v18 = *v15 - (void)result;
          if (v18 >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            uint64_t v20 = (char *)sub_10002EE10(a1 + 56, v19);
            uint64_t result = *(char **)(a1 + 40);
            unint64_t v13 = *(char **)(a1 + 48);
          }
          else
          {
            uint64_t v20 = 0;
          }
          int64_t v21 = &v20[4 * v14];
          *(_DWORD *)int64_t v21 = -1;
          long long v16 = v21 + 4;
          while (v13 != result)
          {
            int v22 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = v21;
          *(void *)(a1 + 48) = v16;
          *(void *)(a1 + 56) = &v20[4 * v19];
          if (result)
          {
            operator delete(result);
            uint64_t result = *(char **)(a1 + 40);
          }
          else
          {
            uint64_t result = v21;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v13 = -1;
          long long v16 = v13 + 4;
        }
        *(void *)(a1 + 48) = v16;
        unint64_t v14 = (v16 - result) >> 2;
        unint64_t v9 = *(int *)(**(void **)(a1 + 24) + 4 * v6);
        unint64_t v13 = v16;
      }
      while (v14 <= v9);
    }
    *(_DWORD *)&result[4 * v9] = a2;
  }
  return result;
}

uint64_t sub_1000970EC(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 32);
  uint64_t result = *(void *)(**(void **)(a1 + 16) + 8 * v2);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  uint64_t v5 = a1 + 40;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v2 < (*(void *)(v5 + 8) - v4) >> 2) {
    *(_DWORD *)(v4 + 4 * v2) = -1;
  }
  return result;
}

uint64_t sub_100097144(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(**(void **)(a1 + 16) + 8 * *(int *)(**(void **)(a1 + 24) + 4 * a2));
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t sub_100097184(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36);
  unint64_t v2 = *(int *)(a1 + 32);
  if ((int)v2 < v1) {
    return 0;
  }
  if ((int)v2 > v1) {
    return 1;
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 8 * v2);
  if (v4) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 48))(*(void *)(**(void **)(a1 + 16) + 8 * v2));
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v2 >= (*(void *)(a1 + 48) - v5) >> 2) {
    return 1;
  }
  return *(_DWORD *)(v5 + 4 * v2) == -1;
}

double sub_100097204(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 32);
  if ((int)v2 <= *(_DWORD *)(a1 + 36))
  {
    do
    {
      uint64_t v3 = *(void *)(**(void **)(a1 + 16) + 8 * v2);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
      }
      else
      {
        uint64_t v4 = *(void *)(a1 + 40);
        if (v2 < (*(void *)(a1 + 48) - v4) >> 2) {
          *(_DWORD *)(v4 + 4 * v2) = -1;
        }
      }
    }
    while ((uint64_t)v2++ < *(int *)(a1 + 36));
  }
  double result = NAN;
  *(void *)(a1 + 32) = 0xFFFFFFFF00000000;
  return result;
}

void sub_1000972A8(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_1000972FC(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_1000972FC(void *result)
{
  int v1 = result;
  unint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    double result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void sub_100097368(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_100019424();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_10002EE10(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_100097410()
{
}

void sub_100097CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  sub_10002E6EC(&a23);
  sub_10002F120(&a27);
  int v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_100097DB8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_1000992B4((char **)a1, a2 - v2);
  }
}

void sub_100097DE8(uint64_t a1, uint64_t a2)
{
}

void sub_1000986D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  sub_10002E6EC(&a23);
  sub_10002F120(&a27);
  int v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

int *sub_100098788(uint64_t *a1, int a2)
{
  int v45 = a2;
  *((_DWORD *)a1 + 78) = *sub_10002D8A8();
  a1[37] = a1[36];
  double result = (int *)sub_1000993D0(a1 + 2, a2);
  if (*((unsigned char *)a1 + 156)) {
    return result;
  }
  sub_10009A500(a1 + 26, &v45);
  uint64_t v5 = a1[31];
  if (!v5) {
    goto LABEL_67;
  }
  uint64_t v6 = a1 + 32;
  do
  {
    uint64_t v7 = v5 - 1;
    uint64_t v8 = *(unsigned int *)(*(void *)(a1[27] + (((unint64_t)(a1[30] + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((a1[30] + v7) & 0x3FF));
    a1[31] = v7;
    sub_100096CC8(a1 + 26, 1);
    while (a1[33] <= (unint64_t)(int)v8)
    {
      LOBYTE(v42) = 0;
      sub_10002ED68((uint64_t)(a1 + 32), &v42);
    }
    uint64_t v9 = *(void *)(*v6 + 8 * ((unint64_t)(int)v8 >> 6));
    if ((v9 & (1 << v8)) != 0) {
      goto LABEL_66;
    }
    *(void *)(*v6 + 8 * ((unint64_t)(int)v8 >> 6)) = v9 | (1 << v8);
    uint64_t v10 = a1[35];
    uint64_t v11 = operator new(0x10uLL);
    *(void *)uint64_t v11 = v10;
    v11[2] = v8;
    a1[35] = (uint64_t)v11;
    uint64_t v12 = *a1;
    long long v42 = 0u;
    long long v43 = 0u;
    unint64_t v44 = 0;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v12 + 120))(v12, v8, &v42);
    while (1)
    {
      if (!(void)v42)
      {
        if (v44 >= (unint64_t)v43) {
          goto LABEL_48;
        }
LABEL_13:
        uint64_t v13 = *((void *)&v42 + 1) + 16 * v44;
        goto LABEL_14;
      }
      if ((*(unsigned int (**)(void))(*(void *)v42 + 16))(v42)) {
        break;
      }
      if (!(void)v42) {
        goto LABEL_13;
      }
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v42 + 24))();
LABEL_14:
      unint64_t v14 = *(void *)v13;
      unint64_t v39 = *(void *)v13;
      float v15 = *(float *)(v13 + 8);
      float v40 = v15;
      int v41 = *(_DWORD *)(v13 + 12);
      float v16 = *(float *)(*(void *)a1[1] + 4 * (int)v8);
      if (v16 == -INFINITY || v15 >= -INFINITY && v15 <= -INFINITY)
      {
        float v17 = *(float *)sub_10006ECE4();
        LODWORD(v14) = v39;
        LODWORD(v18) = HIDWORD(v39);
      }
      else
      {
        unint64_t v18 = HIDWORD(v14);
        BOOL v19 = v16 == INFINITY || v15 == INFINITY;
        float v17 = v15 + v16;
        if (v19) {
          float v17 = INFINITY;
        }
      }
      float v40 = v17;
      if (v14 | v18)
      {
        uint64_t v20 = (a1[37] - a1[36]) >> 4;
        uint64_t v21 = *((unsigned int *)a1 + 79);
        v36[0] = v14;
        v36[1] = v18;
        v36[2] = v41;
        uint64_t v37 = v21;
        uint64_t v38 = v20;
        int v22 = sub_10009A8A0((uint64_t)(a1 + 20), v36, (uint64_t)v36);
        if (v23)
        {
          unint64_t v24 = a1[37];
          if (v24 < a1[38]) {
            goto LABEL_37;
          }
          goto LABEL_28;
        }
        int v26 = *((_DWORD *)a1 + 79);
        if (*((_DWORD *)v22 + 8) != v26)
        {
          *((_DWORD *)v22 + 8) = v26;
          unint64_t v24 = a1[37];
          v22[5] = (uint64_t)(v24 - a1[36]) >> 4;
          if (v24 < a1[38])
          {
LABEL_37:
            *(void *)unint64_t v24 = v39;
            *(float *)(v24 + 8) = v40;
            *(_DWORD *)(v24 + 12) = v41;
            uint64_t v25 = v24 + 16;
            goto LABEL_38;
          }
LABEL_28:
          uint64_t v25 = sub_10003092C(a1 + 36, (uint64_t)&v39);
LABEL_38:
          a1[37] = v25;
          goto LABEL_39;
        }
        uint64_t v27 = a1[36] + 16 * v22[5];
        float v29 = *(float *)(v27 + 8);
        uint64_t v28 = (float *)(v27 + 8);
        float v30 = v29;
        if (v29 == -INFINITY || v40 >= -INFINITY && v40 <= -INFINITY)
        {
          float v30 = *(float *)sub_10006ECE4();
        }
        else if (v30 >= v40)
        {
          float v30 = v40;
        }
        *uint64_t v28 = v30;
      }
      else
      {
        while (a1[33] <= (unint64_t)v41)
        {
          LOBYTE(v36[0]) = 0;
          sub_10002ED68((uint64_t)(a1 + 32), v36);
        }
        if (((*(void *)(*v6 + (((unint64_t)v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v41) & 1) == 0) {
          sub_10009A500(a1 + 26, &v41);
        }
      }
LABEL_39:
      if ((void)v42) {
        (*(void (**)(void))(*(void *)v42 + 32))(v42);
      }
      else {
        ++v44;
      }
    }
    if ((void)v42)
    {
      (*(void (**)(void))(*(void *)v42 + 8))();
      goto LABEL_50;
    }
LABEL_48:
    if (*((void *)&v43 + 1)) {
      --**((_DWORD **)&v43 + 1);
    }
LABEL_50:
    uint64_t v31 = *(void *)a1[1];
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 24))(&v42);
    float v32 = *(float *)(v31 + 4 * (int)v8);
    if (v32 == -INFINITY || *(float *)&v42 >= -INFINITY && *(float *)&v42 <= -INFINITY)
    {
      float v33 = *(float *)sub_10006ECE4();
    }
    else
    {
      BOOL v34 = *(float *)&v42 == INFINITY || v32 == INFINITY;
      float v33 = v32 + *(float *)&v42;
      if (v34) {
        float v33 = INFINITY;
      }
    }
    float v35 = *((float *)a1 + 78);
    if (v35 == -INFINITY || v33 >= -INFINITY && v33 <= -INFINITY)
    {
      float v33 = *(float *)sub_10006ECE4();
    }
    else if (v35 < v33)
    {
      float v33 = *((float *)a1 + 78);
    }
    *((float *)a1 + 78) = v33;
LABEL_66:
    uint64_t v5 = a1[31];
  }
  while (v5);
LABEL_67:
  for (double result = (int *)a1[35]; result; double result = (int *)a1[35])
  {
    *(void *)(a1[32] + (((unint64_t)result[2] >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << result[2]);
    a1[35] = *(void *)result;
    operator delete(result);
  }
  ++*((_DWORD *)a1 + 79);
  return result;
}

void sub_100098CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20)
{
  if (a17)
  {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  else if (a20)
  {
    --*a20;
  }
  _Unwind_Resume(exception_object);
}

void *sub_100098D50(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10002EF08(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_1000857D0(&v13, a2);
        }
        else {
          sub_100085884((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_100098E24(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_100098E8C(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_100098F14(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100098F9C(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100098F9C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_10001943C(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1000267D0(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1000268E8((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_10001943C((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_10001943C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  sub_100026A08(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100026B20((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100099268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000992B4(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_100019424();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      BOOL v14 = (char *)sub_10002EE10(v4, v13);
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      BOOL v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    uint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_1000993D0(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))(*a1) == -1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 56))(*a1, 4, 0);
    if (!result) {
      return result;
    }
    uint64_t v181 = (char *)a1 + 140;
    goto LABEL_270;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = a1[8];
    a1[12] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))();
  }
  unint64_t v4 = a2;
  uint64_t v5 = a1[1];
  uint64_t v6 = (int **)(v5 + 8);
  if (a2 >= (unint64_t)((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2))
  {
    uint64_t v185 = (void **)(a1 + 5);
    uint64_t v7 = (void **)(a1 + 8);
    do
    {
      unint64_t v8 = sub_10002D8A8();
      uint64_t v9 = v8;
      unint64_t v10 = *(void *)(v5 + 16);
      uint64_t v11 = *(int **)(v5 + 8);
      if ((unint64_t)v11 >= v10)
      {
        unint64_t v13 = *(int **)v5;
        uint64_t v14 = ((uint64_t)v11 - *(void *)v5) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          int v18 = (char *)sub_10002EE10(v5 + 16, v17);
          uint64_t v11 = *v6;
          unint64_t v13 = *(int **)v5;
        }
        else
        {
          int v18 = 0;
        }
        BOOL v19 = (int *)&v18[4 * v14];
        int *v19 = *v9;
        uint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          int v20 = *--v11;
          *--BOOL v19 = v20;
        }
        *(void *)uint64_t v5 = v19;
        char *v6 = v12;
        *(void *)(v5 + 16) = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *uint64_t v11 = *v8;
        uint64_t v12 = v11 + 1;
      }
      char *v6 = v12;
      int v21 = *sub_10002D8A8();
      uint64_t v23 = (int *)a1[6];
      unint64_t v22 = a1[7];
      if ((unint64_t)v23 >= v22)
      {
        unint64_t v25 = (int *)*v185;
        uint64_t v26 = ((char *)v23 - (unsigned char *)*v185) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
LABEL_276:
        }
          sub_100019424();
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          long long v30 = (char *)sub_10002EE10((uint64_t)(a1 + 7), v29);
          unint64_t v25 = (int *)a1[5];
          uint64_t v23 = (int *)a1[6];
        }
        else
        {
          long long v30 = 0;
        }
        long long v31 = (int *)&v30[4 * v26];
        *long long v31 = v21;
        uint64_t v24 = v31 + 1;
        while (v23 != v25)
        {
          int v32 = *--v23;
          *--long long v31 = v32;
        }
        a1[5] = v31;
        a1[6] = v24;
        a1[7] = &v30[4 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *uint64_t v23 = v21;
        uint64_t v24 = v23 + 1;
      }
      a1[6] = v24;
      int v33 = *sub_10002D8A8();
      float v35 = (int *)a1[9];
      unint64_t v34 = a1[10];
      if ((unint64_t)v35 >= v34)
      {
        uint64_t v37 = (int *)*v7;
        uint64_t v38 = ((char *)v35 - (unsigned char *)*v7) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v40 = v34 - (void)v37;
        if (v40 >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          uint64_t v42 = (char *)sub_10002EE10((uint64_t)(a1 + 10), v41);
          uint64_t v37 = (int *)a1[8];
          float v35 = (int *)a1[9];
        }
        else
        {
          uint64_t v42 = 0;
        }
        long long v43 = (int *)&v42[4 * v38];
        *long long v43 = v33;
        uint64_t v36 = v43 + 1;
        while (v35 != v37)
        {
          int v44 = *--v35;
          *--long long v43 = v44;
        }
        a1[8] = v43;
        a1[9] = v36;
        a1[10] = &v42[4 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *float v35 = v33;
        uint64_t v36 = v35 + 1;
      }
      a1[9] = v36;
      LOBYTE(v187) = 0;
      sub_10002ED68((uint64_t)(a1 + 11), &v187);
      uint64_t v5 = a1[1];
      uint64_t v6 = (int **)(v5 + 8);
    }
    while (v4 >= (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
  }
  if (*((unsigned char *)a1 + 33))
  {
    uint64_t v45 = (char *)a1[14];
    unint64_t v46 = (char *)a1[15];
    unint64_t v47 = (v46 - v45) >> 2;
    if (v47 <= v4)
    {
      int v48 = a1 + 16;
      do
      {
        if ((unint64_t)v46 >= *v48)
        {
          unint64_t v50 = v47 + 1;
          if ((v47 + 1) >> 62) {
            sub_100019424();
          }
          uint64_t v51 = *v48 - (void)v45;
          if (v51 >> 1 > v50) {
            unint64_t v50 = v51 >> 1;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52)
          {
            long long v53 = (char *)sub_10002EE10((uint64_t)(a1 + 16), v52);
            uint64_t v45 = (char *)a1[14];
            unint64_t v46 = (char *)a1[15];
          }
          else
          {
            long long v53 = 0;
          }
          long long v54 = &v53[4 * v47];
          *(_DWORD *)long long v54 = -1;
          uint64_t v49 = v54 + 4;
          while (v46 != v45)
          {
            int v55 = *((_DWORD *)v46 - 1);
            v46 -= 4;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          a1[14] = v54;
          a1[15] = v49;
          a1[16] = &v53[4 * v52];
          if (v45)
          {
            operator delete(v45);
            uint64_t v45 = (char *)a1[14];
          }
          else
          {
            uint64_t v45 = v54;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v46 = -1;
          uint64_t v49 = v46 + 4;
        }
        a1[15] = v49;
        unint64_t v47 = (v49 - v45) >> 2;
        unint64_t v46 = v49;
      }
      while (v47 <= v4);
    }
    *(_DWORD *)&v45[4 * v4] = *((_DWORD *)a1 + 34);
  }
  *(_DWORD *)(*(void *)a1[1] + 4 * v4) = *sub_10002D854();
  uint64_t v56 = a1[5];
  uint64_t v184 = (void **)(a1 + 5);
  *(_DWORD *)(v56 + 4 * v4) = *sub_10002D854();
  uint64_t v57 = a1[8];
  v186 = (void **)(a1 + 8);
  *(_DWORD *)(v57 + 4 * v4) = *sub_10002D854();
  *(void *)(a1[11] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v4);
  uint64_t v182 = (uint64_t)(a1 + 10);
  uint64_t v183 = (uint64_t)(a1 + 7);
  uint64_t v58 = a1 + 16;
  uint64_t v181 = (char *)a1 + 140;
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_266;
    }
    int v60 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    unint64_t v61 = v60;
    while (1)
    {
      uint64_t v62 = (int **)a1[1];
      char v63 = v62 + 1;
      if (v61 < v62[1] - *v62) {
        break;
      }
      BOOL v64 = sub_10002D8A8();
      uint64_t v65 = v64;
      unint64_t v66 = (unint64_t)v62[2];
      BOOL v67 = v62[1];
      if ((unint64_t)v67 >= v66)
      {
        uint64_t v69 = *v62;
        uint64_t v70 = v67 - *v62;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v72 = v66 - (void)v69;
        if (v72 >> 1 > v71) {
          unint64_t v71 = v72 >> 1;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        if (v73)
        {
          BOOL v74 = (char *)sub_10002EE10((uint64_t)(v62 + 2), v73);
          BOOL v67 = *v63;
          uint64_t v69 = *v62;
        }
        else
        {
          BOOL v74 = 0;
        }
        unint64_t v75 = (int *)&v74[4 * v70];
        int *v75 = *v65;
        uint64_t v68 = v75 + 1;
        while (v67 != v69)
        {
          int v76 = *--v67;
          *--unint64_t v75 = v76;
        }
        void *v62 = v75;
        char *v63 = v68;
        v62[2] = (int *)&v74[4 * v73];
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        int *v67 = *v64;
        uint64_t v68 = v67 + 1;
      }
      char *v63 = v68;
      int v77 = *sub_10002D8A8();
      uint64_t v79 = (int *)a1[6];
      unint64_t v78 = a1[7];
      if ((unint64_t)v79 >= v78)
      {
        BOOL v81 = (int *)*v184;
        uint64_t v82 = ((char *)v79 - (unsigned char *)*v184) >> 2;
        unint64_t v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v84 = v78 - (void)v81;
        if (v84 >> 1 > v83) {
          unint64_t v83 = v84 >> 1;
        }
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v85 = v83;
        }
        if (v85)
        {
          NSString v86 = (char *)sub_10002EE10(v183, v85);
          BOOL v81 = (int *)a1[5];
          uint64_t v79 = (int *)a1[6];
        }
        else
        {
          NSString v86 = 0;
        }
        NSString v87 = (int *)&v86[4 * v82];
        *NSString v87 = v77;
        char v80 = v87 + 1;
        while (v79 != v81)
        {
          int v88 = *--v79;
          *--NSString v87 = v88;
        }
        a1[5] = v87;
        a1[6] = v80;
        a1[7] = &v86[4 * v85];
        if (v81) {
          operator delete(v81);
        }
      }
      else
      {
        *uint64_t v79 = v77;
        char v80 = v79 + 1;
      }
      a1[6] = v80;
      int v89 = *sub_10002D8A8();
      uint64_t v91 = (int *)a1[9];
      unint64_t v90 = a1[10];
      if ((unint64_t)v91 >= v90)
      {
        uint64_t v93 = (int *)*v186;
        uint64_t v94 = ((char *)v91 - (unsigned char *)*v186) >> 2;
        unint64_t v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62) {
          goto LABEL_276;
        }
        uint64_t v96 = v90 - (void)v93;
        if (v96 >> 1 > v95) {
          unint64_t v95 = v96 >> 1;
        }
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v95;
        }
        if (v97)
        {
          uint64_t v98 = (char *)sub_10002EE10(v182, v97);
          uint64_t v93 = (int *)a1[8];
          uint64_t v91 = (int *)a1[9];
        }
        else
        {
          uint64_t v98 = 0;
        }
        long long v99 = (int *)&v98[4 * v94];
        *long long v99 = v89;
        uint64_t v92 = v99 + 1;
        while (v91 != v93)
        {
          int v100 = *--v91;
          *--long long v99 = v100;
        }
        a1[8] = v99;
        a1[9] = v92;
        a1[10] = &v98[4 * v97];
        if (v93) {
          operator delete(v93);
        }
      }
      else
      {
        *uint64_t v91 = v89;
        uint64_t v92 = v91 + 1;
      }
      a1[9] = v92;
      LOBYTE(v187) = 0;
      sub_10002ED68((uint64_t)(a1 + 11), &v187);
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v190);
      uint64_t v101 = sub_10002D8A8();
      LODWORD(v187) = v190;
      HIDWORD(v19sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
      HIDWORD(v19sub_10002B9D0((void **)&STACK[0x2A8], 0) = *v101;
      v59.n128_u32[0] = v190;
      if (*(float *)&v190 != *((float *)&v190 + 1))
      {
LABEL_266:
        ++*((_DWORD *)a1 + 34);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, void, __n128))(*(void *)*a1 + 56))(*a1, 4, 0, v59);
        if (!result) {
          return result;
        }
LABEL_270:
        *uint64_t v181 = 1;
        return result;
      }
    }
    *(void *)(a1[11] + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v61);
    uint64_t v102 = a1[8];
    float v103 = *(float *)(v102 + 4 * v61);
    *(_DWORD *)(v102 + 4 * v61) = *sub_10002D8A8();
    uint64_t v104 = *a1;
    long long v187 = 0u;
    long long v188 = 0u;
    unint64_t v189 = 0;
    (*(void (**)(uint64_t, unint64_t, long long *))(*(void *)v104 + 120))(v104, v61, &v187);
    while (1)
    {
      if (!(void)v187)
      {
        if (v189 >= (unint64_t)v188)
        {
LABEL_258:
          char v179 = 1;
          goto LABEL_259;
        }
LABEL_140:
        uint64_t v105 = *((void *)&v187 + 1) + 16 * v189;
        goto LABEL_141;
      }
      if ((*(uint64_t (**)(void))(*(void *)v187 + 16))(v187)) {
        goto LABEL_258;
      }
      if (!(void)v187) {
        goto LABEL_140;
      }
      uint64_t v105 = (*(uint64_t (**)(void))(*(void *)v187 + 24))(v187);
LABEL_141:
      if (!*(void *)v105)
      {
        uint64_t v106 = a1[1];
        uint64_t v107 = (int **)(v106 + 8);
        for (unint64_t i = *(int *)(v105 + 12); i >= (uint64_t)(*(void *)(v106 + 8) - *(void *)v106) >> 2; unint64_t i = *(int *)(v105 + 12))
        {
          uint64_t v109 = sub_10002D8A8();
          int v110 = v109;
          uint64_t v111 = *v107;
          unint64_t v112 = *(void *)(v106 + 16);
          if ((unint64_t)*v107 >= v112)
          {
            uint64_t v114 = *(int **)v106;
            uint64_t v115 = ((uint64_t)v111 - *(void *)v106) >> 2;
            unint64_t v116 = v115 + 1;
            if ((unint64_t)(v115 + 1) >> 62) {
              sub_100019424();
            }
            uint64_t v117 = v112 - (void)v114;
            if (v117 >> 1 > v116) {
              unint64_t v116 = v117 >> 1;
            }
            if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v118 = v116;
            }
            if (v118)
            {
              NSString v119 = (char *)sub_10002EE10(v106 + 16, v118);
              uint64_t v111 = *v107;
              uint64_t v114 = *(int **)v106;
            }
            else
            {
              NSString v119 = 0;
            }
            id v120 = (int *)&v119[4 * v115];
            *id v120 = *v110;
            int v113 = v120 + 1;
            while (v111 != v114)
            {
              int v121 = *--v111;
              *--id v120 = v121;
            }
            *(void *)uint64_t v106 = v120;
            *uint64_t v107 = v113;
            *(void *)(v106 + 16) = &v119[4 * v118];
            if (v114) {
              operator delete(v114);
            }
          }
          else
          {
            *uint64_t v111 = *v109;
            int v113 = v111 + 1;
          }
          *uint64_t v107 = v113;
          int v122 = *sub_10002D8A8();
          uint64_t v124 = (int *)a1[6];
          unint64_t v123 = a1[7];
          if ((unint64_t)v124 >= v123)
          {
            uint64_t v126 = (int *)*v184;
            uint64_t v127 = ((char *)v124 - (unsigned char *)*v184) >> 2;
            unint64_t v128 = v127 + 1;
            if ((unint64_t)(v127 + 1) >> 62) {
              sub_100019424();
            }
            uint64_t v129 = v123 - (void)v126;
            if (v129 >> 1 > v128) {
              unint64_t v128 = v129 >> 1;
            }
            if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v130 = v128;
            }
            if (v130)
            {
              uint64_t v131 = (char *)sub_10002EE10(v183, v130);
              uint64_t v126 = (int *)a1[5];
              uint64_t v124 = (int *)a1[6];
            }
            else
            {
              uint64_t v131 = 0;
            }
            uint64_t v132 = (int *)&v131[4 * v127];
            *uint64_t v132 = v122;
            uint64_t v125 = v132 + 1;
            while (v124 != v126)
            {
              int v133 = *--v124;
              *--uint64_t v132 = v133;
            }
            a1[5] = v132;
            a1[6] = v125;
            a1[7] = &v131[4 * v130];
            if (v126) {
              operator delete(v126);
            }
          }
          else
          {
            *uint64_t v124 = v122;
            uint64_t v125 = v124 + 1;
          }
          a1[6] = v125;
          int v134 = *sub_10002D8A8();
          id v136 = (int *)a1[9];
          unint64_t v135 = a1[10];
          if ((unint64_t)v136 >= v135)
          {
            uint64_t v138 = (int *)*v186;
            uint64_t v139 = ((char *)v136 - (unsigned char *)*v186) >> 2;
            unint64_t v140 = v139 + 1;
            if ((unint64_t)(v139 + 1) >> 62) {
              sub_100019424();
            }
            uint64_t v141 = v135 - (void)v138;
            if (v141 >> 1 > v140) {
              unint64_t v140 = v141 >> 1;
            }
            if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v142 = v140;
            }
            if (v142)
            {
              uint64_t v143 = (char *)sub_10002EE10(v182, v142);
              uint64_t v138 = (int *)a1[8];
              id v136 = (int *)a1[9];
            }
            else
            {
              uint64_t v143 = 0;
            }
            double v144 = (int *)&v143[4 * v139];
            *double v144 = v134;
            uint64_t v137 = v144 + 1;
            while (v136 != v138)
            {
              int v145 = *--v136;
              *--double v144 = v145;
            }
            a1[8] = v144;
            a1[9] = v137;
            a1[10] = &v143[4 * v142];
            if (v138) {
              operator delete(v138);
            }
          }
          else
          {
            *id v136 = v134;
            uint64_t v137 = v136 + 1;
          }
          a1[9] = v137;
          BYTE4(v19sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
          sub_10002ED68((uint64_t)(a1 + 11), (unsigned char *)&v190 + 4);
          uint64_t v106 = a1[1];
          uint64_t v107 = (int **)(v106 + 8);
        }
        if (*((unsigned char *)a1 + 33))
        {
          int v146 = (char *)a1[14];
          uint64_t v147 = (char *)a1[15];
          unint64_t v148 = (v147 - v146) >> 2;
          if (v148 <= (int)i)
          {
            do
            {
              if ((unint64_t)v147 >= *v58)
              {
                unint64_t v151 = v148 + 1;
                if ((v148 + 1) >> 62) {
                  sub_100019424();
                }
                uint64_t v152 = *v58 - (void)v146;
                if (v152 >> 1 > v151) {
                  unint64_t v151 = v152 >> 1;
                }
                if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v153 = v151;
                }
                if (v153)
                {
                  double v154 = (char *)sub_10002EE10((uint64_t)(a1 + 16), v153);
                  int v146 = (char *)a1[14];
                  uint64_t v147 = (char *)a1[15];
                }
                else
                {
                  double v154 = 0;
                }
                char v155 = &v154[4 * v148];
                *(_DWORD *)char v155 = -1;
                int v150 = v155 + 4;
                while (v147 != v146)
                {
                  int v156 = *((_DWORD *)v147 - 1);
                  v147 -= 4;
                  *((_DWORD *)v155 - 1) = v156;
                  v155 -= 4;
                }
                a1[14] = v155;
                a1[15] = v150;
                a1[16] = &v154[4 * v153];
                if (v146)
                {
                  operator delete(v146);
                  int v146 = (char *)a1[14];
                }
                else
                {
                  int v146 = v155;
                }
              }
              else
              {
                *(_DWORD *)uint64_t v147 = -1;
                int v150 = v147 + 4;
              }
              a1[15] = v150;
              unint64_t v148 = (v150 - v146) >> 2;
              int v157 = *(_DWORD *)(v105 + 12);
              uint64_t v147 = v150;
            }
            while (v148 <= v157);
            uint64_t v149 = v157;
            LODWORD(i) = *(_DWORD *)(v105 + 12);
          }
          else
          {
            uint64_t v149 = (int)i;
          }
          if (*(_DWORD *)&v146[4 * v149] != *((_DWORD *)a1 + 34))
          {
            NSString v158 = sub_10002D8A8();
            uint64_t v159 = *(int *)(v105 + 12);
            *(_DWORD *)(*(void *)a1[1] + 4 * v159) = *v158;
            uint64_t v160 = a1[5];
            *(_DWORD *)(v160 + 4 * v159) = *sub_10002D8A8();
            uint64_t v161 = *(int *)(v105 + 12);
            unint64_t i = (unint64_t)*v186;
            *(_DWORD *)(i + 4 * v161) = *sub_10002D8A8();
            unint64_t v162 = *(int *)(v105 + 12);
            *(void *)(a1[11] + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v162);
            *(_DWORD *)(a1[14] + 4 * v162) = *((_DWORD *)a1 + 34);
            LODWORD(i) = *(_DWORD *)(v105 + 12);
          }
        }
        uint64_t v163 = *(void *)a1[1];
        uint64_t v164 = a1[5];
        uint64_t v165 = a1[8];
        if (v103 == -INFINITY || (float v166 = *(float *)(v105 + 8), v166 >= -INFINITY) && v166 <= -INFINITY)
        {
          float v167 = *(float *)sub_10006ECE4();
        }
        else
        {
          BOOL v168 = v166 == INFINITY || v103 == INFINITY;
          float v169 = v103 + v166;
          float v167 = v168 ? INFINITY : v169;
        }
        float v170 = *(float *)(v163 + 4 * (int)i);
        if (v170 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
        {
          float v171 = *(float *)sub_10006ECE4();
          float v170 = *(float *)(v163 + 4 * (int)i);
        }
        else
        {
          float v171 = v170 >= v167 ? v167 : *(float *)(v163 + 4 * (int)i);
        }
        float v172 = *((float *)a1 + 7);
        float v173 = v171 + v172;
        float v174 = v172 + v170;
        if (v170 > v173 || v171 > v174) {
          break;
        }
      }
LABEL_255:
      if ((void)v187) {
        (*(void (**)(void))(*(void *)v187 + 32))(v187);
      }
      else {
        ++v189;
      }
    }
    float v176 = *(float *)(v164 + 4 * (int)i);
    if (v176 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      float v176 = *(float *)sub_10006ECE4();
    }
    else if (v176 >= v167)
    {
      float v176 = v167;
    }
    *(float *)(v164 + 4 * (int)i) = v176;
    *(float *)(v163 + 4 * (int)i) = v176;
    float v177 = *(float *)(v165 + 4 * (int)i);
    if (v177 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      float v177 = *(float *)sub_10006ECE4();
    }
    else if (v177 >= v167)
    {
      float v177 = v167;
    }
    *(float *)(v165 + 4 * (int)i) = v177;
    if (*(float *)(v163 + 4 * (int)i) != -INFINITY && v177 != -INFINITY)
    {
      uint64_t v178 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v105 + 12)))
      {
        (*(void (**)(void))(v178 + 40))();
      }
      else
      {
        (*(void (**)(void))(v178 + 24))();
        *(void *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v105 + 12);
      }
      goto LABEL_255;
    }
    char v179 = 0;
    *uint64_t v181 = 1;
LABEL_259:
    uint64_t result = v187;
    if ((void)v187)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v187 + 8))(v187);
    }
    else if (*((void *)&v188 + 1))
    {
      --**((_DWORD **)&v188 + 1);
    }
  }
  while ((v179 & 1) != 0);
  return result;
}

void sub_10009A47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18)
{
  if (a15)
  {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  else if (a18)
  {
    --*a18;
  }
  _Unwind_Resume(exception_object);
}

void sub_10009A500(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10009A588(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_10009A588(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_10001943C(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1000267D0(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1000268E8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_10001943C((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_10001943C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  sub_100026A08(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100026B20((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10009A854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_10009A8A0(uint64_t a1, int *a2, uint64_t a3)
{
  int v7 = a2[1];
  uint64_t v6 = a2[2];
  int v8 = *a2;
  unint64_t v9 = v6 + 7853 * *a2 + 7867 * v7;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v3 = v6 + 7853 * v8 + 7867 * v7;
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
    }
    else
    {
      uint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v8 && *(void *)((char *)v13 + 20) == __PAIR64__(v6, v7)) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x30uLL);
  *uint64_t v13 = 0;
  v13[1] = v9;
  _DWORD v13[2] = *(void *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  *((_OWORD *)v13 + 2) = *(_OWORD *)(a3 + 16);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100018F74(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
      else {
        uint64_t v3 = v9;
      }
    }
    else
    {
      uint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t v13 = *v22;
LABEL_39:
    *unint64_t v22 = v13;
    goto LABEL_40;
  }
  *uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_10009AAE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10009AAF8(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (v4 < 1) {
    return;
  }
  unint64_t v5 = v4;
  uint64_t v6 = sub_10002D8A8();
  sub_10009BD90(v100, v5, v6);
  unint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  if (!*(void *)(a2 + 16))
  {
    sub_10009B600(&v97, v5);
    sub_10009B6A8(a1, (uint64_t)&v97, 1);
  }
  int v7 = *(uint64_t **)(a2 + 16);
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t v10 = *v7;
    if ((*(int (**)(uint64_t))(*(void *)a1 + 16))(a1) < (unint64_t)((v9 - v10) >> 2))
    {
      int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      uint64_t v12 = *v7;
      uint64_t v13 = sub_10002D8A8();
      LODWORD(v92[0]) = 0;
      LODWORD(v92[0]) = *(_DWORD *)(v12 + 4 * v11);
      LODWORD(v9sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
      LODWORD(v9sub_10002B9D0((void **)&STACK[0x2A8], 0) = *v13;
      if (*(float *)v92 != *(float *)&v90)
      {
        v92[0] = v100;
        v92[1] = v7;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        memset(v96, 0, 28);
        LOBYTE(v89[0]) = 0;
        sub_100098D50(&v90, v5, (unsigned __int8 *)v89);
        std::string __p = (void *)-1;
        sub_1000A7C5C(v89, v5, &__p);
        std::string __p = 0;
        NSString v87 = 0;
        int v88 = 0;
        int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
        int v15 = v14;
        float v16 = v87;
        if (v87 >= v88)
        {
          unint64_t v18 = (char *)__p;
          uint64_t v19 = (v87 - (unsigned char *)__p) >> 2;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62) {
            sub_100019424();
          }
          uint64_t v21 = v88 - (unsigned char *)__p;
          if ((v88 - (unsigned char *)__p) >> 1 > v20) {
            unint64_t v20 = v21 >> 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            unint64_t v23 = (char *)sub_10002EE10((uint64_t)&v88, v22);
            unint64_t v18 = (char *)__p;
            float v16 = v87;
          }
          else
          {
            unint64_t v23 = 0;
          }
          uint64_t v24 = &v23[4 * v19];
          unint64_t v25 = &v23[4 * v22];
          *(_DWORD *)uint64_t v24 = v15;
          BOOL v17 = v24 + 4;
          while (v16 != v18)
          {
            int v26 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            *((_DWORD *)v24 - 1) = v26;
            v24 -= 4;
          }
          std::string __p = v24;
          NSString v87 = v17;
          int v88 = v25;
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *(_DWORD *)NSString v87 = v14;
          BOOL v17 = v16 + 4;
        }
        NSString v87 = v17;
        unsigned int v84 = 0;
        int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
        unsigned int v84 = v27;
        if (*(unsigned char *)(a2 + 28))
        {
          float v28 = *(float *)a2;
          if (*(float *)a2 == -INFINITY || (float v29 = *(float *)(*v7 + 4 * v27), v29 >= -INFINITY) && v29 <= -INFINITY)
          {
LABEL_37:
            float v30 = *(float *)sub_10006ECE4();
LABEL_43:
            float v83 = v30;
            if (sub_100096070((uint64_t)&v85, &v83, (float *)(*v7 + 4 * (int)v84)))
            {
              int v32 = 0;
            }
            else
            {
              *((_DWORD *)v100[0] + (int)v84) = *sub_10002D854();
              int v33 = sub_10009B970((uint64_t)v92, (int *)&v84);
              *((void *)v89[0] + (int)v84) = v33;
              int v32 = 1;
            }
            while (LODWORD(v96[3]))
            {
              unsigned int v84 = *(_DWORD *)v96[0];
              sub_10009BC24((uint64_t)v92);
              int v34 = v84;
              uint64_t v35 = (int)v84;
              *((void *)v89[0] + (int)v84) = -1;
              *(void *)((char *)v90 + (((unint64_t)v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
              uint64_t v36 = (float *)v100[0];
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v81, a1);
              float v37 = v36[v35];
              if (v37 == -INFINITY || *(float *)&v81 >= -INFINITY && *(float *)&v81 <= -INFINITY)
              {
                float v38 = *(float *)sub_10006ECE4();
              }
              else
              {
                BOOL v39 = *(float *)&v81 == INFINITY || v37 == INFINITY;
                float v38 = v37 + *(float *)&v81;
                if (v39) {
                  float v38 = INFINITY;
                }
              }
              *(float *)&uint64_t v78 = v38;
              if (sub_100096070((uint64_t)&v85, &v83, (float *)&v78))
              {
                uint64_t v40 = v84;
                int v82 = *sub_10002D8A8();
                (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 160))(a1, v40, &v82);
              }
              (*(void (**)(uint64_t, void, uint64_t *))(*(void *)a1 + 272))(a1, v84, &v81);
              while (!(*(unsigned int (**)(uint64_t))(*(void *)v81 + 16))(v81))
              {
                uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v81 + 24))(v81);
                uint64_t v78 = *(void *)v41;
                float v42 = *(float *)(v41 + 8);
                float v79 = v42;
                int v43 = *(_DWORD *)(v41 + 12);
                int v80 = v43;
                float v44 = *((float *)v100[0] + (int)v84);
                if (v44 == -INFINITY || v42 >= -INFINITY && v42 <= -INFINITY)
                {
                  float v45 = *(float *)sub_10006ECE4();
                  int v43 = v80;
                }
                else
                {
                  BOOL v46 = v44 == INFINITY || v42 == INFINITY;
                  float v47 = v42 + v44;
                  if (v46) {
                    float v45 = INFINITY;
                  }
                  else {
                    float v45 = v47;
                  }
                }
                if (v43 >= (unint64_t)((*(void *)(v8 + 8) - *v7) >> 2)) {
                  int v48 = sub_10002D8A8();
                }
                else {
                  int v48 = (int *)(*v7 + 4 * v43);
                }
                if (v45 == -INFINITY || (float v49 = *(float *)v48, *(float *)v48 >= -INFINITY) && *(float *)v48 <= -INFINITY)
                {
                  float v50 = *(float *)sub_10006ECE4();
                }
                else
                {
                  BOOL v51 = v49 == INFINITY || v45 == INFINITY;
                  float v50 = v45 + v49;
                  if (v51) {
                    float v50 = INFINITY;
                  }
                }
                float v77 = v50;
                if (sub_100096070((uint64_t)&v85, &v83, &v77))
                {
                  int v80 = *(_DWORD *)__p;
                  (*(void (**)(uint64_t, uint64_t *))(*(void *)v81 + 80))(v81, &v78);
                }
                else
                {
                  uint64_t v52 = (float *)v100[0];
                  float v53 = *((float *)v100[0] + (int)v84);
                  if (v53 == -INFINITY || v79 >= -INFINITY && v79 <= -INFINITY)
                  {
                    float v54 = *(float *)sub_10006ECE4();
                    uint64_t v52 = (float *)v100[0];
                  }
                  else
                  {
                    BOOL v55 = v79 == INFINITY || v53 == INFINITY;
                    float v54 = v53 + v79;
                    if (v55) {
                      float v54 = INFINITY;
                    }
                  }
                  float v76 = v54;
                  if (sub_100096070((uint64_t)&v85, &v76, &v52[v80]))
                  {
                    uint64_t v56 = (float *)v100[0];
                    float v57 = *((float *)v100[0] + (int)v84);
                    if (v57 == -INFINITY || v79 >= -INFINITY && v79 <= -INFINITY)
                    {
                      float v58 = *(float *)sub_10006ECE4();
                      uint64_t v56 = (float *)v100[0];
                    }
                    else
                    {
                      BOOL v60 = v79 == INFINITY || v57 == INFINITY;
                      float v58 = v57 + v79;
                      if (v60) {
                        float v58 = INFINITY;
                      }
                    }
                    unint64_t v59 = v80;
                    v56[v80] = v58;
                  }
                  else
                  {
                    unint64_t v59 = v80;
                  }
                  if (((*(void *)((char *)v90 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
                  {
                    int v61 = *(_DWORD *)(a2 + 4);
                    if (v61 == -1 || v32 < v61)
                    {
                      uint64_t v62 = *((void *)v89[0] + v59);
                      if (v62 == -1)
                      {
                        int v63 = sub_10009B970((uint64_t)v92, &v80);
                        *((void *)v89[0] + v8sub_10002B9D0((void **)&STACK[0x2A8], 0) = v63;
                        ++v32;
                      }
                      else
                      {
                        sub_10009BC98((uint64_t)v92, v62, &v80);
                      }
                    }
                  }
                }
                (*(void (**)(uint64_t))(*(void *)v81 + 32))(v81);
              }
              if (v81) {
                (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
              }
            }
            unint64_t v64 = v91;
            if (v91)
            {
              unint64_t v65 = 0;
              do
              {
                if (((*(void *)((char *)v90 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
                {
                  unint64_t v66 = v87;
                  if (v87 >= v88)
                  {
                    uint64_t v68 = (char *)__p;
                    uint64_t v69 = (v87 - (unsigned char *)__p) >> 2;
                    unint64_t v70 = v69 + 1;
                    if ((unint64_t)(v69 + 1) >> 62) {
                      sub_100019424();
                    }
                    uint64_t v71 = v88 - (unsigned char *)__p;
                    if ((v88 - (unsigned char *)__p) >> 1 > v70) {
                      unint64_t v70 = v71 >> 1;
                    }
                    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v72 = v70;
                    }
                    if (v72)
                    {
                      unint64_t v73 = (char *)sub_10002EE10((uint64_t)&v88, v72);
                      uint64_t v68 = (char *)__p;
                      unint64_t v66 = v87;
                    }
                    else
                    {
                      unint64_t v73 = 0;
                    }
                    BOOL v74 = &v73[4 * v69];
                    *(_DWORD *)BOOL v74 = v65;
                    BOOL v67 = v74 + 4;
                    while (v66 != v68)
                    {
                      int v75 = *((_DWORD *)v66 - 1);
                      v66 -= 4;
                      *((_DWORD *)v74 - 1) = v75;
                      v74 -= 4;
                    }
                    std::string __p = v74;
                    NSString v87 = v67;
                    int v88 = &v73[4 * v72];
                    if (v68) {
                      operator delete(v68);
                    }
                  }
                  else
                  {
                    *(_DWORD *)NSString v87 = v65;
                    BOOL v67 = v66 + 4;
                  }
                  NSString v87 = v67;
                  unint64_t v64 = v91;
                }
                ++v65;
              }
              while (v64 > v65);
            }
            (*(void (**)(uint64_t, void **))(*(void *)a1 + 192))(a1, &__p);
            if (__p)
            {
              NSString v87 = (char *)__p;
              operator delete(__p);
            }
            if (v89[0])
            {
              v89[1] = v89[0];
              operator delete(v89[0]);
            }
            if (v90) {
              operator delete(v90);
            }
            if (v96[0])
            {
              v96[1] = v96[0];
              operator delete(v96[0]);
            }
            if (*((void *)&v94 + 1))
            {
              *(void *)&long long v95 = *((void *)&v94 + 1);
              operator delete(*((void **)&v94 + 1));
            }
            if ((void)v93)
            {
              *((void *)&v93 + 1) = v93;
              operator delete((void *)v93);
            }
            goto LABEL_8;
          }
        }
        else
        {
          float v28 = *(float *)(*v7 + 4 * v27);
          if (v28 == -INFINITY) {
            goto LABEL_37;
          }
          float v29 = *(float *)a2;
          if (*(float *)a2 >= -INFINITY && *(float *)a2 <= -INFINITY) {
            goto LABEL_37;
          }
        }
        BOOL v31 = v29 == INFINITY || v28 == INFINITY;
        float v30 = v28 + v29;
        if (v31) {
          float v30 = INFINITY;
        }
        goto LABEL_43;
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
LABEL_8:
  if (v97)
  {
    uint64_t v98 = v97;
    operator delete(v97);
  }
  if (v100[0])
  {
    v100[1] = v100[0];
    operator delete(v100[0]);
  }
}

void sub_10009B51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  sub_10009BD3C(&a25);
  int v27 = *(void **)(v25 - 152);
  if (v27)
  {
    *(void *)(v25 - 144) = v27;
    operator delete(v27);
  }
  float v28 = *(void **)(v25 - 128);
  if (v28)
  {
    *(void *)(v25 - 12sub_10002B9D0((void **)&STACK[0x2A8], 0) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

void sub_10009B600(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_100019424();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_10002EE10(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    int v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_10009B6A8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    sub_10009FCB4(&v7);
    sub_10009BF04(a1, &v7, 1);
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_1000A4D30((uint64_t)v8, (uint64_t)&v7);
  }
  sub_10009CE4C((uint64_t)v8, a1);
}

void sub_10009B8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    sub_100018BC0(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009B970(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 72;
  int v4 = *(int **)(a1 + 72);
  unint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = *(int **)(v5 + 8);
  unint64_t v8 = v7 - v4;
  if (v8 > v6)
  {
    v4[v6] = *a2;
    *(_DWORD *)(*(void *)(a1 + 24) + 4 * *(int *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 96))) = *(_DWORD *)(a1 + 96);
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 88);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62) {
      sub_100019424();
    }
    unint64_t v11 = v9 - (void)v4;
    unint64_t v12 = (uint64_t)(v9 - (void)v4) >> 1;
    if (v12 <= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)sub_10002EE10(a1 + 88, v13);
      int v4 = *(int **)(a1 + 72);
      uint64_t v7 = *(int **)(a1 + 80);
    }
    else
    {
      int v14 = 0;
    }
    int v15 = (int *)&v14[4 * v8];
    float v16 = &v14[4 * v13];
    *int v15 = *a2;
    uint64_t v10 = v15 + 1;
    while (v7 != v4)
    {
      int v17 = *--v7;
      *--int v15 = v17;
    }
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = v10;
    *(void *)(a1 + 88) = v16;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t v10 = v7 + 1;
  }
  unint64_t v18 = *(void *)(a1 + 40);
  *(void *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = v10;
  uint64_t v19 = *(char **)(a1 + 32);
  if ((unint64_t)v19 >= v18)
  {
    uint64_t v21 = *(char **)(a1 + 24);
    uint64_t v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_55;
    }
    unint64_t v23 = v18 - (void)v21;
    unint64_t v24 = (uint64_t)(v18 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      int v26 = (char *)sub_10002EE10(a1 + 40, v25);
      uint64_t v21 = *(char **)(a1 + 24);
      uint64_t v19 = *(char **)(a1 + 32);
    }
    else
    {
      int v26 = 0;
    }
    int v27 = &v26[4 * v22];
    float v28 = &v26[4 * v25];
    *(_DWORD *)int v27 = *(_DWORD *)(a1 + 96);
    unint64_t v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v27;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v19 = *(_DWORD *)(a1 + 96);
    unint64_t v20 = v19 + 4;
  }
  unint64_t v30 = *(void *)(a1 + 64);
  *(void *)(a1 + 32) = v20;
  BOOL v31 = *(char **)(a1 + 56);
  if ((unint64_t)v31 >= v30)
  {
    int v33 = *(char **)(a1 + 48);
    uint64_t v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      unint64_t v35 = v30 - (void)v33;
      unint64_t v36 = (uint64_t)(v30 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        float v38 = (char *)sub_10002EE10(a1 + 64, v37);
        int v33 = *(char **)(a1 + 48);
        BOOL v31 = *(char **)(a1 + 56);
      }
      else
      {
        float v38 = 0;
      }
      BOOL v39 = &v38[4 * v34];
      uint64_t v40 = &v38[4 * v37];
      *(_DWORD *)BOOL v39 = *(_DWORD *)(a1 + 96);
      int v32 = v39 + 4;
      while (v31 != v33)
      {
        int v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)(a1 + 48) = v39;
      *(void *)(a1 + 56) = v32;
      *(void *)(a1 + 64) = v40;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_51;
    }
LABEL_55:
    sub_100019424();
  }
  *(_DWORD *)BOOL v31 = *(_DWORD *)(a1 + 96);
  int v32 = v31 + 4;
LABEL_51:
  *(void *)(a1 + 56) = v32;
LABEL_52:
  int v42 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v42 + 1;
  return sub_1000A7CE0(a1, a2, v42);
}

uint64_t sub_10009BC24(uint64_t a1)
{
  int v1 = *(_DWORD **)(a1 + 72);
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(a1 + 96) - 1;
  int v4 = *(int **)(a1 + 48);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[v3];
  int *v4 = v6;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *int v1 = v1[v3];
  v1[v3] = v4;
  --*(_DWORD *)(a1 + 96);
  sub_1000A7F0C(a1, 0);
  return v2;
}

uint64_t sub_10009BC98(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(int *)(*(void *)(a1 + 24) + 4 * a2);
  int v6 = v5 - 1;
  if ((int)v5 < 1) {
    int v6 = *(_DWORD *)(*(void *)(a1 + 24) + 4 * a2);
  }
  BOOL v7 = sub_1000A7D90((uint64_t **)a1, *a3, *(_DWORD *)(*(void *)(a1 + 72) + 4 * (v6 >> 1)));
  *(_DWORD *)(*(void *)(a1 + 72) + 4 * v5) = *a3;
  if (v7)
  {
    return sub_1000A7CE0(a1, a3, v5);
  }
  else
  {
    return sub_1000A7F0C(a1, v5);
  }
}

void *sub_10009BD3C(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void *sub_10009BD90(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100031054(a1, a2);
    int v6 = (_DWORD *)a1[1];
    BOOL v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_10009BDF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009BE14(uint64_t a1, void *a2, uint64_t a3)
{
  v5[0] = a1;
  v5[1] = a2;
  _OWORD v5[2] = *(void *)a3;
  int v6 = *(_DWORD *)(a3 + 16);
  char v7 = *(unsigned char *)(a3 + 20);
  char v8 = 0;
  *(_OWORD *)unint64_t v9 = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)unint64_t v12 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v14, 0, sizeof(v14));
  a2[1] = *a2;
  sub_10009EB30(v5, *(_DWORD *)(a3 + 12));
  if (v14[20])
  {
    a2[1] = *a2;
    int v4 = sub_10006ECE4();
    sub_10009CDD0((uint64_t)a2, 1uLL, v4);
  }
  if (__p[1])
  {
    *(void **)int v14 = __p[1];
    operator delete(__p[1]);
  }
  if (v12[0]) {
    operator delete(v12[0]);
  }
  if (v10[1])
  {
    *(void **)&long long v11 = v10[1];
    operator delete(v10[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_10009BEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10009BF04(uint64_t a1, uint64_t *a2, char a3)
{
  (*(void (**)(uint64_t *))(*a2 + 200))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 256))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 264))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 1, 0))
  {
    int v8 = sub_1000691D0(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 224))(a2, (v8 + 1));
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v51 = 0;
  if (a3)
  {
LABEL_31:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*a2 + 176))(a2);
    int v19 = 1;
    goto LABEL_32;
  }
  *(void *)&long long v42 = 0;
  DWORD2(v42) = 0;
  LODWORD(v43) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)a1 + 112))(a1, &v42);
  uint64_t v10 = 0xFFFFFFFFLL;
  while (1)
  {
    if ((void)v42)
    {
      char v11 = (*(uint64_t (**)(void))(*(void *)v42 + 16))(v42);
      uint64_t v12 = v42;
      if (v11) {
        goto LABEL_24;
      }
      if ((void)v42)
      {
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v42 + 24))();
        goto LABEL_11;
      }
    }
    else if ((int)v43 >= SDWORD2(v42))
    {
      goto LABEL_26;
    }
    uint64_t v13 = v43;
LABEL_11:
    (*(void (**)(float *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v50, a1, v13);
    int v14 = sub_10002D8A8();
    *(float *)&uint64_t v39 = v50;
    LODWORD(v47) = 0;
    LODWORD(v47) = *v14;
    int v15 = 2 * (v10 != -1);
    if (v10 == -1) {
      int v16 = v13;
    }
    else {
      int v16 = -1;
    }
    if (*(float *)&v39 == *(float *)&v47) {
      int v15 = 4;
    }
    uint64_t v10 = v50 == *(float *)&v47 ? v10 : v16;
    if ((v15 | 4) != 4) {
      break;
    }
    if ((void)v42) {
      (*(void (**)(void))(*(void *)v42 + 32))(v42);
    }
    else {
      LODWORD(v43) = v43 + 1;
    }
  }
  uint64_t v12 = v42;
LABEL_24:
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
LABEL_26:
  if (v10 == -1) {
    goto LABEL_31;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v47, a1, v10);
  int v17 = sub_10002D854();
  LODWORD(v42) = v47;
  LODWORD(v39) = 0;
  v18.n128_u32[0] = v47;
  if (*(float *)&v47 != *(float *)v17)
  {
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    long long v42 = (unint64_t)&v47;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = &v51;
    long long v45 = 0u;
    long long v46 = 0u;
    sub_100068854(a1, (uint64_t)&v42);
  }
  int v19 = 0;
LABEL_32:
  uint64_t v39 = 0;
  int v40 = 0;
  LODWORD(v41) = 0;
  (*(void (**)(uint64_t, uint64_t *, __n128))(*(void *)a1 + 112))(a1, &v39, v18);
  while (2)
  {
    if (!v39)
    {
      if ((int)v41 >= v40) {
        goto LABEL_84;
      }
      goto LABEL_38;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v39 + 16))(v39))
    {
      if (v39)
      {
        uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v39 + 24))();
LABEL_39:
        int v21 = v20 + v19;
        while ((*(int (**)(uint64_t *))(*a2 + 136))(a2) <= v21)
          (*(void (**)(uint64_t *))(*a2 + 176))(a2);
        if (v20 == v9)
        {
          int v38 = *sub_10002D854();
          (*(void (**)(uint64_t *, void, int *))(*a2 + 160))(a2, (v20 + v19), &v38);
        }
        (*(void (**)(float *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v50, a1, v20);
        uint64_t v22 = sub_10002D8A8();
        *(float *)&long long v42 = v50;
        LODWORD(v47) = 0;
        LODWORD(v47) = *v22;
        char v23 = v19 ^ 1;
        if (v50 == *(float *)&v47) {
          char v23 = 1;
        }
        if ((v23 & 1) == 0)
        {
          *(void *)&long long v42 = 0;
          *((float *)&v42 + 2) = v50;
          HIDWORD(v42) = v20 + v19;
          (*(void (**)(uint64_t *, void, long long *))(*a2 + 184))(a2, 0, &v42);
        }
        unint64_t v44 = 0;
        long long v42 = 0u;
        long long v43 = 0u;
        (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v20, &v42);
LABEL_49:
        if ((void)v42)
        {
          if ((*(unsigned int (**)(void))(*(void *)v42 + 16))(v42))
          {
            if ((void)v42)
            {
              (*(void (**)(void))(*(void *)v42 + 8))();
              goto LABEL_79;
            }
LABEL_77:
            if (*((void *)&v43 + 1)) {
              --**((_DWORD **)&v43 + 1);
            }
LABEL_79:
            if (v39) {
              (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
            }
            else {
              LODWORD(v41) = v41 + 1;
            }
            continue;
          }
          if ((void)v42)
          {
            uint64_t v24 = (*(uint64_t (**)(void))(*(void *)v42 + 24))();
LABEL_55:
            uint64_t v25 = (*(_DWORD *)(v24 + 12) + v19);
            float v26 = *(float *)(v24 + 8);
            if (v25 == v10) {
              char v27 = v19;
            }
            else {
              char v27 = 1;
            }
            if ((v27 & 1) == 0)
            {
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v47, a1, v10);
              if (*(float *)&v47 == -INFINITY || v26 >= -INFINITY && v26 <= -INFINITY)
              {
                LODWORD(v26) = *sub_10006ECE4();
              }
              else if (*(float *)&v47 == INFINITY || v26 == INFINITY)
              {
                float v26 = INFINITY;
              }
              else
              {
                float v26 = v26 + *(float *)&v47;
              }
            }
            uint64_t v47 = *(void *)v24;
            unint64_t v48 = __PAIR64__(v21, LODWORD(v26));
            while (1)
            {
              int v29 = (*(uint64_t (**)(uint64_t *))(*a2 + 136))(a2);
              uint64_t v30 = *a2;
              if (v29 > (int)v25) {
                break;
              }
              (*(void (**)(uint64_t *))(v30 + 176))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, uint64_t *))(v30 + 184))(a2, v25, &v47);
            if ((void)v42) {
              (*(void (**)(void))(*(void *)v42 + 32))(v42);
            }
            else {
              ++v44;
            }
            goto LABEL_49;
          }
        }
        else if (v44 >= (unint64_t)v43)
        {
          goto LABEL_77;
        }
        uint64_t v24 = *((void *)&v42 + 1) + 16 * v44;
        goto LABEL_55;
      }
LABEL_38:
      uint64_t v20 = v41;
      goto LABEL_39;
    }
    break;
  }
  if (v39) {
    (*(void (**)(void))(*(void *)v39 + 8))();
  }
LABEL_84:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 152))(a2, v10);
  if (v10 == v9) {
    char v31 = v19;
  }
  else {
    char v31 = 1;
  }
  if ((v31 & 1) == 0)
  {
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v42, a1, v9);
    int v37 = v42;
    (*(void (**)(uint64_t *, uint64_t, int *))(*a2 + 160))(a2, v9, &v37);
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0004, 0);
  uint64_t v33 = v51 | v32;
  uint64_t v34 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 56))(a2, 0xFFFFFFFF0007, 0);
  uint64_t v35 = sub_1000C294C(v33, v19);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 168))(a2, v34 | v35, 0xFFFFFFFF0007);
}

void sub_10009CBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10002D794(va);
  char v11 = *(void **)(v9 - 144);
  if (v11)
  {
    *(void *)(v9 - 136) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void sub_10009CCE0(uint64_t a1, void *a2, uint64_t a3)
{
  v5[0] = a1;
  v5[1] = a2;
  _OWORD v5[2] = *(void *)a3;
  int v6 = *(_DWORD *)(a3 + 16);
  char v7 = *(unsigned char *)(a3 + 20);
  char v8 = 0;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v14, 0, sizeof(v14));
  a2[1] = *a2;
  sub_1000A6A14(v5, *(_DWORD *)(a3 + 12));
  if (v14[20])
  {
    a2[1] = *a2;
    int v4 = sub_10006ECE4();
    sub_10009CDD0((uint64_t)a2, 1uLL, v4);
  }
  if (__p[1])
  {
    *(void **)int v14 = __p[1];
    operator delete(__p[1]);
  }
  if (v12[0]) {
    operator delete(v12[0]);
  }
  if (v10[1])
  {
    *(void **)&long long v11 = v10[1];
    operator delete(v10[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_10009CDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10009CDD0(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_1000A7B38((void **)a1, a2 - v3, a3);
  }
}

void *sub_10009CE00(void *a1)
{
  *a1 = off_1000F3870;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_100018BC0(v2);
  }
  return a1;
}

void sub_10009CE4C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = off_1000F3010;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  unint64_t v3 = (void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v8 = 0;
        __p[0] = v3;
        __p[1] = 0;
        __p[2] = 0;
        __p[3] = &v8;
        long long v6 = 0u;
        long long v7 = 0u;
        sub_100068854(a2, (uint64_t)__p);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_10009D94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_10002D500(&a17);
  if (a14 < 0)
  {
    operator delete(__p);
    if (v28) {
LABEL_10:
    }
      operator delete();
  }
  else if (v28)
  {
    goto LABEL_10;
  }
  if (v29) {
    operator delete();
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  sub_10002D794(&a21);
  uint64_t v32 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 56) = v32;
    operator delete(v32);
  }
  sub_1000972A8((void ***)&a21);
  uint64_t v33 = *v30;
  *uint64_t v30 = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10009DB48(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a3, 4 * v12);
  }
  uint64_t v32 = 0;
  int v33 = 0;
  unsigned int v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v32);
  while (1)
  {
    uint64_t result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33) {
        return result;
      }
LABEL_11:
      uint64_t v15 = v34;
      goto LABEL_12;
    }
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
    uint64_t result = v32;
    if (v14) {
      break;
    }
    if (!v32) {
      goto LABEL_11;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v32 + 24))();
LABEL_12:
    unint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v15, &v29);
    uint64_t v16 = (int)v15;
    while (1)
    {
      if (!(void)v29)
      {
        if (v31 >= (unint64_t)v30) {
          goto LABEL_38;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v29 + 16))(v29)) {
        break;
      }
      if ((void)v29)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v29 + 24))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = *((void *)&v29 + 1) + 16 * v31;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 12)))
      {
        int v19 = *(_DWORD **)a3;
        if (!a4
          || (uint64_t v20 = sub_10002D854(), v21 = (float *)(v17 + 8), sub_100096070(a4, (float *)(v17 + 8), (float *)v20)))
        {
          int v22 = 1;
          goto LABEL_23;
        }
        if ((v19[v18] | 2) == 2)
        {
          uint64_t v26 = sub_10002D8A8();
          float v36 = 0.0;
          float v36 = *v21;
          float v35 = 0.0;
          float v35 = *(float *)v26;
          if (v36 == v35 || (v27 = sub_10002D854(), v36 = 0.0, v36 = *v21, float v35 = 0.0, float v35 = *(float *)v27, v36 == v35)) {
            int v22 = 2;
          }
          else {
            int v22 = 3;
          }
LABEL_23:
          v19[v18] = v22;
        }
        *a5 = 0;
      }
      char v23 = sub_10002D8A8();
      float v36 = 0.0;
      float v36 = *(float *)(v17 + 8);
      float v35 = 0.0;
      float v35 = *(float *)v23;
      v24.n128_f32[0] = v36;
      if (v36 != v35)
      {
        uint64_t v25 = sub_10002D854();
        float v36 = 0.0;
        float v36 = *(float *)(v17 + 8);
        float v35 = 0.0;
        float v35 = *(float *)v25;
        v24.n128_f32[0] = v36;
        if (v36 != v35) {
          *a6 = 0;
        }
      }
      if ((void)v29) {
        (*(void (**)(void, __n128))(*(void *)v29 + 32))(v29, v24);
      }
      else {
        ++v31;
      }
    }
    if ((void)v29)
    {
      (*(void (**)(void))(*(void *)v29 + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (*((void *)&v30 + 1)) {
      --**((_DWORD **)&v30 + 1);
    }
LABEL_40:
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 32))(v32);
    }
    else {
      ++v34;
    }
  }
  if (v32) {
    return (*(uint64_t (**)(void))(*(void *)v32 + 8))();
  }
  return result;
}

void sub_10009DF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009DFE0(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = off_1000F30F0;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v4 = 0;
  uint64_t v1 = a1 + 24;
  uint64_t v2 = &v4;
  uint64_t v3 = 0;
  sub_10009E1C0();
}

void sub_10009E14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21) {
    sub_10002E360(v23, a21);
  }
  uint64_t v26 = *v22;
  if (*v22)
  {
    *(void *)(v21 + 56) = v26;
    operator delete(v26);
  }
  char v27 = *v24;
  if (*v24)
  {
    *(void *)(v21 + 32) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009E1C0()
{
}

void sub_10009EA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  sub_10002E6EC(&a23);
  sub_10002F120(&a27);
  long long v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10009EB30(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))(*a1) == -1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 56))(*a1, 4, 0);
    if (!result) {
      return result;
    }
    uint64_t v181 = (char *)a1 + 140;
    goto LABEL_269;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = a1[8];
    a1[12] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))();
  }
  unint64_t v4 = a2;
  uint64_t v5 = a1[1];
  long long v6 = (int **)(v5 + 8);
  if (a2 >= (unint64_t)((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2))
  {
    uint64_t v185 = (void **)(a1 + 5);
    long long v7 = (void **)(a1 + 8);
    do
    {
      uint64_t v8 = sub_10002D8A8();
      uint64_t v9 = v8;
      unint64_t v10 = *(void *)(v5 + 16);
      uint64_t v11 = *(int **)(v5 + 8);
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = *(int **)v5;
        uint64_t v14 = ((uint64_t)v11 - *(void *)v5) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)sub_10002EE10(v5 + 16, v17);
          uint64_t v11 = *v6;
          uint64_t v13 = *(int **)v5;
        }
        else
        {
          uint64_t v18 = 0;
        }
        int v19 = (int *)&v18[4 * v14];
        int *v19 = *v9;
        unint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          int v20 = *--v11;
          *--int v19 = v20;
        }
        *(void *)uint64_t v5 = v19;
        _DWORD *v6 = v12;
        *(void *)(v5 + 16) = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *uint64_t v11 = *v8;
        unint64_t v12 = v11 + 1;
      }
      _DWORD *v6 = v12;
      int v21 = *sub_10002D8A8();
      uint64_t v23 = (int *)a1[6];
      unint64_t v22 = a1[7];
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v25 = (int *)*v185;
        uint64_t v26 = ((char *)v23 - (unsigned char *)*v185) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
LABEL_275:
        }
          sub_100019424();
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          long long v30 = (char *)sub_10002EE10((uint64_t)(a1 + 7), v29);
          uint64_t v25 = (int *)a1[5];
          uint64_t v23 = (int *)a1[6];
        }
        else
        {
          long long v30 = 0;
        }
        unint64_t v31 = (int *)&v30[4 * v26];
        *unint64_t v31 = v21;
        __n128 v24 = v31 + 1;
        while (v23 != v25)
        {
          int v32 = *--v23;
          *--unint64_t v31 = v32;
        }
        a1[5] = v31;
        a1[6] = v24;
        a1[7] = &v30[4 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *uint64_t v23 = v21;
        __n128 v24 = v23 + 1;
      }
      a1[6] = v24;
      int v33 = *sub_10002D8A8();
      float v35 = (int *)a1[9];
      unint64_t v34 = a1[10];
      if ((unint64_t)v35 >= v34)
      {
        int v37 = (int *)*v7;
        uint64_t v38 = ((char *)v35 - (unsigned char *)*v7) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v40 = v34 - (void)v37;
        if (v40 >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          long long v42 = (char *)sub_10002EE10((uint64_t)(a1 + 10), v41);
          int v37 = (int *)a1[8];
          float v35 = (int *)a1[9];
        }
        else
        {
          long long v42 = 0;
        }
        long long v43 = (int *)&v42[4 * v38];
        *long long v43 = v33;
        float v36 = v43 + 1;
        while (v35 != v37)
        {
          int v44 = *--v35;
          *--long long v43 = v44;
        }
        a1[8] = v43;
        a1[9] = v36;
        a1[10] = &v42[4 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *float v35 = v33;
        float v36 = v35 + 1;
      }
      a1[9] = v36;
      LOBYTE(v187) = 0;
      sub_10002ED68((uint64_t)(a1 + 11), &v187);
      uint64_t v5 = a1[1];
      long long v6 = (int **)(v5 + 8);
    }
    while (v4 >= (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
  }
  if (*((unsigned char *)a1 + 33))
  {
    long long v45 = (char *)a1[14];
    long long v46 = (char *)a1[15];
    unint64_t v47 = (v46 - v45) >> 2;
    if (v47 <= v4)
    {
      unint64_t v48 = a1 + 16;
      do
      {
        if ((unint64_t)v46 >= *v48)
        {
          unint64_t v50 = v47 + 1;
          if ((v47 + 1) >> 62) {
            sub_100019424();
          }
          uint64_t v51 = *v48 - (void)v45;
          if (v51 >> 1 > v50) {
            unint64_t v50 = v51 >> 1;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52)
          {
            float v53 = (char *)sub_10002EE10((uint64_t)(a1 + 16), v52);
            long long v45 = (char *)a1[14];
            long long v46 = (char *)a1[15];
          }
          else
          {
            float v53 = 0;
          }
          float v54 = &v53[4 * v47];
          *(_DWORD *)float v54 = -1;
          uint64_t v49 = v54 + 4;
          while (v46 != v45)
          {
            int v55 = *((_DWORD *)v46 - 1);
            v46 -= 4;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          a1[14] = v54;
          a1[15] = v49;
          a1[16] = &v53[4 * v52];
          if (v45)
          {
            operator delete(v45);
            long long v45 = (char *)a1[14];
          }
          else
          {
            long long v45 = v54;
          }
        }
        else
        {
          *(_DWORD *)long long v46 = -1;
          uint64_t v49 = v46 + 4;
        }
        a1[15] = v49;
        unint64_t v47 = (v49 - v45) >> 2;
        long long v46 = v49;
      }
      while (v47 <= v4);
    }
    *(_DWORD *)&v45[4 * v4] = *((_DWORD *)a1 + 34);
  }
  *(_DWORD *)(*(void *)a1[1] + 4 * v4) = *sub_10002D854();
  uint64_t v56 = a1[5];
  uint64_t v184 = (void **)(a1 + 5);
  *(_DWORD *)(v56 + 4 * v4) = *sub_10002D854();
  uint64_t v57 = a1[8];
  v186 = (void **)(a1 + 8);
  *(_DWORD *)(v57 + 4 * v4) = *sub_10002D854();
  *(void *)(a1[11] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v4);
  uint64_t v182 = (uint64_t)(a1 + 10);
  uint64_t v183 = (uint64_t)(a1 + 7);
  float v58 = a1 + 16;
  uint64_t v181 = (char *)a1 + 140;
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_265;
    }
    int v60 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    unint64_t v61 = v60;
    while (1)
    {
      uint64_t v62 = (int **)a1[1];
      int v63 = v62 + 1;
      if (v61 < v62[1] - *v62) {
        break;
      }
      unint64_t v64 = sub_10002D8A8();
      unint64_t v65 = v64;
      unint64_t v66 = (unint64_t)v62[2];
      BOOL v67 = v62[1];
      if ((unint64_t)v67 >= v66)
      {
        uint64_t v69 = *v62;
        uint64_t v70 = v67 - *v62;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v72 = v66 - (void)v69;
        if (v72 >> 1 > v71) {
          unint64_t v71 = v72 >> 1;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        if (v73)
        {
          BOOL v74 = (char *)sub_10002EE10((uint64_t)(v62 + 2), v73);
          BOOL v67 = *v63;
          uint64_t v69 = *v62;
        }
        else
        {
          BOOL v74 = 0;
        }
        int v75 = (int *)&v74[4 * v70];
        int *v75 = *v65;
        uint64_t v68 = v75 + 1;
        while (v67 != v69)
        {
          int v76 = *--v67;
          *--int v75 = v76;
        }
        void *v62 = v75;
        char *v63 = v68;
        v62[2] = (int *)&v74[4 * v73];
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        int *v67 = *v64;
        uint64_t v68 = v67 + 1;
      }
      char *v63 = v68;
      int v77 = *sub_10002D8A8();
      float v79 = (int *)a1[6];
      unint64_t v78 = a1[7];
      if ((unint64_t)v79 >= v78)
      {
        uint64_t v81 = (int *)*v184;
        uint64_t v82 = ((char *)v79 - (unsigned char *)*v184) >> 2;
        unint64_t v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v84 = v78 - (void)v81;
        if (v84 >> 1 > v83) {
          unint64_t v83 = v84 >> 1;
        }
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v85 = v83;
        }
        if (v85)
        {
          NSString v86 = (char *)sub_10002EE10(v183, v85);
          uint64_t v81 = (int *)a1[5];
          float v79 = (int *)a1[6];
        }
        else
        {
          NSString v86 = 0;
        }
        NSString v87 = (int *)&v86[4 * v82];
        *NSString v87 = v77;
        int v80 = v87 + 1;
        while (v79 != v81)
        {
          int v88 = *--v79;
          *--NSString v87 = v88;
        }
        a1[5] = v87;
        a1[6] = v80;
        a1[7] = &v86[4 * v85];
        if (v81) {
          operator delete(v81);
        }
      }
      else
      {
        *float v79 = v77;
        int v80 = v79 + 1;
      }
      a1[6] = v80;
      int v89 = *sub_10002D8A8();
      unint64_t v91 = (int *)a1[9];
      unint64_t v90 = a1[10];
      if ((unint64_t)v91 >= v90)
      {
        long long v93 = (int *)*v186;
        uint64_t v94 = ((char *)v91 - (unsigned char *)*v186) >> 2;
        unint64_t v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62) {
          goto LABEL_275;
        }
        uint64_t v96 = v90 - (void)v93;
        if (v96 >> 1 > v95) {
          unint64_t v95 = v96 >> 1;
        }
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v95;
        }
        if (v97)
        {
          uint64_t v98 = (char *)sub_10002EE10(v182, v97);
          long long v93 = (int *)a1[8];
          unint64_t v91 = (int *)a1[9];
        }
        else
        {
          uint64_t v98 = 0;
        }
        uint64_t v99 = (int *)&v98[4 * v94];
        *uint64_t v99 = v89;
        uint64_t v92 = v99 + 1;
        while (v91 != v93)
        {
          int v100 = *--v91;
          *--uint64_t v99 = v100;
        }
        a1[8] = v99;
        a1[9] = v92;
        a1[10] = &v98[4 * v97];
        if (v93) {
          operator delete(v93);
        }
      }
      else
      {
        *unint64_t v91 = v89;
        uint64_t v92 = v91 + 1;
      }
      a1[9] = v92;
      LOBYTE(v187) = 0;
      sub_10002ED68((uint64_t)(a1 + 11), &v187);
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v190);
      uint64_t v101 = sub_10002D8A8();
      LODWORD(v187) = v190;
      HIDWORD(v19sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
      HIDWORD(v19sub_10002B9D0((void **)&STACK[0x2A8], 0) = *v101;
      v59.n128_u32[0] = v190;
      if (*(float *)&v190 != *((float *)&v190 + 1))
      {
LABEL_265:
        ++*((_DWORD *)a1 + 34);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, void, __n128))(*(void *)*a1 + 56))(*a1, 4, 0, v59);
        if (!result) {
          return result;
        }
LABEL_269:
        *uint64_t v181 = 1;
        return result;
      }
    }
    *(void *)(a1[11] + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v61);
    uint64_t v102 = a1[8];
    float v103 = *(float *)(v102 + 4 * v61);
    *(_DWORD *)(v102 + 4 * v61) = *sub_10002D8A8();
    uint64_t v104 = *a1;
    long long v187 = 0u;
    long long v188 = 0u;
    unint64_t v189 = 0;
    (*(void (**)(uint64_t, unint64_t, long long *))(*(void *)v104 + 120))(v104, v61, &v187);
    while (1)
    {
      if ((void)v187)
      {
        if ((*(uint64_t (**)(void))(*(void *)v187 + 16))(v187)) {
          goto LABEL_257;
        }
        if ((void)v187)
        {
          uint64_t v105 = (*(uint64_t (**)(void))(*(void *)v187 + 24))(v187);
          goto LABEL_141;
        }
      }
      else if (v189 >= (unint64_t)v188)
      {
LABEL_257:
        char v179 = 1;
        goto LABEL_259;
      }
      uint64_t v105 = *((void *)&v187 + 1) + 16 * v189;
LABEL_141:
      uint64_t v106 = a1[1];
      uint64_t v107 = (int **)(v106 + 8);
      for (unint64_t i = *(int *)(v105 + 12); i >= (uint64_t)(*(void *)(v106 + 8) - *(void *)v106) >> 2; unint64_t i = *(int *)(v105 + 12))
      {
        uint64_t v109 = sub_10002D8A8();
        int v110 = v109;
        uint64_t v111 = *v107;
        unint64_t v112 = *(void *)(v106 + 16);
        if ((unint64_t)*v107 >= v112)
        {
          uint64_t v114 = *(int **)v106;
          uint64_t v115 = ((uint64_t)v111 - *(void *)v106) >> 2;
          unint64_t v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) >> 62) {
            sub_100019424();
          }
          uint64_t v117 = v112 - (void)v114;
          if (v117 >> 1 > v116) {
            unint64_t v116 = v117 >> 1;
          }
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v118 = v116;
          }
          if (v118)
          {
            NSString v119 = (char *)sub_10002EE10(v106 + 16, v118);
            uint64_t v111 = *v107;
            uint64_t v114 = *(int **)v106;
          }
          else
          {
            NSString v119 = 0;
          }
          id v120 = (int *)&v119[4 * v115];
          *id v120 = *v110;
          int v113 = v120 + 1;
          while (v111 != v114)
          {
            int v121 = *--v111;
            *--id v120 = v121;
          }
          *(void *)uint64_t v106 = v120;
          *uint64_t v107 = v113;
          *(void *)(v106 + 16) = &v119[4 * v118];
          if (v114) {
            operator delete(v114);
          }
        }
        else
        {
          *uint64_t v111 = *v109;
          int v113 = v111 + 1;
        }
        *uint64_t v107 = v113;
        int v122 = *sub_10002D8A8();
        uint64_t v124 = (int *)a1[6];
        unint64_t v123 = a1[7];
        if ((unint64_t)v124 >= v123)
        {
          uint64_t v126 = (int *)*v184;
          uint64_t v127 = ((char *)v124 - (unsigned char *)*v184) >> 2;
          unint64_t v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 62) {
            sub_100019424();
          }
          uint64_t v129 = v123 - (void)v126;
          if (v129 >> 1 > v128) {
            unint64_t v128 = v129 >> 1;
          }
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v130 = v128;
          }
          if (v130)
          {
            uint64_t v131 = (char *)sub_10002EE10(v183, v130);
            uint64_t v126 = (int *)a1[5];
            uint64_t v124 = (int *)a1[6];
          }
          else
          {
            uint64_t v131 = 0;
          }
          uint64_t v132 = (int *)&v131[4 * v127];
          *uint64_t v132 = v122;
          uint64_t v125 = v132 + 1;
          while (v124 != v126)
          {
            int v133 = *--v124;
            *--uint64_t v132 = v133;
          }
          a1[5] = v132;
          a1[6] = v125;
          a1[7] = &v131[4 * v130];
          if (v126) {
            operator delete(v126);
          }
        }
        else
        {
          *uint64_t v124 = v122;
          uint64_t v125 = v124 + 1;
        }
        a1[6] = v125;
        int v134 = *sub_10002D8A8();
        id v136 = (int *)a1[9];
        unint64_t v135 = a1[10];
        if ((unint64_t)v136 >= v135)
        {
          uint64_t v138 = (int *)*v186;
          uint64_t v139 = ((char *)v136 - (unsigned char *)*v186) >> 2;
          unint64_t v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 62) {
            sub_100019424();
          }
          uint64_t v141 = v135 - (void)v138;
          if (v141 >> 1 > v140) {
            unint64_t v140 = v141 >> 1;
          }
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v142 = v140;
          }
          if (v142)
          {
            uint64_t v143 = (char *)sub_10002EE10(v182, v142);
            uint64_t v138 = (int *)a1[8];
            id v136 = (int *)a1[9];
          }
          else
          {
            uint64_t v143 = 0;
          }
          double v144 = (int *)&v143[4 * v139];
          *double v144 = v134;
          uint64_t v137 = v144 + 1;
          while (v136 != v138)
          {
            int v145 = *--v136;
            *--double v144 = v145;
          }
          a1[8] = v144;
          a1[9] = v137;
          a1[10] = &v143[4 * v142];
          if (v138) {
            operator delete(v138);
          }
        }
        else
        {
          *id v136 = v134;
          uint64_t v137 = v136 + 1;
        }
        a1[9] = v137;
        BYTE4(v19sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
        sub_10002ED68((uint64_t)(a1 + 11), (unsigned char *)&v190 + 4);
        uint64_t v106 = a1[1];
        uint64_t v107 = (int **)(v106 + 8);
      }
      if (*((unsigned char *)a1 + 33))
      {
        int v146 = (char *)a1[14];
        uint64_t v147 = (char *)a1[15];
        unint64_t v148 = (v147 - v146) >> 2;
        if (v148 <= (int)i)
        {
          do
          {
            if ((unint64_t)v147 >= *v58)
            {
              unint64_t v151 = v148 + 1;
              if ((v148 + 1) >> 62) {
                sub_100019424();
              }
              uint64_t v152 = *v58 - (void)v146;
              if (v152 >> 1 > v151) {
                unint64_t v151 = v152 >> 1;
              }
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v151;
              }
              if (v153)
              {
                double v154 = (char *)sub_10002EE10((uint64_t)(a1 + 16), v153);
                int v146 = (char *)a1[14];
                uint64_t v147 = (char *)a1[15];
              }
              else
              {
                double v154 = 0;
              }
              char v155 = &v154[4 * v148];
              *(_DWORD *)char v155 = -1;
              int v150 = v155 + 4;
              while (v147 != v146)
              {
                int v156 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v155 - 1) = v156;
                v155 -= 4;
              }
              a1[14] = v155;
              a1[15] = v150;
              a1[16] = &v154[4 * v153];
              if (v146)
              {
                operator delete(v146);
                int v146 = (char *)a1[14];
              }
              else
              {
                int v146 = v155;
              }
            }
            else
            {
              *(_DWORD *)uint64_t v147 = -1;
              int v150 = v147 + 4;
            }
            a1[15] = v150;
            unint64_t v148 = (v150 - v146) >> 2;
            int v157 = *(_DWORD *)(v105 + 12);
            uint64_t v147 = v150;
          }
          while (v148 <= v157);
          uint64_t v149 = v157;
          LODWORD(i) = *(_DWORD *)(v105 + 12);
        }
        else
        {
          uint64_t v149 = (int)i;
        }
        if (*(_DWORD *)&v146[4 * v149] != *((_DWORD *)a1 + 34))
        {
          NSString v158 = sub_10002D8A8();
          uint64_t v159 = *(int *)(v105 + 12);
          *(_DWORD *)(*(void *)a1[1] + 4 * v159) = *v158;
          uint64_t v160 = a1[5];
          *(_DWORD *)(v160 + 4 * v159) = *sub_10002D8A8();
          uint64_t v161 = *(int *)(v105 + 12);
          unint64_t i = (unint64_t)*v186;
          *(_DWORD *)(i + 4 * v161) = *sub_10002D8A8();
          unint64_t v162 = *(int *)(v105 + 12);
          *(void *)(a1[11] + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v162);
          *(_DWORD *)(a1[14] + 4 * v162) = *((_DWORD *)a1 + 34);
          LODWORD(i) = *(_DWORD *)(v105 + 12);
        }
      }
      uint64_t v163 = *(void *)a1[1];
      uint64_t v164 = a1[5];
      uint64_t v165 = a1[8];
      if (v103 == -INFINITY || (float v166 = *(float *)(v105 + 8), v166 >= -INFINITY) && v166 <= -INFINITY)
      {
        float v167 = *(float *)sub_10006ECE4();
      }
      else
      {
        BOOL v168 = v166 == INFINITY || v103 == INFINITY;
        float v169 = v103 + v166;
        float v167 = v168 ? INFINITY : v169;
      }
      float v170 = *(float *)(v163 + 4 * (int)i);
      if (v170 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
      {
        float v171 = *(float *)sub_10006ECE4();
        float v170 = *(float *)(v163 + 4 * (int)i);
      }
      else
      {
        float v171 = v170 >= v167 ? v167 : *(float *)(v163 + 4 * (int)i);
      }
      float v172 = *((float *)a1 + 7);
      float v173 = v171 + v172;
      float v174 = v172 + v170;
      if (v170 > v173 || v171 > v174) {
        break;
      }
LABEL_254:
      if ((void)v187) {
        (*(void (**)(void))(*(void *)v187 + 32))(v187);
      }
      else {
        ++v189;
      }
    }
    float v176 = *(float *)(v164 + 4 * (int)i);
    if (v176 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      float v176 = *(float *)sub_10006ECE4();
    }
    else if (v176 >= v167)
    {
      float v176 = v167;
    }
    *(float *)(v164 + 4 * (int)i) = v176;
    *(float *)(v163 + 4 * (int)i) = v176;
    float v177 = *(float *)(v165 + 4 * (int)i);
    if (v177 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      float v177 = *(float *)sub_10006ECE4();
    }
    else if (v177 >= v167)
    {
      float v177 = v167;
    }
    *(float *)(v165 + 4 * (int)i) = v177;
    if (*(float *)(v163 + 4 * (int)i) != -INFINITY && v177 != -INFINITY)
    {
      uint64_t v178 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v105 + 12)))
      {
        (*(void (**)(void))(v178 + 40))();
      }
      else
      {
        (*(void (**)(void))(v178 + 24))();
        *(void *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v105 + 12);
      }
      goto LABEL_254;
    }
    char v179 = 0;
    *uint64_t v181 = 1;
LABEL_259:
    uint64_t result = v187;
    if ((void)v187)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v187 + 8))(v187);
    }
    else if (*((void *)&v188 + 1))
    {
      --**((_DWORD **)&v188 + 1);
    }
  }
  while ((v179 & 1) != 0);
  return result;
}

void sub_10009FBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18)
{
  if (a15)
  {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  else if (a18)
  {
    --*a18;
  }
  _Unwind_Resume(exception_object);
}

void *sub_10009FC54(void *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[11];
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[8];
  if (v4)
  {
    a1[9] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = v5;
    operator delete(v5);
  }
  return a1;
}

void *sub_10009FCB4(void *a1)
{
  sub_1000A07B0(&v3);
  sub_10009FD38(a1, &v3);
  if (v4) {
    sub_100018BC0(v4);
  }
  *a1 = off_1000F3338;
  return a1;
}

void sub_10009FD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_100018BC0(a11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10009FD38(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[1] = v4;
  a1[2] = v3;
  *a1 = off_1000F3748;
  if (v3) {
    sub_100018BC0(v3);
  }
  *a1 = off_1000F3620;
  return a1;
}

void sub_10009FDB8(void *a1)
{
  *a1 = off_1000F3870;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_100018BC0(v1);
  }
  operator delete();
}

uint64_t sub_10009FE24(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 80);
}

float sub_10009FE30@<S0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v3 = *(float **)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2);
  float result = *v3;
  *a3 = *(_DWORD *)v3;
  return result;
}

uint64_t sub_10009FE48(uint64_t a1, int a2)
{
  return (uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 32)
                 - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 24)) >> 4;
}

uint64_t sub_10009FE64(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 8);
}

uint64_t sub_10009FE78(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 16);
}

uint64_t sub_10009FE8C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = sub_1000A0E2C(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    long long v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v7();
  }
}

uint64_t sub_10009FF40(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void sub_10009FF4C()
{
}

uint64_t sub_10009FFDC(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t sub_10009FFE8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t sub_10009FFF4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 64) - *(void *)(v2 + 56)) >> 3;
  return result;
}

uint64_t sub_1000A0010(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 56) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  uint64_t v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t sub_1000A003C()
{
  return 0;
}

uint64_t sub_1000A0044(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 64) - *(void *)(*(void *)(a1 + 8) + 56)) >> 3;
}

uint64_t sub_1000A0058(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000A3D1C(a2, &v7);
    uint64_t v4 = v7;
    uint64_t v3 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v3;
    if (v5) {
      sub_100018BC0(v5);
    }
    if (v8) {
      sub_100018BC0(v8);
    }
  }
  return a1;
}

unint64_t sub_1000A00C8(uint64_t a1, int a2)
{
  sub_1000A4604(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  *(void *)(v4 + 8) = result & 0xCCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

float sub_1000A0148(uint64_t a1, int a2, int *a3)
{
  sub_1000A4604(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  int v8 = *a3;
  return sub_1000A4734(v6, a2, (float *)&v8);
}

void sub_1000A019C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a3 & 4) != (a3 & 4 & a2)) {
    sub_1000A4604(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
}

uint64_t sub_1000A0230(uint64_t a1)
{
  sub_1000A4604(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = sub_100030374(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 16))(v2) & 0xEAFFFFFF0007;
  return v3;
}

uint64_t sub_1000A02B0(uint64_t a1, int a2, float *a3)
{
  sub_1000A4604(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return sub_1000A47CC(v6, a2, a3);
}

uint64_t sub_1000A0300(uint64_t a1, char **a2)
{
  sub_1000A4604(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  sub_1000A4874((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
  v4[1] = v4[1] & 4 | result & 0x806A5A950007;
  return result;
}

uint64_t sub_1000A0380(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && !*(void *)(v2 + 8))
  {
    unint64_t v10 = *(void **)(a1 + 8);
    sub_100031354((uint64_t)v10);
    uint64_t result = (*(uint64_t (**)(void *))(*v10 + 16))(v10);
    v10[1] = (*((_DWORD *)v10 + 2) | result) & 4 | 0x956A5A950003;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v4 = *(void *)(v3 + 48);
    sub_1000A07B0(&v11);
    uint64_t v7 = v11;
    uint64_t v6 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v8 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v6;
    if (v8) {
      sub_100018BC0(v8);
    }
    if (v12) {
      sub_100018BC0(v12);
    }
    sub_100030234(*(void *)(a1 + 8), v5);
    return sub_1000302D4(*(void *)(a1 + 8), v4);
  }
  return result;
}

uint64_t sub_1000A0474(uint64_t a1, int a2, uint64_t a3)
{
  sub_1000A4604(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  sub_100030F7C(*(void **)(v6[7] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 16))(v6);
  v6[1] = v6[1] & 4 | result & 0x8A6A5A950007;
  return result;
}

uint64_t sub_1000A0504(uint64_t a1, int a2)
{
  sub_1000A4604(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(v4[7] + 8 * a2);
  v5[1] = 0;
  _OWORD v5[2] = 0;
  void v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
  v4[1] = v4[1] & 4 | result & 0x8A6A5A950007;
  return result;
}

void sub_1000A058C(uint64_t a1, int a2)
{
  sub_1000A4604(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 56);
  sub_1000306A4(v4, a2);
}

void sub_1000A05D0(uint64_t a1, int a2, unint64_t a3)
{
  sub_1000A4604(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 24);
  sub_1000A437C(v6, a3);
}

uint64_t sub_1000A0628(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t sub_1000A0654(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t sub_1000A0680(uint64_t a1, uint64_t a2)
{
  sub_1000A4604(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return sub_100030234(v4, a2);
}

uint64_t sub_1000A06C0(uint64_t a1, uint64_t a2)
{
  sub_1000A4604(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return sub_1000302D4(v4, a2);
}

void sub_1000A0700()
{
}

void sub_1000A078C()
{
}

void *sub_1000A07B0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = sub_1000A07FC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000A07E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000A07FC(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000F3500;
  sub_1000A08F4((uint64_t)(a1 + 3));
  return a1;
}

void sub_1000A0844(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000A0858(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F3500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000A0878(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F3500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000A08CC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1000A08F4(uint64_t a1)
{
  *(void *)a1 = off_1000F35F0;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  sub_100009CF0((void *)(a1 + 16), "null");
  *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = -1;
  *(void *)a1 = off_1000F3550;
  sub_100009CF0(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x956A5A950003;
  return a1;
}

void sub_1000A09C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000A09F4(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A09F4(void *a1)
{
  *a1 = off_1000F35C0;
  uint64_t v2 = (void **)a1[8];
  if (v2 != (void **)a1[7])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void **)a1[7];
    do
    {
      sub_100030A58(v2[v3++]);
      uint64_t v2 = (void **)a1[7];
    }
    while (v3 < (uint64_t)(a1[8] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return sub_1000A0B5C((uint64_t)a1);
}

void sub_1000A0A98(void *a1)
{
  sub_1000A09F4(a1);
  operator delete();
}

uint64_t sub_1000A0AD0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1000A0AD8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void sub_1000A0AE8(void *a1)
{
  sub_1000A09F4(a1);
  operator delete();
}

void sub_1000A0B24(uint64_t a1)
{
  sub_1000A0B5C(a1);
  operator delete();
}

uint64_t sub_1000A0B5C(uint64_t a1)
{
  *(void *)a1 = off_1000F35F0;
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_1000A0C0C(uint64_t a1)
{
  sub_100009CF0(__p, "ERROR");
  sub_10002D454(&v11, (uint64_t)__p);
  uint64_t v2 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  uint64_t v7 = sub_10002D07C(v2, v5, v6);
  sub_10002D07C(v7, (uint64_t)" FST type", 9);
  sub_10002D500(&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1000A0CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A0D0C(uint64_t a1)
{
  sub_100009CF0(__p, "ERROR");
  sub_10002D454(&v11, (uint64_t)__p);
  uint64_t v2 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  uint64_t v7 = sub_10002D07C(v2, v5, v6);
  sub_10002D07C(v7, (uint64_t)" FST type", 9);
  sub_10002D500(&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1000A0DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A0E0C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t sub_1000A0E18(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

unint64_t sub_1000A0E2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (byte_1000FF646)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
    unint64_t v7 = sub_1000A0FD0(a1, a2, a3, 0);
    if (!sub_10002D5E4(v6, v7))
    {
      if (byte_1000FE8F0) {
        sub_100009CF0(__p, "FATAL");
      }
      else {
        sub_100009CF0(__p, "ERROR");
      }
      sub_10002D454(&v12, (uint64_t)__p);
      uint64_t v9 = sub_10002D07C(&std::cerr, (uint64_t)"TestProperties: stored FST properties incorrect", 47);
      sub_10002D07C(v9, (uint64_t)" (stored: props1, computed: props2)", 35);
      sub_10002D500(&v12);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return sub_1000A0FD0(a1, a2, a3, 1);
  }
}

void sub_1000A0F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000A0FD0(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (a4)
  {
    uint64_t v10 = v8 & 0xFFFFFFFF0000 | (2 * v8) & 0xAAAAAAAA0000 | (v8 >> 1) & 0x555555550000 | 7;
    if ((a2 & ~v10) == 0)
    {
      if (a3) {
        *a3 = v10;
      }
      return v9;
    }
  }
  unint64_t v9 = v8 & 7;
  uint64_t v45 = 0;
  unint64_t v46 = v9;
  long long v43 = 0;
  int v44 = 0;
  uint64_t v11 = a2 & 0xCF3C00000000;
  if ((a2 & 0xCF3C00000000) != 0)
  {
    long long v38 = (unint64_t)&v43;
    *(void *)&long long v39 = 0;
    *((void *)&v39 + 1) = &v46;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_1000A196C(a1, (uint64_t)&v38);
  }
  if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
    goto LABEL_92;
  }
  uint64_t v32 = a2 & 0xC0000;
  uint64_t v33 = 0;
  uint64_t v12 = 0x10425A810000;
  if ((a2 & 0xC0000) != 0) {
    uint64_t v12 = 0x10425A850000;
  }
  unint64_t v13 = v9 | v12;
  uint64_t v31 = a2 & 0x300000;
  if ((a2 & 0x300000) != 0) {
    v13 |= 0x100000uLL;
  }
  unint64_t v46 = v13;
  float v36 = 0;
  int v37 = 0;
  int v34 = 0;
  unsigned int v35 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v33);
  int v14 = 0;
LABEL_13:
  if (!v33)
  {
    if ((int)v35 >= v34) {
      goto LABEL_84;
    }
    goto LABEL_18;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v33 + 16))(v33))
  {
    if (v33)
    {
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v33 + 24))();
LABEL_19:
      if (v32) {
        operator new();
      }
      if (v31) {
        operator new();
      }
      unint64_t v40 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v15, &v38);
      char v16 = 1;
      while ((void)v38)
      {
        if ((*(unsigned int (**)(void))(*(void *)v38 + 16))(v38))
        {
          if ((void)v38)
          {
            (*(void (**)(void))(*(void *)v38 + 8))();
            goto LABEL_71;
          }
LABEL_69:
          if (*((void *)&v39 + 1)) {
            --**((_DWORD **)&v39 + 1);
          }
LABEL_71:
          if (v14 > 0) {
            unint64_t v46 = v46 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v47, a1, v15);
          unint64_t v27 = sub_10002D8A8();
          LODWORD(v38) = v47;
          HIDWORD(v47) = 0;
          HIDWORD(v47) = *v27;
          if (*(float *)&v47 == *((float *)&v47 + 1))
          {
            if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 32))(a1, v15, *(float *)&v47) != 1) {
              unint64_t v46 = v46 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
            }
          }
          else
          {
            uint64_t v28 = sub_10002D854();
            LODWORD(v38) = v47;
            HIDWORD(v47) = 0;
            HIDWORD(v47) = *v28;
            v29.n128_u32[0] = v47;
            if (*(float *)&v47 != *((float *)&v47 + 1)) {
              unint64_t v46 = v46 & 0xFFFFFFFCFFFFFFFFLL | (unint64_t)&_mh_execute_header;
            }
            ++v14;
          }
          if (v33) {
            (*(void (**)(uint64_t, __n128))(*(void *)v33 + 32))(v33, v29);
          }
          else {
            ++v35;
          }
          goto LABEL_13;
        }
        if (!(void)v38) {
          goto LABEL_29;
        }
        unint64_t v17 = (int *)(*(uint64_t (**)(void))(*(void *)v38 + 24))();
LABEL_30:
        if (v37 && sub_10006941C(v37, v17)) {
          unint64_t v46 = v46 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
        }
        if (v36 && sub_10006941C(v36, v17 + 1)) {
          unint64_t v46 = v46 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
        }
        int v18 = *v17;
        int v19 = *v17;
        if (*v17 != v17[1])
        {
          unint64_t v46 = v46 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
          int v19 = v17[1];
        }
        if (v18 | v19)
        {
          if (v18)
          {
            if (!v19) {
              goto LABEL_46;
            }
            goto LABEL_42;
          }
          unint64_t v20 = v46;
        }
        else
        {
          unint64_t v20 = v46 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
        }
        unint64_t v46 = v20 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
        if (!v19)
        {
LABEL_46:
          unint64_t v46 = v46 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if (v16) {
            goto LABEL_51;
          }
          goto LABEL_47;
        }
LABEL_42:
        if (v16) {
          goto LABEL_51;
        }
LABEL_47:
        if (v18 < (int)v11) {
          unint64_t v46 = v46 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
        }
        if (v19 < SHIDWORD(v11)) {
          unint64_t v46 = v46 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
        }
LABEL_51:
        int v21 = sub_10002D854();
        HIDWORD(v47) = 0;
        HIDWORD(v47) = v17[2];
        LODWORD(v47) = 0;
        LODWORD(v47) = *v21;
        v22.n128_u32[0] = HIDWORD(v47);
        if (*((float *)&v47 + 1) != *(float *)&v47)
        {
          uint64_t v23 = sub_10002D8A8();
          HIDWORD(v47) = 0;
          HIDWORD(v47) = v17[2];
          LODWORD(v47) = 0;
          LODWORD(v47) = *v23;
          v22.n128_u32[0] = HIDWORD(v47);
          if (*((float *)&v47 + 1) != *(float *)&v47)
          {
            unint64_t v24 = v46;
            unint64_t v25 = v46 & 0xFFFFFFFCFFFFFFFFLL | (unint64_t)&_mh_execute_header;
            unint64_t v46 = v25;
            if ((v24 & 0x800000000000) != 0 && v43[(int)v15] == v43[v17[3]]) {
              unint64_t v46 = v25 & 0xFFFF3FFDFFFFFFFFLL | 0x400000000000;
            }
          }
        }
        int v26 = v17[3];
        if (v26 <= (int)v15) {
          unint64_t v46 = v46 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
        }
        if (v26 != v15 + 1) {
          unint64_t v46 = v46 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
        }
        uint64_t v11 = *(void *)v17;
        if (v37) {
          sub_1000694D0((uint64_t)v37, v17, v17);
        }
        if (v36) {
          sub_1000694D0((uint64_t)v36, v17 + 1, v17 + 1);
        }
        if ((void)v38)
        {
          (*(void (**)(void, __n128))(*(void *)v38 + 32))(v38, v22);
          char v16 = 0;
        }
        else
        {
          char v16 = 0;
          ++v40;
        }
      }
      if (v40 >= (unint64_t)v39) {
        goto LABEL_69;
      }
LABEL_29:
      unint64_t v17 = (int *)(*((void *)&v38 + 1) + 16 * v40);
      goto LABEL_30;
    }
LABEL_18:
    uint64_t v15 = v35;
    goto LABEL_19;
  }
  if (v33) {
    (*(void (**)(void))(*(void *)v33 + 8))();
  }
LABEL_84:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != -1
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    unint64_t v46 = v46 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
  }
  if (v36)
  {
    sub_10001B7F8((uint64_t)v36);
    operator delete();
  }
  if (v37)
  {
    sub_10001B7F8((uint64_t)v37);
    operator delete();
  }
  unint64_t v9 = v46;
LABEL_92:
  if (a3) {
    *a3 = v9 & 0xFFFFFFFF0000 | (2 * v9) & 0xAAAAAAAA0000 | (v9 >> 1) & 0x555555550000 | 7;
  }
  if (v43)
  {
    int v44 = v43;
    operator delete(v43);
  }
  return v9;
}

void sub_1000A1888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  sub_10002D804((uint64_t *)va, 0);
  sub_10002D804((uint64_t *)va1, 0);
  unint64_t v9 = *(void **)(v7 - 128);
  if (v9)
  {
    *(void *)(v7 - 12sub_10002B9D0((void **)&STACK[0x2A8], 0) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_1000A196C(uint64_t a1, uint64_t a2)
{
}

void sub_1000A2230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  sub_10002E6EC(&a23);
  sub_10002F120(&a27);
  __n128 v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_1000A22E8(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = v5;
    operator new();
  }
  operator new();
}

uint64_t sub_1000A24AC(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 136);
    return v2(a1);
  }
  uint64_t v5 = 0;
  int v6 = 0;
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1000A263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1000B4648();
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000A2654(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 24))(&v25);
  uint64_t result = sub_10002D8A8();
  int v26 = v25;
  HIDWORD(v25) = 0;
  HIDWORD(v25) = *result;
  if (*(float *)&v25 != *((float *)&v25 + 1)) {
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * a2) == *(_DWORD *)(**(void **)(a1 + 64) + 4 * a2))
  {
    char v7 = 0;
    unint64_t v8 = *(uint64_t **)(a1 + 80);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1] - *v8;
    uint64_t v11 = **(void **)(a1 + 16);
    uint64_t v12 = (int *)((v10 & 0xFFFFFFFFFFFFFFFCLL) + v9 - 4);
    do
    {
      unint64_t v13 = *v12--;
      v7 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
    }
    while (v13 != a2);
    int v14 = *(void **)a1;
    do
    {
      uint64_t v15 = *(void *)(a1 + 80);
      uint64_t v16 = *(void *)(v15 + 8);
      unint64_t v19 = *(int *)(v16 - 4);
      uint64_t v17 = v16 - 4;
      unint64_t v18 = v19;
      if (v14) {
        *(_DWORD *)(*v14 + 4 * v18) = *(_DWORD *)(a1 + 48);
      }
      unint64_t v20 = v18 >> 6;
      uint64_t v21 = 1 << v18;
      if (v7) {
        *(void *)(v11 + 8 * v20) |= v21;
      }
      uint64_t result = **(int ***)(a1 + 72);
      *(void *)&result[2 * v20] &= ~v21;
      *(void *)(v15 + 8) = v17;
    }
    while (v18 != a2);
    if ((v7 & 1) == 0) {
      **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
    }
    ++*(_DWORD *)(a1 + 48);
  }
  if (a3 != -1)
  {
    uint64_t v22 = **(void **)(a1 + 16);
    if ((*(void *)(v22 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2)) {
      *(void *)(v22 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    uint64_t v23 = **(void **)(a1 + 64);
    int v24 = *(_DWORD *)(v23 + 4 * a2);
    if (v24 < *(_DWORD *)(v23 + 4 * a3)) {
      *(_DWORD *)(v23 + 4 * a3) = v24;
    }
  }
  return result;
}

void *sub_1000A2858(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  return a1;
}

void sub_1000A28C0(void *a1)
{
  *a1 = off_1000F0E70;
  a1[1] = off_1000F0E98;
  sub_10002E6EC(a1 + 4);
  operator delete();
}

void sub_1000A2948(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1000A29D0(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1000A29D0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_10001943C(v5, v33);
      unsigned int v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1000267D0(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1000268E8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_10001943C((uint64_t)(a1 + 3), v46);
      unsigned int v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_10001943C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0x1000uLL);
  sub_100026A08(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100026B20((uint64_t)&v54, v27);
  }
  __n128 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1000A2C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A2CE8(void *a1, void *a2, uint64_t a3)
{
  long long v33 = 0u;
  long long v34 = 0u;
  *(_OWORD *)long long v31 = 0u;
  *(_OWORD *)long long v32 = 0u;
  uint64_t v6 = -1;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = -1;
  uint64_t v35 = (*(int (**)(void *))(*a1 + 16))(a1);
  uint64_t v36 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 56))(a1, 1, 0)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(unsigned char *)(a3 + 28) == 0;
  }
  if (!v7)
  {
    uint64_t v6 = 0;
LABEL_6:
    int v8 = 0;
    uint64_t v36 = (int)sub_1000A24AC((uint64_t)a1);
    goto LABEL_9;
  }
  uint64_t v9 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v9[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v9 + 5) + 32))(__p);
    uint64_t v6 = v39;
    if (v39 != -1) {
      goto LABEL_6;
    }
  }
  int v8 = 1;
LABEL_9:
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 56))(a1, 0xFFFFFFFF0004, 0);
  sub_100009CF0(__p, "vector");
  uint64_t v11 = v10 | 3;
  sub_1000A3230((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v11, (uint64_t)&v30 + 4);
  uint64_t v29 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v12 = *(void *)(a1[1] + 64) - *(void *)(a1[1] + 56);
  unint64_t v13 = v12 >> 3;
  if ((int)(v12 >> 3) < 1)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = (v12 >> 3);
    do
    {
      (*(void (**)(void **__return_ptr, void *, uint64_t))(*a1 + 24))(&v30, a1, v14);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = v30;
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, v14);
      std::ostream::write();
      uint64_t v16 = *(void *)(*(void *)(a1[1] + 56) + 8 * v14);
      uint64_t v17 = *(void *)(v16 + 24);
      uint64_t v18 = *(void *)(v16 + 32);
      if (v17 == v18) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = *(void *)(v16 + 24);
      }
      if (v17 != v18)
      {
        unint64_t v20 = (v18 - v17) >> 4;
        if (v20 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = v20;
        }
        unint64_t v22 = (_DWORD *)(v19 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v22 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v22 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v22;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v22[1];
          std::ostream::write();
          v22 += 4;
          --v21;
        }
        while (v21);
      }
      ++v14;
    }
    while (v14 != v15);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    sub_100009CF0(__p, "ERROR");
    sub_10002D454((BOOL *)&v30, (uint64_t)__p);
    uint64_t v23 = sub_10002D07C(&std::cerr, (uint64_t)"VectorFst::Write: Write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    sub_10002D07C(v23, v25, v26);
LABEL_33:
    sub_10002D500(&v30);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v27 = 0;
    goto LABEL_36;
  }
  if (!v8)
  {
    if (v36 == v13)
    {
      uint64_t v27 = 1;
      goto LABEL_36;
    }
    sub_100009CF0(__p, "ERROR");
    sub_10002D454((BOOL *)&v30, (uint64_t)__p);
    sub_10002D07C(&std::cerr, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_33;
  }
  uint64_t v36 = v13;
  sub_100009CF0(__p, "vector");
  uint64_t v27 = sub_1000A3458((uint64_t)a1, a2, a3, 2, __p, v11, (uint64_t)&v30 + 4, v29);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_36:
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[1]);
  }
  if (SHIBYTE(v32[0]) < 0) {
    operator delete(v31[0]);
  }
  return v27;
}

void sub_1000A31B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_10002F7F0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3230(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    unint64_t v13 = (const std::string *)sub_1000A3858();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 6sub_10002B9D0((void **)&STACK[0x2A8], 0) = v18;
    sub_1000C1AC4();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 144))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if (result && a3[26])
  {
    unint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) + 144);
    return v22();
  }
  return result;
}

uint64_t sub_1000A3458(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::ostream::sentry::sentry();
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long __p = 0u;
    long long v28 = 0u;
    uint64_t v35 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v26);
    if (v26[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  std::ostream::sentry::~sentry();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    sub_100009CF0(&__p, "ERROR");
    sub_10002D454((BOOL *)v26, (uint64_t)&__p);
    int v18 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
    int v19 = *(char *)(a3 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = *(void *)a3;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 8);
    }
  }
  else
  {
    sub_1000A3230(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      sub_100009CF0(&__p, "ERROR");
      sub_10002D454((BOOL *)v26, (uint64_t)&__p);
      int v18 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
      int v22 = *(char *)(a3 + 23);
      if (v22 >= 0) {
        uint64_t v20 = a3;
      }
      else {
        uint64_t v20 = *(void *)a3;
      }
      if (v22 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v21 = *(void *)(a3 + 8);
      }
    }
    else
    {
      std::ostream::sentry::sentry();
      uint64_t v23 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v23[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v23 + 5) + 32))(&__p);
        if (v35 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      std::ostream::sentry::~sentry();
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      sub_100009CF0(&__p, "ERROR");
      sub_10002D454((BOOL *)v26, (uint64_t)&__p);
      int v18 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
      int v24 = *(char *)(a3 + 23);
      if (v24 >= 0) {
        uint64_t v20 = a3;
      }
      else {
        uint64_t v20 = *(void *)a3;
      }
      if (v24 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v21 = *(void *)(a3 + 8);
      }
    }
  }
  sub_10002D07C(v18, v20, v21);
  sub_10002D500(v26);
  if (SBYTE7(v28) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1000A37F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t sub_1000A3858()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000FE880, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000FE880))
  {
    operator new();
  }
  return qword_1000FE878;
}

void sub_1000A38E4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A391C(uint64_t a1, void **a2)
{
  BOOL v3 = (void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v3 < 0) {
    BOOL v3 = a2[1];
  }
  if (v3)
  {
    sub_10002FE48((void (__cdecl ***)(std::ofstream *__hidden))__p);
    if ((v29[*((void *)__p[0] - 3)] & 5) != 0)
    {
      sub_100009CF0(v16, "ERROR");
      sub_10002D454(&v22, (uint64_t)v16);
      uint64_t v5 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::Write: Can't open file: ", 29);
      int v6 = *((char *)a2 + 23);
      if (v6 >= 0) {
        BOOL v7 = a2;
      }
      else {
        BOOL v7 = *a2;
      }
      if (v6 >= 0) {
        uint64_t v8 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        uint64_t v8 = (uint64_t)a2[1];
      }
      goto LABEL_31;
    }
    char v10 = byte_1000FF647;
    if (*((char *)a2 + 23) < 0)
    {
      sub_10006770C(v16, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)a2;
      uint64_t v17 = a2[2];
    }
    __int16 v18 = 257;
    char v19 = 1;
    char v20 = v10;
    char v21 = 0;
    char v12 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)a1 + 80))(a1, __p, v16);
    char v13 = v12;
    if (SHIBYTE(v17) < 0)
    {
      operator delete(v16[0]);
      if (v13) {
        goto LABEL_23;
      }
    }
    else if (v12)
    {
LABEL_23:
      uint64_t v11 = 1;
LABEL_34:
      std::filebuf::~filebuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return v11;
    }
    sub_100009CF0(v16, "ERROR");
    sub_10002D454(&v22, (uint64_t)v16);
    uint64_t v5 = sub_10002D07C(&std::cerr, (uint64_t)"Fst::Write failed: ", 19);
    int v14 = *((char *)a2 + 23);
    if (v14 >= 0) {
      BOOL v7 = a2;
    }
    else {
      BOOL v7 = *a2;
    }
    if (v14 >= 0) {
      uint64_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v8 = (uint64_t)a2[1];
    }
LABEL_31:
    sub_10002D07C(v5, (uint64_t)v7, v8);
    sub_10002D500(&v22);
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
    uint64_t v11 = 0;
    goto LABEL_34;
  }
  sub_100009CF0(v16, "standard output");
  char v9 = byte_1000FF647;
  if (SHIBYTE(v17) < 0)
  {
    sub_10006770C(__p, v16[0], (unint64_t)v16[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v16;
    int v24 = v17;
  }
  __int16 v25 = 257;
  char v26 = 1;
  char v27 = v9;
  char v28 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, std::ostream *, void **))(*(void *)a1 + 80))(a1, &std::cout, __p);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  return v11;
}

void sub_1000A3C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void *sub_1000A3D1C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x70uLL);
  uint64_t result = sub_1000A3D78(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1000A3D64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000A3D78(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000F3500;
  sub_1000A3DD4((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1000A3DC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3DD4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000F35F0;
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (std::string *)(a1 + 16);
  sub_100009CF0((void *)(a1 + 16), "null");
  *(void *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v5 = (void *)(a1 + 56);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = -1;
  *(void *)a1 = off_1000F3550;
  sub_100009CF0(__p, "vector");
  std::string::operator=(v4, (const std::string *)__p);
  if (SBYTE7(v14) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  sub_100030234(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  sub_1000302D4(a1, v7);
  *(_DWORD *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 1, 0))
  {
    int v8 = sub_1000A24AC(a2);
    sub_1000306A4((void **)(a1 + 56), v8);
  }
  uint64_t v17 = 0;
  int v18 = 0;
  unsigned int v19 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 112))(a2, &v17);
  while (1)
  {
    if (!v17)
    {
      if ((int)v19 >= v18) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v19;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 16))(v17)) {
      break;
    }
    if (!v17) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v17 + 24))();
LABEL_12:
    sub_100030374((void *)a1);
    (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 24))(&v16, a2, v9);
    **(_DWORD **)(*v5 + 8 * (int)v9) = v16;
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
    sub_1000A437C((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 24), v10);
    unint64_t v15 = 0;
    *(_OWORD *)long long __p = 0u;
    long long v14 = 0u;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 120))(a2, v9, __p);
    while (1)
    {
      if (!__p[0])
      {
        if (v15 >= (unint64_t)v14) {
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v11 = (char *)__p[1] + 16 * v15;
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 16))(__p[0])) {
        break;
      }
      if (!__p[0]) {
        goto LABEL_18;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p[0] + 24))();
LABEL_19:
      sub_1000A4458(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 32))(__p[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p[0])
    {
      (*(void (**)(void))(*(void *)__p[0] + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (*((void *)&v14 + 1)) {
      --**((_DWORD **)&v14 + 1);
    }
LABEL_26:
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 32))(v17);
    }
    else {
      ++v19;
    }
  }
  if (v17) {
    (*(void (**)(void))(*(void *)v17 + 8))();
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0xFFFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1000A42BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  sub_1000A09F4(v19);
  _Unwind_Resume(a1);
}

void sub_1000A437C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_100019424();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    long long __p = sub_10001A898(v3, a2);
    int v8 = (char *)__p + v5;
    uint64_t v9 = (char *)__p + v5;
    unint64_t v10 = (char *)__p + 16 * v6;
    sub_100030828(a1, &__p);
    if (v9 != v8) {
      v9 += (v8 - v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1000A4420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A4458(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[1];
  }
  if (!a2[1]) {
    ++a1[2];
  }
  unint64_t v3 = a1[4];
  if (v3 >= a1[5])
  {
    uint64_t result = sub_1000A44D8(a1 + 3, (uint64_t)a2);
  }
  else
  {
    *(void *)unint64_t v3 = *(void *)a2;
    *(_DWORD *)(v3 + 8) = a2[2];
    *(_DWORD *)(v3 + 12) = a2[3];
    uint64_t result = v3 + 16;
  }
  a1[4] = result;
  return result;
}

uint64_t sub_1000A44D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100019424();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned int v19 = a1 + 2;
  unint64_t v10 = (char *)sub_10001A898(v7, v9);
  uint64_t v11 = &v10[16 * v4];
  long long __p = v10;
  int v16 = v11;
  int v18 = &v10[16 * v12];
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  uint64_t v17 = v11 + 16;
  sub_100030828(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    v17 += (v16 - v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_1000A45CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A4604(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2 || *(void *)(v2 + 8))
  {
    sub_1000A467C(a1, &v6);
    uint64_t v4 = v6;
    uint64_t v3 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v3;
    if (v5) {
      sub_100018BC0(v5);
    }
    if (v7) {
      sub_100018BC0(v7);
    }
  }
}

void *sub_1000A467C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  uint64_t result = sub_1000A46D8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1000A46C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000A46D8(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000F3500;
  sub_1000A3DD4((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1000A4720(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

float sub_1000A4734(void *a1, int a2, float *a3)
{
  int v9 = **(_DWORD **)(a1[7] + 8 * a2);
  unint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  uint64_t v7 = sub_10006A1DC(v6, (float *)&v9, a3);
  float result = *a3;
  **(float **)(a1[7] + 8 * a2) = *a3;
  a1[1] = a1[1] & 4 | v7;
  return result;
}

uint64_t sub_1000A47CC(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[7] + 8 * a2) + 32);
  if (v6 == *(void *)(*(void *)(a1[7] + 8 * a2) + 24)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (_DWORD *)(v6 - 16);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  a1[1] = a1[1] & 4 | sub_10006A2E0(v8, a2, a3, v7);
  int v9 = *(void **)(a1[7] + 8 * a2);
  return sub_1000A4458(v9, a3);
}

void sub_1000A4874(uint64_t a1, char **a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 56);
  unint64_t v5 = (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3;
  int v35 = 0;
  sub_100030FD0(__p, v5, &v35);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    int v9 = __p[0];
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      v9[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 64) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (*((_DWORD *)__p[0] + v12) == -1)
      {
        sub_100030A58(*(void **)(v11 + 8 * v12));
      }
      else
      {
        *((_DWORD *)__p[0] + v12) = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 56);
    }
    while (v12 < (*(void *)(a1 + 64) - v11) >> 3);
  }
  sub_100030F4C((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 64) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      uint64_t v17 = *(void *)(v16 + 24);
      uint64_t v18 = *(void *)(v16 + 32);
      int64x2_t v19 = *(int64x2_t *)(v16 + 8);
      uint64_t v21 = v18 - v17;
      BOOL v20 = v18 == v17;
      if (v18 == v17) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = *(void *)(v16 + 24);
      }
      if (v20)
      {
        int64x2_t v34 = *(int64x2_t *)(v16 + 8);
        uint64_t v24 = 0;
        uint64_t v31 = v21 >> 4;
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
        __int16 v25 = (int *)(v22 + 12);
        do
        {
          int v26 = *((_DWORD *)__p[0] + *v25);
          if (v26 == -1)
          {
            uint64_t v28 = *(void *)(v25 - 3);
            v29.i64[0] = v28;
            v29.i64[1] = HIDWORD(v28);
            int64x2_t v19 = vaddq_s64(v19, vceqzq_s64(v29));
          }
          else
          {
            *__int16 v25 = v26;
            if (v23 != v24)
            {
              uint64_t v27 = v22 + 16 * v24;
              *(void *)uint64_t v27 = *(void *)(v25 - 3);
              *(_DWORD *)(v27 + 8) = *(v25 - 1);
              *(_DWORD *)(v27 + 12) = v26;
              uint64_t v14 = *v4;
            }
            ++v24;
          }
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          ++v23;
          uint64_t v30 = *(void *)(v16 + 32) - *(void *)(v16 + 24);
          v25 += 4;
        }
        while (v23 < v30 >> 4);
        int64x2_t v34 = v19;
        uint64_t v31 = v30 >> 4;
      }
      sub_100030F7C((void *)v16, v31 - v24);
      uint64_t v14 = *(void *)(a1 + 56);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 8) = v34;
    }
    while (v15 < (*(void *)(a1 + 64) - v14) >> 3);
  }
  uint64_t v32 = *(int *)(a1 + 80);
  if (v32 == -1)
  {
    long long v33 = __p[0];
    if (!__p[0]) {
      return;
    }
  }
  else
  {
    long long v33 = __p[0];
    *(_DWORD *)(a1 + 8sub_10002B9D0((void **)&STACK[0x2A8], 0) = *((_DWORD *)__p[0] + v32);
  }
  __p[1] = v33;
  operator delete(v33);
}

void sub_1000A4A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A4AB0()
{
}

BOOL sub_1000A4AC4(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                                            - *(void *)(*(void *)(a1 + 8) + 24)) >> 4);
}

uint64_t sub_1000A4AE0(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 16 * *(void *)(a1 + 24);
}

uint64_t sub_1000A4AF4(uint64_t result)
{
  return result;
}

uint64_t sub_1000A4B04(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1000A4B0C(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_1000A4B14(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_1000A4B1C()
{
  return 15;
}

int *sub_1000A4B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 24);
  uint64_t v6 = (int *)(v5 + 16 * v4);
  int v7 = *v6;
  int v8 = v6[1];
  if (v7 != v8) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v7)
  {
    if (!v8)
    {
      int v9 = *(unint64_t **)(a1 + 16);
      unint64_t v10 = *v9;
LABEL_8:
      *int v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    int v9 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      unint64_t v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *int v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  uint64_t v12 = v5 + 16 * v4;
  int v13 = sub_10002D8A8();
  float v15 = *(float *)(v12 + 8);
  uint64_t v14 = (float *)(v12 + 8);
  if (v15 != *(float *)v13 && *v14 != *(float *)sub_10002D854()) {
    **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  sub_100031644(*(void **)(a1 + 8), a2, *(void *)(a1 + 24));
  int v16 = *(_DWORD *)a2;
  int v17 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v17) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v16)
  {
    if (!v17)
    {
      uint64_t v18 = *(unint64_t **)(a1 + 16);
      unint64_t v19 = *v18;
LABEL_19:
      *uint64_t v18 = v19 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    uint64_t v18 = *(unint64_t **)(a1 + 16);
    unint64_t v20 = *v18 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *uint64_t v18 = v20;
    if (!v17)
    {
      unint64_t v19 = v20 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *uint64_t v18 = v19;
      goto LABEL_19;
    }
  }
  float result = sub_10002D8A8();
  if (*(float *)(a2 + 8) != *(float *)result)
  {
    float result = sub_10002D854();
    if (*(float *)(a2 + 8) != *(float *)result) {
      **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | (unint64_t)&_mh_execute_header;
    }
  }
  **(void **)(a1 + 16) &= 0x30FC30007uLL;
  return result;
}

void sub_1000A4D30(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = off_1000F3010;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v3 = (void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v8 = 0;
        __p[0] = v3;
        __p[1] = 0;
        __p[2] = 0;
        __p[3] = &v8;
        long long v6 = 0u;
        long long v7 = 0u;
        sub_1000A196C(a2, (uint64_t)__p);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1000A5830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_10002D500(&a17);
  if (a14 < 0)
  {
    operator delete(__p);
    if (v28) {
LABEL_10:
    }
      operator delete();
  }
  else if (v28)
  {
    goto LABEL_10;
  }
  if (v29) {
    operator delete();
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  sub_10002D794(&a21);
  uint64_t v32 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 56) = v32;
    operator delete(v32);
  }
  sub_1000972A8((void ***)&a21);
  uint64_t v33 = *v30;
  *uint64_t v30 = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A5A2C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a3, 4 * v12);
  }
  uint64_t v32 = 0;
  int v33 = 0;
  unsigned int v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v32);
  while (1)
  {
    uint64_t result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33) {
        return result;
      }
LABEL_11:
      uint64_t v15 = v34;
      goto LABEL_12;
    }
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
    uint64_t result = v32;
    if (v14) {
      break;
    }
    if (!v32) {
      goto LABEL_11;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v32 + 24))();
LABEL_12:
    unint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v15, &v29);
    uint64_t v16 = (int)v15;
    while (1)
    {
      if (!(void)v29)
      {
        if (v31 >= (unint64_t)v30) {
          goto LABEL_38;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v29 + 16))(v29)) {
        break;
      }
      if ((void)v29)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v29 + 24))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = *((void *)&v29 + 1) + 16 * v31;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 12)))
      {
        unint64_t v19 = *(_DWORD **)a3;
        if (!a4
          || (unint64_t v20 = sub_10002D854(), v21 = (float *)(v17 + 8), sub_100096070(a4, (float *)(v17 + 8), (float *)v20)))
        {
          int v22 = 1;
          goto LABEL_23;
        }
        if ((v19[v18] | 2) == 2)
        {
          uint64_t v26 = sub_10002D8A8();
          float v36 = 0.0;
          float v36 = *v21;
          float v35 = 0.0;
          float v35 = *(float *)v26;
          if (v36 == v35 || (v27 = sub_10002D854(), v36 = 0.0, v36 = *v21, float v35 = 0.0, float v35 = *(float *)v27, v36 == v35)) {
            int v22 = 2;
          }
          else {
            int v22 = 3;
          }
LABEL_23:
          v19[v18] = v22;
        }
        *a5 = 0;
      }
      unint64_t v23 = sub_10002D8A8();
      float v36 = 0.0;
      float v36 = *(float *)(v17 + 8);
      float v35 = 0.0;
      float v35 = *(float *)v23;
      v24.n128_f32[0] = v36;
      if (v36 != v35)
      {
        __int16 v25 = sub_10002D854();
        float v36 = 0.0;
        float v36 = *(float *)(v17 + 8);
        float v35 = 0.0;
        float v35 = *(float *)v25;
        v24.n128_f32[0] = v36;
        if (v36 != v35) {
          *a6 = 0;
        }
      }
      if ((void)v29) {
        (*(void (**)(void, __n128))(*(void *)v29 + 32))(v29, v24);
      }
      else {
        ++v31;
      }
    }
    if ((void)v29)
    {
      (*(void (**)(void))(*(void *)v29 + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (*((void *)&v30 + 1)) {
      --**((_DWORD **)&v30 + 1);
    }
LABEL_40:
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 32))(v32);
    }
    else {
      ++v34;
    }
  }
  if (v32) {
    return (*(uint64_t (**)(void))(*(void *)v32 + 8))();
  }
  return result;
}

void sub_1000A5E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A5EC4(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = off_1000F30F0;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v4 = 0;
  uint64_t v1 = a1 + 24;
  uint64_t v2 = &v4;
  uint64_t v3 = 0;
  sub_1000A60A4();
}

void sub_1000A6030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21) {
    sub_10002E360(v23, a21);
  }
  uint64_t v26 = *v22;
  if (*v22)
  {
    *(void *)(v21 + 56) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *v24;
  if (*v24)
  {
    *(void *)(v21 + 32) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A60A4()
{
}

void sub_1000A6954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  sub_10002E6EC(&a23);
  sub_10002F120(&a27);
  long long v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A6A14(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))(*a1) == -1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 56))(*a1, 4, 0);
    if (!result) {
      return result;
    }
    uint64_t v181 = (char *)a1 + 140;
    goto LABEL_269;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = a1[8];
    a1[12] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))();
  }
  unint64_t v4 = a2;
  uint64_t v5 = a1[1];
  long long v6 = (int **)(v5 + 8);
  if (a2 >= (unint64_t)((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2))
  {
    uint64_t v185 = (void **)(a1 + 5);
    long long v7 = (void **)(a1 + 8);
    do
    {
      uint64_t v8 = sub_10002D8A8();
      int v9 = v8;
      unint64_t v10 = *(void *)(v5 + 16);
      uint64_t v11 = *(int **)(v5 + 8);
      if ((unint64_t)v11 >= v10)
      {
        int v13 = *(int **)v5;
        uint64_t v14 = ((uint64_t)v11 - *(void *)v5) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)sub_10002EE10(v5 + 16, v17);
          uint64_t v11 = *v6;
          int v13 = *(int **)v5;
        }
        else
        {
          uint64_t v18 = 0;
        }
        unint64_t v19 = (int *)&v18[4 * v14];
        int *v19 = *v9;
        unint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          int v20 = *--v11;
          *--unint64_t v19 = v20;
        }
        *(void *)uint64_t v5 = v19;
        int *v6 = v12;
        *(void *)(v5 + 16) = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *uint64_t v11 = *v8;
        unint64_t v12 = v11 + 1;
      }
      int *v6 = v12;
      int v21 = *sub_10002D8A8();
      uint64_t v23 = (int *)a1[6];
      unint64_t v22 = a1[7];
      if ((unint64_t)v23 >= v22)
      {
        __int16 v25 = (int *)*v185;
        uint64_t v26 = ((char *)v23 - (unsigned char *)*v185) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
LABEL_275:
        }
          sub_100019424();
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          long long v30 = (char *)sub_10002EE10((uint64_t)(a1 + 7), v29);
          __int16 v25 = (int *)a1[5];
          uint64_t v23 = (int *)a1[6];
        }
        else
        {
          long long v30 = 0;
        }
        unint64_t v31 = (int *)&v30[4 * v26];
        *unint64_t v31 = v21;
        __n128 v24 = v31 + 1;
        while (v23 != v25)
        {
          int v32 = *--v23;
          *--unint64_t v31 = v32;
        }
        a1[5] = v31;
        a1[6] = v24;
        a1[7] = &v30[4 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *uint64_t v23 = v21;
        __n128 v24 = v23 + 1;
      }
      a1[6] = v24;
      int v33 = *sub_10002D8A8();
      float v35 = (int *)a1[9];
      unint64_t v34 = a1[10];
      if ((unint64_t)v35 >= v34)
      {
        uint64_t v37 = (int *)*v7;
        uint64_t v38 = ((char *)v35 - (unsigned char *)*v7) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v40 = v34 - (void)v37;
        if (v40 >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          uint64_t v42 = (char *)sub_10002EE10((uint64_t)(a1 + 10), v41);
          uint64_t v37 = (int *)a1[8];
          float v35 = (int *)a1[9];
        }
        else
        {
          uint64_t v42 = 0;
        }
        long long v43 = (int *)&v42[4 * v38];
        *long long v43 = v33;
        float v36 = v43 + 1;
        while (v35 != v37)
        {
          int v44 = *--v35;
          *--long long v43 = v44;
        }
        a1[8] = v43;
        a1[9] = v36;
        a1[10] = &v42[4 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *float v35 = v33;
        float v36 = v35 + 1;
      }
      a1[9] = v36;
      LOBYTE(v187) = 0;
      sub_10002ED68((uint64_t)(a1 + 11), &v187);
      uint64_t v5 = a1[1];
      long long v6 = (int **)(v5 + 8);
    }
    while (v4 >= (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
  }
  if (*((unsigned char *)a1 + 33))
  {
    uint64_t v45 = (char *)a1[14];
    unint64_t v46 = (char *)a1[15];
    unint64_t v47 = (v46 - v45) >> 2;
    if (v47 <= v4)
    {
      unint64_t v48 = a1 + 16;
      do
      {
        if ((unint64_t)v46 >= *v48)
        {
          unint64_t v50 = v47 + 1;
          if ((v47 + 1) >> 62) {
            sub_100019424();
          }
          uint64_t v51 = *v48 - (void)v45;
          if (v51 >> 1 > v50) {
            unint64_t v50 = v51 >> 1;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52)
          {
            float v53 = (char *)sub_10002EE10((uint64_t)(a1 + 16), v52);
            uint64_t v45 = (char *)a1[14];
            unint64_t v46 = (char *)a1[15];
          }
          else
          {
            float v53 = 0;
          }
          long long v54 = &v53[4 * v47];
          *(_DWORD *)long long v54 = -1;
          uint64_t v49 = v54 + 4;
          while (v46 != v45)
          {
            int v55 = *((_DWORD *)v46 - 1);
            v46 -= 4;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          a1[14] = v54;
          a1[15] = v49;
          a1[16] = &v53[4 * v52];
          if (v45)
          {
            operator delete(v45);
            uint64_t v45 = (char *)a1[14];
          }
          else
          {
            uint64_t v45 = v54;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v46 = -1;
          uint64_t v49 = v46 + 4;
        }
        a1[15] = v49;
        unint64_t v47 = (v49 - v45) >> 2;
        unint64_t v46 = v49;
      }
      while (v47 <= v4);
    }
    *(_DWORD *)&v45[4 * v4] = *((_DWORD *)a1 + 34);
  }
  *(_DWORD *)(*(void *)a1[1] + 4 * v4) = *sub_10002D854();
  uint64_t v56 = a1[5];
  uint64_t v184 = (void **)(a1 + 5);
  *(_DWORD *)(v56 + 4 * v4) = *sub_10002D854();
  uint64_t v57 = a1[8];
  v186 = (void **)(a1 + 8);
  *(_DWORD *)(v57 + 4 * v4) = *sub_10002D854();
  *(void *)(a1[11] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v4);
  uint64_t v182 = (uint64_t)(a1 + 10);
  uint64_t v183 = (uint64_t)(a1 + 7);
  float v58 = a1 + 16;
  uint64_t v181 = (char *)a1 + 140;
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_265;
    }
    int v60 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    unint64_t v61 = v60;
    while (1)
    {
      uint64_t v62 = (int **)a1[1];
      int v63 = v62 + 1;
      if (v61 < v62[1] - *v62) {
        break;
      }
      unint64_t v64 = sub_10002D8A8();
      unint64_t v65 = v64;
      unint64_t v66 = (unint64_t)v62[2];
      BOOL v67 = v62[1];
      if ((unint64_t)v67 >= v66)
      {
        uint64_t v69 = *v62;
        uint64_t v70 = v67 - *v62;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v72 = v66 - (void)v69;
        if (v72 >> 1 > v71) {
          unint64_t v71 = v72 >> 1;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        if (v73)
        {
          BOOL v74 = (char *)sub_10002EE10((uint64_t)(v62 + 2), v73);
          BOOL v67 = *v63;
          uint64_t v69 = *v62;
        }
        else
        {
          BOOL v74 = 0;
        }
        int v75 = (int *)&v74[4 * v70];
        int *v75 = *v65;
        uint64_t v68 = v75 + 1;
        while (v67 != v69)
        {
          int v76 = *--v67;
          *--int v75 = v76;
        }
        void *v62 = v75;
        char *v63 = v68;
        v62[2] = (int *)&v74[4 * v73];
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        int *v67 = *v64;
        uint64_t v68 = v67 + 1;
      }
      char *v63 = v68;
      int v77 = *sub_10002D8A8();
      float v79 = (int *)a1[6];
      unint64_t v78 = a1[7];
      if ((unint64_t)v79 >= v78)
      {
        uint64_t v81 = (int *)*v184;
        uint64_t v82 = ((char *)v79 - (unsigned char *)*v184) >> 2;
        unint64_t v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62) {
          sub_100019424();
        }
        uint64_t v84 = v78 - (void)v81;
        if (v84 >> 1 > v83) {
          unint64_t v83 = v84 >> 1;
        }
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v85 = v83;
        }
        if (v85)
        {
          NSString v86 = (char *)sub_10002EE10(v183, v85);
          uint64_t v81 = (int *)a1[5];
          float v79 = (int *)a1[6];
        }
        else
        {
          NSString v86 = 0;
        }
        NSString v87 = (int *)&v86[4 * v82];
        *NSString v87 = v77;
        int v80 = v87 + 1;
        while (v79 != v81)
        {
          int v88 = *--v79;
          *--NSString v87 = v88;
        }
        a1[5] = v87;
        a1[6] = v80;
        a1[7] = &v86[4 * v85];
        if (v81) {
          operator delete(v81);
        }
      }
      else
      {
        *float v79 = v77;
        int v80 = v79 + 1;
      }
      a1[6] = v80;
      int v89 = *sub_10002D8A8();
      unint64_t v91 = (int *)a1[9];
      unint64_t v90 = a1[10];
      if ((unint64_t)v91 >= v90)
      {
        long long v93 = (int *)*v186;
        uint64_t v94 = ((char *)v91 - (unsigned char *)*v186) >> 2;
        unint64_t v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62) {
          goto LABEL_275;
        }
        uint64_t v96 = v90 - (void)v93;
        if (v96 >> 1 > v95) {
          unint64_t v95 = v96 >> 1;
        }
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v95;
        }
        if (v97)
        {
          uint64_t v98 = (char *)sub_10002EE10(v182, v97);
          long long v93 = (int *)a1[8];
          unint64_t v91 = (int *)a1[9];
        }
        else
        {
          uint64_t v98 = 0;
        }
        uint64_t v99 = (int *)&v98[4 * v94];
        *uint64_t v99 = v89;
        uint64_t v92 = v99 + 1;
        while (v91 != v93)
        {
          int v100 = *--v91;
          *--uint64_t v99 = v100;
        }
        a1[8] = v99;
        a1[9] = v92;
        a1[10] = &v98[4 * v97];
        if (v93) {
          operator delete(v93);
        }
      }
      else
      {
        *unint64_t v91 = v89;
        uint64_t v92 = v91 + 1;
      }
      a1[9] = v92;
      LOBYTE(v187) = 0;
      sub_10002ED68((uint64_t)(a1 + 11), &v187);
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v190);
      uint64_t v101 = sub_10002D8A8();
      LODWORD(v187) = v190;
      HIDWORD(v19sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
      HIDWORD(v19sub_10002B9D0((void **)&STACK[0x2A8], 0) = *v101;
      v59.n128_u32[0] = v190;
      if (*(float *)&v190 != *((float *)&v190 + 1))
      {
LABEL_265:
        ++*((_DWORD *)a1 + 34);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, void, __n128))(*(void *)*a1 + 56))(*a1, 4, 0, v59);
        if (!result) {
          return result;
        }
LABEL_269:
        *uint64_t v181 = 1;
        return result;
      }
    }
    *(void *)(a1[11] + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v61);
    uint64_t v102 = a1[8];
    float v103 = *(float *)(v102 + 4 * v61);
    *(_DWORD *)(v102 + 4 * v61) = *sub_10002D8A8();
    uint64_t v104 = *a1;
    long long v187 = 0u;
    long long v188 = 0u;
    unint64_t v189 = 0;
    (*(void (**)(uint64_t, unint64_t, long long *))(*(void *)v104 + 120))(v104, v61, &v187);
    while (1)
    {
      if ((void)v187)
      {
        if ((*(uint64_t (**)(void))(*(void *)v187 + 16))(v187)) {
          goto LABEL_257;
        }
        if ((void)v187)
        {
          uint64_t v105 = (*(uint64_t (**)(void))(*(void *)v187 + 24))(v187);
          goto LABEL_141;
        }
      }
      else if (v189 >= (unint64_t)v188)
      {
LABEL_257:
        char v179 = 1;
        goto LABEL_259;
      }
      uint64_t v105 = *((void *)&v187 + 1) + 16 * v189;
LABEL_141:
      uint64_t v106 = a1[1];
      uint64_t v107 = (int **)(v106 + 8);
      for (unint64_t i = *(int *)(v105 + 12); i >= (uint64_t)(*(void *)(v106 + 8) - *(void *)v106) >> 2; unint64_t i = *(int *)(v105 + 12))
      {
        uint64_t v109 = sub_10002D8A8();
        int v110 = v109;
        uint64_t v111 = *v107;
        unint64_t v112 = *(void *)(v106 + 16);
        if ((unint64_t)*v107 >= v112)
        {
          uint64_t v114 = *(int **)v106;
          uint64_t v115 = ((uint64_t)v111 - *(void *)v106) >> 2;
          unint64_t v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) >> 62) {
            sub_100019424();
          }
          uint64_t v117 = v112 - (void)v114;
          if (v117 >> 1 > v116) {
            unint64_t v116 = v117 >> 1;
          }
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v118 = v116;
          }
          if (v118)
          {
            NSString v119 = (char *)sub_10002EE10(v106 + 16, v118);
            uint64_t v111 = *v107;
            uint64_t v114 = *(int **)v106;
          }
          else
          {
            NSString v119 = 0;
          }
          id v120 = (int *)&v119[4 * v115];
          *id v120 = *v110;
          int v113 = v120 + 1;
          while (v111 != v114)
          {
            int v121 = *--v111;
            *--id v120 = v121;
          }
          *(void *)uint64_t v106 = v120;
          *uint64_t v107 = v113;
          *(void *)(v106 + 16) = &v119[4 * v118];
          if (v114) {
            operator delete(v114);
          }
        }
        else
        {
          *uint64_t v111 = *v109;
          int v113 = v111 + 1;
        }
        *uint64_t v107 = v113;
        int v122 = *sub_10002D8A8();
        uint64_t v124 = (int *)a1[6];
        unint64_t v123 = a1[7];
        if ((unint64_t)v124 >= v123)
        {
          uint64_t v126 = (int *)*v184;
          uint64_t v127 = ((char *)v124 - (unsigned char *)*v184) >> 2;
          unint64_t v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 62) {
            sub_100019424();
          }
          uint64_t v129 = v123 - (void)v126;
          if (v129 >> 1 > v128) {
            unint64_t v128 = v129 >> 1;
          }
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v130 = v128;
          }
          if (v130)
          {
            uint64_t v131 = (char *)sub_10002EE10(v183, v130);
            uint64_t v126 = (int *)a1[5];
            uint64_t v124 = (int *)a1[6];
          }
          else
          {
            uint64_t v131 = 0;
          }
          uint64_t v132 = (int *)&v131[4 * v127];
          *uint64_t v132 = v122;
          uint64_t v125 = v132 + 1;
          while (v124 != v126)
          {
            int v133 = *--v124;
            *--uint64_t v132 = v133;
          }
          a1[5] = v132;
          a1[6] = v125;
          a1[7] = &v131[4 * v130];
          if (v126) {
            operator delete(v126);
          }
        }
        else
        {
          *uint64_t v124 = v122;
          uint64_t v125 = v124 + 1;
        }
        a1[6] = v125;
        int v134 = *sub_10002D8A8();
        id v136 = (int *)a1[9];
        unint64_t v135 = a1[10];
        if ((unint64_t)v136 >= v135)
        {
          uint64_t v138 = (int *)*v186;
          uint64_t v139 = ((char *)v136 - (unsigned char *)*v186) >> 2;
          unint64_t v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 62) {
            sub_100019424();
          }
          uint64_t v141 = v135 - (void)v138;
          if (v141 >> 1 > v140) {
            unint64_t v140 = v141 >> 1;
          }
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v142 = v140;
          }
          if (v142)
          {
            uint64_t v143 = (char *)sub_10002EE10(v182, v142);
            uint64_t v138 = (int *)a1[8];
            id v136 = (int *)a1[9];
          }
          else
          {
            uint64_t v143 = 0;
          }
          double v144 = (int *)&v143[4 * v139];
          *double v144 = v134;
          uint64_t v137 = v144 + 1;
          while (v136 != v138)
          {
            int v145 = *--v136;
            *--double v144 = v145;
          }
          a1[8] = v144;
          a1[9] = v137;
          a1[10] = &v143[4 * v142];
          if (v138) {
            operator delete(v138);
          }
        }
        else
        {
          *id v136 = v134;
          uint64_t v137 = v136 + 1;
        }
        a1[9] = v137;
        BYTE4(v19sub_10002B9D0((void **)&STACK[0x2A8], 0) = 0;
        sub_10002ED68((uint64_t)(a1 + 11), (unsigned char *)&v190 + 4);
        uint64_t v106 = a1[1];
        uint64_t v107 = (int **)(v106 + 8);
      }
      if (*((unsigned char *)a1 + 33))
      {
        int v146 = (char *)a1[14];
        uint64_t v147 = (char *)a1[15];
        unint64_t v148 = (v147 - v146) >> 2;
        if (v148 <= (int)i)
        {
          do
          {
            if ((unint64_t)v147 >= *v58)
            {
              unint64_t v151 = v148 + 1;
              if ((v148 + 1) >> 62) {
                sub_100019424();
              }
              uint64_t v152 = *v58 - (void)v146;
              if (v152 >> 1 > v151) {
                unint64_t v151 = v152 >> 1;
              }
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v151;
              }
              if (v153)
              {
                double v154 = (char *)sub_10002EE10((uint64_t)(a1 + 16), v153);
                int v146 = (char *)a1[14];
                uint64_t v147 = (char *)a1[15];
              }
              else
              {
                double v154 = 0;
              }
              char v155 = &v154[4 * v148];
              *(_DWORD *)char v155 = -1;
              int v150 = v155 + 4;
              while (v147 != v146)
              {
                int v156 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v155 - 1) = v156;
                v155 -= 4;
              }
              a1[14] = v155;
              a1[15] = v150;
              a1[16] = &v154[4 * v153];
              if (v146)
              {
                operator delete(v146);
                int v146 = (char *)a1[14];
              }
              else
              {
                int v146 = v155;
              }
            }
            else
            {
              *(_DWORD *)uint64_t v147 = -1;
              int v150 = v147 + 4;
            }
            a1[15] = v150;
            unint64_t v148 = (v150 - v146) >> 2;
            int v157 = *(_DWORD *)(v105 + 12);
            uint64_t v147 = v150;
          }
          while (v148 <= v157);
          uint64_t v149 = v157;
          LODWORD(i) = *(_DWORD *)(v105 + 12);
        }
        else
        {
          uint64_t v149 = (int)i;
        }
        if (*(_DWORD *)&v146[4 * v149] != *((_DWORD *)a1 + 34))
        {
          NSString v158 = sub_10002D8A8();
          uint64_t v159 = *(int *)(v105 + 12);
          *(_DWORD *)(*(void *)a1[1] + 4 * v159) = *v158;
          uint64_t v160 = a1[5];
          *(_DWORD *)(v160 + 4 * v159) = *sub_10002D8A8();
          uint64_t v161 = *(int *)(v105 + 12);
          unint64_t i = (unint64_t)*v186;
          *(_DWORD *)(i + 4 * v161) = *sub_10002D8A8();
          unint64_t v162 = *(int *)(v105 + 12);
          *(void *)(a1[11] + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v162);
          *(_DWORD *)(a1[14] + 4 * v162) = *((_DWORD *)a1 + 34);
          LODWORD(i) = *(_DWORD *)(v105 + 12);
        }
      }
      uint64_t v163 = *(void *)a1[1];
      uint64_t v164 = a1[5];
      uint64_t v165 = a1[8];
      if (v103 == -INFINITY || (float v166 = *(float *)(v105 + 8), v166 >= -INFINITY) && v166 <= -INFINITY)
      {
        float v167 = *(float *)sub_10006ECE4();
      }
      else
      {
        BOOL v168 = v166 == INFINITY || v103 == INFINITY;
        float v169 = v103 + v166;
        float v167 = v168 ? INFINITY : v169;
      }
      float v170 = *(float *)(v163 + 4 * (int)i);
      if (v170 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
      {
        float v171 = *(float *)sub_10006ECE4();
        float v170 = *(float *)(v163 + 4 * (int)i);
      }
      else
      {
        float v171 = v170 >= v167 ? v167 : *(float *)(v163 + 4 * (int)i);
      }
      float v172 = *((float *)a1 + 7);
      float v173 = v171 + v172;
      float v174 = v172 + v170;
      if (v170 > v173 || v171 > v174) {
        break;
      }
LABEL_254:
      if ((void)v187) {
        (*(void (**)(void))(*(void *)v187 + 32))(v187);
      }
      else {
        ++v189;
      }
    }
    float v176 = *(float *)(v164 + 4 * (int)i);
    if (v176 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      float v176 = *(float *)sub_10006ECE4();
    }
    else if (v176 >= v167)
    {
      float v176 = v167;
    }
    *(float *)(v164 + 4 * (int)i) = v176;
    *(float *)(v163 + 4 * (int)i) = v176;
    float v177 = *(float *)(v165 + 4 * (int)i);
    if (v177 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      float v177 = *(float *)sub_10006ECE4();
    }
    else if (v177 >= v167)
    {
      float v177 = v167;
    }
    *(float *)(v165 + 4 * (int)i) = v177;
    if (*(float *)(v163 + 4 * (int)i) != -INFINITY && v177 != -INFINITY)
    {
      uint64_t v178 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v105 + 12)))
      {
        (*(void (**)(void))(v178 + 40))();
      }
      else
      {
        (*(void (**)(void))(v178 + 24))();
        *(void *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v105 + 12);
      }
      goto LABEL_254;
    }
    char v179 = 0;
    *uint64_t v181 = 1;
LABEL_259:
    uint64_t result = v187;
    if ((void)v187)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v187 + 8))(v187);
    }
    else if (*((void *)&v188 + 1))
    {
      --**((_DWORD **)&v188 + 1);
    }
  }
  while ((v179 & 1) != 0);
  return result;
}