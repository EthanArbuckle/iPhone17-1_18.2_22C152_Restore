void sub_19190C978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19190C990(uint64_t a1)
{
  getpid();
  [*(id *)(a1 + 32) UTF8String];
  uint64_t result = sandbox_check();
  byte_1EB2BD768 = result == 0;
  return result;
}

void sub_19190CB30(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [v2 daemonDisconnected];
  }
}

void sub_19190CB80(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 48) == *(void *)(*(void *)(a1 + 32) + 88))
  {
    id v2 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v2 removeObserver:*(void *)(a1 + 32) name:*MEMORY[0x1E4F6C1D8] object:*(void *)(*(void *)(a1 + 32) + 32)];

    [*(id *)(a1 + 32) _localObjectCleanup];
    *(void *)(*(void *)(a1 + 32) + 32) = [objc_alloc(MEMORY[0x1E4F6C358]) initWithTarget:*(void *)(*(void *)(a1 + 32) + 40) connection:*(void *)(a1 + 40) protocol:&unk_1EE294310 forceSecureCoding:1 offMainThread:1];
    MEMORY[0x1F41817F8]();
  }
  else
  {
    v3 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 88);
      int v5 = 134217984;
      uint64_t v6 = v4;
      _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "ConnectionID %lu is more recent, ignoring.", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t sub_19190CCEC(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) devices];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_19190CD3C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) accounts];

  return MEMORY[0x1F41817F8]();
}

void sub_19190CEBC()
{
  IDSGetMainBundleIdentifier();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EB2BD678 = [v0 isEqualToIgnoringCase:@"com.apple.springboard"];
}

void sub_19190CFF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  v3 = *(void **)(v1 + 56);
  uint64_t v4 = *(void **)(v1 + 64);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_19190D0E8;
  v9[3] = &unk_1E5728F60;
  uint64_t v5 = *(void *)(a1 + 56);
  v9[4] = v1;
  v9[5] = v5;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1919117C4;
  v6[3] = &unk_1E5728F88;
  uint64_t v8 = v5;
  v6[4] = v1;
  id v7 = *(id *)(a1 + 48);
  sub_191910294(v3, v2, v9, v4, v6);
}

void sub_19190D0E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_19190CB80;
  v7[3] = &unk_1E5728F38;
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v4;
  v7[4] = v5;
  id v6 = v3;
  [v5 _performBlock:v7 wait:1];
}

void sub_19190D188(uint64_t a1)
{
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Connection complete", v3, 2u);
  }

  *(unsigned char *)(*(void *)(a1 + 32) + 163) = 1;
  if (*(void *)(a1 + 40)) {
    objc_msgSend(*(id *)(a1 + 32), "setupCompleteWithInfo:");
  }
}

void sub_19190D218(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ([*(id *)(a1 + 32) isEqualToIgnoringCase:*MEMORY[0x1E4F6B3C0]])
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "allValues", 0);
    uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v3);
          }
          [v2 addObjectsFromArray:*(void *)(*((void *)&v13 + 1) + 8 * v7++)];
        }
        while (v5 != v7);
        uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v5);
    }

    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v2;
  }
  else
  {
    uint64_t v10 = [*(id *)(*(void *)(a1 + 40) + 40) objectForKey:*(void *)(a1 + 32)];
    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v9 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }

  v12 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    sub_191A2C5B8();
  }
}

void sub_19190D3B0()
{
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.IDSDaemonRequestConnectionQueue", v2);
  uint64_t v1 = (void *)qword_1EB2BD7C8;
  qword_1EB2BD7C8 = (uint64_t)v0;
}

void sub_19190D414(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_191A2C62C();
  }

  if ([*(id *)(a1 + 40) isEqualToIgnoringCase:*MEMORY[0x1E4F6B3C0]])
  {
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v4 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "allValues", 0);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v14;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          [v3 addObjectsFromArray:*(void *)(*((void *)&v13 + 1) + 8 * v8++)];
        }
        while (v6 != v8);
        uint64_t v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v6);
    }

    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v3;
  }
  else
  {
    uint64_t v11 = [*(id *)(*(void *)(a1 + 32) + 48) objectForKey:*(void *)(a1 + 40)];
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v10 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
}

void sub_19190D824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19190D998(uint64_t a1)
{
  id v2 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Purging idStatusCache", v5, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = 0;
}

uint64_t sub_19190DAAC(uint64_t a1)
{
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Connection complete, notifying", v5, 2u);
  }

  *(unsigned char *)(*(void *)(a1 + 32) + 161) = 1;
  uint64_t v3 = +[IDSDaemonController sharedInstance];
  [v3 _noteSetupComplete];

  return [*(id *)(a1 + 32) _callHandlersWithBlockOnIvarQueue:&unk_1EE245EA8];
}

void sub_19190DB58(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x192FE0160]();
  if (([*(id *)(*(void *)(a1 + 32) + 24) containsObject:*(void *)(a1 + 40)] & 1) == 0)
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 24);
    if (!v3)
    {
      uint64_t v4 = [MEMORY[0x1E4F28D30] weakObjectsHashTable];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void **)(v5 + 24);
      *(void *)(v5 + 24) = v4;

      uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 24);
    }
    [v3 addObject:*(void *)(a1 + 40)];
  }
}

void sub_19190DC74(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 72);
    int v7 = 134217984;
    uint64_t v8 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Cleaning up daemonConnectedGroup %p", (uint8_t *)&v7, 0xCu);
  }

  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 72);
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 72);
    *(void *)(v5 + 72) = 0;
  }
}

void sub_19190DEFC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) connectToDaemon])
  {
    id v2 = [*(id *)(a1 + 32) remoteObject];
    uint64_t v3 = *(unsigned int *)(a1 + 72);
    if (v3)
    {
      if ((char *)[*(id *)(a1 + 40) selector] == sel_sendMessageWithSendParameters_) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = 0;
      }
    }
    if (*(unsigned char *)(a1 + 76))
    {
      id v4 = objc_alloc_init(MEMORY[0x1E4F6C370]);
      [v4 setSync:1];
    }
    else if (*(unsigned char *)(a1 + 77))
    {
      id v4 = objc_alloc_init(MEMORY[0x1E4F6C370]);
      [v4 setNeedReply:1];
    }
    else if (*(unsigned char *)(a1 + 78))
    {
      id v4 = objc_alloc_init(MEMORY[0x1E4F6C370]);
      [v4 setShouldBoost:1];
    }
    else
    {
      id v4 = 0;
    }
    int v7 = [MEMORY[0x1E4F6C3C8] defaultBroadcaster];
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = sub_19190E378;
    v11[3] = &unk_1E5729258;
    uint64_t v13 = *(void *)(a1 + 64);
    long long v10 = *(_OWORD *)(a1 + 48);
    id v8 = (id)v10;
    long long v12 = v10;
    uint64_t v9 = [v7 broadcastProxyForTarget:v2 messageContext:v4 protocol:&unk_1EE28EA60 priority:v3 completion:v11];

    if (v9) {
      [*(id *)(a1 + 40) invokeWithTarget:v9];
    }
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0;
  }
}

void sub_19190E0E4(uint64_t a1)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_19190DEFC;
  v8[3] = &unk_1E5729280;
  id v9 = *(id *)(a1 + 32);
  int v13 = *(_DWORD *)(a1 + 72);
  id v2 = *(id *)(a1 + 40);
  char v14 = *(unsigned char *)(a1 + 76);
  __int16 v15 = *(_WORD *)(a1 + 77);
  uint64_t v3 = *(void *)(a1 + 64);
  id v10 = v2;
  uint64_t v12 = v3;
  long long v7 = *(_OWORD *)(a1 + 48);
  id v4 = (id)v7;
  long long v11 = v7;
  uint64_t v5 = MEMORY[0x192FE03B0](v8);
  uint64_t v6 = (void *)v5;
  if (*(unsigned char *)(a1 + 76)) {
    (*(void (**)(uint64_t))(v5 + 16))(v5);
  }
  else {
    [*(id *)(a1 + 32) _performBlock:v5 wait:0];
  }
}

void sub_19190E1F4(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v2 = *(unsigned char **)(a1 + 32);
  if (v2[162])
  {
    uint64_t v3 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 80);
      int v9 = 134217984;
      uint64_t v10 = v4;
      _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "Resume due to connect completion %p", (uint8_t *)&v9, 0xCu);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 162) = 0;
    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 80));
    id v2 = *(unsigned char **)(a1 + 32);
  }
  if ([v2 remoteObjectExists])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
    char v6 = objc_opt_respondsToSelector();

    if (v6)
    {
      id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
      [v7 performSelector:sel_daemonControllerDidConnect withObject:0];
    }
    dispatch_async(MEMORY[0x1E4F14428], &unk_1EE246F08);
  }
  else
  {
    id v8 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_191A2AAFC();
    }

    [*(id *)(a1 + 32) remoteObjectDiedNotification:0];
  }
}

void sub_19190E378(void *a1)
{
  if (*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    id v2 = [MEMORY[0x1E4F28F80] processInfo];
    uint64_t v3 = [v2 processName];
    int v4 = [v3 isEqualToString:@"accountsd"];

    if (v4)
    {
      dispatch_time_t v5 = dispatch_time(0, 2000000000);
      char v6 = *(NSObject **)(*(void *)(*(void *)(a1[5] + 8) + 40) + 24);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_19191D094;
      block[3] = &unk_1E5728DD0;
      block[4] = a1[6];
      dispatch_after(v5, v6, block);
    }
    else
    {
      uint64_t v7 = *(void *)(a1[6] + 8);
      id v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = 0;
    }
    uint64_t v9 = a1[4];
    if (v9) {
      (*(void (**)(void))(v9 + 16))();
    }
    id v10 = self;
    uint64_t v11 = *(void *)(a1[5] + 8);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = 0;
  }
}

void sub_19190E9A0(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = v3;
  if (!v3)
  {
    uint64_t v7 = +[IDSLogging Connection];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_191A2E230();
    }
    goto LABEL_7;
  }
  if (MEMORY[0x192FE0A00](v3) == MEMORY[0x1E4F14590])
  {
    uint64_t v9 = xpc_dictionary_get_value(v4, "response");
    char v6 = (void *)IMCreateDictionaryFromXPCObjectWithStandardAllowlist();
    if (v6) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = xpc_dictionary_get_BOOL(v4, "granted");
    }
    uint64_t v11 = +[IDSLogging Connection];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v16[0] = 67109120;
      v16[1] = [v6 count];
      _os_log_impl(&dword_19190B000, v11, OS_LOG_TYPE_INFO, " => Found response with %d keys", (uint8_t *)v16, 8u);
    }

    if (!v10)
    {
      uint64_t v12 = +[IDSLogging Connection];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_191A2E264();
      }
    }
    uint64_t v5 = !v10;

    goto LABEL_22;
  }
  if (MEMORY[0x192FE0A00](v4) != MEMORY[0x1E4F145A8])
  {
LABEL_4:
    uint64_t v5 = 0;
    char v6 = 0;
LABEL_22:
    int v8 = 1;
    goto LABEL_23;
  }
  if (v4 != (void *)MEMORY[0x1E4F14528])
  {
    if (v4 != (void *)MEMORY[0x1E4F14520]) {
      goto LABEL_4;
    }
    uint64_t v7 = +[IDSLogging Connection];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_191A2E2CC();
    }
LABEL_7:

    xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
    int v8 = 0;
    uint64_t v5 = 0;
    char v6 = 0;
    goto LABEL_23;
  }
  __int16 v15 = +[IDSLogging Connection];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
    sub_191A2E298();
  }

  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
  int v8 = 0;
  char v6 = 0;
  uint64_t v5 = 1;
LABEL_23:
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13)
  {
    if (v8) {
      uint64_t v14 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v14 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(v13 + 16))(v13, v14, v6, v5);
  }
}

void sub_19190F4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19190F618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19190F75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19190F8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19190FB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191910038(uint64_t a1)
{
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x3032000000;
  v19[3] = sub_191918630;
  v19[4] = sub_191918538;
  id v20 = (id)0xAAAAAAAAAAAAAAAALL;
  id v20 = (id)os_transaction_create();
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3032000000;
  v17[3] = sub_191918630;
  v17[4] = sub_191918538;
  id v18 = (id)0xAAAAAAAAAAAAAAAALL;
  id v18 = *(id *)(a1 + 32);
  uint64_t v5 = MEMORY[0x1E4F143A8];
  uint64_t v6 = 3221225472;
  uint64_t v7 = sub_19190E0E4;
  int v8 = &unk_1E5729280;
  id v9 = *(id *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 64);
  id v2 = *(id *)(a1 + 48);
  char v15 = *(unsigned char *)(a1 + 68);
  __int16 v16 = *(_WORD *)(a1 + 69);
  id v10 = v2;
  uint64_t v12 = v17;
  uint64_t v13 = v19;
  id v11 = *(id *)(a1 + 56);
  dispatch_block_t v3 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &v5);
  if (!_os_feature_enabled_impl())
  {
    if (!objc_msgSend(*(id *)(a1 + 40), "connectToDaemon", v5, v6, v7, v8, v9, v10)) {
      goto LABEL_9;
    }
LABEL_8:
    [*(id *)(a1 + 48) retainArguments];
    dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 32), v3);
    goto LABEL_9;
  }
  int v4 = *(void **)(a1 + 40);
  if (!*(unsigned char *)(a1 + 68))
  {
    if (!objc_msgSend(v4, "connectToDaemon", v5, v6, v7, v8, v9, v10)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (objc_msgSend(v4, "connectToDaemon", v5, v6, v7, v8, v9, v10))
  {
    [*(id *)(a1 + 40) blockUntilConnected];
    [*(id *)(a1 + 48) retainArguments];
    dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 32), v3);
  }
LABEL_9:

  _Block_object_dispose(v17, 8);
  _Block_object_dispose(v19, 8);
}

void sub_191910270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_191910294(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  int v14 = [MEMORY[0x1E4F6C360] sharedInstance];
  int v15 = [v14 isNonUIInstall];

  if (!v15)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = sub_191910730;
    v18[3] = &unk_1E572A658;
    __int16 v16 = (id *)v20;
    v20[0] = v13;
    uint64_t v17 = &v19;
    id v19 = v12;
    sub_1919126B0(v9, v10, v11, v18);
    goto LABEL_5;
  }
  if (v13)
  {
    v20[1] = MEMORY[0x1E4F143A8];
    v20[2] = 3221225472;
    v20[3] = sub_191955F20;
    v20[4] = &unk_1E572A608;
    __int16 v16 = &v21;
    id v21 = v11;
    uint64_t v17 = &v22;
    id v22 = v13;
    im_dispatch_after_primary_queue();
LABEL_5:
  }
}

void sub_191910730(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  if (v7) {
    id v9 = (void *)[objc_alloc(MEMORY[0x1E4F6C3C0]) initWithConnection:v7 protocol:&unk_1EE28EA60 alreadyConfigured:1 forceSecureCoding:1];
  }
  else {
    id v9 = 0;
  }
  id v10 = *(void **)(a1 + 40);
  if (v10)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = sub_19191882C;
    v14[3] = &unk_1E572A630;
    id v17 = v10;
    id v15 = v9;
    id v16 = v8;
    char v18 = a4;
    id v11 = (void *)MEMORY[0x192FE03B0](v14);
    id v12 = *(id *)(a1 + 32);
    if (!v12)
    {
      id v12 = MEMORY[0x1E4F14428];
      id v13 = MEMORY[0x1E4F14428];
    }
    dispatch_sync(v12, v11);
  }
}

void sub_191910B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191910E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_191911254(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = (uint64_t *)(a1 + 32);
  uint64_t v5 = [v3 objectForKeyedSubscript:*(void *)(a1 + 32)];
  uint64_t v6 = v5;
  if (!v5
    || ([(_IDSXPCCheckInInfo *)v5 connection],
        id v7 = objc_claimAutoreleasedReturnValue(),
        v7,
        !v7))
  {
    id v8 = (void *)[[NSString alloc] initWithFormat:@"%@-idswake", *(void *)(a1 + 32)];
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = sub_191A0FB14;
    v19[3] = &unk_1E572D3F8;
    int8x16_t v18 = *(int8x16_t *)(a1 + 32);
    id v9 = (id)v18.i64[0];
    int8x16_t v20 = vextq_s8(v18, v18, 8uLL);
    uint64_t v10 = (void *)MEMORY[0x192FE03B0](v19);
    id v11 = [*(id *)(a1 + 40) XPCAdapter];
    id v12 = v8;
    uint64_t v13 = [v12 UTF8String];
    uint64_t v14 = [v11 createServiceConnectionWithServiceName:v13 invalidationHandler:0 terminationHandler:0 peerEventHandler:v10 peerQueue:MEMORY[0x1E4F14428]];

    id v15 = +[IDSLogging _IDSService];
    id v16 = v15;
    if (v14)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *v4;
        *(_DWORD *)buf = 138412290;
        uint64_t v22 = v17;
        _os_log_impl(&dword_19190B000, v16, OS_LOG_TYPE_DEFAULT, "Client setup service -- checked in {service: %@}", buf, 0xCu);
      }

      [v14 resume];
      if (!v6) {
        uint64_t v6 = objc_alloc_init(_IDSXPCCheckInInfo);
      }
      [v3 setObject:v6 forKeyedSubscript:*v4];
      [(_IDSXPCCheckInInfo *)v6 setConnection:v14];
    }
    else
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_191A42458(v4, v16);
      }
    }
  }
}

void sub_1919114AC(uint64_t *a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v2 = &OBJC_METACLASS___IDSConnection;
  id v3 = (id *)(a1 + 4);
  uint64_t v4 = [(id)qword_1EB2BD7B8 objectForKey:a1[4]];
  uint64_t v5 = *(void *)(a1[6] + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (*(void *)(*(void *)(a1[6] + 8) + 40))
  {
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
    id v7 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_191A2EEA8((uint64_t)(a1 + 6), a1 + 4, v7);
    }
  }
  if (![*v3 length])
  {
    id v8 = [MEMORY[0x1E4F6C3B8] warning];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_191A2EE64(v8);
    }

    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
  }
  if (!*(unsigned char *)(*(void *)(a1[7] + 8) + 24))
  {
    id v9 = [[_IDSAccountController alloc] initWithService:a1[4] delegateContext:a1[5]];
    uint64_t v10 = a1[5];
    id v11 = *(void **)(v10 + 8);
    *(void *)(v10 + 8) = v9;

    id v12 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = a1[5];
      *(_DWORD *)buf = 138412290;
      uint64_t v33 = v13;
      _os_log_impl(&dword_19190B000, v12, OS_LOG_TYPE_INFO, "Couldn't find existing IDSAccountController adding new one %@", buf, 0xCu);
    }

    uint64_t v14 = (void *)qword_1EB2BD7B8;
    if (!qword_1EB2BD7B8)
    {
      uint64_t v15 = [MEMORY[0x1E4F28E10] strongToWeakObjectsMapTable];
      id v16 = (void *)qword_1EB2BD7B8;
      qword_1EB2BD7B8 = v15;

      uint64_t v14 = (void *)qword_1EB2BD7B8;
    }
    [v14 setObject:a1[5] forKey:a1[4]];
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v17 = (id)qword_1EB2BD7B8;
    uint64_t v18 = [v17 countByEnumeratingWithState:&v28 objects:v36 count:16];
    if (v18)
    {
      uint64_t v20 = v18;
      uint64_t v21 = *(void *)v29;
      *(void *)&long long v19 = 138412546;
      long long v27 = v19;
      do
      {
        uint64_t v22 = 0;
        do
        {
          if (*(void *)v29 != v21) {
            objc_enumerationMutation(v17);
          }
          uint64_t v23 = *(void *)(*((void *)&v28 + 1) + 8 * v22);
          v24 = +[IDSLogging IDSAccountController];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            [v2[49].cache objectForKey:v23];
            v26 = v25 = v2;
            *(_DWORD *)buf = v27;
            uint64_t v33 = v23;
            __int16 v34 = 2048;
            v35 = v26;
            _os_log_impl(&dword_19190B000, v24, OS_LOG_TYPE_INFO, "    %@ -> %p", buf, 0x16u);

            id v2 = v25;
          }

          ++v22;
        }
        while (v20 != v22);
        uint64_t v20 = [v17 countByEnumeratingWithState:&v28 objects:v36 count:16];
      }
      while (v20);
    }
  }
}

void sub_1919117C4(uint64_t a1, void *a2, void *a3, int a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  id v9 = a3;
  id v11 = (id *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 32);
  BOOL v13 = *(void *)(a1 + 48) == *(void *)(v10 + 88)
     && (id v12 = *(void **)(v10 + 32)) != 0
     && ([v12 wasInterrupted] & 1) == 0
     && *((unsigned char *)*v11 + 162) != 0;
  uint64_t v14 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 48);
    id v16 = @"NO";
    if (a4) {
      id v17 = @"YES";
    }
    else {
      id v17 = @"NO";
    }
    if (v13) {
      uint64_t v18 = @"YES";
    }
    else {
      uint64_t v18 = @"NO";
    }
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v20 = *(void *)(v19 + 32);
    if (*(unsigned char *)(v19 + 162)) {
      id v16 = @"YES";
    }
    int v35 = 134219010;
    uint64_t v36 = v15;
    __int16 v37 = 2112;
    v38 = v17;
    __int16 v39 = 2112;
    v40 = v18;
    __int16 v41 = 2112;
    uint64_t v42 = v20;
    __int16 v43 = 2112;
    v44 = v16;
    _os_log_impl(&dword_19190B000, v14, OS_LOG_TYPE_DEFAULT, "Completed connection {connectionID %lu, fatalError %@, relevantConnection: %@, localObject: %@, acquiringDaemonConnection: %@}", (uint8_t *)&v35, 0x34u);
  }

  id v21 = *v11;
  if (v13)
  {
    *((unsigned char *)v21 + 165) = a4;
    id v21 = *v11;
    if (a4)
    {
      if (*((void *)v21 + 9))
      {
        dispatch_group_leave(*((dispatch_group_t *)v21 + 9));
        uint64_t v22 = (void *)*((void *)*v11 + 9);
        *((void *)*v11 + 9) = 0;

        id v21 = *v11;
      }
    }
  }
  if (*(void *)(a1 + 48) == *((void *)v21 + 11))
  {
    [v21 _remoteObjectCleanup];
    objc_storeStrong((id *)*v11 + 2, a2);
    if ([*v11 remoteObjectExists]
      && ([*v11 localObject],
          uint64_t v23 = objc_claimAutoreleasedReturnValue(),
          int v24 = [v23 isValid],
          v23,
          v24))
    {
      v25 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
        sub_191A2A988();
      }

      v26 = [MEMORY[0x1E4F28EB8] defaultCenter];
      [v26 addObserver:*v11 selector:sel_remoteObjectDiedNotification_ name:*MEMORY[0x1E4F6C268] object:*((void *)*v11 + 2)];

      long long v27 = [MEMORY[0x1E4F28EB8] defaultCenter];
      [v27 addObserver:*v11 selector:sel_localObjectDiedNotification_ name:*MEMORY[0x1E4F6C1D8] object:*((void *)*v11 + 4)];

      [*((id *)*v11 + 5) connectionComplete:1 withResponse:v9];
    }
    else
    {
      long long v29 = [MEMORY[0x1E4F6C3B8] warning];
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = *((void *)*v11 + 7);
        int v35 = 138412290;
        uint64_t v36 = v30;
        _os_log_impl(&dword_19190B000, v29, OS_LOG_TYPE_DEFAULT, "  Failed to build remote object for listener: %@", (uint8_t *)&v35, 0xCu);
      }

      [*v11 _remoteObjectCleanup];
      [*v11 _localObjectCleanup];
    }
    *(_DWORD *)(*(void *)(a1 + 32) + 156) = 0;
    long long v31 = *(void **)(a1 + 32);
    v32 = [v31 services];
    uint64_t v33 = [*(id *)(a1 + 32) commands];
    objc_msgSend(v31, "_setServices:commands:capabilities:", v32, v33, objc_msgSend(*(id *)(a1 + 32), "capabilities"));

    uint64_t v34 = *(void *)(a1 + 40);
    if (v34) {
      (*(void (**)(void))(v34 + 16))();
    }
  }
  else
  {
    long long v28 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
      sub_191A2A9F4();
    }
  }
}

void sub_191912698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919126B0(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (qword_1EB2BD7D0 != -1) {
    dispatch_once(&qword_1EB2BD7D0, &unk_1EE246408);
  }
  id v11 = (id) *MEMORY[0x1E4F6B5D0];
  [v11 UTF8String];
  id v12 = (void *)IMXPCCreateConnectionForServiceWithQueue();
  id v13 = v11;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_19190C990;
  block[3] = &unk_1E5729000;
  id v27 = v13;
  if (qword_1EB2BD770 != -1) {
    dispatch_once(&qword_1EB2BD770, block);
  }
  int v14 = byte_1EB2BD768;

  if (v14)
  {
    if (v12)
    {
LABEL_7:
      v9[2](v9, v12);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = sub_191955F18;
      handler[3] = &unk_1E572A5B8;
      id v15 = v12;
      id v25 = v15;
      xpc_connection_set_event_handler((xpc_connection_t)v15, handler);
      xpc_connection_resume((xpc_connection_t)v15);
      xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
      if (v16)
      {
        IMInsertNSStringsToXPCDictionary();
        IMInsertDictionariesToXPCDictionary();
        xpc_dictionary_set_BOOL(v16, "setup-request", 1);
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 3221225472;
        v21[2] = sub_19190E9A0;
        v21[3] = &unk_1E572A5E0;
        id v17 = v15;
        id v22 = v17;
        id v23 = v10;
        uint64_t v18 = (void (**)(void, void))MEMORY[0x192FE03B0](v21);
        xpc_object_t v19 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)v17, v16);
        ((void (**)(void, xpc_object_t))v18)[2](v18, v19);
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v20 = +[IDSLogging Connection];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_191A2E1B8((uint64_t)v13, v20);
    }

    if (v12) {
      goto LABEL_7;
    }
  }
  if (v10) {
    (*((void (**)(id, void, void, void))v10 + 2))(v10, 0, 0, 0);
  }
LABEL_15:
}

void sub_191912C2C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isConnected])
  {
    id v2 = +[IDSLogging DaemonController];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      __int16 v11 = 0;
      id v3 = " => Not blocking, already connected";
      uint64_t v4 = (uint8_t *)&v11;
LABEL_9:
      _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_INFO, v3, v4, 2u);
      goto LABEL_10;
    }
    goto LABEL_10;
  }
  uint64_t v5 = [MEMORY[0x1E4F6C3E0] sharedInstance];
  if ([v5 systemIsShuttingDown])
  {

    goto LABEL_7;
  }
  int v6 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 164);

  if (v6)
  {
LABEL_7:
    id v2 = +[IDSLogging DaemonController];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      id v3 = " => Not blocking, shutting down";
      uint64_t v4 = buf;
      goto LABEL_9;
    }
LABEL_10:

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    return;
  }
  if (([*(id *)(a1 + 32) isConnected] & 1) == 0
    && ([*(id *)(a1 + 32) isConnecting] & 1) == 0)
  {
    id v7 = +[IDSLogging DaemonController];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_INFO, " => Starting connect", v9, 2u);
    }

    [*(id *)(a1 + 32) connectToDaemonWithLaunch:1];
  }
  if (([*(id *)(a1 + 32) remoteObjectExists] & 1) == 0 && !*(unsigned char *)(*(void *)(a1 + 32) + 162))
  {
    id v2 = +[IDSLogging DaemonController];
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    __int16 v8 = 0;
    id v3 = " => No remote object, can't block";
    uint64_t v4 = (uint8_t *)&v8;
    goto LABEL_9;
  }
}

void sub_191912F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191912FB4(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x192FE0160]();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = *(id *)(*(void *)(a1[6] + 8) + 40);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v3);
        }
        id v7 = (void *)MEMORY[0x192FE0160]();
        (*(void (**)(void))(a1[4] + 16))();
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }

  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1919131BC()
{
}

void sub_1919131D4(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_191A2A900();
  }

  uint64_t v4 = (id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v3 + 160) && !*(unsigned char *)(a1 + 56))
  {
    char v30 = 0;
    goto LABEL_42;
  }
  *(unsigned char *)(v3 + 160) = 1;
  if (![*((id *)*v4 + 4) isValid] || (objc_msgSend(*((id *)*v4 + 2), "isValid") & 1) == 0)
  {
    int v6 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_191A2A894();
    }

    [*v4 _noteDisconnected];
    [*v4 _localObjectCleanup];
    id v7 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v5 = v7;
    __int16 v8 = (const void *)*((void *)*v4 + 7);
    if (v8) {
      CFDictionarySetValue(v7, @"listenerID", v8);
    }
    long long v9 = [*v4 services];
    long long v10 = [v9 allObjects];

    if (v10) {
      CFDictionarySetValue(v5, @"services", v10);
    }

    long long v11 = [*v4 commands];
    long long v12 = [v11 allObjects];

    if (v12) {
      CFDictionarySetValue(v5, @"commands", v12);
    }

    id v13 = [*((id *)*v4 + 22) allObjects];
    if (v13) {
      CFDictionarySetValue(v5, @"notificationServices", v13);
    }

    uint64_t v14 = IMGetMainBundleIdentifier();
    if (v14) {
      CFDictionarySetValue(v5, @"bundleID", v14);
    }

    id v15 = [MEMORY[0x1E4F28F80] processInfo];
    xpc_object_t v16 = [v15 processName];

    if (v16) {
      CFDictionarySetValue(v5, @"processName", v16);
    }

    id v17 = [MEMORY[0x1E4F6C3B8] timing];
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);

    if (v18)
    {
      xpc_object_t v19 = [MEMORY[0x1E4F1C9C8] date];
      if (v19) {
        CFDictionarySetValue(v5, @"agentRequested", v19);
      }
    }
    if ([*v4 remoteObjectExists])
    {
      uint64_t v20 = *(void **)(a1 + 40);
      if (!v20) {
        goto LABEL_34;
      }
      id v21 = *v4;
      v36[0] = MEMORY[0x1E4F143A8];
      v36[1] = 3221225472;
      v36[2] = sub_19191A14C;
      v36[3] = &unk_1E5728FD8;
      __int16 v37 = v20;
      [v21 _performBlock:v36];
      id v22 = v37;
    }
    else
    {
      uint64_t v23 = ++*((void *)*v4 + 11);
      int v24 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v43 = v23;
        _os_log_impl(&dword_19190B000, v24, OS_LOG_TYPE_DEFAULT, "Requesting connectionID %lu usingSync YES", buf, 0xCu);
      }

      v38[0] = MEMORY[0x1E4F143A8];
      v38[1] = 3221225472;
      v38[2] = sub_19190CFF8;
      v38[3] = &unk_1E5728FB0;
      v38[4] = *(void *)(a1 + 32);
      __int16 v39 = v5;
      uint64_t v41 = v23;
      id v40 = *(id *)(a1 + 40);
      id v25 = (void *)MEMORY[0x192FE03B0](v38);
      v26 = [*(id *)(a1 + 32) connectingQueue];
      dispatch_async(v26, v25);

      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      id v22 = v39;
    }

LABEL_34:
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      if (qword_1EB2BD760 != -1) {
        dispatch_once(&qword_1EB2BD760, &unk_1EE246D28);
      }
      id WeakRetained = objc_loadWeakRetained((id *)*v4 + 1);
      long long v28 = dispatch_get_global_queue(0, 0);
      uint64_t v31 = MEMORY[0x1E4F143A8];
      uint64_t v32 = 3221225472;
      uint64_t v33 = sub_1919189BC;
      uint64_t v34 = &unk_1E5729000;
      id v29 = WeakRetained;
      id v35 = v29;
      dispatch_async(v28, &v31);

      if ((objc_msgSend(*((id *)*v4 + 5), "_hidingDisconnect", v31, v32, v33, v34) & 1) == 0) {
        dispatch_async(MEMORY[0x1E4F14428], &unk_1EE246EA8);
      }
    }
    goto LABEL_40;
  }
  uint64_t v5 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEBUG)) {
    sub_191A2A860();
  }
LABEL_40:

  char v30 = 1;
LABEL_42:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v30;
}

void sub_191913BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
}

void sub_191914000(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = v2;
  }
  else
  {
    id v3 = [MEMORY[0x1E4F1CAD0] set];
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    id v6 = v5;
  }
  else
  {
    id v6 = [MEMORY[0x1E4F1CAD0] set];
  }
  id v7 = v6;
  if ([*(id *)(a1 + 48) length])
  {
    uint64_t v8 = *MEMORY[0x1E4F6B3C0];
    if ([v4 containsObject:*MEMORY[0x1E4F6B3C0]])
    {
      id v9 = [MEMORY[0x1E4F1CAD0] setWithObject:v8];
    }
    else
    {
      id v9 = v4;
    }
    long long v10 = v9;
    int v11 = [*(id *)(a1 + 56) hasListenerForID:*(void *)(a1 + 48)];
    long long v12 = *(void **)(a1 + 56);
    if (v11)
    {
      char v13 = [v12 setServices:v10 forListenerID:*(void *)(a1 + 48)];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v13 & [*(id *)(a1 + 56) setCommands:v7 forListenerID:*(void *)(a1 + 48)];
    }
    else
    {
      if (!v12[12])
      {
        id v14 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        uint64_t v15 = *(void *)(a1 + 56);
        xpc_object_t v16 = *(void **)(v15 + 96);
        *(void *)(v15 + 96) = v14;
      }
      if ([*(id *)(a1 + 32) containsObject:@"com.apple.private.alloy.pbbridge"])
      {
        id v17 = [MEMORY[0x1E4F6C3B8] registration];
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = *(void *)(a1 + 48);
          int v28 = 138412802;
          uint64_t v29 = v18;
          __int16 v30 = 2112;
          uint64_t v31 = v4;
          __int16 v32 = 2112;
          uint64_t v33 = v7;
          _os_log_impl(&dword_19190B000, v17, OS_LOG_TYPE_DEFAULT, "Adding listener with ID: %@    services: %@   commands %@", (uint8_t *)&v28, 0x20u);
        }
      }
      [*(id *)(*(void *)(a1 + 56) + 96) setObject:v10 forKey:*(void *)(a1 + 48)];
      xpc_object_t v19 = *(void **)(*(void *)(a1 + 56) + 120);
      if (!v19)
      {
        id v20 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        uint64_t v21 = *(void *)(a1 + 56);
        id v22 = *(void **)(v21 + 120);
        *(void *)(v21 + 120) = v20;

        xpc_object_t v19 = *(void **)(*(void *)(a1 + 56) + 120);
      }
      [v19 setObject:v7 forKey:*(void *)(a1 + 48)];
      uint64_t v23 = *(void **)(*(void *)(a1 + 56) + 144);
      if (!v23)
      {
        id v24 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        uint64_t v25 = *(void *)(a1 + 56);
        v26 = *(void **)(v25 + 144);
        *(void *)(v25 + 144) = v24;

        uint64_t v23 = *(void **)(*(void *)(a1 + 56) + 144);
      }
      id v27 = [NSNumber numberWithUnsignedInt:0];
      [v23 setObject:v27 forKey:*(void *)(a1 + 48)];

      [*(id *)(a1 + 56) _listenerSetUpdated];
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
  }
}

void sub_19191437C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1919144CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 112);
  *(void *)(v2 + 112) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 136);
  *(void *)(v4 + 136) = 0;

  *(_DWORD *)(*(void *)(a1 + 32) + 152) = 0;
  if ([*(id *)(*(void *)(a1 + 32) + 96) count])
  {
    [*(id *)(a1 + 32) _setAutoReconnect:1];
    id v6 = *(void **)(a1 + 32);
    id v9 = [v6 services];
    id v7 = [*(id *)(a1 + 32) commands];
    objc_msgSend(v6, "connectToDaemonWithLaunch:services:commands:capabilities:", 1, v9, v7, objc_msgSend(*(id *)(a1 + 32), "capabilities"));
  }
  else
  {
    uint64_t v8 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "Disconnecting from daemon - no listeners", buf, 2u);
    }

    [*(id *)(a1 + 32) _setAutoReconnect:0];
    [*(id *)(a1 + 32) disconnectFromDaemon];
  }
}

void sub_1919146FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191914800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191915790(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v222 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) objectForKey:@"serviceInfo"];
  id v3 = (id *)(v1 + 40);
  id v4 = *(id *)(*(void *)(v1 + 40) + 40);
  unint64_t v5 = 0x1E4F6C000uLL;
  id v6 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_191A2CB28();
  }

  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v8 = (void *)*((void *)*v3 + 5);
  *((void *)*v3 + 5) = v7;

  uint64_t v147 = v1;
  if ([v2 count])
  {
    id v152 = v4;
    long long v204 = 0u;
    long long v205 = 0u;
    long long v202 = 0u;
    long long v203 = 0u;
    id v9 = [v2 allKeys];
    uint64_t v10 = [v9 countByEnumeratingWithState:&v202 objects:v221 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v203;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v203 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void *)(*((void *)&v202 + 1) + 8 * i);
          uint64_t v15 = [v2 objectForKey:v14];
          xpc_object_t v16 = (void *)[v15 mutableCopy];

          [*((id *)*v3 + 5) setObject:v16 forKey:v14];
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v202 objects:v221 count:16];
      }
      while (v11);
    }

    long long v200 = 0u;
    long long v201 = 0u;
    long long v198 = 0u;
    long long v199 = 0u;
    id v17 = [*((id *)*v3 + 5) allKeys];
    uint64_t v18 = [v17 countByEnumeratingWithState:&v198 objects:v220 count:16];
    if (!v18)
    {
      uint64_t v1 = v147;
      unint64_t v5 = 0x1E4F6C000uLL;
      goto LABEL_30;
    }
    uint64_t v19 = v18;
    v150 = v2;
    uint64_t v20 = *(void *)v199;
    do
    {
      for (uint64_t j = 0; j != v19; ++j)
      {
        if (*(void *)v199 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v22 = *(void *)(*((void *)&v198 + 1) + 8 * j);
        uint64_t v23 = [*((id *)*v3 + 5) objectForKey:v22];
        id v24 = *v3;
        v195[0] = MEMORY[0x1E4F143A8];
        v195[1] = 3221225472;
        v195[2] = sub_19193ADAC;
        v195[3] = &unk_1E5729C50;
        id v196 = v23;
        uint64_t v197 = v22;
        id v25 = v23;
        [v24 _callHandlersWithBlockOnIvarQueue:v195];
      }
      uint64_t v19 = [v17 countByEnumeratingWithState:&v198 objects:v220 count:16];
    }
    while (v19);
    uint64_t v1 = v147;
LABEL_28:
    unint64_t v5 = 0x1E4F6C000;
    uint64_t v2 = v150;
LABEL_30:
    id v4 = v152;
    goto LABEL_31;
  }
  [*((id *)*v3 + 5) removeAllObjects];
  v26 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19190B000, v26, OS_LOG_TYPE_DEFAULT, "Services all disappeared, removing all accounts", buf, 2u);
  }

  long long v193 = 0u;
  long long v194 = 0u;
  long long v191 = 0u;
  long long v192 = 0u;
  id v17 = [v4 allKeys];
  uint64_t v27 = [v17 countByEnumeratingWithState:&v191 objects:v219 count:16];
  if (v27)
  {
    uint64_t v28 = v27;
    v150 = v2;
    id v152 = v4;
    uint64_t v29 = *(void *)v192;
    do
    {
      for (uint64_t k = 0; k != v28; ++k)
      {
        if (*(void *)v192 != v29) {
          objc_enumerationMutation(v17);
        }
        uint64_t v31 = *(void *)(*((void *)&v191 + 1) + 8 * k);
        id v32 = *v3;
        v190[0] = MEMORY[0x1E4F143A8];
        v190[1] = 3221225472;
        v190[2] = sub_19193AE0C;
        v190[3] = &unk_1E5729C28;
        v190[4] = v31;
        [v32 _callHandlersWithBlockOnIvarQueue:v190];
      }
      uint64_t v28 = [v17 countByEnumeratingWithState:&v191 objects:v219 count:16];
    }
    while (v28);
    goto LABEL_28;
  }
LABEL_31:

  uint64_t v33 = [*(id *)(v1 + 32) objectForKey:@"enabledAccountsInfo"];
  uint64_t v34 = [*(id *)(v5 + 952) registration];
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
    sub_191A2CAC0();
  }

  id v35 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v36 = (void *)*((void *)*v3 + 6);
  *((void *)*v3 + 6) = v35;

  if ([v33 count])
  {
    long long v188 = 0u;
    long long v189 = 0u;
    long long v186 = 0u;
    long long v187 = 0u;
    __int16 v37 = [v33 allKeys];
    id v153 = (id)[v37 countByEnumeratingWithState:&v186 objects:v218 count:16];
    if (v153)
    {
      uint64_t v149 = *(void *)v187;
      v151 = v33;
      obuint64_t j = v37;
      do
      {
        for (m = 0; m != v153; m = (char *)m + 1)
        {
          if (*(void *)v187 != v149) {
            objc_enumerationMutation(obj);
          }
          uint64_t v39 = *(void *)(*((void *)&v186 + 1) + 8 * (void)m);
          id v40 = [v33 objectForKey:v39];
          uint64_t v41 = (void *)[v40 mutableCopy];

          [*((id *)*v3 + 6) setObject:v41 forKey:v39];
          long long v184 = 0u;
          long long v185 = 0u;
          long long v182 = 0u;
          long long v183 = 0u;
          id v42 = v41;
          uint64_t v43 = [v42 countByEnumeratingWithState:&v182 objects:v217 count:16];
          if (v43)
          {
            uint64_t v44 = v43;
            uint64_t v45 = *(void *)v183;
            do
            {
              for (uint64_t n = 0; n != v44; ++n)
              {
                if (*(void *)v183 != v45) {
                  objc_enumerationMutation(v42);
                }
                uint64_t v47 = *(void *)(*((void *)&v182 + 1) + 8 * n);
                id v48 = *v3;
                v181[0] = MEMORY[0x1E4F143A8];
                v181[1] = 3221225472;
                v181[2] = sub_19193AE70;
                v181[3] = &unk_1E5729C50;
                v181[4] = v47;
                v181[5] = v39;
                [v48 _callHandlersWithBlockOnIvarQueue:v181];
              }
              uint64_t v44 = [v42 countByEnumeratingWithState:&v182 objects:v217 count:16];
            }
            while (v44);
          }

          uint64_t v33 = v151;
        }
        __int16 v37 = obj;
        id v153 = (id)[obj countByEnumeratingWithState:&v186 objects:v218 count:16];
      }
      while (v153);
      uint64_t v1 = v147;
      unint64_t v5 = 0x1E4F6C000;
    }
  }
  else
  {
    [*((id *)*v3 + 6) removeAllObjects];
    __int16 v37 = [*(id *)(v5 + 952) registration];
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19190B000, v37, OS_LOG_TYPE_DEFAULT, "Enabled accounts all disappeared, removing all enabled accounts", buf, 2u);
    }
  }

  v49 = [*(id *)(v1 + 32) objectForKey:@"dependentDevices"];
  v50 = [*(id *)(v5 + 952) registration];
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v51 = [v49 count];
    *(_DWORD *)buf = 134217984;
    uint64_t v207 = v51;
    _os_log_impl(&dword_19190B000, v50, OS_LOG_TYPE_DEFAULT, "Deferred setup on ivar queue, got %lu dependent devices", buf, 0xCu);
  }

  if ([v49 count])
  {
    long long v179 = 0u;
    long long v180 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    v52 = [v49 allKeys];
    uint64_t v53 = [v52 countByEnumeratingWithState:&v177 objects:v216 count:16];
    if (v53)
    {
      uint64_t v54 = v53;
      uint64_t v55 = *(void *)v178;
      v154 = v52;
      do
      {
        for (iuint64_t i = 0; ii != v54; ++ii)
        {
          if (*(void *)v178 != v55) {
            objc_enumerationMutation(v154);
          }
          uint64_t v57 = *(void *)(*((void *)&v177 + 1) + 8 * ii);
          [v49 objectForKey:v57];
          v59 = v58 = v49;
          v60 = (void *)[v59 mutableCopy];

          [*((id *)*v3 + 21) updateAccount:v57 withRegistration:v60];
          id v61 = *v3;
          v175[0] = MEMORY[0x1E4F143A8];
          v175[1] = 3221225472;
          v175[2] = sub_19193AF5C;
          v175[3] = &unk_1E5729C50;
          v175[4] = v57;
          id v176 = v60;
          id v62 = v60;
          v63 = v61;
          v49 = v58;
          [v63 _callHandlersWithBlockOnIvarQueue:v175];
        }
        v52 = v154;
        uint64_t v54 = [v154 countByEnumeratingWithState:&v177 objects:v216 count:16];
      }
      while (v54);
      uint64_t v1 = v147;
      unint64_t v5 = 0x1E4F6C000;
    }
  }
  else
  {
    long long v173 = 0u;
    long long v174 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    v64 = [*((id *)*v3 + 21) allAccountIDs];
    uint64_t v65 = [v64 countByEnumeratingWithState:&v171 objects:v215 count:16];
    if (v65)
    {
      uint64_t v66 = v65;
      uint64_t v67 = *(void *)v172;
      do
      {
        for (juint64_t j = 0; jj != v66; ++jj)
        {
          if (*(void *)v172 != v67) {
            objc_enumerationMutation(v64);
          }
          uint64_t v69 = *(void *)(*((void *)&v171 + 1) + 8 * jj);
          id v70 = *v3;
          v170[0] = MEMORY[0x1E4F143A8];
          v170[1] = 3221225472;
          v170[2] = sub_19193AFBC;
          v170[3] = &unk_1E5729C28;
          v170[4] = v69;
          [v70 _callHandlersWithBlockOnIvarQueue:v170];
        }
        uint64_t v66 = [v64 countByEnumeratingWithState:&v171 objects:v215 count:16];
      }
      while (v66);
    }

    [*((id *)*v3 + 21) removeAllRecords];
    unint64_t v5 = 0x1E4F6C000uLL;
    v52 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19190B000, v52, OS_LOG_TYPE_DEFAULT, "Dependent devices all disappeared, removing all dependent devices", buf, 2u);
    }
  }

  v71 = [*(id *)(v1 + 32) objectForKey:@"linkedDevices"];
  v72 = [*(id *)(v5 + 952) registration];
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v73 = [v71 count];
    *(_DWORD *)buf = 134217984;
    uint64_t v207 = v73;
    _os_log_impl(&dword_19190B000, v72, OS_LOG_TYPE_DEFAULT, "Deferred setup on ivar queue, got %lu linked devices", buf, 0xCu);
  }

  uint64_t v74 = [v71 mutableCopy];
  uint64_t v75 = *(void *)(v1 + 40);
  v76 = *(void **)(v75 + 56);
  *(void *)(v75 + 56) = v74;

  v77 = [*(id *)(v1 + 32) objectForKey:@"familyInfo"];
  v78 = [*(id *)(v5 + 952) registration];
  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19190B000, v78, OS_LOG_TYPE_DEFAULT, "Dealing with family members", buf, 2u);
  }

  uint64_t v79 = [v77 mutableCopy];
  v80 = (void *)*((void *)*v3 + 8);
  *((void *)*v3 + 8) = v79;

  long long v168 = 0u;
  long long v169 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  id v155 = [*((id *)*v3 + 8) allKeys];
  uint64_t v81 = [v155 countByEnumeratingWithState:&v166 objects:v214 count:16];
  if (v81)
  {
    uint64_t v82 = v81;
    uint64_t v83 = *(void *)v167;
    do
    {
      for (kuint64_t k = 0; kk != v82; ++kk)
      {
        if (*(void *)v167 != v83) {
          objc_enumerationMutation(v155);
        }
        uint64_t v85 = *(void *)(*((void *)&v166 + 1) + 8 * kk);
        v86 = [*((id *)*v3 + 8) objectForKey:v85];
        v87 = (void *)[v86 mutableCopy];

        id v88 = *v3;
        v164[0] = MEMORY[0x1E4F143A8];
        v164[1] = 3221225472;
        v164[2] = sub_19193B020;
        v164[3] = &unk_1E5729C50;
        v164[4] = v85;
        id v165 = v87;
        id v89 = v87;
        [v88 _callHandlersWithBlock:v164];
      }
      uint64_t v82 = [v155 countByEnumeratingWithState:&v166 objects:v214 count:16];
    }
    while (v82);
  }

  v90 = [*(id *)(v147 + 32) objectForKey:@"familyDevices"];
  uint64_t v91 = [v90 mutableCopy];
  uint64_t v92 = *(void *)(v147 + 40);
  v93 = *(void **)(v92 + 72);
  *(void *)(v92 + 72) = v91;

  v94 = [*(id *)(v147 + 32) objectForKey:@"pendingInvitationMap"];
  uint64_t v95 = [v94 mutableCopy];
  uint64_t v96 = *(void *)(v147 + 40);
  v97 = *(void **)(v96 + 80);
  *(void *)(v96 + 80) = v95;

  v98 = [*(id *)(v147 + 32) objectForKey:@"receivedInvitationMap"];
  uint64_t v99 = [v98 mutableCopy];
  uint64_t v100 = *(void *)(v147 + 40);
  v101 = *(void **)(v100 + 88);
  *(void *)(v100 + 88) = v99;

  v102 = [*(id *)(v147 + 32) objectForKey:@"maxMessageSizes"];
  uint64_t v103 = [v102 mutableCopy];
  uint64_t v104 = *(void *)(v147 + 40);
  v105 = *(void **)(v104 + 96);
  *(void *)(v104 + 96) = v103;

  v106 = [*(id *)(v147 + 32) objectForKey:@"restrictionReasons"];
  uint64_t v107 = [v106 mutableCopy];
  uint64_t v108 = *(void *)(v147 + 40);
  v109 = *(void **)(v108 + 104);
  *(void *)(v108 + 104) = v107;

  v110 = [*(id *)(v147 + 32) objectForKey:@"deviceIdentifier"];
  uint64_t v111 = [v110 copy];
  uint64_t v112 = *(void *)(v147 + 40);
  v113 = *(void **)(v112 + 136);
  *(void *)(v112 + 136) = v111;

  v114 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG)) {
    sub_191A2CA50();
  }

  id v115 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v116 = *(void *)(v147 + 40);
  v117 = *(void **)(v116 + 112);
  *(void *)(v116 + 112) = v115;

  id v118 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v119 = *(void *)(v147 + 40);
  v120 = *(void **)(v119 + 120);
  *(void *)(v119 + 120) = v118;

  v121 = [*(id *)(v147 + 32) objectForKey:@"activeDeviceUniqueID"];
  if ([v121 length])
  {
    long long v162 = 0u;
    long long v163 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    v122 = [*((id *)*v3 + 21) allAccountIDs];
    uint64_t v123 = [v122 countByEnumeratingWithState:&v160 objects:v213 count:16];
    if (v123)
    {
      uint64_t v124 = v123;
      uint64_t v125 = *(void *)v161;
      do
      {
        for (uint64_t mm = 0; mm != v124; ++mm)
        {
          if (*(void *)v161 != v125) {
            objc_enumerationMutation(v122);
          }
          [*((id *)*v3 + 14) setObject:v121 forKey:*(void *)(*((void *)&v160 + 1) + 8 * mm)];
        }
        uint64_t v124 = [v122 countByEnumeratingWithState:&v160 objects:v213 count:16];
      }
      while (v124);
    }

    long long v158 = 0u;
    long long v159 = 0u;
    long long v156 = 0u;
    long long v157 = 0u;
    id v127 = *((id *)*v3 + 7);
    uint64_t v128 = [v127 countByEnumeratingWithState:&v156 objects:v212 count:16];
    if (v128)
    {
      uint64_t v129 = v128;
      uint64_t v130 = *(void *)v157;
      do
      {
        for (nuint64_t n = 0; nn != v129; ++nn)
        {
          if (*(void *)v157 != v130) {
            objc_enumerationMutation(v127);
          }
          [*((id *)*v3 + 15) setObject:v121 forKey:*(void *)(*((void *)&v156 + 1) + 8 * nn)];
        }
        uint64_t v129 = [v127 countByEnumeratingWithState:&v156 objects:v212 count:16];
      }
      while (v129);
    }

    v132 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = *((void *)*v3 + 14);
      uint64_t v133 = *((void *)*v3 + 15);
      *(_DWORD *)buf = 138412802;
      uint64_t v207 = (uint64_t)v121;
      __int16 v208 = 2112;
      uint64_t v209 = v134;
      __int16 v210 = 2112;
      uint64_t v211 = v133;
      _os_log_impl(&dword_19190B000, v132, OS_LOG_TYPE_DEFAULT, "Active device uniqueID from daemon: %@ account map %@ service map %@", buf, 0x20u);
    }
  }
  uint64_t v135 = [*(id *)(v147 + 32) objectForKey:@"privateLoggingHash"];
  uint64_t v136 = *(void *)(v147 + 40);
  v137 = *(void **)(v136 + 144);
  *(void *)(v136 + 144) = v135;

  v138 = [*(id *)(v147 + 32) objectForKey:@"maxIMLSize"];
  *(void *)(*(void *)(v147 + 40) + 152) = [v138 integerValue];

  if (_IDSSupportsDirectMessaging())
  {
    v139 = [*(id *)(v147 + 32) objectForKey:@"peerIDForDirectMsg"];
    v140 = [*(id *)(v147 + 32) objectForKey:@"directMsgAllowedForServices"];
    v141 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG)) {
      sub_191A2C9E8();
    }

    id v142 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    [v142 setObject:v139 forKeyedSubscript:@"peerIDForDirectMsg"];
    [v142 setObject:v140 forKeyedSubscript:@"directMsgAllowedForServices"];
    v143 = [*(id *)(v147 + 32) objectForKey:@"pidForIDSD"];
    [v142 setObject:v143 forKeyedSubscript:@"pidForIDSD"];

    uint64_t v144 = *(void *)(v147 + 40);
    v145 = *(void **)(v144 + 128);
    *(void *)(v144 + 128) = v142;
  }
  *((unsigned char *)*v3 + 162) = 1;
  return objc_msgSend(*v3, "__postSetupComplete");
}

void IDSOSVersionFromString(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  id v8 = [a1 componentsSeparatedByString:@"."];
  uint64_t v3 = [v8 count];
  if (v3)
  {
    unint64_t v4 = v3;
    unint64_t v5 = [v8 objectAtIndexedSubscript:0];
    *a2 = [v5 integerValue];

    if (v4 != 1)
    {
      id v6 = [v8 objectAtIndexedSubscript:1];
      a2[1] = [v6 integerValue];

      if (v4 >= 3)
      {
        id v7 = [v8 objectAtIndexedSubscript:2];
        a2[2] = [v7 integerValue];
      }
    }
  }
}

uint64_t sub_1919169B4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  if (!*(_DWORD *)(v2 + 152))
  {
    uint64_t result = [*(id *)(v2 + 144) count];
    uint64_t v2 = *(void *)(v1 + 32);
    if (result)
    {
      uint64_t v3 = *(void **)(v2 + 144);
      v4[0] = MEMORY[0x1E4F143A8];
      v4[1] = 3221225472;
      v4[2] = sub_1919184F8;
      v4[3] = &unk_1E57290A0;
      v4[4] = v2;
      uint64_t result = [v3 enumerateKeysAndObjectsUsingBlock:v4];
      uint64_t v2 = *(void *)(v1 + 32);
    }
  }
  *(_DWORD *)(*(void *)(*(void *)(v1 + 40) + 8) + 24) = *(_DWORD *)(v2 + 152);
  return result;
}

void sub_191916A60(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 32) isValid])
  {
    id v3 = [*(id *)(a1 + 32) listener];
    int v2 = [v3 isSetupComplete];
    if (v2) {
      LOBYTE(v2) = [*(id *)(*(void *)(a1 + 32) + 16) isValid];
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_191916AF8(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 104);
  if (v2)
  {
    id v3 = v2;
  }
  else
  {
    id v3 = [MEMORY[0x1E4F1CAD0] set];
  }
  unint64_t v4 = v3;
  if ([*(id *)(*(void *)(a1 + 32) + 112) count])
  {
    uint64_t v5 = [v4 setByAddingObjectsFromSet:*(void *)(*(void *)(a1 + 32) + 112)];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    if ([*(id *)(*(void *)(a1 + 32) + 96) count])
    {
      id v9 = *(void **)(*(void *)(a1 + 32) + 96);
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = sub_191918824;
      v15[3] = &unk_1E57290A0;
      id v16 = v8;
      [v9 enumerateKeysAndObjectsUsingBlock:v15];
    }
    uint64_t v10 = *(void *)(a1 + 32);
    if (*(void *)(v10 + 112))
    {
      objc_msgSend(v8, "unionSet:");
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void **)(v11 + 112);
      *(void *)(v11 + 112) = 0;

      uint64_t v10 = *(void *)(a1 + 32);
    }
    objc_storeStrong((id *)(v10 + 112), v8);
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v8;
  }
}

void sub_191916C6C(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 128);
  if (v2)
  {
    id v3 = v2;
  }
  else
  {
    id v3 = [MEMORY[0x1E4F1CAD0] set];
  }
  unint64_t v4 = v3;
  if ([*(id *)(*(void *)(a1 + 32) + 136) count])
  {
    uint64_t v5 = [v4 setByAddingObjectsFromSet:*(void *)(*(void *)(a1 + 32) + 136)];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    if ([*(id *)(*(void *)(a1 + 32) + 120) count])
    {
      id v9 = *(void **)(*(void *)(a1 + 32) + 120);
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = sub_191918800;
      v15[3] = &unk_1E57290A0;
      id v16 = v8;
      [v9 enumerateKeysAndObjectsUsingBlock:v15];
    }
    uint64_t v10 = *(void *)(a1 + 32);
    if (*(void *)(v10 + 136))
    {
      objc_msgSend(v8, "unionSet:");
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void **)(v11 + 136);
      *(void *)(v11 + 136) = 0;

      uint64_t v10 = *(void *)(a1 + 32);
    }
    objc_storeStrong((id *)(v10 + 136), v8);
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v8;
  }
}

void sub_191916DE8(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 60))
  {
    int v2 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 67109120;
      LODWORD(v19) = v3;
      _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "connectToDaemonWithLaunch calling into _setServices capabilities %d", buf, 8u);
    }
  }
  [*(id *)(a1 + 32) _setServices:*(void *)(a1 + 40) commands:*(void *)(a1 + 48) capabilities:*(unsigned int *)(a1 + 56)];
  if (([*(id *)(a1 + 32) isConnected] & 1) != 0
    || [*(id *)(a1 + 32) isConnecting])
  {
    if (*(unsigned char *)(a1 + 60))
    {
      unint64_t v4 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Already connected... not connecting", buf, 2u);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 60))
    {
      uint64_t v5 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = @"YES";
        if (!*(unsigned char *)(a1 + 61)) {
          uint64_t v6 = @"NO";
        }
        uint64_t v7 = *(void *)(a1 + 40);
        uint64_t v8 = *(void *)(a1 + 48);
        int v9 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)buf = 138413058;
        uint64_t v19 = v6;
        __int16 v20 = 2112;
        uint64_t v21 = v7;
        __int16 v22 = 2112;
        uint64_t v23 = v8;
        __int16 v24 = 1024;
        int v25 = v9;
        _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "_connectToDaemonWithLaunch: %@ services: %@ commands: %@ capabilities: %d", buf, 0x26u);
      }
    }
    if (![*(id *)(a1 + 32) remoteObjectExists]
      || ([*(id *)(*(void *)(a1 + 32) + 32) isValid] & 1) == 0)
    {
      *(unsigned char *)(*(void *)(a1 + 32) + 161) = 0;
      uint64_t v10 = *(void *)(a1 + 32);
      if (!*(unsigned char *)(v10 + 162))
      {
        *(unsigned char *)(v10 + 162) = 1;
        uint64_t v11 = [MEMORY[0x1E4F6C3B8] registration];
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(__CFString **)(*(void *)(a1 + 32) + 80);
          *(_DWORD *)buf = 134217984;
          uint64_t v19 = v12;
          _os_log_impl(&dword_19190B000, v11, OS_LOG_TYPE_DEFAULT, "Suspend at connect %p", buf, 0xCu);
        }

        dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 80));
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3221225472;
        v17[2] = sub_19190E1F4;
        v17[3] = &unk_1E5729000;
        v17[4] = *(void *)(a1 + 32);
        uint64_t v13 = (void *)MEMORY[0x192FE03B0](v17);
        if (([*(id *)(a1 + 32) _makeConnectionWithLaunch:*(unsigned __int8 *)(a1 + 61) completionBlock:v13] & 1) == 0)
        {
          uint64_t v14 = *(void *)(a1 + 32);
          if (*(unsigned char *)(v14 + 162))
          {
            *(unsigned char *)(v14 + 162) = 0;
            uint64_t v15 = [MEMORY[0x1E4F6C3B8] registration];
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              id v16 = *(__CFString **)(*(void *)(a1 + 32) + 80);
              *(_DWORD *)buf = 134217984;
              uint64_t v19 = v16;
              _os_log_impl(&dword_19190B000, v15, OS_LOG_TYPE_DEFAULT, "Resume due to failed connect %p", buf, 0xCu);
            }

            dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 80));
          }
        }
      }
    }
  }
}

uint64_t sub_19191714C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 16) != 0;
  return result;
}

void sub_191917168(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) capabilities];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v3 + 156) != v2)
  {
    *(_DWORD *)(v3 + 156) = v2;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    unint64_t v4 = +[IDSLogging DaemonController];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = *(_DWORD *)(a1 + 48);
      int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 156);
      v7[0] = 67109376;
      v7[1] = v5;
      __int16 v8 = 1024;
      int v9 = v6;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_INFO, "Updating capabilities: %d  (Previous: %d)", (uint8_t *)v7, 0xEu);
    }
  }
}

void sub_191917258(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 104);
  if (!v2 || ([v2 isEqualToSet:*(void *)(a1 + 40)] & 1) == 0)
  {
    uint64_t v3 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      sub_191A2AB30();
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 104), *(id *)(a1 + 40));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_1919172F0(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v2 = *(void **)(*(void *)(a1 + 32) + 128);
  if (v2)
  {
    BOOL v3 = 0;
  }
  else
  {
    int v5 = *(void **)(a1 + 40);
    if (!v5)
    {
      BOOL v3 = 0;
      goto LABEL_9;
    }
    BOOL v3 = [v5 count] != 0;
    int v2 = *(void **)(*(void *)(a1 + 32) + 128);
    if (!v2) {
      goto LABEL_9;
    }
  }
  if (*(void *)(a1 + 40))
  {
    int v4 = objc_msgSend(v2, "isEqualToSet:") ^ 1;
    goto LABEL_10;
  }
LABEL_9:
  int v4 = 0;
LABEL_10:
  if (v4 | v3)
  {
    int v6 = +[IDSLogging DaemonController];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 128);
      int v9 = 138412546;
      uint64_t v10 = v7;
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_INFO, "Set commands: %@  (Previous: %@)", (uint8_t *)&v9, 0x16u);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 128), *(id *)(a1 + 40));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_1919174D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191917658(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1919176E8(uint64_t a1)
{
  int v2 = (void *)MEMORY[0x192FE0160]();
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_191917AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191917BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191917CC0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_191918008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919180C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919180E0(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 32))
  {
    int v2 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      sub_191A2AE48();
    }

    [*(id *)(*(void *)(a1 + 32) + 32) setTarget:0];
    [*(id *)(*(void *)(a1 + 32) + 32) invalidate];
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 32);
    *(void *)(v3 + 32) = 0;
  }
}

void sub_191918168(void *a1)
{
  int v2 = [*(id *)(a1[4] + 96) objectForKey:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v2 != 0;
}

void sub_1919181BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 162))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else if ([*(id *)(v2 + 32) isValid])
  {
    id v4 = [*(id *)(a1 + 32) listener];
    if ([v4 isSetupComplete]) {
      char v3 = 0;
    }
    else {
      char v3 = [*(id *)(*(void *)(a1 + 32) + 16) isValid];
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_191918324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919184F8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = [a3 unsignedIntValue];
  *(_DWORD *)(*(void *)(a1 + 32) + 152) |= result;
  return result;
}

void sub_191918530(uint64_t a1)
{
}

void sub_191918538(uint64_t a1)
{
}

void sub_191918540(uint64_t a1)
{
}

void sub_191918548(uint64_t a1)
{
}

void sub_191918550(uint64_t a1)
{
}

void sub_191918558(uint64_t a1)
{
}

void sub_191918560(uint64_t a1)
{
}

void sub_191918568(uint64_t a1)
{
}

void sub_191918570(uint64_t a1)
{
}

void sub_191918578(uint64_t a1)
{
}

void sub_191918580(uint64_t a1)
{
}

void sub_191918588(uint64_t a1)
{
}

void sub_191918590(uint64_t a1)
{
}

void sub_191918598(uint64_t a1)
{
}

void sub_1919185A0(uint64_t a1)
{
}

void sub_1919185A8(uint64_t a1)
{
}

void sub_1919185B0(uint64_t a1)
{
}

void sub_1919185B8(uint64_t a1)
{
}

void sub_1919185C0(uint64_t a1)
{
}

void sub_1919185C8(uint64_t a1)
{
}

void sub_1919185D0(uint64_t a1)
{
}

void sub_1919185D8(uint64_t a1)
{
}

void sub_1919185E0(uint64_t a1)
{
}

void sub_1919185E8(uint64_t a1)
{
}

void sub_1919185F0(uint64_t a1)
{
}

void sub_1919185F8(uint64_t a1)
{
}

void sub_191918600(uint64_t a1)
{
}

void sub_191918608(uint64_t a1)
{
}

void sub_191918610(uint64_t a1)
{
}

void sub_191918618(uint64_t a1)
{
}

uint64_t sub_191918620(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918630(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918640(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918650(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918660(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918670(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918680(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918690(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1919186A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1919186B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1919186C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1919186D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1919186E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1919186F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918700(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918710(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918720(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918730(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918740(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918750(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918760(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918770(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918780(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918790(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1919187A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1919187B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1919187C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1919187D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1919187E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1919187F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_191918800(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unionSet:");
}

uint64_t IDSCopyTokenAndIDForTokenWithID(void *a1, const char *a2)
{
  return [a1 _stripPotentialTokenURIWithToken:a2];
}

uint64_t sub_191918810(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 160);
  return result;
}

uint64_t sub_191918824(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unionSet:");
}

uint64_t sub_19191882C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
}

void sub_191918848()
{
  id v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:@"__k_IDSDaemonDidConnectNotification" object:0];
}

void sub_19191889C()
{
  id v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:@"__kIDSDaemonWillConnectNotification" object:0];
}

uint64_t sub_1919189BC(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    char v3 = *(void **)(a1 + 32);
    return [v3 performSelector:sel_daemonControllerWillConnect withObject:0];
  }
  return result;
}

id sub_191918A1C()
{
  return (id)[MEMORY[0x1E4F6C3E0] sharedInstance];
}

void sub_191918A44()
{
}

uint64_t sub_191918A58(void *a1)
{
  return [*(id *)(a1[4] + 8) addDelegate:a1[5] forService:a1[6] listenerID:a1[7] queue:a1[8]];
}

uint64_t sub_191918A70(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 8) = [[_IDSService alloc] initWithService:*(void *)(a1 + 40) commands:*(void *)(a1 + 48) manuallyAckMessages:*(unsigned __int8 *)(a1 + 56) delegateContext:*(void *)(a1 + 32)];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191918AC8()
{
  qword_1EB2BD830 = objc_alloc_init(IDSInternalQueueController);

  return MEMORY[0x1F41817F8]();
}

void sub_191918B04(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
    uint64_t v2 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      sub_191A2AE7C();
    }

    [*(id *)(*(void *)(a1 + 32) + 16) invalidate];
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 16);
    *(void *)(v3 + 16) = 0;
  }
}

void sub_191918B7C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) listener];
  [v1 _noteDisconnected];
}

uint64_t sub_191918BC0(uint64_t a1)
{
  qword_1EB2BD790 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191918BF8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 160) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 161) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 162) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 163) = 0;
  return [*(id *)(a1 + 32) _callHandlersWithBlockOnIvarQueue:&unk_1EE246348];
}

uint64_t sub_191918C28(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 164);
  return result;
}

uint64_t sub_191918C3C()
{
  qword_1EB2BD828 = objc_alloc_init(IDSIDQueryController);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191918C78()
{
  qword_1EB2BD7F8 = objc_alloc_init(IDSDaemonController);

  return MEMORY[0x1F41817F8]();
}

void sub_191918CB4(uint64_t a1)
{
}

uint64_t sub_191918CC8()
{
  qword_1EB2BD7C0 = (uint64_t)os_log_create("com.apple.IDS", "IDSAccountController");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191918D0C()
{
  qword_1EB2BD7D8 = (uint64_t)os_log_create("com.apple.IDS", "DaemonController");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191918D50(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 8) = [[_IDSIDQueryController alloc] initWithDelegateContext:*(void *)(a1 + 32) queueController:*(void *)(*(void *)(a1 + 32) + 16)];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191918DA4()
{
  qword_1EB2BD740 = [[IDSInternalQueueController alloc] initWithName:"IDSIDQueryControllerQueue" contextKey:&unk_1E92DFC28];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191918DF4()
{
  qword_1EB2BD778 = (uint64_t)os_log_create("com.apple.IDS", "_IDSService");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191918E38()
{
  qword_1EB2BD7E0 = (uint64_t)os_log_create("com.apple.IDS", "Connection");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191918E7C()
{
  qword_1EB2BD7A0 = (uint64_t)os_log_create("com.apple.IDS", "Accounts");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191918EC0()
{
  qword_1EB2BD6F8 = (uint64_t)os_log_create("com.apple.IDS", "IDQuery");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191919558(void *a1)
{
  *(void *)(a1[4] + 8) = [[_IDSContinuity alloc] initWithDelegate:a1[5] queue:a1[6] delegateContext:a1[4]];

  return MEMORY[0x1F41817F8]();
}

void sub_1919196C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1919196DC()
{
  return self;
}

void sub_1919197D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919197F0(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) state];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_191919910(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_startAdvertisingOfType_withData_withOptions_);
}

uint64_t sub_1919199C0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_stopAdvertisingOfType_);
}

uint64_t sub_191919AF4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_startScanningForType_withData_mask_peers_);
}

uint64_t sub_191919BF4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_startScanningForType_withData_mask_);
}

uint64_t sub_191919D58(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_startScanningForType_withData_mask_peers_boostedScan_duplicates_);
}

uint64_t sub_191919E78(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_startScanningForType_withData_mask_boostedScan_duplicates_);
}

uint64_t sub_191919F30(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_stopScanningForType_);
}

void sub_191919FF0()
{
  id v0 = +[IDSDaemonController sharedInstance];
  [v0 _agentDidLaunchNotification:0];
}

uint64_t sub_19191A14C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void -[IDSDaemonController _blockUntilSendQueueIsEmpty](IDSDaemonController *self, SEL a2)
{
  id v5 = [MEMORY[0x1E4F6C360] sharedInstance];
  if ([v5 isNonUIInstall])
  {
  }
  else
  {
    uint64_t v3 = [MEMORY[0x1E4F6C3E0] sharedInstance];
    char v4 = [v3 systemIsShuttingDown];

    if ((v4 & 1) == 0)
    {
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      v6[2] = sub_19191A260;
      v6[3] = &unk_1E5729000;
      v6[4] = self;
      [(IDSDaemonController *)self _performBlock:v6 wait:1];
    }
  }
}

void sub_19191A260(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 162))
  {
    uint64_t v2 = *(NSObject **)(v1 + 80);
    if (v2) {
      dispatch_sync(v2, &unk_1EE2459A8);
    }
    id v3 = [MEMORY[0x1E4F6C3C8] defaultBroadcaster];
    [v3 blockUntilSendQueueIsEmpty];
  }
}

void sub_19191A2D4()
{
  id v0 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG)) {
    sub_191A2AA60();
  }
}

void +[IDSDaemonController _blockUntilSendQueueIsEmpty](id a1, SEL a2)
{
  id v2 = +[IDSDaemonController sharedInstance];
  [v2 _blockUntilSendQueueIsEmpty];
}

uint64_t sub_19191A42C(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(*(void *)(a1 + 32) + 160) = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 162))
  {
    id v3 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 80);
      *(_DWORD *)buf = 134217984;
      uint64_t v22 = v4;
      _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "Resume at disconnect %p", buf, 0xCu);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 162) = 0;
    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 80));
    uint64_t v2 = *(void *)(a1 + 32);
  }
  id v5 = *(void **)(v2 + 104);
  *(void *)(v2 + 104) = 0;

  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 128);
  *(void *)(v6 + 128) = 0;

  *(_DWORD *)(*(void *)(a1 + 32) + 156) = 0;
  if (([*(id *)(a1 + 32) localObjectExists] & 1) != 0
    || [*(id *)(a1 + 32) remoteObjectExists])
  {
    if (!*(unsigned char *)(a1 + 40)) {
      +[IDSDaemonController _blockUntilSendQueueIsEmpty];
    }
    uint64_t v8 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v8 removeObserver:*(void *)(a1 + 32) name:*MEMORY[0x1E4F6C268] object:0];

    int v9 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v9 removeObserver:*(void *)(a1 + 32) name:*MEMORY[0x1E4F6C1D8] object:0];

    [*(id *)(a1 + 32) _remoteObjectCleanup];
    [*(id *)(a1 + 32) _localObjectCleanup];
    if (!*(unsigned char *)(a1 + 40)) {
      *(unsigned char *)(*(void *)(a1 + 32) + 161) = 1;
    }
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = sub_19191A71C;
    v20[3] = &unk_1E5729000;
    v20[4] = *(void *)(a1 + 32);
    uint64_t v10 = (void (**)(void))MEMORY[0x192FE03B0](v20);
    dispatch_async(MEMORY[0x1E4F14428], &unk_1EE246EC8);
    __int16 v11 = [*(id *)(a1 + 32) listener];
    [v11 _setHidingDisconnect:1];

    if ([*(id *)(a1 + 32) _autoReconnect])
    {
      dispatch_time_t v12 = dispatch_time(0, 5000000000);
      uint64_t v13 = *(NSObject **)(*(void *)(a1 + 32) + 64);
      uint64_t v15 = MEMORY[0x1E4F143A8];
      uint64_t v16 = 3221225472;
      id v17 = sub_19191AAEC;
      uint64_t v18 = &unk_1E5728FD8;
      uint64_t v19 = v10;
      dispatch_after(v12, v13, &v15);
    }
    else
    {
      v10[2](v10);
    }
  }
  return objc_msgSend(*(id *)(a1 + 32), "_noteDisconnected", v15, v16, v17, v18);
}

void sub_19191A71C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) listener];
  [v2 _setHidingDisconnect:0];

  if (([*(id *)(a1 + 32) isConnected] & 1) != 0
    || ([*(id *)(a1 + 32) isConnecting] & 1) != 0)
  {
    id v3 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      sub_191A2AA94();
    }
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_191A2AAC8();
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
    char v6 = objc_opt_respondsToSelector();

    if (v6)
    {
      id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
      [v7 performSelector:sel_daemonControllerDidDisconnect withObject:0];
    }
    id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
    char v9 = objc_opt_respondsToSelector();

    if (v9)
    {
      id v10 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
      [v10 performSelector:sel_daemonConnectionLost withObject:0];
    }
    dispatch_async(MEMORY[0x1E4F14428], &unk_1EE245FE8);
  }
}

void sub_19191A888()
{
  id v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:@"__kIDSDaemonConnectionLostNotification" object:0];

  id v1 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v1 postNotificationName:@"__kIDSDaemonDidDisconnectNotification" object:0];
}

void sub_19191A9CC()
{
  id v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:@"__k_IDSDaemonDidDisconnectNotification" object:0];
}

uint64_t sub_19191AAEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19191AB70(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [MEMORY[0x1E4F6C3E0] sharedInstance];
      int v4 = [v3 systemIsShuttingDown];
      id v5 = @"NO";
      if (v4) {
        char v6 = @"YES";
      }
      else {
        char v6 = @"NO";
      }
      if (*(unsigned char *)(*(void *)(a1 + 32) + 164)) {
        id v5 = @"YES";
      }
      int v7 = 138412546;
      id v8 = v6;
      __int16 v9 = 2112;
      id v10 = v5;
      _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "  Connecting to idsdaemon system is shutting down: %@  hasBeenSuspended %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_19191AC7C()
{
  id v0 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v1 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "XPC has informed us that a fatal error has occured, we will not be attempting to reconnect any further", v1, 2u);
  }
}

void sub_19191AEB4(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = *(void *)(a1[5] + 176);
    int v13 = 136315650;
    uint64_t v14 = "-[IDSDaemonController addedDelegateForService:withCompletion:]_block_invoke";
    __int16 v15 = 2112;
    uint64_t v16 = v3;
    __int16 v17 = 2112;
    uint64_t v18 = v4;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "%s: adding delegate on service %@ _notificationServices %@", (uint8_t *)&v13, 0x20u);
  }

  if (([*(id *)(a1[5] + 176) containsObject:a1[4]] & 1) == 0)
  {
    id v5 = *(void **)(a1[5] + 176);
    if (!v5)
    {
      id v6 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      uint64_t v7 = a1[5];
      id v8 = *(void **)(v7 + 176);
      *(void *)(v7 + 176) = v6;

      id v5 = *(void **)(a1[5] + 176);
    }
    [v5 addObject:a1[4]];
    uint64_t v9 = a1[6];
    id v10 = +[IDSDaemonController sharedInstance];
    uint64_t v11 = v10;
    if (v9)
    {
      uint64_t v12 = [v10 forwarderWithCompletion:a1[6]];

      uint64_t v11 = (void *)v12;
    }
    [v11 registerForNotificationsOnServices:*(void *)(a1[5] + 176)];
  }
}

void sub_19191B0C0(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 96) objectForKey:*(void *)(a1 + 40)];

  uint64_t v3 = [MEMORY[0x1E4F6C3B8] registration];
  uint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "count"));
      uint64_t v7 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 120), "count"));
      id v8 = [*(id *)(*(void *)(a1 + 32) + 144) objectForKey:*(void *)(a1 + 40)];
      *(_DWORD *)buf = 138413058;
      uint64_t v12 = v5;
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      __int16 v15 = 2112;
      uint64_t v16 = v7;
      __int16 v17 = 2112;
      uint64_t v18 = v8;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Removing listener with ID: %@    services (count): %@   commands (count): %@   capabilities %@", buf, 0x2Au);
    }
    [*(id *)(*(void *)(a1 + 32) + 96) removeObjectForKey:*(void *)(a1 + 40)];
    [*(id *)(*(void *)(a1 + 32) + 120) removeObjectForKey:*(void *)(a1 + 40)];
    [*(id *)(*(void *)(a1 + 32) + 144) removeObjectForKey:*(void *)(a1 + 40)];
    uint64_t v9 = *(void **)(a1 + 32);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_19191B2C4;
    v10[3] = &unk_1E5729000;
    v10[4] = v9;
    [v9 _performBlock:v10];
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      sub_191A2ACF0();
    }
  }
}

uint64_t sub_19191B2C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _listenerSetUpdated];
}

void sub_19191B3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19191B414(void *a1)
{
  id v5 = [*(id *)(a1[4] + 96) objectForKey:a1[5]];
  uint64_t v2 = [v5 copy];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19191B578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19191B590(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length]
    && ([*(id *)(a1 + 40) hasListenerForID:*(void *)(a1 + 32)] & 1) != 0)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2)
    {
      id v3 = v2;
    }
    else
    {
      id v3 = [MEMORY[0x1E4F1CAD0] set];
    }
    uint64_t v4 = v3;
    id v5 = [*(id *)(a1 + 40) servicesForListenerID:*(void *)(a1 + 32)];
    int v6 = [v5 isEqualToSet:v4];

    if (v6)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    }
    else
    {
      uint64_t v7 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        sub_191A2AD58();
      }

      [*(id *)(*(void *)(a1 + 40) + 96) setObject:v4 forKey:*(void *)(a1 + 32)];
      [*(id *)(a1 + 40) _listenerSetUpdated];
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  }
}

void sub_19191B798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19191B7B0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length]
    && ([*(id *)(a1 + 40) hasListenerForID:*(void *)(a1 + 32)] & 1) != 0)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2)
    {
      id v3 = v2;
    }
    else
    {
      id v3 = [MEMORY[0x1E4F1CAD0] set];
    }
    uint64_t v4 = v3;
    id v5 = [*(id *)(a1 + 40) commandsForListenerID:*(void *)(a1 + 32)];
    int v6 = [v5 isEqualToSet:v4];

    if (v6)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    }
    else
    {
      uint64_t v7 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        sub_191A2ADD0();
      }

      [*(id *)(*(void *)(a1 + 40) + 120) setObject:v4 forKey:*(void *)(a1 + 32)];
      [*(id *)(a1 + 40) _listenerSetUpdated];
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  }
}

void sub_19191B9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19191BA04(void *a1)
{
  id v5 = [*(id *)(a1[4] + 120) objectForKey:a1[5]];
  uint64_t v2 = [v5 copy];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19191BB3C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19191BB54(void *a1)
{
  id v2 = [*(id *)(a1[4] + 144) objectForKey:a1[5]];
  *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = [v2 unsignedIntValue];
}

void sub_19191BCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19191BCBC(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (![*(id *)(a1 + 32) length])
  {
    if (*(unsigned char *)(a1 + 60))
    {
      uint64_t v7 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(_DWORD *)(a1 + 56);
        uint64_t v9 = *(void *)(a1 + 32);
        int v18 = 67109378;
        int v19 = v8;
        __int16 v20 = 2112;
        uint64_t v21 = v9;
        id v10 = "setCapabilities %d for listenerID %@ has no ID";
LABEL_16:
        _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v18, 0x12u);
      }
LABEL_17:
    }
LABEL_18:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    return;
  }
  if (([*(id *)(a1 + 40) hasListenerForID:*(void *)(a1 + 32)] & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 60))
    {
      uint64_t v7 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(_DWORD *)(a1 + 56);
        uint64_t v12 = *(void *)(a1 + 32);
        int v18 = 67109378;
        int v19 = v11;
        __int16 v20 = 2112;
        uint64_t v21 = v12;
        id v10 = "setCapabilities %d for listenerID %@ is not a valid listener";
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 56))
  {
    int v2 = [*(id *)(a1 + 40) capabilitiesForListenerID:*(void *)(a1 + 32)];
    uint64_t v3 = *(unsigned int *)(a1 + 56);
    if (v2 == v3)
    {
      if (*(unsigned char *)(a1 + 60))
      {
        uint64_t v4 = [MEMORY[0x1E4F6C3B8] registration];
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          int v5 = *(_DWORD *)(a1 + 56);
          uint64_t v6 = *(void *)(a1 + 32);
          int v18 = 67109378;
          int v19 = v5;
          __int16 v20 = 2112;
          uint64_t v21 = v6;
          _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "setCapabilities %d for listenerID %@ - listener map already contains our capabilities", (uint8_t *)&v18, 0x12u);
        }
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      return;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (*(unsigned char *)(a1 + 60))
  {
    __int16 v13 = objc_msgSend(MEMORY[0x1E4F6C3B8], "registration", v3);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(_DWORD *)(a1 + 56);
      uint64_t v15 = *(void *)(a1 + 32);
      int v18 = 67109378;
      int v19 = v14;
      __int16 v20 = 2112;
      uint64_t v21 = v15;
      _os_log_impl(&dword_19190B000, v13, OS_LOG_TYPE_DEFAULT, "Set caps: %d  for listener ID: %@", (uint8_t *)&v18, 0x12u);
    }

    uint64_t v3 = *(unsigned int *)(a1 + 56);
  }
  uint64_t v16 = *(void **)(*(void *)(a1 + 40) + 144);
  __int16 v17 = [NSNumber numberWithInt:v3];
  [v16 setObject:v17 forKey:*(void *)(a1 + 32)];

  [*(id *)(a1 + 40) _listenerSetUpdated];
}

void sub_19191C058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19191C070(uint64_t a1)
{
}

void sub_19191C084()
{
  id v0 = +[IDSLogging DaemonController];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_INFO, "Finished blocking for daemon connection", v1, 2u);
  }
}

void sub_19191C1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19191C1B8(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 32) != 0;
  return result;
}

unsigned char *sub_19191C244(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (!result[161]) {
    return (unsigned char *)[result connectToDaemonWithLaunch:0];
  }
  return result;
}

void sub_19191C2CC(uint64_t a1)
{
  int v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_191A2AEB0();
  }

  [*(id *)(a1 + 32) _noteDisconnected];
  [*(id *)(a1 + 32) _localObjectCleanup];
  [*(id *)(a1 + 32) _remoteObjectCleanup];
  [*(id *)(a1 + 32) _disconnectFromDaemonWithForce:1];
  if ((byte_1EB2BD6E1 & 1) == 0)
  {
    byte_1EB2BD6E1 = 1;
    dispatch_time_t v3 = dispatch_time(0, 2000000000);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(NSObject **)(v4 + 64);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19191C3C4;
    block[3] = &unk_1E5729000;
    void block[4] = v4;
    dispatch_after(v3, v5, block);
  }
}

uint64_t sub_19191C3C4(uint64_t a1)
{
  int v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, " ... disconnection from agent (local) being handled by ivarQueue", v4, 2u);
  }

  uint64_t result = [*(id *)(a1 + 32) connectToDaemon];
  byte_1EB2BD6E1 = 0;
  return result;
}

uint64_t sub_19191C4B8(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _noteDisconnected];
  if ((byte_1EB2BD6E1 & 1) == 0)
  {
    byte_1EB2BD6E1 = 1;
    dispatch_time_t v3 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      sub_191A2AEE4();
    }

    uint64_t v4 = *(void **)(a1 + 32);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = sub_19191C580;
    v5[3] = &unk_1E5729000;
    v5[4] = v4;
    return [v4 _performBlock:v5];
  }
  return result;
}

void sub_19191C580(uint64_t a1)
{
  int v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, " ... disconnection from agent (remote) being handled by ivarQueue", buf, 2u);
  }

  [*(id *)(a1 + 32) _disconnectFromDaemonWithForce:1];
  dispatch_time_t v3 = [MEMORY[0x1E4F6C3E0] sharedInstance];
  if (([v3 systemIsShuttingDown] & 1) != 0
    || ![*(id *)(a1 + 32) _autoReconnect])
  {
  }
  else
  {
    int v4 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 161);

    if (!v4)
    {
      int v5 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        sub_191A2AF18();
      }

      dispatch_time_t v6 = dispatch_time(0, 2000000000);
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = *(NSObject **)(v7 + 64);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_19191C6E4;
      block[3] = &unk_1E5729000;
      void block[4] = v7;
      dispatch_after(v6, v8, block);
    }
  }
  byte_1EB2BD6E1 = 0;
}

uint64_t sub_19191C6E4(uint64_t a1)
{
  int v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_191A2AF4C();
  }

  return [*(id *)(a1 + 32) connectToDaemon];
}

void sub_19191C8B8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = sub_19191C94C;
  v2[3] = &unk_1E57291B8;
  v2[4] = v1;
  id v3 = *(id *)(a1 + 40);
  [v1 _performBlock:v2 wait:0];
}

void sub_19191C94C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) connectToDaemon])
  {
    id v4 = *(id *)(*(void *)(a1 + 32) + 16);
    int v2 = [MEMORY[0x1E4F6C3C8] defaultBroadcaster];
    id v3 = [v2 broadcastProxyForTarget:v4 messageContext:0 protocol:&unk_1EE28EA60];

    if (v3) {
      [v3 sendXPCObject:*(void *)(a1 + 40)];
    }
  }
}

void sub_19191CA08(uint64_t a1)
{
  if ([*(id *)(a1 + 32) connectToDaemon])
  {
    int v2 = *(void **)(a1 + 40);
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 80);
    dispatch_async(v3, v2);
  }
}

uint64_t sub_19191CDBC(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 164) = 1;
  return result;
}

uint64_t sub_19191CE7C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 164) = 1;
  return result;
}

void sub_19191D094(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  int v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void sub_19191D184(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_19191D1AC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_19191D1F0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_19191D210(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_19191D230(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x20u);
}

void sub_19191D2A4()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2A60];
  uint64_t v1 = (void *)qword_1EB2BD5D0;
  qword_1EB2BD5D0 = v0;

  int v2 = (void *)qword_1EB2BD5D0;
  id v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  dispatch_time_t v6 = objc_msgSend(v3, "setWithObjects:", v4, v5, objc_opt_class(), 0);
  [v2 setClasses:v6 forSelector:sel_fetchEndpointCacheStateForServiceIdentifier_localURI_remoteURI_completion_ argumentIndex:1 ofReply:1];

  uint64_t v7 = (void *)qword_1EB2BD5D0;
  int v8 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  __int16 v13 = objc_msgSend(v8, "setWithObjects:", v9, v10, v11, v12, objc_opt_class(), 0);
  [v7 setClasses:v13 forSelector:sel_fetchTransparentEndpointsForServiceIdentifier_localURI_remoteURI_verifyAgainstTrustCircle_completion_ argumentIndex:0 ofReply:1];

  int v14 = (void *)qword_1EB2BD5D0;
  uint64_t v15 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v16 = objc_opt_class();
  __int16 v17 = objc_msgSend(v15, "setWithObjects:", v16, objc_opt_class(), 0);
  [v14 setClasses:v17 forSelector:sel_sendFakePushFromFile_completion_ argumentIndex:0 ofReply:1];

  int v18 = (void *)qword_1EB2BD5D0;
  int v19 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v20 = objc_opt_class();
  uint64_t v21 = objc_msgSend(v19, "setWithObjects:", v20, objc_opt_class(), 0);
  [v18 setClasses:v21 forSelector:sel_listSenderKeysForURIs_completion_ argumentIndex:0 ofReply:0];

  uint64_t v22 = (void *)qword_1EB2BD5D0;
  objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  id v23 = (id)objc_claimAutoreleasedReturnValue();
  [v22 setClasses:v23 forSelector:sel_setOffGridMode_options_completion_ argumentIndex:0 ofReply:0];
}

id sub_19191D518()
{
  if (qword_1E92DE268 != -1) {
    dispatch_once(&qword_1E92DE268, &unk_1EE246228);
  }
  uint64_t v0 = (void *)qword_1E92DE260;

  return v0;
}

uint64_t sub_19191D56C()
{
  qword_1E92DE260 = (uint64_t)nw_framer_create_definition("LengthOnlyHeaderProtocol", 0, &unk_1EE245F08);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_19191D5B4(uint64_t a1, void *a2)
{
  int v2 = a2;
  nw_framer_set_input_handler(v2, &unk_1EE246DC8);
  nw_framer_set_output_handler(v2, &unk_1EE246B28);

  return 1;
}

uint64_t sub_19191D5FC(uint64_t a1, void *a2)
{
  int v2 = a2;
  *(_DWORD *)temp_buffer = 0;
  uint64_t v3 = 4;
  if (nw_framer_parse_input(v2, 4uLL, 4uLL, temp_buffer, &unk_1EE246A68))
  {
    uint64_t v3 = 4;
    while (1)
    {
      uint64_t v4 = nw_framer_message_create(v2);
      kdebug_trace();
      BOOL v5 = nw_framer_deliver_input_no_copy(v2, bswap32(*(unsigned int *)temp_buffer), v4, 1);

      if (!v5) {
        break;
      }
      *(_DWORD *)temp_buffer = 0;
      if (!nw_framer_parse_input(v2, 4uLL, 4uLL, temp_buffer, &unk_1EE246A68)) {
        goto LABEL_7;
      }
    }
    uint64_t v3 = 0;
  }
LABEL_7:

  return v3;
}

uint64_t sub_19191D6E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 4 || a2 == 0) {
    return 0;
  }
  else {
    return 4;
  }
}

void sub_19191D6F8(uint64_t a1, void *a2, uint64_t a3, size_t a4)
{
  BOOL v5 = a2;
  kdebug_trace();
  *(_DWORD *)output_buffer = bswap32(a4);
  nw_framer_write_output(v5, output_buffer, 4uLL);
  nw_framer_write_output_no_copy(v5, a4);
}

void sub_19191D7C0()
{
  v68[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2AC0];
  uint64_t v1 = (void *)qword_1EB2BD5D8;
  qword_1EB2BD5D8 = v0;

  int v2 = (void *)qword_1EB2BD5D8;
  uint64_t v3 = (void *)MEMORY[0x1E4F1CAD0];
  v68[0] = objc_opt_class();
  v68[1] = objc_opt_class();
  uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v68 count:2];
  BOOL v5 = [v3 setWithArray:v4];
  [v2 setClasses:v5 forSelector:sel_fetchPeerVerificationInfoForApplication_forURIs_withCompletion_ argumentIndex:1 ofReply:0];

  dispatch_time_t v6 = (void *)qword_1EB2BD5D8;
  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  v67[0] = objc_opt_class();
  v67[1] = objc_opt_class();
  uint64_t v55 = 0;
  v56 = &v55;
  uint64_t v57 = 0x2050000000;
  int v8 = (void *)qword_1EB2BD6D8;
  uint64_t v58 = qword_1EB2BD6D8;
  if (!qword_1EB2BD6D8)
  {
    uint64_t v50 = MEMORY[0x1E4F143A8];
    uint64_t v51 = 3221225472;
    v52 = sub_19191E018;
    uint64_t v53 = &unk_1E5728DD0;
    uint64_t v54 = &v55;
    sub_19191E018((uint64_t)&v50);
    int v8 = (void *)v56[3];
  }
  id v9 = v8;
  _Block_object_dispose(&v55, 8);
  v67[2] = v9;
  v67[3] = objc_opt_class();
  uint64_t v55 = 0;
  v56 = &v55;
  uint64_t v57 = 0x2050000000;
  uint64_t v10 = (void *)qword_1EB2BD6A0;
  uint64_t v58 = qword_1EB2BD6A0;
  if (!qword_1EB2BD6A0)
  {
    uint64_t v50 = MEMORY[0x1E4F143A8];
    uint64_t v51 = 3221225472;
    v52 = sub_19191E1D8;
    uint64_t v53 = &unk_1E5728DD0;
    uint64_t v54 = &v55;
    sub_19191E1D8((uint64_t)&v50);
    uint64_t v10 = (void *)v56[3];
  }
  id v11 = v10;
  _Block_object_dispose(&v55, 8);
  v67[4] = v11;
  uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v67 count:5];
  __int16 v13 = [v7 setWithArray:v12];
  [v6 setClasses:v13 forSelector:sel_fetchPeerVerificationInfoForApplication_forURIs_withCompletion_ argumentIndex:0 ofReply:1];

  int v14 = (void *)qword_1EB2BD5D8;
  uint64_t v15 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v55 = 0;
  v56 = &v55;
  uint64_t v57 = 0x2050000000;
  uint64_t v16 = (void *)qword_1EB2BD6A8;
  uint64_t v58 = qword_1EB2BD6A8;
  if (!qword_1EB2BD6A8)
  {
    uint64_t v50 = MEMORY[0x1E4F143A8];
    uint64_t v51 = 3221225472;
    v52 = sub_19191E230;
    uint64_t v53 = &unk_1E5728DD0;
    uint64_t v54 = &v55;
    sub_19191E230((uint64_t)&v50);
    uint64_t v16 = (void *)v56[3];
  }
  id v17 = v16;
  _Block_object_dispose(&v55, 8);
  v66[0] = v17;
  v66[1] = objc_opt_class();
  v66[2] = objc_opt_class();
  v66[3] = objc_opt_class();
  v66[4] = objc_opt_class();
  int v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:v66 count:5];
  int v19 = [v15 setWithArray:v18];
  [v14 setClasses:v19 forSelector:sel_healSelfForApplication_withHealableErrors_withCompletion_ argumentIndex:1 ofReply:0];

  uint64_t v20 = (void *)qword_1EB2BD5D8;
  uint64_t v21 = (void *)MEMORY[0x1E4F1CAD0];
  v65[0] = objc_opt_class();
  v65[1] = objc_opt_class();
  v65[2] = objc_opt_class();
  uint64_t v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:v65 count:3];
  id v23 = [v21 setWithArray:v22];
  [v20 setClasses:v23 forSelector:sel_sendOptInUpdateForApplications_withCompletion_ argumentIndex:0 ofReply:1];

  __int16 v24 = (void *)qword_1EB2BD5D8;
  int v25 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v64 = objc_opt_class();
  uint64_t v26 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v64 count:1];
  uint64_t v27 = [v25 setWithArray:v26];
  [v24 setClasses:v27 forSelector:sel_fetchKTRegistrationStatusWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v28 = (void *)qword_1EB2BD5D8;
  uint64_t v29 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v55 = 0;
  v56 = &v55;
  uint64_t v57 = 0x2050000000;
  __int16 v30 = (void *)qword_1EB2BD6B0;
  uint64_t v58 = qword_1EB2BD6B0;
  if (!qword_1EB2BD6B0)
  {
    uint64_t v50 = MEMORY[0x1E4F143A8];
    uint64_t v51 = 3221225472;
    v52 = sub_19191E288;
    uint64_t v53 = &unk_1E5728DD0;
    uint64_t v54 = &v55;
    sub_19191E288((uint64_t)&v50);
    __int16 v30 = (void *)v56[3];
  }
  id v31 = v30;
  _Block_object_dispose(&v55, 8);
  v63[0] = v31;
  v63[1] = objc_opt_class();
  id v32 = [MEMORY[0x1E4F1C978] arrayWithObjects:v63 count:2];
  uint64_t v33 = [v29 setWithArray:v32];
  [v28 setClasses:v33 forSelector:sel_peerVerificationFinishedWithResults_ argumentIndex:0 ofReply:0];

  uint64_t v34 = (void *)qword_1EB2BD5D8;
  id v35 = (void *)MEMORY[0x1E4F1CAD0];
  v62[0] = objc_opt_class();
  v62[1] = objc_opt_class();
  v62[2] = objc_opt_class();
  v62[3] = objc_opt_class();
  v62[4] = objc_opt_class();
  uint64_t v36 = [MEMORY[0x1E4F1C978] arrayWithObjects:v62 count:5];
  __int16 v37 = [v35 setWithArray:v36];
  [v34 setClasses:v37 forSelector:sel_sendOptInUpdateRequest_withCompletion_ argumentIndex:0 ofReply:0];

  v38 = (void *)qword_1EB2BD5D8;
  uint64_t v39 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v61 = objc_opt_class();
  id v40 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v61 count:1];
  uint64_t v41 = [v39 setWithArray:v40];
  [v38 setClasses:v41 forSelector:sel_sendOptInUpdateRequest_withCompletion_ argumentIndex:0 ofReply:1];

  id v42 = (void *)qword_1EB2BD5D8;
  uint64_t v43 = (void *)MEMORY[0x1E4F1CAD0];
  v60[0] = objc_opt_class();
  v60[1] = objc_opt_class();
  v60[2] = objc_opt_class();
  uint64_t v44 = [MEMORY[0x1E4F1C978] arrayWithObjects:v60 count:3];
  uint64_t v45 = [v43 setWithArray:v44];
  [v42 setClasses:v45 forSelector:sel_cacheClearRequest_ argumentIndex:0 ofReply:0];

  v46 = (void *)qword_1EB2BD5D8;
  uint64_t v47 = (void *)MEMORY[0x1E4F1CAD0];
  v59[0] = objc_opt_class();
  v59[1] = objc_opt_class();
  id v48 = [MEMORY[0x1E4F1C978] arrayWithObjects:v59 count:2];
  v49 = [v47 setWithArray:v48];
  [v46 setClasses:v49 forSelector:sel_getCurrentRegistrationStateWithCompletion_ argumentIndex:0 ofReply:1];
}

void sub_19191DFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_19191E018(uint64_t a1)
{
  sub_19191E070();
  Class result = objc_getClass("KTVerificationInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_191A2B050();
  }
  qword_1EB2BD6D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19191E070()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!qword_1EB2BD6C0)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = sub_19191E164;
    v0[4] = &unk_1E5729360;
    v0[5] = v0;
    long long v1 = xmmword_1E5729348;
    uint64_t v2 = 0;
    qword_1EB2BD6C0 = _sl_dlopen();
  }
  if (!qword_1EB2BD6C0) {
    sub_191A2B0CC(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_19191E164()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2BD6C0 = result;
  return result;
}

Class sub_19191E1D8(uint64_t a1)
{
  sub_19191E070();
  Class result = objc_getClass("KTLoggableData");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_191A2B14C();
  }
  qword_1EB2BD6A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_19191E230(uint64_t a1)
{
  sub_19191E070();
  Class result = objc_getClass("KTSelfVerificationHealableErrors");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_191A2B1C8();
  }
  qword_1EB2BD6A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_19191E288(uint64_t a1)
{
  sub_19191E070();
  Class result = objc_getClass("KTVerifierResult");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_191A2B244();
  }
  qword_1EB2BD6B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void IDSSecurityKeyRollingRollKeys()
{
  if (_IDSRunningInDaemon()) {
    sub_191A2B2C0();
  }
  uint64_t v0 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "Received deprecated call to roll keys -- posting key rolling complete notification immediately", v2, 2u);
  }

  long long v1 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v1 postNotificationName:@"__kIDSKeyRollingCompleteNotification" object:0];
}

void IDSSecurityKeyRollingRegenerateRegisteredIdentity()
{
  if (_IDSRunningInDaemon()) {
    sub_191A2B2EC();
  }
  uint64_t v0 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "Received call to roll encryption keys", v2, 2u);
  }

  long long v1 = +[IDSDaemonController sharedInstance];
  [v1 regenerateRegisteredIdentity];
}

uint64_t sub_19191EA74()
{
  qword_1EB2BD5E0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2B20];

  return MEMORY[0x1F41817F8]();
}

void IDSLocalSetupStart()
{
  if (_IDSRunningInDaemon()) {
    sub_191A2B318();
  }
  uint64_t v0 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "IDSLocalSetupStart", v2, 2u);
  }

  long long v1 = +[IDSDaemonController sharedInstance];
  [v1 startLocalSetup];
}

void IDSLocalSetupCompleted()
{
  if (_IDSRunningInDaemon()) {
    sub_191A2B344();
  }
  uint64_t v0 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "IDSLocalSetupCompleted", v2, 2u);
  }

  long long v1 = +[IDSDaemonController sharedInstance];
  [v1 localSetupCompleted];
}

void IDSLocalSetupStop()
{
  if (_IDSRunningInDaemon()) {
    sub_191A2B370();
  }
  uint64_t v0 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "IDSLocalSetupStop", v2, 2u);
  }

  long long v1 = +[IDSDaemonController sharedInstance];
  [v1 stopLocalSetup];
}

uint64_t IDSLocalSetupUnpair()
{
  if (_IDSRunningInDaemon()) {
    sub_191A2B39C();
  }
  uint64_t v0 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "IDSLocalSetupUnpair", v3, 2u);
  }

  long long v1 = +[IDSDaemonController sharedInstance];
  [v1 localSetupUnpair];

  return sleep(0xAu);
}

void IDSLocalSetupUnpairStart()
{
  if (_IDSRunningInDaemon()) {
    sub_191A2B3C8();
  }
  uint64_t v0 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "IDSLocalSetupUnpairStart", v2, 2u);
  }

  long long v1 = +[IDSDaemonController sharedInstance];
  [v1 localSetupUnpairStart];
}

void IDSAddPairedDevice(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (_IDSRunningInDaemon()) {
    sub_191A2B3F4();
  }
  uint64_t v2 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v1;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "IDSAddPairedDevice %@", (uint8_t *)&v5, 0xCu);
  }

  uint64_t v3 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v1;
    _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "Asked to pair device with cbuuid: %@", (uint8_t *)&v5, 0xCu);
  }

  uint64_t v4 = +[IDSDaemonController sharedInstance];
  [v4 addPairedDevice:v1];
}

void IDSConfigureDemoMode()
{
  if (_IDSRunningInDaemon()) {
    sub_191A2B420();
  }
  uint64_t v0 = +[IDSDaemonController sharedInstance];
  [v0 addListenerID:@"DemoModeConfig" services:0];

  IDSLocalSetupStart();
  IDSAddPairedDevice(@"12345678-0000-DADA-DADA-DEADBEEEEEEE");
  IDSLocalSetupCompleted();
  dispatch_time_t v1 = dispatch_time(0, 10000000000);
  uint64_t v2 = MEMORY[0x1E4F14428];

  dispatch_after(v1, v2, &unk_1EE246288);
}

void sub_19191EF8C()
{
  id v0 = +[IDSDaemonController sharedInstance];
  [v0 removeListenerID:@"DemoModeConfig"];
}

void IDSConnectPairedDevice(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (_IDSRunningInDaemon()) {
    sub_191A2B44C();
  }
  uint64_t v2 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    id v5 = v1;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "IDSConnectPairedDevice %@", (uint8_t *)&v4, 0xCu);
  }

  uint64_t v3 = +[IDSDaemonController sharedInstance];
  [v3 connectPairedDevice:v1];
}

void IDSDeletePairedDevice(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (_IDSRunningInDaemon()) {
    sub_191A2B478();
  }
  uint64_t v2 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315394;
    int v4 = "IDSDeletePairedDevice";
    __int16 v5 = 2112;
    id v6 = v1;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v3, 0x16u);
  }

  IDSDeletePairedDeviceWithCompletion(v1, 0, MEMORY[0x1E4F14428]);
}

void IDSDeletePairedDeviceWithCompletion(void *a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A2B4A4();
  }
  int v8 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)buf = 136315906;
    uint64_t v15 = "IDSDeletePairedDeviceWithCompletion";
    __int16 v16 = 2112;
    id v17 = v5;
    __int16 v18 = 2048;
    int v19 = v9;
    __int16 v20 = 2048;
    id v21 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s %@ %p %p", buf, 0x2Au);
  }
  uint64_t v10 = +[IDSPairedDeviceManager sharedInstance];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_19191F350;
  v12[3] = &unk_1E5729390;
  id v13 = v6;
  id v11 = v6;
  [v10 deletePairedDevice:v5 withCompletionBlock:v12 queue:v7];
}

uint64_t sub_19191F350(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void IDSDeletePairedDeviceWithCompletionBlock(void *a1, void *a2)
{
  id v4 = a1;
  id v3 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A2B4D0();
  }
  IDSDeletePairedDeviceWithCompletion(v4, v3, MEMORY[0x1E4F14428]);
}

void IDSGetPairedDevicesWithCompletionBlock(void *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A2B4FC();
  }
  if (v3)
  {
    id v5 = +[IDSTransportLog IDSLocalSetup];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v10 = "IDSGetPairedDevicesWithCompletionBlock";
      _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }

    id v6 = +[IDSPairedDeviceManager sharedInstance];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_19191F538;
    v7[3] = &unk_1E5729390;
    id v8 = v3;
    [v6 getPairedDeviceInfoWithCompletionBlock:v7 queue:v4];
  }
}

void sub_19191F538(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKey:*MEMORY[0x1E4F6AE80]];
  if (v3) {
    uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v3, 0);
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = (id)v4;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t IDSGetPairedDevices()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (_IDSRunningInDaemon()) {
    sub_191A2B528();
  }
  id v0 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    id v3 = "IDSGetPairedDevices";
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "%s is DEPRECATED! Please use IDSGetPairedDevicesWithCompletionBlock", (uint8_t *)&v2, 0xCu);
  }

  return 0;
}

void IDSGetDeliveryStatsWithCompletionBlock(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A2B554();
  }
  if (v3)
  {
    id v5 = +[IDSPairedDeviceManager sharedInstance];
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_19191F764;
    v6[3] = &unk_1E5729390;
    id v7 = v3;
    [v5 getDeliveryStatsWithCompletionBlock:v6 queue:v4];
  }
}

uint64_t sub_19191F764(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IDSInitialLocalSyncStarted()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (_IDSRunningInDaemon()) {
    sub_191A2B580();
  }
  id v0 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    int v1 = 136315138;
    int v2 = "IDSInitialLocalSyncStarted";
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "%s is DEPRECATED! Please use IDSInitialLocalSyncStartedForServices", (uint8_t *)&v1, 0xCu);
  }

  IDSInitialLocalSyncStartedForServices(0);
}

void IDSInitialLocalSyncStartedForServices(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (_IDSRunningInDaemon()) {
    sub_191A2B5AC();
  }
  int v2 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    id v5 = "IDSInitialLocalSyncStartedForServices";
    __int16 v6 = 2112;
    id v7 = v1;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v4, 0x16u);
  }

  uint64_t v3 = +[IDSDaemonController sharedInstance];
  [v3 initialLocalSyncStartedForServices:v1];
}

void IDSInitialLocalSyncCompleted()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (_IDSRunningInDaemon()) {
    sub_191A2B5D8();
  }
  id v0 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    int v1 = 136315138;
    int v2 = "IDSInitialLocalSyncCompleted";
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "%s is DEPRECATED! Please use IDSInitialLocalSyncCompletedForServices", (uint8_t *)&v1, 0xCu);
  }

  IDSInitialLocalSyncCompletedForServices(0);
}

void IDSInitialLocalSyncCompletedForServices(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (_IDSRunningInDaemon()) {
    sub_191A2B604();
  }
  int v2 = +[IDSTransportLog IDSLocalSetup];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    id v5 = "IDSInitialLocalSyncCompletedForServices";
    __int16 v6 = 2112;
    id v7 = v1;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v4, 0x16u);
  }

  uint64_t v3 = +[IDSDaemonController sharedInstance];
  [v3 initialLocalSyncCompletedForServices:v1];
}

void IDSIncomingAccountSyncMessage(void *a1)
{
  id v1 = a1;
  if (_IDSRunningInDaemon()) {
    sub_191A2B630();
  }
  int v2 = [MEMORY[0x1E4F6C3B8] accountSync];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Local setup - received incoming sync message", v4, 2u);
  }

  uint64_t v3 = +[IDSDaemonController sharedInstance];
  [v3 incomingAccountSyncMessage:v1];
}

void IDSSetAllowedTrafficClassifiersForDevice(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A2B65C();
  }
  if ([v4 isDefaultPairedDevice])
  {
    id v5 = +[IDSInternalQueueController sharedInstance];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = sub_19191FD20;
    v9[3] = &unk_1E5729000;
    __int16 v6 = v3;
    uint64_t v10 = v6;
    [v5 performBlock:v9];

    id v7 = +[IDSPairedDeviceManager sharedInstance];
    [v7 setAllowedTrafficClassifiers:v6];

    uint64_t v8 = v10;
  }
  else
  {
    uint64_t v8 = +[IDSTransportLog IDSLocalSetup];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v12 = "IDSSetAllowedTrafficClassifiersForDevice";
      __int16 v13 = 2112;
      id v14 = v4;
      _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s: invalid device %@", buf, 0x16u);
    }
  }
}

void sub_19191FD20(uint64_t a1)
{
  id v2 = +[IDSDaemonController sharedInstance];
  [v2 setAllowedTrafficClasses:*(void *)(a1 + 32)];
}

id IDSGetAllowedTrafficClassifiersForDevice(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (_IDSRunningInDaemon()) {
    sub_191A2B688();
  }
  if ([v1 isDefaultPairedDevice])
  {
    id v2 = +[IDSPairedDeviceManager sharedInstance];
    id v3 = [v2 allowedTrafficClassifiers];
  }
  else
  {
    id v4 = +[IDSTransportLog IDSLocalSetup];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      id v7 = "IDSGetAllowedTrafficClassifiersForDevice";
      __int16 v8 = 2112;
      id v9 = v1;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "%s: invalid device %@", (uint8_t *)&v6, 0x16u);
    }

    id v3 = 0;
  }

  return v3;
}

void IDSDropAllMessagesWithoutAnyAllowedTrafficClassifier(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 isDefaultPairedDevice])
  {
    id v2 = +[IDSPairedDeviceManager sharedInstance];
    [v2 dropAllMessagesWithoutAnyAllowedClassifier];
  }
  else
  {
    id v2 = +[IDSTransportLog IDSLocalSetup];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315394;
      id v4 = "IDSDropAllMessagesWithoutAnyAllowedTrafficClassifier";
      __int16 v5 = 2112;
      id v6 = v1;
      _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "%s: invalid device %@", (uint8_t *)&v3, 0x16u);
    }
  }
}

void sub_1919211E0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_191921208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[23] = a3;
    __int16 v5 = WeakRetained;
    [WeakRetained parseDirectMessagingState];
    id WeakRetained = v5;
  }
}

void sub_19192144C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19192146C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v7 = WeakRetained;
  if (WeakRetained && *((void *)WeakRetained + 10) == *(void *)(a1 + 32))
  {
    WeakRetained[5] = a2;
    __int16 v8 = +[IDSLogging IDSDirectMessagingConnection];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412546;
      uint64_t v11 = v7;
      __int16 v12 = 1024;
      int v13 = a2;
      _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%@ connection entered state: %d", (uint8_t *)&v10, 0x12u);
    }

    int v9 = v7[5];
    if (v9 == 5) {
      goto LABEL_10;
    }
    if (v9 == 3)
    {
      *((unsigned char *)v7 + 8) = 0;
      [v7 receiveMessages];
      [v7 dequeueMessages];
      goto LABEL_11;
    }
    if (a3 || v9 == 4)
    {
LABEL_10:
      [v7 resetConnection];
      [v7 setupConnectionIfApplicable];
    }
  }
LABEL_11:
}

void sub_1919218D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_191921904(uint64_t a1, int a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v7 = +[IDSLogging IDSDirectMessagingConnection];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412802;
      id v10 = WeakRetained;
      __int16 v11 = 1024;
      int v12 = a2;
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "%@ direct messaging socket: %d, error: %@", (uint8_t *)&v9, 0x1Cu);
    }

    if (v5)
    {
      [WeakRetained resetConnection];
    }
    else
    {
      __int16 v8 = (void *)nw_connection_create_with_connected_socket();
      [WeakRetained updateConnection:v8];
    }
  }
}

void sub_191921E68(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_191921E84(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a5;
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
  id v10 = WeakRetained;
  if (!WeakRetained || *((void *)WeakRetained + 10) != *(void *)(a1 + 32)) {
    goto LABEL_19;
  }
  if (!v8)
  {
    id v12 = v7;
    if ([v12 length])
    {
      id v13 = v12;
      id v14 = (unsigned __int8 *)[v13 bytes];
      uint64_t v15 = v14[1];
      if (v15 > 6 || ((1 << v15) & 0x54) == 0)
      {
        int v20 = *v14;
        unsigned int v21 = *((_DWORD *)v14 + 1);
        unsigned int v22 = *((_DWORD *)v14 + 2);
        uint64_t v23 = bswap32(v22);
        uint64_t v24 = [v13 length];
        int64x2_t v25 = vdupq_n_s64(1uLL);
        v25.i64[0] = v24 + v23;
        *(int64x2_t *)(v10 + 232) = vaddq_s64(v25, *(int64x2_t *)(v10 + 232));
        uint64_t v26 = +[IDSLogging IDSDirectMessagingConnection];
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = *((void *)v10 + 7);
          uint64_t v28 = (const char *)*((void *)v10 + 8);
          if (!v28) {
            uint64_t v28 = "<unknown>";
          }
          *(_DWORD *)buf = 134219010;
          uint64_t v36 = v27;
          __int16 v37 = 2080;
          v38 = v28;
          __int16 v39 = 1024;
          int v40 = v20;
          __int16 v41 = 1024;
          int v42 = v15;
          __int16 v43 = 1024;
          int v44 = v23;
          _os_log_impl(&dword_19190B000, v26, OS_LOG_TYPE_DEFAULT, "[%llu %s] Received Header: v %u t %u l %u", buf, 0x28u);
        }
        uint64_t v29 = bswap32(v21);

        if (v22)
        {
          __int16 v30 = *((void *)v10 + 10);
          v31[0] = MEMORY[0x1E4F143A8];
          v31[1] = 3221225472;
          v31[2] = sub_19192219C;
          v31[3] = &unk_1E57294A0;
          id v32 = v10;
          char v34 = v15;
          int v33 = v29;
          nw_connection_receive(v30, v23, v23, v31);

          goto LABEL_18;
        }
        [v10 processIncomingMessage:0 messageType:v15 messageIdentifier:v29];
      }
      else
      {
        id v17 = +[IDSLogging IDSDirectMessagingConnection];
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = *((void *)v10 + 7);
          int v19 = (const char *)*((void *)v10 + 8);
          if (!v19) {
            int v19 = "<unknown>";
          }
          *(_DWORD *)buf = 134218242;
          uint64_t v36 = v18;
          __int16 v37 = 2080;
          v38 = v19;
          _os_log_impl(&dword_19190B000, v17, OS_LOG_TYPE_DEFAULT, "[%llu %s] Ignoring HS Header", buf, 0x16u);
        }
      }
    }
    [v10 receiveMessages];
LABEL_18:

    goto LABEL_19;
  }
  __int16 v11 = +[IDSLogging IDSDirectMessagingConnection];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_191A2BA38((uint64_t)v8, v11);
  }

  [v10 resetConnection];
LABEL_19:
}

uint64_t sub_19192219C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) processIncomingMessage:a2 messageType:*(unsigned __int8 *)(a1 + 44) messageIdentifier:*(unsigned int *)(a1 + 40)];
  int v3 = *(void **)(a1 + 32);

  return [v3 receiveMessages];
}

id sub_191922BB8(void *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = &v23;
    uint64_t v25 = 0x3032000000;
    uint64_t v26 = sub_191918640;
    uint64_t v27 = sub_191918540;
    id v28 = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v3 = (void *)v24[5];
    v24[5] = (uint64_t)Mutable;

    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    int v20 = sub_1919234E4;
    unsigned int v21 = &unk_1E5729540;
    unsigned int v22 = &v23;
    id v4 = v1;
    id v5 = v19;
    id v6 = v4;
    uint64_t v7 = [v6 bytes];
    if ([v6 length])
    {
      id v8 = 0;
      int v9 = (unsigned __int8 *)v7;
      while ((unint64_t)(v8 + 5) <= [v6 length])
      {
        uint64_t v10 = *v9;
        unsigned int v11 = *(_DWORD *)(v9 + 1);
        id v12 = (unsigned int *)(v9 + 5);
        uint64_t v13 = bswap32(v11);
        int v14 = v12 - v7;
        if ((unint64_t)v12 + v13 - v7 > [v6 length])
        {
          __int16 v16 = +[IDSLogging IDSDirectMessagingConnection];
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            uint64_t v18 = [v6 length];
            *(_DWORD *)buf = 67109632;
            int v30 = v14;
            __int16 v31 = 1024;
            int v32 = v13;
            __int16 v33 = 2048;
            uint64_t v34 = v18;
            _os_log_error_impl(&dword_19190B000, v16, OS_LOG_TYPE_ERROR, "malformed tlv received ((%d + %u > %lu)", buf, 0x18u);
          }
          goto LABEL_13;
        }
        v20((uint64_t)v5, v10, v13, v12);
        int v9 = (unsigned __int8 *)v12 + v13;
        id v8 = &v9[-v7];
        if ((unint64_t)&v9[-v7] >= [v6 length]) {
          goto LABEL_14;
        }
      }
      __int16 v16 = +[IDSLogging IDSDirectMessagingConnection];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_191A2BAB0((int)v8, buf, [v6 length], v16);
      }
LABEL_13:
    }
LABEL_14:

    id v15 = (id)v24[5];
    _Block_object_dispose(&v23, 8);
  }
  else
  {
    id v15 = 0;
  }

  return v15;
}

void sub_191922E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191923068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19192308C(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    int v3 = +[IDSLogging IDSDirectMessagingConnection];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = "<unknown>";
      uint64_t v5 = WeakRetained[7];
      if (WeakRetained[8]) {
        id v4 = (const char *)WeakRetained[8];
      }
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = *(_DWORD *)(a1 + 48);
      int v8 = 134218754;
      uint64_t v9 = v5;
      __int16 v10 = 2080;
      unsigned int v11 = v4;
      __int16 v12 = 2112;
      uint64_t v13 = v6;
      __int16 v14 = 1024;
      int v15 = v7;
      _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "[%llu %s] connection wrote ack for guid: %@(%u)", (uint8_t *)&v8, 0x26u);
    }
  }
}

void sub_1919233C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1919233EC(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    int v3 = +[IDSLogging IDSDirectMessagingConnection];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = WeakRetained[7];
      uint64_t v5 = (const char *)WeakRetained[8];
      if (!v5) {
        uint64_t v5 = "<unknown>";
      }
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 134218498;
      uint64_t v8 = v4;
      __int16 v9 = 2080;
      __int16 v10 = v5;
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "[%llu %s] connection wrote app-ack for guid: %@(0)", (uint8_t *)&v7, 0x20u);
    }
  }
}

void sub_1919234E4(uint64_t a1, int a2, unsigned int a3, unsigned int *a4)
{
  switch(a2)
  {
    case 1:
      if (a3 == 4)
      {
        uint64_t v5 = [NSNumber numberWithUnsignedInt:bswap32(*a4)];
        id v49 = (id)v5;
        uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        int v7 = @"ids-dm-sqnm";
        goto LABEL_17;
      }
      uint64_t v13 = +[IDSLogging IDSDirectMessagingConnection];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_191A2BC2C(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      goto LABEL_31;
    case 3:
      if (a3 == 1)
      {
        uint64_t v5 = [NSNumber numberWithUnsignedChar:*(unsigned __int8 *)a4];
        id v49 = (id)v5;
        uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        int v7 = @"ids-dm-spmf";
        goto LABEL_17;
      }
      uint64_t v13 = +[IDSLogging IDSDirectMessagingConnection];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_191A2BCA0(v13, v21, v22, v23, v24, v25, v26, v27);
      }
      goto LABEL_31;
    case 4:
      uint64_t v5 = [[NSString alloc] initWithBytes:a4 length:a3 encoding:4];
      id v49 = (id)v5;
      uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      int v7 = @"ids-dm-iri";
      goto LABEL_17;
    case 5:
      if (a3 == 16)
      {
        id v49 = (id)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:a4];
        uint64_t v8 = [v49 UUIDString];
        __int16 v9 = (void *)[v8 copy];

        [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v9 forKeyedSubscript:@"ids-dm-ori"];
        goto LABEL_18;
      }
      uint64_t v13 = +[IDSLogging IDSDirectMessagingConnection];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_191A2BBB8(v13, v28, v29, v30, v31, v32, v33, v34);
      }
      goto LABEL_31;
    case 6:
      uint64_t v5 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a4 length:a3];
      id v49 = (id)v5;
      uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      int v7 = @"ids-dm-cd";
      goto LABEL_17;
    case 7:
      id v49 = (id)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a4 length:a3];
      __int16 v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithPlistData:v49];
      __int16 v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      uint64_t v12 = @"ids-dm-cm";
      goto LABEL_12;
    case 8:
      id v49 = (id)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a4 length:a3];
      __int16 v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithPlistData:v49];
      __int16 v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      uint64_t v12 = @"ids-dm-cpb";
LABEL_12:
      [v11 setObject:v10 forKeyedSubscript:v12];

      goto LABEL_18;
    case 10:
      if (a3 == 2)
      {
        uint64_t v5 = [NSNumber numberWithUnsignedShort:bswap32(*(unsigned __int16 *)a4) >> 16];
        id v49 = (id)v5;
        uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        int v7 = @"ids-dm-tc";
        goto LABEL_17;
      }
      uint64_t v13 = +[IDSLogging IDSDirectMessagingConnection];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_191A2BD14(v13, v35, v36, v37, v38, v39, v40, v41);
      }
      goto LABEL_31;
    case 11:
      if (a3 == 4)
      {
        uint64_t v5 = [NSNumber numberWithUnsignedInt:*a4];
        id v49 = (id)v5;
        uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        int v7 = @"ids-dm-afsqnm";
LABEL_17:
        [v6 setObject:v5 forKeyedSubscript:v7];
LABEL_18:
      }
      else
      {
        uint64_t v13 = +[IDSLogging IDSDirectMessagingConnection];
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_191A2BD88(v13, v42, v43, v44, v45, v46, v47, v48);
        }
LABEL_31:
      }
      return;
    default:
      return;
  }
}

void sub_191924AB4(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained && WeakRetained[14] == *(void *)(a1 + 32))
  {
    uint64_t v4 = mach_continuous_time();
    uint64_t v5 = (void *)[*((id *)v3 + 17) copy];
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v6 = v5;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v29 objects:v39 count:16];
    if (v7)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(void *)v30;
      *(void *)&long long v8 = 134218498;
      long long v26 = v8;
      id v27 = v6;
      do
      {
        uint64_t v11 = 0;
        uint64_t v28 = v9;
        do
        {
          if (*(void *)v30 != v10) {
            objc_enumerationMutation(v6);
          }
          uint64_t v12 = objc_msgSend(v6, "objectForKeyedSubscript:", *(void *)(*((void *)&v29 + 1) + 8 * v11), v26, v27);
          uint64_t v13 = [v12 objectForKeyedSubscript:@"ids-dm-snd-time"];
          unint64_t v14 = [v13 unsignedLongLongValue];
          double v17 = 0.0;
          if (v14) {
            BOOL v18 = v4 > v14;
          }
          else {
            BOOL v18 = 0;
          }
          if (v18)
          {
            unint64_t v19 = v14;
            if (qword_1E92DE278 != -1) {
              dispatch_once(&qword_1E92DE278, &unk_1EE2462A8);
            }
            LODWORD(v15) = dword_1E92DE280;
            LODWORD(v16) = *(_DWORD *)algn_1E92DE284;
            double v17 = (double)(v4 - v19) * (double)v15 / (double)v16 / 1000000.0;
          }
          if (v17 <= (double)*((int *)v3 + 8))
          {
            if (v17 > (double)*((int *)v3 + 9))
            {
              uint64_t v20 = +[IDSLogging IDSDirectMessagingConnection];
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v21 = *((void *)v3 + 7);
                uint64_t v22 = v4;
                uint64_t v23 = v10;
                if (*((void *)v3 + 8)) {
                  uint64_t v24 = (const char *)*((void *)v3 + 8);
                }
                else {
                  uint64_t v24 = "<unknown>";
                }
                uint64_t v25 = [v12 objectForKeyedSubscript:@"ids-dm-msg-guid"];
                *(_DWORD *)buf = v26;
                uint64_t v34 = v21;
                __int16 v35 = 2080;
                uint64_t v36 = v24;
                uint64_t v10 = v23;
                uint64_t v4 = v22;
                id v6 = v27;
                uint64_t v9 = v28;
                __int16 v37 = 2112;
                uint64_t v38 = v25;
                _os_log_impl(&dword_19190B000, v20, OS_LOG_TYPE_DEFAULT, "[%llu %s] Message %@ taking long, retrying", buf, 0x20u);
              }
              [v3 dequeueMessages];
            }
          }
          else
          {
            [v3 failedToSendMessage:v12 responseCode:12];
          }

          ++v11;
        }
        while (v9 != v11);
        uint64_t v9 = [v6 countByEnumeratingWithState:&v29 objects:v39 count:16];
      }
      while (v9);
    }
  }
}

void sub_191925000(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_19192502C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained failedToSendMessage:*(void *)(a1 + 32) responseCode:15];
    [v3 dequeueMessages];
    id WeakRetained = v3;
  }
}

void sub_19192508C(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = +[IDSLogging IDSDirectMessagingConnection];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = "<unknown>";
      uint64_t v5 = WeakRetained[7];
      if (WeakRetained[8]) {
        uint64_t v4 = (const char *)WeakRetained[8];
      }
      int v6 = *(_DWORD *)(a1 + 56);
      uint64_t v7 = *(void *)(a1 + 32);
      int v9 = 134218754;
      uint64_t v10 = v5;
      __int16 v11 = 2080;
      uint64_t v12 = v4;
      __int16 v13 = 1024;
      int v14 = v6;
      __int16 v15 = 2112;
      uint64_t v16 = v7;
      _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "[%llu %s] connection wrote message w/ seq num %u guid %@", (uint8_t *)&v9, 0x26u);
    }

    uint64_t v8 = WeakRetained[27];
    ++WeakRetained[28];
    WeakRetained[27] = v8 + *(void *)(a1 + 48);
    [WeakRetained dequeueMessages];
  }
}

void sub_1919254AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained logConnectionStatisticsInPowerDictionary];
}

uint64_t sub_191925AE4()
{
  return mach_timebase_info((mach_timebase_info_t)&dword_1E92DE280);
}

void sub_191925AF0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_191925DB0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  uint64_t v9 = [a2 copy];
  uint64_t v10 = *(void *)(a1 + 32);
  __int16 v11 = *(void **)(v10 + 32);
  *(void *)(v10 + 32) = v9;

  uint64_t v12 = [v8 copy];
  uint64_t v13 = *(void *)(a1 + 32);
  int v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  uint64_t v15 = [v7 copy];
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void **)(v16 + 24);
  *(void *)(v16 + 24) = v15;
}

void sub_191925E54(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = (void *)MEMORY[0x1E4F6C3A8];
  id v8 = a4;
  id v9 = a3;
  uint64_t v10 = (void *)[a2 copy];
  __int16 v11 = (void *)[v9 copy];

  id v12 = [v7 pairWithFirst:v10 second:v11];

  [*(id *)(*(void *)(a1 + 32) + 56) setObject:v12 forKeyedSubscript:v8];
}

void sub_191926A7C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_191926B44(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1919277DC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1919278D4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1919283E4(void *a1)
{
  *(void *)(a1[4] + 8) = [[_IDSGroupSession alloc] initWithAccount:a1[5] destinations:a1[6] options:a1[7] delegateContext:a1[4]];

  return MEMORY[0x1F41817F8]();
}

void sub_19192859C(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F1CAD0];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:*MEMORY[0x1E4F6AFB8]];
  id v7 = [v2 setWithArray:v3];

  uint64_t v4 = [[_IDSGroupSession alloc] initWithAccount:*(void *)(a1 + 48) destinations:v7 options:*(void *)(a1 + 32) delegateContext:*(void *)(a1 + 40)];
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(void **)(v5 + 8);
  *(void *)(v5 + 8) = v4;
}

uint64_t sub_19192881C(void *a1)
{
  *(void *)(a1[4] + 8) = [[_IDSGroupSession alloc] initWithAccount:a1[5] destinations:a1[6] options:a1[7] delegateContext:a1[4] delegate:a1[8] queue:a1[9]];

  return MEMORY[0x1F41817F8]();
}

void sub_191928A20(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F1CAD0];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:*MEMORY[0x1E4F6AFB8]];
  id v7 = [v2 setWithArray:v3];

  uint64_t v4 = [[_IDSGroupSession alloc] initWithAccount:*(void *)(a1 + 48) destinations:v7 options:*(void *)(a1 + 32) delegateContext:*(void *)(a1 + 40) delegate:*(void *)(a1 + 56) queue:*(void *)(a1 + 64)];
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(void **)(v5 + 8);
  *(void *)(v5 + 8) = v4;
}

void sub_191928BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_191928C00()
{
  return self;
}

void sub_191928CBC(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = +[IDSLogging _IDSGroupSession];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 8);
    int v7 = 134218240;
    uint64_t v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Invalidating _IDSGroupSession { self: %p, _internal: %p }", (uint8_t *)&v7, 0x16u);
  }

  [*(id *)(*(void *)(a1 + 32) + 8) invalidate];
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(v5 + 8);
  *(void *)(v5 + 8) = 0;
}

void sub_191928F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191928F94(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) uniqueID];

  return MEMORY[0x1F41817F8]();
}

void sub_19192911C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191929134(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 8) sessionIDAliasWithSalt:a1[5]];

  return MEMORY[0x1F41817F8]();
}

void sub_1919293F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191929414(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1[4] + 8) localParticipantID];
  *(void *)(*(void *)(a1[6] + 8) + 24) = IDSIDAliasHashUInt64();
  uint64_t v3 = +[IDSLogging _IDSGroupSession];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[5];
    uint64_t v5 = *(void *)(*(void *)(a1[6] + 8) + 24);
    int v6 = 134218498;
    uint64_t v7 = v5;
    __int16 v8 = 2048;
    uint64_t v9 = v2;
    __int16 v10 = 2112;
    uint64_t v11 = v4;
    _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "createAliasForLocalParticipantIDWithSalt created %llu from %llu and %@", (uint8_t *)&v6, 0x20u);
  }
}

void sub_1919296A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919296C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = *(void *)(a1 + 64);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_191929770;
  v6[3] = &unk_1E5729720;
  long long v5 = *(_OWORD *)(a1 + 48);
  id v4 = (id)v5;
  long long v7 = v5;
  [v2 getParticipantIDForAlias:v3 salt:v1 completionHandler:v6];
}

intptr_t sub_191929770(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_191929860(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_createSessionIDAliasWithSalt_delegateQueueCompletionHandler_);
}

uint64_t sub_19192995C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_createAliasForParticipantID_salt_delegateQueueCompletionHandler_);
}

uint64_t sub_191929A4C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_createAliasForLocalParticipantIDWithSalt_delegateQueueCompletionHandler_);
}

uint64_t sub_191929B48(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_getParticipantIDForAlias_salt_delegateQueueCompletionHandler_);
}

void sub_191929C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191929C84(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 8) uniqueID];
  uint64_t v2 = [@"session:" stringByAppendingString:v5];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_191929DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191929DE4(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) state];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_191929EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191929F04(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) sessionEndedReason];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_19192A04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19192A064(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) requiredCapabilities];

  return MEMORY[0x1F41817F8]();
}

void sub_19192A1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19192A1DC(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) requiredLackOfCapabilities];

  return MEMORY[0x1F41817F8]();
}

void sub_19192A308(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setDelegate:*(void *)(a1 + 40) queue:*(void *)(a1 + 48)];
}

void sub_19192A4D8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 updateMembers:*(void *)(a1 + 40) withContext:*(void *)(a1 + 48) triggeredLocally:*(unsigned __int8 *)(a1 + 56)];
}

void sub_19192A63C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 updateMembers:*(void *)(a1 + 40) withContext:*(void *)(a1 + 48) messagingCapabilities:*(void *)(a1 + 56) triggeredLocally:*(unsigned __int8 *)(a1 + 64)];
}

void sub_19192A7E8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 manageDesignatedMembers:*(void *)(a1 + 40) withType:*(unsigned __int16 *)(a1 + 48)];
}

void sub_19192A8F8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 removeParticipantIDs:*(void *)(a1 + 40)];
}

void sub_19192AA28(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 updateParticipantData:*(void *)(a1 + 40) withContext:*(void *)(a1 + 48)];
}

void sub_19192AB34(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 updateParticipantInfo:*(void *)(a1 + 40)];
}

void sub_19192AC40(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setParticipantInfo:*(void *)(a1 + 40)];
}

void sub_19192AD88(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 updateParticipantType:*(unsigned __int16 *)(a1 + 56) members:*(void *)(a1 + 40) withContext:*(void *)(a1 + 48) triggeredLocally:*(unsigned __int8 *)(a1 + 58)];
}

void sub_19192AE9C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 joinWithOptions:*(void *)(a1 + 40)];
}

void sub_19192AF80(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  [v1 leaveGroupSessionWithOptions:0];
}

void sub_19192B080(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 leaveGroupSessionWithOptions:*(void *)(a1 + 40)];
}

void sub_19192B164(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  [v1 reconnectUPlusOneSession];
}

void sub_19192B260(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setPreferences:*(void *)(a1 + 40)];
}

void sub_19192B3A4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setRequiredCapabilities:*(void *)(a1 + 40) requiredLackOfCapabilities:*(void *)(a1 + 48)];
}

void sub_19192B488(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  [v1 requestActiveParticipants];
}

void sub_19192B588(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 registerPluginWithOptions:*(void *)(a1 + 40)];
}

void sub_19192B694(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 unregisterPluginWithOptions:*(void *)(a1 + 40)];
}

void sub_19192B788(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setCallScreeningMode:*(unsigned __int8 *)(a1 + 40)];
}

void sub_19192B87C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setForceTCPFallbackOnWiFiUsingReinitiate:*(unsigned __int8 *)(a1 + 40)];
}

void sub_19192B970(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setForceTCPFallbackOnCellUsingReinitiate:*(unsigned __int8 *)(a1 + 40)];
}

void sub_19192BAA0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 requestURIsForParticipantIDs:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_19192C22C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 requestDataCryptorForTopic:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_19192C338(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 requestEncryptionKeyForParticipants:*(void *)(a1 + 40)];
}

void sub_19192C4F4()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2B80];
  id v1 = (void *)qword_1EB2BD5E8;
  qword_1EB2BD5E8 = v0;

  id v2 = (void *)qword_1EB2BD5E8;
  uint64_t v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  int v6 = objc_msgSend(v3, "setWithObjects:", v4, v5, objc_opt_class(), 0);
  [v2 setClasses:v6 forSelector:sel_requestSelectedSubscriptionsWithCompletion_ argumentIndex:0 ofReply:1];

  long long v7 = (void *)qword_1EB2BD5E8;
  __int16 v8 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_msgSend(v8, "setWithObjects:", v9, v10, objc_opt_class(), 0);
  [v7 setClasses:v11 forSelector:sel_requestUnselectedTemporaryPhoneAliasesWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v12 = (void *)qword_1EB2BD5E8;
  uint64_t v13 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v14 = objc_opt_class();
  uint64_t v15 = objc_opt_class();
  uint64_t v16 = objc_msgSend(v13, "setWithObjects:", v14, v15, objc_opt_class(), 0);
  [v12 setClasses:v16 forSelector:sel_selectSubscription_withCompletion_ argumentIndex:0 ofReply:0];

  uint64_t v17 = (void *)qword_1EB2BD5E8;
  BOOL v18 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v19 = objc_opt_class();
  uint64_t v20 = objc_opt_class();
  uint64_t v21 = objc_msgSend(v18, "setWithObjects:", v19, v20, objc_opt_class(), 0);
  [v17 setClasses:v21 forSelector:sel_selectSubscription_withCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v22 = (void *)qword_1EB2BD5E8;
  uint64_t v23 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v24 = objc_opt_class();
  uint64_t v25 = objc_opt_class();
  long long v26 = objc_msgSend(v23, "setWithObjects:", v24, v25, objc_opt_class(), 0);
  [v22 setClasses:v26 forSelector:sel_unselectSubscription_withCompletion_ argumentIndex:0 ofReply:0];

  id v27 = (void *)qword_1EB2BD5E8;
  uint64_t v28 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v29 = objc_opt_class();
  uint64_t v30 = objc_opt_class();
  long long v31 = objc_msgSend(v28, "setWithObjects:", v29, v30, objc_opt_class(), 0);
  [v27 setClasses:v31 forSelector:sel_unselectSubscription_withCompletion_ argumentIndex:0 ofReply:1];

  long long v32 = (void *)qword_1EB2BD5E8;
  uint64_t v33 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v34 = objc_opt_class();
  uint64_t v35 = objc_opt_class();
  uint64_t v36 = objc_msgSend(v33, "setWithObjects:", v34, v35, objc_opt_class(), 0);
  [v32 setClasses:v36 forSelector:sel_setSelectedSubscriptions_withCompletion_ argumentIndex:0 ofReply:0];

  __int16 v37 = (void *)qword_1EB2BD5E8;
  uint64_t v38 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v39 = objc_opt_class();
  uint64_t v40 = objc_opt_class();
  objc_msgSend(v38, "setWithObjects:", v39, v40, objc_opt_class(), 0);
  id v41 = (id)objc_claimAutoreleasedReturnValue();
  [v37 setClasses:v41 forSelector:sel_setSelectedSubscriptions_withCompletion_ argumentIndex:0 ofReply:1];
}

void sub_19192CBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19192CBE4(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), *(id *)(a1 + 40));
  uint64_t v2 = [objc_alloc(MEMORY[0x1E4F6B5A0]) initWithServiceIdentifier:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;

  uint64_t v5 = [_IDSService alloc];
  uint64_t v6 = *(void *)(a1 + 40);
  long long v7 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", &unk_1EE28B1C0, &unk_1EE28B1D8, &unk_1EE28B1F0, 0);
  uint64_t v8 = [(_IDSService *)v5 initWithService:v6 commands:v7 manuallyAckMessages:0 delegateContext:0];
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 48));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 8), *(id *)(a1 + 56));
  uint64_t v11 = [NSString stringGUID];
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void **)(v12 + 16);
  *(void *)(v12 + 16) = v11;

  id v14 = [*(id *)(*(void *)(a1 + 32) + 40) serviceProperties];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v14 supportsOfflineDelivery];
}

void sub_19192CDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19192CE08(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [WeakRetained uuid];
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "XPC interruption for client %@", (uint8_t *)&v4, 0xCu);
  }
  [WeakRetained _setupXPC];
}

void sub_19192D034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19192D058(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  int v4 = [v3 offGridMessengerCollaboratorWithErrorHandler:&unk_1EE2462E8];

  uint64_t v5 = [WeakRetained uuid];
  uint64_t v6 = [WeakRetained serviceName];
  [v4 setupOffGridMessengerClient:WeakRetained withUUID:v5 forService:v6];
}

void sub_19192D10C(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A2C2B0();
  }
}

void sub_19192D268(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  obuint64_t j = [*(id *)(*(void *)(a1 + 32) + 40) accounts];
  uint64_t v2 = [obj countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v20 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if ([v6 isActive])
        {
          long long v17 = 0u;
          long long v18 = 0u;
          long long v15 = 0u;
          long long v16 = 0u;
          long long v7 = [v6 handles];
          uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v23 count:16];
          if (v8)
          {
            uint64_t v9 = v8;
            uint64_t v10 = *(void *)v16;
            do
            {
              for (uint64_t j = 0; j != v9; ++j)
              {
                if (*(void *)v16 != v10) {
                  objc_enumerationMutation(v7);
                }
                uint64_t v12 = *(void **)(a1 + 40);
                uint64_t v13 = [*(id *)(*((void *)&v15 + 1) + 8 * j) URI];
                [v12 addObject:v13];
              }
              uint64_t v9 = [v7 countByEnumeratingWithState:&v15 objects:v23 count:16];
            }
            while (v9);
          }
        }
      }
      uint64_t v3 = [obj countByEnumeratingWithState:&v19 objects:v24 count:16];
    }
    while (v3);
  }
}

void sub_19192D53C(uint64_t a1, void *a2)
{
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_19192D664;
  v12[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 64);
  void v12[4] = *(void *)(a1 + 32);
  id v13 = v4;
  uint64_t v5 = [a2 offGridMessengerCollaboratorWithErrorHandler:v12];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_19192D76C;
  v10[3] = &unk_1E57298F8;
  uint64_t v8 = *(void *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  v10[4] = *(void *)(a1 + 32);
  id v11 = v9;
  [v5 donateHandlesForMessagingKeys:v6 fromURI:v7 options:v8 completion:v10];
}

void sub_19192D664(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2C2B0();
  }

  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_19192D754;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_19192D754(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_19192D76C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19192D830;
    block[3] = &unk_1E57298D0;
    id v10 = v6;
    char v11 = a2;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

uint64_t sub_19192D830(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_19192D95C(uint64_t a1, void *a2)
{
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_19192DA90;
  v13[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 64);
  v13[4] = *(void *)(a1 + 32);
  id v14 = v4;
  id v5 = [a2 offGridMessengerCollaboratorWithErrorHandler:v13];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 24);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_19192DBEC;
  v11[3] = &unk_1E5729970;
  id v10 = *(id *)(a1 + 64);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v10;
  [v5 resultsForDestinationURIs:v6 senderURI:v8 service:v7 options:v9 completion:v11];
}

void sub_19192DA90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2C2B0();
  }

  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_19192DB80;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_19192DB80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [MEMORY[0x1E4F1C9E8] dictionary];
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, *(void *)(a1 + 32));
}

void sub_19192DBEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19192DCC8;
    block[3] = &unk_1E5729948;
    id v12 = v7;
    id v10 = v5;
    id v11 = v6;
    dispatch_async(v8, block);
  }
}

uint64_t sub_19192DCC8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_19192DE04(uint64_t a1, void *a2)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_19192DF18;
  v10[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 48);
  v10[4] = *(void *)(a1 + 32);
  id v11 = v4;
  id v5 = [a2 offGridMessengerCollaboratorWithErrorHandler:v10];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_19192E024;
  v8[3] = &unk_1E57299C0;
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v7;
  [v5 encryptOffGridMessage:v6 completion:v8];
}

void sub_19192DF18(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2C2B0();
  }

  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_19192E008;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_19192E008(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(void *)(a1 + 32));
}

void sub_19192E024(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(void **)(a1 + 40);
  if (v10)
  {
    id v11 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_19192E120;
    v12[3] = &unk_1E5729998;
    id v16 = v10;
    id v13 = v7;
    id v14 = v8;
    id v15 = v9;
    dispatch_async(v11, v12);
  }
}

uint64_t sub_19192E120(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_19192E200(uint64_t a1, void *a2)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_19192E314;
  v10[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 48);
  v10[4] = *(void *)(a1 + 32);
  id v11 = v4;
  id v5 = [a2 offGridMessengerCollaboratorWithErrorHandler:v10];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_19192E420;
  v8[3] = &unk_1E5729A10;
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v7;
  [v5 decryptOffGridMessage:v6 completion:v8];
}

void sub_19192E314(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2C2B0();
  }

  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_19192E404;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_19192E404(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(void *)(a1 + 32));
}

void sub_19192E420(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(void **)(a1 + 40);
  if (v10)
  {
    id v11 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_19192E51C;
    v12[3] = &unk_1E5729998;
    id v16 = v10;
    id v13 = v7;
    id v14 = v8;
    id v15 = v9;
    dispatch_async(v11, v12);
  }
}

uint64_t sub_19192E51C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

uint64_t sub_19192E95C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], 0, a1[5]);
}

void sub_19192E978(uint64_t a1, void *a2)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_19192EA98;
  v10[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 56);
  v10[4] = *(void *)(a1 + 32);
  id v11 = v4;
  id v5 = [a2 offGridMessengerCollaboratorWithErrorHandler:v10];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_19192EBA4;
  v8[3] = &unk_1E5729A38;
  void v8[4] = *(void *)(a1 + 32);
  id v9 = *(id *)(a1 + 56);
  [v5 sendEncryptedOffGridMessage:v6 options:v7 completion:v8];
}

void sub_19192EA98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2C2B0();
  }

  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_19192EB88;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_19192EB88(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(void *)(a1 + 32));
}

void sub_19192EBA4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_19192ECA8;
  v15[3] = &unk_1E5729998;
  id v11 = *(id *)(a1 + 40);
  id v16 = v7;
  id v17 = v8;
  id v18 = v9;
  id v19 = v11;
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v10, v15);
}

uint64_t sub_19192ECA8(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_19192ECC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 40);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_19192ED68;
  v6[3] = &unk_1E57299C0;
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v3 sendEncryptedOffGridMessage:v2 options:v4 completion:v6];
}

void sub_19192ED68(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(void **)(a1 + 40);
  if (v10)
  {
    id v11 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_19192EE64;
    v12[3] = &unk_1E5729998;
    id v16 = v10;
    id v13 = v7;
    id v14 = v8;
    id v15 = v9;
    dispatch_async(v11, v12);
  }
}

uint64_t sub_19192EE64(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_19192EF80(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_19192F034;
  v6[3] = &unk_1E5729AB0;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  id v9 = *(id *)(a1 + 56);
  [v2 encryptOffGridMessage:v3 completion:v6];
}

void sub_19192F034(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v7 && v8 && !a4)
  {
    if (v10)
    {
      int v11 = 138412290;
      id v12 = v8;
      _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "IDSOffGridMessenger - Successfully encrypted message with identifier: %@", (uint8_t *)&v11, 0xCu);
    }

    [*(id *)(a1 + 32) setIdentifier:v8];
    [*(id *)(a1 + 40) sendEncryptedOffGridMessage:v7 options:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
  }
  else
  {
    if (v10)
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "IDSOffGridMessenger - Failed to encrypt message", (uint8_t *)&v11, 2u);
    }
  }
}

uint64_t sub_19192F4A0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_19192F4B8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_19192F4D0(uint64_t a1, void *a2)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_19192F5F0;
  v10[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 56);
  v10[4] = *(void *)(a1 + 32);
  id v11 = v4;
  uint64_t v5 = [a2 offGridMessengerCollaboratorWithErrorHandler:v10];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_19192F6F8;
  v8[3] = &unk_1E5729AD8;
  void v8[4] = *(void *)(a1 + 32);
  id v9 = *(id *)(a1 + 56);
  [v5 sendFetchRequestForHandles:v6 fromHandle:v7 completion:v8];
}

void sub_19192F5F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2C2B0();
  }

  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_19192F6E0;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_19192F6E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_19192F6F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_19192F7D4;
  block[3] = &unk_1E5729948;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_19192F7D4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_19192FA40(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], 0, a1[5]);
}

void sub_19192FA5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 40);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_19192FB04;
  v6[3] = &unk_1E5729B00;
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v3 sendServiceUpdateMessage:v2 options:v4 completion:v6];
}

void sub_19192FB04(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(void **)(a1 + 40);
  if (v10)
  {
    id v11 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_19192FC00;
    v12[3] = &unk_1E5729998;
    id v16 = v10;
    id v13 = v7;
    id v14 = v8;
    id v15 = v9;
    dispatch_async(v11, v12);
  }
}

uint64_t sub_19192FC00(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_19192FE18(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 56));
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) delegate];
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_19192FF40;
    v10[3] = &unk_1E5729B28;
    uint64_t v7 = *(void *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 64);
    id v13 = *(id *)(a1 + 72);
    id v8 = *(id *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 32);
    id v14 = v8;
    uint64_t v15 = v9;
    [v4 messenger:v5 incomingMessage:v6 context:v7 clientErrorAcknowledgementBlock:v10];
  }
}

void sub_19192FF40(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = [*(id *)(a1 + 32) originalGUID];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 138413314;
    long long v21 = v5;
    __int16 v22 = 2112;
    uint64_t v23 = v6;
    __int16 v24 = 2112;
    uint64_t v25 = v7;
    __int16 v26 = 2112;
    uint64_t v27 = v8;
    __int16 v28 = 2112;
    id v29 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "IDSOffGridMessenger - Client ack block called for - %@, Internet Message %@, fromID %@, context %@, error %@", buf, 0x34u);
  }
  uint64_t v9 = [*(id *)(a1 + 32) certifiedDeliveryContext];

  if (v9)
  {
    if (v3)
    {
      id v10 = [v3 domain];
      int v11 = [v10 isEqualToString:@"SenderKeyEncryptionControllerErrorDomain"];

      if (v11)
      {
        id v12 = NSString;
        id v13 = [v3 domain];
        id v14 = [v12 stringWithFormat:@"paddy-%@-%ld", v13, objc_msgSend(v3, "code")];
        uint64_t v15 = [*(id *)(a1 + 32) certifiedDeliveryContext];
        [v15 setFailureReasonMessage:v14];

        id v16 = [*(id *)(a1 + 32) certifiedDeliveryContext];
        [v16 setFailureReason:&unk_1EE28B208];
      }
    }
    id v17 = +[IDSInternalQueueController sharedInstance];
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = sub_191930190;
    v18[3] = &unk_1E57291B8;
    void v18[4] = *(void *)(a1 + 64);
    id v19 = *(id *)(a1 + 32);
    [v17 performBlock:v18];
  }
}

void sub_191930190(uint64_t a1)
{
  id v1 = *(void **)(*(void *)(a1 + 32) + 40);
  id v2 = [*(id *)(a1 + 40) certifiedDeliveryContext];
  [v1 sendCertifiedDeliveryReceipt:v2];
}

void sub_1919303E0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    id v6 = [*(id *)(a1 + 32) delegate];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = [*(id *)(a1 + 40) originalGUID];
    [v6 messenger:v4 receivedIncomingDeliveryReceiptForIdentifier:v5 fromURI:*(void *)(a1 + 48) context:*(void *)(a1 + 56)];
  }
}

void sub_191930688(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) delegate];
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_19193079C;
    v10[3] = &unk_1E5729680;
    uint64_t v7 = *(void *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 64);
    id v8 = *(id *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 32);
    id v13 = v8;
    uint64_t v14 = v9;
    [v4 messenger:v5 incomingServiceUpdateMessage:v6 context:v7 clientAcknowledgementBlock:v10];
  }
}

void sub_19193079C(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    char v3 = [*(id *)(a1 + 32) originalGUID];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    id v11 = v3;
    __int16 v12 = 2112;
    uint64_t v13 = v4;
    __int16 v14 = 2112;
    uint64_t v15 = v5;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "IDSOffGridMessenger - Client ack block called for service update message - %@, fromID %@, context %@", buf, 0x20u);
  }
  uint64_t v6 = [*(id *)(a1 + 32) certifiedDeliveryContext];

  if (v6)
  {
    uint64_t v7 = +[IDSInternalQueueController sharedInstance];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = sub_191930918;
    v8[3] = &unk_1E57291B8;
    void v8[4] = *(void *)(a1 + 56);
    id v9 = *(id *)(a1 + 32);
    [v7 performBlock:v8];
  }
}

void sub_191930918(uint64_t a1)
{
  id v1 = *(void **)(*(void *)(a1 + 32) + 40);
  id v2 = [*(id *)(a1 + 40) certifiedDeliveryContext];
  [v1 sendCertifiedDeliveryReceipt:v2];
}

uint64_t sub_191930A2C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) addDelegate:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 32) + 48)];
}

void sub_191930D18(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 56));
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) delegate];
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = sub_191930E2C;
    v8[3] = &unk_1E5729B50;
    id v9 = v5;
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    [v4 messenger:v6 incomingMessage:v9 context:v7 clientErrorAcknowledgementBlock:v8];
  }
}

void sub_191930E2C(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)a1[4];
    uint64_t v6 = [v5 senderURI];
    uint64_t v7 = a1[5];
    int v8 = 138413058;
    id v9 = v5;
    __int16 v10 = 2112;
    id v11 = v6;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    __int16 v14 = 2112;
    id v15 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "IDSOffGridMessenger - Client ack block called for - %@, Stewie Message fromID %@, context %@, error %@", (uint8_t *)&v8, 0x2Au);
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_191931070(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  uint64_t v4 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_19193115C;
  v6[3] = &unk_1E5729140;
  id v7 = v3;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  [v2 messenger:v4 incomingSummaryMessage:v7 context:v5 clientAcknowledgementBlock:v6];
}

uint64_t sub_19193115C(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6B460] IDSOffGridMessenger];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "IDSOffGridMessenger - Client ack block called for - %@, Stewie Message summary, context %@", (uint8_t *)&v6, 0x16u);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_191931324(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_19193134C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void IDSReportiMessageSpam(void *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A2C3C0();
  }
  uint64_t v5 = +[IDSTransportLog IDSReportSpam];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    id v8 = v3;
    __int16 v9 = 2112;
    id v10 = v4;
    _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "IDSReportiMessageSpam - %@  (toURI: %@)", (uint8_t *)&v7, 0x16u);
  }

  int v6 = +[IDSDaemonController sharedInstance];
  [v6 reportiMessageSpam:v3 toURI:v4];
}

void IDSReportiMessageUnknownSender(void *a1, void *a2, void *a3, void *a4)
{
}

void IDSReportiMessageUnknownSenderWithBlackholeAndJunkStatus(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  id v13 = a5;
  id v14 = a6;
  if (_IDSRunningInDaemon()) {
    sub_191A2C3EC();
  }
  id v15 = +[IDSTransportLog IDSReportSpam];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = @"NO";
    int v19 = 138413570;
    id v20 = v11;
    if (a3) {
      id v17 = @"YES";
    }
    else {
      id v17 = @"NO";
    }
    if (a4) {
      uint64_t v16 = @"YES";
    }
    __int16 v21 = 2112;
    id v22 = v12;
    __int16 v23 = 2112;
    __int16 v24 = v17;
    __int16 v25 = 2112;
    __int16 v26 = v16;
    __int16 v27 = 2112;
    id v28 = v13;
    __int16 v29 = 2112;
    id v30 = v14;
    _os_log_impl(&dword_19190B000, v15, OS_LOG_TYPE_DEFAULT, "IDSReportiMessageUnknownSenderWithBlackholeAndJunkStatus - %@, %@, %@, %@, %@  (toURI: %@)", (uint8_t *)&v19, 0x3Eu);
  }

  id v18 = +[IDSDaemonController sharedInstance];
  [v18 reportiMessageUnknownSender:v11 messageID:v12 isBlackholed:a3 isJunked:a4 messageServerTimestamp:v13 toURI:v14];
}

void IDSReportiMessageUnknownSenderWithBlackholeStatus(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
}

void IDSCheckiMessageUnknownSender(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (_IDSRunningInDaemon()) {
    sub_191A2C418();
  }
  id v11 = +[IDSTransportLog IDSReportSpam];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int16 v23 = 138412546;
    *(void *)&v23[4] = v7;
    *(_WORD *)&v23[12] = 2112;
    *(void *)&v23[14] = v8;
    _os_log_impl(&dword_19190B000, v11, OS_LOG_TYPE_DEFAULT, "IDSCheckiMessageUnknownSender (toURI: %@ Count: %@)", v23, 0x16u);
  }

  id v12 = v9;
  id v13 = v10;
  if (_IDSRunningInDaemon()) {
    sub_191A2C444();
  }
  id v14 = (void *)MEMORY[0x192FE03B0](v12);
  *(void *)__int16 v23 = MEMORY[0x1E4F143A8];
  *(void *)&v23[8] = 3221225472;
  *(void *)&v23[16] = sub_191931AD4;
  __int16 v24 = &unk_1E5728FD8;
  id v15 = v12;
  id v25 = v15;
  id v16 = v14;
  id v17 = v13;
  id v18 = v23;
  if (_IDSRunningInDaemon()) {
    sub_191A2C470();
  }
  int v19 = [[IDSDaemonResponseHandler alloc] initWithBlock:v16 queue:v17];
  id v20 = sub_191931B70();
  __int16 v21 = [v20 scheduleTimeoutWithResponseHandler:v19 timeoutInterval:v18 timeoutBlock:60.0];

  if (v21)
  {
    if (_IDSRunningInDaemon()) {
      sub_191A2C49C();
    }
    if (qword_1E92DE180 != -1) {
      dispatch_once(&qword_1E92DE180, &unk_1EE246B88);
    }
    id v22 = +[IDSDaemonController sharedInstance];
    [v22 reportiMessageSpamCheckUnknown:v7 count:v8 requestID:v21];
  }
}

void sub_191931AD4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_alloc(MEMORY[0x1E4F28C58]);
    id v3 = (id)[v2 initWithDomain:*MEMORY[0x1E4F6AF18] code:-100 userInfo:0];
    (*(void (**)(double))(*(void *)(a1 + 32) + 16))(-1.0);
  }
}

id sub_191931B70()
{
  if (qword_1E92DE130 != -1) {
    dispatch_once(&qword_1E92DE130, &unk_1EE246308);
  }
  uint64_t v0 = (void *)qword_1E92DE158;

  return v0;
}

uint64_t sub_191931BC4()
{
  qword_1E92DE158 = objc_alloc_init(IDSDaemonRequestTimer);

  return MEMORY[0x1F41817F8]();
}

void sub_191931C00()
{
  uint64_t v0 = [IDSReportiMessageSpamDaemonResponseListener alloc];
  id v1 = sub_191931B70();
  uint64_t v2 = [(IDSReportiMessageSpamDaemonResponseListener *)v0 initWithRequestTimer:v1];
  id v3 = (void *)qword_1E92DE178;
  qword_1E92DE178 = v2;

  id v5 = +[IDSDaemonController sharedInstance];
  id v4 = [v5 listener];
  [v4 addHandler:qword_1E92DE178];
}

uint64_t sub_191931CFC()
{
  qword_1EB2BD800 = objc_alloc_init(IDSServiceAvailabilityController);

  return MEMORY[0x1F41817F8]();
}

void sub_191932AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191932AEC(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 161);
  return result;
}

void sub_191932BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191932C00(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 136) copy];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191932CBC(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 164) = *(unsigned char *)(result + 40);
  return result;
}

void sub_191932D5C(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x192FE0160]();
  [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
  if (![*(id *)(*(void *)(a1 + 32) + 24) count])
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 24);
    *(void *)(v3 + 24) = 0;
  }
}

uint64_t sub_191932E60(uint64_t a1)
{
  return [*(id *)(a1 + 32) _callHandlersWithBlockOnIvarQueue:*(void *)(a1 + 40)];
}

uint64_t sub_191932F14(uint64_t a1)
{
  return [*(id *)(a1 + 32) _callHandlersWithBlockOnIvarQueue:*(void *)(a1 + 40)];
}

void sub_1919330DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919330F4(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = [a2 objectForKey:*MEMORY[0x1E4F6B7F0]];
  int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

  if (v8)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
}

void sub_1919333A8(uint64_t a1)
{
  [*(id *)(a1 + 32) _removeAccountOnIvarQueue:*(void *)(a1 + 40)];
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 40) objectForKey:*(void *)(a1 + 48)];
  if (!v2)
  {
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    [*(id *)(*(void *)(a1 + 32) + 40) setObject:v3 forKey:*(void *)(a1 + 48)];
    uint64_t v2 = v3;
  }
  id v4 = v2;
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_19193343C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountAdded:*(void *)(a1 + 32)];
  }
}

uint64_t sub_1919336C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAccountOnIvarQueue:*(void *)(a1 + 40)];
}

void sub_1919336D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountRemoved:*(void *)(a1 + 32)];
  }
}

void sub_191933938(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 48) objectForKey:a1[5]];
  id v3 = (id)[v2 mutableCopy];

  if (!v3) {
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  if (([v3 containsObject:a1[6]] & 1) == 0)
  {
    [v3 addObject:a1[6]];
    [*(id *)(a1[4] + 48) setObject:v3 forKey:a1[5]];
  }
}

void sub_1919339D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountEnabled:*(void *)(a1 + 32) onService:*(void *)(a1 + 40)];
  }
}

void sub_191933C40(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 48) objectForKey:a1[5]];
  id v3 = (id)[v2 mutableCopy];

  if (!v3) {
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  if ([v3 containsObject:a1[6]])
  {
    [v3 removeObject:a1[6]];
    [*(id *)(a1[4] + 48) setObject:v3 forKey:a1[5]];
  }
}

void sub_191933CE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountDisabled:*(void *)(a1 + 32) onService:*(void *)(a1 + 40)];
  }
}

void sub_191933FEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 service:*(void *)(a1 + 32) restrictionReasonChanged:*(void *)(a1 + 40)];
  }
}

void sub_19193422C(uint64_t a1)
{
  [*(id *)(a1 + 32) _removeAccountOnIvarQueue:*(void *)(a1 + 40)];
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 40) objectForKey:*(void *)(a1 + 48)];
  if (!v2)
  {
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    [*(id *)(*(void *)(a1 + 32) + 40) setObject:v3 forKey:*(void *)(a1 + 48)];
    uint64_t v2 = v3;
  }
  id v4 = v2;
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_191934374(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountUpdated:*(void *)(a1 + 32)];
  }
}

void sub_191934490(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) registrationStatusInfoChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919345AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) aliasesChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919346C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) vettedAliasesChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919347E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) profileChanged:*(void *)(a1 + 40)];
  }
}

void sub_191934900(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) loginChanged:*(void *)(a1 + 40)];
  }
}

void sub_191934A1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) displayNameChanged:*(void *)(a1 + 40)];
  }
}

void sub_191934C88(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 112) objectForKey:*(void *)(a1 + 40)];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v24 = *(void *)v26;
    uint64_t v6 = *MEMORY[0x1E4F6AE50];
    uint64_t v23 = *MEMORY[0x1E4F6AEB8];
    id v22 = v3;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v26 != v24) {
          objc_enumerationMutation(v3);
        }
        int v8 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:*(void *)(*((void *)&v25 + 1) + 8 * i)];
        id v9 = [*(id *)(a1 + 32) _uniqueIDForDevice:v8];
        if ([v2 length])
        {
          uint64_t v10 = [v9 isEqualToIgnoringCase:v2];
        }
        else
        {
          id v11 = [v8 objectForKey:v6];
          uint64_t v10 = [v11 BOOLValue];

          if (v10) {
            BOOL v12 = v9 == 0;
          }
          else {
            BOOL v12 = 1;
          }
          if (!v12)
          {
            if (*(void *)(a1 + 40))
            {
              objc_msgSend(*(id *)(*(void *)(a1 + 32) + 112), "setObject:forKey:", v9);
              id v13 = v9;

              id v14 = [v8 objectForKey:v23];
              if (v14) {
                [*(id *)(*(void *)(a1 + 32) + 120) setObject:v13 forKey:v14];
              }
              id v15 = objc_msgSend(MEMORY[0x1E4F6C3B8], "activeID", v22);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                id v16 = [*(id *)(*(void *)(a1 + 32) + 112) objectForKey:*(void *)(a1 + 40)];
                id v17 = *(__CFString **)(a1 + 40);
                *(_DWORD *)buf = 138412546;
                id v30 = v16;
                __int16 v31 = 2112;
                long long v32 = v17;
                _os_log_impl(&dword_19190B000, v15, OS_LOG_TYPE_DEFAULT, "Found active device in dependent devices update, updating activeDevice ID to %@ for %@", buf, 0x16u);

                id v3 = v22;
              }

              uint64_t v10 = 1;
              uint64_t v2 = v13;
            }
            else
            {
              uint64_t v10 = 1;
            }
          }
        }
        id v18 = objc_msgSend(NSNumber, "numberWithBool:", v10, v22);
        [v8 setObject:v18 forKey:v6];

        int v19 = [MEMORY[0x1E4F6C3B8] activeID];
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          id v20 = @"NO";
          if (v10) {
            id v20 = @"YES";
          }
          id v30 = v9;
          __int16 v31 = 2112;
          long long v32 = v20;
          _os_log_impl(&dword_19190B000, v19, OS_LOG_TYPE_DEFAULT, "Dependent devices updated, setting %@ to (isActive: %@)", buf, 0x16u);
        }

        [*(id *)(a1 + 56) addObject:v8];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v25 objects:v33 count:16];
    }
    while (v5);
  }

  if (*(void *)(a1 + 48))
  {
    uint64_t v21 = *(void *)(a1 + 40);
    if (v21) {
      [*(id *)(*(void *)(a1 + 32) + 168) updateAccount:v21 withRegistration:*(void *)(a1 + 56)];
    }
  }
}

void sub_191935004(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) dependentDevicesUpdated:*(void *)(a1 + 40)];
  }
}

void sub_19193534C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  _Block_object_dispose((const void *)(v33 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_191935384(uint64_t a1)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 32) || !*(void *)(a1 + 40)) {
    return;
  }
  uint64_t v2 = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = [*(id *)(a1 + 48) _uniqueIDForDevice:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  uint64_t v6 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) objectForKey:*MEMORY[0x1E4F6AEB8]];
  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
  int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v54 = [*(id *)(*(void *)(a1 + 48) + 168) registeredDeviceInfoForAccountID:*(void *)(a1 + 40)];
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithArray:v54];
  uint64_t v10 = [MEMORY[0x1E4F6C3B8] activeID];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v68 = v11;
    __int16 v69 = 2112;
    id v70 = v9;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Current devices for account %@: %@", buf, 0x16u);
  }
  v56 = (void *)v5;

  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id v12 = v9;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v61 objects:v66 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    char v15 = 0;
    id v16 = 0;
    uint64_t v17 = *(void *)v62;
    uint64_t v18 = *MEMORY[0x1E4F6AE20];
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v62 != v17) {
          objc_enumerationMutation(v12);
        }
        id v20 = *(void **)(*((void *)&v61 + 1) + 8 * i);
        uint64_t v21 = [*(id *)(a1 + 48) _uniqueIDForDevice:v20];
        if (v16 || ![v56 isEqualToIgnoringCase:v21])
        {
          if (v15)
          {
            char v15 = 1;
          }
          else
          {
            id v22 = [v20 objectForKey:v18];
            char v15 = [v22 BOOLValue];
          }
        }
        else
        {
          id v16 = v20;
        }
      }
      uint64_t v14 = [v12 countByEnumeratingWithState:&v61 objects:v66 count:16];
    }
    while (v14);
  }
  else
  {
    char v15 = 0;
    id v16 = 0;
  }
  uint64_t v23 = v12;

  uint64_t v24 = *(void *)(a1 + 64);
  if (*(void *)(*(void *)(v24 + 8) + 40))
  {
    long long v25 = v56;
    if ((v15 & 1) == 0)
    {
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      obuint64_t j = [*(id *)(*(void *)(a1 + 48) + 56) objectForKey:*(void *)(*(void *)(v24 + 8) + 40)];
      uint64_t v26 = [obj countByEnumeratingWithState:&v57 objects:v65 count:16];
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = *(void *)v58;
        uint64_t v29 = *MEMORY[0x1E4F6AE20];
        while (2)
        {
          for (uint64_t j = 0; j != v27; ++j)
          {
            if (*(void *)v58 != v28) {
              objc_enumerationMutation(obj);
            }
            __int16 v31 = *(void **)(*((void *)&v57 + 1) + 8 * j);
            long long v32 = [*(id *)(a1 + 48) _uniqueIDForDevice:v31];
            if ([v56 isEqualToString:v32])
            {
            }
            else
            {
              uint64_t v33 = [v31 objectForKey:v29];
              char v34 = [v33 BOOLValue];

              if (v34)
              {
                char v15 = 1;
                goto LABEL_34;
              }
            }
          }
          uint64_t v27 = [obj countByEnumeratingWithState:&v57 objects:v65 count:16];
          if (v27) {
            continue;
          }
          break;
        }
        char v15 = 0;
LABEL_34:
        long long v25 = v56;
        uint64_t v23 = v12;
      }
      else
      {
        char v15 = 0;
      }
    }
  }
  else
  {
    long long v25 = v56;
  }
  if (v16)
  {
    uint64_t v35 = [MEMORY[0x1E4F6C3B8] warning];
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      sub_191A2C90C();
    }

    [v23 removeObject:v16];
  }
  uint64_t v36 = [*(id *)(*(void *)(a1 + 48) + 112) objectForKey:*(void *)(a1 + 40)];
  if (![v36 length])
  {
    if (v15)
    {
      uint64_t v44 = [MEMORY[0x1E4F6C3B8] activeID];
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v68 = v25;
        _os_log_impl(&dword_19190B000, v44, OS_LOG_TYPE_DEFAULT, "Local device added %@, we'll trigger didSwitchActivePairedDevice callback since we already had a locally paired device", buf, 0xCu);
      }

      uint64_t v45 = *(void *)(*(void *)(a1 + 72) + 8);
      id v46 = v56;
      uint64_t v47 = *(NSObject **)(v45 + 40);
      *(void *)(v45 + 40) = v46;
      long long v25 = v56;
    }
    else
    {
      if (v25)
      {
        if (*(void *)(a1 + 40))
        {
          objc_msgSend(*(id *)(*(void *)(a1 + 48) + 112), "setObject:forKey:", v25);
          if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)) {
            objc_msgSend(*(id *)(*(void *)(a1 + 48) + 120), "setObject:forKey:", v25);
          }
        }
      }
      id v48 = v25;

      uint64_t v47 = [MEMORY[0x1E4F6C3B8] activeID];
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        id v49 = [*(id *)(*(void *)(a1 + 48) + 112) objectForKey:*(void *)(a1 + 40)];
        *(_DWORD *)buf = 138412290;
        v68 = v49;
        _os_log_impl(&dword_19190B000, v47, OS_LOG_TYPE_DEFAULT, "Local device added, updating activeDevice ID to %@", buf, 0xCu);
      }
      uint64_t v36 = v48;
    }

    uint64_t v50 = [v25 isEqualToIgnoringCase:v36];
    uint64_t v51 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    uint64_t v43 = [NSNumber numberWithBool:v50];
    [v51 setObject:v43 forKey:*MEMORY[0x1E4F6AE50]];
    goto LABEL_59;
  }
  uint64_t v37 = [v25 isEqualToIgnoringCase:v36];
  uint64_t v38 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  uint64_t v39 = [NSNumber numberWithBool:v37];
  [v38 setObject:v39 forKey:*MEMORY[0x1E4F6AE50]];

  if ((v37 & 1) == 0)
  {
    uint64_t v40 = [MEMORY[0x1E4F6C3B8] activeID];
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v68 = v25;
      __int16 v69 = 2112;
      id v70 = v36;
      _os_log_impl(&dword_19190B000, v40, OS_LOG_TYPE_DEFAULT, "Local device added %@, we'll trigger didSwitchActivePairedDevice callback since we already have an active device %@", buf, 0x16u);
    }

    uint64_t v41 = *(void *)(*(void *)(a1 + 72) + 8);
    id v42 = v56;
    uint64_t v43 = *(void **)(v41 + 40);
    *(void *)(v41 + 40) = v42;
    long long v25 = v56;
LABEL_59:
  }
  [v12 addObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  [*(id *)(*(void *)(a1 + 48) + 168) updateAccount:*(void *)(a1 + 40) withRegistration:v12];
  v52 = [MEMORY[0x1E4F6C3B8] activeID];
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v53 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v68 = v53;
    __int16 v69 = 2112;
    id v70 = v12;
    _os_log_impl(&dword_19190B000, v52, OS_LOG_TYPE_DEFAULT, "New devices for account %@: %@", buf, 0x16u);
  }
}

void sub_191935AD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) localDeviceAdded:*(void *)(a1 + 40)];
  }
}

uint64_t sub_191935B30(uint64_t a1)
{
  return [*(id *)(a1 + 32) _internalDidSwitchActivePairedDevice:*(void *)(a1 + 40) forService:*(void *)(a1 + 48)];
}

void sub_191935C78(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32) && *(void *)(a1 + 40))
  {
    uint64_t v2 = objc_msgSend(*(id *)(*(void *)(a1 + 48) + 168), "registeredDeviceInfoForAccountID:");
    id v3 = (void *)[v2 mutableCopy];

    if (v3)
    {
      id v4 = objc_alloc_init(MEMORY[0x1E4F28E60]);
      uint64_t v5 = [*(id *)(a1 + 48) _uniqueIDForDevice:*(void *)(a1 + 40)];
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      v12[2] = sub_191935EA0;
      v12[3] = &unk_1E5729CC8;
      void v12[4] = *(void *)(a1 + 48);
      id v6 = v5;
      id v13 = v6;
      id v7 = v4;
      id v14 = v7;
      [v3 enumerateObjectsUsingBlock:v12];
      [v3 removeObjectsAtIndexes:v7];
      uint64_t v8 = *(void *)(a1 + 32);
      if (v8)
      {
        [*(id *)(*(void *)(a1 + 48) + 168) updateAccount:v8 withRegistration:v3];
        uint64_t v8 = *(void *)(a1 + 32);
      }
      id v9 = [*(id *)(*(void *)(a1 + 48) + 112) objectForKey:v8];
      if ([v9 isEqualToIgnoringCase:v6])
      {
        uint64_t v10 = [MEMORY[0x1E4F6C3B8] activeID];
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v16 = v9;
          _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Active device was removed, clearing active uniqueID %@", buf, 0xCu);
        }

        [*(id *)(*(void *)(a1 + 48) + 112) removeObjectForKey:*(void *)(a1 + 32)];
        id v11 = [*(id *)(a1 + 40) objectForKey:*MEMORY[0x1E4F6AEB8]];
        if (v11) {
          [*(id *)(*(void *)(a1 + 48) + 120) removeObjectForKey:v11];
        }
      }
    }
  }
}

void sub_191935EA0(id *a1, uint64_t a2, uint64_t a3)
{
  id v5 = [a1[4] _uniqueIDForDevice:a2];
  if (objc_msgSend(a1[5], "isEqualToIgnoringCase:")) {
    [a1[6] addIndex:a3];
  }
}

void sub_191935F10(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) localDeviceRemoved:*(void *)(a1 + 40)];
  }
}

void sub_191936110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_191936134(uint64_t a1)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 32) || !*(void *)(a1 + 40)) {
    return;
  }
  uint64_t v2 = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = [*(id *)(a1 + 48) _uniqueIDForDevice:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  id v6 = [*(id *)(*(void *)(a1 + 48) + 56) objectForKey:*(void *)(a1 + 40)];
  id v7 = (void *)[v6 mutableCopy];
  uint64_t v8 = v7;
  if (v7) {
    id v9 = v7;
  }
  else {
    id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  uint64_t v10 = v9;

  uint64_t v11 = [v10 count];
  id v12 = (uint64_t *)MEMORY[0x1E4F6AE20];
  uint64_t v13 = v11 - 1;
  uint64_t v83 = v10;
  if (v11 - 1 < 0) {
    goto LABEL_18;
  }
  LOBYTE(v14) = 0;
  uint64_t v15 = *MEMORY[0x1E4F6AE20];
  while (1)
  {
    id v16 = [v10 objectAtIndex:v13];
    uint64_t v17 = [*(id *)(a1 + 48) _uniqueIDForDevice:v16];
    int v18 = [v5 isEqualToString:v17];

    if (v18)
    {
      [v10 removeObjectAtIndex:v13];
      goto LABEL_14;
    }
    if ((v14 & 1) == 0) {
      break;
    }

    int v14 = 1;
    if (v13 <= 0) {
      goto LABEL_39;
    }
LABEL_15:
    --v13;
  }
  int v19 = [v16 objectForKey:v15];
  LOBYTE(v14) = [v19 BOOLValue];

LABEL_14:
  if (v13 >= 1) {
    goto LABEL_15;
  }
  if (v14)
  {
    int v14 = 1;
    goto LABEL_39;
  }
LABEL_18:
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  id v20 = [*(id *)(*(void *)(a1 + 48) + 48) objectForKey:*(void *)(a1 + 40)];
  uint64_t v80 = [v20 countByEnumeratingWithState:&v100 objects:v112 count:16];
  if (v80)
  {
    uint64_t v21 = *(void *)v101;
    uint64_t v22 = *v12;
    uint64_t v82 = v20;
    uint64_t v79 = *(void *)v101;
    do
    {
      uint64_t v23 = 0;
      do
      {
        if (*(void *)v101 != v21) {
          objc_enumerationMutation(v20);
        }
        uint64_t v81 = v23;
        uint64_t v24 = *(void *)(*((void *)&v100 + 1) + 8 * v23);
        long long v96 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v99 = 0u;
        long long v25 = [*(id *)(*(void *)(a1 + 48) + 168) registeredDeviceInfoForAccountID:v24];
        uint64_t v26 = [v25 countByEnumeratingWithState:&v96 objects:v111 count:16];
        if (v26)
        {
          uint64_t v27 = v26;
          uint64_t v28 = *(void *)v97;
          while (2)
          {
            for (uint64_t i = 0; i != v27; ++i)
            {
              if (*(void *)v97 != v28) {
                objc_enumerationMutation(v25);
              }
              id v30 = *(void **)(*((void *)&v96 + 1) + 8 * i);
              __int16 v31 = [*(id *)(a1 + 48) _uniqueIDForDevice:v30];
              if ([v31 isEqualToString:v5])
              {
              }
              else
              {
                long long v32 = [v30 objectForKey:v22];
                char v33 = [v32 BOOLValue];

                if (v33)
                {

                  int v14 = 1;
                  id v20 = v82;
                  uint64_t v10 = v83;
                  goto LABEL_38;
                }
              }
            }
            uint64_t v27 = [v25 countByEnumeratingWithState:&v96 objects:v111 count:16];
            if (v27) {
              continue;
            }
            break;
          }
        }

        uint64_t v23 = v81 + 1;
        id v20 = v82;
        uint64_t v10 = v83;
        uint64_t v21 = v79;
      }
      while (v81 + 1 != v80);
      int v14 = 0;
      uint64_t v80 = [v82 countByEnumeratingWithState:&v100 objects:v112 count:16];
    }
    while (v80);
  }
  else
  {
    int v14 = 0;
  }
LABEL_38:

LABEL_39:
  char v34 = [*(id *)(*(void *)(a1 + 48) + 120) objectForKey:*(void *)(a1 + 40)];
  uint64_t v35 = v34;
  if (!*(unsigned char *)(a1 + 72))
  {
    if ([(__CFString *)v34 isEqualToIgnoringCase:v5])
    {
      [*(id *)(*(void *)(a1 + 48) + 120) removeObjectForKey:*(void *)(a1 + 40)];
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      uint64_t v45 = [*(id *)(*(void *)(a1 + 48) + 48) objectForKey:*(void *)(a1 + 40)];
      uint64_t v46 = [v45 countByEnumeratingWithState:&v84 objects:v104 count:16];
      if (v46)
      {
        uint64_t v47 = v46;
        uint64_t v48 = *(void *)v85;
        do
        {
          for (uint64_t j = 0; j != v47; ++j)
          {
            if (*(void *)v85 != v48) {
              objc_enumerationMutation(v45);
            }
            [*(id *)(*(void *)(a1 + 48) + 112) removeObjectForKey:*(void *)(*((void *)&v84 + 1) + 8 * j)];
          }
          uint64_t v47 = [v45 countByEnumeratingWithState:&v84 objects:v104 count:16];
        }
        while (v47);
      }

      uint64_t v10 = v83;
    }
    goto LABEL_98;
  }
  int v36 = *(unsigned __int8 *)(a1 + 73);
  uint64_t v37 = [(__CFString *)v34 length];
  if (!v36)
  {
    if (v37)
    {
      uint64_t v50 = [v5 isEqualToIgnoringCase:v35];
      uint64_t v51 = *MEMORY[0x1E4F6AE50];
LABEL_57:
      uint64_t v10 = v83;
      goto LABEL_92;
    }
    uint64_t v51 = *MEMORY[0x1E4F6AE50];
    v56 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) objectForKey:*MEMORY[0x1E4F6AE50]];
    uint64_t v50 = [v56 BOOLValue];

    if (v50) {
      BOOL v57 = v5 == 0;
    }
    else {
      BOOL v57 = 1;
    }
    uint64_t v10 = v83;
    if (!v57)
    {
      if (*(void *)(a1 + 40))
      {
        objc_msgSend(*(id *)(*(void *)(a1 + 48) + 120), "setObject:forKey:", v5);
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v58 = [*(id *)(*(void *)(a1 + 48) + 48) objectForKey:*(void *)(a1 + 40)];
        uint64_t v59 = [v58 countByEnumeratingWithState:&v88 objects:v105 count:16];
        if (v59)
        {
          uint64_t v60 = v59;
          uint64_t v61 = *(void *)v89;
          do
          {
            for (uint64_t k = 0; k != v60; ++k)
            {
              if (*(void *)v89 != v61) {
                objc_enumerationMutation(v58);
              }
              [*(id *)(*(void *)(a1 + 48) + 112) setObject:v5 forKey:*(void *)(*((void *)&v88 + 1) + 8 * k)];
            }
            uint64_t v60 = [v58 countByEnumeratingWithState:&v88 objects:v105 count:16];
          }
          while (v60);
        }

        long long v63 = v5;
        long long v64 = [MEMORY[0x1E4F6C3B8] activeID];
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v65 = [*(id *)(*(void *)(a1 + 48) + 120) objectForKey:*(void *)(a1 + 40)];
          uint64_t v66 = *(__CFString **)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          uint64_t v108 = v65;
          __int16 v109 = 2112;
          v110 = v66;
          _os_log_impl(&dword_19190B000, v64, OS_LOG_TYPE_DEFAULT, "Found active device in tinker device update, updating activeDevice ID to %@ for %@", buf, 0x16u);
        }
        uint64_t v50 = 1;
        uint64_t v35 = v63;
        goto LABEL_57;
      }
      uint64_t v50 = 1;
    }
LABEL_92:
    v76 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    v77 = [NSNumber numberWithBool:v50];
    [v76 setObject:v77 forKey:v51];

    uint64_t v44 = [MEMORY[0x1E4F6C3B8] activeID];
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      v78 = @"NO";
      if (v50) {
        v78 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v108 = v5;
      __int16 v109 = 2112;
      v110 = v78;
      _os_log_impl(&dword_19190B000, v44, OS_LOG_TYPE_DEFAULT, "Tinker device updated, setting %@ to (isActive: %@)", buf, 0x16u);
    }
    goto LABEL_96;
  }
  uint64_t v10 = v83;
  if (!v37)
  {
    if (v14)
    {
      v52 = [MEMORY[0x1E4F6C3B8] activeID];
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v108 = v5;
        _os_log_impl(&dword_19190B000, v52, OS_LOG_TYPE_DEFAULT, "Tinker device added %@, we'll trigger didSwitchActivePairedDevice callback since we already had a locally paired device", buf, 0xCu);
      }

      uint64_t v53 = *(void *)(*(void *)(a1 + 64) + 8);
      id v54 = v5;
      uint64_t v55 = *(NSObject **)(v53 + 40);
      *(void *)(v53 + 40) = v54;
      uint64_t v10 = v83;
    }
    else
    {
      if (v5 && *(void *)(a1 + 40))
      {
        objc_msgSend(*(id *)(*(void *)(a1 + 48) + 120), "setObject:forKey:", v5);
        long long v94 = 0u;
        long long v95 = 0u;
        long long v92 = 0u;
        long long v93 = 0u;
        uint64_t v67 = [*(id *)(*(void *)(a1 + 48) + 48) objectForKey:*(void *)(a1 + 40)];
        uint64_t v68 = [v67 countByEnumeratingWithState:&v92 objects:v106 count:16];
        if (v68)
        {
          uint64_t v69 = v68;
          uint64_t v70 = *(void *)v93;
          do
          {
            for (uint64_t m = 0; m != v69; ++m)
            {
              if (*(void *)v93 != v70) {
                objc_enumerationMutation(v67);
              }
              [*(id *)(*(void *)(a1 + 48) + 112) setObject:v5 forKey:*(void *)(*((void *)&v92 + 1) + 8 * m)];
            }
            uint64_t v69 = [v67 countByEnumeratingWithState:&v92 objects:v106 count:16];
          }
          while (v69);
        }

        uint64_t v10 = v83;
      }
      v72 = v5;

      uint64_t v55 = [MEMORY[0x1E4F6C3B8] activeID];
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v73 = [*(id *)(*(void *)(a1 + 48) + 120) objectForKey:*(void *)(a1 + 40)];
        *(_DWORD *)buf = 138412290;
        uint64_t v108 = v73;
        _os_log_impl(&dword_19190B000, v55, OS_LOG_TYPE_DEFAULT, "Tinker device added, updating activeDevice ID to %@", buf, 0xCu);
      }
      uint64_t v35 = v72;
    }

    uint64_t v74 = [v5 isEqualToIgnoringCase:v35];
    uint64_t v75 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    uint64_t v44 = [NSNumber numberWithBool:v74];
    [v75 setObject:v44 forKey:*MEMORY[0x1E4F6AE50]];
LABEL_96:

    goto LABEL_97;
  }
  uint64_t v38 = [v5 isEqualToIgnoringCase:v35];
  uint64_t v39 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  uint64_t v40 = [NSNumber numberWithBool:v38];
  [v39 setObject:v40 forKey:*MEMORY[0x1E4F6AE50]];

  if ((v38 & 1) == 0)
  {
    uint64_t v41 = [MEMORY[0x1E4F6C3B8] activeID];
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v108 = v5;
      __int16 v109 = 2112;
      v110 = v35;
      _os_log_impl(&dword_19190B000, v41, OS_LOG_TYPE_DEFAULT, "Tinker device added %@, we'll trigger didSwitchActivePairedDevice callback since we already have an active device %@", buf, 0x16u);
    }

    uint64_t v42 = *(void *)(*(void *)(a1 + 64) + 8);
    id v43 = v5;
    uint64_t v44 = *(NSObject **)(v42 + 40);
    *(void *)(v42 + 40) = v43;
    uint64_t v10 = v83;
    goto LABEL_96;
  }
LABEL_97:
  [v10 addObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
LABEL_98:
  [*(id *)(*(void *)(a1 + 48) + 56) setObject:v10 forKey:*(void *)(a1 + 40)];
}

void sub_191936D0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 service:*(void *)(a1 + 32) tinkerDeviceAdded:*(void *)(a1 + 40)];
  }
}

uint64_t sub_191936D6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _internalDidSwitchActivePairedDevice:*(void *)(a1 + 40) forService:*(void *)(a1 + 48)];
}

void sub_191936EE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 service:*(void *)(a1 + 32) tinkerDeviceRemoved:*(void *)(a1 + 40)];
  }
}

void sub_1919370A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 service:*(void *)(a1 + 32) tinkerDeviceUpdated:*(void *)(a1 + 40)];
  }
}

void sub_191937374(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 service:*(void *)(a1 + 32) familyInfoUpdated:*(void *)(a1 + 40)];
  }
}

void sub_191937504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19193751C(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 64) objectForKey:a1[5]];

  return MEMORY[0x1F41817F8]();
}

void sub_191937654(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  context = (void *)MEMORY[0x192FE0160]();
  id v1 = [*(id *)(*(void *)(a1 + 32) + 64) objectForKey:*(void *)(a1 + 40)];
  uint64_t v2 = [v1 objectForKey:*MEMORY[0x1E4F6AF10]];

  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  obuint64_t j = v2;
  uint64_t v5 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v32;
    uint64_t v8 = *MEMORY[0x1E4F6AEF8];
    uint64_t v9 = *MEMORY[0x1E4F6AF00];
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v32 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v31 + 1) + 8 * i);
        id v12 = [v11 objectForKey:v8];
        uint64_t v13 = [v11 objectForKey:v9];
        [v3 setObject:v12 forKey:v13];

        int v14 = [v11 objectForKey:v8];
        if ([v14 _appearsToBeEmail]) {
          uint64_t v15 = IDSCopyIDForEmailAddress();
        }
        else {
          uint64_t v15 = IDSCopyIDForPhoneNumber();
        }
        id v16 = (void *)v15;

        [v4 addObject:v16];
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
    }
    while (v6);
  }

  uint64_t v17 = +[IDSIDQueryController sharedInstance];
  int v19 = *(void **)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = sub_19193793C;
  v25[3] = &unk_1E5729D40;
  id v26 = v19;
  id v27 = *(id *)(a1 + 48);
  id v28 = v3;
  id v29 = obj;
  id v30 = *(id *)(a1 + 56);
  id v20 = obj;
  id v21 = v3;
  [v17 refreshIDStatusForDestinations:v4 service:v19 listenerID:v18 queue:MEMORY[0x1E4F14428] completionBlock:v25];
}

void sub_19193793C(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v4 = v2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v27 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v21 + 1) + 8 * i);
        uint64_t v10 = [v4 objectForKeyedSubscript:v9];
        int v11 = [v10 isEqualToNumber:&unk_1EE28B220];

        if (v11)
        {
          [v3 addObject:v9];
        }
        else
        {
          id v12 = [MEMORY[0x1E4F6C3B8] registration];
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v26 = v9;
            _os_log_impl(&dword_19190B000, v12, OS_LOG_TYPE_DEFAULT, "ID status not valid for %@", buf, 0xCu);
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v21 objects:v27 count:16];
    }
    while (v6);
  }

  uint64_t v13 = +[IDSIDQueryController sharedInstance];
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_191937BB4;
  v17[3] = &unk_1E5729D18;
  id v18 = *(id *)(a1 + 48);
  id v19 = *(id *)(a1 + 56);
  id v20 = *(id *)(a1 + 64);
  [v13 currentRemoteDevicesForDestinations:v3 service:v14 listenerID:v15 queue:MEMORY[0x1E4F14428] completionBlock:v17];
}

void sub_191937BB4(uint64_t a1, void *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  obuint64_t j = v2;
  uint64_t v40 = [obj countByEnumeratingWithState:&v54 objects:v60 count:16];
  if (v40)
  {
    uint64_t v37 = *(void *)v55;
    uint64_t v4 = *MEMORY[0x1E4F6AEE8];
    uint64_t v38 = v3;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v55 != v37) {
          objc_enumerationMutation(obj);
        }
        uint64_t v44 = v5;
        uint64_t v6 = *(void **)(*((void *)&v54 + 1) + 8 * v5);
        uint64_t v7 = *(void **)(a1 + 32);
        uint64_t v8 = [v6 _stripFZIDPrefix];
        uint64_t v9 = [v7 allKeysForObject:v8];
        id v42 = [v9 objectAtIndexedSubscript:0];

        uint64_t v10 = [obj objectForKeyedSubscript:v6];
        id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        long long v50 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        id v12 = v10;
        uint64_t v13 = [v12 countByEnumeratingWithState:&v50 objects:v59 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v51;
          do
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              if (*(void *)v51 != v15) {
                objc_enumerationMutation(v12);
              }
              uint64_t v17 = *(void **)(*((void *)&v50 + 1) + 8 * i);
              id v18 = [v17 familyEndpointData];

              if (v18)
              {
                id v19 = objc_alloc(MEMORY[0x1E4F1CA60]);
                id v20 = [v17 familyEndpointData];
                long long v21 = [v20 dictionaryRepresentation];
                long long v22 = (void *)[v19 initWithDictionary:v21];

                long long v23 = [v6 _stripFZIDPrefix];
                [v22 setObject:v23 forKey:v4];

                [v11 addObject:v22];
              }
            }
            uint64_t v14 = [v12 countByEnumeratingWithState:&v50 objects:v59 count:16];
          }
          while (v14);
        }

        id v3 = v38;
        [v38 setObject:v11 forKey:v42];

        uint64_t v5 = v44 + 1;
      }
      while (v44 + 1 != v40);
      uint64_t v40 = [obj countByEnumeratingWithState:&v54 objects:v60 count:16];
    }
    while (v40);
  }

  id v24 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id v43 = *(id *)(a1 + 40);
  uint64_t v25 = [v43 countByEnumeratingWithState:&v46 objects:v58 count:16];
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)v47;
    uint64_t v28 = *MEMORY[0x1E4F6AF00];
    uint64_t v45 = *MEMORY[0x1E4F6AF08];
    do
    {
      for (uint64_t j = 0; j != v26; ++j)
      {
        if (*(void *)v47 != v27) {
          objc_enumerationMutation(v43);
        }
        id v30 = *(void **)(*((void *)&v46 + 1) + 8 * j);
        long long v31 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v30];
        long long v32 = [v30 objectForKeyedSubscript:v28];
        long long v33 = [v3 objectForKeyedSubscript:v32];

        if (v33)
        {
          long long v34 = [v30 objectForKeyedSubscript:v28];
          uint64_t v35 = [v3 objectForKeyedSubscript:v34];
          [v31 setObject:v35 forKey:v45];
        }
        uint64_t v36 = (void *)[objc_alloc(MEMORY[0x1E4F6B458]) initWithDictionary:v31];
        [v24 addObject:v36];
      }
      uint64_t v26 = [v43 countByEnumeratingWithState:&v46 objects:v58 count:16];
    }
    while (v26);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_191938158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191938170(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 80) objectForKey:a1[5]];

  return MEMORY[0x1F41817F8]();
}

void sub_1919382F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191938308(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 88) objectForKey:a1[5]];

  return MEMORY[0x1F41817F8]();
}

void sub_191938424(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19193843C(void *a1)
{
  id v2 = [*(id *)(a1[4] + 96) objectForKey:a1[5]];
  *(void *)(*(void *)(a1[6] + 8) + 24) = [v2 integerValue];
}

void sub_191938540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191938558(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 152);
  return result;
}

void sub_191938654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19193866C(uint64_t a1)
{
}

void sub_19193873C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 registrationFailedForAccount:*(void *)(a1 + 32) needsDeletion:*(void *)(a1 + 40)];
  }
}

void sub_19193888C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 refreshRegistrationForAccount:*(void *)(a1 + 32)];
  }
}

void sub_191938A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191938A48(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 168) registeredDeviceInfoForAccountID:a1[5]];

  return MEMORY[0x1F41817F8]();
}

void sub_191938BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191938BF4(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 56) objectForKey:a1[5]];

  return MEMORY[0x1F41817F8]();
}

void sub_191938D58(id *a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v2 = +[IDSLogging DaemonListener];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = a1[4];
    id v4 = a1[5];
    *(_DWORD *)buf = 138412546;
    id v43 = v3;
    __int16 v44 = 2112;
    uint64_t v45 = v4;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Checking for updates for device with new nsuuid { nsuuid: %@, device: %@}", buf, 0x16u);
  }

  [*((id *)a1[6] + 21) accountIDToRegistrationMapping];
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v27 = v39 = 0u;
  obuint64_t j = [v27 allKeys];
  uint64_t v28 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
  if (v28)
  {
    uint64_t v26 = *(void *)v37;
    uint64_t v25 = *MEMORY[0x1E4F6AE80];
    *(void *)&long long v5 = 138412546;
    long long v23 = v5;
    do
    {
      for (uint64_t i = 0; i != v28; ++i)
      {
        if (*(void *)v37 != v26) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v36 + 1) + 8 * i);
        uint64_t v8 = objc_msgSend(v27, "objectForKeyedSubscript:", v7, v23);
        if ([v8 count])
        {
          id v29 = (void *)[v8 mutableCopy];
          long long v32 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          id v9 = v8;
          uint64_t v10 = [v9 countByEnumeratingWithState:&v32 objects:v40 count:16];
          if (v10)
          {
            uint64_t v11 = v10;
            uint64_t v12 = *(void *)v33;
LABEL_11:
            uint64_t v13 = 0;
            while (1)
            {
              if (*(void *)v33 != v12) {
                objc_enumerationMutation(v9);
              }
              uint64_t v14 = *(void *)(*((void *)&v32 + 1) + 8 * v13);
              uint64_t v15 = [a1[6] _uniqueIDForDevice:v14];
              if ([a1[5] isEqualToIgnoringCase:v15]) {
                break;
              }

              if (v11 == ++v13)
              {
                uint64_t v11 = [v9 countByEnumeratingWithState:&v32 objects:v40 count:16];
                if (v11) {
                  goto LABEL_11;
                }
                goto LABEL_20;
              }
            }
            id v16 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v14];
            uint64_t v17 = [v16 objectForKey:v25];
            if (([a1[4] isEqualToString:v17] & 1) != 0
              || ![a1[4] length] && !objc_msgSend(v17, "length"))
            {

              goto LABEL_20;
            }
            id v20 = v29;
            if ([a1[4] length]) {
              [v16 setObject:a1[4] forKey:v25];
            }
            else {
              [v16 removeObjectForKey:v25];
            }
            [v29 removeObject:v14];
            [v29 addObject:v16];

            [*((id *)a1[6] + 21) updateAccount:v7 withRegistration:v29];
            long long v21 = objc_msgSend(MEMORY[0x1E4F6C3B8], "IDSService_oversized");
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v23;
              id v43 = v7;
              __int16 v44 = 2112;
              uint64_t v45 = v29;
              _os_log_impl(&dword_19190B000, v21, OS_LOG_TYPE_DEFAULT, "New devices for account %@: %@", buf, 0x16u);
            }

            id v22 = a1[6];
            v30[0] = MEMORY[0x1E4F143A8];
            v30[1] = 3221225472;
            v30[2] = sub_1919391FC;
            v30[3] = &unk_1E5729C50;
            v30[4] = v7;
            id v31 = v29;
            [v22 _callHandlersAsyncWithBlock:v30];
          }
          else
          {
LABEL_20:

            id v18 = [MEMORY[0x1E4F6C3B8] NSUUID];
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              id v19 = a1[5];
              *(_DWORD *)buf = 138412290;
              id v43 = v19;
              _os_log_impl(&dword_19190B000, v18, OS_LOG_TYPE_DEFAULT, "No account with device %@ and mismatched nsuuid were found.  No updates made", buf, 0xCu);
            }

            id v20 = v29;
          }
        }
      }
      uint64_t v28 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
    }
    while (v28);
  }
}

void sub_1919391FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) dependentDevicesUpdated:*(void *)(a1 + 40)];
  }
}

void sub_1919393C8(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = [*(id *)(*(void *)(a1 + 32) + 40) allKeys];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v17 count:16];
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = *(void *)v12;
    *(void *)&long long v4 = 138412290;
    long long v10 = v4;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void *)(*((void *)&v11 + 1) + 8 * v7);
        id v9 = objc_msgSend(MEMORY[0x1E4F6C3B8], "isActive", v10);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v10;
          uint64_t v16 = v8;
          _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "Calling didSwitch for topic %@", buf, 0xCu);
        }

        [*(id *)(a1 + 32) _internalDidSwitchActivePairedDevice:*(void *)(a1 + 40) forService:v8];
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v2 countByEnumeratingWithState:&v11 objects:v17 count:16];
    }
    while (v5);
  }
}

void sub_1919396A0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1919396B8(void *a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    char v7 = 1;
    [v3 didSwitchActivePairedDevice:a1[4] forService:a1[5] wasHandled:&v7];
    if (v7) {
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 0;
    }
    long long v4 = [MEMORY[0x1E4F6C3B8] isActive];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = a1[5];
      if (v7) {
        uint64_t v6 = @"YES";
      }
      else {
        uint64_t v6 = @"NO";
      }
      *(_DWORD *)buf = 138412802;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      __int16 v12 = 2112;
      long long v13 = v6;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "DidSwitch callback for %@ (handler %@) was handled %@", buf, 0x20u);
    }
  }
}

void sub_1919397E8(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = sub_19193989C;
    v5[3] = &unk_1E5728DA8;
    id v2 = *(void **)(a1 + 32);
    id v3 = *(id *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 32);
    id v6 = v3;
    uint64_t v7 = v4;
    id v8 = *(id *)(a1 + 48);
    [v2 _performSyncBlock:v5];
  }
}

void sub_19193989C(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6C3B8] isActive];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    id v19 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Unhandled didSwitch callback for topic %@", buf, 0xCu);
  }

  uint64_t v4 = [*(id *)(*(void *)(a1 + 40) + 40) objectForKey:*(void *)(a1 + 32)];
  uint64_t v5 = [MEMORY[0x1E4F6C3B8] isActive];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v19 = v4;
    _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "Updating isActive state for all accounts %@", buf, 0xCu);
  }

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v6 = v4;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    uint64_t v10 = *MEMORY[0x1E4F6B7F0];
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        __int16 v12 = objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * v11), "objectForKey:", v10, (void)v13);
        [*(id *)(a1 + 40) _internalSwitchActivePairedDevice:*(void *)(a1 + 48) forAccount:v12];

        ++v11;
      }
      while (v8 != v11);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }

  [*(id *)(a1 + 40) _internalSwitchActivePairedDevice:*(void *)(a1 + 48) forService:*(void *)(a1 + 32)];
}

uint64_t sub_191939BEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _internalSwitchActivePairedDevice:*(void *)(a1 + 40) forService:*(void *)(a1 + 48)];
}

uint64_t sub_19193A120(uint64_t a1)
{
  return [*(id *)(a1 + 32) _internalSwitchActivePairedDevice:*(void *)(a1 + 40) forAccount:*(void *)(a1 + 48)];
}

void sub_19193A57C(uint64_t a1)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6C3B8] isActive];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Unsetting active device unique ID due to quick switch or new pairing start", buf, 2u);
  }

  [*(id *)(*(void *)(a1 + 32) + 168) accountIDToRegistrationMapping];
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  id v43 = v70 = 0u;
  obuint64_t j = [v43 allKeys];
  uint64_t v50 = a1;
  uint64_t v44 = [obj countByEnumeratingWithState:&v67 objects:v78 count:16];
  if (v44)
  {
    uint64_t v41 = *(void *)v68;
    uint64_t v3 = *MEMORY[0x1E4F6AE50];
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v68 != v41) {
          objc_enumerationMutation(obj);
        }
        uint64_t v48 = v4;
        uint64_t v5 = *(void *)(*((void *)&v67 + 1) + 8 * v4);
        [*(id *)(*(void *)(a1 + 32) + 112) removeObjectForKey:v5];
        id v6 = [v43 objectForKeyedSubscript:v5];
        uint64_t v7 = (void *)[v6 mutableCopy];

        uint64_t v8 = [MEMORY[0x1E4F6C3B8] isActive];
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v75 = v5;
          __int16 v76 = 2112;
          v77 = v7;
          _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "Current devices for account %@: %@", buf, 0x16u);
        }
        uint64_t v46 = v5;

        uint64_t v9 = (void *)[v7 mutableCopy];
        long long v63 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        id v10 = v9;
        uint64_t v11 = [v10 countByEnumeratingWithState:&v63 objects:v73 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v64;
          do
          {
            for (uint64_t i = 0; i != v12; ++i)
            {
              if (*(void *)v64 != v13) {
                objc_enumerationMutation(v10);
              }
              uint64_t v15 = *(void *)(*((void *)&v63 + 1) + 8 * i);
              long long v16 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v15];
              uint64_t v17 = [NSNumber numberWithBool:0];
              [v16 setObject:v17 forKey:v3];

              [v7 removeObject:v15];
              [v7 addObject:v16];
            }
            uint64_t v12 = [v10 countByEnumeratingWithState:&v63 objects:v73 count:16];
          }
          while (v12);
        }

        a1 = v50;
        if (v46 && v7)
        {
          [*(id *)(*(void *)(v50 + 32) + 168) updateAccount:v46 withRegistration:v7];
          uint64_t v18 = [MEMORY[0x1E4F6C3B8] isActive];
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            uint64_t v75 = v46;
            __int16 v76 = 2112;
            v77 = v7;
            _os_log_impl(&dword_19190B000, v18, OS_LOG_TYPE_DEFAULT, "New devices for account %@: %@", buf, 0x16u);
          }
        }
        id v19 = *(void **)(v50 + 32);
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 3221225472;
        v61[2] = sub_19193ACEC;
        v61[3] = &unk_1E5729C50;
        v61[4] = v46;
        id v62 = v7;
        id v20 = v7;
        [v19 _callHandlersAsyncWithBlock:v61];

        uint64_t v4 = v48 + 1;
      }
      while (v48 + 1 != v44);
      uint64_t v44 = [obj countByEnumeratingWithState:&v67 objects:v78 count:16];
    }
    while (v44);
  }

  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  id obja = [*(id *)(*(void *)(a1 + 32) + 56) allKeys];
  uint64_t v45 = [obja countByEnumeratingWithState:&v57 objects:v72 count:16];
  if (v45)
  {
    uint64_t v42 = *(void *)v58;
    uint64_t v21 = *MEMORY[0x1E4F6AE50];
    do
    {
      uint64_t v22 = 0;
      do
      {
        if (*(void *)v58 != v42) {
          objc_enumerationMutation(obja);
        }
        uint64_t v49 = v22;
        uint64_t v23 = *(void *)(*((void *)&v57 + 1) + 8 * v22);
        [*(id *)(*(void *)(a1 + 32) + 120) removeObjectForKey:v23];
        id v24 = [*(id *)(*(void *)(a1 + 32) + 56) objectForKey:v23];
        uint64_t v25 = (void *)[v24 mutableCopy];

        uint64_t v26 = [MEMORY[0x1E4F6C3B8] isActive];
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v75 = v23;
          __int16 v76 = 2112;
          v77 = v25;
          _os_log_impl(&dword_19190B000, v26, OS_LOG_TYPE_DEFAULT, "Current linked devices for service %@: %@", buf, 0x16u);
        }
        uint64_t v47 = v23;

        uint64_t v27 = (void *)[v25 mutableCopy];
        long long v53 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        id v28 = v27;
        uint64_t v29 = [v28 countByEnumeratingWithState:&v53 objects:v71 count:16];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)v54;
          do
          {
            for (uint64_t j = 0; j != v30; ++j)
            {
              if (*(void *)v54 != v31) {
                objc_enumerationMutation(v28);
              }
              uint64_t v33 = *(void *)(*((void *)&v53 + 1) + 8 * j);
              long long v34 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v33];
              long long v35 = [NSNumber numberWithBool:0];
              [v34 setObject:v35 forKey:v21];

              [v25 removeObject:v33];
              [v25 addObject:v34];
            }
            uint64_t v30 = [v28 countByEnumeratingWithState:&v53 objects:v71 count:16];
          }
          while (v30);
        }

        a1 = v50;
        if (v47 && v25)
        {
          [*(id *)(*(void *)(v50 + 32) + 56) setObject:v25 forKey:v47];
          long long v36 = [MEMORY[0x1E4F6C3B8] isActive];
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            uint64_t v75 = v47;
            __int16 v76 = 2112;
            v77 = v25;
            _os_log_impl(&dword_19190B000, v36, OS_LOG_TYPE_DEFAULT, "New linked devices for service %@: %@", buf, 0x16u);
          }
        }
        long long v37 = *(void **)(v50 + 32);
        v51[0] = MEMORY[0x1E4F143A8];
        v51[1] = 3221225472;
        v51[2] = sub_19193AD4C;
        v51[3] = &unk_1E5729C50;
        v51[4] = v47;
        id v52 = v25;
        id v38 = v25;
        [v37 _callHandlersAsyncWithBlock:v51];

        uint64_t v22 = v49 + 1;
      }
      while (v49 + 1 != v45);
      uint64_t v45 = [obja countByEnumeratingWithState:&v57 objects:v72 count:16];
    }
    while (v45);
  }
}

void sub_19193ACEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) dependentDevicesUpdated:*(void *)(a1 + 40)];
  }
}

void sub_19193AD4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 service:*(void *)(a1 + 32) linkedDevicesUpdated:*(void *)(a1 + 40)];
  }
}

void sub_19193ADAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountsChanged:*(void *)(a1 + 32) forTopic:*(void *)(a1 + 40)];
  }
}

void sub_19193AE0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountsChanged:0 forTopic:*(void *)(a1 + 32)];
  }
}

void sub_19193AE70(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    [v3 accountEnabled:*(void *)(a1 + 32) onService:*(void *)(a1 + 40)];
    uint64_t v4 = [MEMORY[0x1E4F6C3B8] accountEnabled];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Notified account enabled %@ for service %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_19193AF5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) dependentDevicesUpdatedUponReconnect:*(void *)(a1 + 40)];
  }
}

void sub_19193AFBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) dependentDevicesUpdatedUponReconnect:0];
  }
}

void sub_19193B020(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 service:*(void *)(a1 + 32) familyInfoUpdated:*(void *)(a1 + 40)];
  }
}

void sub_19193B168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19193B180(uint64_t a1)
{
}

void sub_19193B194(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [v2 daemonConnected];
  }
}

void sub_19193B33C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 xpcObject:*(void *)(a1 + 32) objectContext:*(void *)(a1 + 40)];
  }
}

void sub_19193B48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19193B4A4(void *a1)
{
  *(void *)(*(void *)(a1[5] + 8) + 40) = [*(id *)(a1[4] + 32) _imMethodSignatureForSelector:a1[6]];

  return MEMORY[0x1F41817F8]();
}

void sub_19193B698(uint64_t a1, uint64_t a2)
{
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x3032000000;
  v11[3] = sub_191918660;
  void v11[4] = sub_191918550;
  id v12 = 0;
  uint64_t v4 = *(void **)(a1 + 32);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_19193B810;
  v10[3] = &unk_1E5728DF8;
  void v10[4] = v4;
  void v10[5] = v11;
  [v4 _performSyncBlock:v10];
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_19193B884;
  v6[3] = &unk_1E5729190;
  __int16 v9 = v11;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  [v5 performBlock:v6 waitUntilDone:a2];

  _Block_object_dispose(v11, 8);
}

void sub_19193B7F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_19193B810(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x192FE0160]();
  id v3 = [*(id *)(*(void *)(a1 + 32) + 24) allObjects];
  uint64_t v4 = [v3 _copyForEnumerating];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_19193B884(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  context = (void *)MEMORY[0x192FE0160]();
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  obuint64_t j = *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  uint64_t v2 = [obj countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v13 != v3) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        [*(id *)(a1 + 32) selector];
        if (objc_opt_respondsToSelector())
        {
          uint64_t v6 = (void *)MEMORY[0x192FE0160]();
          id v7 = (void *)MEMORY[0x1E4F1CA18];
          id v8 = objc_msgSend(v5, "methodSignatureForSelector:", objc_msgSend(*(id *)(a1 + 32), "selector"));
          __int16 v9 = [v7 invocationWithMethodSignature:v8];

          objc_msgSend(v9, "setSelector:", objc_msgSend(*(id *)(a1 + 32), "selector"));
          JWCopyInvocationArguments();
          [v9 retainArguments];
          if (objc_opt_respondsToSelector()) {
            [v5 performSelector:sel__setTemporaryMessageContext_ withObject:*(void *)(a1 + 40)];
          }
          [v9 invokeWithTarget:v5];
          if (objc_opt_respondsToSelector()) {
            [v5 performSelector:sel__setTemporaryMessageContext_ withObject:0];
          }
        }
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v2);
  }
}

void sub_19193BB54(_Unwind_Exception *a1)
{
}

uint64_t sub_19193BB74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19193BBF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidUpdateStateToState:*(void *)(a1 + 32)];
  }
}

void sub_19193BCE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidLosePeer:*(void *)(a1 + 32)];
  }
}

void sub_19193BDB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidStartAdvertisingOfType:*(void *)(a1 + 32)];
  }
}

void sub_19193BE80(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidStopAdvertisingOfType:*(void *)(a1 + 32)];
  }
}

void sub_19193BF78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidStopAdvertisingOfType:*(void *)(a1 + 40) withError:*(void *)(a1 + 32)];
  }
}

void sub_19193C070(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidFailToStartAdvertisingOfType:*(void *)(a1 + 40) withError:*(void *)(a1 + 32)];
  }
}

void sub_19193C13C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidStartScanningForType:*(void *)(a1 + 32)];
  }
}

void sub_19193C208(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidStopScanningForType:*(void *)(a1 + 32)];
  }
}

void sub_19193C300(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidFailToStartScanningForType:*(void *)(a1 + 40) withError:*(void *)(a1 + 32)];
  }
}

void sub_19193C424(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidDiscoverType:a1[6] withData:a1[4] fromPeer:a1[5]];
  }
}

void sub_19193C544(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidDiscoverPeerWithData:*(void *)(a1 + 32) fromPeer:*(void *)(a1 + 40)];
  }
}

void sub_19193C660(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidConnectToPeer:*(void *)(a1 + 32) withError:*(void *)(a1 + 40)];
  }
}

void sub_19193C77C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 continuityDidDisconnectFromPeer:*(void *)(a1 + 32) withError:*(void *)(a1 + 40)];
  }
}

void sub_19193C958(uint64_t a1)
{
}

void sub_19193C964(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 deviceIdentifierDidChange:*(void *)(a1 + 32)];
  }
}

void sub_19193CB00(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_19193CB20(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_19193CB40(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t IDSActivityMonitorMaxTokenCount()
{
  return 10;
}

uint64_t sub_19193D864(uint64_t a1, void *a2)
{
  return [a2 uniqueID];
}

void sub_19193EBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19193EBF0(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 48);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v5 = [WeakRetained activityIdentifier];
  [v4 unsubscribeActivity:v5 andSubActivity:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

void sub_19193EDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19193EDD8(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a3)
  {
    v9[9] = v3;
    v9[10] = v4;
    uint64_t v6 = *(void **)(a1 + 32);
    id v7 = a2;
    id v8 = [v6 activityIdentifier];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = sub_19193EE94;
    v9[3] = &unk_1E5729EA0;
    void v9[4] = *(void *)(a1 + 40);
    [v7 checkIfListeningForActivity:v8 completion:v9];
  }
}

void sub_19193EE94(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  if (v5)
  {
    uint64_t v6 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_191A2D150((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
}

void sub_19193F03C(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 40);
    id v5 = *(void **)(a1 + 32);
    id v6 = a2;
    id v7 = [v5 activityIdentifier];
    [v6 setShouldListen:v4 forActivity:v7 completion:&unk_1EE245D68];
  }
}

void sub_19193F0C0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    uint64_t v3 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_191A2D1BC((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
}

void sub_19193F240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19193F258(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a3)
  {
    v9[9] = v3;
    v9[10] = v4;
    uint64_t v6 = *(void **)(a1 + 32);
    id v7 = a2;
    uint64_t v8 = [v6 activityIdentifier];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = sub_19193F314;
    v9[3] = &unk_1E5729F18;
    void v9[4] = *(void *)(a1 + 40);
    [v7 currentSubscriptionsForActivity:v8 completion:v9];
  }
}

void sub_19193F314(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = 138412546;
    id v18 = v5;
    __int16 v19 = 2112;
    id v20 = v6;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Subscription completion handler called, subscriptions: %@ error %@", (uint8_t *)&v17, 0x16u);
  }

  if (v6)
  {
    uint64_t v8 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_191A2D228((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  else
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
    id v16 = v5;
    uint64_t v8 = *(NSObject **)(v15 + 40);
    *(void *)(v15 + 40) = v16;
  }
}

uint64_t sub_19193F534(uint64_t a1)
{
  [*(id *)(a1 + 32) activityMonitor:*(void *)(a1 + 40) didReceiveActivityUpdate:*(void *)(a1 + 48)];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);

  return v2();
}

uint64_t sub_19193F8C8(uint64_t a1)
{
  id v2 = +[IDSDaemonController sharedInstance];
  uint64_t v3 = [v2 listener];
  [v3 addHandler:*(void *)(a1 + 32)];

  dispatch_queue_t v4 = dispatch_queue_create("IDSInvitations-defaultQueue", 0);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  *(unsigned char *)(*(void *)(a1 + 32) + 48) = 0;
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 8);
  *(void *)(v8 + 8) = v7;

  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(v11 + 16);
  *(void *)(v11 + 16) = v10;

  id v13 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void **)(v14 + 24);
  *(void *)(v14 + 24) = v13;

  id v16 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v17 = *(void *)(a1 + 32);
  id v18 = *(void **)(v17 + 32);
  *(void *)(v17 + 32) = v16;

  *(void *)(*(void *)(a1 + 32) + 56) = [[IDSService alloc] initWithService:*(void *)(a1 + 40)];

  return MEMORY[0x1F41817F8]();
}

void sub_19193FAB4(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  id v4 = [v1[7] accounts];
  id v2 = [v4 anyObject];
  uint64_t v3 = [v2 serviceName];
  [v1 setupInvitationsForService:v3];
}

void sub_19193FC0C(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  id v4 = [v1[7] accounts];
  id v2 = [v4 anyObject];
  uint64_t v3 = [v2 serviceName];
  [v1 setupInvitationsForService:v3];
}

void sub_191940A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 240), 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191940A6C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_191940A84(void *a1)
{
  id v2 = (void *)[*(id *)(*(void *)(a1[9] + 8) + 40) copy];
  uint64_t v3 = (void *)a1[8];
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = *(void **)(a1[4] + 16);
    id v6 = (void *)[v3 copy];
    id v7 = (void *)MEMORY[0x192FE03B0]();
    [v5 setObject:v7 forKey:v2];
  }
  uint64_t v8 = a1[5];
  uint64_t v9 = *(void **)(a1[4] + 56);
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  uint64_t v12 = *(void *)(a1[9] + 8);
  id v13 = *(void **)(v12 + 40);
  uint64_t v14 = *(void *)(a1[11] + 8);
  id v16 = *(id *)(v14 + 40);
  obuint64_t j = v13;
  char v15 = [v9 sendInvitation:v8 toDestination:v10 options:v11 identifier:&obj error:&v16];
  objc_storeStrong((id *)(v12 + 40), obj);
  objc_storeStrong((id *)(v14 + 40), v16);
  *(unsigned char *)(*(void *)(a1[10] + 8) + 24) = v15;
  if (!*(unsigned char *)(*(void *)(a1[10] + 8) + 24) && a1[8] && v2) {
    [*(id *)(a1[4] + 16) removeObjectForKey:v2];
  }
}

uint64_t sub_191940B9C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_191941044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_191941094(void *a1)
{
  id v2 = (void *)[*(id *)(*(void *)(a1[8] + 8) + 40) copy];
  uint64_t v3 = (void *)a1[7];
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = *(void **)(a1[4] + 8);
    id v6 = (void *)[v3 copy];
    id v7 = (void *)MEMORY[0x192FE03B0]();
    [v5 setObject:v7 forKey:*(void *)(*(void *)(a1[8] + 8) + 40)];
  }
  uint64_t v8 = (void *)a1[5];
  uint64_t v9 = *(void **)(a1[4] + 56);
  uint64_t v10 = [v8 destination];
  uint64_t v11 = a1[6];
  uint64_t v12 = *(void *)(a1[8] + 8);
  id v13 = *(void **)(v12 + 40);
  uint64_t v14 = *(void *)(a1[10] + 8);
  id v15 = *(id *)(v14 + 40);
  obuint64_t j = v13;
  LOBYTE(v8) = [v9 sendInvitation:v8 toDestination:v10 options:v11 identifier:&obj error:&v15];
  objc_storeStrong((id *)(v12 + 40), obj);
  objc_storeStrong((id *)(v14 + 40), v15);
  *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = (_BYTE)v8;

  if (!*(unsigned char *)(*(void *)(a1[9] + 8) + 24) && a1[7] && v2) {
    [*(id *)(a1[4] + 8) removeObjectForKey:v2];
  }
}

uint64_t sub_1919411DC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_191941698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1919416EC(void *a1)
{
  id v2 = (void *)[*(id *)(*(void *)(a1[9] + 8) + 40) copy];
  uint64_t v3 = (void *)a1[8];
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = *(void **)(a1[4] + 8);
    id v6 = (void *)[v3 copy];
    id v7 = (void *)MEMORY[0x192FE03B0]();
    [v5 setObject:v7 forKey:*(void *)(*(void *)(a1[9] + 8) + 40)];
  }
  uint64_t v8 = a1[5];
  uint64_t v9 = *(void **)(a1[4] + 56);
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  uint64_t v12 = *(void *)(a1[9] + 8);
  id v13 = *(void **)(v12 + 40);
  uint64_t v14 = *(void *)(a1[11] + 8);
  id v16 = *(id *)(v14 + 40);
  obuint64_t j = v13;
  char v15 = [v9 sendInvitationUpdate:v8 toDestination:v10 options:v11 identifier:&obj error:&v16];
  objc_storeStrong((id *)(v12 + 40), obj);
  objc_storeStrong((id *)(v14 + 40), v16);
  *(unsigned char *)(*(void *)(a1[10] + 8) + 24) = v15;
  if (!*(unsigned char *)(*(void *)(a1[10] + 8) + 24) && a1[8] && v2) {
    [*(id *)(a1[4] + 8) removeObjectForKey:v2];
  }
}

uint64_t sub_19194180C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_191941D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_191941D58(void *a1)
{
  id v2 = (void *)[*(id *)(*(void *)(a1[9] + 8) + 40) copy];
  uint64_t v3 = (void *)a1[8];
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = *(void **)(a1[4] + 8);
    id v6 = (void *)[v3 copy];
    id v7 = (void *)MEMORY[0x192FE03B0]();
    [v5 setObject:v7 forKey:*(void *)(*(void *)(a1[9] + 8) + 40)];
  }
  uint64_t v8 = a1[5];
  uint64_t v9 = *(void **)(a1[4] + 56);
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  uint64_t v12 = *(void *)(a1[9] + 8);
  id v13 = *(void **)(v12 + 40);
  uint64_t v14 = *(void *)(a1[11] + 8);
  id v16 = *(id *)(v14 + 40);
  obuint64_t j = v13;
  char v15 = [v9 sendInvitationUpdate:v8 toDestination:v10 options:v11 identifier:&obj error:&v16];
  objc_storeStrong((id *)(v12 + 40), obj);
  objc_storeStrong((id *)(v14 + 40), v16);
  *(unsigned char *)(*(void *)(a1[10] + 8) + 24) = v15;
  if (!*(unsigned char *)(*(void *)(a1[10] + 8) + 24) && a1[8] && v2) {
    [*(id *)(a1[4] + 8) removeObjectForKey:v2];
  }
}

uint64_t sub_191941E78(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

uint64_t sub_191941F7C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) addDelegate:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 32) + 40)];
}

void sub_19194237C(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  id v4 = [v1[7] accounts];
  id v2 = [v4 anyObject];
  uint64_t v3 = [v2 serviceName];
  [v1 setupInvitationsForService:v3];
}

void sub_19194360C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191943654(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x192FE03B0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_191943680(uint64_t a1)
{
}

uint64_t sub_191943688(void *a1)
{
  id v2 = [*(id *)(a1[4] + 16) objectForKey:a1[5]];
  uint64_t v3 = [v2 copy];
  uint64_t v4 = *(void *)(a1[6] + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  [*(id *)(a1[4] + 16) removeObjectForKey:a1[5]];
  id v6 = [*(id *)(a1[4] + 8) objectForKey:a1[5]];
  uint64_t v7 = [v6 copy];
  uint64_t v8 = *(void *)(a1[7] + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  uint64_t v10 = a1[5];
  uint64_t v11 = *(void **)(a1[4] + 8);

  return [v11 removeObjectForKey:v10];
}

uint64_t sub_19194372C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(*(void *)(a1[6] + 8) + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, 0);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, a1[5]);
  }
}

uint64_t sub_191943760(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) + 16))();
}

void sub_1919439FC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_191943A0C()
{
  return v0;
}

void sub_191944630(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_19194464C(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [WeakRetained uuid];
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "XPC interruption for client %@", (uint8_t *)&v4, 0xCu);
  }
  [WeakRetained _setupXPC];
  [WeakRetained _failMessages];
}

void sub_191944730(uint64_t a1, void *a2)
{
  id v8 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v4 + 40);
  uint64_t v6 = (id *)(v4 + 40);
  uint64_t v5 = v7;
  if (!v7)
  {
    objc_storeStrong(v6, a2);
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 40);
  }
  objc_msgSend(v5, "addInterruptionHandler:forTarget:", *(void *)(a1 + 40));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
}

void sub_191944908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19194492C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  uint64_t v4 = [v3 serverMessagingCollaboratorWithErrorHandler:&unk_1EE246388];

  uint64_t v5 = [WeakRetained uuid];
  uint64_t v6 = [WeakRetained topic];
  uint64_t v7 = [WeakRetained commands];
  [v4 setupServerMessagingClient:WeakRetained withUUID:v5 forTopic:v6 commands:v7];
}

void sub_1919449F8(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A2D9B8();
  }
}

void sub_191944E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_191944E68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v5 = [v3 serverMessagingCollaboratorWithErrorHandler:&unk_1EE245988];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = [WeakRetained topic];
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_191945018;
  v10[3] = &unk_1E572A010;
  objc_copyWeak(&v13, (id *)(a1 + 64));
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  [v5 sendMessageData:v6 onTopic:v7 withOptions:v8 identifier:v9 completion:v10];

  objc_destroyWeak(&v13);
}

void sub_191944FA8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_191944FBC(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A2D9B8();
  }
}

void sub_191945018(uint64_t a1, int a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v7 = [[IDSServerMessagingOutgoingContext alloc] initWithIdentifier:*(void *)(a1 + 32)];
  os_unfair_lock_lock(WeakRetained + 3);
  uint64_t v8 = [(os_unfair_lock_s *)WeakRetained inFlightRequests];
  [v8 setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];

  os_unfair_lock_unlock(WeakRetained + 3);
  uint64_t v9 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = @"NO";
    int v12 = 138412802;
    if (a2) {
      id v11 = @"YES";
    }
    uint64_t v13 = v10;
    __int16 v14 = 2112;
    char v15 = v11;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "Calling out to client completion { guid: %@, success: %@, error: %@ }", (uint8_t *)&v12, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
}

void sub_1919455FC(uint64_t a1, void *a2)
{
  id v3 = [a2 serverMessagingCollaboratorWithErrorHandler:&unk_1EE246F68];
  [v3 sendCertifiedDeliveryReceipt:*(void *)(a1 + 32)];
}

void sub_191945658(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A2D9B8();
  }
}

void sub_191945788(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1919457A4(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v6 = [v4 serverMessagingCollaboratorWithErrorHandler:&unk_1EE245C88];

  uint64_t v7 = [WeakRetained topic];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1919458E8;
  v8[3] = &unk_1E572A088;
  id v9 = *(id *)(a1 + 32);
  [v6 sendServerStorageFetchForTopic:v7 completion:v8];
}

void sub_19194588C(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A2D9B8();
  }
}

void sub_1919458E8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    uint64_t v8 = *(void *)(a1 + 32);
    if (a2) {
      id v9 = @"YES";
    }
    else {
      id v9 = @"NO";
    }
    int v11 = 138412802;
    int v12 = v9;
    __int16 v13 = 2112;
    if (v8) {
      uint64_t v7 = @"YES";
    }
    id v14 = v5;
    __int16 v15 = 2112;
    __int16 v16 = v7;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Calling out to client completion for storage fetch { success: %@, error: %@, hasCompletion: %@ }", (uint8_t *)&v11, 0x20u);
  }

  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t, id))(v10 + 16))(v10, a2, v5);
  }
}

void sub_191945AF8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_191945B14(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 48);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v6 = [v4 serverMessagingCollaboratorWithErrorHandler:&unk_1EE246F88];

  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = [WeakRetained topic];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_191945C68;
  v9[3] = &unk_1E572A088;
  id v10 = *(id *)(a1 + 40);
  [v6 cancelMessageWithIdentifier:v7 onTopic:v8 completion:v9];
}

void sub_191945C0C(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A2D9B8();
  }
}

void sub_191945C68(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    uint64_t v8 = *(void *)(a1 + 32);
    if (a2) {
      id v9 = @"YES";
    }
    else {
      id v9 = @"NO";
    }
    int v11 = 138412802;
    int v12 = v9;
    __int16 v13 = 2112;
    if (v8) {
      uint64_t v7 = @"YES";
    }
    id v14 = v5;
    __int16 v15 = 2112;
    __int16 v16 = v7;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Calling out to client completion for cancel { success: %@, error: %@, hasCompletion: %@ }", (uint8_t *)&v11, 0x20u);
  }

  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t, id))(v10 + 16))(v10, a2, v5);
  }
}

void IDSRegistrationControlDisableRegistrationType(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A2DACC();
  }
  uint64_t v6 = sub_191946C40(v8, v5);
  if (v6)
  {
    sub_191946D2C();
    uint64_t v7 = +[IDSDaemonController sharedInstance];
    [v7 registrationControlSetRegistrationStateForRegistrationType:a1 toState:1 requestID:v6];
  }
}

id sub_191946C40(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A2DAF8();
  }
  id v5 = (void *)MEMORY[0x192FE03B0](v3);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_19194728C;
  v9[3] = &unk_1E5728FD8;
  id v10 = v3;
  id v6 = v3;
  uint64_t v7 = sub_191947320(v5, v4, v9, 0);

  return v7;
}

void sub_191946D2C()
{
  if (_IDSRunningInDaemon()) {
    sub_191A2DB24();
  }
  if (qword_1E92DE290 != -1)
  {
    dispatch_once(&qword_1E92DE290, &unk_1EE246A08);
  }
}

void IDSRegistrationControlEnableRegistrationType(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A2DB50();
  }
  id v6 = sub_191946C40(v8, v5);
  if (v6)
  {
    sub_191946D2C();
    uint64_t v7 = +[IDSDaemonController sharedInstance];
    [v7 registrationControlSetRegistrationStateForRegistrationType:a1 toState:2 requestID:v6];
  }
}

void IDSRegistrationControlGetStateForRegistrationType(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A2DB7C();
  }
  id v7 = v5;
  id v8 = v6;
  if (_IDSRunningInDaemon()) {
    sub_191A2DBA8();
  }
  id v9 = (void *)MEMORY[0x192FE03B0](v7);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_191947524;
  v16[3] = &unk_1E5728FD8;
  id v17 = v7;
  id v10 = v7;
  int v11 = sub_191947320(v9, v8, v16, 0);

  if (v11)
  {
    sub_191946D2C();
    int v12 = +[IDSDaemonController sharedInstance];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = sub_191946FC8;
    v13[3] = &unk_1E572A100;
    uint64_t v15 = a1;
    id v14 = v11;
    [v12 forwardMethodWithReplyIsSync:0 block:v13];
  }
}

uint64_t sub_191946FC8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_registrationControlGetRegistrationStateForRegistrationType_requestID_);
}

uint64_t IDSRegistrationControlSyncGetStateForRegistrationType(uint64_t a1, void *a2)
{
  if (_IDSRunningInDaemon()) {
    sub_191A2DBD4();
  }
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  uint64_t v16 = 0;
  id v17 = &v16;
  uint64_t v18 = 0x3032000000;
  __int16 v19 = sub_191918690;
  id v20 = sub_191918568;
  id v21 = 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_191947260;
  v15[3] = &unk_1E572A128;
  void v15[4] = &v22;
  v15[5] = &v16;
  id v4 = v15;
  if (_IDSRunningInDaemon()) {
    __assert_rtn("_IDSScheduleSyncTimeoutForRegistrtionControlStateCompletionBlock", "IDSRegistrationControl.m", 85, "!_IDSRunningInDaemon()");
  }
  id v5 = (void *)MEMORY[0x192FE03B0](v4);
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = sub_1919475B8;
  v26[3] = &unk_1E5728FD8;
  id v27 = v4;
  id v6 = v4;
  id v7 = sub_191947320(v5, 0, v26, 1);

  if (v7)
  {
    sub_191946D2C();
    id v8 = +[IDSDaemonController sharedInstance];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_191947280;
    v12[3] = &unk_1E572A100;
    uint64_t v14 = a1;
    id v13 = v7;
    [v8 forwardMethodWithReplyIsSync:1 block:v12];
  }
  if (a2)
  {
    id v9 = (void *)v17[5];
    if (v9) {
      *a2 = v9;
    }
  }
  uint64_t v10 = v23[3];

  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v22, 8);
  return v10;
}

void sub_19194723C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_191947260(uint64_t a1, uint64_t a2, id obj)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
}

uint64_t sub_191947280(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_registrationControlGetRegistrationStateForRegistrationType_requestID_);
}

void sub_19194728C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_alloc(MEMORY[0x1E4F28C58]);
    id v3 = (id)[v2 initWithDomain:*MEMORY[0x1E4F6AF18] code:2 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

id sub_191947320(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A2DC00();
  }
  uint64_t v10 = [[IDSDaemonResponseHandler alloc] initWithBlock:v7 queue:v8 isSync:a4];
  int v11 = sub_1919473EC();
  int v12 = [v11 scheduleTimeoutWithResponseHandler:v10 timeoutInterval:v9 timeoutBlock:120.0];

  return v12;
}

id sub_1919473EC()
{
  if (qword_1E92DE138 != -1) {
    dispatch_once(&qword_1E92DE138, &unk_1EE2463A8);
  }
  uint64_t v0 = (void *)qword_1E92DE160;

  return v0;
}

uint64_t sub_191947440()
{
  qword_1E92DE160 = objc_alloc_init(IDSDaemonRequestTimer);

  return MEMORY[0x1F41817F8]();
}

void sub_19194747C()
{
  uint64_t v0 = [IDSRegistrationControlDaemonResponseListener alloc];
  uint64_t v1 = sub_1919473EC();
  uint64_t v2 = [(IDSRegistrationControlDaemonResponseListener *)v0 initWithRequestTimer:v1];
  id v3 = (void *)qword_1E92DE288;
  qword_1E92DE288 = v2;

  id v5 = +[IDSDaemonController sharedInstance];
  id v4 = [v5 listener];
  [v4 addHandler:qword_1E92DE288];
}

void sub_191947524(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_alloc(MEMORY[0x1E4F28C58]);
    id v3 = (id)[v2 initWithDomain:*MEMORY[0x1E4F6AF18] code:2 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1919475B8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_alloc(MEMORY[0x1E4F28C58]);
    id v3 = (id)[v2 initWithDomain:*MEMORY[0x1E4F6AF18] code:2 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_19194805C(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v2 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 48)];
  id v3 = [*(id *)(a1 + 32) delegateByServiceType];
  id v4 = [v3 objectForKey:v2];
  id v5 = *(void **)(a1 + 40);

  if (v4 != v5)
  {
    id v6 = [*(id *)(a1 + 32) delegateByServiceType];

    if (!v6)
    {
      id v7 = [MEMORY[0x1E4F28E10] strongToWeakObjectsMapTable];
      [*(id *)(a1 + 32) setDelegateByServiceType:v7];

      id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      [*(id *)(a1 + 32) setInitialStateByService:v8];
    }
    id v9 = [*(id *)(a1 + 32) delegateByServiceType];
    [v9 setObject:*(void *)(a1 + 40) forKey:v2];

    uint64_t v10 = [*(id *)(a1 + 32) _statusOfUsersOnService:*(void *)(a1 + 48)];
    int v11 = [*(id *)(a1 + 32) initialStateByService];
    [v11 setObject:v10 forKey:v2];

    int v12 = [MEMORY[0x1E4F6C3B8] signInController];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = @"iMessage";
      if (v13 != 1) {
        uint64_t v14 = 0;
      }
      if (v13) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = @"FaceTime";
      }
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      id v38 = v16;
      __int16 v39 = 2048;
      uint64_t v40 = v17;
      __int16 v41 = 2112;
      uint64_t v42 = v10;
      _os_log_impl(&dword_19190B000, v12, OS_LOG_TYPE_DEFAULT, "Setting delegate {service: %@, delegate: %p, status: %@}", buf, 0x20u);
    }
    uint64_t v31 = (void *)v10;

    uint64_t v18 = *(void **)(a1 + 32);
    __int16 v19 = [v18 _serviceNameForType:*(void *)(a1 + 48)];
    id v20 = [v18 _accountControllerForName:v19];

    id v21 = *(void **)(a1 + 32);
    uint64_t v22 = [v21 signInQueue];
    [v20 addDelegate:v21 queue:v22];

    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v23 = [v20 accounts];
    uint64_t v24 = [v23 countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v26 = *(void *)v33;
      do
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (*(void *)v33 != v26) {
            objc_enumerationMutation(v23);
          }
          id v28 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          uint64_t v29 = *(void **)(a1 + 32);
          uint64_t v30 = [v29 signInQueue];
          [v28 addRegistrationDelegate:v29 queue:v30];
        }
        uint64_t v25 = [v23 countByEnumeratingWithState:&v32 objects:v36 count:16];
      }
      while (v25);
    }
  }
}

void sub_191948408(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v2 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 40)];
  id v3 = [*(id *)(a1 + 32) delegateByServiceType];
  [v3 removeObjectForKey:v2];

  id v4 = [*(id *)(a1 + 32) initialStateByService];
  [v4 removeObjectForKey:v2];

  id v5 = [MEMORY[0x1E4F6C3B8] signInController];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = @"iMessage";
    if (v6 != 1) {
      id v7 = 0;
    }
    if (v6) {
      id v8 = v7;
    }
    else {
      id v8 = @"FaceTime";
    }
    id v9 = v8;
    int v13 = 138412290;
    uint64_t v14 = v9;
    _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "Removing delegate {service: %@}", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v10 = [*(id *)(a1 + 32) delegateByServiceType];
  uint64_t v11 = [v10 count];

  if (!v11)
  {
    [*(id *)(a1 + 32) setDelegateByServiceType:0];
    [*(id *)(a1 + 32) setInitialStateByService:0];
    int v12 = [*(id *)(a1 + 32) accountIDDescriptionMap];

    if (!v12) {
      [*(id *)(a1 + 32) setServiceNameAccountControllerMap:0];
    }
  }
}

void sub_19194875C(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v8 = MEMORY[0x1E4F143A8];
  uint64_t v9 = 3221225472;
  uint64_t v10 = sub_1919488CC;
  uint64_t v11 = &unk_1E572A168;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = v5;
  if (([v4 _actionOnAccountOfType:v2 onService:v3 actionBlock:&v8] & 1) == 0 && *(void *)(a1 + 40))
  {
    uint64_t v6 = objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"IDSSignInControllerErrorDomain", -3000, 0, v8, v9, v10, v11);
    id v7 = [MEMORY[0x1E4F6C3B8] signInController];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = v6;
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "No matching account {error: %@}", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1919488CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 isEnabled])
  {
    id v7 = [MEMORY[0x1E4F6C3B8] signInController];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v18 = 0;
      uint64_t v8 = "Already enabled";
      uint64_t v9 = (uint8_t *)&v18;
LABEL_10:
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  [v6 enableAccount:v5];
  if ([v5 accountType] != 1)
  {
    id v7 = [MEMORY[0x1E4F6C3B8] signInController];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v16 = 0;
      uint64_t v8 = "Enabling phone number - completed";
      uint64_t v9 = (uint8_t *)&v16;
      goto LABEL_10;
    }
LABEL_11:

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
    goto LABEL_12;
  }
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = [v10 signInQueue];
  [v5 addRegistrationDelegate:v10 queue:v11];

  [v5 registerAccount];
  uint64_t v12 = [v5 uniqueID];
  id v13 = [MEMORY[0x1E4F6C3B8] signInController];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19190B000, v13, OS_LOG_TYPE_DEFAULT, "Enabling apple id - starting machine", buf, 2u);
  }

  uint64_t v14 = *(void **)(a1 + 32);
  uint64_t v15 = [v6 serviceName];
  [v14 _initializeStateMachineForAccountID:v12 service:v15 state:1 completion:*(void *)(a1 + 40)];

LABEL_12:
}

void sub_191948C68(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v12 = MEMORY[0x1E4F143A8];
  uint64_t v13 = 3221225472;
  uint64_t v14 = sub_191948DE4;
  uint64_t v15 = &unk_1E572A168;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 32);
  id v17 = v5;
  if (([v4 _actionOnAccountOfType:v2 onService:v3 actionBlock:&v12] & 1) == 0)
  {
    id v6 = objc_msgSend(MEMORY[0x1E4F6C3B8], "signInController", v12, v13, v14, v15);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 56);
      uint64_t v9 = @"iMessage";
      if (v7 != 1) {
        uint64_t v9 = 0;
      }
      if (v7) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = @"FaceTime";
      }
      uint64_t v11 = v10;
      *(_DWORD *)buf = 134218242;
      uint64_t v19 = v8;
      __int16 v20 = 2112;
      id v21 = v11;
      _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "No account found -- completing {userType: %llu, service: %@}", buf, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_191948DE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 isEnabled])
  {
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = [v7 signInQueue];
    [v6 addDelegate:v7 queue:v8];

    [v6 disableAccount:v5];
    uint64_t v9 = [v5 uniqueID];
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = [v6 serviceName];
    [v10 _initializeStateMachineForAccountID:v9 service:v11 state:3 completion:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v12 = [MEMORY[0x1E4F6C3B8] signInController];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_19190B000, v12, OS_LOG_TYPE_DEFAULT, "Already disabled", v13, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

IDSSignInServiceUserInfo *sub_191949070(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 accountType] == 1 || !objc_msgSend(v3, "accountType")) {
    id v4 = -[IDSSignInServiceUserInfo initWithUserType:status:]([IDSSignInServiceUserInfo alloc], "initWithUserType:status:", (int)[v3 accountType], objc_msgSend(*(id *)(a1 + 32), "_statusOfAccount:", v3));
  }
  else {
    id v4 = 0;
  }

  return v4;
}

void sub_1919492C4(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) _statusOfUsersOnService:*(void *)(a1 + 48)];
  id v3 = [MEMORY[0x1E4F6C3B8] signInController];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = @"iMessage";
    if (v4 != 1) {
      id v5 = 0;
    }
    if (v4) {
      id v6 = v5;
    }
    else {
      id v6 = @"FaceTime";
    }
    uint64_t v7 = v6;
    int v8 = 138412546;
    uint64_t v9 = v2;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "Finished checking user statuses {status: %@, service: %@}", (uint8_t *)&v8, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_19194969C(uint64_t a1, void *a2, void *a3, char a4)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  if (a4)
  {
    uint64_t v9 = 0;
  }
  else
  {
    __int16 v10 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IDSSignInControllerInternalErrorDomain" code:-404 userInfo:0];
    uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v18 = *MEMORY[0x1E4F28A50];
    v19[0] = v10;
    uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
    uint64_t v9 = [v11 errorWithDomain:@"IDSSignInControllerErrorDomain" code:-1000 userInfo:v12];
  }
  uint64_t v13 = [MEMORY[0x1E4F6C3B8] signInController];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412546;
    id v15 = v7;
    __int16 v16 = 2112;
    id v17 = v9;
    _os_log_impl(&dword_19190B000, v13, OS_LOG_TYPE_DEFAULT, "Set for account password {username: %@, error: %@}", (uint8_t *)&v14, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191949A2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    if (v2 != 1)
    {
LABEL_9:
      __int16 v10 = 0;
      goto LABEL_10;
    }
    id v3 = IDSServiceNameiMessage;
  }
  else
  {
    id v3 = IDSServiceNameFaceTime;
  }
  uint64_t v4 = *v3;
  if (!v4) {
    goto LABEL_9;
  }
  __int16 v10 = v4;
  if (*(void *)(a1 + 32))
  {
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    [v5 setObject:&unk_1EE28B298 forKeyedSubscript:*MEMORY[0x1E4F6B700]];
    [v5 setObject:v10 forKeyedSubscript:*MEMORY[0x1E4F6B7E0]];
    [v5 setObject:*(void *)(a1 + 32) forKeyedSubscript:*MEMORY[0x1E4F6C738]];
    id v6 = [NSString stringGUID];
    id v7 = [*(id *)(a1 + 40) _createAccountWithDictionary:v5 accountID:v6 serviceName:v10];
    [v7 addRegistrationDelegate:*(void *)(a1 + 40) queue:*(void *)(*(void *)(a1 + 40) + 40)];
    id v8 = [*(id *)(a1 + 40) _accountControllerForName:v10];
    [v8 addAccount:v7];
    [v8 enableAccount:v7];
    [v8 addDelegate:*(void *)(a1 + 40) queue:*(void *)(*(void *)(a1 + 40) + 40)];
    [v7 authenticateAccount];
    uint64_t v9 = *(void **)(a1 + 40);
    if (*(unsigned char *)(a1 + 64))
    {
      [v9 _initializeStateMachineForAccountID:v6 service:v10 state:0 completion:*(void *)(a1 + 48)];
    }
    else
    {
      [v9 _initializeStateMachineForAccountID:v6 service:v10 state:0 completion:0];
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }

    goto LABEL_13;
  }
LABEL_10:
  id v5 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IDSSignInControllerErrorDomain" code:-4000 userInfo:0];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_13:
}

uint64_t sub_191949E38(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else {
    return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_signInUsername_onService_waitUntilRegistered_withCompletion_);
  }
}

void sub_19194A010(uint64_t a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  uint64_t v2 = *(void **)(a1 + 32);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_19194A13C;
  v5[3] = &unk_1E572A280;
  void v5[4] = v2;
  uint64_t v3 = *(void *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  id v7 = &v8;
  [v2 _actionOnAccountOfType:1 onService:v3 actionBlock:v5];
  if (!*((unsigned char *)v9 + 24))
  {
    uint64_t v4 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IDSSignInControllerErrorDomain" code:-3000 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  _Block_object_dispose(&v8, 8);
}

void sub_19194A120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19194A13C(void *a1, void *a2, void *a3)
{
  id v5 = (void *)a1[4];
  id v6 = a3;
  id v7 = a2;
  uint64_t v8 = [v5 signInQueue];
  [v6 addDelegate:v5 queue:v8];

  [v6 disableAccount:v7];
  [v6 removeAccount:v7];
  id v11 = [v7 uniqueID];

  uint64_t v9 = (void *)a1[4];
  uint64_t v10 = [v6 serviceName];

  [v9 _initializeStateMachineForAccountID:v11 service:v10 state:4 completion:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
}

void sub_19194A47C(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6C3B8] signInController];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)MEMORY[0x192FE03B0](*(void *)(a1 + 40));
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling sign in controller's client completion block {completion: %@, error: %@}", (uint8_t *)&v7, 0x16u);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
  }
}

void sub_19194A790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_19194A7AC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [MEMORY[0x1E4F6C3B8] signInController];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = @"YES";
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v6 = @"YES";
    }
    else {
      uint64_t v6 = @"NO";
    }
    if (!*(unsigned char *)(a1 + 57)) {
      id v5 = @"NO";
    }
    int v8 = 134218498;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    __int16 v12 = 2112;
    uint64_t v13 = v5;
    _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "Periodic validation fired {delay: %f, allowFuzz: %@, signOut: %@}", (uint8_t *)&v8, 0x20u);
  }

  if (*(unsigned char *)(a1 + 57))
  {
    uint64_t v7 = 1;
  }
  else if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v7 = 2;
  }
  else
  {
    uint64_t v7 = 1;
  }
  [WeakRetained _validateStateForAccountID:*(void *)(a1 + 32) timeoutMode:v7];
}

uint64_t sub_19194AA80(uint64_t a1, void *a2)
{
  id v3 = [a2 serviceName];
  uint64_t v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_19194B11C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19194B150(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = [MEMORY[0x1E4F6C3B8] signInController];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 134218242;
    __int16 v16 = a2;
    __int16 v17 = 2112;
    uint64_t v18 = v7;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Completed {errorCode: %llu, account: %@}", buf, 0x16u);
  }

  if (*(void *)(a1 + 56))
  {
    if (*(void *)(a1 + 72))
    {
      a2 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IDSSignInControllerErrorDomain" code:-5000 userInfo:0];
LABEL_11:
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();

      goto LABEL_12;
    }
    if (!a2) {
      goto LABEL_11;
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      uint64_t v13 = @"IDSSignInControllerErrorAccountKey";
      uint64_t v14 = v8;
      uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v14 forKeys:&v13 count:1];
      if (!a3)
      {
LABEL_10:
        a2 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IDSSignInControllerErrorDomain" code:a2 userInfo:v9];

        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v9 = 0;
      if (!a3) {
        goto LABEL_10;
      }
    }
    __int16 v10 = (void *)[v9 mutableCopy];
    uint64_t v11 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IDSSignInControllerInternalErrorDomain" code:a3 userInfo:0];
    [v10 setObject:v11 forKeyedSubscript:*MEMORY[0x1E4F28A50]];

    uint64_t v9 = v10;
    goto LABEL_10;
  }
LABEL_12:
  uint64_t result = [*(id *)(a1 + 40) _cleanupStateForAccountID:*(void *)(a1 + 48)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  return result;
}

id sub_19194BA68(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = objc_alloc_init(MEMORY[0x1E4F28BD0]);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = v2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        __int16 v10 = NSString;
        uint64_t v11 = [v9 type];
        uint64_t v12 = [v9 status];
        uint64_t v13 = objc_msgSend(v10, "stringWithFormat:", @"%llu,%llu", v11, v12, (void)v15);
        [v3 addObject:v13];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  return v3;
}

uint64_t sub_19194C888(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_reportClientEvent_withCompletion_);
}

void sub_19194C91C(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_19194C9CC;
  v5[3] = &unk_1E572A370;
  id v6 = *(id *)(a1 + 32);
  id v4 = [a2 eventReportingCollaboratorWithErrorHandler:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_19194C9CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2DDA4((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19194CC18(void *a1)
{
  id v2 = [[_IDSSession alloc] initWithAccount:a1[5] destinations:a1[6] transportType:a1[7] delegateContext:a1[4]];
  uint64_t v3 = a1[4];
  id v4 = *(void **)(v3 + 8);
  *(void *)(v3 + 8) = v2;

  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 24));
  uint64_t v5 = [*(id *)(a1[4] + 8) uniqueID];
  uint64_t v6 = [v5 copy];
  uint64_t v7 = a1[4];
  uint64_t v8 = *(void **)(v7 + 16);
  *(void *)(v7 + 16) = v6;

  uint64_t v9 = (os_unfair_lock_s *)(a1[4] + 24);

  os_unfair_lock_unlock(v9);
}

void sub_19194CE98(void *a1)
{
  id v2 = [[_IDSSession alloc] initWithAccount:a1[5] destinations:a1[6] options:a1[7] delegateContext:a1[4]];
  uint64_t v3 = a1[4];
  id v4 = *(void **)(v3 + 8);
  *(void *)(v3 + 8) = v2;

  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 24));
  uint64_t v5 = [*(id *)(a1[4] + 8) uniqueID];
  uint64_t v6 = [v5 copy];
  uint64_t v7 = a1[4];
  uint64_t v8 = *(void **)(v7 + 16);
  *(void *)(v7 + 16) = v6;

  uint64_t v9 = (os_unfair_lock_s *)(a1[4] + 24);

  os_unfair_lock_unlock(v9);
}

void sub_19194D240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_19194D25C()
{
  return self;
}

void sub_19194D358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19194D370(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) socket];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_19194D59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19194D5B4(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) state];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_19194D6C8(void *a1)
{
  return [*(id *)(a1[4] + 8) setDelegate:a1[5] queue:a1[6]];
}

void sub_19194D83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19194D854(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) initialLinkType];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_19194DA5C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_sendInvitationWithOptions_);
}

uint64_t sub_19194DB30(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_sendInvitationWithData_declineOnError_);
}

uint64_t sub_19194DBFC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) setPreferences:*(void *)(a1 + 40)];
}

void sub_19194DD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19194DD30(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) getPreferences];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_19194DE20(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_cancelInvitationWithRemoteEndedReasonOverride_);
}

uint64_t sub_19194DEEC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_cancelInvitationWithData_);
}

uint64_t sub_19194DFB0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_acceptInvitationWithData_);
}

uint64_t sub_19194E074(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_declineInvitationWithData_);
}

uint64_t sub_19194E110(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_cancelInvitation);
}

uint64_t sub_19194E1AC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_acceptInvitation);
}

uint64_t sub_19194E248(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_declineInvitation);
}

uint64_t sub_19194E2E4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) endSession];
}

uint64_t sub_19194E3A8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_endSessionWithData_);
}

uint64_t sub_19194E46C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_sendSessionMessage_);
}

uint64_t sub_19194E554(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_sendSessionMessage_toDestinations_);
}

uint64_t sub_19194E620(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_sendAllocationRequest_);
}

uint64_t sub_19194E6CC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_setAudioEnabled_);
}

void sub_19194E7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19194E7C8(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) getAudioEnabled];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_19194E8A0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_setMuted_);
}

void sub_19194E984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19194E99C(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) getMuted];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_19194EADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19194EAF4(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendData:a1[5] error:a1[7]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

uint64_t sub_19194EBCC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_setInviteTimeout_);
}

void sub_19194ECA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19194ECC0(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) inviteTimeout];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_19194ED88(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_reconnectSession);
}

void sub_19194EE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19194EE7C(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) sessionEndedReason];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_19194EF70(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) setPreferences:*(void *)(a1 + 40)];
}

void sub_19194F04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19194F064(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) shouldUseSocketForTransport];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_19194F174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19194F18C(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) MTUForAddressFamily:a1[6]];
  *(void *)(*(void *)(a1[5] + 8) + 24) = result;
  return result;
}

uint64_t IDSCTSIMSlotFromSubscriptionSlot(uint64_t a1)
{
  if (a1) {
    return a1 == 2;
  }
  else {
    return 2;
  }
}

uint64_t IDSSubscriptionSlotFromCTSIMSlot(uint64_t a1)
{
  uint64_t v1 = 1;
  if (a1 == 1) {
    uint64_t v1 = 2;
  }
  if (a1 == 2) {
    return 0;
  }
  else {
    return v1;
  }
}

id sub_19194F5F8(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = objc_msgSend(MEMORY[0x1E4F6B3E8], "sharedInstance", 0);
  uint64_t v3 = [v2 currentSIMsWithError:0];

  id v4 = (id)[v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        uint64_t v8 = [v1 subscriptionSlot];
        if (v8) {
          uint64_t v9 = v8 == 2;
        }
        else {
          uint64_t v9 = 2;
        }
        if (v9 == [v7 slot])
        {
          id v4 = v7;
          goto LABEL_14;
        }
      }
      id v4 = (id)[v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v4;
}

uint64_t sub_19194FD28(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191950038(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  if (v2[3])
  {
    uint64_t v3 = *(void **)(a1 + 40);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = sub_1919501C4;
    v8[3] = &unk_1E572A440;
    void v8[4] = v2;
    [v3 enumerateKeysAndObjectsUsingBlock:v8];
    id v4 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24);
      *(_DWORD *)buf = 138412290;
      uint64_t v10 = v5;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Updated local cache to %@", buf, 0xCu);
    }

    id v2 = *(void **)(a1 + 32);
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_19195028C;
  v6[3] = &unk_1E572A468;
  id v7 = *(id *)(a1 + 40);
  [v2 _callDelegatesWithBlock:v6];
}

void sub_1919501C4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  uint64_t v8 = [v5 _cacheForService:v7];
  id v9 = (id)[v8 mutableCopy];

  if (v9) {
    [v9 addEntriesFromDictionary:v6];
  }
  else {
    id v9 = (id)[v6 mutableCopy];
  }

  [*(id *)(*(void *)(a1 + 32) + 24) setObject:v9 forKey:v7];
}

void sub_19195028C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v4 = *(void **)(a1 + 32);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = sub_191950334;
    v5[3] = &unk_1E572A440;
    id v6 = v3;
    [v4 enumerateKeysAndObjectsUsingBlock:v5];
  }
}

void sub_191950334(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = _IDSServiceFromRegistrationServiceType();
  id v6 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v25 = v7;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Notifying delegate %@ about ID status update", buf, 0xCu);
  }

  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v9 = v4;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(v9);
        }
        long long v14 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        long long v15 = objc_msgSend(v9, "objectForKeyedSubscript:", v14, (void)v19);
        uint64_t v16 = [v14 prefixedURI];
        [v8 setObject:v15 forKeyedSubscript:v16];
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v11);
  }

  long long v17 = *(void **)(a1 + 32);
  long long v18 = (void *)[v8 copy];
  [v17 idStatusUpdatedForDestinations:v18 service:v5];
}

uint64_t sub_191950C68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_191950DF4(uint64_t a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), *(id *)(a1 + 40));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), *(id *)(a1 + 48));
  id v2 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  v7[0] = *(void *)(a1 + 40);
  id v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];
  uint64_t v4 = [v2 initWithArray:v3];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 8);
  *(void *)(v5 + 8) = v4;
}

void sub_191950F7C(uint64_t a1)
{
}

void sub_1919511BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1919512A0;
  v11[3] = &unk_1E572A490;
  id v12 = v6;
  id v8 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v8;
  uint64_t v13 = *(void *)(a1 + 32);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, v11);
}

uint64_t sub_1919512A0(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 8), *(id *)(a1 + 48));
  }
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);

  return v2();
}

void sub_191951308(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 16);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1919513C4;
  v6[3] = &unk_1E572A370;
  id v7 = *(id *)(a1 + 40);
  id v5 = [a2 firewallCollaboratorForService:v4 withErrorHandler:v6];
  [v5 impactedServicesForService:*(void *)(*(void *)(a1 + 32) + 16) withCompletion:*(void *)(a1 + 40)];
}

void sub_1919513C4(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = +[IDSLogging IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Error fetching firewall collaborator {error: %@}", (uint8_t *)&v5, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19195173C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191951750(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_191954568;
  v11[3] = &unk_1E572A530;
  id v12 = v5;
  id v13 = v7;
  id v14 = v6;
  id v8 = v6;
  id v9 = v7;
  id v10 = v5;
  +[IDSXPCDaemonController performDaemonControllerTask:v11];
}

void sub_191951838(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1919518DC;
  v6[3] = &unk_1E57298A8;
  id v5 = *(id *)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  [a2 addEntries:v4 withCompletion:v6];
}

void sub_1919518DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191951990;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191951990(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1919519A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191951A58;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191951A58(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_191951D08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191951D1C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_191951DC0;
  v6[3] = &unk_1E57298A8;
  id v5 = *(id *)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  [a2 removeDonatedEntries:v4 withCompletion:v6];
}

void sub_191951DC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191951E74;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191951E74(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191951E88(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191951F3C;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191951F3C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1919521EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191952200(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1919522A4;
  v6[3] = &unk_1E57298A8;
  id v5 = *(id *)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  [a2 removeEntries:v4 withCompletion:v6];
}

void sub_1919522A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191952358;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191952358(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19195236C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191952420;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191952420(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191952678(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_191952720;
  v6[3] = &unk_1E57298A8;
  id v5 = *(id *)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  [a2 replaceEntries:v4 replaceAll:0 withCompletion:v6];
}

void sub_191952720(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_1919527D4;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_1919527D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1919527E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_19195289C;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_19195289C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191952AF0(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_191952B98;
  v6[3] = &unk_1E57298A8;
  id v5 = *(id *)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  [a2 replaceEntries:v4 replaceAll:1 withCompletion:v6];
}

void sub_191952B98(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191952C4C;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191952C4C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191952C60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191952D14;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191952D14(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191952EF4(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1919546F8;
  v11[3] = &unk_1E572A530;
  id v12 = v5;
  id v13 = v7;
  id v14 = v6;
  id v8 = v6;
  id v9 = v7;
  id v10 = v5;
  +[IDSXPCDaemonController performDaemonControllerTask:v11];
}

void sub_191952FDC(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_191953070;
  v5[3] = &unk_1E572A4E0;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [a2 currentDonatedEntries:v5];
}

void sub_191953070(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19195314C;
    block[3] = &unk_1E5729948;
    id v12 = v7;
    id v10 = v5;
    id v11 = v6;
    dispatch_async(v8, block);
  }
}

uint64_t sub_19195314C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_191953164(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_191953240;
    block[3] = &unk_1E5729948;
    id v12 = v7;
    id v10 = v5;
    id v11 = v6;
    dispatch_async(v8, block);
  }
}

uint64_t sub_191953240(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_191953424(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1919534B8;
  v5[3] = &unk_1E572A4E0;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [a2 currentEntries:v5];
}

void sub_1919534B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_191953594;
    block[3] = &unk_1E5729948;
    id v12 = v7;
    id v10 = v5;
    id v11 = v6;
    dispatch_async(v8, block);
  }
}

uint64_t sub_191953594(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1919535AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_191953688;
    block[3] = &unk_1E5729948;
    id v12 = v7;
    id v10 = v5;
    id v11 = v6;
    dispatch_async(v8, block);
  }
}

uint64_t sub_191953688(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_19195386C(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_191953900;
  v5[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [a2 removeAllDonatedEntries:v5];
}

void sub_191953900(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_1919539B4;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_1919539B4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1919539C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191953A7C;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191953A7C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191953C5C(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_191953CF0;
  v5[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [a2 removeAllEntries:v5];
}

void sub_191953CF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191953DA4;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191953DA4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191953DB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191953E6C;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191953E6C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19195404C(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1919540E0;
  v5[3] = &unk_1E572A4E0;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [a2 recentlyBlockedEntries:v5];
}

void sub_1919540E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1919541BC;
    block[3] = &unk_1E5729948;
    id v12 = v7;
    id v10 = v5;
    id v11 = v6;
    dispatch_async(v8, block);
  }
}

uint64_t sub_1919541BC(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1919541D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1919542B0;
    block[3] = &unk_1E5729948;
    id v12 = v7;
    id v10 = v5;
    id v11 = v6;
    dispatch_async(v8, block);
  }
}

uint64_t sub_1919542B0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_191954568(uint64_t a1, void *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_191954624;
  v6[3] = &unk_1E572A370;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v5 = [a2 firewallCollaboratorForService:v4 withErrorHandler:v6];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_191954624(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = +[IDSLogging IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Error fetching firewall collaborator {error: %@}", (uint8_t *)&v5, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1919546F8(uint64_t a1, void *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1919547B4;
  v6[3] = &unk_1E572A370;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  int v5 = [a2 firewallCollaboratorForService:v4 withErrorHandler:v6];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1919547B4(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = +[IDSLogging IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Error fetching firewall collaborator {error: %@}", (uint8_t *)&v5, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191954A2C()
{
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("IDSBatchIDQueryControllerQueue", v2);
  id v1 = (void *)qword_1E92DE248;
  qword_1E92DE248 = (uint64_t)v0;
}

uint64_t sub_191954A90(void *a1)
{
  *(void *)(a1[4] + 8) = [[_IDSBatchIDQueryController alloc] initWithService:a1[5] delegate:a1[6] queue:a1[7] parent:a1[4]];

  return MEMORY[0x1F41817F8]();
}

void sub_191954B80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
}

uint64_t sub_191954C2C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) setDestinations:*(void *)(a1 + 40)];
}

uint64_t sub_191954CB0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) invalidate];
}

void sub_19195546C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_191955700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
}

void sub_19195586C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id IDSProcessVMRequest(void *a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (_IDSRunningInDaemon()) {
    sub_191A2E0FC();
  }
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x3032000000;
  uint64_t v26 = sub_1919186B0;
  id v27 = sub_191918578;
  id v28 = 0;
  uint64_t v20 = 0;
  v21[0] = &v20;
  v21[1] = 0x3032000000;
  v21[2] = sub_1919186B0;
  v21[3] = sub_191918578;
  id v22 = 0;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = sub_191955CB8;
  v19[3] = &unk_1E572A568;
  void v19[4] = &v23;
  void v19[5] = &v20;
  id v2 = v19;
  if (_IDSRunningInDaemon())
  {
    int v14 = 41;
    id v15 = "_IDSScheduleSyncTimeoutForVMCompletionBlock";
    goto LABEL_20;
  }
  id v3 = [IDSDaemonResponseHandler alloc];
  uint64_t v4 = (void *)MEMORY[0x192FE03B0](v2);
  int v5 = [(IDSDaemonResponseHandler *)v3 initWithBlock:v4 queue:0 isSync:1];

  id v6 = sub_191955D4C();
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 3221225472;
  uint64_t v30 = sub_191955DA0;
  uint64_t v31 = &unk_1E5728FD8;
  id v32 = v2;
  uint64_t v7 = v2;
  id v8 = [v6 scheduleTimeoutWithResponseHandler:v5 timeoutInterval:&buf timeoutBlock:120.0];

  if (!v8) {
    goto LABEL_10;
  }
  id v9 = [MEMORY[0x1E4F6C3B8] vm];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v8;
    _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "Sending VM data request ID %@ to daemon", (uint8_t *)&buf, 0xCu);
  }

  if (_IDSRunningInDaemon())
  {
    int v14 = 30;
    id v15 = "_IDSListenForVMResponses";
LABEL_20:
    __assert_rtn(v15, "IDSVM.m", v14, "!_IDSRunningInDaemon()");
  }
  if (qword_1E92DE2A0 != -1) {
    dispatch_once(&qword_1E92DE2A0, &unk_1EE246AA8);
  }
  id v10 = +[IDSDaemonController sharedInstance];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_191955D40;
  v16[3] = &unk_1E572A590;
  id v17 = v1;
  id v18 = v8;
  [v10 forwardMethodWithReplyIsSync:1 block:v16];

LABEL_10:
  if (*(void *)(v21[0] + 40))
  {
    id v11 = [MEMORY[0x1E4F6C3B8] vm];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_191A2E128((uint64_t)v8, (uint64_t)v21, v11);
    }
  }
  id v12 = (id)v24[5];

  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v23, 8);

  return v12;
}

void sub_191955C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_191955CB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v11 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
}

uint64_t sub_191955D40(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_requestVMData_requestID_);
}

id sub_191955D4C()
{
  if (qword_1E92DE140 != -1) {
    dispatch_once(&qword_1E92DE140, &unk_1EE2463E8);
  }
  dispatch_queue_t v0 = (void *)qword_1E92DE168;

  return v0;
}

void sub_191955DA0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_alloc(MEMORY[0x1E4F28C58]);
    id v3 = (id)[v2 initWithDomain:*MEMORY[0x1E4F6B3B8] code:3 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

uint64_t sub_191955E34()
{
  qword_1E92DE168 = objc_alloc_init(IDSDaemonRequestTimer);

  return MEMORY[0x1F41817F8]();
}

void sub_191955E70()
{
  dispatch_queue_t v0 = [IDSVMDaemonResponseListener alloc];
  id v1 = sub_191955D4C();
  uint64_t v2 = [(IDSVMDaemonResponseListener *)v0 initWithRequestTimer:v1];
  id v3 = (void *)qword_1E92DE298;
  qword_1E92DE298 = v2;

  id v5 = +[IDSDaemonController sharedInstance];
  uint64_t v4 = [v5 listener];
  [v4 addHandler:qword_1E92DE298];
}

uint64_t sub_191955F18(uint64_t a1)
{
  return MEMORY[0x1F4123C28](*(void *)(a1 + 32));
}

uint64_t sub_191955F20(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_191955FD0()
{
  v23[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2BE0];
  id v1 = (void *)qword_1EB2BD5F0;
  qword_1EB2BD5F0 = v0;

  uint64_t v2 = (void *)qword_1EB2BD5F0;
  id v3 = (void *)MEMORY[0x1E4F1CAD0];
  v23[0] = objc_opt_class();
  v23[1] = objc_opt_class();
  uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v23 count:2];
  id v5 = [v3 setWithArray:v4];
  [v2 setClasses:v5 forSelector:sel_fetchIdentityForPinningWithCompletion_ argumentIndex:0 ofReply:1];

  id v6 = (void *)qword_1EB2BD5F0;
  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v22 = objc_opt_class();
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v22 count:1];
  uint64_t v9 = [v7 setWithArray:v8];
  [v6 setClasses:v9 forSelector:sel_pinIdentityBlob_withCompletion_ argumentIndex:0 ofReply:0];

  id v10 = (void *)qword_1EB2BD5F0;
  id v11 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v21 = objc_opt_class();
  id v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v21 count:1];
  id v13 = [v11 setWithArray:v12];
  [v10 setClasses:v13 forSelector:sel_pinIdentityBlob_withCompletion_ argumentIndex:0 ofReply:1];

  int v14 = (void *)qword_1EB2BD5F0;
  id v15 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v18 = objc_opt_class();
  uint64_t v19 = objc_opt_class();
  uint64_t v20 = objc_opt_class();
  uint64_t v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v18 count:3];
  id v17 = objc_msgSend(v15, "setWithArray:", v16, v18, v19);
  [v14 setClasses:v17 forSelector:sel_fetchAllPinnedIdentitiesWithCompletion_ argumentIndex:0 ofReply:1];
}

void sub_191956BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_191956C0C()
{
  return self;
}

void sub_191956DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191956DF0(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) account];

  return MEMORY[0x1F41817F8]();
}

void sub_191956F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191956F28(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) isActive];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_191957040(void *a1)
{
  return [*(id *)(a1[4] + 8) addDelegate:a1[5] queue:a1[6]];
}

uint64_t sub_191957100(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeDelegate:*(void *)(a1 + 40)];
}

void sub_191957278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191957290(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendProtobuf:a1[5] toDestinations:a1[6] priority:a1[9] options:a1[7] identifier:a1[10] error:a1[11]];
  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_191957440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191957458(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendMessage:a1[5] toDestinations:a1[6] priority:a1[9] options:a1[7] identifier:a1[10] error:a1[11]];
  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_191957608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191957620(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendData:a1[5] toDestinations:a1[6] priority:a1[9] options:a1[7] identifier:a1[10] error:a1[11]];
  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_191958478()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2C40];
  id v1 = (void *)qword_1EB2BD5F8;
  qword_1EB2BD5F8 = v0;

  id v2 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  id v8 = (id)objc_msgSend(v2, "initWithObjects:", v3, v4, objc_opt_class(), 0);
  [(id)qword_1EB2BD5F8 setClasses:v8 forSelector:sel_getPairingRecordsWithCompletion_ argumentIndex:1 ofReply:1];
  id v5 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_msgSend(v5, "setWithObjects:", v6, objc_opt_class(), 0);
  [(id)qword_1EB2BD5F8 setClasses:v7 forSelector:sel_getPairingDevicesWithCompletion_ argumentIndex:0 ofReply:1];
  [(id)qword_1EB2BD5F8 setClasses:v7 forSelector:sel_getPairedDevicesWithCompletion_ argumentIndex:0 ofReply:1];
}

void sub_19195A670()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2CA0];
  id v1 = (void *)qword_1EB2BD600;
  qword_1EB2BD600 = v0;

  id v2 = (void *)qword_1EB2BD600;
  uint64_t v3 = +[IDSXPCPairingInterface interface];
  [v2 setInterface:v3 forSelector:sel_pairingCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v4 = (void *)qword_1EB2BD600;
  id v5 = +[IDSXPCReunionSyncInterface interface];
  [v4 setInterface:v5 forSelector:sel_reunionSyncCollaboratorForClientProcessName_withCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v6 = (void *)qword_1EB2BD600;
  uint64_t v7 = +[IDSXPCPairedDeviceManagerInterface interface];
  [v6 setInterface:v7 forSelector:sel_pairedDeviceManagerCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];

  id v8 = (void *)qword_1EB2BD600;
  uint64_t v9 = +[IDSXPCOpportunisticInterface interface];
  [v8 setInterface:v9 forSelector:sel_opportunisticCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];

  id v10 = (void *)qword_1EB2BD600;
  id v11 = +[IDSXPCRegistrationInterface interface];
  [v10 setInterface:v11 forSelector:sel_registrationCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];

  id v12 = (void *)qword_1EB2BD600;
  id v13 = +[IDSXPCActivityMonitorInterface interface];
  [v12 setInterface:v13 forSelector:sel_activityMonitorCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];

  int v14 = (void *)qword_1EB2BD600;
  id v15 = +[IDSXPCServerMessagingInterface interface];
  [v14 setInterface:v15 forSelector:sel_serverMessagingCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v16 = (void *)qword_1EB2BD600;
  id v17 = +[IDSXPCOffGridMessengerInterface interface];
  [v16 setInterface:v17 forSelector:sel_offGridMessengerCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v18 = (void *)qword_1EB2BD600;
  uint64_t v19 = +[IDSXPCOffGridStateManagerInterface interface];
  [v18 setInterface:v19 forSelector:sel_offGridStateManagerCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v20 = (void *)qword_1EB2BD600;
  uint64_t v21 = +[IDSXPCKeyTransparencyInterface interface];
  [v20 setInterface:v21 forSelector:sel_keyTransparencyCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v22 = (void *)qword_1EB2BD600;
  uint64_t v23 = +[IDSXPCPinnedIdentityInterface interface];
  [v22 setInterface:v23 forSelector:sel_pinnedIdentityCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v24 = (void *)qword_1EB2BD600;
  uint64_t v25 = +[IDSXPCFirewallInterface interface];
  [v24 setInterface:v25 forSelector:sel_firewallCollaboratorForService_withCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v26 = (void *)qword_1EB2BD600;
  id v27 = +[IDSXPCGroupSessionKeyValueDeliveryProviderInterface interface];
  [v26 setInterface:v27 forSelector:sel_groupSessionKeyValueDeliveryProviderCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];

  id v28 = (void *)qword_1EB2BD600;
  uint64_t v29 = +[IDSXPCFeatureTogglerInterface interface];
  [v28 setInterface:v29 forSelector:sel_featureTogglerForService_withCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v30 = (void *)qword_1EB2BD600;
  uint64_t v31 = +[IDSXPCBAASignerInterface interface];
  [v30 setInterface:v31 forSelector:sel_baaSignerCollaboratorForTopic_withCompletion_ argumentIndex:0 ofReply:1];

  id v32 = (void *)qword_1EB2BD600;
  uint64_t v33 = +[IDSXPCEventReportingInterface interface];
  [v32 setInterface:v33 forSelector:sel_eventReportingCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];

  long long v34 = (void *)qword_1EB2BD600;
  id v35 = +[IDSXPCInternalTestingInterface interface];
  [v34 setInterface:v35 forSelector:sel_interalTestingCollaboratorWithCompletion_ argumentIndex:0 ofReply:1];
}

uint64_t sub_19195AAE0()
{
  qword_1E92DE2A8 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2D00];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_19195AD00()
{
  qword_1EB2BD808 = objc_alloc_init(IDSPairedDeviceManager);

  return MEMORY[0x1F41817F8]();
}

void sub_19195AF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19195AF80(uint64_t a1)
{
}

void sub_19195B070(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[IDSPairedDeviceManager setAllowedTrafficClassifiers:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "%s: received new traffic classifiers %@", (uint8_t *)&v4, 0x16u);
  }

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 48), *(id *)(a1 + 32));
}

void sub_19195B190()
{
  id v0 = +[IDSDaemonController sharedInstance];
  [v0 dropAllMessagesWithoutAnyAllowedClassifier];
}

void sub_19195B2BC(uint64_t a1)
{
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Received paired device info, sending to daemon for saving", v4, 2u);
  }

  uint64_t v3 = +[IDSDaemonController sharedInstance];
  [v3 setPairedDeviceInfo:*(void *)(a1 + 32)];
}

void sub_19195B548(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_19195B5F8;
  v7[3] = &unk_1E5729880;
  int v4 = *(NSObject **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_19195B5F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19195B60C(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1E4F6C3B8];
  id v4 = a2;
  id v5 = [v3 registration];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136315394;
    int v14 = "-[IDSPairedDeviceManager deletePairedDevice:withCompletionBlock:queue:]_block_invoke_4";
    __int16 v15 = 2112;
    uint64_t v16 = v6;
    _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "%s: device CBUUID: %@", buf, 0x16u);
  }

  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_19195B7B8;
  v11[3] = &unk_1E572A370;
  id v12 = *(id *)(a1 + 48);
  uint64_t v7 = [v4 pairingCollaboratorWithErrorHandler:v11];

  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_19195B7CC;
  v9[3] = &unk_1E572A370;
  uint64_t v8 = *(void *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  [v7 deletePairedDeviceWithID:v8 completion:v9];
}

uint64_t sub_19195B7B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19195B7CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19195B9A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_19195BA54;
  v7[3] = &unk_1E5729880;
  id v4 = *(NSObject **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_19195BA54(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19195BA68(uint64_t a1, void *a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_19195BB68;
  v7[3] = &unk_1E572A370;
  id v8 = *(id *)(a1 + 32);
  id v4 = [a2 pairedDeviceManagerCollaboratorWithErrorHandler:v7];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_19195BBE4;
  v5[3] = &unk_1E572A918;
  id v6 = *(id *)(a1 + 32);
  [v4 getLocalDeviceInfoWithCompletion:v5];
}

void sub_19195BB68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2E694();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19195BBE4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v5;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Received local device info from daemon, device: %@", (uint8_t *)&v9, 0xCu);
  }

  if (v6)
  {
    id v8 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_191A2E6FC();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19195BEC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_19195BF78;
  v7[3] = &unk_1E5729880;
  id v4 = *(NSObject **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_19195BF78(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19195BF8C(uint64_t a1, void *a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_19195C08C;
  v7[3] = &unk_1E572A370;
  id v8 = *(id *)(a1 + 32);
  id v4 = [a2 pairedDeviceManagerCollaboratorWithErrorHandler:v7];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_19195C10C;
  v5[3] = &unk_1E572A918;
  id v6 = *(id *)(a1 + 32);
  [v4 getPairedDeviceInfoWithCompletion:v5];
}

void sub_19195C08C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_191A2E7DC();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19195C10C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v5;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Received paired device info from daemon, device: %@", (uint8_t *)&v9, 0xCu);
  }

  if (v6)
  {
    id v8 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_191A2E844();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19195C340(void *a1)
{
  id v2 = [[_IDSCompletionHandler alloc] initWithHandler:a1[6] queue:a1[5]];
  uint64_t v3 = a1[4];
  id v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;

  id v5 = +[IDSDaemonController sharedInstance];
  [v5 getDeliveryStats];
}

void sub_19195C588(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) handler];
  v1[2](v1, 0);
}

void sub_19195C6B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) handler];
  v2[2](v2, *(void *)(a1 + 40));
}

void sub_19195C7E8(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_19195C88C;
  v5[3] = &unk_1E572A370;
  id v6 = *(id *)(a1 + 40);
  id v4 = [a2 registrationCollaboratorWithErrorHandler:v5];
  [v4 constructRAResponseDictionaryForServices:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 40)];
}

void sub_19195C88C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_191A2E930();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19195CB80(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_19195CBA4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = +[IDSXPCDaemonController weakSharedInstance];
  [WeakRetained setDaemonController:v1];

  [WeakRetained _setupInterruptionHandler];
  [WeakRetained _setupXPC];
}

void sub_19195CCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19195CCF4(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [WeakRetained uuid];
    int v4 = 138412290;
    id v5 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "XPC interruption for client %@", (uint8_t *)&v4, 0xCu);
  }
  [WeakRetained _setupXPC];
}

void sub_19195CF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19195CF44(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int v4 = [v6 offGridStateManagerCollaboratorWithErrorHandler:&unk_1EE2464A8];
    id v5 = [WeakRetained uuid];
    [v4 setupOffGridStateManagerClient:WeakRetained withUUID:v5 completion:&unk_1EE246B48];
  }
}

void sub_19195CFEC(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A2E998();
  }
}

void sub_19195D22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19195D250(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2EA00();
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v3;
}

void sub_19195D2C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_191A2EA68();
    }
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  }
}

void sub_19195D518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19195D53C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2EA00();
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v3;
}

void sub_19195D5B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_191A2EAD0();
    }
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  }
}

uint64_t sub_19195D6E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19195D828(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_19195D84C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = [WeakRetained daemonController];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_19195D91C;
  v7[3] = &unk_1E572AAA0;
  id v4 = *(id *)(a1 + 48);
  id v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 64);
  id v9 = v4;
  uint64_t v10 = v6;
  id v8 = v5;
  [v3 performTask:v7];
}

void sub_19195D91C(uint64_t a1, void *a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_19195DA38;
  v11[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 48);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v4;
  id v5 = [a2 offGridStateManagerCollaboratorWithErrorHandler:v11];
  uint64_t v6 = *(void *)(a1 + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_19195DB44;
  v9[3] = &unk_1E572AA78;
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = *(id *)(a1 + 48);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v8;
  [v5 setOffGridMode:v7 options:v6 completion:v9];
}

void sub_19195DA38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2E998();
  }

  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_19195DB28;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_19195DB28(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 2, *(void *)(a1 + 32));
}

void sub_19195DB44(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  id v8 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218498;
    uint64_t v17 = a2;
    __int16 v18 = 2048;
    uint64_t v19 = a3;
    __int16 v20 = 2112;
    id v21 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "Submitted request to set offgrid mode. Current mode: %ld publish: %ld error: %@", buf, 0x20u);
  }

  id v9 = *(void **)(a1 + 40);
  if (v9)
  {
    id v10 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = sub_19195DCB0;
    v11[3] = &unk_1E572AA50;
    id v13 = v9;
    uint64_t v14 = a2;
    uint64_t v15 = a3;
    id v12 = v7;
    dispatch_async(v10, v11);
  }
}

uint64_t sub_19195DCB0(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[5] + 16))(a1[5], a1[6], a1[7], a1[4]);
}

void sub_19195DEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_19195DF08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2EA00();
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v3;
}

void sub_19195DF80(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v3 = [a2 allObjects];
  [v2 addObjectsFromArray:v3];
}

void sub_19195E134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  objc_destroyWeak(v18);
  _Block_object_dispose(&a18, 8);
  objc_destroyWeak((id *)(v19 - 40));
  _Unwind_Resume(a1);
}

void sub_19195E16C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = [WeakRetained daemonController];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_19195E22C;
  v5[3] = &unk_1E572AB90;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 48);
  [v3 performTask:v5];
}

void sub_19195E22C(uint64_t a1, void *a2)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_19195E34C;
  v10[3] = &unk_1E572AB40;
  id v4 = *(id *)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v4;
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v5 = [a2 offGridStateManagerCollaboratorWithErrorHandler:v10];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_19195E460;
  v8[3] = &unk_1E572AB68;
  long long v7 = *(_OWORD *)(a1 + 40);
  id v6 = (id)v7;
  long long v9 = v7;
  void v8[4] = *(void *)(a1 + 32);
  [v5 invitedHandlesWithCompletion:v8];
}

void sub_19195E34C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2E998();
  }

  uint64_t v5 = (void *)a1[5];
  if (v5)
  {
    id v6 = *(NSObject **)(a1[4] + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19195E440;
    block[3] = &unk_1E572AB18;
    id v7 = v5;
    uint64_t v8 = a1[6];
    id v11 = v7;
    uint64_t v12 = v8;
    id v10 = v3;
    dispatch_async(v6, block);
  }
}

uint64_t sub_19195E440(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], *(void *)(*(void *)(a1[6] + 8) + 40), a1[4]);
}

void sub_19195E460(void *a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v19 = v5;
    __int16 v20 = 2112;
    id v21 = v6;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Fetched invited handles %@ with error %@", buf, 0x16u);
  }

  if (!v6)
  {
    uint64_t v8 = *(void **)(*(void *)(a1[6] + 8) + 40);
    long long v9 = [v5 allObjects];
    [v8 addObjectsFromArray:v9];
  }
  id v10 = (void *)a1[5];
  if (v10)
  {
    id v11 = *(NSObject **)(a1[4] + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19195E5F8;
    block[3] = &unk_1E572AB18;
    id v12 = v10;
    uint64_t v13 = a1[6];
    id v16 = v12;
    uint64_t v17 = v13;
    id v15 = v6;
    dispatch_async(v11, block);
  }
}

uint64_t sub_19195E5F8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], *(void *)(*(void *)(a1[6] + 8) + 40), a1[4]);
}

void sub_19195E784(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_19195E7A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v3 = [WeakRetained daemonController];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_19195E89C;
  v7[3] = &unk_1E5729920;
  id v4 = *(id *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v11 = v4;
  void v7[4] = v5;
  id v8 = v6;
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  [v3 performTask:v7];
}

void sub_19195E89C(uint64_t a1, void *a2)
{
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_19195E9F0;
  v13[3] = &unk_1E572ABE0;
  id v4 = *(id *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v16 = v4;
  void v13[4] = v5;
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v7 = [a2 offGridStateManagerCollaboratorWithErrorHandler:v13];
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_19195EB78;
  v11[3] = &unk_1E572AC30;
  uint64_t v10 = *(void *)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = *(id *)(a1 + 64);
  [v7 inviteHandles:v8 fromSenderHandle:v10 withDictionaryPayload:v9 completion:v11];
}

void sub_19195E9F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2E998();
  }

  uint64_t v5 = *(void **)(a1 + 56);
  if (v5)
  {
    id v6 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_19195EB08;
    v7[3] = &unk_1E5729998;
    id v11 = v5;
    id v8 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    id v10 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_19195EB08(void *a1)
{
  uint64_t v2 = a1[7];
  id v3 = [MEMORY[0x1E4F1CAD0] set];
  (*(void (**)(uint64_t, id, void, void, void))(v2 + 16))(v2, v3, a1[4], a1[5], a1[6]);
}

void sub_19195EB78(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v25 = v9;
    __int16 v26 = 2112;
    id v27 = v12;
    _os_log_impl(&dword_19190B000, v13, OS_LOG_TYPE_DEFAULT, "Invited handles %@ with error %@", buf, 0x16u);
  }

  if (!v12)
  {
    id v14 = *(void **)(*(void *)(a1 + 32) + 8);
    id v15 = [v9 allObjects];
    [v14 addObjectsFromArray:v15];
  }
  id v16 = *(void **)(a1 + 40);
  if (v16)
  {
    uint64_t v17 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19195ED60;
    block[3] = &unk_1E572AC08;
    id v23 = v16;
    id v19 = v9;
    id v20 = v10;
    id v21 = v11;
    id v22 = v12;
    dispatch_async(v17, block);
  }
}

uint64_t sub_19195ED60(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(a1[8] + 16))(a1[8], a1[4], a1[5], a1[6], a1[7]);
}

void sub_19195EE98(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_19195EEBC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = [WeakRetained daemonController];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_19195EF88;
  v7[3] = &unk_1E57299E8;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v9 = v4;
  void v7[4] = v5;
  id v8 = v6;
  [v3 performTask:v7];
}

void sub_19195EF88(uint64_t a1, void *a2)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_19195F0A0;
  v9[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 48);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v4;
  uint64_t v5 = [a2 offGridStateManagerCollaboratorWithErrorHandler:v9];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_19195F1FC;
  v7[3] = &unk_1E5729AD8;
  uint64_t v6 = *(void *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = *(id *)(a1 + 48);
  [v5 removeInvitedHandles:v6 completion:v7];
}

void sub_19195F0A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2E998();
  }

  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_19195F190;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_19195F190(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [MEMORY[0x1E4F1CAD0] set];
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, *(void *)(a1 + 32));
}

void sub_19195F1FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v15 = v5;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Removed invited handles %@ with error %@", buf, 0x16u);
  }

  if (v5 && !v6) {
    [*(id *)(*(void *)(a1 + 32) + 8) minusSet:v5];
  }
  id v8 = *(void **)(a1 + 40);
  if (v8)
  {
    id v9 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19195F380;
    block[3] = &unk_1E5729948;
    id v13 = v8;
    id v11 = v5;
    id v12 = v6;
    dispatch_async(v9, block);
  }
}

uint64_t sub_19195F380(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_19195F484(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_19195F4A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained daemonController];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_19195F560;
  v5[3] = &unk_1E572A990;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v3 performTask:v5];
}

void sub_19195F560(uint64_t a1, void *a2)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_19195F668;
  v9[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v4;
  id v5 = [a2 offGridStateManagerCollaboratorWithErrorHandler:v9];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_19195F7C4;
  v7[3] = &unk_1E5729AD8;
  id v6 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v5 removeAllInvitedHandlesWithCompletion:v7];
}

void sub_19195F668(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2E998();
  }

  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    id v6 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_19195F758;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_19195F758(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [MEMORY[0x1E4F1CAD0] set];
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, *(void *)(a1 + 32));
}

void sub_19195F7C4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v15 = v5;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Removed all invited handles %@ with error %@", buf, 0x16u);
  }

  if (!v6) {
    [*(id *)(*(void *)(a1 + 32) + 8) removeAllObjects];
  }
  id v8 = *(void **)(a1 + 40);
  if (v8)
  {
    id v9 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19195F940;
    block[3] = &unk_1E5729948;
    id v13 = v8;
    id v11 = v5;
    id v12 = v6;
    dispatch_async(v9, block);
  }
}

uint64_t sub_19195F940(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_19195FA54(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_19195FA78(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained daemonController];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_19195FB38;
  v5[3] = &unk_1E572ACD0;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 56);
  [v3 performTask:v5];
}

void sub_19195FB38(uint64_t a1, void *a2)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_19195FC4C;
  v10[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v4;
  id v5 = [a2 offGridStateManagerCollaboratorWithErrorHandler:v10];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_19195FDA8;
  v8[3] = &unk_1E572A4E0;
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v7;
  [v5 fetchContactsOfType:v6 completion:v8];
}

void sub_19195FC4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2E998();
  }

  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_19195FD3C;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_19195FD3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [MEMORY[0x1E4F1C978] array];
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, *(void *)(a1 + 32));
}

void sub_19195FDA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Calling out to client completion in fetchContactsOfType", buf, 2u);
  }

  id v8 = *(void **)(a1 + 40);
  if (v8)
  {
    id v9 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19195FED0;
    block[3] = &unk_1E5729948;
    id v13 = v8;
    id v11 = v5;
    id v12 = v6;
    dispatch_async(v9, block);
  }
}

uint64_t sub_19195FED0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_19195FFD4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_19195FFF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained daemonController];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1919600B0;
  v5[3] = &unk_1E572A990;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v3 performTask:v5];
}

void sub_1919600B0(uint64_t a1, void *a2)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1919601B8;
  v9[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v4;
  id v5 = [a2 offGridStateManagerCollaboratorWithErrorHandler:v9];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1919602C4;
  v7[3] = &unk_1E572AD48;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v5 fetchStewieAvailabilityWithCompletion:v7];
}

void sub_1919601B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2E998();
  }

  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    id v6 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_1919602A8;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_1919602A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(void *)(a1 + 32));
}

void sub_1919602C4(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = *(void **)(a1 + 40);
  if (v8)
  {
    id v9 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_19196038C;
    v10[3] = &unk_1E572AD20;
    char v14 = a2;
    id v12 = v8;
    uint64_t v13 = a3;
    id v11 = v7;
    dispatch_async(v9, v10);
  }
}

uint64_t sub_19196038C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_191960494(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1919604B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained daemonController];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_191960570;
  v5[3] = &unk_1E572A990;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v3 performTask:v5];
}

void sub_191960570(uint64_t a1, void *a2)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_191960678;
  v9[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v4;
  id v5 = [a2 offGridStateManagerCollaboratorWithErrorHandler:v9];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_19196077C;
  v7[3] = &unk_1E57298A8;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v5 connectStewieWithCompletion:v7];
}

void sub_191960678(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2E998();
  }

  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    id v6 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_191960768;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_191960768(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19196077C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191960830;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191960830(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191960930(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_191960954(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained daemonController];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_191960A0C;
  v5[3] = &unk_1E572A990;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v3 performTask:v5];
}

void sub_191960A0C(uint64_t a1, void *a2)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_191960B14;
  v9[3] = &unk_1E57298A8;
  id v4 = *(id *)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v4;
  id v5 = [a2 offGridStateManagerCollaboratorWithErrorHandler:v9];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_191960C18;
  v7[3] = &unk_1E57298A8;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v5 disconnectStewieWithCompletion:v7];
}

void sub_191960B14(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A2E998();
  }

  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    id v6 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_191960C04;
    v7[3] = &unk_1E5729880;
    id v9 = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_191960C04(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191960C18(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_191960CCC;
    v6[3] = &unk_1E5729880;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_191960CCC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191960F48(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 manager:*(void *)(a1 + 32) changedOffGridModeStatus:*(void *)(a1 + 48) currentState:*(void *)(a1 + 56) context:*(void *)(a1 + 40)];
}

void sub_191960FA0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 manager:*(void *)(a1 + 32) offGridModeUpdated:*(void *)(a1 + 48) publishStatus:*(void *)(a1 + 56) context:*(void *)(a1 + 40)];
}

void sub_1919610DC(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6B460] IDSOffGridStateManager];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "contactInfoUpdated called for updated contacts: %@", (uint8_t *)&v5, 0xCu);
  }

  id v4 = [*(id *)(a1 + 40) delegate];
  [v4 manager:*(void *)(a1 + 40) contactInfoUpdated:*(void *)(a1 + 32)];
}

void sub_19196197C(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  char v2 = [*(id *)(a1 + 32) _isPhoneCertificateVendorSupported];
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [v3 _scheduleTimeoutForPhoneAuthenticationCertificateRequestCompletionBlock:*(void *)(a1 + 40)];
    int v5 = [MEMORY[0x1E4F6C3B8] sms];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "Client request to authenticate phone {uuid: %@}", (uint8_t *)&v8, 0xCu);
    }

    if (v4)
    {
      uint64_t v6 = +[IDSDaemonController sharedInstance];
      [v6 authenticatePhoneWithRequestUUID:v4];
    }
  }
  else
  {
    id v4 = [v3 _clientErrorForCode:-4000 underlyingError:0];
    uint64_t v7 = [MEMORY[0x1E4F6C3B8] sms];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Client requested authenticate phone on an unsupported platform -- failing request {clientError: %@}", (uint8_t *)&v8, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_191961BDC(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  char v2 = [*(id *)(a1 + 32) _isPhoneCertificateVendorSupported];
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [v3 _scheduleTimeoutForPhoneAuthenticationSignatureRequestCompletionBlock:*(void *)(a1 + 48)];
    int v5 = [MEMORY[0x1E4F6C3B8] sms];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "Client request to generate phone authentication signature over data {uuid: %@}", (uint8_t *)&v8, 0xCu);
    }

    if (v4)
    {
      uint64_t v6 = +[IDSDaemonController sharedInstance];
      [v6 generatePhoneAuthenticationSignatureOverData:*(void *)(a1 + 40) withRequestUUID:v4];
    }
  }
  else
  {
    id v4 = [v3 _clientErrorForCode:-4000 underlyingError:0];
    uint64_t v7 = [MEMORY[0x1E4F6C3B8] sms];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Client requested phone authentication signature on an unsupported platform -- failing request {clientError: %@}", (uint8_t *)&v8, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_191961E40(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  char v2 = [*(id *)(a1 + 32) _isPhoneCertificateVendorSupported];
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [v3 _scheduleTimeoutForCarrierTokenCompletionBlock:*(void *)(a1 + 48)];
    int v5 = [MEMORY[0x1E4F6C3B8] sms];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v4;
      _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "Client request for carrier token {uuid: %@}", (uint8_t *)&v11, 0xCu);
    }

    if (v4)
    {
      uint64_t v6 = +[IDSDaemonController sharedInstance];
      uint64_t v7 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "subscriptionSource"));
      int v8 = [*(id *)(a1 + 40) IMEI];
      id v9 = [*(id *)(a1 + 40) carrierNonce];
      [v6 requestCarrierTokenForSubscriptionSource:v7 IMEI:v8 carrierNonce:v9 requestUUID:v4];
    }
  }
  else
  {
    id v4 = [v3 _clientErrorForCode:-4000 underlyingError:0];
    uint64_t v10 = [MEMORY[0x1E4F6C3B8] sms];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v4;
      _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Client requested carrier token on an unsupported platform -- failing request {clientError: %@}", (uint8_t *)&v11, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1919622F4(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32)
    && (uint64_t v2 = [objc_alloc(MEMORY[0x1E4F6B3C8]) initWithDataRepresentation:*(void *)(a1 + 32)]) != 0)
  {
    uint64_t v3 = (void *)v2;
    id v4 = 0;
  }
  else
  {
    id v4 = [*(id *)(a1 + 40) _clientErrorForCode:-1000 underlyingError:*(void *)(a1 + 48)];
    uint64_t v3 = 0;
  }
  int v5 = [*(id *)(a1 + 40) daemonRequestTimer];
  uint64_t v6 = [v5 invalidateTimeoutAndReturnHandlerForRequestID:*(void *)(a1 + 56)];

  uint64_t v7 = [v6 block];
  int v8 = [MEMORY[0x1E4F6C3B8] sms];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 56);
    if (*(void *)(a1 + 32)) {
      uint64_t v10 = @"YES";
    }
    else {
      uint64_t v10 = @"NO";
    }
    int v11 = (void *)MEMORY[0x192FE03B0](v7);
    int v12 = 138413314;
    uint64_t v13 = v9;
    __int16 v14 = 2112;
    id v15 = v10;
    __int16 v16 = 2112;
    id v17 = v6;
    __int16 v18 = 2112;
    id v19 = v11;
    __int16 v20 = 2112;
    id v21 = v4;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "Received authenticate phone response from daemon {uuid: %@, phoneCertificateData: %@, handler: %@, completion: %@, clientError: %@}", (uint8_t *)&v12, 0x34u);
  }
  if (v7) {
    ((void (**)(void, void *, void *))v7)[2](v7, v3, v4);
  }
  [*(id *)(a1 + 40) _updateSelfRetentionBasedOnInFlightRequestCount];
}

void sub_191962658(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "__imArrayByApplyingBlock:", &unk_1EE2464C8);
  if (![v2 count])
  {
    int v5 = *(void **)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = -1000;
    goto LABEL_7;
  }
  if (!*(void *)(a1 + 56) || !*(void *)(a1 + 64))
  {
    int v5 = *(void **)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = -2000;
LABEL_7:
    id v4 = [v5 _clientErrorForCode:v7 underlyingError:v6];
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  uint64_t v3 = [[IDSAuthenticationSigningResult alloc] initWithSubscriptionIdentifiers:*(void *)(a1 + 72) authenticationCertificates:v2 inputData:*(void *)(a1 + 80) nonce:*(void *)(a1 + 64) signature:*(void *)(a1 + 56)];
  id v4 = 0;
LABEL_8:
  int v8 = [(IDSAuthenticationSigningResult *)v3 authenticationCertificateSignatures];
  uint64_t v9 = [v8 count];

  if (!v9 && !v4)
  {
    id v4 = [*(id *)(a1 + 40) _clientErrorForCode:-900 underlyingError:*(void *)(a1 + 48)];
  }
  uint64_t v10 = [*(id *)(a1 + 40) daemonRequestTimer];
  int v11 = [v10 invalidateTimeoutAndReturnHandlerForRequestID:*(void *)(a1 + 88)];

  int v12 = [v11 block];
  uint64_t v13 = [MEMORY[0x1E4F6C3B8] sms];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 88);
    if (*(void *)(a1 + 56)) {
      id v15 = @"YES";
    }
    else {
      id v15 = @"NO";
    }
    __int16 v16 = (void *)MEMORY[0x192FE03B0](v12);
    int v17 = 138413570;
    uint64_t v18 = v14;
    __int16 v19 = 2112;
    __int16 v20 = v15;
    __int16 v21 = 2112;
    uint64_t v22 = v3;
    __int16 v23 = 2112;
    uint64_t v24 = v11;
    __int16 v25 = 2112;
    __int16 v26 = v16;
    __int16 v27 = 2112;
    uint64_t v28 = v4;
    _os_log_impl(&dword_19190B000, v13, OS_LOG_TYPE_DEFAULT, "Received phone authentication signature response from daemon {uuid: %@, signature: %@, signingResult: %@, handler: %@, completion: %@, clientError: %@}", (uint8_t *)&v17, 0x3Eu);
  }
  if (v12) {
    ((void (**)(void, IDSAuthenticationSigningResult *, void *))v12)[2](v12, v3, v4);
  }
  [*(id *)(a1 + 40) _updateSelfRetentionBasedOnInFlightRequestCount];
}

id sub_1919628A0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = (objc_class *)MEMORY[0x1E4F6B3C8];
    id v3 = a2;
    id v4 = (void *)[[v2 alloc] initWithDataRepresentation:v3];
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_191962A04(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = [*(id *)(a1 + 40) _clientErrorForCode:-1100 underlyingError:*(void *)(a1 + 48)];
  }
  id v3 = [*(id *)(a1 + 40) daemonRequestTimer];
  id v4 = [v3 invalidateTimeoutAndReturnHandlerForRequestID:*(void *)(a1 + 56)];

  int v5 = [v4 block];
  uint64_t v6 = [MEMORY[0x1E4F6C3B8] sms];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 56);
    if (*(void *)(a1 + 32)) {
      int v8 = @"YES";
    }
    else {
      int v8 = @"NO";
    }
    uint64_t v9 = (void *)MEMORY[0x192FE03B0](v5);
    int v11 = 138413314;
    uint64_t v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    __int16 v16 = v4;
    __int16 v17 = 2112;
    uint64_t v18 = v9;
    __int16 v19 = 2112;
    __int16 v20 = v2;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Received carrier token response from daemon {uuid: %@, carrierToken: %@, handler: %@, completion: %@, clientError: %@}", (uint8_t *)&v11, 0x34u);
  }
  if (v5)
  {
    if (*(void *)(a1 + 32)) {
      uint64_t v10 = [[IDSCarrierToken alloc] initWithTokenString:*(void *)(a1 + 32)];
    }
    else {
      uint64_t v10 = 0;
    }
    ((void (**)(void, IDSCarrierToken *, void *))v5)[2](v5, v10, v2);
  }
  [*(id *)(a1 + 40) _updateSelfRetentionBasedOnInFlightRequestCount];
}

uint64_t sub_191962D48(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F6C3B8] sms];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = (void *)MEMORY[0x192FE03B0](*(void *)(a1 + 40));
    int v7 = 138412290;
    int v8 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Timed out phone authentication signature request -- calling completion block with timeout error {completionBlock: %@}", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    int v5 = [*(id *)(a1 + 32) _clientErrorForCode:-3000 underlyingError:0];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  return [*(id *)(a1 + 32) _updateSelfRetentionBasedOnInFlightRequestCount];
}

uint64_t sub_191962F88(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F6C3B8] sms];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = (void *)MEMORY[0x192FE03B0](*(void *)(a1 + 40));
    int v7 = 138412290;
    int v8 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Timed out phone authentication certificate request -- calling completion block with timeout error {completionBlock: %@}", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    int v5 = [*(id *)(a1 + 32) _clientErrorForCode:-3000 underlyingError:0];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  return [*(id *)(a1 + 32) _updateSelfRetentionBasedOnInFlightRequestCount];
}

uint64_t sub_1919631C8(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F6C3B8] sms];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = (void *)MEMORY[0x192FE03B0](*(void *)(a1 + 40));
    int v7 = 138412290;
    int v8 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Timed out phone carrier token operation -- calling completion block with timeout error {completionBlock: %@}", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    int v5 = [*(id *)(a1 + 32) _clientErrorForCode:-3000 underlyingError:0];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  return [*(id *)(a1 + 32) _updateSelfRetentionBasedOnInFlightRequestCount];
}

void sub_191963414(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = (void *)MEMORY[0x1E4F1C9B8];
  id v6 = a3;
  id v8 = [a2 tokenString];
  int v7 = objc_msgSend(v5, "__imDataWithHexString:", v8);
  (*(void (**)(uint64_t, void *, id))(v4 + 16))(v4, v7, v6);
}

void sub_19196356C(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v2 = [*(id *)(a1 + 32) _isPhoneCertificateVendorSupported];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = [v3 _scheduleTimeoutForPhoneSubscriptionSourceCompletionBlock:*(void *)(a1 + 40)];
    int v5 = [MEMORY[0x1E4F6C3B8] sms];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      uint64_t v10 = v4;
      _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "Client request to set current phone subscription source {uuid: %@}", (uint8_t *)&v9, 0xCu);
    }

    if (v4)
    {
      id v6 = +[IDSDaemonController sharedInstance];
      int v7 = [NSNumber numberWithInteger:*(void *)(a1 + 48)];
      [v6 setPhoneUserSubscriptionSource:v7 withRequestUUID:v4];
    }
  }
  else
  {
    uint64_t v4 = [v3 _clientErrorForCode:-4000 underlyingError:0];
    id v8 = [MEMORY[0x1E4F6C3B8] sms];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      uint64_t v10 = v4;
      _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "Client requested to set current phone user subscription source on an unsupported platform -- failing request {clientError: %@}", (uint8_t *)&v9, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1919637CC(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  char v2 = [*(id *)(a1 + 32) _isPhoneCertificateVendorSupported];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = [v3 _scheduleTimeoutForPhoneSubscriptionSourceCompletionBlock:*(void *)(a1 + 40)];
    int v5 = [MEMORY[0x1E4F6C3B8] sms];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      int v9 = v4;
      _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "Client request for current phone subscription source {uuid: %@}", (uint8_t *)&v8, 0xCu);
    }

    if (v4)
    {
      id v6 = +[IDSDaemonController sharedInstance];
      [v6 fetchPhoneUserSubscriptionSourceWithRequestUUID:v4];
    }
  }
  else
  {
    uint64_t v4 = [v3 _clientErrorForCode:-4000 underlyingError:0];
    int v7 = [MEMORY[0x1E4F6C3B8] sms];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      int v9 = v4;
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Client requested current phone user subscription source on an unsupported platform -- failing request {clientError: %@}", (uint8_t *)&v8, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_191963B78()
{
  uint64_t result = MEMORY[0x192FDF3E0](@"FTSelectedPNRSubscription", @"FTServices");
  qword_1E92DE198 = result;
  return result;
}

uint64_t sub_191963CE0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v2 = [MEMORY[0x1E4F6C3B8] sms];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = (void *)MEMORY[0x192FE03B0](*(void *)(a1 + 40));
    int v7 = 138412290;
    int v8 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Timed out phone subscription source operation -- calling completion block with timeout error {completionBlock: %@}", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    int v5 = [*(id *)(a1 + 32) _clientErrorForCode:-3000 underlyingError:0];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  return [*(id *)(a1 + 32) _updateSelfRetentionBasedOnInFlightRequestCount];
}

void sub_191963EE8(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    char v2 = 0;
  }
  else
  {
    char v2 = [*(id *)(a1 + 40) _clientErrorForCode:-900 underlyingError:*(void *)(a1 + 48)];
  }
  id v3 = [*(id *)(a1 + 40) daemonRequestTimer];
  uint64_t v4 = [v3 invalidateTimeoutAndReturnHandlerForRequestID:*(void *)(a1 + 56)];

  int v5 = [v4 block];
  id v6 = [MEMORY[0x1E4F6C3B8] sms];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = (void *)MEMORY[0x192FE03B0](v5);
    int v10 = 138413314;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    __int16 v15 = v4;
    __int16 v16 = 2112;
    __int16 v17 = v9;
    __int16 v18 = 2112;
    __int16 v19 = v2;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Received response after setting current phone user subscription from daemon {uuid: %@, subscriptionSource: %@, handler: %@, completion: %@, clientError: %@}", (uint8_t *)&v10, 0x34u);
  }
  if (v5) {
    ((void (**)(void, uint64_t, void *))v5)[2](v5, [*(id *)(a1 + 32) integerValue], v2);
  }
  [*(id *)(a1 + 40) _updateSelfRetentionBasedOnInFlightRequestCount];
}

void sub_191964178(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    char v2 = 0;
  }
  else
  {
    char v2 = [*(id *)(a1 + 40) _clientErrorForCode:-900 underlyingError:*(void *)(a1 + 48)];
  }
  id v3 = [*(id *)(a1 + 40) daemonRequestTimer];
  uint64_t v4 = [v3 invalidateTimeoutAndReturnHandlerForRequestID:*(void *)(a1 + 56)];

  int v5 = [v4 block];
  id v6 = [MEMORY[0x1E4F6C3B8] sms];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = (void *)MEMORY[0x192FE03B0](v5);
    int v10 = 138413314;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    __int16 v15 = v4;
    __int16 v16 = 2112;
    __int16 v17 = v9;
    __int16 v18 = 2112;
    __int16 v19 = v2;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Received current phone user subscription response from daemon {uuid: %@, subscriptionSource: %@, handler: %@, completion: %@, clientError: %@}", (uint8_t *)&v10, 0x34u);
  }
  if (v5) {
    ((void (**)(void, uint64_t, void *))v5)[2](v5, objc_msgSend(*(id *)(a1 + 40), "_subscriptionSourceFromIntegerValue:", objc_msgSend(*(id *)(a1 + 32), "integerValue")), v2);
  }
  [*(id *)(a1 + 40) _updateSelfRetentionBasedOnInFlightRequestCount];
}

uint64_t sub_1919644D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_191964628(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_191965214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_19196522C()
{
  return self;
}

uint64_t sub_191965338(void *a1)
{
  return [*(id *)(a1[4] + 8) addDelegate:a1[5] queue:a1[6]];
}

uint64_t sub_1919653F8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeDelegate:*(void *)(a1 + 40)];
}

void sub_191965530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191965548(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) accounts];

  return MEMORY[0x1F41817F8]();
}

void sub_1919656C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919656DC(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) enabledAccounts];

  return MEMORY[0x1F41817F8]();
}

void sub_191965858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191965870(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) serviceName];

  return MEMORY[0x1F41817F8]();
}

void sub_191965A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191965A58(void *a1)
{
  *(void *)(*(void *)(a1[7] + 8) + 40) = [*(id *)(a1[4] + 8) accountWithLoginID:a1[5] service:a1[6]];

  return MEMORY[0x1F41817F8]();
}

void sub_191965C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191965C18(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 8) accountWithUniqueID:a1[5]];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191965D90(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_setupAccountWithLoginID_aliases_password_completionHandler_);
}

uint64_t sub_191965EAC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_setupAccountWithLoginID_password_completionHandler_);
}

void sub_191966058(uint64_t a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  int v6 = [v4 isEqual:*MEMORY[0x1E4F6AC68]];
  uint64_t v7 = [MEMORY[0x1E4F6C3B8] registration];
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      LOWORD(v12) = 0;
      uint64_t v9 = "  => password : REDACTED";
      int v10 = v7;
      uint32_t v11 = 2;
LABEL_6:
      _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v12, v11);
    }
  }
  else if (v8)
  {
    int v12 = 138412546;
    id v13 = v4;
    __int16 v14 = 2112;
    id v15 = v5;
    uint64_t v9 = "  => %@ : %@";
    int v10 = v7;
    uint32_t v11 = 22;
    goto LABEL_6;
  }
}

uint64_t sub_191966178(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_setupAccountWithSetupParameters_aliases_completionHandler_);
}

uint64_t sub_1919662E8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) addAccount:*(void *)(a1 + 40)];
}

uint64_t sub_191966450(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) _removeAndDeregisterAccount:*(void *)(a1 + 40)];
}

uint64_t sub_191966514(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) _removeAccount:*(void *)(a1 + 40)];
}

uint64_t sub_191966684(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) enableAccount:*(void *)(a1 + 40)];
}

uint64_t sub_1919667EC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) disableAccount:*(void *)(a1 + 40)];
}

uint64_t sub_191967CAC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191968AB8(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 _stripFZIDPrefix];
  int v5 = [v4 isEqual:*(void *)(*(void *)(a1 + 32) + 64)];

  if (v5)
  {
    int v6 = [NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 154)];
    if (v6)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v3, v6);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_191A2FCD8((uint64_t)v3);
    }

    uint64_t v7 = +[IDSLogging _IDSGroupSession];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(*(void *)(a1 + 32) + 154)) {
        BOOL v8 = @"YES";
      }
      else {
        BOOL v8 = @"NO";
      }
      int v9 = 138412546;
      id v10 = v3;
      __int16 v11 = 2112;
      int v12 = v8;
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "currentURL: %@, _isLightweightParticipant: %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

void sub_191969378(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v2 = +[IDSLogging _IDSGroupSession_oversize];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "%@ joinWithOptions: %@", (uint8_t *)&v5, 0x16u);
  }
}

void sub_191969434(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  char v2 = +[IDSLogging _IDSGroupSession];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = WeakRetained[3];
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Disable callScreening mode for session: %@, due to default.", (uint8_t *)&v4, 0xCu);
  }

  [WeakRetained setCallScreeningMode:0];
}

uint64_t sub_1919694FC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_joinGroupSession_withOptions_);
}

void sub_191969D64(uint64_t a1)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  char v2 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v5 = *MEMORY[0x1E4F28228];
  v6[0] = @"No participants provided.";
  uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v6 forKeys:&v5 count:1];
  int v4 = [v2 errorWithDomain:@"com.apple.identityservices.error" code:0 userInfo:v3];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191969E48(uint64_t a1)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  char v2 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v5 = *MEMORY[0x1E4F28228];
  v6[0] = @"GroupSession is invalidated.";
  uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v6 forKeys:&v5 count:1];
  int v4 = [v2 errorWithDomain:@"com.apple.identityservices.error" code:0 userInfo:v3];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19196A060(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_registerPluginForGroup_options_);
}

uint64_t sub_19196A1A4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_unregisterPluginForGroup_options_);
}

void sub_19196A6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t sub_19196A700(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t result = [a2 isGeneratedLocally];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

uint64_t sub_19196A744(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) recvKeyMaterial:a2];
}

uint64_t sub_19196A750(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_19196A9F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19196AA0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19196ADE8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_19196AFBC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_19196B190(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_19196B9A8(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v2 = +[IDSLogging _IDSGroupSession_oversize];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Session %@ full received report: %@", (uint8_t *)&v5, 0x16u);
  }
}

void sub_19196BA64(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didReceiveReport:*(void *)(a1 + 40)];
  }
}

void sub_19196BC9C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 groupSessionDidInitialize:v3 error:*(void *)(a1 + 40)];
  }
}

void sub_19196BEE4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 groupSessionDidTerminate:v3];
  }
}

void sub_19196C128(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 groupSessionDidConnectUnderlyingLinks:v3];
  }
}

void sub_19196C36C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 groupSessionDidDisconnectUnderlyingLinks:v3];
  }
}

void sub_19196C61C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 groupSessionEnded:v3 withReason:*(unsigned int *)(a1 + 48) error:*(void *)(a1 + 40)];
  }
}

void sub_19196C974(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v2 = +[IDSLogging _IDSGroupSession_oversize];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Group session %@, existing participants for did join %@", (uint8_t *)&v5, 0x16u);
  }
}

void sub_19196CA30(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 8) object];
    [v4 sessionDidJoinGroup:v3 participantInfo:a1[5] error:a1[6]];
  }
}

void sub_19196CD8C(uint64_t a1, void *a2)
{
  v11[3] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v4 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v3 sessionDidJoinGroup:v4 participantUpdate:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
  }
  else if (objc_opt_respondsToSelector())
  {
    v10[0] = *MEMORY[0x1E4F6AFE0];
    int v5 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "participantIdentifier"));
    v11[0] = v5;
    v10[1] = *MEMORY[0x1E4F6AFD8];
    uint64_t v6 = [*(id *)(a1 + 40) participantData];
    v11[1] = v6;
    v10[2] = *MEMORY[0x1E4F6B000];
    __int16 v7 = [*(id *)(a1 + 40) relaySessionID];
    v11[2] = v7;
    uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:3];

    uint64_t v9 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v3 sessionDidJoinGroup:v9 participantInfo:v8 error:*(void *)(a1 + 48)];
  }
}

void sub_19196D138(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 sessionDidLeaveGroup:v3 error:*(void *)(a1 + 40)];
  }
}

void sub_19196D3D0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 participantDidJoinGroupWithInfo:*(void *)(a1 + 40)];
  }
}

void sub_19196D668(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 participantDidLeaveGroupWithInfo:*(void *)(a1 + 40)];
  }
}

void sub_19196DA88(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v2 = +[IDSLogging _IDSGroupSession_oversize];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "didReceiveActiveParticipants: %@ for group session: %@", (uint8_t *)&v5, 0x16u);
  }
}

void sub_19196DB44(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didReceiveActiveParticipants:*(void *)(a1 + 40) success:*(unsigned __int8 *)(a1 + 48)];
  }
}

void sub_19196DF68(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v2 = +[IDSLogging _IDSGroupSession_oversize];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "didReceiveActiveLightweightParticipants: %@ for group session: %@", (uint8_t *)&v5, 0x16u);
  }
}

void sub_19196E024(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didReceiveActiveLightweightParticipants:*(void *)(a1 + 40) success:*(unsigned __int8 *)(a1 + 48)];
  }
}

void sub_19196E2C0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didRegisterPluginAllocationInfo:*(void *)(a1 + 40)];
  }
}

void sub_19196E558(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didUnregisterPluginAllocationInfo:*(void *)(a1 + 40)];
  }
}

void sub_19196E828(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didReceiveBlockedParticipantIDs:*(void *)(a1 + 40) withCode:*(unsigned int *)(a1 + 48) withType:*(unsigned __int16 *)(a1 + 52) isTruncated:*(unsigned __int8 *)(a1 + 54)];
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      goto LABEL_6;
    }
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didReceiveBlockedParticipantIDs:*(void *)(a1 + 40) withCode:*(unsigned int *)(a1 + 48) isTruncated:*(unsigned __int8 *)(a1 + 54)];
  }

LABEL_6:
}

void sub_19196EB38(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didReceiveQueryBlockedParticipantIDs:*(void *)(a1 + 40) withCode:*(unsigned int *)(a1 + 48) isTruncated:*(unsigned __int8 *)(a1 + 52)];
  }
}

void sub_19196EE00(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didRemoveParticipantIDs:*(void *)(a1 + 40) withCode:*(unsigned int *)(a1 + 48) isTruncated:*(unsigned __int8 *)(a1 + 52)];
  }
}

void sub_19196F034(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 rejectedKeyRecoveryRequestFromURI:*(void *)(a1 + 40) reason:*(unsigned int *)(a1 + 48)];
  }
}

void sub_19196F3D4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 sessiondidReceiveKeyUpdate:v3];
  }
}

void sub_19196F90C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 sessionDidReceiveParticipantUpgrade:v3 participantType:*(unsigned __int16 *)(a1 + 48) error:*(void *)(a1 + 40)];
  }
}

void sub_19196FBA0(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 8) object];
    [v4 session:v3 didReceiveJoinedParticipantID:a1[6] withContext:a1[5]];
  }
}

void sub_19196FE30(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 8) object];
    [v4 session:v3 didReceiveLeftParticipantID:a1[6] withContext:a1[5]];
  }
}

void sub_1919700D8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didReceiveParticipantIDs:*(void *)(a1 + 40) withCode:*(unsigned int *)(a1 + 48) managementType:*(unsigned __int16 *)(a1 + 52)];
  }
}

void sub_191970518(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 participantUpdatedForSession:v3];
  }
}

void sub_191970AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_191970B20(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  uint64_t v8 = [v7 first];
  int v9 = [v8 isEqual:a1[4]];

  if (v9)
  {
    id v10 = [v7 second];
    __int16 v11 = *(NSObject **)(a1[5] + 88);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = sub_191970C2C;
    v14[3] = &unk_1E572AEF8;
    uint64_t v12 = a1[8];
    id v15 = v10;
    uint64_t v16 = v12;
    id v13 = v10;
    dispatch_async(v11, v14);
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    *(void *)(*(void *)(a1[7] + 8) + 24) = a3;
    *a4 = 1;
  }
}

uint64_t sub_191970C2C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_191970E98(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 8) object];
    [v4 session:v3 didReceiveDataBlob:a1[5] forParticipant:a1[6]];
  }
}

void sub_191971188(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didReceiveData:*(void *)(a1 + 40) dataType:*(unsigned __int16 *)(a1 + 56) forParticipant:*(void *)(a1 + 48)];
  }
}

void sub_1919713F0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didReceiveServerErrorCode:*(unsigned int *)(a1 + 40)];
  }
}

void sub_191971A84(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = [a2 groupContext];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

void sub_191971D10(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(MEMORY[0x1E4F59DF0]);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v7 = (void *)[v4 initWithInput:v5 initialValue:v6];

  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_191971E84;
  v14[3] = &unk_1E572B178;
  void v14[4] = *(void *)(a1 + 40);
  id v15 = v3;
  id v8 = v3;
  [v7 setReducerBlock:v14];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_191972000;
  v11[3] = &unk_1E572B1A0;
  int8x16_t v10 = *(int8x16_t *)(a1 + 32);
  id v9 = (id)v10.i64[0];
  int8x16_t v12 = vextq_s8(v10, v10, 8uLL);
  id v13 = *(id *)(a1 + 48);
  [v7 reduceWithCompletion:v11];
}

void sub_191971E84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v4);

  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = [v3 currentItem];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_191971F5C;
  v8[3] = &unk_1E572B150;
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v3;
  id v7 = v3;
  [v5 fetchGroupWithGroupID:v6 completion:v8];
}

void sub_191971F5C(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v3);

  if (v7)
  {
    id v4 = [*(id *)(a1 + 40) currentResult];
    [v4 addObject:v7];
  }
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = [v5 currentResult];
  [v5 continueWithResult:v6];
}

void sub_191972000(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v4);

  uint64_t v5 = [v3 state];
  if (!v5)
  {
    __int16 v11 = [MEMORY[0x1E4F61160] groupContext];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int8x16_t v12 = [v3 value];
      int v15 = 134217984;
      uint64_t v16 = [v12 count];
      _os_log_impl(&dword_19190B000, v11, OS_LOG_TYPE_INFO, "Fetched groups with success {groups.count: %ld}", (uint8_t *)&v15, 0xCu);
    }
    id v13 = [MEMORY[0x1E4F61160] groupContext];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      sub_191A31B7C(v3, v13);
    }

    uint64_t v14 = *(void *)(a1 + 48);
    int8x16_t v10 = [v3 value];
    (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v10, 0);
    goto LABEL_11;
  }
  if (v5 == 1)
  {
    id v6 = [MEMORY[0x1E4F61160] groupContext];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [v3 error];
      uint64_t v8 = *(void *)(a1 + 40);
      int v15 = 138543619;
      uint64_t v16 = (uint64_t)v7;
      __int16 v17 = 2113;
      uint64_t v18 = v8;
      _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Failed to fetch groups {error: %{public}@, groupIDs: %{private}@}", (uint8_t *)&v15, 0x16u);
    }
    uint64_t v9 = *(void *)(a1 + 48);
    int8x16_t v10 = [v3 error];
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
LABEL_11:
  }
}

void sub_191972328(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = a2;
  id v4 = [v3 queue];
  dispatch_assert_queue_V2(v4);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1919724C4(uint64_t a1, void *a2)
{
  id v3 = [a2 cloudKitContainer];
  id v4 = [v3 transportLog];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_191972580;
  v6[3] = &unk_1E572B218;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  [v4 fetchChangesSinceToken:v5 completion:v6];
}

void sub_191972580(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = (void *)MEMORY[0x1E4F61160];
  id v9 = a5;
  id v10 = a4;
  id v11 = a2;
  int8x16_t v12 = [v8 groupContext];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v13 = 0;
    _os_log_impl(&dword_19190B000, v12, OS_LOG_TYPE_INFO, "Fetched messages from transport log", v13, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1919727DC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = [MEMORY[0x1E4F61160] groupContext];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138543362;
      id v15 = v6;
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Account identity for task handler - failed to get content - fail {error: %{public}@}", (uint8_t *)&v14, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v8 = [*(id *)(a1 + 32) delegate];
    id v9 = [v8 groupContextController:*(void *)(a1 + 32) accountsForAlises:*(void *)(a1 + 40)];

    id v10 = [IDSTransactionLogTaskHandlerAccountInfo alloc];
    id v11 = [v5 accountIdentity];
    int8x16_t v12 = [*(id *)(a1 + 32) serviceName];
    id v13 = [(IDSTransactionLogTaskHandlerAccountInfo *)v10 initWithAccountIdentity:v11 aliasToAccountsMap:v9 serviceName:v12];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_191972A48(uint64_t a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_191972AE8;
  v3[3] = &unk_1E572B290;
  char v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 groupContextWithCompletion:v3];
}

uint64_t sub_191972AE8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel__didCreateGroup_completion_);
}

void sub_191972BCC(uint64_t a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_191972C6C;
  v3[3] = &unk_1E572B290;
  char v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 groupContextWithCompletion:v3];
}

uint64_t sub_191972C6C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel__didCacheGroup_completion_);
}

void sub_191972D78(uint64_t a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_191972E2C;
  v3[3] = &unk_1E572B1C8;
  char v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  [v2 groupContextWithCompletion:v3];
}

uint64_t sub_191972E2C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel__didUpdateGroup_withNewGroup_completion_);
}

void sub_191972F14(uint64_t a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_191972FB4;
  v3[3] = &unk_1E572B290;
  char v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 groupContextWithCompletion:v3];
}

uint64_t sub_191972FB4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel__didReceiveDecryptionFailureForGroup_completion_);
}

uint64_t sub_191973048(uint64_t a1)
{
  char v2 = [MEMORY[0x1E4F61160] groupContext];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Registration identities updated - clearing client cache", v4, 2u);
  }

  return [*(id *)(a1 + 32) setSeal:0];
}

void sub_191973418(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [*(id *)(a1 + 32) object];
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 delegate];
    [v5 groupContextController:*(void *)(a1 + 40) didCreateGroup:v6];
  }
}

void sub_191973598(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 state];
  if (v3 == 1)
  {
    id v5 = [v6 error];
    (*(void (**)(void, void, void *))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, v5);
  }
  else
  {
    if (v3) {
      goto LABEL_6;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = [v6 value];
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v5, 0);
  }

LABEL_6:
}

void sub_191974420(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_191974FA8(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 72))
  {
    uint64_t v4 = *(void **)(v2 + 40);
    id v5 = a2;
    id v6 = [v4 _internal];
    id v7 = [v6 serviceName];

    if ([v7 isEqualToIgnoringCase:@"com.apple.private.alloy.pbbridge"]) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = [v7 isEqualToIgnoringCase:@"com.apple.private.alloy.accountssync"];
    }
    uint64_t v9 = [*(id *)(a1 + 32) daemonController];
    int v10 = [v9 setCapabilities:*(unsigned int *)(*(void *)(a1 + 32) + 72) forListenerID:*(void *)(*(void *)(a1 + 32) + 56) shouldLog:v8];

    id v11 = [*(id *)(a1 + 32) daemonController];
    [v11 addedDelegateForService:v7 withCompletion:v5];

    if (v8)
    {
      int8x16_t v12 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        int v14 = *(_DWORD *)(v13 + 72);
        id v15 = @"NO";
        uint64_t v16 = *(void *)(v13 + 56);
        if (v10) {
          id v15 = @"YES";
        }
        v17[0] = 67109634;
        v17[1] = v14;
        __int16 v18 = 2112;
        uint64_t v19 = v16;
        __int16 v20 = 2112;
        uint64_t v21 = v15;
        _os_log_impl(&dword_19190B000, v12, OS_LOG_TYPE_DEFAULT, "setCapabilities %u  %@, uint64_t result = %@", (uint8_t *)v17, 0x1Cu);
      }
    }
  }
}

id sub_191975754(uint64_t a1)
{
  if (*(void *)(a1 + 72))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v2 = *(void *)(a1 + 48);
      if (v2) {
        (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    if (*(unsigned char *)(a1 + 81))
    {
      uint64_t v3 = *(void *)(a1 + 64);
      if (v3) {
        (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
      }
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  id v4 = self;
  return self;
}

uint64_t sub_19197761C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_caseInsensitiveCompare_);
}

uint64_t sub_191977624(uint64_t a1, void *a2)
{
  return [a2 sendMessageWithSendParameters:*(void *)(a1 + 32)];
}

void sub_19197832C(_Unwind_Exception *a1)
{
}

void sub_191979F84(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 16) object];
    [v4 connection:v3 isActiveChanged:*(unsigned __int8 *)(a1 + 40)];
  }
}

void sub_19197A108(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 16) object];
    [v4 connection:v3 devicesChanged:*(void *)(a1 + 40)];
  }
}

void sub_19197A28C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 16) object];
    [v4 connection:v3 nearbyDevicesChanged:*(void *)(a1 + 40)];
  }
}

void sub_19197A410(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 16) object];
    [v4 connection:v3 connectedDevicesChanged:*(void *)(a1 + 40)];
  }
}

void sub_19197B0A4(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v4 = [*(id *)(*(void *)(a1 + 32) + 16) object];
    [v3 connection:v4 messageIdentifier:*(void *)(a1 + 40) alternateCallbackID:*(void *)(a1 + 48) updatedWithResponseCode:*(void *)(a1 + 72) error:*(void *)(a1 + 56) lastCall:*(unsigned __int8 *)(a1 + 80) messageContext:*(void *)(a1 + 64)];

    id v5 = +[IDSTransportLog IDSConnection];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (objc_class *)objc_opt_class();
      id v7 = NSStringFromClass(v6);
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412802;
      id v15 = v7;
      __int16 v16 = 2048;
      id v17 = v3;
      __int16 v18 = 2112;
      uint64_t v19 = v8;
      _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "  => <%@:%p> finished handling message guid: %@  (connection:messageIdentifier:alternateCallbackID:updatedWithResponseCode:error:lastCall:)", buf, 0x20u);
    }
  }
  if (*(unsigned char *)(a1 + 80) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    uint64_t v9 = [*(id *)(*(void *)(a1 + 32) + 16) object];
    [v3 connection:v9 identifier:*(void *)(a1 + 40) didSendWithSuccess:*(unsigned __int8 *)(a1 + 81) error:*(void *)(a1 + 56) context:*(void *)(a1 + 64)];

    int v10 = +[IDSTransportLog IDSConnection];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = (objc_class *)objc_opt_class();
      int8x16_t v12 = NSStringFromClass(v11);
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412802;
      id v15 = v12;
      __int16 v16 = 2048;
      id v17 = v3;
      __int16 v18 = 2112;
      uint64_t v19 = v13;
      _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "  => <%@:%p> finished handling message guid: %@  (connection:identifier:didSendWithSuccess:error:context:)", buf, 0x20u);
    }
  }
}

void sub_19197B5AC(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v4 = [*(id *)(a1[4] + 16) object];
    [v3 connection:v4 identifier:a1[5] alternateCallbackID:a1[6] willSendToDestinations:a1[7] skippedDestinations:a1[8] registrationPropertyToDestinations:a1[9]];

    id v5 = +[IDSTransportLog IDSConnection];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (objc_class *)objc_opt_class();
      id v7 = NSStringFromClass(v6);
      uint64_t v8 = a1[5];
      int v9 = 138412802;
      int v10 = v7;
      __int16 v11 = 2048;
      id v12 = v3;
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "  => <%@:%p> finished handling message guid: %@  (connection:identifier:alternateCallbackID:willSendToDestinations:skippedDestinations:registrationPropertyToDestinations:)", (uint8_t *)&v9, 0x20u);
    }
  }
}

void sub_19197BAB8(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 identifier:a1[5] fromURI:a1[6] hasBeenDeliveredWithContext:a1[7]];
  }
}

void sub_19197BB38(uint64_t a1)
{
  if (*(void *)(a1 + 32) || *(void *)(a1 + 40))
  {
    id v8 = [*(id *)(a1 + 48) daemonController];
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 56);
    id v4 = [*(id *)(*(void *)(a1 + 48) + 40) _internal];
    id v5 = [v4 uniqueID];
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = [*(id *)(a1 + 64) priority];
    objc_msgSend(v8, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v2, v3, v5, v6, 0, v7, objc_msgSend(*(id *)(a1 + 64), "broadcastID"), objc_msgSend(*(id *)(a1 + 64), "connectionType"));
  }
}

void sub_19197BE48(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 didSendOpportunisticDataWithIdentifier:a1[5] toIDs:a1[6]];
  }
}

void sub_19197C0A4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 16) object];
    [v4 connection:v3 didCancelMessageWithSuccess:*(unsigned __int8 *)(a1 + 56) error:*(void *)(a1 + 40) identifier:*(void *)(a1 + 48)];
  }
}

void sub_19197CCA8(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 incomingOpportunisticData:a1[5] withIdentifier:a1[6] fromURI:a1[7] context:a1[8]];
  }
}

void sub_19197D530(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 232));
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_19197D590(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 incomingMessage:a1[5] fromURI:a1[6]];
  }
}

void sub_19197D60C(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 incomingMessage:a1[5] fromURI:a1[6] context:a1[7]];
  }
}

void sub_19197D68C(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 incomingTopLevelMessage:a1[5] fromURI:a1[6] messageContext:a1[7]];
  }
}

void sub_19197D70C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(unsigned char *)(a1 + 81))
    {
      uint64_t v2 = [*(id *)(a1 + 32) directMessageConnection];
      [v2 sendAppAckWithGUID:*(void *)(a1 + 40)];
    }
    else
    {
      uint64_t v3 = [*(id *)(a1 + 48) connectionType];
      uint64_t v2 = [*(id *)(a1 + 32) daemonController];
      uint64_t v4 = *(void *)(a1 + 40);
      id v5 = [*(id *)(a1 + 56) prefixedURI];
      uint64_t v6 = [*(id *)(*(void *)(a1 + 32) + 40) _internal];
      id v7 = [v6 uniqueID];
      [v2 sendAppAckWithGUID:v4 toDestination:v5 forAccountWithUniqueID:v7 connectionType:v3];
    }
  }
  if (!*(unsigned char *)(a1 + 81) && (*(void *)(a1 + 64) || *(void *)(a1 + 72)))
  {
    id v14 = [*(id *)(a1 + 32) daemonController];
    id v8 = [*(id *)(a1 + 48) storageGuid];
    int v9 = [*(id *)(a1 + 48) outgoingResponseIdentifier];
    int v10 = [*(id *)(*(void *)(a1 + 32) + 40) _internal];
    __int16 v11 = [v10 uniqueID];
    uint64_t v12 = *(void *)(a1 + 72);
    __int16 v13 = [*(id *)(a1 + 48) priority];
    objc_msgSend(v14, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v8, v9, v11, v12, 0, v13, objc_msgSend(*(id *)(a1 + 48), "broadcastID"), objc_msgSend(*(id *)(a1 + 48), "connectionType"));
  }
}

void sub_19197DEFC(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 incomingData:a1[5] fromURI:a1[6] context:a1[7]];
  }
}

void sub_19197DF7C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(unsigned char *)(a1 + 89))
    {
      uint64_t v2 = [*(id *)(a1 + 32) directMessageConnection];
      [v2 sendAppAckWithGUID:*(void *)(a1 + 40)];
    }
    else
    {
      uint64_t v3 = [*(id *)(a1 + 48) connectionType];
      uint64_t v2 = [*(id *)(a1 + 32) daemonController];
      uint64_t v4 = *(void *)(a1 + 40);
      id v5 = [*(id *)(a1 + 56) prefixedURI];
      uint64_t v6 = [*(id *)(*(void *)(a1 + 32) + 40) _internal];
      id v7 = [v6 uniqueID];
      [v2 sendAppAckWithGUID:v4 toDestination:v5 forAccountWithUniqueID:v7 connectionType:v3];
    }
  }
  if (!*(unsigned char *)(a1 + 89) && (*(void *)(a1 + 64) || *(void *)(a1 + 72)))
  {
    id v15 = [*(id *)(a1 + 32) daemonController];
    id v8 = [*(id *)(a1 + 48) storageGuid];
    int v9 = [*(id *)(a1 + 48) outgoingResponseIdentifier];
    int v10 = [*(id *)(*(void *)(a1 + 32) + 40) _internal];
    __int16 v11 = [v10 uniqueID];
    uint64_t v12 = *(void *)(a1 + 72);
    __int16 v13 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 80), "length"));
    id v14 = [*(id *)(a1 + 48) priority];
    objc_msgSend(v15, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v8, v9, v11, v12, v13, v14, objc_msgSend(*(id *)(a1 + 48), "broadcastID"), objc_msgSend(*(id *)(a1 + 48), "connectionType"));
  }
}

void sub_19197E650(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 incomingAccessoryData:a1[5] fromURI:a1[6] context:a1[7]];
  }
}

void sub_19197E6D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v2 = [*(id *)(a1 + 32) connectionType];
    uint64_t v3 = [*(id *)(a1 + 40) daemonController];
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [*(id *)(a1 + 56) prefixedURI];
    uint64_t v6 = [*(id *)(*(void *)(a1 + 40) + 40) _internal];
    id v7 = [v6 uniqueID];
    [v3 sendAppAckWithGUID:v4 toDestination:v5 forAccountWithUniqueID:v7 connectionType:v2];
  }
  if (*(void *)(a1 + 64) || *(void *)(a1 + 72))
  {
    id v15 = [*(id *)(a1 + 40) daemonController];
    id v8 = [*(id *)(a1 + 32) storageGuid];
    int v9 = [*(id *)(a1 + 32) outgoingResponseIdentifier];
    int v10 = [*(id *)(*(void *)(a1 + 40) + 40) _internal];
    __int16 v11 = [v10 uniqueID];
    uint64_t v12 = *(void *)(a1 + 72);
    __int16 v13 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 80), "length"));
    id v14 = [*(id *)(a1 + 32) priority];
    objc_msgSend(v15, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v8, v9, v11, v12, v13, v14, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));
  }
}

void sub_19197ED0C(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 incomingAccessoryReportMessage:a1[5] accessoryID:a1[6] controllerID:a1[7] context:a1[8]];
  }
}

void sub_19197ED8C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v2 = [*(id *)(a1 + 32) connectionType];
    uint64_t v3 = [*(id *)(a1 + 40) daemonController];
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [*(id *)(a1 + 56) prefixedURI];
    uint64_t v6 = [*(id *)(*(void *)(a1 + 40) + 40) _internal];
    id v7 = [v6 uniqueID];
    [v3 sendAppAckWithGUID:v4 toDestination:v5 forAccountWithUniqueID:v7 connectionType:v2];
  }
  if (*(void *)(a1 + 64) || *(void *)(a1 + 72))
  {
    id v14 = [*(id *)(a1 + 40) daemonController];
    id v8 = [*(id *)(a1 + 32) storageGuid];
    int v9 = [*(id *)(a1 + 32) outgoingResponseIdentifier];
    int v10 = [*(id *)(*(void *)(a1 + 40) + 40) _internal];
    __int16 v11 = [v10 uniqueID];
    uint64_t v12 = *(void *)(a1 + 72);
    __int16 v13 = [*(id *)(a1 + 32) priority];
    objc_msgSend(v14, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v8, v9, v11, v12, 0, v13, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));
  }
}

void sub_19197F148(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 incomingInvitation:a1[5] fromURI:a1[6] context:a1[7]];
  }
}

void sub_19197F3D8(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 incomingInvitationUpdate:a1[5] fromURI:a1[6] context:a1[7]];
  }
}

void sub_19197FB44(void *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v4 = [*(id *)(a1[4] + 16) object];
    [v3 connection:v4 incomingProtobuf:a1[5] fromURI:a1[6] context:a1[7]];

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v5 = +[IDSLogging IDSConnection];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 138412546;
        id v7 = @"(unknown)";
        __int16 v8 = 2112;
        id v9 = v3;
        _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, " => Handed protobuf ID %@ to delegate: %@", (uint8_t *)&v6, 0x16u);
      }
    }
  }
}

void sub_19197FC70(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(unsigned char *)(a1 + 89))
    {
      uint64_t v2 = [*(id *)(a1 + 32) directMessageConnection];
      [v2 sendAppAckWithGUID:*(void *)(a1 + 40)];
    }
    else
    {
      uint64_t v3 = [*(id *)(a1 + 48) connectionType];
      uint64_t v2 = [*(id *)(a1 + 32) daemonController];
      uint64_t v4 = *(void *)(a1 + 40);
      id v5 = [*(id *)(a1 + 56) prefixedURI];
      int v6 = [*(id *)(*(void *)(a1 + 32) + 40) _internal];
      id v7 = [v6 uniqueID];
      [v2 sendAppAckWithGUID:v4 toDestination:v5 forAccountWithUniqueID:v7 connectionType:v3];
    }
  }
  if (!*(unsigned char *)(a1 + 89) && (*(void *)(a1 + 64) || *(void *)(a1 + 72)))
  {
    id v17 = [*(id *)(a1 + 32) daemonController];
    __int16 v8 = [*(id *)(a1 + 48) storageGuid];
    id v9 = [*(id *)(a1 + 48) outgoingResponseIdentifier];
    uint64_t v10 = [*(id *)(*(void *)(a1 + 32) + 40) _internal];
    __int16 v11 = [v10 uniqueID];
    uint64_t v12 = NSNumber;
    uint64_t v13 = *(void *)(a1 + 72);
    id v14 = [*(id *)(a1 + 80) data];
    id v15 = objc_msgSend(v12, "numberWithUnsignedInteger:", objc_msgSend(v14, "length"));
    __int16 v16 = [*(id *)(a1 + 48) priority];
    objc_msgSend(v17, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v8, v9, v11, v13, v15, v16, objc_msgSend(*(id *)(a1 + 48), "broadcastID"), objc_msgSend(*(id *)(a1 + 48), "connectionType"));
  }
}

void sub_1919803A0(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 didFlushCacheForRemoteURI:a1[5] fromURI:a1[6] guid:a1[7]];
  }
}

void sub_1919805BC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 16) object];
    [v4 connection:v3 didFlushCacheForKTPeerURI:*(void *)(a1 + 40)];
  }
}

void sub_191980950(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 incomingPendingMessageFromURI:a1[5] context:a1[6]];
  }
}

void sub_191980D24(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 incomingPendingResourceWithMetadata:a1[5] guid:a1[6] fromURI:a1[7] context:a1[8]];
  }
}

void sub_191981248(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 account:*(void *)(a1[4] + 40) sessionInviteReceived:a1[5] fromID:a1[6] transportType:a1[7] options:a1[8] context:a1[9] messageContext:a1[10]];
  }
}

void sub_191981564(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 16) object];
    [v4 connection:v3 account:*(void *)(a1[4] + 40) receivedGroupSessionParticipantUpdate:a1[5] context:a1[6]];
  }
}

void sub_19198181C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 16) object];
    [v4 connection:v3 account:*(void *)(*(void *)(a1 + 32) + 40) receivedGroupSessionParticipantDataUpdate:*(void *)(a1 + 40)];
  }
}

void sub_1919819FC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 16) object];
    [v4 connection:v3 didHintCheckingTransportLogWithReason:*(void *)(a1 + 40)];
  }
}

void sub_191981BD8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

uint64_t sub_191981C64()
{
  qword_1E92DE2B8 = objc_alloc_init(_IDSSessionStore);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191981F44()
{
  qword_1EB2BD810 = objc_alloc_init(IDSDaemonProtocolController);

  return MEMORY[0x1F41817F8]();
}

void sub_1919822D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_sync_exit(v17);
  _Unwind_Resume(a1);
}

void sub_191982318(uint64_t a1)
{
  uint64_t v2 = +[IDSLogging DaemonProxy];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Invalidation Handled", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setConnection:0];
}

void sub_1919823A4()
{
  id v0 = +[IDSLogging DaemonProxy];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "Interruption Handled", v1, 2u);
  }
}

void sub_191982660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191982678(uint64_t a1, void *a2)
{
  uint64_t result = [a2 count];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result != 0;
  return result;
}

void sub_19198283C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 addObject:*(void *)(a1 + 32)];
  if (IMShouldLog() && [v3 count]) {
    sub_1919828B0(v3);
  }
}

void sub_1919828B0(void *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [MEMORY[0x1E4F6C3B8] watchPairing];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 138412290;
    id v4 = v1;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Unacknowledged IDSServiceDelegate objects: %@", (uint8_t *)&v3, 0xCu);
  }
}

void sub_191982C08(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 removeObject:*(void *)(a1 + 32)];
  if (IMShouldLog() && [v3 count]) {
    sub_1919828B0(v3);
  }
}

void sub_191982D68(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (IMShouldLog() && [v2 count]) {
    sub_1919828B0(v2);
  }
  [v2 removeAllObjects];
}

dispatch_data_t sub_191982E44(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1 - (void)a1 + a2;
  *((void *)&v4 + 1) = (v3 - 1);
  *(void *)&long long v4 = v3 - 1485;
  switch((unint64_t)(v4 >> 2))
  {
    case 0uLL:
      uint64_t v5 = v2 + a2;
      uint64_t v6 = a1[2] - a2;
      id v7 = sub_191982FE4;
      goto LABEL_7;
    case 1uLL:
      uint64_t v5 = v2 + a2;
      uint64_t v6 = a1[2] - a2;
      id v7 = sub_191982FBC;
      goto LABEL_7;
    case 2uLL:
      uint64_t v5 = v2 + a2;
      uint64_t v6 = a1[2] - a2;
      id v7 = sub_191982FD0;
      goto LABEL_7;
    case 3uLL:
      uint64_t v5 = v2 + a2;
      uint64_t v6 = a1[2] - a2;
      id v7 = sub_191982FA8;
LABEL_7:
      dispatch_data_t result = (dispatch_data_t)MEMORY[0x1F40CBA28](v5, v6, 0, v7);
      break;
    default:
      __int16 v8 = (const void *)(v2 + a2);
      size_t v9 = a1[2] - a2;
      destructor[0] = MEMORY[0x1E4F143A8];
      destructor[1] = 3221225472;
      destructor[2] = sub_191982FF8;
      destructor[3] = &unk_1E5729360;
      destructor[4] = a1;
      dispatch_data_t result = dispatch_data_create(v8, v9, 0, destructor);
      break;
  }
  return result;
}

uint64_t sub_191982FA8()
{
  return _IDSLinkPacketBufferRelease();
}

uint64_t sub_191982FBC()
{
  return _IDSLinkPacketBufferRelease();
}

uint64_t sub_191982FD0()
{
  return _IDSLinkPacketBufferRelease();
}

uint64_t sub_191982FE4()
{
  return _IDSLinkPacketBufferRelease();
}

uint64_t sub_191982FF8()
{
  return _IDSLinkPacketBufferRelease();
}

void sub_19198300C(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  __int16 v8 = a2;
  id v9 = a3;
  if (v7)
  {
    v7[2](v7, v9);
  }
  else if (v8)
  {
    v8[2](v8, v9, a4);
  }
  else
  {
    uint64_t v10 = +[IDSTransportLog IDSDataChannels];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v11 = 0;
      _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Warning! No write completion handler to invoke.", v11, 2u);
    }
  }
}

void IDSLocalPairingAddPairedDevice(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A33A14();
  }
  __int16 v8 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    uint64_t v19 = "void IDSLocalPairingAddPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    uint64_t v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v9;
    __int16 v28 = 2080;
    uint64_t v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  uint64_t v10 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v11 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    uint64_t v19 = "void IDSLocalPairingAddPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    uint64_t v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v11;
    __int16 v28 = 2080;
    uint64_t v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  uint64_t v12 = sub_191983488(v6, v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_191983648;
  v15[3] = &unk_1E572B640;
  id v16 = v5;
  id v17 = v12;
  id v13 = v12;
  id v14 = v5;
  sub_191983584(v15, v13);
}

id sub_191983488(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!v4)
  {
    id v4 = (id)MEMORY[0x1E4F14428];
    id v5 = MEMORY[0x1E4F14428];
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_1919877D4;
  v15[3] = &unk_1E57298A8;
  if (v3) {
    id v6 = v3;
  }
  else {
    id v6 = &unk_1EE246A48;
  }
  id v16 = v4;
  id v17 = v6;
  id v7 = v4;
  id v8 = v6;
  id v9 = (void *)MEMORY[0x192FE03B0](v15);
  id v13 = (void *)MEMORY[0x192FE03B0](v9, v10, v11, v12);

  return v13;
}

void sub_191983584(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1919879F8;
  v7[3] = &unk_1E572A398;
  id v8 = v4;
  id v9 = v3;
  id v5 = v3;
  id v6 = v4;
  +[IDSXPCDaemonController performDaemonControllerTask:v7];
}

uint64_t sub_191983648(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_addPairedDevice_completion_);
}

void IDSLocalPairingAddPairedDeviceWithInfo(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A33A40();
  }
  id v8 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    uint64_t v19 = "void IDSLocalPairingAddPairedDeviceWithInfo(IDSLocalPairingAddPairedDeviceInfo *__strong, __strong IDSLocalPai"
          "ringCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    uint64_t v21 = "info";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v9;
    __int16 v28 = 2080;
    uint64_t v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  uint64_t v10 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    uint64_t v19 = "void IDSLocalPairingAddPairedDeviceWithInfo(IDSLocalPairingAddPairedDeviceInfo *__strong, __strong IDSLocalPai"
          "ringCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    uint64_t v21 = "info";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v11;
    __int16 v28 = 2080;
    uint64_t v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  uint64_t v12 = sub_191983488(v6, v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_1919838FC;
  v15[3] = &unk_1E572B640;
  id v16 = v5;
  id v17 = v12;
  id v13 = v12;
  id v14 = v5;
  sub_191983584(v15, v13);
}

uint64_t sub_1919838FC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_addPairedDeviceWithInfo_completion_);
}

void IDSLocalPairingUpdatePairedDevicePairingType(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  id v9 = a4;
  if (_IDSRunningInDaemon()) {
    sub_191A33A6C();
  }
  uint64_t v10 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = [NSNumber numberWithInteger:a2];
    uint64_t v12 = (void *)MEMORY[0x192FE03B0](v8);
    *(_DWORD *)long long buf = 136317186;
    __int16 v24 = "void IDSLocalPairingUpdatePairedDevicePairingType(NSUUID *__strong, IDSPairingType, __strong IDSLocalPairingCo"
          "mpletionBlock, __strong dispatch_queue_t)";
    __int16 v25 = 2080;
    __int16 v26 = "cbuuid";
    __int16 v27 = 2112;
    id v28 = v7;
    __int16 v29 = 2080;
    __int16 v30 = "@(pairingType)";
    __int16 v31 = 2112;
    uint64_t v32 = v11;
    __int16 v33 = 2080;
    long long v34 = "block";
    __int16 v35 = 2048;
    long long v36 = v12;
    __int16 v37 = 2080;
    id v38 = "queue";
    __int16 v39 = 2048;
    id v40 = v9;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x5Cu);
  }
  id v13 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = [NSNumber numberWithInteger:a2];
    id v15 = (void *)MEMORY[0x192FE03B0](v8);
    *(_DWORD *)long long buf = 136317186;
    __int16 v24 = "void IDSLocalPairingUpdatePairedDevicePairingType(NSUUID *__strong, IDSPairingType, __strong IDSLocalPairingCo"
          "mpletionBlock, __strong dispatch_queue_t)";
    __int16 v25 = 2080;
    __int16 v26 = "cbuuid";
    __int16 v27 = 2112;
    id v28 = v7;
    __int16 v29 = 2080;
    __int16 v30 = "@(pairingType)";
    __int16 v31 = 2112;
    uint64_t v32 = v14;
    __int16 v33 = 2080;
    long long v34 = "block";
    __int16 v35 = 2048;
    long long v36 = v15;
    __int16 v37 = 2080;
    id v38 = "queue";
    __int16 v39 = 2048;
    id v40 = v9;
    _os_log_impl(&dword_19190B000, v13, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x5Cu);
  }
  id v16 = sub_191983488(v8, v9);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = sub_191983C38;
  v19[3] = &unk_1E572B668;
  id v21 = v8;
  uint64_t v22 = a2;
  id v20 = v7;
  id v17 = v8;
  id v18 = v7;
  sub_191983584(v19, v16);
}

uint64_t sub_191983C38(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_updatePairedDevice_pairingType_completion_);
}

void IDSLocalPairingConnectPairedDevice(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A33A98();
  }
  id v8 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    uint64_t v19 = "void IDSLocalPairingConnectPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    id v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v9;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  uint64_t v10 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    uint64_t v19 = "void IDSLocalPairingConnectPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    id v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v11;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  uint64_t v12 = sub_191983488(v6, v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_191983EF0;
  v15[3] = &unk_1E572B640;
  id v16 = v5;
  id v17 = v12;
  id v13 = v12;
  id v14 = v5;
  sub_191983584(v15, v13);
}

uint64_t sub_191983EF0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_connectPairedDeviceWithID_completion_);
}

void IDSLocalPairingSetupCompletedForPairedDevice(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A33AC4();
  }
  id v8 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    uint64_t v19 = "void IDSLocalPairingSetupCompletedForPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, _"
          "_strong dispatch_queue_t)";
    __int16 v20 = 2080;
    id v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v9;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  uint64_t v10 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    uint64_t v19 = "void IDSLocalPairingSetupCompletedForPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, _"
          "_strong dispatch_queue_t)";
    __int16 v20 = 2080;
    id v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v11;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  uint64_t v12 = sub_191983488(v6, v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_1919841A4;
  v15[3] = &unk_1E572B640;
  id v16 = v5;
  id v17 = v12;
  id v13 = v12;
  id v14 = v5;
  sub_191983584(v15, v13);
}

uint64_t sub_1919841A4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setupCompletedForPairedDeviceWithID_completion_);
}

void IDSLocalPairingSwitchActivePairedDevice(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A33AF0();
  }
  id v8 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    uint64_t v19 = "void IDSLocalPairingSwitchActivePairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __stro"
          "ng dispatch_queue_t)";
    __int16 v20 = 2080;
    id v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v9;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  uint64_t v10 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    uint64_t v19 = "void IDSLocalPairingSwitchActivePairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __stro"
          "ng dispatch_queue_t)";
    __int16 v20 = 2080;
    id v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v11;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  uint64_t v12 = sub_191983488(v6, v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_191984458;
  v15[3] = &unk_1E572B640;
  id v16 = v5;
  id v17 = v12;
  id v13 = v12;
  id v14 = v5;
  sub_191983584(v15, v13);
}

uint64_t sub_191984458(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_switchActivePairedDeviceWithID_completion_);
}

void IDSLocalPairingDisconnectActivePairedDevice(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A33B1C();
  }
  id v5 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)MEMORY[0x192FE03B0](v3);
    *(_DWORD *)long long buf = 136316162;
    id v14 = "void IDSLocalPairingDisconnectActivePairedDevice(__strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v15 = 2080;
    id v16 = "block";
    __int16 v17 = 2048;
    id v18 = v6;
    __int16 v19 = 2080;
    __int16 v20 = "queue";
    __int16 v21 = 2048;
    id v22 = v4;
    _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);
  }
  id v7 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = (void *)MEMORY[0x192FE03B0](v3);
    *(_DWORD *)long long buf = 136316162;
    id v14 = "void IDSLocalPairingDisconnectActivePairedDevice(__strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v15 = 2080;
    id v16 = "block";
    __int16 v17 = 2048;
    id v18 = v8;
    __int16 v19 = 2080;
    __int16 v20 = "queue";
    __int16 v21 = 2048;
    id v22 = v4;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);
  }
  id v9 = sub_191983488(v3, v4);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1919846AC;
  v11[3] = &unk_1E572B690;
  id v12 = v9;
  id v10 = v9;
  sub_191983584(v11, v10);
}

uint64_t sub_1919846AC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_disconnectActivePairedDevice_);
}

void IDSLocalPairingRedeliverMessages(void *a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = [v5 uniqueIDOverride];
  if (_IDSRunningInDaemon()) {
    sub_191A33B48();
  }
  id v9 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v20 = "void IDSLocalPairingRedeliverMessages(IDSDevice *__strong, __strong IDSLocalPairingCompletionBlock, __strong d"
          "ispatch_queue_t)";
    __int16 v21 = 2080;
    id v22 = "deviceUniqueID";
    __int16 v23 = 2112;
    __int16 v24 = v8;
    __int16 v25 = 2080;
    __int16 v26 = "block";
    __int16 v27 = 2048;
    __int16 v28 = v10;
    __int16 v29 = 2080;
    __int16 v30 = "queue";
    __int16 v31 = 2048;
    id v32 = v7;
    _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  uint64_t v11 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v20 = "void IDSLocalPairingRedeliverMessages(IDSDevice *__strong, __strong IDSLocalPairingCompletionBlock, __strong d"
          "ispatch_queue_t)";
    __int16 v21 = 2080;
    id v22 = "deviceUniqueID";
    __int16 v23 = 2112;
    __int16 v24 = v8;
    __int16 v25 = 2080;
    __int16 v26 = "block";
    __int16 v27 = 2048;
    __int16 v28 = v12;
    __int16 v29 = 2080;
    __int16 v30 = "queue";
    __int16 v31 = 2048;
    id v32 = v7;
    _os_log_impl(&dword_19190B000, v11, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v13 = sub_191983488(v6, v7);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_191984974;
  v16[3] = &unk_1E572B640;
  id v17 = v8;
  id v18 = v13;
  id v14 = v13;
  id v15 = v8;
  sub_191983584(v16, v14);
}

uint64_t sub_191984974(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_redeliverMessagesForDevice_completion_);
}

void IDSLocalPairingDeletePairedDevice(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A33B74();
  }
  id v8 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v19 = "void IDSLocalPairingDeletePairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v9;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v10 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v19 = "void IDSLocalPairingDeletePairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v11;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v12 = sub_191983488(v6, v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_191984C28;
  v15[3] = &unk_1E572B640;
  id v16 = v5;
  id v17 = v12;
  id v13 = v12;
  id v14 = v5;
  sub_191983584(v15, v13);
}

uint64_t sub_191984C28(uint64_t a1, void *a2)
{
  return [a2 deletePairedDeviceWithID:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
}

void IDSLocalPairingUnpairStartForDevice(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A33BA0();
  }
  id v8 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v19 = "void IDSLocalPairingUnpairStartForDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong d"
          "ispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v9;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v10 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v19 = "void IDSLocalPairingUnpairStartForDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong d"
          "ispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v11;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v12 = sub_191983488(v6, v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_191984EDC;
  v15[3] = &unk_1E572B640;
  id v16 = v5;
  id v17 = v12;
  id v13 = v12;
  id v14 = v5;
  sub_191983584(v15, v13);
}

uint64_t sub_191984EDC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_unpairStartForDeviceWithID_completion_);
}

void IDSLocalPairingStopForDevice(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A33BCC();
  }
  id v8 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v19 = "void IDSLocalPairingStopForDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v9;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v10 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v19 = "void IDSLocalPairingStopForDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v11;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v12 = sub_191983488(v6, v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_191985190;
  v15[3] = &unk_1E572B640;
  id v16 = v5;
  id v17 = v12;
  id v13 = v12;
  id v14 = v5;
  sub_191983584(v15, v13);
}

uint64_t sub_191985190(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_stopLocalPairingForDeviceWithID_completion_);
}

void IDSLocalPairingUnpairForDevice(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A33BF8();
  }
  id v8 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v19 = "void IDSLocalPairingUnpairForDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v9;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v10 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v19 = "void IDSLocalPairingUnpairForDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v11;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v12 = sub_191983488(v6, v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_191985444;
  v15[3] = &unk_1E572B640;
  id v16 = v5;
  id v17 = v12;
  id v13 = v12;
  id v14 = v5;
  sub_191983584(v15, v13);
}

uint64_t sub_191985444(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_unpairDeviceWithID_completion_);
}

void IDSLocalPairingForgetPairedDevice(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A33C24();
  }
  id v8 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v19 = "void IDSLocalPairingForgetPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v9;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v10 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v19 = "void IDSLocalPairingForgetPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "cbuuid";
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2080;
    __int16 v25 = "block";
    __int16 v26 = 2048;
    __int16 v27 = v11;
    __int16 v28 = 2080;
    __int16 v29 = "queue";
    __int16 v30 = 2048;
    id v31 = v7;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v12 = sub_191983488(v6, v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_1919856F8;
  v15[3] = &unk_1E572B640;
  id v16 = v5;
  id v17 = v12;
  id v13 = v12;
  id v14 = v5;
  sub_191983584(v15, v13);
}

uint64_t sub_1919856F8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_forgetDeviceWithID_completion_);
}

void IDSLocalPairingGetPairingDevicesWithCompletionBlock(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A33C50();
  }
  id v5 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)MEMORY[0x192FE03B0](v3);
    *(_DWORD *)long long buf = 136316162;
    id v17 = "void IDSLocalPairingGetPairingDevicesWithCompletionBlock(__strong IDSLocalPairingPairedDevicesCompletionBlock,"
          " __strong dispatch_queue_t)";
    __int16 v18 = 2080;
    __int16 v19 = "block";
    __int16 v20 = 2048;
    __int16 v21 = v6;
    __int16 v22 = 2080;
    id v23 = "queue";
    __int16 v24 = 2048;
    id v25 = v4;
    _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);
  }
  id v7 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = (void *)MEMORY[0x192FE03B0](v3);
    *(_DWORD *)long long buf = 136316162;
    id v17 = "void IDSLocalPairingGetPairingDevicesWithCompletionBlock(__strong IDSLocalPairingPairedDevicesCompletionBlock,"
          " __strong dispatch_queue_t)";
    __int16 v18 = 2080;
    __int16 v19 = "block";
    __int16 v20 = 2048;
    __int16 v21 = v8;
    __int16 v22 = 2080;
    id v23 = "queue";
    __int16 v24 = 2048;
    id v25 = v4;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);
  }
  if (!v4)
  {
    id v4 = (id)MEMORY[0x1E4F14428];
    id v9 = MEMORY[0x1E4F14428];
  }
  if (!v3) {
    id v3 = &unk_1EE246588;
  }
  id v10 = sub_1919859C4(v3, v4);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_191985AC0;
  v14[3] = &unk_1E572B690;
  id v15 = v10;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_191985ACC;
  v12[3] = &unk_1E572A370;
  id v13 = v15;
  id v11 = v15;
  sub_191983584(v14, v12);
}

id sub_1919859C4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!v4)
  {
    id v4 = (id)MEMORY[0x1E4F14428];
    id v5 = MEMORY[0x1E4F14428];
  }
  id v6 = &unk_1EE245B88;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_191987A60;
  v15[3] = &unk_1E572B750;
  if (v3) {
    id v6 = v3;
  }
  id v16 = v4;
  id v17 = v6;
  id v7 = v6;
  id v8 = v4;
  id v9 = (void *)MEMORY[0x192FE03B0](v15);
  id v13 = (void *)MEMORY[0x192FE03B0](v9, v10, v11, v12);

  return v13;
}

uint64_t sub_191985AC0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_getPairingDevicesWithCompletion_);
}

uint64_t sub_191985ACC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IDSLocalPairingGetPairedDevicesWithCompletionBlock(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A33C7C();
  }
  id v5 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)MEMORY[0x192FE03B0](v3);
    *(_DWORD *)long long buf = 136316162;
    id v16 = "void IDSLocalPairingGetPairedDevicesWithCompletionBlock(__strong IDSLocalPairingPairedDevicesCompletionBlock, "
          "__strong dispatch_queue_t)";
    __int16 v17 = 2080;
    __int16 v18 = "block";
    __int16 v19 = 2048;
    __int16 v20 = v6;
    __int16 v21 = 2080;
    __int16 v22 = "queue";
    __int16 v23 = 2048;
    id v24 = v4;
    _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);
  }
  id v7 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = (void *)MEMORY[0x192FE03B0](v3);
    *(_DWORD *)long long buf = 136316162;
    id v16 = "void IDSLocalPairingGetPairedDevicesWithCompletionBlock(__strong IDSLocalPairingPairedDevicesCompletionBlock, "
          "__strong dispatch_queue_t)";
    __int16 v17 = 2080;
    __int16 v18 = "block";
    __int16 v19 = 2048;
    __int16 v20 = v8;
    __int16 v21 = 2080;
    __int16 v22 = "queue";
    __int16 v23 = 2048;
    id v24 = v4;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);
  }
  id v9 = sub_1919859C4(v3, v4);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_191985D80;
  v13[3] = &unk_1E572B690;
  id v14 = v9;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_191985D8C;
  v11[3] = &unk_1E572A370;
  id v12 = v14;
  id v10 = v14;
  sub_191983584(v13, v11);
}

uint64_t sub_191985D80(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_getPairedDevicesWithCompletion_);
}

uint64_t sub_191985D8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IDSLocalPairingGetPairingRecordsWithCompletionBlock(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A33CA8();
  }
  id v5 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)MEMORY[0x192FE03B0](v3);
    *(_DWORD *)long long buf = 136316162;
    *(void *)&uint8_t buf[4] = "void IDSLocalPairingGetPairingRecordsWithCompletionBlock(__strong IDSLocalPairingPairingRecords"
                         "CompletionBlock, __strong dispatch_queue_t)";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "block";
    *(_WORD *)&buf[22] = 2048;
    uint64_t v26 = v6;
    *(_WORD *)__int16 v27 = 2080;
    *(void *)&v27[2] = "queue";
    *(_WORD *)&v27[10] = 2048;
    *(void *)&v27[12] = v4;
    _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);
  }
  id v7 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = (void *)MEMORY[0x192FE03B0](v3);
    *(_DWORD *)long long buf = 136316162;
    *(void *)&uint8_t buf[4] = "void IDSLocalPairingGetPairingRecordsWithCompletionBlock(__strong IDSLocalPairingPairingRecords"
                         "CompletionBlock, __strong dispatch_queue_t)";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "block";
    *(_WORD *)&buf[22] = 2048;
    uint64_t v26 = v8;
    *(_WORD *)__int16 v27 = 2080;
    *(void *)&v27[2] = "queue";
    *(_WORD *)&v27[10] = 2048;
    *(void *)&v27[12] = v4;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);
  }
  if (v3)
  {
    if (!v4)
    {
      id v4 = (id)MEMORY[0x1E4F14428];
      id v9 = MEMORY[0x1E4F14428];
    }
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = sub_19198612C;
    v22[3] = &unk_1E572B6D8;
    id v4 = v4;
    id v23 = v4;
    id v24 = v3;
    id v10 = (void *)MEMORY[0x192FE03B0](v22);
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = sub_191986240;
    v20[3] = &unk_1E572B690;
    id v11 = v10;
    id v21 = v11;
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 3221225472;
    __int16 v17 = sub_19198637C;
    __int16 v18 = &unk_1E572A370;
    id v19 = v11;
    id v12 = v20;
    id v13 = &v15;
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_191987B4C;
    uint64_t v26 = &unk_1E572B778;
    *(void *)&v27[8] = v12;
    *(void *)&v27[16] = 0x4082C00000000000;
    *(void *)__int16 v27 = v13;
    id v14 = v11;
    +[IDSXPCDaemonController performDaemonControllerTask:](IDSXPCDaemonController, "performDaemonControllerTask:", buf, v15, v16, v17, v18);
  }
}

void sub_19198612C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_191986228;
  v15[3] = &unk_1E5729998;
  id v10 = *(NSObject **)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  id v16 = v7;
  id v17 = v8;
  id v18 = v9;
  id v19 = v11;
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v10, v15);
}

uint64_t sub_191986228(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_191986240(uint64_t a1, void *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1919862CC;
  v3[3] = &unk_1E572B700;
  id v4 = *(id *)(a1 + 32);
  [a2 getPairingRecordsWithCompletion:v3];
}

void sub_1919862CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = (void *)MEMORY[0x1E4F6C3B8];
  id v9 = a3;
  id v10 = a2;
  id v11 = [v8 NRPairing];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_191A33CD4((uint64_t)v7, v11);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19198637C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A33D4C((uint64_t)v3, v4);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IDSLocalPairingSetAllowedTrafficClassifiersForDevice(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = [v8 uniqueID];
  if (_IDSRunningInDaemon()) {
    sub_191A33DC4();
  }
  id v12 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = (void *)MEMORY[0x192FE03B0](v9);
    *(_DWORD *)long long buf = 136317186;
    uint64_t v25 = "void IDSLocalPairingSetAllowedTrafficClassifiersForDevice(NSSet *__strong, IDSDevice *__strong, __strong IDSLo"
          "calPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v26 = 2080;
    __int16 v27 = "classifiers";
    __int16 v28 = 2112;
    id v29 = v7;
    __int16 v30 = 2080;
    id v31 = "deviceUniqueID";
    __int16 v32 = 2112;
    uint64_t v33 = v11;
    __int16 v34 = 2080;
    __int16 v35 = "block";
    __int16 v36 = 2048;
    __int16 v37 = v13;
    __int16 v38 = 2080;
    __int16 v39 = "queue";
    __int16 v40 = 2048;
    id v41 = v10;
    _os_log_impl(&dword_19190B000, v12, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x5Cu);
  }
  id v14 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = (void *)MEMORY[0x192FE03B0](v9);
    *(_DWORD *)long long buf = 136317186;
    uint64_t v25 = "void IDSLocalPairingSetAllowedTrafficClassifiersForDevice(NSSet *__strong, IDSDevice *__strong, __strong IDSLo"
          "calPairingCompletionBlock, __strong dispatch_queue_t)";
    __int16 v26 = 2080;
    __int16 v27 = "classifiers";
    __int16 v28 = 2112;
    id v29 = v7;
    __int16 v30 = 2080;
    id v31 = "deviceUniqueID";
    __int16 v32 = 2112;
    uint64_t v33 = v11;
    __int16 v34 = 2080;
    __int16 v35 = "block";
    __int16 v36 = 2048;
    __int16 v37 = v15;
    __int16 v38 = 2080;
    __int16 v39 = "queue";
    __int16 v40 = 2048;
    id v41 = v10;
    _os_log_impl(&dword_19190B000, v14, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x5Cu);
  }
  id v16 = sub_191983488(v9, v10);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_191986728;
  v20[3] = &unk_1E572B728;
  id v21 = v11;
  id v22 = v7;
  id v23 = v16;
  id v17 = v16;
  id v18 = v7;
  id v19 = v11;
  sub_191983584(v20, v17);
}

uint64_t sub_191986728(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setAllowedTrafficClassifiersForDevice_classifiers_completion_);
}

void IDSLocalPairingGetAllowedTrafficClassifiersForDevice(void *a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = [v5 uniqueID];
  if (_IDSRunningInDaemon()) {
    sub_191A33DF0();
  }
  id v9 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    id v16 = "void IDSLocalPairingGetAllowedTrafficClassifiersForDevice(IDSDevice *__strong, __strong IDSLocalPairingTraffic"
          "ClassifiersCompletionBlock, __strong dispatch_queue_t)";
    __int16 v17 = 2080;
    id v18 = "deviceUniqueID";
    __int16 v19 = 2112;
    __int16 v20 = v8;
    __int16 v21 = 2080;
    id v22 = "block";
    __int16 v23 = 2048;
    id v24 = v10;
    __int16 v25 = 2080;
    __int16 v26 = "queue";
    __int16 v27 = 2048;
    __int16 v28 = v7;
    _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v11 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    id v16 = "void IDSLocalPairingGetAllowedTrafficClassifiersForDevice(IDSDevice *__strong, __strong IDSLocalPairingTraffic"
          "ClassifiersCompletionBlock, __strong dispatch_queue_t)";
    __int16 v17 = 2080;
    id v18 = "deviceUniqueID";
    __int16 v19 = 2112;
    __int16 v20 = v8;
    __int16 v21 = 2080;
    id v22 = "block";
    __int16 v23 = 2048;
    id v24 = v12;
    __int16 v25 = 2080;
    __int16 v26 = "queue";
    __int16 v27 = 2048;
    __int16 v28 = v7;
    _os_log_impl(&dword_19190B000, v11, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  if (v6 && v7)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1919869D4;
    block[3] = &unk_1E5728FD8;
    id v14 = v6;
    dispatch_async(v7, block);
  }
}

void sub_1919869D4(uint64_t a1)
{
  uint64_t v2 = +[IDSPairedDeviceManager sharedInstance];
  id v3 = [v2 allowedTrafficClassifiers];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IDSLocalPairingDropAllMessagesWithoutAnyAllowedTrafficClassifier(void *a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = [v5 uniqueID];
  if (_IDSRunningInDaemon()) {
    sub_191A33E1C();
  }
  id v9 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v20 = "void IDSLocalPairingDropAllMessagesWithoutAnyAllowedTrafficClassifier(IDSDevice *__strong, __strong IDSLocalPa"
          "iringCompletionBlock, __strong dispatch_queue_t)";
    __int16 v21 = 2080;
    id v22 = "deviceUniqueID";
    __int16 v23 = 2112;
    id v24 = v8;
    __int16 v25 = 2080;
    __int16 v26 = "block";
    __int16 v27 = 2048;
    __int16 v28 = v10;
    __int16 v29 = 2080;
    __int16 v30 = "queue";
    __int16 v31 = 2048;
    id v32 = v7;
    _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v11 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316674;
    __int16 v20 = "void IDSLocalPairingDropAllMessagesWithoutAnyAllowedTrafficClassifier(IDSDevice *__strong, __strong IDSLocalPa"
          "iringCompletionBlock, __strong dispatch_queue_t)";
    __int16 v21 = 2080;
    id v22 = "deviceUniqueID";
    __int16 v23 = 2112;
    id v24 = v8;
    __int16 v25 = 2080;
    __int16 v26 = "block";
    __int16 v27 = 2048;
    __int16 v28 = v12;
    __int16 v29 = 2080;
    __int16 v30 = "queue";
    __int16 v31 = 2048;
    id v32 = v7;
    _os_log_impl(&dword_19190B000, v11, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);
  }
  id v13 = sub_191983488(v6, v7);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_191986D08;
  v16[3] = &unk_1E572B640;
  id v17 = v8;
  id v18 = v13;
  id v14 = v13;
  id v15 = v8;
  sub_191983584(v16, v14);
}

uint64_t sub_191986D08(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_dropAllMessagesWithoutAnyAllowedClassifierForDevice_completion_);
}

void IDSLocalPairingReunionSyncStartedForServices(void *a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A33E48();
  }
  id v8 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316162;
    __int16 v19 = "void IDSLocalPairingReunionSyncStartedForServices(NSArray *__strong, __strong IDSLocalPairingCompletionBlock, "
          "__strong dispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "block";
    __int16 v22 = 2048;
    __int16 v23 = v9;
    __int16 v24 = 2080;
    __int16 v25 = "queue";
    __int16 v26 = 2048;
    id v27 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);
  }
  id v10 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316162;
    __int16 v19 = "void IDSLocalPairingReunionSyncStartedForServices(NSArray *__strong, __strong IDSLocalPairingCompletionBlock, "
          "__strong dispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "block";
    __int16 v22 = 2048;
    __int16 v23 = v11;
    __int16 v24 = 2080;
    __int16 v25 = "queue";
    __int16 v26 = 2048;
    id v27 = v7;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);
  }
  id v12 = sub_191983488(v6, v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_191986F90;
  v15[3] = &unk_1E572A990;
  id v16 = v5;
  id v17 = v12;
  id v13 = v5;
  id v14 = v12;
  +[IDSXPCDaemonController performDaemonControllerTask:v15];
}

void sub_191986F90(uint64_t a1, void *a2)
{
  id v3 = [a2 reunionSyncCollaboratorWithErrorHandler:*(void *)(a1 + 40)];
  [v3 reunionSyncStartedForServices:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

void IDSLocalPairingReunionSyncCompletedForServices(void *a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A33E74();
  }
  id v8 = +[IDSTransportLog NRPairing];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316162;
    __int16 v19 = "void IDSLocalPairingReunionSyncCompletedForServices(NSArray *__strong, __strong IDSLocalPairingCompletionBlock"
          ", __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "block";
    __int16 v22 = 2048;
    __int16 v23 = v9;
    __int16 v24 = 2080;
    __int16 v25 = "queue";
    __int16 v26 = 2048;
    id v27 = v7;
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);
  }
  id v10 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = (void *)MEMORY[0x192FE03B0](v6);
    *(_DWORD *)long long buf = 136316162;
    __int16 v19 = "void IDSLocalPairingReunionSyncCompletedForServices(NSArray *__strong, __strong IDSLocalPairingCompletionBlock"
          ", __strong dispatch_queue_t)";
    __int16 v20 = 2080;
    __int16 v21 = "block";
    __int16 v22 = 2048;
    __int16 v23 = v11;
    __int16 v24 = 2080;
    __int16 v25 = "queue";
    __int16 v26 = 2048;
    id v27 = v7;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);
  }
  id v12 = sub_191983488(v6, v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_191987264;
  v15[3] = &unk_1E572A990;
  id v16 = v5;
  id v17 = v12;
  id v13 = v5;
  id v14 = v12;
  +[IDSXPCDaemonController performDaemonControllerTask:v15];
}

void sub_191987264(uint64_t a1, void *a2)
{
  id v3 = [a2 reunionSyncCollaboratorWithErrorHandler:*(void *)(a1 + 40)];
  [v3 reunionSyncCompletedForServices:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

void sub_1919877D4(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)MEMORY[0x192FE03B0](*(void *)(a1 + 40));
    *(_DWORD *)long long buf = 134218242;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "About to call local pairing completion block { block: %p, error: %@ }", buf, 0x16u);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_191987924;
  v9[3] = &unk_1E5729880;
  id v6 = *(NSObject **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v10 = v3;
  id v11 = v7;
  id v8 = v3;
  dispatch_async(v6, v9);
}

uint64_t sub_191987924(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F6C3B8] NRPairing];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = (void *)MEMORY[0x192FE03B0](*(void *)(a1 + 40));
    int v5 = 134217984;
    id v6 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Calling local pairing completion block %p", (uint8_t *)&v5, 0xCu);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1919879F8(uint64_t a1, void *a2)
{
  id v3 = [a2 pairingCollaboratorWithErrorHandler:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_191987A60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_191987B34;
  block[3] = &unk_1E5729948;
  uint64_t v7 = *(NSObject **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_191987B34(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_191987B4C(uint64_t a1, void *a2)
{
  id v3 = [a2 pairingCollaboratorWithTimeout:*(void *)(a1 + 32) errorHandler:*(double *)(a1 + 48)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_191987C08()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2DC0];
  id v1 = (void *)qword_1EB2BD608;
  qword_1EB2BD608 = v0;

  id v49 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2943C8];
  [(id)qword_1EB2BD608 setInterface:v49 forSelector:sel_setupOffGridMessengerClient_withUUID_forService_ argumentIndex:0 ofReply:0];
  uint64_t v2 = (void *)qword_1EB2BD608;
  id v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_msgSend(v3, "setWithObjects:", v4, v5, v6, objc_opt_class(), 0);
  [v2 setClasses:v7 forSelector:sel_resultsForDestinationURIs_senderURI_service_options_completion_ argumentIndex:0 ofReply:0];

  id v8 = (void *)qword_1EB2BD608;
  id v9 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  id v12 = objc_msgSend(v9, "setWithObjects:", v10, v11, objc_opt_class(), 0);
  [v8 setClasses:v12 forSelector:sel_resultsForDestinationURIs_senderURI_service_options_completion_ argumentIndex:0 ofReply:1];

  id v13 = (void *)qword_1EB2BD608;
  id v14 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  [v13 setClasses:v14 forSelector:sel_encryptOffGridMessage_completion_ argumentIndex:0 ofReply:0];

  id v15 = (void *)qword_1EB2BD608;
  uint64_t v16 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v17 = objc_opt_class();
  id v18 = objc_msgSend(v16, "setWithObjects:", v17, objc_opt_class(), 0);
  [v15 setClasses:v18 forSelector:sel_encryptOffGridMessage_completion_ argumentIndex:0 ofReply:1];

  __int16 v19 = (void *)qword_1EB2BD608;
  __int16 v20 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  [v19 setClasses:v20 forSelector:sel_decryptOffGridMessage_completion_ argumentIndex:0 ofReply:0];

  __int16 v21 = (void *)qword_1EB2BD608;
  __int16 v22 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v23 = objc_opt_class();
  __int16 v24 = objc_msgSend(v22, "setWithObjects:", v23, objc_opt_class(), 0);
  [v21 setClasses:v24 forSelector:sel_decryptOffGridMessage_completion_ argumentIndex:0 ofReply:1];

  __int16 v25 = (void *)qword_1EB2BD608;
  __int16 v26 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v27 = objc_opt_class();
  uint64_t v28 = objc_msgSend(v26, "setWithObjects:", v27, objc_opt_class(), 0);
  [v25 setClasses:v28 forSelector:sel_sendEncryptedOffGridMessage_options_completion_ argumentIndex:0 ofReply:0];

  __int16 v29 = (void *)qword_1EB2BD608;
  __int16 v30 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v31 = objc_opt_class();
  id v32 = objc_msgSend(v30, "setWithObjects:", v31, objc_opt_class(), 0);
  [v29 setClasses:v32 forSelector:sel_sendEncryptedOffGridMessage_options_completion_ argumentIndex:0 ofReply:1];

  uint64_t v33 = (void *)qword_1EB2BD608;
  __int16 v34 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v35 = objc_opt_class();
  uint64_t v36 = objc_opt_class();
  __int16 v37 = objc_msgSend(v34, "setWithObjects:", v35, v36, objc_opt_class(), 0);
  [v33 setClasses:v37 forSelector:sel_sendFetchRequestForHandles_fromHandle_completion_ argumentIndex:0 ofReply:0];

  __int16 v38 = (void *)qword_1EB2BD608;
  __int16 v39 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v40 = objc_opt_class();
  uint64_t v41 = objc_opt_class();
  uint64_t v42 = objc_opt_class();
  uint64_t v43 = objc_msgSend(v39, "setWithObjects:", v40, v41, v42, objc_opt_class(), 0);
  [v38 setClasses:v43 forSelector:sel_sendFetchRequestForHandles_fromHandle_completion_ argumentIndex:0 ofReply:1];

  uint64_t v44 = (void *)qword_1EB2BD608;
  uint64_t v45 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v46 = objc_opt_class();
  uint64_t v47 = objc_opt_class();
  uint64_t v48 = objc_msgSend(v45, "setWithObjects:", v46, v47, objc_opt_class(), 0);
  [v44 setClasses:v48 forSelector:sel_donateHandlesForMessagingKeys_fromURI_options_completion_ argumentIndex:0 ofReply:0];
}

void sub_191988128()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2E20];
  id v1 = (void *)qword_1EB2BD610;
  qword_1EB2BD610 = v0;

  id v61 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE299C30];
  uint64_t v2 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_msgSend(v2, "setWithObjects:", v3, v4, objc_opt_class(), 0);
  [v61 setClasses:v5 forSelector:sel_contactInfoUpdated_ argumentIndex:0 ofReply:0];

  [(id)qword_1EB2BD610 setInterface:v61 forSelector:sel_setupOffGridStateManagerClient_withUUID_completion_ argumentIndex:0 ofReply:0];
  uint64_t v6 = (void *)qword_1EB2BD610;
  uint64_t v7 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  [v6 setClasses:v7 forSelector:sel_fetchCurrentOffGridMode_ argumentIndex:1 ofReply:1];

  id v8 = (void *)qword_1EB2BD610;
  id v9 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  [v8 setClasses:v9 forSelector:sel_fetchCurrentPublishStatus_ argumentIndex:1 ofReply:1];

  uint64_t v10 = (void *)qword_1EB2BD610;
  uint64_t v11 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  [v10 setClasses:v11 forSelector:sel_setOffGridMode_options_completion_ argumentIndex:0 ofReply:0];

  id v12 = (void *)qword_1EB2BD610;
  id v13 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v14 = objc_opt_class();
  id v15 = objc_msgSend(v13, "setWithObjects:", v14, objc_opt_class(), 0);
  [v12 setClasses:v15 forSelector:sel_invitedHandlesWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v16 = (void *)qword_1EB2BD610;
  uint64_t v17 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v18 = objc_opt_class();
  uint64_t v19 = objc_opt_class();
  __int16 v20 = objc_msgSend(v17, "setWithObjects:", v18, v19, objc_opt_class(), 0);
  [v16 setClasses:v20 forSelector:sel_inviteHandles_fromSenderHandle_withDictionaryPayload_completion_ argumentIndex:0 ofReply:0];

  __int16 v21 = (void *)qword_1EB2BD610;
  __int16 v22 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v23 = objc_opt_class();
  uint64_t v24 = objc_opt_class();
  uint64_t v25 = objc_opt_class();
  __int16 v26 = objc_msgSend(v22, "setWithObjects:", v23, v24, v25, objc_opt_class(), 0);
  [v21 setClasses:v26 forSelector:sel_inviteHandles_fromSenderHandle_withDictionaryPayload_completion_ argumentIndex:0 ofReply:1];

  uint64_t v27 = (void *)qword_1EB2BD610;
  uint64_t v28 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v29 = objc_opt_class();
  __int16 v30 = objc_msgSend(v28, "setWithObjects:", v29, objc_opt_class(), 0);
  [v27 setClasses:v30 forSelector:sel_removeInvitedHandles_completion_ argumentIndex:0 ofReply:0];

  uint64_t v31 = (void *)qword_1EB2BD610;
  id v32 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v33 = objc_opt_class();
  uint64_t v34 = objc_opt_class();
  uint64_t v35 = objc_msgSend(v32, "setWithObjects:", v33, v34, objc_opt_class(), 0);
  [v31 setClasses:v35 forSelector:sel_removeInvitedHandles_completion_ argumentIndex:0 ofReply:1];

  uint64_t v36 = (void *)qword_1EB2BD610;
  __int16 v37 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v38 = objc_opt_class();
  uint64_t v39 = objc_opt_class();
  uint64_t v40 = objc_msgSend(v37, "setWithObjects:", v38, v39, objc_opt_class(), 0);
  [v36 setClasses:v40 forSelector:sel_removeAllInvitedHandlesWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v41 = (void *)qword_1EB2BD610;
  uint64_t v42 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  [v41 setClasses:v42 forSelector:sel_fetchStewieAvailabilityWithCompletion_ argumentIndex:2 ofReply:1];

  uint64_t v43 = (void *)qword_1EB2BD610;
  uint64_t v44 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  [v43 setClasses:v44 forSelector:sel_connectStewieWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v45 = (void *)qword_1EB2BD610;
  uint64_t v46 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  [v45 setClasses:v46 forSelector:sel_disconnectStewieWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v47 = (void *)qword_1EB2BD610;
  uint64_t v48 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v49 = objc_opt_class();
  uint64_t v50 = objc_opt_class();
  uint64_t v51 = objc_opt_class();
  uint64_t v52 = objc_opt_class();
  long long v53 = objc_msgSend(v48, "setWithObjects:", v49, v50, v51, v52, objc_opt_class(), 0);
  [v47 setClasses:v53 forSelector:sel_fetchContactsOfType_completion_ argumentIndex:0 ofReply:1];

  long long v54 = (void *)qword_1EB2BD610;
  long long v55 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v56 = objc_opt_class();
  uint64_t v57 = objc_opt_class();
  uint64_t v58 = objc_opt_class();
  uint64_t v59 = objc_opt_class();
  long long v60 = objc_msgSend(v55, "setWithObjects:", v56, v57, v58, v59, objc_opt_class(), 0);
  [v54 setClasses:v60 forSelector:sel_fetchContactsOfType_phoneNumbersOnly_completion_ argumentIndex:0 ofReply:1];
}

uint64_t sub_1919887C8()
{
  qword_1EB2BD818 = objc_alloc_init(_IDSDeviceConnectionActiveMap);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_191989674(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0xFFFFFFFFLL, *(void *)(a1 + 32));
}

void sub_19198968C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 56))
  {
    *(unsigned char *)(v1 + 125) = 1;
    uint64_t v3 = (void *)MEMORY[0x192FE03B0](*(void *)(*(void *)(a1 + 32) + 56));
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = v4[8];
    uint64_t v7 = MEMORY[0x1E4F143A8];
    uint64_t v8 = 3221225472;
    id v9 = sub_191989764;
    uint64_t v10 = &unk_1E5729230;
    uint64_t v11 = v4;
    id v12 = v3;
    id v6 = v3;
    dispatch_async(v5, &v7);
    objc_msgSend(*(id *)(a1 + 32), "_cleanupCompletionBlock", v7, v8, v9, v10);
  }
}

void sub_191989764(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  uint64_t v2 = +[IDSTransportLog IDSDeviceConnection];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v8 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "<%p> _IDSDeviceConnection has timed out waiting for a socket.", buf, 0xCu);
  }

  id v4 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v5 = objc_msgSend(v4, "initWithObjectsAndKeys:", @"Socket open timed out", *MEMORY[0x1E4F28568], 0);
  id v6 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"com.apple.identityservices.error" code:20 userInfo:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_19198AC00(uint64_t a1)
{
  kdebug_trace();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

uint64_t sub_19198AD54(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = +[IDSTransportLog IDSDeviceConnection];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 120);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Daemon died, closing socket: %d", (uint8_t *)v5, 8u);
  }

  return [*(id *)(a1 + 32) _close];
}

id sub_19198B878(uint64_t a1)
{
  if (*(void *)(a1 + 72))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v2 = *(void *)(a1 + 48);
      if (v2) {
        (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    if (*(unsigned char *)(a1 + 81))
    {
      uint64_t v3 = *(void *)(a1 + 64);
      if (v3) {
        (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
      }
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  id v4 = self;
  return self;
}

void sub_19198B9E4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountRemoved:*(void *)(a1 + 40)];
  }
}

void sub_19198BA60(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountAdded:*(void *)(a1 + 40)];
  }
}

void sub_19198BADC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountUpdated:*(void *)(a1 + 40)];
  }
}

uint64_t sub_19198BB58(uint64_t a1, void *a2)
{
  return [a2 _internal];
}

uint64_t sub_19198BB60(uint64_t a1, void *a2)
{
  return [a2 _internal];
}

id sub_19198C7D0(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [v2 objectForKey:@"uri"];
  id v4 = [v2 objectForKey:@"status"];

  LODWORD(v2) = [v4 intValue];
  if (v2 == 5051)
  {
    uint64_t v5 = [v3 _stripFZIDPrefix];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_19198CBD4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountRemoved:*(void *)(a1 + 40)];
  }
}

void sub_19198CC50(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountAdded:*(void *)(a1 + 40)];
  }
}

void sub_19198CCCC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountEnabled:*(void *)(a1 + 40)];
  }
}

void sub_19198D5EC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountAdded:*(void *)(a1 + 40)];
  }
}

void sub_19198D668(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountUpdated:*(void *)(a1 + 40)];
  }
}

void sub_19198D944(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountRemoved:*(void *)(a1 + 40)];
  }
}

void sub_19198DDF0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountUpdated:*(void *)(a1 + 40)];
  }
}

void sub_19198DE6C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountAdded:*(void *)(a1 + 40)];
  }
}

uint64_t sub_19198E788(uint64_t a1, void *a2)
{
  return [a2 _internal];
}

void sub_19198E790(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = [a2 _internal];
  uint64_t v3 = [v4 uniqueID];
  [v2 addObject:v3];
}

void sub_19198E7F8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountUpdated:*(void *)(a1 + 40)];
  }
}

void sub_19198E874(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountAdded:*(void *)(a1 + 40)];
  }
}

void sub_19198E8F0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountRemoved:*(void *)(a1 + 40)];
  }
}

uint64_t sub_19198ECC8(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    int v4 = [v3 isActive];
    uint64_t v5 = @"NO";
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = 138412802;
    uint64_t v9 = v3;
    if (v4) {
      uint64_t v5 = @"YES";
    }
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Setup completed for account %@ isActive %@ setupError %@", (uint8_t *)&v8, 0x20u);
  }

  return (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 32), [*(id *)(a1 + 32) isActive], *(void *)(a1 + 40));
}

void sub_19198F0B8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountEnabled:*(void *)(a1 + 40)];
  }
}

void sub_19198F3F8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 accountController:v3 accountDisabled:*(void *)(a1 + 40)];
  }
}

void sub_19198F518(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_19198FBC8(uint64_t a1, void *a2)
{
  id v3 = [a2 pinnedIdentityCollaboratorWithErrorHandler:&unk_1EE246628];
  [v3 fetchIdentityForPinningWithCompletion:*(void *)(a1 + 32)];
}

void sub_19198FC24(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] IDSPinnedIdentity];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A35EC8();
  }
}

void sub_19198FDC8(uint64_t a1, void *a2)
{
  id v3 = [a2 pinnedIdentityCollaboratorWithErrorHandler:&unk_1EE245F28];
  [v3 pinIdentityBlob:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

void sub_19198FE24(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] IDSPinnedIdentity];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A35EC8();
  }
}

void sub_19198FF68(uint64_t a1, void *a2)
{
  id v3 = [a2 pinnedIdentityCollaboratorWithErrorHandler:&unk_1EE246D88];
  [v3 fetchAllPinnedIdentitiesWithCompletion:*(void *)(a1 + 32)];
}

void sub_19198FFC4(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] IDSPinnedIdentity];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A35EC8();
  }
}

void sub_1919900A4(uint64_t a1, void *a2)
{
  id v2 = [a2 pinnedIdentityCollaboratorWithErrorHandler:&unk_1EE246A88];
  [v2 clearAllPinnedIdentities];
}

void sub_1919900F0(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] IDSPinnedIdentity];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A35EC8();
  }
}

uint64_t IDSHardDeregister(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (_IDSRunningInDaemon()) {
    sub_191A35F30();
  }
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [MEMORY[0x1E4F29060] callStackSymbols];
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Hard deregistering, %@", (uint8_t *)&v6, 0xCu);
  }
  id v4 = +[IDSDaemonController sharedInstance];
  [v4 hardDeregister];

  return sleep(a1);
}

uint64_t IDSTriggerFinalDeregister(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (_IDSRunningInDaemon()) {
    sub_191A35F5C();
  }
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [MEMORY[0x1E4F29060] callStackSymbols];
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Triggering final deregister, %@", (uint8_t *)&v6, 0xCu);
  }
  id v4 = +[IDSDaemonController sharedInstance];
  [v4 triggerFinalDeregister];

  return sleep(a1);
}

uint64_t IDSClearState(unsigned int a1)
{
  if (_IDSRunningInDaemon()) {
    sub_191A35F88();
  }
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v6 = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Clearing IDS state", v6, 2u);
  }

  id v3 = [MEMORY[0x1E4F6C408] sharedDefaults];
  [v3 setClearStateOnLaunch:1];

  id v4 = +[IDSDaemonController sharedInstance];
  [v4 clearIDSState];

  return sleep(a1);
}

void sub_191990F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191990FB0(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [*(id *)(a1 + 40) onQueueWeakSharedInstance];

  return MEMORY[0x1F41817F8]();
}

void sub_1919910B4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) onQueueWeakSharedInstance];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1919911CC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) onQueueWeakSharedInstance];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_191991254()
{
  uint64_t v0 = (void *)[objc_alloc(MEMORY[0x1E4F29268]) initWithMachServiceName:@"com.apple.identityservicesd.nsxpc" options:0];

  return v0;
}

void sub_191991554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19199157C(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = [MEMORY[0x1E4F6B460] xpc];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [WeakRetained collaboratorPromiseDictionary];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v19 = v4;
      __int16 v20 = 2048;
      id v21 = WeakRetained;
      _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "IDSXPCDaemonController connection interrupted -- Dropping collaborators {collaborators: %{public}@, pointer: %p}", buf, 0x16u);
    }
    uint64_t v5 = [WeakRetained collaboratorPromiseDictionary];
    [v5 removeAllObjects];

    int v6 = [WeakRetained syncCollaboratorDictionary];
    [v6 removeAllObjects];

    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "interruptionHandlerByTarget", 0);
    uint64_t v7 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
    uint64_t v8 = NSAllMapTableValues(v7);

    uint64_t v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v14;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v14 != v11) {
            objc_enumerationMutation(v8);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v13 + 1) + 8 * v12++) + 16))();
        }
        while (v10 != v12);
        uint64_t v10 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v10);
    }
  }
}

uint64_t sub_1919919B4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_pairingCollaboratorWithCompletion_);
}

uint64_t sub_191991A50(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_pairedDeviceManagerCollaboratorWithCompletion_);
}

void sub_191991AEC(uint64_t a1, void *a2, void *a3)
{
  id v4 = (void *)MEMORY[0x1E4F28F80];
  id v5 = a3;
  id v6 = a2;
  id v8 = [v4 processInfo];
  uint64_t v7 = [v8 processName];
  [v6 reunionSyncCollaboratorForClientProcessName:v7 withCompletion:v5];
}

uint64_t sub_191991C14(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_opportunisticCollaboratorWithCompletion_);
}

uint64_t sub_191991CB0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_registrationCollaboratorWithCompletion_);
}

uint64_t sub_191991D4C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_activityMonitorCollaboratorWithCompletion_);
}

uint64_t sub_191991DE8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_serverMessagingCollaboratorWithCompletion_);
}

uint64_t sub_191991E84(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_offGridMessengerCollaboratorWithCompletion_);
}

uint64_t sub_191991F20(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_offGridStateManagerCollaboratorWithCompletion_);
}

uint64_t sub_191991FBC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_keyTransparencyCollaboratorWithCompletion_);
}

uint64_t sub_191992058(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_pinnedIdentityCollaboratorWithCompletion_);
}

uint64_t sub_191992160(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_firewallCollaboratorForService_withCompletion_);
}

uint64_t sub_191992204(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_groupSessionKeyValueDeliveryProviderCollaboratorWithCompletion_);
}

uint64_t sub_19199230C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_featureTogglerForService_withCompletion_);
}

uint64_t sub_19199241C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_baaSignerCollaboratorForTopic_withCompletion_);
}

uint64_t sub_1919924C0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_eventReportingCollaboratorWithCompletion_);
}

uint64_t sub_19199255C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_interalTestingCollaboratorWithCompletion_);
}

uint64_t sub_191992618(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191992820(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = self;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }
}

void sub_19199296C(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = self;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }
}

void sub_191992E70(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_191992E98(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    id v4 = [*(id *)(a1 + 40) collaboratorPromiseDictionary];
    [v4 removeObjectForKey:*(void *)(a1 + 48)];
  }
  else
  {
    id v3 = *(void **)(a1 + 32);
    [v3 failWithError:a2];
  }
}

void sub_191992F24(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  if (a3)
  {
    [*(id *)(a1 + 32) failWithError:a3];
  }
  else
  {
    id v5 = [[IDSXPCConnection alloc] initWithRemoteObject:v6 rootConnection:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) fulfillWithValue:v5];
  }
}

void sub_191992FBC(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 state];
  if (v4 == 1)
  {
    uint64_t v12 = [MEMORY[0x1E4F6B460] xpc];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      long long v14 = [v3 error];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v26 = v13;
      __int16 v27 = 2114;
      uint64_t v28 = v14;
      _os_log_impl(&dword_19190B000, v12, OS_LOG_TYPE_DEFAULT, "Failed to get collaborator {identifier: %{public}@, error: %{public}@}", buf, 0x16u);
    }
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15)
    {
      long long v16 = [v3 error];
      (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
    }
    uint64_t v17 = *(void **)(a1 + 48);
    uint64_t v18 = [v3 error];
    [v17 failWithError:v18];

    uint64_t v11 = [*(id *)(a1 + 32) collaboratorPromiseDictionary];
    [v11 removeObjectForKey:*(void *)(a1 + 40)];
    goto LABEL_11;
  }
  if (!v4)
  {
    id v5 = [v3 value];
    double v6 = *(double *)(a1 + 64);
    uint64_t v19 = MEMORY[0x1E4F143A8];
    uint64_t v20 = 3221225472;
    id v21 = sub_191993234;
    uint64_t v22 = &unk_1E57298A8;
    id v7 = *(id *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 32);
    id v24 = v7;
    id v8 = [v5 remoteObjectProxyWithTimeoutInSeconds:&v19 errorHandler:v6];

    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F6B460], "xpc", v19, v20, v21, v22);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v26 = v10;
      __int16 v27 = 2114;
      uint64_t v28 = v8;
      _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "Got collaborator {identifier: %{public}@, proxy: %{public}@}", buf, 0x16u);
    }

    [*(id *)(a1 + 48) fulfillWithRemoteObject:v8];
    uint64_t v11 = v24;
LABEL_11:
  }
}

id sub_191993234(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }
  return self;
}

void sub_191993450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191993468(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (a3)
  {
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 16);
    uint64_t v5 = *(void *)(a1 + 48);
    v4(v5, a3);
  }
  else
  {
    uint64_t v7 = [a2 synchronousRemoteObjectProxyWithErrorHandler:v3];
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    id v11 = [*(id *)(a1 + 32) syncCollaboratorDictionary];
    [v11 setObject:v10 forKeyedSubscript:*(void *)(a1 + 40)];
  }
}

void sub_191994320()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2E80];
  uint64_t v1 = (void *)qword_1EB2BD618;
  qword_1EB2BD618 = v0;

  id v2 = +[IDSXPCGroupSessionKeyValueDeliveryInterface interface];
  [(id)qword_1EB2BD618 setInterface:v2 forSelector:sel_keyValueDeliveryForSessionID_completionHandler_ argumentIndex:0 ofReply:1];
}

void sub_1919944F0(uint64_t a1, void *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1919945B8;
  v6[3] = &unk_1E572A370;
  id v7 = *(id *)(a1 + 48);
  uint64_t v4 = [a2 keyTransparencyCollaboratorWithErrorHandler:v6];
  uint64_t v5 = [*(id *)(a1 + 32) applicationIdentifier];
  [v4 fetchPeerVerificationInfoForApplication:v5 forURIs:*(void *)(a1 + 40) withCompletion:*(void *)(a1 + 48)];
}

void sub_1919945B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6B460] KeyTransparency];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A36194();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  double v6 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IDSKeyTransparencyManagerErrorDomain" code:100 userInfo:0];
  (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, MEMORY[0x1E4F1CC08], v6);
}

void sub_191994704(uint64_t a1, void *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1919947CC;
  v6[3] = &unk_1E572A370;
  id v7 = *(id *)(a1 + 40);
  uint64_t v4 = [a2 keyTransparencyCollaboratorWithErrorHandler:v6];
  uint64_t v5 = [*(id *)(a1 + 32) applicationIdentifier];
  [v4 fetchSelfVerificationInfoForApplication:v5 withCompletion:*(void *)(a1 + 40)];
}

void sub_1919947CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6B460] KeyTransparency];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A36194();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2050000000;
  double v6 = (void *)qword_1E92DE2C0;
  uint64_t v14 = qword_1E92DE2C0;
  if (!qword_1E92DE2C0)
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_191996890;
    void v10[3] = &unk_1E5728DD0;
    void v10[4] = &v11;
    sub_191996890((uint64_t)v10);
    double v6 = (void *)v12[3];
  }
  id v7 = v6;
  _Block_object_dispose(&v11, 8);
  id v8 = objc_alloc_init(v7);
  uint64_t v9 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IDSKeyTransparencyManagerErrorDomain" code:100 userInfo:0];
  (*(void (**)(uint64_t, id, void *))(v5 + 16))(v5, v8, v9);
}

void sub_191994928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191994A0C(uint64_t a1, void *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_191994AD4;
  v6[3] = &unk_1E572A370;
  id v7 = *(id *)(a1 + 48);
  uint64_t v4 = [a2 keyTransparencyCollaboratorWithErrorHandler:v6];
  uint64_t v5 = [*(id *)(a1 + 32) applicationIdentifier];
  [v4 healSelfForApplication:v5 withHealableErrors:*(void *)(a1 + 40) withCompletion:*(void *)(a1 + 48)];
}

void sub_191994AD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6B460] KeyTransparency];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A36194();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_191994FB0()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = (void **)qword_1E92DE190;
  uint64_t v7 = qword_1E92DE190;
  if (!qword_1E92DE190)
  {
    uint64_t v1 = (void *)sub_1919968E8();
    v5[3] = (uint64_t)dlsym(v1, "kKTApplicationIdentifierIDS");
    qword_1E92DE190 = v5[3];
    uint64_t v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    sub_191A361FC();
  }
  id v2 = *v0;

  return v2;
}

void sub_1919950A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1919950BC()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = (void **)qword_1E92DE1A0;
  uint64_t v7 = qword_1E92DE1A0;
  if (!qword_1E92DE1A0)
  {
    uint64_t v1 = (void *)sub_1919968E8();
    v5[3] = (uint64_t)dlsym(v1, "kKTApplicationIdentifierIDSFaceTime");
    qword_1E92DE1A0 = v5[3];
    uint64_t v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    sub_191A36274();
  }
  id v2 = *v0;

  return v2;
}

void sub_1919951B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1919951C8()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = (void **)qword_1E92DE1A8;
  uint64_t v7 = qword_1E92DE1A8;
  if (!qword_1E92DE1A8)
  {
    uint64_t v1 = (void *)sub_1919968E8();
    v5[3] = (uint64_t)dlsym(v1, "kKTApplicationIdentifierIDSMultiplex");
    qword_1E92DE1A8 = v5[3];
    uint64_t v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    sub_191A362EC();
  }
  id v2 = *v0;

  return v2;
}

void sub_1919952BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191995568(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_getKeyTransparencyOptInEligiblityForApplication_withCompletion_);
}

void sub_19199578C(uint64_t a1, void *a2)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_191995898;
  v8[3] = &unk_1E572A370;
  id v9 = *(id *)(a1 + 40);
  uint64_t v4 = [a2 keyTransparencyCollaboratorWithErrorHandler:v8];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_191995918;
  v6[3] = &unk_1E572B9F0;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  [v4 sendOptInUpdateForApplications:v5 withCompletion:v6];
}

void sub_191995898(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6B460] KeyTransparency];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A36194();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191995918(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v3 success];
  id v5 = [v3 error];

  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v4, v5);
}

void sub_191995B90(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_191995C34;
  v5[3] = &unk_1E572A370;
  id v6 = *(id *)(a1 + 40);
  uint64_t v4 = [a2 keyTransparencyCollaboratorWithErrorHandler:v5];
  [v4 sendOptInUpdateForApplications:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

void sub_191995C34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6B460] KeyTransparency];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A36194();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)[objc_alloc(MEMORY[0x1E4F6B4C8]) initWithSuccess:0 serverProvidedSMT:0 error:v3];
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

void sub_191995ED4(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_191995F78;
  v5[3] = &unk_1E572A370;
  id v6 = *(id *)(a1 + 40);
  uint64_t v4 = [a2 keyTransparencyCollaboratorWithErrorHandler:v5];
  [v4 sendOptInUpdateRequest:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

void sub_191995F78(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6B460] KeyTransparency];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A36194();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = objc_alloc(MEMORY[0x1E4F6B4C8]);
  id v7 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IDSKeyTransparencyManagerErrorDomain" code:200 userInfo:0];
  id v8 = (void *)[v6 initWithSuccess:0 optedInOutURIs:0 serverSMTByURI:0 error:v7];
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v8);
}

void sub_1919960E8(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_19199618C;
  v5[3] = &unk_1E572A370;
  id v6 = *(id *)(a1 + 32);
  uint64_t v4 = [a2 keyTransparencyCollaboratorWithErrorHandler:v5];
  [v4 fetchKTRegistrationStatusWithCompletion:*(void *)(a1 + 32)];
}

void sub_19199618C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6B460] KeyTransparency];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A36194();
  }

  id v5 = objc_alloc_init(MEMORY[0x1E4F6B4D0]);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191996230(uint64_t a1, void *a2)
{
  id v2 = [a2 keyTransparencyCollaboratorWithErrorHandler:&unk_1EE247008];
  [v2 registrationDataNeedsUpdate];
}

void sub_19199627C(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] KeyTransparency];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A36194();
  }
}

void sub_1919963C0(uint64_t a1, void *a2)
{
  id v3 = [a2 keyTransparencyCollaboratorWithErrorHandler:&unk_1EE245BA8];
  [v3 peerVerificationFinishedWithResults:*(void *)(a1 + 32)];
}

void sub_19199641C(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] KeyTransparency];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A36194();
  }
}

void sub_191996598(uint64_t a1, void *a2)
{
  id v3 = [a2 keyTransparencyCollaboratorWithErrorHandler:&unk_1EE247028];
  [v3 cacheClearRequest:*(void *)(a1 + 32)];
}

void sub_1919965F4(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F6B460] KeyTransparency];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_191A36194();
  }
}

void sub_191996738(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1919967DC;
  v5[3] = &unk_1E572A370;
  id v6 = *(id *)(a1 + 32);
  uint64_t v4 = [a2 keyTransparencyCollaboratorWithErrorHandler:v5];
  [v4 getCurrentRegistrationStateWithCompletion:*(void *)(a1 + 32)];
}

void sub_1919967DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6B460] KeyTransparency];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A36194();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = objc_alloc_init(MEMORY[0x1E4F1C978]);
  (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
}

Class sub_191996890(uint64_t a1)
{
  sub_1919968E8();
  Class result = objc_getClass("KTSelfVerificationInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_191A36724();
  }
  qword_1E92DE2C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1919968E8()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!qword_1EB2BD6C8)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = sub_1919969E0;
    v2[4] = &unk_1E5729360;
    void v2[5] = v2;
    long long v3 = xmmword_1E572BA10;
    uint64_t v4 = 0;
    qword_1EB2BD6C8 = _sl_dlopen();
  }
  uint64_t v0 = qword_1EB2BD6C8;
  if (!qword_1EB2BD6C8) {
    sub_191A367A0(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t sub_1919969E0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2BD6C8 = result;
  return result;
}

void *sub_191996A54(uint64_t a1)
{
  id v2 = (void *)sub_1919968E8();
  uint64_t result = dlsym(v2, "kKTApplicationIdentifierIDS");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E92DE190 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_191996AA4(uint64_t a1)
{
  id v2 = (void *)sub_1919968E8();
  uint64_t result = dlsym(v2, "kKTApplicationIdentifierIDSFaceTime");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E92DE1A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_191996AF4(uint64_t a1)
{
  id v2 = (void *)sub_1919968E8();
  uint64_t result = dlsym(v2, "kKTApplicationIdentifierIDSMultiplex");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E92DE1A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_191996B44(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_191996BF4;
  v5[3] = &unk_1E572A370;
  id v6 = *(id *)(a1 + 32);
  uint64_t v4 = [a2 keyTransparencyCollaboratorWithErrorHandler:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_191996BF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6B460] KeyTransparency];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A36194();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1919970F8(void *a1)
{
  *(void *)(a1[4] + 8) = [[_IDSAccount alloc] initWithDictionary:a1[5] uniqueID:a1[6] serviceName:a1[7] delegateContext:a1[4]];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_19199737C(void *a1)
{
  *(void *)(a1[4] + 8) = [[_IDSAccount alloc] initWithLoginID:a1[5] uniqueID:a1[6] serviceName:a1[7] delegateContext:a1[4]];

  return MEMORY[0x1F41817F8]();
}

void sub_1919974E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_191997500()
{
  return self;
}

void sub_1919976CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919976E4(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 uniqueID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199785C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191997874(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 loginID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1919979EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191997A04(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 serviceName];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_191997B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191997B94(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 primaryServiceName];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_191997CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191997CE4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 accountType];
}

void sub_191997E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191997E28(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 isActive];
}

void sub_191997F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191997F6C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 isUserDisabled];
}

void sub_191998098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919980B0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 canSend];
}

void sub_19199821C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191998234(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 devices];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1919983AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919983C4(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 nearbyDevices];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199853C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191998554(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 connectedDevices];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1919986CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919986E4(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 profileInfo];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199885C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191998874(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 aliases];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1919989EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191998A04(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 aliasStrings];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_191998B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191998B94(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 vettedAliases];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_191998D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191998D24(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 aliasesToRegister];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_191998E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191998EB4(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 handles];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191999044(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 pseudonymURIMap];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1919991BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919991D4(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 pseudonyms];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1919992F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 setPassword:*(void *)(a1 + 40)];
}

void sub_191999400(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 setAuthToken:*(void *)(a1 + 40)];
}

void sub_191999524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199953C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 _isEnabled];
}

void sub_191999778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191999790(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 isUsableForOuterMessaging];
}

void sub_1919998FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191999914(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 accountInfo];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_191999A34(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 setAccountInfo:*(void *)(a1 + 40)];
}

void sub_191999B40(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 updateAccountWithAccountInfo:*(void *)(a1 + 40)];
}

void sub_191999C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191999C7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 registrationStatus];
}

void sub_191999DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191999DC0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 registrationError];
}

void sub_191999F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191999F44(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 registrationAlertInfo];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199A07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199A094(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 profileValidationStatus];
}

void sub_19199A1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199A1D8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 profileValidationErrorReason];
}

void sub_19199A344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199A35C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 nextRegistrationDate];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199A4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199A4EC(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 dateRegistered];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199A664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199A67C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 registeredURIs];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199A7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199A80C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 accountRegisteredURIs];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199A984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199A99C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 registrationCertificate];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199AB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199AB2C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 pushToken];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199ACA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199ACBC(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 regionServerContext];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199AE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199AE4C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 profileID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199AF94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 addDelegate:*(void *)(a1 + 40) queue:*(void *)(a1 + 48)];
}

void sub_19199B094(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 removeDelegate:*(void *)(a1 + 40)];
}

void sub_19199B1C8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 addRegistrationDelegate:*(void *)(a1 + 40) queue:*(void *)(a1 + 48)];
}

void sub_19199B2C8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 removeRegistrationDelegate:*(void *)(a1 + 40)];
}

void sub_19199B54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199B564(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 regionID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199B684(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 setRegionID:*(void *)(a1 + 40)];
}

void sub_19199B7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199B800(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 regionBasePhoneNumber];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199B920(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 setRegionBasePhoneNumber:*(void *)(a1 + 40)];
}

void sub_19199BA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199BA9C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 displayName];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199BBBC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 setDisplayName:*(void *)(a1 + 40)];
}

void sub_19199BD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199BD38(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _internal];
  uint64_t v2 = [v5 userUniqueIdentifier];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_19199BE30(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _internal];
  [v1 authenticateAccount];
}

void sub_19199BF04(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _internal];
  [v1 passwordUpdated];
}

void sub_19199C024(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 updateAuthorizationCredentials:*(void *)(a1 + 40) token:*(void *)(a1 + 48)];
}

void sub_19199C108(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _internal];
  [v1 validateProfile];
}

void sub_19199C204(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 addAliases:*(void *)(a1 + 40)];
}

void sub_19199C310(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 removeAliases:*(void *)(a1 + 40)];
}

uint64_t sub_19199C41C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_validateAliases_);
}

uint64_t sub_19199C4E0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_unvalidateAliases_);
}

void sub_19199C64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
}

void sub_19199C67C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _internal];
  [v1 registerAccount];
}

void sub_19199C820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
}

void sub_19199C850(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _internal];
  [v1 unregisterAccount];
}

void sub_19199C9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
}

void sub_19199CA24(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _internal];
  [v1 forceRemoveAccount];
}

void sub_19199CBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
}

void sub_19199CC2C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 _reregisterAndReidentify:*(unsigned __int8 *)(a1 + 40)];
}

void sub_19199CDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
}

void sub_19199CE10(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _internal];
  [v1 deactivateAndPurgeIdentify];
}

void sub_19199CEE4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _internal];
  [v1 _callNearbyDevicesChanged];
}

void sub_19199CFBC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _internal];
  [v1 _reloadCachedDevices];
}

void IDSiCloudSignInHack(void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A36BB0();
  }
  id v5 = +[IDSLogging IDSiCloudSignInHack];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = @"YES";
    if (!v4) {
      id v6 = @"NO";
    }
    int v8 = 138412546;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_INFO, "iCloud sign in hack with userName %@ password %@", (uint8_t *)&v8, 0x16u);
  }

  id v7 = +[IDSDaemonController sharedInstance];
  [v7 iCloudSignInHackWithUserName:v3 password:v4];
}

void IDSiCloudSignOutHack()
{
  if (_IDSRunningInDaemon()) {
    sub_191A36BDC();
  }
  uint64_t v0 = +[IDSLogging IDSiCloudSignInHack];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_INFO, "iCloud sign out hack", v2, 2u);
  }

  id v1 = +[IDSDaemonController sharedInstance];
  [v1 iCloudSignOutHack];
}

void IDSKickGetDependent(void *a1)
{
  id v1 = a1;
  if (_IDSRunningInDaemon()) {
    sub_191A36C08();
  }
  id v2 = +[IDSLogging IDSiCloudSignInHack];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_INFO, "Kicking get dependent", v4, 2u);
  }

  id v3 = +[IDSDaemonController sharedInstance];
  [v3 kickGetDependentForAccount:v1];
}

void IDSReRegister(void *a1, void *a2, void *a3)
{
  id v8 = a1;
  id v5 = a2;
  id v6 = a3;
  if (_IDSRunningInDaemon()) {
    sub_191A36C34();
  }
  id v7 = +[IDSDaemonController sharedInstance];
  [v7 reRegisterWithUserID:v8 action:v5 service:v6];
}

void IDSRepairAccounts()
{
  if (_IDSRunningInDaemon()) {
    sub_191A36C60();
  }
  id v0 = +[IDSDaemonController sharedInstance];
  [v0 repairAccounts];
}

id IDSCopyBestGuessIDForID(void *a1)
{
  id v1 = a1;
  if ([v1 containsString:@":"]
    && ([v1 hasPrefix:@"biz:"] & 1) == 0)
  {
    id v2 = v1;
  }
  else
  {
    id v2 = [v1 _bestGuessURI];
  }
  id v3 = v2;

  return v3;
}

uint64_t IDSCopyIDForPhoneNumber()
{
  return _IDSCopyIDForPhoneNumberWithOptions();
}

uint64_t IDSCopyIDForTemporaryID(void *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t IDSCopyIDForPseudonymID(void *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t IDSCopyIDForAccount()
{
  id v0 = [NSString alloc];

  return MEMORY[0x1F4181798](v0, sel_initWithString_);
}

uint64_t IDSCopyIDForDevice(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (![v1 isLocallyPaired]) {
    goto LABEL_13;
  }
  if (([v1 relationship] & 2) != 0)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v2 = [v1 identities];
    uint64_t v3 = [v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      char v5 = 0;
      uint64_t v6 = *(void *)v19;
      uint64_t v7 = *MEMORY[0x1E4F6AE48];
      uint64_t v8 = *MEMORY[0x1E4F6B048];
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v19 != v6) {
            objc_enumerationMutation(v2);
          }
          __int16 v10 = [*(id *)(*((void *)&v18 + 1) + 8 * i) objectForKey:v7];
          char v11 = [v10 isEqualToString:v8];

          v5 |= v11;
        }
        uint64_t v4 = [v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v4);

      if (v5) {
        goto LABEL_11;
      }
    }
    else
    {
    }
LABEL_13:
    uint64_t v13 = [v1 pushToken];
    uint64_t v15 = [v1 identities];
    long long v16 = [v1 service];
    uint64_t v14 = _IDSCopyIDForPushTokenAndIdentitiesWithService();

    goto LABEL_14;
  }
LABEL_11:
  id v12 = [NSString alloc];
  uint64_t v13 = [v1 uniqueIDOverride];
  uint64_t v14 = [v12 initWithFormat:@"device:%@", v13];
LABEL_14:

  return v14;
}

uint64_t IDSCopyIDForRapportPublicDeviceIdentifier(void *a1)
{
  id v1 = (objc_class *)NSString;
  id v2 = a1;
  uint64_t v3 = [[v1 alloc] initWithFormat:@"guest-device:%@", v2];

  return v3;
}

uint64_t IDSCopyIDForTokenWithID()
{
  return MEMORY[0x1F4122DD0]();
}

uint64_t IDSCopyIDForSession(void *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t IDSCopyIDForAnonymousCloudIdentifier(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    uint64_t v2 = [[NSString alloc] initWithFormat:@"urn:ck:%@", v1];
  }
  else
  {
    _IMWarn();
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t IDSCopyRawAddressForDestination(void *a1)
{
  id v1 = [a1 _stripPotentialTokenURIWithToken:0];
  uint64_t v2 = [v1 _stripFZIDPrefix];

  return v2;
}

uint64_t IDSCopyAddressDestinationForDestination(void *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t IDSIDHasToken()
{
  uint64_t v0 = _IDSTypeForID();

  return MEMORY[0x1F4122E00](v0);
}

id IDSCopyLocalDeviceUniqueID()
{
  uint64_t v0 = +[IDSDaemonController sharedInstance];
  [v0 blockUntilConnected];

  uint64_t v6 = 0;
  v7[0] = &v6;
  v7[1] = 0x3032000000;
  void v7[2] = sub_191918720;
  v7[3] = sub_1919185B0;
  id v8 = 0;
  id v1 = +[IDSInternalQueueController sharedInstance];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_19199D974;
  v5[3] = &unk_1E5728DD0;
  void v5[4] = &v6;
  [v1 performBlock:v5 waitUntilDone:1];

  uint64_t v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_191A36C8C((uint64_t)v7, v2);
  }

  id v3 = *(id *)(v7[0] + 40);
  _Block_object_dispose(&v6, 8);

  return v3;
}

void sub_19199D958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19199D974(uint64_t a1)
{
  id v7 = +[IDSDaemonController sharedInstance];
  uint64_t v2 = [v7 listener];
  id v3 = [v2 deviceIdentifier];
  uint64_t v4 = [v3 copy];
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

uint64_t IDSOSVersionCompare(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return -1;
  }
  if (*a1 > *a2) {
    return 1;
  }
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (v2 < v3) {
    return -1;
  }
  if (v2 > v3) {
    return 1;
  }
  uint64_t v5 = a1[2];
  uint64_t v6 = a2[2];
  BOOL v8 = __OFSUB__(v5, v6);
  BOOL v7 = v5 - v6 < 0;
  BOOL v9 = v5 > v6;
  if (v7 != v8) {
    return -1;
  }
  else {
    return v9;
  }
}

uint64_t sub_19199DC30()
{
  qword_1EB2BD820 = objc_alloc_init(IDSHomeKitManager);

  return MEMORY[0x1F41817F8]();
}

void sub_19199DE48(void *a1)
{
  if (a1[6] && a1[4])
  {
    uint64_t v2 = [[_IDSGenericCompletionHandler alloc] initWithHandler:a1[6] queue:a1[4]];
    uint64_t v3 = a1[5];
    uint64_t v4 = *(void **)(v3 + 8);
    *(void *)(v3 + 8) = v2;
  }
  id v5 = +[IDSDaemonController sharedInstance];
  [v5 homeKitGetServiceUserIDs];
}

void sub_19199E024(uint64_t a1)
{
  if (![*(id *)(a1 + 32) length] || !objc_msgSend(*(id *)(a1 + 40), "length") || !*(void *)(a1 + 48))
  {
    id v2 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    uint64_t v3 = objc_msgSend(v2, "initWithObjectsAndKeys:", @"Required Field Is Empty", *MEMORY[0x1E4F28568], 0);
    uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"com.apple.identityservices.error" code:1 userInfo:v3];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  if (*(void *)(a1 + 72) && *(void *)(a1 + 56))
  {
    id v5 = [[_IDSGenericCompletionHandler alloc] initWithHandler:*(void *)(a1 + 72) queue:*(void *)(a1 + 56)];
    uint64_t v6 = *(void *)(a1 + 64);
    BOOL v7 = *(void **)(v6 + 16);
    *(void *)(v6 + 16) = v5;
  }
  id v8 = +[IDSDaemonController sharedInstance];
  [v8 homeKitGetAdminAccessTokensWithServiceUserID:*(void *)(a1 + 32) accessoryID:*(void *)(a1 + 40) pairingToken:*(void *)(a1 + 48)];
}

void sub_19199E2A4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) length];
  uint64_t v3 = (void *)MEMORY[0x1E4F28568];
  if (!v2 || ![*(id *)(a1 + 40) count] || !objc_msgSend(*(id *)(a1 + 48), "length"))
  {
    uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", @"A required Field Is Empty", *v3, 0);
    id v5 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"com.apple.identityservices.error" code:1 userInfo:v4];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  if ([*(id *)(a1 + 32) isEqualToIgnoringCase:*(void *)(a1 + 48)])
  {
    uint64_t v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", @"ServiceUserID and AdminID can not be the same", *v3, 0);
    BOOL v7 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"com.apple.identityservices.error" code:2 userInfo:v6];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  if (*(void *)(a1 + 72) && *(void *)(a1 + 56))
  {
    id v8 = [[_IDSGenericCompletionHandler alloc] initWithHandler:*(void *)(a1 + 72) queue:*(void *)(a1 + 56)];
    uint64_t v9 = *(void *)(a1 + 64);
    __int16 v10 = *(void **)(v9 + 24);
    *(void *)(v9 + 24) = v8;
  }
  id v11 = +[IDSDaemonController sharedInstance];
  [v11 homeKitGetConsentTokensWithServiceUserID:*(void *)(a1 + 32) accessoryIDs:*(void *)(a1 + 40) adminID:*(void *)(a1 + 48)];
}

void sub_19199E5C8(uint64_t a1)
{
  if (![*(id *)(a1 + 32) length]
    || ![*(id *)(a1 + 40) length]
    || ![*(id *)(a1 + 48) length]
    || ![*(id *)(a1 + 56) count])
  {
    id v2 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    uint64_t v3 = objc_msgSend(v2, "initWithObjectsAndKeys:", @"A required Field Is Empty", *MEMORY[0x1E4F28568], 0);
    uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"com.apple.identityservices.error" code:1 userInfo:v3];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  if (*(void *)(a1 + 80) && *(void *)(a1 + 64))
  {
    id v5 = [[_IDSGenericCompletionHandler alloc] initWithHandler:*(void *)(a1 + 80) queue:*(void *)(a1 + 64)];
    uint64_t v6 = *(void *)(a1 + 72);
    BOOL v7 = *(void **)(v6 + 32);
    *(void *)(v6 + 32) = v5;
  }
  id v8 = +[IDSDaemonController sharedInstance];
  [v8 homeKitGetUserAccessTokensWithServiceUserID:*(void *)(a1 + 32) userID:*(void *)(a1 + 40) userHandle:*(void *)(a1 + 48) accessoryRequests:*(void *)(a1 + 56)];
}

void sub_19199E860(void *a1)
{
  if (a1[9] && a1[4])
  {
    id v2 = [[_IDSGenericCompletionHandler alloc] initWithHandler:a1[9] queue:a1[4]];
    uint64_t v3 = a1[5];
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }
  id v5 = +[IDSDaemonController sharedInstance];
  [v5 homeKitRefreshUserAccessTokensWithServiceUserID:a1[6] userID:a1[7] accessoryRequests:a1[8]];
}

void sub_19199E9F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) handler];
  (*((void (**)(id, void, void))v2 + 2))(v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_19199EB58(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) handler];
  (*((void (**)(id, void, void))v2 + 2))(v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_19199ECB8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) handler];
  (*((void (**)(id, void, void))v2 + 2))(v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_19199EE18(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) handler];
  (*((void (**)(id, void, void))v2 + 2))(v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_19199EF78(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) handler];
  (*((void (**)(id, void, void))v2 + 2))(v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t sub_19199F21C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, double))(v2 + 16))(v2, -100, 0, -1.0);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void, void, double))(v2 + 16))(v2, 0, *(unsigned __int8 *)(a1 + 56), *(double *)(a1 + 48));
  }
}

void sub_19199FD60(uint64_t a1, int a2, void *a3)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = v5;
  switch(a2)
  {
    case 4:
      __int16 v10 = [NSString stringWithFormat:@"Listener cancelled"];
      id v11 = objc_alloc(MEMORY[0x1E4F28C58]);
      uint64_t v17 = *MEMORY[0x1E4F28568];
      long long v18 = v10;
      id v12 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v13 = &v18;
      uint64_t v14 = &v17;
LABEL_7:
      uint64_t v15 = [v12 dictionaryWithObjects:v13 forKeys:v14 count:1];
      long long v16 = (void *)[v11 initWithDomain:@"com.apple.identityservices.error" code:42 userInfo:v15];

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      goto LABEL_8;
    case 3:
      __int16 v10 = objc_msgSend(NSString, "stringWithFormat:", @"Listener failed with error code %d", nw_error_get_error_code(v5));
      id v11 = objc_alloc(MEMORY[0x1E4F28C58]);
      uint64_t v19 = *MEMORY[0x1E4F28568];
      v20[0] = v10;
      id v12 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v13 = (void **)v20;
      uint64_t v14 = &v19;
      goto LABEL_7;
    case 2:
      uint64_t port = nw_listener_get_port(*(nw_listener_t *)(a1 + 32));
      id v8 = *(void **)(a1 + 40);
      uint64_t v9 = (void *)[*(id *)(a1 + 48) copy];
      __int16 v10 = [v8 createDataBlobFrom:v9 port:port];

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
LABEL_8:

      break;
  }
}

void sub_19199FF4C(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 40);
  id v7 = v4;
  if (v6) {
    (*(void (**)(void))(v6 + 16))();
  }
  else {
    objc_storeStrong((id *)(v5 + 56), a2);
  }
}

uint64_t sub_1919A005C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 56);
  if (v3)
  {
    *(void *)(v2 + 56) = 0;
    id v8 = v3;

    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    id v5 = v8;
  }
  else
  {
    uint64_t v4 = MEMORY[0x192FE03B0](*(void *)(a1 + 40));
    uint64_t v6 = *(void *)(a1 + 32);
    id v5 = *(id *)(v6 + 40);
    *(void *)(v6 + 40) = v4;
  }

  return MEMORY[0x1F41817F8](v4, v5);
}

void sub_1919A09F8()
{
  uint64_t v0 = nw_quic_connection_copy_sec_protocol_options();
  sec_protocol_options_set_verify_block(v0, &unk_1EE246008, MEMORY[0x1E4F14428]);
}

uint64_t sub_1919A0A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, 1);
}

void sub_1919A15E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  __int16 v10 = [*(id *)(a1 + 32) queue];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_1919A16F0;
  v15[3] = &unk_1E5729998;
  id v11 = *(id *)(a1 + 40);
  id v16 = v7;
  id v17 = v8;
  id v18 = v9;
  id v19 = v11;
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v10, v15);
}

uint64_t sub_1919A16F0(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_1919A18CC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1919A1984;
  v6[3] = &unk_1E572A370;
  id v7 = *(id *)(a1 + 56);
  id v5 = [a2 baaSignerCollaboratorForTopic:v4 withErrorHandler:v6];
  [v5 baaHeadersBySigningData:*(void *)(a1 + 40) serverTimestamp:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1919A1984(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A36D0C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1919A1B0C(uint64_t a1, const void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a2 && [v7 count] == 2)
  {
    id v9 = (void *)[objc_alloc(MEMORY[0x1E4F6B3D8]) initWithSHA256Digest:0 requestBody:*(void *)(a1 + 32) serverTimestamp:*(void *)(a1 + 40)];
    __int16 v10 = *(void **)(a1 + 48);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = sub_1919A1E14;
    void v23[3] = &unk_1E572BBB0;
    v23[4] = v10;
    id v24 = v9;
    id v25 = v7;
    __int16 v27 = a2;
    id v26 = *(id *)(a1 + 56);
    id v11 = v9;
    [v10 signData:v11 withKey:a2 completion:v23];
  }
  else
  {
    id v12 = [*(id *)(a1 + 48) errorStringForNSError:v8];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    id v11 = Mutable;
    if (v12) {
      CFDictionarySetValue(Mutable, @"x-apple-baa-error", v12);
    }
    id v14 = [*(id *)(a1 + 48) icloudBAAVersion];
    uint64_t v15 = [v14 stringValue];

    if (v15)
    {
      CFDictionarySetValue(v11, @"x-apple-baa-version", v15);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_191A36E08();
    }

    if ([*(id *)(a1 + 48) isVirtualMachine]) {
      id v16 = @"2";
    }
    else {
      id v16 = @"1";
    }
    CFDictionarySetValue(v11, @"x-apple-i-device-type", v16);
    id v17 = [*(id *)(a1 + 48) isBAASupportedHeaderValue];
    if (v17)
    {
      CFDictionarySetValue(v11, @"x-apple-baa-supported", v17);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_191A36D80();
    }

    id v18 = objc_alloc(MEMORY[0x1E4F6B560]);
    id v19 = [MEMORY[0x1E4F6C408] keyTransparencyAccountKeyFetchMetricDeviceID];
    long long v20 = (void *)[v18 initWithSuccess:0 error:v8 deviceID:v19];

    long long v21 = [MEMORY[0x1E4F6B550] loggerWithCategory:4000];
    [v21 logMetric:v20];

    uint64_t v22 = [MEMORY[0x1E4F6B410] defaultLogger];
    [v22 logMetric:v20];

    if (a2) {
      CFRelease(a2);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1919A1E14(uint64_t a1, void *a2)
{
  id v27 = a2;
  id v3 = [v27 resultData];
  if (v3)
  {
    uint64_t v4 = [v27 timestamp];
    if (v4)
    {

      id v5 = 0;
      uint64_t v6 = 1;
LABEL_18:

      goto LABEL_19;
    }
  }
  id v7 = [v27 icloudResultData];
  if (!v7)
  {
    id v8 = [v27 icloudAltResultData];

    if (v3)
    {

      if (v8)
      {
LABEL_9:
        id v5 = 0;
        uint64_t v6 = 1;
        goto LABEL_19;
      }
    }
    else if (v8)
    {
      goto LABEL_9;
    }
    id v9 = [v27 error];
    id v3 = v9;
    if (v9)
    {
      id v5 = v9;
    }
    else
    {
      __int16 v10 = [v27 icloudAltError];
      id v11 = v10;
      if (v10)
      {
        id v12 = v10;
      }
      else
      {
        id v12 = [v27 icloudError];
      }
      id v5 = v12;
    }
    uint64_t v6 = 0;
    goto LABEL_18;
  }

  id v5 = 0;
  uint64_t v6 = 1;
  if (v3) {
    goto LABEL_18;
  }
LABEL_19:
  id v13 = [IDSBAASignerContext alloc];
  id v14 = [v27 icloudDigest];
  uint64_t v15 = [(IDSBAASignerContext *)v13 initWithSigningDigest:v14];

  id v16 = *(void **)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  id v18 = [*(id *)(a1 + 48) objectAtIndexedSubscript:0];
  id v19 = [*(id *)(a1 + 48) objectAtIndexedSubscript:1];
  long long v20 = [v16 headersBySigningData:v17 baaSigningResult:v27 baaCert:v18 intermediateRootCert:v19];

  id v21 = objc_alloc(MEMORY[0x1E4F6B560]);
  uint64_t v22 = [MEMORY[0x1E4F6C408] keyTransparencyAccountKeyFetchMetricDeviceID];
  uint64_t v23 = (void *)[v21 initWithSuccess:v6 error:v5 deviceID:v22];

  id v24 = [MEMORY[0x1E4F6B550] loggerWithCategory:4000];
  [v24 logMetric:v23];

  id v25 = [MEMORY[0x1E4F6B410] defaultLogger];
  [v25 logMetric:v23];

  id v26 = *(const void **)(a1 + 64);
  if (v26) {
    CFRelease(v26);
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1919A21DC(uint64_t a1, void *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1919A228C;
  v6[3] = &unk_1E572A370;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v5 = [a2 baaSignerCollaboratorForTopic:v4 withErrorHandler:v6];
  [v5 purgeBAACertWithCompletion:*(void *)(a1 + 40)];
}

void sub_1919A228C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A36D0C();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0);
  }
}

void *sub_1919A253C()
{
  uint64_t result = (void *)MEMORY[0x192FDF3F0]("DeviceIdentityIssueClientCertificateWithCompletion", @"DeviceIdentity");
  off_1E92DE2C8 = result;
  return result;
}

void sub_1919A256C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v5 = a4;
  uint64_t v6 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v5;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Completed deletion of BAA cert {error: %@}", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, BOOL))(v7 + 16))(v7, v5 == 0);
  }
}

void *sub_1919A26A8()
{
  uint64_t result = (void *)MEMORY[0x192FDF3F0]("DeviceIdentityIsSupported", @"DeviceIdentity");
  off_1E92DE208 = result;
  return result;
}

void sub_1919A2A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1919A2A8C(uint64_t a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v44 = v5;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Starting fetch of device identity for baa signer {validityInMinutes: %@}", buf, 0xCu);
  }

  uint64_t v34 = v3;
  if (qword_1E92DE1F0 != -1) {
    dispatch_once(&qword_1E92DE1F0, &unk_1EE2459E8);
  }
  if (!qword_1E92DE1B8)
  {
    uint64_t v6 = (void **)MEMORY[0x192FDF3F0]("kMAOptionsBAAKeychainLabel", @"DeviceIdentity");
    if (v6) {
      uint64_t v7 = *v6;
    }
    else {
      uint64_t v7 = 0;
    }
    objc_storeStrong((id *)&qword_1E92DE1B8, v7);
  }
  if (!qword_1E92DE1E8)
  {
    int v8 = (void **)MEMORY[0x192FDF3F0]("kMAOptionsBAAValidity", @"DeviceIdentity");
    if (v8) {
      id v9 = *v8;
    }
    else {
      id v9 = 0;
    }
    objc_storeStrong((id *)&qword_1E92DE1E8, v9);
  }
  if (!qword_1E92DE1D8)
  {
    uint64_t v10 = (void **)MEMORY[0x192FDF3F0]("kMAOptionsBAAOIDSToInclude", @"DeviceIdentity");
    if (v10) {
      id v11 = *v10;
    }
    else {
      id v11 = 0;
    }
    objc_storeStrong((id *)&qword_1E92DE1D8, v11);
  }
  if (!qword_1E92DE1E0)
  {
    id v12 = (void **)MEMORY[0x192FDF3F0]("kMAOptionsBAAOIDUCRTDeviceIdentifiers", @"DeviceIdentity");
    if (v12) {
      id v13 = *v12;
    }
    else {
      id v13 = 0;
    }
    objc_storeStrong((id *)&qword_1E92DE1E0, v13);
  }
  if (!qword_1E92DE1C8)
  {
    id v14 = (void **)MEMORY[0x192FDF3F0]("kMAOptionsBAAOIDDeviceOSInformation", @"DeviceIdentity");
    if (v14) {
      uint64_t v15 = *v14;
    }
    else {
      uint64_t v15 = 0;
    }
    objc_storeStrong((id *)&qword_1E92DE1C8, v15);
  }
  if (!qword_1E92DE1D0)
  {
    id v16 = (void **)MEMORY[0x192FDF3F0]("kMAOptionsBAAOIDProductType", @"DeviceIdentity");
    if (v16) {
      uint64_t v17 = *v16;
    }
    else {
      uint64_t v17 = 0;
    }
    objc_storeStrong((id *)&qword_1E92DE1D0, v17);
  }
  uint64_t v18 = qword_1E92DE1C0;
  if (!qword_1E92DE1C0)
  {
    id v19 = (void **)MEMORY[0x192FDF3F0]("kMAOptionsBAAOIDDeviceIdentifiers", @"DeviceIdentity");
    if (v19) {
      long long v20 = *v19;
    }
    else {
      long long v20 = 0;
    }
    objc_storeStrong((id *)&qword_1E92DE1C0, v20);
    uint64_t v18 = qword_1E92DE1C0;
  }
  if (off_1E92DE1B0
    && qword_1E92DE1B8
    && qword_1E92DE1E8
    && qword_1E92DE1D8
    && qword_1E92DE1E0
    && qword_1E92DE1C8
    && qword_1E92DE1D0
    && v18)
  {
    v41[0] = qword_1E92DE1B8;
    v41[1] = qword_1E92DE1E8;
    uint64_t v21 = *(void *)(a1 + 32);
    v42[0] = @"com.apple.IDS";
    v42[1] = v21;
    v41[2] = qword_1E92DE1D8;
    v40[0] = qword_1E92DE1E0;
    v40[1] = qword_1E92DE1C8;
    v40[2] = qword_1E92DE1D0;
    v40[3] = v18;
    uint64_t v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:v40 count:4];
    v42[2] = v22;
    uint64_t v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v42 forKeys:v41 count:3];

    id v24 = (void (*)(void *, NSObject *, void *))off_1E92DE1B0;
    id v25 = [*(id *)(a1 + 40) baaQueue];
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    v36[2] = sub_1919A2EE0;
    v36[3] = &unk_1E572BC50;
    void v36[4] = *(void *)(a1 + 40);
    long long v38 = *(_OWORD *)(a1 + 48);
    uint64_t v39 = *(void *)(a1 + 64);
    id v26 = v34;
    id v37 = v34;
    v24(v25, v23, v36);
  }
  else
  {
    uint64_t v23 = objc_msgSend(MEMORY[0x1E4F6C3B8], "registration", v3);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT)) {
      sub_191A36EC8(v23, v27, v28, v29, v30, v31, v32, v33);
    }
    id v26 = v35;
  }
}

void *sub_1919A2EB0()
{
  uint64_t result = (void *)MEMORY[0x192FDF3F0]("DeviceIdentityIssueClientCertificateWithCompletion", @"DeviceIdentity");
  off_1E92DE1B0 = result;
  return result;
}

void sub_1919A2EE0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  id v9 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      uint64_t v10 = @"YES";
    }
    else {
      uint64_t v10 = @"NO";
    }
    *(_DWORD *)long long buf = 138412802;
    id v24 = v10;
    __int16 v25 = 2048;
    uint64_t v26 = [v7 count];
    __int16 v27 = 2112;
    id v28 = v8;
    _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "Completed fetch of device identity for baa signer {referenceKey: %@, certificates: %lu, error: %@}", buf, 0x20u);
  }

  id v11 = [*(id *)(a1 + 32) baaQueue];
  dispatch_assert_queue_V2(v11);

  id v12 = [*(id *)(a1 + 32) queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1919A30C0;
  block[3] = &unk_1E572BC28;
  uint64_t v22 = a2;
  id v18 = v8;
  id v19 = v7;
  long long v21 = *(_OWORD *)(a1 + 56);
  long long v16 = *(_OWORD *)(a1 + 40);
  id v13 = (id)v16;
  long long v20 = v16;
  id v14 = v7;
  id v15 = v8;
  dispatch_async(v12, block);
}

uint64_t sub_1919A30C0(uint64_t a1)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    goto LABEL_2;
  }
  if (!*(void *)(a1 + 80))
  {
LABEL_7:
    id v3 = 0;
    goto LABEL_8;
  }
  if ([*(id *)(a1 + 40) count] != 2)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (v2)
    {
LABEL_2:
      uint64_t v16 = *MEMORY[0x1E4F28A50];
      v17[0] = v2;
      id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:&v16 count:1];
LABEL_8:
      uint64_t v12 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IDSBAASignerErrorDomain" code:4 userInfo:v3];
      uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8);
      id v14 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = v12;

      return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    goto LABEL_7;
  }
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(void *)(a1 + 80);
  id v4 = objc_alloc(MEMORY[0x1E4F1C978]);
  uint64_t v5 = [*(id *)(a1 + 40) objectAtIndexedSubscript:0];
  CFDataRef v6 = SecCertificateCopyData(v5);
  id v7 = [*(id *)(a1 + 40) objectAtIndexedSubscript:1];
  CFDataRef v8 = SecCertificateCopyData(v7);
  uint64_t v9 = objc_msgSend(v4, "initWithObjects:", v6, v8, 0);
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), *(id *)(a1 + 32));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1919A3270(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = @"NO";
    if (a2) {
      uint64_t v5 = @"YES";
    }
    *(_DWORD *)long long buf = 138412290;
    id v14 = v5;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Device identity fetch final block called {timedOut: %@}", buf, 0xCu);
  }

  CFDataRef v6 = [*(id *)(a1 + 32) queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1919A33D0;
  block[3] = &unk_1E572BCA0;
  char v12 = a2;
  long long v11 = *(_OWORD *)(a1 + 56);
  long long v8 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v8;
  long long v10 = v8;
  dispatch_async(v6, block);
}

uint64_t sub_1919A33D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
    id v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0;

    uint64_t v4 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IDSBAASignerErrorDomain" code:1 userInfo:0];
    uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
    CFDataRef v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v7();
}

void sub_1919A3AF0(uint64_t a1)
{
  if (qword_1E92DE2F0 != -1) {
    dispatch_once(&qword_1E92DE2F0, &unk_1EE245A28);
  }
  if (off_1E92DE2E8)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v47 = 0;
    id v48 = 0;
    id v3 = off_1E92DE2E8(v2, 0, &v48, &v47);
    id v4 = v48;
    unint64_t v5 = (unint64_t)v47;
    uint64_t v6 = *(void *)(a1 + 40);
    id v45 = 0;
    id v46 = 0;
    id v7 = off_1E92DE2E8(v6, 0, &v46, &v45);
    id v8 = v46;
    unint64_t v9 = (unint64_t)v45;
    if (!(v5 | v9))
    {
      id v19 = 0;
      long long v10 = 0;
      goto LABEL_12;
    }
    long long v10 = (void *)v9;
    long long v11 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_191A36F38();
    }
  }
  else
  {
    long long v11 = [MEMORY[0x1E4F6C3B8] registration];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      sub_191A36F00(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    id v4 = 0;
    unint64_t v5 = 0;
    id v3 = 0;
    long long v10 = 0;
    id v8 = 0;
    id v7 = 0;
  }

  id v19 = (void *)v5;
LABEL_12:
  long long v20 = [*(id *)(a1 + 48) queue];
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = sub_1919A3E48;
  v28[3] = &unk_1E572BD10;
  id v43 = *(id *)(a1 + 128);
  id v29 = *(id *)(a1 + 56);
  id v30 = *(id *)(a1 + 64);
  id v21 = *(id *)(a1 + 72);
  uint64_t v22 = *(void *)(a1 + 136);
  id v31 = v21;
  uint64_t v44 = v22;
  id v32 = *(id *)(a1 + 80);
  id v33 = *(id *)(a1 + 88);
  id v34 = *(id *)(a1 + 96);
  id v35 = *(id *)(a1 + 104);
  id v36 = *(id *)(a1 + 112);
  id v37 = *(id *)(a1 + 120);
  id v38 = v4;
  id v39 = v3;
  id v40 = v7;
  id v41 = v19;
  id v42 = v10;
  id v23 = v10;
  id v24 = v19;
  id v25 = v7;
  id v26 = v3;
  id v27 = v4;
  dispatch_async(v20, v28);
}

void *sub_1919A3E18()
{
  uint64_t result = (void *)MEMORY[0x192FDF3F0]("DeviceIdentityCreateHostSignature", @"DeviceIdentity");
  off_1E92DE2E8 = result;
  return result;
}

void sub_1919A3E48(void *a1)
{
  uint64_t v1 = a1[18];
  uint64_t v2 = [[IDSBAASigningResult alloc] initWithResultData:a1[4] timestamp:a1[5] error:a1[6] currentTimestampInMs:a1[19] icloudDigest:a1[7] icloudAltDigest:a1[8] icloudResultData:a1[9] icloudAltResultData:a1[10] icloudError:a1[11] icloudAltError:a1[12] hostCertChain:a1[13] hostResultData:a1[14] hostAltResultData:a1[15] hostError:a1[16] hostAltError:a1[17]];
  (*(void (**)(uint64_t, IDSBAASigningResult *))(v1 + 16))(v1, v2);
}

uint64_t sub_1919A44E0()
{
  uint64_t v0 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", @"x-apple-baa-version", @"x-apple-baa-cert", @"x-apple-baa-time", @"x-apple-baa-sig-alt", @"x-apple-baa-sig", @"x-apple-baa-error", @"x-apple-baa-host-cert", @"x-apple-baa-host-sig-alt", @"x-apple-baa-host-sig", @"x-apple-baa-host-error", @"x-apple-i-device-type", @"x-apple-baa-supported", 0);
  uint64_t v1 = qword_1E92DE1F8;
  qword_1E92DE1F8 = v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

void sub_1919A53F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

id sub_1919A636C(uint64_t a1)
{
  if (*(void *)(a1 + 72))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v2 = *(void *)(a1 + 48);
      if (v2) {
        (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    if (*(unsigned char *)(a1 + 81))
    {
      uint64_t v3 = *(void *)(a1 + 64);
      if (v3) {
        (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
      }
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  id v4 = self;
  return self;
}

uint64_t sub_1919A67DC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_1919A72BC(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 objectForKey:*MEMORY[0x1E4F6B710]];
  if (MEMORY[0x192FDF3C0]())
  {
    uint64_t v3 = IMCanonicalizeFormattedString();

    uint64_t v2 = (void *)v3;
  }

  return v2;
}

id sub_1919A743C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *MEMORY[0x1E4F6B710];
  unint64_t v5 = [v3 objectForKey:*MEMORY[0x1E4F6B710]];

  if (v5
    && (uint64_t v6 = *(void **)(a1 + 32),
        [v3 objectForKey:v4],
        id v7 = objc_claimAutoreleasedReturnValue(),
        LOBYTE(v6) = [v6 _isInvisibleAlias:v7],
        v7,
        (v6 & 1) == 0))
  {
    id v8 = v3;
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

uint64_t sub_1919A758C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _isInvisibleAlias:a2] ^ 1;
}

id sub_1919A769C(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = *MEMORY[0x1E4F6B710];
  uint64_t v4 = [v2 objectForKey:*MEMORY[0x1E4F6B710]];

  if (v4)
  {
    unint64_t v5 = [v2 objectForKey:v3];
    uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4F6B5C8]) initWithUnprefixedURI:v5];
    id v7 = [v2 objectForKey:*MEMORY[0x1E4F6B718]];
    uint64_t v8 = [v7 integerValue];

    uint64_t v9 = [v2 objectForKey:*MEMORY[0x1E4F6B708]];
    long long v10 = v9;
    if (v9) {
      uint64_t v11 = [v9 BOOLValue];
    }
    else {
      uint64_t v11 = 1;
    }
    uint64_t v12 = (void *)[objc_alloc(MEMORY[0x1E4F6B498]) initWithURI:v6 isUserVisible:v11 validationStatus:v8];
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

uint64_t sub_1919A8D80(uint64_t a1, void *a2)
{
  return [a2 _internal];
}

void sub_1919A95BC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 56) object];
    [v4 account:v3 devicesChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919A9748(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 56) object];
    [v4 account:v3 nearbyDevicesChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919A98CC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 56) object];
    [v4 account:v3 connectedDevicesChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919A9A3C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 56) object];
    [v4 account:v3 devicesChanged:*(void *)(a1 + 40)];
  }
}

id sub_1919AA158(uint64_t a1, void *a2)
{
  id v2 = (objc_class *)MEMORY[0x1E4F6B5C8];
  id v3 = a2;
  id v4 = (void *)[[v2 alloc] initWithPrefixedURI:v3];

  return v4;
}

void sub_1919AA95C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) registrationStatusInfoChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919AA9BC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 56) object];
    [v4 account:v3 isActiveChanged:*(unsigned __int8 *)(a1 + 40)];
  }
}

void sub_1919AAC64(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) aliasesChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919AACC4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 56) object];
    [v4 account:v3 isActiveChanged:*(unsigned __int8 *)(a1 + 40)];
  }
}

void sub_1919AAEFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) vettedAliasesChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919AB11C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) profileChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919AB33C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) loginChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919AB55C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) displayNameChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919AB7D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 account:*(void *)(a1 + 32) pseudonymsChanged:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1919ABCEC(uint64_t a1, void *a2)
{
  return [a2 _internal];
}

uint64_t sub_1919ABEC8(uint64_t a1, void *a2)
{
  return [a2 _internal];
}

void sub_1919AC018(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 refreshRegistrationForAccount:*(void *)(a1 + 32)];
  }
}

void sub_1919AC818(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x1Cu);
}

uint64_t sub_1919AC88C()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2EE0];
  uint64_t v1 = qword_1EB2BD620;
  qword_1EB2BD620 = v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

void sub_1919ACD6C(uint64_t a1)
{
  id v2 = objc_alloc_init(IDSService);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 56);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1919ACE4C;
  v8[3] = &unk_1E572BE70;
  id v6 = *(id *)(a1 + 48);
  uint64_t v9 = v2;
  id v10 = v6;
  id v7 = v2;
  +[_IDSService serviceWithIdentifier:v3 commands:v4 manuallyAckMessages:v5 delegateContext:v7 completion:v8];
}

void sub_1919ACE4C(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  if (!v7 || a3)
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 8), a2);
    id v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v6();
}

void sub_1919AD0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1919AD0FC()
{
  return self;
}

uint64_t sub_1919AD298(void *a1)
{
  return [*(id *)(a1[4] + 8) addDelegate:a1[5] queue:a1[6]];
}

uint64_t sub_1919AD38C(void *a1)
{
  return [*(id *)(a1[4] + 8) addDelegate:a1[5] queue:a1[6]];
}

uint64_t sub_1919AD44C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeDelegate:*(void *)(a1 + 40)];
}

uint64_t sub_1919AD514(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) performGroupTask:*(void *)(a1 + 40)];
}

uint64_t sub_1919AD5C4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_setProtobufAction_forProtobufType_isResponse_);
}

uint64_t sub_1919AD680(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_setProtobufAction_forProtobufType_isResponse_);
}

void sub_1919AD78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AD7A4(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) protobufActionForType:*(unsigned __int16 *)(a1 + 48) isResponse:0];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919AD8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AD8F0(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) protobufActionForType:*(unsigned __int16 *)(a1 + 48) isResponse:1];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919ADADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919ADAF4(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendProtobuf:a1[5] fromAccount:a1[6] toDestinations:a1[7] priority:a1[10] options:a1[8] identifier:a1[11] error:a1[12]];
  *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = result;
  return result;
}

void sub_1919ADCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919ADD04(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendProtobuf:a1[5] fromAccount:0 toDestinations:a1[6] priority:a1[9] options:a1[7] identifier:a1[10] error:a1[11]];
  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_1919ADECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919ADEE4(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendOpportunisticData:a1[5] options:a1[6] identifier:a1[7] error:a1[9]];
  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_1919AE048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AE060(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) cancelOpportunisticDataWithIdentifier:a1[5] error:a1[7]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_1919AE27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AE294(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendMessage:a1[5] fromAccount:a1[6] toDestinations:a1[7] priority:a1[10] options:a1[8] identifier:a1[11] error:a1[12]];
  *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = result;
  return result;
}

void sub_1919AE470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AE488(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendMessage:a1[5] fromAccount:0 toDestinations:a1[6] priority:a1[9] options:a1[7] identifier:a1[10] error:a1[11]];
  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_1919AE604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AE61C(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) cancelMessageWithOptions:a1[5] identifier:a1[7] error:a1[8]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_1919AE7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AE7C4(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) cancelMessageWithOptions:a1[5] destination:a1[6] identifier:a1[8] error:a1[9]];
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_1919AE958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AE970(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) cancelMessageWithOptions:a1[5] destinations:a1[6] identifier:a1[8] error:a1[9]];
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_1919AEB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AEB74(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendData:a1[5] fromAccount:a1[6] toDestinations:a1[7] priority:a1[10] options:a1[8] identifier:a1[11] error:a1[12]];
  *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = result;
  return result;
}

void sub_1919AED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AED68(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendData:a1[5] fromAccount:0 toDestinations:a1[6] priority:a1[9] options:a1[7] identifier:a1[10] error:a1[11]];
  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_1919AEF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AEF78(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendAccessoryData:a1[5] toAccessoryID:a1[6] accessToken:a1[7] options:a1[8] identifier:a1[10] error:a1[11]];
  *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = result;
  return result;
}

void sub_1919AF134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AF14C(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendInvitation:a1[5] fromAccount:0 toDestination:a1[6] options:a1[7] identifier:a1[9] error:a1[10]];
  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_1919AF308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AF320(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendInvitationUpdate:a1[5] fromAccount:0 toDestination:a1[6] options:a1[7] identifier:a1[9] error:a1[10]];
  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_1919AF464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AF47C(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) setWakingPushPriority:a1[6] error:a1[7]];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = result;
  return result;
}

void sub_1919AF614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AF62C(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendData:a1[5] priority:a1[8] options:a1[6] identifier:a1[9] error:a1[10]];
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_1919AF81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AF834(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendResourceAtURL:a1[5] metadata:a1[6] fromAccount:0 toDestinations:a1[7] priority:a1[10] options:a1[8] identifier:a1[11] error:a1[12]];
  *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = result;
  return result;
}

void sub_1919AF9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AF9C8(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) getProgressUpdateForIdentifier:a1[5] error:a1[7]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_1919AFB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AFB74(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendAheadGroup:a1[5] priority:a1[8] options:a1[6] identifier:a1[9] completion:&unk_1EE246748];
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_1919AFCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AFCEC(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) reportSpamMessage:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

uint64_t sub_1919AFDF8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_sendAckForMessageWithContext_);
}

void sub_1919AFF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919AFF30(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendCertifiedDeliveryReceipt:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_1919B008C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B00A4(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) cancelIdentifier:a1[5] error:a1[7]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_1919B0244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B025C(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) sendServerMessage:a1[5] command:a1[6] fromAccount:a1[7]];
  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_1919B0384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B039C(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) registrationRestrictionReason];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919B0508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B0520(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) linkedDevicesWithRelationship:a1[6]];
  uint64_t v3 = *(void *)(a1[5] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B06A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B06B8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) serviceDomain];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B0834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B084C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) iCloudAccount];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B09C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B09E0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) internalAccounts];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B0B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919B0B74(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 8) serviceProperties];
  uint64_t v2 = [v5 identifier];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1919B0CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B0CE4(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) canSend];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919B0E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B0E88(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) deviceForFromID:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B103C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B1054(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) linkedDeviceForFromID:a1[5] withRelationship:a1[7]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B11D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B11EC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) firstRoutableInternetDestinationForSelf];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B1390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B13A8(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) deviceForUniqueID:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B154C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B1564(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) devicesForBTUUID:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B1708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B1720(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) uriForFromID:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_1919B182C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_setPreferInfraWiFi_);
}

void sub_1919B18E0(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _internal];
  [v2 setNeedsLaunchOnNearbyDevicesChanged:v1];
}

void sub_1919B1A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919B1A38(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _internal];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 needsLaunchOnNearbyDevicesChanged];
}

uint64_t sub_1919B1B68(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_setLinkPreferences_);
}

uint64_t sub_1919B1C2C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_startOTRTest_);
}

uint64_t sub_1919B1CF4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_setPretendingToBeFull_);
}

void sub_1919B1DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B1E0C(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) isPretendingToBeFull];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1919B1EF0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_testCloudQRConnection);
}

void sub_1919B204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B2064(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) updateSubServices:a1[5] forDevice:a1[6]];
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_1919B2204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B221C(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) datagramConnectionForSessionDestination:a1[5] error:a1[7]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B23DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B23F4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) datagramConnectionForSessionDestination:*(void *)(a1 + 40) uid:*(unsigned int *)(a1 + 64) error:*(void *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B2590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B25A8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) datagramConnectionForSocketDescriptor:*(unsigned int *)(a1 + 56) error:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B2764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B277C(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) streamConnectionForSessionDestination:a1[5] error:a1[7]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B2914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B292C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) streamConnectionForSocketDescriptor:*(unsigned int *)(a1 + 56) error:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B2BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B2C10(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) datagramChannelForSessionDestination:a1[5] options:a1[6] error:a1[8]];
  uint64_t v3 = *(void *)(a1[7] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B2DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B2DC4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) datagramChannelForSocketDescriptor:*(unsigned int *)(a1 + 56) error:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_1919B3184(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 aliasStrings];
  uint64_t v4 = [v3 containsObject:*(void *)(a1 + 32)];

  return v4;
}

id sub_1919B31D8(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 isEqualToIgnoringCase:*MEMORY[0x1E4F6B7D0]]) {
    id v3 = 0;
  }
  else {
    id v3 = v2;
  }

  return v3;
}

void sub_1919B3324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B333C(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) maxEffectivePayloadSize];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919B34A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B34B8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) URIs];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B3634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B364C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) pseudonymURIMap];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B37F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B3808(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) pseudonymForPseudonymURI:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B39AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B39C4(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) pseudonymsForMaskedURI:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B3B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B3BAC(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) pseudonymsForMaskedURI:a1[5] matchingProperties:a1[6]];
  uint64_t v3 = *(void *)(a1[7] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B3E0C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void **)(v2 + 8);
  if (a1[6])
  {
    id v5 = *(void **)(v2 + 8);
    objc_msgSend(v5, "provisionPseudonymWithProperties:requestProperties:completion:", v3);
  }
  else
  {
    id v6 = [MEMORY[0x1E4F6B540] defaultProperties];
    [v4 provisionPseudonymWithProperties:v3 requestProperties:v6 completion:a1[7]];
  }
}

void sub_1919B4064(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void **)(v2 + 8);
  uint64_t v5 = a1[6];
  if (a1[7])
  {
    id v6 = *(void **)(v2 + 8);
    objc_msgSend(v6, "provisionPseudonymForURI:withProperties:requestProperties:completion:", v3, v5);
  }
  else
  {
    id v7 = [MEMORY[0x1E4F6B540] defaultProperties];
    [v4 provisionPseudonymForURI:v3 withProperties:v5 requestProperties:v7 completion:a1[8]];
  }
}

void sub_1919B4364(double *a1)
{
  uint64_t v2 = *((void *)a1 + 5);
  uint64_t v3 = *(void **)(*((void *)a1 + 4) + 8);
  double v4 = a1[7];
  id v5 = [MEMORY[0x1E4F6B540] defaultProperties];
  [v3 renewPseudonym:v2 forUpdatedExpiryEpoch:v5 requestProperties:*((void *)a1 + 6) completion:v4];
}

void sub_1919B44E0(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void **)(a1[4] + 8);
  id v4 = [MEMORY[0x1E4F6B540] defaultProperties];
  [v3 revokePseudonym:v2 requestProperties:v4 completion:a1[6]];
}

void sub_1919B46E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B46FC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) pseudonymPropertiesWithFeatureID:*(void *)(a1 + 40) scopeID:*(void *)(a1 + 48) expiryDurationInSeconds:*(double *)(a1 + 64)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_1919B4A38(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_signData_withAlgorithm_options_completion_);
}

uint64_t sub_1919B4BD0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_verifySignedData_matchesExpectedData_withTokenURI_forAlgorithm_options_completion_);
}

uint64_t sub_1919B4D14(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_reportAction_ofTempURI_fromURI_withCompletion_);
}

uint64_t sub_1919B4DE4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) scheduleTransactionLogTask:*(void *)(a1 + 40)];
}

void sub_1919B4DFC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void IDSAppleCareSignIDSIn(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v15 = a1;
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (_IDSRunningInDaemon()) {
    sub_191A3A920();
  }
  uint64_t v13 = sub_1919B4F24(v11, v12);
  if (v13)
  {
    if (qword_1E92DE310 != -1) {
      dispatch_once(&qword_1E92DE310, &unk_1EE245D48);
    }
    uint64_t v14 = +[IDSDaemonController sharedInstance];
    [v14 appleCareSignInUserName:v15 DSID:v9 authToken:v10 requestID:v13];
  }
}

id sub_1919B4F24(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = (void *)MEMORY[0x192FE03B0](v3);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1919B5288;
  v14[3] = &unk_1E5728FD8;
  id v15 = v3;
  id v6 = v5;
  id v7 = v4;
  id v8 = v3;
  id v9 = [[IDSDaemonResponseHandler alloc] initWithBlock:v6 queue:v7];

  id v10 = sub_1919B531C();
  if (qword_1E92DE300 != -1) {
    dispatch_once(&qword_1E92DE300, &unk_1EE246E28);
  }
  if (byte_1E92DE2F8) {
    double v11 = (double)IMGetDomainIntForKey();
  }
  else {
    double v11 = 60.0;
  }
  id v12 = [v10 scheduleTimeoutWithResponseHandler:v9 timeoutInterval:v14 timeoutBlock:v11];

  return v12;
}

void IDSAppleCareSignIDSOut(void *a1, void *a2)
{
  id v6 = a1;
  id v3 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A3A94C();
  }
  id v4 = sub_1919B4F24(v6, v3);
  if (v4)
  {
    if (qword_1E92DE310 != -1) {
      dispatch_once(&qword_1E92DE310, &unk_1EE245D48);
    }
    id v5 = +[IDSDaemonController sharedInstance];
    [v5 appleCareSignOutUserWithRequestID:v4];
  }
}

void IDSAppleCareSetDaemonDisconnectedBlock(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A3A978();
  }
  id v5 = [IDSAppleCareDaemonResponseListener alloc];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1919B5278;
  void v10[3] = &unk_1E5728FD8;
  id v11 = v3;
  id v6 = v3;
  id v7 = [(IDSAppleCareDaemonResponseListener *)v5 initWithDisconnectedBlockAndNoTimeout:v10];
  id v8 = +[IDSDaemonController sharedInstance];
  id v9 = [v8 listener];
  [v9 addHandler:v7];
}

uint64_t sub_1919B5278(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1919B5288(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_alloc(MEMORY[0x1E4F28C58]);
    id v3 = (id)[v2 initWithDomain:*MEMORY[0x1E4F6AF18] code:2 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

id sub_1919B531C()
{
  if (qword_1E92DE148 != -1) {
    dispatch_once(&qword_1E92DE148, &unk_1EE246768);
  }
  uint64_t v0 = (void *)qword_1E92DE170;

  return v0;
}

uint64_t sub_1919B5370()
{
  uint64_t v0 = objc_alloc_init(IDSDaemonRequestTimer);
  uint64_t v1 = qword_1E92DE170;
  qword_1E92DE170 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919B53AC()
{
  uint64_t result = IMGetDomainBoolForKey();
  byte_1E92DE2F8 = result;
  return result;
}

void sub_1919B53DC()
{
  uint64_t v0 = [IDSAppleCareDaemonResponseListener alloc];
  uint64_t v1 = sub_1919B531C();
  uint64_t v2 = [(IDSAppleCareDaemonResponseListener *)v0 initWithRequestTimer:v1];
  id v3 = (void *)qword_1E92DE308;
  qword_1E92DE308 = v2;

  id v5 = +[IDSDaemonController sharedInstance];
  id v4 = [v5 listener];
  [v4 addHandler:qword_1E92DE308];
}

void IDSiCloudSignIn(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  if (_IDSRunningInDaemon()) {
    sub_191A3A9A4();
  }
  uint64_t v17 = [MEMORY[0x1E4F6C3B8] iCloud];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = @"YES";
    int v20 = 138413570;
    id v21 = v11;
    if (!v13) {
      uint64_t v18 = @"NO";
    }
    __int16 v22 = 2112;
    id v23 = v12;
    __int16 v24 = 2112;
    id v25 = v18;
    __int16 v26 = 2112;
    id v27 = v14;
    __int16 v28 = 2112;
    id v29 = v15;
    __int16 v30 = 2112;
    id v31 = v16;
    _os_log_impl(&dword_19190B000, v17, OS_LOG_TYPE_DEFAULT, "iCloud sign in with userName %@ authToken %@ password %@ accountInfo %@ status %@ and handles %@", (uint8_t *)&v20, 0x3Eu);
  }

  id v19 = +[IDSDaemonController sharedInstance];
  [v19 iCloudSignInWithUserName:v11 authToken:v12 password:v13 accountInfo:v14 accountStatus:v15 handles:v16];
}

void IDSiCloudSignOut()
{
  if (_IDSRunningInDaemon()) {
    sub_191A3A9D0();
  }
  uint64_t v0 = [MEMORY[0x1E4F6C3B8] iCloud];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "iCloud sign out", v2, 2u);
  }

  uint64_t v1 = +[IDSDaemonController sharedInstance];
  [v1 iCloudSignOut];
}

void IDSiCloudUpdate(void *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A3A9FC();
  }
  id v5 = [MEMORY[0x1E4F6C3B8] iCloud];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    id v8 = v3;
    __int16 v9 = 2112;
    id v10 = v4;
    _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "iCloud update for userName %@ accountInfo %@", (uint8_t *)&v7, 0x16u);
  }

  id v6 = +[IDSDaemonController sharedInstance];
  [v6 iCloudUpdateForUserName:v3 accountInfo:v4];
}

void IDSiCloudModify(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (_IDSRunningInDaemon()) {
    sub_191A3AA28();
  }
  uint64_t v2 = [MEMORY[0x1E4F6C3B8] iCloud];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    id v5 = v1;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "iCloud modify for userName %@", (uint8_t *)&v4, 0xCu);
  }

  id v3 = +[IDSDaemonController sharedInstance];
  [v3 iCloudModifyForUserName:v1];
}

void IDSiTunesSignIn(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  if (_IDSRunningInDaemon()) {
    sub_191A3AA54();
  }
  uint64_t v17 = [MEMORY[0x1E4F6C3B8] iCloud];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = @"YES";
    int v20 = 138413570;
    id v21 = v11;
    if (!v13) {
      uint64_t v18 = @"NO";
    }
    __int16 v22 = 2112;
    id v23 = v12;
    __int16 v24 = 2112;
    id v25 = v18;
    __int16 v26 = 2112;
    id v27 = v14;
    __int16 v28 = 2112;
    id v29 = v15;
    __int16 v30 = 2112;
    id v31 = v16;
    _os_log_impl(&dword_19190B000, v17, OS_LOG_TYPE_DEFAULT, "iTunes sign in with userName %@ authToken %@ password %@ accountInfo %@ status %@ and handles %@", (uint8_t *)&v20, 0x3Eu);
  }

  id v19 = +[IDSDaemonController sharedInstance];
  [v19 iTunesSignInWithUserName:v11 authToken:v12 password:v13 accountInfo:v14 accountStatus:v15 handles:v16];
}

void IDSiTunesSignOut()
{
  if (_IDSRunningInDaemon()) {
    sub_191A3AA80();
  }
  uint64_t v0 = [MEMORY[0x1E4F6C3B8] iCloud];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "iTunes sign out", v2, 2u);
  }

  id v1 = +[IDSDaemonController sharedInstance];
  [v1 iTunesSignOut];
}

void IDSGameCenterSignIn(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  if (_IDSRunningInDaemon()) {
    sub_191A3AAAC();
  }
  uint64_t v17 = [MEMORY[0x1E4F6C3B8] iCloud];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = @"YES";
    int v20 = 138413570;
    id v21 = v11;
    if (!v13) {
      uint64_t v18 = @"NO";
    }
    __int16 v22 = 2112;
    id v23 = v12;
    __int16 v24 = 2112;
    id v25 = v18;
    __int16 v26 = 2112;
    id v27 = v14;
    __int16 v28 = 2112;
    id v29 = v15;
    __int16 v30 = 2112;
    id v31 = v16;
    _os_log_impl(&dword_19190B000, v17, OS_LOG_TYPE_DEFAULT, "GameCenter sign in with userName %@ authToken %@ password %@ accountInfo %@ status %@ and handles %@", (uint8_t *)&v20, 0x3Eu);
  }

  id v19 = +[IDSDaemonController sharedInstance];
  [v19 gameCenterSignInWithUserName:v11 authToken:v12 password:v13 accountInfo:v14 accountStatus:v15 handles:v16];
}

void IDSGameCenterSignOut()
{
  if (_IDSRunningInDaemon()) {
    sub_191A3AAD8();
  }
  uint64_t v0 = [MEMORY[0x1E4F6C3B8] iCloud];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEFAULT, "GameCenter sign out", v2, 2u);
  }

  id v1 = +[IDSDaemonController sharedInstance];
  [v1 gameCenterSignOut];
}

void IDSGameCenterModify(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (_IDSRunningInDaemon()) {
    sub_191A3AB04();
  }
  uint64_t v2 = [MEMORY[0x1E4F6C3B8] iCloud];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    id v5 = v1;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "GameCenter modify for userName %@", (uint8_t *)&v4, 0xCu);
  }

  id v3 = +[IDSDaemonController sharedInstance];
  [v3 gameCenterModifyForUserName:v1];
}

void IDSUpdateUser(void *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = [MEMORY[0x1E4F6C3B8] iCloud];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    id v8 = v3;
    __int16 v9 = 2112;
    id v10 = v4;
    _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "IDS update user { oldUserName: %@, newUserName: %@ }", (uint8_t *)&v7, 0x16u);
  }

  uint64_t v6 = +[IDSDaemonController sharedInstance];
  [v6 updateUserWithOldUserName:v3 newUserName:v4];
}

void sub_1919B627C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B6294(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) count];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919B6428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919B6440(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _criticalFindRequestContextWithResponseHandler:*(void *)(a1 + 40)];
  if (!v2)
  {
    uint64_t v3 = [NSString stringGUID];
    uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v6 = objc_alloc(MEMORY[0x1E4F6C3F0]);
    double v7 = *(double *)(a1 + 64);
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = dispatch_get_global_queue(0, 0);
    uint64_t v11 = (void *)[v6 initWithTimeInterval:v8 name:1 shouldWake:v9 target:sel__handleSystemTimerFired_ selector:v8 userInfo:v10 queue:v7];

    id v12 = [[IDSDaemonRequestContext alloc] initWithResponseHandler:*(void *)(a1 + 40) timeoutBlock:*(void *)(a1 + 48) systemTimer:v11];
    [*(id *)(*(void *)(a1 + 32) + 8) setObject:v12 forKeyedSubscript:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];

    uint64_t v2 = 0;
  }
}

uint64_t sub_1919B6760(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__criticalInvokeTimeoutBlockForRequestID_);
}

uint64_t sub_1919B687C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1919B699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919B69B4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _criticalInvalidateTimeoutAndReturnHandlerForRequestID:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B6B50(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) allKeys];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        double v7 = [*(id *)(a1 + 32) _criticalInvalidateTimeoutAndReturnHandlerForRequestID:*(void *)(*((void *)&v9 + 1) + 8 * v6)];
        if (v7) {
          [*(id *)(a1 + 40) addObject:v7];
        }

        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  if ([*(id *)(*(void *)(a1 + 32) + 8) count])
  {
    uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
    [v8 handleFailureInMethod:*(void *)(a1 + 48) object:*(void *)(a1 + 32) file:@"IDSDaemonRequestTimer.m" lineNumber:205 description:@"The request context map should be empty after canceling all countdowns."];
  }
}

void sub_1919B743C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
}

void sub_1919B75F8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(*(void *)(a1 + 32) + 82) = 1;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 32);
  uint64_t v45 = [v2 countByEnumeratingWithState:&v51 objects:v65 count:16];
  if (v45)
  {
    obuint64_t j = v2;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    LOBYTE(v48) = 0;
    char v41 = 0;
    char v3 = 0;
    int v4 = 0;
    uint64_t v47 = 0;
    int v5 = 0;
    int v6 = 0;
    int v7 = 0;
    int v8 = 0;
    int v9 = 0;
    uint64_t v39 = v1;
    uint64_t v44 = *(void *)v52;
    do
    {
      for (uint64_t i = 0; i != v45; ++i)
      {
        if (*(void *)v52 != v44) {
          objc_enumerationMutation(obj);
        }
        int v46 = v8;
        if ((objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0)
        {
          int v9 = 1;
        }
        char v11 = objc_opt_respondsToSelector();
        if ((objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0)
        {
          BYTE4(v43) = 1;
        }
        HIDWORD(v48) = v9;
        if ((objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0)
        {
          LOBYTE(v43) = 1;
        }
        int v12 = v4;
        if (objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector()) {
          BYTE4(v42) = 1;
        }
        int v13 = v7;
        char v14 = objc_opt_respondsToSelector();
        if (objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector()) {
          char v41 = 1;
        }
        char v15 = objc_opt_respondsToSelector();
        if (objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector())
        {
          LOBYTE(v42) = 1;
          HIDWORD(v48) = 1;
        }
        BYTE4(v47) |= v11;
        LOBYTE(v48) = v14 | v48;
        v3 |= v15;
        LODWORD(v47) = objc_opt_respondsToSelector() | v47;
        v5 |= objc_opt_respondsToSelector();
        int v16 = objc_opt_respondsToSelector();
        v6 |= v16 | objc_opt_respondsToSelector();
        int v7 = objc_opt_respondsToSelector() | v13;
        int v4 = objc_opt_respondsToSelector() | v12;
        int v8 = objc_opt_respondsToSelector() | v46;
        int v9 = HIDWORD(v48);
      }
      uint64_t v45 = [obj countByEnumeratingWithState:&v51 objects:v65 count:16];
    }
    while (v45);

    if (v3)
    {
      uint64_t v1 = v39;
      *(_DWORD *)(*(void *)(v39 + 32) + 88) = 0;
      BOOL v17 = 1;
      char v18 = BYTE4(v47);
      char v19 = v47;
      char v20 = v41;
      char v21 = v42;
      goto LABEL_38;
    }
    uint64_t v1 = v39;
    char v18 = BYTE4(v47);
    char v19 = v47;
    char v20 = v41;
    char v21 = v42;
  }
  else
  {

    uint64_t v43 = 0;
    uint64_t v48 = 0;
    LOBYTE(v8) = 0;
    LOBYTE(v7) = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v5) = 0;
    char v18 = 0;
    char v19 = 0;
    LOBYTE(v4) = 0;
    char v21 = 0;
    char v20 = 0;
    BYTE4(v42) = 0;
  }
  BOOL v17 = [*(id *)(*(void *)(v1 + 32) + 48) count] != 0;
  *(_DWORD *)(*(void *)(v1 + 32) + 88) = 0;
LABEL_38:
  if ((v48 & 0x100000000) != 0)
  {
    __int16 v22 = (_DWORD *)MEMORY[0x1E4F6B640];
    *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B658];
    *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *v22;
  }
  if ((v43 & 0x100000000) != 0) {
    *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B680];
  }
  if (v43) {
    *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B6A0];
  }
  if ((v42 & 0x100000000) == 0)
  {
    if ((v48 & 1) == 0) {
      goto LABEL_50;
    }
    int v23 = *MEMORY[0x1E4F6B648];
    goto LABEL_49;
  }
  int v23 = *MEMORY[0x1E4F6B648];
  *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B648];
  if (v48) {
LABEL_49:
  }
    *(_DWORD *)(*(void *)(v1 + 32) + 88) |= v23;
LABEL_50:
  if ((v20 & 1) == 0)
  {
    if (!v17) {
      goto LABEL_56;
    }
    int v25 = *MEMORY[0x1E4F6B640];
    goto LABEL_55;
  }
  __int16 v24 = (int *)MEMORY[0x1E4F6B640];
  *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B650];
  int v25 = *v24;
  *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *v24;
  if (v17)
  {
LABEL_55:
    *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B660];
    *(_DWORD *)(*(void *)(v1 + 32) + 88) |= v25;
  }
LABEL_56:
  if (v21)
  {
    *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B668];
    if ((v19 & 1) == 0)
    {
LABEL_58:
      if ((v18 & 1) == 0) {
        goto LABEL_59;
      }
      goto LABEL_77;
    }
  }
  else if ((v19 & 1) == 0)
  {
    goto LABEL_58;
  }
  *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B678];
  if ((v18 & 1) == 0)
  {
LABEL_59:
    if ((v5 & 1) == 0) {
      goto LABEL_60;
    }
    goto LABEL_78;
  }
LABEL_77:
  *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B638];
  if ((v5 & 1) == 0)
  {
LABEL_60:
    if ((v6 & 1) == 0) {
      goto LABEL_61;
    }
    goto LABEL_79;
  }
LABEL_78:
  *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B688];
  if ((v6 & 1) == 0)
  {
LABEL_61:
    if ((v4 & 1) == 0) {
      goto LABEL_62;
    }
    goto LABEL_80;
  }
LABEL_79:
  *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B670];
  if ((v4 & 1) == 0)
  {
LABEL_62:
    if ((v8 & 1) == 0) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
LABEL_80:
  *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B690];
  if (v8) {
LABEL_63:
  }
    *(_DWORD *)(*(void *)(v1 + 32) + 88) |= *MEMORY[0x1E4F6B698];
LABEL_64:
  [*(id *)(v1 + 32) setWantsPseudonymUpdates:v7 & 1];
  __int16 v26 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = *(void *)(v1 + 32);
    __int16 v28 = [*(id *)(v27 + 120) serviceName];
    _IDSBinaryStringForValue();
    v30 = char v29 = v7;
    uint64_t v31 = [*(id *)(*(void *)(v1 + 32) + 32) count];
    *(_DWORD *)long long buf = 134219010;
    uint64_t v32 = @"NO";
    uint64_t v56 = v27;
    __int16 v57 = 2112;
    if (v29) {
      uint64_t v32 = @"YES";
    }
    uint64_t v58 = v28;
    __int16 v59 = 2112;
    long long v60 = v30;
    __int16 v61 = 2048;
    uint64_t v62 = v31;
    __int16 v63 = 2112;
    long long v64 = v32;
    _os_log_impl(&dword_19190B000, v26, OS_LOG_TYPE_DEFAULT, "_IDSService - added delegate {self: %p, serviceName %@, listenerCaps %@, delegates: %lu, wantsPseudonymUpdates: %@}", buf, 0x34u);
  }
  id v33 = [*(id *)(*(void *)(v1 + 32) + 120) serviceName];
  id v34 = *(void **)(*(void *)(v1 + 32) + 16);
  if (v34 && [v34 count])
  {
    uint64_t v35 = *(void *)(v1 + 32);
    id v36 = *(void **)(v35 + 16);
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 3221225472;
    v49[2] = sub_1919B7F98;
    v49[3] = &unk_1E572C1C0;
    v49[4] = v35;
    id v50 = v33;
    [v36 enumerateKeysAndObjectsUsingBlock:v49];
  }
  else
  {
    id v37 = +[IDSLogging _IDSService];
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_19190B000, v37, OS_LOG_TYPE_DEFAULT, "_IDSService - No accounts detected, acknowledging transaction anyway.", buf, 2u);
    }

    id v38 = +[_IDSXPCCheckinManager sharedInstance];
    [v38 noteFinishedTransactionForService:v33];
  }
}

void sub_1919B7F98(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  int v5 = [v4 _internal];
  [v5 setDelegateCapabilities:*(unsigned int *)(*(void *)(a1 + 32) + 88)];

  int v6 = [v4 _internal];

  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = +[IDSInternalQueueController sharedInstance];
  int v9 = [v8 queue];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1919B80A4;
  void v10[3] = &unk_1E5729000;
  id v11 = *(id *)(a1 + 40);
  [v6 addDelegate:v7 queue:v9 completion:v10];
}

void sub_1919B80A4(uint64_t a1)
{
  id v2 = +[_IDSXPCCheckinManager sharedInstance];
  [v2 noteFinishedTransactionForService:*(void *)(a1 + 32)];
}

id sub_1919B87C4(uint64_t a1)
{
  if (*(void *)(a1 + 72))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v2 = *(void *)(a1 + 48);
      if (v2) {
        (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    if (*(unsigned char *)(a1 + 81))
    {
      uint64_t v3 = *(void *)(a1 + 64);
      if (v3) {
        (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
      }
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  id v4 = self;
  return self;
}

void sub_1919B89E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
}

void sub_1919B8A1C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 serviceAllowedTrafficClassifiersDidReset:v3];
  }
}

void sub_1919B8DA8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 service:v3 token:*(void *)(a1 + 40) time:*(void *)(a1 + 48) error:*(double *)(a1 + 56)];
  }
}

void sub_1919B9008(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 service:v3 didCancelMessageWithSuccess:*(unsigned __int8 *)(a1 + 56) error:*(void *)(a1 + 40) identifier:*(void *)(a1 + 48)];
  }
}

void sub_1919B99FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a72, 8);
  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x2E0], 8);
  _Block_object_dispose(&STACK[0x310], 8);
  _Block_object_dispose((const void *)(v72 - 192), 8);
  _Block_object_dispose((const void *)(v72 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1919B9A8C(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) lock];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    id v4 = [MEMORY[0x1E4F6C3B8] ACKTracker];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v21 = v5;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "%@ Update cache with active device", buf, 0xCu);
    }

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    int v6 = objc_msgSend(*(id *)(a1 + 40), "internalAccounts", 0);
    uint64_t v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v16;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(v6);
          }
          id v11 = *(void **)(*((void *)&v15 + 1) + 8 * v10);
          int v12 = [*(id *)(a1 + 48) daemonListener];
          int v13 = [v11 uniqueID];
          [v12 switchActivePairedDevice:v3 forAccount:v13];

          [v11 _reloadCachedDevices];
          ++v10;
        }
        while (v8 != v10);
        uint64_t v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v8);
    }

    char v14 = [*(id *)(a1 + 48) daemonListener];
    [v14 switchActivePairedDevice:v3 forService:*(void *)(a1 + 56)];

    [*(id *)(a1 + 48) _reloadCachedLinkedDevices];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  }
  [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) unlock];
}

void sub_1919B9C9C(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F6C3B8] ACKTracker];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v11 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "%@ Pre didSwitch call back block", buf, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    id v4 = +[IDSInternalQueueController sharedInstance];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_1919B9E20;
    v7[3] = &unk_1E5729190;
    uint64_t v9 = *(void *)(a1 + 72);
    int8x16_t v6 = *(int8x16_t *)(a1 + 40);
    id v5 = (id)v6.i64[0];
    int8x16_t v8 = vextq_s8(v6, v6, 8uLL);
    [v4 performBlock:v7 waitUntilDone:1];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  }
}

uint64_t sub_1919B9E20(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _activeDeviceForUniqueID:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919B9E70(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 112) awaitAcknowledgementFromServiceDelegate:v3];
  id v5 = [*(id *)(a1 + 40) object];
  int8x16_t v6 = [v5 _acknowledgementBlockWithDelegateIdentifier:v4];

  uint64_t v7 = [MEMORY[0x1E4F6C3B8] ACKTracker];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    int v10 = 138413058;
    uint64_t v11 = v8;
    __int16 v12 = 2048;
    id v13 = v3;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    long long v17 = v4;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "%@ Notifying delegate %p of active device switch to %@ (delegateIdentifier %@)", (uint8_t *)&v10, 0x2Au);
  }

  [v3 service:*(void *)(a1 + 56) didSwitchActivePairedDevice:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) acknowledgementBlock:v6];
}

void sub_1919B9FC4(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F6C3B8] ACKTracker];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "%@ Pre devicesChanged call back block", (uint8_t *)&v7, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    uint64_t v4 = [*(id *)(a1 + 48) devices];
    uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8);
    int8x16_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  }
}

void sub_1919BA0C8(void *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6C3B8] ACKTracker];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = *(void *)(*(void *)(a1[6] + 8) + 40);
    int v7 = 138412802;
    uint64_t v8 = v5;
    __int16 v9 = 2048;
    id v10 = v3;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "%@ Notifying delegate %p of devices changing (devices %@)", (uint8_t *)&v7, 0x20u);
  }

  [v3 service:a1[5] devicesChanged:*(void *)(*(void *)(a1[6] + 8) + 40)];
}

void sub_1919BA1C4(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F6C3B8] ACKTracker];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "%@ Pre linkedDevicesChanged call back block", (uint8_t *)&v7, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    uint64_t v4 = [*(id *)(a1 + 48) linkedDevicesWithRelationship:2];
    uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  }
}

void sub_1919BA2CC(void *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6C3B8] ACKTracker];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = *(void *)(*(void *)(a1[6] + 8) + 40);
    int v7 = 138412802;
    uint64_t v8 = v5;
    __int16 v9 = 2048;
    id v10 = v3;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "%@ Notifying delegate %p of linked devices changing (devices %@)", (uint8_t *)&v7, 0x20u);
  }

  [v3 service:a1[5] linkedDevicesChanged:*(void *)(*(void *)(a1[6] + 8) + 40)];
}

void sub_1919BA3C8(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F6C3B8] ACKTracker];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    int v10 = 138412290;
    uint64_t v11 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "%@ Group notify", (uint8_t *)&v10, 0xCu);
  }

  (*(void (**)(void))(a1[6] + 16))();
  uint64_t v4 = *(void *)(a1[7] + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;

  uint64_t v6 = *(void *)(a1[8] + 8);
  int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;

  uint64_t v8 = *(void *)(a1[9] + 8);
  __int16 v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = 0;
}

void sub_1919BA79C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) object];
  [(id)v2 _stopAwaitingQuickSwitchAcknowledgementFromDelegateWithIdentifier:*(void *)(a1 + 40)];

  uint64_t v3 = [*(id *)(a1 + 32) object];
  LOBYTE(v2) = [v3 _isDroppingMessages];

  if ((v2 & 1) == 0)
  {
    uint64_t v4 = [MEMORY[0x1E4F6C3B8] watchPairing];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Stopped suspending traffic to the daemon.", v5, 2u);
    }
  }
}

void sub_1919BA950(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 service:v3 linkedDevicesChanged:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1919BABBC(uint64_t a1, void *a2)
{
  return [a2 _internal];
}

uint64_t sub_1919BADB4(uint64_t a1, void *a2)
{
  return [a2 _internal];
}

uint64_t sub_1919BAFAC(uint64_t a1, void *a2)
{
  return [a2 _internal];
}

uint64_t sub_1919BB1A4(uint64_t a1, void *a2)
{
  return [a2 _internal];
}

void sub_1919BB280(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134217984;
    id v9 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for registrationRestrictionReason if it responds.", (uint8_t *)&v8, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v3 service:v5 registrationRestrictionReasonChanged:*(void *)(a1 + 40)];

    uint64_t v6 = @"YES";
  }
  else
  {
    uint64_t v6 = @"NO";
  }
  int v7 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134218242;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for registrationRestrictionReason - doesRespondToSelector? %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_1919BB3F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = [v5 _internal];
    int v8 = 138412546;
    id v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "   %@ => %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_1919BBD90(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2048;
    id v10 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling active accounts changed %@ with delegate %p", (uint8_t *)&v7, 0x16u);
  }

  if (objc_opt_respondsToSelector())
  {
    uint64_t v6 = [*(id *)(*(void *)(a1 + 40) + 40) object];
    [v3 service:v6 activeAccountsChanged:*(void *)(a1 + 32)];
  }
}

uint64_t sub_1919BBE9C(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v13 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ((objc_msgSend(v6, "isTransientAllowlistedAccount", (void)v12) & 1) != 0
          || [v6 isFirstGDRAllowlistedAccount])
        {
          uint64_t v8 = [MEMORY[0x1E4F6C3B8] IDSService];
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            if ([v6 isTransientAllowlistedAccount]) {
              __int16 v9 = @"YES";
            }
            else {
              __int16 v9 = @"NO";
            }
            if ([v6 isFirstGDRAllowlistedAccount]) {
              id v10 = @"YES";
            }
            else {
              id v10 = @"NO";
            }
            *(_DWORD *)long long buf = 138412546;
            long long v17 = v9;
            __int16 v18 = 2112;
            char v19 = v10;
            _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "*** Account wants to drop devicesChanged callback {account.isTransientAllowlistedAccount: %@, account.isFirstGDRAllowlistedAccount: %@}", buf, 0x16u);
          }

          uint64_t v7 = 1;
          goto LABEL_21;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v12 objects:v20 count:16];
      uint64_t v7 = 0;
      if (v3) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
LABEL_21:

  return v7;
}

void sub_1919BC728(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134217984;
    id v13 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingOpportunisticData if it responds.", (uint8_t *)&v12, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    __int16 v9 = [*(id *)(a1 + 64) prefixedURI];
    [v3 service:v5 account:v6 incomingOpportunisticData:v7 withIdentifier:v8 fromID:v9 context:*(void *)(a1 + 72)];

    id v10 = @"YES";
  }
  else
  {
    id v10 = @"NO";
  }
  uint64_t v11 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134218242;
    id v13 = v3;
    __int16 v14 = 2112;
    long long v15 = v10;
    _os_log_impl(&dword_19190B000, v11, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingOpportunisticData - doesRespondToSelector? %@", (uint8_t *)&v12, 0x16u);
  }
}

void sub_1919BC8D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v2 = [*(id *)(a1 + 32) connectionType];
    id v3 = [*(id *)(a1 + 40) daemonController];
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = [*(id *)(a1 + 56) prefixedURI];
    uint64_t v6 = [*(id *)(a1 + 64) _internal];
    uint64_t v7 = [v6 account];
    uint64_t v8 = [v7 _internal];
    __int16 v9 = [v8 uniqueID];
    [v3 sendAppAckWithGUID:v4 toDestination:v5 forAccountWithUniqueID:v9 connectionType:v2];
  }
  if (*(void *)(a1 + 72) || *(void *)(a1 + 48))
  {
    id v17 = [*(id *)(a1 + 40) daemonController];
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 72);
    int v12 = [*(id *)(a1 + 64) _internal];
    id v13 = [v12 account];
    __int16 v14 = [v13 _internal];
    long long v15 = [v14 uniqueID];
    uint64_t v16 = [*(id *)(a1 + 32) priority];
    objc_msgSend(v17, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v11, v10, v15, 0, 0, v16, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));
  }
}

void sub_1919BD0B0(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134217984;
    id v12 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingData if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = [*(id *)(a1 + 56) prefixedURI];
    [v3 service:v5 account:v6 incomingData:v7 fromID:v8 context:*(void *)(a1 + 64)];

    __int16 v9 = @"YES";
  }
  else
  {
    __int16 v9 = @"NO";
  }
  uint64_t v10 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134218242;
    id v12 = v3;
    __int16 v13 = 2112;
    __int16 v14 = v9;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingData - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }
}

void sub_1919BD254(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = +[IDSTransportLog IDSService];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) outgoingResponseIdentifier];
    *(_DWORD *)long long buf = 138412290;
    int v23 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Sending app-level ack dispatch called for message %@", buf, 0xCu);
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (*(unsigned char *)(a1 + 97))
    {
      uint64_t v4 = [*(id *)(a1 + 40) _internal];
      [v4 sendAppAckForDirectMessage:*(void *)(a1 + 48)];
    }
    else
    {
      uint64_t v5 = [*(id *)(a1 + 32) connectionType];
      uint64_t v4 = [*(id *)(a1 + 56) daemonController];
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v7 = [*(id *)(a1 + 64) prefixedURI];
      uint64_t v8 = [*(id *)(a1 + 40) _internal];
      __int16 v9 = [v8 account];
      uint64_t v10 = [v9 _internal];
      int v11 = [v10 uniqueID];
      [v4 sendAppAckWithGUID:v6 toDestination:v7 forAccountWithUniqueID:v11 connectionType:v5];
    }
  }
  if (!*(unsigned char *)(a1 + 97) && (*(void *)(a1 + 72) || *(void *)(a1 + 80)))
  {
    id v12 = [*(id *)(a1 + 56) daemonController];
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 72);
    __int16 v13 = [*(id *)(a1 + 40) _internal];
    __int16 v14 = [v13 account];
    uint64_t v15 = [v14 _internal];
    uint64_t v16 = [v15 uniqueID];
    uint64_t v17 = *(void *)(a1 + 80);
    __int16 v18 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 88), "length"));
    char v19 = [*(id *)(a1 + 32) priority];
    objc_msgSend(v12, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v21, v20, v16, v17, v18, v19, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));
  }
}

void sub_1919BDAC8(uint64_t a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = sub_1919BDB50;
  v2[3] = &unk_1E572C410;
  id v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 performGroupTask:v2];
}

void sub_1919BDB50(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1919BDBFC;
  v6[3] = &unk_1E572B150;
  id v7 = v4;
  id v8 = v3;
  id v5 = v3;
  [v5 _groupFromPublicDataRepresentation:v7 completion:v6];
}

void sub_1919BDBFC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = +[IDSLogging _IDSService];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v6;
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Error converting Group Data to ENGroup %@", (uint8_t *)&v12, 0xCu);
    }
  }
  else if (v5)
  {
    id v8 = [MEMORY[0x1E4F6B460] groupCrypto];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = [v5 groupID];
      int v12 = 138543362;
      id v13 = v9;
      _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "Received sentAhead group {groupID: %{public}@}", (uint8_t *)&v12, 0xCu);
    }
    [*(id *)(a1 + 40) cacheIncomingGroup:v5 completion:&unk_1EE245CC8];
  }
  else
  {
    uint64_t v10 = +[IDSLogging _IDSService];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412546;
      id v13 = 0;
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "No error returned however unable to create group from data (timeout?) %@, Original Data: %@", (uint8_t *)&v12, 0x16u);
    }
  }
}

void sub_1919BDDCC(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "Group Share Persisted %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1919BDE80(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v2 = +[IDSTransportLog IDSService];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) outgoingResponseIdentifier];
    *(_DWORD *)long long buf = 138412290;
    int v23 = v3;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Sending app-level ack dispatch called for message %@", buf, 0xCu);
  }
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v4 = [*(id *)(a1 + 32) connectionType];
    id v5 = [*(id *)(a1 + 40) daemonController];
    uint64_t v6 = *(void *)(a1 + 48);
    id v7 = [*(id *)(a1 + 56) prefixedURI];
    id v8 = [*(id *)(a1 + 64) _internal];
    __int16 v9 = [v8 account];
    uint64_t v10 = [v9 _internal];
    uint64_t v11 = [v10 uniqueID];
    [v5 sendAppAckWithGUID:v6 toDestination:v7 forAccountWithUniqueID:v11 connectionType:v4];
  }
  if (*(void *)(a1 + 72) || *(void *)(a1 + 80))
  {
    int v12 = [*(id *)(a1 + 40) daemonController];
    uint64_t v20 = *(void *)(a1 + 72);
    uint64_t v21 = *(void *)(a1 + 48);
    id v13 = [*(id *)(a1 + 64) _internal];
    __int16 v14 = [v13 account];
    uint64_t v15 = [v14 _internal];
    uint64_t v16 = [v15 uniqueID];
    uint64_t v17 = *(void *)(a1 + 80);
    __int16 v18 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 88), "length"));
    char v19 = [*(id *)(a1 + 32) priority];
    objc_msgSend(v12, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v20, v21, v16, v17, v18, v19, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));
  }
}

void sub_1919BE540(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134217984;
    id v12 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingAccessoryData if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    id v5 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    id v8 = [*(id *)(a1 + 56) prefixedURI];
    [v3 service:v5 account:v6 incomingAccessoryData:v7 fromAccessoryID:v8 context:*(void *)(a1 + 64)];

    __int16 v9 = @"YES";
  }
  else
  {
    __int16 v9 = @"NO";
  }
  uint64_t v10 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134218242;
    id v12 = v3;
    __int16 v13 = 2112;
    __int16 v14 = v9;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingAccessoryData - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }
}

void sub_1919BE6E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v2 = [*(id *)(a1 + 32) connectionType];
    id v3 = [*(id *)(a1 + 40) daemonController];
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [*(id *)(a1 + 56) prefixedURI];
    uint64_t v6 = [*(id *)(a1 + 64) _internal];
    uint64_t v7 = [v6 account];
    id v8 = [v7 _internal];
    __int16 v9 = [v8 uniqueID];
    [v3 sendAppAckWithGUID:v4 toDestination:v5 forAccountWithUniqueID:v9 connectionType:v2];
  }
  if (*(void *)(a1 + 72) || *(void *)(a1 + 80))
  {
    uint64_t v10 = [*(id *)(a1 + 40) daemonController];
    uint64_t v19 = *(void *)(a1 + 48);
    id v20 = (id)v10;
    uint64_t v11 = *(void *)(a1 + 72);
    id v12 = [*(id *)(a1 + 64) _internal];
    __int16 v13 = [v12 account];
    __int16 v14 = [v13 _internal];
    uint64_t v15 = [v14 uniqueID];
    uint64_t v16 = *(void *)(a1 + 80);
    uint64_t v17 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 88), "length"));
    __int16 v18 = [*(id *)(a1 + 32) priority];
    objc_msgSend(v20, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v11, v19, v15, v16, v17, v18, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));
  }
}

void sub_1919BED30(void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134217984;
    id v9 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingAccessoryReportMessage if it responds.", (uint8_t *)&v8, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    id v5 = [*(id *)(a1[4] + 40) object];
    [v3 service:v5 account:a1[5] incomingAccessoryReportMessage:a1[6] controllerID:a1[7] accessoryID:a1[8] context:a1[9]];

    uint64_t v6 = @"YES";
  }
  else
  {
    uint64_t v6 = @"NO";
  }
  uint64_t v7 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134218242;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingAccessoryReportMessage - doesRespondToSelector? %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_1919BEEA8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v2 = [*(id *)(a1 + 32) connectionType];
    id v3 = [*(id *)(a1 + 40) daemonController];
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = [*(id *)(a1 + 64) _internal];
    uint64_t v7 = [v6 account];
    int v8 = [v7 _internal];
    id v9 = [v8 uniqueID];
    [v3 sendAppAckWithGUID:v4 toDestination:v5 forAccountWithUniqueID:v9 connectionType:v2];
  }
  if (*(void *)(a1 + 72) || *(void *)(a1 + 80))
  {
    id v18 = [*(id *)(a1 + 40) daemonController];
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 72);
    uint64_t v12 = [*(id *)(a1 + 64) _internal];
    __int16 v13 = [v12 account];
    __int16 v14 = [v13 _internal];
    uint64_t v15 = [v14 uniqueID];
    uint64_t v16 = *(void *)(a1 + 80);
    uint64_t v17 = [*(id *)(a1 + 32) priority];
    objc_msgSend(v18, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v11, v10, v15, v16, 0, v17, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));
  }
}

id sub_1919BF50C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 objectForKey:v4];
  if (objc_opt_isKindOfClass())
  {
    id v6 = v5;
  }
  else
  {
    if (v5)
    {
      uint64_t v7 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
        sub_191A3BB00();
      }
    }
    id v6 = 0;
  }

  return v6;
}

void sub_1919BF5C8(void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134217984;
    id v9 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingInvitation if it responds.", (uint8_t *)&v8, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = [*(id *)(a1[4] + 40) object];
    [v3 service:v5 account:a1[5] incomingInvitation:a1[6] withContext:a1[7]];

    id v6 = @"YES";
  }
  else
  {
    id v6 = @"NO";
  }
  uint64_t v7 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134218242;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingInvitation - doesRespondToSelector? %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_1919BFC00(void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134217984;
    id v9 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingInvitationUpdate if it responds.", (uint8_t *)&v8, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = [*(id *)(a1[4] + 40) object];
    [v3 service:v5 account:a1[5] incomingInvitationUpdate:a1[6] withContext:a1[7]];

    id v6 = @"YES";
  }
  else
  {
    id v6 = @"NO";
  }
  uint64_t v7 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134218242;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingInvitationUpdate - doesRespondToSelector? %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_1919C088C(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 216));
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_1919C0918(uint64_t a1, uint64_t a2)
{
  id v4 = dispatch_get_global_queue(9, 0);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1919C09E8;
  v7[3] = &unk_1E572AD70;
  id v8 = *(id *)(a1 + 32);
  uint64_t v10 = a2;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = v5;
  uint64_t v11 = v6;
  dispatch_async(v4, v7);
}

void sub_1919C09E8(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v3 = a1[4];
  id v9 = 0;
  int v4 = [v2 removeItemAtURL:v3 error:&v9];
  id v5 = v9;

  uint64_t v6 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    uint64_t v8 = a1[6];
    *(_DWORD *)long long buf = 138412802;
    if (v4) {
      uint64_t v7 = @"YES";
    }
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v5;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Remove file success: %@, error: %@ (accessed %d)", buf, 0x1Cu);
  }

  if (a1[5]) {
    sandbox_extension_release();
  }
}

void sub_1919C0B1C(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134217984;
    id v12 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingResource if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    id v5 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = [*(id *)(a1 + 56) prefixedURI];
    [v3 service:v5 account:v6 incomingResourceAtURL:v7 fromID:v8 context:*(void *)(a1 + 64)];

    id v9 = @"YES";
  }
  else
  {
    id v9 = @"NO";
  }
  uint64_t v10 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134218242;
    id v12 = v3;
    __int16 v13 = 2112;
    __int16 v14 = v9;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingResource - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }

  [*(id *)(a1 + 72) incrementAccessCount];
}

void sub_1919C0CC8(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134217984;
    id v13 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingResource with metadata if it responds.", (uint8_t *)&v12, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    id v5 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    id v9 = [*(id *)(a1 + 64) prefixedURI];
    [v3 service:v5 account:v6 incomingResourceAtURL:v7 metadata:v8 fromID:v9 context:*(void *)(a1 + 72)];

    uint64_t v10 = @"YES";
  }
  else
  {
    uint64_t v10 = @"NO";
  }
  int v11 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134218242;
    id v13 = v3;
    __int16 v14 = 2112;
    uint64_t v15 = v10;
    _os_log_impl(&dword_19190B000, v11, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingResource with metadata - doesRespondToSelector? %@", (uint8_t *)&v12, 0x16u);
  }

  [*(id *)(a1 + 80) incrementAccessCount];
}

void sub_1919C0E78(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134217984;
    id v12 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingMessage if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    id v5 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = [*(id *)(a1 + 56) prefixedURI];
    [v3 service:v5 account:v6 incomingMessage:v7 fromID:v8];

    id v9 = @"YES";
  }
  else
  {
    id v9 = @"NO";
  }
  uint64_t v10 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134218242;
    id v12 = v3;
    __int16 v13 = 2112;
    __int16 v14 = v9;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingMessage - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }
}

void sub_1919C1010(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134217984;
    id v12 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingMessage with context if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    id v5 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = [*(id *)(a1 + 56) prefixedURI];
    [v3 service:v5 account:v6 incomingMessage:v7 fromID:v8 context:*(void *)(a1 + 64)];

    id v9 = @"YES";
  }
  else
  {
    id v9 = @"NO";
  }
  uint64_t v10 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134218242;
    id v12 = v3;
    __int16 v13 = 2112;
    __int16 v14 = v9;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingMessage with context - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }
}

void sub_1919C11B4(uint64_t a1)
{
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  id v20 = _os_activity_create(&dword_19190B000, "Service finished calling out", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v20, &state);
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(unsigned char *)(a1 + 89))
    {
      uint64_t v2 = [*(id *)(a1 + 32) _internal];
      [v2 sendAppAckForDirectMessage:*(void *)(a1 + 40)];
    }
    else
    {
      uint64_t v3 = [*(id *)(a1 + 48) connectionType];
      uint64_t v2 = [*(id *)(a1 + 56) daemonController];
      uint64_t v4 = *(void *)(a1 + 40);
      id v5 = [*(id *)(a1 + 64) prefixedURI];
      uint64_t v6 = [*(id *)(a1 + 32) _internal];
      uint64_t v7 = [v6 account];
      uint64_t v8 = [v7 _internal];
      id v9 = [v8 uniqueID];
      [v2 sendAppAckWithGUID:v4 toDestination:v5 forAccountWithUniqueID:v9 connectionType:v3];
    }
  }
  if (!*(unsigned char *)(a1 + 89) && (*(void *)(a1 + 72) || *(void *)(a1 + 80)))
  {
    uint64_t v10 = [*(id *)(a1 + 56) daemonController];
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = [*(id *)(a1 + 32) _internal];
    __int16 v13 = [v12 account];
    __int16 v14 = [v13 _internal];
    uint64_t v15 = [v14 uniqueID];
    uint64_t v16 = *(void *)(a1 + 80);
    uint64_t v17 = [*(id *)(a1 + 48) priority];
    objc_msgSend(v10, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v18, v11, v15, v16, 0, v17, objc_msgSend(*(id *)(a1 + 48), "broadcastID"), objc_msgSend(*(id *)(a1 + 48), "connectionType"));
  }
  os_activity_scope_leave(&state);
  cut_arc_os_release();
}

void sub_1919C13D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
}

void sub_1919C1C8C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1919C1CE4(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v4 = +[IDSTransportLog IDSService];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = NSStringFromSelector(*(SEL *)(a1 + 80));
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 134218498;
      *(void *)&uint8_t buf[4] = v3;
      __int16 v23 = 2112;
      uint64_t v24 = v5;
      __int16 v25 = 2048;
      uint64_t v26 = v6;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, " => Delgate %p responds to: %@, passing along protobuf: %p", buf, 0x20u);
    }
    uint64_t v7 = [v3 methodSignatureForSelector:*(void *)(a1 + 80)];
    uint64_t v8 = [MEMORY[0x1E4F1CA18] invocationWithMethodSignature:v7];
    [v8 setSelector:*(void *)(a1 + 80)];
    [v8 setTarget:v3];
    id v9 = (id)[*(id *)(a1 + 40) prefixedURI];
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 48);
    *(void *)long long buf = v9;
    uint64_t v20 = *(void *)(a1 + 32);
    id v11 = (id)[*(id *)(v10 + 40) object];
    uint64_t v18 = *(void *)(a1 + 64);
    id v19 = v11;
    [v8 setArgument:&v20 atIndex:2];
    [v8 setArgument:&v19 atIndex:3];
    [v8 setArgument:&v21 atIndex:4];
    [v8 setArgument:buf atIndex:5];
    [v8 setArgument:&v18 atIndex:6];
    [v8 invokeWithTarget:v3];
    id v12 = +[IDSTransportLog IDSService];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_19190B000, v12, OS_LOG_TYPE_DEFAULT, "   * Done handling", v17, 2u);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  }
  else if (objc_opt_respondsToSelector())
  {
    __int16 v13 = +[IDSTransportLog IDSService];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v14 = NSStringFromSelector(*(SEL *)(a1 + 88));
      uint64_t v15 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 134218498;
      *(void *)&uint8_t buf[4] = v3;
      __int16 v23 = 2112;
      uint64_t v24 = v14;
      __int16 v25 = 2048;
      uint64_t v26 = v15;
      _os_log_impl(&dword_19190B000, v13, OS_LOG_TYPE_DEFAULT, " => Delgate %p responds to: %@, passing along protobuf: %p", buf, 0x20u);
    }
    [v3 performSelector:*(void *)(a1 + 88) withObject:*(void *)(a1 + 32)];
    uint64_t v16 = +[IDSTransportLog IDSService];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_19190B000, v16, OS_LOG_TYPE_DEFAULT, "   * Done handling", buf, 2u);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  }
}

void sub_1919C2020(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v4 = +[IDSTransportLog IDSService];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v12 = 134218240;
      id v13 = v3;
      __int16 v14 = 2048;
      uint64_t v15 = v5;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, " => Delgate %p responds unhandled protobuf passing along protobuf: %p", (uint8_t *)&v12, 0x16u);
    }

    uint64_t v6 = [*(id *)(*(void *)(a1 + 40) + 40) object];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 48);
    id v9 = [*(id *)(a1 + 56) prefixedURI];
    [v3 service:v6 account:v8 incomingUnhandledProtobuf:v7 fromID:v9 context:*(void *)(a1 + 64)];

    uint64_t v10 = [*(id *)(a1 + 64) messageSequenceNumber];
    [v10 unsignedIntegerValue];
    kdebug_trace();

    id v11 = +[IDSTransportLog IDSService];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_19190B000, v11, OS_LOG_TYPE_DEFAULT, "   * Done handling", (uint8_t *)&v12, 2u);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  }
}

void sub_1919C21E8(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24))
  {
    uint64_t v2 = +[IDSLogging _IDSService];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_191A3BE08(a1, v2, v3, v4, v5, v6, v7, v8);
    }
  }
  if (*(unsigned char *)(a1 + 104))
  {
    if (*(unsigned char *)(a1 + 105))
    {
      id v9 = [*(id *)(a1 + 40) _internal];
      [v9 sendAppAckForDirectMessage:*(void *)(a1 + 32)];
    }
    else
    {
      uint64_t v10 = [*(id *)(a1 + 48) connectionType];
      id v9 = [*(id *)(a1 + 56) daemonController];
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = [*(id *)(a1 + 64) prefixedURI];
      id v13 = [*(id *)(a1 + 40) _internal];
      __int16 v14 = [v13 account];
      uint64_t v15 = [v14 _internal];
      uint64_t v16 = [v15 uniqueID];
      [v9 sendAppAckWithGUID:v11 toDestination:v12 forAccountWithUniqueID:v16 connectionType:v10];
    }
  }
  if (!*(unsigned char *)(a1 + 105) && (*(void *)(a1 + 72) || *(void *)(a1 + 80)))
  {
    uint64_t v17 = [*(id *)(a1 + 56) daemonController];
    uint64_t v29 = *(void *)(a1 + 72);
    uint64_t v27 = (void *)v17;
    uint64_t v28 = *(void *)(a1 + 32);
    uint64_t v18 = [*(id *)(a1 + 40) _internal];
    id v19 = [v18 account];
    uint64_t v20 = [v19 _internal];
    uint64_t v21 = [v20 uniqueID];
    uint64_t v22 = NSNumber;
    uint64_t v23 = *(void *)(a1 + 80);
    uint64_t v24 = [*(id *)(a1 + 88) data];
    __int16 v25 = objc_msgSend(v22, "numberWithUnsignedInteger:", objc_msgSend(v24, "length"));
    uint64_t v26 = [*(id *)(a1 + 48) priority];
    objc_msgSend(v27, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v29, v28, v21, v23, v25, v26, objc_msgSend(*(id *)(a1 + 48), "broadcastID"), objc_msgSend(*(id *)(a1 + 48), "connectionType"));
  }
}

void sub_1919C2908(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134217984;
    id v13 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingTopLevelMessage if it responds.", (uint8_t *)&v12, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = [*(id *)(a1 + 56) prefixedURI];
    [v3 service:v5 account:v6 incomingTopLevelMessage:v7 fromID:v8 messageContext:*(void *)(a1 + 64)];

    id v9 = @"YES";
  }
  else
  {
    id v9 = @"NO";
  }
  uint64_t v10 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 72);
    int v12 = 134218498;
    id v13 = v3;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingTopLevelMessage - doesRespondToSelector? %@ guid: %@", (uint8_t *)&v12, 0x20u);
  }
}

void sub_1919C2AB8(uint64_t a1)
{
  if (*(void *)(a1 + 32) || *(void *)(a1 + 40))
  {
    id v9 = [*(id *)(a1 + 48) daemonController];
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = [*(id *)(a1 + 56) _internal];
    uint64_t v5 = [v4 account];
    uint64_t v6 = [v5 _internal];
    uint64_t v7 = [v6 uniqueID];
    uint64_t v8 = [*(id *)(a1 + 64) priority];
    objc_msgSend(v9, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v2, v3, v7, 0, 0, v8, objc_msgSend(*(id *)(a1 + 64), "broadcastID"), objc_msgSend(*(id *)(a1 + 64), "connectionType"));
  }
}

void sub_1919C2D7C(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134217984;
    id v12 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingPendingMessage if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = [*(id *)(a1 + 48) prefixedURI];
    [v3 service:v5 account:v7 incomingPendingMessageOfType:v6 fromID:v8 context:*(void *)(a1 + 56)];

    id v9 = @"YES";
  }
  else
  {
    id v9 = @"NO";
  }
  uint64_t v10 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134218242;
    id v12 = v3;
    __int16 v13 = 2112;
    __int16 v14 = v9;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingPendingMessage - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }
}

void sub_1919C30D8(uint64_t a1, int a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) daemonController];
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = v4;
  if (a2) {
    [v4 downloadPendingResourceWithMessageGUID:v5];
  }
  else {
    [v4 deletePendingResourceWithMessageGUID:v5];
  }
}

void sub_1919C313C(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134217984;
    id v12 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingPendingResourceWithMetadata if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = [*(id *)(a1 + 56) prefixedURI];
    [v3 service:v5 account:v6 pendingResourceWithMetadata:v7 fromID:v8 acknowledgementBlock:*(void *)(a1 + 72) context:*(void *)(a1 + 64)];

    id v9 = @"YES";
  }
  else
  {
    id v9 = @"NO";
  }
  uint64_t v10 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134218242;
    id v12 = v3;
    __int16 v13 = 2112;
    __int16 v14 = v9;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingPendingMessage - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }
}

void sub_1919C3754(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = +[IDSLogging IDSConnection];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v35 = v7;
    __int16 v36 = 2112;
    id v37 = v9;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "DecryptedEngramData %@ %@", buf, 0x16u);
  }

  int v11 = [MEMORY[0x1E4F6B460] groupCrypto];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v7, "length"));
    *(_DWORD *)long long buf = 138543362;
    id v35 = v12;
    _os_log_impl(&dword_19190B000, v11, OS_LOG_TYPE_DEFAULT, "  {decryptedData.length: %{public}@}", buf, 0xCu);
  }
  __int16 v13 = (__CFDictionary *)[*(id *)(a1 + 32) mutableCopy];
  __int16 v14 = v13;
  if (v7) {
    CFDictionarySetValue(v13, @"IDSIncomingMessageDecryptedData", v7);
  }
  if (*MEMORY[0x1E4F6B028] && v14) {
    CFDictionaryRemoveValue(v14, (const void *)*MEMORY[0x1E4F6B028]);
  }
  if (v8) {
    CFDictionarySetValue(v14, (const void *)*MEMORY[0x1E4F6B030], v8);
  }
  id v33 = v8;
  uint64_t v15 = [(__CFDictionary *)v14 objectForKey:@"IDSIncomingMessageDecryptedData", v9];
  __int16 v16 = [*(id *)(a1 + 40) originalCommand];
  uint64_t v17 = [v16 integerValue];

  if (v17 == 242)
  {
    uint64_t v18 = [v15 _FTOptionallyDecompressData];
    id v19 = 0;
  }
  else
  {
    uint64_t v20 = [*(id *)(a1 + 40) originalCommand];
    uint64_t v21 = [v20 integerValue];

    if (v21 == 243)
    {
      uint64_t v22 = [v15 _FTOptionallyDecompressData];
      uint64_t v23 = JWDecodeDictionary();

      id v19 = 0;
      uint64_t v18 = 0;
      goto LABEL_18;
    }
    id v19 = [*(id *)(a1 + 48) _payloadFromDecryptedData:v15];
    uint64_t v18 = 0;
  }
  uint64_t v23 = 0;
LABEL_18:
  if (v19) {
    uint64_t v24 = v19;
  }
  else {
    uint64_t v24 = v18;
  }
  id v25 = v24;
  uint64_t v26 = v25;
  if (v25) {
    uint64_t v27 = v25;
  }
  else {
    uint64_t v27 = v23;
  }
  id v28 = v27;

  [*(id *)(a1 + 40) setUsedEngram:1];
  uint64_t v29 = [*(id *)(a1 + 40) originalCommand];
  uint64_t v30 = [v29 integerValue];

  if (v30 > 241)
  {
    if (v30 == 242)
    {
      [*(id *)(a1 + 48) connection:*(void *)(a1 + 56) incomingData:v28 fromURI:*(void *)(a1 + 64) context:*(void *)(a1 + 40)];
    }
    else if (v30 == 243)
    {
      uint64_t v31 = (void *)[objc_alloc(MEMORY[0x1E4F6B528]) initWithDictionary:v28];
      [*(id *)(a1 + 48) connection:*(void *)(a1 + 56) incomingProtobuf:v31 fromURI:*(void *)(a1 + 64) context:*(void *)(a1 + 40)];
    }
  }
  else if (v30 == 100 || v30 == 227)
  {
    [*(id *)(a1 + 48) connection:*(void *)(a1 + 56) incomingMessage:v28 fromURI:*(void *)(a1 + 64) context:*(void *)(a1 + 40)];
    [*(id *)(a1 + 48) connection:*(void *)(a1 + 56) incomingTopLevelMessage:v14 fromURI:*(void *)(a1 + 64) messageContext:*(void *)(a1 + 40)];
  }
}

void sub_1919C3AF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1919C3BD4;
  v8[3] = &unk_1E572C618;
  uint64_t v4 = *(void *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 56);
  id v10 = v3;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  id v11 = v5;
  uint64_t v12 = v6;
  id v7 = v3;
  [v7 fetchGroupWithGroupID:v4 completion:v8];
}

void sub_1919C3BD4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v47 = a3;
  uint64_t v6 = +[IDSLogging IDSConnection];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    id v71 = v7;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Decrypting Engram Message, Org Payload %@", buf, 0xCu);
  }

  uint64_t v8 = *MEMORY[0x1E4F6B028];
  id v9 = [*(id *)(a1 + 32) objectForKey:*MEMORY[0x1E4F6B028]];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = (void *)MEMORY[0x1E4F1C9B8];
    id v11 = [*(id *)(a1 + 32) objectForKey:v8];
    uint64_t v12 = [v10 _IDSDataFromBase64String:v11];
LABEL_7:
    uint64_t v49 = (void *)v12;
    goto LABEL_9;
  }
  id v11 = [*(id *)(a1 + 32) objectForKey:v8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v12 = [*(id *)(a1 + 32) objectForKey:v8];
    goto LABEL_7;
  }
  uint64_t v49 = 0;
LABEL_9:

  uint64_t v13 = objc_opt_class();
  __int16 v14 = sub_1919BF50C(v13, *(void **)(a1 + 32), (void *)*MEMORY[0x1E4F6B040]);
  uint64_t v15 = [v14 objectForKey:@"t"];
  objc_opt_class();
  uint64_t v46 = a1;
  if (objc_opt_isKindOfClass())
  {
    __int16 v16 = (void *)MEMORY[0x1E4F1C9B8];
    uint64_t v17 = objc_msgSend(v14, "objectForKey:", @"t", v14);
    uint64_t v18 = [v16 _IDSDataFromBase64String:v17];
LABEL_13:
    id v19 = (void *)v18;
    goto LABEL_15;
  }
  uint64_t v17 = objc_msgSend(v14, "objectForKey:", @"t", v14);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v18 = [v14 objectForKey:@"t"];
    goto LABEL_13;
  }
  id v19 = 0;
LABEL_15:

  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v48 = v5;
  obuint64_t j = [v5 participants];
  uint64_t v20 = [obj countByEnumeratingWithState:&v66 objects:v75 count:16];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v51 = *(void *)v67;
    long long v52 = 0;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v67 != v51) {
          objc_enumerationMutation(obj);
        }
        uint64_t v23 = *(void **)(*((void *)&v66 + 1) + 8 * i);
        long long v62 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        uint64_t v24 = [v23 devices];
        uint64_t v25 = [v24 countByEnumeratingWithState:&v62 objects:v74 count:16];
        if (v25)
        {
          uint64_t v26 = v25;
          uint64_t v27 = *(void *)v63;
          while (2)
          {
            for (uint64_t j = 0; j != v26; ++j)
            {
              if (*(void *)v63 != v27) {
                objc_enumerationMutation(v24);
              }
              uint64_t v29 = *(void **)(*((void *)&v62 + 1) + 8 * j);
              uint64_t v30 = [v29 identifier];
              int v31 = [v30 isEqual:v19];

              if (v31)
              {
                id v32 = v29;

                long long v52 = v32;
                goto LABEL_30;
              }
            }
            uint64_t v26 = [v24 countByEnumeratingWithState:&v62 objects:v74 count:16];
            if (v26) {
              continue;
            }
            break;
          }
        }
LABEL_30:
      }
      uint64_t v21 = [obj countByEnumeratingWithState:&v66 objects:v75 count:16];
    }
    while (v21);
  }
  else
  {
    long long v52 = 0;
  }

  id v61 = 0;
  id v33 = v48;
  id v34 = [v48 verifyAndRevealData:v49 sendingDevice:v52 cypherIdentifier:&stru_1EE2476E8 error:&v61];
  id v35 = v61;
  __int16 v36 = v35;
  if (v35)
  {
    if ([v35 code] == -67808)
    {
      uint64_t v38 = *(void **)(v46 + 40);
      uint64_t v37 = *(void *)(v46 + 48);
      v53[0] = MEMORY[0x1E4F143A8];
      v53[1] = 3221225472;
      v53[2] = sub_1919C4210;
      v53[3] = &unk_1E572C5F0;
      id v54 = v47;
      id v55 = v49;
      id v56 = v52;
      id v39 = *(id *)(v46 + 64);
      uint64_t v40 = *(void *)(v46 + 56);
      id v60 = v39;
      uint64_t v57 = v40;
      id v58 = *(id *)(v46 + 32);
      id v59 = *(id *)(v46 + 48);
      [v38 _fetchGroupWithGroupID:v37 skipCache:1 completion:v53];
    }
    else
    {
      char v41 = [*(id *)(*(void *)(v46 + 56) + 8) _internal];
      uint64_t v42 = [v41 serviceName];

      uint64_t v43 = +[IDSLogging IDSConnection];
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412546;
        id v71 = v47;
        __int16 v72 = 2112;
        uint64_t v73 = v42;
        _os_log_impl(&dword_19190B000, v43, OS_LOG_TYPE_DEFAULT, "Failed decrypting Engram {error: %@, serviceName: %@}", buf, 0x16u);
      }

      uint64_t v44 = [*(id *)(v46 + 56) daemonController];
      [v44 failedDecryptingMessage:*(void *)(v46 + 32) reason:800 forGroupID:*(void *)(v46 + 48) onService:v42];
    }
    id v33 = v48;
  }
  else
  {
    (*(void (**)(void))(*(void *)(v46 + 64) + 16))();
  }
}

void sub_1919C4210(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 32))
  {
    id v5 = [*(id *)(*(void *)(a1 + 56) + 8) _internal];
    id v6 = [v5 serviceName];

    id v7 = +[IDSLogging IDSConnection];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v19 = v8;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Failed decrypting Engram {error: %@, serviceName: %@}", buf, 0x16u);
    }

    id v9 = [*(id *)(a1 + 56) daemonController];
    [v9 failedDecryptingMessage:*(void *)(a1 + 64) reason:800 forGroupID:*(void *)(a1 + 72) onService:v6];
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    id v17 = 0;
    id v9 = [v3 verifyAndRevealData:v10 sendingDevice:v11 cypherIdentifier:&stru_1EE2476E8 error:&v17];
    id v6 = v17;
    if (v9)
    {
      uint64_t v12 = [*(id *)(*(void *)(a1 + 56) + 8) _internal];
      uint64_t v13 = [v12 serviceName];

      __int16 v14 = +[IDSLogging IDSConnection];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v19 = v15;
        __int16 v20 = 2112;
        id v21 = v13;
        _os_log_impl(&dword_19190B000, v14, OS_LOG_TYPE_DEFAULT, "Failed decrypting Engram {error: %@, serviceName: %@}", buf, 0x16u);
      }

      __int16 v16 = [*(id *)(a1 + 56) daemonController];
      [v16 failedDecryptingMessage:*(void *)(a1 + 64) reason:804 forGroupID:*(void *)(a1 + 72) onService:v13];
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
    }
  }
}

uint64_t sub_1919C48D4(uint64_t a1, void *a2)
{
  return [a2 _internal];
}

void sub_1919C48DC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) object];
  [v1 _callDelegatesForDevicesChanged];
}

void sub_1919C4A18(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 service:v3 devicesChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919C4B88(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 service:v3 nearbyDevicesChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919C4DF8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 service:v3 connectedDevicesChanged:*(void *)(a1 + 40)];
  }
}

void sub_1919C5360(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 40) object];
    [v4 service:v3 account:a1[5] identifier:a1[6] sentBytes:a1[7] totalBytes:a1[8]];
  }
}

void sub_1919C53E0(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    LOBYTE(v4) = *(unsigned char *)(a1 + 88);
    [v5 service:v3 account:*(void *)(a1 + 40) messageIdentifier:*(void *)(a1 + 48) alternateCallbackID:*(void *)(a1 + 56) updatedWithResponseCode:*(void *)(a1 + 80) error:*(void *)(a1 + 64) lastCall:v4];
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      goto LABEL_6;
    }
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    LOBYTE(v4) = *(unsigned char *)(a1 + 88);
    [v5 service:v3 account:*(void *)(a1 + 40) messageIdentifier:*(void *)(a1 + 48) alternateCallbackID:*(void *)(a1 + 56) updatedWithResponseCode:*(void *)(a1 + 80) error:*(void *)(a1 + 64) lastCall:v4 messageContext:*(void *)(a1 + 72)];
  }

LABEL_6:
}

void sub_1919C582C(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 40) object];
    [v4 service:v3 account:a1[5] identifier:a1[6] alternateCallbackID:a1[7] willSendToDestinations:a1[8] skippedDestinations:a1[9] registrationPropertyToDestinations:a1[10]];
  }
}

void sub_1919C5BA0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 service:v3 account:*(void *)(a1 + 40) identifier:*(void *)(a1 + 48) didSendWithSuccess:*(unsigned __int8 *)(a1 + 72) error:*(void *)(a1 + 56) context:*(void *)(a1 + 64)];
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      goto LABEL_6;
    }
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 service:v3 account:*(void *)(a1 + 40) identifier:*(void *)(a1 + 48) didSendWithSuccess:*(unsigned __int8 *)(a1 + 72) error:*(void *)(a1 + 56)];
  }

LABEL_6:
}

void sub_1919C5E98(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v8 service:v3 account:*(void *)(a1 + 40) identifier:*(void *)(a1 + 48) hasBeenDeliveredWithContext:*(void *)(a1 + 56)];
  }
  if (objc_opt_respondsToSelector())
  {
    id v4 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    id v7 = [*(id *)(a1 + 64) prefixedURI];
    [v8 service:v4 account:v5 identifier:v6 fromID:v7 hasBeenDeliveredWithContext:*(void *)(a1 + 56)];
  }
}

void sub_1919C6168(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 40) object];
    [v4 service:v3 didFlushCacheForRemoteURI:a1[5] fromURI:a1[6] guid:a1[7]];
  }
}

void sub_1919C636C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 service:v3 didFlushCacheForKTPeerURI:*(void *)(a1 + 40)];
  }
}

void sub_1919C6674(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 40) object];
    [v4 service:v3 account:a1[5] inviteReceivedForSession:a1[6] fromID:a1[7] withOptions:a1[8]];
  }
  else if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 40) object];
    [v4 service:v3 account:a1[5] inviteReceivedForSession:a1[6] fromID:a1[7] withContext:a1[9]];
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      goto LABEL_8;
    }
    id v3 = [*(id *)(a1[4] + 40) object];
    [v4 service:v3 account:a1[5] inviteReceivedForSession:a1[6] fromID:a1[7]];
  }

LABEL_8:
}

void sub_1919C6950(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 40) object];
    [v4 service:v3 account:a1[5] receivedGroupSessionParticipantUpdate:a1[6] context:a1[7]];
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      goto LABEL_6;
    }
    id v3 = [*(id *)(a1[4] + 40) object];
    [v4 service:v3 account:a1[5] receivedGroupSessionParticipantUpdate:a1[6]];
  }

LABEL_6:
}

void sub_1919C6B2C(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 40) object];
    [v4 service:v3 account:a1[5] receivedGroupSessionParticipantDataUpdate:a1[6]];
  }
}

void sub_1919C6D60(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 40) object];
    [v4 service:v3 didSendOpportunisticDataWithIdentifier:a1[5] toIDs:a1[6]];
  }
}

void sub_1919C6F4C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 serviceSpaceDidBecomeAvailable:v3];
  }
}

uint64_t sub_1919C7720(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 80) = 0;
  return [*(id *)(a1 + 32) _loadCachedLinkedDevices];
}

uint64_t sub_1919C7AF8(uint64_t a1, void *a2)
{
  return [a2 _internal];
}

uint64_t sub_1919C8454(uint64_t a1, void *a2)
{
  id v3 = [a2 properties];
  uint64_t v4 = [v3 isEqualToPseudonymProperties:*(void *)(a1 + 32)] ^ 1;

  return v4;
}

uint64_t sub_1919C8878(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel__calloutPseudonymsDidUpdate);
}

id IDSServiceCalculatedPseudonymChanges_0(void *a1, void *a2)
{
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v104 = a2;
  long long v101 = (void *)MEMORY[0x192FE0160]();
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v162 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v162 objects:v175 count:16];
  id v7 = &off_1E5728000;
  uint64_t v123 = v4;
  id v102 = v5;
  uint64_t v105 = v6;
  if (v6)
  {
    uint64_t v103 = *(void *)v163;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v163 != v103) {
          objc_enumerationMutation(v5);
        }
        uint64_t v110 = v8;
        uint64_t v9 = *(void *)(*((void *)&v162 + 1) + 8 * v8);
        context = (void *)MEMORY[0x192FE0160](v6);
        uint64_t v10 = objc_msgSend(v5, "objectForKey:", v9, v101);
        uint64_t v11 = [v104 objectForKey:v9];
        uint64_t v119 = v11;
        if (v11)
        {
          uint64_t v12 = [MEMORY[0x1E4F1CA80] setWithArray:v10];
          uint64_t v13 = [MEMORY[0x1E4F1CA80] setWithArray:v11];
          __int16 v14 = (void *)[v12 mutableCopy];
          [v14 minusSet:v13];
          v106 = v13;
          uint64_t v111 = (void *)[v13 mutableCopy];
          id v112 = v12;
          [v111 minusSet:v12];
          uint64_t v108 = v14;
          if ([v14 count] || objc_msgSend(v111, "count"))
          {
            id v15 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
            id v121 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
            id v16 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
            long long v154 = 0u;
            long long v155 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            obuint64_t j = v14;
            uint64_t v17 = [obj countByEnumeratingWithState:&v154 objects:v173 count:16];
            if (v17)
            {
              uint64_t v18 = v17;
              uint64_t v19 = *(void *)v155;
              do
              {
                for (uint64_t i = 0; i != v18; ++i)
                {
                  if (*(void *)v155 != v19) {
                    objc_enumerationMutation(obj);
                  }
                  id v21 = *(void **)(*((void *)&v154 + 1) + 8 * i);
                  uint64_t v22 = [v21 URI];
                  [v15 addObject:v22];

                  uint64_t v23 = [v21 URI];
                  [v16 setObject:v21 forKey:v23];
                }
                uint64_t v18 = [obj countByEnumeratingWithState:&v154 objects:v173 count:16];
              }
              while (v18);
            }
            uint64_t v107 = v15;

            long long v152 = 0u;
            long long v153 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            id v24 = v111;
            uint64_t v25 = [v24 countByEnumeratingWithState:&v150 objects:v172 count:16];
            if (v25)
            {
              uint64_t v26 = v25;
              uint64_t v27 = *(void *)v151;
              do
              {
                for (uint64_t j = 0; j != v26; ++j)
                {
                  if (*(void *)v151 != v27) {
                    objc_enumerationMutation(v24);
                  }
                  uint64_t v29 = *(void **)(*((void *)&v150 + 1) + 8 * j);
                  uint64_t v30 = [v29 URI];
                  [v121 addObject:v30];

                  int v31 = [v29 URI];
                  [v16 setObject:v29 forKey:v31];
                }
                uint64_t v26 = [v24 countByEnumeratingWithState:&v150 objects:v172 count:16];
              }
              while (v26);
            }

            id v32 = (void *)[v107 mutableCopy];
            [v32 minusSet:v121];
            id v33 = (void *)[v121 mutableCopy];
            [v33 minusSet:v107];
            long long v148 = 0u;
            long long v149 = 0u;
            long long v146 = 0u;
            long long v147 = 0u;
            id v117 = v32;
            uint64_t v34 = [v117 countByEnumeratingWithState:&v146 objects:v171 count:16];
            id v125 = v16;
            if (v34)
            {
              uint64_t v35 = v34;
              uint64_t v36 = *(void *)v147;
              do
              {
                for (uint64_t k = 0; k != v35; ++k)
                {
                  if (*(void *)v147 != v36) {
                    objc_enumerationMutation(v117);
                  }
                  uint64_t v38 = [v16 objectForKeyedSubscript:*(void *)(*((void *)&v146 + 1) + 8 * k)];
                  id v39 = (void *)[objc_alloc((Class)v7[234]) initWithPseudonym:v38 changeType:0 updateFlags:0];
                  [v4 addObject:v39];

                  id v16 = v125;
                }
                uint64_t v35 = [v117 countByEnumeratingWithState:&v146 objects:v171 count:16];
              }
              while (v35);
            }

            long long v144 = 0u;
            long long v145 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            id v116 = v33;
            uint64_t v40 = [v116 countByEnumeratingWithState:&v142 objects:v170 count:16];
            if (v40)
            {
              uint64_t v41 = v40;
              uint64_t v42 = *(void *)v143;
              do
              {
                for (uint64_t m = 0; m != v41; ++m)
                {
                  if (*(void *)v143 != v42) {
                    objc_enumerationMutation(v116);
                  }
                  uint64_t v44 = [v16 objectForKeyedSubscript:*(void *)(*((void *)&v142 + 1) + 8 * m)];
                  uint64_t v45 = (void *)[objc_alloc((Class)v7[234]) initWithPseudonym:v44 changeType:1 updateFlags:0];
                  [v4 addObject:v45];
                }
                uint64_t v41 = [v116 countByEnumeratingWithState:&v142 objects:v170 count:16];
              }
              while (v41);
            }

            long long v140 = 0u;
            long long v141 = 0u;
            long long v138 = 0u;
            long long v139 = 0u;
            id v115 = v24;
            uint64_t v11 = v119;
            uint64_t v122 = [v115 countByEnumeratingWithState:&v138 objects:v169 count:16];
            if (v122)
            {
              uint64_t v120 = *(void *)v139;
              id v118 = v10;
              do
              {
                for (uint64_t n = 0; n != v122; ++n)
                {
                  if (*(void *)v139 != v120) {
                    objc_enumerationMutation(v115);
                  }
                  id v47 = *(void **)(*((void *)&v138 + 1) + 8 * n);
                  long long v134 = 0u;
                  long long v135 = 0u;
                  long long v136 = 0u;
                  long long v137 = 0u;
                  id v48 = obj;
                  uint64_t v49 = [v48 countByEnumeratingWithState:&v134 objects:v168 count:16];
                  if (v49)
                  {
                    uint64_t v50 = v49;
                    uint64_t v51 = *(void *)v135;
LABEL_44:
                    uint64_t v52 = 0;
                    while (1)
                    {
                      if (*(void *)v135 != v51) {
                        objc_enumerationMutation(v48);
                      }
                      long long v53 = *(void **)(*((void *)&v134 + 1) + 8 * v52);
                      id v54 = [v53 URI];
                      id v55 = [v47 URI];
                      char v56 = [v54 isEqualToURI:v55];

                      if (v56) {
                        break;
                      }
                      if (v50 == ++v52)
                      {
                        uint64_t v50 = [v48 countByEnumeratingWithState:&v134 objects:v168 count:16];
                        if (v50) {
                          goto LABEL_44;
                        }
                        id v57 = v48;
                        id v7 = &off_1E5728000;
                        uint64_t v10 = v118;
                        uint64_t v11 = v119;
                        goto LABEL_69;
                      }
                    }
                    id v57 = v53;

                    id v7 = &off_1E5728000;
                    uint64_t v10 = v118;
                    uint64_t v11 = v119;
                    if (!v57) {
                      goto LABEL_70;
                    }
                    id v58 = [v57 properties];
                    id v59 = [v47 properties];
                    id v60 = v58;
                    if ([v60 isEqualToPseudonymProperties:v59])
                    {
                      uint64_t v61 = 0;
                    }
                    else
                    {
                      long long v62 = [v60 featureID];
                      long long v63 = [v59 featureID];
                      int v64 = [v62 isEqualToString:v63];

                      uint64_t v65 = v64 ^ 1u;
                      long long v66 = [v60 scopeID];
                      uint64_t v67 = [v59 scopeID];
                      if (v66 == (void *)v67)
                      {
                      }
                      else
                      {
                        long long v68 = (void *)v67;
                        long long v69 = [v60 scopeID];
                        long long v70 = [v59 scopeID];
                        int v113 = [v69 isEqualToString:v70];

                        if (!v113) {
                          v65 |= 2uLL;
                        }
                      }
                      id v71 = [v60 allowedServices];
                      __int16 v72 = objc_msgSend(v71, "__imSetFromArray");
                      uint64_t v73 = [v59 allowedServices];
                      uint64_t v74 = objc_msgSend(v73, "__imSetFromArray");
                      int v114 = [v72 isEqual:v74];

                      if (v114) {
                        uint64_t v61 = v65;
                      }
                      else {
                        uint64_t v61 = v65 | 8;
                      }
                      [v60 expiryEpoch];
                      double v76 = v75;
                      [v59 expiryEpoch];
                      double v78 = v76 - v77;
                      if (v78 < 0.0) {
                        double v78 = -v78;
                      }
                      if (v78 > 1.0) {
                        v61 |= 4uLL;
                      }
                      id v7 = &off_1E5728000;
                      uint64_t v10 = v118;
                      uint64_t v11 = v119;
                    }

                    uint64_t v79 = (void *)[objc_alloc((Class)v7[234]) initWithPseudonym:v47 changeType:2 updateFlags:v61];
                    [v123 addObject:v79];
                  }
                  else
                  {
                    id v57 = v48;
                  }
LABEL_69:

LABEL_70:
                  id v16 = v125;
                }
                uint64_t v122 = [v115 countByEnumeratingWithState:&v138 objects:v169 count:16];
              }
              while (v122);
            }

            id v4 = v123;
            id v5 = v102;
          }

LABEL_74:
          uint64_t v80 = v110;
          goto LABEL_83;
        }
        long long v160 = 0u;
        long long v161 = 0u;
        long long v158 = 0u;
        long long v159 = 0u;
        id v112 = v10;
        uint64_t v81 = [v112 countByEnumeratingWithState:&v158 objects:v174 count:16];
        if (!v81) {
          goto LABEL_74;
        }
        uint64_t v82 = v81;
        uint64_t v83 = *(void *)v159;
        do
        {
          for (iuint64_t i = 0; ii != v82; ++ii)
          {
            if (*(void *)v159 != v83) {
              objc_enumerationMutation(v112);
            }
            long long v85 = (void *)[objc_alloc((Class)v7[234]) initWithPseudonym:*(void *)(*((void *)&v158 + 1) + 8 * ii) changeType:0 updateFlags:0];
            [v4 addObject:v85];
          }
          uint64_t v82 = [v112 countByEnumeratingWithState:&v158 objects:v174 count:16];
        }
        while (v82);
        uint64_t v80 = v110;
        uint64_t v11 = 0;
LABEL_83:

        uint64_t v8 = v80 + 1;
      }
      while (v8 != v105);
      uint64_t v6 = [v5 countByEnumeratingWithState:&v162 objects:v175 count:16];
      uint64_t v105 = v6;
    }
    while (v6);
  }

  long long v132 = 0u;
  long long v133 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  id v86 = v104;
  uint64_t v87 = [v86 countByEnumeratingWithState:&v130 objects:v167 count:16];
  if (v87)
  {
    uint64_t v88 = v87;
    uint64_t v89 = *(void *)v131;
    do
    {
      for (juint64_t j = 0; jj != v88; ++jj)
      {
        if (*(void *)v131 != v89) {
          objc_enumerationMutation(v86);
        }
        uint64_t v91 = *(void *)(*((void *)&v130 + 1) + 8 * jj);
        long long v92 = objc_msgSend(v5, "objectForKey:", v91, v101);
        if (!v92)
        {
          long long v93 = [v86 objectForKey:v91];
          long long v126 = 0u;
          long long v127 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          uint64_t v94 = [v93 countByEnumeratingWithState:&v126 objects:v166 count:16];
          if (v94)
          {
            uint64_t v95 = v94;
            uint64_t v96 = *(void *)v127;
            do
            {
              for (kuint64_t k = 0; kk != v95; ++kk)
              {
                if (*(void *)v127 != v96) {
                  objc_enumerationMutation(v93);
                }
                long long v98 = [[IDSServicePseudonymChange alloc] initWithPseudonym:*(void *)(*((void *)&v126 + 1) + 8 * kk) changeType:1 updateFlags:0];
                [v123 addObject:v98];
              }
              uint64_t v95 = [v93 countByEnumeratingWithState:&v126 objects:v166 count:16];
            }
            while (v95);
          }

          id v4 = v123;
          id v5 = v102;
        }
      }
      uint64_t v88 = [v86 countByEnumeratingWithState:&v130 objects:v167 count:16];
    }
    while (v88);
  }

  long long v99 = (void *)[v4 copy];

  return v99;
}

void sub_1919C9678(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 service:v3 didUpdatePseudonymsWithChanges:*(void *)(a1 + 40)];
  }
}

id sub_1919C98E4(uint64_t a1)
{
  v42[1] = *MEMORY[0x1E4F143B8];
  if (a1 <= 499)
  {
    if (a1 > 299)
    {
      if (a1 == 300)
      {
        id v21 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v22 = *MEMORY[0x1E4F6B228];
        uint64_t v37 = *MEMORY[0x1E4F28568];
        uint64_t v38 = @"Internal server error";
        id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v38 forKeys:&v37 count:1];
        id v4 = v21;
        uint64_t v5 = v22;
        uint64_t v6 = 300;
        goto LABEL_22;
      }
      if (a1 == 400)
      {
        uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v12 = *MEMORY[0x1E4F6B228];
        uint64_t v35 = *MEMORY[0x1E4F28568];
        uint64_t v36 = @"Invalid URI";
        id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v36 forKeys:&v35 count:1];
        id v4 = v11;
        uint64_t v5 = v12;
        uint64_t v6 = 400;
        goto LABEL_22;
      }
    }
    else
    {
      if (a1 == 100)
      {
        uint64_t v17 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v18 = *MEMORY[0x1E4F6B228];
        uint64_t v41 = *MEMORY[0x1E4F28568];
        v42[0] = @"Feature disabled";
        id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v42 forKeys:&v41 count:1];
        id v4 = v17;
        uint64_t v5 = v18;
        uint64_t v6 = 100;
        goto LABEL_22;
      }
      if (a1 == 200)
      {
        id v7 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v8 = *MEMORY[0x1E4F6B228];
        uint64_t v39 = *MEMORY[0x1E4F28568];
        uint64_t v40 = @"Server error";
        id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v40 forKeys:&v39 count:1];
        id v4 = v7;
        uint64_t v5 = v8;
        uint64_t v6 = 200;
        goto LABEL_22;
      }
    }
  }
  else if (a1 <= 699)
  {
    if (a1 == 500)
    {
      uint64_t v19 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v20 = *MEMORY[0x1E4F6B228];
      uint64_t v33 = *MEMORY[0x1E4F28568];
      uint64_t v34 = @"Missing entitlements";
      id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v34 forKeys:&v33 count:1];
      id v4 = v19;
      uint64_t v5 = v20;
      uint64_t v6 = 500;
      goto LABEL_22;
    }
    if (a1 == 600)
    {
      uint64_t v9 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v10 = *MEMORY[0x1E4F6B228];
      uint64_t v31 = *MEMORY[0x1E4F28568];
      id v32 = @"Unable to send request";
      id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v32 forKeys:&v31 count:1];
      id v4 = v9;
      uint64_t v5 = v10;
      uint64_t v6 = 600;
      goto LABEL_22;
    }
  }
  else
  {
    switch(a1)
    {
      case 700:
        uint64_t v13 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v14 = *MEMORY[0x1E4F6B228];
        uint64_t v29 = *MEMORY[0x1E4F28568];
        uint64_t v30 = @"Pseudonym limit reached";
        id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
        id v4 = v13;
        uint64_t v5 = v14;
        uint64_t v6 = 700;
        goto LABEL_22;
      case 800:
        id v15 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v16 = *MEMORY[0x1E4F6B228];
        uint64_t v27 = *MEMORY[0x1E4F28568];
        id v28 = @"Request failed";
        id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
        id v4 = v15;
        uint64_t v5 = v16;
        uint64_t v6 = 800;
        goto LABEL_22;
      case 900:
        id v1 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v2 = *MEMORY[0x1E4F6B228];
        uint64_t v25 = *MEMORY[0x1E4F28568];
        uint64_t v26 = @"Max number of in flight provisions reached";
        id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v26 forKeys:&v25 count:1];
        id v4 = v1;
        uint64_t v5 = v2;
        uint64_t v6 = 900;
LABEL_22:
        uint64_t v23 = [v4 errorWithDomain:v5 code:v6 userInfo:v3];

        goto LABEL_23;
    }
  }
  uint64_t v23 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6B228] code:a1 userInfo:0];
LABEL_23:

  return v23;
}

void sub_1919CA0B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1919C98E4(600);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1919CA4A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1919C98E4(600);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1919CA874(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1919C98E4(600);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

id sub_1919CACB8(void *a1)
{
  id v1 = a1;
  id v2 = [v1 domain];
  int v3 = [v2 isEqualToString:*MEMORY[0x1E4F6B228]];

  if (v3)
  {
    sub_1919C98E4([v1 code]);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v5 = [v1 domain];
    int v6 = [v5 isEqualToString:*MEMORY[0x1E4F6B3A8]];

    if (v6)
    {
      sub_1919CB9E4([v1 code]);
      id v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v7 = [v1 domain];
      int v8 = [v7 isEqualToString:*MEMORY[0x1E4F6B2F0]];

      if (v8)
      {
        sub_1919CCFFC([v1 code]);
        id v4 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v4 = v1;
      }
    }
  }
  uint64_t v9 = v4;

  return v9;
}

uint64_t sub_1919CADB8(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 64)) {
      int v3 = @"YES";
    }
    else {
      int v3 = @"NO";
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    int v8 = 138413058;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v3;
    __int16 v12 = 2112;
    uint64_t v13 = v5;
    __int16 v14 = 2112;
    uint64_t v15 = v6;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "finishedProvisioningPseudonym called - block invoke {pseudonym: %@, success:%@, requestUUID: %@, error:%@}", (uint8_t *)&v8, 0x2Au);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

uint64_t sub_1919CB168(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 64)) {
      int v3 = @"YES";
    }
    else {
      int v3 = @"NO";
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    int v8 = 138413058;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v3;
    __int16 v12 = 2112;
    uint64_t v13 = v5;
    __int16 v14 = 2112;
    uint64_t v15 = v6;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "finishedRenewingPseudonym called - block invoke {pseudonym: %@, success:%@, requestUUID: %@, error:%@}", (uint8_t *)&v8, 0x2Au);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

uint64_t sub_1919CB4E0(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 56)) {
      int v3 = @"YES";
    }
    else {
      int v3 = @"NO";
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v7 = 138412802;
    int v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "finishedRevokingPseudonymWithSuccess called - block invoke {success:%@, requestUUID: %@, error:%@}", (uint8_t *)&v7, 0x20u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

id sub_1919CB9E4(unsigned int a1)
{
  v66[1] = *MEMORY[0x1E4F143B8];
  id v1 = 0;
  switch(a1)
  {
    case 0u:
      break;
    case 1u:
      id v2 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v3 = *MEMORY[0x1E4F6B3A8];
      uint64_t v65 = *MEMORY[0x1E4F28568];
      v66[0] = @"Invalid parameters";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v66 forKeys:&v65 count:1];
      uint64_t v5 = v2;
      uint64_t v6 = v3;
      uint64_t v7 = 1;
      goto LABEL_18;
    case 2u:
      int v8 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v9 = *MEMORY[0x1E4F6B3A8];
      uint64_t v63 = *MEMORY[0x1E4F28568];
      int v64 = @"URI not a token URI";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v64 forKeys:&v63 count:1];
      uint64_t v5 = v8;
      uint64_t v6 = v9;
      uint64_t v7 = 2;
      goto LABEL_18;
    case 3u:
      uint64_t v10 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v11 = *MEMORY[0x1E4F6B3A8];
      uint64_t v61 = *MEMORY[0x1E4F28568];
      long long v62 = @"Daemon disconnected";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v62 forKeys:&v61 count:1];
      uint64_t v5 = v10;
      uint64_t v6 = v11;
      uint64_t v7 = 3;
      goto LABEL_18;
    case 4u:
      uint64_t v12 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v13 = *MEMORY[0x1E4F6B3A8];
      uint64_t v59 = *MEMORY[0x1E4F28568];
      id v60 = @"Missing entitlements";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v60 forKeys:&v59 count:1];
      uint64_t v5 = v12;
      uint64_t v6 = v13;
      uint64_t v7 = 4;
      goto LABEL_18;
    case 5u:
      __int16 v14 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v15 = *MEMORY[0x1E4F6B3A8];
      uint64_t v57 = *MEMORY[0x1E4F28568];
      id v58 = @"Service has no application key";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v58 forKeys:&v57 count:1];
      uint64_t v5 = v14;
      uint64_t v6 = v15;
      uint64_t v7 = 5;
      goto LABEL_18;
    case 6u:
      uint64_t v16 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v17 = *MEMORY[0x1E4F6B3A8];
      uint64_t v55 = *MEMORY[0x1E4F28568];
      char v56 = @"Cannot perform query";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v56 forKeys:&v55 count:1];
      uint64_t v5 = v16;
      uint64_t v6 = v17;
      uint64_t v7 = 6;
      goto LABEL_18;
    case 7u:
      uint64_t v18 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v19 = *MEMORY[0x1E4F6B3A8];
      uint64_t v53 = *MEMORY[0x1E4F28568];
      id v54 = @"Query failed";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v54 forKeys:&v53 count:1];
      uint64_t v5 = v18;
      uint64_t v6 = v19;
      uint64_t v7 = 7;
      goto LABEL_18;
    case 8u:
      uint64_t v20 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v21 = *MEMORY[0x1E4F6B3A8];
      uint64_t v51 = *MEMORY[0x1E4F28568];
      uint64_t v52 = @"Query rate limited";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v52 forKeys:&v51 count:1];
      uint64_t v5 = v20;
      uint64_t v6 = v21;
      uint64_t v7 = 8;
      goto LABEL_18;
    case 9u:
      uint64_t v22 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v23 = *MEMORY[0x1E4F6B3A8];
      uint64_t v49 = *MEMORY[0x1E4F28568];
      uint64_t v50 = @"Remote identity unregistered";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v50 forKeys:&v49 count:1];
      uint64_t v5 = v22;
      uint64_t v6 = v23;
      uint64_t v7 = 9;
      goto LABEL_18;
    case 0xAu:
      id v24 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v25 = *MEMORY[0x1E4F6B3A8];
      uint64_t v47 = *MEMORY[0x1E4F28568];
      id v48 = @"Remote identity registered without signing key type";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v48 forKeys:&v47 count:1];
      uint64_t v5 = v24;
      uint64_t v6 = v25;
      uint64_t v7 = 10;
      goto LABEL_18;
    case 0xBu:
      uint64_t v26 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v27 = *MEMORY[0x1E4F6B3A8];
      uint64_t v45 = *MEMORY[0x1E4F28568];
      uint64_t v46 = @"Unable to load signing key type";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v46 forKeys:&v45 count:1];
      uint64_t v5 = v26;
      uint64_t v6 = v27;
      uint64_t v7 = 11;
      goto LABEL_18;
    case 0xCu:
      id v28 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v29 = *MEMORY[0x1E4F6B3A8];
      uint64_t v43 = *MEMORY[0x1E4F28568];
      uint64_t v44 = @"MessageProtection signing/verification error";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v44 forKeys:&v43 count:1];
      uint64_t v5 = v28;
      uint64_t v6 = v29;
      uint64_t v7 = 12;
      goto LABEL_18;
    case 0xDu:
      uint64_t v30 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v31 = *MEMORY[0x1E4F6B3A8];
      uint64_t v39 = *MEMORY[0x1E4F28568];
      uint64_t v40 = @"SecKey signing/verification error";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v40 forKeys:&v39 count:1];
      uint64_t v5 = v30;
      uint64_t v6 = v31;
      uint64_t v7 = 13;
      goto LABEL_18;
    case 0xEu:
      id v32 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v33 = *MEMORY[0x1E4F6B3A8];
      uint64_t v41 = *MEMORY[0x1E4F28568];
      uint64_t v42 = @"Local device unregistered";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v42 forKeys:&v41 count:1];
      uint64_t v5 = v32;
      uint64_t v6 = v33;
      uint64_t v7 = 14;
      goto LABEL_18;
    case 0xFu:
      uint64_t v34 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v35 = *MEMORY[0x1E4F6B3A8];
      uint64_t v37 = *MEMORY[0x1E4F28568];
      uint64_t v38 = @"Failed to diversify key";
      uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v38 forKeys:&v37 count:1];
      uint64_t v5 = v34;
      uint64_t v6 = v35;
      uint64_t v7 = 15;
LABEL_18:
      id v1 = [v5 errorWithDomain:v6 code:v7 userInfo:v4];

      break;
    default:
      id v1 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6B3A8] code:a1 userInfo:0];
      break;
  }

  return v1;
}

void sub_1919CC060(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1919CB9E4(3u);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1919CC0C4(void *a1, void *a2)
{
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)a1[5];
  id v6 = a2;
  id v8 = [v5 serviceProperties];
  uint64_t v7 = [v8 identifier];
  [v6 signData:v4 withAlgorithm:v3 onService:v7 options:a1[6] requestUUID:a1[7]];
}

void sub_1919CC5F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1919CB9E4(3u);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1919CC654(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[10];
  id v6 = (void *)a1[6];
  id v7 = a2;
  id v9 = [v6 serviceProperties];
  id v8 = [v9 identifier];
  [v7 verifySignedData:v3 matchesData:v4 forAlgorithm:v5 onService:v8 tokenUri:a1[7] options:a1[8] requestUUID:a1[9]];
}

uint64_t sub_1919CC950(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1919CCBD4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

id sub_1919CCFFC(uint64_t a1)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  if (a1 <= 299)
  {
    if (a1 == 100)
    {
      uint64_t v13 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v14 = *MEMORY[0x1E4F6B2F0];
      uint64_t v25 = *MEMORY[0x1E4F28568];
      v26[0] = @"Feature disabled";
      uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
      uint64_t v4 = v13;
      uint64_t v5 = v14;
      uint64_t v6 = 100;
      goto LABEL_12;
    }
    if (a1 == 200)
    {
      id v7 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v8 = *MEMORY[0x1E4F6B2F0];
      uint64_t v23 = *MEMORY[0x1E4F28568];
      id v24 = @"Server error";
      uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v24 forKeys:&v23 count:1];
      uint64_t v4 = v7;
      uint64_t v5 = v8;
      uint64_t v6 = 200;
      goto LABEL_12;
    }
  }
  else
  {
    switch(a1)
    {
      case 300:
        id v9 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v10 = *MEMORY[0x1E4F6B2F0];
        uint64_t v21 = *MEMORY[0x1E4F28568];
        uint64_t v22 = @"Internal server error";
        uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v22 forKeys:&v21 count:1];
        uint64_t v4 = v9;
        uint64_t v5 = v10;
        uint64_t v6 = 300;
        goto LABEL_12;
      case 400:
        uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v12 = *MEMORY[0x1E4F6B2F0];
        uint64_t v19 = *MEMORY[0x1E4F28568];
        uint64_t v20 = @"Invalid URI";
        uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v20 forKeys:&v19 count:1];
        uint64_t v4 = v11;
        uint64_t v5 = v12;
        uint64_t v6 = 400;
        goto LABEL_12;
      case 500:
        uint64_t v1 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v2 = *MEMORY[0x1E4F6B2F0];
        uint64_t v17 = *MEMORY[0x1E4F28568];
        uint64_t v18 = @"Missing entitlements";
        uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v18 forKeys:&v17 count:1];
        uint64_t v4 = v1;
        uint64_t v5 = v2;
        uint64_t v6 = 500;
LABEL_12:
        uint64_t v15 = [v4 errorWithDomain:v5 code:v6 userInfo:v3];

        goto LABEL_13;
    }
  }
  uint64_t v15 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6B2F0] code:a1 userInfo:0];
LABEL_13:

  return v15;
}

void sub_1919CD2A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1919CCFFC(600);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1919CDC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

void sub_1919CDE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

BOOL sub_1919CEA20(uint64_t a1, void *a2)
{
  id v2 = [a2 _internal];
  BOOL v3 = [v2 accountType] == 0;

  return v3;
}

uint64_t sub_1919CEA60(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 loginID];
  uint64_t v6 = [v4 loginID];

  uint64_t v7 = [v5 compare:v6];
  return v7;
}

id sub_1919CEAD0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 hasPrefix:@"device:"])
  {
    BOOL v3 = 0;
  }
  else
  {
    id v4 = [v2 _stripPotentialTokenURIWithToken:0];
    BOOL v3 = [v4 _stripFZIDPrefix];
  }

  return v3;
}

BOOL sub_1919CEB50(uint64_t a1, void *a2)
{
  return [a2 registrationStatus] == 5;
}

void sub_1919CF9F4(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v1 = a1[6];
  uint64_t v3 = a1[4];
  id v4 = [MEMORY[0x1E4F28C58] errorWithDomain:@"com.apple.identityservices.error" code:14 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v1 + 16))(v1, v3, v2, v4);
}

uint64_t sub_1919CFA80(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(a1[6] + 16))(a1[6], a1[4], a1[5], a2);
}

void sub_1919D0208(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v1 = a1[6];
  uint64_t v3 = a1[4];
  id v4 = [MEMORY[0x1E4F28C58] errorWithDomain:@"com.apple.identityservices.error" code:14 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v1 + 16))(v1, v3, v2, v4);
}

uint64_t sub_1919D0294(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(a1[6] + 16))(a1[6], a1[4], a1[5], a2);
}

void sub_1919D19A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,os_activity_scope_state_s state,char a39)
{
}

void sub_1919D1B1C(uint64_t a1)
{
  id v2 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v3 = objc_msgSend(v2, "initWithObjectsAndKeys:", @"Out of space", *MEMORY[0x1E4F28568], 0);
  id v4 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"com.apple.identityservices.error" code:27 userInfo:v3];
  uint64_t v5 = *(void **)(a1 + 32);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1919D1C24;
  v7[3] = &unk_1E572C6E0;
  void v7[4] = v5;
  id v8 = *(id *)(a1 + 40);
  id v9 = v4;
  id v6 = v4;
  [v5 _callDelegatesWithBlock:v7];
}

void sub_1919D1C24(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [*(id *)(a1[4] + 40) object];
    [v4 service:v3 account:0 identifier:a1[5] didSendWithSuccess:0 error:a1[6]];
  }
}

void sub_1919D2560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,os_activity_scope_state_s state,char a39)
{
}

void sub_1919D2B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
}

void sub_1919D61B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,os_activity_scope_state_s state,char a32)
{
}

void sub_1919D6458(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[IDSInternalQueueController sharedInstance];
  int v8 = [v7 assertQueueIsCurrent];

  if (v8)
  {
    id v9 = [MEMORY[0x1E4F6B460] utilities];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_191A3E430();
    }
  }
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"IDSSendMessageOptionFromID"];
    uint64_t v11 = [*(id *)(a1 + 40) _sendingAccountForAccount:0 destination:0 fromID:v10];
    uint64_t v12 = [v11 _internal];
    uint64_t v13 = [v12 uniqueID];

    uint64_t v14 = (void *)MEMORY[0x1E4F6B438];
    uint64_t v15 = [*(id *)(a1 + 48) destinations];
    uint64_t v16 = [v14 destinationWithStrings:v15];

    uint64_t v17 = *(void *)(a1 + 48);
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    void v26[2] = sub_1919D667C;
    v26[3] = &unk_1E572C830;
    id v18 = *(id *)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 40);
    id v27 = v18;
    uint64_t v28 = v19;
    id v29 = v11;
    id v30 = v16;
    uint64_t v20 = *(void **)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    id v31 = v13;
    uint64_t v22 = *(void *)(a1 + 72);
    uint64_t v33 = v21;
    uint64_t v34 = v22;
    id v32 = v20;
    id v23 = v13;
    id v24 = v16;
    id v25 = v11;
    [v5 _publicDataRepresentationForGroup:v17 completion:v26];
  }
}

void sub_1919D667C(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F1CA60] dictionaryWithDictionary:*(void *)(a1 + 32)];
  id v5 = v4;
  if (v3) {
    CFDictionarySetValue(v4, @"IDSSendMessageOptionDataToEncrypt", v3);
  }
  id v6 = (const void *)MEMORY[0x1E4F1CC38];
  CFDictionarySetValue(v5, @"IDSSendMessageOptionTopLevelDictionary", MEMORY[0x1E4F1CC38]);
  CFDictionarySetValue(v5, @"IDSSendMessageOptionCommand", &unk_1EE28B3B8);
  CFDictionarySetValue(v5, @"IDSSendMessageOptionEncryptPayload", v6);
  CFDictionarySetValue(v5, @"IDSSendMessageOptionAlwaysSkipSelfKey", v6);
  if (![*(id *)(a1 + 40) canSendMessageWithAccount:*(void *)(a1 + 48) toDestination:*(void *)(a1 + 56)])
  {
    uint64_t v16 = +[IDSLogging _IDSService];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = [*(id *)(a1 + 48) _internal];
      *(_DWORD *)long long buf = 138412290;
      id v31 = v17;
      _os_log_impl(&dword_19190B000, v16, OS_LOG_TYPE_DEFAULT, "sendMessage - Unable to send message to this destination from this account %@", buf, 0xCu);
    }
    uint64_t v26 = *MEMORY[0x1E4F28568];
    id v27 = @"Destination device is not active for this account";
    int v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    id v18 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v19 = 37;
    goto LABEL_15;
  }
  if (!*(void *)(a1 + 64)
    || (objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "objectForKeyedSubscript:"),
        (uint64_t v7 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    uint64_t v20 = +[IDSLogging _IDSService];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = [*(id *)(a1 + 48) _internal];
      *(_DWORD *)long long buf = 138412290;
      id v31 = v21;
      _os_log_impl(&dword_19190B000, v20, OS_LOG_TYPE_DEFAULT, "sendMessage - Could not find connection for account %@", buf, 0xCu);
    }
    [*(id *)(a1 + 40) _logConnectionMap];
    uint64_t v22 = +[IDSLogging _IDSService];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = [*(id *)(*(void *)(a1 + 40) + 8) _internal];
      id v24 = [v23 accounts];
      *(_DWORD *)long long buf = 138412290;
      id v31 = v24;
      _os_log_impl(&dword_19190B000, v22, OS_LOG_TYPE_DEFAULT, "sendMessage - All accounts %@", buf, 0xCu);
    }
    uint64_t v28 = *MEMORY[0x1E4F28568];
    id v29 = @"Could not find valid account";
    int v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v29 forKeys:&v28 count:1];
    id v18 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v19 = 7;
LABEL_15:
    id v14 = [v18 errorWithDomain:@"com.apple.identityservices.error" code:v19 userInfo:v8];
    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    goto LABEL_16;
  }
  int v8 = v7;
  id v9 = [v7 _internal];
  uint64_t v10 = [MEMORY[0x1E4F1C9B8] data];
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  id v25 = 0;
  [v9 sendData:v10 toDestinations:v11 priority:v12 options:v5 identifier:v13 error:&v25];
  id v14 = v25;

  uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
LABEL_16:
  v15();
}

uint64_t sub_1919D79C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1919D7B40(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) object];
    [v4 service:v3 didHintCheckingTransportLogWithReason:*(void *)(a1 + 40)];
  }
}

void sub_1919D7CE0(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = +[IDSLogging _IDSService];
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v10 = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      id v13 = v3;
      uint64_t v7 = "Failed to send group ahead {group: %@, error: %@}";
LABEL_6:
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v10, 0x16u);
    }
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    int v10 = 138412546;
    uint64_t v11 = v8;
    __int16 v12 = 2112;
    id v13 = v9;
    uint64_t v7 = "Did send group ahead {group: %@ identifier: %@}";
    goto LABEL_6;
  }
}

uint64_t sub_1919D84B0()
{
  uint64_t v0 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", @"accountsd", @"addressbooksyncd", @"airplayutil", @"amsaccountsd", @"assistantd", @"Assistive Control", @"audioDeviceTest", @"audioperftest", @"Bridge", @"CallHistorySyncHelper", @"Carousel", @"carouseluitrigger", @"ClarityBoard", @"cloudpaird", @"com.apple.accessibility.AccessibilityUIServer", @"com.apple.audio.virtualaudio.IntegrationTests.xctrunner", @"com.apple.FTLivePhotoService",
         @"companion_proxy",
         @"companionappd",
         @"companioncamerad",
         @"companionfindlocallyd",
         @"companionmessagesd",
         @"coreautomationd",
         @"coreduetd",
         @"demod",
         @"diagnosticextensionsd",
         @"ekgremlin",
         @"eventkitsyncd",
         @"fmflocatord",
         @"gamed",
         @"HealthKitControl",
         @"homeutil",
         @"HomeKitTestHostApp",
         @"IDSInvitationTestApp",
         @"idsrelay",
         @"idstool",
         @"IMAP Unit Tests-Runner",
         @"IMNotificationServiceAgent",
         @"IntegrationTests-Runner",
         @"iosdiagnosticsd",
         @"iTester",
         @"itesterd.mobile",
         @"itunescloudd",
         @"Legacy Account Migration Tests-",
         @"libassistantdTests-Runner",
         @"livabilityd",
         @"loctilestool",
         @"mediaremoted",
         @"Messages Catalyst",
         @"MessageUnitTests-Runner",
         @"MessagesViewService",
         @"minilab",
         @"mobiletimerd",
         @"mstreamd",
         @"Music",
         @"nanoappregistryd",
         @"nanobackupd",
         @"nanofindlocallyd",
         @"nanomediaremotelinkagent",
         @"nanomessagesd",
         @"nanomediatool");
  uint64_t v1 = qword_1EB2BD720;
  qword_1EB2BD720 = v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

void sub_1919D89D8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

uint64_t sub_1919D89F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 12) = 2112;
  *(void *)(a2 + 14) = result;
  return result;
}

void sub_1919D9A50(void *a1, void *a2)
{
  id v6 = a2;
  id v3 = [*(id *)(a1[4] + 32) objectForKey:a1[5]];
  id v4 = (void (**)(void, void, void, void, void))[v3 copy];

  if (v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionary];
    ((void (**)(void, void *, void, void, id))v4)[2](v4, v5, a1[6], 0, v6);
  }
  [*(id *)(a1[4] + 32) removeObjectForKey:a1[5]];
}

void sub_1919DA08C(void *a1, void *a2)
{
  id v6 = a2;
  id v3 = [*(id *)(a1[4] + 32) objectForKey:a1[5]];
  id v4 = (void (**)(void, void, void, void, void))[v3 copy];

  if (v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionary];
    ((void (**)(void, void *, void, void, id))v4)[2](v4, v5, a1[6], a1[7], v6);
  }
  [*(id *)(a1[4] + 32) removeObjectForKey:a1[5]];
}

void sub_1919DA14C(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = IMGetXPCDictionaryFromDictionary();
  uint64_t v5 = IMGetXPCStringFromDictionary();
  objc_opt_class();
  id v6 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();

  uint64_t v7 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412802;
    id v13 = v4;
    __int16 v14 = 2112;
    uint64_t v15 = v5;
    __int16 v16 = 2112;
    uint64_t v17 = v6;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Received cached id status {destinations: %@, service: %@, error: %@}", (uint8_t *)&v12, 0x20u);
  }

  uint64_t v8 = [*(id *)(a1[4] + 32) objectForKey:a1[5]];
  id v9 = (void (**)(void, void, void, void, void))[v8 copy];

  if (v9) {
    ((void (**)(void, void *, void *, void, void *))v9)[2](v9, v4, v5, a1[6], v6);
  }
  if (a1[5])
  {
    objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:");
    int v10 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void **)(a1[4] + 32);
      int v12 = 138412290;
      id v13 = v11;
      _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "transactionID map after REMOVE %@", (uint8_t *)&v12, 0xCu);
    }
  }
}

uint64_t sub_1919DA9DC(uint64_t a1, uint64_t a2)
{
  return [MEMORY[0x1E4F6B5C8] URIWithPrefixedURI:a2 withServiceLoggingHint:*(void *)(a1 + 32)];
}

void sub_1919DA9F4(void *a1, void *a2)
{
  id v6 = a2;
  id v3 = [*(id *)(a1[4] + 32) objectForKey:a1[5]];
  id v4 = (void (**)(void, void, void, void, void))[v3 copy];

  if (v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionary];
    ((void (**)(void, void *, void, void, id))v4)[2](v4, v5, a1[6], a1[7], v6);
  }
  [*(id *)(a1[4] + 32) removeObjectForKey:a1[5]];
}

void sub_1919DAAB4(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = IMGetXPCDataFromDictionary();
  uint64_t v5 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  int v10 = objc_msgSend(v5, "setWithObjects:", v6, v7, v8, v9, objc_opt_class(), 0);
  uint64_t v11 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClasses:v10 fromData:v4 error:0];
  int v12 = IMGetXPCStringFromDictionary();
  objc_opt_class();
  id v13 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();

  __int16 v14 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412802;
    uint64_t v20 = v11;
    __int16 v21 = 2112;
    uint64_t v22 = v12;
    __int16 v23 = 2112;
    id v24 = v13;
    _os_log_impl(&dword_19190B000, v14, OS_LOG_TYPE_DEFAULT, "Received id status {destinations: %@, service: %@, error: %@}", buf, 0x20u);
  }

  uint64_t v15 = [*(id *)(a1[4] + 32) objectForKey:a1[5]];
  __int16 v16 = (void (**)(void, void, void, void, void))[v15 copy];

  if (v16) {
    ((void (**)(void, void *, void *, void, void *))v16)[2](v16, v11, v12, a1[6], v13);
  }
  if (a1[5])
  {
    objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:");
    uint64_t v17 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void **)(a1[4] + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v20 = v18;
      _os_log_impl(&dword_19190B000, v17, OS_LOG_TYPE_DEFAULT, "transactionID map after REMOVE %@", buf, 0xCu);
    }
  }
}

void sub_1919DB34C(void *a1, void *a2)
{
  id v6 = a2;
  id v3 = [*(id *)(a1[4] + 32) objectForKey:a1[5]];
  id v4 = (void (**)(void, void, void, void, void))[v3 copy];

  if (v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionary];
    ((void (**)(void, void *, void, void, id))v4)[2](v4, v5, a1[6], a1[7], v6);
  }
  [*(id *)(a1[4] + 32) removeObjectForKey:a1[5]];
}

void sub_1919DB40C(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = IMGetXPCDataFromDictionary();
  uint64_t v5 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  int v10 = objc_msgSend(v5, "setWithObjects:", v6, v7, v8, v9, objc_opt_class(), 0);
  uint64_t v11 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClasses:v10 fromData:v4 error:0];
  int v12 = IMGetXPCStringFromDictionary();
  objc_opt_class();
  id v13 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();

  __int16 v14 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412802;
    uint64_t v20 = v11;
    __int16 v21 = 2112;
    uint64_t v22 = v12;
    __int16 v23 = 2112;
    id v24 = v13;
    _os_log_impl(&dword_19190B000, v14, OS_LOG_TYPE_DEFAULT, "Received id status {destinations: %@, service: %@, error: %@}", buf, 0x20u);
  }

  uint64_t v15 = [*(id *)(a1[4] + 32) objectForKey:a1[5]];
  __int16 v16 = (void (**)(void, void, void, void, void))[v15 copy];

  if (v16) {
    ((void (**)(void, void *, void *, void, void *))v16)[2](v16, v11, v12, a1[6], v13);
  }
  if (a1[5])
  {
    objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:");
    uint64_t v17 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void **)(a1[4] + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v20 = v18;
      _os_log_impl(&dword_19190B000, v17, OS_LOG_TYPE_DEFAULT, "transactionID map after REMOVE %@", buf, 0xCu);
    }
  }
}

void sub_1919DBCD8(void *a1, void *a2)
{
  id v6 = a2;
  id v3 = [*(id *)(a1[4] + 32) objectForKey:a1[5]];
  id v4 = (void (**)(void, void, void, void, void))[v3 copy];

  if (v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionary];
    ((void (**)(void, void *, void, void, id))v4)[2](v4, v5, a1[6], a1[7], v6);
  }
  [*(id *)(a1[4] + 32) removeObjectForKey:a1[5]];
}

void sub_1919DBD98(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = IMGetXPCDataFromDictionary();
  __int16 v21 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  int v12 = objc_msgSend(v21, "setWithObjects:", v4, v5, v6, v7, v8, v9, v10, v11, objc_opt_class(), 0);
  id v13 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClasses:v12 fromData:v3 error:0];
  __int16 v14 = IMGetXPCStringFromDictionary();
  objc_opt_class();
  uint64_t v15 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();

  __int16 v16 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412802;
    id v24 = v13;
    __int16 v25 = 2112;
    uint64_t v26 = v14;
    __int16 v27 = 2112;
    uint64_t v28 = v15;
    _os_log_impl(&dword_19190B000, v16, OS_LOG_TYPE_DEFAULT, "Received id status {destinations: %@, service: %@, error: %@}", buf, 0x20u);
  }

  uint64_t v17 = [*(id *)(a1[4] + 32) objectForKey:a1[5]];
  uint64_t v18 = (void (**)(void, void, void, void, void))[v17 copy];

  if (v18) {
    ((void (**)(void, void *, void *, void, void *))v18)[2](v18, v13, v14, a1[6], v15);
  }
  if (a1[5])
  {
    objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:");
    uint64_t v19 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void **)(a1[4] + 32);
      *(_DWORD *)long long buf = 138412290;
      id v24 = v20;
      _os_log_impl(&dword_19190B000, v19, OS_LOG_TYPE_DEFAULT, "transactionID map after REMOVE %@", buf, 0xCu);
    }
  }
}

void sub_1919DC3D0(uint64_t a1)
{
  id v2 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Query service disconnected", buf, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 56);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1919DC4A8;
  block[3] = &unk_1E5729000;
  void block[4] = v3;
  dispatch_async(v4, block);
}

void sub_1919DC4A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void sub_1919DC4C4(uint64_t a1, void *a2)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void (**)(void, void))MEMORY[0x192FE03B0](*(void *)(a1 + 32));
  if (MEMORY[0x192FE0A00](v3) == MEMORY[0x1E4F145A8])
  {
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", xpc_dictionary_get_string(v3, (const char *)*MEMORY[0x1E4F14530]));
    uint64_t v7 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_191A3E970((uint64_t)v6, v7);
    }

    if (v4)
    {
      uint64_t v8 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v11 = *MEMORY[0x1E4F28228];
      v12[0] = v6;
      uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
      uint64_t v10 = [v8 errorWithDomain:@"IDSIDQueryControllerErrorDomain" code:-1000 userInfo:v9];
      ((void (**)(void, void *))v4)[2](v4, v10);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
    }
  }
}

id sub_1919DCD48()
{
  uint64_t v0 = [IDSXPCDaemonController alloc];
  uint64_t v1 = +[IDSInternalQueueController sharedInstance];
  id v2 = [v1 queue];
  id v3 = [(IDSXPCDaemonController *)v0 initSyncControllerWithQueue:v2];

  return v3;
}

void sub_1919DCEC4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1919E03C8;
  v7[3] = &unk_1E572A398;
  id v8 = v4;
  id v9 = v3;
  id v5 = v3;
  id v6 = v4;
  +[IDSXPCDaemonController performDaemonControllerTask:v7];
}

uint64_t sub_1919DCF88(uint64_t a1, void *a2)
{
  return [a2 requestSelectedSubscriptionsWithCompletion:*(void *)(a1 + 32)];
}

uint64_t sub_1919DD19C(uint64_t a1, void *a2)
{
  return [a2 selectSubscription:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_1919DD3B0(uint64_t a1, void *a2)
{
  return [a2 unselectSubscription:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_1919DD5C4(uint64_t a1, void *a2)
{
  return [a2 setSelectedSubscriptions:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

void sub_1919DD7E0(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1919DD884;
  v5[3] = &unk_1E572A370;
  id v6 = *(id *)(a1 + 40);
  id v4 = [a2 registrationCollaboratorWithErrorHandler:v5];
  [v4 removeTemporaryPhoneAlias:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

void sub_1919DD884(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A3EE20();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1919DDB14(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1919DDBB8;
  v5[3] = &unk_1E572A370;
  id v6 = *(id *)(a1 + 40);
  id v4 = [a2 registrationCollaboratorWithErrorHandler:v5];
  [v4 disableTemporaryPhoneAlias:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

void sub_1919DDBB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A3EE20();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1919DDE48(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1919DDEEC;
  v5[3] = &unk_1E572A370;
  id v6 = *(id *)(a1 + 40);
  id v4 = [a2 registrationCollaboratorWithErrorHandler:v5];
  [v4 enableTemporaryPhoneAlias:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

void sub_1919DDEEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A3EE20();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1919DE068(uint64_t a1, void *a2)
{
  return [a2 requestUnselectedTemporaryPhoneAliasesWithCompletion:*(void *)(a1 + 32)];
}

void sub_1919DE28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919DE2C0(uint64_t result, void *a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1919DE348;
    v5[3] = &unk_1E572CA00;
    long long v6 = *(_OWORD *)(result + 32);
    uint64_t v7 = *(void *)(result + 48);
    return [a2 requestSelectedSubscriptionsWithCompletion:v5];
  }
  return result;
}

void sub_1919DE348(void *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (v10)
  {
    long long v6 = (void **)(*(void *)(a1[4] + 8) + 40);
    uint64_t v7 = v10;
  }
  else
  {
    long long v6 = (void **)(*(void *)(a1[5] + 8) + 40);
    uint64_t v7 = v5;
  }
  id v8 = v7;
  uint64_t v9 = *v6;
  *long long v6 = v8;

  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
}

void sub_1919DE6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919DE734(uint64_t result, void *a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v9 = v3;
    uint64_t v10 = v4;
    uint64_t v5 = *(void *)(result + 32);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = sub_1919DE7C0;
    v6[3] = &unk_1E572CA00;
    long long v7 = *(_OWORD *)(result + 40);
    uint64_t v8 = *(void *)(result + 56);
    return [a2 selectSubscription:v5 withCompletion:v6];
  }
  return result;
}

void sub_1919DE7C0(void *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (v10)
  {
    long long v6 = (void **)(*(void *)(a1[4] + 8) + 40);
    long long v7 = v10;
  }
  else
  {
    long long v6 = (void **)(*(void *)(a1[5] + 8) + 40);
    long long v7 = v5;
  }
  id v8 = v7;
  uint64_t v9 = *v6;
  *long long v6 = v8;

  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
}

void sub_1919DEB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919DEBAC(uint64_t result, void *a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v9 = v3;
    uint64_t v10 = v4;
    uint64_t v5 = *(void *)(result + 32);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = sub_1919DEC38;
    v6[3] = &unk_1E572CA00;
    long long v7 = *(_OWORD *)(result + 40);
    uint64_t v8 = *(void *)(result + 56);
    return [a2 unselectSubscription:v5 withCompletion:v6];
  }
  return result;
}

void sub_1919DEC38(void *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (v10)
  {
    long long v6 = (void **)(*(void *)(a1[4] + 8) + 40);
    long long v7 = v10;
  }
  else
  {
    long long v6 = (void **)(*(void *)(a1[5] + 8) + 40);
    long long v7 = v5;
  }
  id v8 = v7;
  uint64_t v9 = *v6;
  *long long v6 = v8;

  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
}

void sub_1919DEFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919DF024(uint64_t result, void *a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v9 = v3;
    uint64_t v10 = v4;
    uint64_t v5 = *(void *)(result + 32);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = sub_1919DF0B0;
    v6[3] = &unk_1E572CA00;
    long long v7 = *(_OWORD *)(result + 40);
    uint64_t v8 = *(void *)(result + 56);
    return [a2 setSelectedSubscriptions:v5 withCompletion:v6];
  }
  return result;
}

void sub_1919DF0B0(void *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (v10)
  {
    long long v6 = (void **)(*(void *)(a1[4] + 8) + 40);
    long long v7 = v10;
  }
  else
  {
    long long v6 = (void **)(*(void *)(a1[5] + 8) + 40);
    long long v7 = v5;
  }
  id v8 = v7;
  uint64_t v9 = *v6;
  *long long v6 = v8;

  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
}

void sub_1919DF430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919DF46C(uint64_t result, void *a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v9 = v3;
    uint64_t v10 = v4;
    uint64_t v5 = *(void *)(result + 32);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = sub_1919DF4F8;
    v6[3] = &unk_1E572CA78;
    long long v7 = *(_OWORD *)(result + 40);
    uint64_t v8 = *(void *)(result + 56);
    return [a2 removeTemporaryPhoneAlias:v5 withCompletion:v6];
  }
  return result;
}

void sub_1919DF4F8(void *a1, char a2, void *a3)
{
  id v6 = a3;
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = a2;
  if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    id v7 = v6;
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a3);
    id v6 = v7;
  }
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
}

void sub_1919DF864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919DF8A0(uint64_t result, void *a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v9 = v3;
    uint64_t v10 = v4;
    uint64_t v5 = *(void *)(result + 32);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = sub_1919DF92C;
    v6[3] = &unk_1E572CA78;
    long long v7 = *(_OWORD *)(result + 40);
    uint64_t v8 = *(void *)(result + 56);
    return [a2 enableTemporaryPhoneAlias:v5 withCompletion:v6];
  }
  return result;
}

void sub_1919DF92C(void *a1, char a2, void *a3)
{
  id v6 = a3;
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = a2;
  if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    id v7 = v6;
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a3);
    id v6 = v7;
  }
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
}

void sub_1919DFC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919DFCD4(uint64_t result, void *a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v9 = v3;
    uint64_t v10 = v4;
    uint64_t v5 = *(void *)(result + 32);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = sub_1919DFD60;
    v6[3] = &unk_1E572CA78;
    long long v7 = *(_OWORD *)(result + 40);
    uint64_t v8 = *(void *)(result + 56);
    return [a2 disableTemporaryPhoneAlias:v5 withCompletion:v6];
  }
  return result;
}

void sub_1919DFD60(void *a1, char a2, void *a3)
{
  id v6 = a3;
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = a2;
  if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    id v7 = v6;
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a3);
    id v6 = v7;
  }
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
}

void sub_1919E000C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919E0040(uint64_t result, void *a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1919E00C8;
    v5[3] = &unk_1E572CA00;
    long long v6 = *(_OWORD *)(result + 32);
    uint64_t v7 = *(void *)(result + 48);
    return [a2 requestUnselectedTemporaryPhoneAliasesWithCompletion:v5];
  }
  return result;
}

void sub_1919E00C8(void *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (v10)
  {
    long long v6 = (void **)(*(void *)(a1[4] + 8) + 40);
    uint64_t v7 = v10;
  }
  else
  {
    long long v6 = (void **)(*(void *)(a1[5] + 8) + 40);
    uint64_t v7 = v5;
  }
  id v8 = v7;
  uint64_t v9 = *v6;
  *long long v6 = v8;

  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
}

void sub_1919E0334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1919E0350(uint64_t a1, void *a2)
{
}

void sub_1919E03C8(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1919E0478;
  v5[3] = &unk_1E572A370;
  id v6 = *(id *)(a1 + 32);
  uint64_t v4 = [a2 registrationCollaboratorWithErrorHandler:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1919E0478(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A3EE20();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1919E0CA8(void *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1[5])
  {
    uint64_t v4 = [MEMORY[0x1E4F6B460] GroupSessionKeyValueDelivery];
    id v5 = v4;
    if (v3)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_191A3F49C();
      }

      id v6 = *(void (**)(void))(a1[5] + 16);
    }
    else
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = a1[4];
        uint64_t v8 = *(void *)(*(void *)(a1[6] + 8) + 40);
        int v9 = 138412546;
        uint64_t v10 = v7;
        __int16 v11 = 2112;
        uint64_t v12 = v8;
        _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "created keyValueDelivery for session %@: %@", (uint8_t *)&v9, 0x16u);
      }

      id v6 = *(void (**)(void))(a1[5] + 16);
    }
    v6();
  }
}

uint64_t sub_1919E0FE8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__setUpXPC);
}

void sub_1919E1194(uint64_t a1, void *a2)
{
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1919E12C0;
  v14[3] = &unk_1E572C8A8;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v15 = v4;
  uint64_t v16 = v5;
  id v6 = [a2 groupSessionKeyValueDeliveryProviderCollaboratorWithErrorHandler:v14];
  uint64_t v7 = *(void **)(a1 + 32);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1919E1348;
  void v10[3] = &unk_1E572CAA0;
  id v11 = v7;
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 40);
  id v12 = v8;
  uint64_t v13 = v9;
  [v6 keyValueDeliveryForSessionID:v11 completionHandler:v10];
}

void sub_1919E12C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] GroupSessionKeyValueDelivery];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A3F508();
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 16);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
  }
}

void sub_1919E1348(uint64_t a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [MEMORY[0x1E4F6B460] GroupSessionKeyValueDelivery];
  id v8 = v7;
  if (!v5 || v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v27 = v22;
      __int16 v28 = 2112;
      id v29 = v6;
      __int16 v30 = 2112;
      id v31 = v5;
      _os_log_error_impl(&dword_19190B000, v8, OS_LOG_TYPE_ERROR, "failed to get keyValueDelivery for session %@: error: %@ keyValueDelivery: %@", buf, 0x20u);
    }

    id v11 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v24 = *MEMORY[0x1E4F28228];
    __int16 v25 = @"NULL keyValueDelivery";
    id v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    uint64_t v13 = [v11 errorWithDomain:@"IDSXPCConnectionErrorDomain" code:-3000 userInfo:v12];

    [*(id *)(a1 + 40) failWithError:v13];
    ids_monotonic_time();
    uint64_t v14 = *(void *)(a1 + 48);
    if (v15 - *(double *)(v14 + 24) <= 5.0)
    {
      uint64_t v17 = [MEMORY[0x1E4F6B460] GroupSessionKeyValueDelivery];
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v27 = v18;
        _os_log_impl(&dword_19190B000, v17, OS_LOG_TYPE_DEFAULT, "retry later setup XPC for session %@", buf, 0xCu);
      }

      dispatch_time_t v19 = dispatch_time(0, 500000000);
      uint64_t v20 = +[IDSInternalQueueController sharedInstance];
      __int16 v21 = [v20 queue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1919E1678;
      block[3] = &unk_1E5729000;
      void block[4] = *(void *)(a1 + 48);
      dispatch_after(v19, v21, block);
    }
    else
    {
      uint64_t v16 = *(void *)(v14 + 16);
      if (v16) {
        (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v13);
      }
    }
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v27 = v9;
      __int16 v28 = 2112;
      id v29 = v5;
      _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "for session %@, keyValueDelivery: %@", buf, 0x16u);
    }

    [*(id *)(a1 + 40) fulfillWithRemoteObject:v5];
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 16);
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
    }
  }
}

uint64_t sub_1919E1678(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__setUpXPC);
}

void sub_1919E1748(uint64_t a1)
{
  id v4 = [[IDSGroupSessionKeyValueDeliveryHandlerProxy alloc] initWithHandler:*(void *)(a1 + 32)];
  id v2 = *(void **)(*(void *)(a1 + 40) + 32);
  id v3 = [(IDSGroupSessionKeyValueDeliveryHandlerProxy *)v4 handlerUUID];
  [v2 addDeliveryHandler:v4 uuid:v3];

  [*(id *)(*(void *)(a1 + 40) + 40) addObject:v4];
}

void sub_1919E18A4(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 40);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v14 objects:v20 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v15;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v15 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void **)(*((void *)&v14 + 1) + 8 * v6);
      id v8 = objc_msgSend(v7, "handler", (void)v14);
      uint64_t v9 = *(void **)(a1 + 40);

      if (v8 == v9) {
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [v2 countByEnumeratingWithState:&v14 objects:v20 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    uint64_t v10 = v7;

    if (!v10) {
      goto LABEL_12;
    }
    id v11 = *(void **)(*(void *)(a1 + 32) + 32);
    id v12 = [v10 handlerUUID];
    [v11 removeDeliveryHandler:v12];

    [*(id *)(*(void *)(a1 + 32) + 40) removeObject:v10];
  }
  else
  {
LABEL_9:

LABEL_12:
    uint64_t v10 = objc_msgSend(MEMORY[0x1E4F6B460], "GroupSessionKeyValueDelivery", (void)v14);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v19 = v13;
      _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "removeDeliveryHandler: could not find proxy for handler %@", buf, 0xCu);
    }
  }
}

void sub_1919E1B2C(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6B460] GroupSessionKeyValueDelivery];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 40);
    v7[0] = 67109376;
    v7[1] = v3;
    __int16 v8 = 2048;
    uint64_t v9 = v4;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "requestDataForKey: getting key %d for participant %llu", (uint8_t *)v7, 0x12u);
  }

  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 32);
  if (v5)
  {
    [v5 requestDataForKey:*(unsigned int *)(a1 + 48) participantID:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v6 = [MEMORY[0x1E4F6B460] GroupSessionKeyValueDelivery];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "requestDataForKey: xpc not ready", (uint8_t *)v7, 2u);
    }
  }
}

void sub_1919E1D88(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6B460] GroupSessionKeyValueDelivery];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412802;
    uint64_t v23 = v4;
    __int16 v24 = 1024;
    int v25 = v3;
    __int16 v26 = 2112;
    uint64_t v27 = v5;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "sendData: sending data: %@ with key: %d for capability: %@", buf, 0x1Cu);
  }

  uint64_t v6 = *(void **)(*(void *)(a1 + 48) + 32);
  if (!v6)
  {
    uint64_t v7 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v20 = *MEMORY[0x1E4F28228];
    uint64_t v21 = @"XPC doesn't set up";
    __int16 v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    uint64_t v9 = [v7 errorWithDomain:@"IDSXPCConnectionErrorDomain" code:-3000 userInfo:v8];

    uint64_t v10 = *(void *)(a1 + 56);
    if (v10) {
      (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v9);
    }

    uint64_t v6 = *(void **)(*(void *)(a1 + 48) + 32);
  }
  uint64_t v11 = *(unsigned int *)(a1 + 64);
  uint64_t v12 = *(unsigned int *)(a1 + 68);
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_1919E1FAC;
  v15[3] = &unk_1E572CB18;
  id v16 = v13;
  int v19 = *(_DWORD *)(a1 + 64);
  id v17 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 56);
  [v6 sendData:v16 forKey:v11 encryption:v12 capability:v14 withCompletion:v15];
}

void sub_1919E1FAC(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F6B460] GroupSessionKeyValueDelivery];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v9 = 138412802;
    uint64_t v10 = v6;
    __int16 v11 = 1024;
    int v12 = v5;
    __int16 v13 = 2112;
    uint64_t v14 = v7;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "sendData: finished sending data: %@ with key: %d for capability:%@", (uint8_t *)&v9, 0x1Cu);
  }

  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v3);
  }
}

uint64_t sub_1919E2184(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_test_receiveData_forKey_fromParticipant_);
}

id sub_1919E2834(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    uint64_t v8 = 0;
    goto LABEL_15;
  }
  id v3 = [v1 domain];
  int v4 = [v3 isEqualToIgnoringCase:*MEMORY[0x1E4F6AC30]];

  if (!v4)
  {
    int v9 = [v2 domain];
    int v10 = [v9 isEqualToIgnoringCase:*MEMORY[0x1E4F6B2D8]];

    if (v10)
    {
      unint64_t v5 = [v2 code] - 1;
      if (v5 < 0x25)
      {
        uint64_t v6 = &off_1E572CB88[v5];
        uint64_t v7 = &unk_191A52350;
        goto LABEL_12;
      }
    }
    else
    {
      __int16 v11 = [v2 domain];
      int v12 = [v11 isEqualToIgnoringCase:*MEMORY[0x1E4F6ACD8]];

      if (v12)
      {
        unint64_t v5 = [v2 code] + 1;
        if (v5 < 4)
        {
          uint64_t v6 = &off_1E572CCB0[v5];
          uint64_t v7 = &unk_191A52478;
          goto LABEL_12;
        }
      }
    }
LABEL_13:
    __int16 v13 = 0;
    uint64_t v14 = 200;
    goto LABEL_14;
  }
  unint64_t v5 = [v2 code] - 101;
  if (v5 >= 5) {
    goto LABEL_13;
  }
  uint64_t v6 = &off_1E572CB60[v5];
  uint64_t v7 = &unk_191A52328;
LABEL_12:
  __int16 v13 = *v6;
  uint64_t v14 = v7[v5];
LABEL_14:
  id v15 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  id v16 = objc_msgSend(v15, "initWithObjectsAndKeys:", v2, *MEMORY[0x1E4F28A50], v13, *MEMORY[0x1E4F28568], 0);
  uint64_t v8 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"com.apple.identityservices.error" code:v14 userInfo:v16];

LABEL_15:

  return v8;
}

void sub_1919E3A60(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

id sub_1919E3A78()
{
  if (qword_1E92DE320 != -1) {
    dispatch_once(&qword_1E92DE320, &unk_1EE2467E8);
  }
  uint64_t v0 = (void *)qword_1E92DE318;

  return v0;
}

void sub_1919E3ACC()
{
  uint64_t v0 = [MEMORY[0x1E4F28B50] mainBundle];
  uint64_t v1 = [v0 bundleIdentifier];
  id v2 = (void *)qword_1E92DE318;
  qword_1E92DE318 = v1;

  if (!qword_1E92DE318)
  {
    id v6 = [MEMORY[0x1E4F28B50] mainBundle];
    id v3 = [v6 executablePath];
    uint64_t v4 = [v3 lastPathComponent];
    uint64_t v5 = (void *)qword_1E92DE318;
    qword_1E92DE318 = v4;
  }
}

uint64_t IDSLog(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = sub_1919E3A78();
  uint64_t v6 = _IDSLog();

  return v6;
}

uint64_t IDSWarn(void *a1)
{
  id v1 = a1;
  id v2 = sub_1919E3A78();
  uint64_t v3 = _IDSWarn();

  return v3;
}

uint64_t sub_1919E3CD0()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "IDSService");
  uint64_t v1 = qword_1EB2BD680;
  qword_1EB2BD680 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E3D68()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "QRAllocator");
  uint64_t v1 = qword_1E92DE328;
  qword_1E92DE328 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E3E00()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "IDSConnection");
  uint64_t v1 = qword_1EB2BD668;
  qword_1EB2BD668 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E3E98()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "IDSDeviceConnection");
  uint64_t v1 = qword_1E92DE338;
  qword_1E92DE338 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E3F30()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "IDSDataChannels");
  uint64_t v1 = qword_1E92DE348;
  qword_1E92DE348 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E3FC8()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "IDSLocalSetup");
  uint64_t v1 = qword_1E92DE358;
  qword_1E92DE358 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4060()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "IDSReportSpam");
  uint64_t v1 = qword_1E92DE150;
  qword_1E92DE150 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E40F8()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "NRPairing");
  uint64_t v1 = qword_1E92DE110;
  qword_1E92DE110 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4190()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "");
  uint64_t v1 = qword_1E92DE368;
  qword_1E92DE368 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4228()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "transactionLog");
  uint64_t v1 = qword_1E92DE378;
  qword_1E92DE378 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E42C0()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "DaemonListener");
  uint64_t v1 = qword_1EB2BD758;
  qword_1EB2BD758 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4358()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "RegistrationManager");
  uint64_t v1 = qword_1EB2BD708;
  qword_1EB2BD708 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E43F0()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSService");
  uint64_t v1 = qword_1E92DE238;
  qword_1E92DE238 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4488()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSConnection");
  uint64_t v1 = qword_1EB2BD728;
  qword_1EB2BD728 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4520()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSConnection-oversize");
  uint64_t v1 = qword_1EB2BD530;
  qword_1EB2BD530 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E45B8()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSDirectMessagingConnection");
  uint64_t v1 = qword_1EB2BD6E8;
  qword_1EB2BD6E8 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4650()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "continuity");
  uint64_t v1 = qword_1E92DE388;
  qword_1E92DE388 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E46E8()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSSession");
  uint64_t v1 = qword_1E92DE398;
  qword_1E92DE398 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4780()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "CFS");
  uint64_t v1 = qword_1E92DE3A0;
  qword_1E92DE3A0 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4818()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "_IDSGroupSession");
  uint64_t v1 = qword_1E92DE3B0;
  qword_1E92DE3B0 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E48B0()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "_IDSGroupSession-oversize");
  uint64_t v1 = qword_1E92DE3C0;
  qword_1E92DE3C0 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4948()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "DaemonProxy");
  uint64_t v1 = qword_1E92DE3D0;
  qword_1E92DE3D0 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E49E0()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "GUIDTRACE");
  uint64_t v1 = qword_1EB2BD690;
  qword_1EB2BD690 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4A78()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSDevice");
  uint64_t v1 = qword_1E92DE3E0;
  qword_1E92DE3E0 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4B10()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSDeviceConnection");
  uint64_t v1 = qword_1E92DE3F0;
  qword_1E92DE3F0 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4BA8()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSDataChannels");
  uint64_t v1 = qword_1E92DE400;
  qword_1E92DE400 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4C40()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "ServiceAvailability");
  uint64_t v1 = qword_1E92DE220;
  qword_1E92DE220 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4CD8()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSRealTimeEncryptionProxy");
  uint64_t v1 = qword_1E92DE410;
  qword_1E92DE410 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4D70()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSiCloudSignInHack");
  uint64_t v1 = qword_1E92DE420;
  qword_1E92DE420 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1919E4E08()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "_IDSSession");
  uint64_t v1 = qword_1E92DE430;
  qword_1E92DE430 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

void sub_1919E6404(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1919E6438(uint64_t a1)
{
  id v2 = [MEMORY[0x1E4F6B460] xpc];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "IDSXPCConnection interrupted", v6, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _cleanupAllPendingTransactions];
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
}

void sub_1919E64DC(uint64_t a1)
{
  id v2 = [MEMORY[0x1E4F6B460] xpc];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "IDSXPCConnection invalidated", v6, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _cleanupAllPendingTransactions];
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
}

id sub_1919E67D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }
  return self;
}

id sub_1919E6910(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }
  return self;
}

id sub_1919E6AA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }
  return self;
}

uint64_t sub_1919E6F80(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_invoke);
}

uint64_t sub_1919E6F88(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void *)(a1 + 40);

  return MEMORY[0x1F40CD9C0](v2, 0);
}

uint64_t sub_1919E7160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
}

void sub_1919E7948(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F6B460] xpc];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138543874;
    uint64_t v19 = v3;
    __int16 v20 = 2114;
    uint64_t v21 = v4;
    __int16 v22 = 2114;
    uint64_t v23 = v5;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "xpc message timed out -- calling error {selector: %{public}@, uuid: %{public}@, timeout: %{public}@}", buf, 0x20u);
  }

  uint64_t v6 = [*(id *)(a1 + 56) connection];
  uint64_t v7 = [v6 pendingTransactions];
  uint64_t v8 = [v7 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v8)
  {
    int v9 = [*(id *)(a1 + 56) connection];
    int v10 = [v9 pendingTransactions];
    [v10 removeObjectForKey:*(void *)(a1 + 40)];

    __int16 v11 = [NSString stringWithFormat:@"Timed-out expecting response for @selector(%@)", *(void *)(a1 + 32)];
    int v12 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v16 = *MEMORY[0x1E4F28228];
    id v17 = v11;
    __int16 v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    uint64_t v14 = [v12 errorWithDomain:@"IDSXPCConnectionErrorDomain" code:-1000 userInfo:v13];

    id v15 = [*(id *)(a1 + 56) errorHandler];
    ((void (**)(void, void *))v15)[2](v15, v14);

    v8[2](v8);
  }
}

void sub_1919E7B44(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F6B460] xpc];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138543618;
    uint64_t v6 = v3;
    __int16 v7 = 2114;
    uint64_t v8 = v4;
    _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Clearing transaction timeout timer {selector: %{public}@, uuid: %{public}@}", (uint8_t *)&v5, 0x16u);
  }

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 48));
}

void sub_1919E7C08(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  int v5 = [v3 connection];
  uint64_t v6 = [v5 pendingTransactions];
  uint64_t v8 = [v6 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v8) {
    v8[2]();
  }
  __int16 v7 = [*(id *)(a1 + 32) errorHandler];
  ((void (**)(void, id))v7)[2](v7, v4);
}

void sub_1919E7CCC(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [*(id *)(a1 + 32) errorHandler];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) errorHandler];
    ((void (**)(void, id))v4)[2](v4, v5);
  }
}

void sub_1919E83D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1919E8414(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t state64 = 0;
  notify_get_state(a2, &state64);
  [WeakRetained notifyDelegatesAboutNewState:state64 token:a2];
}

uint64_t sub_1919E86B8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_stateDidChange_);
}

void sub_1919E87E4(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = [v4 first];
  if ([v3 isEqual:*(void *)(a1 + 32)]) {
    [*(id *)(a1 + 40) addObject:v4];
  }
}

void sub_1919E88E0()
{
  os_log_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_UTILITY, 0);

  dispatch_queue_t v1 = dispatch_queue_create("com.apple.IDS.IDSDeviceStateMonitoring", attr);
  uint64_t v2 = (void *)qword_1E92DE448;
  qword_1E92DE448 = (uint64_t)v1;
}

void sub_1919EBE18(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ([v5 count])
  {
    uint64_t v6 = [*(id *)(a1 + 32) _cacheForService:v8];
    __int16 v7 = (void *)[v6 mutableCopy];

    if (v7) {
      [v7 addEntriesFromDictionary:v5];
    }
    else {
      __int16 v7 = (void *)[v5 mutableCopy];
    }
    [*(id *)(*(void *)(a1 + 32) + 24) setObject:v7 forKey:v8];
  }
}

void sub_1919EBFBC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = *(id *)(*(void *)(a1 + 32) + 24);

  if (WeakRetained == v3)
  {
    id v4 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 0;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Purging idStatusCache", (uint8_t *)v7, 2u);
    }

    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 24);
    *(void *)(v5 + 24) = 0;
  }
}

uint64_t sub_1919EC210(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1919EC498(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v4 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      id v7 = v3;
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Notifying delegate %@ about KT peer verification results for service: %@", (uint8_t *)&v6, 0x16u);
    }

    [v3 idsKTVerifierResultsUpdatedForDestinations:*(void *)(a1 + 40) service:*(void *)(a1 + 32)];
  }
}

void sub_1919ECC70(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  __int16 v13 = (void *)MEMORY[0x192FE0160]();
  uint64_t v14 = *(void **)(a1 + 32);
  if (v14[3]) {
    [v14 _updateCacheWithDictionary:v9 service:*(void *)(a1 + 40)];
  }
  id v15 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v27 = v10;
    __int16 v28 = 2112;
    id v29 = v9;
    _os_log_impl(&dword_19190B000, v15, OS_LOG_TYPE_DEFAULT, "Received results for service: %@  updates %@", buf, 0x16u);
  }

  uint64_t v16 = [*(id *)(a1 + 32) _delegateMapForListenerID:*(void *)(a1 + 48) service:v10];
  id v17 = *(void **)(a1 + 32);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = sub_1919ECEB4;
  v24[3] = &unk_1E572A468;
  id v18 = v9;
  id v25 = v18;
  [v17 _callDelegatesWithBlock:v24 delegateMap:v16];
  if (*(void *)(a1 + 56))
  {
    id v19 = objc_alloc(MEMORY[0x1E4F59E18]);
    __int16 v20 = v19;
    if (v12)
    {
      uint64_t v21 = (void *)[v19 initWithError:v12];
    }
    else
    {
      __int16 v22 = [v18 objectForKey:v10];
      uint64_t v23 = sub_1919ED05C(v22);
      uint64_t v21 = (void *)[v20 initWithSuccess:v23];
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1919ECEB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v4 = *(void **)(a1 + 32);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1919ECF5C;
    v5[3] = &unk_1E572A440;
    id v6 = v3;
    [v4 enumerateKeysAndObjectsUsingBlock:v5];
  }
}

void sub_1919ECF5C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a2;
  id v7 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v11 = 138412290;
    uint64_t v12 = v8;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Notifying delegate %@ about ID status update", (uint8_t *)&v11, 0xCu);
  }

  id v9 = *(void **)(a1 + 32);
  id v10 = sub_1919ED05C(v5);

  [v9 idStatusUpdatedForDestinations:v10 service:v6];
}

id sub_1919ED05C(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();
        id v10 = objc_msgSend(v3, "objectForKeyedSubscript:", v8, (void)v14);
        if (isKindOfClass)
        {
          int v11 = [v8 prefixedURI];
          [v2 setObject:v10 forKeyedSubscript:v11];
        }
        else
        {
          [v2 setObject:v10 forKeyedSubscript:v8];
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }

  uint64_t v12 = (void *)[v2 copy];

  return v12;
}

void sub_1919ED200(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (*(unsigned char *)(a1 + 48))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v13 = *(NSObject **)(*(void *)(a1 + 32) + 56);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1919ED34C;
    block[3] = &unk_1E572AC08;
    id v19 = *(id *)(a1 + 40);
    id v15 = v9;
    id v16 = v10;
    id v17 = v11;
    id v18 = v12;
    dispatch_async(v13, block);
  }
}

uint64_t sub_1919ED34C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(a1[8] + 16))(a1[8], a1[4], a1[5], a1[6], a1[7]);
}

void sub_1919ED618(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 48))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1919ED6E8;
    v5[3] = &unk_1E5729880;
    uint64_t v4 = *(NSObject **)(a1 + 32);
    id v7 = *(id *)(a1 + 40);
    id v6 = v3;
    dispatch_async(v4, v5);
  }
}

uint64_t sub_1919ED6E8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1919ED820(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v6 = v3;
    if ([v3 state])
    {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, MEMORY[0x1E4F1CC08]);
    }
    else
    {
      uint64_t v5 = [v6 value];
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
    }
    id v3 = v6;
  }
}

void sub_1919EDA84(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 48))
  {
    if (![v3 state])
    {
      uint64_t v5 = [v4 value];
      id v6 = [v5 objectForKey:*(void *)(a1 + 32)];

      if (v6)
      {
        [v6 integerValue];
      }
      else
      {
        id v7 = +[IDSLogging IDQuery];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          uint64_t v8 = IDSLoggableDescriptionForHandleOnService();
          id v9 = [v4 value];
          int v10 = 138412546;
          id v11 = v8;
          __int16 v12 = 2112;
          uint64_t v13 = v9;
          _os_log_error_impl(&dword_19190B000, v7, OS_LOG_TYPE_ERROR, "Destination \"%@\" not found in id query results %@. Verify destination is a properly formed IDS destination (and not just the handle string).", (uint8_t *)&v10, 0x16u);
        }
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1919EDD6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 40))
  {
    if (![v3 state])
    {
      uint64_t v5 = [v4 value];
      id v6 = [v5 objectForKey:*(void *)(a1 + 32)];

      if (v6)
      {
        [v6 integerValue];
      }
      else
      {
        id v7 = +[IDSLogging IDQuery];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_191A411F0((uint64_t *)(a1 + 32), v4, v7);
        }
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1919EDF4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v6 = v3;
    if ([v3 state])
    {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, MEMORY[0x1E4F1CC08]);
    }
    else
    {
      uint64_t v5 = [v6 value];
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
    }
    id v3 = v6;
  }
}

void sub_1919EE138(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    id v3 = [a2 objectForKey:*(void *)(a1 + 32)];
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, [v3 integerValue]);
  }
}

void sub_1919EE3E0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  id v33 = a3;
  id v32 = a4;
  id v29 = a5;
  context = (void *)MEMORY[0x192FE0160]();
  id v9 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id v10 = v8;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v46 objects:v57 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v34 = *(void *)v47;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v47 != v34) {
          objc_enumerationMutation(v10);
        }
        uint64_t v14 = *(void *)(*((void *)&v46 + 1) + 8 * i);
        objc_msgSend(v9, "appendFormat:", @"\n    \"%@\" =     (\n"), v14;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        id v15 = [v10 objectForKeyedSubscript:v14];
        uint64_t v16 = [v15 countByEnumeratingWithState:&v42 objects:v56 count:16];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = *(void *)v43;
          do
          {
            for (uint64_t j = 0; j != v17; ++j)
            {
              if (*(void *)v43 != v18) {
                objc_enumerationMutation(v15);
              }
              __int16 v20 = [*(id *)(*((void *)&v42 + 1) + 8 * j) debugDescription];
              [v9 appendFormat:@"        %@\n", v20];
            }
            uint64_t v17 = [v15 countByEnumeratingWithState:&v42 objects:v56 count:16];
          }
          while (v17);
        }

        [v9 appendString:@"   ;\n"]);
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v46 objects:v57 count:16];
    }
    while (v12);
  }

  uint64_t v21 = +[IDSLogging IDSConnection_oversize];
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412802;
    id v51 = v33;
    __int16 v52 = 2112;
    id v53 = v29;
    __int16 v54 = 2112;
    id v55 = v9;
    _os_log_impl(&dword_19190B000, v21, OS_LOG_TYPE_DEFAULT, "Received results for service: %@ error: %@ updates {%@}", buf, 0x20u);
  }

  __int16 v22 = [*(id *)(a1 + 32) _delegateMapForListenerID:*(void *)(a1 + 40) service:v33];
  uint64_t v23 = *(void **)(a1 + 32);
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 3221225472;
  v40[2] = sub_1919EE7F4;
  v40[3] = &unk_1E572A468;
  id v24 = v10;
  id v41 = v24;
  [v23 _callDelegatesWithBlock:v40 delegateMap:v22];
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = sub_1919EE99C;
  v35[3] = &unk_1E572CEB8;
  id v38 = *(id *)(a1 + 56);
  id v25 = v24;
  id v36 = v25;
  id v39 = *(id *)(a1 + 64);
  id v26 = v29;
  id v37 = v26;
  id v27 = (void (**)(void))MEMORY[0x192FE03B0](v35);
  __int16 v28 = v27;
  if (*(unsigned char *)(a1 + 72)) {
    v27[2](v27);
  }
  else {
    dispatch_async(*(dispatch_queue_t *)(a1 + 48), v27);
  }
}

void sub_1919EE7F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v4 = *(void **)(a1 + 32);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1919EE89C;
    v5[3] = &unk_1E572A440;
    id v6 = v3;
    [v4 enumerateKeysAndObjectsUsingBlock:v5];
  }
}

void sub_1919EE89C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a2;
  id v7 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v11 = 138412290;
    uint64_t v12 = v8;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Notifying delegate %@ about ID status update", (uint8_t *)&v11, 0xCu);
  }

  id v9 = *(void **)(a1 + 32);
  id v10 = sub_1919ED05C(v5);

  [v9 idStatusUpdatedForDestinations:v10 service:v6];
}

void sub_1919EE99C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1 || (uint64_t v1 = *(void *)(a1 + 56)) != 0)
  {
    sub_1919ED05C(*(void **)(a1 + 32));
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t))(v1 + 16))(v1);
  }
}

void sub_1919EEA48(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (*(unsigned char *)(a1 + 48))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v13 = *(NSObject **)(*(void *)(a1 + 32) + 56);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1919EEB94;
    block[3] = &unk_1E572AC08;
    id v19 = *(id *)(a1 + 40);
    id v15 = v9;
    id v16 = v10;
    id v17 = v11;
    id v18 = v12;
    dispatch_async(v13, block);
  }
}

uint64_t sub_1919EEB94(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(a1[8] + 16))(a1[8], a1[4], a1[5], a1[6], a1[7]);
}

void sub_1919EEDBC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(NSObject **)(v11 + 56);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_1919EEF00;
  v16[3] = &unk_1E572CF30;
  id v17 = v9;
  id v18 = v8;
  uint64_t v19 = v11;
  id v20 = *(id *)(a1 + 40);
  id v24 = *(id *)(a1 + 64);
  id v21 = *(id *)(a1 + 48);
  id v22 = v10;
  id v23 = *(id *)(a1 + 56);
  id v13 = v10;
  id v14 = v8;
  id v15 = v9;
  dispatch_async(v12, v16);
}

void sub_1919EEF00(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x192FE0160]();
  id v3 = +[IDSLogging IDSConnection_oversize];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v19 = v4;
    __int16 v20 = 2112;
    uint64_t v21 = v5;
    _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "Received results for service: %@  updates {%@}", buf, 0x16u);
  }

  id v6 = [*(id *)(a1 + 48) _delegateMapForListenerID:*(void *)(a1 + 56) service:*(void *)(a1 + 32)];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_1919EF140;
  v15[3] = &unk_1E572CDA0;
  id v7 = *(void **)(a1 + 48);
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 32);
  [v7 _callDelegatesWithBlock:v15 delegateMap:v6];
  if (*(void *)(a1 + 88))
  {
    if ([*(id *)(a1 + 64) waitForReply])
    {
      uint64_t v8 = *(void *)(a1 + 88);
      id v9 = sub_1919ED05C(*(void **)(a1 + 40));
      (*(void (**)(uint64_t, void *, void))(v8 + 16))(v8, v9, *(void *)(a1 + 72));
    }
    else
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1919EF338;
      block[3] = &unk_1E5729948;
      id v10 = *(NSObject **)(a1 + 80);
      id v14 = *(id *)(a1 + 88);
      id v12 = *(id *)(a1 + 40);
      id v13 = *(id *)(a1 + 72);
      dispatch_async(v10, block);

      id v9 = v14;
    }
  }
}

void sub_1919EF140(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v5 = *(void **)(a1 + 32);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = sub_1919EF298;
    v8[3] = &unk_1E572CF08;
    id v6 = v4;
    id v9 = v6;
    [v5 enumerateKeysAndObjectsUsingBlock:v8];
    id v7 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v11 = v3;
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Notifying delegate %@ about ID status update", buf, 0xCu);
    }

    [v3 idStatusUpdatedForDestinations:v6 service:*(void *)(a1 + 40)];
  }
}

void sub_1919EF298(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = NSNumber;
  id v6 = a2;
  objc_msgSend(v5, "numberWithInteger:", objc_msgSend(a3, "status"));
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = [v6 prefixedURI];

  [v7 setObject:v9 forKeyedSubscript:v8];
}

void sub_1919EF338(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  sub_1919ED05C(*(void **)(a1 + 32));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, *(void *)(a1 + 40));
}

void sub_1919EF578(uint64_t a1, void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v6;
    __int16 v10 = 1024;
    int v11 = [v5 count];
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Received cache for service %@, %d count", (uint8_t *)&v8, 0x12u);
  }

  [*(id *)(a1 + 32) _updateCacheWithDictionary:v5 service:*(void *)(a1 + 40)];
}

void sub_1919EFC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1919EFD28(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!qword_1EB2BD6D0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = sub_1919EFE54;
    void v3[4] = &unk_1E5729360;
    v3[5] = v3;
    long long v4 = xmmword_1E572CFA0;
    uint64_t v5 = 0;
    qword_1EB2BD6D0 = _sl_dlopen();
  }
  if (!qword_1EB2BD6D0) {
    sub_191A412A4(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("KTVerifierResult");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_191A41324();
  }
  qword_1EB2BD6B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1919EFE54()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2BD6D0 = result;
  return result;
}

void sub_1919EFF1C()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2F40];
  uint64_t v1 = (void *)qword_1EB2BD628;
  qword_1EB2BD628 = v0;

  uint64_t v2 = (void *)qword_1EB2BD628;
  id v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  objc_msgSend(v3, "setWithObjects:", v4, v5, objc_opt_class(), 0);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setClasses:v6 forSelector:sel_copyOpportunisticCacheWithBlock_ argumentIndex:0 ofReply:1];
}

void sub_1919F01CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1919F01F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _sendStatsRequestViaDaemon];
}

void sub_1919F1AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1919F2194(uint64_t a1, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = +[IDSLogging IDSDataChannels];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = nw_connection_state_to_string();
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 136315394;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "addDirectConnectionForLinkID connection event %s for %@", (uint8_t *)&v8, 0x16u);
  }

  id v7 = *(void **)(a1 + 40);
  if (a2 == 3)
  {
    [v7 setDirectConnectionReady:1];
    [*(id *)(a1 + 48) reportEvent:*MEMORY[0x1E4F6AF60] forLinkID:*(unsigned __int8 *)(a1 + 64)];
    [*(id *)(a1 + 48) _readFromDirectConnection:*(void *)(a1 + 32) linkID:*(char *)(a1 + 64) linkContext:*(void *)(a1 + 40) connectionInfo:*(void *)(a1 + 56)];
  }
  else
  {
    [v7 setDirectConnectionReady:0];
    if (a2 == 4)
    {
      [*(id *)(a1 + 48) reportEvent:*MEMORY[0x1E4F6AF50] forLinkID:*(unsigned __int8 *)(a1 + 64)];
      [*(id *)(a1 + 48) _removeDirectConnection:*(void *)(a1 + 32)];
      nw_connection_cancel(*(nw_connection_t *)(a1 + 32));
    }
    else if (a2 == 5)
    {
      [*(id *)(a1 + 48) reportEvent:*MEMORY[0x1E4F6AF48] forLinkID:*(unsigned __int8 *)(a1 + 64)];
    }
  }
}

void sub_1919F2920(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a2;
  __int16 v10 = a3;
  id v11 = a5;
  uint64_t v12 = v11;
  if (v9 && !v11)
  {
    buffer_ptr = (void *)0xAAAAAAAAAAAAAAAALL;
    size_t size_ptr = 0xAAAAAAAAAAAAAAAALL;
    dispatch_data_t v13 = dispatch_data_create_map(v9, (const void **)&buffer_ptr, &size_ptr);
    if (!v13)
    {
LABEL_24:
      if (a4) {
        [*(id *)(a1 + 32) _readFromDirectConnection:*(void *)(a1 + 48) linkID:*(char *)(a1 + 64) linkContext:*(void *)(a1 + 40) connectionInfo:*(void *)(a1 + 56)];
      }

      goto LABEL_27;
    }
    uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
    if (v14 && *(unsigned char *)(v14 + 8))
    {
      id v15 = +[IDSLogging IDSDataChannels];
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        if ([*(id *)(a1 + 40) connectionType] == 1) {
          int v16 = 80;
        }
        else {
          int v16 = 82;
        }
        int v17 = *(char *)(a1 + 64);
        uint64_t v23 = *(void *)(a1 + 48);
        size_t v18 = size_ptr;
        sub_1919F2C08((uint64_t)buffer_ptr, size_ptr);
        *(_DWORD *)long long buf = 67110146;
        *(_DWORD *)id v27 = v16;
        *(_WORD *)&v27[4] = 1024;
        *(_DWORD *)&v27[6] = v17;
        *(_WORD *)__int16 v28 = 2048;
        *(void *)&v28[2] = v23;
        __int16 v29 = 2048;
        size_t v30 = v18;
        __int16 v31 = 2080;
        id v32 = byte_1E92DE460;
        _os_log_impl(&dword_19190B000, v15, OS_LOG_TYPE_DEFAULT, " ** direct reading (%c) linkID %d connection <%p> datagram length %zu\npacket:\n%s", buf, 0x2Cu);
      }

      [*(id *)(a1 + 32) _dumpLinkContextConnectionsInfo];
    }
    if (v10)
    {
      uint64_t v19 = nw_protocol_copy_ip_definition();
      __int16 v20 = nw_content_context_copy_protocol_metadata(v10, v19);

      if (!v20)
      {
        unsigned __int8 ecn_flag = 0;
        goto LABEL_23;
      }
      unsigned __int8 ecn_flag = nw_ip_metadata_get_ecn_flag(v20);
    }
    else
    {
      __int16 v20 = +[IDSLogging IDSDataChannels];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19190B000, v20, OS_LOG_TYPE_DEFAULT, "nw_connection_receive_message: Null context", buf, 2u);
      }
      unsigned __int8 ecn_flag = 0;
    }

LABEL_23:
    [*(id *)(a1 + 32) _processIncomingDatagram:buffer_ptr datagramSize:size_ptr linkID:*(char *)(a1 + 64) DSCP:ecn_flag linkContext:*(void *)(a1 + 40) connectionInfo:*(void *)(a1 + 56)];
    goto LABEL_24;
  }
  uint64_t v22 = +[IDSLogging IDSDataChannels];
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    *(void *)id v27 = v12;
    *(_WORD *)&v27[8] = 2112;
    *(void *)__int16 v28 = v9;
    _os_log_impl(&dword_19190B000, v22, OS_LOG_TYPE_DEFAULT, "nw_connection_receive_message in _readFromDirectConnection failed %@ %@", buf, 0x16u);
  }

LABEL_27:
}

uint64_t sub_1919F2C08(uint64_t result, uint64_t a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    uint64_t v4 = 2000;
    if (a2 < 2000) {
      uint64_t v4 = a2;
    }
    while (1)
    {
      unsigned int v5 = *(unsigned __int8 *)(result + v2);
      int v6 = (v5 >> 4) + 87;
      if (v5 < 0xA0) {
        LOBYTE(v6) = (*(unsigned char *)(result + v2) >> 4) | 0x30;
      }
      unsigned int v7 = v5 & 0xF;
      char v8 = v5 & 0xF | 0x30;
      char v9 = (v5 & 0xF) + 87;
      char v10 = v7 >= 0xA ? v9 : v8;
      id v11 = &byte_1E92DE460[v3];
      *id v11 = v6;
      uint64_t v12 = v3 + 2;
      v11[1] = v10;
      if ((~v2 & 0xF) == 0) {
        break;
      }
      if (v2)
      {
        char v13 = 32;
        goto LABEL_13;
      }
LABEL_14:
      ++v2;
      int v3 = v12;
      if (v4 == v2) {
        goto LABEL_17;
      }
    }
    char v13 = 10;
LABEL_13:
    byte_1E92DE460[v12] = v13;
    LODWORD(v12) = v3 + 3;
    goto LABEL_14;
  }
  LODWORD(v12) = 0u;
LABEL_17:
  byte_1E92DE460[(int)v12] = 0;
  return result;
}

void sub_1919F353C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

nw_protocol_metadata_t sub_1919F39E4(int a1, int a2)
{
  if (a1 > 699)
  {
    switch(a1)
    {
      case 700:
        int v3 = &qword_1E92DFBE8;
        nw_protocol_metadata_t v4 = (nw_protocol_metadata_t)qword_1E92DFBE8;
        if (qword_1E92DFBE8) {
          goto LABEL_19;
        }
        nw_service_class_t v5 = nw_service_class_interactive_video;
        goto LABEL_18;
      case 800:
        int v3 = &qword_1E92DFBF0;
        nw_protocol_metadata_t v4 = (nw_protocol_metadata_t)qword_1E92DFBF0;
        if (qword_1E92DFBF0) {
          goto LABEL_19;
        }
        nw_service_class_t v5 = nw_service_class_interactive_voice;
LABEL_18:
        nw_protocol_metadata_t metadata = nw_ip_create_metadata();
        nw_protocol_metadata_t v7 = (nw_protocol_metadata_t)*v3;
        uint64_t *v3 = (uint64_t)metadata;

        nw_ip_metadata_set_service_class((nw_protocol_metadata_t)*v3, v5);
        nw_protocol_metadata_t v4 = (nw_protocol_metadata_t)*v3;
LABEL_19:
        char v8 = v4;
        nw_protocol_metadata_t v9 = v8;
        if (!a2)
        {
          if (!v8) {
            goto LABEL_28;
          }
          nw_ip_ecn_flag_t v10 = nw_ip_ecn_flag_non_ect;
          goto LABEL_27;
        }
        if (v8)
        {
LABEL_26:
          nw_ip_ecn_flag_t v10 = a2 & 3;
          char v8 = v9;
LABEL_27:
          nw_ip_metadata_set_ecn_flag(v8, v10);
          goto LABEL_28;
        }
LABEL_25:
        nw_protocol_metadata_t v9 = nw_ip_create_metadata();
        goto LABEL_26;
      case 900:
        int v3 = &qword_1E92DFBF8;
        nw_protocol_metadata_t v4 = (nw_protocol_metadata_t)qword_1E92DFBF8;
        if (qword_1E92DFBF8) {
          goto LABEL_19;
        }
        nw_service_class_t v5 = nw_service_class_signaling;
        goto LABEL_18;
    }
  }
  else
  {
    if (a1 == 100 || a1 == 200)
    {
      int v3 = &qword_1E92DFBD8;
      nw_protocol_metadata_t v4 = (nw_protocol_metadata_t)qword_1E92DFBD8;
      if (qword_1E92DFBD8) {
        goto LABEL_19;
      }
      nw_service_class_t v5 = nw_service_class_background;
      goto LABEL_18;
    }
    if (a1 == 600)
    {
      int v3 = &qword_1E92DFBE0;
      nw_protocol_metadata_t v4 = (nw_protocol_metadata_t)qword_1E92DFBE0;
      if (qword_1E92DFBE0) {
        goto LABEL_19;
      }
      nw_service_class_t v5 = nw_service_class_responsive_data;
      goto LABEL_18;
    }
  }
  if (a2) {
    goto LABEL_25;
  }
  nw_protocol_metadata_t v9 = 0;
LABEL_28:

  return v9;
}

void sub_1919F3B30(uint64_t a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v3 = a2;
  nw_protocol_metadata_t v4 = v3;
  if (v3) {
    uint64_t error_code = nw_error_get_error_code(v3);
  }
  else {
    uint64_t error_code = 0;
  }
  objc_msgSend(*(id *)(a1 + 32), "setTotalPacketsSentOnLink:", objc_msgSend(*(id *)(a1 + 32), "totalPacketsSentOnLink") + 1);
  if (error_code)
  {
    int v6 = +[IDSLogging IDSDataChannels];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)uint64_t v40 = 1;
      *(_WORD *)&void v40[4] = 1024;
      *(_DWORD *)&v40[6] = v7;
      *(_WORD *)id v41 = 1024;
      *(_DWORD *)&v41[2] = error_code;
      char v8 = "DCW failed for %d packet(s), %uB (%d).";
      nw_protocol_metadata_t v9 = v6;
      uint32_t v10 = 20;
LABEL_26:
      _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    }
  }
  else
  {
    if (([*(id *)(a1 + 32) hasSentPacket] & 1) == 0)
    {
      [*(id *)(a1 + 32) setHasSentPacket:1];
      [*(id *)(a1 + 40) reportEvent:*MEMORY[0x1E4F6AF68] forLinkID:*(unsigned __int8 *)(a1 + 92)];
    }
    ids_monotonic_time();
    objc_msgSend(*(id *)(a1 + 32), "setLastPacketSentTime:");
    [*(id *)(a1 + 40) _reportLinkMetricsForLinkContext:*(void *)(a1 + 32)];
    int v11 = [*(id *)(a1 + 32) delegatedLinkID];
    int v6 = +[IDSLogging IDSDataChannels];
    BOOL v12 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      if (v12)
      {
        int v13 = *(_DWORD *)(a1 + 88);
        unint64_t v14 = [*(id *)(a1 + 32) connectionType] - 1;
        if (v14 > 3) {
          int v15 = 63;
        }
        else {
          int v15 = dword_191A524C0[v14];
        }
        int v19 = [*(id *)(a1 + 32) linkID];
        int v20 = [*(id *)(a1 + 32) delegatedLinkID];
        if (*(unsigned char *)(a1 + 93)) {
          uint64_t v21 = "qpod";
        }
        else {
          uint64_t v21 = "udp";
        }
        *(_DWORD *)long long buf = 67110658;
        *(_DWORD *)uint64_t v40 = v13;
        *(_WORD *)&void v40[4] = 1024;
        *(_DWORD *)&v40[6] = 1;
        *(_WORD *)id v41 = 1024;
        *(_DWORD *)&v41[2] = v15;
        *(_WORD *)&v41[6] = 1024;
        *(_DWORD *)&v41[8] = v19;
        *(_WORD *)&v41[12] = 1024;
        *(_DWORD *)&v41[14] = v20;
        *(_WORD *)&v41[18] = 2080;
        *(void *)&v41[20] = v21;
        *(_WORD *)&v41[28] = 2048;
        *(void *)&v41[30] = nw_connection_get_id();
        char v8 = "DCW %uB/%1d (%c %d/%d — %s [C%llu])";
        nw_protocol_metadata_t v9 = v6;
        uint32_t v10 = 52;
        goto LABEL_26;
      }
    }
    else if (v12)
    {
      int v16 = *(_DWORD *)(a1 + 88);
      unint64_t v17 = [*(id *)(a1 + 32) connectionType] - 1;
      if (v17 > 3) {
        int v18 = 63;
      }
      else {
        int v18 = dword_191A524C0[v17];
      }
      int v22 = [*(id *)(a1 + 32) linkID];
      if (*(unsigned char *)(a1 + 93)) {
        uint64_t v23 = "qpod";
      }
      else {
        uint64_t v23 = "udp";
      }
      *(_DWORD *)long long buf = 67110402;
      *(_DWORD *)uint64_t v40 = v16;
      *(_WORD *)&void v40[4] = 1024;
      *(_DWORD *)&v40[6] = 1;
      *(_WORD *)id v41 = 1024;
      *(_DWORD *)&v41[2] = v18;
      *(_WORD *)&v41[6] = 1024;
      *(_DWORD *)&v41[8] = v22;
      *(_WORD *)&v41[12] = 2080;
      *(void *)&v41[14] = v23;
      *(_WORD *)&v41[22] = 2048;
      *(void *)&v41[24] = nw_connection_get_id();
      char v8 = "DCW %uB/%1d (%c %d — %s [C%llu])";
      nw_protocol_metadata_t v9 = v6;
      uint32_t v10 = 46;
      goto LABEL_26;
    }
  }

  uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v24 && *(unsigned char *)(v24 + 8))
  {
    id v25 = +[IDSLogging IDSDataChannels];
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      if ([*(id *)(a1 + 32) connectionType] == 1) {
        int v26 = 80;
      }
      else {
        int v26 = 82;
      }
      int v27 = *(char *)(a1 + 92);
      uint64_t v28 = *(void *)(a1 + 48);
      int v29 = *(_DWORD *)(a1 + 88);
      sub_1919F2C08(**(void **)(a1 + 80), *(void *)(*(void *)(a1 + 80) + 16));
      *(_DWORD *)long long buf = 67110402;
      *(_DWORD *)uint64_t v40 = v26;
      *(_WORD *)&void v40[4] = 1024;
      *(_DWORD *)&v40[6] = v27;
      *(_WORD *)id v41 = 2048;
      *(void *)&v41[2] = v28;
      *(_WORD *)&v41[10] = 1024;
      *(_DWORD *)&v41[12] = error_code;
      *(_WORD *)&v41[16] = 1024;
      *(_DWORD *)&v41[18] = v29;
      *(_WORD *)&v41[22] = 2080;
      *(void *)&v41[24] = byte_1E92DE460;
      _os_log_impl(&dword_19190B000, v25, OS_LOG_TYPE_DEFAULT, " ** direct write (%c) linkID %d connection <%p> error %d datagram length %u\npacket:\n%s", buf, 0x2Eu);
    }

    [*(id *)(a1 + 40) _dumpLinkContextConnectionsInfo];
  }
  if (v4)
  {
    size_t v30 = +[IDSLogging IDSDataChannels];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(void *)(a1 + 40);
      id v32 = (void *)MEMORY[0x192FE03B0](*(void *)(a1 + 64));
      *(_DWORD *)long long buf = 138412802;
      *(void *)uint64_t v40 = v31;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)id v41 = error_code;
      *(_WORD *)&v41[4] = 2048;
      *(void *)&v41[6] = v32;
      _os_log_impl(&dword_19190B000, v30, OS_LOG_TYPE_DEFAULT, "<%@> direct write failed error_number %d calling completion handler %p", buf, 0x1Cu);
    }
    uint64_t v33 = objc_msgSend([NSString alloc], "initWithFormat:", @"Failed to send write bytes (%d)", error_code);
    id v34 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    uint64_t v35 = objc_msgSend(v34, "initWithObjectsAndKeys:", v33, *MEMORY[0x1E4F28568], 0);
    id v36 = objc_alloc(MEMORY[0x1E4F28C58]);
    id v37 = (void *)[v36 initWithDomain:*MEMORY[0x1E4F6ACF0] code:6 userInfo:v35];
  }
  else
  {
    [*(id *)(a1 + 40) _logSendingStats:*(unsigned int *)(a1 + 88)];
    id v37 = 0;
  }
  uint64_t v38 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v38 && !*(unsigned char *)(v38 + 68)) {
    sub_19198300C(*(void **)(a1 + 64), *(void **)(a1 + 72), v37, *(unsigned int *)(a1 + 88));
  }
}

void sub_1919F59A4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t sub_1919F5CA0(uint64_t a1)
{
  uint64_t v2 = [[_IDSDevice alloc] initWithDictionary:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F5E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F5EB0(uint64_t a1)
{
  return [*(id *)(a1 + 32) cancel];
}

id sub_1919F5EB8()
{
  return self;
}

void sub_1919F5FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F600C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) fullDescription];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F616C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F6184(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) compactDescription];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F62E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F62FC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) description];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F645C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F6474(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) uniqueID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F65D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F65EC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) uniqueIDOverride];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F674C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F6764(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) productVersion];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F68C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F68DC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) productName];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F6A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F6A54(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) productBuildVersion];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F6C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F6C1C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) modelIdentifier];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F6D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F6D94(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) name];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F6EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F6F0C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) service];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F702C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F7044(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) isNearby];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F714C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F7164(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) isConnected];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F726C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F7284(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) isCloudConnected];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F738C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F73A4(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) locallyPresent];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F74AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F74C4(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) isDefaultPairedDevice];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F75CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F75E4(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) isLocallyPaired];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F76EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F7704(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) isActive];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F784C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F7864(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) capabilities];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F7984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F799C(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) relationship];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F7AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F7ABC(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) isHSATrusted];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F7C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F7C2C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) linkedUserURIs];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_1919F7D34(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_setNSUUID_);
}

void sub_1919F7E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F7E68(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) nsuuid];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F7FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F7FE0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) stableBluetoothIdentifier];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F8100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F8118(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) supportsiCloudPairing];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F8220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F8238(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) supportsTethering];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F8340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F8358(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) supportsHandoff];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F8460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F8478(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) supportsApplePay];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F8580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F8598(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) supportsSMSRelay];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F86A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F86B8(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) supportsMMSRelay];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F87C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F87D8(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) supportsPhoneCalls];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F88E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F88F8(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) deviceType];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F8A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F8A58(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) deviceColor];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F8BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F8BD0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) enclosureColor];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F8D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F8D48(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) lastActivityDate];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F8EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F8EC0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) pushToken];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_1919F9020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F9038(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) identities];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_1919F9140(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) _addIdentity:*(void *)(a1 + 40)];
}

void sub_1919F921C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F9234(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) pairingProtocolVersion];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F933C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F9354(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) minCompatibilityVersion];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F945C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F9474(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) maxCompatibilityVersion];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1919F957C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1919F9594(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) serviceMinCompatibilityVersion];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1919F9684(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) _setAccount:*(void *)(a1 + 40)];
}

uint64_t sub_1919F9748(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) _setService:*(void *)(a1 + 40)];
}

void sub_1919FA6D0()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v1 = dispatch_queue_attr_make_initially_inactive(v0);
  dispatch_queue_t v2 = dispatch_queue_create("IDSDataChannelsRealTimeQueue", v1);
  uint64_t v3 = (void *)qword_1E92DFC08;
  qword_1E92DFC08 = (uint64_t)v2;

  uint64_t v4 = IDSRealTimeContext();
  nw_queue_context_target_dispatch_queue();

  nw_service_class_t v5 = qword_1E92DFC08;

  dispatch_activate(v5);
}

void sub_1919FA8A4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1919FA9DC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1919FAA8C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1919FAB60(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1919FB9F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1919FBA30(uint64_t a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = +[IDSTransportLog IDSDataChannels];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "nw_path_evaluator_set_update_handler called update handler with path %@", buf, 0xCu);
  }

  memset(src, 170, sizeof(src));
  int v36 = 0;
  int nexus_instance = nw_path_get_nexus_instance();
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  if (nexus_instance)
  {
    int is_null = uuid_is_null((const unsigned __int8 *)(v6 + 160));
    char v8 = (unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 160);
    if (is_null)
    {
      uuid_copy(v8, src);
    }
    else if (uuid_compare(v8, src))
    {
      int v19 = +[IDSTransportLog IDSDataChannels];
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_impl(&dword_19190B000, v19, OS_LOG_TYPE_DEFAULT, "%@: close due to the new ids instance.", buf, 0xCu);
      }

      uint64_t v21 = *(void **)(a1 + 32);
      uint64_t v22 = v21[1];
      if (*(unsigned char *)(v22 + 116))
      {
        uint64_t v31 = MEMORY[0x1E4F143A8];
        uint64_t v32 = 3221225472;
        uint64_t v33 = sub_1919FC114;
        id v34 = &unk_1E572D1A0;
        uint64_t v35 = v21;
        IDSTransportThreadAddBlock();
      }
      else
      {
        uint64_t v25 = *(void *)(v22 + 16);
        if (v25)
        {
          v40[0] = @"event-type";
          v40[1] = @"connected-link";
          v41[0] = &unk_1EE28B3E8;
          int v26 = [v21 connectedLinks];
          v41[1] = v26;
          int v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v41 forKeys:v40 count:2];
          (*(void (**)(uint64_t, void *))(v25 + 16))(v25, v27);

          uint64_t v21 = *(void **)(a1 + 32);
        }
        [v21 close];
      }
      goto LABEL_48;
    }
    if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 136))
    {
      nw_protocol_metadata_t v9 = +[IDSLogging IDSDataChannels];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "nw_path_get_nexus_instance returned yes", buf, 2u);
      }

      *(_DWORD *)size_t v30 = 0;
      nw_path_get_nexus_key();
      if (os_channel_attr_create())
      {
        os_channel_attr_set_key();
        os_channel_attr_set();
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 136) = os_channel_create_extended();
        os_channel_attr_destroy();
        if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 136))
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 120) = os_channel_get_fd();
          os_channel_ring_id();
          uint64_t v10 = os_channel_rx_ring();
          os_channel_ring_id();
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 144) = os_channel_tx_ring();
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 152) = v10;
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = 1;
          int v11 = +[IDSTransportLog IDSDataChannels];
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = *(void *)(a1 + 32);
            uint64_t v13 = *(void *)(v12 + 8);
            uint64_t v14 = *(void *)(v13 + 136);
            LODWORD(v13) = *(_DWORD *)(v13 + 120);
            *(_DWORD *)long long buf = 134218498;
            *(void *)&uint8_t buf[4] = v14;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v13;
            __int16 v38 = 2112;
            uint64_t v39 = v12;
            _os_log_impl(&dword_19190B000, v11, OS_LOG_TYPE_DEFAULT, "_internal->_osChannel %p channelFD_get %d %@", buf, 0x1Cu);
          }

          if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 118))
          {
            IDSTransportThreadInit();
            id v29 = *(id *)(a1 + 32);
            IDSTransportThreadAddBlock();
          }
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
          goto LABEL_47;
        }
        uint64_t v23 = +[IDSTransportLog IDSDataChannels];
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          uint64_t v24 = "os_channel_create failed";
          uint64_t v28 = buf;
LABEL_45:
          _os_log_impl(&dword_19190B000, v23, OS_LOG_TYPE_DEFAULT, v24, v28, 2u);
        }
LABEL_46:

        nw_path_evaluator_cancel();
LABEL_47:
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
        goto LABEL_48;
      }
      int v16 = +[IDSLogging IDSDataChannels];
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      *(_WORD *)long long buf = 0;
      unint64_t v17 = "initWithDestination: os_channel_attr_create failed";
      int v18 = buf;
      goto LABEL_33;
    }
  }
  else if (!*(void *)(v6 + 136))
  {
    int v15 = +[IDSLogging IDSDataChannels];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_19190B000, v15, OS_LOG_TYPE_DEFAULT, "nw_path_get_nexus_instance returned no", buf, 2u);
    }

    memset(buf, 170, 16);
    nw_path_get_nexus_agent_uuid();
    if (nw_path_assert_agent())
    {
      if (nw_path_uses_nexus())
      {
        if (nw_path_request_nexus())
        {
          int v16 = +[IDSLogging IDSDataChannels];
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
LABEL_34:

            goto LABEL_48;
          }
          *(_WORD *)size_t v30 = 0;
          unint64_t v17 = "nw_path_request_nexus succeeded";
          int v18 = v30;
LABEL_33:
          _os_log_impl(&dword_19190B000, v16, OS_LOG_TYPE_DEFAULT, v17, v18, 2u);
          goto LABEL_34;
        }
        uint64_t v23 = +[IDSTransportLog IDSDataChannels];
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_46;
        }
        *(_WORD *)size_t v30 = 0;
        uint64_t v24 = "nw_path_request_nexus failed - cannot recover";
      }
      else
      {
        uint64_t v23 = +[IDSTransportLog IDSDataChannels];
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_46;
        }
        *(_WORD *)size_t v30 = 0;
        uint64_t v24 = "nw_path_uses_nexus failed - cannot recover";
      }
    }
    else
    {
      uint64_t v23 = +[IDSTransportLog IDSDataChannels];
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_46;
      }
      *(_WORD *)size_t v30 = 0;
      uint64_t v24 = "nw_path_assert_agent failed";
    }
    uint64_t v28 = v30;
    goto LABEL_45;
  }
LABEL_48:
}

uint64_t sub_1919FC114(uint64_t a1)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(v2[1] + 16);
  if (v3)
  {
    v7[0] = @"event-type";
    v7[1] = @"connected-link";
    v8[0] = &unk_1EE28B3E8;
    uint64_t v4 = [v2 connectedLinks];
    v8[1] = v4;
    nw_service_class_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:2];
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

    dispatch_queue_t v2 = *(void **)(a1 + 32);
  }
  return [v2 close];
}

void sub_1919FC1F4(uint64_t a1)
{
  id v3 = *(id *)(a1 + 32);
  id v2 = *(id *)(a1 + 32);
  IDSTransportThreadAddSocket();
}

uint64_t sub_1919FC2E4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  if (*(unsigned char *)(v2[1] + 8))
  {
    id v3 = +[IDSTransportLog IDSDataChannels];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v4;
      _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "readable for %@", (uint8_t *)&v6, 0xCu);
    }

    id v2 = *(void **)(a1 + 32);
  }
  return [v2 scheduleRead];
}

void sub_1919FC3AC(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 8) + 52));
  id v2 = *(void **)(a1 + 32);
  if (*(unsigned char *)(v2[1] + 8))
  {
    id v3 = +[IDSTransportLog IDSDataChannels];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "writable for %@", (uint8_t *)&v5, 0xCu);
    }

    id v2 = *(void **)(a1 + 32);
  }
  [v2 sendMetadata];
  IDSTransportThreadSuspendSocket();
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 8) + 52));
}

double sub_1919FC4A8()
{
  if (qword_1E92DFC18 != -1) {
    dispatch_once(&qword_1E92DFC18, &unk_1EE2470C8);
  }
  return *(double *)&qword_1E92DFC20 * (double)mach_continuous_time();
}

void sub_191A04074(_Unwind_Exception *a1)
{
}

void sub_191A04360(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_191A047AC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) setObject:v5 forKey:v7];
  uint64_t v6 = [*(id *)(a1 + 32) objectForKey:v5];

  if (!v6) {
    [*(id *)(a1 + 32) setObject:v7 forKey:v5];
  }
}

void sub_191A050EC(uint64_t a1, id *a2, int a3, int a4)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  locuint64_t k = (os_unfair_lock_s *)(*(void *)(*(void *)(a1 + 32) + 8) + 56);
  os_unfair_lock_lock(lock);
  if (!a3)
  {
    int v18 = +[IDSLogging IDSDataChannels];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = (void *)MEMORY[0x192FE03B0](*(void *)(*(void *)(v19 + 8) + 16));
      *(_DWORD *)long long buf = 138412802;
      *(void *)id v29 = v19;
      *(_WORD *)&v29[8] = 1024;
      *(_DWORD *)&v29[10] = a4;
      __int16 v30 = 2048;
      size_t v31 = (size_t)v20;
      _os_log_impl(&dword_19190B000, v18, OS_LOG_TYPE_DEFAULT, "<%@> read failed %d due to datagram_count 0 - calling event handler %p", buf, 0x1Cu);
    }
    uint64_t v21 = *(void **)(a1 + 32);
    uint64_t v22 = *(void *)(v21[1] + 16);
    if (v22)
    {
      v34[0] = @"event-type";
      v34[1] = @"connected-link";
      v35[0] = &unk_1EE28B3E8;
      uint64_t v23 = [v21 connectedLinks];
      v35[1] = v23;
      uint64_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:v34 count:2];
      (*(void (**)(uint64_t, void *))(v22 + 16))(v22, v24);

      uint64_t v21 = *(void **)(a1 + 32);
    }
    [v21 close];
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v10 = *a2;
    buffer_ptr = (void *)0xAAAAAAAAAAAAAAAALL;
    size_t size_ptr = 0xAAAAAAAAAAAAAAAALL;
    dispatch_data_t v11 = dispatch_data_create_map(v10, (const void **)&buffer_ptr, &size_ptr);
    uint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = v12[1];
    if (*(unsigned char *)(v13 + 8))
    {
      uint64_t v14 = +[IDSLogging IDSDataChannels];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 112);
        *(_DWORD *)long long buf = 67109888;
        *(_DWORD *)id v29 = a3;
        *(_WORD *)&v29[4] = 2048;
        *(void *)&v29[6] = buffer_ptr;
        __int16 v30 = 2048;
        size_t v31 = size_ptr;
        __int16 v32 = 1024;
        int v33 = v15;
        _os_log_impl(&dword_19190B000, v14, OS_LOG_TYPE_DEFAULT, " ** reading %u packets remaining: mapped %p length %zu hasMetadata %u", buf, 0x22u);
      }

      uint64_t v12 = *(void **)(a1 + 32);
      uint64_t v13 = v12[1];
    }
    if (!*(unsigned char *)(v13 + 112))
    {
      [v12 _logReceivingStats:size_ptr];
      uint64_t v16 = *(void *)(a1 + 64);
      if (v16)
      {
        v4 &= 0xFFFFFFFFFFFF0000;
        (*(void (**)(uint64_t, void *, void, void, uint64_t, void))(v16 + 16))(v16, buffer_ptr, size_ptr, 0, v4, 0);
      }
      else
      {
        v5 &= 0xFFFFFFFFFFFF0000;
        (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
      }
      goto LABEL_12;
    }
    if (([v12 processDatagram:buffer_ptr datagramSize:size_ptr readHandler:*(void *)(a1 + 48) readHandlerWithOptions:*(void *)(a1 + 56)] & 1) == 0)break; {
LABEL_12:
    }
    id v17 = self;

    ++a2;
    if (!--a3) {
      goto LABEL_19;
    }
  }

LABEL_19:
  [*(id *)(a1 + 32) readFromNWConnection:*(void *)(a1 + 40) maximumDatagrams:*(unsigned int *)(a1 + 80) readHandler:*(void *)(a1 + 64) readHandlerWithOptions:*(void *)(a1 + 72)];
LABEL_20:
  os_unfair_lock_unlock(lock);
}

void sub_191A0541C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
}

void sub_191A057DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock)
{
}

void sub_191A05C64(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_191A0606C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) != -1) {
    IDSTransportThreadRemoveSocket();
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    return os_channel_destroy();
  }
  return result;
}

void sub_191A06488(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 8) + 52));
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(void *)(v2 + 136))
  {
    IDSTransportThreadInit();
    IDSTransportThreadAddBlock();
  }
  else
  {
    *(unsigned char *)(v2 + 118) = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 8) + 52));
}

uint64_t sub_191A06544()
{
  return IDSTransportThreadAddSocket();
}

uint64_t sub_191A065F4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if (*(unsigned char *)(v2[1] + 8))
  {
    id v3 = +[IDSTransportLog IDSDataChannels];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v4;
      _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "readable for %@", (uint8_t *)&v6, 0xCu);
    }

    uint64_t v2 = *(void **)(a1 + 32);
  }
  return [v2 scheduleRead];
}

void sub_191A066BC(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 8) + 52));
  uint64_t v2 = *(void **)(a1 + 32);
  if (*(unsigned char *)(v2[1] + 8))
  {
    id v3 = +[IDSTransportLog IDSDataChannels];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl(&dword_19190B000, v3, OS_LOG_TYPE_DEFAULT, "writable for %@", (uint8_t *)&v5, 0xCu);
    }

    uint64_t v2 = *(void **)(a1 + 32);
  }
  [v2 sendMetadata];
  IDSTransportThreadSuspendSocket();
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 8) + 52));
}

void sub_191A06918(uint64_t a1, int a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2)
  {
    if (a2 == 3)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = 1;
      uint64_t v6 = +[IDSLogging IDSDataChannels];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = (void *)MEMORY[0x192FE03B0](*(void *)(*(void *)(v7 + 8) + 16));
        *(_DWORD *)long long buf = 138412546;
        uint64_t v28 = v7;
        __int16 v29 = 2048;
        id v30 = v8;
        _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "<%@> got event connected and calls event handler %p", buf, 0x16u);
      }
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 8) + 52));
      [*(id *)(a1 + 32) sendMetadata];
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 8) + 52));
      [*(id *)(a1 + 32) scheduleRead];
      goto LABEL_16;
    }
    if ((a2 & 0xFFFFFFFE) == 4)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = 0;
      int v18 = +[IDSLogging IDSDataChannels];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v20 = (void *)MEMORY[0x192FE03B0](*(void *)(*(void *)(v19 + 8) + 16));
        *(_DWORD *)long long buf = 138412802;
        uint64_t v28 = v19;
        __int16 v29 = 2112;
        id v30 = v5;
        __int16 v31 = 2048;
        __int16 v32 = v20;
        _os_log_impl(&dword_19190B000, v18, OS_LOG_TYPE_DEFAULT, "<%@> got event disconnected with error %@ and calls event handler %p", buf, 0x20u);
      }
      uint64_t v21 = *(void **)(a1 + 32);
      uint64_t v13 = *(void *)(v21[1] + 16);
      if (v13)
      {
        uint64_t v14 = objc_msgSend(v21, "connectedLinks", @"event-type", @"connected-link", &unk_1EE28B3E8);
        v24[1] = v14;
        int v15 = (void *)MEMORY[0x1E4F1C9E8];
        uint64_t v16 = v24;
        id v17 = &v23;
        goto LABEL_15;
      }
    }
  }
  else
  {
    nw_protocol_metadata_t v9 = +[IDSLogging IDSDataChannels];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      dispatch_data_t v11 = (void *)MEMORY[0x192FE03B0](*(void *)(*(void *)(v10 + 8) + 16));
      *(_DWORD *)long long buf = 138412802;
      uint64_t v28 = v10;
      __int16 v29 = 2112;
      id v30 = v5;
      __int16 v31 = 2048;
      __int16 v32 = v11;
      _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "<%@> got event error %@ and calls event handler %p", buf, 0x20u);
    }
    uint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = *(void *)(v12[1] + 16);
    if (v13)
    {
      v25[0] = @"event-type";
      v25[1] = @"connected-link";
      v26[0] = &unk_1EE28B5E0;
      uint64_t v14 = [v12 connectedLinks];
      v26[1] = v14;
      int v15 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v16 = v26;
      id v17 = v25;
LABEL_15:
      uint64_t v22 = [v15 dictionaryWithObjects:v16 forKeys:v17 count:2];
      (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v22);
    }
  }
LABEL_16:
}

void sub_191A078A4(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    uint64_t error_code = nw_error_get_error_code(v3);
  }
  else {
    uint64_t error_code = 0;
  }
  if (qword_1E92DFC18 != -1) {
    dispatch_once(&qword_1E92DFC18, &unk_1EE2470C8);
  }
  uint64_t v6 = mach_continuous_time();
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 8))
  {
    unint64_t v7 = v6;
    double v8 = *(double *)&qword_1E92DFC20;
    nw_protocol_metadata_t v9 = +[IDSLogging IDSDataChannels];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = v8 * (double)v7;
      int v11 = *(char *)(a1 + 76);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = (void *)MEMORY[0x192FE03B0](*(void *)(a1 + 40));
      double v14 = *(double *)(a1 + 56);
      double v15 = v14 - *(double *)(a1 + 64);
      *(_DWORD *)long long buf = 138413826;
      uint64_t v26 = v12;
      __int16 v27 = 1024;
      int v28 = v11;
      __int16 v29 = 1024;
      *(_DWORD *)id v30 = error_code;
      *(_WORD *)&uint8_t v30[4] = 2048;
      *(void *)&v30[6] = v13;
      __int16 v31 = 2048;
      double v32 = v15;
      __int16 v33 = 2048;
      double v34 = v10 - v14;
      __int16 v35 = 2048;
      double v36 = v10;
      _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "<%@> write linkID %d error_number %d calling completion handler %p dataCreateTime %0.6lf writeTime %0.6lf [%013.6lf]", buf, 0x40u);
    }
  }
  if (v4)
  {
    uint64_t v16 = +[IDSLogging IDSDataChannels];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v18 = (void *)MEMORY[0x192FE03B0](*(void *)(a1 + 40));
      *(_DWORD *)long long buf = 138412802;
      uint64_t v26 = v17;
      __int16 v27 = 1024;
      int v28 = error_code;
      __int16 v29 = 2048;
      *(void *)id v30 = v18;
      _os_log_impl(&dword_19190B000, v16, OS_LOG_TYPE_DEFAULT, "<%@> write failed error_number %d calling completion handler %p", buf, 0x1Cu);
    }
    uint64_t v19 = objc_msgSend([NSString alloc], "initWithFormat:", @"Failed to send write bytes (%d)", error_code);
    id v20 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    uint64_t v21 = objc_msgSend(v20, "initWithObjectsAndKeys:", v19, *MEMORY[0x1E4F28568], 0);
    id v22 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v23 = (void *)[v22 initWithDomain:*MEMORY[0x1E4F6ACF0] code:6 userInfo:v21];
  }
  else
  {
    [*(id *)(a1 + 32) _logSendingStats:*(unsigned int *)(a1 + 72)];
    uint64_t v23 = 0;
  }
  uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v24 && !*(unsigned char *)(v24 + 68)) {
    sub_19198300C(*(void **)(a1 + 40), *(void **)(a1 + 48), v23, *(unsigned int *)(a1 + 72));
  }
}

uint64_t sub_191A07E28(uint64_t a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = (*(_DWORD *)(a1 + 88) - 1);
    if (v4 == v5) {
      uint64_t v6 = *(void *)(a1 + 48);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(a1 + 72) + v3;
    unint64_t v1 = v1 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)(v7 + 8);
    uint64_t result = objc_msgSend(*(id *)(a1 + 32), "_writeToNWConnection:datagram:datagramSize:currentDatagramCount:totalDatagramCount:datagramInfo:datagramOptions:completionHandler:", *(void *)(a1 + 40), *(void *)(*(void *)(a1 + 56) + 8 * v4), *(unsigned int *)(*(void *)(a1 + 64) + 4 * v4), v4, *(_DWORD *)(a1 + 88), *(void *)v7, v1, *(void *)(*(void *)(a1 + 80) + 8 * v4), v6);
    v3 += 10;
  }
  while (v4++ != v5);
  return result;
}

void sub_191A093F4(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    uint64_t error_code = nw_error_get_error_code(v3);
  }
  else {
    uint64_t error_code = 0;
  }
  uint64_t v6 = +[IDSLogging IDSDataChannels];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v22 = v7;
    __int16 v23 = 1024;
    int v24 = error_code;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "<%@> write error_number %d calling setChannelPreferences", buf, 0x12u);
  }

  if (v4)
  {
    double v8 = +[IDSLogging IDSDataChannels];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v22 = v9;
      __int16 v23 = 1024;
      int v24 = error_code;
      _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "<%@> write failed error_number %d calling setChannelPreferences", buf, 0x12u);
    }

    double v10 = objc_msgSend([NSString alloc], "initWithFormat:", @"Failed to send write bytes (%d)", error_code);
    id v11 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    uint64_t v12 = objc_msgSend(v11, "initWithObjectsAndKeys:", v10, *MEMORY[0x1E4F28568], 0);
    id v13 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v14 = [v13 initWithDomain:*MEMORY[0x1E4F6ACF0] code:6 userInfo:v12];
    double v15 = (void *)v14;
    uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 16);
    if (v16)
    {
      v19[0] = @"event-type";
      v19[1] = @"error-key";
      v20[0] = &unk_1EE28B5E0;
      v20[1] = v14;
      uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:v19 count:2];
      (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v17);
    }
  }
  else
  {
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 8)) {
      goto LABEL_13;
    }
    double v10 = +[IDSLogging IDSDataChannels];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v22 = v18;
      _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "<%@> write done for setChannelPreferences", buf, 0xCu);
    }
  }

LABEL_13:
}

uint64_t sub_191A0C6D0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__reportMKIArrival_time_isLocallyGenerated_);
}

uint64_t sub_191A0C9AC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__reportFirstIncomingPacketTimeForMKI_time_participantID_);
}

uint64_t sub_191A0CC88(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__reportFirstOutgoingPacketTimeForMKI_time_participantID_);
}

uint64_t IDSEstimateAdditionalOverheadForDatagramOptions(unsigned int *a1)
{
  if (*((unsigned char *)a1 + 80) || *((unsigned char *)a1 + 112) || *((unsigned char *)a1 + 113) || (unsigned int v1 = *a1, (*a1 & 0x30000) != 0))
  {
    unsigned int v1 = *a1;
    int v2 = 2;
  }
  else
  {
    int v2 = 0;
  }
  if ((v1 & 0x800) != 0) {
    v2 += 2;
  }
  if ((v1 & 2) != 0)
  {
    int v3 = *((char *)a1 + 19);
    if (v3 > 0) {
      v2 += 2;
    }
    if (v3 >= 2) {
      int v2 = v2 + 2 * *((unsigned __int8 *)a1 + 19) - 1;
    }
  }
  if (v1) {
    v2 += 8;
  }
  int v4 = v2 + ((v1 >> 3) & 1);
  if ((v1 & 0x10) != 0) {
    v4 += 2;
  }
  int v5 = v4 + ((v1 >> 5) & 1);
  if ((v1 & 0x40) != 0) {
    LOWORD(v5) = v5 + 2;
  }
  if ((v1 & 0x200) != 0) {
    return (unsigned __int16)(v5 + 8);
  }
  else {
    return (unsigned __int16)v5;
  }
}

uint64_t IDSWorstCaseOverheadForDatagramOptions(unsigned int *a1)
{
  __int16 LinkOverhead = GLUtilGetLinkOverhead();
  return (unsigned __int16)(IDSEstimateAdditionalOverheadForDatagramOptions(a1) + LinkOverhead);
}

uint64_t IDSGroupEncryptionShortMKILength()
{
  return 2;
}

double sub_191A0D728()
{
  mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info(&info);
  LODWORD(v1) = info.denom;
  LODWORD(v0) = info.numer;
  double result = (double)v0 / (double)v1 / 1000000000.0;
  qword_1E92DFC20 = *(void *)&result;
  return result;
}

void sub_191A0E144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 144), 8);
  objc_destroyWeak((id *)(v35 - 112));
  _Unwind_Resume(a1);
}

void sub_191A0E188(uint64_t a1, int a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    uint64_t v8 = *(void *)(a1 + 32);
    int v12 = 138412802;
    if (a2) {
      uint64_t v7 = @"YES";
    }
    id v13 = v7;
    __int16 v14 = 2112;
    id v15 = v5;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Finished sending parakeet storage fetch -- ip service{success: %@, error: %@, identifier: %@}", (uint8_t *)&v12, 0x20u);
  }

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  double v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v5;
  id v11 = v5;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_191A0E2AC(uint64_t a1, int a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    uint64_t v8 = *(void *)(a1 + 32);
    int v12 = 138412802;
    if (a2) {
      uint64_t v7 = @"YES";
    }
    id v13 = v7;
    __int16 v14 = 2112;
    id v15 = v5;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Finished sending parakeet storage fetch -- offgrid service {success: %@, error: %@, identifier: %@}", (uint8_t *)&v12, 0x20u);
  }

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  double v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v5;
  id v11 = v5;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_191A0E3D0(uint64_t a1)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    int v3 = 0;
    uint64_t v4 = 1;
  }
  else
  {
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v6 = v5;
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) {
      objc_msgSend(v5, "addObject:");
    }
    if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)) {
      objc_msgSend(v6, "addObject:");
    }
    uint64_t v7 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v10 = *MEMORY[0x1E4F28750];
    uint64_t v8 = (void *)[v6 copy];
    v11[0] = v8;
    uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];
    int v3 = [v7 errorWithDomain:@"IDSParakeetMessagingErrorDomain" code:2 userInfo:v9];

    uint64_t v4 = 0;
  }
  [WeakRetained _noteSentFetchForIdentifier:*(void *)(a1 + 32) success:v4 error:v3];
}

void sub_191A0E8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_191A0E8F0(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _noteAckTimerFiredForIdentifier:*(void *)(a1 + 32)];
  }
  [v5 invalidate];
}

void sub_191A0F0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_191A0F0D8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v10 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = @"NO";
    int v12 = 138412802;
    if (a2) {
      id v11 = @"YES";
    }
    id v13 = v11;
    __int16 v14 = 2112;
    id v15 = v7;
    __int16 v16 = 2112;
    id v17 = v8;
    _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Finished sending parakeet stop {success: %@, error: %@, context: %@}", (uint8_t *)&v12, 0x20u);
  }

  [WeakRetained _noteSentStopForIdentifier:*(void *)(a1 + 32) success:a2 error:v7];
}

void sub_191A0F41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_191A0F448(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v7 = [MEMORY[0x1E4F6B460] IDSServerMessaging];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = @"NO";
    uint64_t v9 = *(void *)(a1 + 32);
    int v11 = 138412802;
    if (a2) {
      id v8 = @"YES";
    }
    int v12 = v8;
    __int16 v13 = 2112;
    id v14 = v5;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Finished cancelling parakeet stop {success: %@, error: %@, UUID: %@}", (uint8_t *)&v11, 0x20u);
  }

  uint64_t v10 = [*(id *)(a1 + 32) UUIDString];
  [WeakRetained _noteCanceledFetchForIdentifier:v10 success:a2 error:v5];
}

void sub_191A0F6C8(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) originalGUID];
  [v1 _noteAckedMessageWithMessageIdentifier:v2];
}

uint64_t sub_191A0FB14(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__temporarilyStoreMessage_forServiceIdentifier_);
}

void sub_191A0FBB8(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 objectForKeyedSubscript:*(void *)(a1 + 32)];
  id v5 = +[IDSLogging _IDSService];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v6;
    _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "Finalized check in -- finishing {service: %@}", (uint8_t *)&v7, 0xCu);
  }

  if (!v4)
  {
    uint64_t v4 = objc_alloc_init(_IDSXPCCheckInInfo);
    [v3 setObject:v4 forKeyedSubscript:*(void *)(a1 + 32)];
  }
  [(_IDSXPCCheckInInfo *)v4 setTempObject:0];
  [(_IDSXPCCheckInInfo *)v4 setFinishedTransaction:1];
}

void sub_191A0FD64(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 objectForKeyedSubscript:*(void *)(a1 + 32)];
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = [v3 connection];
    [v5 cancel];

    [v6 setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];
  }
}

void sub_191A0FDFC(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = [v2 objectForKeyedSubscript:*(void *)(*((void *)&v9 + 1) + 8 * v6)];
        uint64_t v8 = [v7 connection];
        [v8 cancel];

        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  [v2 removeAllObjects];
}

void sub_191A0FFDC(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  uint64_t v4 = v3;
  if (v3 && ([v3 finishedTransaction] & 1) == 0)
  {
    uint64_t v5 = (void *)MEMORY[0x192FE0970](*(void *)(a1 + 40));
    uint64_t v6 = +[IDSLogging _IDSService];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138412546;
      uint64_t v9 = v7;
      __int16 v10 = 2080;
      long long v11 = v5;
      _os_log_impl(&dword_19190B000, v6, OS_LOG_TYPE_DEFAULT, "Client received xpc-wake event -- storing {service: %@, description: %s}", (uint8_t *)&v8, 0x16u);
    }

    free(v5);
    [v4 setTempObject:*(void *)(a1 + 40)];
  }
}

uint64_t sub_191A103B0(void *a1)
{
  id v2 = [[_IDSDeviceConnection alloc] initWithDevice:a1[5] options:a1[6] completionHandler:a1[8] queue:a1[7]];
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_191A1067C(uint64_t a1)
{
  id v2 = [_IDSDeviceConnection alloc];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_191A10798;
  void v10[3] = &unk_1E572D4B8;
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  uint64_t v5 = +[IDSInternalQueueController sharedInstance];
  uint64_t v6 = [v5 queue];
  uint64_t v7 = [(_IDSDeviceConnection *)v2 initWithDevice:v3 options:v4 completionHandler:v10 queue:v6];
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 8);
  *(void *)(v8 + 8) = v7;
}

void sub_191A10798(uint64_t a1, CFSocketNativeHandle a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    CFReadStreamRef v6 = 0;
    CFWriteStreamRef v7 = 0;
  }
  else
  {
    readStreauint64_t m = 0;
    writeStreauint64_t m = 0;
    CFStreamCreatePairWithSocket((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, &readStream, &writeStream);
    CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1D480];
    uint64_t v9 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFReadStreamSetProperty(readStream, (CFStreamPropertyKey)*MEMORY[0x1E4F1D480], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    CFWriteStreamSetProperty(writeStream, v8, v9);
    CFReadStreamRef v6 = readStream;
    CFWriteStreamRef v7 = writeStream;
    [*(id *)(*(void *)(a1 + 32) + 8) setStreamPairWithInputStream:readStream outputStream:writeStream];
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_191A1090C;
  v14[3] = &unk_1E5729A88;
  id v15 = v5;
  CFReadStreamRef v16 = v6;
  CFWriteStreamRef v17 = v7;
  __int16 v10 = *(NSObject **)(a1 + 40);
  id v18 = *(id *)(a1 + 48);
  id v11 = v7;
  id v12 = v6;
  id v13 = v5;
  dispatch_async(v10, v14);
}

void sub_191A1090C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = v2;
  if ((!*(void *)(a1 + 40) || !*(void *)(a1 + 48)) && !*(void *)(a1 + 32))
  {
    id v7 = v2;
    id v4 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    id v5 = objc_msgSend(v4, "initWithObjectsAndKeys:", @"Unable to create input and output stream", *MEMORY[0x1E4F28568], 0);
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"com.apple.identityservices.error" code:19 userInfo:v5];

    id v3 = (id)v6;
  }
  id v8 = v3;
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_191A10AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A10B14(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) updateConnectionWithOptions:a1[5] error:a1[7]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_191A10C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_191A10C80()
{
  return self;
}

void sub_191A10DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A10DD4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) description];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_191A10F00(void *a1)
{
  return [*(id *)(a1[4] + 8) setStreamPairWithInputStream:a1[5] outputStream:a1[6]];
}

void sub_191A10FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A10FFC(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) socket];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_191A11144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A1115C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) inputStream];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_191A112BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A112D4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) outputStream];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_191A113B4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) close];
}

void sub_191A11490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A114A8(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) mtu];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_191A115F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A11608(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) metrics];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

id ACAccountForIDSAccount(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = objc_msgSend((id)MEMORY[0x192FDF3E0](@"FTPasswordManager", @"FTServices"), "sharedInstance");
  uint64_t v6 = [v4 profileID];
  id v7 = [v4 loginID];

  id v8 = [v5 acAccountWithProfileID:v6 username:v7 accountStore:v3];

  return v8;
}

void sub_191A1180C()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B2FA0];
  unint64_t v1 = (void *)qword_1EB2BD630;
  qword_1EB2BD630 = v0;

  uint64_t v2 = (void *)qword_1EB2BD630;
  id v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  objc_msgSend(v3, "setWithObjects:", v4, v5, objc_opt_class(), 0);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setClasses:v6 forSelector:sel_reportClientEvent_withCompletion_ argumentIndex:0 ofReply:0];
}

void IDSGetServiceUserIDsWithCompletionBlock(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (_IDSRunningInDaemon()) {
    sub_191A4269C();
  }
  if (v3)
  {
    uint64_t v5 = +[IDSHomeKitManager sharedInstance];
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = sub_191A119B8;
    v6[3] = &unk_1E572D4E0;
    id v7 = v3;
    [v5 getServiceUserIDsWithCompletionBlock:v6 queue:v4];
  }
}

uint64_t sub_191A119B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IDSGetAdminAccessTokensWithCompletionBlock(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (_IDSRunningInDaemon()) {
    sub_191A426C8();
  }
  if (v12)
  {
    uint64_t v14 = +[IDSHomeKitManager sharedInstance];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = sub_191A11AE0;
    v15[3] = &unk_1E572D4E0;
    id v16 = v12;
    [v14 getAdminAccessTokensWithWithServiceUserID:v9 accessoryID:v10 pairingToken:v11 completionBlock:v15 queue:v13];
  }
}

uint64_t sub_191A11AE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IDSGetConsentTokensWithCompletionBlock(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (_IDSRunningInDaemon()) {
    sub_191A426F4();
  }
  if (v12)
  {
    uint64_t v14 = +[IDSHomeKitManager sharedInstance];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = sub_191A11C08;
    v15[3] = &unk_1E572D4E0;
    id v16 = v12;
    [v14 getConsentTokensWithServiceUserID:v9 accessoryIDs:v10 adminID:v11 completionBlock:v15 queue:v13];
  }
}

uint64_t sub_191A11C08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IDSGetUserAccessTokensWithCompletionBlock(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  if (_IDSRunningInDaemon()) {
    sub_191A42720();
  }
  if (v15)
  {
    CFWriteStreamRef v17 = +[IDSHomeKitManager sharedInstance];
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = sub_191A11D4C;
    v18[3] = &unk_1E572D4E0;
    id v19 = v15;
    [v17 getUserAccessTokensWithServiceUserID:v11 userID:v12 userHandle:v13 accessoryRequests:v14 completionBlock:v18 queue:v16];
  }
}

uint64_t sub_191A11D4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IDSRefreshUserAccessTokensWithCompletionBlock(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v13 = a1;
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (_IDSRunningInDaemon()) {
    sub_191A4274C();
  }
}

void sub_191A11E44()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B3000];
  unint64_t v1 = (void *)qword_1EB2BD638;
  qword_1EB2BD638 = v0;

  id v7 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2AC190];
  uint64_t v2 = (void *)qword_1EB2BD638;
  id v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  id v6 = objc_msgSend(v3, "setWithObjects:", v4, v5, objc_opt_class(), 0);
  [v2 setClasses:v6 forSelector:sel_currentSubscriptionsForActivity_completion_ argumentIndex:0 ofReply:1];

  [(id)qword_1EB2BD638 setInterface:v7 forSelector:sel_setupActivityMonitorClient_forActivity_ argumentIndex:0 ofReply:0];
}

void sub_191A12B80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) queue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_191A12C44;
  v7[3] = &unk_1E5729880;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_191A12C44(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191A12C58(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 service];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_191A12D2C;
  v7[3] = &unk_1E572A370;
  id v8 = *(id *)(a1 + 48);
  id v6 = [v4 featureTogglerCollaboratorForService:v5 withErrorHandler:v7];

  [v6 retrieveFeatureToggleStateForOptions:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_191A12D2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] FeatureToggler];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A42820((uint64_t)v3, v4);
  }

  id v5 = [v3 domain];
  if (![v5 isEqualToString:@"IDSXPCConnectionErrorDomain"])
  {

    goto LABEL_7;
  }
  uint64_t v6 = [v3 code];

  if (v6 != -2000)
  {
LABEL_7:
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = 2;
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = 3;
LABEL_8:
  id v9 = +[IDSFeatureToggleRetrievalResult resultWithError:v8];
  (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v9);
}

void sub_191A1305C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) queue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_191A13120;
  v7[3] = &unk_1E5729880;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_191A13120(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191A13134(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 service];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_191A13208;
  v7[3] = &unk_1E572A370;
  id v8 = *(id *)(a1 + 48);
  id v6 = [v4 featureTogglerCollaboratorForService:v5 withErrorHandler:v7];

  [v6 updateFeatureToggleStateWithOptions:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_191A13208(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6B460] FeatureToggler];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A42820((uint64_t)v3, v4);
  }

  id v5 = [v3 domain];
  if (![v5 isEqualToString:@"IDSXPCConnectionErrorDomain"])
  {

    goto LABEL_7;
  }
  uint64_t v6 = [v3 code];

  if (v6 != -2000)
  {
LABEL_7:
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = 2;
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = 3;
LABEL_8:
  id v9 = +[IDSFeatureToggleUpdateResult resultWithError:v8];
  (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v9);
}

void sub_191A133B8()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B3060];
  unint64_t v1 = (void *)qword_1EB2BD640;
  qword_1EB2BD640 = v0;

  uint64_t v2 = (void *)qword_1EB2BD640;
  id v3 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  [v2 setClasses:v3 forSelector:sel_updateFeatureToggleStateWithOptions_completion_ argumentIndex:0 ofReply:0];

  id v4 = (void *)qword_1EB2BD640;
  id v5 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  [v4 setClasses:v5 forSelector:sel_updateFeatureToggleStateWithOptions_completion_ argumentIndex:0 ofReply:1];

  uint64_t v6 = (void *)qword_1EB2BD640;
  uint64_t v7 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  [v6 setClasses:v7 forSelector:sel_retrieveFeatureToggleStateForOptions_completion_ argumentIndex:0 ofReply:0];

  uint64_t v8 = (void *)qword_1EB2BD640;
  objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  [v8 setClasses:v9 forSelector:sel_retrieveFeatureToggleStateForOptions_completion_ argumentIndex:0 ofReply:1];
}

uint64_t sub_191A135F4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) setFromID:*(void *)(a1 + 40)];
}

uint64_t sub_191A13730(void *a1)
{
  return [*(id *)(a1[4] + 8) addDelegate:a1[5] queue:a1[6]];
}

uint64_t sub_191A137D0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeDelegate:*(void *)(a1 + 40)];
}

uint64_t sub_191A138B4(void *a1)
{
  return [*(id *)(a1[4] + 8) removeDelegate:a1[7] forService:a1[5] listenerID:a1[6]];
}

uint64_t sub_191A13A24(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_addListenerID_forService_);
}

void sub_191A13BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A13BFC(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) removeListenerID:a1[5] forService:a1[6]];
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_191A13F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191A13F5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_191A14034;
  void v8[3] = &unk_1E572B2E0;
  id v9 = *(id *)(a1 + 80);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = [v3 refreshIDStatusForDestinations:v2 service:v4 preferredFromID:v5 listenerID:v6 forceRefresh:0 queue:v7 completionBlock:v8];
}

void sub_191A14034(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v6 = v3;
    if ([v3 state])
    {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, MEMORY[0x1E4F1CC08]);
    }
    else
    {
      uint64_t v5 = [v6 value];
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
    }
    id v3 = v6;
  }
}

void sub_191A143D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191A143F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_191A144CC;
  void v8[3] = &unk_1E572B2E0;
  id v9 = *(id *)(a1 + 80);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = [v3 refreshIDStatusForDestinations:v2 service:v4 preferredFromID:v5 listenerID:v6 forceRefresh:1 queue:v7 completionBlock:v8];
}

void sub_191A144CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v6 = v3;
    if ([v3 state])
    {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, MEMORY[0x1E4F1CC08]);
    }
    else
    {
      uint64_t v5 = [v6 value];
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
    }
    id v3 = v6;
  }
}

void sub_191A1486C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A1488C(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) refreshIDStatusForDestinations:a1[5] service:a1[6] preferredFromID:a1[7] listenerID:a1[8] forceRefresh:0 queue:a1[9] completionBlock:a1[10]];
  *(unsigned char *)(*(void *)(a1[11] + 8) + 24) = result;
  return result;
}

void sub_191A14B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A14B8C(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) refreshIDStatusForDestination:a1[5] service:a1[6] preferredFromID:a1[7] listenerID:a1[8] queue:a1[9] completionBlock:a1[10]];
  *(unsigned char *)(*(void *)(a1[11] + 8) + 24) = result;
  return result;
}

void sub_191A14ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191A14EF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_191A14FC8;
  void v8[3] = &unk_1E572B2E0;
  id v9 = *(id *)(a1 + 80);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = [v3 requiredIDStatusForDestinations:v2 service:v4 preferredFromID:v5 listenerID:v6 queue:v7 completionBlock:v8];
}

void sub_191A14FC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v6 = v3;
    if ([v3 state])
    {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, MEMORY[0x1E4F1CC08]);
    }
    else
    {
      uint64_t v5 = [v6 value];
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
    }
    id v3 = v6;
  }
}

void sub_191A152F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A15310(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) requiredIDStatusForDestination:a1[5] service:a1[6] preferredFromID:a1[7] listenerID:a1[8] queue:a1[9] completionBlock:a1[10]];
  *(unsigned char *)(*(void *)(a1[11] + 8) + 24) = result;
  return result;
}

void sub_191A1555C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A15574(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) currentIDStatusForDestinations:*(void *)(a1 + 40) service:*(void *)(a1 + 48) preferredFromID:*(void *)(a1 + 56) respectExpiry:*(unsigned __int8 *)(a1 + 96) listenerID:*(void *)(a1 + 64) queue:*(void *)(a1 + 72) completionBlock:*(void *)(a1 + 80)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = result;
  return result;
}

void sub_191A157D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A157E8(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 8) currentIDStatusForDestination:*(void *)(a1 + 40) service:*(void *)(a1 + 48) preferredFromID:*(void *)(a1 + 56) respectExpiry:*(unsigned __int8 *)(a1 + 96) listenerID:*(void *)(a1 + 64) queue:*(void *)(a1 + 72) completionBlock:*(void *)(a1 + 80)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = result;
  return result;
}

void sub_191A15BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A15BD8(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) idInfoForDestinations:a1[5] service:a1[6] preferredFromID:a1[7] infoTypes:a1[13] options:a1[8] listenerID:a1[9] queue:a1[10] completionBlock:a1[11]];
  *(unsigned char *)(*(void *)(a1[12] + 8) + 24) = result;
  return result;
}

void sub_191A15D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A15D38(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) _hasCacheForService:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_191A15EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A15EB8(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) _currentCachedIDStatusForDestination:a1[5] service:a1[6] listenerID:a1[7]];
  *(void *)(*(void *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_191A16070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A16090(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) _warmupQueryCacheForService:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_191A16244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A16264(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) _flushQueryCacheForService:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

uint64_t sub_191A16368(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__setCurrentIDStatus_forDestination_service_);
}

uint64_t sub_191A163F4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_flushQueryCache);
}

void sub_191A16690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191A166B8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  id v3 = IMSingleObjectArray();
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_191A16788;
  v9[3] = &unk_1E572D608;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 72);
  id v10 = v7;
  uint64_t v11 = v8;
  objc_msgSend(v2, "_sync_refreshIDStatusForDestinations:service:preferredFromID:listenerID:completionBlock:", v3, v4, v5, v6, v9);
}

void sub_191A16788(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ([v6 state]
    || ([v6 value],
        uint64_t v4 = objc_claimAutoreleasedReturnValue(),
        [v4 objectForKey:*(void *)(a1 + 32)],
        uint64_t v5 = objc_claimAutoreleasedReturnValue(),
        v4,
        !v5))
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = [v5 integerValue];
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
}

void sub_191A16AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A16B24(void *a1)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = *(void **)(a1[4] + 8);
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_191A16BA4;
  v7[3] = &unk_1E572D658;
  uint64_t v5 = a1[8];
  void v7[4] = a1[9];
  return objc_msgSend(v2, "_sync_refreshIDStatusForDestinations:service:preferredFromID:listenerID:completionBlock:", v1, v3, v4, v5, v7);
}

void sub_191A16BA4(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 state];
  if (v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = [v5 value];
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v4);
  if (!v3) {
}
  }

void sub_191A16F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191A16F2C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = IMSingleObjectArray();
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 64);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_191A1700C;
  void v10[3] = &unk_1E572D680;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 72);
  id v11 = v8;
  uint64_t v12 = v9;
  objc_msgSend(v2, "_sync_currentIDStatusForDestinations:service:preferredFromID:respectExpiry:listenerID:completionBlock:", v3, v4, v5, v6, v7, v10);
}

uint64_t sub_191A1700C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 objectForKey:*(void *)(a1 + 32)];
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v6 = v3;
    uint64_t v3 = (void *)[v3 integerValue];
    uint64_t v4 = v6;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

void sub_191A17390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A173B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 80);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_191A1743C;
  void v8[3] = &unk_1E572D6D0;
  uint64_t v6 = *(void *)(a1 + 64);
  void v8[4] = *(void *)(a1 + 72);
  return objc_msgSend(v2, "_sync_currentIDStatusForDestinations:service:preferredFromID:respectExpiry:listenerID:completionBlock:", v1, v3, v4, v5, v6, v8);
}

void sub_191A1743C(uint64_t a1, void *a2)
{
}

void sub_191A176D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A176F8(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) currentRemoteDevicesForDestinations:a1[5] service:a1[6] preferredFromID:a1[7] listenerID:a1[8] queue:a1[9] completionBlock:a1[10]];
  *(unsigned char *)(*(void *)(a1[11] + 8) + 24) = result;
  return result;
}

void sub_191A179C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A179E8(void *a1)
{
  uint64_t result = [*(id *)(a1[4] + 8) currentRemoteDevicesForDestinations:a1[5] service:a1[6] preferredFromID:a1[7] listenerID:a1[8] queue:a1[9] completionBlockWithError:a1[10]];
  *(unsigned char *)(*(void *)(a1[11] + 8) + 24) = result;
  return result;
}

void sub_191A17CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_191A17CC0(void *a1)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = *(void **)(a1[4] + 8);
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_191A17D40;
  v7[3] = &unk_1E572D6D0;
  uint64_t v5 = a1[8];
  void v7[4] = a1[9];
  return objc_msgSend(v2, "_sync_currentRemoteDevicesForDestinations:service:preferredFromID:listenerID:completionBlock:", v1, v3, v4, v5, v7);
}

void sub_191A17D40(uint64_t a1, void *a2)
{
}

void sub_191A17E40(uint64_t a1, uint64_t a2)
{
  id v3 = [MEMORY[0x1E4F61168] participantsFromEndpoints:a2];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191A1A5A0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  id v3 = a2;
  id v4 = [v2 object];
  [v3 continuityDidUpdateState:v4];
}

uint64_t sub_191A1A698(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleReconnect);
}

uint64_t sub_191A1A7C4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191A1A854(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  id v3 = a2;
  id v4 = [v2 object];
  [v3 continuityDidUpdateState:v4];
}

void sub_191A1A928(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 continuity:v3 didStartAdvertisingOfType:*(void *)(a1 + 40)];
  }
}

void sub_191A1AA10(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 continuity:v3 didStopAdvertisingOfType:*(void *)(a1 + 40)];
  }
}

void sub_191A1AB28(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 8) object];
    [v4 continuity:v3 didStopAdvertisingOfType:a1[6] withError:a1[5]];
  }
}

void sub_191A1AC40(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = sub_1919E2834(*(void **)(a1 + 40));
    [v6 continuity:v3 didFailToStartAdvertisingOfType:v4 withError:v5];
  }
}

void sub_191A1AD48(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 continuity:v3 didStartScanningForType:*(void *)(a1 + 40)];
  }
}

void sub_191A1AE30(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 continuity:v3 didStopScanningForType:*(void *)(a1 + 40)];
  }
}

void sub_191A1AF48(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = sub_1919E2834(*(void **)(a1 + 40));
    [v6 continuity:v3 didFailToStartScanningForType:v4 withError:v5];
  }
}

void sub_191A1B0AC(void *a1, void *a2)
{
  id v5 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:a1[4]];
    uint64_t v4 = [*(id *)(a1[5] + 8) object];
    [v5 continuity:v4 didDiscoverType:a1[7] withData:a1[6] fromPeer:v3];
  }
}

void sub_191A1B1F4(void *a1, void *a2)
{
  id v5 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:a1[4]];
    uint64_t v4 = [*(id *)(a1[5] + 8) object];
    [v5 continuity:v4 didLosePeer:v3 type:a1[6]];
  }
}

void sub_191A1B368(void *a1, void *a2)
{
  id v5 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:a1[4]];
    uint64_t v4 = [*(id *)(a1[5] + 8) object];
    [v5 continuity:v4 didStartTrackingPeer:v3 type:a1[7] error:a1[6]];
  }
}

void sub_191A1B4B0(void *a1, void *a2)
{
  id v5 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:a1[4]];
    uint64_t v4 = [*(id *)(a1[5] + 8) object];
    [v5 continuity:v4 didStopTrackingPeer:v3 type:a1[6]];
  }
}

uint64_t sub_191A1B5AC(uint64_t a1, void *a2)
{
  return [a2 UUIDString];
}

void sub_191A1B608()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B30C0];
  uint64_t v1 = (void *)qword_1EB2BD648;
  qword_1EB2BD648 = v0;

  uint64_t v2 = (void *)qword_1EB2BD648;
  id v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  id v5 = objc_msgSend(v3, "setWithObjects:", v4, objc_opt_class(), 0);
  [v2 setClasses:v5 forSelector:sel_baaHeadersBySigningData_serverTimestamp_completion_ argumentIndex:0 ofReply:0];

  id v6 = (void *)qword_1EB2BD648;
  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_msgSend(v7, "setWithObjects:", v8, v9, v10, v11, objc_opt_class(), 0);
  [v6 setClasses:v12 forSelector:sel_baaHeadersBySigningData_serverTimestamp_completion_ argumentIndex:0 ofReply:1];

  id v13 = (void *)qword_1EB2BD648;
  id v14 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  [v13 setClasses:v14 forSelector:sel_baaHeadersBySigningData_serverTimestamp_completion_ argumentIndex:1 ofReply:1];

  id v15 = (void *)qword_1EB2BD648;
  objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  [v15 setClasses:v16 forSelector:sel_baaHeadersBySigningData_serverTimestamp_completion_ argumentIndex:2 ofReply:1];
}

void sub_191A1B858()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B3120];
  uint64_t v1 = (void *)qword_1EB2BD650;
  qword_1EB2BD650 = v0;

  uint64_t v2 = (void *)qword_1EB2BD650;
  id v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  id v6 = objc_msgSend(v3, "setWithObjects:", v4, v5, objc_opt_class(), 0);
  [v2 setClasses:v6 forSelector:sel_addEntries_withCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v7 = (void *)qword_1EB2BD650;
  uint64_t v8 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_msgSend(v8, "setWithObjects:", v9, v10, objc_opt_class(), 0);
  [v7 setClasses:v11 forSelector:sel_addEntries_withCompletion_ argumentIndex:0 ofReply:0];

  uint64_t v12 = (void *)qword_1EB2BD650;
  id v13 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v14 = objc_opt_class();
  uint64_t v15 = objc_opt_class();
  id v16 = objc_msgSend(v13, "setWithObjects:", v14, v15, objc_opt_class(), 0);
  [v12 setClasses:v16 forSelector:sel_currentEntries_ argumentIndex:0 ofReply:1];

  CFWriteStreamRef v17 = (void *)qword_1EB2BD650;
  id v18 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v19 = objc_opt_class();
  uint64_t v20 = objc_opt_class();
  uint64_t v21 = objc_msgSend(v18, "setWithObjects:", v19, v20, objc_opt_class(), 0);
  [v17 setClasses:v21 forSelector:sel_currentEntries_ argumentIndex:0 ofReply:0];

  uint64_t v22 = (void *)qword_1EB2BD650;
  __int16 v23 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v24 = objc_opt_class();
  uint64_t v25 = objc_opt_class();
  uint64_t v26 = objc_msgSend(v23, "setWithObjects:", v24, v25, objc_opt_class(), 0);
  [v22 setClasses:v26 forSelector:sel_currentDonatedEntries_ argumentIndex:0 ofReply:1];

  __int16 v27 = (void *)qword_1EB2BD650;
  int v28 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v29 = objc_opt_class();
  uint64_t v30 = objc_opt_class();
  __int16 v31 = objc_msgSend(v28, "setWithObjects:", v29, v30, objc_opt_class(), 0);
  [v27 setClasses:v31 forSelector:sel_currentDonatedEntries_ argumentIndex:0 ofReply:0];

  double v32 = (void *)qword_1EB2BD650;
  __int16 v33 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v34 = objc_opt_class();
  uint64_t v35 = objc_opt_class();
  double v36 = objc_msgSend(v33, "setWithObjects:", v34, v35, objc_opt_class(), 0);
  [v32 setClasses:v36 forSelector:sel_recentlyBlockedEntries_ argumentIndex:0 ofReply:1];

  uint64_t v37 = (void *)qword_1EB2BD650;
  __int16 v38 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v39 = objc_opt_class();
  uint64_t v40 = objc_opt_class();
  id v41 = objc_msgSend(v38, "setWithObjects:", v39, v40, objc_opt_class(), 0);
  [v37 setClasses:v41 forSelector:sel_recentlyBlockedEntries_ argumentIndex:0 ofReply:0];

  uint64_t v42 = (void *)qword_1EB2BD650;
  uint64_t v43 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v44 = objc_opt_class();
  uint64_t v45 = objc_opt_class();
  long long v46 = objc_msgSend(v43, "setWithObjects:", v44, v45, objc_opt_class(), 0);
  [v42 setClasses:v46 forSelector:sel_removeAllDonatedEntries_ argumentIndex:0 ofReply:1];

  long long v47 = (void *)qword_1EB2BD650;
  long long v48 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v49 = objc_opt_class();
  uint64_t v50 = objc_opt_class();
  id v51 = objc_msgSend(v48, "setWithObjects:", v49, v50, objc_opt_class(), 0);
  [v47 setClasses:v51 forSelector:sel_removeAllDonatedEntries_ argumentIndex:0 ofReply:0];

  __int16 v52 = (void *)qword_1EB2BD650;
  id v53 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v54 = objc_opt_class();
  uint64_t v55 = objc_opt_class();
  char v56 = objc_msgSend(v53, "setWithObjects:", v54, v55, objc_opt_class(), 0);
  [v52 setClasses:v56 forSelector:sel_removeAllEntries_ argumentIndex:0 ofReply:1];

  uint64_t v57 = (void *)qword_1EB2BD650;
  uint64_t v58 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v59 = objc_opt_class();
  uint64_t v60 = objc_opt_class();
  uint64_t v61 = objc_msgSend(v58, "setWithObjects:", v59, v60, objc_opt_class(), 0);
  [v57 setClasses:v61 forSelector:sel_removeAllEntries_ argumentIndex:0 ofReply:0];

  long long v62 = (void *)qword_1EB2BD650;
  uint64_t v63 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v64 = objc_opt_class();
  uint64_t v65 = objc_opt_class();
  long long v66 = objc_msgSend(v63, "setWithObjects:", v64, v65, objc_opt_class(), 0);
  [v62 setClasses:v66 forSelector:sel_removeEntries_withCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v67 = (void *)qword_1EB2BD650;
  long long v68 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v69 = objc_opt_class();
  uint64_t v70 = objc_opt_class();
  id v71 = objc_msgSend(v68, "setWithObjects:", v69, v70, objc_opt_class(), 0);
  [v67 setClasses:v71 forSelector:sel_removeEntries_withCompletion_ argumentIndex:0 ofReply:0];

  __int16 v72 = (void *)qword_1EB2BD650;
  uint64_t v73 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v74 = objc_opt_class();
  uint64_t v75 = objc_opt_class();
  double v76 = objc_msgSend(v73, "setWithObjects:", v74, v75, objc_opt_class(), 0);
  [v72 setClasses:v76 forSelector:sel_removeDonatedEntries_withCompletion_ argumentIndex:0 ofReply:1];

  double v77 = (void *)qword_1EB2BD650;
  double v78 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v79 = objc_opt_class();
  uint64_t v80 = objc_opt_class();
  uint64_t v81 = objc_msgSend(v78, "setWithObjects:", v79, v80, objc_opt_class(), 0);
  [v77 setClasses:v81 forSelector:sel_removeDonatedEntries_withCompletion_ argumentIndex:0 ofReply:0];

  uint64_t v82 = (void *)qword_1EB2BD650;
  uint64_t v83 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v84 = objc_opt_class();
  uint64_t v85 = objc_opt_class();
  id v86 = objc_msgSend(v83, "setWithObjects:", v84, v85, objc_opt_class(), 0);
  [v82 setClasses:v86 forSelector:sel_replaceEntries_replaceAll_withCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v87 = (void *)qword_1EB2BD650;
  uint64_t v88 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v89 = objc_opt_class();
  uint64_t v90 = objc_opt_class();
  objc_msgSend(v88, "setWithObjects:", v89, v90, objc_opt_class(), 0);
  id v91 = (id)objc_claimAutoreleasedReturnValue();
  [v87 setClasses:v91 forSelector:sel_replaceEntries_replaceAll_withCompletion_ argumentIndex:0 ofReply:0];
}

uint64_t sub_191A1CF90(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_cleanupSession_);
}

uint64_t sub_191A1D614(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191A1D800(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 sessionEnded:v3 withReason:*(unsigned int *)(*(void *)(a1 + 32) + 156) error:0];
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      goto LABEL_6;
    }
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 sessionEnded:v3];
  }

LABEL_6:
}

void sub_191A1FE54(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 8) object];
    [v4 session:v3 receivedInvitationAcceptFromID:a1[5] withData:a1[6]];
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      goto LABEL_6;
    }
    id v3 = [*(id *)(a1[4] + 8) object];
    [v4 session:v3 receivedInvitationAcceptFromID:a1[5]];
  }

LABEL_6:
}

void sub_191A2016C(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 8) object];
    [v4 session:v3 receivedInvitationDeclineFromID:a1[5] withData:a1[6]];
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      goto LABEL_6;
    }
    id v3 = [*(id *)(a1[4] + 8) object];
    [v4 session:v3 receivedInvitationDeclineFromID:a1[5]];
  }

LABEL_6:
}

void sub_191A20484(void *a1, void *a2)
{
  id v4 = a2;
  id v3 = [*(id *)(a1[4] + 8) object];
  if (v3)
  {
    if (objc_opt_respondsToSelector())
    {
      [v4 session:v3 receivedInvitationCancelFromID:a1[5] withData:a1[6]];
    }
    else if (objc_opt_respondsToSelector())
    {
      [v4 session:v3 receivedInvitationCancelFromID:a1[5]];
    }
  }
}

void sub_191A2076C(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 8) object];
    [v4 session:v3 receivedSessionMessageFromID:a1[5] withData:a1[6]];
  }
}

void sub_191A20A24(void *a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1[4] + 8) object];
    [v4 session:v3 receivedSessionEndFromID:a1[5] withData:a1[6]];
  }
}

void sub_191A20CDC(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v5 session:v3 invitationSentToTokens:*(void *)(a1 + 40) shouldBreakBeforeMake:*(unsigned __int8 *)(a1 + 48)];
  }
  if (objc_opt_respondsToSelector())
  {
    id v4 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v5 session:v4 invitationSentToTokens:*(void *)(a1 + 40)];
  }
}

void sub_191A20F4C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 allocationDone:v3 sessionInfo:*(void *)(a1 + 40)];
  }
}

void sub_191A211B0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 sessionStarted:v3];
  }
}

void sub_191A21460(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];

  if (v3)
  {
    if (objc_opt_respondsToSelector())
    {
      id v4 = [*(id *)(*(void *)(a1 + 32) + 8) object];
      [v5 sessionEnded:v4 withReason:*(unsigned int *)(a1 + 48) error:*(void *)(a1 + 40)];
    }
    else
    {
      if ((objc_opt_respondsToSelector() & 1) == 0) {
        goto LABEL_7;
      }
      id v4 = [*(id *)(*(void *)(a1 + 32) + 8) object];
      [v5 sessionEnded:v4];
    }
  }
LABEL_7:
}

void sub_191A21E90(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) object];
    [v4 session:v3 didReceiveReport:*(void *)(a1 + 40)];
  }
}

void sub_191A22000(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v4 = +[IDSLogging _IDSSession];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = [*(id *)(a1 + 32) hash];
      uint64_t v6 = [*(id *)(a1 + 32) length];
      int v7 = 134218240;
      uint64_t v8 = v5;
      __int16 v9 = 2048;
      uint64_t v10 = v6;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_INFO, "UNRL: Received data Daemon -> Client  (data hash: %lu)  (length: %lu)", (uint8_t *)&v7, 0x16u);
    }

    [v3 session:*(void *)(*(void *)(a1 + 40) + 24) didReceiveData:*(void *)(a1 + 32)];
  }
}

void sub_191A221F4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x26u);
}

id sub_191A22230(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (void *)IDSCopyIDForDevice(a3);
  id v4 = [MEMORY[0x1E4F6B438] destinationWithDeviceURI:v3];

  return v4;
}

id sub_191A22288(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (void *)IDSCopyIDForRapportPublicDeviceIdentifier(a3);
  id v4 = [MEMORY[0x1E4F6B438] destinationWithRapportPublicIdentifierURI:v3];

  return v4;
}

void sub_191A2286C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = [*(id *)(a1 + 32) queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_191A22954;
  block[3] = &unk_1E5729948;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_191A22954(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_191A22A34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = [*(id *)(a1 + 32) queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_191A22B1C;
  block[3] = &unk_1E5729948;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_191A22B1C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_191A22BFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = [*(id *)(a1 + 32) queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_191A22CE4;
  block[3] = &unk_1E5729948;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_191A22CE4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_191A22DC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = [*(id *)(a1 + 32) queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_191A22EAC;
  block[3] = &unk_1E5729948;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_191A22EAC(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_191A22F8C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  id v6 = [*(id *)(a1 + 32) queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_191A23058;
  block[3] = &unk_1E57298D0;
  id v7 = *(id *)(a1 + 40);
  id v10 = v5;
  id v11 = v7;
  char v12 = a3;
  id v8 = v5;
  dispatch_async(v6, block);
}

uint64_t sub_191A23058(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 48));
}

void sub_191A23154(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_191A23220;
  block[3] = &unk_1E57298D0;
  id v7 = *(id *)(a1 + 40);
  char v12 = a2;
  id v10 = v5;
  id v11 = v7;
  id v8 = v5;
  dispatch_async(v6, block);
}

uint64_t sub_191A23220(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_191A2332C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) queue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_191A233F0;
  v7[3] = &unk_1E5729880;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_191A233F0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191A234B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) queue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_191A2357C;
  v7[3] = &unk_1E5729880;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_191A2357C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_191A23644(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_191A236E4;
  block[3] = &unk_1E5728FD8;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, block);
}

uint64_t sub_191A236E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191A237BC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_191A2385C;
  block[3] = &unk_1E5728FD8;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, block);
}

uint64_t sub_191A2385C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191A23F1C()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B3180];
  uint64_t v1 = (void *)qword_1EB2BD658;
  qword_1EB2BD658 = v0;

  id v7 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE296008];
  uint64_t v2 = [MEMORY[0x1E4F1CAD0] setWithObject:objc_opt_class()];
  [v7 setClasses:v2 forSelector:sel_handleReceivedIncomingMessageData_identifier_context_ argumentIndex:2 ofReply:0];

  [(id)qword_1EB2BD658 setInterface:v7 forSelector:sel_setupServerMessagingClient_withUUID_forTopic_commands_ argumentIndex:0 ofReply:0];
  id v3 = (void *)qword_1EB2BD658;
  id v4 = [MEMORY[0x1E4F1CAD0] setWithObject:objc_opt_class()];
  [v3 setClasses:v4 forSelector:sel_sendMessageData_onTopic_withOptions_identifier_completion_ argumentIndex:2 ofReply:0];

  id v5 = (void *)qword_1EB2BD658;
  id v6 = [MEMORY[0x1E4F1CAD0] setWithObject:objc_opt_class()];
  [v5 setClasses:v6 forSelector:sel_sendCertifiedDeliveryReceipt_ argumentIndex:0 ofReply:0];
}

void sub_191A24144(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_191A24158()
{
  uint64_t v0 = [IDSXPCDaemonController alloc];
  uint64_t v1 = +[IDSInternalQueueController sharedInstance];
  uint64_t v2 = [v1 queue];
  id v3 = [(IDSXPCDaemonController *)v0 initSyncControllerWithQueue:v2];

  return v3;
}

id sub_191A241D8()
{
  return +[IDSXPCDaemonController weakSharedInstance];
}

void sub_191A24494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191A244B0(uint64_t a1, void *a2)
{
}

void sub_191A24674(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_191A24690(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleInterruption];
}

void sub_191A246D0(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_191A24780;
  v5[3] = &unk_1E572A370;
  id v6 = *(id *)(a1 + 32);
  id v4 = [a2 activityMonitorCollaboratorWithErrorHandler:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_191A24780(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_191A45A8C((uint64_t)v3, v4);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191A24BA4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_191A24BC0(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    if (*(unsigned char *)(a1 + 48)) {
      id v5 = WeakRetained;
    }
    else {
      id v5 = 0;
    }
    [v6 setupActivityMonitorClient:v5 forActivity:*(void *)(a1 + 32)];
  }
}

void sub_191A24E54(uint64_t a1)
{
}

void sub_191A24F74()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2B31E0];
  uint64_t v1 = (void *)qword_1EB2BD660;
  qword_1EB2BD660 = v0;

  id v2 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EE2A1300];
  [(id)qword_1EB2BD660 setInterface:v2 forSelector:sel_addDeliveryHandler_uuid_ argumentIndex:0 ofReply:0];
}

double sub_191A25384()
{
  uint64_t v0 = [MEMORY[0x1E4F6B598] sharedInstanceForBagType:1];
  uint64_t v1 = [v0 objectForKey:@"batch-query-time-limit"];

  if (v1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    [v1 doubleValue];
    double v3 = v2;
  }
  else
  {
    double v3 = 60.0;
  }

  return v3;
}

uint64_t sub_191A25978()
{
  uint64_t v0 = [MEMORY[0x1E4F6B598] sharedInstanceForBagType:1];
  uint64_t v1 = [v0 objectForKey:@"batch-query-use-death-timer"];

  if (v1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v2 = [v1 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_191A25A00(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 56));
  if (!*(void *)(*(void *)(a1 + 32) + 48))
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 48);
    *(void *)(v5 + 48) = v4;
  }
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = [v8 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v22 + 1) + 8 * i);
        id v14 = objc_msgSend(v3, "objectForKey:", v13, (void)v22);
        if ([v14 integerValue]) {
          [v7 setObject:v14 forKey:v13];
        }
        else {
          [*(id *)(*(void *)(a1 + 32) + 48) addObject:v13];
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v22 objects:v28 count:16];
    }
    while (v10);
  }

  uint64_t v15 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v27 = v7;
    _os_log_impl(&dword_19190B000, v15, OS_LOG_TYPE_DEFAULT, "Received cached results %@", buf, 0xCu);
  }

  if (![v3 count])
  {
    id v16 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_19190B000, v16, OS_LOG_TYPE_DEFAULT, "Received 0 cached results, query all destinations", buf, 2u);
    }

    [*(id *)(*(void *)(a1 + 32) + 48) addObjectsFromArray:*(void *)(*(void *)(a1 + 32) + 40)];
  }
  if (objc_msgSend(v7, "count", (void)v22)) {
    [*(id *)(a1 + 32) _calloutToDelegateWithResult:v7 error:0];
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if (!*(void *)(v17 + 64))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      double v18 = sub_191A25CF4();
    }
    else
    {
      uint64_t v19 = [MEMORY[0x1E4F6B598] sharedInstanceForBagType:1];
      uint64_t v20 = [v19 objectForKey:@"batch-query-first-interval"];

      if (v20)
      {
        [v20 doubleValue];
        double v18 = v21;
      }
      else
      {
        double v18 = 1.0;
      }
    }
    [(id)v17 _scheduleNextQuery:v18];
    uint64_t v17 = *(void *)(a1 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 56));
}

double sub_191A25CF4()
{
  uint64_t v0 = [MEMORY[0x1E4F6B598] sharedInstanceForBagType:1];
  uint64_t v1 = [v0 objectForKey:@"batch-query-interval"];

  if (v1)
  {
    [v1 doubleValue];
    double v3 = v2;
  }
  else
  {
    double v3 = 3.0;
  }

  return v3;
}

void sub_191A26288(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = +[IDSLogging IDQuery];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Received results %@", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v5 = [v3 state];
  if (v5 == 1)
  {
    id v7 = [v3 error];
    id v6 = 0;
  }
  else
  {
    if (v5)
    {
      id v6 = 0;
    }
    else
    {
      id v6 = [v3 value];
    }
    id v7 = 0;
  }
  [*(id *)(a1 + 32) _calloutToDelegateWithResult:v6 error:v7];
}

void sub_191A265F0(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (objc_opt_respondsToSelector())
  {
    double v2 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v11 = 134217984;
      uint64_t v12 = v3;
      _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Calling out to old delegate %p", (uint8_t *)&v11, 0xCu);
    }

    [*(id *)(a1 + 32) idStatusUpdatedForDestinations:*(void *)(a1 + 40)];
  }
  if (objc_opt_respondsToSelector())
  {
    id v4 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
      int v11 = 134218242;
      uint64_t v12 = v5;
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      _os_log_impl(&dword_19190B000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to old delegate %p for service %@", (uint8_t *)&v11, 0x16u);
    }

    [*(id *)(a1 + 32) idStatusUpdatedForDestinations:*(void *)(a1 + 40) service:*(void *)(*(void *)(a1 + 48) + 8)];
  }
  if (objc_opt_respondsToSelector())
  {
    id v7 = +[IDSLogging IDQuery];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v11 = 134217984;
      uint64_t v12 = v8;
      _os_log_impl(&dword_19190B000, v7, OS_LOG_TYPE_DEFAULT, "Returning results to delegate %p", (uint8_t *)&v11, 0xCu);
    }

    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = [*(id *)(*(void *)(a1 + 48) + 88) object];
    [v9 batchQueryController:v10 updatedDestinationsStatus:*(void *)(a1 + 40) onService:*(void *)(*(void *)(a1 + 48) + 8) error:*(void *)(a1 + 56)];
  }
}

void sub_191A26B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_191A26BAC()
{
  return self;
}

uint64_t sub_191A26CB4(void *a1)
{
  return [*(id *)(a1[4] + 8) setDelegate:a1[5] queue:a1[6]];
}

uint64_t sub_191A26D98(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_sendMKMRecoveryRequestToGroup_);
}

uint64_t sub_191A2705C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_updateAvailability);
}

uint64_t sub_191A2735C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateAvailability];
}

void sub_191A27B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state)
{
}

void sub_191A27B28(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v7);

  uint64_t v8 = +[IDSLogging transactionLog];
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v6;
      _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "failed to get token {error: %@}", (uint8_t *)&v11, 0xCu);
    }

    [*(id *)(a1 + 32) _completeWithError:v6];
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_INFO, "Got token", (uint8_t *)&v11, 2u);
    }

    uint64_t v10 = +[IDSLogging transactionLog];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v5;
      _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "!setState Token=%@", (uint8_t *)&v11, 0xCu);
    }

    [*(id *)(a1 + 32) qPerformWithToken:v5];
  }
}

void sub_191A27DBC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v12);

  uint64_t v13 = +[IDSLogging transactionLog];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = [NSNumber numberWithBool:a4];
    *(_DWORD *)long long buf = 138412290;
    id v21 = v14;
    _os_log_impl(&dword_19190B000, v13, OS_LOG_TYPE_DEFAULT, "!addState moreComing=%@", buf, 0xCu);
  }
  if (v11)
  {
    uint64_t v15 = +[IDSLogging transactionLog];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v21 = v11;
      _os_log_impl(&dword_19190B000, v15, OS_LOG_TYPE_DEFAULT, "Failed to fetch messages {error: %@}", buf, 0xCu);
    }

    [*(id *)(a1 + 32) _completeWithError:v11];
  }
  else
  {
    id v16 = *(void **)(a1 + 32);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    void v17[2] = sub_191A27FBC;
    v17[3] = &unk_1E572DA58;
    void v17[4] = v16;
    id v18 = v10;
    char v19 = a4;
    [v16 qIngestMessages:v9 completion:v17];
  }
}

void sub_191A27FBC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    id v5 = +[IDSLogging transactionLog];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v13 = v4;
      _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "Failed to ingest messages {error: %@}", buf, 0xCu);
    }

    [*(id *)(a1 + 32) _completeWithError:v4];
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) delegate];
    uint64_t v8 = *(void *)(a1 + 32);
    id v7 = *(void **)(a1 + 40);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = sub_191A2811C;
    v9[3] = &unk_1E572DA30;
    char v11 = *(unsigned char *)(a1 + 48);
    void v9[4] = v8;
    id v10 = v7;
    [v6 taskHandler:v8 persistToken:v10 completion:v9];
  }
}

void sub_191A2811C(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = +[IDSLogging transactionLog];
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v10 = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_DEFAULT, "Failed to persist token {token: %@, error: %@}", (uint8_t *)&v10, 0x16u);
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_19190B000, v5, OS_LOG_TYPE_INFO, "Persisted token", (uint8_t *)&v10, 2u);
    }

    int v7 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v8 = +[IDSLogging transactionLog];
    id v9 = v8;
    if (v7)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_INFO, "moreComing -- continue", (uint8_t *)&v10, 2u);
      }

      [*(id *)(a1 + 32) qPerformWithToken:*(void *)(a1 + 40)];
    }
    else
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "No more coming -- done", (uint8_t *)&v10, 2u);
      }

      [*(id *)(a1 + 32) _completeWithError:0];
    }
  }
}

void sub_191A28538(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  int v7 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v7);

  if (v6)
  {
    uint64_t v8 = +[IDSLogging transactionLog];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      id v17 = v6;
      _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "Failed to get account information {error: %{public}@}", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = sub_191A286E0;
    v12[3] = &unk_1E572DAF8;
    void v12[4] = v9;
    uint64_t v11 = *(void *)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    id v14 = v5;
    id v15 = *(id *)(a1 + 64);
    [v9 qFetchParticipantsFromDeviceMessges:v10 andGroupsFromGroupMessages:v11 completion:v12];
  }
}

void sub_191A286E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = +[IDSLogging transactionLog];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      id v23 = v9;
      _os_log_impl(&dword_19190B000, v10, OS_LOG_TYPE_DEFAULT, "Failed to get groups or participants {error: %{public}@}", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    __int16 v12 = *(void **)(a1 + 32);
    uint64_t v11 = *(void **)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    _DWORD v16[2] = sub_191A288A8;
    v16[3] = &unk_1E572DAD0;
    id v14 = v11;
    uint64_t v15 = *(void *)(a1 + 32);
    id v17 = v14;
    uint64_t v18 = v15;
    id v21 = *(id *)(a1 + 56);
    id v19 = v7;
    id v20 = v8;
    [v12 _transactionMessagesFromTransportMessages:v14 withParticipants:v19 groups:v20 accountInfo:v13 completion:v16];
  }
}

void sub_191A288A8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = +[IDSLogging transactionLog];
  id v8 = v7;
  if (!v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      *(_DWORD *)long long buf = 138478595;
      uint64_t v21 = v14;
      __int16 v22 = 2113;
      uint64_t v23 = v15;
      __int16 v24 = 2113;
      uint64_t v25 = v16;
      __int16 v26 = 2114;
      id v27 = v6;
      _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_DEFAULT, "Failed to get transaction messages from transport messges {transportMessages: %{private}@, participants: %{private}@, groups: %{private}@, error: %{public}@}", buf, 0x2Au);
    }

    id v17 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    goto LABEL_10;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = [*(id *)(a1 + 32) count];
    *(_DWORD *)long long buf = 134218240;
    uint64_t v21 = v9;
    __int16 v22 = 2048;
    uint64_t v23 = [v5 count];
    _os_log_impl(&dword_19190B000, v8, OS_LOG_TYPE_INFO, "got transaction messages from transport messages {transactionMessages.count: %ld, transportMessages.count: %ld}", buf, 0x16u);
  }

  uint64_t v10 = [*(id *)(a1 + 40) syncTask];
  uint64_t v11 = [v10 batchProcessingBlock];

  if (!v11)
  {
    id v17 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
LABEL_10:
    v17();
    goto LABEL_11;
  }
  __int16 v12 = [*(id *)(a1 + 40) syncTask];
  uint64_t v13 = [v12 batchProcessingBlock];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = sub_191A28B00;
  v18[3] = &unk_1E572DAA8;
  id v19 = *(id *)(a1 + 64);
  ((void (**)(void, id, void *))v13)[2](v13, v5, v18);

LABEL_11:
}

uint64_t sub_191A28B00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_191A28F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 208), 8);
  _Block_object_dispose((const void *)(v37 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_191A28F90(uint64_t a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v7);

  id v8 = +[IDSLogging transactionLog];
  uint64_t v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 48);
      int v17 = 138543875;
      uint64_t v18 = (uint64_t)v6;
      __int16 v19 = 2113;
      uint64_t v20 = (uint64_t)v5;
      __int16 v21 = 2113;
      uint64_t v22 = v10;
      _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "Error getting participants from device messages {error: %{public}@, participants: %{private}@, deviceMessages: %{private}@}", (uint8_t *)&v17, 0x20u);
    }

    uint64_t v11 = (void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    __int16 v12 = v6;
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = [v5 count];
      uint64_t v14 = [*(id *)(a1 + 40) count];
      int v17 = 134218240;
      uint64_t v18 = v13;
      __int16 v19 = 2048;
      uint64_t v20 = v14;
      _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_INFO, "Got participants {participants.count: %ld, destinations: %ld}", (uint8_t *)&v17, 0x16u);
    }

    uint64_t v11 = (void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    __int16 v12 = v5;
  }
  id v15 = v12;
  uint64_t v16 = *v11;
  *uint64_t v11 = v15;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_191A2913C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v7);

  id v8 = +[IDSLogging transactionLog];
  uint64_t v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 48);
      int v17 = 138543875;
      uint64_t v18 = (uint64_t)v6;
      __int16 v19 = 2113;
      uint64_t v20 = (uint64_t)v5;
      __int16 v21 = 2113;
      uint64_t v22 = v10;
      _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_DEFAULT, "Error getting groups from group messages {error: %{public}@, groups: %{private}@, groupMessages: %{private}@}", (uint8_t *)&v17, 0x20u);
    }

    uint64_t v11 = (void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    __int16 v12 = v6;
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = [v5 count];
      uint64_t v14 = [*(id *)(a1 + 40) count];
      int v17 = 134218240;
      uint64_t v18 = v13;
      __int16 v19 = 2048;
      uint64_t v20 = v14;
      _os_log_impl(&dword_19190B000, v9, OS_LOG_TYPE_INFO, "Got groups {groups.count: %ld, groupIDs.count: %ld}", (uint8_t *)&v17, 0x16u);
    }

    uint64_t v11 = (void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    __int16 v12 = v5;
  }
  id v15 = v12;
  uint64_t v16 = *v11;
  *uint64_t v11 = v15;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_191A292E8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    double v2 = +[IDSLogging transactionLog];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v6 = 138543362;
      uint64_t v7 = v3;
      _os_log_impl(&dword_19190B000, v2, OS_LOG_TYPE_DEFAULT, "Error getting groups or participants {error: %{public}@}", (uint8_t *)&v6, 0xCu);
    }

    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v5();
  }
}

void sub_191A2A590(uint64_t a1, NSObject *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (objc_class *)objc_opt_class();
  id v4 = NSStringFromClass(v3);
  int v5 = 138543362;
  int v6 = v4;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Instantiating %{public}@ from daemon -- returning nil", (uint8_t *)&v5, 0xCu);
}

void sub_191A2A62C(NSObject *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  double v2 = [MEMORY[0x1E4F29060] callStackSymbols];
  int v3 = 136315394;
  id v4 = "-[IDSContinuity initWithDelegate:queue:]";
  __int16 v5 = 2112;
  int v6 = v2;
  _os_log_error_impl(&dword_19190B000, a1, OS_LOG_TYPE_ERROR, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", (uint8_t *)&v3, 0x16u);
}

void sub_191A2A6E0(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136315138;
  double v2 = "-[IDSContinuity startTrackingPeer:]";
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "%s is deprecated, please use startTrackingPeer:forType:", (uint8_t *)&v1, 0xCu);
}

void sub_191A2A764(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136315138;
  double v2 = "-[IDSContinuity stopTrackingPeer:]";
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "%s is deprecated, please use stopTrackingPeer:forType:", (uint8_t *)&v1, 0xCu);
}

void sub_191A2A7E8(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Exception returned from daemon: %@", (uint8_t *)&v2, 0xCu);
}

void sub_191A2A860()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "Remote Object exists, not creating new remote object", v2, v3, v4, v5, v6);
}

void sub_191A2A894()
{
  sub_19191D1F0(*MEMORY[0x1E4F143B8]);
  sub_19191D1C8();
  sub_19191D1AC(&dword_19190B000, v0, v1, "  Grabbing remote daemon port (listener ID: %@)", v2, v3, v4, v5, v6);
}

void sub_191A2A900()
{
  sub_19191D1C8();
  sub_19191D1AC(&dword_19190B000, v0, v1, "  Ensuring connection to daemon (has checked: %@)", v2, v3, v4, v5, v6);
}

void sub_191A2A988()
{
  sub_19191D1F0(*MEMORY[0x1E4F143B8]);
  sub_19191D1C8();
  sub_19191D1AC(&dword_19190B000, v0, v1, "  Built object: %@", v2, v3, v4, v5, v6);
}

void sub_191A2A9F4()
{
  sub_19191D1F0(*MEMORY[0x1E4F143B8]);
  sub_19191D1C8();
  sub_19191D1AC(&dword_19190B000, v0, v1, "ConnectionID %lu is more recent, ignoring.", v2, v3, v4, v5, v6);
}

void sub_191A2AA60()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "Flushed send queue", v2, v3, v4, v5, v6);
}

void sub_191A2AA94()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "We're still connected, hiding the disconnect!", v2, v3, v4, v5, v6);
}

void sub_191A2AAC8()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "We're still not connected, kicking off disconnect notification", v2, v3, v4, v5, v6);
}

void sub_191A2AAFC()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "Tried to connect to IDS daemon but we got no remote object ... handling as if the remote object died.", v2, v3, v4, v5, v6);
}

void sub_191A2AB30()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_19191D1C8();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_debug_impl(&dword_19190B000, v1, OS_LOG_TYPE_DEBUG, "Set services: %@  (Previous: %@)", v2, 0x16u);
}

void sub_191A2ABC0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2AC58()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2ACF0()
{
  sub_19191D1F0(*MEMORY[0x1E4F143B8]);
  sub_19191D1C8();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Tried to remove non existent listener with ID: %@", v2, v3, v4, v5, v6);
}

void sub_191A2AD58()
{
  int v2 = 138412802;
  sub_19191D1D4();
  sub_19191D230(&dword_19190B000, v0, v1, "Set %@: %@  for listener ID: %@", v2);
}

void sub_191A2ADD0()
{
  int v2 = 138412802;
  sub_19191D1D4();
  sub_19191D230(&dword_19190B000, v0, v1, "Set %@: %@  for listener ID: %@", v2);
}

void sub_191A2AE48()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "Cleaning up LOCAL object", v2, v3, v4, v5, v6);
}

void sub_191A2AE7C()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "Cleaning up REMOTE object", v2, v3, v4, v5, v6);
}

void sub_191A2AEB0()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "Disconnected from agent (local)...", v2, v3, v4, v5, v6);
}

void sub_191A2AEE4()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "Disconnected from agent (remote)...", v2, v3, v4, v5, v6);
}

void sub_191A2AF18()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "Will auto reconnect...", v2, v3, v4, v5, v6);
}

void sub_191A2AF4C()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, " ...auto reconnecting", v2, v3, v4, v5, v6);
}

void sub_191A2AF80()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "System application did suspend", v2, v3, v4, v5, v6);
}

void sub_191A2AFB4()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "System application did enter background", v2, v3, v4, v5, v6);
}

void sub_191A2AFE8()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "System application did enter foreground", v2, v3, v4, v5, v6);
}

void sub_191A2B01C()
{
  sub_19191D1A0();
  sub_19191D184(&dword_19190B000, v0, v1, "System application did resume", v2, v3, v4, v5, v6);
}

void sub_191A2B050()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getKTVerificationInfoClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"IDSXPCKeyTransparency.m", 13, @"Unable to find class %s", "KTVerificationInfo");

  __break(1u);
}

void sub_191A2B0CC(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *TransparencyLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"IDSXPCKeyTransparency.m", 12, @"%s", *a1);

  __break(1u);
}

void sub_191A2B14C()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getKTLoggableDataClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"IDSXPCKeyTransparency.m", 17, @"Unable to find class %s", "KTLoggableData");

  __break(1u);
}

void sub_191A2B1C8()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getKTSelfVerificationHealableErrorsClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"IDSXPCKeyTransparency.m", 16, @"Unable to find class %s", "KTSelfVerificationHealableErrors");

  __break(1u);
}

void sub_191A2B244()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getKTVerifierResultClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"IDSXPCKeyTransparency.m", 14, @"Unable to find class %s", "KTVerifierResult");

  __break(1u);
}

void sub_191A2B2C0()
{
}

void sub_191A2B2EC()
{
}

void sub_191A2B318()
{
}

void sub_191A2B344()
{
}

void sub_191A2B370()
{
}

void sub_191A2B39C()
{
}

void sub_191A2B3C8()
{
}

void sub_191A2B3F4()
{
}

void sub_191A2B420()
{
}

void sub_191A2B44C()
{
}

void sub_191A2B478()
{
}

void sub_191A2B4A4()
{
}

void sub_191A2B4D0()
{
}

void sub_191A2B4FC()
{
}

void sub_191A2B528()
{
}

void sub_191A2B554()
{
}

void sub_191A2B580()
{
}

void sub_191A2B5AC()
{
}

void sub_191A2B5D8()
{
}

void sub_191A2B604()
{
}

void sub_191A2B630()
{
}

void sub_191A2B65C()
{
}

void sub_191A2B688()
{
}

void sub_191A2B6B4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2B74C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2B7E4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2B87C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2B918(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "Invalid context", v1, 2u);
}

void sub_191A2B95C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "Invalid stream name", v1, 2u);
}

void sub_191A2B9A0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2BA38(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Received error: %@", (uint8_t *)&v2, 0xCu);
}

float sub_191A2BAB0(int a1, uint8_t *buf, uint64_t a3, os_log_t log)
{
  *(_DWORD *)long long buf = 67109888;
  *((_DWORD *)buf + 1) = a1;
  *((_WORD *)buf + 4) = 2048;
  *(void *)(buf + 10) = 1;
  *((_WORD *)buf + 9) = 2048;
  *(void *)(buf + 20) = 4;
  *((_WORD *)buf + 14) = 2048;
  *(void *)(buf + 30) = a3;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "malformed tlv received ((%d + %zu + %zu > %lu)", buf, 0x26u);
  return result;
}

void sub_191A2BB1C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2BBB8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2BC2C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2BCA0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2BD14(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2BD88(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2BDFC()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2BE94()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2BF2C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2BFC4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2C05C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2C0F4(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = 134218240;
  uint64_t v5 = a1;
  __int16 v6 = 2048;
  uint64_t v7 = v3;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "IDSGroupSession method invoked without a valid internal session! { self: %p, _internal: %p }", (uint8_t *)&v4, 0x16u);
}

void sub_191A2C180()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2C218()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2C2B0()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "Error fetching OffGrid messenger collaborator {error: %@}", v2, v3, v4, v5, v6);
}

void sub_191A2C318(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2C350(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2C388(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2C3C0()
{
}

void sub_191A2C3EC()
{
}

void sub_191A2C418()
{
}

void sub_191A2C444()
{
}

void sub_191A2C470()
{
}

void sub_191A2C49C()
{
}

void sub_191A2C4C8()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  uint64_t v1 = NSStringFromClass(v0);
  sub_191931340();
  sub_19193CB40(&dword_19190B000, v2, v3, "Instantiating %{public}@ from daemon -- returning nil", v4, v5, v6, v7, v8);
}

void sub_191A2C550()
{
  sub_19193CAE8();
  sub_19193CB20(&dword_19190B000, v0, v1, "%@ accountDictionariesForService %@");
}

void sub_191A2C5B8()
{
  sub_19191D1C8();
  sub_19191D1AC(&dword_19190B000, v0, v1, "All accounts after first connection to daemon: %@", v2, v3, v4, v5, v6);
}

void sub_191A2C62C()
{
  sub_19191D1C8();
  sub_19191D1AC(&dword_19190B000, v0, v1, "All enabledAccounts %@", v2, v3, v4, v5, v6);
}

void sub_191A2C69C()
{
  sub_19193CAE8();
  sub_19193CB00(&dword_19190B000, v0, v1, "IDSDaemonListener _removeAccountOnIvarQueue %@ was told of an account without a unique id or service name: %@");
}

void sub_191A2C704()
{
  sub_19193CAE8();
  sub_19193CB00(&dword_19190B000, v0, v1, "IDSDaemonListener accountAdded %@ was told of an account without a unique id or service name: %@");
}

void sub_191A2C76C()
{
  sub_19193CAE8();
  sub_19193CB00(&dword_19190B000, v0, v1, "IDSDaemonListener accountRemoved %@ was told of an account without a unique id or service name: %@");
}

void sub_191A2C7D4()
{
  sub_19193CAE8();
  sub_19193CB00(&dword_19190B000, v0, v1, "IDSDaemonListener accountEnabled was told of an account without a unique id %@ or service %@");
}

void sub_191A2C83C()
{
  sub_19193CAE8();
  sub_19193CB00(&dword_19190B000, v0, v1, "IDSDaemonListener accountDisabled was told of an account without a unique id %@ or service %@");
}

void sub_191A2C8A4()
{
  sub_19193CAE8();
  sub_19193CB00(&dword_19190B000, v0, v1, "IDSDaemonListener accountInfoChanged %@ was told of an account without a unique id or service name: %@");
}

void sub_191A2C90C()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  _os_log_error_impl(&dword_19190B000, v0, OS_LOG_TYPE_ERROR, "Found existing local device, removing %@", v1, 0xCu);
}

void sub_191A2C980()
{
  sub_191931340();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Refresh registration for account %@", v2, v3, v4, v5, v6);
}

void sub_191A2C9E8()
{
  sub_191931340();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Direct messaging peer identifier: %@", v2, v3, v4, v5, v6);
}

void sub_191A2CA50()
{
  sub_19191D1C8();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Device identifier from daemon: %@", v2, v3, v4, v5, v6);
}

void sub_191A2CAC0()
{
  sub_191931340();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Deferred setup on ivar queue, got enabled accounts %@", v2, v3, v4, v5, v6);
}

void sub_191A2CB28()
{
  sub_191931340();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Deferred setup on ivar queue, got accounts %@", v2, v3, v4, v5, v6);
}

void sub_191A2CB90(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "Unnecessary invocation of deviceIdentifierDidChange:", v1, 2u);
}

void sub_191A2CBD4()
{
  sub_19191D1C8();
  sub_19193CB20(&dword_19190B000, v0, v1, "Device identifier changing from %@ to %@");
}

void sub_191A2CC4C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2CCE4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2CD7C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2CE14()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2CEAC()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2CF44()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2CFDC()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2D074()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2D10C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_19190B000, log, OS_LOG_TYPE_FAULT, "IDSActivity is not allowed for non-tvOS devices.", v1, 2u);
}

void sub_191A2D150(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2D1BC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2D228(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2D294()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "validateStrictDecodingForSentInvitation: Failed to validate strict decoding for invitation with error {%@}", v2, v3, v4, v5, v6);
}

void sub_191A2D2FC()
{
  sub_1919439FC(*MEMORY[0x1E4F143B8]);
  sub_19191D1C8();
  sub_191931324(&dword_19190B000, v0, v1, "sendInvitationToDestination: Invitation {%@} not added to pendingInvitations. Calling serverAcknowledgedBlock", v2, v3, v4, v5, v6);
}

void sub_191A2D364()
{
  sub_1919439FC(*MEMORY[0x1E4F143B8]);
  sub_19191D1C8();
  sub_191931324(&dword_19190B000, v0, v1, "cancelInvitation: Invitation {%@} not removed from pendingInvitations. Calling serverAcknowledgedBlock", v2, v3, v4, v5, v6);
}

void sub_191A2D3CC()
{
  sub_1919439FC(*MEMORY[0x1E4F143B8]);
  sub_19191D1C8();
  sub_191931324(&dword_19190B000, v0, v1, "acceptInvitation: Invitation {%@} not removed from receivedInvitations. Calling serverAcknowledgedBlock", v2, v3, v4, v5, v6);
}

void sub_191A2D434()
{
  sub_1919439FC(*MEMORY[0x1E4F143B8]);
  sub_19191D1C8();
  sub_191931324(&dword_19190B000, v0, v1, "declineInvitation: Invitation {%@} not removed from receivedInvitations. Calling serverAcknowledgedBlock", v2, v3, v4, v5, v6);
}

void sub_191A2D49C()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Validating Invitation: Null invitation, dropping", v2, v3, v4, v5, v6);
}

void sub_191A2D4D0(void *a1)
{
  uint64_t v1 = [a1 uniqueID];
  uint64_t v2 = [v1 UUIDString];
  sub_191931340();
  sub_19193CB40(&dword_19190B000, v3, v4, "Validating Invitation: There is no stored invitation with unique id {%@}", v5, v6, v7, v8, v9);
}

void sub_191A2D56C(void *a1)
{
  [a1 senderMergeID];
  objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [(id)sub_191943A0C() senderMergeID];
  sub_1919439E4();
  sub_19191D210(&dword_19190B000, v3, v4, "Validating Invitation: Sender merge ID for received invitation {%@} does not match the stored invitation {%@}", v5, v6, v7, v8, v9);
}

void sub_191A2D60C(void *a1)
{
  [a1 senderMergeID];
  objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [(id)sub_191943A0C() senderMergeID];
  sub_1919439E4();
  sub_19191D210(&dword_19190B000, v3, v4, "Validating Invitation: Sender mergeId {%@} does not match stored invitation's sender mergeId {%@}", v5, v6, v7, v8, v9);
}

void sub_191A2D6AC(void *a1)
{
  uint64_t v1 = [a1 expirationDate];
  sub_191931340();
  sub_19193CB40(&dword_19190B000, v2, v3, "Validating Invitation: Expiry date has passed {%@}", v4, v5, v6, v7, v8);
}

void sub_191A2D730(void *a1)
{
  [a1 state];
  uint64_t v1 = [(id)sub_191943A0C() uniqueID];
  uint64_t v2 = [v1 UUIDString];
  sub_1919439E4();
  sub_19191D210(&dword_19190B000, v3, v4, "IncomingInvitation: Invalid Invitaion state %ld. Not delivered {%@} to delegate", v5, v6, v7, v8, v9);
}

void sub_191A2D7D8()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "IncomingInvitation: No delegate found for manager:incomingInvitation:", v2, v3, v4, v5, v6);
}

void sub_191A2D80C()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "IncomingInvitation: No delegate found for manager:senderDidCancelInvitation:", v2, v3, v4, v5, v6);
}

void sub_191A2D840(void *a1)
{
  [a1 state];
  uint64_t v1 = [(id)sub_191943A0C() uniqueID];
  uint64_t v2 = [v1 UUIDString];
  sub_1919439E4();
  sub_19191D210(&dword_19190B000, v3, v4, "IncomingInvitationUpdate: Invalid Invitaion state %ld. Not delivered {%@} to delegate", v5, v6, v7, v8, v9);
}

void sub_191A2D8E8()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "IncomingInvitationUpdate: No delegate found for manager:receiverDidAcceptInvitation:", v2, v3, v4, v5, v6);
}

void sub_191A2D91C()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "IncomingInvitationUpdate: No delegate found for manager:receiverDidDeclineInvitation:", v2, v3, v4, v5, v6);
}

void sub_191A2D950()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "InvitationManager didSendWithSuccess: No invitation found with identifier {%@}", v2, v3, v4, v5, v6);
}

void sub_191A2D9B8()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "Error fetching server messaging collaborator {error: %@}", v2, v3, v4, v5, v6);
}

void sub_191A2DA20()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "No delegates found to handle incoming server message { guid: %@ }", v2, v3, v4, v5, v6);
}

void sub_191A2DA88(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "No delegates found to handle final storage indication", v1, 2u);
}

void sub_191A2DACC()
{
}

void sub_191A2DAF8()
{
}

void sub_191A2DB24()
{
}

void sub_191A2DB50()
{
}

void sub_191A2DB7C()
{
}

void sub_191A2DBA8()
{
}

void sub_191A2DBD4()
{
}

void sub_191A2DC00()
{
}

void sub_191A2DC2C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A2DCA4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with invalid event -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A2DD1C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "Event reporting feature flag is disabled, not reporting event!", v1, 2u);
}

void sub_191A2DD60(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "Event reporting disabled by server bag, not reporting event!", v1, 2u);
}

void sub_191A2DDA4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2DE10()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  uint64_t v1 = NSStringFromClass(v0);
  sub_19193CB40(&dword_19190B000, v2, v3, "Instantiating %{public}@ from daemon -- returning nil", v4, v5, v6, v7, 2u);
}

void sub_191A2DE9C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2DF34()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2DFCC()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2E064()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2E0FC()
{
}

void sub_191A2E128(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)a2 + 40);
  int v4 = 138412546;
  uint64_t v5 = a1;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "Request ID %@ error fetching VM request data %@", (uint8_t *)&v4, 0x16u);
}

void sub_191A2E1B8(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Process does not have sandbox permission to access IDS mach port -- connection will fail! {portName: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_191A2E230()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Failed IDSDaemonRequestConnection, no reply", v2, v3, v4, v5, v6);
}

void sub_191A2E264()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Daemon didn't grant connection", v2, v3, v4, v5, v6);
}

void sub_191A2E298()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Received Connection Invalid", v2, v3, v4, v5, v6);
}

void sub_191A2E2CC()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Received Connection Interrupted", v2, v3, v4, v5, v6);
}

void sub_191A2E300(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Couldn't find completion block for vm request %@", (uint8_t *)&v2, 0xCu);
}

void sub_191A2E378()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2E410()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2E4A8(uint64_t a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  sub_191931340();
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Instantiating %{public}@ from daemon -- returning nil", v5, 0xCu);
}

void sub_191A2E540()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  _os_log_fault_impl(&dword_19190B000, v0, OS_LOG_TYPE_FAULT, "Cannot save invalid device info: %@", v1, 0xCu);
}

void sub_191A2E5B4()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "Cannot delete empty CBUUID {cbuuid: %{private}@}", v2, v3, v4, v5, v6);
}

void sub_191A2E61C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2E694()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "XPC Connection Error - Failed to get localDeviceInfo {error: %{public}@}", v2, v3, v4, v5, v6);
}

void sub_191A2E6FC()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "getLocalDeviceInfoFailed {error: %{public}@}", v2, v3, v4, v5, v6);
}

void sub_191A2E764(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A2E7DC()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "XPC Connection error - Failed to get pairedDeviceInfo {error: %{public}@}", v2, v3, v4, v5, v6);
}

void sub_191A2E844()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "getPairedDeviceInfo error {error: %{public}@}", v2, v3, v4, v5, v6);
}

void sub_191A2E8AC(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136315138;
  uint64_t v2 = "-[IDSPairedDeviceManager getDeliveryStatsWithCompletionBlock:queue:]";
  _os_log_fault_impl(&dword_19190B000, log, OS_LOG_TYPE_FAULT, "%s: Empty completion block/queue", (uint8_t *)&v1, 0xCu);
}

void sub_191A2E930()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "XPC Connection error - Failed to constuct RA response dictionary {error: %{public}@}", v2, v3, v4, v5, v6);
}

void sub_191A2E998()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "Error fetching off grid state manager collaborator {error: %@}", v2, v3, v4, v5, v6);
}

void sub_191A2EA00()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "Error fetching off grid state manager collaborator { error: %@ }", v2, v3, v4, v5, v6);
}

void sub_191A2EA68()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "Failed to fetch OffGridMode: %@", v2, v3, v4, v5, v6);
}

void sub_191A2EAD0()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "Failed to fetch PublishStatus: %@", v2, v3, v4, v5, v6);
}

void sub_191A2EB38(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_fault_impl(&dword_19190B000, log, OS_LOG_TYPE_FAULT, "Failed to create IDSAuthenticationSigningResult due to a mismatch between subscription identifiers and authentication certificates! {subscriptionIdentifiers: %@, authenticationCertificates: %@}", (uint8_t *)&v3, 0x16u);
}

void sub_191A2EBC0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_19190B000, log, OS_LOG_TYPE_FAULT, "Failed to weak link FTSelectedPNRSubscription from FTServices for synchronous fetch of phone user subscription source", v1, 2u);
}

void sub_191A2EC04(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 138543618;
  uint64_t v4 = a1;
  __int16 v5 = 2114;
  uint64_t v6 = a2;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "Failing xpc connection promise {pendingInvocations: %{public}@, error: %{public}@}", (uint8_t *)&v3, 0x16u);
}

void sub_191A2EC8C(uint64_t a1, NSObject *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  int v5 = 138543362;
  uint64_t v6 = v4;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Instantiating %{public}@ from daemon -- returning nil", (uint8_t *)&v5, 0xCu);
}

void sub_191A2ED2C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2EDC8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2EE64(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "Tried to create IDSAccountController with empty service, ignoring...", v1, 2u);
}

void sub_191A2EEA8(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 8) + 40);
  uint64_t v4 = *a2;
  int v5 = 138412546;
  uint64_t v6 = v3;
  __int16 v7 = 2112;
  uint64_t v8 = v4;
  _os_log_debug_impl(&dword_19190B000, log, OS_LOG_TYPE_DEBUG, "Found existing IDSAccountController %@ for service %@", (uint8_t *)&v5, 0x16u);
}

void sub_191A2EF40()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2EFD8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F070(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_19190B000, a2, OS_LOG_TYPE_DEBUG, "%p will be removed from account controller map automatically", (uint8_t *)&v2, 0xCu);
}

void sub_191A2F0E8(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_19190B000, a2, OS_LOG_TYPE_DEBUG, "Deallocing IDSAccountController %@", (uint8_t *)&v2, 0xCu);
}

void sub_191A2F160()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F1F8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F290()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F328()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F3C0(uint64_t a1, NSObject *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 134218498;
  uint64_t v5 = a1;
  __int16 v6 = 2112;
  uint64_t v7 = v2;
  __int16 v8 = 2112;
  uint64_t v9 = v3;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "_IDSGroupSession was deallocated without being invalidated -- this may indicate an orphaned daemon session! { self: %p, uniqueID: %@, instanceID: %@ }", (uint8_t *)&v4, 0x20u);
}

void sub_191A2F450()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F4E8()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Empty account ID", v2, v3, v4, v5, v6);
}

void sub_191A2F51C()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Empty instance ID", v2, v3, v4, v5, v6);
}

void sub_191A2F550()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Empty unique ID", v2, v3, v4, v5, v6);
}

void sub_191A2F584()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F61C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F6B4()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F74C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F7E4()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F87C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F914()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2F9AC()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2FA44()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2FADC()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2FB74()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2FC0C()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "updateParticipantType: invalid _fromID", v2, v3, v4, v5, v6);
}

void sub_191A2FC40()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2FCD8(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v1 = 138412546;
  uint64_t v2 = a1;
  __int16 v3 = 2080;
  uint64_t v4 = "currentDestinationsLightweightStatus";
  _os_log_error_impl(&dword_19190B000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", (uint8_t *)&v1, 0x16u);
}

void sub_191A2FD6C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2FE04()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2FE9C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2FF34()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A2FFCC()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30064()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A300FC()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30194()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3022C()
{
}

void sub_191A30258()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A302F0()
{
}

void sub_191A3031C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A303B4()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3044C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A304E8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30580()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30618()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A306B0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30748()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A307E0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30878()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30910()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A309A8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30A40()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30AD8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30B70()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30C08()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30CA0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30D38()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30DD0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30E68()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30F00()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A30F98()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31030()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A310C8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31160()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A311F8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31290()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31328()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A313C0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31458()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A314F0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31588()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31620()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A316B8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31750()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A317E8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31880()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31918()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A319B4()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31A4C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31AE4()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31B7C(void *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [a1 value];
  int v4 = 138477827;
  uint64_t v5 = v3;
  _os_log_debug_impl(&dword_19190B000, a2, OS_LOG_TYPE_DEBUG, "Fetch groupds {groups: %{private}@}", (uint8_t *)&v4, 0xCu);
}

void sub_191A31C14()
{
  sub_19197440C();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_191A31C9C()
{
  sub_19197440C();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_191A31D24()
{
  sub_19197440C();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_191A31DAC()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31E44()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31EDC()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A31F74()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3200C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A320A4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3213C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A321D4()
{
  id v6 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D210(&dword_19190B000, v0, v1, "QueueOneIdentifier not a string! [%@]\ncallstack %@", v2, v3, v4, v5, 2u);
}

void sub_191A32284()
{
  sub_19193CAE8();
  sub_191981BD8(&dword_19190B000, v0, v1, "Invalid %@ value was given! {given: %@}");
}

void sub_191A322EC()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32384()
{
  sub_19193CAE8();
  sub_19193CB00(&dword_19190B000, v0, v1, "%@ unable to plist-serialize dictionary %@ !!");
}

void sub_191A323EC()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32488()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32520()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A325B8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32650()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A326E8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32780()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32818()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A328B0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32948()
{
  sub_191981BF8();
  sub_19193CB00(&dword_19190B000, v0, v1, "%@ not connecting to identityservicesd - no serviceName for account %@");
}

void sub_191A329B4()
{
  sub_191981BF8();
  sub_19193CB00(&dword_19190B000, v0, v1, "Failed to connect to identityservicesd; %@ %@");
}

void sub_191A32A20()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32AB8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32B50()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32BE8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "IDS sending success is NO though error is unset", v1, 2u);
}

void sub_191A32C2C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32CC4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32D5C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32DF4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32E8C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32F24()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A32FC0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A33058()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A330F0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A33188()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A33220()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A332B8(uint64_t a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [*(id *)(a1 + 40) serviceName];
  sub_191931340();
  _os_log_debug_impl(&dword_19190B000, a2, OS_LOG_TYPE_DEBUG, "Ignoring for: %@", v4, 0xCu);
}

void sub_191A33350()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  _os_log_debug_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEBUG, "Recipient topic: %@", v1, 0xCu);
}

void sub_191A333C4()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  _os_log_debug_impl(&dword_19190B000, v0, OS_LOG_TYPE_DEBUG, "Received context: %@", v1, 0xCu);
}

void sub_191A33438()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A334D0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A33568()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A33600()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A33698()
{
  sub_19193CAE8();
  sub_191981BD8(&dword_19190B000, v0, v1, "Instantiating %{public}@ from daemon -- returning nil");
}

void sub_191A33700()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A33798()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A33830()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A338C8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A33960(NSObject *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F29060] callStackSymbols];
  int v3 = 136315394;
  uint64_t v4 = "-[_IDSSessionStore sessionForAccount:fromID:identifier:transportType:]";
  __int16 v5 = 2112;
  uint64_t v6 = v2;
  _os_log_error_impl(&dword_19190B000, a1, OS_LOG_TYPE_ERROR, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", (uint8_t *)&v3, 0x16u);
}

void sub_191A33A14()
{
}

void sub_191A33A40()
{
}

void sub_191A33A6C()
{
}

void sub_191A33A98()
{
}

void sub_191A33AC4()
{
}

void sub_191A33AF0()
{
}

void sub_191A33B1C()
{
}

void sub_191A33B48()
{
}

void sub_191A33B74()
{
}

void sub_191A33BA0()
{
}

void sub_191A33BCC()
{
}

void sub_191A33BF8()
{
}

void sub_191A33C24()
{
}

void sub_191A33C50()
{
}

void sub_191A33C7C()
{
}

void sub_191A33CA8()
{
}

void sub_191A33CD4(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Failed to get pairing records {error: %{public}@}", (uint8_t *)&v2, 0xCu);
}

void sub_191A33D4C(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Failed to get pairing collaborator {error: %{public}@}", (uint8_t *)&v2, 0xCu);
}

void sub_191A33DC4()
{
}

void sub_191A33DF0()
{
}

void sub_191A33E1C()
{
}

void sub_191A33E48()
{
}

void sub_191A33E74()
{
}

void sub_191A33EA0(void *a1)
{
  uint64_t v1 = [a1 _internal];
  sub_191981BF8();
  sub_19191D210(&dword_19190B000, v2, v3, "_IDSDeviceConnection was created without an IDSDevice %@ or service %@", v4, v5, v6, v7, v8);
}

void sub_191A33F34(void *a1, int a2, NSObject *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = [a1 _internal];
  uint64_t v6 = [v5 service];
  v7[0] = 67109378;
  v7[1] = a2;
  __int16 v8 = 2112;
  uint64_t v9 = v6;
  _os_log_error_impl(&dword_19190B000, a3, OS_LOG_TYPE_ERROR, "_IDSDeviceConnection cannot be created: client is leaking sockets (%d active connection, service %@).", (uint8_t *)v7, 0x12u);
}

void sub_191A33FF4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3408C()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_191981BF8();
  _os_log_error_impl(&dword_19190B000, v0, OS_LOG_TYPE_ERROR, "Failed to connect to identityservicesd; %@ %@",
    v1,
    0x16u);
}

void sub_191A34108()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A341A0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34238()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A342D0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34368()
{
  sub_19191D1F0(*MEMORY[0x1E4F143B8]);
  sub_19198F500();
  sub_19193CB20(&dword_19190B000, v0, v1, "IDSAccountController created with service %@ serviceToken %@");
}

void sub_191A343D4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3446C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34504()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3459C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34634()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A346CC()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34764()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A347FC()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl(&dword_19190B000, v1, OS_LOG_TYPE_ERROR, "Failed to connect to identityservicesd; %@ %@",
    v2,
    0x16u);
}

void sub_191A34884()
{
  sub_19191D1F0(*MEMORY[0x1E4F143B8]);
  sub_19198F500();
  sub_19193CB20(&dword_19190B000, v0, v1, "Adding listener with ID %@ topics %@");
}

void sub_191A348F0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34988()
{
  sub_19191D1C8();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Daemon disconnected, we'll need to reload accounts for service: %@", v2, v3, v4, v5, v6);
}

void sub_191A349F4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34A8C(void *a1)
{
  uint64_t v1 = objc_msgSend(a1, "__imSetByApplyingBlock:", &unk_1EE245E08);
  sub_191931340();
  sub_19198F518(&dword_19190B000, v2, v3, "New account set %@", v4, v5, v6, v7, v8);
}

void sub_191A34B18(id *a1)
{
  uint64_t v1 = objc_msgSend(*a1, "__imSetByApplyingBlock:", &unk_1EE246608);
  sub_191931340();
  sub_19198F518(&dword_19190B000, v2, v3, "Old account set %@", v4, v5, v6, v7, v8);
}

void sub_191A34BA8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34C40()
{
  sub_19191D1F0(*MEMORY[0x1E4F143B8]);
  sub_19191D1C8();
  sub_19191D1AC(&dword_19190B000, v0, v1, "New enabled accounts set %@", v2, v3, v4, v5, v6);
}

void sub_191A34CA8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34D40()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34DD8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34E70()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34F08()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A34FA0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A35038()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A350D0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A35168()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A35200()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A35298()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A35330()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "**** Account added has no uniqueID **** %@", v2, v3, v4, v5, v6);
}

void sub_191A35398(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Account added was of unknown account type %d, bailing...", (uint8_t *)v2, 8u);
}

void sub_191A35410()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A354A8()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "**** Account removed has no uniqueID **** %@", v2, v3, v4, v5, v6);
}

void sub_191A35510()
{
  sub_191931340();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Did not find an existing account to remove with unique ID %@", v2, v3, v4, v5, v6);
}

void sub_191A35578()
{
  sub_19193CAE8();
  sub_19193CB20(&dword_19190B000, v0, v1, "Received account removed %@ for topic %@");
}

void sub_191A355E0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A35678()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "**** Account updated has no uniqueID **** %@", v2, v3, v4, v5, v6);
}

void sub_191A356E0()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "Could not create IDSAccount with info %@", v2, v3, v4, v5, v6);
}

void sub_191A35748(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Account updated was of unknown account type %d, ignoring...", (uint8_t *)v2, 8u);
}

void sub_191A357C0()
{
  sub_191931340();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Did not find an existing account to update with unique ID %@, creating one", v2, v3, v4, v5, v6);
}

void sub_191A35828()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A358C0()
{
  sub_191931340();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Removing accounts %@", v2, v3, v4, v5, v6);
}

void sub_191A35928()
{
  sub_191931340();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Accounts Modified %@", v2, v3, v4, v5, v6);
}

void sub_191A35990()
{
  sub_191931340();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Original accounts %@", v2, v3, v4, v5, v6);
}

void sub_191A359F8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A35A90()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A35B28()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Account enabled - no unique ID, bailing...", v2, v3, v4, v5, v6);
}

void sub_191A35B5C()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Account enabled - no service, bailing...", v2, v3, v4, v5, v6);
}

void sub_191A35B90()
{
  sub_191931340();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Adding enabled account %@", v2, v3, v4, v5, v6);
}

void sub_191A35BF8()
{
  sub_19193CAE8();
  sub_19193CB20(&dword_19190B000, v0, v1, "Received account enabled %@ on service %@");
}

void sub_191A35C60()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A35CF8()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Account disabled - no unique ID, bailing...", v2, v3, v4, v5, v6);
}

void sub_191A35D2C()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Account disabled - no service, bailing...", v2, v3, v4, v5, v6);
}

void sub_191A35D60()
{
  sub_191931340();
  sub_19191D1AC(&dword_19190B000, v0, v1, "Removing enabled account %@", v2, v3, v4, v5, v6);
}

void sub_191A35DC8()
{
  sub_19193CAE8();
  sub_19193CB20(&dword_19190B000, v0, v1, "Received account disabled %@ on service %@");
}

void sub_191A35E30()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A35EC8()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "Error fetching pinned identity collaborator {error: %@}", v2, v3, v4, v5, v6);
}

void sub_191A35F30()
{
}

void sub_191A35F5C()
{
}

void sub_191A35F88()
{
}

void sub_191A35FB4(uint64_t a1, NSObject *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  int v5 = 138543362;
  uint8_t v6 = v4;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Instantiating %{public}@ from daemon -- returning nil", (uint8_t *)&v5, 0xCu);
}

void sub_191A36054()
{
  uint64_t v0 = IDSDataProtectionClassStringFromDataProtectionClass();
  sub_1919942B4();
  sub_19191D210(&dword_19190B000, v1, v2, "Failed to get data for publicIdentity {dataProtectionClass: %{public}@, error: %{public}@}", v3, v4, v5, v6, v7);
}

void sub_191A360F4()
{
  uint64_t v0 = IDSDataProtectionClassStringFromDataProtectionClass();
  sub_1919942B4();
  sub_19191D210(&dword_19190B000, v1, v2, "Failed to get data for fullIdentity {dataProtectionClass: %{public}@, error: %{public}@}", v3, v4, v5, v6, v7);
}

void sub_191A36194()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "Error fetching key transparency collaborator {error: %@}", v2, v3, v4, v5, v6);
}

void sub_191A361FC()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getkKTApplicationIdentifierIDS(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"IDSKeyTransparencyManager.m", 19, @"%s", dlerror());

  __break(1u);
}

void sub_191A36274()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getkKTApplicationIdentifierIDSFaceTime(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"IDSKeyTransparencyManager.m", 20, @"%s", dlerror());

  __break(1u);
}

void sub_191A362EC()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getkKTApplicationIdentifierIDSMultiplex(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"IDSKeyTransparencyManager.m", 21, @"%s", dlerror());

  __break(1u);
}

void sub_191A36364(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A363DC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil KT application -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A36454(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A364CC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil KT application -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A36544(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A365BC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil KT application -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A36634(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A366AC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil optInOutRequest -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A36724()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getKTSelfVerificationInfoClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"IDSKeyTransparencyManager.m", 17, @"Unable to find class %s", "KTSelfVerificationInfo");

  __break(1u);
}

void sub_191A367A0(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *TransparencyLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"IDSKeyTransparencyManager.m", 14, @"%s", *a1);

  __break(1u);
}

void sub_191A36820()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A368B8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A36950()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A369E8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A36A80()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A36B18()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A36BB0()
{
}

void sub_191A36BDC()
{
}

void sub_191A36C08()
{
}

void sub_191A36C34()
{
}

void sub_191A36C60()
{
}

void sub_191A36C8C(uint64_t a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)a1 + 40);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl(&dword_19190B000, a2, OS_LOG_TYPE_DEBUG, "Client request for IDSCopyLocalDeviceUniqueID: %@", (uint8_t *)&v3, 0xCu);
}

void sub_191A36D0C()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  _os_log_error_impl(&dword_19190B000, v0, OS_LOG_TYPE_ERROR, "Error fetching baa signer collaborator {error: %@}", v1, 0xCu);
}

void sub_191A36D80()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A36E08()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A36E90(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A36EC8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A36F00(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A36F38()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl(&dword_19190B000, v1, OS_LOG_TYPE_ERROR, "Host signature failed {sigError: %@, altSigError: %@", v2, 0x16u);
}

void sub_191A36FBC()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  _os_log_fault_impl(&dword_19190B000, v0, OS_LOG_TYPE_FAULT, "Failed signing legacy baa data in baa signer {error : %@}", v1, 0xCu);
}

void sub_191A37030()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  _os_log_fault_impl(&dword_19190B000, v0, OS_LOG_TYPE_FAULT, "Failed signing baa data in baa signer {error : %@}", v1, 0xCu);
}

void sub_191A370A4()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A3712C()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A371B4()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A3723C()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A372C4()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A3734C()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A373D4()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A3745C()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A374E4()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A3756C()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A375F4()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A3767C()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A37704()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A3778C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "Tried to create an account with empty service name, bailing...", v1, 2u);
}

void sub_191A377D0(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Tried to create an account with unknown account type %d, bailing...", (uint8_t *)v2, 8u);
}

void sub_191A37848()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A378E0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A37978()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A37A10()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A37AA8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A37B40()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A37BD8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A37C70()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A37D08()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A37DA0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A37E38()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A37ED0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A37F68()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38000()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38098()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38130()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A381C8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38260()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A382F8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38390()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38428()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A384C0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38558()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A385F0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38688()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38720()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A387B8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38850()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A388E8(id *a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = objc_msgSend(*a1, "__imArrayByApplyingBlock:", &unk_1EE245E88);
  v4[0] = 67109120;
  v4[1] = [v3 count];
  _os_log_debug_impl(&dword_19190B000, a2, OS_LOG_TYPE_DEBUG, "Devices updated %d", (uint8_t *)v4, 8u);
}

void sub_191A38990(uint8_t *a1, void *a2, void *a3, NSObject *a4)
{
  uint8_t v7 = [a2 _internal];
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl(&dword_19190B000, a4, OS_LOG_TYPE_DEBUG, "Adding IDSDevice %@", a1, 0xCu);
}

void sub_191A38A08()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38AA0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38B38()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38BD0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38C68()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38D00()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38D98()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38E30()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38EC8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38F60()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A38FF8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A39090(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_19190B000, log, OS_LOG_TYPE_DEBUG, "Local account, ignoring request for keychain registration", v1, 2u);
}

void sub_191A390D4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3916C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A39204()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3929C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A39334()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A393CC(void *a1)
{
  uint64_t v2 = [a1 serviceName];
  [a1 accountType];
  sub_1919AC7F4();
  sub_1919AC818(&dword_19190B000, v3, v4, "Registered URIs for %@ with service type %@ account type %d", v5, v6, v7, v8, v9);
}

void sub_191A39464()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A394FC()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A39594(void *a1)
{
  uint64_t v2 = [a1 serviceName];
  [a1 accountType];
  sub_1919AC7F4();
  sub_1919AC818(&dword_19190B000, v3, v4, "Registration cert for %@ with service type %@ account type %d", v5, v6, v7, v8, v9);
}

void sub_191A3962C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A396C4(void *a1)
{
  uint64_t v2 = [a1 serviceName];
  [a1 accountType];
  sub_1919AC7F4();
  sub_1919AC818(&dword_19190B000, v3, v4, "Push token for %@ with service type %@ account type %d", v5, v6, v7, v8, v9);
}

void sub_191A3975C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A397F4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3988C()
{
  sub_191981BF8();
  sub_19193CB00(&dword_19190B000, v0, v1, "%@ not connecting to identityservicesd - no serviceName for config %@");
}

void sub_191A398F8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A39990()
{
  sub_19193CAE8();
  sub_19193CB20(&dword_19190B000, v0, v1, "Account %@ received registration status changed: %@");
}

void sub_191A399F8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A39A90()
{
  sub_19193CAE8();
  sub_19193CB20(&dword_19190B000, v0, v1, "Account %@ received aliases changed: %@");
}

void sub_191A39AF8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A39B90(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_19190B000, a2, OS_LOG_TYPE_DEBUG, "Account received %@ vetted aliases changed", (uint8_t *)&v2, 0xCu);
}

void sub_191A39C08()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A39CA0()
{
  sub_19193CAE8();
  sub_19193CB20(&dword_19190B000, v0, v1, "Account received %@ profile changed: %@");
}

void sub_191A39D08()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A39DA0()
{
  sub_19193CAE8();
  sub_19193CB20(&dword_19190B000, v0, v1, "Account %@ received login changed: %@");
}

void sub_191A39E08()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A39EA0()
{
  sub_19193CAE8();
  sub_19193CB20(&dword_19190B000, v0, v1, "Account received %@ displayName changed: %@");
}

void sub_191A39F08()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A39FA0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3A038()
{
  sub_19193CAE8();
  sub_19193CB20(&dword_19190B000, v0, v1, "Account received %@ dependentDevicesUpdated %@");
}

void sub_191A3A0A0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3A138()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3A1D0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3A268(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_19190B000, a2, OS_LOG_TYPE_DEBUG, "Account %@ received request to refresh registration", (uint8_t *)&v2, 0xCu);
}

void sub_191A3A2E0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3A378(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Cannot force remove an account that is not a temporary phone account: %@", (uint8_t *)&v2, 0xCu);
}

void sub_191A3A3F0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3A488()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3A520(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Call made to deprecated IDSService API with service domain %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_191A3A598()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3A630()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3A6C8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A3A740(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A3A7B8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A3A830(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A3A8A8(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Unable to retrieve firewall, invalid service identifier -- failing {self: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_191A3A920()
{
}

void sub_191A3A94C()
{
}

void sub_191A3A978()
{
}

void sub_191A3A9A4()
{
}

void sub_191A3A9D0()
{
}

void sub_191A3A9FC()
{
}

void sub_191A3AA28()
{
}

void sub_191A3AA54()
{
}

void sub_191A3AA80()
{
}

void sub_191A3AAAC()
{
}

void sub_191A3AAD8()
{
}

void sub_191A3AB04()
{
}

void sub_191A3AB30()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  uint64_t v1 = NSStringFromClass(v0);
  sub_191931340();
  sub_19193CB40(&dword_19190B000, v2, v3, "Instantiating %{public}@ from daemon -- returning", v4, v5, v6, v7, v8);
}

void sub_191A3ABB8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3AC50()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  uint64_t v1 = NSStringFromClass(v0);
  sub_191931340();
  sub_19193CB40(&dword_19190B000, v2, v3, "Instantiating %{public}@ from daemon -- returning nil", v4, v5, v6, v7, v8);
}

void sub_191A3ACDC()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "No definition found for service: %@. IDSService cannot be created!", v2, v3, v4, v5, v6);
}

void sub_191A3AD44()
{
  sub_1919D8A04();
  *uint64_t v1 = 136315394;
  sub_1919D89F0(v2, (uint64_t)v1, (uint64_t)"-[_IDSService initWithService:commands:manuallyAckMessages:delegateContext:]");
  sub_1919D89D8(&dword_19190B000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);
}

void sub_191A3AD98()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3AE30()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3AEC8()
{
  sub_1919D8A04();
  *uint64_t v1 = 136315394;
  sub_1919D89F0(v2, (uint64_t)v1, (uint64_t)"-[_IDSService daemonConnected]");
  sub_1919D89D8(&dword_19190B000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);
}

void sub_191A3AF1C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3AFB4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B04C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B0E8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B180()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B218()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B2B0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B348()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B3E0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B478()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B510()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B5A8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B640()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B6D8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B770()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B808()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B8A0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B938()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3B9D0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3BA68()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3BB00()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19193CAE8();
  _os_log_fault_impl(&dword_19190B000, v0, OS_LOG_TYPE_FAULT, "*** Account wants to drop devicesChanged callback {account.isTransientAllowlistedAccount: %@, account.isFirstGDRAllowlistedAccount: %@}", v1, 0x16u);
}

void sub_191A3BB78()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3BC10()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  _os_log_fault_impl(&dword_19190B000, v0, OS_LOG_TYPE_FAULT, "Given resource URL appears unacceptable! [%@]", v1, 0xCu);
}

void sub_191A3BC84(int *a1, uint8_t *buf, os_log_t log)
{
  int v3 = *a1;
  *(_DWORD *)long long buf = 67109120;
  *((_DWORD *)buf + 1) = v3;
  _os_log_fault_impl(&dword_19190B000, log, OS_LOG_TYPE_FAULT, "Failed to consume sandbox extension! {errno: %d}", buf, 8u);
}

void sub_191A3BCD0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3BD6C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3BE08(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A3BE78()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3BF10()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3BFA8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C040()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C0D8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C170()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C208()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C2A0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C338()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C3D0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C468()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C500()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C598()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C630()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C6C8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C760()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C7F8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C890()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C928()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3C9C0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3CA58()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3CAF0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3CB88()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3CC20()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3CCB8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3CD50()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3CDE8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3CE80()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3CF18()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3CFB0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3D048()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3D0E0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3D178()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19193CAE8();
  sub_1919D89D8(&dword_19190B000, v0, (uint64_t)v0, "Told to diversify an invalid key type {options: %@, self: %@}", v1);
}

void sub_191A3D1E8()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Ignoring sub-services update, couldn't find active device", v2, v3, v4, v5, v6);
}

void sub_191A3D21C(void *a1)
{
  uint64_t v1 = [a1 _internal];
  sub_191931340();
  sub_19193CB40(&dword_19190B000, v2, v3, "Ignoring sub-services update, couldn't find uniqueID for device %@", v4, v5, v6, v7, v8);
}

void sub_191A3D2A0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3D338()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Triggering Internal resend of Sub Services to daemon", v2, v3, v4, v5, v6);
}

void sub_191A3D36C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3D404()
{
  sub_1919D8A04();
  *uint64_t v1 = 136315394;
  sub_1919D89F0(v2, (uint64_t)v1, (uint64_t)"-[_IDSService setProtobufAction:forProtobufType:isResponse:]");
  sub_1919D89D8(&dword_19190B000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);
}

void sub_191A3D458()
{
  sub_1919D8A04();
  *uint64_t v1 = 136315394;
  sub_1919D89F0(v2, (uint64_t)v1, (uint64_t)"-[_IDSService protobufActionForType:isResponse:]");
  sub_1919D89D8(&dword_19190B000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);
}

void sub_191A3D4AC()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Sending message on a client that is not sandboxed!", v2, v3, v4, v5, v6);
}

void sub_191A3D4E0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3D578()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3D610()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3D6A8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3D740()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3D7D8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3D870()
{
  sub_1919D8A04();
  *uint64_t v1 = 136315394;
  sub_1919D89F0(v2, (uint64_t)v1, (uint64_t)"-[_IDSService sendProtobuf:fromAccount:toDestinations:priority:options:identifier:error:]");
  sub_1919D89D8(&dword_19190B000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);
}

void sub_191A3D8C4()
{
  sub_1919D8A04();
  *uint64_t v1 = 136315394;
  sub_1919D89F0(v2, (uint64_t)v1, (uint64_t)"-[_IDSService sendData:fromAccount:toDestinations:priority:options:identifier:error:]");
  sub_1919D89D8(&dword_19190B000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);
}

void sub_191A3D918()
{
  sub_1919D8A04();
  *uint64_t v1 = 136315394;
  sub_1919D89F0(v2, (uint64_t)v1, (uint64_t)"-[_IDSService sendAccessoryData:toAccessoryID:accessToken:options:identifier:error:]");
  sub_1919D89D8(&dword_19190B000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);
}

void sub_191A3D96C()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "setWakingPushPriority - invalid priority", v2, v3, v4, v5, v6);
}

void sub_191A3D9A0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3DA38()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3DAD0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3DB68()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3DC00()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3DC98()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3DD30()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3DDC8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3DE60()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3DEF8()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3DF90()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3E028(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A3E0A0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3E138()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3E1D0()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3E268()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3E300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *MEMORY[0x1E4F6B0F0];
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2080;
  uint64_t v7 = "resourceTransferMessageDict";
  sub_1919D89D8(&dword_19190B000, MEMORY[0x1E4F14500], a3, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", (uint8_t *)&v4);
}

void sub_191A3E398()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3E430()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3E4C8()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "No valid service identifier to report spam.", v2, v3, v4, v5, v6);
}

void sub_191A3E4FC()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "No spam message type specified.", v2, v3, v4, v5, v6);
}

void sub_191A3E530()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "No message type specified.", v2, v3, v4, v5, v6);
}

void sub_191A3E564()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3E5FC()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Call made to manually ack a message, however this service does not support manually acking of messages", v2, v3, v4, v5, v6);
}

void sub_191A3E630()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3E6C8()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "sendCertifiedDeliveryReceipt given nil certified delivery context", v2, v3, v4, v5, v6);
}

void sub_191A3E6FC(void *a1)
{
  uint64_t v1 = [a1 service];
  sub_19191D210(&dword_19190B000, v2, v3, "sendCertifiedDeliveryReceipt context passed to incorrect service { context.service: %@, service: %@ }", v4, v5, v6, v7, 2u);
}

void sub_191A3E79C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3E834()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3E8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = [*(id *)(a2 + 120) serviceName];
  sub_19191D210(&dword_19190B000, v2, v3, "ABORT: %@ (initializing service %@) IS NOT SANDBOXED", v4, v5, v6, v7, 2u);
}

void sub_191A3E970(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Error requesting client: %@", (uint8_t *)&v2, 0xCu);
}

void sub_191A3E9E8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3EA60(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3EAD8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil subscription -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3EB50(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3EBC8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil subscription -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3EC40(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3ECB8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil subscription -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3ED30(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3EDA8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil alias -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3EE20()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "Error fetching registration collaborator {error: %@}", v2, v3, v4, v5, v6);
}

void sub_191A3EE88(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3EF00(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil alias -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3EF78(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3EFF0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil alias -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3F068(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3F0E0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil subscription -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3F158(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil subscription -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3F1D0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil subscription -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3F248(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil alias -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3F2C0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil alias -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3F338(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_191931324(&dword_19190B000, a1, a3, "%s called with nil alias -- returning", a5, a6, a7, a8, 2u);
}

void sub_191A3F3B0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A3F424(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "handleGroupSessionKeyValues: keyValues is not a dictionary. Is: %@", (uint8_t *)&v2, 0xCu);
}

void sub_191A3F49C()
{
  sub_1919E22CC();
  sub_19193CB00(&dword_19190B000, v0, v1, "failed to create keyValueDelivery for session %@: %@");
}

void sub_191A3F508()
{
  sub_1919E22CC();
  sub_19193CB00(&dword_19190B000, v0, v1, "failed to get keyValueDelivery for session %@: %@");
}

void sub_191A3F574()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  sub_1919E3A60(&dword_19190B000, v0, v1, "Adding new account %@ to tracked accounts list", v2);
}

void sub_191A3F5E0(void *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [a1 dictionaryRepresentation];
  sub_191931340();
  sub_1919E3A60(&dword_19190B000, a2, v4, "Creating new device registration %@", v5);
}

void sub_191A3F66C()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  sub_1919E3A60(&dword_19190B000, v0, v1, "Deleting unused device info %@", v2);
}

void sub_191A3F6D8()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  sub_1919E3A60(&dword_19190B000, v0, v1, "Deleting unused registered device info %@", v2);
}

void sub_191A3F744(void *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [a1 idsIdentifierOverride];
  sub_191931340();
  sub_1919E3A60(&dword_19190B000, a2, v4, "Adding new device to known devices array %@", v5);
}

void sub_191A3F7D0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3F868()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3F900()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3F998()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3FA30()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3FAC8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3FB60()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3FBF8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3FC90()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3FD28()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3FDC0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3FE58()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3FEF0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A3FF88()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40020()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A400B8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40150()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A401E8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40280()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40318()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A403B0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40448()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A404E0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40578()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40610()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A406A8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40740()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A407D8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40870()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40908()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A409A0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40A38()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40AD0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40B68()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40C00()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40C98()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40D30()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40DC8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40E60()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40EF8()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A40F90()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A41028()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A410C0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A41158()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A411F0(uint64_t *a1, void *a2, NSObject *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = [a2 value];
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 2112;
  uint8_t v9 = v5;
  _os_log_error_impl(&dword_19190B000, a3, OS_LOG_TYPE_ERROR, "Destination \"%@\" not found in id query results %@. Verify destination is a properly formed IDS destination (and not just the handle string).", (uint8_t *)&v6, 0x16u);
}

void sub_191A412A4(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *TransparencyLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_IDSIDQueryController.m", 24, @"%s", *a1);

  __break(1u);
}

void sub_191A41324()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getKTVerifierResultClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"_IDSIDQueryController.m", 25, @"Unable to find class %s", "KTVerifierResult");

  __break(1u);
}

void sub_191A413A0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A413D8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A41410(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A41448(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 134218240;
  uint64_t v4 = a1;
  __int16 v5 = 1024;
  int v6 = a2;
  _os_log_debug_impl(&dword_19190B000, log, OS_LOG_TYPE_DEBUG, "%p - split into part %d", (uint8_t *)&v3, 0x12u);
}

void sub_191A414D0(void *a1)
{
  uint64_t v1 = [a1 encryptionProperties];
  uint64_t v2 = [v1 authTag];
  int v3 = [v2 debugDescription];
  sub_1919F59C4();
  sub_1919F59A4(&dword_19190B000, v4, v5, "%p - raw AT %@", v6, v7, v8, v9, v10);
}

void sub_191A41588(void *a1)
{
  uint64_t v1 = [a1 message];
  uint64_t v2 = [v1 debugDescription];
  sub_1919F59C4();
  sub_1919F59A4(&dword_19190B000, v3, v4, "%p - raw %@", v5, v6, v7, v8, v9);
}

void sub_191A41628(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = +[IDSDaemonController sharedInstance];
  uint64_t v7 = [v6 listener];
  uint64_t v8 = [v7 maxIMLPayloadSize];
  uint8_t v9 = [a1 message];
  int v10 = 134218752;
  uint64_t v11 = a1;
  __int16 v12 = 2048;
  uint64_t v13 = a2;
  __int16 v14 = 2048;
  uint64_t v15 = v8;
  __int16 v16 = 2048;
  uint64_t v17 = [v9 length];
  _os_log_debug_impl(&dword_19190B000, a3, OS_LOG_TYPE_DEBUG, "%p - splitting message {payloadSizeRemaining: %lld, maxSize: %lld, length: %lld}", (uint8_t *)&v10, 0x2Au);
}

void sub_191A41734(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 debugDescription];
  sub_1919F59C4();
  sub_1919F59A4(&dword_19190B000, v3, v4, "%p - payload call raw %@", v5, v6, v7, v8, v9);
}

void sub_191A417C8(uint64_t a1, void *a2)
{
  [a2 length];
  sub_1919F59A4(&dword_19190B000, v2, v3, "%p - payload call, added msg {len: %lld}", v4, v5, v6, v7, 0);
}

void sub_191A41858()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A418F0()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A41988()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A41A20()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  uint64_t v1 = NSStringFromClass(v0);
  sub_19193CB40(&dword_19190B000, v2, v3, "Instantiating %{public}@ from daemon -- returning nil", v4, v5, v6, v7, 2u);
}

void sub_191A41AB0()
{
  __assert_rtn("-[IDSDatagramChannel underlyingFileDescriptor]", "IDSDataChannels.m", 911, "_internal->_operationMode == IDSDatagramChannelOperationModeFileDescriptor");
}

void sub_191A41ADC()
{
}

void sub_191A41B08()
{
}

void sub_191A41B34()
{
  __assert_rtn("-[IDSDatagramChannel start]", "IDSDataChannels.m", 2724, "_internal->_operationMode == IDSDatagramChannelOperationModeDispatch");
}

void sub_191A41B60()
{
  __assert_rtn("-[IDSDatagramChannel _writeToOSChannelDatagrams:datagramSizes:datagramInfo:datagramOptions:datagramCount:completionHandler:]", "IDSDataChannels.m", 2766, "_internal->_operationMode == IDSDatagramChannelOperationModeFileDescriptor");
}

void sub_191A41B8C()
{
  __assert_rtn("-[IDSDatagramChannel _writeToNWConnectionArrayOfDatagrams:datagramSizes:datagramInfo:datagramOptions:datagramCount:completionHandler:]", "IDSDataChannels.m", 2987, "_internal->_operationMode == IDSDatagramChannelOperationModeDispatch");
}

void sub_191A41BB8()
{
}

void sub_191A41BE4()
{
}

void sub_191A41C10()
{
  __assert_rtn("-[IDSDatagramChannel readyToRead]", "IDSDataChannels.m", 3252, "_internal->_operationMode == IDSDatagramChannelOperationModeFileDescriptor");
}

void sub_191A41C3C(unsigned __int8 a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Could not reportDictionary with type %d because dictionary is too large", (uint8_t *)v2, 8u);
}

void sub_191A41CB8()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "_noteSentStop - no state machine found, rejecting {identifier: %@}", v2, v3, v4, v5, v6);
}

void sub_191A41D20()
{
  sub_191A0FA98();
  uint64_t v1 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v0, "state"));
  sub_1919F59C4();
  sub_19191D210(&dword_19190B000, v2, v3, "_noteSentStop - state machine not in expected state, rejecting {identifier: %@, stateMachine.state: %@}", v4, v5, v6, v7, v8);
}

void sub_191A41DC4()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "_noteAckTimer - no state machine found, rejecting {identifier: %@}", v2, v3, v4, v5, v6);
}

void sub_191A41E2C()
{
  sub_191A0FA98();
  uint64_t v1 = [v0 incomingMessagesWithoutAcks];
  sub_1919F59C4();
  sub_19191D210(&dword_19190B000, v2, v3, "_noteAckTimer - moving back into fetching {identifier: %@, incomingMessagesWithoutAcks: %@}", v4, v5, v6, v7, v8);
}

void sub_191A41EBC()
{
  sub_191A0FA98();
  uint64_t v1 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v0, "state"));
  sub_1919F59C4();
  sub_19191D210(&dword_19190B000, v2, v3, "_noteAckTimer - state machine not in expected state, rejecting {identifier: %@, stateMachine.state: %@}", v4, v5, v6, v7, v8);
}

void sub_191A41F60()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "_noteReceivedStop - no state machine found, rejecting {identifier: %@}", v2, v3, v4, v5, v6);
}

void sub_191A41FC8(uint64_t a1, void *a2)
{
  uint64_t v2 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a2, "state"));
  sub_1919439E4();
  sub_19191D210(&dword_19190B000, v3, v4, "_noteReceivedStop - state machine not in expected state, rejecting {identifier: %@, stateMachine.state: %@}", v5, v6, v7, v8, v9);
}

void sub_191A42074()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "_noteSentFetch - no state machine found, rejecting {identifier: %@}", v2, v3, v4, v5, v6);
}

void sub_191A420DC(uint64_t a1, void *a2)
{
  uint64_t v2 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a2, "state"));
  sub_1919439E4();
  sub_19191D210(&dword_19190B000, v3, v4, "_noteSentFetch - state machine not in expected state, rejecting {identifier: %@, stateMachine.state: %@}", v5, v6, v7, v8, v9);
}

void sub_191A42188()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "_noteSentCancel - no state machine found, rejecting {identifier: %@}", v2, v3, v4, v5, v6);
}

void sub_191A421F0()
{
  sub_191A0FA98();
  uint64_t v1 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v0, "state"));
  sub_1919F59C4();
  sub_19191D210(&dword_19190B000, v2, v3, "_noteSentCancel - state machine not in expected state, rejecting {identifier: %@, stateMachine.state: %@}", v4, v5, v6, v7, v8);
}

void sub_191A42294(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_19190B000, log, OS_LOG_TYPE_ERROR, "_noteAckedMessage - no message identifier, rejecting", v1, 2u);
}

void sub_191A422D8(void *a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [a1 incomingMessagesWithoutAcks];
  sub_191931340();
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "_noteAckedMessage - more messages to be acked remain {incomingMessagesWithoutAcks: %@", v4, 0xCu);
}

void sub_191A4236C()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_191931340();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl(&dword_19190B000, v1, OS_LOG_TYPE_ERROR, "Context has a service that does not match parakeet! {contextService: %@, context: %@}", v2, 0x16u);
}

void sub_191A423F0()
{
  sub_191931340();
  sub_191931324(&dword_19190B000, v0, v1, "No delegate to handle incoming server message { context: %@ }", v2, v3, v4, v5, v6);
}

void sub_191A42458(uint64_t *a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Client setup service -- failed check in! {service: %@}", (uint8_t *)&v3, 0xCu);
}

void sub_191A424D4()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4256C()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A42604()
{
  uint64_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4269C()
{
}

void sub_191A426C8()
{
}

void sub_191A426F4()
{
}

void sub_191A42720()
{
}

void sub_191A4274C()
{
}

void sub_191A42778()
{
  sub_19191D1A0();
  _os_log_fault_impl(&dword_19190B000, v0, OS_LOG_TYPE_FAULT, "Client attempted to initialize feature toggler with nil service identifier or nil queue", v1, 2u);
}

void sub_191A427B8()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Client retrieving feature toggle with no completion block", v2, v3, v4, v5, v6);
}

void sub_191A427EC()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Client retrieving feature toggle with no feature ID", v2, v3, v4, v5, v6);
}

void sub_191A42820(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Error fetching feature toggler collaborator {error: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_191A42898()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Client updating feature toggle with no completion block", v2, v3, v4, v5, v6);
}

void sub_191A428CC()
{
  sub_19191D1A0();
  sub_19193134C(&dword_19190B000, v0, v1, "Client setting feature toggle with no feature ID", v2, v3, v4, v5, v6);
}

void sub_191A42900(void *a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v3 = 134217984;
  uint64_t v4 = [a1 state];
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Client setting feature toggle to invalid state %lu", (uint8_t *)&v3, 0xCu);
}

void sub_191A4298C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A42A24()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A42ABC()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A42B54()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A42BEC()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A42C84()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A42D1C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A42DB4()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A42E4C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A42EE4()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A42F7C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A43014()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A430AC()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A43144()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A431DC()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A43274()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4330C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A433A4()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4343C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A434B4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A4352C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A435A4()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4363C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A436D4()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4376C()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A43804()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4389C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A43914()
{
  os_log_t v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A439AC()
{
  sub_191A22224();
  strerror(v0);
  sub_191A22214();
  sub_191A221D4();
  sub_191A221F4(&dword_19190B000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
}

void sub_191A43A3C()
{
  sub_191A22224();
  strerror(v0);
  sub_191A22214();
  sub_191A221D4();
  sub_191A221F4(&dword_19190B000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
}

void sub_191A43ACC()
{
  sub_191A22224();
  strerror(v0);
  sub_191A22214();
  sub_191A221D4();
  sub_191A221F4(&dword_19190B000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
}

void sub_191A43B5C()
{
  sub_191A22224();
  strerror(v0);
  sub_191A22214();
  sub_191A221D4();
  sub_191A221F4(&dword_19190B000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
}

void sub_191A43BEC()
{
  sub_191A22224();
  strerror(v0);
  sub_191A22214();
  sub_191A221D4();
  sub_191A221F4(&dword_19190B000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
}

void sub_191A43C7C()
{
  sub_191A22224();
  strerror(v0);
  sub_191A22214();
  sub_191A221D4();
  sub_191A221F4(&dword_19190B000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
}

void sub_191A43D0C()
{
  sub_191A22224();
  strerror(v0);
  sub_191A22214();
  sub_191A221D4();
  sub_191A221F4(&dword_19190B000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
}

void sub_191A43D9C()
{
  sub_191A22224();
  strerror(v0);
  sub_191A22214();
  sub_191A221D4();
  sub_191A221F4(&dword_19190B000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
}

void sub_191A43E2C()
{
  sub_191A22224();
  strerror(v0);
  sub_191A22214();
  sub_191A221D4();
  sub_191A221F4(&dword_19190B000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
}

void sub_191A43EBC()
{
  sub_191A22224();
  strerror(v0);
  sub_191A22214();
  sub_191A221D4();
  sub_191A221F4(&dword_19190B000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
}

void sub_191A43F4C()
{
  sub_191A22224();
  strerror(v0);
  sub_191A22214();
  sub_191A221D4();
  sub_191A221F4(&dword_19190B000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
}

void sub_191A43FDC()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4407C()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44114()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A441AC()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44244()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A442DC()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44374()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4440C()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A444A4()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4453C()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A445D4()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4466C()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44704()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4479C()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44834()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A448CC()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44964()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A449FC()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44A94()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44B2C()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44BC4()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44C5C()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44CF4()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44D8C()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44E24()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A44EBC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A44F34(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A44FAC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_191A45024()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A450BC()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A45154()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A451EC()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A45284()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4531C()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A453B4()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4544C()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A454E4()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A4557C()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A45614()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A456AC()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A45744()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A457DC()
{
  id v0 = [MEMORY[0x1E4F29060] callStackSymbols];
  sub_19191D1FC();
  sub_19191D210(&dword_19190B000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);
}

void sub_191A45874()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A458FC()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A45984()
{
  sub_1919A53E4();
  sub_191974420(&dword_19190B000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_191A45A0C(uint64_t a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)a1 + 40);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Error fetching sync activity monitor collaborator {err: %@}", (uint8_t *)&v3, 0xCu);
}

void sub_191A45A8C(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19190B000, a2, OS_LOG_TYPE_ERROR, "Error fetching activity monitor collaborator {error: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_191A45B04(NSObject *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v2 = [MEMORY[0x1E4F29060] callStackSymbols];
  int v3 = 136315394;
  uint64_t v4 = "-[IDSRealTimeEncryptionProxy initWithAccount:]";
  __int16 v5 = 2112;
  uint64_t v6 = v2;
  _os_log_error_impl(&dword_19190B000, a1, OS_LOG_TYPE_ERROR, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", (uint8_t *)&v3, 0x16u);
}

void sub_191A45BB8(void *a1, void *a2, NSObject *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = [a1 recipientAlias];
  uint64_t v7 = [a2 aliasToAccountsMap];
  int v8 = 138478339;
  uint8_t v9 = v6;
  __int16 v10 = 2113;
  uint64_t v11 = v7;
  __int16 v12 = 2113;
  uint64_t v13 = a1;
  _os_log_error_impl(&dword_19190B000, a3, OS_LOG_TYPE_ERROR, "Failed to get account for recipient alias {alias: %{private}@, accounts: %{private}@, message: %{private}@}", (uint8_t *)&v8, 0x20u);
}

CCCryptorStatus CCCryptorCreateWithMode(CCOperation op, CCMode mode, CCAlgorithm alg, CCPadding padding, const void *iv, const void *key, size_t keyLength, const void *tweak, size_t tweakLength, int numRounds, CCModeOptions options, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1F40C94C0](*(void *)&op, *(void *)&mode, *(void *)&alg, *(void *)&padding, iv, key, keyLength, tweak);
}

uint64_t CCCryptorGCMAddAAD()
{
  return MEMORY[0x1F40C94D8]();
}

uint64_t CCCryptorGCMDecrypt()
{
  return MEMORY[0x1F40C94E0]();
}

uint64_t CCCryptorGCMEncrypt()
{
  return MEMORY[0x1F40C94E8]();
}

uint64_t CCCryptorGCMFinalize()
{
  return MEMORY[0x1F40C94F0]();
}

uint64_t CCCryptorGCMReset()
{
  return MEMORY[0x1F40C9508]();
}

uint64_t CCCryptorGCMSetIV()
{
  return MEMORY[0x1F40C9510]();
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1F40C9528](cryptorRef);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9730](data, *(void *)&len, md);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1F40D8020](stream, propertyName, propertyValue);
}

void CFRelease(CFTypeRef cf)
{
}

void CFStreamCreatePairWithSocket(CFAllocatorRef alloc, CFSocketNativeHandle sock, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream)
{
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1F40D85A0](string);
}

Boolean CFWriteStreamSetProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1F40D8AF0](stream, propertyName, propertyValue);
}

uint64_t CUTIsInternalInstall()
{
  return MEMORY[0x1F4112A60]();
}

uint64_t CUTProcessNameForPid()
{
  return MEMORY[0x1F4112A68]();
}

uint64_t GLUtilGetLinkOverhead()
{
  return MEMORY[0x1F4122C58]();
}

uint64_t IDSByteBufferInitForRead()
{
  return MEMORY[0x1F4122C68]();
}

uint64_t IDSByteBufferInitForWrite()
{
  return MEMORY[0x1F4122C70]();
}

uint64_t IDSByteBufferInitForWriteWithAllocatedSpace()
{
  return MEMORY[0x1F4122C78]();
}

uint64_t IDSByteBufferReadField()
{
  return MEMORY[0x1F4122C80]();
}

uint64_t IDSByteBufferRelease()
{
  return MEMORY[0x1F4122C88]();
}

uint64_t IDSByteBufferWriteField()
{
  return MEMORY[0x1F4122C90]();
}

uint64_t IDSDataProtectionClassStringFromDataProtectionClass()
{
  return MEMORY[0x1F4122C98]();
}

uint64_t IDSDeviceTypeFromProductName()
{
  return MEMORY[0x1F4122CA0]();
}

uint64_t IDSGetMainBundleIdentifier()
{
  return MEMORY[0x1F4122CA8]();
}

uint64_t IDSGetUUIDData()
{
  return MEMORY[0x1F4122CB0]();
}

uint64_t IDSHBHDecryptDataWithKey()
{
  return MEMORY[0x1F4122CB8]();
}

uint64_t IDSHBHEncryptDataWithKey()
{
  return MEMORY[0x1F4122CC0]();
}

uint64_t IDSIDAliasFixedSalt()
{
  return MEMORY[0x1F4122CC8]();
}

uint64_t IDSIDAliasHashUInt64()
{
  return MEMORY[0x1F4122CD0]();
}

uint64_t IDSIDAliasHashUUIDString()
{
  return MEMORY[0x1F4122CD8]();
}

uint64_t IDSIsValidAccountType()
{
  return MEMORY[0x1F4122CE0]();
}

uint64_t IDSIsValidSigningAlgorithm()
{
  return MEMORY[0x1F4122CE8]();
}

uint64_t IDSLinkPacketBufferAddBufferStart()
{
  return MEMORY[0x1F4122CF8]();
}

uint64_t IDSLinkPacketBufferCleanup()
{
  return MEMORY[0x1F4122D00]();
}

uint64_t IDSLoggableDescriptionForHandleOnService()
{
  return MEMORY[0x1F4122D08]();
}

uint64_t IDSLoggableDescriptionForHandlesOnService()
{
  return MEMORY[0x1F4122D10]();
}

uint64_t IDSPEMFormatCertificates()
{
  return MEMORY[0x1F4122D20]();
}

uint64_t IDSParseDERCertificatesFromChain()
{
  return MEMORY[0x1F4122D30]();
}

uint64_t IDSPowerLogDictionary()
{
  return MEMORY[0x1F4122D38]();
}

uint64_t IDSRealTimeContext()
{
  return MEMORY[0x1F4122D40]();
}

uint64_t IDSTransportThreadAddBlock()
{
  return MEMORY[0x1F4122D48]();
}

uint64_t IDSTransportThreadAddSocket()
{
  return MEMORY[0x1F4122D50]();
}

uint64_t IDSTransportThreadInit()
{
  return MEMORY[0x1F4122D58]();
}

uint64_t IDSTransportThreadRemoveSocket()
{
  return MEMORY[0x1F4122D60]();
}

uint64_t IDSTransportThreadSuspendSocket()
{
  return MEMORY[0x1F4122D68]();
}

uint64_t IMAreEmailsLogicallyTheSame()
{
  return MEMORY[0x1F4123660]();
}

uint64_t IMAreObjectsLogicallySame()
{
  return MEMORY[0x1F4123668]();
}

uint64_t IMCanonicalizeFormattedString()
{
  return MEMORY[0x1F4123678]();
}

uint64_t IMCreateDictionaryFromXPCObjectWithStandardAllowlist()
{
  return MEMORY[0x1F41236D0]();
}

uint64_t IMDispatchForNotify()
{
  return MEMORY[0x1F4123718]();
}

uint64_t IMGetAppValueForKey()
{
  return MEMORY[0x1F4123778]();
}

uint64_t IMGetDomainBoolForKey()
{
  return MEMORY[0x1F41237B8]();
}

uint64_t IMGetDomainBoolForKeyWithDefaultValue()
{
  return MEMORY[0x1F41237C0]();
}

uint64_t IMGetDomainIntForKey()
{
  return MEMORY[0x1F41237C8]();
}

uint64_t IMGetDomainValueForKey()
{
  return MEMORY[0x1F41237D0]();
}

uint64_t IMGetMainBundleIdentifier()
{
  return MEMORY[0x1F4123800]();
}

uint64_t IMGetXPCDataFromDictionary()
{
  return MEMORY[0x1F4123828]();
}

uint64_t IMGetXPCDictionaryFromDictionary()
{
  return MEMORY[0x1F4123830]();
}

uint64_t IMGetXPCKeyedCodableFromDictionaryWithSecureCoding()
{
  return MEMORY[0x1F4123840]();
}

uint64_t IMGetXPCStringFromDictionary()
{
  return MEMORY[0x1F4123848]();
}

uint64_t IMInsertArraysToXPCDictionary()
{
  return MEMORY[0x1F4123858]();
}

uint64_t IMInsertBoolsToXPCDictionary()
{
  return MEMORY[0x1F4123860]();
}

uint64_t IMInsertDictionariesToXPCDictionary()
{
  return MEMORY[0x1F4123878]();
}

uint64_t IMInsertIntsToXPCDictionary()
{
  return MEMORY[0x1F4123880]();
}

uint64_t IMInsertKeyedCodableObjectsToXPCDictionary()
{
  return MEMORY[0x1F4123888]();
}

uint64_t IMInsertNSStringsToXPCDictionary()
{
  return MEMORY[0x1F4123890]();
}

uint64_t IMLogBacktrace()
{
  return MEMORY[0x1F41238B0]();
}

uint64_t IMLogSimulateCrashForException()
{
  return MEMORY[0x1F41238C8]();
}

uint64_t IMShouldLog()
{
  return MEMORY[0x1F4123A30]();
}

uint64_t IMSingleObjectArray()
{
  return MEMORY[0x1F4123A38]();
}

uint64_t IMStringIsPhoneNumber()
{
  return MEMORY[0x1F4123A70]();
}

uint64_t IMUserScopedNotification()
{
  return MEMORY[0x1F4123AE0]();
}

uint64_t IMWeakLinkClass()
{
  return MEMORY[0x1F4123AF0]();
}

uint64_t IMWeakLinkSymbol()
{
  return MEMORY[0x1F4123AF8]();
}

uint64_t IMXPCConfigureConnection()
{
  return MEMORY[0x1F4123B00]();
}

uint64_t IMXPCCreateConnectionForServiceWithQueue()
{
  return MEMORY[0x1F4123B08]();
}

uint64_t JWCopyInvocationArguments()
{
  return MEMORY[0x1F4123B48]();
}

uint64_t JWDecodeDictionary()
{
  return MEMORY[0x1F4123B60]();
}

uint64_t JWEncodeDictionary()
{
  return MEMORY[0x1F4123B70]();
}

uint64_t JWUUIDPushObjectToString()
{
  return MEMORY[0x1F4123B78]();
}

NSArray *__cdecl NSAllMapTableValues(NSMapTable *table)
{
  return (NSArray *)MEMORY[0x1F40E6FE0](table);
}

BOOL NSMapMember(NSMapTable *table, const void *key, void **originalKey, void **value)
{
  return MEMORY[0x1F40E7198](table, key, originalKey, value);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

uint64_t OSLogHandleForIDSCategory()
{
  return MEMORY[0x1F4123B80]();
}

uint64_t OSLogHandleForTransportCategory()
{
  return MEMORY[0x1F4123B98]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1F40F6AD0](certificate);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6EF8](key, algorithm, dataToSign, error);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1F40F70F0](rnd, count, bytes);
}

uint64_t StunUtilPrepareOutgoingChannelData()
{
  return MEMORY[0x1F4122D70]();
}

uint64_t StunUtilProcessIncomingChannelData()
{
  return MEMORY[0x1F4122D78]();
}

uint64_t StunUtilProcessIncomingChannelDataWithoutChannelHeader()
{
  return MEMORY[0x1F4122D80]();
}

uint64_t TrafficClassForIDSOpenSocketPriorityLevel()
{
  return MEMORY[0x1F4122D88]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _IDSBinaryStringForValue()
{
  return MEMORY[0x1F4122D98]();
}

uint64_t _IDSCopyCallerID()
{
  return MEMORY[0x1F4122DA0]();
}

uint64_t _IDSCopyIDForAccessory()
{
  return MEMORY[0x1F4122DA8]();
}

uint64_t _IDSCopyIDForBusinessID()
{
  return MEMORY[0x1F4122DB0]();
}

uint64_t _IDSCopyIDForEmailAddress()
{
  return MEMORY[0x1F4122DB8]();
}

uint64_t _IDSCopyIDForPhoneNumberWithOptions()
{
  return MEMORY[0x1F4122DC0]();
}

uint64_t _IDSCopyIDForPushTokenAndIdentitiesWithService()
{
  return MEMORY[0x1F4122DC8]();
}

uint64_t _IDSDestinationHasValidPrefix()
{
  return MEMORY[0x1F4122DE0]();
}

uint64_t _IDSFZIDTypeFromIDSIDType()
{
  return MEMORY[0x1F4122DE8]();
}

uint64_t _IDSIDSIDTypeFromFZIDType()
{
  return MEMORY[0x1F4122DF8]();
}

uint64_t _IDSIsValidPushPriority()
{
  return MEMORY[0x1F4122E08]();
}

uint64_t _IDSIsValidSendMode()
{
  return MEMORY[0x1F4122E10]();
}

uint64_t _IDSIsValidWakingPushPriority()
{
  return MEMORY[0x1F4122E18]();
}

uint64_t _IDSLinkPacketBufferCreate()
{
  return MEMORY[0x1F4122E20]();
}

uint64_t _IDSLinkPacketBufferRelease()
{
  return MEMORY[0x1F4122E28]();
}

uint64_t _IDSLog()
{
  return MEMORY[0x1F4122E30]();
}

uint64_t _IDSLogV()
{
  return MEMORY[0x1F4122E40]();
}

uint64_t _IDSPrefersPhoneNumbersForServiceIdentifier()
{
  return MEMORY[0x1F4122E48]();
}

uint64_t _IDSQuickRelayProtocolVersionNumber()
{
  return MEMORY[0x1F4122E50]();
}

uint64_t _IDSRegistrationServiceTypeForString()
{
  return MEMORY[0x1F4122E58]();
}

uint64_t _IDSRunningInDaemon()
{
  return MEMORY[0x1F4122E60]();
}

uint64_t _IDSServiceFromRegistrationServiceType()
{
  return MEMORY[0x1F4122E68]();
}

uint64_t _IDSShouldLog()
{
  return MEMORY[0x1F4122E70]();
}

uint64_t _IDSStringFromIDSRegistrationStatus()
{
  return MEMORY[0x1F4122E78]();
}

uint64_t _IDSSupportsDirectMessaging()
{
  return MEMORY[0x1F4122E80]();
}

uint64_t _IDSTypeForID()
{
  return MEMORY[0x1F4122E88]();
}

uint64_t _IDSWarn()
{
  return MEMORY[0x1F4122E90]();
}

uint64_t _IMWarn()
{
  return MEMORY[0x1F4123C00]();
}

uint64_t _StringForIDSAccountType()
{
  return MEMORY[0x1F4122EA8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1F40C9F70](dso, description, activity, *(void *)&flags);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

void abort(void)
{
}

void bzero(void *a1, size_t a2)
{
}

int clonefile(const char *a1, const char *a2, uint32_t a3)
{
  return MEMORY[0x1F40CB3E0](a1, a2, *(void *)&a3);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

uLong crc32_z(uLong crc, const Bytef *buf, z_size_t len)
{
  return MEMORY[0x1F4182BC8](crc, buf, len);
}

uint64_t cut_arc_os_release()
{
  return MEMORY[0x1F4112A88]();
}

uint64_t cut_dispatch_log_queue()
{
  return MEMORY[0x1F4112A90]();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA30](data, buffer_ptr, size_ptr);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1F40CBA48](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1F40CBA68](key);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x1F40CBDF8](*(void *)&a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

uid_t getuid(void)
{
  return MEMORY[0x1F40CC570]();
}

uint64_t ids_monotonic_time()
{
  return MEMORY[0x1F4122EB8]();
}

uint64_t im_dispatch_after_primary_queue()
{
  return MEMORY[0x1F4123C18]();
}

uint64_t im_dispatch_async_with_timeout()
{
  return MEMORY[0x1F4123C20]();
}

uint64_t im_notify_register_dispatch()
{
  return MEMORY[0x1F4123C38]();
}

uint64_t im_primary_queue()
{
  return MEMORY[0x1F4123C48]();
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1F40CC680](*(void *)&a1, a2, a3);
}

uint64_t isRunningTests()
{
  return MEMORY[0x1F4122EC0]();
}

uint64_t jw_uuid_to_data()
{
  return MEMORY[0x1F4123C50]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1F40CC930]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

char *__cdecl mktemp(char *a1)
{
  return (char *)MEMORY[0x1F40CCE28](a1);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

void nw_connection_batch(nw_connection_t connection, dispatch_block_t batch_block)
{
}

void nw_connection_cancel(nw_connection_t connection)
{
}

nw_path_t nw_connection_copy_current_path(nw_connection_t connection)
{
  return (nw_path_t)MEMORY[0x1F40F2A90](connection);
}

nw_parameters_t nw_connection_copy_parameters(nw_connection_t connection)
{
  return (nw_parameters_t)MEMORY[0x1F40F2AC0](connection);
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return (nw_connection_t)MEMORY[0x1F40F2AE0](endpoint, parameters);
}

uint64_t nw_connection_create_with_client_id()
{
  return MEMORY[0x1F40F2AF8]();
}

uint64_t nw_connection_create_with_connected_socket()
{
  return MEMORY[0x1F40F2B00]();
}

uint64_t nw_connection_create_with_connected_socket_and_parameters()
{
  return MEMORY[0x1F40F2B08]();
}

uint64_t nw_connection_get_id()
{
  return MEMORY[0x1F40F2B48]();
}

uint64_t nw_connection_read_multiple()
{
  return MEMORY[0x1F40F2BE8]();
}

void nw_connection_receive(nw_connection_t connection, uint32_t minimum_incomplete_length, uint32_t maximum_length, nw_connection_receive_completion_t completion)
{
}

uint64_t nw_connection_receive_multiple()
{
  return MEMORY[0x1F40F2C08]();
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
}

uint64_t nw_connection_set_event_handler()
{
  return MEMORY[0x1F40F2C60]();
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
}

void nw_connection_start(nw_connection_t connection)
{
}

uint64_t nw_connection_state_to_string()
{
  return MEMORY[0x1F40F2CB8]();
}

nw_protocol_metadata_t nw_content_context_copy_protocol_metadata(nw_content_context_t context, nw_protocol_definition_t protocol)
{
  return (nw_protocol_metadata_t)MEMORY[0x1F40F2CF0](context, protocol);
}

nw_content_context_t nw_content_context_create(const char *context_identifier)
{
  return (nw_content_context_t)MEMORY[0x1F40F2CF8](context_identifier);
}

void nw_content_context_set_expiration_milliseconds(nw_content_context_t context, uint64_t expiration_milliseconds)
{
}

void nw_content_context_set_metadata_for_protocol(nw_content_context_t context, nw_protocol_metadata_t protocol_metadata)
{
}

uint64_t nw_content_context_set_packet_id()
{
  return MEMORY[0x1F40F2D38]();
}

uint64_t nw_endpoint_create_apple_service()
{
  return MEMORY[0x1F40F2E90]();
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2EA8](hostname, port);
}

int nw_error_get_error_code(nw_error_t error)
{
  return MEMORY[0x1F40F2F60](error);
}

nw_protocol_definition_t nw_framer_create_definition(const char *identifier, uint32_t flags, nw_framer_start_handler_t start_handler)
{
  return (nw_protocol_definition_t)MEMORY[0x1F40F3120](identifier, *(void *)&flags, start_handler);
}

nw_protocol_options_t nw_framer_create_options(nw_protocol_definition_t framer_definition)
{
  return (nw_protocol_options_t)MEMORY[0x1F40F3128](framer_definition);
}

BOOL nw_framer_deliver_input_no_copy(nw_framer_t framer, size_t input_length, nw_framer_message_t message, BOOL is_complete)
{
  return MEMORY[0x1F40F3130](framer, input_length, message, is_complete);
}

nw_framer_message_t nw_framer_message_create(nw_framer_t framer)
{
  return (nw_framer_message_t)MEMORY[0x1F40F3150](framer);
}

BOOL nw_framer_parse_input(nw_framer_t framer, size_t minimum_incomplete_length, size_t maximum_length, uint8_t *temp_buffer, nw_framer_parse_completion_t parse)
{
  return MEMORY[0x1F40F3160](framer, minimum_incomplete_length, maximum_length, temp_buffer, parse);
}

void nw_framer_set_input_handler(nw_framer_t framer, nw_framer_input_handler_t input_handler)
{
}

void nw_framer_set_output_handler(nw_framer_t framer, nw_framer_output_handler_t output_handler)
{
}

void nw_framer_write_output(nw_framer_t framer, const uint8_t *output_buffer, size_t output_length)
{
}

BOOL nw_framer_write_output_no_copy(nw_framer_t framer, size_t output_length)
{
  return MEMORY[0x1F40F31B0](framer, output_length);
}

uint64_t nw_group_descriptor_create_apple_id()
{
  return MEMORY[0x1F40F31B8]();
}

nw_protocol_metadata_t nw_ip_create_metadata(void)
{
  return (nw_protocol_metadata_t)MEMORY[0x1F40F32B8]();
}

nw_ip_ecn_flag_t nw_ip_metadata_get_ecn_flag(nw_protocol_metadata_t metadata)
{
  return MEMORY[0x1F40F32C0](metadata);
}

void nw_ip_metadata_set_ecn_flag(nw_protocol_metadata_t metadata, nw_ip_ecn_flag_t ecn_flag)
{
}

void nw_ip_metadata_set_service_class(nw_protocol_metadata_t metadata, nw_service_class_t service_class)
{
}

void nw_ip_options_set_disable_fragmentation(nw_protocol_options_t options, BOOL disable_fragmentation)
{
}

nw_listener_t nw_listener_create_with_port(const char *port, nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x1F40F3330](port, parameters);
}

uint16_t nw_listener_get_port(nw_listener_t listener)
{
  return MEMORY[0x1F40F3338](listener);
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
}

void nw_listener_set_state_changed_handler(nw_listener_t listener, nw_listener_state_changed_handler_t handler)
{
}

void nw_listener_start(nw_listener_t listener)
{
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return (nw_protocol_stack_t)MEMORY[0x1F40F3418](parameters);
}

nw_parameters_t nw_parameters_create(void)
{
  return (nw_parameters_t)MEMORY[0x1F40F3488]();
}

uint64_t nw_parameters_create_quic_stream()
{
  return MEMORY[0x1F40F34C8]();
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return (nw_parameters_t)MEMORY[0x1F40F34D0](configure_tls, configure_tcp);
}

uint64_t nw_parameters_set_account_id()
{
  return MEMORY[0x1F40F35A0]();
}

uint64_t nw_parameters_set_context()
{
  return MEMORY[0x1F40F35E0]();
}

uint64_t nw_parameters_set_data_mode()
{
  return MEMORY[0x1F40F35E8]();
}

uint64_t nw_parameters_set_indefinite()
{
  return MEMORY[0x1F40F3660]();
}

uint64_t nw_parameters_set_local_address()
{
  return MEMORY[0x1F40F3680]();
}

uint64_t nw_parameters_set_required_netagent_classes()
{
  return MEMORY[0x1F40F3750]();
}

uint64_t nw_path_assert_agent()
{
  return MEMORY[0x1F40F37F0]();
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return MEMORY[0x1F40F3858]();
}

uint64_t nw_path_evaluator_cancel()
{
  return MEMORY[0x1F40F3878]();
}

uint64_t nw_path_evaluator_copy_path()
{
  return MEMORY[0x1F40F3880]();
}

uint64_t nw_path_evaluator_set_update_handler()
{
  return MEMORY[0x1F40F38B0]();
}

uint64_t nw_path_get_nexus_agent_uuid()
{
  return MEMORY[0x1F40F3900]();
}

uint64_t nw_path_get_nexus_instance()
{
  return MEMORY[0x1F40F3908]();
}

uint64_t nw_path_get_nexus_key()
{
  return MEMORY[0x1F40F3910]();
}

uint64_t nw_path_request_nexus()
{
  return MEMORY[0x1F40F39F0]();
}

uint64_t nw_path_uses_nexus()
{
  return MEMORY[0x1F40F3A08]();
}

nw_protocol_definition_t nw_protocol_copy_ip_definition(void)
{
  return (nw_protocol_definition_t)MEMORY[0x1F40F3A18]();
}

uint64_t nw_protocol_copy_qpod_definition()
{
  return MEMORY[0x1F40F3A20]();
}

uint64_t nw_protocol_stack_append_application_protocol()
{
  return MEMORY[0x1F40F3B48]();
}

nw_protocol_options_t nw_protocol_stack_copy_internet_protocol(nw_protocol_stack_t stack)
{
  return (nw_protocol_options_t)MEMORY[0x1F40F3B58](stack);
}

void nw_protocol_stack_prepend_application_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
}

uint64_t nw_queue_context_target_dispatch_queue()
{
  return MEMORY[0x1F40F3CA0]();
}

uint64_t nw_quic_connection_copy_sec_protocol_options()
{
  return MEMORY[0x1F40F3CE0]();
}

sec_protocol_options_t nw_tls_copy_sec_protocol_options(nw_protocol_options_t options)
{
  return (sec_protocol_options_t)MEMORY[0x1F40F3F58](options);
}

nw_protocol_options_t nw_tls_create_options(void)
{
  return (nw_protocol_options_t)MEMORY[0x1F40F3F60]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

uint64_t os_channel_advance_slot()
{
  return MEMORY[0x1F40CD180]();
}

uint64_t os_channel_attr_create()
{
  return MEMORY[0x1F40CD188]();
}

uint64_t os_channel_attr_destroy()
{
  return MEMORY[0x1F40CD190]();
}

uint64_t os_channel_attr_set()
{
  return MEMORY[0x1F40CD1A0]();
}

uint64_t os_channel_attr_set_key()
{
  return MEMORY[0x1F40CD1A8]();
}

uint64_t os_channel_available_slot_count()
{
  return MEMORY[0x1F40CD1B0]();
}

uint64_t os_channel_create_extended()
{
  return MEMORY[0x1F40CD1C0]();
}

uint64_t os_channel_destroy()
{
  return MEMORY[0x1F40CD1C8]();
}

uint64_t os_channel_get_fd()
{
  return MEMORY[0x1F40CD200]();
}

uint64_t os_channel_get_next_slot()
{
  return MEMORY[0x1F40CD218]();
}

uint64_t os_channel_ring_id()
{
  return MEMORY[0x1F40CD258]();
}

uint64_t os_channel_rx_ring()
{
  return MEMORY[0x1F40CD270]();
}

uint64_t os_channel_set_slot_properties()
{
  return MEMORY[0x1F40CD278]();
}

uint64_t os_channel_sync()
{
  return MEMORY[0x1F40CD298]();
}

uint64_t os_channel_tx_ring()
{
  return MEMORY[0x1F40CD2A0]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

uint64_t os_log_shim_legacy_logging_enabled()
{
  return MEMORY[0x1F40CD3A0]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A8](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

uint64_t pthread_dependency_init_np()
{
  return MEMORY[0x1F40CD9C8]();
}

uint64_t pthread_dependency_wait_np()
{
  return MEMORY[0x1F40CD9D0]();
}

uint64_t pthread_main_thread_np()
{
  return MEMORY[0x1F40CDA70]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1F40CDDD0]();
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1F40CDDF8]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1F40CDE00]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x1F40CDE50]();
}

void sec_protocol_options_add_pre_shared_key(sec_protocol_options_t options, dispatch_data_t psk, dispatch_data_t psk_identity)
{
}

void sec_protocol_options_set_verify_block(sec_protocol_options_t options, sec_protocol_verify_t verify_block, dispatch_queue_t verify_block_queue)
{
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1F40CDFC0](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

int socketpair(int a1, int a2, int a3, int *a4)
{
  return MEMORY[0x1F40CE098](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

uint64_t throwsIDSAbortException()
{
  return MEMORY[0x1F4122EC8]();
}

void uuid_clear(uuid_t uu)
{
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1F40CE630](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1F40CE658](uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1F40CE660](in, uu);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1F40CEC68](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_object_t xpc_fd_create(int fd)
{
  return (xpc_object_t)MEMORY[0x1F40CF0B8](*(void *)&fd);
}

int xpc_fd_dup(xpc_object_t xfd)
{
  return MEMORY[0x1F40CF0D0](xfd);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1F40CF190](xint);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1F40CF2C8](xstring);
}